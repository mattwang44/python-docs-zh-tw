Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/frame", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/enum", "howto/functional", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/isolating-extensions", "howto/logging", "howto/logging-cookbook", "howto/perf_profiling", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "includes/wasm-notavail", "install/index", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asynchat", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-extending", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-runner", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/asyncore", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/imp", "library/importlib", "library/importlib.metadata", "library/importlib.resources", "library/importlib.resources.abc", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sys_path_init", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/tomllib", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.11", "whatsnew/3.12", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/frame.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/enum.rst", "howto/functional.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/isolating-extensions.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/perf_profiling.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "includes/wasm-notavail.rst", "install/index.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asynchat.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-extending.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-runner.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/asyncore.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/imp.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/importlib.resources.rst", "library/importlib.resources.abc.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sys_path_init.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/tomllib.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.11.rst", "whatsnew/3.12.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "Allocating Objects on the Heap", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "Parsing arguments and building values", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Byte Array Objects", "Bytes Objects", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "Code Objects", "Codec registry and support functions", "Complex Number Objects", "Concrete Objects Layer", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\uff08File\uff09\u7269\u4ef6", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "Frame Objects", "\u51fd\u5f0f\uff08Function\uff09\u7269\u4ef6", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668\u7269\u4ef6", "\u532f\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "Iterator Protocol", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "Set Objects", "\u5207\u7247\u7269\u4ef6", "C API Stability", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "\u5143\u7d44\uff08Tuple\uff09\u7269\u4ef6", "Type Objects", "Objects for Type Hinting", "Type Objects", "Unicode\u7269\u4ef6\u8207\u7de8\u78bc", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "<span class=\"section-number\">4. </span>Building C and C++ Extensions", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "Extending/Embedding FAQ", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "Annotations Best Practices", "Argparse \u6559\u5b78", "Argument Clinic How-To", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u4fee\u98fe\u5668 HowTo \u6307\u5357", "Enum HOWTO", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "Instrumenting CPython with DTrace and SystemTap", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "Isolating Extension Modules", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "Python support for the Linux <code class=\"docutils literal notranslate\"><span class=\"pre\">perf</span></code> profiler", "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket Programming HOWTO", "\u5982\u4f55\u6392\u5e8f", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "&lt;no title&gt;", "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future statement definitions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- Top-level code environment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- Abstract Base Classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- Abstract Syntax Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asynchat</span></code> --- \u975e\u540c\u6b65 socket \u6307\u4ee4/\u56de\u61c9\u8655\u7406\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Extending", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "Runners", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncore</span></code> --- \u975e\u540c\u6b65 socket \u8655\u7406\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- Debugger framework", "Binary Data Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- General calendar-related functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- Mathematical functions for complex numbers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- Configuration file parser", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- Register <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> support functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV File Reading and Writing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- Utilities for ASCII characters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Interfaces to Unix &quot;databases&quot;", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: Representing character sets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- Bootstrapping the <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> installer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- Support for enumerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP protocol client", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- Garbage Collector interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix style pathname pattern expansion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> --- Functionality to operate with graph-like structures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- Support for <strong class=\"program\">gzip</strong> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- HyperText Markup Language support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- Definitions of HTML general entities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- Simple HTML and XHTML parser", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> --- HTTP servers", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imp</span></code> --- Access the <span class=\"xref std std-ref\">import</span> internals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- The implementation of <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code>", "Using <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code> -- Resources", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code> -- Abstract base classes for resources", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- Inspect live objects", "Internet Protocols and Support", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> --- Core tools for working with streams", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- Functions creating iterators for efficient looping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON encoder and decoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- Testing for Python keywords", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> --- Internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Logging facility for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- Manipulate mailboxes in various formats", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "Multimedia Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u532f\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- Shared memory for direct access across processes", "Internet Data Handling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc file processing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- Numeric abstract base classes", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- Miscellaneous operating system interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- Common pathname manipulations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- Object-oriented filesystem paths", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python object serialization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- Tools for pickle developers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- The most common POSIX system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- The password database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> --- Compile Python source files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- Encode and decode MIME quoted-printable data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- Regular expression operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "Security Considerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> --- High-level file operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- DB-API 2.0 interface for SQLite databases", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- TLS/SSL wrapper for socket objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- Common string operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- Subprocess management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- Access to the compiler's symbol tables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- System-specific parameters and functions", "The initialization of the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> module search path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- Detection of ambiguous indentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Regression tests package for Python", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- Measure execution time of small code snippets", "\u4ee5 Tk \u6253\u9020 GUI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- Color choosing dialog", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter font wrapper", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter message prompts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tomllib</span></code> --- \u5256\u6790 TOML \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- Support for type hints", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- mock object library", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- getting started", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- UUID objects according to <strong>RFC 4122</strong>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- Read and write WAV files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI Utilities and Reference Implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u670d\u52d9\u7aef\u8207\u5ba2\u6236\u7aef\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> --- Manage executable Python zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- Compression compatible with <strong class=\"program\">gzip</strong>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA time zone support", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>Data model", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>Top-level components", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>Command line and environment", "<span class=\"section-number\">3. </span>Configure Python", "<span class=\"section-number\">6. </span>Editors and IDEs", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "What's New In Python 3.12", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 66, 78, 82, 99, 473, 482], "restructuredtext": [0, 66, 78, 192, 482], "bug": [0, 34, 55, 57, 61, 66, 70, 71, 76, 77, 78, 82, 87, 91, 93, 99, 101, 105, 124, 151, 176, 207, 224, 241, 242, 258, 271, 293, 296, 299, 308, 340, 341, 348, 361, 364, 367, 388, 406, 443, 445, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "fred": [0, 99, 314, 368, 434, 461, 462, 463, 464, 466, 467, 478], "drake": [0, 461, 462, 463, 464, 466, 467], "jr": [0, 82, 462, 463, 464, 466, 467], "docutil": [0, 467, 482], "fredrik": [0, 83, 93, 425, 461, 462, 463, 465, 466, 468, 470, 474], "lundh": [0, 83, 93, 425, 461, 462, 463, 465, 466, 468, 474], "altern": [0, 18, 23, 30, 44, 61, 66, 68, 71, 82, 83, 88, 91, 93, 102, 105, 106, 110, 114, 118, 120, 125, 131, 136, 137, 138, 143, 147, 154, 157, 160, 166, 172, 174, 175, 176, 177, 180, 181, 185, 192, 195, 198, 199, 204, 209, 210, 213, 214, 217, 220, 222, 224, 227, 241, 247, 251, 254, 261, 267, 268, 269, 272, 275, 283, 292, 293, 295, 297, 299, 305, 306, 314, 324, 332, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 357, 358, 364, 367, 368, 374, 375, 380, 383, 385, 387, 388, 389, 393, 398, 399, 401, 404, 406, 424, 425, 429, 430, 431, 432, 454, 457, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482], "refer": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 64, 65, 66, 69, 70, 72, 74, 75, 76, 82, 85, 88, 91, 96, 97, 98, 99, 102, 106, 108, 112, 113, 116, 118, 120, 125, 128, 132, 135, 136, 138, 139, 140, 141, 142, 144, 154, 157, 163, 166, 169, 176, 181, 182, 184, 190, 204, 209, 210, 211, 212, 214, 224, 225, 226, 227, 229, 232, 234, 237, 238, 239, 242, 244, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 262, 267, 268, 269, 271, 273, 278, 284, 288, 289, 293, 294, 297, 298, 299, 302, 306, 307, 313, 314, 319, 321, 324, 329, 332, 333, 334, 337, 341, 344, 345, 347, 350, 352, 355, 360, 361, 364, 365, 367, 374, 375, 376, 380, 383, 384, 385, 387, 388, 389, 393, 394, 399, 404, 408, 409, 410, 414, 416, 420, 421, 424, 426, 427, 428, 432, 433, 434, 435, 439, 440, 444, 454, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "misc": [0, 34, 66, 78, 222, 344, 375, 455, 461, 464, 465, 466, 467, 468, 469, 474, 476, 482, 483], "ack": [0, 177, 467], "tracker": [1, 66, 283, 361, 466, 468, 482], "https": [1, 66, 69, 73, 76, 77, 78, 79, 82, 83, 93, 98, 99, 101, 105, 106, 108, 125, 135, 159, 161, 168, 182, 225, 234, 238, 239, 241, 242, 247, 251, 261, 269, 307, 313, 314, 318, 319, 326, 328, 340, 341, 344, 352, 378, 385, 386, 387, 393, 394, 398, 402, 406, 410, 412, 418, 423, 425, 427, 434, 439, 443, 444, 450, 452, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 479, 480, 482], "github": [1, 68, 73, 78, 109, 247, 307, 387, 425, 458, 473, 478, 479, 482], "com": [1, 66, 67, 71, 73, 78, 82, 83, 91, 98, 99, 101, 102, 106, 135, 161, 165, 166, 175, 182, 183, 199, 242, 247, 261, 288, 297, 307, 318, 319, 326, 340, 341, 344, 387, 394, 395, 404, 412, 418, 452, 453, 458, 460, 463, 465, 466, 467, 468, 473, 474, 475, 476, 477, 480, 482], "doc": [1, 23, 56, 58, 66, 73, 74, 77, 78, 91, 101, 102, 175, 193, 204, 222, 224, 241, 246, 251, 255, 258, 262, 285, 293, 296, 313, 341, 352, 361, 366, 384, 393, 402, 404, 411, 451, 453, 455, 459, 460, 461, 463, 464, 466, 467, 468, 471, 473, 474, 478, 479, 480, 482], "zh": 1, "tw": [1, 157], "issu": [1, 7, 22, 24, 31, 32, 33, 55, 59, 64, 66, 74, 78, 91, 98, 99, 101, 105, 112, 117, 118, 125, 134, 139, 155, 157, 175, 176, 180, 184, 185, 187, 202, 212, 220, 222, 224, 234, 241, 246, 247, 258, 262, 266, 267, 271, 272, 283, 292, 293, 296, 299, 311, 333, 335, 337, 341, 344, 348, 361, 383, 385, 387, 388, 389, 398, 399, 401, 408, 411, 412, 420, 425, 454, 457, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "org": [1, 55, 66, 68, 73, 76, 77, 82, 85, 93, 99, 103, 105, 106, 108, 109, 125, 139, 159, 166, 168, 183, 222, 225, 234, 238, 239, 241, 242, 246, 247, 283, 288, 303, 307, 313, 314, 319, 328, 335, 337, 340, 341, 344, 352, 354, 386, 393, 394, 395, 397, 398, 402, 410, 412, 414, 418, 425, 427, 434, 439, 443, 444, 450, 452, 453, 454, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 477, 479, 480, 481, 482], "list": [1, 2, 5, 7, 14, 16, 18, 23, 30, 32, 33, 34, 39, 41, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 64, 66, 68, 71, 73, 74, 75, 77, 78, 82, 84, 85, 87, 88, 90, 91, 92, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 115, 117, 118, 119, 120, 125, 127, 132, 135, 138, 139, 140, 144, 150, 151, 155, 157, 159, 160, 162, 163, 166, 168, 169, 170, 172, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 215, 217, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 310, 311, 312, 314, 316, 318, 319, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 348, 350, 351, 352, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 395, 399, 401, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 439, 442, 444, 445, 447, 449, 450, 452, 453, 454, 455, 456, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "cpython": [1, 4, 10, 13, 32, 34, 52, 55, 57, 61, 66, 69, 71, 73, 74, 78, 83, 85, 87, 88, 94, 97, 142, 157, 160, 185, 187, 190, 209, 212, 213, 224, 234, 236, 249, 250, 255, 257, 275, 283, 293, 296, 303, 311, 316, 320, 324, 343, 344, 348, 352, 361, 364, 378, 384, 401, 406, 424, 426, 427, 428, 429, 430, 433, 435, 449, 454, 455, 459, 460, 462, 463, 464, 466, 467, 468, 474, 475, 477, 482, 483], "sign": [1, 18, 34, 48, 66, 73, 83, 102, 119, 141, 154, 157, 166, 175, 176, 182, 185, 195, 200, 208, 220, 224, 227, 234, 266, 268, 269, 272, 275, 283, 292, 293, 295, 297, 299, 319, 336, 344, 345, 347, 364, 365, 393, 412, 427, 429, 434, 460, 462, 463, 465, 466, 467, 468, 473, 474, 476, 478, 480, 482], "up": [1, 7, 9, 14, 23, 32, 34, 35, 41, 44, 55, 61, 62, 66, 71, 73, 74, 75, 82, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 105, 114, 118, 120, 125, 131, 137, 138, 140, 147, 150, 151, 157, 162, 165, 166, 176, 178, 182, 185, 189, 190, 192, 193, 196, 199, 207, 208, 210, 212, 220, 221, 222, 224, 225, 226, 229, 234, 239, 241, 242, 244, 246, 249, 252, 255, 258, 261, 265, 266, 267, 268, 269, 270, 275, 276, 278, 280, 282, 283, 284, 292, 293, 294, 296, 297, 308, 309, 311, 315, 319, 320, 323, 328, 331, 333, 334, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 355, 357, 358, 361, 363, 364, 368, 373, 374, 375, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 401, 406, 409, 412, 415, 416, 420, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 440, 449, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "new": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 70, 71, 73, 74, 76, 77, 82, 83, 85, 86, 87, 88, 90, 91, 92, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 118, 120, 121, 125, 127, 128, 131, 132, 134, 137, 138, 139, 143, 144, 149, 151, 153, 155, 156, 157, 159, 160, 165, 166, 168, 169, 173, 174, 175, 176, 177, 180, 182, 183, 185, 187, 190, 192, 193, 194, 195, 197, 199, 200, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 220, 222, 224, 225, 226, 231, 233, 234, 235, 236, 241, 246, 247, 249, 250, 255, 257, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 276, 278, 280, 281, 283, 284, 288, 293, 295, 296, 297, 299, 300, 301, 304, 307, 308, 309, 312, 314, 315, 319, 320, 322, 325, 328, 329, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 350, 351, 352, 354, 357, 360, 361, 364, 365, 368, 371, 374, 375, 379, 381, 383, 384, 385, 387, 388, 389, 393, 394, 398, 402, 404, 406, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 424, 426, 427, 429, 431, 433, 435, 439, 440, 441, 448, 450, 451, 454, 455, 460, 482, 483], "titl": [1, 62, 66, 82, 91, 93, 102, 105, 106, 118, 151, 159, 183, 188, 221, 239, 246, 262, 267, 281, 283, 292, 337, 340, 344, 345, 368, 372, 383, 385, 394, 410, 411, 412, 419, 461, 463, 465, 472, 474, 480, 482], "comment": [1, 9, 62, 66, 71, 88, 93, 99, 102, 105, 110, 117, 120, 166, 175, 192, 202, 221, 239, 242, 243, 246, 255, 256, 264, 273, 286, 293, 299, 300, 310, 313, 314, 319, 331, 348, 361, 376, 377, 393, 411, 412, 414, 421, 422, 425, 430, 435, 448, 461, 463, 464, 466, 468, 469, 474, 480, 482], "mozilla": [1, 106, 242, 341, 394, 402, 465, 482], "patch": [1, 55, 66, 78, 82, 87, 90, 95, 102, 118, 176, 186, 240, 241, 288, 344, 361, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 477, 478, 480, 481, 482], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 73, 74, 75, 85, 87, 92, 95, 97, 98, 99, 102, 103, 104, 106, 111, 113, 114, 116, 118, 119, 120, 122, 124, 125, 127, 134, 135, 138, 139, 140, 144, 145, 148, 149, 151, 152, 153, 154, 156, 159, 165, 166, 167, 168, 170, 172, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 189, 191, 194, 195, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 212, 214, 218, 220, 221, 222, 224, 225, 226, 229, 230, 233, 234, 235, 236, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 255, 256, 257, 258, 259, 261, 262, 265, 268, 269, 271, 273, 275, 278, 279, 280, 281, 283, 284, 288, 289, 291, 292, 294, 295, 296, 298, 300, 302, 303, 305, 306, 307, 313, 314, 318, 319, 320, 321, 323, 327, 328, 331, 332, 334, 335, 337, 338, 341, 343, 344, 345, 347, 348, 351, 352, 355, 356, 357, 359, 362, 364, 365, 367, 375, 378, 380, 381, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 401, 402, 404, 406, 408, 409, 410, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 438, 440, 441, 442, 443, 445, 446, 452, 453, 454, 456], "except": [2, 5, 7, 9, 11, 13, 14, 17, 18, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 44, 46, 47, 48, 50, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 72, 73, 74, 76, 77, 82, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 101, 102, 103, 105, 108, 110, 111, 112, 113, 115, 116, 118, 120, 121, 124, 125, 126, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 166, 169, 170, 172, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 187, 189, 190, 193, 194, 195, 199, 200, 204, 205, 206, 207, 209, 211, 213, 214, 217, 222, 224, 225, 226, 227, 228, 231, 233, 234, 239, 241, 242, 243, 244, 246, 247, 249, 250, 254, 255, 256, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 278, 279, 281, 283, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 299, 302, 304, 305, 306, 308, 311, 314, 315, 316, 317, 320, 322, 323, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 352, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 377, 378, 380, 381, 385, 387, 388, 392, 393, 394, 396, 398, 399, 400, 401, 402, 404, 406, 407, 409, 410, 412, 413, 414, 415, 418, 419, 421, 422, 423, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 444, 449, 451, 454, 455, 460, 461, 462, 463, 464, 465, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "pylist_new": [2, 34, 37, 55], "null": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 73, 74, 77, 91, 97, 99, 101, 105, 108, 120, 174, 175, 190, 224, 226, 242, 262, 272, 281, 287, 293, 299, 318, 319, 337, 340, 341, 347, 348, 404, 407, 409, 410, 421, 430, 434, 435, 461, 465, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482], "protocol": [2, 8, 9, 23, 28, 31, 53, 56, 59, 61, 64, 66, 72, 77, 82, 85, 88, 92, 93, 96, 99, 103, 105, 106, 114, 119, 121, 122, 125, 129, 136, 139, 141, 142, 145, 146, 151, 157, 160, 168, 174, 175, 182, 183, 186, 193, 202, 208, 211, 216, 224, 234, 240, 242, 244, 250, 251, 254, 255, 258, 260, 262, 267, 268, 269, 271, 283, 288, 293, 294, 295, 299, 300, 328, 329, 330, 337, 338, 340, 344, 346, 347, 357, 358, 361, 364, 368, 388, 389, 394, 404, 406, 415, 418, 419, 422, 426, 427, 429, 434, 455, 461, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 476, 479, 481, 482, 483], "call": [2, 3, 5, 7, 9, 11, 13, 14, 15, 17, 18, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41, 44, 46, 47, 48, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 82, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 149, 151, 153, 155, 156, 157, 159, 160, 162, 163, 165, 166, 168, 169, 172, 174, 176, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 222, 223, 224, 225, 226, 229, 230, 231, 233, 234, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 288, 289, 291, 293, 294, 295, 296, 297, 299, 302, 305, 307, 308, 309, 310, 314, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 434, 435, 439, 440, 441, 442, 445, 448, 450, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 482], "tp_call": [2, 23, 61, 66, 73, 473, 482], "vectorcal": [2, 27, 56, 61, 66, 471, 472, 473, 481, 482], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 34, 37, 38, 44, 45, 47, 53, 56, 57, 59, 61, 62, 63, 66, 70, 72, 73, 74, 77, 82, 85, 86, 89, 90, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 118, 124, 126, 127, 128, 131, 132, 135, 136, 138, 140, 142, 158, 160, 163, 168, 169, 174, 175, 176, 184, 186, 187, 190, 191, 193, 194, 196, 197, 200, 201, 202, 204, 205, 207, 208, 210, 216, 222, 227, 234, 235, 245, 250, 254, 255, 257, 258, 259, 261, 262, 267, 268, 269, 271, 273, 280, 281, 282, 283, 285, 293, 294, 295, 298, 302, 304, 318, 319, 320, 337, 341, 342, 345, 352, 354, 356, 359, 361, 364, 368, 378, 385, 387, 388, 389, 393, 399, 404, 405, 406, 408, 410, 413, 414, 418, 419, 428, 429, 431, 432, 434, 435, 439, 440, 444, 450, 460, 461, 462, 463, 483], "number": [2, 3, 4, 5, 7, 9, 13, 16, 18, 20, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41, 49, 52, 53, 56, 57, 58, 62, 64, 66, 70, 71, 73, 74, 75, 76, 77, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 108, 110, 113, 114, 115, 116, 118, 120, 121, 125, 131, 132, 136, 137, 138, 139, 141, 144, 146, 149, 150, 151, 152, 155, 157, 159, 162, 165, 166, 169, 172, 174, 175, 176, 182, 185, 187, 189, 190, 192, 194, 195, 198, 201, 202, 204, 207, 210, 211, 212, 213, 214, 215, 217, 222, 224, 225, 226, 229, 231, 233, 234, 235, 239, 241, 243, 244, 246, 247, 249, 250, 251, 254, 255, 257, 258, 259, 261, 264, 266, 267, 269, 270, 271, 272, 274, 276, 278, 281, 283, 284, 285, 286, 288, 290, 292, 294, 295, 296, 297, 299, 300, 304, 305, 307, 308, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 328, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 354, 357, 358, 361, 363, 364, 365, 366, 368, 371, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 409, 412, 413, 415, 416, 418, 421, 424, 426, 427, 429, 430, 431, 433, 434, 435, 436, 440, 441, 442, 443, 444, 449, 450, 451, 454, 456, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "sequenc": [2, 5, 7, 14, 16, 22, 31, 32, 34, 36, 38, 41, 48, 49, 54, 57, 62, 64, 66, 73, 77, 82, 85, 88, 90, 92, 93, 97, 99, 102, 105, 110, 120, 125, 138, 143, 145, 156, 157, 158, 160, 162, 163, 174, 175, 176, 181, 186, 188, 189, 190, 192, 195, 201, 204, 205, 208, 211, 212, 217, 224, 229, 231, 235, 237, 242, 250, 254, 255, 258, 259, 261, 262, 263, 266, 268, 270, 271, 275, 276, 281, 283, 284, 292, 293, 294, 296, 299, 300, 301, 302, 307, 312, 314, 318, 319, 321, 325, 326, 332, 337, 340, 341, 343, 345, 350, 357, 358, 361, 362, 365, 366, 368, 375, 377, 380, 381, 383, 385, 386, 387, 388, 389, 393, 394, 397, 399, 401, 404, 409, 412, 413, 418, 423, 424, 427, 429, 433, 434, 435, 439, 440, 444, 448, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "map": [2, 16, 22, 31, 32, 33, 41, 48, 49, 57, 64, 66, 73, 76, 77, 82, 83, 85, 88, 91, 92, 93, 99, 100, 105, 106, 110, 114, 120, 121, 139, 143, 155, 157, 159, 160, 163, 165, 168, 169, 174, 176, 180, 181, 182, 183, 185, 186, 189, 190, 192, 194, 195, 202, 204, 210, 211, 212, 215, 216, 224, 225, 229, 235, 238, 241, 244, 246, 254, 255, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 273, 279, 280, 281, 283, 285, 286, 287, 288, 291, 292, 293, 295, 296, 298, 299, 308, 312, 314, 318, 319, 321, 322, 329, 337, 340, 341, 343, 345, 346, 348, 350, 352, 361, 364, 365, 366, 367, 375, 376, 383, 384, 385, 386, 388, 393, 394, 401, 406, 410, 412, 414, 415, 427, 429, 430, 431, 435, 439, 440, 441, 449, 451, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "iter": [2, 13, 16, 22, 29, 31, 32, 48, 52, 53, 61, 62, 66, 73, 76, 85, 86, 91, 96, 102, 104, 110, 114, 119, 120, 125, 132, 135, 138, 144, 149, 150, 151, 157, 159, 160, 165, 166, 168, 169, 174, 175, 180, 181, 186, 190, 193, 194, 195, 196, 204, 210, 212, 218, 219, 223, 224, 225, 229, 230, 231, 233, 234, 235, 241, 242, 251, 252, 253, 254, 255, 256, 258, 262, 266, 267, 270, 271, 273, 275, 283, 285, 288, 293, 296, 297, 299, 300, 304, 308, 318, 319, 328, 337, 340, 343, 345, 347, 352, 361, 377, 384, 385, 388, 393, 394, 401, 406, 409, 412, 413, 414, 418, 424, 426, 430, 431, 435, 440, 441, 442, 444, 449, 461, 462, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483], "buffer": [2, 8, 9, 18, 24, 31, 32, 33, 40, 41, 42, 49, 62, 63, 64, 66, 73, 85, 88, 90, 98, 103, 110, 116, 118, 119, 121, 125, 126, 129, 135, 136, 139, 142, 146, 149, 151, 156, 157, 175, 176, 186, 187, 211, 212, 213, 214, 224, 233, 234, 239, 241, 244, 269, 270, 278, 282, 283, 284, 293, 295, 296, 298, 314, 322, 328, 331, 332, 333, 337, 341, 344, 347, 348, 352, 357, 358, 359, 361, 362, 364, 387, 394, 406, 407, 412, 413, 421, 423, 454, 455, 463, 464, 465, 466, 467, 468, 469, 471, 474, 476, 477, 478, 479, 481, 482, 483], "structur": [2, 3, 5, 13, 16, 17, 20, 22, 26, 27, 29, 30, 31, 32, 33, 34, 41, 42, 44, 46, 49, 50, 53, 55, 56, 57, 59, 64, 66, 71, 73, 74, 76, 77, 83, 88, 90, 91, 93, 97, 98, 102, 108, 116, 120, 127, 134, 138, 144, 153, 157, 176, 181, 186, 190, 193, 195, 200, 202, 203, 204, 205, 206, 211, 212, 214, 216, 221, 222, 229, 232, 235, 239, 244, 246, 247, 251, 254, 255, 256, 258, 261, 262, 271, 276, 281, 283, 293, 294, 296, 299, 305, 307, 310, 311, 319, 332, 333, 337, 339, 341, 344, 346, 347, 348, 353, 361, 365, 368, 374, 383, 384, 387, 388, 401, 409, 412, 413, 418, 421, 422, 426, 427, 431, 432, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "request": [2, 23, 30, 32, 41, 44, 61, 66, 74, 82, 83, 86, 92, 93, 96, 97, 99, 103, 105, 106, 118, 121, 132, 138, 142, 151, 157, 159, 165, 168, 175, 176, 185, 196, 207, 209, 211, 212, 214, 222, 224, 225, 229, 233, 240, 241, 242, 243, 244, 246, 247, 249, 250, 254, 256, 258, 271, 283, 284, 288, 292, 293, 294, 295, 299, 305, 307, 314, 316, 322, 328, 331, 333, 334, 341, 344, 348, 352, 359, 361, 365, 375, 383, 388, 391, 393, 395, 398, 404, 406, 409, 415, 416, 418, 419, 422, 427, 431, 435, 440, 450, 452, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "type": [2, 3, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 65, 66, 71, 72, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 90, 91, 96, 98, 99, 103, 106, 108, 110, 113, 114, 115, 116, 117, 119, 120, 121, 125, 138, 139, 142, 144, 145, 151, 152, 153, 155, 157, 159, 160, 166, 167, 168, 171, 172, 174, 176, 177, 181, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 211, 212, 215, 220, 222, 224, 225, 226, 229, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 256, 258, 261, 262, 266, 267, 268, 269, 270, 272, 273, 275, 278, 279, 281, 283, 284, 285, 290, 293, 294, 297, 298, 304, 306, 307, 308, 313, 314, 315, 316, 318, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 336, 337, 338, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 357, 361, 362, 364, 365, 367, 375, 376, 377, 378, 380, 381, 383, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 414, 415, 418, 419, 421, 423, 424, 426, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 447, 448, 449, 450, 454, 455, 460, 461, 462, 468, 469, 470, 473, 474, 482, 483], "independ": [2, 18, 22, 25, 32, 33, 34, 44, 66, 71, 73, 82, 90, 92, 93, 97, 99, 108, 139, 159, 182, 192, 200, 209, 224, 225, 245, 258, 261, 266, 267, 271, 318, 343, 344, 347, 352, 353, 365, 366, 367, 368, 375, 377, 387, 398, 409, 412, 421, 429, 461, 468, 471, 472, 475, 481, 482, 483], "field": [2, 3, 5, 13, 20, 27, 28, 30, 32, 33, 34, 41, 52, 53, 55, 56, 58, 59, 61, 64, 66, 71, 73, 74, 82, 85, 88, 91, 98, 104, 108, 116, 120, 147, 151, 153, 157, 159, 174, 176, 182, 185, 190, 195, 198, 201, 202, 204, 207, 208, 212, 232, 233, 235, 241, 246, 256, 259, 261, 267, 272, 281, 293, 310, 314, 315, 316, 322, 325, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 352, 355, 357, 360, 365, 366, 368, 375, 377, 380, 384, 385, 393, 397, 399, 404, 406, 410, 412, 421, 434, 439, 451, 454, 461, 462, 463, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "readon": [2, 56, 66, 73, 247, 256, 332, 340, 344, 375, 409, 410, 467, 482], "format": [2, 4, 5, 9, 10, 18, 23, 25, 30, 34, 40, 47, 57, 61, 62, 66, 68, 71, 73, 77, 82, 83, 85, 87, 88, 90, 91, 92, 101, 102, 103, 105, 106, 108, 110, 115, 116, 117, 118, 120, 132, 139, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 157, 163, 166, 168, 172, 175, 181, 183, 184, 185, 189, 190, 191, 192, 193, 195, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 216, 222, 224, 227, 229, 233, 234, 239, 242, 244, 247, 248, 249, 250, 254, 255, 259, 262, 265, 266, 267, 269, 270, 272, 276, 281, 284, 285, 286, 292, 293, 294, 295, 296, 298, 300, 302, 304, 305, 307, 308, 314, 315, 317, 319, 320, 321, 330, 331, 332, 335, 336, 337, 338, 340, 341, 348, 349, 352, 358, 361, 362, 365, 367, 368, 371, 374, 375, 377, 380, 381, 383, 384, 387, 393, 394, 396, 397, 399, 400, 404, 406, 412, 416, 421, 422, 423, 426, 427, 429, 430, 433, 441, 443, 444, 448, 449, 450, 454, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 479, 480, 482, 483], "shape": [2, 61, 66, 92, 221, 224, 284, 344, 385, 467, 471, 472, 475, 482], "stride": [2, 61, 66, 344, 427, 429, 464, 475, 482], "suboffset": [2, 61, 66, 344, 475], "contigu": [2, 5, 42, 66, 85, 189, 247, 261, 271, 299, 344, 414, 467, 475, 482], "compound": [2, 34, 66, 221, 246, 345, 363, 368, 374, 375, 430, 432, 434, 436, 467, 475, 482], "complex": [2, 5, 13, 16, 34, 66, 70, 71, 73, 76, 82, 83, 85, 99, 102, 103, 108, 118, 120, 121, 125, 127, 131, 139, 160, 166, 169, 174, 183, 185, 186, 189, 193, 199, 202, 224, 225, 254, 261, 262, 268, 275, 289, 290, 292, 299, 307, 319, 333, 334, 345, 348, 352, 383, 385, 388, 418, 426, 427, 429, 434, 435, 439, 448, 449, 454, 463, 465, 466, 467, 468, 470, 472, 474, 476, 478, 479, 480, 482], "array": [2, 3, 5, 9, 10, 16, 30, 38, 44, 52, 56, 58, 59, 61, 62, 64, 66, 70, 71, 73, 74, 76, 82, 85, 88, 91, 97, 99, 115, 116, 142, 150, 157, 163, 177, 181, 214, 254, 279, 283, 284, 285, 287, 293, 299, 309, 337, 344, 347, 360, 378, 384, 385, 401, 407, 418, 426, 427, 441, 451, 464, 465, 466, 467, 468, 469, 472, 474, 477, 479, 481, 482], "numpi": [2, 66, 83, 119, 224, 284, 299, 343, 443, 449, 452, 460, 466, 467, 472, 474, 475, 477, 482], "style": [2, 5, 9, 23, 62, 66, 71, 74, 76, 85, 92, 93, 98, 102, 112, 114, 116, 118, 120, 132, 143, 144, 146, 150, 159, 166, 189, 195, 204, 206, 218, 219, 223, 224, 225, 229, 239, 241, 244, 254, 261, 262, 267, 268, 271, 275, 276, 284, 292, 293, 294, 296, 297, 299, 308, 313, 319, 330, 332, 333, 337, 340, 352, 354, 361, 364, 367, 368, 371, 372, 374, 378, 380, 387, 390, 406, 419, 425, 429, 430, 433, 434, 444, 445, 448, 451, 461, 462, 463, 464, 465, 467, 468, 469, 472, 474, 475, 476, 479, 480, 482, 483], "and": [2, 3, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22, 24, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 76, 85, 87, 89, 94, 96, 98, 100, 101, 103, 107, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 128, 129, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 149, 150, 152, 153, 155, 156, 158, 159, 162, 163, 165, 166, 169, 171, 172, 173, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 257, 258, 261, 264, 265, 267, 269, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 314, 315, 318, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 334, 335, 336, 338, 339, 342, 345, 346, 348, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 390, 393, 394, 396, 397, 398, 399, 401, 402, 404, 405, 407, 408, 411, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 430, 432, 433, 435, 436, 437, 440, 441, 442, 445, 447, 448, 450, 457, 459, 483], "pil": [2, 66, 83, 344], "relat": [2, 32, 34, 41, 44, 61, 66, 76, 77, 82, 83, 88, 91, 93, 98, 99, 102, 104, 105, 108, 110, 111, 112, 120, 125, 132, 138, 145, 153, 154, 157, 166, 168, 176, 180, 181, 182, 189, 190, 192, 193, 195, 199, 204, 206, 207, 208, 209, 212, 214, 216, 222, 224, 227, 230, 234, 235, 240, 244, 249, 254, 256, 257, 258, 259, 261, 265, 266, 267, 269, 270, 271, 275, 278, 280, 281, 283, 290, 293, 294, 296, 298, 299, 300, 302, 308, 314, 315, 317, 319, 320, 324, 325, 331, 332, 333, 337, 340, 341, 344, 345, 348, 352, 353, 356, 361, 365, 368, 374, 375, 379, 384, 385, 387, 388, 393, 398, 399, 401, 404, 406, 411, 412, 414, 420, 421, 424, 425, 427, 429, 430, 432, 434, 435, 449, 454, 460, 461, 462, 464, 465, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "function": [2, 5, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 78, 82, 85, 86, 87, 90, 95, 96, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 121, 123, 125, 127, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 155, 156, 157, 158, 160, 163, 165, 166, 169, 172, 174, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 233, 234, 235, 237, 241, 242, 244, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 262, 264, 265, 266, 269, 270, 272, 276, 278, 280, 281, 283, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 320, 321, 322, 324, 325, 328, 330, 331, 332, 333, 334, 336, 338, 339, 341, 342, 343, 344, 346, 347, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 376, 377, 378, 379, 380, 381, 385, 386, 388, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 427, 428, 430, 431, 434, 435, 436, 438, 439, 441, 444, 450, 454, 455, 460, 463, 464, 468, 470, 471, 473, 474, 476, 480, 481, 482, 483], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 69, 70, 71, 73, 74, 75, 77, 88, 95, 97, 175, 319, 361, 463, 466, 467, 471, 472, 479, 480, 482], "_pyobject_new": 3, "pytypeobject": [3, 8, 9, 12, 13, 15, 17, 19, 21, 22, 25, 27, 28, 29, 34, 36, 37, 38, 43, 44, 45, 48, 49, 53, 54, 55, 56, 58, 59, 60, 62, 66, 73, 74, 88, 97, 462, 472, 473, 477, 480, 481, 482], "return": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 73, 74, 76, 77, 82, 84, 85, 86, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 118, 120, 121, 124, 125, 129, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 176, 177, 178, 180, 182, 183, 185, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 439, 440, 442, 448, 449, 450, 451, 454, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "valupyvarobject": [3, 28, 49, 55, 56, 66, 361, 472], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 18, 22, 23, 28, 33, 34, 37, 38, 39, 40, 42, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 71, 73, 88, 97, 175, 352, 427, 466, 467, 472, 480, 482], "size": [3, 5, 7, 8, 9, 18, 28, 30, 33, 34, 38, 40, 41, 42, 48, 52, 53, 56, 57, 58, 59, 61, 62, 66, 71, 73, 74, 90, 91, 95, 97, 98, 99, 103, 105, 113, 115, 116, 117, 118, 121, 132, 136, 141, 142, 144, 145, 151, 153, 157, 160, 162, 163, 165, 172, 173, 174, 176, 181, 184, 185, 186, 189, 190, 214, 215, 218, 222, 224, 225, 235, 241, 244, 246, 247, 250, 251, 256, 258, 261, 262, 266, 269, 270, 278, 283, 284, 294, 295, 299, 305, 306, 308, 311, 314, 320, 321, 322, 335, 337, 338, 340, 342, 343, 344, 345, 348, 349, 352, 357, 359, 360, 361, 363, 364, 368, 371, 374, 375, 383, 385, 387, 394, 407, 409, 420, 421, 423, 427, 431, 445, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyobject_init": [3, 55, 480, 481, 482], "op": [3, 10, 15, 27, 28, 32, 36, 48, 61, 62, 66, 73, 83, 120, 121, 137, 176, 190, 229, 264, 269, 283, 293, 319, 337, 340, 352, 364, 376, 377, 406, 464, 467, 471, 472, 479, 482], "borrow": [3, 5, 12, 22, 23, 27, 30, 32, 34, 37, 43, 44, 50, 51, 52, 56, 57, 58, 61, 65, 71, 73, 85, 93, 211, 463, 464, 465, 482], "part": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 83, 90, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 120, 121, 127, 143, 151, 154, 156, 157, 158, 160, 166, 168, 175, 176, 182, 185, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 218, 224, 229, 234, 244, 246, 247, 249, 250, 251, 258, 259, 266, 267, 268, 269, 270, 275, 276, 281, 282, 283, 293, 294, 299, 302, 307, 308, 314, 317, 318, 319, 323, 331, 334, 337, 338, 340, 341, 344, 345, 346, 352, 361, 364, 365, 367, 368, 374, 380, 383, 384, 385, 387, 388, 389, 393, 398, 401, 402, 409, 410, 412, 418, 423, 425, 426, 427, 428, 429, 431, 434, 435, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "ofstabl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 104, 209, 224, 235, 252, 276, 292, 344, 352, 424, 464, 465, 468, 472, 476, 477, 478, 480, 481, 482, 483], "abi": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 95, 108, 352, 420, 455, 459, 468, 472, 476, 477, 479, 481, 482, 483], "initi": [3, 5, 16, 18, 22, 23, 24, 28, 30, 31, 34, 41, 48, 56, 57, 58, 59, 61, 64, 66, 67, 69, 70, 72, 74, 77, 83, 84, 88, 90, 91, 93, 97, 98, 99, 104, 105, 112, 113, 118, 119, 120, 121, 125, 134, 138, 139, 140, 141, 142, 146, 155, 157, 165, 166, 174, 175, 176, 180, 185, 188, 189, 190, 192, 194, 201, 202, 205, 208, 212, 222, 225, 226, 229, 231, 233, 234, 235, 242, 246, 247, 249, 250, 254, 258, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 280, 281, 283, 284, 286, 288, 292, 293, 294, 299, 301, 305, 308, 314, 320, 321, 331, 334, 335, 337, 338, 340, 341, 344, 348, 352, 355, 358, 364, 365, 366, 368, 375, 383, 384, 385, 387, 394, 398, 399, 412, 418, 423, 424, 425, 426, 427, 430, 431, 435, 436, 449, 454, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482], "newli": [3, 5, 34, 41, 57, 66, 71, 83, 98, 156, 160, 180, 190, 197, 231, 242, 258, 283, 293, 302, 332, 334, 337, 374, 375, 383, 409, 426, 427, 465, 467, 475, 478, 479, 482], "withits": [3, 5, 7, 8, 9, 11, 15, 22, 23, 24, 25, 28, 30, 32, 33, 34, 38, 41, 42, 44, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 68, 70, 71, 73, 74, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 118, 120, 121, 125, 132, 134, 135, 136, 138, 139, 143, 144, 147, 149, 151, 152, 154, 155, 157, 162, 165, 166, 168, 169, 174, 175, 176, 177, 180, 182, 183, 185, 187, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 217, 222, 224, 225, 227, 229, 231, 234, 239, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 255, 258, 261, 262, 265, 267, 268, 269, 271, 275, 276, 278, 279, 283, 284, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 351, 352, 354, 357, 359, 361, 363, 364, 365, 366, 367, 368, 371, 374, 375, 377, 379, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "if": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 77, 78, 82, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 444, 447, 449, 450, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "indic": [3, 5, 7, 30, 31, 32, 34, 37, 40, 41, 48, 52, 54, 56, 57, 59, 61, 62, 66, 71, 73, 74, 82, 83, 88, 95, 96, 98, 99, 102, 103, 104, 105, 106, 112, 114, 115, 118, 120, 121, 125, 136, 138, 139, 151, 155, 156, 157, 165, 166, 168, 172, 174, 175, 176, 182, 185, 188, 190, 195, 201, 202, 204, 207, 208, 209, 212, 222, 224, 225, 227, 233, 234, 240, 241, 242, 244, 246, 247, 249, 250, 251, 255, 258, 261, 266, 267, 268, 270, 271, 276, 278, 283, 288, 292, 293, 295, 297, 300, 303, 305, 307, 308, 311, 314, 318, 319, 328, 329, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 356, 360, 361, 364, 365, 368, 375, 376, 380, 385, 387, 388, 393, 394, 397, 398, 399, 404, 405, 406, 407, 409, 412, 418, 421, 423, 425, 426, 427, 429, 430, 431, 434, 435, 448, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482], "that": [3, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 76, 82, 86, 87, 88, 90, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 281, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 445, 451, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "particip": [3, 61, 73, 74, 182, 235, 242, 250, 267, 299, 319, 461, 463, 466, 468, 470], "in": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 68, 69, 72, 73, 74, 76, 78, 85, 87, 89, 90, 91, 92, 95, 96, 97, 100, 102, 103, 104, 106, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 167, 169, 172, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 445, 447, 448, 450, 451, 454, 455, 457, 463, 464, 466, 467, 468, 470, 474, 475, 482, 483], "cyclic": [3, 31, 44, 49, 61, 66, 72, 83, 85, 231, 270, 292, 410, 423, 427, 474, 476, 482], "garbag": [3, 31, 41, 44, 49, 50, 61, 62, 65, 66, 71, 72, 73, 82, 83, 85, 93, 95, 99, 103, 124, 138, 139, 151, 158, 168, 169, 175, 178, 192, 212, 213, 254, 274, 283, 292, 293, 315, 337, 340, 352, 359, 361, 366, 387, 401, 410, 426, 427, 429, 451, 455, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "detector": [3, 59, 71, 255, 455, 468], "it": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 112, 113, 114, 115, 118, 120, 121, 124, 125, 128, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 447, 448, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "is": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 86, 87, 88, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 445, 447, 448, 450, 451, 454, 455, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "added": [3, 5, 13, 22, 30, 33, 34, 41, 44, 56, 57, 59, 61, 62, 66, 68, 71, 73, 74, 76, 83, 86, 87, 88, 90, 91, 92, 93, 98, 99, 101, 102, 108, 110, 112, 113, 114, 115, 118, 125, 127, 135, 138, 139, 141, 143, 149, 150, 151, 155, 157, 159, 160, 162, 165, 166, 168, 174, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 217, 222, 224, 226, 230, 231, 233, 239, 241, 242, 244, 246, 247, 249, 250, 251, 258, 259, 262, 266, 267, 268, 269, 270, 271, 275, 276, 281, 283, 286, 288, 292, 293, 296, 299, 302, 304, 305, 307, 308, 311, 319, 321, 324, 328, 330, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 355, 357, 358, 359, 361, 363, 364, 365, 368, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 398, 399, 400, 401, 402, 406, 409, 410, 412, 415, 418, 419, 420, 421, 423, 426, 427, 429, 431, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "to": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 386, 387, 393, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 454, 455, 456, 460, 462, 463, 482, 483], "set": [3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 44, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 71, 73, 74, 75, 77, 79, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 112, 113, 115, 118, 120, 121, 128, 132, 134, 135, 136, 137, 138, 139, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 165, 166, 168, 169, 172, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 221, 222, 224, 225, 226, 227, 229, 231, 233, 234, 235, 239, 241, 242, 243, 244, 247, 249, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 294, 295, 296, 297, 299, 301, 305, 307, 308, 311, 313, 314, 318, 319, 320, 321, 322, 323, 324, 328, 330, 331, 332, 334, 335, 337, 338, 340, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 373, 374, 375, 376, 378, 379, 381, 384, 385, 386, 387, 388, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 434, 435, 439, 444, 447, 449, 451, 454, 455, 457, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "observ": [3, 83, 92, 95, 99, 182, 207, 318, 343, 348, 381, 383, 393, 435, 463, 472, 475, 482], "other": [3, 5, 7, 9, 11, 15, 18, 23, 25, 27, 28, 32, 33, 34, 38, 41, 42, 44, 45, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 70, 71, 72, 73, 75, 76, 86, 87, 88, 90, 91, 93, 95, 97, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 116, 120, 125, 131, 132, 136, 139, 141, 144, 145, 146, 147, 150, 151, 152, 153, 154, 157, 158, 160, 162, 166, 168, 169, 174, 175, 176, 178, 180, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 200, 201, 202, 204, 205, 206, 208, 209, 210, 212, 215, 222, 224, 225, 226, 229, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 278, 280, 283, 284, 286, 287, 288, 289, 293, 294, 296, 297, 298, 302, 307, 308, 309, 310, 313, 314, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 361, 364, 365, 366, 367, 368, 375, 377, 379, 381, 383, 384, 386, 387, 388, 389, 394, 397, 398, 399, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 445, 447, 454, 455, 460, 482, 483], "are": [3, 5, 7, 9, 11, 12, 13, 15, 16, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 441, 445, 450, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "not": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 76, 77, 78, 82, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 135, 136, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 372, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 447, 448, 450, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "affect": [3, 32, 34, 37, 44, 57, 58, 66, 71, 82, 91, 92, 93, 99, 102, 108, 114, 138, 144, 166, 176, 182, 185, 190, 192, 201, 204, 224, 229, 242, 246, 249, 250, 258, 266, 269, 271, 278, 293, 306, 307, 319, 320, 321, 322, 337, 340, 341, 343, 345, 348, 353, 357, 361, 365, 366, 374, 375, 383, 387, 388, 389, 393, 399, 401, 404, 406, 409, 426, 427, 429, 431, 435, 454, 455, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyobject_initvar": [3, 55, 482], "thisdoe": [3, 5, 9, 13, 22, 23, 25, 26, 28, 30, 32, 33, 34, 37, 39, 41, 44, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 82, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 112, 113, 114, 118, 120, 121, 122, 125, 132, 138, 139, 140, 143, 146, 149, 151, 153, 156, 157, 160, 162, 165, 166, 168, 172, 174, 175, 176, 178, 180, 182, 183, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 209, 210, 212, 214, 219, 220, 222, 224, 225, 226, 227, 228, 229, 232, 233, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 283, 284, 287, 288, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 308, 309, 310, 311, 314, 319, 322, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 355, 357, 358, 359, 361, 363, 364, 365, 367, 375, 377, 378, 379, 380, 381, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 439, 441, 448, 451, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "everyth": [3, 55, 61, 71, 74, 83, 86, 87, 88, 90, 99, 101, 103, 106, 108, 118, 192, 207, 219, 224, 246, 268, 292, 293, 294, 296, 299, 319, 332, 333, 337, 358, 368, 388, 399, 418, 433, 467, 469, 471, 475, 482], "also": [3, 4, 5, 7, 11, 12, 13, 23, 26, 27, 28, 30, 32, 33, 34, 39, 41, 44, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 70, 71, 73, 74, 75, 76, 77, 82, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 117, 118, 120, 125, 131, 132, 136, 138, 140, 141, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 165, 166, 168, 171, 172, 174, 175, 176, 180, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 250, 251, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 302, 305, 306, 307, 308, 309, 311, 313, 314, 318, 319, 321, 322, 324, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 357, 360, 361, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "length": [3, 5, 7, 8, 9, 22, 23, 24, 33, 34, 37, 47, 48, 52, 53, 54, 56, 57, 58, 61, 62, 66, 71, 73, 83, 88, 90, 91, 92, 93, 95, 97, 99, 103, 105, 106, 115, 118, 119, 120, 121, 141, 142, 143, 146, 150, 157, 173, 174, 175, 176, 183, 185, 189, 190, 194, 195, 200, 201, 204, 206, 207, 214, 224, 241, 244, 247, 254, 258, 259, 261, 262, 268, 269, 270, 271, 273, 275, 278, 283, 284, 292, 293, 308, 314, 319, 320, 328, 332, 335, 337, 340, 341, 343, 345, 347, 352, 357, 360, 363, 364, 365, 375, 384, 385, 387, 388, 392, 394, 399, 404, 406, 407, 409, 414, 418, 421, 422, 423, 426, 427, 429, 434, 435, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "inform": [3, 5, 7, 11, 13, 14, 23, 25, 32, 33, 34, 41, 44, 56, 58, 61, 62, 64, 66, 70, 71, 73, 75, 83, 84, 86, 87, 88, 91, 93, 95, 96, 98, 100, 102, 105, 106, 107, 108, 110, 113, 116, 118, 120, 121, 122, 125, 132, 139, 140, 143, 144, 151, 152, 154, 157, 162, 165, 168, 171, 172, 174, 175, 176, 180, 182, 185, 187, 189, 190, 192, 194, 195, 196, 200, 202, 204, 206, 208, 209, 210, 212, 214, 215, 222, 224, 225, 226, 227, 228, 232, 234, 239, 241, 242, 244, 246, 247, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 276, 278, 283, 286, 287, 288, 292, 296, 299, 302, 305, 307, 308, 310, 311, 312, 313, 314, 315, 319, 320, 321, 328, 329, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 347, 348, 350, 352, 355, 357, 358, 360, 361, 364, 365, 368, 372, 374, 375, 379, 380, 381, 383, 385, 387, 388, 390, 393, 394, 397, 398, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 433, 434, 435, 442, 447, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "for": [3, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 165, 166, 169, 171, 172, 174, 180, 181, 182, 183, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 241, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 259, 260, 262, 264, 265, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 337, 339, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 386, 387, 388, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 407, 408, 409, 410, 416, 418, 419, 420, 421, 422, 423, 424, 425, 428, 430, 432, 433, 434, 435, 436, 439, 441, 442, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 461, 462, 463, 469, 472, 473, 482, 483], "variabl": [3, 5, 9, 12, 13, 16, 18, 20, 22, 23, 27, 30, 31, 33, 34, 41, 44, 50, 51, 53, 61, 62, 64, 66, 70, 71, 73, 74, 76, 77, 82, 85, 87, 90, 91, 92, 93, 97, 99, 102, 105, 106, 108, 110, 112, 116, 121, 125, 138, 141, 151, 152, 154, 155, 162, 163, 166, 173, 176, 187, 190, 192, 208, 212, 213, 214, 222, 224, 226, 227, 229, 230, 244, 246, 247, 248, 249, 250, 254, 255, 258, 261, 264, 266, 267, 281, 283, 286, 294, 295, 297, 299, 301, 306, 311, 313, 315, 319, 320, 324, 327, 331, 332, 333, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 357, 361, 364, 365, 366, 367, 375, 380, 381, 383, 384, 385, 387, 388, 393, 394, 398, 399, 402, 404, 406, 407, 409, 410, 411, 419, 424, 426, 427, 428, 429, 430, 431, 434, 435, 439, 440, 447, 448, 451, 455, 457, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "pyobject_new": [3, 28, 41, 61, 464, 480, 481, 482], "usedefin": [3, 5, 7, 11, 14, 15, 23, 24, 25, 28, 30, 32, 33, 34, 41, 42, 44, 49, 55, 56, 57, 59, 61, 62, 66, 68, 69, 70, 71, 72, 75, 77, 82, 86, 90, 91, 92, 93, 98, 99, 101, 102, 104, 105, 106, 108, 112, 113, 114, 116, 118, 120, 121, 124, 125, 131, 132, 140, 141, 143, 144, 146, 150, 151, 153, 154, 155, 157, 160, 165, 166, 168, 171, 172, 174, 175, 176, 178, 180, 182, 183, 185, 186, 188, 190, 192, 193, 195, 198, 202, 204, 207, 210, 211, 212, 214, 215, 222, 224, 225, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 255, 258, 259, 262, 263, 265, 266, 267, 269, 271, 275, 276, 283, 287, 288, 289, 290, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 307, 309, 310, 312, 314, 317, 319, 320, 322, 323, 324, 325, 328, 329, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 357, 360, 361, 364, 365, 366, 368, 371, 374, 375, 376, 378, 379, 380, 383, 384, 386, 387, 388, 389, 393, 394, 396, 397, 399, 400, 401, 402, 404, 406, 407, 409, 410, 412, 413, 414, 418, 420, 421, 422, 424, 426, 427, 428, 429, 431, 433, 434, 435, 439, 440, 442, 448, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "by": [3, 5, 7, 12, 13, 14, 15, 18, 20, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 40, 41, 42, 44, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 127, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 172, 174, 176, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 281, 282, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 442, 447, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "header": [3, 20, 25, 34, 61, 66, 71, 73, 82, 98, 102, 108, 115, 121, 135, 142, 146, 150, 151, 153, 155, 166, 168, 174, 175, 183, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 214, 229, 233, 241, 242, 243, 244, 246, 247, 250, 256, 267, 269, 271, 276, 285, 288, 293, 297, 305, 311, 317, 335, 336, 337, 341, 349, 352, 354, 357, 361, 376, 380, 384, 392, 394, 396, 400, 410, 418, 421, 423, 426, 428, 451, 455, 460, 462, 464, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "count": [3, 5, 7, 9, 12, 23, 31, 32, 33, 44, 45, 48, 50, 52, 54, 56, 57, 61, 62, 66, 72, 73, 74, 76, 78, 82, 83, 85, 87, 88, 91, 92, 93, 97, 99, 102, 118, 119, 125, 138, 139, 144, 146, 148, 151, 159, 160, 163, 175, 176, 181, 182, 184, 187, 189, 190, 192, 195, 207, 210, 217, 223, 225, 226, 235, 246, 247, 249, 250, 255, 258, 261, 267, 271, 278, 281, 283, 284, 288, 292, 293, 297, 299, 305, 308, 318, 319, 328, 331, 337, 340, 341, 343, 344, 345, 347, 352, 361, 363, 364, 365, 366, 368, 379, 381, 387, 394, 412, 427, 429, 434, 435, 441, 445, 451, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 480, 482], "will": [3, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 255, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 317, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 447, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "beone": [3, 5, 7, 9, 11, 13, 15, 18, 23, 24, 25, 28, 30, 32, 33, 34, 36, 41, 42, 44, 46, 48, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 101, 102, 103, 105, 106, 108, 110, 112, 113, 114, 115, 117, 118, 120, 121, 125, 132, 134, 136, 137, 138, 139, 141, 143, 144, 146, 150, 151, 153, 154, 155, 156, 157, 159, 160, 162, 165, 166, 168, 169, 172, 174, 175, 176, 180, 182, 183, 185, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 220, 222, 224, 225, 226, 227, 229, 231, 233, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 251, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 307, 308, 311, 314, 317, 318, 319, 320, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 418, 421, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 450, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "memori": [3, 5, 7, 16, 18, 23, 28, 30, 31, 32, 33, 34, 40, 42, 44, 46, 47, 48, 53, 56, 57, 59, 61, 62, 64, 66, 70, 71, 73, 74, 75, 83, 85, 91, 93, 97, 98, 99, 102, 103, 105, 113, 117, 120, 121, 131, 136, 151, 157, 163, 175, 183, 184, 185, 187, 206, 211, 212, 213, 224, 233, 234, 235, 246, 250, 254, 255, 258, 260, 261, 262, 269, 271, 283, 293, 299, 314, 322, 330, 332, 333, 337, 338, 340, 347, 348, 352, 361, 364, 385, 388, 401, 404, 405, 408, 410, 412, 420, 421, 423, 427, 434, 441, 454, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 481, 482], "determin": [3, 5, 7, 11, 18, 22, 23, 33, 34, 39, 44, 48, 52, 58, 61, 66, 71, 73, 74, 83, 90, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 118, 125, 132, 139, 144, 147, 151, 154, 156, 157, 158, 160, 174, 175, 176, 178, 180, 181, 183, 185, 188, 189, 192, 196, 202, 207, 210, 212, 214, 224, 229, 231, 241, 246, 247, 248, 250, 255, 259, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 283, 286, 292, 293, 294, 295, 296, 297, 299, 307, 308, 311, 314, 318, 319, 320, 321, 328, 330, 331, 332, 333, 334, 337, 340, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 357, 359, 360, 361, 365, 366, 368, 375, 377, 383, 385, 387, 394, 397, 398, 399, 404, 409, 414, 420, 423, 424, 426, 428, 429, 431, 433, 434, 435, 454, 460, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 479, 482], "from": [3, 5, 7, 8, 9, 10, 11, 12, 15, 16, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 162, 163, 165, 166, 169, 172, 174, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 229, 231, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 454, 455, 457, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "tp_basics": [3, 59, 61, 73, 74, 481, 482], "pyobject_newvar": [3, 28, 41, 464, 480, 481, 482], "allow": [3, 5, 7, 9, 16, 22, 23, 27, 32, 33, 34, 40, 42, 44, 48, 55, 57, 61, 62, 66, 68, 69, 70, 71, 73, 74, 76, 77, 82, 83, 87, 88, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 118, 120, 121, 125, 131, 132, 134, 136, 137, 138, 143, 150, 151, 153, 154, 156, 157, 159, 160, 162, 165, 166, 168, 172, 174, 175, 176, 179, 180, 182, 185, 188, 189, 190, 192, 193, 194, 195, 201, 202, 204, 207, 209, 210, 212, 213, 214, 217, 220, 222, 224, 225, 226, 227, 229, 233, 234, 241, 242, 243, 244, 246, 247, 250, 253, 255, 258, 261, 262, 263, 265, 266, 267, 268, 269, 271, 275, 276, 278, 279, 283, 287, 288, 292, 293, 295, 296, 297, 299, 302, 305, 307, 308, 311, 313, 314, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 346, 348, 352, 353, 355, 357, 361, 363, 364, 365, 368, 373, 374, 375, 376, 379, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 412, 414, 415, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 434, 435, 439, 440, 442, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "plus": [3, 57, 61, 66, 73, 82, 108, 118, 175, 176, 177, 185, 189, 193, 207, 210, 264, 283, 290, 292, 293, 302, 305, 331, 342, 352, 361, 363, 364, 376, 388, 389, 393, 406, 410, 429, 433, 434, 460, 463, 464, 465, 466, 475, 476, 482], "given": [3, 5, 7, 9, 14, 20, 22, 23, 24, 27, 30, 32, 34, 41, 42, 44, 48, 54, 56, 59, 61, 62, 64, 70, 71, 82, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 106, 108, 110, 113, 114, 115, 118, 120, 125, 132, 134, 138, 144, 149, 150, 153, 154, 155, 156, 157, 162, 165, 166, 168, 169, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 189, 190, 192, 194, 195, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 215, 217, 220, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 241, 242, 243, 244, 246, 247, 249, 250, 252, 255, 258, 259, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 286, 288, 289, 292, 293, 295, 296, 297, 299, 300, 301, 302, 306, 308, 310, 312, 313, 314, 319, 322, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 352, 355, 357, 358, 361, 363, 364, 365, 366, 368, 371, 374, 375, 379, 380, 383, 384, 385, 386, 387, 388, 393, 394, 397, 398, 399, 401, 402, 406, 407, 409, 410, 411, 412, 413, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 440, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "tp_items": [3, 59, 61, 73, 74], "implement": [3, 5, 8, 9, 12, 13, 15, 20, 23, 28, 29, 30, 31, 32, 34, 38, 41, 44, 48, 52, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 70, 71, 73, 74, 76, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98, 102, 104, 105, 106, 112, 114, 118, 120, 121, 127, 131, 132, 136, 138, 139, 143, 144, 151, 155, 156, 157, 160, 165, 166, 167, 169, 172, 174, 175, 180, 181, 182, 185, 190, 192, 195, 202, 204, 206, 207, 210, 211, 212, 213, 217, 219, 220, 222, 224, 225, 226, 229, 233, 234, 235, 236, 239, 241, 242, 243, 244, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 266, 267, 268, 269, 271, 273, 275, 277, 280, 281, 282, 283, 284, 285, 286, 288, 290, 292, 293, 294, 296, 298, 299, 300, 302, 305, 306, 307, 308, 309, 312, 314, 315, 319, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 355, 357, 358, 359, 361, 364, 365, 367, 368, 369, 373, 375, 377, 378, 380, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 404, 408, 409, 412, 413, 414, 415, 416, 418, 421, 422, 424, 425, 426, 428, 429, 431, 432, 434, 435, 440, 441, 449, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 477, 480, 481, 482, 483], "like": [3, 5, 7, 12, 13, 16, 18, 23, 25, 28, 30, 32, 33, 34, 35, 41, 42, 44, 45, 48, 53, 54, 56, 58, 59, 61, 62, 64, 66, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 105, 106, 108, 110, 112, 115, 118, 119, 120, 121, 125, 128, 132, 135, 138, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 166, 168, 171, 174, 175, 176, 180, 181, 182, 183, 185, 189, 190, 192, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 212, 213, 214, 217, 222, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 283, 284, 286, 292, 293, 294, 295, 296, 297, 299, 300, 301, 304, 306, 307, 308, 309, 310, 311, 313, 314, 317, 319, 321, 324, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 354, 356, 357, 358, 359, 360, 361, 364, 365, 368, 374, 375, 377, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 424, 426, 427, 429, 430, 431, 433, 434, 435, 441, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "tupl": [3, 5, 10, 14, 16, 20, 23, 27, 34, 37, 39, 41, 48, 52, 53, 56, 57, 59, 60, 61, 64, 66, 70, 71, 73, 74, 85, 88, 92, 93, 95, 98, 99, 102, 104, 106, 110, 111, 113, 114, 115, 118, 119, 120, 125, 132, 133, 136, 139, 141, 144, 147, 150, 152, 155, 157, 165, 169, 171, 175, 176, 180, 181, 182, 183, 185, 186, 188, 189, 190, 192, 195, 202, 204, 207, 208, 212, 220, 222, 224, 225, 226, 231, 232, 235, 241, 242, 243, 244, 247, 249, 250, 254, 255, 258, 259, 261, 262, 264, 266, 267, 269, 271, 272, 274, 276, 279, 281, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 303, 304, 305, 307, 308, 310, 314, 316, 318, 319, 322, 325, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 351, 352, 354, 358, 359, 360, 361, 364, 365, 368, 371, 375, 377, 380, 381, 383, 384, 385, 387, 388, 393, 394, 395, 397, 399, 400, 401, 404, 406, 411, 412, 414, 415, 418, 419, 421, 426, 427, 429, 430, 431, 435, 439, 440, 442, 444, 445, 449, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "which": [3, 5, 7, 9, 12, 14, 15, 16, 18, 20, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 41, 42, 44, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 83, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 111, 112, 113, 115, 118, 120, 121, 125, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 239, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 352, 353, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "abl": [3, 7, 32, 61, 71, 73, 74, 75, 82, 88, 90, 92, 98, 99, 100, 101, 102, 103, 105, 120, 141, 151, 157, 158, 168, 175, 176, 180, 182, 193, 212, 234, 235, 239, 255, 267, 268, 269, 292, 293, 294, 295, 299, 309, 314, 319, 332, 337, 340, 341, 343, 348, 357, 361, 364, 383, 388, 393, 399, 405, 406, 412, 420, 426, 427, 433, 454, 455, 460, 461, 462, 463, 466, 468, 472, 474, 475, 476, 479, 480, 482], "their": [3, 5, 7, 14, 18, 24, 28, 32, 33, 34, 41, 44, 53, 55, 57, 59, 61, 62, 66, 70, 71, 73, 74, 75, 82, 83, 86, 88, 90, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 118, 120, 125, 131, 136, 138, 139, 151, 157, 162, 166, 168, 169, 174, 175, 176, 180, 182, 183, 185, 186, 190, 192, 193, 194, 195, 202, 204, 206, 207, 210, 212, 213, 214, 215, 217, 224, 225, 226, 229, 231, 234, 238, 242, 243, 249, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 275, 279, 282, 283, 284, 286, 288, 292, 293, 294, 296, 297, 299, 307, 308, 312, 313, 314, 324, 325, 326, 329, 332, 333, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 357, 360, 361, 362, 364, 365, 368, 371, 374, 375, 377, 380, 381, 383, 385, 386, 387, 388, 393, 394, 397, 398, 399, 401, 406, 409, 410, 411, 412, 414, 416, 418, 420, 421, 424, 425, 426, 427, 428, 429, 431, 434, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "at": [3, 4, 5, 7, 9, 13, 14, 18, 23, 25, 28, 30, 32, 33, 34, 37, 40, 41, 42, 44, 48, 56, 57, 58, 59, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 76, 77, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 115, 118, 120, 121, 124, 125, 128, 132, 134, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 153, 154, 155, 157, 159, 162, 165, 166, 168, 169, 172, 174, 175, 176, 179, 180, 182, 185, 187, 189, 190, 191, 192, 193, 195, 199, 200, 201, 202, 206, 207, 209, 212, 213, 214, 217, 220, 222, 224, 225, 226, 229, 231, 233, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 251, 255, 258, 261, 262, 264, 266, 267, 268, 269, 270, 271, 275, 277, 278, 281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 308, 309, 311, 313, 314, 317, 318, 319, 320, 322, 324, 328, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 374, 375, 376, 377, 379, 380, 381, 383, 385, 387, 388, 389, 394, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "construct": [3, 23, 52, 56, 57, 59, 60, 64, 70, 71, 73, 76, 83, 91, 92, 93, 96, 97, 98, 99, 112, 118, 125, 132, 136, 149, 157, 160, 168, 175, 182, 185, 188, 190, 192, 193, 196, 200, 202, 207, 208, 212, 215, 219, 220, 226, 233, 234, 242, 244, 249, 250, 259, 261, 267, 268, 270, 281, 283, 292, 293, 296, 299, 307, 308, 314, 319, 320, 331, 334, 335, 337, 340, 341, 344, 347, 364, 368, 380, 383, 385, 387, 388, 389, 393, 398, 401, 408, 410, 411, 412, 413, 418, 419, 421, 424, 426, 427, 428, 429, 434, 435, 450, 454, 460, 461, 462, 463, 465, 466, 468, 472, 474, 475, 477, 478, 479, 480, 481, 482], "time": [3, 4, 5, 13, 20, 23, 28, 30, 32, 33, 40, 41, 44, 52, 61, 62, 66, 70, 71, 73, 74, 75, 76, 77, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 101, 102, 103, 106, 108, 113, 115, 116, 118, 120, 125, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 150, 151, 156, 159, 162, 165, 166, 168, 172, 174, 175, 176, 181, 184, 185, 189, 192, 201, 202, 207, 208, 211, 212, 213, 215, 217, 224, 225, 226, 229, 230, 231, 233, 234, 235, 239, 242, 244, 246, 247, 249, 250, 254, 255, 257, 259, 261, 266, 267, 268, 269, 271, 276, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 299, 300, 304, 306, 308, 309, 314, 318, 319, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 337, 338, 340, 341, 342, 343, 344, 348, 352, 356, 357, 358, 361, 363, 364, 368, 371, 374, 375, 378, 379, 383, 385, 387, 388, 389, 394, 397, 398, 399, 401, 404, 406, 407, 408, 409, 414, 415, 418, 419, 421, 422, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 439, 442, 448, 450, 451, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 476, 482], "embed": [3, 5, 7, 9, 32, 34, 44, 50, 55, 62, 66, 71, 72, 76, 80, 88, 90, 91, 95, 97, 102, 103, 105, 127, 134, 162, 174, 176, 198, 201, 259, 266, 280, 281, 293, 308, 317, 319, 344, 348, 361, 365, 368, 374, 399, 414, 419, 420, 434, 450, 460, 462, 463, 466, 468, 471, 474, 476, 479, 480, 481, 482, 483], "into": [3, 5, 9, 13, 18, 20, 22, 23, 24, 25, 30, 32, 33, 34, 35, 37, 40, 48, 53, 57, 59, 61, 62, 66, 70, 71, 74, 76, 77, 82, 83, 86, 88, 90, 91, 92, 96, 98, 101, 102, 103, 104, 105, 108, 110, 111, 112, 118, 120, 125, 132, 133, 136, 137, 138, 140, 141, 144, 146, 147, 151, 153, 156, 157, 159, 162, 165, 166, 168, 174, 175, 176, 180, 182, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 221, 222, 224, 225, 226, 229, 234, 235, 241, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 276, 278, 281, 282, 283, 284, 292, 293, 294, 295, 296, 297, 298, 299, 305, 307, 308, 309, 311, 312, 314, 319, 320, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 356, 357, 361, 363, 364, 365, 368, 374, 375, 376, 377, 379, 380, 381, 384, 385, 386, 387, 388, 389, 394, 396, 398, 399, 404, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 420, 421, 423, 426, 427, 429, 431, 434, 435, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "same": [3, 4, 5, 7, 8, 9, 13, 15, 20, 22, 23, 25, 27, 32, 33, 34, 37, 38, 40, 41, 44, 45, 48, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 70, 71, 73, 74, 76, 77, 82, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 118, 120, 121, 125, 131, 132, 134, 136, 137, 138, 139, 140, 141, 144, 147, 150, 151, 154, 156, 157, 162, 165, 166, 168, 169, 172, 174, 175, 176, 177, 180, 182, 183, 185, 186, 189, 190, 192, 193, 194, 195, 200, 201, 202, 204, 206, 207, 208, 210, 212, 214, 215, 217, 219, 220, 222, 224, 225, 227, 229, 230, 231, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 252, 253, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 305, 307, 308, 309, 312, 313, 314, 319, 320, 321, 322, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 357, 358, 360, 361, 363, 364, 365, 366, 368, 370, 373, 374, 375, 377, 378, 380, 383, 384, 385, 386, 387, 388, 393, 394, 397, 399, 400, 401, 402, 404, 406, 409, 412, 414, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 440, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482], "decreas": [3, 7, 137, 182, 190, 235, 259, 365, 461, 465, 468, 475, 478, 480, 482], "improv": [3, 23, 55, 66, 71, 83, 87, 91, 97, 99, 102, 112, 118, 121, 132, 147, 157, 165, 166, 221, 233, 247, 250, 275, 299, 314, 340, 341, 348, 367, 375, 409, 425, 427, 429, 455, 469, 482, 483], "manag": [3, 5, 17, 32, 41, 50, 61, 66, 72, 74, 76, 85, 86, 98, 103, 106, 108, 116, 118, 120, 123, 125, 127, 136, 138, 144, 147, 151, 157, 163, 175, 183, 185, 186, 187, 190, 191, 193, 202, 212, 217, 224, 242, 244, 246, 250, 252, 254, 256, 258, 267, 271, 278, 284, 285, 295, 298, 299, 308, 315, 328, 329, 330, 337, 338, 341, 352, 354, 357, 358, 359, 361, 364, 367, 373, 375, 387, 388, 394, 401, 402, 418, 421, 426, 430, 433, 459, 460, 461, 464, 465, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "effici": [3, 13, 22, 25, 48, 58, 61, 62, 66, 76, 90, 93, 96, 103, 104, 105, 125, 132, 151, 157, 174, 182, 185, 190, 212, 215, 218, 219, 223, 225, 234, 235, 251, 254, 283, 284, 293, 299, 300, 307, 318, 319, 328, 329, 341, 343, 344, 347, 363, 364, 404, 406, 408, 412, 423, 427, 463, 465, 467, 469, 472, 474, 475, 476, 477, 480, 481, 482], "void": [3, 5, 7, 9, 11, 12, 17, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 47, 48, 50, 51, 56, 57, 58, 59, 61, 62, 64, 69, 70, 71, 73, 74, 75, 84, 95, 97, 175, 319, 347, 410, 430, 468, 471, 472, 473, 480, 481, 482], "pyobject_del": [3, 41, 61, 464], "releas": [3, 5, 7, 12, 28, 33, 34, 35, 41, 47, 55, 56, 59, 61, 62, 66, 70, 71, 73, 74, 75, 78, 82, 83, 91, 99, 101, 106, 108, 111, 113, 116, 120, 125, 134, 137, 138, 147, 163, 165, 168, 175, 176, 190, 209, 233, 234, 235, 249, 255, 258, 267, 271, 283, 284, 293, 298, 299, 303, 333, 337, 340, 343, 344, 352, 356, 361, 364, 368, 370, 381, 383, 385, 399, 421, 425, 427, 435, 439, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 474, 483], "an": [3, 5, 7, 8, 9, 11, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 127, 131, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 169, 172, 174, 175, 176, 177, 178, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 439, 440, 441, 442, 448, 450, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "ornormal": [3, 5, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 37, 44, 48, 54, 56, 61, 64, 66, 70, 71, 73, 74, 82, 83, 88, 90, 91, 92, 98, 99, 102, 103, 105, 106, 108, 111, 114, 118, 120, 138, 139, 140, 143, 144, 146, 150, 155, 157, 166, 168, 175, 176, 180, 182, 185, 187, 189, 192, 194, 195, 197, 199, 201, 204, 207, 208, 210, 212, 213, 217, 219, 220, 224, 225, 229, 234, 239, 241, 245, 246, 247, 258, 266, 267, 268, 269, 273, 275, 276, 282, 283, 288, 290, 292, 293, 294, 296, 297, 299, 302, 308, 311, 314, 319, 320, 321, 324, 331, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 348, 352, 353, 359, 361, 362, 363, 364, 365, 367, 368, 371, 373, 375, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 399, 401, 406, 409, 410, 413, 414, 415, 418, 420, 421, 424, 426, 427, 428, 429, 431, 433, 434, 435, 440, 454, 460, 462, 467, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "tp_dealloc": [3, 28, 59, 61, 73, 74, 472, 480, 482], "handler": [3, 23, 24, 28, 32, 33, 57, 59, 61, 62, 63, 64, 66, 71, 73, 74, 79, 85, 105, 113, 116, 118, 120, 124, 129, 131, 134, 139, 145, 151, 152, 165, 166, 176, 184, 187, 188, 190, 195, 196, 200, 201, 212, 224, 228, 239, 244, 254, 256, 258, 260, 266, 268, 273, 283, 292, 293, 297, 308, 314, 315, 328, 329, 332, 337, 340, 344, 350, 352, 355, 357, 361, 365, 367, 387, 392, 394, 402, 410, 411, 413, 415, 416, 419, 426, 427, 428, 454, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "specifi": [3, 5, 7, 9, 11, 13, 14, 17, 18, 20, 22, 23, 25, 30, 32, 33, 34, 38, 41, 44, 48, 54, 55, 59, 61, 62, 64, 66, 71, 73, 74, 75, 77, 86, 90, 91, 92, 93, 98, 99, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 117, 118, 120, 125, 131, 132, 134, 137, 138, 139, 141, 143, 144, 146, 149, 150, 151, 154, 155, 156, 157, 160, 162, 165, 166, 168, 172, 174, 176, 180, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 217, 222, 224, 225, 226, 227, 229, 230, 233, 234, 235, 241, 242, 243, 244, 246, 247, 250, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 311, 313, 314, 317, 319, 320, 322, 324, 328, 329, 330, 331, 332, 333, 335, 337, 340, 341, 344, 345, 347, 348, 352, 353, 354, 357, 358, 359, 360, 361, 364, 365, 366, 368, 371, 374, 375, 377, 379, 380, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 404, 405, 406, 409, 410, 412, 414, 415, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 434, 435, 445, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "should": [3, 5, 7, 10, 11, 14, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 35, 36, 41, 44, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 83, 86, 87, 88, 90, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 118, 120, 121, 125, 127, 131, 132, 134, 136, 138, 139, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 179, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 314, 318, 319, 320, 321, 322, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 354, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 397, 398, 399, 400, 401, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "access": [3, 5, 7, 11, 12, 16, 20, 23, 24, 27, 30, 32, 34, 44, 46, 48, 49, 50, 52, 53, 57, 58, 59, 61, 66, 70, 71, 73, 74, 75, 83, 85, 88, 91, 95, 96, 98, 99, 101, 102, 104, 105, 106, 108, 114, 116, 120, 135, 137, 138, 142, 146, 149, 151, 154, 157, 159, 160, 163, 168, 169, 174, 176, 180, 182, 185, 190, 192, 193, 195, 199, 202, 204, 206, 209, 211, 212, 216, 217, 218, 220, 224, 225, 226, 229, 231, 232, 234, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 269, 271, 275, 276, 278, 281, 282, 283, 286, 292, 293, 294, 295, 297, 299, 302, 306, 310, 312, 314, 315, 319, 320, 322, 324, 328, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 345, 348, 350, 352, 353, 357, 358, 359, 361, 364, 366, 368, 374, 375, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 401, 403, 405, 406, 408, 409, 410, 411, 412, 414, 419, 421, 424, 425, 426, 428, 429, 431, 435, 439, 448, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "after": [3, 5, 7, 8, 13, 18, 23, 28, 32, 33, 34, 38, 41, 44, 55, 56, 57, 59, 61, 62, 66, 69, 70, 71, 74, 83, 86, 87, 88, 90, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 108, 110, 111, 113, 114, 115, 118, 120, 121, 125, 127, 132, 134, 138, 139, 140, 143, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 165, 166, 168, 169, 174, 175, 176, 178, 180, 182, 184, 185, 189, 190, 192, 194, 195, 204, 205, 206, 208, 209, 211, 212, 214, 215, 217, 222, 224, 226, 227, 231, 233, 234, 241, 244, 246, 247, 249, 250, 255, 258, 261, 266, 267, 268, 269, 270, 271, 275, 278, 279, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 300, 302, 305, 308, 309, 314, 319, 320, 324, 325, 328, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 352, 357, 359, 360, 361, 363, 364, 365, 366, 368, 374, 375, 380, 381, 383, 385, 387, 388, 389, 394, 398, 399, 400, 401, 404, 406, 409, 412, 414, 415, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 439, 440, 443, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "as": [3, 4, 5, 7, 8, 9, 11, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 47, 48, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 127, 128, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 286, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 440, 442, 445, 447, 449, 450, 451, 454, 455, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 481, 482, 483], "no": [3, 5, 7, 11, 12, 14, 17, 18, 22, 23, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 44, 45, 48, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 97, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 113, 115, 118, 120, 121, 125, 131, 132, 136, 137, 138, 139, 141, 144, 146, 147, 150, 151, 153, 154, 155, 157, 160, 162, 165, 166, 168, 169, 172, 174, 175, 176, 180, 182, 183, 185, 189, 190, 192, 194, 195, 196, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 222, 224, 225, 226, 227, 229, 230, 231, 233, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 284, 286, 288, 289, 292, 293, 294, 295, 296, 297, 299, 301, 302, 305, 306, 307, 308, 309, 311, 313, 314, 318, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 360, 361, 363, 364, 365, 368, 370, 371, 372, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 440, 442, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "longer": [3, 5, 7, 22, 23, 30, 33, 34, 38, 44, 50, 56, 57, 61, 62, 65, 66, 69, 71, 83, 88, 90, 92, 93, 97, 98, 101, 106, 111, 115, 118, 125, 141, 157, 166, 175, 176, 183, 187, 189, 190, 198, 200, 207, 210, 224, 225, 234, 241, 244, 247, 249, 250, 251, 255, 259, 261, 265, 268, 269, 271, 283, 284, 286, 292, 293, 294, 302, 307, 309, 311, 318, 319, 325, 328, 332, 337, 340, 341, 344, 345, 347, 348, 352, 357, 361, 363, 364, 365, 375, 380, 381, 383, 385, 387, 388, 389, 398, 399, 401, 408, 409, 410, 411, 412, 413, 421, 423, 429, 431, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "valid": [3, 5, 7, 11, 16, 18, 23, 28, 33, 41, 61, 62, 64, 66, 70, 71, 83, 86, 88, 90, 96, 102, 105, 108, 110, 118, 120, 138, 143, 146, 151, 156, 157, 158, 162, 166, 168, 171, 172, 174, 175, 176, 180, 182, 183, 185, 186, 188, 193, 194, 196, 202, 206, 208, 210, 224, 231, 237, 241, 243, 244, 246, 250, 255, 256, 258, 259, 261, 262, 265, 267, 268, 270, 278, 281, 283, 287, 288, 293, 294, 301, 302, 304, 308, 311, 314, 319, 322, 323, 324, 331, 333, 335, 337, 340, 341, 343, 344, 345, 347, 348, 352, 357, 361, 364, 365, 375, 383, 385, 386, 387, 388, 394, 400, 404, 410, 412, 414, 415, 419, 421, 422, 423, 424, 426, 427, 431, 434, 435, 442, 450, 454, 455, 461, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_py_nonestruct": [3, 84], "visibl": [3, 34, 58, 66, 71, 83, 88, 90, 93, 99, 103, 125, 127, 138, 157, 166, 176, 178, 189, 195, 204, 221, 246, 255, 261, 271, 337, 359, 375, 388, 394, 399, 428, 462, 465, 466, 474, 479, 480, 482], "none": [3, 5, 16, 20, 23, 26, 30, 32, 33, 44, 53, 54, 56, 61, 62, 65, 66, 71, 78, 83, 85, 86, 87, 88, 91, 93, 98, 99, 102, 103, 104, 106, 110, 111, 112, 114, 115, 118, 120, 121, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 141, 143, 144, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 180, 182, 183, 185, 188, 189, 190, 192, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 283, 284, 286, 287, 288, 289, 291, 292, 293, 296, 297, 299, 300, 302, 304, 305, 307, 308, 311, 312, 314, 316, 318, 319, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 352, 354, 357, 358, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 426, 427, 429, 430, 431, 434, 435, 436, 440, 441, 442, 445, 449, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "onli": [3, 5, 7, 9, 10, 13, 22, 23, 24, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 118, 120, 121, 125, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 153, 154, 155, 157, 159, 160, 162, 165, 166, 168, 169, 174, 175, 176, 178, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 241, 242, 243, 244, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 287, 288, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 322, 325, 327, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 442, 444, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483], "py_non": [3, 23, 27, 32, 45, 46, 54, 65, 71, 84, 88, 430], "macro": [3, 4, 5, 6, 7, 16, 17, 20, 23, 28, 31, 32, 33, 37, 41, 42, 43, 44, 49, 50, 53, 54, 55, 57, 58, 61, 62, 66, 71, 74, 88, 175, 216, 286, 352, 361, 455, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "evalu": [3, 22, 32, 54, 64, 66, 71, 83, 86, 88, 92, 93, 100, 111, 120, 144, 224, 229, 261, 267, 268, 275, 283, 293, 297, 323, 324, 343, 344, 352, 364, 368, 385, 393, 401, 426, 427, 432, 434, 435, 445, 448, 455, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 480, 481, 482], "pointer": [3, 5, 7, 8, 9, 11, 13, 15, 17, 18, 20, 23, 24, 30, 32, 34, 38, 41, 42, 44, 47, 48, 52, 53, 56, 57, 58, 59, 61, 62, 66, 70, 73, 74, 76, 77, 83, 85, 88, 95, 97, 100, 115, 116, 142, 176, 178, 241, 278, 283, 293, 299, 303, 308, 349, 352, 400, 420, 429, 439, 463, 465, 466, 467, 468, 472, 473, 474, 476, 478, 479, 482], "pymodule_cr": [3, 32, 44, 70, 71, 74], "creat": [3, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 20, 22, 23, 24, 25, 28, 29, 30, 33, 34, 38, 39, 41, 42, 44, 48, 50, 53, 56, 57, 58, 60, 61, 64, 65, 66, 71, 73, 74, 75, 84, 86, 88, 90, 91, 97, 98, 101, 102, 104, 105, 106, 108, 112, 113, 114, 115, 116, 120, 121, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 139, 144, 149, 150, 151, 153, 156, 157, 159, 160, 162, 165, 166, 168, 169, 173, 174, 175, 176, 180, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 204, 206, 207, 209, 210, 212, 214, 217, 220, 222, 223, 224, 225, 226, 229, 231, 233, 235, 239, 240, 241, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 267, 268, 269, 270, 271, 272, 278, 281, 282, 283, 284, 285, 288, 293, 296, 297, 299, 300, 302, 305, 307, 308, 312, 314, 319, 322, 323, 328, 330, 332, 334, 335, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 357, 359, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 394, 396, 397, 401, 402, 404, 406, 409, 410, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 425, 426, 428, 429, 431, 433, 434, 435, 439, 440, 441, 450, 451, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "extens": [3, 5, 7, 11, 23, 27, 33, 34, 41, 44, 49, 55, 59, 60, 61, 64, 66, 68, 70, 72, 82, 83, 85, 88, 89, 90, 92, 94, 101, 102, 112, 116, 138, 143, 152, 166, 172, 175, 176, 180, 182, 183, 188, 189, 192, 193, 199, 202, 207, 217, 219, 226, 234, 235, 240, 241, 244, 245, 247, 249, 250, 251, 254, 255, 258, 262, 269, 271, 273, 276, 280, 288, 289, 292, 293, 294, 296, 297, 299, 305, 308, 312, 314, 317, 319, 330, 331, 332, 333, 335, 337, 340, 341, 344, 352, 353, 354, 357, 361, 364, 367, 368, 374, 381, 383, 384, 385, 387, 394, 401, 404, 409, 410, 413, 414, 418, 420, 421, 425, 427, 429, 431, 439, 444, 450, 454, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482], "modul": [3, 5, 7, 11, 16, 17, 20, 23, 24, 27, 30, 32, 33, 34, 40, 41, 56, 57, 59, 61, 63, 64, 66, 69, 70, 72, 73, 74, 75, 79, 85, 86, 87, 88, 89, 92, 94, 95, 100, 101, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 302, 304, 305, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 447, 448, 450, 451, 454, 455, 457, 469, 482, 483], "built": [4, 7, 16, 23, 24, 30, 32, 33, 34, 36, 41, 46, 48, 55, 56, 57, 59, 60, 61, 66, 68, 71, 73, 74, 75, 76, 77, 78, 82, 83, 88, 91, 95, 98, 99, 101, 104, 105, 106, 108, 109, 110, 111, 113, 114, 118, 120, 127, 131, 134, 145, 151, 154, 157, 158, 160, 162, 167, 177, 180, 181, 185, 186, 189, 190, 194, 198, 201, 205, 210, 212, 224, 226, 229, 234, 246, 249, 250, 251, 252, 254, 255, 257, 258, 261, 266, 275, 276, 283, 284, 289, 292, 293, 294, 296, 297, 299, 302, 308, 311, 313, 320, 321, 328, 329, 337, 340, 341, 345, 347, 348, 352, 354, 361, 368, 375, 383, 387, 388, 399, 401, 404, 409, 410, 412, 414, 418, 422, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 441, 442, 454, 455, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "run": [4, 23, 28, 32, 33, 34, 41, 44, 55, 57, 61, 62, 66, 70, 71, 74, 75, 76, 77, 83, 84, 86, 87, 88, 90, 91, 93, 95, 97, 98, 100, 101, 102, 103, 105, 108, 110, 111, 112, 113, 118, 122, 123, 124, 128, 131, 132, 133, 135, 136, 137, 140, 144, 151, 152, 156, 162, 163, 165, 166, 168, 169, 172, 175, 176, 180, 184, 185, 186, 192, 199, 202, 207, 212, 213, 225, 226, 227, 229, 234, 235, 241, 242, 243, 244, 250, 251, 255, 256, 261, 266, 268, 269, 271, 279, 283, 286, 288, 292, 293, 294, 296, 297, 308, 313, 320, 322, 323, 324, 325, 327, 331, 332, 333, 334, 337, 338, 340, 341, 343, 344, 345, 348, 352, 353, 354, 363, 364, 365, 366, 367, 368, 375, 379, 381, 383, 385, 388, 389, 397, 398, 399, 401, 402, 404, 406, 419, 420, 423, 426, 427, 428, 429, 430, 431, 434, 439, 442, 450, 451, 452, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "stabil": [4, 31, 66, 471, 472, 482], "py_major_vers": [4, 111, 472], "1a2": 4, "py_minor_vers": [4, 64, 111, 472, 480], "py_micro_vers": [4, 111], "py_release_level": [4, 111], "0xa": 4, "alpha": [4, 66, 78, 85, 111, 284, 288, 307, 318, 352, 354, 450, 461, 462, 467, 470, 483], "0xb": 4, "beta": [4, 66, 111, 318, 352, 450, 461, 467, 477, 483], "0xc": 4, "0xf": 4, "py_release_seri": [4, 111], "py_version_hex": [4, 55, 471, 472, 480, 481, 482], "32": [4, 16, 25, 40, 57, 66, 84, 92, 93, 95, 96, 102, 103, 105, 113, 119, 138, 141, 146, 153, 157, 165, 175, 185, 214, 225, 234, 249, 250, 251, 259, 261, 262, 270, 283, 293, 303, 304, 306, 311, 318, 326, 333, 337, 343, 344, 349, 352, 364, 365, 387, 397, 404, 405, 420, 421, 422, 423, 427, 434, 445, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "big": [4, 25, 34, 41, 62, 66, 71, 76, 82, 88, 93, 99, 103, 105, 131, 132, 141, 153, 157, 166, 175, 176, 190, 229, 235, 259, 269, 295, 344, 347, 349, 352, 361, 388, 397, 404, 433, 451, 455, 463, 464, 465, 468, 470, 472, 474, 476, 482], "endian": [4, 25, 30, 41, 62, 82, 103, 105, 141, 153, 157, 175, 229, 259, 295, 347, 349, 352, 397, 404, 451, 476, 482], "order": [4, 7, 24, 28, 30, 32, 33, 42, 44, 57, 61, 62, 66, 70, 71, 73, 74, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 114, 116, 118, 120, 125, 132, 138, 140, 145, 147, 149, 151, 153, 155, 157, 159, 165, 166, 168, 174, 176, 177, 178, 182, 183, 185, 186, 189, 190, 192, 195, 199, 201, 202, 204, 207, 210, 212, 213, 217, 223, 224, 226, 227, 229, 230, 231, 232, 235, 244, 246, 247, 249, 250, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 275, 281, 283, 284, 288, 293, 295, 296, 299, 302, 303, 304, 307, 308, 309, 310, 313, 314, 315, 316, 319, 325, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 348, 350, 352, 357, 361, 363, 364, 365, 368, 375, 380, 381, 383, 384, 385, 387, 388, 393, 394, 397, 398, 399, 401, 406, 409, 410, 412, 414, 420, 421, 423, 426, 427, 428, 430, 431, 432, 434, 441, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "0x03": [4, 190], "16": [4, 5, 16, 33, 40, 46, 66, 76, 83, 87, 92, 93, 99, 103, 105, 115, 119, 141, 146, 157, 172, 175, 176, 182, 190, 192, 210, 220, 224, 225, 234, 235, 239, 259, 261, 262, 267, 283, 292, 293, 295, 314, 318, 319, 322, 326, 332, 337, 341, 343, 344, 345, 348, 352, 365, 368, 377, 383, 397, 423, 425, 434, 439, 441, 443, 445, 448, 450, 451, 452, 461, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "0x04": [4, 190, 427], "17": [4, 92, 93, 99, 105, 108, 138, 182, 185, 189, 192, 207, 222, 235, 257, 261, 292, 293, 319, 365, 377, 383, 443, 448, 462, 465, 467, 468, 470, 474, 476, 477, 480, 481, 482], "24": [4, 83, 92, 93, 96, 102, 105, 138, 141, 182, 185, 192, 208, 235, 259, 261, 295, 319, 332, 343, 344, 349, 365, 423, 434, 468, 472, 475, 476, 480, 481, 482], "0x01": [4, 190, 337], "25": [4, 83, 92, 93, 125, 182, 185, 189, 220, 235, 259, 261, 283, 318, 319, 322, 335, 337, 340, 343, 344, 360, 377, 381, 383, 423, 441, 445, 447, 448, 450, 461, 463, 464, 465, 467, 468, 472, 473, 475, 477, 478, 479, 480, 481, 482], "28": [4, 32, 95, 99, 185, 225, 235, 259, 340, 365, 383, 465, 466, 467, 471, 472, 473, 474, 480, 481, 482], "29": [4, 95, 99, 102, 182, 185, 189, 235, 259, 261, 267, 318, 365, 464, 467, 471, 475, 480, 481, 482], "0x2": 4, "hexvers": [4, 66, 78, 315, 352, 449, 475], "0x030401a2": 4, "10": [4, 10, 14, 20, 22, 23, 26, 28, 32, 33, 35, 38, 44, 46, 48, 50, 53, 55, 56, 59, 61, 62, 66, 71, 73, 77, 82, 85, 90, 91, 92, 93, 95, 98, 99, 102, 103, 104, 105, 106, 110, 111, 113, 114, 118, 119, 120, 125, 128, 130, 133, 134, 135, 136, 137, 138, 143, 147, 149, 151, 154, 155, 157, 159, 162, 168, 175, 176, 180, 182, 184, 185, 187, 190, 192, 208, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 230, 232, 234, 235, 236, 240, 241, 250, 251, 255, 258, 259, 261, 266, 267, 268, 274, 275, 278, 282, 283, 284, 286, 288, 291, 292, 293, 294, 296, 303, 304, 307, 308, 311, 312, 318, 319, 322, 325, 326, 330, 332, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 359, 361, 363, 364, 365, 366, 368, 371, 377, 380, 383, 384, 385, 387, 389, 393, 394, 406, 412, 414, 419, 421, 422, 424, 426, 427, 428, 429, 430, 431, 434, 439, 440, 441, 442, 443, 445, 447, 448, 450, 451, 452, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 480, 481, 483], "0x030a00f0": 4, "version": [4, 7, 9, 10, 13, 14, 23, 26, 28, 30, 32, 33, 34, 35, 40, 41, 42, 44, 46, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 71, 73, 74, 75, 76, 77, 78, 83, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 102, 103, 105, 106, 109, 110, 114, 115, 116, 118, 120, 125, 127, 132, 138, 139, 142, 143, 151, 157, 162, 166, 172, 175, 176, 182, 183, 185, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 212, 220, 222, 224, 229, 232, 234, 239, 241, 242, 243, 244, 246, 247, 249, 250, 252, 255, 256, 257, 259, 262, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 280, 281, 283, 285, 288, 293, 294, 295, 296, 298, 299, 303, 306, 307, 308, 310, 312, 313, 314, 315, 318, 319, 320, 330, 331, 332, 334, 337, 338, 339, 340, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 358, 360, 361, 363, 364, 366, 368, 374, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 400, 401, 404, 406, 409, 410, 412, 416, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 434, 435, 449, 452, 454, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "avail": [4, 5, 7, 11, 13, 15, 22, 23, 24, 25, 32, 33, 34, 38, 41, 44, 53, 55, 57, 59, 62, 64, 66, 69, 70, 71, 73, 75, 82, 83, 88, 90, 92, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 113, 114, 118, 120, 121, 122, 125, 132, 136, 138, 139, 151, 155, 157, 162, 165, 166, 168, 169, 172, 174, 175, 176, 181, 183, 185, 190, 194, 206, 209, 210, 211, 212, 213, 214, 217, 221, 222, 224, 225, 228, 229, 232, 234, 235, 241, 244, 246, 247, 250, 251, 252, 255, 257, 258, 259, 262, 266, 267, 268, 269, 271, 275, 276, 277, 278, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 299, 302, 304, 305, 306, 308, 310, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 355, 357, 358, 360, 361, 364, 365, 367, 368, 373, 374, 375, 377, 378, 380, 381, 384, 385, 387, 388, 389, 394, 397, 398, 401, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 447, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "via": [4, 7, 35, 41, 44, 61, 62, 66, 71, 74, 82, 83, 87, 93, 95, 98, 106, 110, 111, 113, 114, 118, 120, 121, 140, 144, 151, 166, 169, 182, 189, 192, 195, 199, 200, 201, 204, 205, 206, 207, 212, 215, 217, 224, 227, 231, 232, 241, 246, 249, 251, 255, 261, 262, 265, 266, 267, 268, 269, 278, 283, 284, 292, 293, 297, 299, 302, 305, 308, 314, 317, 319, 320, 321, 323, 335, 337, 338, 340, 341, 344, 345, 348, 352, 354, 359, 361, 383, 385, 387, 388, 394, 399, 404, 406, 409, 412, 418, 424, 426, 427, 429, 454, 457, 461, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "the": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 72, 73, 75, 76, 84, 87, 89, 91, 92, 94, 96, 103, 104, 106, 110, 111, 113, 114, 115, 116, 117, 120, 121, 123, 124, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 290, 291, 294, 295, 298, 299, 300, 301, 302, 304, 305, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 341, 342, 343, 345, 346, 347, 350, 352, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 390, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 416, 418, 419, 421, 422, 423, 425, 428, 430, 432, 433, 434, 436, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 453, 454, 457, 459, 461, 462, 465, 469, 470, 482, 483], "symbol": [4, 33, 34, 55, 64, 66, 69, 71, 75, 83, 90, 92, 99, 100, 105, 108, 116, 120, 156, 158, 175, 176, 185, 190, 192, 210, 230, 244, 254, 264, 266, 269, 272, 293, 294, 296, 300, 319, 322, 332, 333, 337, 340, 342, 344, 352, 353, 356, 357, 358, 360, 361, 368, 375, 383, 386, 393, 404, 409, 414, 420, 427, 430, 433, 435, 440, 454, 460, 461, 463, 465, 466, 468, 470, 471, 474, 478, 480, 481, 482], "py_vers": [4, 32, 55, 175, 472, 474, 482], "const": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 30, 32, 33, 38, 39, 40, 42, 44, 47, 48, 50, 51, 52, 56, 57, 58, 59, 61, 62, 64, 66, 71, 73, 77, 88, 95, 97, 116, 292, 350, 410, 476, 479, 480, 482], "unsign": [4, 5, 7, 9, 25, 30, 32, 33, 34, 38, 41, 56, 59, 61, 62, 73, 88, 119, 141, 146, 175, 293, 295, 299, 337, 344, 347, 349, 407, 409, 410, 423, 451, 463, 464, 466, 471, 475, 479, 482], "long": [4, 5, 6, 9, 22, 23, 30, 32, 33, 34, 38, 40, 44, 56, 57, 59, 61, 62, 64, 66, 71, 73, 76, 82, 83, 87, 88, 93, 95, 97, 98, 99, 101, 102, 103, 106, 110, 118, 119, 125, 138, 143, 146, 147, 165, 166, 168, 175, 176, 189, 192, 201, 207, 211, 214, 222, 224, 225, 226, 227, 241, 244, 246, 247, 258, 259, 261, 267, 268, 283, 292, 293, 299, 303, 305, 306, 307, 308, 319, 321, 328, 330, 333, 335, 337, 338, 340, 341, 344, 347, 352, 357, 361, 363, 364, 365, 366, 367, 368, 374, 375, 380, 394, 399, 404, 406, 409, 410, 424, 425, 426, 427, 429, 434, 454, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "sinc": [4, 5, 7, 10, 13, 14, 22, 23, 24, 26, 28, 30, 32, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 50, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 71, 73, 74, 77, 82, 83, 86, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 110, 111, 112, 125, 132, 144, 146, 149, 151, 156, 160, 166, 168, 172, 174, 175, 176, 180, 182, 185, 189, 192, 193, 195, 197, 198, 200, 202, 204, 206, 207, 208, 212, 217, 221, 224, 225, 226, 229, 233, 234, 242, 243, 244, 246, 247, 249, 250, 251, 258, 262, 266, 268, 269, 271, 272, 275, 278, 283, 288, 292, 293, 294, 295, 296, 297, 307, 308, 314, 319, 328, 330, 331, 332, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 352, 361, 363, 364, 365, 368, 375, 377, 379, 380, 381, 385, 387, 388, 389, 394, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 413, 414, 418, 420, 421, 423, 426, 427, 428, 429, 431, 433, 434, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "11": [4, 7, 13, 23, 25, 26, 30, 32, 33, 34, 42, 50, 56, 57, 58, 59, 66, 83, 85, 87, 90, 91, 92, 93, 97, 98, 99, 100, 102, 105, 108, 110, 111, 115, 118, 125, 126, 127, 134, 135, 137, 138, 141, 146, 151, 152, 153, 157, 159, 165, 168, 172, 174, 175, 180, 182, 183, 185, 190, 192, 210, 211, 212, 214, 217, 220, 224, 225, 229, 230, 233, 234, 235, 240, 241, 244, 246, 248, 250, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 272, 275, 278, 281, 283, 287, 288, 291, 293, 295, 296, 297, 299, 301, 307, 318, 319, 321, 322, 330, 332, 333, 336, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 352, 353, 354, 358, 359, 360, 361, 363, 365, 377, 378, 380, 383, 385, 387, 394, 396, 398, 399, 402, 406, 407, 411, 421, 422, 423, 424, 426, 427, 429, 430, 434, 435, 441, 443, 445, 454, 455, 460, 463, 464, 465, 467, 469, 471, 473, 474, 476, 477, 478, 479, 480, 483], "runtim": [4, 24, 32, 34, 41, 50, 57, 64, 66, 71, 73, 74, 75, 83, 85, 86, 88, 97, 98, 105, 108, 111, 142, 162, 166, 175, 181, 187, 190, 212, 224, 250, 254, 257, 268, 269, 292, 294, 311, 340, 344, 348, 352, 353, 368, 381, 385, 388, 399, 403, 410, 420, 423, 426, 427, 428, 431, 435, 439, 454, 455, 460, 462, 464, 468, 469, 471, 475, 476, 477, 478, 481, 482], "encod": [4, 5, 16, 23, 24, 30, 32, 33, 44, 57, 63, 64, 66, 69, 75, 82, 85, 88, 90, 95, 98, 99, 101, 102, 106, 116, 117, 118, 119, 125, 132, 135, 141, 143, 145, 146, 149, 150, 151, 153, 166, 169, 174, 175, 176, 177, 182, 183, 185, 187, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 212, 213, 217, 222, 224, 229, 233, 234, 241, 243, 247, 250, 251, 252, 253, 254, 255, 256, 264, 265, 266, 267, 268, 269, 270, 276, 285, 286, 293, 295, 296, 297, 299, 304, 307, 309, 314, 330, 335, 337, 340, 341, 344, 347, 348, 349, 350, 352, 355, 357, 358, 359, 361, 368, 376, 377, 385, 394, 396, 400, 406, 407, 410, 412, 414, 415, 416, 418, 419, 420, 421, 427, 431, 444, 445, 454, 460, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483], "singl": [4, 5, 7, 9, 14, 16, 22, 23, 25, 30, 32, 34, 38, 47, 56, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 76, 77, 83, 85, 88, 90, 92, 93, 96, 97, 101, 102, 104, 105, 106, 108, 118, 120, 125, 139, 144, 146, 150, 151, 156, 157, 158, 162, 165, 166, 174, 175, 176, 177, 180, 182, 185, 188, 189, 190, 192, 194, 195, 201, 202, 206, 207, 212, 217, 219, 222, 224, 225, 229, 233, 234, 241, 242, 246, 247, 250, 251, 255, 258, 259, 261, 265, 267, 268, 269, 270, 271, 275, 278, 281, 283, 284, 288, 292, 293, 294, 296, 297, 299, 302, 305, 307, 308, 314, 315, 318, 319, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 351, 352, 354, 357, 361, 363, 365, 368, 370, 371, 375, 377, 379, 380, 385, 387, 388, 389, 393, 394, 397, 399, 401, 406, 407, 409, 412, 414, 416, 418, 420, 421, 426, 427, 429, 430, 431, 433, 434, 435, 440, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "constant": [4, 7, 25, 32, 44, 56, 61, 62, 66, 73, 74, 76, 82, 83, 88, 90, 92, 99, 113, 116, 118, 120, 125, 138, 154, 157, 160, 163, 165, 172, 174, 175, 177, 182, 183, 185, 190, 192, 210, 214, 224, 225, 226, 234, 235, 241, 243, 249, 254, 255, 258, 261, 264, 266, 267, 270, 273, 275, 281, 282, 283, 292, 293, 295, 298, 299, 300, 304, 308, 319, 322, 326, 328, 329, 333, 337, 341, 342, 343, 344, 352, 355, 357, 358, 360, 361, 362, 364, 368, 374, 377, 381, 385, 386, 397, 403, 405, 409, 411, 412, 414, 418, 421, 423, 427, 429, 434, 440, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "integ": [4, 5, 7, 9, 14, 18, 22, 23, 24, 33, 34, 38, 40, 41, 44, 46, 48, 54, 59, 61, 62, 64, 66, 70, 71, 73, 74, 76, 82, 88, 90, 92, 93, 96, 99, 101, 102, 103, 105, 106, 112, 113, 115, 118, 120, 121, 125, 132, 137, 139, 141, 149, 150, 151, 154, 157, 165, 166, 172, 175, 176, 177, 182, 185, 192, 202, 210, 211, 212, 214, 217, 220, 222, 224, 226, 232, 233, 242, 244, 247, 249, 250, 254, 256, 258, 262, 266, 267, 268, 269, 270, 275, 278, 281, 283, 288, 289, 292, 293, 294, 299, 304, 305, 307, 308, 310, 314, 318, 319, 320, 321, 322, 328, 329, 332, 337, 338, 339, 340, 341, 345, 347, 348, 349, 352, 360, 361, 364, 365, 368, 375, 378, 383, 386, 388, 393, 397, 399, 400, 404, 407, 409, 410, 412, 418, 421, 423, 426, 427, 429, 435, 440, 442, 450, 454, 455, 461, 462, 464, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "contain": [4, 5, 7, 9, 12, 13, 14, 22, 23, 25, 27, 28, 30, 32, 33, 34, 37, 39, 40, 41, 47, 48, 52, 53, 55, 56, 57, 58, 59, 61, 62, 66, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 115, 116, 120, 121, 125, 132, 138, 141, 143, 144, 146, 149, 150, 151, 152, 156, 157, 158, 162, 165, 166, 168, 169, 171, 174, 175, 176, 177, 180, 181, 182, 183, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 281, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 310, 311, 312, 313, 314, 319, 322, 324, 328, 330, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 351, 352, 353, 354, 356, 357, 360, 361, 363, 364, 365, 366, 368, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 439, 440, 441, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "includ": [4, 5, 7, 9, 18, 20, 22, 28, 30, 31, 32, 33, 44, 48, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 66, 68, 70, 71, 73, 74, 75, 77, 79, 82, 83, 84, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 102, 104, 105, 106, 108, 110, 112, 115, 118, 120, 132, 136, 138, 139, 143, 146, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 166, 172, 175, 176, 177, 180, 182, 185, 189, 190, 192, 195, 199, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 238, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 278, 281, 283, 286, 288, 289, 292, 293, 294, 296, 297, 299, 305, 306, 307, 308, 311, 312, 314, 319, 322, 323, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 355, 357, 358, 361, 363, 364, 365, 367, 368, 371, 372, 374, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 398, 399, 401, 404, 405, 406, 408, 409, 410, 412, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 448, 450, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "patchlevel": [4, 303], "these": [5, 7, 8, 9, 11, 12, 15, 20, 23, 24, 25, 28, 30, 32, 33, 34, 40, 41, 44, 47, 55, 56, 57, 61, 62, 64, 70, 71, 73, 74, 75, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 112, 113, 114, 118, 120, 125, 131, 132, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 165, 166, 168, 174, 175, 176, 177, 180, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 222, 224, 225, 226, 229, 234, 235, 239, 241, 242, 244, 246, 249, 250, 251, 252, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 302, 307, 308, 312, 314, 318, 319, 320, 321, 322, 324, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 360, 361, 364, 365, 366, 368, 374, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 399, 401, 402, 404, 406, 407, 409, 410, 412, 413, 414, 415, 418, 419, 420, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "when": [5, 7, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 28, 30, 32, 33, 34, 35, 36, 38, 41, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 59, 61, 62, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 123, 125, 127, 128, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 151, 152, 153, 154, 155, 156, 157, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 220, 222, 224, 225, 226, 227, 229, 231, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 283, 284, 286, 287, 288, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 311, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 439, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "your": [5, 20, 32, 34, 55, 57, 61, 66, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 90, 92, 93, 97, 98, 100, 102, 103, 105, 106, 108, 110, 112, 116, 118, 120, 121, 132, 139, 141, 152, 158, 166, 176, 180, 182, 186, 190, 192, 195, 197, 199, 200, 201, 204, 206, 210, 212, 221, 222, 225, 226, 233, 234, 241, 242, 243, 244, 245, 246, 250, 255, 258, 262, 266, 267, 268, 269, 271, 278, 283, 293, 296, 297, 299, 305, 306, 308, 313, 319, 320, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 353, 358, 360, 361, 363, 364, 365, 366, 368, 370, 374, 381, 383, 385, 387, 388, 394, 398, 399, 401, 406, 409, 410, 412, 414, 419, 420, 421, 424, 433, 435, 440, 441, 447, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "own": [5, 7, 9, 23, 24, 26, 28, 32, 34, 44, 57, 61, 62, 66, 70, 71, 74, 75, 76, 82, 83, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 105, 106, 108, 110, 112, 116, 118, 121, 125, 132, 136, 138, 139, 151, 166, 168, 174, 180, 185, 192, 195, 199, 202, 204, 206, 209, 210, 224, 226, 229, 231, 242, 246, 250, 255, 258, 267, 268, 269, 271, 283, 284, 286, 292, 293, 296, 297, 299, 308, 319, 321, 326, 331, 332, 333, 337, 340, 341, 344, 345, 348, 352, 361, 363, 364, 368, 383, 387, 393, 394, 398, 401, 402, 406, 409, 412, 414, 419, 423, 427, 429, 431, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 477, 479, 481, 482], "method": [5, 7, 10, 14, 15, 16, 21, 22, 23, 24, 25, 28, 33, 36, 38, 39, 41, 44, 45, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 64, 66, 70, 72, 73, 78, 79, 84, 85, 86, 87, 88, 90, 93, 98, 99, 101, 104, 105, 106, 110, 111, 113, 114, 115, 116, 120, 121, 124, 127, 129, 130, 131, 132, 135, 136, 137, 138, 139, 142, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 169, 174, 175, 176, 178, 180, 181, 182, 183, 185, 186, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 229, 231, 233, 234, 236, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 264, 265, 267, 268, 269, 270, 271, 273, 276, 278, 279, 281, 284, 286, 289, 291, 293, 295, 297, 298, 299, 301, 302, 305, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 321, 323, 325, 328, 329, 330, 331, 335, 338, 341, 343, 345, 347, 348, 349, 350, 351, 352, 357, 358, 359, 361, 363, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 380, 381, 384, 385, 386, 387, 393, 394, 396, 397, 398, 400, 402, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 426, 428, 431, 432, 434, 435, 440, 441, 442, 443, 444, 446, 448, 450, 451, 454, 455, 462, 463, 464, 467, 468, 470, 471, 472, 473, 474, 476, 480, 482, 483], "addit": [5, 7, 9, 23, 30, 32, 34, 40, 41, 44, 56, 61, 64, 66, 68, 71, 73, 74, 82, 88, 92, 93, 95, 96, 97, 98, 99, 102, 105, 108, 110, 113, 114, 115, 118, 120, 125, 138, 139, 141, 143, 145, 150, 151, 156, 157, 166, 168, 172, 174, 175, 176, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 192, 193, 195, 196, 198, 201, 202, 204, 205, 207, 209, 212, 214, 217, 220, 222, 224, 225, 226, 229, 231, 233, 234, 239, 241, 242, 244, 246, 250, 251, 255, 257, 258, 259, 261, 262, 266, 267, 268, 270, 271, 275, 276, 278, 283, 285, 292, 293, 294, 296, 299, 305, 306, 307, 308, 313, 314, 319, 321, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 345, 347, 348, 352, 358, 359, 361, 363, 364, 365, 366, 368, 371, 374, 375, 377, 383, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 404, 406, 407, 409, 410, 412, 413, 414, 415, 416, 418, 421, 426, 427, 428, 429, 431, 433, 434, 435, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "exampl": [5, 7, 16, 18, 22, 23, 32, 33, 34, 41, 44, 50, 55, 56, 59, 60, 61, 62, 64, 66, 70, 71, 72, 73, 75, 76, 77, 82, 83, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 115, 118, 120, 124, 125, 127, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 147, 149, 150, 151, 154, 157, 158, 159, 162, 165, 169, 171, 172, 174, 175, 176, 180, 181, 183, 185, 186, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 280, 282, 283, 284, 285, 288, 289, 290, 293, 295, 296, 297, 299, 300, 305, 306, 307, 308, 311, 313, 314, 315, 318, 320, 321, 326, 329, 331, 333, 334, 335, 337, 338, 340, 341, 344, 346, 347, 348, 350, 352, 354, 355, 357, 358, 361, 362, 363, 364, 365, 366, 368, 374, 375, 377, 379, 381, 383, 384, 385, 386, 387, 388, 393, 397, 399, 401, 402, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 421, 422, 424, 425, 426, 427, 429, 431, 433, 434, 435, 439, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "first": [5, 13, 14, 15, 16, 18, 22, 23, 25, 30, 32, 33, 34, 36, 38, 40, 41, 44, 46, 48, 52, 56, 57, 58, 59, 61, 62, 65, 66, 68, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 111, 112, 115, 118, 120, 125, 131, 134, 138, 139, 140, 141, 144, 147, 150, 151, 153, 155, 156, 157, 159, 165, 166, 168, 174, 175, 176, 177, 182, 183, 185, 187, 189, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 212, 213, 214, 217, 220, 222, 224, 225, 227, 229, 231, 234, 235, 241, 242, 243, 246, 247, 249, 255, 258, 259, 261, 265, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 283, 284, 287, 288, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 307, 308, 313, 314, 319, 320, 324, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 355, 357, 358, 360, 361, 363, 365, 366, 368, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 399, 400, 401, 404, 406, 407, 409, 412, 413, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 445, 448, 451, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "three": [5, 7, 23, 30, 34, 41, 56, 61, 71, 73, 74, 75, 76, 82, 83, 86, 88, 91, 92, 98, 99, 102, 103, 104, 105, 108, 111, 115, 118, 120, 121, 132, 133, 138, 157, 159, 160, 171, 174, 175, 176, 180, 182, 185, 188, 189, 190, 192, 193, 195, 199, 204, 206, 210, 212, 215, 224, 225, 226, 235, 242, 244, 247, 250, 258, 266, 267, 268, 269, 271, 278, 283, 286, 288, 292, 293, 295, 296, 299, 307, 308, 314, 318, 319, 328, 332, 333, 334, 337, 340, 341, 343, 344, 345, 347, 348, 352, 357, 358, 365, 366, 368, 375, 383, 384, 385, 387, 388, 389, 394, 398, 402, 408, 409, 413, 414, 418, 424, 426, 427, 429, 430, 431, 433, 434, 435, 436, 440, 450, 451, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 479, 480, 482], "describ": [5, 7, 13, 16, 23, 24, 26, 30, 34, 41, 44, 48, 49, 56, 57, 58, 59, 61, 64, 66, 70, 71, 73, 74, 75, 83, 86, 90, 91, 92, 93, 95, 96, 97, 98, 99, 105, 106, 108, 110, 113, 115, 117, 118, 120, 121, 125, 127, 136, 143, 144, 145, 150, 151, 152, 157, 162, 165, 166, 168, 174, 175, 176, 179, 180, 183, 185, 186, 187, 189, 192, 193, 194, 195, 201, 202, 207, 212, 215, 216, 221, 222, 223, 224, 229, 234, 241, 243, 244, 245, 246, 247, 248, 249, 251, 255, 256, 258, 259, 260, 266, 267, 268, 269, 271, 276, 277, 280, 281, 284, 285, 288, 289, 290, 292, 293, 295, 298, 299, 306, 307, 308, 312, 314, 315, 317, 319, 321, 322, 324, 328, 332, 335, 336, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 356, 364, 368, 374, 375, 383, 385, 387, 388, 393, 394, 396, 398, 404, 405, 406, 407, 409, 413, 414, 415, 418, 420, 421, 422, 423, 426, 427, 429, 431, 433, 434, 435, 436, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyarg_parsetupl": [5, 7, 47, 55, 56, 70, 71, 73, 75, 88, 429, 461, 463, 464, 466, 467, 471, 473, 475, 480, 482], "pyarg_parsetupleandkeyword": [5, 55, 56, 71, 73, 74, 88, 465, 478, 482], "pyarg_pars": [5, 55, 88, 468, 474, 482], "all": [5, 7, 9, 14, 17, 22, 23, 25, 28, 30, 32, 33, 34, 37, 38, 41, 44, 46, 50, 53, 55, 56, 57, 58, 59, 61, 62, 66, 70, 71, 73, 74, 75, 76, 82, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 115, 118, 120, 121, 123, 125, 127, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 169, 172, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 299, 300, 302, 305, 308, 309, 310, 311, 312, 313, 314, 316, 322, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 368, 374, 375, 377, 379, 380, 383, 384, 385, 386, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 439, 440, 441, 448, 449, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482], "tell": [5, 30, 32, 66, 71, 73, 76, 83, 87, 88, 90, 93, 99, 101, 102, 103, 108, 110, 115, 116, 118, 125, 139, 151, 153, 158, 192, 207, 221, 222, 234, 258, 267, 269, 277, 278, 283, 292, 295, 298, 299, 332, 333, 337, 338, 340, 341, 344, 349, 350, 366, 368, 379, 385, 388, 394, 400, 406, 421, 445, 461, 463, 464, 465, 467, 472, 477, 478, 479, 482], "about": [5, 7, 14, 23, 25, 34, 41, 55, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 76, 78, 82, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 112, 118, 120, 125, 127, 132, 141, 143, 144, 154, 155, 156, 157, 168, 171, 174, 175, 177, 180, 182, 185, 186, 189, 190, 193, 194, 196, 200, 202, 206, 208, 212, 215, 222, 224, 226, 234, 242, 244, 246, 250, 255, 258, 261, 265, 267, 268, 269, 270, 271, 275, 278, 279, 283, 288, 289, 292, 293, 296, 297, 299, 300, 305, 307, 308, 312, 319, 320, 321, 322, 328, 330, 332, 333, 335, 337, 339, 340, 341, 342, 343, 344, 347, 348, 350, 352, 358, 361, 368, 375, 380, 383, 385, 387, 388, 389, 394, 397, 398, 399, 401, 404, 406, 407, 408, 409, 411, 413, 414, 415, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 435, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "expect": [5, 9, 23, 28, 34, 44, 55, 56, 61, 64, 66, 71, 73, 74, 75, 76, 82, 83, 87, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 106, 108, 111, 112, 118, 120, 125, 126, 132, 133, 138, 139, 151, 153, 157, 166, 168, 175, 176, 180, 185, 186, 187, 189, 190, 192, 196, 202, 212, 220, 222, 224, 229, 234, 241, 242, 244, 250, 251, 253, 255, 258, 261, 262, 266, 267, 269, 271, 278, 283, 292, 293, 299, 302, 309, 312, 328, 330, 331, 333, 337, 340, 341, 343, 344, 347, 348, 350, 352, 353, 358, 361, 365, 375, 377, 383, 384, 385, 388, 389, 394, 396, 398, 406, 407, 412, 414, 415, 418, 423, 424, 427, 429, 430, 431, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "syntax": [5, 7, 66, 71, 76, 77, 78, 83, 88, 93, 96, 98, 99, 102, 105, 106, 110, 116, 125, 138, 151, 156, 158, 166, 167, 175, 180, 185, 202, 210, 212, 224, 229, 246, 254, 255, 262, 264, 266, 268, 273, 283, 292, 295, 297, 314, 331, 340, 344, 352, 361, 362, 368, 375, 380, 381, 385, 387, 393, 394, 416, 418, 426, 427, 429, 430, 431, 433, 434, 435, 436, 443, 444, 445, 448, 454, 456, 461, 462, 463, 464, 465, 466, 468, 470, 472, 473, 474, 476, 479, 480, 481, 482, 483], "each": [5, 7, 12, 13, 22, 23, 28, 30, 32, 33, 34, 36, 39, 41, 44, 55, 57, 59, 61, 71, 73, 74, 75, 76, 77, 82, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 115, 118, 120, 121, 125, 131, 132, 137, 138, 139, 141, 143, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 162, 165, 166, 168, 174, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 194, 195, 196, 201, 202, 203, 204, 207, 210, 211, 213, 215, 217, 222, 224, 225, 226, 227, 229, 231, 234, 235, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 281, 283, 284, 288, 292, 293, 294, 295, 296, 297, 299, 300, 305, 307, 308, 309, 312, 313, 314, 318, 319, 320, 321, 322, 325, 329, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 352, 353, 354, 355, 357, 358, 360, 361, 363, 364, 366, 368, 371, 374, 375, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 404, 406, 407, 408, 409, 410, 412, 414, 416, 418, 419, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 441, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482], "consist": [5, 7, 9, 15, 18, 23, 32, 34, 50, 54, 61, 62, 64, 68, 71, 83, 88, 90, 92, 93, 98, 99, 101, 108, 112, 115, 120, 138, 141, 146, 150, 151, 153, 157, 166, 176, 177, 182, 189, 190, 192, 195, 202, 204, 206, 207, 208, 210, 227, 231, 239, 241, 242, 246, 247, 250, 252, 259, 262, 266, 268, 269, 270, 275, 283, 293, 299, 301, 308, 319, 325, 331, 335, 338, 340, 343, 344, 346, 348, 352, 361, 363, 368, 374, 375, 383, 385, 387, 394, 409, 424, 426, 427, 429, 431, 434, 455, 460, 461, 462, 463, 464, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "zero": [5, 7, 15, 18, 23, 25, 28, 30, 32, 33, 34, 35, 37, 38, 41, 44, 48, 50, 56, 57, 59, 61, 62, 64, 66, 71, 73, 74, 82, 83, 85, 88, 92, 96, 97, 98, 99, 102, 104, 105, 118, 120, 125, 132, 138, 141, 143, 146, 150, 154, 155, 157, 159, 175, 176, 180, 182, 185, 189, 190, 192, 195, 208, 210, 212, 222, 224, 225, 226, 230, 233, 234, 241, 247, 249, 250, 258, 259, 261, 269, 271, 275, 278, 283, 288, 292, 293, 297, 299, 305, 314, 319, 320, 328, 332, 333, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 357, 360, 363, 364, 365, 375, 383, 387, 396, 404, 409, 412, 421, 423, 427, 428, 429, 430, 433, 434, 435, 440, 442, 447, 454, 461, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "more": [5, 11, 18, 22, 23, 24, 25, 32, 33, 34, 41, 44, 48, 54, 56, 58, 59, 61, 62, 64, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 82, 83, 84, 86, 88, 91, 92, 93, 95, 97, 98, 101, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 118, 120, 121, 122, 125, 132, 136, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 212, 214, 217, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 275, 276, 278, 281, 283, 284, 287, 288, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 307, 308, 310, 311, 312, 314, 317, 318, 319, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 357, 358, 360, 361, 363, 364, 365, 366, 368, 373, 374, 375, 376, 380, 381, 385, 387, 388, 393, 394, 398, 399, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 414, 418, 419, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 440, 442, 447, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "unit": [5, 62, 66, 71, 83, 85, 88, 92, 93, 96, 98, 99, 105, 112, 165, 177, 182, 186, 192, 224, 225, 275, 308, 325, 337, 341, 344, 345, 365, 366, 368, 375, 383, 387, 388, 406, 425, 427, 428, 462, 467, 473, 475, 477, 480, 481, 482], "object": [5, 7, 11, 12, 14, 18, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 50, 51, 52, 55, 57, 64, 65, 66, 70, 71, 72, 74, 75, 76, 78, 85, 88, 90, 93, 95, 100, 101, 102, 104, 105, 106, 108, 113, 114, 115, 116, 117, 119, 120, 121, 124, 128, 132, 135, 136, 137, 139, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 168, 169, 170, 171, 172, 173, 175, 179, 180, 181, 183, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 208, 211, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 260, 261, 264, 269, 270, 271, 273, 274, 276, 278, 282, 284, 285, 288, 290, 291, 292, 294, 297, 298, 300, 302, 304, 305, 307, 308, 310, 313, 314, 315, 317, 322, 324, 329, 331, 332, 333, 335, 336, 339, 343, 345, 347, 349, 350, 351, 352, 354, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 373, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 393, 396, 398, 399, 400, 403, 405, 406, 410, 411, 413, 414, 416, 419, 420, 422, 423, 424, 426, 428, 429, 431, 432, 435, 439, 440, 441, 445, 448, 449, 451, 454, 455, 458, 460, 461, 462, 463, 466, 469, 470, 471, 473, 474, 477, 478, 479, 480, 481, 482, 483], "usual": [5, 7, 20, 23, 28, 32, 33, 34, 38, 44, 46, 50, 55, 59, 61, 62, 71, 73, 76, 82, 83, 88, 90, 91, 92, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 118, 120, 125, 132, 139, 146, 149, 151, 153, 172, 174, 175, 185, 189, 192, 193, 195, 197, 201, 204, 212, 220, 222, 224, 225, 229, 235, 242, 244, 246, 247, 249, 250, 251, 255, 258, 259, 261, 268, 269, 272, 275, 283, 288, 292, 293, 295, 297, 299, 304, 306, 310, 319, 321, 328, 332, 333, 334, 337, 338, 339, 340, 341, 343, 344, 345, 348, 352, 357, 361, 365, 367, 368, 374, 375, 380, 385, 387, 388, 389, 394, 400, 401, 412, 420, 421, 422, 426, 427, 429, 435, 447, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 478, 480, 482], "charact": [5, 9, 14, 16, 18, 32, 33, 34, 38, 41, 47, 48, 57, 66, 71, 82, 83, 85, 88, 90, 99, 103, 105, 116, 118, 119, 120, 121, 125, 130, 136, 143, 145, 146, 150, 151, 155, 157, 166, 172, 174, 175, 182, 183, 185, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 212, 213, 219, 224, 227, 230, 234, 237, 238, 239, 243, 246, 247, 250, 251, 254, 258, 265, 266, 268, 271, 272, 273, 282, 283, 285, 286, 288, 293, 294, 296, 299, 307, 314, 317, 319, 320, 321, 323, 331, 332, 335, 337, 338, 340, 342, 344, 345, 346, 348, 352, 357, 358, 360, 361, 363, 365, 368, 371, 374, 375, 386, 387, 393, 397, 404, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 429, 433, 434, 435, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "parenthes": [5, 61, 66, 71, 77, 83, 88, 93, 99, 102, 156, 190, 247, 249, 250, 266, 308, 319, 344, 398, 426, 427, 430, 433, 434, 435, 441, 448, 461, 465, 466, 467, 468, 477, 479, 480, 482], "few": [5, 32, 34, 55, 71, 83, 88, 92, 93, 97, 98, 99, 102, 105, 108, 112, 118, 139, 141, 155, 157, 166, 169, 172, 175, 176, 182, 185, 189, 192, 197, 199, 222, 229, 235, 239, 246, 249, 269, 281, 283, 292, 299, 300, 317, 319, 334, 335, 337, 341, 344, 347, 361, 366, 368, 380, 387, 388, 393, 394, 423, 427, 433, 434, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 480, 482], "correspond": [5, 9, 15, 18, 22, 23, 29, 30, 32, 34, 39, 44, 47, 48, 54, 55, 56, 59, 61, 62, 66, 69, 71, 73, 74, 77, 83, 90, 92, 93, 96, 97, 98, 99, 100, 102, 103, 105, 106, 108, 111, 113, 115, 118, 120, 121, 125, 127, 132, 136, 138, 146, 150, 155, 157, 162, 166, 169, 174, 175, 176, 177, 182, 183, 185, 186, 188, 190, 192, 198, 207, 208, 211, 212, 217, 218, 221, 222, 224, 225, 229, 232, 234, 237, 239, 242, 244, 246, 247, 249, 250, 251, 255, 259, 261, 262, 266, 267, 268, 269, 271, 283, 292, 293, 295, 307, 308, 310, 314, 317, 319, 329, 331, 332, 333, 334, 335, 337, 339, 340, 341, 344, 345, 347, 348, 351, 352, 354, 363, 364, 365, 368, 374, 375, 380, 386, 387, 388, 393, 396, 398, 401, 402, 405, 409, 410, 414, 416, 418, 421, 422, 423, 426, 427, 428, 429, 430, 431, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "address": [5, 9, 23, 41, 56, 61, 62, 66, 71, 73, 83, 98, 99, 103, 110, 119, 125, 127, 132, 139, 142, 163, 169, 175, 182, 190, 192, 193, 199, 202, 207, 208, 211, 214, 222, 224, 241, 242, 244, 256, 262, 267, 269, 270, 271, 284, 285, 319, 322, 335, 337, 338, 340, 341, 361, 381, 385, 393, 397, 406, 419, 420, 427, 455, 461, 463, 464, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "follow": [5, 7, 9, 14, 18, 20, 23, 28, 32, 33, 34, 38, 40, 41, 44, 53, 55, 56, 59, 61, 62, 64, 70, 71, 73, 74, 75, 77, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 127, 131, 132, 134, 136, 138, 139, 140, 141, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 165, 166, 168, 169, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 278, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 314, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 448, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "descript": [5, 23, 24, 34, 51, 56, 57, 61, 62, 66, 71, 87, 91, 95, 97, 98, 99, 108, 111, 115, 118, 120, 127, 141, 159, 174, 175, 176, 181, 189, 190, 192, 195, 199, 200, 201, 204, 211, 214, 229, 240, 244, 249, 250, 251, 255, 259, 266, 267, 268, 270, 273, 278, 284, 288, 292, 293, 297, 298, 300, 307, 313, 315, 322, 332, 333, 337, 340, 341, 344, 347, 350, 355, 358, 360, 361, 365, 368, 374, 375, 387, 398, 400, 407, 413, 414, 418, 419, 426, 427, 428, 429, 433, 435, 450, 454, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 474, 476, 477, 479, 481, 482], "quot": [5, 66, 77, 82, 85, 86, 88, 102, 105, 125, 136, 146, 157, 174, 175, 193, 194, 195, 196, 197, 201, 202, 204, 207, 208, 216, 221, 234, 237, 239, 246, 247, 254, 256, 262, 285, 297, 319, 331, 344, 345, 348, 359, 363, 366, 377, 383, 385, 394, 412, 416, 425, 426, 430, 433, 434, 445, 448, 450, 461, 464, 466, 471, 474, 475, 479, 482], "form": [5, 7, 23, 30, 32, 33, 36, 37, 52, 53, 61, 66, 70, 71, 77, 83, 87, 88, 90, 93, 96, 98, 99, 102, 103, 105, 106, 108, 111, 118, 120, 125, 144, 151, 157, 160, 166, 168, 174, 175, 176, 177, 180, 182, 185, 186, 189, 190, 192, 195, 196, 197, 199, 202, 204, 205, 207, 208, 212, 220, 224, 225, 227, 229, 239, 241, 243, 244, 247, 249, 251, 255, 257, 259, 261, 266, 267, 268, 269, 271, 273, 276, 283, 288, 293, 294, 296, 298, 302, 304, 305, 307, 319, 334, 337, 340, 341, 342, 344, 345, 346, 347, 352, 357, 361, 363, 364, 365, 366, 367, 368, 375, 383, 386, 387, 388, 389, 393, 394, 397, 399, 404, 406, 407, 409, 412, 418, 420, 423, 424, 425, 426, 427, 428, 430, 431, 434, 435, 436, 438, 454, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "entri": [5, 22, 26, 30, 32, 34, 44, 48, 61, 66, 71, 73, 85, 87, 91, 92, 93, 95, 99, 105, 106, 108, 112, 118, 125, 134, 138, 144, 150, 157, 159, 166, 168, 175, 176, 180, 183, 185, 190, 192, 194, 215, 224, 225, 229, 232, 235, 242, 246, 247, 250, 255, 261, 265, 268, 269, 270, 271, 272, 280, 281, 283, 284, 286, 292, 293, 294, 296, 299, 302, 306, 307, 308, 310, 314, 316, 319, 321, 324, 330, 331, 333, 335, 339, 340, 341, 344, 351, 352, 353, 357, 359, 361, 364, 368, 374, 375, 377, 380, 383, 384, 388, 389, 399, 401, 402, 404, 420, 421, 424, 429, 451, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 482], "round": [5, 61, 62, 66, 120, 149, 172, 182, 189, 192, 220, 224, 242, 254, 275, 289, 290, 293, 318, 343, 344, 345, 352, 377, 383, 385, 387, 400, 427, 429, 441, 443, 448, 449, 450, 451, 461, 463, 465, 466, 467, 468, 469, 470, 472, 475, 476, 479, 480, 482], "match": [5, 11, 22, 23, 32, 41, 44, 59, 61, 62, 66, 71, 76, 83, 87, 90, 92, 93, 98, 99, 103, 105, 106, 116, 121, 125, 135, 138, 140, 141, 144, 150, 151, 155, 162, 166, 176, 182, 185, 186, 189, 190, 192, 195, 196, 202, 203, 204, 207, 210, 212, 215, 218, 224, 225, 227, 230, 239, 241, 242, 245, 246, 247, 249, 251, 254, 255, 261, 264, 267, 268, 270, 272, 283, 286, 287, 288, 293, 294, 296, 297, 302, 308, 311, 314, 318, 320, 323, 331, 332, 333, 337, 340, 341, 344, 345, 347, 348, 350, 358, 361, 362, 365, 368, 374, 375, 377, 380, 381, 384, 385, 387, 388, 393, 394, 399, 400, 402, 409, 410, 412, 414, 419, 424, 428, 429, 430, 432, 434, 444, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "squar": [5, 32, 61, 83, 85, 87, 92, 93, 105, 141, 154, 176, 180, 185, 275, 297, 308, 340, 343, 344, 383, 393, 412, 426, 427, 429, 433, 434, 435, 439, 441, 448, 463, 464, 467, 471, 480, 482], "bracket": [5, 32, 61, 93, 99, 102, 105, 144, 208, 219, 224, 230, 239, 271, 297, 340, 344, 386, 393, 409, 412, 426, 427, 429, 433, 434, 435, 466, 467, 468, 471, 482], "whose": [5, 23, 30, 32, 34, 41, 44, 58, 59, 61, 71, 83, 88, 91, 99, 118, 120, 121, 139, 168, 174, 175, 176, 180, 182, 185, 192, 197, 199, 202, 204, 207, 210, 212, 214, 215, 220, 224, 225, 227, 232, 235, 241, 242, 243, 252, 255, 258, 266, 267, 268, 269, 271, 283, 289, 292, 293, 296, 297, 299, 307, 308, 310, 312, 319, 322, 332, 333, 334, 337, 339, 343, 344, 345, 352, 359, 361, 364, 365, 368, 375, 379, 380, 387, 388, 389, 394, 399, 401, 404, 412, 414, 426, 427, 429, 431, 434, 461, 462, 463, 465, 466, 467, 468, 475, 476, 477, 479, 480, 482], "pass": [5, 7, 9, 11, 13, 14, 16, 17, 20, 22, 23, 24, 28, 32, 33, 34, 35, 41, 42, 44, 46, 48, 50, 56, 57, 59, 60, 61, 62, 64, 66, 70, 71, 73, 74, 75, 76, 77, 82, 85, 86, 88, 90, 91, 92, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 116, 118, 120, 125, 132, 134, 136, 137, 138, 139, 140, 141, 144, 146, 149, 150, 151, 154, 155, 156, 157, 159, 162, 165, 166, 168, 169, 171, 172, 174, 176, 177, 180, 182, 189, 190, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 222, 224, 225, 229, 231, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 255, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 278, 279, 281, 283, 286, 288, 292, 293, 294, 295, 296, 297, 299, 305, 306, 307, 308, 309, 311, 314, 319, 320, 321, 322, 325, 330, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 354, 357, 358, 361, 363, 364, 365, 366, 368, 374, 375, 377, 379, 380, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 442, 444, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "chunk": [5, 13, 42, 66, 76, 83, 88, 99, 103, 105, 121, 132, 149, 165, 179, 222, 224, 234, 239, 241, 254, 258, 261, 262, 270, 283, 284, 293, 303, 314, 332, 334, 337, 347, 350, 394, 406, 414, 415, 429, 461, 464, 466, 468, 472, 473, 478, 482], "you": [5, 13, 16, 22, 23, 25, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 47, 50, 54, 55, 57, 58, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 118, 120, 121, 125, 132, 139, 140, 141, 143, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 165, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 189, 191, 192, 194, 195, 197, 199, 200, 201, 204, 205, 206, 207, 210, 212, 213, 214, 217, 220, 222, 224, 225, 226, 229, 230, 233, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 278, 283, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 305, 306, 307, 308, 313, 314, 319, 320, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 357, 358, 361, 363, 364, 366, 367, 368, 370, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 435, 440, 441, 447, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "don": [5, 8, 9, 18, 23, 28, 32, 33, 34, 47, 48, 55, 56, 57, 61, 71, 73, 74, 76, 77, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 118, 120, 125, 132, 136, 138, 144, 151, 152, 153, 154, 158, 159, 162, 166, 168, 175, 178, 180, 182, 189, 190, 192, 199, 208, 215, 224, 225, 226, 229, 241, 242, 250, 257, 258, 259, 262, 267, 268, 269, 275, 283, 288, 292, 293, 295, 296, 297, 299, 307, 308, 319, 328, 330, 332, 335, 337, 340, 341, 343, 344, 364, 366, 367, 368, 375, 385, 387, 388, 389, 394, 398, 400, 401, 404, 406, 412, 420, 423, 425, 426, 427, 429, 430, 431, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 477, 478, 480, 481, 482], "have": [5, 7, 11, 18, 22, 23, 24, 28, 30, 32, 33, 34, 41, 46, 48, 56, 57, 58, 61, 62, 70, 71, 73, 74, 75, 76, 77, 82, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 174, 175, 176, 177, 178, 180, 182, 183, 185, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 210, 212, 214, 217, 220, 222, 224, 225, 226, 229, 230, 231, 233, 234, 235, 239, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 302, 305, 307, 308, 311, 312, 314, 318, 319, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 370, 374, 375, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 404, 406, 407, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 440, 441, 442, 447, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "provid": [5, 7, 11, 15, 18, 23, 24, 25, 28, 30, 32, 33, 34, 35, 36, 39, 41, 42, 44, 46, 48, 52, 55, 56, 59, 60, 61, 62, 64, 66, 70, 72, 73, 76, 77, 82, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 108, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 132, 136, 138, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 292, 293, 295, 296, 298, 300, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 319, 320, 321, 322, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 434, 435, 436, 439, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "raw": [5, 7, 16, 31, 61, 66, 98, 102, 116, 118, 120, 151, 166, 175, 176, 190, 192, 195, 196, 204, 205, 206, 224, 229, 255, 270, 283, 288, 293, 296, 298, 299, 329, 331, 337, 338, 340, 341, 344, 362, 365, 366, 368, 380, 382, 394, 397, 401, 414, 423, 426, 434, 448, 462, 464, 466, 467, 469, 472, 475, 477, 482], "storag": [5, 31, 34, 41, 53, 66, 85, 91, 97, 99, 105, 157, 166, 176, 190, 250, 258, 261, 284, 293, 300, 330, 340, 344, 347, 412, 439, 463, 466, 467, 468, 475, 476, 482], "unicod": [5, 16, 27, 30, 31, 38, 44, 57, 61, 63, 66, 78, 83, 85, 88, 90, 94, 99, 101, 102, 110, 117, 119, 143, 145, 146, 166, 174, 175, 176, 181, 182, 185, 192, 193, 194, 195, 196, 199, 200, 201, 202, 207, 208, 212, 220, 224, 229, 237, 238, 239, 246, 254, 258, 262, 266, 282, 293, 294, 296, 299, 302, 319, 340, 344, 345, 346, 352, 362, 377, 385, 393, 399, 404, 406, 410, 411, 412, 421, 424, 427, 429, 434, 441, 454, 455, 462, 466, 467, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483], "byte": [5, 7, 12, 14, 16, 18, 23, 24, 25, 30, 32, 33, 34, 40, 41, 42, 48, 56, 57, 59, 61, 62, 64, 66, 76, 77, 82, 83, 85, 88, 90, 91, 92, 97, 99, 101, 102, 103, 106, 111, 115, 116, 119, 120, 121, 125, 126, 132, 135, 136, 139, 141, 142, 143, 145, 146, 149, 151, 153, 157, 165, 166, 176, 177, 181, 183, 185, 187, 189, 190, 193, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 211, 212, 214, 222, 224, 229, 233, 234, 236, 241, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 266, 268, 269, 270, 271, 274, 278, 282, 283, 284, 287, 288, 293, 294, 295, 296, 298, 299, 304, 305, 306, 309, 311, 314, 317, 318, 319, 322, 324, 328, 332, 333, 335, 336, 337, 338, 340, 341, 342, 348, 349, 352, 357, 358, 361, 368, 376, 377, 381, 385, 394, 397, 399, 400, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 418, 420, 421, 423, 424, 426, 427, 429, 430, 431, 439, 445, 449, 450, 454, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "area": [5, 7, 41, 44, 90, 98, 99, 105, 176, 195, 204, 224, 246, 258, 278, 299, 322, 337, 341, 343, 370, 375, 433, 445, 461, 466, 467, 472, 476, 479], "general": [5, 7, 23, 32, 34, 36, 39, 41, 52, 61, 66, 70, 71, 74, 76, 82, 83, 88, 89, 91, 92, 97, 98, 99, 102, 103, 105, 108, 114, 118, 120, 125, 132, 138, 146, 151, 152, 157, 166, 168, 175, 176, 180, 181, 182, 183, 185, 190, 202, 207, 212, 218, 222, 223, 224, 225, 226, 231, 234, 239, 241, 242, 243, 246, 249, 250, 254, 258, 261, 266, 267, 269, 270, 271, 273, 275, 283, 288, 293, 299, 305, 307, 314, 319, 320, 325, 330, 335, 337, 341, 342, 344, 345, 348, 350, 352, 357, 363, 365, 368, 374, 380, 385, 386, 388, 389, 393, 394, 398, 404, 406, 407, 408, 410, 411, 412, 413, 414, 416, 423, 424, 425, 426, 427, 429, 430, 433, 434, 435, 454, 457, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "share": [5, 7, 32, 34, 40, 41, 44, 55, 56, 61, 62, 66, 69, 71, 74, 75, 77, 82, 92, 95, 97, 99, 100, 103, 108, 113, 116, 118, 120, 132, 137, 163, 180, 182, 185, 211, 214, 225, 229, 234, 249, 254, 259, 261, 266, 267, 278, 289, 292, 293, 294, 296, 299, 311, 322, 326, 330, 337, 338, 340, 341, 342, 344, 345, 352, 353, 359, 364, 365, 368, 374, 387, 388, 406, 423, 426, 427, 429, 431, 434, 439, 454, 455, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 482, 483], "lifetim": [5, 34, 41, 47, 66, 71, 83, 157, 165, 168, 293, 404, 429, 462, 475, 478, 479, 482], "won": [5, 32, 33, 40, 61, 71, 73, 74, 83, 88, 90, 92, 93, 96, 98, 99, 102, 105, 112, 114, 120, 132, 138, 151, 165, 166, 182, 183, 185, 192, 205, 224, 229, 230, 242, 267, 269, 286, 292, 293, 299, 300, 329, 337, 352, 368, 388, 415, 420, 423, 454, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 479, 482], "ani": [5, 7, 8, 9, 11, 12, 13, 18, 20, 22, 23, 24, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 50, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 71, 73, 74, 75, 83, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 112, 113, 114, 115, 118, 120, 121, 125, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 149, 150, 151, 152, 154, 155, 156, 157, 158, 162, 165, 166, 169, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 217, 219, 220, 222, 224, 225, 226, 229, 230, 231, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 302, 305, 308, 309, 313, 314, 315, 316, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 357, 358, 359, 361, 363, 364, 365, 368, 371, 374, 375, 377, 379, 380, 381, 383, 384, 387, 389, 393, 394, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 445, 449, 452, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "yourself": [5, 32, 34, 42, 70, 76, 83, 88, 90, 92, 102, 103, 105, 108, 120, 155, 176, 178, 192, 200, 210, 250, 262, 266, 267, 268, 269, 292, 297, 328, 335, 341, 352, 387, 388, 389, 409, 460, 466, 469, 474], "es": [5, 83, 88, 344, 463, 467, 468, 469, 471, 473, 482], "et": [5, 77, 88, 99, 180, 337, 341, 375, 412, 463, 466, 468, 471, 482], "howev": [5, 23, 24, 32, 33, 34, 41, 44, 48, 61, 69, 70, 71, 73, 74, 76, 82, 83, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 112, 118, 125, 127, 132, 134, 138, 139, 151, 157, 160, 166, 168, 169, 175, 176, 180, 182, 185, 189, 192, 193, 195, 198, 200, 202, 204, 205, 207, 208, 212, 222, 224, 226, 229, 234, 235, 238, 242, 244, 246, 247, 249, 250, 255, 258, 259, 261, 267, 268, 269, 271, 272, 281, 283, 288, 292, 293, 294, 296, 299, 300, 310, 311, 319, 328, 331, 332, 333, 334, 337, 340, 341, 343, 344, 345, 348, 352, 353, 356, 357, 361, 363, 364, 366, 368, 375, 377, 380, 384, 385, 386, 387, 388, 389, 396, 401, 402, 404, 406, 409, 410, 414, 415, 418, 421, 425, 427, 429, 431, 454, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "py_buff": [5, 7, 42, 55, 61, 66, 467, 472, 475, 482], "get": [5, 7, 14, 17, 22, 23, 26, 30, 32, 33, 34, 38, 39, 41, 44, 47, 48, 50, 52, 56, 59, 61, 62, 64, 66, 70, 71, 73, 74, 75, 76, 77, 78, 86, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 115, 118, 120, 125, 127, 128, 132, 133, 135, 136, 138, 139, 141, 144, 150, 151, 157, 159, 160, 163, 166, 168, 169, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 199, 204, 205, 207, 208, 210, 212, 215, 216, 224, 226, 227, 229, 231, 232, 234, 235, 240, 241, 242, 244, 246, 247, 251, 254, 255, 256, 258, 261, 262, 265, 266, 267, 268, 269, 271, 273, 279, 281, 283, 285, 288, 289, 292, 293, 295, 296, 297, 299, 302, 305, 308, 309, 313, 316, 318, 320, 322, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 350, 352, 354, 357, 358, 359, 361, 364, 365, 367, 368, 374, 375, 380, 383, 384, 385, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 406, 409, 410, 412, 413, 414, 415, 418, 419, 423, 424, 426, 427, 429, 431, 436, 437, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "fill": [5, 7, 22, 32, 33, 37, 41, 44, 46, 53, 58, 61, 62, 66, 73, 74, 83, 90, 93, 97, 99, 101, 103, 106, 115, 118, 120, 137, 151, 174, 175, 176, 182, 185, 192, 195, 200, 204, 221, 224, 244, 246, 250, 254, 258, 261, 269, 293, 335, 337, 340, 341, 344, 345, 347, 348, 361, 362, 365, 368, 427, 429, 431, 439, 451, 455, 461, 463, 464, 465, 466, 467, 472, 474, 475, 477, 478, 482], "under": [5, 7, 14, 18, 23, 32, 33, 34, 41, 42, 44, 52, 56, 59, 64, 66, 72, 82, 83, 90, 91, 93, 98, 99, 101, 102, 104, 108, 111, 114, 118, 125, 131, 132, 134, 145, 149, 151, 153, 155, 157, 160, 168, 174, 175, 176, 182, 189, 192, 195, 198, 202, 207, 211, 212, 214, 215, 224, 225, 226, 229, 233, 234, 241, 246, 255, 258, 261, 262, 267, 268, 269, 270, 271, 275, 278, 281, 283, 284, 292, 293, 294, 295, 296, 297, 299, 305, 308, 314, 320, 322, 328, 329, 330, 331, 332, 333, 337, 338, 340, 341, 342, 343, 344, 348, 352, 354, 359, 361, 364, 365, 368, 370, 374, 375, 379, 380, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 402, 404, 405, 406, 409, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "lock": [5, 30, 31, 61, 66, 71, 74, 85, 97, 99, 103, 113, 123, 142, 163, 165, 166, 168, 175, 211, 214, 240, 249, 258, 267, 269, 270, 271, 282, 283, 285, 293, 305, 316, 322, 324, 330, 333, 338, 340, 342, 352, 361, 368, 385, 401, 403, 427, 451, 461, 463, 465, 466, 467, 468, 469, 472, 474, 477, 479, 480, 481, 482, 483], "so": [5, 7, 11, 15, 20, 22, 23, 25, 28, 30, 32, 33, 34, 40, 41, 44, 48, 52, 55, 57, 60, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 118, 120, 125, 136, 138, 139, 140, 141, 143, 147, 150, 151, 153, 156, 157, 158, 166, 168, 169, 172, 174, 175, 176, 177, 178, 180, 182, 185, 189, 190, 192, 195, 198, 199, 200, 201, 202, 204, 206, 207, 208, 212, 213, 214, 215, 217, 220, 224, 225, 226, 227, 229, 231, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 249, 250, 253, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 278, 283, 284, 289, 292, 293, 294, 296, 297, 299, 302, 308, 310, 312, 314, 319, 325, 328, 329, 331, 332, 333, 334, 335, 337, 340, 341, 343, 344, 345, 347, 348, 352, 353, 354, 358, 361, 363, 364, 365, 366, 368, 374, 375, 377, 383, 384, 385, 387, 388, 389, 394, 398, 400, 401, 404, 405, 406, 408, 409, 410, 412, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "caller": [5, 9, 18, 23, 30, 32, 33, 34, 35, 44, 57, 59, 62, 71, 83, 86, 91, 93, 138, 144, 156, 157, 168, 175, 188, 190, 212, 222, 224, 234, 241, 249, 251, 255, 258, 267, 291, 293, 296, 302, 308, 333, 335, 337, 341, 348, 352, 364, 369, 375, 379, 380, 385, 387, 394, 396, 399, 400, 402, 404, 418, 420, 427, 428, 429, 439, 442, 462, 463, 464, 465, 466, 467, 468, 472, 478, 481, 482], "can": [5, 7, 11, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 40, 41, 42, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 76, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 124, 125, 127, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 371, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 441, 442, 445, 447, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "subsequ": [5, 23, 32, 44, 58, 62, 83, 86, 91, 98, 102, 113, 118, 158, 176, 189, 190, 201, 205, 207, 210, 222, 225, 242, 250, 255, 258, 261, 268, 269, 271, 278, 283, 292, 293, 294, 319, 332, 337, 341, 343, 344, 345, 352, 355, 357, 364, 368, 374, 383, 388, 394, 423, 426, 429, 431, 433, 435, 464, 465, 466, 467, 468, 470, 472, 477, 480, 482], "even": [5, 9, 18, 23, 26, 30, 32, 33, 34, 41, 55, 56, 57, 60, 61, 62, 68, 71, 74, 76, 77, 82, 83, 87, 88, 91, 92, 93, 97, 99, 101, 102, 103, 104, 105, 108, 110, 114, 118, 120, 121, 125, 131, 138, 139, 146, 151, 154, 157, 160, 162, 165, 166, 168, 175, 176, 180, 182, 185, 187, 192, 193, 195, 197, 198, 204, 205, 206, 207, 210, 212, 213, 214, 217, 220, 224, 225, 234, 235, 238, 242, 246, 249, 250, 251, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 275, 283, 292, 293, 294, 296, 297, 299, 307, 308, 318, 319, 331, 332, 333, 334, 335, 337, 340, 341, 343, 344, 345, 347, 352, 353, 357, 361, 363, 364, 365, 368, 375, 381, 385, 386, 387, 388, 389, 394, 398, 399, 401, 402, 404, 406, 410, 414, 416, 418, 421, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 440, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482], "insid": [5, 7, 11, 32, 41, 61, 66, 74, 76, 83, 88, 90, 93, 102, 103, 111, 112, 120, 134, 138, 144, 168, 174, 176, 185, 195, 198, 204, 209, 224, 226, 239, 251, 252, 258, 262, 281, 283, 284, 296, 297, 299, 302, 319, 332, 333, 337, 345, 368, 374, 375, 383, 385, 387, 388, 389, 412, 419, 421, 422, 426, 427, 429, 448, 460, 462, 463, 464, 465, 466, 467, 469, 472, 474, 476, 478, 479, 480, 482], "py_begin_allow_thread": [5, 32, 55, 71], "block": [5, 7, 23, 32, 34, 41, 44, 53, 61, 66, 71, 73, 75, 76, 88, 90, 91, 102, 106, 110, 112, 113, 115, 120, 124, 125, 132, 133, 134, 136, 137, 138, 139, 144, 146, 149, 168, 175, 176, 177, 184, 185, 187, 189, 190, 192, 198, 206, 207, 211, 212, 214, 222, 224, 225, 231, 233, 234, 241, 242, 246, 247, 249, 255, 257, 258, 261, 269, 273, 282, 283, 284, 288, 293, 295, 296, 305, 313, 316, 322, 325, 327, 328, 329, 330, 332, 333, 335, 337, 340, 342, 348, 351, 352, 357, 358, 361, 364, 368, 385, 387, 388, 394, 400, 402, 404, 405, 410, 415, 427, 428, 429, 430, 431, 435, 454, 462, 463, 464, 466, 467, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "without": [5, 7, 8, 9, 12, 22, 23, 25, 32, 33, 34, 37, 41, 44, 48, 52, 53, 55, 56, 57, 59, 61, 64, 66, 68, 70, 71, 73, 74, 77, 83, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 108, 112, 113, 114, 118, 120, 125, 132, 134, 136, 138, 139, 140, 147, 149, 151, 155, 157, 165, 166, 168, 169, 172, 174, 175, 176, 180, 182, 183, 185, 187, 189, 191, 192, 193, 195, 196, 201, 204, 207, 208, 210, 212, 213, 217, 222, 224, 225, 227, 229, 230, 231, 233, 234, 238, 239, 242, 243, 247, 249, 250, 252, 253, 255, 258, 259, 261, 265, 266, 267, 270, 271, 275, 278, 282, 283, 288, 289, 292, 293, 294, 295, 296, 297, 299, 305, 308, 309, 314, 318, 319, 322, 323, 324, 325, 328, 330, 332, 334, 337, 340, 341, 344, 345, 347, 348, 352, 353, 357, 358, 361, 363, 364, 365, 366, 367, 368, 381, 383, 385, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 406, 409, 410, 412, 415, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 440, 448, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "risk": [5, 41, 42, 71, 76, 83, 93, 125, 212, 268, 271, 283, 292, 299, 361, 412, 420, 467, 474, 479, 480, 482], "mutabl": [5, 27, 28, 34, 61, 66, 76, 83, 85, 93, 97, 160, 170, 175, 186, 202, 214, 224, 225, 255, 283, 284, 291, 293, 299, 315, 330, 401, 412, 423, 426, 427, 429, 435, 439, 441, 448, 461, 464, 466, 467, 468, 469, 471, 472, 473, 478, 481, 482], "data": [5, 7, 9, 24, 31, 32, 34, 41, 47, 48, 50, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 66, 70, 71, 72, 73, 75, 76, 77, 86, 88, 90, 91, 95, 97, 99, 100, 102, 104, 108, 112, 113, 115, 116, 117, 118, 119, 120, 121, 125, 132, 133, 135, 136, 139, 141, 142, 143, 144, 146, 147, 149, 150, 151, 153, 156, 157, 159, 163, 165, 166, 168, 174, 176, 177, 178, 181, 182, 183, 185, 189, 190, 194, 195, 196, 197, 200, 202, 205, 206, 207, 211, 212, 214, 222, 224, 229, 233, 234, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 261, 262, 266, 267, 269, 271, 272, 273, 274, 276, 278, 281, 283, 284, 286, 288, 290, 292, 293, 295, 296, 300, 302, 304, 306, 308, 309, 314, 315, 316, 318, 319, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 349, 352, 354, 357, 358, 359, 360, 361, 362, 365, 367, 371, 374, 375, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 396, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 429, 431, 432, 438, 439, 442, 444, 450, 457, 461, 462, 463, 464, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 481, 482, 483], "being": [5, 7, 16, 22, 28, 32, 34, 37, 58, 59, 61, 62, 64, 68, 71, 73, 74, 76, 82, 83, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 112, 118, 120, 121, 125, 132, 138, 149, 150, 151, 157, 158, 160, 162, 165, 166, 168, 169, 174, 175, 176, 180, 182, 183, 190, 192, 194, 195, 201, 204, 207, 210, 212, 215, 217, 224, 225, 226, 229, 231, 233, 246, 247, 249, 250, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 283, 292, 293, 295, 296, 297, 299, 302, 307, 308, 309, 312, 314, 318, 319, 320, 324, 328, 329, 330, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 356, 361, 363, 364, 365, 366, 368, 375, 380, 385, 387, 388, 389, 393, 398, 399, 401, 406, 409, 412, 413, 414, 416, 420, 421, 425, 426, 427, 429, 431, 433, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "resiz": [5, 8, 9, 28, 41, 52, 54, 58, 62, 66, 116, 175, 176, 258, 278, 333, 344, 368, 374, 375, 383, 387, 477, 479, 482], "destroy": [5, 11, 32, 58, 61, 65, 93, 97, 103, 246, 258, 278, 283, 284, 292, 345, 364, 368, 387, 399, 401, 404, 427, 431, 461, 463, 464, 466, 474, 478, 479, 481, 482], "result": [5, 7, 8, 9, 13, 15, 20, 23, 26, 30, 32, 33, 34, 35, 38, 41, 44, 46, 48, 51, 52, 57, 58, 59, 61, 62, 64, 66, 70, 71, 73, 74, 76, 82, 85, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 105, 108, 112, 115, 118, 120, 124, 125, 128, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 151, 152, 154, 157, 158, 159, 162, 163, 165, 166, 168, 169, 172, 175, 176, 177, 180, 182, 184, 185, 189, 190, 192, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 218, 222, 224, 225, 226, 229, 230, 233, 234, 241, 242, 243, 244, 246, 247, 249, 250, 254, 255, 256, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 299, 305, 307, 308, 309, 311, 317, 318, 319, 321, 322, 324, 328, 331, 332, 333, 335, 337, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 354, 357, 358, 361, 363, 364, 365, 366, 368, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 394, 396, 397, 399, 401, 402, 404, 406, 408, 409, 410, 412, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 440, 442, 445, 449, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pybuffer_releas": [5, 7, 47, 55, 61, 88, 467, 472, 482], "finish": [5, 33, 59, 66, 70, 77, 82, 83, 88, 95, 98, 99, 120, 123, 124, 125, 127, 134, 136, 137, 138, 144, 149, 155, 165, 168, 212, 226, 231, 241, 256, 258, 270, 283, 284, 314, 316, 333, 338, 340, 341, 344, 348, 357, 361, 367, 370, 387, 402, 410, 411, 412, 415, 418, 421, 423, 426, 427, 451, 454, 466, 467, 472, 474, 475, 477, 478, 481, 482], "process": [5, 7, 23, 31, 33, 34, 38, 44, 56, 61, 63, 64, 66, 70, 71, 73, 75, 76, 77, 82, 88, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 108, 110, 112, 113, 116, 118, 120, 121, 129, 132, 133, 136, 139, 145, 149, 150, 151, 155, 157, 163, 165, 168, 174, 175, 176, 182, 192, 199, 200, 202, 209, 211, 212, 213, 216, 217, 224, 225, 226, 227, 229, 231, 234, 239, 240, 244, 246, 247, 250, 254, 255, 257, 260, 261, 266, 267, 268, 269, 270, 271, 278, 280, 292, 295, 296, 299, 308, 309, 314, 315, 316, 319, 322, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 342, 344, 346, 348, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 377, 379, 380, 383, 384, 385, 393, 394, 397, 398, 399, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 426, 427, 429, 431, 434, 435, 450, 454, 455, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "earli": [5, 33, 34, 73, 168, 255, 269, 292, 333, 341, 343, 344, 364, 368, 381, 410, 421, 429, 431, 461, 465, 467, 474, 482], "abort": [5, 34, 41, 57, 66, 71, 99, 116, 125, 129, 132, 135, 137, 163, 211, 212, 222, 247, 256, 293, 297, 333, 340, 341, 352, 358, 364, 387, 431, 464, 479, 482], "case": [5, 7, 13, 14, 18, 22, 23, 24, 25, 30, 32, 33, 34, 38, 44, 48, 50, 54, 55, 56, 57, 59, 61, 62, 64, 66, 69, 70, 71, 73, 74, 82, 83, 86, 87, 88, 90, 91, 92, 93, 96, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 115, 118, 120, 123, 125, 132, 134, 138, 139, 141, 144, 146, 149, 151, 154, 155, 157, 158, 162, 166, 168, 172, 174, 175, 176, 177, 180, 182, 185, 186, 187, 189, 190, 192, 194, 195, 200, 201, 202, 204, 206, 207, 208, 209, 210, 212, 213, 214, 219, 224, 226, 229, 231, 233, 234, 235, 238, 239, 242, 243, 244, 246, 247, 249, 250, 251, 255, 258, 259, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 288, 289, 292, 293, 294, 295, 296, 297, 299, 302, 307, 308, 314, 318, 319, 324, 325, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 353, 357, 358, 359, 361, 364, 365, 366, 368, 374, 375, 377, 381, 383, 385, 386, 388, 389, 393, 394, 398, 399, 400, 404, 406, 408, 409, 410, 412, 414, 415, 419, 420, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 440, 442, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "unless": [5, 7, 9, 23, 24, 30, 32, 34, 41, 52, 54, 57, 61, 71, 74, 76, 83, 88, 92, 93, 97, 98, 101, 102, 103, 108, 110, 112, 114, 115, 118, 120, 125, 138, 140, 141, 149, 150, 160, 166, 168, 174, 180, 182, 185, 190, 192, 195, 199, 204, 205, 208, 224, 225, 239, 241, 242, 243, 246, 249, 250, 255, 258, 259, 261, 267, 268, 270, 271, 275, 281, 283, 288, 292, 293, 294, 297, 309, 314, 319, 323, 328, 329, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 353, 357, 358, 363, 364, 385, 387, 388, 393, 394, 398, 399, 401, 405, 406, 411, 414, 425, 426, 427, 428, 429, 434, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 478, 479, 480, 481, 482], "otherwis": [5, 7, 11, 13, 18, 22, 23, 28, 30, 32, 33, 34, 35, 38, 39, 41, 42, 44, 46, 47, 48, 50, 52, 56, 57, 61, 62, 64, 71, 74, 77, 88, 92, 93, 98, 99, 101, 102, 103, 106, 110, 114, 115, 118, 120, 125, 128, 132, 138, 139, 141, 146, 149, 150, 154, 155, 156, 157, 162, 165, 166, 168, 169, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 194, 195, 196, 198, 199, 201, 204, 205, 207, 208, 209, 210, 213, 215, 217, 222, 224, 225, 226, 229, 231, 233, 241, 242, 243, 244, 246, 249, 250, 251, 252, 255, 257, 258, 259, 261, 262, 267, 268, 269, 271, 275, 276, 278, 283, 286, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 307, 311, 312, 314, 319, 321, 324, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 353, 354, 357, 358, 361, 363, 364, 365, 368, 375, 377, 380, 381, 383, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 405, 406, 410, 412, 414, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 441, 454, 455, 460, 462, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "state": [5, 17, 22, 23, 24, 30, 31, 34, 44, 49, 50, 51, 57, 59, 61, 66, 71, 73, 74, 82, 83, 88, 90, 93, 95, 98, 101, 102, 106, 125, 132, 137, 139, 141, 144, 151, 154, 156, 157, 159, 163, 165, 166, 168, 169, 170, 176, 184, 190, 211, 212, 217, 221, 225, 226, 234, 242, 247, 250, 254, 256, 258, 259, 268, 270, 271, 293, 295, 297, 298, 301, 308, 314, 315, 318, 320, 323, 325, 328, 333, 337, 338, 340, 341, 344, 348, 352, 361, 364, 365, 367, 368, 374, 380, 384, 387, 388, 389, 393, 394, 399, 401, 404, 410, 411, 420, 423, 424, 425, 427, 429, 431, 440, 451, 461, 463, 464, 466, 471, 472, 474, 475, 476, 479, 480, 481, 482], "nul": [5, 7, 61, 88, 175, 176, 177, 236, 269, 293, 296, 314, 352, 418, 474, 475, 482], "termin": [5, 7, 9, 16, 30, 32, 33, 36, 38, 44, 58, 59, 61, 62, 64, 66, 71, 82, 83, 90, 93, 97, 98, 99, 105, 108, 113, 116, 118, 121, 125, 129, 131, 132, 136, 138, 139, 140, 155, 163, 165, 174, 175, 177, 188, 189, 190, 192, 206, 207, 213, 218, 224, 228, 241, 244, 246, 254, 255, 258, 261, 265, 266, 269, 271, 283, 286, 288, 292, 297, 302, 308, 319, 322, 333, 335, 338, 340, 341, 344, 345, 348, 352, 359, 360, 364, 368, 376, 390, 394, 399, 404, 406, 410, 412, 414, 425, 426, 428, 429, 431, 434, 435, 454, 461, 465, 466, 467, 469, 474, 475, 477, 479, 480, 482], "some": [5, 7, 23, 28, 32, 33, 34, 41, 55, 56, 57, 58, 59, 61, 66, 70, 71, 73, 74, 76, 82, 83, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 118, 120, 125, 131, 132, 136, 137, 138, 141, 145, 149, 151, 154, 155, 156, 157, 160, 162, 165, 166, 168, 174, 175, 176, 179, 180, 182, 183, 185, 187, 189, 190, 192, 193, 194, 195, 197, 198, 202, 203, 204, 205, 206, 207, 208, 210, 212, 214, 215, 217, 220, 224, 225, 226, 229, 233, 234, 235, 238, 239, 242, 243, 246, 247, 249, 250, 251, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 282, 283, 284, 288, 292, 293, 294, 295, 296, 299, 300, 302, 306, 307, 308, 311, 314, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 368, 375, 376, 380, 381, 383, 384, 385, 387, 388, 389, 394, 397, 398, 399, 401, 402, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 442, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "requir": [5, 7, 12, 18, 23, 28, 32, 34, 41, 44, 56, 57, 61, 62, 66, 69, 70, 71, 73, 74, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 105, 106, 108, 110, 113, 114, 116, 120, 125, 131, 137, 138, 149, 150, 156, 157, 160, 166, 168, 169, 174, 176, 180, 182, 183, 185, 186, 188, 190, 192, 193, 194, 195, 199, 200, 201, 202, 206, 207, 209, 211, 212, 220, 222, 225, 226, 227, 231, 233, 234, 239, 242, 244, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 280, 281, 283, 284, 288, 292, 293, 295, 296, 299, 300, 301, 305, 307, 308, 310, 314, 319, 322, 328, 330, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 355, 357, 360, 361, 364, 365, 368, 374, 375, 377, 380, 384, 385, 386, 387, 388, 393, 394, 396, 398, 401, 404, 406, 408, 409, 412, 413, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 440, 452, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "read": [5, 7, 22, 23, 24, 25, 30, 32, 33, 40, 41, 42, 47, 56, 61, 62, 64, 66, 70, 71, 73, 74, 76, 77, 83, 84, 85, 88, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 106, 108, 110, 112, 114, 115, 116, 117, 118, 120, 121, 135, 136, 139, 140, 143, 145, 146, 148, 149, 151, 153, 155, 156, 157, 158, 159, 160, 162, 165, 166, 169, 175, 176, 180, 182, 183, 187, 188, 189, 190, 192, 193, 199, 202, 203, 206, 207, 210, 211, 212, 214, 215, 216, 217, 222, 224, 225, 226, 229, 233, 234, 235, 239, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 262, 265, 268, 271, 276, 277, 278, 281, 282, 283, 284, 285, 286, 288, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 312, 313, 314, 319, 320, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 352, 354, 358, 359, 364, 365, 368, 375, 377, 378, 379, 380, 381, 383, 384, 388, 389, 393, 394, 395, 396, 397, 398, 399, 401, 406, 409, 412, 413, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 429, 431, 434, 436, 437, 439, 445, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "instead": [5, 7, 12, 13, 16, 17, 22, 23, 24, 30, 32, 33, 39, 41, 44, 47, 48, 56, 57, 59, 61, 64, 66, 70, 71, 73, 74, 75, 76, 77, 82, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 108, 112, 118, 120, 125, 127, 132, 138, 139, 143, 146, 147, 149, 151, 152, 156, 157, 158, 160, 165, 166, 168, 169, 174, 175, 176, 180, 182, 183, 185, 189, 190, 192, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 212, 222, 224, 225, 227, 229, 231, 233, 241, 242, 243, 244, 246, 247, 249, 250, 253, 255, 258, 261, 262, 266, 267, 269, 270, 271, 275, 283, 284, 288, 292, 293, 294, 296, 297, 299, 300, 305, 306, 307, 308, 311, 312, 313, 314, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 352, 353, 354, 357, 358, 361, 364, 366, 368, 374, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 393, 394, 396, 398, 399, 401, 402, 404, 406, 408, 409, 410, 411, 412, 414, 422, 424, 426, 427, 429, 430, 431, 434, 435, 448, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "they": [5, 7, 8, 18, 23, 24, 28, 29, 32, 33, 34, 41, 44, 47, 52, 53, 55, 56, 57, 61, 62, 64, 71, 73, 74, 76, 82, 83, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 118, 120, 125, 132, 134, 137, 138, 139, 140, 141, 144, 147, 150, 151, 153, 154, 155, 157, 160, 162, 165, 166, 168, 169, 174, 175, 176, 177, 178, 180, 182, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 204, 206, 207, 208, 210, 212, 214, 215, 217, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 239, 242, 246, 247, 249, 250, 252, 255, 256, 258, 259, 261, 262, 267, 268, 269, 270, 271, 275, 276, 277, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 299, 302, 304, 305, 307, 308, 309, 312, 314, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 357, 358, 361, 363, 364, 365, 366, 368, 374, 375, 376, 377, 379, 380, 383, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 441, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "work": [5, 15, 18, 23, 25, 32, 33, 34, 35, 36, 40, 41, 44, 53, 55, 57, 61, 62, 66, 70, 71, 74, 75, 76, 77, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 116, 117, 118, 120, 121, 122, 131, 132, 133, 134, 136, 137, 138, 139, 140, 145, 147, 150, 151, 155, 157, 160, 162, 165, 166, 168, 169, 172, 175, 176, 180, 182, 183, 186, 189, 190, 191, 196, 204, 206, 207, 209, 210, 214, 222, 224, 225, 227, 228, 229, 231, 232, 234, 239, 240, 241, 242, 244, 246, 247, 249, 250, 251, 254, 255, 257, 260, 261, 262, 264, 266, 267, 269, 273, 275, 278, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 304, 305, 306, 308, 309, 310, 316, 319, 322, 324, 328, 329, 330, 332, 335, 337, 338, 339, 341, 343, 344, 345, 347, 348, 352, 355, 357, 358, 359, 360, 361, 363, 364, 368, 374, 375, 380, 383, 385, 387, 388, 389, 393, 394, 399, 401, 402, 404, 406, 409, 410, 412, 413, 418, 419, 420, 424, 425, 426, 427, 429, 431, 433, 435, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "check": [5, 7, 9, 12, 16, 17, 20, 23, 25, 30, 32, 33, 34, 35, 37, 41, 42, 44, 48, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 70, 71, 73, 74, 76, 82, 86, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 105, 108, 112, 114, 117, 118, 120, 125, 127, 138, 143, 144, 149, 151, 155, 159, 160, 162, 166, 168, 172, 175, 176, 177, 180, 182, 185, 186, 187, 190, 196, 199, 204, 207, 210, 212, 213, 214, 220, 222, 224, 225, 231, 232, 239, 241, 242, 244, 246, 247, 255, 256, 259, 262, 264, 265, 267, 268, 269, 270, 272, 275, 280, 283, 286, 287, 288, 289, 293, 294, 295, 296, 302, 303, 305, 320, 322, 327, 328, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 350, 352, 356, 361, 362, 364, 374, 375, 377, 381, 384, 385, 387, 388, 394, 398, 399, 401, 408, 412, 415, 418, 421, 423, 426, 429, 430, 431, 435, 445, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "pybufferproc": [5, 59, 61, 73], "bf_releasebuff": [5, 59, 61, 472], "disallow": [5, 33, 61, 92, 118, 166, 180, 272, 293, 337, 340, 344, 422, 426, 460, 467, 471, 476, 479, 480, 482], "such": [5, 7, 12, 18, 20, 23, 24, 25, 28, 30, 32, 33, 34, 37, 41, 44, 50, 55, 56, 59, 61, 62, 68, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 102, 104, 105, 106, 108, 110, 111, 113, 118, 120, 125, 131, 132, 136, 138, 141, 144, 146, 147, 150, 151, 155, 157, 158, 160, 166, 168, 171, 174, 175, 176, 180, 182, 183, 185, 189, 192, 193, 195, 196, 201, 202, 204, 206, 207, 208, 210, 211, 212, 214, 215, 222, 224, 225, 226, 229, 231, 233, 234, 235, 237, 242, 244, 246, 247, 249, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 275, 278, 281, 283, 284, 287, 288, 292, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 313, 314, 317, 318, 319, 324, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 348, 352, 354, 356, 357, 358, 360, 361, 364, 365, 368, 374, 375, 376, 379, 380, 383, 384, 385, 386, 387, 388, 393, 394, 396, 398, 399, 401, 405, 406, 408, 409, 410, 411, 412, 414, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 442, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "bytearray": [5, 7, 8, 32, 33, 62, 66, 76, 83, 85, 88, 132, 145, 146, 181, 190, 212, 214, 224, 234, 236, 254, 258, 261, 262, 274, 278, 284, 299, 304, 318, 337, 341, 347, 385, 393, 399, 418, 423, 426, 427, 429, 449, 454, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482], "variant": [5, 22, 30, 40, 46, 55, 61, 66, 71, 82, 91, 93, 99, 102, 105, 118, 125, 157, 159, 166, 176, 182, 183, 185, 190, 202, 224, 225, 244, 247, 256, 261, 282, 283, 293, 294, 296, 303, 332, 337, 340, 341, 357, 387, 388, 389, 394, 397, 415, 427, 431, 466, 467, 468, 469, 476, 479, 480, 481, 482], "etc": [5, 33, 62, 77, 82, 83, 92, 93, 98, 99, 103, 105, 106, 108, 118, 132, 141, 146, 151, 155, 174, 205, 210, 224, 239, 242, 243, 246, 252, 255, 258, 259, 266, 267, 269, 272, 276, 281, 283, 284, 292, 293, 296, 302, 303, 307, 308, 310, 311, 319, 329, 333, 334, 337, 340, 341, 343, 357, 364, 365, 368, 374, 383, 385, 387, 393, 406, 409, 421, 425, 427, 430, 435, 436, 450, 455, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 480, 481, 482], "py_ssize_t_clean": [5, 34, 57, 70, 71, 74, 466, 471, 480, 482], "must": [5, 7, 9, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 46, 47, 48, 50, 54, 56, 57, 58, 59, 61, 62, 64, 69, 71, 73, 74, 75, 76, 77, 82, 83, 88, 90, 91, 92, 93, 95, 96, 97, 101, 102, 103, 106, 108, 110, 113, 114, 115, 118, 120, 121, 125, 131, 132, 138, 139, 140, 143, 144, 146, 149, 150, 151, 154, 155, 157, 160, 165, 166, 168, 171, 172, 174, 175, 176, 180, 182, 183, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 217, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 288, 291, 292, 293, 295, 296, 297, 299, 301, 302, 304, 308, 314, 317, 318, 319, 320, 322, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 352, 354, 357, 358, 359, 360, 361, 364, 365, 368, 370, 374, 375, 377, 378, 379, 381, 383, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 439, 441, 442, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "befor": [5, 7, 13, 17, 20, 22, 23, 24, 28, 30, 31, 33, 34, 37, 41, 44, 50, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 77, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 105, 106, 108, 113, 115, 118, 125, 127, 131, 134, 135, 136, 138, 140, 141, 143, 149, 150, 151, 153, 155, 156, 157, 158, 165, 166, 168, 169, 174, 175, 176, 182, 183, 185, 189, 190, 192, 194, 195, 200, 202, 204, 212, 217, 222, 224, 225, 226, 230, 231, 233, 241, 242, 244, 246, 247, 249, 250, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 276, 278, 283, 286, 288, 289, 292, 293, 295, 296, 297, 299, 300, 305, 307, 308, 309, 313, 314, 319, 320, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 357, 358, 359, 361, 363, 364, 365, 374, 375, 381, 383, 387, 388, 389, 393, 394, 398, 399, 400, 401, 404, 406, 409, 410, 411, 412, 413, 414, 415, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 445, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "on": [5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 84, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 118, 120, 121, 122, 125, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 150, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 220, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 342, 343, 345, 346, 347, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 440, 441, 445, 447, 448, 450, 454, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "older": [5, 32, 55, 61, 66, 71, 73, 90, 99, 101, 118, 163, 176, 185, 189, 201, 226, 229, 234, 246, 251, 252, 268, 288, 293, 295, 297, 299, 314, 328, 340, 341, 352, 353, 361, 368, 376, 385, 394, 414, 421, 429, 431, 461, 464, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 70, 71, 73, 74, 77, 82, 85, 86, 87, 88, 91, 92, 95, 96, 97, 98, 99, 101, 102, 110, 111, 112, 118, 119, 120, 121, 125, 126, 138, 140, 155, 159, 165, 166, 169, 175, 180, 182, 185, 189, 192, 210, 212, 220, 224, 225, 235, 239, 247, 254, 255, 256, 258, 259, 262, 267, 275, 281, 284, 289, 291, 292, 293, 295, 299, 304, 306, 316, 318, 319, 326, 328, 337, 340, 343, 345, 347, 351, 352, 365, 366, 377, 378, 381, 384, 385, 387, 388, 397, 401, 404, 406, 409, 410, 411, 412, 418, 420, 426, 427, 429, 439, 440, 442, 445, 448, 449, 450, 454, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482], "str": [5, 10, 18, 24, 25, 32, 33, 34, 38, 48, 57, 61, 62, 64, 66, 73, 74, 76, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 110, 112, 118, 120, 125, 135, 142, 146, 149, 155, 157, 159, 162, 166, 168, 174, 176, 180, 181, 182, 185, 187, 189, 190, 194, 195, 196, 200, 201, 202, 204, 207, 208, 210, 212, 224, 225, 233, 234, 235, 236, 239, 241, 243, 245, 246, 251, 252, 254, 255, 258, 259, 261, 262, 266, 267, 268, 270, 283, 284, 288, 291, 292, 293, 296, 299, 306, 318, 319, 331, 335, 338, 340, 341, 345, 347, 352, 357, 361, 362, 363, 366, 377, 378, 381, 384, 385, 387, 388, 393, 397, 399, 404, 409, 412, 413, 418, 420, 421, 424, 426, 427, 429, 434, 440, 441, 442, 443, 445, 448, 449, 450, 451, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 47, 48, 51, 52, 56, 57, 58, 59, 61, 62, 64, 70, 71, 73, 74, 77, 88, 95, 119, 146, 157, 175, 176, 201, 239, 246, 262, 282, 344, 345, 347, 366, 368, 385, 408, 412, 427, 439, 464, 466, 467, 468, 471, 476, 479, 480, 482], "convert": [5, 7, 14, 15, 18, 25, 32, 34, 38, 46, 50, 53, 54, 56, 57, 62, 64, 66, 70, 71, 73, 74, 82, 90, 91, 92, 93, 97, 98, 99, 102, 103, 108, 110, 115, 118, 125, 138, 141, 144, 148, 154, 155, 157, 159, 163, 166, 174, 175, 176, 177, 180, 182, 183, 185, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 207, 208, 212, 214, 219, 222, 224, 225, 229, 237, 239, 243, 247, 254, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 283, 285, 289, 292, 293, 294, 298, 299, 301, 302, 307, 309, 319, 335, 337, 342, 343, 344, 345, 347, 352, 357, 361, 365, 375, 377, 378, 385, 387, 393, 397, 399, 404, 406, 410, 412, 414, 418, 424, 426, 427, 429, 434, 435, 442, 445, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "exist": [5, 9, 22, 24, 25, 30, 32, 33, 34, 38, 41, 47, 53, 55, 56, 57, 60, 61, 62, 64, 65, 66, 70, 71, 74, 77, 82, 83, 91, 92, 93, 96, 98, 99, 101, 102, 105, 106, 108, 110, 111, 113, 115, 117, 118, 120, 121, 125, 127, 135, 139, 144, 149, 151, 155, 157, 159, 160, 162, 166, 168, 174, 175, 180, 182, 183, 186, 188, 190, 192, 193, 195, 199, 204, 205, 207, 209, 210, 211, 212, 215, 217, 218, 224, 225, 229, 231, 233, 234, 235, 242, 243, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 267, 268, 269, 270, 271, 272, 276, 278, 281, 283, 284, 287, 288, 292, 293, 294, 295, 296, 297, 299, 302, 308, 313, 319, 320, 324, 330, 332, 333, 334, 337, 340, 341, 342, 343, 344, 345, 348, 352, 353, 354, 357, 359, 361, 365, 367, 368, 371, 374, 375, 378, 383, 385, 386, 387, 388, 393, 394, 396, 398, 399, 401, 402, 404, 406, 409, 412, 418, 420, 421, 422, 424, 426, 427, 428, 429, 431, 434, 435, 452, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "store": [5, 7, 11, 12, 18, 25, 28, 32, 33, 40, 41, 48, 54, 56, 59, 61, 62, 66, 71, 73, 74, 76, 77, 82, 86, 87, 88, 91, 93, 97, 98, 99, 102, 104, 105, 106, 108, 111, 115, 118, 120, 132, 133, 141, 154, 157, 159, 166, 169, 172, 174, 175, 176, 180, 182, 183, 185, 190, 192, 195, 196, 199, 200, 202, 204, 207, 222, 230, 242, 244, 246, 247, 250, 253, 255, 256, 258, 261, 264, 267, 270, 271, 272, 276, 278, 283, 284, 288, 293, 298, 299, 300, 310, 314, 328, 329, 330, 335, 337, 338, 340, 341, 342, 344, 347, 350, 352, 354, 357, 361, 364, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 394, 401, 404, 406, 409, 412, 418, 420, 421, 423, 424, 426, 427, 429, 430, 431, 434, 435, 442, 447, 450, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482], "code": [5, 7, 9, 11, 12, 16, 18, 23, 24, 26, 27, 30, 31, 33, 35, 37, 40, 41, 44, 47, 50, 53, 54, 55, 57, 58, 61, 62, 64, 66, 70, 71, 73, 74, 75, 76, 77, 78, 82, 85, 86, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 116, 119, 120, 121, 127, 129, 131, 132, 134, 136, 138, 139, 141, 142, 143, 144, 146, 147, 151, 152, 157, 162, 166, 167, 168, 169, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 195, 201, 202, 204, 205, 207, 210, 211, 212, 213, 214, 220, 222, 224, 225, 227, 229, 234, 235, 238, 240, 241, 242, 244, 247, 249, 251, 254, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 273, 274, 278, 279, 280, 283, 284, 287, 288, 289, 292, 293, 295, 296, 297, 299, 302, 308, 309, 311, 312, 313, 314, 315, 319, 320, 324, 325, 330, 331, 332, 333, 334, 335, 337, 340, 341, 346, 347, 348, 351, 352, 353, 356, 361, 363, 364, 365, 367, 368, 374, 375, 376, 377, 379, 380, 381, 384, 385, 388, 389, 392, 394, 396, 401, 406, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 441, 444, 447, 453, 454, 455, 457, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 482, 483], "point": [5, 7, 16, 17, 18, 22, 23, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 53, 56, 58, 61, 62, 64, 66, 71, 75, 77, 82, 83, 85, 88, 90, 91, 93, 95, 97, 98, 99, 101, 102, 103, 105, 108, 112, 113, 114, 121, 125, 132, 134, 136, 137, 138, 139, 141, 144, 147, 153, 154, 157, 159, 161, 162, 166, 168, 169, 175, 176, 180, 182, 188, 189, 192, 195, 199, 201, 202, 204, 205, 208, 212, 220, 222, 224, 231, 234, 238, 246, 247, 249, 250, 254, 261, 262, 266, 267, 269, 271, 274, 275, 278, 280, 281, 283, 290, 292, 293, 294, 296, 297, 299, 302, 305, 308, 319, 322, 328, 331, 332, 333, 335, 337, 340, 341, 343, 344, 345, 346, 347, 352, 353, 354, 361, 364, 365, 368, 371, 375, 377, 380, 383, 385, 387, 388, 389, 394, 398, 402, 407, 408, 410, 411, 412, 413, 420, 422, 423, 424, 426, 427, 428, 429, 431, 440, 441, 443, 448, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "valueerror": [5, 9, 18, 23, 38, 40, 62, 66, 83, 91, 92, 96, 98, 106, 112, 113, 118, 119, 120, 125, 133, 137, 144, 147, 151, 156, 157, 158, 159, 162, 165, 166, 172, 174, 175, 180, 182, 185, 192, 195, 196, 202, 204, 207, 208, 209, 210, 212, 222, 224, 226, 231, 242, 247, 249, 250, 255, 258, 259, 261, 262, 267, 268, 274, 275, 278, 283, 284, 288, 292, 293, 294, 296, 302, 305, 314, 316, 318, 322, 325, 329, 330, 332, 333, 335, 337, 340, 341, 343, 344, 345, 348, 351, 352, 364, 365, 378, 386, 387, 388, 393, 394, 398, 407, 409, 421, 424, 426, 429, 440, 441, 442, 445, 449, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "rais": [5, 7, 9, 13, 14, 18, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 44, 46, 48, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 73, 74, 76, 86, 90, 91, 92, 93, 96, 99, 101, 103, 105, 106, 110, 112, 113, 118, 120, 121, 124, 125, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 153, 154, 156, 157, 158, 159, 162, 165, 166, 168, 169, 171, 172, 174, 175, 176, 180, 182, 183, 185, 186, 190, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 214, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 253, 255, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 278, 281, 282, 283, 284, 286, 287, 288, 291, 293, 294, 295, 296, 297, 299, 302, 304, 305, 306, 307, 309, 310, 311, 314, 318, 319, 322, 323, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 361, 364, 365, 368, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 418, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 439, 440, 441, 442, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "utf": [5, 16, 23, 30, 32, 33, 44, 56, 57, 66, 85, 98, 99, 105, 116, 118, 120, 145, 151, 166, 174, 182, 187, 189, 195, 196, 204, 205, 207, 208, 217, 222, 224, 234, 247, 250, 251, 252, 258, 262, 265, 266, 286, 288, 297, 299, 305, 307, 314, 330, 337, 338, 340, 341, 344, 352, 357, 377, 393, 394, 398, 406, 410, 412, 418, 420, 421, 427, 431, 434, 440, 445, 447, 454, 455, 457, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482], "convers": [5, 9, 18, 32, 33, 34, 61, 62, 66, 70, 88, 90, 91, 95, 103, 116, 118, 120, 132, 139, 143, 146, 157, 166, 174, 182, 185, 194, 216, 224, 254, 256, 258, 262, 266, 271, 276, 289, 290, 292, 293, 299, 318, 337, 341, 345, 347, 348, 352, 357, 377, 384, 388, 393, 396, 425, 426, 432, 434, 449, 454, 460, 466, 467, 468, 469, 470, 472, 474, 476, 477, 479, 480, 482, 483], "fail": [5, 7, 9, 11, 18, 23, 24, 30, 32, 34, 41, 46, 54, 62, 66, 70, 71, 74, 82, 83, 86, 87, 88, 92, 99, 101, 102, 106, 111, 118, 120, 137, 138, 139, 151, 153, 154, 165, 168, 175, 182, 186, 187, 189, 192, 208, 210, 212, 214, 243, 244, 246, 248, 249, 250, 255, 257, 258, 261, 262, 266, 268, 270, 271, 272, 278, 283, 292, 293, 294, 295, 296, 297, 302, 307, 319, 322, 328, 330, 332, 333, 334, 335, 336, 337, 340, 341, 344, 345, 348, 352, 357, 359, 361, 364, 368, 381, 385, 387, 388, 389, 394, 397, 404, 407, 412, 415, 418, 421, 424, 426, 427, 428, 430, 431, 435, 442, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482], "unicodeerror": [5, 23, 66, 85, 157, 182, 201, 212, 293, 344, 449, 464, 469], "accept": [5, 15, 18, 23, 28, 30, 32, 55, 59, 62, 64, 65, 66, 71, 73, 74, 77, 83, 87, 88, 90, 93, 96, 99, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 120, 125, 132, 136, 138, 139, 141, 143, 146, 149, 151, 154, 155, 157, 162, 163, 166, 168, 172, 175, 176, 177, 180, 182, 183, 185, 189, 192, 200, 204, 205, 207, 208, 212, 214, 220, 222, 225, 227, 233, 234, 238, 240, 241, 242, 244, 246, 247, 248, 250, 251, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 278, 282, 283, 289, 292, 293, 294, 295, 296, 297, 299, 314, 317, 319, 324, 328, 329, 330, 332, 333, 335, 338, 340, 341, 344, 348, 350, 352, 357, 361, 363, 365, 374, 375, 377, 379, 381, 384, 385, 387, 393, 394, 396, 398, 400, 402, 404, 406, 410, 412, 415, 418, 420, 421, 423, 425, 426, 427, 429, 431, 434, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "want": [5, 7, 23, 25, 32, 33, 34, 54, 61, 66, 70, 71, 73, 74, 75, 76, 82, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 113, 114, 118, 120, 125, 131, 135, 141, 143, 144, 151, 152, 155, 156, 158, 166, 168, 175, 176, 179, 182, 186, 189, 192, 195, 199, 200, 201, 204, 207, 210, 214, 217, 224, 225, 227, 229, 230, 234, 241, 242, 244, 246, 247, 249, 250, 251, 255, 258, 266, 267, 268, 269, 272, 275, 276, 278, 283, 289, 292, 293, 294, 296, 297, 299, 300, 302, 308, 313, 319, 328, 329, 332, 333, 335, 337, 338, 340, 341, 344, 345, 348, 352, 357, 363, 364, 368, 380, 383, 385, 387, 388, 389, 393, 394, 397, 399, 401, 406, 412, 420, 421, 424, 425, 427, 428, 431, 440, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482], "filesystem": [5, 23, 32, 33, 57, 62, 64, 66, 85, 105, 108, 118, 125, 143, 166, 212, 214, 215, 218, 250, 254, 266, 271, 283, 293, 294, 297, 302, 324, 332, 341, 352, 361, 387, 388, 398, 399, 420, 421, 454, 460, 462, 468, 473, 476, 479, 482], "path": [5, 23, 24, 30, 31, 32, 34, 57, 62, 66, 68, 70, 71, 74, 82, 83, 85, 86, 88, 91, 93, 95, 97, 98, 99, 105, 109, 112, 116, 117, 118, 125, 135, 138, 139, 142, 144, 148, 149, 151, 162, 166, 168, 175, 183, 189, 192, 199, 209, 212, 214, 218, 219, 222, 224, 229, 230, 233, 242, 243, 244, 246, 248, 249, 251, 252, 253, 254, 255, 256, 258, 261, 265, 266, 267, 268, 269, 270, 271, 276, 279, 280, 281, 283, 286, 288, 292, 293, 297, 302, 308, 311, 312, 313, 315, 320, 324, 327, 330, 331, 332, 334, 335, 337, 340, 341, 342, 348, 352, 355, 357, 359, 361, 365, 368, 383, 385, 387, 388, 393, 394, 398, 402, 404, 406, 412, 415, 418, 419, 420, 422, 424, 427, 432, 435, 437, 447, 449, 451, 452, 454, 455, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 479, 481, 482], "them": [5, 7, 15, 16, 22, 23, 24, 32, 33, 34, 44, 55, 57, 61, 62, 64, 66, 69, 71, 74, 75, 76, 82, 83, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 108, 110, 112, 118, 120, 125, 127, 133, 138, 139, 147, 151, 155, 157, 158, 160, 162, 165, 166, 168, 169, 174, 175, 176, 180, 182, 183, 185, 187, 190, 192, 194, 195, 200, 205, 207, 213, 215, 224, 225, 226, 229, 230, 231, 234, 235, 239, 242, 243, 246, 247, 250, 251, 255, 258, 266, 267, 268, 269, 271, 283, 284, 288, 289, 292, 293, 295, 296, 299, 307, 308, 317, 319, 322, 324, 328, 330, 335, 337, 340, 341, 342, 343, 344, 346, 347, 348, 352, 358, 361, 363, 364, 366, 368, 374, 375, 381, 383, 385, 387, 388, 389, 399, 400, 404, 408, 409, 410, 411, 412, 420, 421, 426, 427, 429, 430, 431, 433, 435, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "prefer": [5, 23, 30, 33, 34, 42, 48, 55, 59, 66, 83, 88, 92, 93, 99, 106, 108, 112, 118, 125, 138, 139, 166, 174, 176, 182, 185, 201, 204, 212, 224, 234, 250, 258, 261, 266, 271, 275, 283, 292, 293, 299, 313, 341, 343, 348, 352, 354, 361, 363, 364, 365, 367, 375, 383, 384, 385, 397, 402, 404, 415, 420, 431, 455, 460, 466, 468, 471, 472, 474, 475, 477, 478, 479, 480, 482], "pyunicode_fsconvert": [5, 55, 62, 478, 482], "previous": [5, 7, 9, 11, 16, 17, 22, 23, 28, 32, 37, 39, 41, 46, 57, 59, 61, 62, 70, 71, 73, 74, 76, 77, 82, 83, 87, 88, 90, 93, 98, 99, 102, 105, 111, 118, 120, 131, 132, 138, 140, 144, 149, 150, 151, 157, 165, 166, 168, 169, 172, 175, 176, 180, 182, 185, 189, 190, 192, 206, 207, 210, 212, 213, 215, 220, 225, 229, 231, 241, 244, 246, 249, 250, 255, 261, 265, 267, 269, 270, 271, 276, 278, 282, 283, 284, 292, 293, 294, 296, 297, 299, 311, 314, 319, 329, 330, 331, 333, 335, 337, 340, 341, 343, 344, 347, 352, 354, 355, 361, 363, 364, 365, 374, 375, 379, 381, 383, 384, 385, 387, 388, 389, 393, 394, 399, 400, 404, 409, 412, 419, 420, 421, 422, 425, 426, 427, 428, 431, 435, 445, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "typeerror": [5, 9, 22, 23, 38, 40, 46, 47, 48, 52, 53, 57, 59, 61, 62, 65, 66, 71, 73, 74, 83, 87, 91, 92, 93, 96, 105, 106, 118, 119, 120, 128, 166, 167, 168, 171, 175, 180, 182, 183, 185, 192, 195, 196, 197, 198, 204, 205, 210, 212, 224, 232, 250, 255, 258, 259, 262, 268, 274, 275, 278, 291, 292, 293, 296, 304, 318, 344, 352, 365, 385, 387, 388, 393, 397, 401, 410, 412, 418, 426, 427, 429, 435, 440, 441, 442, 448, 449, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "was": [5, 7, 9, 11, 17, 18, 22, 23, 30, 32, 34, 41, 44, 48, 52, 54, 57, 58, 59, 61, 62, 64, 68, 71, 73, 74, 75, 76, 83, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 124, 125, 131, 132, 136, 138, 140, 141, 143, 144, 149, 151, 152, 155, 156, 157, 160, 162, 165, 166, 168, 169, 174, 176, 180, 182, 185, 187, 189, 190, 192, 195, 198, 200, 201, 204, 205, 206, 209, 210, 212, 213, 217, 222, 224, 226, 227, 229, 231, 233, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 255, 258, 259, 266, 267, 268, 269, 270, 271, 272, 275, 278, 282, 283, 284, 286, 288, 289, 292, 293, 295, 296, 297, 299, 302, 306, 307, 308, 311, 313, 314, 319, 320, 321, 322, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 368, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 409, 412, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 440, 442, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "were": [5, 7, 9, 16, 17, 18, 26, 32, 34, 47, 59, 61, 64, 71, 73, 74, 88, 91, 93, 98, 99, 102, 103, 108, 110, 111, 118, 120, 125, 132, 138, 140, 144, 149, 151, 157, 159, 165, 166, 168, 176, 180, 182, 185, 187, 189, 190, 192, 195, 198, 199, 200, 202, 204, 206, 207, 212, 215, 222, 224, 226, 227, 231, 234, 235, 239, 246, 250, 251, 255, 262, 267, 268, 275, 276, 278, 283, 289, 293, 295, 299, 308, 314, 319, 330, 333, 335, 337, 340, 343, 344, 345, 348, 352, 355, 357, 358, 361, 368, 375, 379, 380, 381, 383, 385, 387, 388, 389, 393, 394, 399, 406, 411, 412, 422, 426, 427, 429, 431, 433, 434, 435, 440, 442, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "encount": [5, 9, 14, 34, 53, 61, 102, 104, 105, 118, 151, 153, 174, 185, 192, 198, 204, 207, 211, 212, 227, 239, 243, 255, 262, 267, 268, 272, 286, 292, 294, 296, 297, 299, 311, 314, 319, 331, 332, 338, 340, 341, 343, 344, 348, 358, 375, 385, 387, 399, 412, 414, 431, 461, 464, 465, 466, 467, 471, 474, 475, 480, 482], "well": [5, 34, 48, 62, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 91, 92, 93, 97, 98, 99, 101, 102, 103, 105, 106, 108, 112, 118, 131, 132, 136, 141, 143, 144, 146, 151, 152, 156, 157, 165, 166, 168, 174, 175, 176, 183, 185, 190, 192, 193, 194, 196, 199, 202, 203, 207, 210, 212, 214, 217, 222, 224, 225, 226, 227, 229, 233, 234, 242, 246, 249, 251, 257, 258, 259, 261, 263, 267, 268, 269, 270, 271, 276, 279, 284, 288, 289, 292, 293, 299, 307, 319, 321, 324, 329, 332, 335, 340, 341, 342, 343, 344, 345, 348, 352, 353, 357, 360, 361, 363, 366, 368, 372, 374, 377, 380, 381, 383, 384, 385, 387, 388, 389, 393, 401, 409, 412, 413, 414, 415, 418, 424, 427, 429, 431, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "may": [5, 7, 9, 10, 11, 12, 13, 14, 20, 22, 23, 24, 28, 30, 32, 33, 34, 37, 41, 42, 44, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 113, 114, 115, 118, 120, 121, 125, 127, 131, 132, 137, 138, 139, 140, 141, 144, 146, 147, 149, 151, 155, 156, 157, 158, 160, 162, 165, 166, 168, 171, 172, 174, 175, 176, 180, 182, 183, 185, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 361, 363, 364, 365, 366, 368, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 445, 452, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "doesn": [5, 7, 22, 23, 30, 32, 33, 34, 42, 47, 54, 61, 70, 71, 74, 75, 76, 77, 83, 88, 90, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 112, 118, 120, 131, 132, 134, 144, 150, 151, 157, 168, 172, 174, 175, 182, 183, 185, 192, 195, 197, 199, 204, 212, 213, 224, 225, 242, 243, 246, 251, 255, 258, 259, 262, 266, 267, 269, 289, 292, 293, 294, 296, 297, 299, 302, 305, 314, 319, 322, 323, 328, 330, 332, 333, 334, 335, 337, 339, 340, 341, 343, 344, 345, 348, 352, 361, 364, 366, 368, 383, 384, 386, 387, 388, 389, 399, 404, 406, 408, 418, 422, 423, 427, 429, 431, 440, 448, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "two": [5, 7, 9, 14, 15, 23, 25, 28, 32, 33, 34, 35, 36, 40, 41, 44, 46, 56, 60, 61, 62, 65, 66, 70, 71, 73, 74, 75, 76, 82, 83, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 115, 118, 120, 121, 125, 131, 132, 138, 139, 141, 143, 144, 146, 147, 150, 151, 154, 155, 156, 157, 158, 159, 162, 166, 171, 172, 174, 175, 176, 177, 180, 182, 185, 188, 189, 190, 192, 193, 194, 195, 199, 201, 206, 207, 208, 209, 210, 212, 215, 217, 220, 222, 224, 225, 226, 227, 229, 234, 235, 242, 244, 246, 247, 248, 250, 255, 258, 259, 260, 261, 262, 266, 267, 268, 271, 275, 276, 278, 283, 284, 288, 289, 290, 292, 293, 294, 295, 296, 297, 299, 301, 305, 308, 312, 314, 317, 318, 319, 322, 324, 325, 330, 332, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 352, 357, 360, 361, 363, 364, 365, 366, 371, 374, 375, 377, 381, 383, 385, 386, 387, 388, 389, 393, 397, 398, 399, 400, 401, 404, 406, 407, 409, 412, 415, 420, 421, 423, 424, 426, 427, 429, 430, 431, 433, 434, 435, 439, 440, 441, 448, 450, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "second": [5, 20, 22, 23, 32, 34, 36, 56, 62, 65, 66, 71, 73, 74, 75, 76, 82, 83, 88, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 113, 115, 125, 128, 133, 134, 135, 137, 138, 139, 141, 151, 157, 165, 166, 168, 174, 175, 176, 181, 182, 185, 189, 190, 192, 194, 199, 202, 207, 208, 210, 212, 213, 214, 217, 220, 222, 224, 227, 229, 231, 234, 235, 241, 242, 246, 247, 249, 250, 255, 258, 261, 267, 268, 269, 271, 272, 275, 276, 282, 283, 284, 292, 293, 294, 295, 297, 299, 301, 302, 305, 307, 308, 318, 319, 322, 328, 329, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 354, 357, 358, 360, 361, 364, 365, 366, 375, 377, 383, 385, 387, 388, 393, 394, 395, 397, 406, 412, 418, 421, 427, 429, 430, 431, 434, 435, 441, 445, 448, 455, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 477, 478, 479, 480, 482], "but": [5, 7, 8, 9, 12, 13, 15, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 41, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 76, 82, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 118, 120, 125, 127, 131, 132, 136, 138, 139, 141, 143, 144, 146, 147, 150, 151, 152, 154, 155, 157, 158, 160, 165, 166, 168, 171, 174, 175, 176, 180, 182, 183, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 222, 224, 226, 227, 229, 230, 231, 234, 235, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 255, 257, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 301, 304, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 354, 357, 359, 361, 363, 364, 365, 366, 367, 368, 372, 374, 375, 376, 377, 380, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 399, 401, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "buf": [5, 7, 41, 66, 125, 163, 214, 234, 284, 341, 344, 357, 466], "member": [5, 7, 26, 30, 32, 33, 34, 44, 54, 56, 57, 58, 59, 61, 66, 71, 73, 74, 76, 86, 88, 110, 149, 162, 166, 175, 176, 180, 181, 190, 210, 212, 232, 233, 243, 244, 247, 261, 262, 268, 270, 293, 294, 299, 310, 311, 313, 315, 332, 337, 339, 340, 341, 342, 343, 344, 347, 352, 357, 361, 365, 377, 384, 385, 387, 388, 421, 427, 429, 464, 465, 466, 467, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "recommend": [5, 32, 34, 41, 44, 47, 55, 61, 62, 66, 68, 70, 71, 73, 74, 83, 86, 88, 89, 92, 93, 98, 101, 105, 108, 118, 120, 121, 124, 125, 131, 132, 138, 139, 143, 157, 165, 166, 172, 175, 180, 182, 185, 192, 195, 212, 224, 229, 234, 241, 244, 246, 247, 250, 255, 258, 262, 267, 275, 288, 295, 296, 299, 306, 308, 314, 319, 324, 331, 337, 338, 340, 341, 348, 352, 357, 359, 365, 368, 378, 385, 387, 397, 398, 406, 408, 409, 410, 414, 415, 421, 423, 424, 427, 431, 434, 455, 460, 461, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "way": [5, 7, 9, 13, 23, 25, 30, 32, 33, 34, 41, 44, 55, 56, 57, 61, 62, 64, 68, 70, 71, 73, 74, 76, 77, 82, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 111, 118, 120, 121, 123, 125, 132, 138, 139, 141, 144, 151, 154, 156, 157, 158, 160, 162, 166, 168, 171, 172, 174, 175, 176, 180, 182, 185, 187, 189, 192, 193, 194, 195, 199, 200, 204, 206, 207, 208, 210, 222, 224, 227, 229, 234, 235, 242, 246, 247, 249, 250, 251, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 278, 280, 283, 284, 292, 293, 295, 296, 297, 299, 307, 308, 318, 319, 324, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 348, 352, 353, 356, 357, 361, 364, 366, 368, 374, 377, 380, 383, 385, 386, 387, 388, 389, 394, 397, 399, 401, 402, 406, 409, 412, 414, 418, 419, 420, 424, 425, 426, 427, 429, 431, 433, 434, 435, 447, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "binari": [5, 7, 31, 33, 40, 41, 46, 61, 64, 66, 68, 73, 76, 84, 85, 88, 92, 95, 99, 105, 108, 113, 116, 120, 125, 141, 143, 149, 167, 175, 185, 190, 193, 195, 196, 197, 199, 200, 202, 204, 206, 207, 210, 214, 220, 222, 224, 229, 233, 234, 235, 244, 249, 250, 252, 253, 254, 255, 256, 259, 261, 262, 266, 268, 269, 270, 271, 274, 275, 281, 282, 283, 285, 288, 292, 293, 296, 299, 302, 304, 317, 337, 345, 348, 350, 352, 354, 357, 359, 362, 368, 378, 385, 394, 396, 398, 401, 404, 412, 415, 419, 420, 421, 424, 425, 427, 432, 435, 438, 444, 445, 455, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pybytesobject": [5, 9, 13, 62, 88, 467, 472, 482], "attempt": [5, 11, 23, 25, 30, 32, 34, 46, 57, 61, 83, 86, 88, 90, 92, 95, 96, 99, 102, 105, 106, 114, 118, 120, 125, 132, 149, 155, 165, 166, 168, 172, 174, 176, 182, 183, 185, 189, 190, 192, 193, 195, 198, 202, 204, 205, 206, 208, 211, 212, 222, 224, 225, 241, 242, 246, 247, 250, 255, 258, 265, 266, 268, 269, 270, 271, 278, 282, 283, 284, 293, 295, 299, 302, 305, 307, 311, 313, 314, 319, 320, 322, 325, 328, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 347, 352, 358, 361, 363, 364, 365, 387, 388, 393, 394, 397, 398, 400, 406, 409, 412, 414, 415, 416, 421, 422, 423, 426, 427, 429, 431, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 475, 477, 478, 479, 480, 481, 482], "declar": [5, 32, 34, 55, 56, 61, 66, 68, 71, 73, 74, 76, 82, 83, 88, 93, 99, 105, 114, 127, 138, 166, 168, 169, 171, 175, 224, 225, 239, 250, 255, 258, 268, 292, 299, 314, 331, 338, 340, 344, 351, 385, 387, 401, 402, 408, 409, 410, 412, 414, 415, 424, 426, 427, 428, 429, 435, 464, 466, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pybytearrayobject": [5, 8, 88], "write": [5, 7, 18, 23, 24, 25, 28, 32, 33, 34, 35, 40, 41, 42, 56, 57, 61, 62, 66, 70, 72, 73, 74, 76, 84, 85, 86, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 108, 110, 112, 114, 115, 116, 117, 118, 121, 125, 129, 134, 135, 136, 138, 139, 140, 142, 143, 145, 147, 149, 151, 155, 156, 157, 160, 162, 166, 168, 169, 175, 176, 179, 183, 186, 188, 189, 192, 193, 195, 199, 200, 204, 207, 212, 214, 216, 217, 221, 222, 224, 225, 226, 227, 229, 233, 235, 242, 244, 245, 246, 247, 250, 254, 258, 259, 262, 267, 268, 269, 271, 273, 277, 278, 281, 283, 284, 285, 286, 288, 292, 293, 294, 295, 296, 298, 299, 301, 304, 305, 307, 308, 309, 311, 317, 320, 328, 329, 330, 331, 332, 333, 337, 338, 341, 342, 344, 347, 348, 350, 352, 355, 358, 359, 362, 364, 367, 368, 370, 375, 377, 378, 379, 381, 383, 385, 387, 388, 389, 396, 398, 399, 404, 406, 409, 410, 412, 414, 416, 418, 420, 421, 423, 426, 427, 430, 431, 435, 440, 445, 449, 450, 451, 454, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "interfac": [5, 7, 30, 31, 32, 34, 42, 47, 57, 61, 62, 64, 66, 70, 71, 73, 78, 83, 90, 91, 93, 98, 99, 101, 102, 105, 106, 108, 112, 114, 116, 117, 118, 125, 131, 132, 143, 149, 150, 153, 155, 157, 160, 165, 166, 168, 169, 171, 172, 174, 175, 176, 179, 184, 186, 188, 191, 192, 193, 195, 196, 202, 203, 204, 205, 206, 211, 214, 217, 221, 227, 229, 232, 234, 241, 242, 244, 246, 249, 251, 253, 254, 256, 260, 261, 264, 266, 267, 270, 271, 273, 276, 277, 281, 283, 285, 292, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 308, 310, 312, 314, 315, 324, 325, 328, 330, 333, 335, 338, 339, 341, 344, 348, 350, 351, 352, 355, 360, 362, 364, 365, 367, 369, 374, 377, 378, 380, 383, 393, 396, 397, 399, 400, 401, 402, 403, 406, 408, 409, 410, 412, 413, 414, 416, 425, 427, 431, 457, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483], "done": [5, 7, 14, 30, 32, 33, 34, 35, 46, 48, 52, 53, 55, 56, 60, 61, 62, 64, 66, 70, 71, 73, 74, 82, 83, 88, 90, 93, 95, 96, 98, 99, 101, 102, 103, 105, 106, 108, 112, 118, 124, 125, 128, 132, 135, 138, 141, 151, 155, 157, 158, 163, 165, 166, 172, 174, 175, 176, 181, 182, 183, 185, 190, 192, 195, 199, 203, 204, 207, 208, 215, 221, 224, 230, 231, 233, 234, 244, 246, 249, 250, 255, 258, 266, 267, 268, 269, 278, 283, 288, 292, 293, 295, 296, 299, 302, 308, 309, 314, 316, 319, 334, 338, 340, 341, 344, 345, 348, 350, 352, 357, 358, 360, 361, 365, 366, 374, 375, 383, 384, 385, 388, 389, 394, 398, 399, 401, 407, 410, 411, 412, 413, 420, 427, 429, 431, 434, 435, 451, 460, 461, 462, 463, 464, 466, 467, 472, 474, 475, 476, 477, 478, 480, 482], "input": [5, 9, 14, 15, 33, 34, 47, 61, 62, 64, 66, 71, 73, 83, 88, 91, 93, 96, 98, 104, 105, 106, 108, 110, 112, 116, 118, 120, 121, 125, 132, 136, 141, 142, 143, 144, 146, 149, 151, 155, 156, 157, 158, 159, 166, 168, 172, 174, 175, 182, 185, 189, 190, 192, 193, 194, 195, 196, 199, 200, 202, 206, 207, 208, 212, 218, 220, 221, 224, 228, 233, 234, 235, 239, 243, 244, 246, 254, 258, 261, 262, 264, 267, 269, 270, 271, 275, 283, 284, 290, 292, 293, 294, 295, 297, 301, 302, 307, 309, 311, 314, 317, 319, 320, 322, 328, 331, 335, 337, 340, 341, 344, 348, 352, 353, 358, 360, 361, 363, 365, 367, 368, 374, 375, 376, 380, 388, 393, 394, 396, 400, 406, 407, 410, 411, 412, 413, 414, 415, 416, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 440, 442, 449, 451, 454, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 27, 28, 29, 30, 32, 33, 34, 41, 44, 48, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 82, 85, 87, 88, 90, 93, 95, 98, 99, 100, 101, 104, 105, 106, 110, 111, 112, 115, 116, 117, 120, 125, 127, 132, 133, 135, 138, 140, 142, 144, 145, 147, 149, 150, 151, 152, 153, 155, 156, 159, 160, 162, 163, 165, 166, 168, 169, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 199, 201, 202, 204, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 225, 227, 229, 230, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 291, 292, 294, 295, 296, 297, 299, 300, 302, 303, 305, 307, 308, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 371, 373, 374, 375, 376, 377, 379, 380, 381, 383, 385, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 425, 426, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 445, 448, 449, 451, 452, 454, 455, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "known": [5, 9, 23, 24, 32, 34, 58, 61, 62, 66, 73, 83, 92, 93, 95, 102, 103, 106, 108, 118, 120, 151, 154, 157, 166, 168, 175, 182, 195, 196, 208, 234, 241, 246, 250, 251, 253, 266, 267, 268, 275, 276, 293, 299, 319, 320, 327, 328, 337, 340, 341, 342, 343, 344, 348, 352, 353, 365, 368, 374, 375, 377, 383, 385, 386, 388, 389, 398, 399, 408, 409, 414, 415, 421, 423, 424, 425, 427, 429, 433, 434, 435, 455, 457, 464, 466, 468, 469, 470, 471, 472, 474, 476, 478, 479, 480, 482], "content": [5, 7, 8, 9, 12, 25, 31, 32, 37, 41, 44, 52, 56, 59, 62, 64, 66, 70, 82, 83, 86, 88, 90, 93, 98, 99, 102, 105, 106, 108, 111, 112, 116, 120, 121, 143, 149, 151, 153, 156, 157, 159, 162, 165, 174, 175, 176, 178, 183, 186, 190, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 214, 215, 222, 224, 225, 226, 229, 233, 234, 239, 240, 241, 244, 246, 250, 251, 252, 253, 255, 258, 262, 268, 271, 273, 276, 278, 279, 280, 281, 284, 285, 293, 296, 299, 300, 302, 307, 311, 315, 317, 319, 320, 332, 334, 337, 340, 341, 344, 345, 347, 352, 353, 357, 359, 361, 363, 368, 377, 384, 390, 392, 393, 394, 398, 401, 406, 408, 409, 410, 412, 414, 415, 416, 418, 419, 420, 421, 423, 424, 428, 429, 431, 434, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 482], "text": [5, 52, 57, 62, 66, 70, 73, 82, 83, 85, 87, 88, 93, 98, 99, 102, 103, 105, 106, 116, 118, 120, 125, 145, 146, 149, 150, 151, 152, 155, 156, 158, 166, 167, 172, 174, 175, 177, 186, 187, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 217, 218, 222, 224, 225, 233, 237, 238, 239, 241, 244, 247, 249, 250, 252, 253, 254, 255, 262, 266, 267, 268, 269, 270, 271, 273, 281, 282, 286, 288, 292, 293, 296, 299, 305, 307, 308, 313, 314, 315, 317, 320, 323, 331, 333, 340, 341, 345, 346, 348, 350, 352, 357, 359, 366, 367, 368, 371, 374, 375, 376, 380, 383, 385, 386, 387, 393, 394, 397, 398, 399, 402, 406, 408, 410, 411, 412, 414, 415, 421, 425, 427, 428, 429, 431, 433, 434, 445, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "alloc": [5, 7, 16, 23, 28, 30, 31, 33, 34, 44, 48, 49, 54, 56, 57, 61, 62, 64, 66, 70, 71, 72, 74, 83, 91, 97, 103, 113, 132, 168, 175, 184, 187, 213, 226, 254, 258, 259, 283, 284, 293, 299, 314, 322, 337, 352, 364, 375, 404, 415, 454, 455, 461, 462, 463, 466, 468, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "need": [5, 7, 11, 13, 18, 23, 28, 30, 32, 33, 34, 41, 44, 45, 48, 50, 54, 55, 56, 57, 61, 62, 64, 66, 68, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 115, 118, 120, 121, 125, 131, 136, 137, 138, 139, 140, 141, 144, 149, 151, 153, 154, 155, 156, 157, 160, 166, 168, 172, 175, 176, 178, 180, 182, 185, 189, 190, 192, 193, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 222, 224, 225, 229, 233, 234, 235, 237, 239, 242, 244, 246, 247, 249, 250, 251, 252, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 278, 281, 283, 284, 286, 288, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 311, 314, 319, 320, 321, 322, 325, 326, 330, 331, 332, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 357, 360, 361, 363, 364, 365, 367, 368, 374, 376, 377, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 433, 434, 435, 436, 450, 454, 455, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "copi": [5, 7, 9, 17, 25, 32, 33, 41, 42, 50, 53, 61, 62, 66, 71, 75, 78, 88, 93, 97, 99, 108, 110, 117, 118, 120, 125, 132, 138, 151, 157, 159, 163, 165, 166, 169, 171, 173, 175, 176, 180, 181, 182, 185, 190, 192, 199, 200, 202, 207, 214, 218, 224, 225, 226, 229, 234, 236, 243, 246, 247, 254, 255, 256, 258, 261, 267, 269, 271, 276, 278, 283, 284, 290, 292, 293, 299, 301, 302, 309, 319, 330, 340, 344, 345, 347, 348, 350, 352, 354, 361, 367, 371, 381, 383, 384, 387, 388, 389, 394, 398, 399, 406, 414, 415, 420, 423, 425, 427, 439, 440, 441, 460, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "adjust": [5, 12, 44, 52, 54, 62, 66, 88, 101, 118, 159, 176, 182, 185, 200, 207, 290, 307, 324, 334, 341, 344, 365, 368, 374, 375, 412, 461, 468, 472, 476, 478, 479, 480, 482], "respons": [5, 18, 23, 32, 33, 34, 44, 55, 59, 61, 62, 66, 71, 74, 77, 88, 91, 92, 93, 98, 99, 100, 103, 105, 106, 108, 121, 125, 132, 134, 136, 155, 168, 174, 176, 178, 182, 190, 195, 210, 222, 241, 242, 244, 247, 249, 250, 254, 256, 266, 267, 288, 305, 314, 325, 335, 337, 338, 340, 341, 348, 350, 351, 385, 387, 389, 392, 400, 411, 418, 419, 420, 424, 427, 429, 431, 440, 450, 460, 461, 464, 467, 468, 472, 474, 475, 476, 477, 479, 480, 482], "pymem_fre": [5, 18, 33, 41, 55, 57, 62, 464, 466, 482], "free": [5, 7, 11, 13, 18, 32, 33, 34, 41, 50, 57, 61, 62, 71, 73, 74, 76, 82, 83, 87, 93, 101, 103, 108, 120, 127, 133, 157, 165, 175, 189, 190, 224, 226, 228, 229, 247, 255, 283, 284, 292, 293, 299, 303, 316, 332, 344, 351, 352, 361, 381, 384, 387, 398, 401, 409, 418, 419, 424, 425, 426, 427, 428, 429, 431, 435, 460, 462, 463, 464, 466, 467, 469, 474, 475, 476, 481, 482], "through": [5, 7, 9, 11, 14, 15, 20, 22, 23, 24, 32, 41, 44, 53, 57, 58, 61, 62, 66, 71, 74, 75, 83, 89, 91, 93, 96, 98, 99, 101, 102, 105, 106, 108, 114, 118, 125, 144, 151, 157, 165, 166, 174, 175, 176, 177, 180, 182, 185, 189, 190, 192, 193, 195, 196, 197, 201, 203, 204, 205, 207, 209, 215, 220, 224, 225, 229, 241, 243, 244, 246, 250, 251, 257, 267, 268, 269, 271, 275, 278, 281, 283, 284, 292, 293, 294, 297, 301, 302, 306, 312, 314, 319, 335, 337, 340, 341, 342, 343, 344, 345, 348, 352, 354, 361, 363, 364, 366, 368, 374, 375, 384, 385, 387, 388, 389, 393, 394, 397, 401, 405, 409, 410, 412, 414, 416, 418, 421, 423, 426, 427, 429, 431, 433, 434, 435, 440, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "recod": 5, "assum": [5, 7, 32, 33, 34, 40, 44, 52, 54, 57, 58, 61, 70, 71, 74, 76, 77, 82, 83, 86, 87, 93, 95, 96, 97, 98, 99, 101, 102, 103, 105, 108, 114, 118, 125, 150, 151, 153, 154, 157, 160, 165, 166, 168, 174, 175, 182, 195, 198, 200, 201, 202, 208, 209, 222, 224, 229, 234, 241, 242, 246, 247, 248, 252, 258, 266, 267, 268, 283, 288, 292, 293, 296, 297, 302, 311, 313, 334, 337, 340, 341, 343, 344, 345, 347, 348, 352, 357, 363, 365, 371, 375, 385, 387, 389, 394, 398, 407, 415, 420, 427, 429, 431, 435, 460, 461, 462, 463, 466, 467, 469, 475, 476, 477, 478, 479, 482], "paramet": [5, 7, 9, 11, 12, 13, 14, 15, 17, 22, 23, 24, 27, 28, 31, 33, 34, 36, 44, 48, 50, 54, 56, 59, 61, 62, 64, 65, 66, 72, 73, 77, 82, 85, 91, 92, 93, 98, 102, 104, 105, 110, 113, 115, 116, 118, 120, 125, 135, 136, 138, 139, 141, 144, 149, 150, 151, 157, 162, 165, 166, 168, 169, 171, 176, 182, 185, 189, 190, 192, 195, 196, 197, 198, 200, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 219, 222, 224, 225, 226, 227, 229, 230, 233, 234, 239, 241, 242, 244, 246, 247, 249, 250, 251, 253, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 292, 294, 295, 296, 297, 305, 307, 311, 312, 314, 315, 317, 319, 320, 322, 325, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 348, 351, 355, 357, 358, 359, 361, 364, 365, 366, 367, 374, 379, 380, 381, 383, 385, 387, 388, 389, 393, 394, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 416, 418, 419, 421, 423, 424, 426, 427, 428, 429, 430, 431, 435, 444, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "buffer_length": 5, "unlik": [5, 32, 34, 37, 40, 41, 44, 48, 53, 58, 71, 74, 82, 83, 91, 92, 93, 97, 98, 99, 104, 105, 114, 120, 121, 125, 136, 138, 147, 149, 162, 168, 174, 176, 182, 183, 185, 204, 224, 227, 230, 242, 247, 258, 261, 262, 270, 271, 275, 283, 293, 294, 295, 296, 297, 299, 305, 319, 324, 337, 341, 344, 345, 348, 359, 361, 365, 368, 381, 384, 385, 387, 388, 401, 404, 406, 412, 424, 427, 429, 431, 433, 434, 435, 460, 462, 463, 464, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 481, 482], "third": [5, 7, 23, 24, 28, 30, 32, 34, 55, 56, 61, 71, 73, 74, 82, 83, 87, 88, 91, 93, 98, 99, 102, 105, 108, 110, 115, 125, 127, 131, 132, 137, 157, 166, 175, 176, 180, 182, 183, 185, 190, 224, 226, 227, 250, 251, 261, 267, 268, 293, 299, 302, 307, 319, 330, 332, 337, 340, 341, 343, 344, 352, 354, 368, 379, 380, 385, 387, 389, 394, 398, 399, 401, 418, 425, 427, 431, 448, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482], "referenc": [5, 7, 12, 13, 34, 58, 61, 65, 71, 73, 83, 98, 102, 112, 118, 138, 166, 178, 190, 224, 225, 246, 255, 283, 293, 299, 319, 344, 351, 401, 409, 427, 460, 462, 463, 464, 467, 468, 469, 475, 476, 482], "output": [5, 9, 15, 18, 32, 33, 41, 57, 61, 62, 64, 66, 71, 73, 74, 76, 87, 90, 93, 95, 98, 100, 102, 103, 105, 108, 110, 112, 115, 118, 121, 125, 132, 136, 138, 139, 141, 143, 144, 146, 148, 149, 150, 151, 152, 155, 156, 157, 162, 163, 166, 168, 174, 175, 176, 182, 186, 189, 190, 192, 194, 199, 200, 201, 203, 207, 208, 209, 211, 217, 218, 222, 224, 227, 233, 234, 235, 239, 241, 243, 244, 245, 247, 255, 256, 258, 261, 262, 267, 269, 270, 275, 279, 283, 288, 292, 293, 295, 299, 300, 301, 302, 305, 307, 308, 309, 311, 313, 314, 317, 319, 321, 322, 325, 328, 331, 333, 334, 335, 337, 338, 340, 341, 344, 345, 348, 352, 354, 356, 357, 358, 360, 361, 363, 365, 366, 367, 377, 379, 380, 381, 385, 387, 394, 396, 397, 398, 399, 400, 401, 406, 410, 412, 416, 420, 421, 423, 427, 434, 435, 444, 448, 449, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "there": [5, 7, 9, 14, 18, 22, 23, 25, 26, 30, 32, 33, 34, 35, 37, 38, 40, 41, 44, 45, 48, 53, 56, 57, 58, 61, 62, 64, 65, 66, 70, 71, 73, 74, 75, 76, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 118, 120, 125, 131, 132, 136, 138, 139, 143, 144, 151, 153, 154, 155, 156, 157, 158, 162, 165, 166, 168, 169, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 195, 196, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 212, 214, 215, 217, 224, 225, 226, 227, 229, 231, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 255, 258, 259, 261, 265, 266, 267, 268, 269, 271, 275, 278, 281, 283, 287, 288, 289, 292, 293, 294, 295, 296, 297, 299, 304, 305, 306, 307, 308, 313, 314, 317, 318, 319, 324, 325, 328, 330, 331, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 357, 358, 361, 363, 364, 365, 366, 367, 368, 374, 375, 377, 383, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 406, 407, 408, 409, 410, 412, 413, 414, 415, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 442, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "mode": [5, 24, 32, 33, 34, 40, 41, 57, 62, 64, 66, 71, 82, 83, 90, 98, 99, 101, 102, 105, 108, 110, 115, 116, 117, 118, 120, 124, 134, 142, 144, 149, 151, 157, 162, 166, 173, 175, 176, 177, 183, 186, 188, 189, 190, 192, 199, 206, 212, 213, 217, 221, 222, 224, 227, 233, 237, 244, 246, 249, 251, 252, 253, 254, 258, 266, 267, 269, 270, 271, 275, 282, 288, 289, 290, 292, 295, 296, 299, 301, 305, 306, 309, 311, 318, 319, 320, 322, 323, 327, 331, 332, 334, 335, 337, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 357, 359, 361, 375, 377, 381, 383, 385, 387, 396, 400, 402, 412, 414, 420, 421, 423, 424, 427, 435, 436, 445, 447, 455, 457, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "oper": [5, 7, 16, 22, 23, 24, 32, 34, 36, 40, 41, 46, 48, 52, 57, 61, 62, 64, 66, 70, 71, 73, 74, 75, 76, 82, 85, 88, 90, 91, 92, 98, 99, 101, 102, 103, 105, 106, 108, 110, 111, 116, 117, 120, 125, 132, 138, 139, 141, 142, 144, 145, 147, 151, 154, 160, 165, 166, 167, 168, 172, 174, 175, 176, 181, 182, 183, 185, 187, 190, 193, 194, 195, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 214, 215, 218, 219, 220, 222, 223, 224, 226, 229, 241, 244, 246, 250, 251, 254, 255, 256, 257, 258, 261, 266, 267, 269, 270, 271, 275, 276, 283, 290, 294, 295, 299, 306, 308, 309, 313, 314, 320, 322, 328, 330, 331, 333, 335, 337, 340, 342, 343, 347, 348, 352, 357, 358, 359, 360, 361, 362, 364, 368, 375, 377, 383, 384, 385, 389, 393, 394, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 415, 418, 421, 424, 426, 427, 428, 430, 431, 432, 433, 435, 441, 442, 445, 448, 454, 455, 460, 461, 462, 464, 465, 466, 467, 468, 474, 478, 479, 480, 482, 483], "usag": [5, 32, 33, 34, 61, 62, 65, 66, 70, 71, 74, 82, 83, 87, 93, 98, 99, 101, 102, 105, 108, 110, 114, 116, 134, 139, 140, 143, 149, 153, 168, 177, 181, 184, 186, 187, 193, 212, 217, 227, 229, 233, 242, 244, 247, 249, 250, 251, 254, 256, 259, 264, 267, 269, 272, 280, 283, 292, 293, 297, 299, 305, 307, 315, 319, 332, 344, 345, 352, 361, 366, 367, 374, 381, 385, 387, 390, 394, 397, 398, 399, 402, 406, 409, 410, 420, 423, 424, 426, 427, 448, 454, 455, 460, 463, 464, 465, 466, 467, 468, 471, 472, 474, 477, 478, 482], "non": [5, 7, 9, 11, 12, 18, 22, 23, 25, 28, 30, 33, 34, 35, 37, 38, 41, 44, 48, 56, 57, 58, 59, 61, 62, 66, 69, 71, 73, 74, 82, 83, 88, 90, 91, 92, 93, 95, 97, 98, 99, 105, 106, 113, 114, 118, 120, 124, 125, 131, 132, 138, 139, 143, 144, 149, 151, 155, 157, 165, 166, 168, 174, 175, 176, 177, 180, 182, 183, 185, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 222, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 241, 242, 244, 246, 247, 249, 250, 252, 253, 257, 258, 259, 261, 265, 266, 267, 268, 269, 273, 275, 276, 278, 283, 285, 286, 288, 292, 293, 294, 295, 296, 297, 299, 302, 305, 306, 308, 311, 314, 316, 317, 318, 319, 320, 322, 328, 331, 333, 334, 335, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 352, 354, 357, 358, 361, 363, 364, 365, 376, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 400, 402, 414, 418, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 439, 440, 442, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "alreadi": [5, 7, 9, 23, 24, 28, 30, 32, 33, 37, 41, 48, 52, 58, 61, 62, 64, 66, 71, 73, 74, 75, 82, 83, 90, 91, 92, 93, 96, 97, 99, 101, 102, 103, 104, 105, 108, 110, 114, 118, 120, 125, 128, 132, 139, 151, 162, 165, 166, 168, 175, 180, 182, 183, 188, 189, 195, 198, 199, 204, 207, 209, 210, 211, 212, 217, 222, 226, 231, 241, 242, 246, 247, 249, 250, 255, 258, 261, 267, 268, 270, 271, 276, 281, 282, 283, 284, 292, 293, 296, 299, 302, 305, 307, 308, 319, 320, 321, 328, 329, 332, 333, 337, 340, 341, 343, 344, 348, 352, 355, 357, 358, 361, 364, 368, 375, 378, 383, 387, 388, 389, 393, 396, 398, 399, 402, 404, 409, 410, 412, 416, 420, 426, 427, 429, 431, 435, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "locat": [5, 7, 32, 33, 34, 47, 56, 62, 66, 70, 75, 76, 82, 83, 90, 91, 92, 95, 98, 99, 102, 106, 110, 120, 141, 147, 157, 162, 166, 175, 176, 182, 183, 190, 192, 209, 210, 212, 224, 226, 242, 246, 250, 251, 252, 253, 254, 258, 266, 268, 269, 273, 276, 280, 283, 286, 293, 294, 297, 299, 300, 302, 311, 312, 313, 314, 319, 320, 332, 340, 341, 343, 353, 354, 361, 365, 374, 383, 385, 387, 393, 394, 398, 399, 406, 408, 409, 412, 413, 414, 421, 424, 425, 426, 427, 430, 431, 435, 452, 454, 460, 461, 463, 464, 465, 466, 467, 468, 471, 474, 476, 478, 480, 482], "interpret": [5, 7, 13, 16, 23, 24, 28, 30, 31, 33, 34, 38, 41, 44, 46, 48, 51, 56, 57, 61, 62, 64, 66, 70, 71, 73, 74, 76, 77, 83, 85, 88, 91, 93, 95, 98, 99, 100, 101, 102, 105, 108, 110, 112, 113, 118, 120, 125, 140, 145, 150, 151, 152, 162, 165, 166, 174, 175, 176, 181, 182, 183, 185, 189, 190, 191, 192, 196, 202, 206, 208, 209, 212, 218, 221, 224, 226, 234, 244, 246, 247, 249, 250, 251, 254, 258, 259, 261, 262, 263, 267, 268, 278, 281, 283, 292, 293, 294, 296, 297, 299, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 324, 328, 330, 331, 333, 334, 335, 337, 340, 341, 344, 345, 348, 352, 354, 360, 361, 364, 365, 368, 371, 374, 375, 380, 385, 387, 388, 394, 398, 399, 401, 402, 405, 409, 412, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 441, 447, 454, 455, 460, 461, 462, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "then": [5, 7, 15, 18, 23, 25, 28, 30, 32, 33, 34, 41, 42, 46, 48, 50, 55, 57, 59, 61, 62, 64, 70, 71, 73, 74, 76, 77, 82, 83, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 113, 114, 118, 120, 121, 125, 131, 132, 138, 139, 144, 151, 154, 156, 157, 160, 162, 165, 168, 175, 176, 180, 182, 183, 185, 188, 189, 190, 192, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 224, 225, 226, 227, 229, 230, 234, 235, 239, 242, 244, 246, 247, 249, 250, 251, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 283, 284, 288, 289, 292, 293, 294, 296, 297, 298, 299, 302, 307, 308, 309, 313, 314, 319, 322, 324, 325, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 356, 357, 359, 361, 363, 364, 365, 366, 368, 370, 371, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 404, 406, 407, 409, 412, 413, 414, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "larg": [5, 7, 18, 34, 53, 56, 57, 61, 66, 68, 70, 76, 82, 90, 91, 93, 96, 99, 101, 102, 103, 105, 106, 120, 136, 139, 157, 165, 175, 176, 182, 183, 185, 187, 189, 192, 211, 212, 221, 230, 246, 247, 258, 259, 262, 275, 283, 288, 292, 293, 295, 296, 299, 318, 333, 343, 344, 345, 346, 348, 357, 381, 387, 390, 401, 408, 409, 410, 412, 421, 424, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 480, 482], "enough": [5, 41, 44, 57, 61, 62, 82, 83, 88, 90, 91, 96, 98, 99, 101, 103, 157, 174, 175, 182, 189, 198, 200, 246, 250, 258, 261, 265, 270, 292, 293, 299, 308, 337, 339, 341, 344, 345, 348, 361, 363, 366, 368, 384, 388, 401, 461, 462, 463, 464, 469, 475, 482], "both": [5, 7, 15, 18, 22, 23, 24, 32, 34, 44, 48, 53, 61, 62, 70, 71, 73, 74, 75, 76, 82, 83, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 108, 111, 112, 118, 120, 125, 132, 136, 138, 139, 141, 143, 150, 151, 154, 157, 158, 160, 165, 166, 168, 174, 175, 176, 180, 182, 185, 189, 190, 192, 193, 194, 195, 199, 200, 201, 202, 204, 205, 206, 209, 212, 214, 215, 219, 224, 225, 229, 231, 232, 234, 237, 242, 243, 244, 246, 249, 250, 255, 257, 258, 259, 267, 268, 270, 275, 278, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 299, 302, 304, 305, 307, 308, 309, 319, 320, 322, 324, 329, 330, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 360, 361, 363, 365, 366, 368, 375, 377, 378, 379, 381, 383, 385, 387, 388, 389, 393, 394, 399, 401, 404, 406, 410, 412, 416, 418, 420, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 441, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "trail": [5, 18, 32, 33, 38, 62, 76, 88, 90, 93, 102, 143, 146, 156, 157, 158, 166, 176, 185, 189, 195, 204, 207, 220, 222, 224, 227, 238, 239, 246, 271, 294, 314, 337, 341, 344, 345, 348, 355, 365, 368, 380, 388, 394, 406, 409, 423, 426, 427, 429, 430, 434, 435, 441, 450, 454, 461, 465, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 482], "12": [5, 10, 20, 22, 27, 30, 32, 33, 55, 59, 61, 62, 66, 69, 76, 78, 83, 87, 92, 93, 98, 99, 100, 102, 104, 105, 108, 118, 121, 125, 131, 138, 139, 143, 146, 150, 166, 172, 175, 182, 185, 190, 192, 208, 210, 214, 220, 224, 225, 233, 234, 235, 240, 249, 251, 253, 259, 261, 262, 267, 268, 269, 283, 293, 296, 304, 318, 319, 321, 322, 324, 331, 332, 337, 340, 341, 343, 344, 345, 357, 359, 361, 363, 364, 365, 368, 377, 380, 381, 383, 384, 385, 387, 398, 400, 421, 424, 427, 429, 431, 434, 440, 441, 443, 445, 447, 448, 450, 454, 455, 458, 460, 463, 464, 465, 466, 467, 468, 470, 471, 474, 478, 479, 481, 482, 483], "remov": [5, 10, 22, 24, 26, 28, 30, 33, 34, 39, 44, 48, 53, 55, 61, 62, 64, 66, 71, 73, 74, 78, 82, 88, 91, 92, 93, 98, 99, 102, 104, 106, 108, 110, 116, 118, 119, 120, 121, 125, 131, 134, 136, 138, 140, 142, 143, 144, 149, 151, 155, 156, 157, 159, 160, 162, 165, 166, 168, 174, 176, 178, 181, 182, 185, 187, 190, 192, 193, 195, 199, 202, 204, 206, 207, 209, 210, 211, 212, 217, 222, 230, 233, 234, 235, 239, 241, 242, 246, 247, 250, 251, 252, 255, 259, 261, 262, 266, 267, 269, 271, 273, 275, 281, 283, 285, 292, 293, 296, 297, 299, 304, 305, 308, 313, 314, 319, 320, 325, 328, 329, 331, 332, 333, 334, 340, 341, 344, 345, 352, 358, 359, 361, 363, 375, 376, 381, 383, 384, 385, 387, 388, 393, 394, 399, 401, 404, 406, 409, 411, 412, 420, 421, 424, 425, 427, 429, 431, 435, 439, 441, 448, 450, 451, 454, 455, 457, 461, 462, 463, 464, 465, 474, 475, 482, 483], "becaus": [5, 23, 32, 33, 34, 41, 44, 46, 50, 52, 55, 56, 58, 61, 69, 70, 71, 73, 74, 76, 82, 83, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 118, 120, 125, 128, 132, 134, 135, 136, 138, 147, 149, 150, 151, 156, 157, 160, 162, 165, 166, 168, 175, 180, 182, 183, 185, 187, 189, 192, 195, 200, 202, 204, 207, 210, 211, 212, 213, 214, 224, 225, 226, 229, 234, 235, 242, 243, 244, 246, 250, 251, 253, 255, 258, 261, 267, 268, 269, 270, 271, 275, 281, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 318, 319, 328, 330, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 357, 358, 359, 361, 364, 365, 366, 368, 374, 383, 385, 387, 388, 389, 394, 398, 399, 400, 401, 405, 406, 409, 412, 414, 418, 423, 424, 426, 427, 428, 429, 430, 431, 434, 435, 448, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "legaci": [5, 56, 66, 73, 108, 114, 143, 162, 163, 171, 193, 194, 195, 197, 201, 204, 205, 208, 216, 222, 234, 247, 250, 255, 256, 270, 288, 292, 293, 305, 332, 335, 341, 347, 352, 361, 387, 421, 431, 434, 454, 460, 468, 472, 473, 474, 475, 476, 478, 480, 481, 482], "py_unicod": [5, 62, 119, 471, 472, 473, 475, 481, 482], "represent": [5, 7, 9, 15, 18, 23, 25, 38, 40, 48, 56, 57, 61, 62, 66, 73, 74, 83, 88, 98, 101, 103, 105, 118, 119, 120, 146, 154, 157, 159, 166, 175, 176, 177, 181, 182, 185, 190, 195, 196, 200, 203, 204, 206, 211, 212, 224, 235, 240, 241, 243, 244, 247, 250, 259, 262, 266, 267, 271, 272, 281, 283, 290, 293, 296, 299, 307, 314, 321, 330, 337, 340, 344, 345, 346, 347, 352, 361, 365, 371, 376, 380, 383, 385, 387, 388, 407, 409, 412, 425, 427, 431, 444, 461, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483], "nonneg": [5, 149, 185, 270, 275, 337, 344, 383, 429, 435], "tini": [5, 82, 83, 180, 461, 467, 468, 482], "overflow": [5, 23, 34, 38, 41, 66, 141, 175, 182, 185, 187, 211, 213, 275, 283, 290, 352, 427, 455, 465, 467, 468, 478, 479, 482], "short": [5, 7, 40, 41, 56, 61, 66, 71, 73, 82, 88, 92, 93, 97, 99, 102, 103, 112, 118, 119, 143, 158, 175, 176, 192, 227, 244, 258, 259, 271, 283, 289, 292, 293, 300, 331, 344, 347, 348, 352, 361, 365, 366, 368, 383, 385, 387, 410, 412, 420, 433, 441, 454, 461, 463, 464, 466, 468, 471, 472, 474, 475, 476, 478, 479, 481, 482], "repres": [5, 7, 8, 9, 11, 13, 15, 17, 18, 20, 22, 25, 27, 32, 34, 35, 37, 38, 41, 44, 46, 53, 56, 58, 61, 62, 64, 66, 71, 75, 76, 82, 83, 86, 88, 90, 92, 93, 96, 99, 101, 102, 105, 106, 108, 118, 120, 125, 132, 138, 144, 146, 150, 151, 153, 154, 157, 165, 166, 175, 176, 182, 185, 190, 193, 196, 198, 200, 202, 205, 207, 208, 212, 214, 220, 222, 224, 231, 241, 242, 243, 247, 250, 251, 252, 253, 255, 258, 259, 262, 266, 267, 268, 270, 271, 272, 275, 276, 281, 282, 283, 285, 286, 288, 292, 293, 294, 296, 299, 304, 305, 306, 307, 308, 314, 319, 321, 322, 325, 328, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 357, 358, 361, 364, 365, 368, 371, 374, 375, 376, 380, 383, 385, 387, 388, 389, 396, 397, 399, 401, 404, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 423, 424, 426, 427, 429, 431, 434, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "float": [5, 16, 18, 40, 41, 46, 56, 61, 66, 74, 76, 82, 83, 85, 88, 91, 92, 101, 110, 113, 118, 119, 125, 138, 141, 154, 159, 161, 165, 166, 174, 175, 180, 182, 189, 192, 208, 212, 220, 224, 225, 226, 232, 247, 250, 254, 261, 262, 266, 271, 274, 275, 283, 284, 289, 290, 292, 293, 294, 299, 304, 308, 318, 319, 322, 328, 333, 337, 340, 341, 343, 345, 347, 352, 364, 365, 366, 375, 377, 378, 383, 385, 386, 407, 418, 426, 427, 429, 439, 441, 443, 448, 449, 450, 451, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "doubl": [5, 15, 18, 25, 34, 38, 56, 61, 62, 73, 74, 76, 83, 86, 88, 99, 102, 119, 157, 159, 174, 175, 181, 188, 192, 208, 234, 246, 247, 262, 269, 275, 283, 293, 296, 297, 319, 331, 344, 345, 347, 348, 358, 361, 388, 398, 407, 416, 418, 426, 427, 429, 430, 434, 441, 443, 448, 460, 464, 465, 466, 467, 472, 474, 475, 478, 479, 480, 482], "py_complex": [5, 15, 71, 88], "program": [5, 15, 16, 30, 32, 33, 41, 44, 64, 66, 70, 71, 75, 76, 84, 87, 91, 92, 93, 94, 98, 99, 101, 102, 106, 108, 110, 112, 116, 118, 120, 124, 125, 132, 136, 139, 140, 146, 150, 151, 155, 156, 157, 158, 159, 163, 165, 166, 167, 168, 174, 175, 182, 185, 186, 192, 199, 200, 202, 207, 212, 215, 221, 222, 223, 224, 225, 226, 227, 233, 245, 246, 247, 250, 254, 255, 263, 269, 271, 272, 276, 282, 286, 292, 293, 294, 296, 297, 299, 306, 307, 308, 309, 311, 313, 314, 319, 322, 328, 330, 333, 337, 338, 340, 341, 344, 347, 348, 352, 353, 361, 364, 366, 367, 374, 375, 379, 380, 383, 387, 393, 394, 397, 399, 401, 402, 404, 406, 409, 410, 418, 420, 421, 425, 426, 427, 429, 432, 433, 434, 435, 439, 451, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 482], "thus": [5, 7, 10, 32, 34, 37, 41, 52, 71, 76, 82, 83, 88, 92, 97, 98, 99, 101, 108, 115, 118, 120, 139, 140, 166, 168, 175, 176, 192, 200, 203, 204, 207, 212, 224, 227, 234, 242, 250, 251, 259, 262, 266, 267, 268, 269, 275, 283, 292, 293, 299, 313, 319, 327, 331, 332, 334, 337, 340, 341, 344, 348, 352, 361, 365, 383, 385, 387, 393, 394, 398, 404, 406, 420, 424, 426, 429, 431, 434, 435, 454, 460, 461, 469, 474, 475, 476, 477, 478, 480, 482], "receiv": [5, 16, 23, 32, 34, 44, 48, 65, 66, 70, 71, 74, 82, 88, 93, 98, 101, 103, 106, 112, 113, 118, 121, 125, 131, 132, 135, 137, 139, 151, 155, 157, 166, 175, 189, 212, 222, 224, 234, 239, 241, 242, 243, 244, 246, 247, 259, 267, 268, 269, 275, 283, 288, 295, 299, 305, 309, 314, 322, 329, 332, 333, 335, 337, 338, 341, 343, 348, 358, 364, 375, 380, 385, 387, 394, 399, 401, 406, 409, 410, 412, 413, 414, 419, 426, 428, 429, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "actual": [5, 7, 13, 15, 23, 32, 34, 38, 48, 53, 56, 59, 61, 64, 66, 71, 73, 74, 75, 76, 82, 83, 87, 88, 90, 91, 92, 96, 98, 99, 101, 102, 103, 105, 108, 115, 120, 125, 138, 139, 149, 151, 157, 159, 166, 168, 172, 175, 176, 177, 180, 190, 192, 196, 197, 199, 202, 205, 206, 208, 210, 212, 222, 224, 226, 229, 230, 233, 244, 247, 250, 251, 252, 253, 255, 258, 261, 265, 267, 268, 269, 270, 271, 278, 281, 283, 292, 293, 295, 296, 297, 305, 308, 320, 324, 325, 330, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 357, 364, 367, 368, 371, 380, 385, 387, 388, 389, 394, 398, 400, 401, 404, 406, 409, 413, 421, 423, 425, 426, 427, 428, 431, 433, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "increas": [5, 34, 66, 74, 87, 88, 92, 96, 98, 105, 118, 157, 189, 190, 210, 246, 255, 259, 267, 270, 290, 293, 328, 340, 341, 344, 352, 366, 375, 381, 383, 387, 399, 411, 413, 423, 427, 434, 455, 461, 463, 464, 467, 468, 472, 475, 478, 479, 480, 481, 482], "typeobject": [5, 91, 463, 482], "similar": [5, 7, 8, 9, 13, 22, 23, 28, 30, 32, 37, 44, 48, 50, 55, 56, 57, 58, 61, 62, 64, 65, 70, 71, 73, 76, 77, 82, 83, 86, 87, 88, 91, 92, 93, 97, 98, 99, 101, 102, 105, 106, 108, 110, 114, 118, 125, 132, 136, 138, 143, 146, 150, 151, 154, 156, 157, 162, 165, 166, 168, 174, 175, 176, 179, 180, 182, 183, 185, 187, 189, 192, 194, 195, 204, 206, 210, 212, 219, 224, 225, 227, 229, 232, 234, 235, 239, 241, 242, 244, 246, 250, 251, 252, 255, 258, 259, 261, 266, 268, 270, 271, 276, 282, 283, 289, 292, 293, 296, 297, 299, 301, 302, 305, 308, 310, 313, 319, 321, 331, 332, 335, 337, 338, 339, 340, 341, 344, 345, 347, 348, 352, 354, 357, 363, 364, 365, 366, 368, 374, 380, 381, 385, 387, 389, 393, 401, 406, 407, 408, 409, 410, 412, 413, 416, 418, 421, 423, 424, 426, 427, 429, 431, 434, 435, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "take": [5, 9, 22, 23, 32, 34, 48, 56, 58, 61, 62, 64, 71, 73, 74, 76, 77, 82, 83, 88, 90, 91, 92, 93, 98, 99, 101, 102, 103, 104, 105, 118, 120, 121, 125, 134, 138, 139, 141, 144, 150, 151, 152, 157, 166, 168, 174, 175, 176, 177, 180, 185, 186, 189, 190, 192, 193, 197, 200, 201, 202, 205, 206, 207, 208, 214, 217, 222, 224, 225, 226, 229, 231, 234, 242, 243, 244, 246, 248, 250, 251, 258, 261, 262, 266, 267, 268, 270, 271, 275, 276, 283, 288, 292, 293, 296, 299, 300, 307, 308, 319, 324, 325, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 357, 360, 361, 363, 366, 368, 374, 375, 381, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 406, 407, 409, 410, 411, 412, 414, 416, 418, 420, 421, 423, 426, 427, 429, 431, 435, 440, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "anyth": [5, 34, 40, 61, 66, 70, 71, 74, 76, 83, 90, 93, 98, 99, 102, 103, 105, 108, 112, 118, 136, 139, 151, 175, 176, 177, 180, 182, 185, 192, 195, 202, 210, 247, 250, 257, 258, 267, 269, 283, 292, 297, 301, 310, 319, 323, 330, 334, 335, 341, 345, 348, 352, 361, 364, 368, 375, 385, 388, 400, 404, 406, 412, 420, 426, 427, 429, 431, 440, 460, 462, 463, 466, 467, 471, 475, 476, 480, 482], "arbitrari": [5, 23, 32, 34, 36, 38, 44, 47, 50, 53, 57, 61, 66, 70, 72, 74, 82, 83, 86, 88, 92, 93, 99, 102, 103, 105, 106, 108, 113, 118, 121, 132, 143, 151, 157, 158, 168, 174, 175, 178, 182, 185, 190, 202, 207, 224, 229, 230, 232, 233, 239, 244, 247, 249, 250, 251, 255, 258, 259, 262, 267, 268, 271, 275, 283, 286, 287, 290, 293, 294, 295, 296, 297, 299, 307, 310, 313, 319, 322, 328, 330, 333, 334, 337, 338, 339, 343, 344, 345, 350, 353, 361, 364, 365, 368, 383, 385, 387, 388, 389, 396, 409, 412, 418, 419, 420, 427, 439, 444, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482], "turn": [5, 23, 32, 33, 34, 56, 61, 71, 83, 86, 87, 88, 90, 91, 93, 98, 101, 102, 105, 106, 108, 110, 112, 118, 120, 127, 155, 157, 166, 175, 176, 189, 192, 193, 207, 208, 224, 242, 244, 246, 255, 266, 267, 268, 283, 292, 296, 298, 301, 311, 316, 320, 328, 333, 335, 337, 344, 352, 360, 361, 364, 366, 368, 383, 385, 387, 389, 394, 399, 419, 423, 426, 431, 433, 434, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 478, 482], "status": [5, 32, 33, 48, 57, 61, 66, 71, 82, 90, 92, 98, 99, 106, 112, 113, 114, 118, 144, 176, 195, 204, 206, 210, 212, 213, 241, 244, 246, 247, 256, 271, 283, 288, 292, 293, 305, 307, 309, 311, 334, 338, 340, 341, 348, 352, 375, 394, 406, 440, 447, 461, 465, 466, 468, 469, 471, 474, 476, 477, 478, 479, 481, 482], "where": [5, 23, 24, 32, 33, 34, 37, 39, 41, 44, 46, 48, 52, 54, 55, 56, 57, 59, 61, 62, 64, 66, 71, 73, 74, 75, 76, 77, 82, 83, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 105, 106, 108, 110, 111, 112, 118, 120, 125, 132, 138, 139, 141, 144, 150, 151, 152, 153, 154, 157, 162, 166, 168, 174, 175, 176, 180, 182, 185, 186, 187, 189, 190, 192, 195, 198, 200, 201, 202, 204, 207, 209, 210, 212, 214, 220, 222, 224, 225, 229, 231, 234, 235, 239, 241, 242, 244, 246, 247, 249, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 300, 302, 305, 306, 308, 310, 312, 313, 314, 317, 319, 324, 328, 331, 332, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 358, 360, 361, 364, 365, 366, 368, 370, 375, 377, 379, 380, 381, 383, 384, 385, 387, 389, 393, 394, 397, 398, 399, 401, 406, 409, 410, 411, 412, 414, 415, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 447, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "success": [5, 7, 9, 11, 12, 14, 17, 18, 22, 23, 24, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 47, 48, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 66, 71, 73, 74, 75, 77, 78, 83, 86, 88, 90, 93, 95, 98, 102, 103, 106, 112, 113, 120, 125, 131, 132, 138, 139, 158, 162, 163, 165, 166, 168, 175, 176, 190, 192, 208, 214, 222, 224, 226, 241, 244, 247, 249, 250, 261, 266, 269, 278, 283, 288, 292, 293, 295, 296, 299, 300, 305, 314, 318, 319, 332, 335, 337, 340, 341, 343, 344, 347, 348, 352, 364, 374, 375, 387, 394, 406, 409, 422, 426, 427, 431, 435, 452, 455, 461, 464, 465, 468, 471, 474, 476, 477, 478, 480, 482], "has": [5, 7, 8, 9, 11, 15, 16, 17, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 50, 54, 56, 57, 59, 61, 62, 69, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 125, 127, 128, 131, 132, 133, 136, 138, 139, 140, 141, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 165, 166, 168, 169, 174, 175, 176, 177, 180, 182, 183, 185, 187, 189, 190, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 241, 242, 243, 244, 246, 247, 249, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 281, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 304, 305, 307, 308, 311, 312, 313, 314, 318, 319, 320, 322, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 412, 414, 415, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 434, 435, 436, 442, 445, 448, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "leav": [5, 23, 30, 34, 55, 58, 62, 64, 73, 74, 88, 90, 93, 99, 105, 118, 125, 137, 140, 166, 168, 176, 183, 185, 187, 190, 192, 195, 204, 210, 212, 225, 234, 242, 246, 249, 250, 269, 271, 275, 283, 284, 292, 293, 317, 340, 341, 361, 364, 368, 383, 387, 404, 420, 426, 431, 433, 435, 441, 455, 461, 463, 464, 465, 466, 468, 472, 475, 478, 482], "unmodifi": [5, 7, 68, 88, 113, 207, 208, 307, 344, 364, 393, 416, 482], "py_cleanup_support": 5, "eventu": [5, 32, 34, 71, 74, 77, 82, 88, 102, 103, 132, 138, 192, 231, 241, 246, 283, 309, 366, 394, 410, 418, 431, 434, 462, 463, 465, 466, 467, 468, 469, 472, 476, 478, 482], "give": [5, 7, 14, 23, 30, 34, 41, 47, 61, 62, 70, 71, 73, 75, 77, 82, 83, 87, 88, 90, 91, 92, 93, 97, 101, 102, 103, 104, 105, 115, 118, 120, 141, 151, 153, 154, 155, 157, 175, 176, 180, 182, 185, 189, 190, 192, 207, 212, 215, 222, 224, 227, 229, 250, 258, 261, 268, 269, 275, 276, 278, 279, 283, 286, 287, 292, 293, 294, 296, 297, 299, 307, 314, 319, 332, 333, 338, 341, 343, 344, 345, 348, 352, 364, 365, 366, 368, 375, 383, 385, 387, 389, 393, 398, 402, 404, 406, 408, 409, 410, 414, 421, 426, 427, 433, 434, 436, 443, 454, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 480, 481, 482], "chanc": [5, 34, 57, 73, 98, 99, 101, 103, 138, 140, 182, 289, 364, 466, 473, 480, 482], "had": [5, 22, 32, 41, 70, 74, 83, 87, 88, 93, 99, 103, 110, 118, 120, 140, 155, 157, 168, 169, 176, 182, 185, 190, 198, 212, 235, 242, 255, 283, 293, 297, 314, 328, 337, 341, 343, 345, 368, 379, 381, 385, 387, 388, 393, 409, 431, 435, 440, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "origin": [5, 7, 9, 14, 32, 33, 41, 42, 58, 60, 61, 65, 66, 68, 71, 83, 88, 90, 92, 98, 102, 104, 105, 110, 118, 120, 125, 139, 141, 144, 149, 152, 154, 157, 165, 166, 168, 172, 174, 175, 176, 180, 185, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 207, 209, 212, 224, 225, 229, 233, 242, 246, 249, 250, 255, 258, 261, 262, 266, 267, 269, 271, 275, 278, 280, 283, 284, 292, 293, 296, 297, 299, 308, 312, 319, 324, 328, 331, 332, 337, 340, 341, 343, 344, 345, 348, 352, 357, 361, 364, 365, 368, 380, 381, 383, 385, 387, 388, 389, 393, 394, 398, 399, 401, 406, 407, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 435, 439, 440, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482], "bool": [5, 30, 66, 88, 90, 92, 118, 125, 138, 166, 167, 175, 180, 182, 210, 224, 225, 254, 261, 262, 267, 284, 289, 291, 340, 344, 347, 378, 381, 385, 387, 409, 418, 426, 427, 429, 439, 449, 464, 467, 471, 479, 480, 482], "test": [5, 23, 34, 45, 55, 56, 59, 66, 71, 76, 77, 82, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 108, 112, 114, 118, 120, 124, 154, 155, 160, 165, 169, 175, 176, 177, 180, 185, 186, 188, 190, 199, 212, 219, 224, 225, 227, 235, 239, 244, 246, 247, 248, 249, 250, 251, 254, 255, 259, 261, 262, 264, 266, 269, 272, 275, 283, 293, 296, 297, 305, 309, 315, 319, 335, 336, 340, 342, 343, 344, 350, 352, 357, 363, 364, 366, 374, 375, 381, 385, 388, 394, 401, 406, 412, 418, 421, 424, 425, 426, 427, 433, 439, 441, 442, 445, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "truth": [5, 66, 87, 93, 103, 175, 223, 291, 344, 347, 427, 429, 464, 482], "boolean": [5, 16, 34, 66, 83, 88, 98, 104, 118, 120, 137, 166, 167, 175, 176, 182, 190, 192, 224, 234, 235, 242, 244, 247, 254, 262, 268, 274, 283, 291, 293, 295, 304, 319, 320, 337, 338, 341, 350, 364, 368, 375, 378, 383, 385, 388, 394, 398, 401, 409, 410, 418, 423, 426, 427, 432, 462, 465, 466, 467, 468, 469, 472, 474, 476, 477, 478, 480, 481, 482, 483], "redic": 5, "equival": [5, 7, 9, 13, 18, 22, 23, 24, 32, 34, 37, 39, 41, 44, 46, 48, 52, 53, 56, 58, 59, 60, 61, 62, 66, 71, 74, 76, 88, 92, 93, 95, 97, 101, 102, 108, 110, 113, 114, 115, 118, 120, 132, 136, 138, 149, 154, 157, 162, 165, 166, 168, 175, 176, 177, 180, 182, 185, 189, 190, 195, 203, 204, 206, 212, 224, 225, 227, 231, 233, 234, 235, 238, 239, 242, 243, 244, 246, 250, 251, 255, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 283, 286, 292, 293, 294, 296, 299, 300, 301, 302, 306, 308, 318, 319, 321, 324, 329, 337, 338, 343, 344, 345, 348, 352, 354, 357, 361, 364, 365, 368, 378, 383, 384, 385, 386, 387, 393, 400, 402, 404, 409, 421, 423, 426, 427, 429, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482], "true": [5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 20, 22, 23, 25, 27, 29, 32, 33, 34, 36, 37, 38, 42, 43, 44, 48, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 71, 74, 76, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 108, 110, 112, 113, 114, 118, 120, 121, 124, 125, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 143, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 162, 165, 166, 167, 168, 169, 172, 174, 175, 176, 178, 180, 182, 185, 187, 188, 189, 190, 192, 195, 197, 199, 200, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 217, 219, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 237, 239, 240, 241, 242, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 275, 276, 278, 282, 283, 284, 288, 291, 292, 293, 294, 295, 296, 297, 299, 301, 303, 304, 307, 308, 311, 312, 314, 316, 317, 319, 320, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 348, 351, 352, 354, 356, 357, 359, 361, 363, 364, 365, 368, 371, 372, 375, 376, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 395, 396, 398, 399, 401, 402, 404, 406, 409, 410, 411, 412, 414, 416, 418, 419, 420, 421, 422, 424, 426, 427, 429, 430, 434, 435, 439, 440, 441, 442, 443, 445, 447, 448, 449, 451, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "fals": [5, 6, 7, 22, 32, 33, 34, 46, 48, 56, 61, 62, 64, 66, 71, 82, 83, 87, 88, 90, 92, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 112, 113, 114, 118, 120, 121, 125, 128, 131, 132, 133, 134, 135, 137, 138, 139, 143, 144, 146, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 162, 165, 166, 167, 168, 169, 174, 175, 176, 178, 180, 182, 185, 187, 189, 190, 192, 195, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 224, 225, 226, 227, 229, 230, 231, 234, 235, 240, 241, 242, 244, 247, 249, 250, 252, 253, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 283, 284, 288, 291, 292, 293, 294, 295, 296, 297, 299, 304, 307, 311, 312, 314, 316, 317, 320, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 357, 359, 361, 363, 364, 365, 368, 371, 372, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 395, 396, 398, 399, 401, 402, 406, 412, 414, 416, 418, 419, 420, 421, 424, 426, 427, 429, 430, 434, 435, 439, 440, 441, 442, 443, 448, 449, 451, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "express": [5, 22, 39, 46, 48, 52, 58, 64, 66, 71, 83, 85, 91, 99, 112, 118, 138, 144, 154, 158, 160, 162, 166, 182, 185, 189, 190, 192, 212, 219, 224, 229, 230, 246, 254, 255, 259, 261, 264, 266, 268, 275, 283, 293, 297, 308, 323, 333, 337, 341, 344, 345, 347, 352, 358, 361, 362, 365, 366, 368, 377, 379, 384, 385, 386, 387, 389, 397, 399, 401, 412, 418, 425, 426, 427, 428, 430, 431, 432, 434, 438, 439, 441, 445, 446, 448, 450, 454, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "see": [5, 7, 11, 14, 18, 23, 26, 30, 32, 33, 34, 39, 41, 44, 46, 55, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 117, 118, 121, 122, 124, 125, 131, 132, 136, 138, 139, 141, 143, 144, 145, 150, 151, 155, 157, 160, 162, 165, 166, 167, 168, 171, 172, 174, 175, 176, 180, 182, 185, 187, 189, 190, 192, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 238, 241, 242, 244, 246, 247, 249, 250, 251, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 275, 278, 279, 281, 283, 287, 288, 292, 293, 294, 295, 297, 299, 300, 301, 302, 304, 305, 308, 310, 311, 313, 314, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 447, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "how": [5, 7, 11, 32, 34, 41, 56, 60, 61, 62, 66, 69, 70, 71, 73, 74, 75, 84, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 110, 111, 112, 115, 118, 120, 121, 125, 131, 132, 136, 138, 140, 141, 144, 147, 149, 151, 155, 157, 162, 166, 171, 174, 175, 180, 182, 183, 185, 186, 188, 189, 191, 193, 194, 199, 200, 201, 206, 210, 212, 217, 221, 222, 224, 225, 226, 229, 230, 233, 234, 241, 242, 243, 246, 250, 251, 253, 255, 258, 259, 261, 262, 267, 268, 269, 272, 275, 278, 283, 284, 288, 293, 294, 296, 298, 299, 308, 311, 318, 319, 320, 321, 322, 331, 332, 333, 337, 338, 341, 344, 345, 346, 348, 350, 352, 357, 359, 363, 364, 365, 366, 367, 375, 379, 381, 385, 387, 388, 389, 393, 394, 401, 406, 407, 409, 418, 420, 424, 426, 427, 428, 429, 431, 434, 435, 436, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "item": [5, 7, 14, 22, 23, 30, 32, 33, 34, 35, 36, 37, 39, 52, 55, 58, 61, 66, 71, 74, 77, 82, 85, 88, 92, 93, 99, 101, 104, 110, 118, 120, 133, 139, 141, 147, 150, 151, 156, 157, 159, 160, 163, 166, 169, 170, 175, 180, 181, 183, 188, 189, 190, 192, 193, 195, 196, 199, 204, 208, 210, 212, 216, 222, 224, 225, 226, 231, 232, 233, 234, 235, 243, 246, 247, 249, 250, 252, 253, 261, 262, 268, 269, 271, 273, 275, 276, 279, 283, 285, 288, 291, 293, 299, 302, 306, 307, 308, 310, 313, 316, 319, 320, 324, 332, 334, 337, 339, 340, 341, 344, 345, 347, 348, 352, 353, 358, 360, 361, 364, 367, 368, 374, 377, 380, 383, 384, 385, 388, 393, 401, 404, 406, 407, 408, 409, 411, 412, 415, 418, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 439, 440, 441, 445, 448, 449, 451, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 482], "individu": [5, 41, 44, 56, 59, 61, 66, 90, 92, 96, 97, 98, 99, 102, 108, 110, 115, 118, 157, 174, 176, 183, 185, 189, 190, 192, 195, 197, 202, 205, 218, 229, 247, 248, 261, 267, 271, 281, 282, 283, 293, 294, 313, 319, 332, 336, 344, 345, 355, 358, 361, 363, 365, 366, 368, 375, 383, 385, 387, 388, 389, 393, 397, 399, 407, 412, 418, 419, 421, 425, 427, 431, 433, 435, 439, 454, 462, 465, 466, 468, 470, 471, 475, 476, 481, 482], "nest": [5, 13, 66, 71, 83, 85, 92, 93, 98, 102, 111, 138, 159, 168, 175, 180, 185, 186, 189, 190, 192, 198, 212, 225, 255, 261, 262, 267, 271, 283, 297, 302, 307, 312, 314, 319, 344, 345, 351, 352, 364, 368, 375, 385, 387, 408, 412, 414, 426, 427, 429, 434, 435, 440, 441, 454, 461, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 482, 483], "possibl": [5, 7, 18, 22, 23, 30, 32, 33, 34, 41, 46, 48, 55, 56, 59, 61, 62, 64, 69, 70, 71, 74, 76, 77, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 108, 110, 112, 113, 114, 115, 118, 120, 121, 125, 131, 140, 141, 147, 149, 151, 157, 158, 162, 165, 166, 168, 169, 172, 174, 175, 176, 179, 180, 182, 183, 185, 189, 190, 192, 193, 195, 196, 199, 200, 201, 202, 204, 205, 207, 209, 210, 212, 217, 224, 225, 230, 231, 234, 235, 241, 244, 246, 250, 255, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 288, 289, 292, 293, 294, 295, 296, 297, 299, 302, 304, 308, 309, 311, 312, 314, 319, 320, 328, 331, 332, 333, 337, 340, 341, 343, 344, 345, 346, 348, 351, 352, 355, 356, 357, 358, 361, 363, 364, 365, 366, 368, 374, 375, 381, 383, 384, 385, 387, 388, 389, 393, 394, 397, 399, 401, 402, 404, 405, 406, 412, 414, 415, 418, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 447, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "exceed": [5, 57, 125, 138, 165, 166, 185, 211, 212, 224, 226, 258, 269, 284, 293, 299, 307, 322, 344, 363, 364, 409, 421, 423, 464, 465, 467, 468, 472, 478, 479], "platform": [5, 9, 18, 25, 31, 32, 33, 34, 57, 59, 62, 66, 68, 70, 71, 73, 74, 82, 83, 88, 99, 103, 107, 113, 116, 121, 122, 125, 132, 139, 150, 151, 154, 157, 162, 165, 172, 174, 175, 182, 185, 188, 192, 207, 209, 211, 212, 214, 218, 222, 224, 228, 232, 234, 241, 244, 246, 247, 249, 250, 251, 254, 256, 258, 266, 269, 271, 275, 278, 282, 283, 284, 287, 288, 292, 293, 294, 296, 305, 307, 308, 309, 310, 315, 322, 323, 326, 328, 329, 333, 335, 337, 338, 339, 340, 341, 342, 347, 348, 352, 353, 354, 355, 358, 361, 364, 365, 366, 367, 368, 377, 387, 394, 397, 398, 402, 405, 406, 418, 419, 424, 429, 434, 449, 454, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "long_max": [5, 38, 482], "proper": [5, 23, 32, 33, 34, 44, 45, 48, 57, 61, 66, 70, 71, 73, 74, 76, 83, 88, 97, 99, 102, 103, 108, 112, 125, 136, 154, 168, 169, 176, 189, 190, 201, 202, 206, 208, 210, 212, 229, 234, 244, 246, 250, 266, 283, 284, 293, 308, 314, 332, 335, 337, 341, 344, 347, 348, 352, 357, 361, 364, 368, 375, 387, 388, 393, 394, 409, 412, 414, 423, 426, 427, 429, 460, 461, 462, 463, 464, 468, 469, 475, 476, 477, 478, 479, 480, 482], "rang": [5, 7, 20, 23, 25, 34, 38, 57, 62, 66, 68, 70, 71, 74, 82, 83, 85, 88, 90, 91, 92, 93, 96, 99, 100, 102, 105, 106, 110, 118, 125, 133, 137, 138, 141, 144, 147, 149, 150, 154, 157, 165, 166, 168, 175, 176, 177, 182, 185, 189, 190, 192, 210, 211, 212, 222, 224, 225, 230, 234, 235, 240, 243, 247, 254, 255, 259, 261, 262, 278, 283, 284, 288, 293, 295, 297, 299, 304, 305, 308, 315, 316, 318, 319, 322, 326, 333, 335, 337, 340, 341, 343, 345, 347, 352, 364, 365, 366, 368, 374, 377, 380, 381, 383, 385, 387, 393, 405, 409, 418, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 439, 441, 442, 444, 445, 448, 449, 450, 451, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "most": [5, 7, 9, 15, 23, 24, 25, 30, 32, 33, 34, 38, 41, 44, 55, 56, 57, 59, 61, 62, 64, 66, 68, 70, 71, 73, 74, 75, 76, 77, 82, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 118, 124, 125, 132, 138, 139, 141, 143, 144, 146, 149, 151, 153, 154, 157, 159, 165, 166, 168, 174, 175, 176, 182, 183, 185, 187, 189, 190, 192, 193, 195, 196, 197, 199, 200, 201, 202, 204, 206, 209, 210, 212, 213, 214, 220, 222, 224, 225, 226, 229, 232, 233, 234, 235, 239, 242, 246, 247, 249, 250, 251, 254, 255, 256, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 275, 278, 283, 284, 289, 292, 293, 294, 295, 296, 297, 299, 302, 305, 307, 308, 310, 314, 319, 321, 328, 329, 330, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 357, 361, 363, 364, 365, 366, 368, 373, 374, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 399, 400, 401, 402, 405, 406, 407, 409, 410, 412, 413, 414, 415, 420, 421, 423, 424, 426, 427, 429, 431, 433, 435, 439, 440, 441, 442, 445, 448, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "signific": [5, 34, 40, 66, 83, 93, 96, 99, 102, 103, 105, 125, 131, 132, 157, 165, 168, 177, 185, 192, 196, 258, 259, 261, 269, 275, 284, 293, 299, 308, 341, 344, 345, 352, 364, 387, 397, 410, 427, 431, 433, 434, 443, 454, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 475, 477, 478, 479, 480, 481, 482], "bit": [5, 7, 25, 34, 40, 41, 56, 59, 61, 62, 64, 66, 71, 73, 74, 76, 83, 84, 87, 88, 90, 91, 92, 93, 96, 99, 102, 103, 105, 115, 116, 132, 141, 146, 152, 153, 154, 157, 166, 168, 176, 177, 185, 190, 192, 194, 199, 200, 201, 204, 207, 210, 214, 215, 224, 226, 229, 234, 242, 243, 259, 266, 270, 275, 287, 289, 292, 293, 295, 299, 303, 306, 315, 318, 319, 322, 328, 332, 336, 337, 341, 342, 344, 347, 348, 349, 352, 355, 357, 359, 365, 366, 368, 375, 389, 396, 397, 403, 409, 420, 421, 423, 426, 427, 429, 434, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "silent": [5, 48, 54, 57, 64, 98, 99, 105, 113, 132, 140, 168, 185, 212, 217, 226, 247, 249, 267, 269, 271, 278, 293, 295, 296, 297, 307, 308, 332, 334, 340, 345, 348, 364, 388, 393, 424, 435, 454, 460, 461, 465, 466, 468, 469, 471, 473, 474, 476, 477, 479, 480, 481, 482], "truncat": [5, 18, 57, 62, 66, 82, 83, 116, 141, 142, 149, 176, 182, 185, 212, 224, 233, 247, 258, 261, 270, 293, 320, 337, 340, 344, 347, 359, 361, 363, 381, 396, 421, 423, 427, 429, 445, 461, 463, 467, 468, 469, 474, 475, 476, 477, 479, 482], "too": [5, 18, 34, 61, 64, 73, 82, 88, 90, 92, 93, 98, 99, 102, 105, 106, 108, 114, 132, 138, 151, 154, 157, 165, 166, 168, 175, 183, 185, 187, 190, 192, 193, 203, 211, 212, 226, 229, 242, 257, 258, 259, 283, 292, 305, 307, 332, 333, 337, 338, 340, 341, 344, 345, 347, 348, 352, 358, 361, 364, 368, 383, 385, 387, 388, 389, 408, 412, 421, 422, 423, 427, 431, 433, 450, 454, 461, 462, 463, 464, 465, 467, 468, 469, 472, 475, 477, 479, 480, 482], "small": [5, 32, 41, 53, 56, 61, 66, 71, 76, 82, 83, 88, 90, 96, 99, 100, 102, 103, 105, 120, 157, 168, 175, 184, 185, 189, 192, 242, 246, 254, 258, 261, 271, 275, 283, 288, 293, 308, 319, 330, 333, 337, 343, 344, 361, 364, 374, 381, 387, 406, 408, 412, 423, 427, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 478, 480, 481, 482], "semant": [5, 7, 11, 34, 55, 61, 62, 88, 92, 98, 99, 101, 132, 160, 185, 192, 195, 201, 204, 206, 207, 224, 247, 249, 250, 252, 267, 268, 269, 271, 283, 292, 293, 295, 296, 299, 311, 316, 319, 330, 331, 332, 337, 342, 343, 352, 364, 365, 385, 393, 404, 422, 423, 424, 426, 427, 428, 429, 431, 435, 454, 455, 461, 463, 464, 466, 467, 469, 471, 474, 475, 476, 477, 478, 479, 480, 482], "inherit": [5, 28, 33, 59, 61, 66, 73, 74, 83, 86, 88, 91, 92, 97, 114, 116, 118, 120, 125, 127, 138, 155, 157, 160, 168, 175, 176, 182, 198, 212, 220, 221, 222, 224, 233, 234, 246, 250, 255, 258, 259, 269, 271, 283, 284, 292, 296, 299, 315, 328, 337, 338, 341, 342, 348, 351, 361, 364, 368, 369, 375, 377, 385, 409, 413, 414, 415, 426, 427, 429, 444, 460, 461, 464, 466, 467, 469, 471, 472, 473, 475, 477, 479, 480, 481, 482], "downcast": [5, 455], "mileag": [5, 335], "vari": [5, 7, 56, 73, 76, 82, 83, 93, 101, 102, 104, 105, 108, 141, 151, 157, 174, 182, 190, 192, 224, 246, 249, 251, 255, 258, 266, 271, 279, 305, 335, 338, 341, 342, 343, 344, 352, 361, 364, 365, 368, 384, 388, 389, 399, 426, 427, 433, 461, 462, 463, 465, 467, 468, 474, 475, 476], "mean": [5, 7, 13, 18, 23, 30, 32, 33, 34, 41, 44, 50, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 71, 73, 74, 76, 82, 87, 88, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 118, 120, 125, 132, 138, 139, 141, 144, 151, 154, 155, 157, 162, 165, 166, 168, 174, 175, 176, 177, 180, 182, 183, 185, 189, 190, 192, 195, 201, 202, 204, 205, 206, 207, 208, 212, 213, 214, 215, 217, 219, 222, 224, 225, 227, 232, 233, 234, 235, 241, 242, 243, 246, 250, 251, 252, 253, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 281, 283, 288, 289, 290, 292, 293, 294, 296, 297, 299, 301, 307, 308, 310, 311, 314, 318, 319, 321, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 352, 360, 361, 364, 365, 366, 368, 375, 378, 380, 383, 384, 385, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 404, 406, 409, 412, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 448, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "occur": [5, 7, 13, 17, 18, 22, 23, 30, 34, 35, 38, 39, 41, 44, 47, 48, 57, 61, 62, 64, 71, 73, 77, 83, 88, 91, 93, 96, 98, 99, 101, 105, 111, 118, 120, 125, 136, 138, 139, 144, 150, 151, 152, 154, 156, 157, 165, 166, 168, 169, 174, 176, 180, 182, 185, 189, 190, 192, 202, 211, 212, 217, 227, 229, 246, 249, 250, 255, 258, 261, 267, 269, 270, 271, 275, 288, 292, 293, 297, 299, 302, 311, 314, 319, 328, 332, 333, 335, 337, 341, 343, 344, 345, 348, 352, 357, 361, 363, 364, 365, 368, 370, 375, 380, 383, 384, 387, 394, 399, 401, 402, 406, 408, 409, 411, 412, 414, 418, 421, 423, 426, 427, 428, 429, 431, 434, 435, 442, 451, 464, 466, 467, 468, 469, 471, 474, 475, 476, 479, 480, 481, 482], "remain": [5, 32, 35, 41, 55, 61, 68, 71, 74, 76, 92, 93, 99, 102, 118, 120, 125, 138, 153, 160, 165, 168, 174, 175, 176, 182, 185, 189, 190, 192, 193, 194, 197, 201, 202, 204, 207, 208, 210, 212, 217, 224, 226, 246, 247, 249, 250, 268, 271, 275, 283, 292, 293, 295, 296, 297, 299, 312, 322, 324, 333, 337, 340, 343, 344, 345, 348, 352, 361, 363, 364, 375, 383, 384, 385, 387, 393, 399, 401, 406, 423, 425, 426, 427, 431, 434, 435, 441, 454, 455, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "option": [5, 23, 32, 33, 34, 41, 46, 48, 55, 56, 57, 59, 61, 64, 66, 70, 71, 73, 76, 86, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 105, 106, 108, 110, 111, 113, 116, 117, 120, 125, 127, 134, 136, 138, 139, 140, 141, 143, 146, 150, 151, 152, 153, 155, 156, 157, 159, 160, 162, 165, 166, 168, 169, 172, 174, 175, 176, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 216, 217, 220, 222, 224, 225, 226, 229, 231, 234, 237, 240, 241, 244, 247, 250, 251, 254, 255, 258, 259, 261, 264, 266, 267, 268, 269, 270, 271, 272, 276, 278, 281, 283, 284, 285, 288, 293, 294, 295, 296, 297, 299, 305, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 341, 343, 344, 345, 346, 348, 350, 352, 353, 354, 355, 356, 358, 361, 363, 364, 365, 366, 367, 369, 371, 372, 374, 377, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 402, 406, 410, 412, 413, 414, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 448, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "default": [5, 7, 14, 17, 23, 24, 27, 31, 32, 33, 34, 44, 48, 55, 56, 59, 61, 62, 64, 66, 69, 74, 75, 82, 87, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 105, 106, 108, 109, 110, 113, 115, 116, 117, 120, 121, 124, 125, 131, 132, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 172, 174, 175, 176, 177, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 221, 222, 224, 225, 226, 227, 229, 230, 233, 234, 239, 241, 242, 243, 244, 246, 247, 250, 251, 252, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 307, 308, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 343, 344, 345, 347, 348, 350, 352, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 368, 372, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 393, 394, 396, 398, 400, 401, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 434, 435, 447, 450, 452, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "touch": [5, 66, 83, 176, 218, 246, 296, 297, 428, 467, 480, 482], "keyword": [5, 56, 61, 62, 64, 66, 72, 73, 74, 82, 85, 87, 88, 93, 97, 98, 99, 113, 114, 118, 120, 125, 134, 138, 140, 149, 151, 157, 159, 166, 169, 174, 175, 176, 182, 185, 188, 189, 190, 192, 195, 204, 205, 206, 207, 212, 217, 223, 224, 225, 229, 234, 239, 242, 244, 246, 251, 254, 255, 258, 261, 262, 264, 266, 267, 268, 271, 278, 283, 288, 292, 293, 297, 299, 304, 307, 313, 315, 318, 319, 321, 323, 325, 327, 331, 332, 335, 337, 344, 345, 348, 352, 355, 357, 361, 363, 364, 368, 371, 375, 383, 384, 385, 387, 388, 389, 394, 398, 402, 406, 410, 412, 419, 421, 423, 426, 427, 429, 430, 432, 441, 442, 444, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482], "current": [5, 11, 12, 17, 18, 23, 26, 28, 30, 32, 33, 34, 38, 40, 42, 44, 48, 51, 55, 57, 59, 60, 61, 62, 64, 66, 68, 71, 73, 74, 76, 77, 82, 86, 87, 88, 90, 93, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 113, 114, 115, 118, 120, 121, 127, 128, 131, 132, 134, 135, 136, 137, 138, 144, 150, 151, 152, 153, 154, 155, 157, 159, 162, 165, 166, 168, 169, 172, 174, 175, 176, 178, 182, 184, 185, 188, 190, 192, 195, 196, 199, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 221, 222, 224, 226, 229, 230, 233, 234, 235, 239, 240, 241, 243, 244, 246, 247, 249, 250, 256, 258, 259, 261, 266, 267, 269, 271, 275, 276, 278, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 299, 302, 307, 308, 309, 311, 313, 314, 315, 319, 320, 322, 323, 324, 325, 327, 329, 331, 332, 333, 337, 340, 341, 343, 344, 345, 348, 352, 353, 354, 355, 357, 361, 363, 364, 365, 366, 367, 368, 371, 374, 375, 379, 380, 383, 385, 387, 393, 394, 397, 398, 399, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 418, 420, 421, 423, 426, 427, 428, 429, 430, 431, 434, 435, 450, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "alway": [5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 52, 53, 54, 56, 57, 58, 59, 61, 62, 65, 71, 73, 74, 77, 83, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 106, 108, 110, 113, 118, 120, 125, 132, 134, 138, 141, 143, 144, 146, 149, 151, 154, 156, 157, 162, 165, 166, 174, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 194, 195, 202, 204, 205, 206, 207, 209, 210, 212, 213, 215, 220, 222, 225, 229, 233, 234, 235, 239, 241, 243, 244, 246, 247, 249, 250, 251, 255, 257, 258, 259, 262, 266, 267, 269, 270, 271, 272, 275, 283, 292, 293, 294, 295, 296, 299, 306, 307, 309, 317, 319, 324, 330, 331, 332, 333, 334, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 359, 361, 363, 364, 365, 366, 368, 375, 376, 380, 385, 387, 388, 393, 394, 398, 399, 401, 404, 406, 408, 409, 412, 414, 416, 421, 423, 424, 426, 427, 428, 429, 431, 434, 435, 448, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "end": [5, 7, 9, 13, 23, 24, 28, 30, 32, 33, 34, 36, 37, 38, 41, 54, 58, 61, 62, 64, 66, 70, 71, 73, 76, 77, 78, 82, 83, 87, 88, 92, 93, 95, 97, 98, 99, 102, 103, 105, 108, 114, 115, 118, 120, 121, 125, 132, 134, 137, 138, 139, 143, 146, 149, 150, 151, 153, 155, 157, 158, 159, 162, 166, 168, 174, 175, 176, 177, 181, 182, 185, 189, 190, 192, 193, 195, 204, 206, 207, 208, 209, 212, 214, 224, 225, 226, 233, 234, 239, 241, 242, 244, 246, 247, 250, 255, 258, 261, 262, 267, 268, 269, 270, 271, 273, 278, 279, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 301, 302, 305, 308, 309, 311, 314, 317, 319, 320, 328, 330, 331, 332, 335, 337, 340, 341, 344, 345, 347, 348, 352, 354, 357, 358, 361, 362, 363, 365, 370, 375, 376, 377, 379, 380, 387, 388, 389, 394, 399, 406, 407, 409, 410, 412, 414, 415, 416, 420, 421, 423, 424, 426, 427, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 445, 447, 448, 449, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "here": [5, 7, 23, 28, 32, 33, 34, 41, 44, 60, 61, 70, 71, 73, 74, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 98, 99, 100, 102, 103, 104, 106, 108, 110, 112, 114, 118, 120, 128, 136, 139, 141, 144, 151, 153, 155, 157, 166, 168, 169, 174, 175, 176, 180, 182, 185, 189, 190, 192, 195, 197, 198, 199, 201, 204, 205, 206, 207, 208, 215, 220, 221, 222, 224, 225, 229, 233, 234, 241, 244, 246, 247, 251, 255, 256, 267, 268, 269, 270, 275, 277, 283, 288, 292, 293, 297, 299, 305, 307, 314, 315, 319, 322, 329, 331, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 352, 357, 360, 361, 364, 365, 366, 368, 375, 383, 384, 385, 387, 388, 389, 394, 397, 399, 402, 406, 407, 409, 410, 412, 422, 426, 427, 429, 430, 431, 433, 434, 435, 448, 450, 454, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482], "colon": [5, 66, 88, 102, 182, 192, 195, 198, 204, 207, 227, 229, 241, 255, 259, 264, 267, 271, 294, 297, 302, 319, 335, 345, 376, 377, 394, 399, 406, 409, 426, 429, 430, 434, 454, 455, 460, 467, 468, 478, 482], "error": [5, 7, 8, 9, 13, 17, 18, 22, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 47, 48, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 77, 82, 85, 87, 88, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 112, 113, 116, 117, 118, 120, 132, 136, 140, 141, 142, 143, 144, 145, 146, 149, 151, 154, 155, 156, 158, 162, 163, 165, 166, 168, 170, 174, 175, 176, 180, 181, 182, 183, 186, 189, 192, 193, 195, 196, 200, 201, 202, 204, 206, 207, 208, 211, 212, 213, 215, 216, 217, 218, 222, 224, 225, 227, 228, 233, 243, 244, 245, 246, 247, 250, 252, 254, 256, 257, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 283, 284, 285, 286, 287, 288, 290, 293, 295, 296, 298, 299, 302, 305, 306, 308, 311, 319, 322, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 349, 350, 352, 355, 357, 358, 359, 361, 362, 364, 368, 375, 377, 380, 383, 385, 387, 388, 389, 390, 391, 393, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 434, 435, 441, 444, 451, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "messag": [5, 23, 32, 33, 52, 57, 64, 66, 70, 71, 73, 74, 77, 82, 83, 87, 90, 93, 96, 102, 103, 105, 106, 112, 118, 120, 121, 125, 132, 135, 142, 143, 144, 146, 151, 155, 156, 157, 162, 173, 175, 176, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 222, 227, 233, 241, 242, 244, 245, 246, 247, 250, 254, 255, 259, 262, 267, 268, 269, 272, 273, 279, 283, 284, 285, 288, 292, 293, 297, 305, 311, 314, 317, 319, 322, 331, 333, 335, 337, 338, 340, 341, 342, 352, 355, 356, 357, 358, 361, 366, 367, 374, 377, 380, 385, 387, 388, 389, 394, 398, 399, 406, 412, 413, 414, 418, 420, 425, 426, 428, 430, 435, 448, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 481, 482], "associ": [5, 23, 24, 27, 32, 56, 59, 61, 64, 71, 73, 74, 82, 85, 88, 90, 92, 96, 97, 98, 99, 100, 102, 103, 106, 113, 118, 121, 125, 134, 138, 144, 151, 157, 165, 174, 176, 178, 185, 190, 192, 193, 195, 200, 202, 212, 229, 241, 244, 246, 247, 249, 250, 255, 267, 276, 283, 286, 292, 293, 295, 297, 299, 314, 328, 329, 337, 344, 346, 348, 357, 361, 364, 366, 368, 374, 375, 385, 387, 401, 402, 404, 405, 406, 409, 412, 414, 415, 418, 419, 421, 422, 425, 426, 428, 430, 431, 435, 441, 453, 460, 468, 471, 474, 475, 476, 479, 480, 481, 482], "semicolon": [5, 32, 74, 102, 238, 297, 340, 426, 435, 454, 460], "mutual": [5, 61, 66, 101, 108, 116, 247, 262, 268, 271, 292, 319, 368, 379, 402, 482], "exclud": [5, 18, 57, 62, 97, 99, 102, 162, 180, 182, 190, 192, 226, 234, 246, 261, 271, 275, 279, 281, 293, 296, 308, 314, 341, 343, 344, 352, 357, 364, 365, 366, 375, 381, 388, 412, 420, 421, 425, 426, 427, 429, 435, 441, 448, 454, 467, 468, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "note": [5, 7, 15, 18, 20, 22, 25, 28, 30, 32, 33, 34, 39, 41, 44, 45, 47, 48, 52, 55, 57, 59, 61, 62, 64, 66, 70, 71, 73, 74, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 118, 120, 121, 125, 131, 136, 138, 139, 140, 141, 143, 150, 151, 154, 156, 157, 160, 162, 165, 166, 168, 171, 174, 175, 176, 177, 180, 181, 182, 183, 189, 190, 192, 193, 195, 197, 198, 199, 200, 203, 204, 207, 208, 212, 213, 214, 215, 219, 220, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 246, 247, 250, 251, 253, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 278, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 317, 319, 321, 322, 324, 328, 331, 332, 334, 335, 340, 343, 344, 345, 347, 348, 351, 352, 353, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 377, 380, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 426, 429, 430, 431, 433, 434, 435, 436, 441, 442, 445, 448, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482], "do": [5, 7, 14, 15, 16, 18, 22, 23, 28, 32, 33, 34, 35, 41, 42, 54, 57, 58, 59, 61, 62, 66, 70, 71, 73, 74, 75, 76, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 113, 118, 120, 121, 125, 131, 136, 137, 138, 139, 140, 141, 147, 150, 151, 154, 157, 158, 160, 162, 166, 168, 175, 176, 177, 178, 180, 185, 188, 189, 190, 192, 193, 194, 195, 196, 200, 201, 204, 206, 207, 210, 213, 222, 224, 225, 226, 227, 229, 231, 235, 239, 242, 243, 246, 247, 250, 252, 253, 255, 257, 258, 259, 266, 267, 268, 269, 271, 275, 283, 284, 289, 292, 293, 294, 295, 296, 297, 299, 305, 306, 308, 314, 319, 320, 322, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 348, 352, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 373, 374, 375, 377, 379, 381, 383, 385, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 405, 406, 409, 410, 412, 413, 414, 416, 418, 420, 421, 424, 425, 426, 427, 428, 429, 431, 434, 435, 440, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "decrement": [5, 7, 9, 34, 44, 50, 61, 62, 71, 74, 83, 138, 190, 283, 293, 297, 333, 364, 375, 427, 482], "abov": [5, 7, 23, 32, 33, 34, 41, 56, 61, 62, 66, 70, 71, 73, 74, 83, 86, 88, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 108, 110, 113, 114, 115, 116, 118, 120, 125, 136, 138, 147, 149, 150, 151, 154, 157, 162, 166, 168, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 189, 192, 196, 199, 202, 204, 207, 212, 214, 222, 224, 229, 233, 234, 235, 241, 242, 246, 249, 251, 258, 259, 261, 266, 267, 268, 269, 270, 275, 278, 283, 288, 289, 292, 293, 297, 299, 307, 308, 313, 319, 324, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 348, 352, 353, 361, 365, 368, 374, 375, 379, 383, 385, 387, 388, 389, 393, 394, 396, 398, 401, 404, 406, 407, 409, 412, 419, 420, 425, 426, 427, 430, 431, 433, 434, 435, 442, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "what": [5, 9, 23, 25, 26, 29, 30, 32, 33, 34, 39, 41, 48, 52, 56, 61, 62, 66, 70, 73, 74, 76, 77, 87, 88, 91, 92, 93, 95, 99, 101, 102, 103, 105, 106, 108, 110, 118, 120, 125, 132, 138, 139, 151, 154, 157, 162, 166, 169, 174, 175, 176, 182, 184, 185, 186, 198, 199, 200, 202, 206, 207, 212, 214, 222, 224, 229, 234, 235, 242, 243, 246, 247, 248, 249, 250, 251, 261, 266, 267, 268, 269, 270, 272, 279, 289, 293, 295, 296, 298, 307, 311, 314, 315, 319, 320, 328, 332, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 350, 352, 360, 361, 367, 374, 375, 379, 383, 385, 387, 388, 389, 393, 399, 409, 410, 412, 420, 423, 426, 428, 429, 431, 433, 434, 435, 441, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "succeed": [5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 25, 27, 29, 35, 36, 37, 38, 39, 42, 44, 46, 47, 48, 52, 53, 54, 58, 59, 60, 62, 65, 83, 102, 120, 139, 175, 192, 208, 231, 248, 288, 293, 296, 332, 336, 337, 341, 361, 387, 388, 389, 394, 404, 409, 426, 430, 454, 463, 464, 465, 472, 482], "arg": [5, 10, 20, 28, 32, 33, 34, 35, 56, 57, 59, 60, 61, 62, 64, 66, 70, 71, 73, 74, 76, 82, 83, 85, 87, 88, 91, 92, 97, 98, 99, 108, 110, 113, 114, 118, 120, 124, 125, 131, 136, 138, 140, 142, 144, 155, 159, 163, 165, 168, 169, 174, 175, 176, 182, 186, 189, 190, 196, 199, 202, 204, 211, 212, 214, 223, 224, 225, 227, 231, 246, 247, 253, 255, 261, 264, 267, 268, 269, 271, 283, 284, 291, 292, 293, 297, 299, 300, 307, 308, 315, 316, 318, 335, 344, 345, 348, 352, 354, 358, 361, 364, 375, 379, 383, 385, 387, 388, 389, 394, 398, 401, 426, 427, 430, 435, 440, 442, 447, 450, 454, 455, 461, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 480, 481, 482], "exhaust": [5, 61, 93, 120, 121, 157, 159, 190, 224, 241, 261, 293, 327, 342, 344, 361, 368, 385, 388, 421, 426, 427, 429, 463, 465, 466, 467, 469, 477, 478, 482], "appropri": [5, 9, 15, 18, 23, 24, 30, 40, 41, 48, 52, 59, 61, 62, 66, 69, 71, 73, 74, 76, 86, 88, 90, 92, 93, 98, 99, 101, 102, 103, 106, 108, 110, 114, 118, 125, 136, 138, 139, 151, 156, 157, 176, 182, 183, 185, 192, 194, 195, 197, 200, 201, 204, 205, 206, 207, 210, 222, 224, 225, 229, 234, 241, 242, 244, 247, 250, 258, 259, 266, 267, 268, 269, 271, 275, 283, 289, 292, 293, 296, 299, 307, 308, 314, 319, 324, 328, 333, 335, 337, 338, 341, 343, 344, 345, 347, 348, 352, 357, 364, 365, 374, 380, 383, 384, 385, 388, 393, 394, 398, 401, 402, 407, 409, 410, 412, 414, 420, 421, 428, 429, 431, 435, 454, 460, 461, 462, 463, 464, 465, 467, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482], "due": [5, 23, 32, 34, 44, 61, 64, 73, 74, 82, 91, 98, 101, 106, 120, 125, 136, 138, 168, 174, 175, 176, 182, 183, 189, 207, 212, 220, 226, 231, 241, 246, 250, 258, 267, 268, 269, 271, 275, 283, 299, 314, 325, 327, 341, 344, 348, 361, 364, 370, 385, 387, 388, 408, 421, 426, 427, 429, 430, 431, 434, 455, 460, 461, 462, 465, 467, 468, 469, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482], "failur": [5, 7, 8, 9, 11, 15, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 48, 52, 53, 56, 57, 58, 60, 62, 64, 66, 71, 88, 101, 102, 112, 120, 132, 175, 176, 182, 186, 190, 192, 212, 242, 250, 269, 278, 282, 283, 293, 296, 302, 322, 332, 334, 337, 341, 344, 361, 365, 367, 388, 389, 422, 424, 426, 429, 430, 435, 442, 462, 465, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482], "left": [5, 15, 32, 33, 46, 61, 62, 66, 70, 71, 73, 88, 90, 93, 99, 102, 103, 105, 108, 120, 125, 141, 146, 147, 149, 154, 155, 156, 159, 166, 175, 176, 180, 182, 185, 189, 190, 192, 195, 211, 215, 218, 221, 224, 225, 227, 234, 246, 250, 267, 268, 269, 271, 281, 283, 292, 293, 294, 295, 297, 302, 314, 319, 324, 331, 337, 340, 341, 344, 345, 348, 363, 364, 368, 374, 375, 383, 385, 386, 387, 389, 394, 399, 410, 425, 426, 427, 429, 431, 434, 435, 455, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 477, 479, 480, 482], "untouch": [5, 62, 180, 455], "posit": [5, 7, 13, 15, 23, 25, 34, 37, 46, 56, 58, 61, 62, 66, 71, 74, 82, 83, 85, 87, 88, 90, 92, 93, 95, 97, 99, 102, 103, 104, 105, 113, 115, 118, 120, 125, 132, 137, 138, 140, 144, 149, 153, 154, 155, 157, 159, 162, 165, 174, 175, 176, 180, 182, 185, 189, 190, 192, 208, 212, 214, 220, 221, 224, 225, 233, 234, 235, 246, 249, 255, 258, 261, 262, 264, 266, 267, 270, 273, 275, 278, 282, 283, 284, 289, 293, 299, 300, 311, 314, 315, 318, 320, 321, 325, 328, 332, 337, 340, 341, 343, 344, 345, 347, 348, 349, 350, 352, 357, 361, 362, 364, 365, 368, 371, 375, 377, 380, 381, 383, 384, 385, 387, 388, 389, 397, 398, 400, 407, 409, 412, 414, 420, 421, 426, 429, 430, 441, 444, 448, 461, 464, 465, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482], "local": [5, 12, 13, 16, 18, 30, 31, 33, 34, 48, 51, 57, 64, 66, 68, 71, 77, 82, 83, 85, 86, 88, 90, 93, 97, 98, 99, 102, 104, 105, 108, 112, 118, 125, 139, 140, 144, 150, 151, 152, 156, 159, 163, 166, 169, 174, 175, 176, 182, 185, 189, 190, 191, 192, 199, 208, 212, 224, 225, 241, 244, 245, 246, 247, 249, 250, 254, 255, 258, 259, 261, 267, 269, 272, 278, 283, 286, 288, 293, 294, 296, 297, 299, 308, 313, 314, 319, 320, 332, 334, 335, 337, 341, 344, 345, 348, 351, 352, 354, 361, 362, 365, 378, 379, 380, 385, 387, 389, 394, 397, 404, 408, 412, 413, 414, 415, 418, 421, 424, 426, 427, 428, 429, 431, 435, 436, 437, 439, 440, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 480, 482, 483], "pyarg_vapars": [5, 55, 482], "va_list": [5, 9, 18, 23, 62, 465, 477, 482], "varg": [5, 9, 23, 62], "ident": [5, 9, 18, 25, 45, 48, 62, 66, 71, 82, 91, 92, 93, 96, 98, 99, 103, 120, 125, 139, 140, 142, 154, 158, 163, 180, 182, 185, 189, 192, 195, 200, 204, 206, 214, 215, 224, 229, 244, 261, 267, 269, 271, 281, 283, 293, 305, 308, 319, 328, 332, 333, 337, 341, 343, 344, 347, 352, 355, 364, 365, 374, 377, 384, 388, 389, 398, 409, 412, 424, 427, 430, 436, 440, 463, 464, 466, 467, 471, 474, 478, 479, 480, 482], "rather": [5, 7, 15, 22, 23, 29, 30, 32, 40, 44, 53, 55, 56, 59, 62, 70, 71, 73, 74, 82, 88, 92, 97, 98, 99, 108, 112, 118, 120, 125, 136, 149, 151, 154, 155, 157, 162, 165, 168, 175, 176, 180, 182, 185, 190, 207, 208, 209, 212, 224, 225, 226, 234, 242, 246, 247, 255, 258, 261, 267, 268, 269, 270, 271, 275, 283, 292, 293, 295, 296, 300, 302, 312, 313, 314, 319, 324, 331, 332, 334, 335, 337, 340, 341, 343, 344, 345, 348, 352, 361, 365, 366, 368, 371, 374, 375, 377, 385, 387, 388, 389, 393, 394, 398, 399, 401, 406, 409, 412, 418, 421, 422, 424, 426, 427, 429, 431, 433, 435, 454, 455, 460, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "than": [5, 10, 15, 18, 22, 23, 24, 25, 29, 30, 32, 33, 34, 37, 38, 40, 41, 44, 53, 54, 55, 56, 59, 61, 62, 66, 70, 71, 73, 74, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 115, 118, 120, 125, 132, 136, 138, 139, 140, 144, 146, 147, 149, 151, 154, 157, 159, 160, 162, 165, 166, 168, 169, 174, 175, 176, 180, 182, 185, 187, 189, 190, 192, 194, 195, 196, 197, 198, 200, 202, 204, 206, 207, 208, 209, 210, 212, 214, 217, 224, 225, 226, 229, 231, 233, 234, 235, 239, 241, 242, 246, 247, 249, 250, 251, 255, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 300, 302, 306, 307, 308, 312, 313, 314, 319, 320, 322, 324, 325, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 357, 358, 361, 363, 364, 365, 366, 368, 371, 373, 374, 375, 377, 380, 381, 383, 385, 387, 388, 389, 393, 394, 398, 399, 401, 404, 406, 408, 409, 410, 412, 414, 418, 421, 423, 424, 426, 427, 429, 431, 433, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "kw": [5, 61, 175, 188, 196, 202, 204, 207, 262, 361, 371, 373, 374, 375, 388, 389, 440, 461, 464, 467, 474], "empti": [5, 13, 17, 22, 24, 30, 32, 33, 34, 37, 44, 48, 53, 57, 66, 71, 74, 82, 83, 86, 88, 93, 102, 103, 108, 112, 118, 120, 121, 125, 132, 133, 137, 138, 139, 143, 144, 149, 150, 151, 153, 155, 156, 157, 159, 163, 166, 169, 174, 180, 182, 183, 187, 189, 190, 192, 195, 196, 202, 204, 206, 207, 208, 211, 212, 217, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 239, 241, 244, 249, 250, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 286, 288, 292, 293, 294, 296, 299, 309, 314, 315, 316, 319, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 341, 343, 344, 345, 347, 348, 352, 357, 358, 361, 363, 364, 368, 374, 375, 379, 381, 383, 384, 385, 386, 387, 388, 393, 394, 398, 399, 404, 406, 407, 409, 410, 412, 418, 419, 421, 422, 423, 426, 427, 429, 430, 431, 434, 435, 439, 441, 448, 454, 455, 460, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "denot": [5, 45, 59, 66, 83, 102, 166, 190, 243, 244, 255, 259, 293, 322, 341, 344, 368, 385, 394, 426, 427, 429, 430, 431, 434, 461, 467, 479, 482], "support": [5, 7, 12, 16, 22, 23, 24, 25, 31, 33, 34, 36, 37, 39, 42, 46, 47, 48, 52, 55, 56, 58, 59, 61, 63, 65, 66, 68, 71, 72, 77, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 102, 106, 108, 110, 113, 114, 115, 117, 118, 120, 125, 131, 132, 136, 138, 139, 141, 143, 146, 147, 151, 153, 154, 157, 160, 162, 163, 172, 174, 175, 176, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 200, 201, 202, 203, 206, 207, 209, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 241, 242, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 281, 283, 284, 285, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 314, 315, 318, 319, 320, 321, 322, 328, 329, 330, 332, 333, 334, 335, 337, 338, 340, 342, 343, 344, 345, 347, 348, 352, 354, 358, 360, 364, 365, 367, 368, 375, 376, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 441, 448, 450, 454, 455, 456, 460, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 482, 483], "pyarg_vaparsetupleandkeyword": [5, 55, 465, 482], "pyarg_validatekeywordargu": [5, 55, 482], "ensur": [5, 18, 32, 33, 41, 44, 48, 55, 57, 61, 64, 66, 71, 74, 77, 82, 86, 88, 90, 96, 97, 98, 99, 102, 108, 111, 118, 121, 125, 131, 132, 136, 143, 157, 165, 168, 175, 180, 182, 185, 192, 195, 204, 209, 210, 235, 249, 255, 262, 267, 269, 270, 278, 283, 284, 292, 293, 299, 324, 337, 340, 341, 343, 344, 348, 352, 360, 361, 363, 368, 371, 375, 381, 385, 387, 388, 389, 397, 398, 399, 401, 404, 406, 418, 420, 421, 427, 429, 454, 455, 460, 461, 464, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "key": [5, 22, 32, 34, 39, 48, 52, 53, 61, 66, 76, 82, 83, 85, 90, 91, 92, 93, 97, 98, 99, 101, 110, 120, 125, 142, 147, 151, 155, 156, 159, 160, 163, 166, 169, 173, 174, 176, 180, 181, 182, 183, 185, 188, 190, 192, 193, 195, 196, 200, 202, 204, 205, 211, 212, 222, 224, 225, 226, 229, 231, 235, 236, 243, 244, 247, 250, 251, 255, 256, 259, 261, 262, 266, 267, 268, 270, 271, 272, 273, 279, 282, 285, 287, 288, 291, 293, 295, 297, 298, 299, 304, 305, 306, 307, 308, 312, 319, 320, 329, 330, 333, 334, 335, 340, 344, 345, 346, 352, 354, 357, 361, 367, 368, 375, 383, 384, 385, 388, 389, 393, 394, 398, 401, 404, 406, 412, 415, 416, 418, 420, 424, 426, 427, 429, 430, 431, 435, 439, 440, 441, 445, 451, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483], "dictionari": [5, 16, 21, 22, 23, 27, 30, 32, 41, 44, 48, 51, 56, 57, 61, 62, 64, 66, 71, 73, 74, 82, 83, 85, 86, 91, 92, 93, 98, 102, 104, 106, 110, 113, 116, 118, 120, 139, 144, 147, 151, 156, 157, 159, 166, 172, 174, 175, 180, 182, 183, 185, 186, 190, 192, 194, 195, 199, 200, 201, 202, 204, 205, 206, 211, 212, 215, 222, 224, 225, 226, 229, 231, 235, 238, 241, 243, 244, 249, 250, 251, 255, 259, 262, 266, 267, 269, 270, 271, 272, 274, 276, 279, 283, 286, 287, 288, 291, 292, 293, 297, 299, 300, 304, 305, 306, 307, 308, 312, 314, 319, 324, 325, 326, 330, 335, 340, 341, 344, 345, 346, 348, 352, 354, 357, 361, 364, 368, 374, 375, 376, 379, 380, 383, 385, 387, 388, 392, 393, 394, 399, 401, 406, 412, 415, 416, 423, 426, 427, 428, 430, 435, 439, 440, 444, 445, 451, 454, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 476, 477, 478, 479, 480, 482, 483], "latter": [5, 7, 23, 41, 71, 83, 101, 102, 103, 106, 118, 132, 144, 166, 182, 183, 195, 200, 204, 208, 214, 246, 250, 255, 258, 259, 267, 268, 276, 292, 293, 296, 299, 308, 332, 337, 340, 344, 347, 359, 368, 374, 375, 383, 385, 387, 397, 399, 400, 426, 427, 428, 429, 430, 431, 435, 436, 460, 464, 469, 471, 472, 474, 475, 476, 479, 481, 482], "deconstruct": 5, "old": [5, 9, 23, 41, 44, 47, 57, 58, 62, 66, 71, 83, 88, 98, 102, 110, 114, 118, 120, 151, 159, 168, 175, 176, 186, 195, 204, 212, 224, 225, 242, 247, 249, 250, 262, 268, 269, 271, 276, 283, 292, 293, 299, 304, 308, 330, 333, 341, 344, 345, 352, 357, 360, 361, 368, 380, 381, 383, 388, 398, 406, 409, 414, 426, 427, 429, 434, 435, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "meth_oldarg": [5, 463, 469], "been": [5, 7, 13, 18, 22, 23, 24, 28, 30, 32, 33, 34, 41, 42, 44, 46, 56, 57, 58, 61, 62, 71, 73, 76, 77, 82, 83, 87, 88, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 113, 114, 115, 118, 120, 121, 125, 132, 133, 138, 139, 140, 141, 144, 147, 149, 151, 153, 155, 157, 159, 160, 165, 166, 168, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 195, 198, 200, 201, 203, 206, 211, 212, 217, 222, 224, 225, 226, 229, 231, 234, 235, 239, 241, 242, 243, 246, 249, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 297, 299, 302, 307, 308, 309, 314, 319, 320, 322, 328, 329, 331, 333, 334, 335, 337, 338, 340, 341, 343, 344, 347, 348, 352, 353, 355, 357, 359, 360, 361, 363, 364, 365, 367, 368, 374, 380, 381, 383, 385, 386, 387, 388, 389, 393, 394, 398, 399, 400, 401, 402, 404, 406, 407, 410, 411, 412, 415, 418, 419, 420, 421, 423, 426, 427, 428, 429, 431, 434, 435, 436, 441, 445, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "standard": [5, 7, 18, 24, 30, 31, 32, 33, 41, 57, 59, 61, 62, 64, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 82, 86, 92, 93, 98, 99, 101, 102, 104, 105, 106, 110, 112, 113, 114, 116, 118, 125, 132, 136, 141, 143, 144, 145, 147, 150, 151, 153, 156, 162, 165, 166, 174, 175, 176, 177, 181, 182, 185, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 210, 212, 217, 219, 222, 224, 229, 234, 237, 238, 242, 244, 246, 247, 249, 250, 255, 257, 258, 261, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 281, 283, 285, 288, 293, 294, 295, 299, 301, 302, 305, 306, 308, 309, 311, 312, 314, 319, 321, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 343, 345, 347, 348, 350, 352, 353, 354, 356, 357, 358, 361, 364, 365, 366, 367, 368, 369, 374, 378, 380, 383, 385, 386, 387, 388, 389, 393, 394, 396, 397, 399, 401, 406, 407, 409, 412, 418, 420, 421, 424, 425, 426, 428, 429, 432, 433, 434, 435, 436, 440, 444, 451, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483], "modifi": [5, 9, 22, 23, 32, 33, 59, 61, 62, 64, 66, 71, 74, 75, 77, 86, 88, 92, 93, 97, 98, 99, 104, 105, 106, 110, 114, 118, 120, 121, 136, 138, 141, 157, 166, 172, 175, 176, 183, 184, 185, 190, 192, 195, 196, 197, 200, 202, 204, 207, 210, 214, 215, 224, 231, 244, 246, 255, 256, 258, 266, 267, 268, 269, 271, 273, 281, 283, 284, 292, 293, 296, 299, 302, 306, 307, 308, 314, 319, 321, 324, 328, 329, 330, 331, 332, 335, 337, 338, 340, 344, 345, 348, 350, 352, 354, 357, 361, 364, 368, 371, 374, 375, 377, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 395, 396, 399, 404, 406, 408, 409, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 435, 454, 457, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482], "purpos": [5, 7, 17, 18, 30, 32, 34, 36, 41, 55, 61, 66, 70, 71, 73, 82, 88, 91, 92, 98, 99, 102, 104, 106, 111, 112, 120, 125, 127, 143, 154, 157, 166, 169, 172, 174, 175, 176, 180, 182, 185, 189, 192, 195, 201, 204, 205, 212, 225, 226, 229, 234, 244, 250, 253, 255, 261, 268, 283, 284, 292, 293, 295, 299, 307, 308, 319, 323, 325, 327, 334, 337, 340, 341, 347, 352, 357, 364, 368, 375, 384, 387, 388, 393, 399, 406, 409, 412, 413, 420, 424, 425, 426, 428, 429, 430, 431, 434, 439, 454, 455, 460, 461, 467, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 482], "conveni": [5, 7, 20, 23, 24, 28, 30, 32, 41, 44, 61, 66, 71, 73, 76, 82, 83, 88, 98, 99, 104, 105, 106, 108, 118, 123, 125, 138, 146, 150, 151, 156, 157, 166, 180, 182, 185, 188, 190, 194, 195, 197, 200, 201, 202, 204, 205, 206, 207, 208, 224, 225, 229, 231, 233, 234, 242, 246, 249, 251, 254, 255, 256, 258, 267, 268, 270, 271, 275, 276, 283, 284, 292, 295, 299, 308, 326, 331, 335, 337, 341, 343, 344, 348, 357, 360, 361, 363, 365, 366, 368, 372, 374, 385, 387, 388, 389, 398, 400, 406, 408, 409, 412, 413, 415, 420, 426, 427, 431, 434, 435, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 476, 477, 478, 480, 482], "decompos": [5, 93, 386, 393, 482], "continu": [5, 23, 34, 35, 57, 66, 71, 76, 77, 83, 85, 91, 93, 97, 98, 105, 106, 111, 113, 114, 116, 120, 121, 125, 138, 139, 154, 155, 157, 168, 176, 180, 181, 192, 195, 198, 199, 201, 206, 210, 240, 241, 244, 247, 249, 250, 251, 261, 264, 267, 271, 282, 292, 293, 294, 296, 297, 314, 319, 332, 333, 337, 338, 341, 343, 344, 353, 365, 376, 387, 389, 394, 399, 414, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 442, 444, 451, 454, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 479, 480, 482], "pyarg_unpacktupl": [5, 55, 56, 66, 463, 482], "min": [5, 66, 85, 93, 99, 102, 103, 159, 165, 181, 182, 185, 224, 225, 235, 254, 255, 261, 275, 290, 343, 344, 352, 366, 429, 439, 449, 466, 468, 476, 482], "max": [5, 66, 85, 93, 103, 118, 141, 154, 159, 165, 181, 182, 185, 224, 225, 235, 242, 243, 254, 261, 275, 290, 318, 340, 341, 343, 344, 350, 352, 429, 439, 449, 466, 468, 474, 476, 480, 482], "simpler": [5, 61, 66, 87, 88, 90, 99, 102, 104, 108, 118, 151, 224, 234, 283, 319, 344, 345, 368, 388, 401, 410, 412, 414, 431, 460, 461, 462, 463, 464, 466, 468, 475, 476, 479, 482, 483], "retriev": [5, 11, 23, 27, 32, 35, 38, 44, 48, 52, 54, 59, 66, 70, 71, 73, 76, 82, 83, 90, 91, 93, 102, 106, 138, 151, 165, 166, 170, 175, 176, 180, 183, 188, 195, 202, 206, 207, 222, 224, 225, 233, 241, 242, 246, 247, 254, 256, 258, 265, 266, 268, 271, 283, 289, 293, 296, 299, 302, 304, 305, 315, 319, 322, 328, 330, 340, 341, 344, 345, 352, 359, 364, 371, 381, 388, 394, 401, 404, 408, 412, 427, 429, 435, 454, 462, 463, 464, 465, 466, 467, 468, 471, 472, 475, 476, 477, 478, 480, 481, 482], "meth_vararg": [5, 49, 56, 66, 70, 71, 463, 482], "tabl": [5, 7, 30, 32, 34, 41, 44, 56, 57, 62, 66, 72, 73, 75, 76, 88, 91, 93, 98, 101, 102, 105, 106, 147, 150, 157, 175, 176, 182, 185, 189, 194, 202, 211, 216, 234, 246, 249, 250, 254, 258, 261, 262, 264, 266, 267, 276, 283, 296, 298, 319, 328, 338, 340, 341, 344, 346, 347, 350, 352, 357, 365, 368, 385, 387, 402, 404, 408, 409, 421, 425, 429, 440, 445, 451, 454, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 481, 482], "least": [5, 28, 33, 34, 40, 48, 59, 61, 64, 70, 71, 74, 82, 83, 88, 91, 96, 99, 101, 102, 103, 105, 108, 111, 113, 118, 139, 143, 149, 153, 154, 157, 159, 165, 174, 175, 176, 182, 185, 189, 192, 193, 199, 202, 207, 209, 214, 220, 225, 231, 233, 241, 247, 258, 261, 269, 270, 275, 292, 293, 306, 308, 309, 318, 328, 332, 333, 335, 337, 341, 343, 344, 345, 347, 352, 358, 359, 360, 361, 364, 365, 366, 377, 379, 381, 385, 387, 388, 397, 405, 408, 421, 423, 426, 427, 429, 430, 433, 435, 460, 464, 467, 468, 469, 471, 472, 475, 478, 479, 481, 482], "equal": [5, 7, 25, 32, 33, 34, 36, 41, 52, 57, 61, 62, 64, 66, 73, 83, 87, 92, 93, 99, 104, 110, 114, 118, 120, 131, 132, 140, 141, 147, 149, 154, 159, 165, 169, 175, 176, 180, 182, 185, 189, 192, 194, 195, 201, 207, 215, 220, 224, 225, 226, 227, 242, 258, 259, 261, 262, 264, 266, 272, 275, 278, 284, 289, 293, 295, 297, 308, 319, 331, 334, 337, 340, 341, 343, 344, 346, 347, 352, 361, 363, 364, 375, 376, 377, 381, 383, 385, 386, 387, 388, 389, 399, 401, 407, 409, 411, 412, 422, 426, 427, 429, 430, 431, 434, 435, 440, 449, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 478, 480, 481, 482], "wrong": [5, 16, 32, 41, 71, 82, 83, 93, 97, 101, 102, 106, 108, 118, 144, 175, 182, 192, 211, 212, 247, 275, 292, 293, 295, 296, 335, 340, 347, 352, 365, 387, 388, 394, 406, 427, 440, 448, 462, 464, 465, 466, 467, 471, 472, 473, 474, 476, 482], "element": [5, 7, 13, 32, 34, 39, 41, 48, 52, 53, 57, 61, 62, 66, 76, 82, 83, 99, 102, 104, 105, 115, 118, 120, 121, 132, 138, 139, 141, 147, 151, 155, 159, 160, 171, 174, 175, 177, 180, 181, 185, 189, 190, 192, 194, 195, 202, 204, 206, 208, 212, 219, 222, 224, 225, 227, 231, 235, 239, 241, 244, 249, 255, 261, 262, 267, 272, 273, 275, 283, 292, 293, 294, 296, 304, 314, 318, 319, 322, 332, 335, 337, 343, 344, 345, 348, 352, 365, 368, 374, 375, 377, 380, 383, 384, 385, 387, 393, 401, 407, 410, 411, 414, 415, 416, 418, 419, 424, 426, 427, 429, 430, 439, 441, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 480, 481, 482], "taken": [5, 32, 33, 41, 44, 53, 61, 64, 71, 73, 93, 99, 118, 139, 141, 144, 162, 166, 182, 185, 190, 192, 195, 201, 204, 205, 210, 215, 224, 226, 229, 247, 261, 266, 268, 269, 276, 278, 283, 293, 294, 296, 308, 311, 314, 322, 331, 340, 341, 343, 344, 347, 357, 361, 363, 364, 366, 380, 381, 396, 399, 426, 427, 431, 435, 461, 463, 464, 466, 472, 473, 474, 475, 476, 480, 482], "sourc": [5, 13, 20, 22, 23, 30, 32, 33, 34, 55, 64, 66, 70, 71, 73, 74, 77, 82, 83, 88, 90, 91, 92, 93, 99, 101, 110, 120, 142, 152, 156, 157, 158, 162, 166, 174, 175, 176, 180, 181, 186, 189, 190, 192, 202, 206, 207, 208, 212, 213, 221, 222, 224, 229, 234, 241, 247, 249, 251, 254, 257, 261, 262, 264, 265, 267, 268, 269, 270, 280, 281, 283, 286, 292, 293, 295, 296, 297, 299, 300, 308, 312, 313, 315, 317, 321, 324, 327, 330, 331, 332, 335, 337, 340, 341, 343, 344, 345, 346, 347, 351, 352, 354, 356, 357, 358, 361, 363, 365, 366, 367, 368, 370, 376, 379, 380, 381, 387, 394, 398, 399, 404, 406, 409, 412, 413, 414, 415, 416, 420, 421, 422, 425, 426, 427, 431, 433, 434, 435, 436, 442, 452, 454, 455, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "_weakref": [5, 481, 482], "helper": [5, 32, 66, 84, 91, 114, 127, 163, 168, 175, 186, 195, 204, 217, 234, 250, 254, 257, 258, 264, 267, 289, 299, 319, 332, 341, 362, 366, 380, 383, 387, 389, 394, 412, 466, 467, 471, 472, 475, 477, 478, 482], "weak": [5, 61, 65, 66, 71, 72, 83, 138, 181, 212, 225, 234, 254, 341, 344, 367, 387, 427, 444, 463, 466, 468, 471, 473, 476, 482, 483], "static": [5, 10, 20, 28, 32, 34, 41, 44, 49, 50, 56, 58, 60, 62, 66, 70, 71, 73, 74, 75, 77, 78, 85, 88, 99, 102, 111, 188, 190, 214, 224, 225, 250, 256, 299, 315, 319, 344, 364, 368, 385, 388, 389, 427, 431, 435, 439, 455, 462, 463, 464, 465, 468, 470, 471, 473, 474, 477, 478, 479, 480, 481, 482], "weakref_ref": 5, "self": [5, 10, 22, 28, 43, 50, 56, 59, 61, 66, 70, 71, 73, 74, 77, 82, 85, 91, 92, 93, 95, 97, 99, 100, 103, 104, 114, 118, 120, 121, 125, 131, 132, 139, 142, 144, 148, 155, 159, 160, 168, 171, 175, 180, 182, 185, 186, 190, 202, 204, 210, 212, 215, 220, 222, 224, 225, 226, 229, 231, 239, 241, 242, 247, 250, 253, 255, 259, 261, 262, 274, 283, 288, 289, 292, 293, 296, 297, 299, 305, 318, 320, 321, 333, 335, 337, 338, 340, 344, 345, 358, 361, 368, 371, 374, 381, 383, 384, 385, 387, 388, 389, 394, 398, 401, 409, 412, 416, 418, 419, 420, 426, 427, 431, 439, 440, 445, 450, 451, 454, 461, 462, 463, 464, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 481, 482], "callback": [5, 11, 14, 22, 28, 32, 59, 61, 65, 66, 71, 79, 85, 91, 97, 116, 118, 122, 124, 128, 129, 131, 132, 135, 138, 168, 222, 226, 255, 281, 283, 299, 308, 309, 314, 315, 316, 320, 329, 332, 340, 341, 342, 350, 358, 366, 368, 370, 375, 384, 385, 401, 411, 412, 414, 420, 427, 451, 466, 467, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483], "ref": [5, 33, 34, 61, 65, 66, 76, 176, 181, 401, 454, 455, 462, 468, 471, 476, 480, 482], "pyweakref_newref": [5, 55, 65, 482], "entir": [5, 34, 41, 61, 71, 73, 82, 83, 88, 90, 91, 96, 97, 101, 102, 103, 105, 108, 110, 112, 125, 150, 151, 165, 168, 176, 183, 195, 199, 204, 206, 212, 215, 229, 234, 239, 241, 246, 258, 259, 261, 266, 267, 269, 270, 271, 278, 288, 292, 293, 295, 319, 322, 331, 332, 340, 341, 343, 344, 345, 352, 357, 363, 364, 366, 368, 375, 383, 386, 387, 399, 404, 407, 409, 412, 415, 425, 426, 428, 431, 434, 435, 445, 454, 460, 462, 464, 465, 466, 467, 468, 470, 471, 472, 475, 476, 479, 482], "py_buildvalu": [5, 10, 34, 55, 57, 58, 66, 71, 84, 466, 471, 480, 482], "base": [5, 14, 23, 25, 29, 30, 32, 33, 34, 38, 42, 44, 46, 47, 48, 49, 59, 61, 62, 66, 71, 73, 74, 76, 82, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 106, 116, 118, 120, 122, 125, 131, 135, 138, 143, 144, 145, 146, 147, 150, 154, 162, 163, 166, 168, 172, 175, 179, 180, 181, 182, 185, 186, 188, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 210, 220, 224, 225, 233, 234, 239, 241, 242, 244, 245, 246, 247, 251, 254, 255, 256, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 280, 281, 282, 284, 288, 290, 292, 293, 294, 296, 298, 299, 302, 305, 308, 312, 314, 315, 319, 320, 321, 324, 327, 329, 330, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 357, 359, 361, 365, 368, 372, 374, 375, 381, 384, 386, 387, 388, 389, 393, 394, 397, 398, 399, 401, 402, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 432, 434, 439, 442, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483], "those": [5, 7, 23, 32, 34, 57, 61, 62, 64, 68, 70, 71, 74, 75, 76, 82, 83, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 112, 114, 118, 120, 125, 132, 138, 151, 157, 160, 166, 168, 171, 174, 175, 176, 177, 182, 185, 189, 190, 192, 193, 195, 201, 202, 203, 204, 207, 209, 210, 212, 215, 219, 222, 224, 225, 226, 227, 231, 233, 241, 243, 246, 250, 251, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 275, 276, 283, 289, 292, 293, 295, 296, 297, 299, 302, 308, 310, 311, 314, 319, 322, 324, 325, 329, 330, 331, 333, 335, 337, 341, 343, 344, 352, 354, 357, 360, 361, 364, 365, 368, 374, 375, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 401, 404, 409, 411, 412, 414, 415, 421, 423, 424, 426, 427, 428, 429, 431, 434, 435, 447, 454, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "famili": [5, 16, 32, 41, 47, 52, 66, 93, 105, 125, 135, 139, 142, 163, 199, 211, 234, 271, 283, 293, 298, 338, 355, 361, 367, 368, 371, 409, 454, 460, 464, 465, 466, 468, 475, 478, 479, 480, 482], "exact": [5, 7, 9, 11, 18, 24, 28, 34, 46, 62, 64, 71, 73, 74, 82, 83, 88, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 105, 110, 118, 125, 132, 147, 149, 152, 168, 175, 176, 182, 185, 190, 192, 195, 197, 200, 202, 204, 206, 210, 212, 220, 224, 227, 235, 242, 244, 250, 255, 267, 268, 269, 270, 271, 275, 283, 284, 290, 292, 293, 294, 295, 299, 314, 319, 322, 328, 335, 337, 338, 341, 343, 344, 345, 346, 347, 348, 352, 354, 359, 360, 363, 364, 368, 377, 380, 385, 387, 388, 389, 397, 398, 401, 410, 412, 420, 421, 423, 426, 429, 431, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 482], "whatev": [5, 30, 71, 76, 82, 83, 86, 98, 99, 102, 108, 118, 151, 175, 194, 199, 207, 224, 250, 267, 268, 292, 293, 297, 311, 319, 344, 352, 358, 361, 364, 385, 388, 389, 394, 406, 429, 431, 461, 462, 463, 464, 465, 468, 471, 482], "forc": [5, 32, 33, 61, 66, 71, 82, 83, 93, 96, 101, 108, 125, 132, 152, 158, 162, 176, 180, 182, 183, 185, 192, 234, 239, 247, 258, 267, 282, 288, 293, 308, 309, 311, 319, 333, 345, 347, 348, 352, 361, 365, 388, 401, 406, 427, 431, 454, 468, 475, 476, 477, 478, 480, 481, 482], "suppli": [5, 18, 20, 32, 61, 73, 83, 88, 90, 91, 92, 93, 102, 105, 106, 108, 118, 120, 138, 146, 151, 152, 160, 175, 176, 177, 180, 182, 185, 190, 192, 214, 222, 225, 234, 242, 246, 247, 251, 253, 255, 259, 261, 267, 269, 283, 284, 288, 292, 293, 295, 297, 302, 308, 314, 318, 324, 328, 337, 340, 341, 343, 344, 348, 354, 361, 364, 375, 380, 383, 385, 387, 393, 394, 398, 399, 401, 406, 414, 418, 420, 424, 426, 427, 429, 431, 435, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 476, 478, 482], "never": [5, 18, 22, 23, 28, 32, 33, 34, 41, 57, 58, 59, 61, 66, 71, 73, 74, 83, 88, 90, 93, 98, 99, 101, 102, 106, 108, 118, 125, 127, 131, 132, 139, 141, 144, 147, 151, 157, 162, 165, 166, 168, 169, 174, 175, 176, 180, 182, 185, 186, 189, 195, 198, 204, 212, 225, 229, 239, 241, 242, 244, 246, 250, 255, 258, 259, 262, 265, 266, 267, 269, 278, 283, 292, 293, 294, 296, 297, 299, 314, 319, 322, 324, 328, 332, 334, 338, 340, 341, 344, 347, 348, 357, 358, 361, 364, 368, 384, 385, 388, 393, 399, 401, 402, 406, 409, 412, 414, 421, 424, 426, 427, 429, 431, 434, 435, 454, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "word": [5, 11, 32, 61, 71, 83, 88, 90, 92, 95, 99, 102, 103, 104, 105, 118, 154, 157, 159, 166, 172, 175, 182, 185, 189, 192, 200, 202, 207, 235, 246, 262, 275, 292, 296, 297, 319, 320, 326, 331, 340, 343, 344, 345, 349, 363, 364, 368, 385, 411, 412, 416, 425, 429, 431, 433, 434, 435, 439, 440, 441, 448, 461, 463, 465, 466, 467, 469, 472, 477, 478, 479, 480, 482], "invok": [5, 20, 23, 30, 34, 50, 56, 57, 61, 62, 66, 73, 82, 83, 91, 93, 95, 96, 99, 101, 102, 105, 108, 112, 118, 125, 144, 151, 155, 166, 168, 175, 180, 182, 192, 209, 224, 225, 226, 230, 242, 244, 246, 255, 266, 267, 268, 283, 292, 293, 294, 297, 299, 300, 302, 308, 311, 313, 319, 320, 324, 332, 335, 338, 340, 341, 344, 348, 352, 358, 361, 364, 366, 368, 370, 375, 376, 379, 387, 393, 398, 401, 406, 412, 413, 414, 415, 418, 419, 421, 422, 424, 426, 428, 431, 434, 436, 450, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 479, 481, 482], "malloc": [5, 7, 33, 41, 71, 76, 212, 282, 423, 454, 461, 462, 464, 466, 476, 477, 478, 482], "onc": [5, 7, 22, 23, 24, 28, 32, 33, 34, 54, 55, 57, 59, 61, 70, 71, 73, 74, 82, 83, 88, 90, 92, 93, 97, 98, 99, 101, 102, 104, 105, 108, 114, 115, 118, 121, 125, 131, 132, 134, 138, 139, 140, 149, 151, 155, 157, 158, 159, 162, 165, 166, 168, 185, 187, 189, 192, 195, 204, 210, 212, 217, 222, 225, 229, 231, 233, 239, 244, 246, 249, 250, 251, 255, 258, 261, 267, 268, 269, 270, 271, 283, 284, 288, 292, 293, 295, 299, 306, 308, 314, 319, 320, 328, 329, 332, 333, 334, 337, 338, 340, 341, 344, 347, 353, 357, 361, 364, 366, 368, 381, 387, 388, 389, 394, 398, 399, 401, 402, 406, 409, 410, 412, 414, 415, 423, 426, 427, 429, 430, 431, 435, 454, 455, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 474, 475, 477, 479, 480, 481, 482], "space": [5, 32, 41, 57, 61, 62, 70, 71, 83, 90, 91, 93, 97, 98, 102, 103, 105, 113, 118, 120, 143, 146, 150, 155, 157, 160, 161, 166, 174, 176, 177, 183, 185, 189, 190, 192, 197, 198, 200, 201, 211, 212, 220, 224, 225, 241, 246, 247, 255, 259, 261, 262, 266, 268, 283, 284, 292, 293, 297, 300, 303, 314, 317, 319, 321, 322, 331, 332, 333, 334, 335, 337, 344, 345, 346, 348, 361, 363, 364, 365, 366, 368, 371, 374, 375, 377, 381, 383, 393, 394, 396, 398, 406, 409, 412, 423, 425, 427, 431, 433, 434, 461, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 478, 479, 481, 482], "tab": [5, 64, 66, 75, 120, 146, 155, 174, 176, 177, 189, 192, 197, 201, 212, 224, 241, 246, 255, 262, 297, 317, 319, 320, 323, 331, 334, 344, 345, 348, 363, 367, 374, 393, 402, 418, 434, 440, 444, 448, 454, 461, 466, 468, 471, 475, 476, 478, 479, 480, 481, 482], "comma": [5, 33, 66, 76, 88, 92, 110, 151, 174, 185, 192, 241, 247, 264, 266, 267, 268, 271, 292, 319, 344, 345, 361, 376, 379, 394, 399, 426, 427, 429, 430, 435, 441, 454, 465, 466, 467, 468, 469, 471, 476, 479, 480, 482, 483], "ignor": [5, 14, 18, 23, 24, 32, 33, 34, 38, 46, 57, 61, 62, 64, 66, 71, 74, 75, 88, 98, 102, 105, 106, 108, 113, 120, 121, 132, 135, 136, 138, 139, 143, 144, 149, 151, 155, 157, 158, 162, 165, 166, 168, 171, 174, 175, 176, 180, 182, 184, 185, 187, 189, 190, 192, 195, 198, 199, 207, 212, 214, 215, 217, 222, 224, 225, 226, 229, 235, 241, 242, 246, 247, 248, 249, 250, 251, 255, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 276, 283, 284, 288, 293, 294, 296, 297, 299, 302, 304, 308, 314, 319, 320, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 355, 357, 359, 361, 363, 364, 365, 371, 375, 377, 379, 380, 381, 385, 387, 388, 393, 394, 397, 398, 399, 404, 406, 409, 412, 414, 415, 420, 421, 422, 424, 426, 427, 430, 431, 434, 436, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "within": [5, 7, 22, 32, 41, 45, 48, 52, 66, 71, 74, 83, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 112, 114, 118, 120, 134, 138, 144, 154, 156, 157, 162, 166, 175, 176, 182, 185, 189, 190, 192, 194, 202, 215, 217, 224, 229, 246, 247, 250, 251, 252, 253, 255, 261, 267, 270, 271, 275, 283, 284, 285, 294, 297, 302, 307, 308, 312, 313, 319, 321, 324, 331, 332, 337, 338, 340, 343, 344, 345, 348, 351, 352, 353, 361, 363, 366, 368, 370, 375, 383, 385, 387, 388, 394, 398, 399, 409, 410, 412, 419, 421, 422, 426, 427, 428, 429, 431, 434, 435, 448, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "make": [5, 10, 11, 14, 23, 32, 34, 44, 55, 57, 60, 61, 62, 66, 70, 71, 73, 74, 76, 82, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 118, 120, 121, 125, 132, 138, 139, 140, 141, 151, 155, 156, 157, 159, 160, 162, 166, 168, 169, 174, 175, 176, 178, 180, 182, 185, 187, 189, 190, 191, 192, 195, 196, 199, 204, 205, 208, 210, 211, 212, 217, 220, 224, 225, 226, 229, 231, 233, 234, 241, 244, 246, 250, 252, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 279, 281, 283, 288, 289, 292, 293, 294, 295, 296, 299, 302, 308, 312, 318, 322, 328, 329, 330, 331, 333, 334, 337, 338, 340, 341, 343, 344, 345, 347, 352, 354, 357, 359, 361, 362, 363, 364, 366, 368, 369, 375, 377, 379, 380, 383, 384, 385, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 402, 406, 410, 411, 412, 415, 421, 423, 425, 426, 427, 429, 431, 433, 434, 435, 447, 455, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483], "tad": 5, "readabl": [5, 47, 66, 83, 88, 90, 98, 99, 102, 103, 115, 116, 118, 132, 139, 149, 151, 155, 159, 166, 175, 189, 190, 197, 204, 229, 242, 244, 258, 267, 268, 283, 288, 293, 299, 303, 304, 307, 310, 319, 333, 338, 341, 342, 344, 347, 348, 349, 350, 367, 368, 376, 378, 388, 400, 413, 434, 454, 462, 463, 465, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 482], "wchar_t": [5, 16, 32, 33, 57, 64, 66, 70, 71, 88, 119, 175, 420, 472, 473, 479, 481, 482], "ucs": [5, 352, 463, 475], "increment": [5, 23, 32, 33, 34, 41, 45, 48, 50, 57, 61, 62, 66, 71, 74, 83, 92, 93, 99, 108, 116, 117, 120, 145, 190, 206, 210, 270, 283, 292, 293, 344, 356, 364, 365, 368, 375, 385, 410, 412, 461, 463, 464, 465, 466, 468, 471, 472, 474, 475, 482], "caus": [5, 9, 16, 18, 23, 32, 34, 41, 46, 50, 55, 57, 59, 61, 62, 64, 71, 73, 74, 75, 83, 88, 93, 98, 99, 102, 106, 110, 112, 113, 118, 120, 121, 125, 132, 134, 137, 138, 151, 152, 155, 157, 158, 162, 166, 168, 174, 175, 176, 183, 185, 187, 189, 190, 192, 204, 207, 208, 210, 211, 212, 224, 226, 227, 239, 241, 244, 246, 247, 250, 255, 258, 262, 266, 267, 269, 271, 275, 276, 282, 283, 284, 293, 297, 299, 302, 308, 313, 314, 319, 327, 328, 330, 333, 334, 337, 340, 341, 343, 344, 345, 352, 355, 361, 363, 364, 365, 366, 375, 377, 385, 387, 388, 389, 394, 399, 401, 404, 406, 409, 410, 414, 418, 421, 425, 426, 427, 428, 429, 430, 431, 434, 435, 442, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "produc": [5, 7, 22, 23, 24, 25, 33, 34, 38, 57, 61, 68, 74, 75, 82, 83, 86, 88, 90, 93, 98, 99, 100, 102, 103, 105, 108, 118, 120, 121, 138, 149, 151, 157, 160, 162, 166, 174, 175, 176, 182, 185, 186, 189, 192, 193, 195, 196, 200, 201, 202, 204, 207, 212, 213, 222, 224, 227, 229, 230, 233, 234, 235, 247, 258, 261, 262, 267, 270, 276, 283, 288, 293, 299, 302, 305, 308, 313, 318, 319, 321, 341, 343, 344, 345, 347, 348, 352, 357, 364, 376, 377, 379, 383, 393, 396, 405, 406, 410, 411, 413, 414, 415, 420, 421, 423, 427, 429, 431, 434, 448, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 480, 481, 482], "found": [5, 14, 17, 22, 30, 32, 34, 41, 44, 48, 53, 56, 57, 59, 61, 62, 69, 70, 71, 74, 75, 77, 83, 86, 88, 91, 92, 93, 95, 97, 98, 99, 102, 105, 106, 111, 112, 118, 120, 121, 147, 149, 151, 157, 162, 166, 169, 174, 175, 176, 190, 192, 195, 196, 198, 202, 204, 206, 207, 210, 212, 214, 215, 222, 224, 225, 226, 227, 229, 232, 235, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 255, 261, 265, 266, 267, 268, 270, 271, 272, 276, 278, 279, 282, 283, 286, 293, 295, 296, 297, 302, 310, 314, 319, 322, 332, 333, 335, 337, 339, 340, 341, 343, 344, 348, 352, 353, 354, 357, 358, 361, 368, 370, 375, 377, 384, 385, 386, 387, 388, 389, 394, 399, 405, 406, 409, 411, 412, 413, 414, 418, 419, 422, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 440, 450, 451, 452, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "therefor": [5, 23, 32, 34, 41, 47, 48, 61, 71, 73, 74, 82, 83, 88, 90, 93, 98, 99, 100, 101, 102, 105, 114, 118, 120, 138, 146, 151, 157, 172, 175, 180, 182, 207, 212, 213, 214, 224, 226, 231, 242, 253, 258, 262, 266, 269, 281, 283, 293, 294, 299, 313, 319, 330, 332, 333, 337, 341, 344, 352, 359, 364, 374, 385, 388, 399, 412, 413, 420, 421, 423, 426, 427, 429, 433, 434, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 475, 478, 479, 482], "yet": [5, 13, 14, 23, 28, 30, 32, 33, 44, 61, 62, 71, 77, 82, 83, 87, 88, 90, 92, 97, 101, 102, 111, 125, 132, 136, 138, 151, 165, 168, 175, 176, 185, 195, 196, 204, 212, 226, 231, 235, 250, 269, 283, 293, 295, 297, 308, 334, 335, 341, 348, 364, 380, 385, 388, 409, 412, 423, 428, 430, 435, 461, 463, 464, 466, 468, 471, 473, 476, 478, 479, 481, 482], "systemerror": [5, 23, 27, 44, 48, 53, 58, 62, 66, 212, 442, 449, 473, 478, 482], "constructor": [5, 18, 23, 28, 51, 53, 61, 62, 66, 71, 77, 85, 91, 92, 93, 96, 98, 99, 101, 110, 118, 120, 125, 134, 139, 149, 150, 156, 157, 159, 160, 163, 166, 171, 174, 175, 180, 182, 185, 189, 192, 197, 200, 201, 202, 205, 206, 207, 212, 217, 220, 224, 225, 233, 234, 236, 241, 242, 245, 247, 258, 259, 261, 262, 267, 268, 270, 271, 278, 283, 292, 298, 299, 305, 307, 308, 316, 321, 325, 327, 328, 330, 331, 335, 337, 338, 341, 344, 345, 351, 357, 358, 361, 363, 364, 366, 368, 383, 384, 385, 387, 388, 389, 394, 401, 402, 406, 412, 419, 421, 422, 424, 427, 429, 440, 442, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "compat": [5, 23, 24, 32, 33, 41, 47, 55, 57, 61, 62, 64, 66, 73, 74, 77, 82, 85, 88, 90, 95, 97, 98, 99, 102, 105, 106, 108, 117, 118, 121, 125, 127, 139, 144, 145, 157, 160, 166, 175, 183, 185, 192, 193, 195, 200, 202, 204, 206, 207, 212, 213, 221, 227, 229, 242, 244, 246, 247, 249, 250, 251, 253, 254, 255, 258, 259, 266, 267, 268, 271, 283, 288, 293, 295, 296, 299, 301, 302, 308, 312, 314, 319, 322, 325, 332, 337, 340, 341, 344, 348, 352, 356, 357, 361, 364, 365, 367, 380, 383, 385, 386, 387, 393, 394, 396, 397, 398, 400, 406, 410, 418, 420, 421, 422, 424, 426, 427, 429, 431, 434, 435, 454, 455, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "dict": [5, 10, 22, 23, 26, 30, 32, 34, 52, 57, 61, 66, 71, 76, 77, 82, 83, 85, 88, 91, 93, 97, 110, 118, 120, 125, 159, 163, 166, 170, 174, 180, 181, 183, 186, 189, 190, 192, 204, 224, 225, 226, 243, 250, 254, 255, 261, 262, 264, 267, 268, 269, 283, 288, 291, 299, 304, 307, 326, 330, 340, 341, 345, 354, 361, 364, 368, 375, 378, 384, 385, 387, 401, 412, 418, 426, 427, 429, 430, 440, 441, 445, 449, 451, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "pair": [5, 7, 22, 28, 32, 39, 62, 66, 71, 73, 83, 90, 92, 93, 96, 102, 105, 118, 125, 132, 135, 139, 141, 144, 151, 154, 159, 166, 176, 180, 183, 185, 189, 190, 192, 195, 196, 201, 208, 212, 220, 227, 229, 239, 243, 255, 259, 261, 262, 268, 271, 275, 283, 288, 293, 294, 296, 297, 299, 309, 322, 332, 337, 338, 340, 341, 344, 348, 354, 357, 358, 360, 362, 364, 368, 374, 375, 383, 384, 385, 388, 393, 394, 401, 406, 409, 412, 415, 416, 426, 427, 429, 434, 435, 440, 441, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 475, 476, 478, 482], "consecut": [5, 22, 59, 62, 93, 120, 143, 157, 261, 275, 344, 345, 383, 434, 454, 465, 476, 482], "add": [5, 7, 28, 30, 32, 33, 34, 44, 53, 56, 57, 61, 66, 68, 71, 74, 75, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 98, 99, 101, 102, 104, 105, 106, 108, 110, 115, 117, 118, 120, 121, 138, 139, 141, 143, 151, 152, 155, 156, 157, 159, 160, 162, 166, 168, 176, 180, 181, 182, 184, 185, 187, 188, 190, 192, 193, 194, 195, 196, 199, 202, 204, 205, 207, 212, 222, 223, 224, 225, 226, 229, 231, 233, 235, 242, 243, 244, 246, 250, 255, 258, 261, 262, 264, 267, 268, 271, 276, 281, 283, 285, 289, 290, 291, 292, 293, 296, 299, 301, 302, 306, 307, 308, 319, 321, 328, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 350, 352, 353, 354, 357, 361, 363, 365, 367, 368, 374, 375, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 401, 406, 409, 410, 412, 413, 418, 419, 420, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 439, 442, 445, 448, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "serv": [5, 71, 74, 98, 99, 111, 125, 132, 135, 147, 185, 192, 201, 202, 225, 239, 244, 253, 261, 268, 283, 293, 299, 313, 333, 340, 341, 343, 368, 383, 385, 406, 412, 419, 431, 434, 465, 469, 474, 475, 477, 479, 482], "respect": [5, 7, 18, 22, 23, 30, 32, 33, 38, 45, 46, 48, 50, 54, 60, 62, 70, 71, 73, 74, 76, 82, 83, 91, 92, 98, 99, 102, 110, 118, 120, 131, 134, 138, 141, 149, 150, 151, 154, 157, 162, 166, 175, 176, 182, 185, 190, 192, 193, 195, 207, 208, 212, 214, 222, 224, 229, 242, 244, 249, 253, 258, 262, 267, 268, 269, 270, 275, 278, 283, 293, 294, 296, 299, 305, 308, 309, 322, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 357, 364, 365, 374, 375, 383, 385, 387, 396, 410, 425, 427, 429, 431, 435, 454, 461, 463, 465, 467, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "py_vabuildvalu": [5, 55], "py_fals": [6, 61, 62, 73, 430, 482], "py_tru": [6, 61, 62, 73, 430, 482], "pybool_check": 6, "pybool_typ": [6, 55], "py_return_fals": [6, 465], "py_return_tru": [6, 465], "pybool_fromlong": [6, 55], "certain": [7, 16, 23, 40, 41, 48, 57, 61, 64, 71, 75, 76, 83, 86, 90, 93, 98, 99, 102, 103, 108, 118, 132, 139, 144, 157, 172, 175, 182, 189, 192, 194, 195, 198, 202, 204, 205, 207, 208, 212, 233, 246, 255, 266, 267, 268, 269, 270, 271, 272, 283, 292, 293, 295, 297, 306, 307, 308, 337, 341, 346, 348, 353, 357, 364, 365, 366, 368, 385, 386, 387, 388, 393, 406, 409, 418, 420, 427, 429, 431, 434, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 475, 476, 479, 480, 482], "wrap": [7, 18, 21, 32, 42, 56, 61, 66, 76, 77, 86, 88, 91, 95, 99, 104, 105, 110, 112, 118, 120, 125, 128, 136, 138, 139, 141, 147, 149, 155, 157, 168, 175, 176, 180, 189, 190, 192, 200, 201, 206, 207, 212, 219, 223, 224, 225, 229, 230, 233, 241, 246, 251, 254, 255, 258, 261, 267, 268, 270, 281, 283, 292, 293, 302, 304, 333, 340, 341, 344, 347, 352, 355, 361, 362, 367, 375, 384, 385, 387, 388, 389, 393, 394, 404, 406, 412, 416, 426, 427, 451, 460, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 480, 482], "parti": [7, 24, 30, 32, 34, 55, 66, 82, 83, 99, 108, 110, 125, 127, 131, 132, 137, 157, 163, 175, 180, 182, 183, 224, 234, 250, 251, 267, 283, 293, 299, 302, 319, 330, 334, 340, 341, 343, 352, 354, 364, 368, 379, 385, 398, 399, 401, 424, 425, 427, 460, 461, 462, 464, 465, 467, 468, 470, 471, 472, 474, 475, 476, 478, 480, 481, 482], "librari": [7, 18, 23, 24, 32, 33, 34, 41, 44, 55, 57, 61, 64, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 82, 83, 86, 88, 89, 90, 93, 95, 97, 101, 102, 103, 104, 105, 106, 108, 112, 116, 118, 122, 125, 132, 138, 139, 142, 145, 165, 166, 168, 176, 177, 182, 183, 185, 186, 191, 192, 193, 202, 207, 211, 227, 229, 234, 242, 246, 249, 251, 256, 257, 258, 262, 264, 266, 267, 269, 275, 283, 287, 292, 293, 294, 296, 298, 299, 302, 308, 313, 314, 319, 320, 328, 330, 331, 333, 334, 337, 340, 341, 343, 344, 345, 352, 353, 354, 357, 361, 364, 365, 367, 368, 374, 377, 378, 385, 387, 389, 390, 393, 399, 406, 408, 409, 421, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 444, 453, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "special": [7, 14, 23, 30, 32, 33, 34, 41, 48, 56, 58, 59, 61, 62, 66, 71, 73, 76, 82, 83, 85, 88, 90, 92, 93, 97, 98, 99, 100, 101, 102, 105, 108, 112, 114, 118, 120, 125, 136, 137, 138, 143, 144, 151, 152, 154, 155, 166, 167, 168, 174, 175, 176, 179, 180, 182, 186, 190, 192, 195, 202, 204, 207, 212, 219, 221, 227, 229, 230, 244, 246, 249, 250, 254, 255, 259, 261, 262, 266, 267, 268, 271, 272, 281, 282, 283, 290, 292, 293, 296, 299, 302, 319, 321, 324, 329, 331, 332, 333, 337, 341, 342, 343, 347, 348, 352, 357, 360, 364, 368, 374, 387, 388, 393, 394, 398, 401, 406, 409, 412, 414, 418, 424, 425, 428, 429, 430, 432, 434, 435, 455, 460, 461, 462, 463, 465, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "imag": [7, 15, 41, 66, 83, 85, 151, 154, 176, 197, 199, 205, 224, 225, 242, 248, 262, 289, 290, 322, 336, 344, 345, 352, 367, 375, 383, 394, 401, 405, 418, 427, 430, 474, 479, 482], "numer": [7, 40, 46, 61, 62, 66, 83, 88, 93, 98, 99, 102, 103, 105, 106, 121, 144, 147, 154, 157, 174, 176, 185, 190, 208, 210, 211, 212, 220, 224, 232, 233, 237, 239, 241, 244, 254, 262, 266, 267, 275, 283, 290, 293, 302, 308, 310, 314, 319, 325, 331, 335, 337, 340, 341, 343, 345, 352, 362, 368, 375, 376, 383, 386, 387, 388, 394, 412, 418, 421, 429, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 482], "analysi": [7, 32, 34, 66, 100, 102, 121, 152, 154, 189, 221, 254, 264, 279, 308, 385, 429, 432, 433, 435, 466, 475, 477, 482], "while": [7, 16, 22, 23, 28, 32, 34, 35, 39, 44, 47, 48, 50, 55, 61, 62, 66, 68, 70, 71, 73, 74, 82, 83, 85, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 108, 110, 113, 114, 118, 120, 125, 132, 133, 135, 137, 138, 139, 147, 149, 151, 154, 157, 159, 166, 168, 169, 171, 174, 175, 176, 178, 182, 183, 185, 189, 190, 191, 192, 195, 198, 207, 208, 210, 212, 224, 225, 229, 231, 233, 234, 235, 241, 242, 246, 250, 251, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 275, 283, 284, 292, 293, 296, 297, 299, 302, 306, 308, 311, 314, 316, 318, 319, 326, 328, 329, 331, 333, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 359, 361, 363, 364, 365, 368, 370, 379, 380, 383, 385, 387, 393, 394, 397, 398, 399, 400, 409, 412, 421, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 448, 449, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "common": [7, 23, 32, 33, 34, 56, 61, 66, 71, 74, 76, 82, 83, 87, 90, 91, 92, 93, 96, 98, 99, 103, 104, 105, 106, 112, 113, 118, 127, 134, 138, 147, 157, 159, 166, 168, 174, 175, 180, 181, 189, 192, 194, 199, 200, 202, 204, 206, 207, 210, 212, 214, 215, 218, 222, 234, 235, 241, 242, 244, 246, 251, 254, 258, 259, 261, 262, 265, 267, 271, 272, 275, 276, 283, 284, 285, 292, 293, 295, 299, 307, 318, 331, 332, 333, 335, 338, 340, 341, 343, 346, 347, 348, 350, 353, 357, 360, 361, 362, 363, 364, 365, 366, 368, 372, 374, 383, 385, 387, 388, 389, 390, 393, 394, 398, 399, 407, 416, 418, 420, 421, 423, 424, 426, 427, 429, 430, 431, 434, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "characterist": [7, 83, 299, 346, 352, 466, 467], "back": [7, 10, 15, 22, 25, 28, 34, 38, 40, 41, 57, 61, 62, 66, 71, 74, 82, 83, 87, 88, 93, 95, 99, 101, 102, 103, 104, 105, 110, 118, 120, 127, 132, 146, 151, 154, 155, 157, 160, 166, 168, 176, 180, 182, 185, 189, 190, 192, 193, 195, 204, 207, 214, 221, 222, 224, 226, 229, 231, 242, 244, 250, 258, 262, 268, 269, 278, 282, 283, 284, 289, 292, 293, 294, 295, 297, 299, 312, 314, 319, 330, 337, 338, 340, 341, 342, 344, 345, 352, 361, 365, 368, 376, 377, 383, 389, 393, 394, 412, 416, 418, 419, 421, 423, 424, 426, 427, 431, 435, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482], "desir": [7, 9, 23, 32, 34, 41, 59, 71, 83, 90, 91, 92, 93, 98, 99, 102, 105, 108, 118, 136, 138, 151, 157, 160, 166, 168, 175, 176, 188, 189, 190, 207, 211, 222, 225, 234, 239, 244, 246, 249, 250, 258, 259, 266, 267, 271, 272, 276, 278, 292, 294, 297, 302, 307, 311, 319, 320, 338, 340, 341, 343, 344, 345, 353, 361, 363, 364, 368, 374, 375, 383, 398, 401, 404, 411, 412, 415, 427, 429, 431, 454, 461, 463, 464, 465, 466, 467, 468, 476, 477, 478, 480, 482], "situat": [7, 34, 41, 61, 71, 73, 83, 86, 88, 92, 93, 97, 98, 99, 101, 103, 104, 106, 108, 112, 118, 151, 157, 168, 180, 190, 206, 212, 229, 234, 250, 253, 258, 267, 271, 283, 292, 335, 348, 361, 364, 389, 396, 399, 409, 427, 436, 463, 468, 469, 476, 477, 478, 482], "direct": [7, 13, 16, 24, 28, 30, 32, 33, 34, 41, 44, 45, 48, 52, 55, 56, 57, 61, 62, 65, 66, 68, 70, 71, 73, 74, 76, 82, 83, 86, 88, 91, 92, 95, 96, 97, 98, 99, 101, 104, 106, 108, 110, 112, 113, 114, 118, 120, 127, 131, 132, 138, 146, 147, 149, 150, 151, 157, 158, 159, 160, 162, 163, 165, 166, 168, 174, 175, 180, 182, 185, 186, 189, 190, 193, 195, 200, 204, 205, 208, 209, 211, 212, 217, 220, 224, 225, 226, 231, 234, 241, 242, 244, 246, 249, 251, 252, 253, 254, 255, 258, 259, 262, 266, 267, 268, 270, 271, 278, 280, 283, 292, 293, 294, 295, 299, 302, 306, 307, 308, 314, 319, 320, 324, 330, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 357, 361, 363, 364, 365, 366, 368, 373, 374, 375, 377, 379, 380, 383, 384, 387, 388, 389, 394, 399, 401, 406, 409, 412, 413, 416, 420, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 442, 454, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "intermedi": [7, 77, 82, 85, 93, 185, 190, 205, 225, 250, 261, 275, 292, 293, 332, 341, 388, 431, 466, 470, 474, 479, 482], "facil": [7, 32, 66, 88, 90, 98, 116, 142, 144, 155, 156, 176, 246, 254, 258, 264, 269, 271, 293, 299, 337, 341, 345, 355, 357, 368, 383, 427, 460, 464, 482], "level": [7, 13, 16, 22, 23, 24, 30, 31, 33, 34, 41, 42, 55, 57, 61, 66, 71, 72, 73, 76, 77, 82, 83, 87, 88, 91, 92, 93, 95, 97, 101, 103, 104, 105, 106, 108, 116, 118, 120, 124, 125, 128, 132, 134, 135, 136, 138, 139, 140, 146, 149, 150, 152, 154, 157, 159, 162, 163, 165, 166, 168, 169, 176, 179, 180, 182, 189, 190, 192, 193, 201, 203, 206, 209, 211, 212, 218, 222, 224, 225, 226, 229, 230, 231, 233, 235, 241, 242, 244, 246, 247, 249, 250, 251, 254, 255, 256, 260, 261, 268, 269, 270, 271, 279, 281, 282, 283, 284, 285, 288, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 307, 308, 311, 312, 313, 314, 315, 319, 321, 322, 324, 330, 331, 333, 334, 335, 340, 341, 343, 347, 350, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 368, 374, 375, 384, 387, 388, 394, 398, 399, 401, 402, 406, 408, 409, 410, 412, 414, 418, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 439, 449, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483], "side": [7, 14, 30, 32, 58, 66, 71, 73, 82, 83, 88, 93, 99, 102, 103, 105, 106, 120, 125, 132, 151, 154, 159, 165, 168, 176, 180, 186, 189, 190, 195, 209, 222, 225, 241, 242, 250, 266, 267, 269, 283, 288, 293, 299, 302, 311, 318, 323, 324, 330, 337, 338, 344, 348, 352, 361, 368, 375, 385, 387, 388, 406, 412, 424, 426, 429, 431, 435, 441, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "export": [7, 23, 34, 41, 42, 44, 47, 61, 66, 69, 70, 71, 75, 83, 106, 108, 116, 120, 150, 174, 182, 299, 306, 337, 340, 344, 352, 377, 435, 455, 464, 468, 474, 475, 477, 478, 479, 480, 481, 482], "expos": [7, 15, 27, 37, 42, 43, 44, 45, 47, 53, 55, 56, 60, 61, 62, 70, 71, 74, 87, 98, 106, 138, 175, 176, 180, 185, 209, 214, 249, 250, 255, 259, 262, 266, 267, 281, 283, 293, 299, 307, 330, 331, 335, 344, 345, 346, 348, 352, 379, 384, 386, 401, 404, 406, 419, 421, 424, 427, 431, 464, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "section": [7, 16, 17, 33, 34, 41, 50, 53, 56, 61, 62, 66, 69, 70, 71, 73, 74, 75, 83, 86, 88, 90, 91, 93, 95, 96, 98, 99, 102, 105, 106, 108, 112, 118, 120, 125, 131, 132, 134, 136, 138, 143, 145, 147, 151, 155, 157, 159, 166, 168, 174, 175, 180, 183, 185, 192, 193, 194, 197, 201, 202, 211, 216, 229, 234, 240, 241, 242, 246, 247, 249, 258, 261, 262, 267, 268, 271, 292, 293, 299, 305, 307, 308, 314, 319, 321, 328, 332, 337, 340, 341, 344, 345, 347, 348, 352, 357, 364, 366, 368, 383, 387, 388, 389, 393, 394, 406, 408, 409, 410, 412, 414, 415, 418, 421, 426, 427, 428, 429, 431, 434, 435, 436, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "consum": [7, 57, 61, 62, 66, 82, 83, 93, 102, 103, 112, 118, 121, 124, 126, 133, 135, 151, 157, 168, 174, 190, 193, 206, 230, 241, 258, 261, 262, 283, 288, 292, 293, 296, 298, 308, 316, 319, 322, 330, 347, 361, 364, 381, 385, 388, 393, 408, 412, 423, 427, 430, 454, 461, 465, 466, 467, 468, 472, 474, 475, 476, 478, 480, 482], "sever": [7, 24, 28, 32, 34, 41, 64, 70, 71, 73, 75, 82, 83, 88, 91, 92, 93, 97, 98, 99, 102, 103, 105, 106, 108, 110, 118, 120, 125, 134, 136, 150, 156, 157, 160, 165, 166, 175, 176, 182, 183, 185, 187, 190, 192, 194, 198, 211, 212, 222, 224, 235, 240, 250, 255, 259, 267, 268, 269, 271, 273, 281, 283, 287, 292, 293, 294, 295, 296, 299, 306, 307, 308, 311, 319, 321, 329, 333, 335, 337, 338, 340, 341, 342, 344, 347, 348, 357, 364, 367, 368, 374, 375, 377, 379, 380, 383, 385, 386, 387, 388, 389, 394, 399, 401, 404, 405, 408, 414, 418, 423, 424, 426, 427, 431, 433, 435, 448, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "obtain": [7, 30, 34, 62, 66, 90, 96, 98, 102, 125, 136, 149, 151, 152, 153, 176, 182, 185, 189, 195, 196, 202, 204, 207, 214, 224, 231, 234, 247, 258, 259, 261, 266, 267, 268, 269, 270, 278, 283, 292, 293, 294, 308, 311, 313, 319, 337, 341, 344, 348, 351, 365, 394, 397, 398, 401, 406, 412, 413, 414, 425, 426, 429, 435, 460, 461, 463, 464, 466, 467, 474, 475, 476, 477, 478, 479, 482], "simpl": [7, 32, 34, 42, 61, 62, 65, 66, 71, 73, 82, 83, 88, 90, 92, 93, 96, 97, 98, 99, 104, 105, 106, 108, 111, 113, 118, 120, 137, 139, 140, 141, 150, 151, 155, 157, 160, 166, 168, 169, 172, 173, 175, 180, 182, 183, 186, 188, 189, 193, 195, 199, 204, 206, 207, 208, 221, 222, 225, 226, 229, 233, 241, 243, 247, 254, 256, 262, 268, 269, 271, 273, 278, 283, 289, 292, 293, 295, 296, 297, 299, 304, 307, 308, 319, 324, 329, 333, 335, 337, 340, 343, 344, 345, 357, 358, 361, 364, 366, 368, 377, 379, 380, 383, 384, 385, 387, 389, 393, 394, 398, 399, 401, 405, 407, 408, 409, 410, 412, 413, 418, 419, 420, 421, 426, 429, 430, 432, 439, 445, 454, 460, 461, 462, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 480, 481, 482, 483], "orient": [7, 41, 66, 74, 83, 85, 91, 93, 105, 132, 150, 200, 218, 221, 254, 283, 308, 337, 344, 364, 365, 367, 368, 375, 383, 439, 462, 467, 474, 476], "multi": [7, 16, 31, 32, 34, 66, 69, 71, 82, 83, 84, 85, 92, 93, 97, 99, 102, 105, 111, 116, 120, 139, 149, 150, 185, 189, 190, 192, 233, 246, 250, 261, 267, 268, 270, 283, 316, 319, 322, 325, 331, 332, 340, 343, 344, 364, 366, 406, 419, 421, 426, 434, 444, 454, 460, 461, 466, 468, 471, 475, 476, 480, 482, 483], "file": [7, 16, 20, 23, 25, 30, 31, 32, 33, 40, 44, 48, 55, 57, 61, 64, 66, 68, 69, 70, 71, 73, 74, 75, 76, 79, 84, 85, 87, 91, 92, 93, 95, 97, 100, 102, 103, 106, 110, 112, 113, 115, 116, 117, 119, 120, 124, 129, 130, 131, 132, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 155, 156, 157, 159, 162, 168, 173, 175, 176, 177, 182, 183, 184, 185, 186, 189, 190, 195, 199, 200, 203, 205, 206, 207, 211, 212, 214, 216, 217, 218, 219, 222, 224, 227, 228, 229, 230, 239, 241, 242, 244, 247, 248, 249, 252, 253, 254, 255, 257, 259, 260, 262, 264, 265, 266, 267, 269, 271, 273, 274, 276, 277, 279, 280, 281, 283, 288, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 312, 313, 314, 317, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 396, 398, 399, 401, 402, 403, 404, 405, 406, 408, 410, 411, 413, 415, 416, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 439, 440, 441, 442, 444, 445, 447, 448, 449, 451, 454, 457, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 481, 482, 483], "seri": [7, 32, 59, 93, 102, 104, 110, 118, 120, 155, 174, 175, 185, 190, 224, 292, 314, 337, 344, 354, 364, 374, 385, 388, 389, 393, 406, 429, 440, 448, 449, 463, 465, 466, 467, 468, 471, 476, 479], "written": [7, 9, 18, 23, 24, 33, 34, 41, 44, 48, 57, 62, 66, 70, 71, 74, 82, 83, 88, 89, 90, 91, 93, 97, 99, 100, 101, 102, 103, 105, 108, 110, 112, 115, 125, 132, 136, 138, 139, 146, 151, 152, 156, 157, 160, 162, 166, 168, 174, 175, 176, 183, 190, 192, 195, 201, 204, 212, 213, 224, 226, 229, 233, 234, 244, 246, 255, 258, 269, 271, 278, 281, 283, 288, 292, 293, 295, 299, 300, 301, 304, 307, 308, 311, 313, 320, 324, 328, 330, 332, 333, 337, 338, 340, 341, 343, 344, 352, 356, 357, 360, 361, 379, 381, 383, 384, 385, 387, 389, 399, 400, 401, 404, 406, 407, 409, 412, 418, 419, 420, 421, 422, 425, 427, 430, 433, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "intern": [7, 8, 9, 10, 11, 22, 23, 24, 30, 32, 33, 34, 40, 41, 44, 53, 57, 59, 61, 62, 66, 71, 73, 74, 76, 82, 88, 90, 91, 93, 98, 99, 101, 102, 105, 106, 110, 116, 118, 120, 125, 127, 134, 138, 140, 149, 154, 155, 156, 157, 160, 166, 174, 175, 180, 182, 183, 185, 190, 192, 198, 203, 206, 207, 209, 212, 234, 242, 244, 246, 250, 254, 255, 258, 261, 265, 266, 267, 269, 270, 274, 275, 276, 278, 283, 293, 297, 299, 302, 307, 308, 314, 315, 322, 328, 331, 332, 333, 337, 340, 341, 346, 348, 350, 352, 357, 358, 361, 364, 365, 368, 374, 375, 380, 383, 385, 387, 394, 397, 398, 399, 401, 409, 410, 412, 414, 418, 421, 422, 423, 427, 429, 449, 455, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "readinto": [7, 66, 116, 149, 241, 256, 258, 299, 467, 475, 477, 482], "argument": [7, 9, 11, 13, 14, 15, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 41, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 71, 73, 74, 76, 77, 82, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 120, 125, 127, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 169, 172, 174, 176, 177, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 307, 308, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 347, 350, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 365, 366, 368, 370, 375, 377, 378, 379, 380, 383, 384, 385, 387, 388, 393, 394, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 439, 441, 442, 444, 445, 449, 450, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482], "select": [7, 55, 57, 62, 64, 66, 82, 91, 92, 98, 100, 102, 103, 105, 118, 120, 121, 125, 137, 139, 141, 154, 159, 168, 175, 176, 209, 210, 212, 222, 224, 229, 241, 245, 246, 247, 251, 254, 256, 258, 260, 261, 262, 266, 268, 270, 281, 283, 288, 293, 299, 305, 308, 311, 313, 318, 329, 333, 335, 337, 338, 340, 344, 345, 347, 348, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 383, 385, 389, 402, 406, 412, 416, 423, 426, 427, 428, 429, 431, 455, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482], "reject": [7, 76, 96, 102, 166, 242, 247, 275, 318, 385, 434, 435, 461, 468, 476, 478, 482], "acquir": [7, 32, 47, 66, 71, 87, 113, 116, 137, 163, 168, 207, 214, 249, 267, 271, 283, 293, 333, 341, 357, 364, 373, 427, 466, 467, 468, 469, 472, 474, 475, 477, 479, 482], "over": [7, 13, 22, 23, 24, 29, 32, 34, 35, 41, 47, 48, 56, 59, 62, 66, 68, 71, 72, 73, 82, 88, 89, 90, 91, 92, 93, 98, 99, 101, 102, 103, 105, 118, 120, 121, 125, 132, 141, 144, 147, 151, 152, 159, 160, 165, 166, 169, 174, 175, 176, 182, 183, 185, 189, 190, 192, 195, 200, 201, 203, 204, 210, 218, 222, 224, 225, 229, 231, 235, 242, 246, 247, 250, 252, 253, 254, 258, 259, 261, 267, 268, 269, 271, 276, 278, 283, 288, 293, 299, 300, 305, 306, 308, 319, 322, 328, 329, 332, 335, 337, 340, 341, 343, 344, 345, 348, 350, 352, 357, 361, 366, 368, 374, 375, 376, 377, 379, 384, 385, 387, 388, 389, 396, 397, 399, 406, 408, 409, 411, 412, 418, 421, 423, 426, 427, 429, 431, 434, 439, 440, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482], "target": [7, 32, 34, 62, 66, 82, 91, 95, 98, 99, 101, 108, 118, 120, 125, 132, 135, 168, 182, 185, 190, 210, 240, 241, 246, 250, 251, 255, 268, 269, 273, 283, 284, 292, 293, 296, 314, 316, 319, 332, 333, 337, 338, 340, 351, 357, 361, 364, 368, 370, 385, 387, 388, 398, 406, 409, 412, 414, 418, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 435, 441, 454, 457, 460, 464, 466, 467, 469, 471, 474, 475, 476, 479, 480, 482], "pyobject_getbuff": [7, 47, 55, 61, 467, 472, 482], "right": [7, 15, 16, 41, 46, 62, 66, 70, 71, 76, 83, 88, 90, 93, 99, 102, 103, 105, 108, 110, 120, 121, 141, 144, 146, 147, 151, 154, 155, 157, 159, 168, 175, 176, 182, 185, 189, 190, 192, 195, 212, 215, 218, 221, 224, 225, 234, 246, 247, 255, 267, 275, 288, 289, 292, 293, 295, 296, 299, 302, 308, 319, 330, 337, 341, 344, 345, 354, 363, 368, 373, 374, 375, 383, 387, 388, 389, 399, 402, 403, 410, 423, 424, 425, 426, 427, 429, 430, 434, 435, 451, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 478, 479, 480, 482], "sibl": [7, 83, 110, 118, 224, 375, 409], "isn": [7, 22, 23, 25, 30, 32, 50, 61, 71, 74, 77, 82, 83, 86, 87, 88, 90, 91, 92, 96, 97, 99, 101, 102, 103, 105, 108, 112, 113, 118, 120, 132, 138, 147, 156, 157, 165, 168, 174, 182, 190, 192, 195, 201, 203, 204, 226, 233, 242, 247, 255, 258, 269, 293, 296, 302, 314, 319, 337, 338, 341, 342, 343, 352, 354, 368, 377, 387, 388, 389, 393, 402, 404, 405, 406, 408, 418, 427, 435, 448, 461, 462, 463, 464, 465, 466, 467, 468, 471, 474, 482], "anymor": [7, 11, 30, 32, 47, 61, 62, 83, 88, 100, 103, 132, 226, 262, 283, 293, 337, 352, 383, 468, 469, 473, 474, 475, 480, 482], "could": [7, 22, 23, 30, 32, 34, 38, 41, 46, 54, 59, 61, 71, 74, 75, 76, 83, 86, 88, 90, 91, 92, 93, 97, 98, 99, 101, 103, 104, 105, 106, 108, 110, 112, 114, 118, 120, 125, 127, 128, 131, 132, 134, 137, 141, 151, 155, 166, 175, 176, 182, 192, 199, 200, 205, 207, 212, 215, 222, 224, 226, 227, 229, 235, 246, 249, 255, 258, 259, 261, 262, 267, 268, 269, 271, 283, 292, 293, 295, 296, 297, 299, 308, 311, 314, 319, 321, 329, 331, 333, 337, 340, 348, 352, 357, 361, 364, 367, 368, 381, 385, 387, 388, 389, 393, 394, 396, 397, 401, 406, 409, 424, 427, 429, 431, 433, 434, 435, 442, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "lead": [7, 18, 38, 61, 62, 71, 73, 76, 83, 92, 96, 97, 98, 99, 101, 102, 114, 120, 138, 150, 151, 155, 162, 166, 182, 185, 187, 189, 192, 195, 198, 204, 207, 212, 220, 224, 227, 230, 242, 244, 246, 249, 250, 255, 258, 259, 261, 267, 269, 271, 275, 276, 283, 293, 294, 296, 297, 299, 308, 314, 318, 337, 341, 343, 344, 345, 347, 352, 353, 355, 358, 361, 363, 365, 366, 380, 387, 388, 393, 394, 399, 409, 412, 421, 426, 427, 428, 429, 431, 434, 435, 436, 454, 460, 461, 464, 465, 466, 467, 469, 475, 476, 478, 479, 480, 481, 482], "various": [7, 20, 24, 34, 41, 56, 60, 61, 66, 71, 73, 77, 83, 88, 89, 90, 91, 92, 93, 101, 102, 103, 105, 108, 110, 115, 118, 132, 146, 151, 157, 168, 175, 177, 180, 185, 189, 192, 193, 196, 202, 207, 210, 212, 215, 216, 226, 229, 235, 241, 242, 249, 250, 254, 258, 259, 261, 264, 268, 273, 277, 278, 281, 285, 290, 292, 293, 296, 298, 300, 308, 314, 331, 335, 337, 338, 339, 340, 341, 344, 345, 347, 352, 353, 361, 365, 368, 384, 386, 387, 389, 394, 396, 406, 408, 412, 427, 429, 431, 434, 435, 436, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 482], "resourc": [7, 23, 32, 47, 61, 66, 82, 83, 89, 97, 103, 104, 106, 117, 118, 120, 131, 132, 134, 137, 142, 165, 168, 187, 192, 211, 212, 225, 240, 241, 247, 250, 251, 254, 257, 262, 267, 280, 283, 284, 293, 299, 302, 329, 332, 337, 341, 344, 352, 361, 364, 368, 375, 381, 387, 390, 393, 394, 397, 399, 404, 406, 408, 412, 415, 418, 427, 431, 454, 464, 466, 467, 468, 471, 473, 474, 478, 481, 482], "leak": [7, 32, 37, 44, 57, 58, 71, 97, 99, 224, 226, 283, 293, 348, 352, 381, 429, 461, 462, 468, 469, 474, 476, 477, 481, 482], "simpli": [7, 34, 61, 70, 71, 73, 74, 77, 82, 83, 86, 88, 93, 96, 99, 101, 102, 105, 108, 114, 118, 138, 139, 150, 152, 155, 157, 166, 175, 176, 182, 185, 192, 222, 224, 229, 231, 239, 250, 255, 262, 268, 269, 272, 283, 292, 293, 296, 297, 299, 304, 314, 319, 324, 325, 333, 335, 338, 340, 342, 345, 348, 352, 364, 384, 385, 387, 388, 389, 394, 399, 401, 402, 406, 408, 409, 410, 418, 420, 425, 431, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 477, 482], "anoth": [7, 22, 23, 30, 32, 34, 41, 55, 56, 61, 62, 70, 71, 73, 74, 75, 76, 82, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 118, 124, 125, 131, 132, 134, 138, 139, 144, 151, 155, 157, 162, 165, 166, 168, 172, 175, 176, 182, 185, 192, 193, 195, 202, 212, 214, 220, 222, 224, 225, 229, 231, 234, 235, 242, 244, 246, 249, 250, 255, 258, 261, 262, 267, 268, 270, 271, 278, 283, 287, 288, 292, 293, 296, 297, 299, 301, 308, 309, 311, 314, 319, 328, 332, 333, 338, 340, 341, 343, 344, 345, 348, 352, 353, 364, 366, 368, 374, 375, 377, 378, 379, 383, 385, 387, 388, 389, 393, 394, 398, 401, 404, 406, 407, 408, 409, 410, 412, 413, 421, 424, 425, 426, 427, 429, 431, 435, 439, 442, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 480, 481, 482], "programm": [7, 27, 34, 61, 71, 75, 78, 83, 90, 91, 98, 103, 104, 114, 121, 174, 176, 180, 182, 185, 192, 193, 212, 266, 271, 275, 283, 292, 293, 295, 337, 340, 344, 352, 367, 368, 374, 383, 389, 399, 401, 404, 426, 435, 462, 463, 465, 466, 467, 474, 482], "slice": [7, 37, 39, 41, 52, 54, 58, 66, 83, 85, 93, 101, 119, 120, 141, 147, 167, 170, 175, 190, 205, 212, 224, 227, 254, 261, 264, 278, 283, 284, 291, 293, 296, 299, 319, 340, 344, 365, 414, 427, 430, 435, 441, 445, 448, 449, 461, 463, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 479, 481, 482, 483], "mechan": [7, 11, 14, 32, 34, 44, 59, 61, 71, 73, 77, 82, 83, 90, 91, 92, 98, 99, 100, 102, 103, 108, 111, 112, 114, 125, 138, 143, 168, 175, 180, 192, 196, 202, 225, 242, 243, 244, 245, 247, 249, 251, 259, 260, 266, 267, 268, 269, 271, 272, 284, 292, 299, 302, 317, 319, 322, 324, 333, 335, 337, 338, 341, 344, 347, 364, 368, 374, 375, 387, 394, 398, 399, 422, 427, 431, 434, 435, 461, 462, 463, 464, 465, 466, 468, 470, 471, 473, 474, 475, 476, 477, 480, 481, 482], "abil": [7, 68, 70, 71, 83, 87, 90, 93, 98, 99, 102, 108, 115, 120, 212, 226, 253, 268, 283, 292, 324, 332, 344, 345, 385, 387, 409, 420, 421, 422, 425, 426, 462, 463, 464, 466, 467, 468, 471, 474, 475, 476, 477, 478, 482], "quit": [7, 66, 70, 71, 74, 82, 83, 87, 88, 90, 93, 98, 99, 102, 103, 118, 144, 167, 168, 175, 176, 183, 188, 199, 222, 235, 246, 256, 258, 269, 275, 283, 288, 292, 297, 305, 309, 335, 340, 341, 350, 367, 368, 397, 429, 431, 433, 440, 447, 449, 450, 461, 462, 463, 464, 466, 475, 476, 482], "easili": [7, 23, 41, 70, 71, 74, 76, 82, 83, 88, 92, 96, 98, 99, 101, 102, 112, 138, 151, 157, 166, 168, 174, 175, 199, 224, 229, 231, 235, 255, 297, 319, 331, 344, 361, 387, 401, 427, 434, 450, 460, 461, 464, 466, 470, 474, 475, 477, 478, 481, 482], "manipul": [7, 32, 33, 34, 41, 44, 53, 66, 71, 74, 93, 96, 99, 108, 144, 145, 168, 174, 175, 176, 182, 185, 193, 194, 204, 206, 218, 237, 254, 256, 258, 269, 283, 285, 293, 296, 308, 324, 331, 332, 334, 337, 342, 343, 344, 350, 352, 368, 374, 375, 393, 406, 409, 412, 419, 424, 431, 454, 461, 464, 467, 471, 472, 475, 476, 478, 480, 481, 482], "system": [7, 16, 23, 24, 32, 33, 34, 41, 57, 61, 66, 68, 71, 72, 75, 82, 83, 84, 90, 92, 93, 95, 98, 99, 100, 101, 102, 105, 106, 108, 112, 113, 116, 117, 119, 125, 132, 136, 139, 142, 144, 150, 154, 155, 162, 163, 166, 168, 172, 174, 175, 176, 182, 185, 186, 206, 207, 208, 209, 212, 213, 219, 222, 224, 227, 229, 230, 241, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 276, 278, 282, 283, 284, 286, 287, 294, 295, 296, 297, 299, 301, 302, 303, 305, 308, 309, 310, 311, 314, 315, 322, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 347, 350, 354, 355, 357, 359, 360, 361, 364, 365, 368, 374, 381, 383, 384, 385, 387, 388, 389, 390, 394, 398, 402, 404, 405, 406, 408, 409, 412, 413, 414, 415, 418, 419, 420, 424, 425, 427, 432, 434, 435, 436, 450, 454, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483], "around": [7, 23, 25, 30, 32, 42, 47, 57, 70, 71, 74, 76, 77, 93, 95, 97, 99, 101, 103, 112, 118, 138, 139, 141, 148, 152, 155, 166, 168, 176, 182, 185, 190, 192, 205, 214, 217, 220, 225, 235, 246, 249, 250, 255, 265, 269, 275, 281, 283, 287, 292, 293, 297, 302, 319, 337, 341, 343, 352, 357, 361, 368, 375, 380, 383, 385, 387, 401, 426, 427, 430, 441, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 482], "nativ": [7, 25, 32, 40, 62, 66, 88, 100, 105, 113, 154, 157, 168, 169, 175, 182, 183, 207, 212, 234, 258, 293, 296, 330, 337, 340, 344, 347, 352, 364, 367, 369, 383, 421, 431, 460, 463, 468, 469, 474, 475, 476, 478, 479, 480, 481, 482], "contrari": [7, 59, 189], "veri": [7, 31, 32, 34, 57, 61, 66, 71, 72, 73, 82, 83, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 127, 139, 149, 151, 157, 165, 166, 168, 176, 182, 185, 189, 192, 195, 201, 202, 205, 206, 210, 229, 235, 241, 244, 249, 250, 255, 266, 270, 271, 283, 284, 288, 289, 292, 293, 299, 308, 319, 328, 330, 335, 337, 338, 341, 346, 348, 358, 366, 368, 374, 385, 387, 388, 389, 425, 427, 429, 431, 435, 440, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 474, 475, 476, 477, 478, 480, 482], "generic": [7, 14, 16, 34, 48, 59, 60, 61, 66, 74, 83, 85, 88, 96, 98, 110, 132, 144, 151, 157, 160, 166, 183, 186, 192, 193, 199, 202, 225, 234, 250, 254, 258, 268, 269, 281, 296, 309, 325, 330, 337, 341, 361, 364, 377, 384, 393, 412, 429, 430, 457, 467, 471, 474, 475, 476, 477, 478, 480, 482], "wrapper": [7, 18, 21, 23, 24, 25, 30, 41, 43, 47, 56, 57, 66, 76, 84, 85, 90, 99, 104, 112, 116, 125, 136, 139, 146, 148, 159, 168, 175, 176, 190, 192, 214, 225, 235, 250, 254, 255, 260, 267, 275, 281, 283, 287, 293, 299, 302, 328, 337, 345, 361, 363, 367, 368, 380, 399, 406, 409, 412, 418, 421, 424, 426, 427, 439, 458, 461, 462, 463, 465, 466, 467, 468, 472, 474, 476, 477, 480, 482], "memoryview": [7, 16, 66, 85, 110, 145, 224, 254, 284, 299, 332, 337, 352, 385, 426, 449, 469, 473, 474, 476, 477, 480, 482, 483], "instruct": [7, 13, 66, 75, 82, 93, 95, 108, 151, 174, 185, 192, 239, 255, 264, 292, 293, 308, 314, 333, 340, 341, 387, 409, 412, 414, 427, 429, 454, 461, 466, 468, 471, 472, 473, 474, 476, 480, 481, 482], "start": [7, 9, 11, 22, 23, 25, 32, 33, 34, 41, 54, 55, 61, 62, 64, 66, 70, 73, 74, 77, 78, 82, 83, 88, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 105, 106, 108, 112, 113, 115, 116, 118, 119, 120, 121, 125, 131, 132, 136, 138, 141, 142, 144, 146, 150, 151, 153, 156, 157, 159, 160, 163, 165, 168, 175, 176, 177, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 198, 200, 202, 204, 207, 210, 212, 214, 216, 219, 222, 224, 226, 229, 230, 232, 235, 239, 241, 242, 244, 246, 247, 249, 251, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 273, 275, 278, 281, 284, 288, 290, 292, 293, 294, 296, 297, 299, 300, 302, 305, 306, 308, 309, 312, 313, 314, 316, 318, 319, 320, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 355, 357, 361, 362, 364, 365, 367, 368, 370, 375, 377, 379, 380, 381, 383, 385, 387, 393, 394, 398, 399, 401, 402, 406, 409, 410, 412, 414, 416, 420, 421, 423, 426, 427, 429, 430, 431, 434, 435, 440, 441, 447, 450, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "logic": [7, 66, 82, 83, 86, 93, 97, 99, 112, 138, 160, 168, 176, 180, 190, 192, 206, 220, 231, 256, 267, 269, 270, 271, 281, 290, 296, 302, 319, 344, 345, 355, 361, 368, 376, 385, 387, 426, 435, 461, 464, 465, 467, 468, 475, 479, 480, 482], "physic": [7, 66, 90, 176, 192, 246, 252, 278, 281, 294, 337, 344, 376, 377, 404, 431, 466, 479], "negat": [7, 15, 18, 22, 23, 30, 37, 38, 41, 44, 46, 52, 56, 58, 59, 61, 62, 64, 88, 91, 92, 93, 97, 102, 104, 113, 118, 120, 132, 136, 146, 149, 150, 153, 154, 157, 159, 174, 175, 176, 177, 182, 185, 208, 220, 224, 225, 258, 259, 261, 262, 266, 270, 275, 278, 283, 293, 296, 299, 308, 318, 319, 320, 328, 331, 332, 333, 337, 340, 341, 343, 344, 345, 348, 364, 365, 368, 371, 380, 383, 409, 412, 426, 427, 429, 430, 435, 440, 441, 461, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "begin": [7, 18, 23, 34, 56, 71, 73, 74, 76, 77, 82, 83, 88, 93, 99, 101, 102, 103, 108, 115, 118, 150, 151, 155, 166, 176, 177, 182, 185, 189, 192, 195, 200, 208, 214, 222, 230, 246, 249, 250, 255, 258, 262, 270, 271, 278, 283, 288, 293, 294, 296, 297, 301, 302, 314, 319, 320, 324, 334, 335, 340, 341, 344, 345, 347, 357, 358, 361, 363, 366, 368, 375, 377, 387, 400, 412, 414, 415, 424, 426, 427, 428, 429, 431, 433, 434, 435, 448, 454, 455, 460, 463, 466, 467, 468, 471, 478, 479, 482], "obj": [7, 9, 10, 23, 24, 28, 32, 35, 38, 42, 44, 47, 48, 50, 61, 62, 66, 73, 75, 76, 82, 83, 85, 88, 91, 92, 93, 99, 110, 128, 142, 157, 160, 175, 178, 180, 192, 196, 207, 210, 212, 224, 226, 255, 259, 262, 278, 283, 291, 299, 321, 344, 345, 361, 381, 385, 387, 388, 401, 420, 427, 430, 439, 440, 461, 462, 463, 464, 465, 466, 467, 471, 472, 477, 479, 480, 482], "automat": [7, 12, 23, 28, 32, 34, 44, 53, 57, 59, 60, 61, 66, 69, 71, 74, 82, 83, 88, 90, 93, 96, 101, 102, 103, 105, 108, 110, 118, 125, 131, 132, 138, 139, 140, 151, 155, 157, 160, 166, 168, 174, 175, 176, 180, 183, 185, 186, 189, 190, 192, 195, 200, 204, 205, 207, 208, 212, 224, 225, 226, 231, 233, 239, 241, 242, 247, 250, 255, 267, 268, 270, 271, 272, 278, 281, 283, 288, 292, 293, 294, 297, 299, 306, 308, 313, 318, 320, 323, 328, 330, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 355, 357, 359, 361, 364, 365, 366, 367, 368, 375, 383, 385, 387, 388, 389, 393, 394, 400, 401, 404, 406, 410, 414, 418, 421, 422, 423, 425, 427, 428, 429, 431, 435, 445, 450, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "temporari": [7, 22, 39, 48, 50, 53, 61, 66, 99, 106, 108, 110, 144, 175, 184, 192, 222, 246, 252, 258, 261, 266, 271, 272, 283, 293, 297, 324, 340, 344, 352, 359, 361, 381, 387, 394, 401, 434, 457, 463, 465, 467, 474, 475, 476, 481, 482], "pymemoryview_frombuff": [7, 42, 55, 472, 482], "pybuffer_fillinfo": [7, 55, 61, 472, 482], "scheme": [7, 30, 61, 73, 76, 93, 99, 103, 106, 121, 135, 141, 157, 175, 182, 209, 246, 249, 269, 271, 317, 334, 340, 341, 344, 352, 354, 357, 374, 393, 394, 398, 406, 427, 454, 461, 462, 464, 467, 468, 472, 474, 475, 476, 477, 482], "len": [7, 8, 9, 22, 37, 39, 40, 48, 52, 53, 58, 62, 66, 74, 83, 85, 91, 92, 99, 102, 103, 105, 112, 139, 141, 142, 147, 149, 151, 159, 160, 165, 169, 175, 187, 189, 190, 192, 210, 214, 224, 225, 229, 234, 235, 241, 246, 254, 261, 269, 278, 283, 284, 288, 291, 292, 293, 296, 305, 318, 320, 335, 337, 340, 341, 344, 347, 361, 381, 384, 388, 399, 406, 407, 409, 412, 426, 427, 434, 439, 440, 441, 442, 448, 449, 450, 461, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 480, 482], "product": [7, 15, 66, 78, 82, 93, 98, 120, 124, 143, 185, 192, 223, 235, 244, 246, 261, 269, 275, 318, 327, 343, 344, 352, 383, 387, 388, 420, 425, 429, 434, 439, 449, 458, 461, 462, 466, 467, 468, 470, 475, 478, 480, 482], "items": [7, 59, 66, 119, 181, 283, 337, 344], "would": [7, 18, 23, 30, 32, 33, 34, 46, 56, 57, 59, 62, 70, 71, 73, 74, 75, 76, 77, 82, 83, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 105, 108, 110, 112, 114, 118, 120, 125, 137, 138, 151, 154, 157, 160, 165, 166, 168, 169, 171, 175, 176, 180, 182, 183, 185, 187, 189, 192, 195, 198, 199, 201, 202, 204, 206, 207, 211, 212, 224, 225, 227, 229, 231, 233, 234, 239, 241, 242, 244, 246, 249, 250, 253, 255, 258, 261, 262, 267, 268, 269, 272, 275, 276, 283, 289, 292, 293, 296, 305, 307, 308, 313, 319, 320, 322, 330, 331, 332, 333, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 352, 355, 361, 364, 368, 371, 375, 380, 381, 383, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 402, 404, 407, 409, 411, 412, 420, 421, 422, 424, 425, 426, 427, 429, 431, 433, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "guarante": [7, 9, 11, 18, 24, 32, 34, 41, 52, 55, 56, 57, 59, 61, 62, 65, 70, 71, 74, 83, 86, 88, 90, 93, 95, 101, 104, 113, 120, 125, 138, 175, 182, 185, 190, 192, 195, 204, 222, 224, 231, 234, 242, 250, 255, 258, 262, 275, 276, 278, 283, 288, 292, 293, 299, 308, 324, 328, 331, 344, 348, 352, 359, 361, 363, 364, 377, 397, 399, 401, 404, 406, 407, 412, 414, 424, 426, 427, 431, 460, 465, 466, 468, 470, 471, 474, 475, 478, 479, 480, 481, 482], "pybuf_simpl": 7, "pybuf_writ": [7, 42, 467], "whether": [7, 9, 11, 14, 17, 23, 30, 34, 56, 57, 61, 62, 71, 77, 83, 87, 88, 90, 91, 93, 96, 97, 98, 101, 102, 103, 105, 108, 112, 113, 114, 118, 132, 138, 139, 143, 144, 147, 151, 152, 154, 155, 156, 157, 158, 160, 166, 168, 175, 176, 180, 182, 185, 188, 190, 192, 195, 201, 206, 207, 208, 209, 219, 224, 229, 230, 233, 234, 242, 243, 246, 250, 255, 258, 259, 261, 266, 268, 269, 271, 272, 275, 276, 283, 284, 292, 293, 294, 295, 296, 297, 299, 302, 307, 308, 310, 311, 314, 317, 319, 324, 328, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 346, 348, 352, 356, 357, 359, 361, 364, 365, 368, 375, 379, 383, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 401, 404, 406, 408, 409, 414, 419, 420, 421, 423, 425, 426, 427, 428, 429, 431, 435, 454, 455, 460, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "control": [7, 31, 32, 33, 34, 41, 47, 49, 56, 57, 66, 71, 72, 73, 75, 77, 81, 82, 90, 91, 92, 97, 98, 99, 102, 104, 108, 113, 118, 125, 129, 131, 132, 136, 138, 139, 143, 144, 149, 151, 152, 155, 157, 162, 165, 174, 175, 176, 177, 182, 183, 185, 189, 190, 192, 193, 195, 196, 200, 201, 204, 206, 207, 209, 210, 212, 214, 217, 221, 222, 224, 226, 228, 233, 246, 247, 250, 254, 255, 256, 258, 259, 262, 264, 267, 268, 269, 271, 276, 281, 282, 283, 284, 288, 292, 293, 295, 297, 298, 299, 305, 307, 308, 309, 311, 314, 315, 317, 321, 322, 328, 329, 331, 333, 337, 338, 341, 344, 346, 347, 348, 350, 352, 357, 363, 364, 366, 367, 368, 373, 374, 375, 379, 380, 384, 387, 388, 389, 390, 393, 394, 401, 404, 405, 406, 412, 414, 416, 418, 419, 421, 423, 426, 427, 428, 429, 431, 433, 435, 437, 442, 447, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "flag": [7, 9, 10, 13, 18, 24, 28, 32, 33, 42, 48, 56, 59, 61, 62, 64, 66, 70, 71, 73, 74, 87, 96, 97, 98, 99, 100, 101, 104, 105, 110, 111, 112, 116, 121, 125, 135, 137, 142, 143, 144, 155, 157, 175, 176, 180, 181, 182, 183, 185, 186, 187, 190, 195, 206, 207, 208, 210, 214, 224, 226, 237, 242, 247, 257, 258, 264, 266, 267, 268, 271, 276, 278, 281, 282, 283, 288, 293, 296, 301, 305, 306, 307, 313, 314, 315, 317, 328, 330, 332, 333, 334, 337, 338, 340, 341, 342, 344, 345, 348, 350, 352, 356, 359, 360, 361, 362, 364, 365, 375, 384, 385, 387, 393, 394, 399, 405, 406, 407, 418, 419, 421, 424, 426, 427, 431, 449, 454, 457, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "struct": [7, 15, 16, 21, 26, 30, 32, 38, 44, 55, 56, 59, 61, 64, 66, 71, 73, 74, 76, 82, 84, 88, 97, 99, 119, 141, 145, 175, 214, 224, 254, 268, 269, 284, 337, 344, 365, 418, 439, 451, 463, 466, 467, 468, 471, 472, 474, 479, 480, 481, 482], "calcsiz": [7, 66, 145, 224, 337, 344, 347, 482], "import": [7, 11, 23, 24, 30, 32, 33, 34, 41, 44, 57, 61, 64, 66, 69, 70, 71, 73, 74, 75, 77, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 124, 125, 130, 132, 133, 135, 136, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 159, 161, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 180, 182, 183, 185, 186, 187, 189, 190, 192, 194, 195, 199, 201, 204, 206, 207, 208, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 227, 229, 230, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 254, 255, 257, 258, 262, 264, 265, 266, 270, 271, 272, 275, 276, 278, 279, 280, 283, 284, 288, 292, 293, 294, 296, 297, 299, 301, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 394, 395, 397, 398, 399, 401, 405, 406, 407, 408, 409, 410, 411, 412, 414, 418, 419, 420, 424, 426, 427, 428, 429, 430, 432, 434, 437, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 454, 455, 460, 461, 463, 468, 469, 470, 471, 473, 474, 477, 478, 479, 480, 481, 482, 483], "pybuf_format": 7, "still": [7, 9, 23, 28, 30, 32, 33, 34, 47, 56, 61, 68, 70, 71, 73, 74, 75, 82, 83, 88, 90, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108, 112, 114, 118, 120, 132, 138, 143, 151, 157, 162, 166, 168, 169, 174, 175, 176, 180, 185, 192, 193, 201, 205, 207, 212, 225, 226, 229, 231, 242, 246, 250, 252, 255, 268, 269, 271, 275, 278, 283, 284, 292, 293, 295, 296, 299, 308, 314, 319, 322, 323, 324, 328, 330, 333, 334, 337, 338, 340, 341, 344, 345, 348, 352, 359, 361, 363, 364, 368, 375, 381, 384, 385, 387, 388, 389, 394, 401, 406, 408, 409, 412, 415, 425, 426, 427, 429, 431, 434, 435, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "present": [7, 22, 30, 33, 38, 44, 48, 55, 61, 66, 71, 72, 75, 77, 83, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 105, 106, 108, 112, 113, 118, 120, 121, 143, 146, 151, 152, 153, 155, 157, 160, 166, 175, 176, 180, 183, 185, 189, 190, 192, 195, 196, 204, 209, 212, 214, 220, 224, 225, 226, 234, 235, 238, 242, 244, 246, 250, 251, 255, 259, 262, 267, 268, 269, 271, 276, 278, 284, 286, 288, 292, 293, 297, 299, 307, 308, 313, 314, 317, 319, 322, 331, 335, 337, 341, 344, 345, 352, 357, 358, 361, 363, 364, 365, 366, 368, 370, 374, 375, 377, 383, 385, 387, 393, 394, 401, 406, 409, 412, 414, 418, 420, 422, 423, 426, 427, 429, 431, 434, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "hold": [7, 9, 14, 23, 32, 34, 44, 53, 56, 61, 64, 71, 76, 83, 91, 97, 98, 99, 103, 108, 118, 120, 121, 123, 138, 166, 168, 169, 175, 182, 185, 190, 202, 214, 235, 241, 244, 249, 255, 257, 268, 269, 271, 283, 284, 293, 302, 308, 319, 322, 325, 330, 337, 341, 344, 348, 352, 361, 364, 368, 387, 401, 404, 410, 412, 414, 420, 423, 427, 431, 435, 461, 462, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "navig": [7, 66, 90, 176, 296, 313, 367, 374, 482], "disregard": [7, 32, 344], "string": [7, 8, 9, 11, 14, 16, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 38, 39, 40, 41, 44, 46, 48, 51, 56, 57, 61, 63, 64, 66, 70, 71, 73, 74, 77, 85, 86, 87, 88, 90, 91, 93, 95, 96, 98, 99, 101, 103, 104, 106, 108, 110, 111, 112, 115, 118, 119, 120, 121, 125, 132, 136, 138, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 163, 166, 168, 171, 172, 174, 175, 176, 177, 180, 181, 182, 183, 185, 187, 189, 190, 192, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 220, 222, 224, 225, 227, 229, 230, 232, 233, 234, 237, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 266, 267, 268, 269, 271, 272, 274, 276, 278, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 321, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 351, 352, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 426, 427, 428, 429, 430, 431, 433, 435, 436, 441, 443, 444, 446, 449, 451, 454, 455, 460, 462, 463, 466, 468, 470, 471, 473, 474, 476, 477, 482, 483], "ndim": [7, 66, 344], "dimens": [7, 175, 176, 275, 332, 344, 467, 475, 480, 482], "dimension": [7, 85, 202, 275, 299, 318, 344, 374, 383, 475, 477, 482], "scalar": [7, 141, 195, 198, 225, 383, 385, 482], "pybuf_max_ndim": 7, "limit": [7, 23, 26, 31, 32, 33, 34, 38, 56, 57, 59, 61, 62, 66, 73, 83, 88, 90, 92, 93, 95, 99, 102, 110, 117, 118, 120, 125, 131, 132, 135, 136, 138, 142, 149, 157, 162, 165, 168, 172, 174, 183, 185, 190, 200, 206, 207, 210, 213, 214, 222, 224, 225, 234, 246, 247, 254, 257, 261, 268, 270, 276, 282, 283, 284, 285, 292, 293, 294, 295, 299, 307, 308, 312, 314, 319, 321, 324, 330, 333, 334, 337, 340, 341, 343, 345, 348, 352, 357, 361, 364, 372, 374, 380, 381, 388, 390, 404, 406, 409, 412, 420, 423, 425, 427, 428, 429, 431, 433, 434, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "maximum": [7, 25, 34, 57, 62, 83, 91, 93, 98, 99, 102, 113, 125, 138, 139, 141, 151, 154, 157, 162, 165, 166, 174, 175, 176, 185, 189, 194, 201, 202, 207, 212, 222, 234, 246, 261, 262, 269, 270, 275, 278, 281, 283, 288, 293, 299, 305, 307, 319, 320, 321, 322, 329, 337, 339, 340, 341, 343, 345, 348, 352, 357, 363, 364, 375, 377, 381, 383, 387, 393, 394, 406, 412, 434, 454, 461, 463, 464, 466, 467, 468, 474, 475, 477, 478, 479, 482], "64": [7, 62, 66, 83, 91, 92, 96, 103, 135, 143, 146, 175, 176, 182, 185, 224, 234, 259, 261, 270, 283, 293, 303, 304, 306, 332, 337, 341, 344, 347, 352, 383, 403, 418, 420, 427, 441, 445, 448, 455, 460, 461, 463, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "handl": [7, 14, 25, 30, 31, 32, 33, 34, 41, 45, 48, 54, 56, 59, 61, 62, 64, 66, 71, 73, 74, 77, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 101, 102, 103, 105, 108, 110, 111, 113, 116, 118, 120, 121, 124, 131, 138, 139, 140, 142, 144, 146, 149, 151, 152, 154, 156, 157, 165, 166, 168, 169, 174, 175, 180, 182, 185, 186, 188, 189, 190, 192, 195, 199, 200, 201, 202, 206, 207, 210, 211, 212, 214, 222, 224, 225, 229, 233, 239, 241, 243, 244, 246, 247, 249, 250, 253, 254, 255, 256, 258, 259, 262, 267, 268, 269, 270, 271, 275, 278, 282, 283, 289, 293, 294, 295, 296, 297, 298, 308, 309, 311, 318, 319, 321, 328, 330, 331, 332, 333, 335, 337, 338, 340, 342, 343, 344, 345, 347, 348, 350, 352, 356, 357, 361, 364, 365, 370, 374, 377, 385, 388, 389, 394, 399, 401, 402, 403, 406, 408, 412, 414, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 431, 434, 435, 442, 451, 454, 460, 461, 462, 463, 465, 466, 469, 470, 471, 472, 474, 475, 478, 479, 480, 481, 482, 483], "restrict": [7, 66, 71, 73, 74, 87, 88, 91, 97, 99, 102, 113, 118, 120, 150, 157, 175, 176, 182, 185, 189, 204, 222, 224, 229, 234, 246, 256, 257, 262, 283, 293, 298, 308, 312, 319, 327, 337, 340, 341, 344, 345, 346, 348, 353, 364, 365, 385, 388, 409, 412, 418, 419, 425, 426, 429, 430, 434, 435, 454, 460, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "attent": [7, 97, 102, 176, 383, 464, 474, 476], "further": [7, 32, 40, 61, 66, 71, 73, 74, 76, 77, 83, 86, 88, 93, 96, 98, 99, 103, 105, 106, 114, 120, 121, 138, 139, 144, 149, 151, 153, 157, 168, 172, 175, 180, 186, 190, 192, 210, 212, 217, 227, 231, 239, 246, 266, 267, 269, 270, 275, 282, 292, 293, 295, 297, 299, 319, 332, 333, 337, 338, 340, 341, 344, 345, 352, 353, 368, 380, 385, 408, 409, 412, 414, 420, 423, 424, 426, 427, 429, 431, 434, 454, 460, 461, 462, 463, 464, 465, 467, 468, 475, 479, 480, 482], "skip": [7, 14, 32, 33, 34, 56, 66, 82, 88, 93, 101, 102, 103, 105, 144, 153, 157, 162, 166, 168, 182, 186, 190, 192, 203, 204, 209, 217, 222, 249, 250, 255, 261, 262, 267, 271, 272, 297, 304, 319, 331, 334, 342, 344, 347, 350, 352, 357, 361, 375, 385, 398, 412, 414, 425, 426, 435, 451, 454, 460, 461, 463, 464, 465, 466, 467, 468, 470, 472, 474, 476, 481, 482], "regular": [7, 11, 32, 33, 41, 61, 66, 68, 74, 82, 83, 85, 91, 93, 99, 101, 108, 114, 118, 120, 125, 132, 159, 160, 162, 166, 168, 174, 180, 185, 192, 199, 209, 212, 219, 224, 225, 233, 242, 246, 254, 255, 261, 266, 268, 293, 294, 296, 299, 308, 311, 328, 333, 335, 337, 341, 342, 344, 345, 352, 357, 358, 361, 362, 383, 385, 387, 394, 399, 401, 427, 429, 434, 435, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "along": [7, 34, 35, 88, 93, 97, 98, 99, 108, 118, 125, 139, 140, 141, 149, 154, 162, 168, 175, 185, 192, 202, 204, 217, 229, 233, 234, 243, 247, 250, 251, 267, 269, 278, 293, 296, 299, 308, 329, 335, 337, 341, 344, 345, 348, 356, 368, 375, 379, 385, 387, 388, 406, 413, 420, 426, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 476, 477, 482], "nth": [7, 261, 375], "dictat": [7, 85, 166, 221, 224, 299, 337, 460, 461, 467], "mani": [7, 13, 16, 18, 32, 33, 34, 55, 56, 61, 62, 70, 71, 73, 74, 76, 77, 82, 88, 90, 92, 93, 96, 97, 98, 99, 102, 103, 105, 106, 108, 115, 118, 120, 127, 132, 136, 138, 139, 143, 154, 157, 162, 165, 166, 168, 174, 175, 176, 177, 180, 182, 185, 189, 190, 192, 193, 202, 207, 211, 222, 224, 226, 229, 231, 234, 235, 241, 242, 243, 246, 249, 250, 258, 259, 261, 262, 265, 267, 275, 278, 283, 284, 288, 292, 293, 295, 296, 298, 299, 305, 306, 307, 308, 314, 317, 319, 325, 328, 330, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 357, 358, 361, 363, 364, 365, 366, 367, 368, 374, 379, 380, 383, 384, 385, 388, 389, 394, 401, 402, 404, 405, 406, 409, 414, 423, 426, 427, 431, 433, 435, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "de": [7, 12, 40, 66, 72, 78, 117, 176, 229, 242, 261, 288, 299, 344, 357, 385, 393, 418, 471, 472, 476, 478, 479, 481, 482], "might": [7, 23, 32, 34, 50, 56, 61, 62, 71, 73, 74, 83, 86, 88, 90, 92, 93, 97, 98, 99, 101, 102, 103, 105, 106, 108, 112, 120, 121, 131, 136, 138, 139, 141, 144, 146, 157, 175, 178, 180, 182, 190, 192, 195, 204, 206, 208, 212, 220, 222, 233, 234, 235, 237, 239, 242, 246, 258, 259, 266, 267, 268, 269, 271, 272, 278, 283, 284, 288, 292, 293, 295, 299, 302, 305, 306, 308, 319, 335, 337, 340, 341, 344, 352, 361, 364, 366, 368, 385, 388, 389, 394, 399, 401, 407, 412, 421, 427, 431, 433, 454, 460, 461, 463, 464, 465, 466, 467, 468, 471, 474, 475, 476, 478, 479, 482], "re": [7, 32, 34, 41, 44, 55, 61, 66, 70, 71, 73, 74, 75, 76, 77, 82, 83, 86, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 105, 108, 111, 112, 120, 138, 139, 140, 144, 145, 155, 159, 162, 166, 168, 175, 176, 182, 185, 186, 189, 190, 192, 195, 200, 204, 206, 219, 235, 239, 242, 246, 247, 249, 250, 254, 258, 259, 266, 267, 268, 269, 271, 278, 279, 283, 288, 292, 293, 295, 296, 297, 308, 315, 338, 341, 343, 344, 345, 348, 352, 362, 363, 364, 366, 368, 376, 377, 383, 385, 389, 393, 394, 398, 399, 406, 412, 414, 418, 426, 427, 428, 431, 433, 434, 435, 440, 450, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 480, 482], "cast": [7, 32, 34, 41, 44, 56, 59, 62, 66, 71, 74, 88, 116, 175, 185, 186, 261, 344, 380, 385, 472, 475, 479, 480, 482], "freed": [7, 32, 41, 44, 71, 73, 97, 99, 165, 226, 231, 235, 283, 293, 329, 427, 462, 464, 466, 478, 482], "alter": [7, 22, 41, 83, 125, 153, 185, 207, 242, 246, 247, 262, 268, 272, 299, 324, 344, 345, 383, 425, 427, 431, 461, 465, 471, 474, 476, 480, 482], "send": [7, 35, 66, 77, 90, 93, 98, 101, 102, 103, 106, 116, 121, 125, 127, 132, 135, 136, 139, 141, 142, 151, 152, 157, 160, 163, 168, 176, 190, 193, 199, 200, 211, 222, 229, 241, 243, 244, 246, 247, 256, 257, 267, 268, 269, 278, 283, 284, 288, 293, 299, 305, 316, 317, 329, 333, 335, 337, 338, 341, 348, 350, 355, 360, 361, 368, 385, 394, 406, 418, 427, 429, 451, 461, 464, 465, 466, 468, 471, 473, 474, 475, 477, 478, 479, 481, 482], "drastic": [7, 110], "unambigu": [7, 118, 120, 182, 268, 308, 335, 427, 435, 467, 474], "influenc": [7, 299, 337, 454, 467], "correct": [7, 25, 32, 44, 56, 61, 62, 64, 66, 69, 71, 74, 75, 76, 83, 88, 91, 92, 93, 96, 97, 99, 105, 106, 110, 112, 114, 115, 118, 132, 151, 157, 168, 174, 175, 182, 185, 186, 187, 190, 192, 195, 196, 198, 202, 207, 208, 210, 215, 224, 230, 239, 242, 246, 247, 250, 254, 259, 266, 275, 278, 283, 289, 292, 293, 295, 299, 314, 324, 331, 332, 337, 340, 341, 343, 344, 345, 348, 352, 357, 365, 368, 383, 385, 387, 388, 389, 398, 400, 404, 406, 414, 420, 423, 424, 427, 429, 431, 434, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "writabl": [7, 42, 47, 56, 66, 73, 82, 103, 116, 118, 132, 139, 149, 151, 247, 258, 278, 283, 293, 295, 304, 332, 337, 338, 341, 344, 347, 350, 367, 368, 401, 421, 427, 431, 435, 465, 467, 472, 475, 477, 478, 479, 482], "els": [7, 22, 34, 35, 40, 41, 51, 61, 62, 66, 70, 71, 73, 74, 76, 77, 82, 83, 86, 87, 88, 93, 97, 99, 101, 102, 103, 106, 108, 111, 112, 120, 121, 125, 135, 138, 151, 159, 165, 168, 172, 175, 182, 185, 189, 190, 192, 195, 199, 206, 225, 227, 229, 235, 239, 241, 246, 247, 249, 250, 261, 262, 267, 269, 271, 276, 283, 289, 291, 292, 293, 299, 309, 318, 319, 329, 337, 340, 341, 342, 343, 344, 348, 352, 357, 359, 361, 364, 371, 377, 378, 383, 384, 385, 388, 398, 399, 401, 406, 409, 420, 421, 427, 429, 430, 431, 433, 434, 435, 442, 444, 454, 460, 461, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 481, 482], "report": [7, 22, 24, 32, 34, 39, 44, 47, 48, 59, 66, 70, 71, 83, 95, 96, 98, 100, 102, 105, 118, 120, 132, 139, 151, 152, 165, 174, 175, 176, 189, 190, 192, 195, 202, 204, 212, 215, 218, 224, 231, 232, 255, 259, 261, 279, 280, 283, 292, 293, 306, 308, 310, 314, 319, 328, 329, 333, 339, 341, 342, 344, 352, 361, 366, 368, 379, 385, 387, 394, 399, 412, 414, 430, 454, 460, 461, 463, 464, 465, 466, 467, 468, 471, 474, 475, 476, 478, 480, 482], "either": [7, 11, 14, 22, 23, 32, 34, 42, 44, 48, 53, 56, 57, 59, 61, 62, 65, 69, 70, 71, 73, 74, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 105, 106, 108, 115, 118, 120, 125, 132, 136, 138, 139, 141, 143, 144, 145, 149, 151, 154, 157, 168, 171, 172, 174, 175, 176, 177, 180, 182, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 208, 210, 212, 214, 220, 222, 224, 230, 231, 234, 241, 242, 244, 246, 247, 250, 252, 255, 257, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 275, 278, 281, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 301, 302, 308, 309, 311, 314, 319, 322, 324, 325, 328, 329, 331, 332, 334, 337, 340, 341, 344, 345, 347, 348, 352, 354, 357, 358, 359, 361, 364, 365, 368, 374, 375, 377, 383, 385, 387, 388, 393, 394, 397, 398, 399, 400, 401, 402, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 431, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "choic": [7, 66, 71, 76, 82, 83, 87, 99, 101, 103, 106, 116, 151, 154, 173, 192, 210, 224, 229, 231, 246, 255, 267, 268, 271, 283, 290, 292, 308, 314, 318, 324, 326, 329, 330, 341, 343, 344, 347, 350, 374, 430, 433, 440, 450, 463, 466, 474, 477, 478, 479, 482], "next": [7, 23, 26, 32, 35, 36, 41, 61, 66, 70, 71, 73, 74, 83, 85, 88, 90, 91, 92, 93, 96, 99, 101, 102, 105, 108, 110, 112, 115, 117, 121, 125, 138, 141, 144, 149, 151, 153, 155, 156, 158, 159, 160, 166, 174, 175, 176, 185, 189, 190, 192, 193, 194, 195, 196, 204, 210, 212, 217, 220, 224, 225, 226, 229, 231, 235, 241, 242, 246, 253, 254, 255, 261, 267, 269, 270, 271, 275, 278, 282, 283, 288, 292, 293, 296, 297, 307, 308, 314, 319, 320, 325, 330, 331, 333, 337, 338, 340, 341, 343, 344, 345, 348, 350, 353, 357, 367, 368, 374, 375, 388, 389, 394, 397, 399, 412, 424, 426, 427, 428, 429, 431, 433, 435, 436, 439, 441, 448, 449, 451, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474, 475, 477, 479, 480, 481, 483], "stand": [7, 79, 84, 105, 108, 168, 185, 209, 275, 292, 302, 319, 419, 420, 434, 461, 466, 467, 468, 472, 474, 476, 479, 480, 482], "alon": [7, 62, 73, 79, 84, 99, 102, 108, 120, 250, 297, 319, 324, 331, 419, 425, 426, 433, 463, 466, 471, 476, 482], "impli": [7, 30, 34, 41, 56, 61, 87, 99, 105, 108, 110, 139, 162, 180, 222, 235, 258, 292, 314, 320, 341, 344, 385, 414, 421, 425, 427, 429, 435, 454, 455, 460, 467, 472, 476, 479, 480, 482], "below": [7, 23, 24, 30, 32, 34, 44, 53, 55, 57, 58, 59, 61, 62, 64, 66, 71, 74, 83, 86, 88, 91, 92, 93, 98, 99, 106, 108, 112, 113, 115, 116, 118, 121, 132, 144, 147, 149, 154, 157, 166, 171, 174, 176, 178, 180, 182, 185, 187, 188, 190, 192, 194, 202, 207, 212, 220, 222, 226, 229, 232, 234, 235, 239, 241, 242, 244, 246, 247, 248, 249, 250, 252, 258, 266, 267, 268, 269, 276, 282, 283, 288, 292, 293, 295, 296, 297, 307, 310, 314, 319, 320, 321, 322, 324, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 348, 352, 353, 355, 356, 357, 358, 361, 363, 364, 365, 368, 370, 375, 379, 383, 385, 387, 388, 389, 394, 405, 412, 413, 418, 419, 421, 423, 425, 426, 427, 429, 430, 431, 434, 440, 460, 461, 462, 464, 466, 467, 468, 469, 471, 476, 477, 482], "pybuf_indirect": 7, "yes": [7, 71, 77, 82, 83, 87, 95, 166, 185, 192, 266, 267, 314, 319, 341, 368, 372, 404, 406, 410, 412, 440, 445, 448, 455, 460, 463, 474], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 76, 85, 299, 340, 344, 443, 462, 465, 467], "explicit": [7, 23, 28, 29, 30, 32, 33, 34, 44, 48, 55, 61, 64, 66, 71, 74, 76, 83, 86, 88, 90, 92, 93, 95, 97, 98, 99, 101, 102, 103, 108, 110, 112, 118, 120, 125, 131, 132, 134, 138, 140, 151, 156, 165, 166, 168, 169, 175, 178, 180, 182, 185, 187, 189, 195, 197, 201, 204, 205, 207, 209, 212, 213, 217, 222, 224, 225, 229, 232, 242, 244, 249, 250, 255, 258, 259, 262, 266, 267, 268, 269, 270, 271, 275, 281, 283, 284, 292, 293, 294, 295, 297, 299, 307, 311, 314, 324, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 355, 361, 364, 383, 384, 385, 387, 388, 394, 398, 399, 401, 404, 406, 409, 410, 411, 412, 413, 420, 422, 426, 427, 428, 429, 431, 435, 439, 454, 455, 460, 461, 462, 463, 464, 466, 468, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "contig": 7, "pybuf_c_contigu": [7, 467], "pybuf_f_contigu": [7, 467], "pybuf_any_contigu": 7, "fulli": [7, 32, 33, 44, 59, 61, 69, 85, 99, 101, 105, 110, 118, 133, 185, 192, 196, 202, 206, 207, 250, 255, 261, 268, 269, 283, 299, 302, 333, 335, 337, 344, 348, 352, 357, 359, 385, 387, 397, 399, 406, 409, 412, 416, 420, 422, 427, 431, 454, 460, 463, 468, 469, 473, 474, 475, 476, 477, 478, 480, 481, 482], "combin": [7, 23, 32, 48, 54, 61, 62, 66, 70, 73, 74, 83, 88, 90, 93, 97, 99, 102, 103, 105, 106, 114, 115, 118, 125, 138, 157, 159, 162, 168, 175, 176, 180, 181, 182, 185, 188, 190, 192, 202, 204, 207, 210, 223, 226, 242, 243, 244, 246, 249, 250, 261, 266, 267, 283, 292, 293, 294, 295, 296, 308, 318, 319, 322, 328, 329, 331, 334, 335, 337, 338, 340, 343, 344, 345, 346, 347, 348, 355, 357, 362, 368, 375, 385, 386, 387, 393, 404, 405, 422, 426, 427, 429, 431, 434, 435, 455, 461, 465, 466, 467, 468, 471, 472, 476, 477, 478, 479, 480, 482], "frequent": [7, 34, 66, 71, 73, 82, 83, 95, 102, 103, 105, 106, 147, 163, 182, 189, 246, 266, 269, 283, 288, 292, 305, 343, 385, 387, 423, 464, 465, 467, 468, 480], "undefin": [7, 18, 25, 32, 41, 61, 62, 66, 83, 88, 125, 157, 165, 195, 204, 206, 212, 224, 231, 258, 275, 292, 328, 343, 344, 352, 365, 381, 399, 412, 415, 427, 429, 434, 448, 455, 477, 479, 482], "pybuffer_iscontigu": [7, 55, 472, 482], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 33, 41, 259, 465, 477], "typeof": 7, "def": [7, 17, 22, 34, 44, 59, 64, 66, 69, 70, 71, 74, 77, 82, 83, 85, 86, 88, 90, 91, 92, 93, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 112, 114, 118, 120, 121, 122, 124, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 147, 148, 149, 155, 159, 160, 165, 168, 169, 171, 172, 175, 180, 182, 185, 187, 189, 190, 192, 199, 202, 210, 212, 215, 224, 225, 226, 227, 229, 231, 234, 235, 239, 242, 244, 246, 249, 250, 251, 255, 258, 259, 261, 262, 267, 268, 275, 283, 289, 291, 292, 299, 303, 309, 312, 314, 316, 318, 319, 320, 321, 325, 329, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 351, 352, 357, 360, 361, 363, 364, 366, 368, 377, 380, 381, 383, 384, 385, 387, 388, 389, 398, 399, 401, 406, 410, 412, 418, 419, 420, 421, 426, 427, 428, 429, 430, 434, 435, 439, 440, 442, 449, 450, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 14, 20, 22, 23, 56, 61, 66, 73, 74, 82, 91, 95, 120, 125, 141, 142, 153, 175, 182, 185, 190, 202, 208, 212, 214, 222, 234, 239, 255, 258, 264, 271, 273, 278, 283, 293, 306, 314, 315, 337, 340, 347, 361, 365, 378, 380, 414, 421, 424, 427, 445, 454, 461, 466, 467, 471, 472, 474, 475, 479, 482], "verifi": [7, 66, 73, 83, 91, 93, 95, 101, 160, 181, 186, 192, 210, 234, 242, 250, 256, 268, 269, 271, 293, 335, 340, 343, 361, 387, 399, 406, 460, 467, 468, 471, 472, 474, 475, 476, 480, 482], "bound": [7, 10, 13, 37, 41, 43, 52, 54, 58, 61, 62, 83, 91, 92, 98, 99, 102, 103, 120, 125, 129, 137, 138, 139, 157, 165, 168, 185, 189, 210, 212, 224, 225, 247, 249, 250, 255, 268, 269, 283, 318, 319, 322, 331, 337, 340, 341, 344, 351, 361, 364, 366, 368, 374, 375, 384, 385, 388, 389, 394, 401, 419, 425, 426, 427, 428, 429, 431, 435, 461, 463, 464, 466, 467, 468, 475, 476, 479, 481, 482], "mem": [7, 41, 42], "imin": 7, "sum": [7, 15, 34, 66, 85, 91, 93, 118, 120, 125, 141, 159, 182, 185, 192, 207, 224, 225, 254, 261, 270, 275, 284, 293, 296, 308, 318, 322, 326, 337, 343, 344, 365, 375, 381, 385, 429, 430, 439, 440, 443, 448, 449, 450, 451, 464, 465, 467, 470, 475, 480, 481, 482], "imax": 7, "view": [7, 15, 22, 42, 47, 61, 66, 82, 85, 90, 91, 95, 101, 118, 120, 132, 138, 159, 160, 182, 185, 190, 195, 199, 204, 207, 224, 246, 258, 267, 272, 299, 308, 313, 340, 342, 347, 350, 351, 352, 368, 374, 375, 383, 384, 404, 409, 461, 466, 467, 471, 474, 475, 477, 482, 483], "anywher": [7, 83, 151, 185, 189, 210, 246, 251, 261, 268, 292, 296, 319, 352, 377, 385, 414, 424, 428, 429, 431, 469, 481, 482], "index": [7, 33, 34, 37, 46, 52, 57, 58, 61, 62, 66, 68, 77, 78, 82, 85, 92, 93, 96, 99, 101, 102, 104, 109, 113, 114, 119, 120, 141, 142, 144, 147, 151, 155, 159, 160, 163, 175, 181, 190, 191, 195, 204, 208, 210, 212, 223, 224, 229, 232, 235, 241, 244, 254, 255, 261, 262, 268, 278, 281, 283, 284, 291, 293, 296, 299, 310, 313, 314, 315, 319, 320, 322, 337, 339, 340, 342, 344, 345, 352, 358, 360, 364, 365, 367, 375, 380, 381, 393, 404, 406, 409, 412, 421, 426, 427, 429, 435, 439, 441, 448, 452, 453, 458, 461, 463, 465, 467, 468, 469, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483], "get_item_point": 7, "pyobject_checkbuff": [7, 55, 472, 481, 482], "cannot": [7, 9, 24, 26, 28, 32, 33, 34, 37, 38, 48, 52, 57, 59, 61, 62, 64, 65, 70, 71, 74, 76, 83, 87, 88, 90, 92, 93, 96, 97, 98, 99, 100, 101, 104, 106, 110, 113, 114, 120, 125, 131, 134, 144, 151, 157, 159, 160, 162, 165, 166, 168, 175, 176, 180, 182, 185, 190, 192, 196, 200, 201, 202, 207, 211, 212, 213, 214, 217, 222, 224, 225, 226, 229, 231, 232, 235, 244, 246, 250, 252, 253, 255, 258, 266, 267, 268, 269, 270, 271, 275, 276, 278, 282, 283, 293, 295, 296, 297, 299, 302, 304, 307, 308, 310, 314, 319, 322, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 348, 352, 353, 357, 359, 361, 364, 365, 368, 385, 394, 398, 401, 404, 405, 409, 412, 414, 415, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 442, 454, 455, 460, 463, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482], "pyexc_buffererror": [7, 23, 55, 61], "chain": [7, 61, 66, 83, 91, 93, 97, 99, 106, 117, 156, 159, 166, 175, 186, 212, 213, 222, 223, 224, 235, 247, 255, 261, 267, 293, 305, 335, 344, 352, 380, 388, 394, 427, 429, 435, 444, 467, 469, 472, 475, 476, 477, 481, 482], "redirect": [7, 61, 66, 84, 98, 99, 106, 132, 136, 168, 241, 242, 244, 250, 267, 333, 348, 352, 394, 398, 454, 457, 461, 476, 477, 478, 479, 482], "pybuffer_sizefromformat": [7, 55, 472, 482], "pybuffer_getpoint": [7, 55, 472, 482], "pybuffer_fromcontigu": [7, 55, 472, 482], "fort": 7, "pybuffer_tocontigu": [7, 55, 472, 482], "src": [7, 87, 100, 142, 175, 192, 199, 230, 239, 278, 281, 293, 332, 340, 420, 464, 466], "pyobject_copydata": [7, 55], "dest": [7, 66, 87, 99, 116, 199, 227, 269, 278, 292, 309, 350, 398, 464, 466, 467, 468, 482], "between": [7, 15, 32, 33, 34, 37, 38, 41, 44, 52, 54, 58, 59, 61, 66, 70, 71, 72, 73, 74, 77, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 118, 120, 125, 132, 141, 147, 149, 150, 154, 157, 160, 163, 166, 172, 176, 182, 185, 190, 192, 194, 195, 196, 200, 204, 208, 210, 212, 215, 217, 224, 229, 231, 234, 239, 246, 250, 251, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 275, 276, 278, 284, 285, 289, 290, 293, 294, 295, 296, 297, 299, 300, 308, 318, 319, 320, 334, 337, 338, 339, 340, 341, 344, 347, 348, 350, 352, 358, 361, 363, 364, 365, 366, 368, 370, 371, 374, 375, 376, 377, 381, 383, 384, 387, 388, 389, 393, 394, 399, 400, 404, 406, 409, 410, 412, 416, 418, 423, 424, 425, 427, 429, 430, 431, 433, 435, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pybuffer_fillcontiguousstrid": [7, 55, 472], "per": [7, 22, 23, 30, 32, 34, 44, 61, 62, 66, 71, 76, 82, 83, 86, 88, 99, 108, 115, 118, 120, 125, 131, 132, 141, 143, 144, 146, 150, 157, 176, 180, 182, 185, 190, 195, 196, 202, 204, 207, 208, 222, 226, 249, 251, 262, 267, 271, 281, 283, 288, 293, 295, 305, 307, 308, 317, 319, 329, 334, 337, 338, 340, 341, 344, 352, 361, 364, 365, 366, 368, 375, 379, 381, 387, 418, 421, 426, 427, 431, 435, 454, 460, 464, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 479, 480, 482, 483], "accord": [7, 18, 32, 35, 38, 62, 64, 66, 74, 90, 91, 92, 93, 96, 99, 105, 120, 125, 147, 151, 154, 157, 168, 174, 180, 182, 185, 195, 200, 202, 204, 207, 208, 215, 217, 224, 225, 230, 232, 234, 242, 246, 247, 250, 254, 256, 258, 261, 266, 267, 268, 275, 281, 283, 292, 293, 294, 308, 341, 342, 344, 346, 347, 365, 374, 375, 377, 383, 387, 393, 394, 398, 400, 409, 421, 425, 427, 429, 431, 434, 454, 460, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 482], "design": [7, 33, 34, 61, 74, 82, 83, 86, 88, 91, 92, 93, 97, 98, 99, 101, 103, 105, 106, 108, 120, 136, 138, 146, 147, 152, 157, 166, 168, 176, 182, 185, 191, 192, 193, 200, 209, 210, 212, 224, 225, 227, 229, 231, 234, 246, 249, 250, 271, 283, 292, 293, 299, 308, 317, 323, 331, 337, 341, 352, 357, 361, 364, 368, 374, 383, 385, 388, 393, 406, 416, 423, 424, 431, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 479, 481, 482], "getbufferproc": [7, 61, 475], "subtyp": [8, 9, 11, 15, 20, 25, 37, 38, 44, 48, 53, 58, 59, 61, 62, 66, 186, 193, 195, 196, 199, 200, 202, 203, 204, 205, 246, 276, 285, 289, 292, 333, 341, 344, 415, 427, 429, 463, 471, 482], "pybytearray_typ": [8, 55], "instanc": [8, 9, 13, 14, 15, 16, 20, 23, 25, 27, 28, 30, 32, 34, 37, 38, 42, 44, 46, 48, 50, 51, 53, 56, 58, 59, 61, 62, 66, 69, 71, 73, 74, 76, 87, 88, 90, 93, 97, 98, 99, 101, 102, 104, 106, 111, 114, 115, 118, 120, 121, 125, 127, 131, 132, 134, 135, 136, 138, 139, 140, 144, 149, 150, 151, 153, 155, 156, 157, 158, 160, 165, 166, 168, 171, 174, 175, 176, 182, 185, 189, 190, 192, 193, 194, 195, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 215, 217, 220, 222, 224, 225, 226, 229, 231, 233, 234, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 258, 261, 262, 267, 268, 269, 270, 271, 281, 283, 284, 285, 286, 288, 289, 292, 293, 296, 297, 298, 300, 305, 307, 308, 312, 314, 315, 318, 319, 321, 323, 325, 329, 330, 331, 332, 335, 337, 338, 340, 341, 343, 345, 347, 348, 351, 352, 354, 357, 358, 361, 363, 364, 366, 368, 371, 378, 379, 381, 383, 384, 385, 387, 388, 389, 393, 394, 397, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 426, 428, 429, 431, 434, 435, 439, 442, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "layer": [8, 9, 15, 24, 25, 31, 37, 38, 54, 58, 59, 66, 73, 82, 99, 103, 305, 335, 337, 341, 367, 418, 454, 461, 464, 467, 480, 481, 482], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 55, 467], "pybytearray_fromstringands": [8, 55, 467], "pybytearray_concat": [8, 55], "concat": [8, 62, 66, 93, 223, 291, 385, 440], "pybytearray_s": [8, 55], "pybytearray_asstr": [8, 55], "extra": [8, 9, 13, 18, 34, 61, 62, 66, 74, 83, 86, 88, 90, 92, 99, 106, 108, 110, 117, 118, 120, 131, 160, 169, 174, 185, 190, 192, 195, 201, 202, 204, 207, 210, 241, 246, 251, 267, 268, 271, 283, 292, 293, 332, 340, 341, 344, 357, 358, 361, 366, 375, 385, 388, 412, 421, 427, 430, 451, 454, 455, 461, 464, 467, 468, 471, 472, 473, 474, 475, 478, 479, 480, 482], "append": [8, 9, 33, 37, 57, 62, 66, 74, 76, 77, 78, 82, 83, 88, 98, 99, 103, 108, 110, 118, 119, 121, 133, 149, 151, 156, 157, 159, 160, 162, 175, 180, 181, 182, 183, 185, 188, 190, 193, 195, 199, 201, 202, 204, 207, 224, 225, 226, 233, 247, 248, 249, 250, 255, 256, 258, 261, 267, 269, 270, 271, 273, 281, 283, 284, 285, 288, 292, 293, 294, 296, 299, 301, 302, 309, 316, 318, 319, 320, 321, 330, 334, 337, 340, 341, 342, 344, 350, 352, 357, 361, 377, 387, 394, 399, 406, 407, 410, 412, 420, 421, 426, 427, 434, 439, 440, 441, 442, 448, 449, 451, 454, 455, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 474, 475, 477, 478, 482], "pybytearray_res": [8, 55], "trade": [8, 215, 292, 344, 425], "safeti": [8, 12, 66, 71, 86, 92, 116, 199, 249, 255, 283, 292, 324, 340, 397, 468, 470, 474, 482], "speed": [8, 41, 62, 66, 71, 88, 91, 98, 102, 108, 146, 160, 176, 183, 185, 189, 215, 221, 225, 226, 233, 235, 250, 258, 261, 295, 297, 299, 330, 341, 343, 350, 352, 360, 366, 383, 423, 427, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "pybytes_typ": [9, 55, 482], "pybytes_check": [9, 77, 467], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 41, 55], "pybytes_fromstringands": [9, 55, 467], "uniniti": [9, 32, 34, 41, 71, 83, 88, 299, 455, 482], "pybytes_fromformat": [9, 55, 482], "printf": [9, 62, 66, 70, 71, 95, 175, 244, 267, 429, 445, 448, 459, 466, 482], "calcul": [9, 30, 32, 33, 34, 57, 61, 62, 71, 76, 83, 87, 88, 91, 93, 118, 150, 176, 180, 182, 185, 205, 225, 234, 269, 275, 283, 295, 322, 333, 337, 343, 344, 345, 347, 351, 353, 355, 365, 366, 377, 380, 383, 384, 389, 394, 400, 427, 429, 431, 434, 463, 466, 467, 470, 472, 476, 480, 482], "liter": [9, 38, 62, 66, 76, 88, 92, 101, 102, 110, 111, 118, 156, 157, 158, 182, 185, 186, 190, 192, 219, 220, 224, 229, 230, 247, 257, 262, 264, 267, 268, 270, 302, 307, 319, 331, 340, 344, 345, 348, 365, 366, 368, 375, 377, 385, 387, 393, 399, 402, 412, 414, 427, 430, 431, 432, 433, 440, 444, 448, 461, 463, 464, 466, 468, 469, 473, 474, 476, 479, 480, 481, 482, 483], "ld": [9, 62, 70, 75, 175, 344, 455], "lu": [9, 62, 344, 386, 434, 461, 476, 478, 479, 482], "zd": [9, 62, 482], "zu": [9, 62, 482], "size_t": [9, 10, 18, 33, 34, 38, 41, 57, 62, 88, 175, 347, 475, 482], "hex": [9, 62, 66, 83, 92, 102, 103, 105, 143, 146, 157, 175, 210, 224, 234, 254, 256, 341, 344, 345, 352, 368, 397, 427, 434, 443, 449, 451, 461, 462, 464, 466, 467, 469, 470, 471, 476, 477, 482], "0x": [9, 46, 62, 83, 85, 92, 102, 137, 175, 192, 224, 243, 283, 292, 344, 345, 383, 388, 389, 434, 465, 474, 482], "regardless": [9, 24, 32, 33, 34, 40, 57, 62, 92, 101, 108, 112, 118, 138, 165, 168, 174, 176, 182, 185, 207, 210, 219, 246, 250, 258, 261, 262, 296, 302, 314, 333, 334, 335, 337, 340, 341, 344, 345, 347, 348, 352, 375, 383, 387, 388, 389, 398, 399, 401, 402, 411, 424, 429, 431, 434, 454, 460, 474, 475, 476, 477, 479, 482], "yield": [9, 29, 35, 55, 62, 66, 73, 83, 85, 93, 111, 114, 120, 132, 137, 149, 151, 159, 165, 166, 168, 182, 189, 190, 196, 206, 222, 224, 225, 230, 231, 234, 241, 249, 253, 255, 258, 261, 262, 264, 271, 283, 293, 296, 299, 302, 319, 331, 340, 344, 347, 357, 361, 377, 380, 385, 388, 389, 393, 397, 406, 409, 412, 418, 426, 427, 430, 432, 434, 439, 463, 464, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "unrecogn": [9, 62, 87, 118, 227, 239, 413, 421, 434, 473, 477, 478, 482], "rest": [9, 18, 62, 75, 83, 87, 88, 93, 97, 98, 99, 102, 103, 110, 118, 120, 127, 151, 160, 176, 185, 192, 212, 222, 225, 246, 249, 267, 276, 292, 293, 302, 319, 323, 344, 361, 375, 377, 388, 418, 426, 427, 430, 434, 435, 440, 461, 463, 464, 466, 467, 468, 469, 471, 473, 475, 476, 479, 481, 482], "discard": [9, 34, 37, 48, 53, 58, 62, 64, 66, 71, 88, 92, 93, 103, 121, 125, 138, 143, 147, 151, 156, 157, 160, 182, 185, 242, 256, 258, 267, 268, 271, 283, 285, 286, 292, 296, 337, 344, 360, 375, 399, 401, 410, 412, 415, 426, 427, 448, 454, 463, 466, 467, 468, 473, 476, 478, 480, 482], "effect": [9, 11, 14, 22, 23, 30, 32, 33, 44, 50, 57, 61, 62, 66, 71, 73, 82, 83, 86, 90, 91, 93, 96, 98, 99, 101, 102, 103, 104, 106, 108, 111, 113, 118, 120, 125, 131, 144, 147, 158, 165, 166, 168, 175, 176, 180, 182, 184, 185, 186, 190, 192, 202, 207, 208, 209, 212, 214, 217, 224, 225, 230, 235, 242, 246, 254, 258, 261, 263, 266, 267, 268, 269, 272, 283, 292, 293, 295, 296, 297, 302, 308, 311, 314, 319, 322, 323, 324, 325, 328, 330, 331, 332, 334, 341, 342, 343, 344, 345, 347, 348, 352, 357, 361, 363, 364, 365, 375, 381, 383, 384, 385, 387, 388, 399, 404, 411, 419, 420, 421, 424, 426, 427, 429, 431, 434, 435, 441, 449, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "precis": [9, 13, 18, 25, 44, 62, 66, 70, 98, 174, 182, 212, 224, 229, 259, 262, 268, 269, 275, 283, 290, 293, 308, 313, 328, 329, 337, 340, 344, 345, 347, 352, 365, 366, 375, 385, 394, 407, 426, 427, 429, 433, 434, 443, 451, 461, 465, 466, 467, 468, 472, 474, 475, 476, 478, 479, 480, 481, 482], "pybytes_fromformatv": [9, 55], "pybytes_fromobject": [9, 55], "pybytes_s": [9, 55, 77], "pybytes_get_s": 9, "pybytes_asstr": [9, 55, 471], "last": [9, 22, 23, 25, 32, 33, 34, 44, 57, 61, 65, 66, 71, 74, 76, 82, 83, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 102, 103, 105, 112, 114, 118, 120, 124, 138, 139, 140, 144, 146, 150, 151, 155, 157, 159, 160, 166, 168, 175, 176, 182, 183, 185, 187, 189, 190, 192, 195, 199, 202, 204, 208, 210, 212, 213, 214, 217, 220, 222, 224, 226, 231, 233, 234, 235, 244, 246, 247, 249, 255, 259, 261, 262, 266, 267, 269, 270, 271, 275, 283, 284, 288, 291, 292, 293, 294, 296, 297, 299, 301, 308, 314, 319, 320, 323, 328, 330, 331, 332, 337, 339, 340, 342, 344, 345, 348, 350, 352, 357, 364, 365, 368, 375, 377, 380, 381, 383, 385, 386, 387, 388, 389, 393, 394, 397, 401, 404, 405, 409, 412, 414, 421, 423, 426, 427, 429, 431, 434, 435, 439, 440, 441, 442, 445, 448, 451, 454, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "just": [9, 13, 28, 34, 38, 45, 50, 54, 61, 62, 64, 70, 71, 73, 74, 75, 77, 82, 83, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 118, 120, 127, 128, 137, 138, 139, 149, 150, 151, 155, 156, 157, 158, 160, 166, 168, 175, 176, 178, 180, 182, 185, 189, 192, 193, 199, 200, 210, 212, 217, 222, 224, 225, 229, 231, 233, 234, 242, 246, 249, 250, 252, 253, 261, 266, 267, 268, 269, 271, 281, 283, 284, 289, 292, 293, 296, 297, 299, 308, 313, 314, 319, 320, 328, 330, 331, 333, 337, 338, 340, 341, 344, 345, 348, 351, 352, 354, 359, 361, 363, 364, 368, 374, 375, 380, 383, 385, 387, 388, 389, 394, 398, 401, 406, 408, 409, 412, 413, 414, 419, 420, 421, 422, 425, 426, 427, 429, 431, 433, 435, 440, 451, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "dealloc": [9, 22, 28, 32, 34, 41, 44, 50, 61, 62, 71, 73, 74, 85, 97, 226, 361, 401, 435, 455, 462, 463, 468, 472, 474, 480, 482], "pybytes_as_str": [9, 430], "pybytes_asstringands": [9, 55, 77], "pybytes_concat": [9, 55, 482], "newpart": 9, "stolen": [9, 29, 34, 70, 482], "pybytes_concatanddel": [9, 55], "_pybytes_res": [9, 482], "newsiz": [9, 28, 58, 278], "though": [9, 11, 30, 32, 34, 55, 56, 61, 62, 71, 73, 74, 82, 83, 88, 90, 92, 93, 99, 101, 102, 105, 106, 112, 113, 114, 118, 125, 131, 132, 139, 155, 157, 160, 172, 176, 185, 192, 195, 198, 199, 204, 205, 207, 210, 212, 224, 229, 234, 242, 246, 249, 250, 251, 252, 255, 258, 262, 267, 269, 271, 275, 283, 284, 288, 292, 293, 305, 311, 314, 319, 328, 331, 341, 344, 347, 361, 364, 365, 368, 381, 385, 387, 388, 389, 394, 406, 409, 410, 414, 424, 425, 427, 428, 429, 431, 433, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 474, 475, 482], "immut": [9, 10, 28, 34, 58, 61, 62, 66, 85, 91, 97, 120, 160, 174, 175, 180, 182, 185, 207, 220, 224, 225, 255, 267, 291, 293, 296, 397, 427, 429, 441, 448, 461, 464, 465, 466, 467, 468, 469, 471, 473, 480, 481, 482], "build": [9, 31, 32, 33, 41, 44, 55, 56, 62, 63, 66, 68, 72, 73, 74, 76, 77, 82, 83, 88, 91, 95, 99, 100, 103, 104, 106, 120, 121, 139, 141, 147, 155, 156, 157, 175, 183, 185, 186, 187, 189, 190, 202, 205, 207, 210, 224, 234, 235, 244, 254, 257, 258, 261, 273, 275, 282, 292, 296, 307, 311, 314, 328, 334, 337, 338, 341, 344, 352, 354, 361, 368, 381, 387, 389, 393, 394, 398, 399, 408, 409, 423, 424, 425, 427, 450, 454, 457, 459, 460, 461, 463, 483], "brand": [9, 53, 58, 71, 305, 482], "refcount": [9, 32, 61, 62, 97, 361, 466, 482], "lvalu": [9, 292, 344], "differ": [9, 10, 15, 24, 32, 33, 34, 35, 41, 44, 56, 57, 61, 62, 64, 66, 70, 71, 72, 73, 74, 76, 77, 82, 87, 88, 89, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 118, 120, 121, 125, 131, 132, 136, 137, 138, 139, 141, 151, 154, 155, 156, 157, 158, 160, 162, 165, 166, 168, 172, 173, 174, 175, 176, 182, 184, 185, 192, 194, 195, 201, 202, 204, 207, 210, 212, 213, 215, 221, 222, 224, 225, 229, 235, 241, 242, 244, 246, 249, 250, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 284, 289, 292, 293, 294, 295, 296, 297, 299, 302, 308, 313, 314, 318, 319, 320, 321, 322, 328, 330, 331, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 354, 357, 359, 361, 362, 363, 364, 365, 366, 368, 371, 374, 375, 380, 384, 385, 387, 388, 389, 393, 394, 400, 404, 406, 409, 410, 419, 421, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "realloc": [9, 41, 52, 71, 176, 465, 478, 482], "memoryerror": [9, 23, 53, 58, 62, 66, 120, 185, 212, 394, 449, 476, 482], "slot": [10, 16, 31, 44, 46, 48, 49, 56, 59, 66, 73, 74, 88, 91, 99, 133, 180, 190, 211, 225, 226, 250, 255, 281, 283, 299, 316, 344, 385, 427, 429, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 475, 476, 477, 480, 481, 482], "callabl": [10, 32, 36, 56, 57, 61, 65, 66, 70, 71, 83, 85, 86, 90, 92, 93, 99, 104, 110, 114, 118, 125, 131, 135, 137, 160, 165, 166, 169, 171, 175, 176, 180, 181, 186, 189, 190, 205, 206, 207, 222, 223, 224, 234, 247, 250, 251, 254, 258, 267, 268, 269, 271, 283, 291, 292, 293, 296, 298, 299, 313, 314, 315, 325, 332, 333, 335, 344, 348, 352, 364, 366, 370, 375, 377, 378, 387, 388, 389, 394, 398, 399, 401, 406, 412, 420, 426, 429, 431, 449, 454, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "kwarg": [10, 56, 61, 66, 83, 85, 88, 91, 98, 99, 110, 113, 118, 120, 125, 138, 140, 157, 159, 165, 166, 169, 176, 185, 186, 224, 253, 255, 262, 267, 268, 283, 291, 292, 293, 299, 307, 308, 315, 325, 344, 345, 357, 361, 363, 364, 384, 385, 387, 388, 389, 398, 401, 427, 430, 440, 467, 472, 475, 477, 478, 480, 482], "tp_new": [10, 59, 61, 66, 73, 74, 97, 482], "tp_init": [10, 59, 61, 66, 73, 74, 482], "pyobject_cal": [10, 55, 61, 71, 481, 482], "pep": [10, 13, 23, 30, 32, 33, 34, 44, 48, 55, 57, 60, 61, 62, 64, 66, 68, 69, 71, 73, 76, 78, 83, 84, 85, 86, 88, 93, 105, 110, 111, 114, 115, 120, 121, 125, 128, 139, 141, 142, 151, 152, 153, 154, 157, 159, 160, 162, 165, 168, 169, 172, 174, 180, 186, 190, 199, 209, 212, 220, 224, 225, 226, 246, 248, 249, 250, 251, 255, 258, 265, 267, 272, 275, 281, 287, 288, 289, 293, 295, 296, 299, 301, 302, 311, 322, 324, 326, 328, 329, 332, 333, 334, 336, 337, 339, 340, 341, 344, 345, 348, 349, 352, 358, 361, 365, 377, 384, 396, 398, 401, 406, 407, 422, 424, 426, 427, 429, 430, 431, 434, 435, 440, 449, 454, 455, 456, 460, 461, 473, 481, 482, 483], "590": [10, 66, 471, 472, 481, 482], "pyvectorcall_cal": [10, 55, 61, 473, 482], "py_tpflags_have_vectorcal": [10, 49, 61, 66, 473, 482], "now": [10, 23, 32, 33, 34, 38, 41, 48, 55, 56, 57, 59, 61, 62, 64, 66, 70, 71, 73, 74, 76, 82, 83, 87, 88, 90, 91, 92, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 113, 114, 115, 118, 120, 125, 131, 132, 136, 138, 140, 141, 143, 146, 149, 151, 153, 157, 159, 160, 162, 165, 166, 168, 169, 171, 174, 175, 176, 180, 181, 182, 183, 185, 187, 190, 192, 199, 201, 204, 210, 211, 212, 213, 214, 215, 217, 220, 222, 224, 225, 229, 233, 234, 239, 241, 242, 243, 244, 247, 250, 251, 255, 258, 259, 262, 266, 267, 268, 269, 270, 271, 275, 278, 282, 283, 284, 286, 288, 292, 293, 294, 295, 296, 297, 299, 302, 305, 308, 309, 311, 313, 318, 319, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 358, 359, 364, 365, 366, 376, 380, 381, 383, 384, 385, 387, 388, 389, 393, 394, 398, 399, 400, 404, 410, 412, 418, 419, 420, 421, 423, 426, 427, 429, 431, 434, 435, 440, 441, 448, 450, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "class": [10, 22, 23, 28, 32, 39, 43, 44, 48, 50, 51, 52, 56, 59, 60, 61, 62, 65, 66, 71, 73, 74, 78, 82, 84, 85, 86, 90, 93, 96, 98, 101, 102, 103, 104, 105, 106, 110, 111, 116, 119, 121, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 159, 163, 166, 168, 169, 171, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 210, 217, 218, 220, 221, 222, 223, 224, 225, 226, 231, 233, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 254, 256, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 276, 278, 279, 280, 284, 285, 286, 288, 290, 292, 293, 295, 296, 297, 298, 300, 301, 302, 304, 305, 307, 311, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 333, 335, 337, 338, 340, 341, 343, 345, 348, 350, 351, 352, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 386, 393, 395, 397, 398, 399, 401, 402, 404, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 428, 429, 430, 431, 432, 433, 435, 438, 440, 442, 444, 445, 449, 450, 451, 454, 460, 461, 462, 464, 465, 468, 469, 470, 473, 474, 476, 477, 479, 480, 481, 482, 483], "__call__": [10, 61, 66, 83, 85, 91, 118, 158, 159, 160, 181, 193, 202, 210, 223, 224, 283, 285, 291, 388, 389, 401, 427, 429, 473, 478, 482], "reassign": [10, 41, 61, 74, 210, 307, 473, 480, 482], "behav": [10, 23, 32, 33, 44, 61, 62, 74, 83, 87, 88, 92, 97, 99, 102, 105, 162, 166, 168, 174, 175, 182, 183, 185, 187, 224, 225, 243, 257, 258, 271, 278, 288, 293, 320, 321, 333, 335, 337, 338, 341, 344, 348, 352, 355, 363, 368, 385, 387, 388, 389, 410, 412, 427, 429, 434, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 475, 476, 479, 480, 482], "earlier": [10, 32, 61, 62, 70, 82, 83, 88, 90, 93, 98, 99, 101, 102, 108, 112, 113, 125, 176, 182, 192, 209, 229, 246, 258, 267, 269, 275, 292, 293, 299, 319, 331, 340, 341, 348, 352, 368, 379, 385, 387, 388, 393, 398, 399, 401, 410, 414, 423, 427, 429, 431, 434, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "tp_vectorcall_offset": [10, 56, 59, 61, 73, 482], "vectorcallfunc": [10, 27, 55, 61, 73, 473], "typedef": [10, 11, 15, 22, 28, 31, 32, 49, 56, 57, 59, 62, 66, 73, 74, 88, 482], "nargsf": 10, "kwname": [10, 56, 97], "py_vectorcall_arguments_offset": 10, "pyvectorcall_narg": [10, 55, 473, 482], "pyobject_vectorcallmethod": [10, 482], "pyobject_vectorcal": [10, 100, 482], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 482], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 482], "_pyobject_callmethodnoarg": [10, 482], "_pyobject_callmethodonearg": [10, 482], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 55, 481, 482], "py_leaverecursivecal": [10, 23, 55, 481, 482], "pyvectorcall_funct": [10, 482], "fall": [10, 15, 22, 25, 41, 61, 62, 82, 93, 98, 104, 160, 176, 180, 182, 185, 195, 204, 212, 224, 268, 289, 293, 295, 325, 341, 343, 344, 345, 393, 394, 424, 427, 431, 434, 447, 461, 463, 464, 466, 467, 468, 469, 471, 473, 474, 476, 478, 479, 481, 482], "pyobject_callnoarg": [10, 55, 73, 481, 482], "pyobject_callonearg": [10, 481, 482], "pyobject_callobject": [10, 55, 70, 71, 77], "pyobject_callfunct": [10, 55, 466, 480], "pyobject_callmethod": [10, 53, 55, 77, 471, 473], "pyobject_callfunctionobjarg": [10, 55, 482], "pyobject_callmethodobjarg": [10, 55, 482], "pyobject_callmethodnoarg": [10, 482], "pyobject_callmethodonearg": [10, 482], "arg1": [10, 73, 83, 93, 95, 114, 224, 292, 293, 427, 463, 464, 466], "arg2": [10, 73, 83, 93, 95, 114, 224, 292, 388, 427, 463, 464, 466], "kwdict": [10, 71], "py_tpflags_method_descriptor": [10, 49, 61, 66, 482], "unbound": [10, 61, 66, 99, 113, 185, 186, 190, 224, 225, 255, 268, 361, 364, 383, 384, 427, 428, 431, 435, 463, 465, 469, 471, 477, 479, 482], "pycallable_check": [10, 55, 70, 71], "pycapsul": [11, 71, 468, 470, 471, 474, 482], "opaqu": [11, 26, 32, 34, 38, 59, 61, 114, 170, 258, 314, 329, 342, 407, 412, 462, 471, 472, 474, 476, 479, 480, 481, 482], "who": [11, 66, 71, 96, 98, 99, 104, 105, 125, 162, 227, 229, 247, 267, 293, 300, 322, 341, 345, 357, 383, 410, 420, 422, 424, 445, 460, 461, 463, 464, 465, 466, 468, 472, 475, 478, 480, 481, 482], "often": [11, 13, 32, 34, 56, 62, 71, 73, 74, 82, 83, 88, 90, 91, 93, 96, 99, 102, 104, 105, 106, 108, 112, 118, 120, 139, 146, 151, 155, 165, 174, 175, 182, 183, 185, 189, 192, 193, 197, 212, 224, 226, 229, 232, 235, 255, 261, 281, 292, 299, 308, 309, 311, 331, 337, 340, 341, 343, 344, 346, 348, 353, 361, 364, 365, 368, 385, 388, 389, 394, 413, 420, 423, 427, 429, 433, 434, 435, 450, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 477, 480, 482], "dynam": [11, 22, 25, 30, 41, 44, 50, 61, 64, 66, 70, 71, 75, 76, 77, 78, 82, 83, 98, 99, 100, 103, 111, 114, 116, 141, 181, 189, 202, 224, 225, 246, 249, 250, 254, 255, 284, 293, 321, 335, 337, 340, 344, 345, 352, 368, 375, 383, 385, 388, 389, 406, 422, 427, 429, 431, 435, 439, 455, 461, 463, 464, 466, 467, 472, 474, 475, 476, 479, 480, 482], "load": [11, 14, 30, 32, 33, 34, 40, 44, 55, 56, 57, 66, 70, 71, 75, 77, 82, 83, 84, 88, 91, 92, 95, 97, 98, 99, 103, 106, 116, 120, 142, 151, 155, 165, 166, 183, 184, 186, 190, 192, 212, 216, 222, 242, 243, 246, 249, 250, 251, 253, 256, 261, 262, 264, 267, 268, 274, 276, 279, 284, 285, 293, 297, 298, 299, 302, 304, 307, 308, 311, 314, 320, 330, 334, 340, 341, 344, 352, 353, 361, 365, 367, 368, 378, 381, 383, 384, 404, 409, 412, 413, 418, 419, 420, 422, 423, 424, 426, 427, 430, 432, 435, 445, 454, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pycapsule_destructor": [11, 55], "destructor": [11, 32, 55, 61, 73, 74, 76, 82, 85, 113, 187, 293, 316, 348, 352, 427, 435, 454, 470, 474, 478, 480, 482], "pycapsule_new": [11, 55, 71], "pycapsule_checkexact": 11, "encapsul": [11, 82, 83, 86, 91, 97, 110, 112, 155, 165, 201, 207, 247, 258, 286, 305, 335, 352, 409, 413, 415, 418, 426, 431, 435, 465, 466, 467, 468, 476], "outliv": [11, 284, 426, 482], "permit": [11, 57, 71, 86, 88, 96, 120, 185, 209, 211, 220, 224, 244, 255, 257, 259, 262, 265, 271, 283, 284, 293, 299, 308, 319, 344, 348, 353, 388, 409, 418, 425, 429, 430, 435, 454, 466, 467, 473, 475, 476, 477, 480, 482], "attribut": [11, 22, 23, 26, 27, 30, 32, 34, 44, 48, 49, 54, 58, 59, 60, 61, 66, 72, 76, 77, 85, 86, 88, 93, 98, 102, 104, 106, 110, 111, 112, 113, 114, 116, 118, 120, 121, 125, 132, 136, 142, 144, 149, 150, 151, 155, 157, 158, 159, 166, 171, 174, 175, 176, 180, 182, 185, 186, 187, 189, 190, 192, 194, 195, 196, 199, 202, 204, 206, 207, 210, 212, 214, 215, 222, 224, 225, 227, 231, 232, 233, 234, 237, 239, 241, 242, 243, 244, 246, 247, 250, 251, 254, 258, 259, 262, 264, 268, 269, 270, 271, 273, 281, 283, 284, 286, 288, 291, 295, 296, 299, 302, 304, 305, 310, 312, 313, 314, 315, 319, 321, 325, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 347, 348, 350, 352, 357, 359, 360, 361, 363, 364, 365, 366, 368, 370, 371, 373, 378, 380, 381, 383, 384, 385, 387, 393, 394, 397, 398, 399, 401, 404, 406, 407, 409, 410, 412, 413, 414, 416, 418, 419, 421, 422, 423, 424, 425, 426, 428, 434, 435, 439, 441, 450, 455, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483], "modulenam": [11, 69, 71, 77, 83, 95, 449, 482], "attributenam": [11, 71], "enabl": [11, 28, 33, 34, 48, 55, 61, 66, 73, 74, 90, 92, 102, 106, 108, 110, 111, 118, 120, 132, 138, 142, 144, 151, 152, 155, 166, 168, 175, 176, 184, 185, 187, 192, 196, 212, 213, 222, 224, 225, 226, 229, 241, 244, 246, 247, 250, 255, 256, 258, 266, 268, 269, 283, 288, 293, 296, 297, 299, 305, 306, 308, 311, 314, 315, 318, 319, 320, 333, 334, 337, 340, 341, 344, 345, 348, 350, 352, 353, 357, 361, 366, 368, 370, 375, 379, 383, 385, 387, 389, 398, 399, 406, 411, 413, 414, 419, 421, 426, 427, 435, 454, 455, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482], "pycapsule_import": [11, 55, 71, 482], "pycapsule_getpoint": [11, 55, 468], "compar": [11, 23, 32, 33, 48, 61, 62, 66, 73, 82, 87, 90, 92, 96, 98, 99, 101, 102, 103, 104, 108, 120, 125, 147, 165, 175, 180, 181, 182, 185, 189, 190, 192, 194, 195, 196, 201, 213, 215, 224, 225, 235, 259, 262, 264, 266, 267, 269, 271, 283, 284, 290, 292, 296, 308, 311, 314, 316, 326, 328, 340, 341, 342, 344, 346, 352, 361, 362, 366, 368, 381, 385, 386, 387, 388, 389, 397, 404, 412, 424, 426, 427, 429, 431, 434, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "strcmp": [11, 18, 73, 482], "pycapsule_getdestructor": [11, 55], "legal": [11, 75, 88, 90, 105, 224, 240, 246, 249, 258, 297, 361, 365, 368, 375, 385, 419, 429, 434, 462, 463, 464, 466, 467, 468, 482], "somewhat": [11, 23, 88, 97, 99, 175, 182, 203, 225, 246, 266, 292, 293, 337, 368, 424, 461, 466, 469, 471, 479, 480, 482], "ambigu": [11, 34, 66, 88, 93, 102, 118, 182, 254, 259, 264, 292, 297, 319, 344, 424, 426, 429, 433, 434, 461, 467, 471, 472, 473, 476, 478, 479, 480, 481, 482], "pycapsule_isvalid": [11, 55, 468], "pyerr_occur": [11, 22, 23, 25, 34, 35, 38, 48, 55, 62, 70, 71, 88, 482], "disambigu": [11, 38, 66, 182, 429, 434, 482], "pycapsule_getcontext": [11, 55], "context": [11, 16, 23, 32, 41, 44, 48, 52, 62, 64, 66, 68, 71, 76, 77, 83, 85, 88, 93, 97, 103, 105, 118, 120, 121, 123, 125, 127, 128, 131, 138, 151, 152, 159, 163, 165, 166, 182, 183, 186, 187, 189, 190, 217, 222, 224, 229, 234, 235, 241, 250, 251, 252, 254, 255, 258, 262, 267, 268, 269, 270, 271, 278, 288, 290, 293, 295, 297, 298, 299, 305, 307, 308, 314, 315, 316, 319, 321, 322, 328, 329, 330, 335, 337, 338, 343, 345, 348, 352, 357, 358, 359, 361, 364, 367, 374, 376, 387, 388, 394, 398, 401, 404, 409, 411, 412, 413, 414, 418, 421, 426, 428, 429, 430, 434, 435, 455, 461, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483], "pycapsule_getnam": [11, 55], "no_block": [11, 482], "full": [11, 28, 32, 33, 34, 55, 61, 62, 66, 71, 74, 82, 88, 91, 93, 98, 99, 101, 102, 103, 106, 133, 138, 139, 147, 150, 156, 157, 160, 162, 163, 166, 167, 172, 174, 175, 179, 182, 185, 189, 190, 192, 196, 199, 200, 211, 212, 221, 226, 242, 246, 249, 251, 259, 261, 267, 269, 275, 278, 280, 281, 283, 284, 292, 293, 295, 296, 297, 302, 314, 316, 319, 331, 332, 333, 335, 337, 338, 341, 343, 344, 347, 348, 352, 357, 361, 365, 368, 383, 384, 385, 387, 388, 393, 394, 398, 401, 402, 406, 410, 412, 418, 421, 427, 428, 430, 431, 435, 445, 454, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "accessor": [11, 66, 83, 104, 224, 273, 410, 466, 480, 482], "pycapsule_get": 11, "nonzero": [11, 23, 32, 57, 71, 100, 102, 110, 113, 185, 190, 224, 269, 275, 278, 283, 300, 311, 319, 344, 352, 360, 364, 365, 427, 434, 454, 467, 480], "pycapsule_setcontext": [11, 55], "pycapsule_setdestructor": [11, 55], "pycapsule_setnam": [11, 55], "made": [11, 12, 30, 32, 34, 42, 57, 61, 64, 70, 83, 88, 92, 95, 98, 99, 101, 102, 108, 110, 111, 118, 132, 138, 139, 157, 159, 165, 166, 168, 175, 176, 182, 185, 190, 192, 195, 198, 199, 204, 207, 212, 222, 229, 231, 241, 242, 246, 249, 250, 255, 258, 267, 268, 269, 275, 278, 281, 283, 293, 297, 299, 307, 308, 314, 320, 321, 322, 324, 328, 331, 332, 333, 334, 335, 337, 341, 343, 344, 348, 357, 361, 364, 368, 381, 385, 388, 389, 393, 397, 399, 401, 406, 409, 412, 418, 419, 420, 424, 425, 426, 427, 435, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pycapsule_setpoint": [11, 55], "multipl": [12, 30, 32, 33, 44, 46, 55, 61, 62, 66, 69, 71, 73, 74, 82, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 105, 106, 108, 113, 114, 118, 119, 120, 123, 125, 134, 136, 139, 143, 149, 151, 157, 159, 162, 166, 168, 174, 176, 180, 182, 185, 186, 188, 192, 198, 204, 208, 212, 218, 220, 222, 224, 225, 227, 229, 231, 233, 234, 244, 246, 251, 253, 254, 255, 258, 261, 262, 267, 268, 270, 271, 275, 276, 278, 282, 283, 284, 292, 293, 297, 299, 300, 302, 307, 314, 319, 320, 329, 330, 331, 335, 337, 338, 340, 341, 342, 343, 344, 347, 351, 352, 361, 364, 366, 368, 374, 375, 376, 379, 383, 385, 387, 397, 398, 399, 401, 406, 408, 412, 414, 418, 426, 427, 428, 429, 430, 431, 434, 435, 440, 454, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "scope": [12, 34, 50, 66, 74, 76, 83, 85, 88, 92, 96, 98, 99, 111, 112, 120, 144, 159, 190, 255, 259, 297, 307, 314, 320, 331, 337, 341, 351, 352, 368, 385, 388, 389, 398, 410, 412, 414, 426, 427, 428, 429, 431, 435, 444, 449, 461, 467, 469, 474, 475, 478, 479, 480, 481, 482, 483], "stack": [12, 23, 32, 34, 57, 66, 71, 73, 76, 88, 92, 98, 100, 113, 116, 120, 125, 134, 138, 140, 144, 156, 159, 168, 170, 176, 183, 184, 190, 192, 212, 213, 224, 225, 246, 254, 257, 267, 269, 297, 315, 316, 319, 322, 331, 333, 337, 341, 342, 344, 352, 364, 374, 387, 388, 389, 426, 427, 428, 429, 434, 435, 442, 444, 454, 461, 462, 465, 466, 467, 468, 472, 474, 475, 476, 477, 479, 480, 481, 482], "frame": [12, 13, 16, 19, 23, 29, 32, 34, 48, 51, 64, 66, 76, 82, 92, 95, 100, 115, 138, 141, 142, 143, 144, 170, 176, 184, 190, 212, 213, 246, 255, 262, 267, 297, 315, 333, 336, 337, 341, 344, 349, 352, 367, 368, 373, 374, 375, 380, 384, 400, 406, 426, 427, 428, 454, 462, 464, 465, 466, 468, 471, 475, 476, 477, 479, 481, 482], "outer": [12, 26, 83, 138, 168, 185, 190, 206, 225, 236, 239, 255, 352, 426, 427, 428, 429, 434, 435, 469, 472, 474, 475, 481, 482], "itself": [12, 32, 41, 44, 48, 59, 61, 62, 65, 66, 70, 71, 73, 74, 83, 86, 88, 91, 92, 93, 97, 98, 99, 102, 106, 108, 112, 113, 114, 117, 118, 120, 125, 132, 138, 144, 150, 151, 155, 162, 175, 176, 177, 180, 182, 187, 190, 192, 194, 196, 202, 204, 212, 214, 224, 225, 242, 244, 246, 247, 249, 250, 255, 257, 259, 261, 262, 268, 269, 271, 281, 282, 283, 284, 288, 292, 293, 296, 299, 308, 314, 319, 331, 332, 337, 340, 341, 344, 345, 346, 348, 352, 354, 357, 358, 360, 361, 364, 375, 380, 383, 384, 385, 387, 388, 393, 394, 396, 398, 399, 413, 414, 415, 418, 422, 427, 428, 429, 431, 433, 434, 435, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 481, 482], "generat": [12, 26, 29, 30, 32, 48, 56, 62, 64, 66, 69, 70, 71, 73, 75, 77, 83, 85, 95, 98, 99, 100, 105, 108, 110, 111, 118, 120, 121, 125, 129, 133, 134, 136, 138, 141, 142, 143, 144, 150, 151, 155, 157, 160, 162, 165, 168, 172, 174, 176, 180, 181, 182, 186, 189, 190, 192, 193, 195, 202, 204, 207, 208, 210, 212, 216, 222, 224, 226, 229, 234, 239, 243, 244, 247, 254, 261, 264, 267, 269, 271, 275, 281, 283, 284, 285, 289, 293, 296, 299, 307, 311, 314, 315, 318, 319, 321, 323, 326, 331, 335, 340, 343, 346, 348, 350, 352, 356, 357, 365, 368, 375, 376, 377, 379, 380, 383, 384, 385, 387, 393, 394, 397, 401, 406, 408, 409, 412, 416, 418, 419, 420, 426, 427, 428, 430, 431, 433, 434, 435, 444, 454, 455, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483], "elsewher": [12, 102, 112, 138, 156, 166, 272, 283, 324, 385, 409, 431, 434, 471, 476, 482], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 29, 54, 65, 401, 472], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 471, 482], "low": [13, 16, 24, 34, 37, 58, 61, 62, 66, 73, 82, 95, 98, 102, 103, 105, 125, 128, 129, 132, 134, 135, 136, 138, 139, 146, 150, 163, 166, 168, 176, 177, 190, 212, 222, 224, 254, 258, 260, 281, 284, 293, 296, 308, 318, 319, 328, 329, 330, 333, 335, 340, 341, 343, 344, 352, 355, 368, 399, 401, 412, 414, 423, 455, 463, 464, 466, 467, 468, 471, 473, 475, 477, 478, 480, 482], "detail": [13, 17, 18, 26, 33, 41, 44, 52, 53, 55, 57, 59, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 82, 83, 86, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 105, 106, 108, 110, 112, 116, 118, 120, 125, 132, 136, 138, 141, 144, 151, 152, 157, 168, 171, 172, 174, 175, 176, 180, 181, 185, 189, 190, 192, 193, 195, 200, 204, 206, 210, 212, 214, 224, 229, 233, 234, 244, 245, 246, 249, 250, 251, 255, 258, 259, 262, 265, 267, 269, 270, 271, 272, 281, 283, 292, 293, 299, 300, 319, 322, 324, 331, 335, 337, 338, 340, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 357, 358, 361, 363, 364, 368, 380, 384, 385, 387, 388, 393, 394, 398, 399, 401, 404, 406, 409, 412, 414, 418, 420, 421, 426, 427, 428, 429, 430, 431, 433, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "execut": [13, 23, 24, 26, 32, 33, 34, 44, 48, 50, 51, 57, 64, 66, 70, 71, 73, 74, 75, 76, 82, 83, 87, 88, 91, 93, 95, 99, 100, 101, 102, 105, 108, 111, 112, 113, 118, 120, 127, 132, 134, 136, 138, 140, 142, 144, 151, 155, 156, 157, 159, 162, 165, 168, 169, 175, 184, 186, 191, 200, 212, 224, 225, 233, 235, 244, 247, 249, 250, 254, 255, 258, 266, 267, 268, 269, 272, 280, 281, 283, 284, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 308, 309, 313, 315, 320, 322, 325, 328, 330, 331, 332, 334, 337, 340, 342, 344, 346, 348, 350, 352, 353, 364, 365, 367, 368, 370, 374, 377, 385, 387, 388, 389, 394, 398, 399, 402, 404, 406, 419, 426, 429, 430, 431, 432, 435, 436, 442, 449, 450, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "hasn": [13, 34, 77, 82, 83, 88, 108, 132, 134, 138, 165, 189, 231, 297, 314, 334, 341, 348, 355, 388, 389, 461, 462, 466, 467, 469, 477, 479, 482], "pycodeobject": [13, 26, 472, 482], "subject": [13, 44, 53, 59, 61, 73, 82, 93, 98, 99, 106, 120, 166, 182, 190, 192, 195, 199, 201, 202, 204, 242, 246, 262, 267, 268, 269, 271, 288, 293, 307, 308, 330, 337, 341, 361, 365, 385, 425, 426, 427, 430, 434, 440, 466, 471, 472, 473, 476, 482], "chang": [13, 17, 22, 23, 32, 33, 34, 44, 50, 52, 53, 55, 56, 57, 58, 59, 61, 64, 66, 70, 71, 73, 74, 75, 76, 77, 86, 87, 90, 91, 92, 93, 95, 99, 101, 102, 105, 106, 108, 110, 111, 113, 114, 118, 120, 138, 149, 150, 151, 155, 162, 165, 166, 168, 169, 174, 175, 176, 178, 180, 182, 183, 185, 189, 190, 192, 193, 195, 196, 200, 204, 205, 206, 207, 210, 211, 212, 215, 217, 221, 222, 224, 225, 226, 230, 233, 234, 239, 242, 245, 246, 247, 249, 250, 251, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 275, 278, 281, 283, 284, 293, 294, 296, 297, 299, 305, 306, 308, 311, 313, 314, 319, 320, 321, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 352, 356, 357, 360, 361, 363, 364, 365, 366, 368, 374, 375, 376, 377, 381, 384, 385, 387, 388, 389, 393, 394, 399, 400, 404, 406, 409, 410, 411, 412, 415, 420, 421, 424, 425, 426, 427, 428, 431, 433, 434, 435, 440, 450, 454, 455, 460, 482, 483], "pycode_typ": 13, "pycode_check": 13, "co": [13, 30, 56, 64, 66, 74, 118, 165, 176, 256, 337, 361, 465, 474, 479, 482], "pycode_getnumfre": 13, "pycode_new": [13, 468, 472, 480, 482], "argcount": [13, 64, 142, 384, 480], "kwonlyargcount": [13, 142, 384, 482], "nlocal": [13, 142, 384], "stacksiz": [13, 142, 384, 482], "varnam": [13, 482], "freevar": [13, 482], "cellvar": [13, 224, 482], "filenam": [13, 23, 32, 33, 44, 57, 64, 66, 69, 75, 82, 83, 88, 93, 95, 98, 99, 102, 108, 110, 117, 118, 120, 142, 144, 149, 151, 155, 156, 157, 158, 159, 162, 166, 168, 174, 175, 183, 184, 186, 188, 189, 192, 195, 196, 199, 200, 204, 212, 213, 217, 218, 222, 224, 229, 230, 233, 242, 246, 249, 250, 254, 255, 256, 265, 267, 268, 269, 270, 272, 279, 281, 283, 285, 286, 292, 293, 294, 295, 296, 297, 299, 302, 304, 308, 309, 311, 315, 319, 320, 330, 331, 332, 336, 348, 351, 352, 356, 357, 361, 368, 374, 377, 380, 381, 383, 384, 387, 389, 394, 399, 402, 404, 405, 406, 410, 411, 412, 413, 420, 421, 427, 435, 437, 445, 450, 451, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "firstlineno": 13, "linet": 13, "exceptiont": 13, "dummi": [13, 66, 71, 99, 112, 163, 175, 189, 229, 258, 293, 341, 357, 361, 364, 383, 406, 478, 482], "pycode_newempti": [13, 468], "bind": [13, 43, 56, 66, 83, 91, 99, 103, 125, 128, 139, 142, 168, 170, 176, 192, 222, 224, 229, 240, 244, 255, 266, 268, 294, 298, 314, 315, 320, 329, 335, 337, 338, 341, 350, 351, 352, 361, 367, 370, 374, 375, 383, 408, 426, 427, 429, 431, 432, 433, 435, 440, 458, 461, 462, 463, 465, 466, 467, 471, 475, 476, 477, 479, 482], "definit": [13, 30, 32, 34, 38, 44, 49, 55, 56, 57, 62, 66, 71, 73, 74, 83, 85, 86, 88, 90, 92, 96, 97, 99, 102, 105, 110, 114, 118, 143, 144, 150, 157, 160, 168, 175, 176, 180, 182, 210, 224, 225, 229, 231, 237, 246, 249, 250, 251, 254, 255, 256, 264, 267, 269, 273, 281, 283, 284, 289, 292, 299, 308, 312, 313, 315, 324, 335, 340, 344, 345, 352, 358, 363, 365, 376, 383, 384, 385, 386, 387, 394, 397, 401, 407, 408, 409, 410, 413, 427, 428, 429, 430, 431, 432, 433, 434, 435, 444, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 479, 480, 481, 482], "bytecod": [13, 30, 32, 34, 64, 66, 82, 83, 85, 93, 95, 100, 102, 162, 186, 224, 249, 250, 254, 255, 264, 300, 311, 324, 333, 351, 352, 381, 427, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 482, 483], "inter": [13, 189, 257, 260, 333, 385, 474], "depend": [13, 14, 18, 32, 33, 34, 44, 51, 55, 61, 62, 66, 68, 70, 71, 73, 75, 76, 77, 82, 83, 88, 90, 91, 92, 93, 97, 98, 99, 102, 103, 104, 105, 108, 109, 112, 113, 120, 125, 132, 138, 139, 144, 150, 151, 155, 157, 166, 168, 172, 175, 176, 180, 182, 185, 189, 190, 192, 194, 204, 207, 209, 210, 212, 214, 218, 220, 222, 224, 226, 229, 230, 231, 233, 234, 241, 242, 243, 246, 250, 255, 256, 257, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 279, 281, 283, 288, 293, 296, 299, 308, 309, 310, 315, 319, 322, 328, 329, 330, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 357, 358, 359, 360, 361, 363, 365, 366, 368, 375, 383, 385, 387, 388, 389, 394, 397, 398, 400, 401, 402, 404, 405, 406, 412, 414, 418, 420, 423, 424, 426, 427, 428, 429, 431, 434, 435, 451, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "subtl": [13, 23, 61, 71, 174, 192, 214, 289, 292, 295, 308, 427, 428, 476, 482], "incorrect": [13, 95, 99, 102, 110, 143, 156, 183, 192, 212, 224, 243, 246, 255, 267, 271, 292, 293, 348, 365, 387, 388, 389, 396, 410, 421, 427, 430, 462, 463, 464, 466, 469, 471, 472, 474, 475, 476, 480, 481, 482], "vm": [13, 61, 82, 322, 472, 475, 482], "crash": [13, 34, 42, 55, 61, 71, 73, 97, 120, 151, 175, 183, 187, 213, 246, 271, 283, 292, 297, 299, 352, 361, 461, 466, 467, 475, 476, 478, 482], "extrem": [13, 76, 93, 97, 99, 105, 206, 262, 268, 293, 299, 318, 343, 388, 409, 421, 429, 482], "care": [13, 16, 23, 32, 34, 50, 61, 64, 66, 71, 73, 74, 82, 83, 88, 91, 92, 97, 98, 99, 101, 102, 105, 106, 112, 118, 120, 134, 144, 168, 175, 180, 182, 185, 190, 192, 195, 207, 210, 226, 229, 250, 258, 267, 268, 269, 271, 283, 289, 292, 299, 308, 314, 319, 330, 333, 348, 350, 352, 357, 387, 388, 389, 399, 407, 410, 412, 420, 427, 429, 447, 454, 460, 461, 465, 466, 467, 468, 469, 471, 472, 474, 476, 481, 482], "pycode_newwithposonlyarg": [13, 472, 480, 482], "posonlyargcount": [13, 142, 384, 480, 482], "caveat": [13, 66, 113, 182, 191, 245, 249, 250, 255, 308, 311, 388, 427, 435], "appli": [13, 18, 33, 34, 50, 61, 62, 66, 71, 73, 86, 92, 93, 98, 99, 108, 110, 114, 118, 120, 138, 141, 154, 157, 163, 168, 174, 175, 176, 177, 180, 182, 185, 186, 189, 190, 192, 197, 204, 207, 208, 212, 219, 222, 224, 225, 229, 234, 242, 243, 244, 246, 249, 255, 259, 261, 267, 268, 270, 271, 272, 276, 283, 292, 293, 297, 299, 308, 314, 319, 321, 322, 324, 328, 332, 337, 341, 343, 344, 345, 348, 352, 353, 361, 364, 365, 366, 368, 375, 377, 381, 385, 386, 387, 388, 393, 399, 408, 410, 412, 418, 421, 425, 426, 427, 429, 431, 435, 441, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "funcnam": [13, 66, 70, 95, 144, 184, 267, 426, 439], "line": [13, 23, 24, 26, 32, 33, 34, 62, 64, 66, 70, 71, 74, 82, 83, 87, 88, 90, 92, 93, 95, 97, 98, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 116, 117, 121, 124, 135, 136, 142, 143, 144, 146, 149, 150, 151, 152, 154, 156, 157, 158, 159, 166, 168, 169, 174, 175, 176, 177, 182, 184, 185, 186, 187, 190, 191, 192, 194, 195, 198, 199, 200, 201, 203, 204, 206, 207, 212, 213, 218, 221, 222, 224, 229, 239, 241, 244, 247, 250, 251, 254, 258, 259, 261, 264, 267, 268, 269, 270, 271, 272, 278, 281, 282, 283, 285, 286, 288, 296, 297, 298, 299, 301, 302, 305, 307, 308, 312, 313, 314, 315, 317, 319, 321, 324, 327, 331, 332, 335, 341, 343, 344, 345, 348, 350, 351, 352, 353, 358, 362, 363, 366, 367, 368, 371, 374, 376, 380, 381, 383, 385, 386, 388, 389, 395, 398, 399, 402, 406, 410, 412, 415, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 439, 440, 441, 442, 445, 447, 448, 450, 451, 452, 455, 457, 461, 462, 463, 464, 466, 467, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483], "pycode_addr2lin": [13, 464, 471, 472, 478], "byte_offset": 13, "pyframe_getlinenumb": [13, 26, 55, 468, 471, 472, 478, 481], "626": [13, 66, 190, 482], "pycode_addr2loc": [13, 472, 482], "start_lin": [13, 427], "start_column": [13, 427], "end_lin": [13, 427], "end_column": [13, 427], "column": [13, 33, 61, 66, 83, 88, 95, 105, 116, 120, 150, 151, 155, 174, 176, 189, 190, 192, 212, 221, 224, 246, 255, 262, 281, 293, 300, 308, 314, 319, 332, 340, 344, 347, 363, 367, 368, 377, 412, 415, 427, 454, 461, 468, 472, 477, 482], "particular": [13, 32, 34, 44, 55, 57, 61, 62, 64, 66, 70, 71, 73, 76, 83, 91, 93, 96, 97, 98, 102, 105, 106, 108, 112, 113, 114, 118, 120, 138, 151, 157, 160, 166, 168, 174, 176, 182, 192, 202, 207, 212, 226, 231, 239, 242, 246, 247, 249, 251, 255, 259, 262, 263, 267, 268, 269, 271, 275, 276, 283, 284, 288, 292, 293, 297, 299, 302, 308, 319, 322, 328, 332, 333, 334, 335, 337, 338, 341, 342, 344, 345, 347, 348, 352, 354, 361, 363, 364, 368, 374, 375, 380, 385, 387, 388, 389, 393, 394, 398, 399, 401, 409, 410, 412, 419, 423, 425, 426, 427, 429, 430, 431, 433, 435, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482], "pycode_getcod": [13, 472, 482], "getattr": [13, 66, 76, 83, 85, 86, 91, 98, 99, 114, 125, 159, 175, 180, 190, 224, 254, 255, 283, 291, 292, 299, 345, 384, 385, 426, 439, 449, 461, 474, 476, 479, 482], "co_cod": [13, 255, 427, 472, 482], "strong": [13, 26, 32, 50, 56, 61, 71, 73, 85, 92, 98, 108, 138, 169, 182, 224, 239, 341, 343, 352, 401, 414, 421, 423, 427, 431, 462, 463, 466, 467, 471, 472, 475, 478, 482], "demand": [13, 41, 62, 91, 166, 283, 292, 388, 460, 471, 477, 481, 482], "necessarili": [13, 23, 34, 55, 59, 61, 70, 74, 83, 97, 103, 108, 113, 120, 176, 185, 192, 195, 204, 251, 271, 275, 283, 284, 293, 299, 319, 337, 340, 341, 343, 344, 352, 365, 384, 388, 406, 409, 414, 424, 435, 460, 464, 466, 467, 468, 472, 482], "primari": [13, 66, 74, 76, 83, 88, 91, 92, 104, 112, 156, 168, 192, 193, 195, 204, 205, 217, 226, 261, 267, 276, 281, 293, 299, 308, 334, 337, 340, 341, 345, 352, 377, 401, 418, 424, 430, 431, 432, 435, 451, 461, 462, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 482], "debugg": [13, 31, 41, 66, 71, 83, 184, 192, 212, 224, 246, 254, 321, 352, 387, 427, 439, 455, 460, 463, 464, 466, 467, 468, 472, 473, 474, 478, 479, 480, 482], "profil": [13, 31, 33, 34, 66, 83, 94, 95, 157, 184, 254, 333, 341, 346, 352, 353, 364, 368, 404, 437, 450, 454, 455, 458, 462, 463, 465, 466, 467, 469, 471, 472, 473, 478, 480, 482], "pycode_getvarnam": [13, 472, 482], "co_varnam": [13, 190, 255, 427, 472, 482], "pytupleobject": [13, 52, 57, 58, 60], "pycode_getcellvar": [13, 472, 482], "co_cellvar": [13, 255, 427, 472, 482], "pycode_getfreevar": [13, 472, 482], "co_freevar": [13, 255, 427, 472, 482], "pycodec_regist": [14, 55], "search_funct": [14, 157], "regist": [14, 22, 32, 33, 57, 59, 61, 66, 71, 74, 82, 83, 85, 88, 105, 106, 114, 118, 125, 127, 131, 132, 135, 140, 145, 157, 160, 163, 166, 168, 174, 184, 192, 196, 202, 207, 213, 224, 225, 250, 254, 256, 258, 267, 276, 283, 289, 293, 298, 299, 302, 315, 320, 328, 329, 332, 333, 337, 341, 344, 352, 361, 368, 375, 383, 385, 387, 394, 399, 401, 402, 405, 409, 412, 414, 419, 420, 426, 427, 429, 431, 461, 462, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482], "search": [14, 23, 30, 32, 33, 34, 57, 62, 66, 73, 82, 83, 91, 97, 98, 105, 112, 141, 147, 151, 157, 159, 162, 175, 192, 195, 210, 215, 224, 229, 230, 247, 249, 250, 254, 256, 265, 266, 267, 268, 270, 278, 279, 280, 288, 293, 296, 297, 299, 302, 308, 311, 312, 313, 331, 332, 334, 340, 344, 348, 352, 362, 367, 368, 370, 374, 383, 387, 394, 395, 402, 409, 411, 412, 414, 419, 421, 422, 424, 426, 427, 428, 429, 432, 435, 447, 449, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482], "tri": [14, 32, 33, 34, 41, 44, 47, 48, 56, 61, 66, 69, 71, 73, 74, 75, 76, 77, 82, 85, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 106, 108, 110, 112, 113, 118, 120, 125, 132, 134, 137, 138, 140, 141, 146, 151, 158, 159, 165, 166, 174, 175, 176, 182, 185, 187, 189, 190, 192, 199, 202, 208, 211, 212, 222, 224, 225, 227, 229, 235, 244, 246, 249, 250, 255, 258, 261, 262, 264, 266, 267, 268, 269, 271, 276, 279, 282, 283, 286, 289, 292, 293, 295, 296, 297, 299, 302, 305, 308, 313, 314, 315, 319, 320, 322, 323, 331, 332, 333, 335, 337, 340, 341, 344, 345, 348, 352, 357, 358, 360, 361, 364, 366, 368, 374, 380, 383, 385, 388, 389, 394, 398, 399, 401, 402, 406, 407, 412, 418, 419, 421, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 442, 445, 448, 454, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "packag": [14, 30, 32, 33, 55, 61, 62, 66, 68, 72, 74, 75, 77, 78, 83, 85, 91, 98, 99, 108, 109, 110, 143, 151, 159, 175, 182, 186, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 224, 229, 237, 241, 246, 249, 250, 252, 253, 254, 255, 261, 267, 268, 269, 276, 279, 280, 281, 283, 285, 307, 312, 313, 315, 324, 330, 334, 335, 340, 341, 343, 345, 352, 353, 354, 367, 368, 374, 378, 379, 383, 384, 385, 387, 388, 389, 391, 398, 399, 408, 410, 413, 420, 421, 422, 424, 425, 432, 435, 437, 444, 452, 453, 454, 455, 457, 459, 461, 463, 465, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "sure": [14, 16, 23, 44, 50, 61, 62, 66, 70, 73, 74, 76, 77, 82, 83, 88, 90, 93, 98, 99, 102, 108, 118, 151, 155, 157, 166, 175, 185, 212, 224, 226, 234, 250, 266, 283, 292, 293, 296, 329, 340, 341, 359, 361, 364, 368, 396, 399, 400, 412, 420, 427, 460, 463, 464, 466, 467, 469, 474, 475, 482], "pycodec_unregist": [14, 55, 471, 482], "unregist": [14, 66, 125, 127, 140, 145, 157, 184, 213, 293, 315, 328, 329, 332, 368, 401, 471, 481, 482], "clear": [14, 22, 31, 32, 34, 44, 46, 57, 59, 61, 66, 71, 73, 74, 78, 83, 88, 90, 93, 95, 97, 99, 101, 102, 103, 105, 106, 116, 118, 125, 137, 155, 157, 159, 160, 163, 166, 168, 176, 181, 185, 190, 192, 193, 204, 215, 221, 222, 225, 226, 231, 235, 242, 246, 250, 255, 256, 265, 267, 269, 271, 273, 276, 285, 292, 293, 297, 302, 319, 320, 332, 333, 337, 340, 343, 344, 352, 361, 364, 375, 380, 381, 383, 385, 387, 388, 389, 398, 399, 412, 422, 426, 427, 429, 441, 448, 455, 460, 461, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482], "cach": [14, 30, 33, 41, 59, 61, 62, 66, 71, 73, 82, 85, 91, 98, 102, 106, 114, 147, 157, 159, 162, 175, 183, 189, 190, 215, 219, 223, 225, 229, 249, 250, 265, 267, 280, 283, 288, 293, 302, 311, 319, 324, 330, 340, 341, 347, 352, 359, 361, 381, 385, 387, 394, 401, 422, 424, 426, 449, 451, 452, 454, 460, 462, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "noth": [14, 23, 32, 33, 34, 41, 56, 62, 70, 71, 73, 76, 88, 98, 99, 102, 103, 106, 108, 113, 114, 120, 121, 131, 138, 140, 154, 157, 168, 176, 180, 182, 189, 190, 192, 197, 209, 210, 212, 222, 225, 239, 246, 247, 249, 258, 266, 267, 268, 269, 271, 282, 283, 292, 299, 305, 319, 332, 333, 338, 340, 344, 346, 348, 358, 364, 368, 381, 385, 387, 398, 406, 416, 425, 427, 429, 434, 435, 440, 454, 463, 464, 467, 468, 476, 477, 480, 481, 482], "pycodec_knownencod": [14, 55], "pycodec_encod": [14, 55], "lookuperror": [14, 23, 62, 66, 157, 169, 212, 344, 449, 476], "pycodec_decod": [14, 55], "decod": [14, 23, 32, 33, 57, 62, 64, 66, 70, 71, 85, 99, 101, 105, 119, 125, 132, 135, 136, 141, 143, 145, 146, 174, 175, 187, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 212, 224, 234, 243, 250, 254, 256, 258, 270, 285, 288, 293, 296, 299, 300, 337, 340, 341, 344, 348, 350, 352, 357, 358, 361, 376, 377, 378, 393, 394, 396, 398, 406, 418, 421, 427, 431, 434, 450, 454, 461, 463, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 481, 482], "look": [14, 18, 28, 32, 34, 35, 41, 44, 48, 55, 61, 62, 70, 71, 73, 74, 75, 76, 77, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 105, 106, 108, 110, 112, 114, 118, 120, 125, 138, 141, 143, 147, 151, 157, 166, 168, 175, 176, 179, 180, 182, 185, 188, 189, 190, 192, 195, 196, 198, 202, 204, 210, 212, 224, 225, 229, 233, 242, 244, 246, 249, 250, 251, 259, 265, 267, 268, 269, 271, 292, 293, 294, 295, 296, 302, 308, 313, 319, 324, 332, 338, 340, 341, 344, 345, 348, 352, 353, 354, 361, 366, 367, 368, 375, 377, 380, 381, 384, 386, 387, 388, 389, 394, 401, 406, 409, 412, 422, 424, 426, 427, 428, 429, 431, 434, 435, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 480, 482], "lower": [14, 32, 55, 62, 66, 70, 82, 83, 85, 90, 95, 99, 101, 102, 104, 120, 125, 132, 138, 140, 146, 155, 157, 159, 162, 166, 176, 177, 179, 185, 194, 195, 199, 201, 202, 204, 210, 224, 225, 235, 239, 244, 247, 261, 271, 283, 288, 293, 308, 319, 322, 325, 337, 340, 341, 344, 345, 352, 364, 365, 366, 374, 376, 383, 393, 394, 427, 429, 435, 462, 464, 465, 466, 467, 468, 470, 474, 476, 481, 482], "insensit": [14, 18, 66, 102, 104, 105, 157, 166, 195, 204, 243, 244, 250, 276, 319, 334, 340, 345, 346, 361, 399, 406, 454, 460, 465, 467, 479, 482, 483], "keyerror": [14, 22, 23, 34, 53, 66, 76, 83, 159, 166, 169, 183, 195, 196, 204, 210, 212, 232, 235, 242, 249, 250, 261, 271, 296, 310, 328, 329, 330, 339, 344, 345, 354, 357, 384, 385, 386, 388, 389, 421, 424, 427, 431, 449, 451, 464, 465, 468, 475, 478, 480, 482], "pycodec_incrementalencod": [14, 55], "incrementalencod": [14, 66, 145, 466], "pycodec_incrementaldecod": [14, 55], "incrementaldecod": [14, 66, 145, 258, 466], "pycodec_streamread": [14, 55], "stream": [14, 24, 32, 33, 40, 66, 82, 85, 93, 98, 103, 105, 116, 121, 125, 135, 136, 138, 145, 146, 149, 156, 168, 176, 193, 199, 200, 205, 206, 211, 212, 218, 224, 228, 233, 241, 244, 246, 248, 252, 254, 261, 262, 267, 268, 269, 270, 276, 281, 293, 298, 300, 307, 308, 314, 328, 329, 331, 332, 333, 334, 336, 337, 338, 348, 349, 352, 357, 361, 377, 385, 387, 394, 398, 400, 406, 407, 408, 411, 412, 415, 416, 418, 421, 423, 427, 429, 433, 434, 454, 461, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 482], "streamread": [14, 66, 123, 125, 136, 145, 465, 466, 471, 477, 478, 482], "factori": [14, 61, 66, 85, 96, 118, 125, 127, 129, 132, 138, 157, 168, 171, 175, 188, 192, 202, 206, 207, 225, 250, 256, 267, 268, 269, 271, 275, 280, 283, 290, 292, 315, 332, 340, 364, 368, 370, 385, 389, 401, 406, 409, 412, 418, 419, 427, 463, 466, 467, 470, 472, 473, 474, 475, 477, 479, 480, 481, 482], "pycodec_streamwrit": [14, 55], "streamwrit": [14, 66, 123, 125, 136, 145, 466, 472, 479, 482], "pycodec_registererror": [14, 55], "unencod": [14, 44, 105, 157, 317, 464, 469, 474, 482], "undecod": [14, 57, 105, 157, 195, 293, 474, 482], "unicodeencodeerror": [14, 23, 44, 66, 69, 105, 157, 212, 352, 393, 449, 472, 474, 480, 482], "unicodedecodeerror": [14, 23, 66, 105, 157, 212, 293, 393, 449, 466, 469, 474, 476, 480, 482], "unicodetranslateerror": [14, 23, 66, 157, 212, 449, 482], "problemat": [14, 59, 108, 166, 268, 283, 465, 470, 472, 474, 479, 482], "extract": [14, 20, 34, 54, 66, 70, 72, 73, 92, 93, 96, 97, 117, 118, 147, 176, 182, 189, 190, 192, 196, 197, 199, 224, 229, 235, 241, 242, 251, 252, 255, 261, 293, 312, 313, 315, 319, 330, 332, 335, 344, 352, 357, 380, 393, 427, 460, 464, 465, 466, 467, 468, 471, 472, 474, 476, 477, 478, 480, 482], "replac": [14, 22, 24, 30, 32, 33, 34, 37, 41, 54, 55, 57, 58, 61, 62, 66, 68, 69, 71, 76, 82, 83, 87, 88, 90, 91, 92, 93, 99, 105, 108, 110, 116, 118, 120, 125, 131, 138, 150, 151, 156, 157, 163, 165, 166, 172, 175, 176, 178, 180, 181, 182, 189, 190, 192, 195, 196, 201, 204, 205, 208, 210, 212, 213, 217, 218, 224, 228, 234, 235, 238, 239, 249, 250, 251, 252, 255, 258, 266, 267, 268, 271, 272, 276, 279, 283, 292, 293, 294, 296, 297, 307, 308, 315, 318, 319, 320, 321, 331, 332, 333, 340, 341, 343, 344, 345, 352, 357, 361, 363, 364, 365, 367, 368, 370, 374, 375, 377, 378, 381, 383, 384, 385, 386, 387, 388, 389, 393, 394, 398, 399, 401, 406, 408, 409, 412, 414, 416, 420, 421, 424, 427, 429, 432, 434, 435, 448, 450, 454, 455, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "resum": [14, 32, 93, 132, 138, 168, 176, 177, 190, 255, 283, 293, 296, 297, 299, 314, 360, 364, 406, 426, 427, 429, 463, 464, 465, 466, 472, 482], "pycodec_lookuperror": [14, 55], "strict": [14, 33, 61, 62, 66, 71, 92, 93, 96, 99, 103, 104, 105, 108, 118, 132, 143, 157, 166, 174, 175, 180, 181, 182, 185, 193, 201, 206, 207, 210, 216, 217, 224, 239, 241, 242, 243, 247, 252, 255, 258, 259, 261, 262, 276, 285, 293, 294, 295, 296, 299, 341, 344, 352, 361, 365, 393, 394, 409, 425, 426, 427, 428, 429, 431, 434, 455, 461, 462, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479, 482], "pycodec_stricterror": [14, 55], "exc": [14, 23, 32, 46, 110, 120, 132, 138, 165, 168, 212, 380, 387, 389, 427, 435, 442, 467, 469, 471, 475, 482], "pycodec_ignoreerror": [14, 55], "faulti": 14, "pycodec_replaceerror": [14, 55], "fffd": [14, 105, 157, 461], "pycodec_xmlcharrefreplaceerror": [14, 55], "xml": [14, 66, 78, 93, 102, 105, 157, 224, 254, 256, 258, 273, 304, 327, 394, 417, 450, 451, 460, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 478, 482, 483], "pycodec_backslashreplaceerror": [14, 55], "backslash": [14, 66, 108, 157, 158, 192, 208, 224, 246, 258, 283, 293, 296, 319, 348, 434, 445, 464, 465, 469, 478, 479, 482], "escap": [14, 16, 41, 48, 57, 66, 71, 76, 90, 99, 102, 105, 118, 125, 136, 157, 166, 174, 176, 177, 189, 207, 218, 221, 224, 230, 237, 246, 250, 258, 262, 273, 288, 319, 321, 331, 344, 345, 348, 362, 365, 383, 385, 393, 416, 418, 427, 434, 448, 461, 462, 465, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pycodec_namereplaceerror": [14, 55, 477], "distinct": [15, 32, 34, 41, 44, 61, 83, 90, 101, 102, 103, 105, 141, 168, 180, 182, 185, 192, 225, 261, 268, 270, 275, 284, 292, 299, 308, 334, 341, 344, 352, 368, 385, 406, 431, 434, 461, 463, 467, 474, 475, 478, 479, 481, 482], "dereferenc": [15, 175, 226, 401, 475, 482], "throughout": [15, 66, 71, 91, 98, 110, 185, 250, 388, 433, 461, 463, 464, 466, 467, 468, 472, 474, 477, 482], "portion": [15, 85, 88, 90, 93, 96, 102, 127, 141, 178, 182, 185, 202, 208, 225, 234, 250, 267, 268, 269, 337, 342, 343, 375, 387, 393, 406, 409, 415, 418, 419, 425, 431, 461, 474, 475, 477, 482], "deal": [15, 16, 34, 41, 61, 62, 66, 70, 101, 102, 103, 105, 118, 124, 156, 157, 193, 195, 196, 204, 224, 239, 258, 266, 282, 283, 292, 299, 318, 325, 327, 337, 365, 383, 385, 389, 393, 412, 425, 430, 461, 463, 464, 465, 466, 469, 471, 472, 475, 477, 482], "real": [15, 34, 37, 46, 57, 66, 70, 74, 83, 85, 91, 99, 106, 108, 111, 144, 153, 154, 156, 168, 175, 190, 192, 199, 204, 212, 224, 225, 235, 247, 250, 262, 288, 289, 290, 293, 308, 319, 322, 324, 331, 333, 334, 340, 341, 343, 344, 345, 352, 353, 365, 368, 387, 388, 389, 412, 426, 427, 430, 434, 439, 460, 466, 467, 468, 473, 474, 475, 478, 482], "_py_c_sum": 15, "_py_c_diff": 15, "_py_c_neg": 15, "num": [15, 99, 120, 157, 176, 185, 225, 229, 239, 247, 283, 292, 300, 341, 345, 385, 440, 441, 467, 468, 480, 482], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 185], "divisor": [15, 185, 275, 448], "quotient": [15, 182, 185, 275, 308, 344, 429, 448], "errno": [15, 23, 34, 66, 71, 82, 116, 132, 142, 175, 187, 212, 214, 250, 254, 293, 314, 328, 333, 337, 341, 352, 361, 442, 467, 472, 475, 477, 479, 482], "edom": [15, 66, 116, 211], "_py_c_pow": 15, "exp": [15, 66, 154, 185, 224, 275, 290, 318, 345, 467, 468, 475, 482], "exponenti": [15, 83, 185, 269, 344, 361, 408, 429, 464, 465, 467, 482], "pycomplexobject": 15, "pycomplex_typ": [15, 55], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 55], "pycomplex_realasdoubl": [15, 55], "pycomplex_imagasdoubl": [15, 55], "imaginari": [15, 66, 154, 182, 289, 344, 345, 352, 426, 427, 429, 467, 468, 474], "pycomplex_asccomplex": [15, 467], "__complex__": [15, 66, 154, 224, 262, 385, 388, 427, 467, 472, 476, 479, 480, 482], "__float__": [15, 25, 61, 66, 154, 224, 385, 388, 427, 471, 479, 480, 482], "__index__": [15, 25, 38, 61, 66, 223, 224, 291, 344, 347, 385, 388, 427, 467, 468, 469, 471, 472, 476, 479, 480, 482, 483], "upon": [15, 18, 25, 32, 34, 40, 62, 64, 70, 71, 83, 91, 98, 140, 144, 151, 155, 157, 158, 168, 172, 174, 176, 185, 187, 188, 192, 234, 241, 243, 246, 247, 250, 271, 284, 293, 297, 299, 328, 329, 331, 333, 334, 340, 341, 352, 354, 359, 361, 379, 398, 399, 400, 409, 425, 427, 429, 431, 462, 467, 472, 475, 476, 478, 480, 482], "chapter": [16, 23, 34, 41, 49, 64, 70, 71, 73, 74, 75, 82, 89, 93, 117, 145, 179, 186, 216, 221, 223, 245, 246, 256, 260, 277, 280, 285, 290, 298, 315, 352, 366, 429, 433, 434, 436, 482], "specif": [16, 23, 33, 34, 35, 41, 44, 55, 56, 58, 59, 61, 64, 65, 66, 71, 74, 75, 76, 83, 86, 88, 91, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 109, 110, 113, 118, 120, 125, 131, 132, 145, 147, 151, 153, 154, 155, 160, 166, 168, 171, 174, 175, 176, 180, 182, 183, 185, 192, 193, 194, 195, 201, 202, 204, 205, 207, 209, 210, 211, 212, 214, 221, 222, 224, 225, 226, 227, 229, 230, 231, 234, 239, 241, 242, 243, 244, 246, 249, 250, 251, 253, 254, 255, 258, 259, 262, 266, 267, 268, 269, 271, 275, 281, 283, 286, 288, 293, 294, 295, 296, 297, 299, 308, 314, 315, 321, 322, 327, 328, 329, 331, 332, 335, 337, 338, 340, 341, 342, 344, 353, 354, 358, 361, 362, 363, 364, 365, 367, 368, 371, 373, 376, 384, 385, 386, 387, 388, 389, 393, 394, 397, 398, 399, 400, 401, 403, 406, 409, 410, 412, 416, 418, 421, 422, 423, 424, 425, 426, 427, 431, 433, 434, 435, 436, 445, 454, 460, 461, 462, 463, 469, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482], "good": [16, 34, 50, 61, 73, 76, 77, 82, 83, 87, 91, 92, 97, 98, 99, 101, 102, 103, 105, 106, 108, 118, 120, 138, 151, 154, 155, 166, 169, 175, 176, 182, 189, 192, 197, 206, 210, 224, 234, 235, 283, 292, 293, 295, 299, 307, 319, 341, 361, 363, 366, 367, 383, 385, 387, 389, 410, 418, 425, 427, 461, 462, 464, 465, 467, 468, 472, 482], "idea": [16, 34, 50, 76, 77, 82, 83, 87, 88, 90, 91, 92, 97, 98, 99, 103, 108, 118, 139, 182, 189, 192, 210, 261, 266, 295, 307, 375, 383, 427, 461, 463, 464, 465, 468, 469, 470, 471, 472, 474, 478, 482], "perform": [16, 20, 23, 28, 32, 34, 41, 57, 58, 61, 62, 66, 70, 73, 87, 88, 90, 93, 98, 99, 100, 103, 105, 108, 110, 116, 118, 120, 121, 125, 132, 138, 139, 147, 157, 160, 162, 165, 166, 168, 174, 176, 180, 182, 185, 187, 190, 192, 198, 205, 208, 210, 212, 214, 219, 222, 224, 225, 231, 234, 241, 242, 244, 246, 247, 248, 250, 252, 259, 261, 262, 266, 267, 268, 269, 272, 283, 284, 288, 293, 298, 300, 305, 306, 308, 314, 317, 319, 321, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 345, 347, 348, 352, 364, 365, 366, 370, 377, 383, 385, 387, 388, 393, 394, 398, 404, 414, 418, 419, 425, 427, 429, 431, 434, 435, 454, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "pydict_check": [16, 22], "tree": [16, 32, 33, 61, 66, 76, 82, 83, 88, 93, 108, 110, 151, 162, 173, 189, 193, 195, 203, 204, 206, 215, 230, 235, 246, 254, 264, 273, 293, 296, 311, 312, 332, 342, 344, 352, 356, 367, 368, 374, 375, 383, 398, 408, 409, 410, 427, 430, 451, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 477, 478, 480, 481, 482], "violat": [16, 23, 41, 59, 61, 92, 175, 182, 187, 202, 207, 214, 247, 299, 305, 341, 344, 385, 400, 427, 478, 482], "immedi": [16, 23, 24, 28, 30, 32, 34, 44, 61, 64, 71, 77, 82, 83, 88, 90, 91, 93, 101, 102, 113, 125, 132, 134, 138, 141, 153, 155, 165, 168, 174, 175, 176, 183, 185, 192, 204, 212, 213, 215, 217, 225, 231, 235, 241, 246, 255, 258, 266, 267, 271, 282, 283, 284, 293, 295, 297, 312, 319, 331, 333, 337, 340, 341, 344, 345, 348, 352, 358, 359, 360, 364, 365, 368, 375, 385, 387, 388, 389, 394, 399, 405, 409, 412, 414, 415, 418, 419, 426, 427, 429, 431, 454, 463, 464, 465, 467, 468, 471, 473, 475, 476, 478, 479, 480, 481, 482], "singleton": [16, 20, 44, 45, 48, 54, 56, 61, 71, 83, 85, 92, 99, 120, 182, 274, 299, 344, 383, 388, 418, 426, 427, 429, 440, 441, 462, 471, 472, 478, 479, 482], "heap": [16, 31, 34, 41, 49, 56, 66, 71, 73, 74, 88, 181, 213, 254, 282, 322, 383, 451, 464, 465, 467, 468, 471, 472, 473, 480, 481, 482], "pack": [16, 66, 99, 141, 145, 175, 214, 224, 233, 246, 254, 256, 259, 268, 269, 271, 284, 285, 303, 337, 344, 368, 373, 375, 407, 420, 427, 441, 451, 466, 468, 472, 474, 482], "unpack": [16, 66, 71, 82, 88, 93, 99, 108, 110, 120, 145, 159, 186, 190, 199, 214, 224, 283, 304, 332, 337, 344, 345, 347, 350, 384, 385, 388, 426, 429, 430, 435, 441, 442, 444, 451, 461, 465, 466, 467, 469, 471, 472, 474, 476, 480, 482], "discuss": [16, 32, 34, 70, 71, 83, 93, 97, 99, 102, 105, 106, 108, 180, 189, 202, 207, 210, 229, 258, 267, 268, 275, 288, 293, 319, 330, 333, 341, 343, 352, 375, 389, 394, 409, 418, 423, 426, 429, 431, 434, 461, 462, 463, 466, 467, 468, 470, 471, 476, 478, 481, 482], "kind": [16, 33, 34, 61, 62, 66, 71, 74, 77, 83, 85, 88, 96, 97, 99, 101, 103, 105, 108, 118, 120, 132, 151, 175, 182, 192, 212, 249, 250, 251, 255, 258, 281, 283, 289, 293, 296, 299, 301, 315, 319, 328, 340, 341, 344, 346, 352, 364, 368, 385, 387, 394, 399, 408, 412, 413, 414, 425, 426, 427, 429, 430, 431, 439, 440, 455, 460, 463, 464, 465, 467, 469, 471, 474, 475, 476, 477, 478, 479, 480, 482], "intrins": [16, 166, 299, 427, 470], "languag": [16, 34, 55, 62, 66, 70, 71, 72, 76, 78, 82, 85, 91, 92, 93, 95, 97, 99, 101, 102, 104, 105, 106, 108, 110, 111, 120, 157, 166, 175, 179, 195, 201, 204, 208, 216, 221, 224, 239, 245, 246, 250, 254, 266, 273, 281, 299, 307, 319, 340, 344, 352, 354, 362, 363, 368, 376, 378, 384, 401, 409, 410, 418, 427, 429, 433, 434, 435, 436, 444, 445, 456, 460, 462, 463, 469, 482, 483], "properti": [16, 56, 61, 66, 76, 83, 85, 92, 93, 96, 98, 102, 104, 114, 120, 150, 157, 159, 169, 174, 175, 176, 180, 181, 185, 192, 194, 195, 202, 204, 207, 210, 218, 220, 224, 225, 229, 234, 240, 251, 254, 255, 257, 258, 259, 262, 266, 271, 281, 283, 289, 304, 331, 335, 341, 343, 344, 346, 352, 364, 377, 381, 383, 384, 385, 386, 387, 388, 394, 401, 404, 409, 410, 413, 414, 415, 421, 425, 426, 427, 434, 435, 449, 460, 461, 463, 464, 465, 466, 468, 472, 474, 475, 476, 477, 478, 479, 480, 482], "codec": [16, 31, 33, 63, 66, 85, 101, 105, 145, 194, 200, 201, 212, 224, 254, 258, 293, 335, 344, 362, 421, 447, 450, 460, 461, 463, 465, 466, 469, 472, 477, 478, 480, 481, 482, 483], "latin": [16, 66, 102, 105, 118, 135, 157, 194, 222, 238, 319, 331, 357, 386, 429, 463, 464, 467, 470, 474, 477, 478, 479, 481, 482], "ascii": [16, 23, 30, 33, 41, 48, 66, 69, 90, 98, 99, 102, 103, 105, 106, 116, 118, 120, 132, 136, 139, 143, 145, 151, 157, 175, 176, 190, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 224, 229, 236, 247, 254, 256, 258, 262, 266, 272, 282, 285, 286, 288, 293, 299, 314, 317, 319, 331, 335, 338, 340, 341, 344, 345, 346, 349, 357, 358, 361, 362, 394, 396, 412, 418, 421, 425, 433, 434, 440, 445, 447, 449, 454, 461, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482], "mbcs": [16, 32, 33, 66, 145, 352, 454, 460, 463, 464, 474, 475, 478, 482], "window": [16, 23, 32, 33, 34, 41, 55, 57, 61, 64, 66, 68, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 85, 88, 98, 99, 101, 103, 105, 106, 109, 113, 116, 118, 125, 131, 132, 136, 145, 151, 155, 163, 165, 166, 175, 178, 191, 212, 213, 221, 224, 228, 230, 242, 249, 250, 254, 258, 261, 266, 269, 272, 275, 276, 278, 281, 282, 283, 292, 293, 294, 296, 306, 316, 328, 329, 331, 332, 333, 334, 335, 337, 340, 341, 342, 352, 353, 354, 357, 359, 360, 361, 364, 365, 367, 369, 370, 371, 374, 375, 377, 387, 394, 396, 398, 402, 406, 421, 423, 424, 425, 427, 434, 437, 438, 440, 445, 447, 449, 452, 454, 455, 457, 461, 462, 463, 465, 466, 469, 470, 471, 473, 474, 476, 477, 480, 481, 483], "cell": [16, 27, 64, 66, 83, 90, 91, 116, 175, 190, 225, 235, 254, 255, 375, 384, 427, 467, 482], "phase": [16, 31, 32, 66, 68, 69, 71, 97, 137, 154, 226, 250, 290, 341, 375, 430, 431, 435, 467, 471, 474, 475, 482], "creation": [16, 32, 57, 61, 66, 71, 74, 83, 91, 92, 93, 98, 99, 116, 117, 118, 132, 134, 136, 138, 139, 149, 180, 181, 185, 191, 196, 210, 222, 224, 225, 229, 234, 247, 250, 254, 255, 256, 258, 267, 270, 271, 281, 283, 284, 288, 292, 294, 305, 311, 321, 322, 331, 332, 335, 342, 344, 345, 348, 357, 359, 361, 368, 374, 388, 401, 409, 412, 420, 425, 426, 431, 464, 472, 475, 476, 477, 479, 481, 482], "lookup": [16, 17, 22, 30, 59, 61, 63, 66, 75, 83, 92, 120, 145, 147, 157, 159, 180, 190, 194, 202, 210, 212, 224, 225, 229, 244, 255, 259, 262, 264, 269, 287, 293, 344, 345, 351, 352, 362, 367, 368, 375, 380, 386, 388, 424, 426, 431, 461, 463, 465, 466, 467, 471, 472, 474, 475, 476, 478, 480, 481, 482], "descriptor": [16, 23, 24, 30, 32, 48, 59, 61, 66, 73, 76, 79, 82, 85, 92, 95, 114, 116, 124, 129, 130, 131, 132, 139, 175, 176, 184, 186, 211, 214, 217, 224, 225, 230, 234, 247, 254, 255, 257, 258, 268, 278, 282, 283, 294, 295, 309, 312, 315, 322, 328, 329, 332, 333, 337, 338, 341, 344, 348, 357, 358, 360, 361, 368, 384, 426, 429, 435, 465, 466, 467, 468, 471, 472, 473, 474, 475, 477, 479, 481, 482], "ellipsi": [16, 61, 66, 85, 120, 167, 186, 192, 254, 264, 274, 307, 376, 377, 384, 385, 427, 430, 434, 449, 465, 469, 480, 482], "capsul": [16, 66, 71, 93, 469, 482], "coroutin": [16, 26, 66, 85, 93, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 160, 168, 181, 185, 186, 187, 190, 212, 315, 344, 352, 385, 387, 388, 429, 455, 466, 471, 472, 478, 479, 480, 481, 482], "datetim": [16, 66, 83, 92, 99, 125, 132, 136, 138, 150, 181, 189, 193, 202, 208, 210, 247, 254, 256, 269, 285, 288, 299, 304, 340, 341, 345, 365, 378, 384, 389, 418, 419, 424, 434, 450, 464, 465, 466, 467, 468, 471, 477, 482], "hint": [16, 41, 66, 77, 83, 85, 86, 88, 101, 103, 157, 166, 186, 201, 229, 240, 242, 245, 246, 254, 258, 262, 300, 344, 383, 426, 427, 435, 478, 479, 482, 483], "signatur": [17, 44, 56, 61, 66, 69, 83, 88, 91, 92, 97, 98, 99, 120, 125, 138, 145, 158, 159, 160, 168, 180, 182, 212, 215, 224, 225, 234, 246, 258, 267, 268, 292, 299, 313, 315, 332, 341, 348, 352, 380, 383, 384, 385, 388, 389, 393, 412, 414, 418, 423, 427, 429, 439, 467, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483], "pycontext": 17, "pycontextvar": [17, 482], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 34, 182, 187, 225, 267, 269, 283, 293, 302, 332, 385, 455, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "34762": [17, 479, 482], "public": [17, 26, 28, 32, 33, 53, 61, 66, 82, 91, 103, 106, 155, 174, 175, 189, 203, 210, 221, 222, 234, 239, 242, 250, 251, 255, 259, 264, 283, 286, 292, 314, 331, 337, 341, 344, 345, 351, 352, 357, 361, 363, 366, 385, 386, 387, 394, 407, 409, 412, 415, 425, 434, 435, 439, 461, 462, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "contextvar": [17, 66, 85, 125, 128, 134, 138, 163, 185, 254, 455, 482], "token": [17, 64, 66, 82, 114, 120, 163, 169, 173, 221, 250, 254, 264, 265, 281, 286, 304, 314, 318, 331, 348, 356, 362, 394, 426, 430, 432, 433, 442, 446, 468, 469, 473, 474, 478, 479, 482], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 41, 99, 120, 169, 185, 283, 341, 467], "shallow": [17, 32, 66, 159, 169, 180, 181, 192, 215, 243, 254, 255, 299, 344, 384, 441, 482], "pycontext_copycurr": 17, "thread": [17, 23, 30, 31, 33, 34, 41, 51, 57, 61, 66, 71, 74, 77, 83, 85, 97, 98, 103, 116, 123, 124, 128, 129, 131, 132, 133, 134, 136, 137, 139, 149, 150, 159, 163, 165, 168, 169, 175, 186, 189, 213, 225, 231, 234, 244, 246, 247, 249, 254, 256, 257, 266, 268, 269, 270, 271, 283, 290, 293, 316, 321, 322, 324, 325, 332, 338, 340, 341, 343, 344, 348, 352, 365, 367, 385, 394, 398, 399, 401, 427, 444, 454, 455, 461, 463, 464, 465, 466, 467, 468, 469, 478, 481, 482, 483], "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 88, 100, 368, 398, 427, 452, 460, 471, 472, 482], "restor": [17, 23, 32, 34, 61, 66, 73, 88, 90, 99, 131, 157, 168, 169, 170, 176, 185, 186, 189, 190, 242, 246, 255, 266, 292, 299, 301, 319, 320, 324, 340, 348, 352, 357, 360, 361, 362, 364, 375, 383, 387, 388, 389, 399, 404, 426, 427, 461, 463, 464, 466, 467, 472, 476, 479, 481, 482], "pycontextvar_new": 17, "introspect": [17, 66, 73, 83, 85, 88, 91, 169, 186, 190, 212, 225, 250, 299, 315, 368, 388, 418, 419, 427, 431, 469, 471, 472, 474, 475, 476, 477, 482], "debug": [17, 31, 32, 33, 48, 61, 64, 66, 73, 74, 83, 90, 95, 98, 99, 100, 101, 116, 117, 120, 124, 134, 144, 152, 165, 169, 175, 185, 186, 187, 190, 195, 203, 204, 210, 212, 221, 222, 226, 241, 247, 256, 267, 268, 269, 279, 288, 292, 293, 297, 301, 305, 319, 331, 335, 340, 341, 344, 350, 352, 357, 358, 361, 362, 367, 368, 374, 381, 385, 387, 388, 399, 412, 418, 421, 427, 428, 434, 435, 445, 451, 456, 457, 460, 461, 462, 463, 464, 466, 467, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482], "pycontextvar_get": 17, "var": [17, 66, 76, 83, 85, 86, 91, 92, 99, 118, 120, 159, 163, 166, 169, 224, 254, 269, 344, 354, 359, 385, 388, 430, 440, 445, 449, 465, 466, 467, 468, 469, 471, 474, 482], "default_valu": [17, 88], "dure": [17, 18, 22, 23, 24, 28, 32, 33, 44, 50, 61, 62, 66, 75, 83, 88, 91, 92, 99, 101, 120, 132, 138, 139, 140, 147, 151, 157, 166, 175, 176, 180, 182, 185, 190, 192, 197, 200, 201, 202, 207, 210, 212, 217, 225, 226, 230, 234, 250, 251, 258, 262, 267, 268, 269, 270, 271, 281, 288, 293, 296, 299, 308, 313, 314, 319, 320, 323, 332, 333, 334, 335, 340, 341, 344, 352, 360, 361, 365, 366, 375, 379, 381, 384, 385, 387, 388, 389, 399, 401, 412, 413, 414, 415, 421, 424, 426, 427, 429, 431, 434, 435, 442, 454, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 32, 57, 66, 83, 92, 93, 106, 137, 144, 145, 155, 156, 157, 159, 163, 169, 176, 184, 185, 189, 197, 205, 211, 212, 213, 217, 221, 239, 244, 246, 250, 267, 273, 283, 293, 294, 295, 301, 326, 328, 333, 337, 341, 344, 350, 355, 357, 361, 364, 365, 374, 379, 383, 387, 388, 399, 407, 411, 412, 415, 424, 434, 463, 467, 471, 474, 475, 476, 477, 482], "pyos_snprintf": [18, 55, 463], "unix": [18, 23, 32, 33, 34, 57, 64, 66, 71, 72, 78, 79, 81, 85, 90, 93, 98, 103, 105, 116, 118, 123, 129, 130, 131, 132, 135, 136, 139, 146, 150, 159, 166, 173, 174, 176, 189, 195, 198, 200, 207, 214, 218, 224, 227, 228, 229, 232, 242, 246, 254, 257, 258, 261, 266, 269, 271, 272, 278, 283, 286, 287, 288, 292, 293, 294, 295, 296, 298, 301, 305, 306, 309, 310, 313, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 348, 350, 352, 353, 357, 359, 360, 361, 365, 368, 374, 382, 387, 402, 406, 420, 421, 434, 437, 438, 445, 447, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "man": [18, 90, 125, 172, 271, 293, 313, 322, 328, 333, 337, 342, 368, 374, 468, 482], "page": [18, 62, 66, 82, 83, 85, 90, 93, 98, 99, 103, 106, 108, 113, 118, 125, 132, 135, 150, 157, 165, 168, 172, 176, 189, 210, 214, 226, 246, 251, 254, 258, 266, 267, 268, 269, 271, 278, 284, 293, 304, 313, 314, 322, 328, 333, 337, 340, 342, 347, 350, 355, 360, 364, 368, 374, 394, 402, 406, 412, 419, 421, 423, 425, 433, 439, 450, 452, 454, 460, 461, 463, 465, 466, 467, 468, 474, 475, 478, 479, 480, 482], "snprintf": [18, 463, 471, 482], "pyos_vsnprintf": [18, 55, 463], "va": [18, 425], "vsnprintf": [18, 463, 471, 482], "behavior": [18, 22, 23, 24, 27, 32, 33, 34, 41, 55, 59, 61, 66, 71, 77, 83, 88, 90, 91, 92, 97, 98, 99, 103, 112, 114, 117, 118, 125, 131, 138, 149, 156, 165, 166, 172, 174, 175, 176, 180, 182, 185, 189, 192, 193, 195, 200, 202, 204, 205, 207, 210, 212, 214, 217, 224, 233, 235, 239, 241, 246, 255, 257, 258, 261, 262, 266, 267, 269, 270, 271, 275, 276, 283, 284, 286, 288, 292, 293, 296, 299, 302, 309, 314, 328, 331, 332, 333, 334, 335, 337, 338, 341, 343, 344, 345, 347, 348, 352, 361, 364, 365, 366, 368, 373, 375, 380, 385, 387, 393, 394, 399, 406, 409, 412, 424, 426, 427, 429, 431, 434, 435, 454, 455, 460, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 481, 482, 483], "corner": [18, 61, 90, 176, 383, 406, 463, 466, 467, 472, 482], "int_max": [18, 482], "c99": [18, 34, 61, 74, 175, 275, 344, 347, 352, 443, 467, 471, 472, 474, 478, 482], "necessari": [18, 32, 34, 48, 55, 61, 62, 70, 71, 74, 75, 76, 77, 82, 83, 92, 93, 96, 97, 98, 99, 101, 102, 104, 108, 110, 113, 118, 132, 139, 143, 154, 155, 157, 160, 166, 168, 176, 183, 185, 192, 193, 194, 195, 204, 205, 206, 207, 208, 212, 224, 226, 241, 242, 246, 247, 250, 258, 261, 266, 267, 270, 271, 272, 275, 278, 283, 288, 292, 293, 294, 299, 302, 306, 308, 332, 335, 337, 340, 341, 344, 346, 347, 348, 354, 355, 361, 363, 364, 366, 371, 373, 375, 383, 387, 398, 401, 404, 406, 407, 409, 411, 414, 418, 421, 427, 429, 430, 435, 460, 463, 464, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 480, 482], "rv": [18, 34, 214], "someth": [18, 22, 32, 35, 71, 73, 82, 83, 87, 88, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 108, 120, 131, 138, 144, 151, 168, 174, 175, 200, 212, 224, 227, 235, 246, 251, 253, 255, 261, 262, 267, 283, 292, 293, 299, 306, 308, 314, 322, 338, 340, 341, 357, 361, 364, 368, 385, 387, 388, 389, 394, 400, 401, 406, 409, 412, 418, 424, 427, 430, 431, 435, 440, 448, 461, 462, 463, 464, 465, 466, 467, 468, 471, 474, 481, 482], "bad": [18, 41, 66, 70, 71, 98, 101, 103, 106, 118, 174, 186, 189, 192, 200, 211, 212, 234, 246, 254, 266, 268, 271, 283, 292, 308, 333, 383, 385, 396, 421, 435, 440, 442, 463, 467, 469, 471, 476, 478, 482], "happen": [18, 23, 25, 32, 34, 57, 66, 71, 74, 76, 82, 88, 90, 91, 93, 99, 101, 103, 106, 113, 125, 138, 139, 156, 168, 175, 176, 180, 182, 189, 206, 212, 222, 224, 225, 235, 246, 250, 255, 258, 266, 268, 269, 284, 292, 293, 295, 299, 314, 319, 328, 334, 337, 341, 344, 345, 352, 358, 359, 360, 361, 364, 368, 380, 387, 388, 389, 394, 406, 426, 427, 428, 429, 431, 434, 435, 442, 461, 463, 465, 466, 467, 468, 469, 471, 473, 476, 477, 480, 481, 482], "pyos_string_to_doubl": [18, 55, 468, 470], "endptr": 18, "overflow_except": 18, "whitespac": [18, 38, 62, 66, 83, 92, 93, 102, 105, 110, 118, 125, 136, 143, 146, 155, 166, 174, 177, 185, 189, 192, 198, 201, 202, 207, 220, 221, 239, 244, 246, 255, 262, 266, 286, 297, 314, 317, 319, 331, 344, 345, 347, 348, 356, 361, 362, 363, 365, 380, 399, 409, 412, 414, 436, 454, 461, 464, 467, 468, 470, 474, 475, 476, 479, 482], "whole": [18, 41, 77, 88, 95, 96, 102, 103, 118, 141, 150, 157, 166, 168, 176, 182, 206, 207, 234, 241, 259, 261, 267, 278, 292, 293, 296, 305, 307, 319, 328, 337, 340, 343, 344, 363, 374, 387, 409, 412, 423, 426, 434, 454, 461, 468, 476, 480, 482], "much": [18, 23, 34, 53, 61, 65, 71, 73, 74, 76, 82, 83, 86, 88, 90, 93, 99, 101, 102, 103, 105, 106, 118, 125, 136, 151, 154, 157, 166, 175, 185, 190, 192, 193, 202, 206, 224, 234, 235, 255, 258, 261, 269, 270, 271, 275, 283, 292, 293, 295, 299, 308, 319, 330, 337, 354, 368, 375, 381, 385, 387, 388, 389, 409, 410, 418, 423, 426, 431, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 480, 481, 482], "unconvert": 18, "segment": [18, 41, 47, 120, 154, 175, 192, 213, 214, 219, 283, 293, 296, 333, 365, 393, 398, 406, 466, 468, 474, 475, 482], "1e500": 18, "py_huge_v": 18, "out": [18, 23, 30, 33, 34, 37, 38, 41, 54, 55, 57, 58, 62, 66, 68, 70, 71, 74, 83, 88, 90, 92, 93, 96, 98, 99, 101, 102, 103, 104, 105, 106, 108, 118, 120, 121, 132, 133, 138, 139, 140, 141, 144, 149, 157, 160, 162, 166, 174, 175, 176, 177, 182, 183, 185, 189, 192, 194, 195, 202, 204, 210, 211, 212, 214, 225, 229, 234, 239, 242, 246, 249, 250, 251, 253, 258, 259, 261, 262, 266, 267, 275, 283, 292, 293, 295, 297, 298, 300, 304, 308, 311, 313, 314, 319, 322, 328, 331, 333, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 361, 364, 368, 380, 385, 387, 388, 389, 393, 398, 399, 406, 408, 409, 412, 416, 418, 422, 423, 424, 425, 426, 427, 428, 435, 440, 441, 448, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482], "pyos_double_to_str": [18, 55], "val": [18, 22, 23, 71, 93, 114, 166, 189, 190, 195, 204, 222, 243, 266, 340, 344, 385, 389, 394, 427, 466, 482], "format_cod": 18, "ptype": [18, 23, 303, 482], "repr": [18, 23, 24, 48, 61, 62, 66, 73, 92, 99, 104, 105, 110, 120, 138, 139, 175, 180, 181, 182, 190, 192, 210, 224, 241, 246, 254, 283, 314, 329, 337, 344, 345, 352, 361, 363, 377, 380, 384, 385, 388, 389, 424, 426, 427, 434, 435, 443, 445, 449, 451, 461, 462, 464, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "ed": [18, 41, 61, 71, 90, 139, 166, 176, 192, 210, 270, 293, 319, 332, 471, 474, 481, 482], "togeth": [18, 34, 59, 61, 66, 70, 86, 88, 90, 91, 93, 96, 98, 99, 101, 102, 118, 125, 132, 157, 159, 174, 175, 192, 201, 206, 207, 217, 224, 233, 234, 242, 243, 246, 259, 261, 267, 268, 271, 293, 332, 341, 344, 350, 368, 373, 383, 385, 387, 388, 389, 394, 398, 411, 413, 425, 427, 429, 448, 465, 471, 472, 474, 475, 481, 482], "preced": [18, 66, 91, 98, 99, 102, 103, 104, 153, 166, 174, 177, 182, 189, 190, 192, 193, 201, 206, 225, 246, 255, 266, 267, 268, 276, 303, 308, 319, 334, 337, 340, 344, 345, 347, 348, 352, 365, 368, 375, 383, 399, 409, 412, 418, 419, 421, 423, 426, 427, 428, 430, 432, 433, 434, 435, 454, 455, 460, 462, 463, 475, 479, 482], "rule": [18, 23, 28, 32, 34, 59, 61, 66, 83, 88, 91, 92, 93, 97, 99, 101, 102, 103, 105, 118, 120, 151, 154, 160, 175, 177, 180, 182, 185, 189, 193, 195, 201, 202, 204, 206, 207, 208, 220, 221, 224, 226, 230, 235, 237, 239, 242, 243, 246, 259, 266, 275, 292, 319, 344, 345, 347, 348, 364, 365, 374, 385, 388, 389, 393, 399, 410, 414, 426, 427, 428, 429, 430, 431, 433, 434, 435, 461, 462, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 482], "document": [18, 20, 23, 24, 28, 34, 41, 44, 53, 55, 56, 57, 61, 62, 66, 69, 70, 71, 73, 74, 75, 77, 83, 86, 87, 88, 90, 91, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 111, 113, 118, 120, 125, 127, 132, 136, 138, 139, 144, 145, 151, 155, 166, 168, 175, 176, 180, 182, 186, 189, 192, 193, 194, 195, 197, 201, 202, 204, 206, 207, 212, 219, 220, 224, 225, 229, 234, 240, 242, 246, 247, 249, 250, 251, 254, 255, 256, 258, 259, 262, 266, 267, 268, 269, 271, 272, 273, 281, 282, 283, 285, 290, 292, 293, 295, 297, 304, 306, 307, 314, 322, 330, 331, 335, 337, 338, 340, 341, 342, 344, 348, 351, 352, 353, 357, 360, 361, 363, 364, 365, 367, 368, 374, 375, 378, 383, 385, 393, 394, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 444, 445, 455, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 483], "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "signifi": [18, 92, 101, 180, 222, 244, 250, 340, 341, 344, 385, 427, 434], "finit": [18, 25, 34, 82, 90, 93, 102, 154, 185, 220, 261, 275, 344, 352, 427, 482], "infinit": [18, 22, 44, 59, 66, 83, 93, 102, 137, 157, 185, 247, 261, 275, 283, 285, 293, 296, 299, 319, 320, 344, 352, 387, 427, 461, 465, 467, 475, 482], "pyos_stricmp": [18, 467], "s1": [18, 105, 160, 189, 266, 337, 464], "s2": [18, 105, 160, 189, 266, 337, 464], "comparison": [18, 23, 48, 61, 62, 66, 72, 93, 101, 105, 110, 120, 140, 147, 154, 159, 160, 172, 175, 180, 182, 185, 189, 190, 192, 218, 219, 224, 225, 235, 254, 256, 266, 275, 283, 291, 294, 298, 343, 345, 346, 352, 361, 385, 387, 388, 389, 397, 404, 412, 418, 427, 430, 432, 434, 441, 448, 454, 461, 463, 464, 465, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "almost": [18, 32, 34, 62, 70, 73, 74, 82, 83, 88, 90, 99, 102, 103, 105, 108, 110, 118, 139, 154, 156, 176, 185, 235, 251, 258, 266, 272, 275, 283, 288, 292, 319, 340, 341, 344, 348, 368, 385, 387, 388, 406, 423, 427, 433, 455, 460, 462, 464, 467, 469, 472, 475, 481, 482], "pyos_strnicmp": [18, 467], "strncmp": 18, "async": [19, 23, 26, 31, 49, 66, 85, 99, 122, 123, 124, 125, 128, 132, 133, 134, 135, 136, 137, 138, 168, 169, 190, 224, 255, 264, 312, 341, 376, 384, 385, 387, 388, 389, 427, 429, 430, 434, 471, 472, 478, 479, 480, 481, 482], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 26, 29, 32, 51, 55, 64, 472, 476, 482], "qualnam": [19, 27, 29, 92, 98, 196, 210, 268, 482], "__name__": [19, 29, 44, 59, 61, 66, 82, 83, 85, 91, 92, 98, 99, 100, 125, 144, 155, 156, 165, 181, 182, 187, 189, 192, 196, 199, 210, 224, 225, 227, 249, 250, 255, 267, 283, 289, 292, 296, 297, 299, 302, 313, 315, 321, 323, 324, 333, 338, 340, 342, 344, 361, 364, 366, 384, 385, 387, 398, 399, 401, 406, 419, 420, 427, 431, 449, 463, 464, 467, 469, 471, 475, 476, 477, 478, 480, 481, 482], "__qualname__": [19, 27, 29, 59, 66, 85, 91, 92, 196, 210, 224, 225, 255, 344, 427, 471, 475, 477, 482], "date": [20, 32, 66, 70, 83, 92, 99, 108, 132, 136, 138, 150, 162, 181, 192, 198, 202, 207, 208, 210, 242, 244, 266, 267, 269, 271, 288, 291, 293, 299, 311, 339, 340, 341, 343, 344, 350, 357, 365, 368, 378, 389, 418, 419, 421, 422, 431, 434, 450, 451, 460, 461, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pydatetime_import": 20, "initialis": [20, 99, 242, 269, 324, 388, 427, 454, 476, 478, 482], "put": [20, 33, 34, 48, 66, 71, 73, 74, 77, 82, 83, 86, 88, 90, 91, 92, 93, 97, 99, 102, 103, 108, 112, 120, 133, 137, 151, 157, 163, 165, 166, 174, 175, 190, 192, 200, 202, 207, 214, 226, 229, 231, 240, 241, 246, 250, 268, 281, 283, 295, 299, 300, 316, 333, 334, 335, 337, 341, 344, 350, 354, 363, 364, 368, 385, 388, 389, 394, 424, 425, 431, 440, 447, 448, 460, 462, 463, 464, 465, 466, 467, 468, 472, 474, 477, 482], "pydatetimeapi": 20, "utc": [20, 66, 181, 182, 189, 202, 208, 269, 340, 341, 365, 424, 450, 467, 472, 474, 477, 478, 479, 482], "pydatetime_timezone_utc": [20, 479], "zone": [20, 66, 181, 182, 208, 254, 259, 337, 365, 425, 455, 464, 466, 468, 481, 482], "timezon": [20, 66, 99, 116, 181, 189, 202, 208, 340, 341, 361, 378, 424, 450, 472, 474, 475, 477, 478, 479, 482], "pydate_check": 20, "pydatetime_datetyp": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_datetimetyp": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pydatetime_timetyp": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydatetime_deltatyp": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pydatetime_tzinfotyp": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 66, 83, 91, 102, 108, 150, 174, 181, 182, 192, 262, 340, 343, 365, 385, 412, 421, 434, 445, 460, 462, 464, 466, 467, 468, 469, 470, 472, 474, 475, 480, 481, 482], "month": [20, 66, 83, 150, 181, 182, 266, 365, 421, 434, 461, 462, 464, 468, 482], "day": [20, 66, 71, 82, 83, 92, 102, 103, 125, 150, 166, 181, 182, 225, 243, 262, 266, 269, 275, 288, 293, 339, 341, 343, 365, 384, 421, 424, 431, 434, 450, 461, 464, 466, 467, 468, 476, 478, 480, 481, 482], "pydatetime_fromdateandtim": 20, "hour": [20, 66, 83, 102, 125, 132, 138, 181, 182, 208, 269, 271, 365, 421, 424, 434, 464, 472, 478], "minut": [20, 66, 103, 105, 134, 181, 182, 269, 293, 361, 365, 421, 434, 455, 464, 472, 479, 482], "usecond": 20, "microsecond": [20, 66, 95, 181, 182, 322, 340, 365, 467, 472, 482], "pydatetime_fromdateandtimeandfold": [20, 482], "fold": [20, 66, 181, 182, 193, 200, 201, 202, 207, 250, 285, 296, 346, 424, 425, 465, 466, 478, 479, 482], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "timedelta": [20, 66, 92, 181, 288, 384, 424, 464, 468, 474, 475, 479, 480, 481, 482], "lie": [20, 154, 182, 241, 269, 283, 344, 375, 427, 435, 463, 464, 471], "pytimezone_fromoffset": [20, 479], "unnam": [20, 58, 71, 175, 210, 383, 404, 429, 476], "fix": [20, 34, 41, 53, 55, 61, 66, 75, 76, 77, 82, 83, 87, 88, 90, 91, 93, 101, 102, 103, 108, 110, 112, 118, 120, 125, 151, 158, 160, 175, 176, 181, 182, 187, 192, 200, 222, 224, 242, 246, 254, 261, 283, 288, 290, 293, 299, 319, 340, 344, 345, 347, 348, 350, 364, 371, 385, 388, 406, 407, 426, 454, 461, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "pytimezone_fromoffsetandnam": [20, 479], "pyunicod": [20, 62, 482], "tzname": [20, 66, 116, 181, 182, 365, 424, 478, 481, 482], "pydatetime_d": 20, "subclass": [20, 23, 28, 42, 46, 48, 52, 57, 59, 61, 66, 72, 73, 85, 88, 96, 97, 98, 102, 106, 114, 118, 120, 121, 125, 131, 132, 137, 139, 144, 150, 155, 156, 157, 160, 165, 166, 171, 174, 175, 180, 181, 182, 185, 186, 188, 192, 198, 202, 204, 205, 207, 210, 212, 215, 217, 222, 224, 225, 231, 239, 241, 244, 247, 250, 251, 253, 255, 256, 258, 259, 262, 267, 268, 269, 271, 283, 284, 286, 289, 292, 293, 296, 299, 305, 307, 318, 319, 330, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 352, 361, 364, 368, 374, 375, 378, 383, 384, 385, 387, 388, 393, 394, 396, 398, 399, 401, 406, 408, 409, 411, 412, 413, 414, 416, 418, 422, 424, 426, 428, 429, 435, 439, 442, 451, 454, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pydatetime_datetim": 20, "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 91, 102, 108, 150, 172, 175, 177, 182, 210, 233, 259, 262, 318, 319, 343, 344, 352, 365, 418, 421, 423, 424, 434, 450, 464, 466, 467, 474, 479, 480, 481, 482], "pydatetime_date_get_hour": 20, "23": [20, 92, 95, 99, 105, 182, 185, 208, 224, 225, 235, 259, 261, 267, 283, 319, 332, 337, 344, 348, 358, 365, 366, 463, 464, 474, 476, 477, 478, 480, 481, 482], "pydatetime_date_get_minut": 20, "59": [20, 87, 99, 182, 319, 365, 381, 452, 474, 482], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 182, 185, 475], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 471, 482], "tzinfo": [20, 66, 181, 208, 378, 424, 464, 471, 472, 474, 475, 478, 479, 481, 482], "pydatetime_tim": 20, "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 471, 482], "delta": [20, 66, 105, 141, 182, 190, 254, 270, 362, 387, 463, 465, 468, 478, 480, 482], "pydatetime_delta": 20, "pydatetime_delta_get_day": 20, "999999999": [20, 182], "pydatetime_delta_get_second": 20, "86399": [20, 182], "pydatetime_delta_get_microsecond": 20, "db": [20, 66, 91, 174, 183, 224, 254, 261, 281, 298, 330, 450, 455, 466, 467, 469, 472, 482], "pydatetime_fromtimestamp": 20, "suitabl": [20, 32, 61, 62, 71, 83, 88, 93, 98, 99, 105, 123, 146, 157, 168, 172, 174, 175, 182, 189, 195, 203, 207, 208, 234, 243, 253, 259, 261, 266, 267, 268, 269, 271, 276, 283, 288, 293, 294, 299, 308, 323, 324, 327, 333, 335, 337, 338, 344, 357, 361, 364, 365, 366, 379, 387, 399, 406, 409, 412, 420, 421, 423, 426, 427, 454, 460, 463, 464, 465, 467, 468, 474, 478, 479, 480, 482], "fromtimestamp": [20, 66, 99, 181, 182, 189, 304, 340, 479, 482], "pydate_fromtimestamp": [20, 482], "pyproperty_typ": [21, 55, 91], "pydescr_newgetset": [21, 55], "pygetsetdef": [21, 55, 56, 61, 73, 74, 97, 255, 384, 479, 482], "getset": [21, 61, 255], "pydescr_newmemb": [21, 55], "pymemberdef": [21, 55, 56, 59, 61, 73, 74, 91, 255, 384, 468, 479, 482], "meth": [21, 43, 61, 76, 83, 85, 110, 344, 385, 462, 465, 472, 475], "pydescr_newmethod": [21, 55, 482], "pymethoddef": [21, 34, 44, 55, 56, 60, 61, 70, 71, 73, 74, 88, 97, 464, 482], "pydescr_newwrapp": 21, "wrapperbas": [21, 479, 482], "pydescr_newclassmethod": [21, 55], "pydescr_isdata": [21, 482], "descr": [21, 91, 175], "pywrapper_new": [21, 55], "pydictobject": [22, 53], "pydict_typ": [22, 55], "pydict_checkexact": 22, "pydict_new": [22, 55], "pydictproxy_new": [22, 55], "mappingproxytyp": [22, 66, 180, 181, 224, 344, 384, 426, 471, 473, 475, 482], "enforc": [22, 92, 185, 195, 204, 224, 242, 293, 322, 342, 344, 345, 347, 383, 385, 409, 410, 412, 429, 435, 454, 462, 463, 466, 469, 472, 474, 475, 482], "prevent": [22, 23, 32, 34, 41, 56, 66, 71, 74, 82, 83, 90, 91, 97, 98, 99, 105, 106, 108, 125, 138, 157, 166, 168, 169, 175, 180, 185, 187, 189, 192, 205, 212, 222, 224, 246, 249, 250, 259, 262, 268, 269, 271, 272, 276, 283, 288, 292, 293, 296, 305, 311, 335, 337, 341, 348, 352, 361, 368, 380, 383, 385, 387, 388, 389, 399, 401, 408, 421, 423, 427, 429, 431, 454, 460, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "modif": [22, 33, 59, 62, 64, 71, 92, 99, 110, 120, 168, 189, 215, 233, 244, 247, 250, 266, 269, 271, 278, 283, 292, 293, 294, 296, 306, 324, 332, 334, 338, 342, 357, 361, 375, 409, 412, 421, 425, 460, 466, 468, 474, 475, 476, 477, 478, 480, 482], "pydict_clear": [22, 55], "pydict_contain": [22, 55, 465], "pydict_copi": [22, 55], "pydict_setitem": [22, 55, 61, 71, 482], "insert": [22, 30, 32, 33, 34, 37, 58, 66, 70, 71, 78, 88, 93, 105, 110, 112, 118, 119, 120, 143, 146, 147, 151, 159, 160, 166, 176, 180, 181, 189, 192, 207, 224, 225, 231, 235, 246, 249, 250, 258, 262, 267, 270, 273, 281, 284, 292, 297, 299, 307, 320, 340, 344, 345, 352, 367, 375, 384, 399, 401, 406, 409, 412, 422, 427, 429, 431, 435, 439, 441, 454, 459, 461, 464, 466, 467, 468, 470, 472, 475, 476, 477, 478, 479, 480, 482], "hashabl": [22, 48, 61, 66, 83, 85, 114, 159, 160, 181, 182, 186, 189, 220, 225, 231, 255, 259, 291, 296, 318, 344, 385, 401, 427, 429, 464, 465, 467, 468, 471, 472, 473, 475, 477, 481, 482], "steal": [22, 23, 32, 34, 37, 39, 44, 48, 52, 58, 471, 472, 482], "pydict_setitemstr": [22, 55, 482], "pyunicode_fromstr": [22, 34, 55, 62, 70, 74], "pydict_delitem": [22, 55], "pydict_delitemstr": [22, 55], "pydict_getitem": [22, 55, 71, 471, 482], "__hash__": [22, 61, 66, 76, 78, 83, 85, 160, 180, 210, 224, 289, 344, 388, 427, 454, 466, 467, 469, 475, 479, 482], "__eq__": [22, 61, 66, 76, 78, 83, 85, 147, 160, 167, 180, 193, 194, 201, 210, 223, 225, 243, 255, 285, 291, 344, 384, 388, 389, 418, 427, 462, 467, 468, 469, 472, 474, 479, 482], "suppress": [22, 32, 33, 39, 47, 48, 66, 88, 90, 98, 108, 118, 138, 152, 156, 162, 168, 192, 226, 288, 292, 311, 315, 334, 335, 344, 348, 352, 361, 406, 426, 427, 435, 454, 460, 462, 464, 466, 467, 468, 469, 470, 476, 477, 479, 480, 482, 483], "pydict_getitemwitherror": [22, 55, 482], "gil": [22, 23, 41, 44, 57, 61, 66, 74, 82, 85, 97, 138, 165, 175, 187, 234, 467, 468, 471, 474, 476, 478, 481, 482], "held": [22, 30, 32, 41, 57, 82, 97, 121, 166, 246, 249, 258, 268, 269, 278, 283, 344, 352, 364, 387, 401, 425, 427, 461, 466, 467, 468, 471, 472, 478, 482], "histor": [22, 40, 61, 71, 73, 93, 97, 166, 176, 182, 212, 247, 271, 295, 343, 365, 413, 421, 435, 460, 468, 471, 476, 478, 482], "reason": [22, 23, 32, 34, 41, 45, 46, 48, 55, 61, 66, 71, 74, 76, 82, 83, 86, 87, 88, 90, 92, 93, 98, 99, 101, 102, 103, 105, 106, 108, 113, 141, 151, 154, 155, 165, 176, 180, 182, 185, 192, 193, 195, 210, 212, 215, 222, 229, 235, 240, 241, 244, 246, 247, 250, 256, 258, 267, 268, 269, 270, 271, 275, 292, 296, 299, 305, 308, 314, 332, 334, 337, 341, 344, 352, 357, 358, 361, 363, 365, 368, 383, 385, 387, 388, 389, 392, 394, 398, 406, 424, 426, 427, 431, 463, 464, 466, 469, 471, 474, 475, 476, 477, 482], "wasn": [22, 30, 44, 74, 99, 118, 269, 292, 355, 387, 422, 461, 463, 464, 466, 467, 478, 482], "pydict_getitemstr": [22, 55, 71], "pydict_setdefault": [22, 482], "defaultobj": 22, "setdefault": [22, 66, 76, 159, 160, 183, 243, 256, 344, 406, 427, 461, 464, 474, 475, 482], "hash": [22, 32, 33, 48, 61, 62, 66, 73, 76, 82, 83, 85, 146, 160, 162, 166, 173, 180, 183, 222, 224, 236, 250, 251, 254, 270, 289, 298, 311, 337, 350, 352, 384, 388, 397, 401, 423, 425, 427, 429, 431, 434, 448, 449, 454, 455, 463, 464, 466, 467, 468, 471, 472, 474, 475, 478, 481, 482], "pydict_item": [22, 55], "pylistobject": [22, 37, 52, 74], "pydict_key": [22, 55], "pydict_valu": [22, 55], "pydict_s": [22, 55], "pydict_next": [22, 55], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 70], "prior": [22, 32, 44, 57, 76, 83, 91, 98, 99, 104, 111, 125, 143, 165, 174, 185, 224, 244, 251, 255, 267, 329, 332, 337, 340, 341, 343, 344, 348, 352, 355, 357, 361, 364, 387, 412, 421, 425, 426, 427, 429, 431, 434, 476, 477, 478, 479, 480, 482], "spars": [22, 357, 482], "pos": [22, 58, 66, 115, 141, 153, 185, 221, 223, 255, 262, 278, 285, 291, 293, 300, 319, 320, 349, 362, 375, 383, 400, 464, 468, 477], "interest": [22, 61, 66, 70, 71, 73, 75, 82, 83, 88, 91, 92, 93, 95, 98, 99, 102, 103, 104, 105, 118, 139, 151, 153, 154, 166, 182, 189, 192, 193, 199, 206, 214, 215, 246, 261, 267, 271, 273, 276, 286, 292, 297, 308, 314, 319, 328, 364, 366, 367, 385, 387, 388, 389, 399, 400, 414, 427, 433, 435, 461, 462, 463, 464, 466, 468, 482], "mutat": [22, 61, 83, 97, 166, 180, 195, 225, 226, 250, 258, 283, 330, 344, 385, 389, 399, 463, 465, 476, 482], "safe": [22, 23, 24, 32, 33, 34, 35, 41, 44, 54, 57, 61, 62, 66, 70, 71, 73, 74, 83, 86, 99, 120, 124, 125, 128, 129, 131, 132, 133, 136, 137, 138, 143, 150, 151, 159, 168, 174, 175, 176, 180, 192, 213, 234, 237, 246, 250, 256, 258, 266, 267, 268, 270, 271, 283, 293, 299, 312, 324, 325, 328, 330, 331, 332, 334, 337, 340, 341, 345, 348, 361, 364, 385, 388, 389, 393, 397, 399, 401, 408, 414, 460, 461, 462, 464, 467, 468, 471, 472, 473, 474, 475, 479, 480, 482], "pylong_aslong": [22, 34, 38, 55, 70, 480], "pylong_fromlong": [22, 34, 38, 44, 55, 70, 71, 73, 74, 482], "py_decref": [22, 23, 28, 34, 35, 44, 50, 55, 61, 70, 71, 73, 74, 77, 85, 471, 480, 482], "pydict_merg": [22, 55], "overrid": [22, 24, 32, 33, 34, 48, 59, 61, 64, 66, 83, 88, 91, 98, 99, 106, 108, 114, 118, 125, 131, 134, 135, 144, 150, 155, 156, 160, 166, 170, 174, 175, 180, 182, 188, 192, 195, 201, 202, 204, 207, 208, 212, 217, 224, 225, 229, 239, 242, 243, 244, 247, 249, 250, 255, 258, 262, 267, 269, 272, 283, 287, 292, 293, 299, 311, 314, 315, 319, 331, 334, 337, 338, 344, 345, 348, 352, 353, 361, 364, 375, 383, 385, 387, 388, 389, 394, 397, 401, 406, 412, 416, 421, 427, 428, 429, 431, 439, 454, 455, 460, 461, 464, 467, 468, 469, 470, 472, 473, 475, 476, 478, 479, 480, 482], "adding": [22, 32, 34, 46, 55, 59, 66, 71, 72, 75, 82, 83, 90, 91, 93, 97, 101, 102, 106, 108, 114, 120, 141, 151, 180, 185, 194, 195, 196, 204, 205, 206, 242, 246, 262, 267, 271, 290, 293, 319, 340, 344, 350, 364, 375, 385, 387, 388, 394, 401, 406, 412, 421, 422, 427, 429, 431, 434, 454, 460, 461, 463, 464, 465, 466, 467, 469, 471, 474, 476, 477, 479, 480, 481, 482, 483], "pymapping_key": [22, 39, 55, 479, 482], "pyobject_getitem": [22, 34, 39, 48, 55, 61], "pydict_upd": [22, 55], "updat": [22, 32, 33, 41, 44, 50, 57, 61, 66, 68, 73, 74, 82, 83, 88, 90, 91, 93, 99, 105, 114, 115, 118, 125, 132, 134, 140, 159, 160, 162, 168, 173, 176, 178, 181, 182, 184, 188, 190, 192, 195, 204, 206, 221, 224, 225, 234, 235, 236, 243, 246, 247, 249, 250, 255, 256, 258, 265, 271, 278, 281, 283, 285, 288, 292, 293, 296, 299, 302, 306, 315, 324, 330, 337, 340, 341, 344, 348, 354, 365, 368, 375, 379, 383, 384, 388, 393, 394, 398, 400, 406, 412, 420, 427, 431, 435, 439, 454, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "pydict_mergefromseq2": [22, 55], "seq2": [22, 93, 291, 461], "merg": [22, 66, 83, 85, 90, 91, 93, 98, 99, 176, 181, 182, 192, 212, 235, 267, 269, 282, 292, 293, 344, 379, 385, 425, 451, 455, 460, 461, 464, 467, 468, 473, 477, 482], "duplic": [22, 66, 86, 93, 110, 139, 147, 162, 165, 166, 168, 185, 189, 190, 195, 204, 207, 210, 214, 255, 259, 267, 271, 293, 302, 337, 344, 345, 361, 383, 385, 387, 406, 421, 426, 427, 429, 430, 440, 441, 463, 465, 466, 467, 471, 474, 477, 479, 481, 482], "win": [22, 32, 66, 90, 99, 176, 178, 235, 292, 318, 354, 387, 460, 470, 474, 482], "pydict_addwatch": [22, 473], "pydict_watchcallback": 22, "watcher": [22, 59, 66, 136, 473, 481, 482], "id": [22, 32, 44, 59, 66, 76, 85, 93, 95, 98, 99, 113, 115, 116, 120, 129, 132, 142, 153, 159, 176, 180, 186, 192, 195, 196, 199, 202, 204, 208, 224, 229, 232, 239, 254, 259, 261, 267, 268, 269, 270, 271, 272, 281, 283, 288, 293, 299, 303, 305, 307, 310, 314, 319, 322, 328, 329, 334, 337, 340, 341, 342, 348, 349, 355, 357, 364, 368, 375, 385, 387, 388, 389, 397, 400, 401, 412, 415, 427, 429, 430, 449, 462, 463, 465, 466, 467, 472, 479, 480, 481, 482], "futur": [22, 34, 55, 59, 66, 75, 82, 85, 88, 97, 98, 101, 102, 108, 110, 112, 118, 120, 122, 124, 126, 129, 132, 137, 138, 139, 155, 158, 163, 164, 166, 174, 182, 192, 196, 202, 204, 206, 207, 209, 212, 224, 226, 231, 233, 235, 244, 246, 250, 252, 254, 255, 257, 267, 268, 283, 292, 293, 308, 315, 319, 325, 328, 333, 337, 341, 343, 352, 356, 361, 364, 365, 384, 385, 387, 394, 397, 399, 412, 423, 427, 429, 434, 460, 461, 462, 463, 464, 465, 466, 467, 471, 475, 476, 480, 482, 483], "pydict_watch": 22, "ids": [22, 59, 83, 229, 259, 268, 270, 283, 288, 293, 299, 303, 364, 375, 401, 465, 475, 482], "pydict_clearwatch": 22, "watcher_id": [22, 59], "identifi": [22, 23, 32, 41, 59, 62, 66, 71, 73, 74, 75, 83, 85, 88, 96, 98, 105, 106, 108, 113, 114, 118, 120, 153, 159, 174, 175, 190, 192, 193, 195, 204, 211, 224, 226, 229, 246, 247, 255, 259, 268, 269, 271, 281, 283, 288, 293, 297, 302, 308, 314, 319, 320, 323, 328, 335, 337, 341, 344, 345, 346, 351, 352, 354, 361, 364, 367, 368, 371, 385, 386, 387, 389, 393, 394, 397, 404, 406, 409, 412, 414, 415, 419, 425, 426, 427, 428, 431, 432, 435, 439, 442, 447, 460, 464, 465, 466, 467, 468, 469, 471, 474, 476, 477, 478, 479, 480, 481, 482], "mark": [22, 23, 33, 34, 59, 62, 66, 73, 82, 88, 91, 95, 99, 101, 102, 105, 110, 114, 115, 118, 120, 129, 132, 138, 139, 144, 157, 165, 166, 176, 180, 189, 190, 192, 204, 229, 231, 235, 239, 246, 255, 262, 269, 271, 297, 300, 305, 314, 328, 337, 340, 344, 348, 358, 361, 368, 379, 385, 387, 401, 409, 414, 425, 427, 429, 430, 434, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "watch": [22, 57, 59, 66, 97, 98, 101, 132, 136, 139, 185, 235, 267, 269, 328, 368, 450], "grant": [22, 59, 91, 102, 294, 359, 425, 461, 462, 466], "pydict_unwatch": 22, "pydict_watchev": 22, "enumer": [22, 23, 66, 76, 91, 93, 104, 105, 163, 181, 224, 225, 254, 261, 283, 311, 344, 364, 381, 397, 404, 421, 440, 441, 449, 451, 460, 472, 476, 478, 482, 483], "event": [22, 24, 30, 32, 41, 57, 64, 66, 71, 73, 79, 90, 95, 98, 119, 121, 122, 123, 124, 128, 129, 131, 132, 134, 135, 136, 138, 139, 142, 144, 163, 175, 176, 182, 184, 188, 190, 209, 214, 221, 222, 224, 226, 230, 235, 241, 247, 254, 257, 258, 260, 267, 269, 274, 278, 281, 282, 283, 288, 293, 296, 297, 299, 305, 308, 309, 314, 322, 328, 329, 332, 335, 337, 340, 341, 342, 344, 348, 350, 352, 355, 357, 358, 361, 367, 370, 384, 387, 394, 401, 402, 404, 409, 410, 411, 412, 413, 414, 415, 416, 425, 427, 429, 435, 445, 451, 454, 460, 461, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pydict_event_ad": 22, "pydict_event_modifi": 22, "pydict_event_delet": 22, "pydict_event_clon": 22, "pydict_event_clear": 22, "pydict_event_dealloc": 22, "new_valu": [22, 361], "delet": [22, 37, 48, 50, 52, 56, 57, 61, 62, 66, 71, 73, 74, 86, 88, 91, 95, 99, 102, 106, 111, 114, 120, 139, 144, 159, 166, 174, 176, 177, 178, 180, 183, 186, 189, 190, 195, 199, 204, 205, 212, 217, 222, 224, 225, 240, 246, 247, 250, 256, 264, 269, 271, 283, 293, 296, 297, 305, 330, 332, 334, 340, 342, 344, 352, 359, 361, 364, 367, 368, 375, 383, 394, 398, 399, 401, 404, 406, 420, 423, 426, 427, 431, 434, 435, 437, 460, 463, 464, 466, 467, 468, 469, 470, 471, 474, 476, 479, 480, 481, 482, 483], "maintain": [22, 32, 34, 66, 71, 74, 82, 88, 90, 92, 97, 99, 104, 108, 118, 147, 157, 166, 168, 175, 180, 185, 195, 206, 207, 212, 224, 226, 247, 249, 250, 251, 255, 266, 292, 307, 308, 325, 338, 347, 352, 365, 374, 387, 399, 401, 402, 406, 411, 424, 429, 431, 433, 460, 461, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 479, 480, 481, 482], "inspect": [22, 32, 33, 64, 66, 71, 74, 85, 86, 88, 95, 101, 111, 118, 120, 128, 138, 160, 174, 180, 192, 224, 226, 234, 250, 251, 254, 259, 267, 271, 297, 302, 307, 313, 315, 332, 333, 334, 341, 344, 352, 357, 361, 370, 381, 387, 388, 394, 421, 426, 427, 454, 461, 462, 463, 467, 468, 473, 482], "doing": [22, 32, 35, 61, 77, 82, 83, 90, 93, 95, 96, 98, 99, 101, 102, 103, 105, 108, 120, 132, 139, 151, 157, 158, 168, 175, 185, 193, 215, 224, 234, 242, 250, 258, 265, 269, 278, 279, 283, 292, 293, 295, 299, 305, 319, 328, 333, 338, 341, 342, 345, 348, 361, 364, 368, 383, 385, 387, 388, 389, 394, 412, 420, 427, 463, 466, 467, 468, 469, 474, 476, 477, 478, 479, 482], "unpredict": [22, 212, 271, 293, 412, 415, 427, 454, 463], "recurs": [22, 31, 32, 59, 66, 71, 83, 93, 110, 120, 142, 151, 162, 166, 169, 180, 189, 190, 192, 195, 199, 204, 212, 215, 225, 230, 249, 250, 252, 262, 283, 293, 296, 297, 299, 302, 307, 308, 313, 321, 330, 332, 342, 352, 356, 357, 364, 383, 385, 387, 388, 394, 411, 412, 421, 427, 431, 435, 439, 461, 462, 463, 464, 465, 467, 472, 474, 476, 477, 478, 479, 480, 482], "notifi": [22, 57, 66, 98, 101, 133, 137, 138, 163, 246, 247, 283, 364, 370, 401, 482], "place": [22, 23, 32, 33, 34, 37, 41, 44, 46, 50, 52, 56, 58, 59, 61, 62, 66, 71, 73, 74, 75, 77, 82, 85, 88, 91, 92, 93, 95, 97, 98, 99, 104, 106, 108, 110, 118, 120, 138, 139, 151, 152, 157, 159, 166, 167, 168, 175, 176, 180, 182, 185, 188, 189, 190, 192, 195, 204, 207, 210, 217, 223, 224, 225, 226, 229, 231, 234, 242, 246, 249, 250, 258, 262, 267, 268, 269, 271, 275, 278, 283, 293, 296, 297, 299, 302, 308, 311, 314, 318, 319, 321, 324, 338, 340, 341, 344, 345, 348, 354, 363, 368, 374, 375, 379, 383, 384, 385, 387, 388, 389, 394, 396, 398, 406, 420, 421, 426, 427, 429, 431, 435, 439, 451, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 480, 482], "print": [22, 31, 32, 33, 34, 41, 48, 57, 61, 66, 70, 71, 73, 74, 76, 82, 83, 84, 85, 86, 87, 88, 92, 93, 95, 96, 97, 98, 99, 102, 105, 106, 108, 110, 111, 112, 113, 116, 120, 122, 124, 125, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 146, 150, 151, 155, 156, 158, 159, 162, 165, 166, 168, 169, 171, 174, 175, 176, 180, 182, 183, 185, 187, 189, 190, 192, 195, 199, 200, 203, 204, 210, 212, 215, 219, 222, 224, 225, 226, 227, 229, 231, 234, 239, 241, 243, 244, 246, 247, 250, 251, 254, 255, 258, 261, 262, 267, 269, 271, 278, 279, 282, 283, 288, 293, 296, 297, 299, 300, 301, 304, 305, 307, 308, 309, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 329, 331, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 348, 350, 352, 354, 356, 357, 358, 359, 361, 363, 364, 366, 368, 374, 375, 377, 379, 381, 383, 385, 387, 388, 394, 396, 398, 399, 401, 404, 406, 407, 410, 411, 412, 415, 416, 418, 419, 420, 421, 424, 426, 427, 428, 429, 434, 435, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 454, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "unrais": [22, 23, 142, 340, 352, 361, 472, 480, 482], "pyerr_writeunrais": [22, 23, 55, 73, 482], "let": [23, 41, 64, 70, 71, 74, 76, 77, 82, 83, 86, 87, 88, 90, 91, 92, 93, 98, 99, 101, 102, 103, 104, 105, 106, 108, 118, 125, 138, 139, 155, 160, 166, 168, 175, 189, 199, 222, 225, 229, 235, 241, 244, 247, 249, 251, 262, 266, 267, 268, 269, 292, 297, 305, 307, 319, 330, 331, 335, 340, 341, 368, 375, 385, 388, 389, 412, 420, 429, 431, 450, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 476, 479, 482], "understand": [23, 41, 66, 71, 73, 74, 76, 82, 88, 91, 98, 99, 101, 102, 103, 105, 118, 139, 154, 182, 192, 206, 229, 241, 242, 262, 275, 288, 307, 308, 319, 340, 345, 348, 350, 367, 375, 385, 389, 406, 415, 421, 426, 433, 461, 462, 463, 464, 466, 467, 468, 469, 478, 482], "basic": [23, 32, 34, 61, 62, 66, 71, 72, 73, 75, 82, 83, 90, 91, 93, 96, 98, 99, 101, 108, 110, 118, 134, 144, 145, 147, 155, 157, 159, 166, 168, 176, 182, 183, 186, 188, 189, 210, 218, 229, 233, 239, 244, 246, 252, 254, 255, 256, 258, 262, 267, 269, 283, 284, 292, 304, 307, 308, 322, 327, 337, 338, 340, 341, 344, 347, 348, 350, 357, 361, 364, 367, 368, 373, 375, 380, 385, 387, 388, 389, 394, 405, 411, 412, 413, 414, 418, 420, 423, 429, 435, 455, 461, 463, 464, 466, 467, 468, 470, 474, 475, 476, 477, 480, 482], "posix": [23, 33, 66, 68, 99, 103, 108, 109, 113, 132, 136, 150, 175, 182, 208, 212, 226, 254, 257, 266, 286, 292, 293, 294, 296, 301, 309, 316, 322, 328, 331, 332, 337, 338, 348, 352, 354, 357, 359, 364, 365, 390, 398, 420, 424, 425, 454, 455, 461, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 479, 480, 482], "global": [23, 27, 30, 31, 33, 34, 44, 50, 51, 61, 64, 66, 71, 74, 76, 77, 85, 86, 92, 93, 95, 100, 106, 108, 112, 113, 118, 120, 131, 134, 139, 140, 144, 151, 159, 165, 168, 175, 176, 181, 190, 192, 194, 209, 212, 217, 222, 224, 226, 229, 241, 246, 247, 249, 250, 254, 255, 264, 265, 269, 276, 283, 292, 293, 296, 297, 298, 305, 308, 320, 324, 327, 334, 335, 337, 344, 345, 351, 352, 353, 354, 357, 358, 361, 364, 366, 368, 379, 383, 385, 387, 389, 394, 397, 399, 401, 412, 419, 426, 427, 428, 430, 431, 432, 434, 436, 439, 440, 449, 454, 460, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "suppos": [23, 58, 61, 62, 71, 75, 83, 96, 99, 103, 108, 180, 185, 192, 195, 198, 247, 309, 319, 334, 337, 340, 341, 343, 345, 357, 375, 389, 401, 466, 467, 468, 474, 479, 480, 482], "pyarg_": 23, "concret": [23, 31, 32, 66, 73, 74, 92, 102, 114, 120, 165, 175, 182, 186, 196, 207, 218, 229, 250, 253, 254, 258, 268, 292, 329, 338, 344, 352, 364, 387, 393, 406, 409, 416, 424, 431, 463, 464, 467, 475, 476, 479, 481, 482], "traceback": [23, 33, 34, 41, 64, 66, 71, 74, 77, 83, 87, 90, 91, 92, 93, 96, 97, 98, 99, 105, 112, 118, 124, 138, 139, 140, 142, 151, 156, 159, 162, 166, 168, 175, 176, 182, 184, 185, 187, 190, 192, 210, 212, 224, 246, 254, 255, 259, 265, 267, 268, 269, 283, 284, 296, 297, 299, 311, 315, 319, 338, 340, 344, 345, 348, 350, 352, 364, 366, 383, 384, 386, 387, 388, 389, 406, 426, 427, 428, 429, 435, 439, 440, 441, 442, 445, 448, 451, 454, 455, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 479, 480, 481, 482], "although": [23, 25, 34, 41, 61, 70, 83, 88, 92, 98, 99, 121, 138, 139, 150, 157, 175, 180, 182, 189, 192, 195, 196, 199, 204, 205, 230, 247, 255, 258, 261, 262, 267, 271, 281, 283, 292, 293, 294, 295, 296, 299, 307, 319, 343, 344, 345, 352, 354, 365, 367, 374, 406, 411, 413, 414, 415, 420, 424, 426, 427, 429, 431, 433, 435, 454, 460, 461, 473, 476, 477, 478, 482], "forbidden": [23, 41, 92, 106, 138, 240, 299, 344, 364, 467, 471, 477, 482], "clean": [23, 32, 34, 66, 71, 73, 95, 97, 99, 102, 103, 118, 120, 131, 138, 140, 157, 165, 192, 200, 204, 207, 211, 212, 246, 252, 255, 271, 282, 283, 284, 285, 287, 315, 338, 340, 341, 343, 359, 361, 394, 398, 401, 415, 427, 429, 455, 461, 462, 463, 465, 466, 467, 468, 469, 471, 474, 475, 480, 481, 482], "prepar": [23, 57, 64, 66, 76, 105, 106, 116, 150, 156, 181, 182, 224, 229, 231, 234, 243, 254, 258, 269, 293, 299, 327, 337, 348, 352, 361, 362, 383, 384, 387, 394, 412, 413, 416, 420, 421, 425, 467, 469, 471, 476, 477, 479, 481, 482], "propag": [23, 32, 34, 35, 50, 66, 88, 93, 98, 99, 116, 124, 138, 156, 169, 190, 212, 250, 267, 268, 283, 296, 297, 302, 325, 332, 333, 340, 344, 348, 352, 365, 380, 387, 388, 389, 394, 401, 426, 427, 429, 431, 442, 464, 466, 478, 482], "intend": [23, 30, 32, 33, 41, 44, 59, 62, 70, 71, 73, 82, 88, 93, 98, 99, 102, 106, 108, 112, 113, 125, 138, 151, 157, 168, 183, 190, 192, 200, 207, 212, 225, 239, 243, 244, 246, 251, 255, 258, 259, 261, 262, 267, 269, 270, 271, 275, 288, 289, 293, 299, 302, 307, 334, 337, 341, 343, 344, 345, 347, 348, 352, 356, 364, 375, 379, 383, 385, 387, 388, 393, 394, 399, 406, 410, 421, 424, 426, 427, 429, 433, 434, 435, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 476, 477, 478, 479, 480, 482], "mysteri": [23, 71, 103, 151, 296, 334, 476], "sys": [23, 24, 28, 30, 32, 33, 34, 44, 57, 61, 62, 64, 66, 71, 77, 78, 83, 85, 86, 88, 95, 97, 98, 99, 100, 101, 105, 108, 110, 111, 112, 113, 116, 120, 132, 135, 136, 138, 140, 142, 144, 151, 152, 155, 156, 162, 168, 174, 175, 176, 185, 187, 189, 190, 192, 199, 209, 212, 213, 214, 215, 217, 222, 224, 226, 227, 228, 229, 233, 244, 246, 249, 250, 251, 254, 255, 258, 261, 262, 265, 267, 268, 269, 275, 279, 280, 283, 292, 293, 295, 297, 299, 300, 302, 303, 307, 308, 309, 311, 312, 313, 315, 321, 324, 327, 328, 331, 332, 333, 334, 337, 338, 340, 342, 344, 347, 348, 354, 355, 357, 358, 360, 361, 364, 366, 368, 379, 380, 381, 384, 387, 388, 389, 394, 398, 399, 401, 406, 412, 416, 419, 420, 421, 422, 426, 427, 429, 431, 435, 436, 437, 442, 445, 447, 449, 450, 451, 452, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 482, 483], "exc_info": [23, 32, 34, 66, 71, 98, 99, 110, 144, 152, 186, 190, 192, 212, 267, 269, 315, 332, 352, 380, 384, 387, 404, 406, 426, 427, 449, 464, 466, 467, 469, 472, 477, 482], "former": [23, 30, 61, 73, 83, 118, 144, 158, 160, 165, 175, 176, 182, 185, 224, 243, 249, 250, 255, 267, 275, 283, 288, 308, 322, 332, 340, 343, 347, 365, 368, 374, 383, 385, 397, 427, 429, 431, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482], "caught": [23, 97, 113, 118, 138, 152, 156, 165, 212, 283, 293, 302, 305, 323, 332, 333, 337, 340, 352, 361, 365, 368, 387, 388, 413, 422, 426, 427, 435, 442, 462, 467, 469, 476, 480, 482], "stop": [23, 33, 54, 66, 83, 92, 93, 95, 98, 99, 101, 116, 119, 129, 132, 136, 138, 144, 155, 158, 159, 160, 182, 184, 186, 189, 192, 196, 206, 212, 224, 226, 227, 234, 246, 255, 261, 267, 268, 269, 271, 283, 284, 292, 293, 295, 296, 297, 300, 302, 308, 314, 318, 333, 338, 344, 348, 361, 364, 367, 375, 381, 383, 384, 385, 387, 389, 405, 406, 426, 427, 429, 440, 461, 462, 463, 464, 466, 467, 468, 469, 471, 474, 477, 478, 479, 482], "pyerr_clear": [23, 34, 55, 71, 476], "pyerr_printex": [23, 55, 482], "set_sys_last_var": 23, "stderr": [23, 32, 33, 41, 57, 62, 66, 70, 71, 83, 98, 99, 112, 125, 129, 132, 136, 138, 151, 156, 163, 168, 189, 192, 213, 226, 228, 244, 246, 258, 267, 268, 269, 283, 292, 293, 311, 315, 321, 333, 340, 344, 348, 352, 357, 361, 364, 366, 380, 385, 387, 398, 399, 406, 427, 449, 450, 451, 454, 460, 461, 465, 467, 468, 469, 474, 476, 477, 478, 479, 481, 482], "systemexit": [23, 64, 66, 98, 113, 138, 140, 156, 167, 212, 246, 352, 364, 405, 428, 442, 449, 466, 467, 469, 478, 482], "exit": [23, 32, 33, 34, 50, 57, 64, 66, 70, 71, 76, 82, 84, 87, 90, 93, 99, 112, 113, 116, 120, 125, 131, 132, 134, 136, 137, 138, 151, 155, 156, 163, 165, 167, 168, 174, 176, 185, 187, 188, 192, 199, 212, 213, 217, 227, 246, 247, 249, 252, 254, 261, 267, 269, 283, 292, 293, 297, 308, 309, 311, 315, 319, 328, 333, 334, 335, 337, 338, 340, 344, 348, 352, 358, 359, 361, 364, 366, 377, 379, 384, 387, 388, 389, 398, 399, 401, 402, 405, 406, 410, 419, 420, 421, 426, 427, 429, 442, 447, 449, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 477, 478, 479, 480, 481, 482], "fatal": [23, 32, 41, 57, 70, 71, 140, 213, 341, 357, 387, 442, 468, 469, 471, 475, 478, 482], "last_typ": [23, 66, 315, 352, 380, 449, 469], "last_valu": [23, 66, 92, 210, 315, 352, 380, 449], "last_traceback": [23, 66, 297, 315, 352, 380, 427, 449], "pyerr_print": [23, 55, 66, 70, 71, 482], "unraisablehook": [23, 28, 66, 113, 142, 315, 340, 352, 361, 449, 480, 482], "util": [23, 30, 32, 34, 57, 66, 91, 92, 93, 99, 112, 116, 120, 132, 151, 155, 157, 158, 162, 165, 176, 181, 185, 186, 189, 190, 192, 193, 195, 199, 202, 204, 206, 207, 229, 237, 240, 247, 249, 251, 254, 256, 270, 273, 280, 285, 292, 311, 315, 322, 332, 342, 344, 346, 348, 350, 364, 368, 383, 387, 390, 398, 410, 450, 460, 461, 463, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "imposs": [23, 39, 52, 61, 83, 98, 157, 212, 268, 283, 293, 296, 312, 343, 361, 364, 385, 387, 400, 409, 421, 435, 461, 462, 463, 464, 465, 467, 468, 477, 482], "__del__": [23, 32, 50, 61, 66, 71, 82, 116, 181, 226, 258, 283, 316, 340, 359, 361, 388, 427, 476, 482], "help": [23, 34, 44, 48, 56, 64, 66, 73, 76, 78, 83, 84, 85, 87, 88, 91, 92, 98, 99, 101, 102, 103, 105, 106, 108, 116, 120, 151, 152, 155, 157, 168, 175, 176, 186, 189, 191, 192, 199, 221, 222, 224, 225, 227, 229, 233, 234, 237, 240, 243, 245, 249, 250, 253, 254, 255, 258, 261, 262, 281, 288, 293, 296, 297, 308, 335, 337, 340, 341, 344, 350, 352, 361, 365, 366, 367, 368, 374, 377, 379, 385, 388, 389, 393, 394, 398, 404, 412, 420, 427, 431, 434, 436, 447, 449, 450, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "statement": [23, 34, 39, 46, 48, 52, 56, 59, 61, 64, 66, 70, 71, 76, 83, 85, 87, 88, 93, 97, 99, 108, 110, 112, 113, 115, 118, 125, 138, 144, 149, 151, 158, 163, 165, 175, 183, 184, 185, 187, 190, 192, 200, 212, 217, 222, 224, 233, 241, 246, 247, 249, 250, 252, 254, 258, 263, 264, 270, 271, 278, 281, 283, 284, 288, 291, 292, 293, 295, 297, 306, 312, 315, 319, 328, 335, 337, 338, 340, 341, 344, 348, 351, 352, 353, 357, 358, 359, 360, 361, 366, 377, 383, 385, 388, 389, 400, 404, 409, 410, 411, 421, 428, 429, 430, 431, 432, 434, 436, 438, 439, 445, 454, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "pyerr_setstr": [23, 34, 55, 71, 73, 74, 97, 468], "pyexc_runtimeerror": [23, 55, 73], "pyerr_setobject": [23, 55, 71, 482], "pyerr_format": [23, 55, 73, 88, 468, 477, 482], "pyunicode_fromformat": [23, 55, 62, 73, 74, 471, 473, 475, 476, 477, 482], "pyerr_formatv": [23, 55, 477, 482], "pyerr_setnon": [23, 55], "shorthand": [23, 83, 96, 118, 143, 190, 192, 259, 302, 337, 363, 368, 380, 385, 399, 426, 442, 464, 465, 476], "pyerr_badargu": [23, 55], "pyexc_typeerror": [23, 55, 71, 73, 74], "illeg": [23, 46, 93, 105, 157, 195, 204, 211, 212, 293, 314, 333, 341, 344, 365, 375, 406, 409, 421, 426, 427, 430, 434, 435, 462, 463, 465, 466, 468, 474, 479, 480], "pyerr_nomemori": [23, 41, 55, 71], "pyexc_memoryerror": [23, 55], "pyerr_setfromerrno": [23, 55, 71], "gotten": [23, 151, 182, 185, 283, 461, 482], "strerror": [23, 66, 116, 211, 212, 266, 293, 467, 482], "eintr": [23, 66, 116, 211, 212, 283, 468, 482], "interrupt": [23, 32, 66, 99, 113, 117, 125, 138, 151, 176, 177, 185, 190, 211, 212, 246, 271, 283, 293, 298, 328, 329, 333, 337, 338, 340, 348, 358, 364, 365, 387, 394, 405, 419, 425, 427, 440, 467, 468, 472, 474, 477, 480, 481, 482], "pyerr_checksign": [23, 55, 473, 482], "pyerr_setfromerrnowithfilenameobject": [23, 55], "filenameobject": 23, "oserror": [23, 66, 105, 125, 129, 132, 153, 175, 182, 187, 212, 214, 217, 222, 224, 229, 233, 242, 244, 250, 255, 258, 278, 282, 283, 288, 293, 294, 295, 296, 303, 306, 322, 328, 332, 333, 335, 337, 341, 348, 357, 358, 361, 365, 392, 394, 404, 422, 426, 442, 449, 468, 471, 475, 476, 480, 482], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 55], "pyerr_setfromwindowserr": [23, 55], "ierr": 23, "windowserror": [23, 66, 175, 212, 404, 475], "getlasterror": [23, 66, 116, 175, 482], "win32": [23, 62, 82, 84, 136, 175, 269, 283, 293, 337, 348, 352, 354, 404, 405, 460, 461, 467, 469, 474, 477, 482], "formatmessag": [23, 175, 212], "pyexc_windowserror": [23, 55], "pyerr_setexcfromwindowserr": [23, 55], "pyerr_setfromwindowserrwithfilenam": [23, 55], "pyerr_setfromwindowserrwithfilenameobject": 23, "os": [23, 24, 32, 33, 55, 57, 62, 66, 68, 71, 76, 83, 85, 88, 90, 91, 93, 95, 98, 99, 105, 108, 110, 113, 116, 118, 123, 124, 125, 131, 132, 136, 137, 138, 139, 140, 142, 151, 159, 162, 163, 165, 166, 168, 169, 182, 186, 187, 188, 189, 192, 199, 207, 209, 211, 213, 214, 215, 218, 219, 224, 228, 229, 230, 233, 234, 242, 244, 246, 252, 254, 258, 266, 269, 272, 278, 282, 283, 286, 292, 299, 301, 302, 303, 306, 308, 309, 318, 320, 328, 329, 332, 333, 334, 335, 337, 340, 341, 342, 344, 352, 353, 354, 357, 359, 364, 365, 368, 379, 381, 387, 388, 398, 399, 402, 406, 420, 421, 424, 427, 437, 442, 450, 451, 454, 455, 458, 460, 461, 463, 464, 465, 466, 469, 482, 483], "fsdecod": [23, 66, 85, 116, 293, 352, 474, 478, 482], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 55], "filename2": [23, 66, 212], "pyerr_setexcfromwindowserrwithfilenam": [23, 55], "pyerr_setimporterror": [23, 55, 476, 478], "msg": [23, 66, 82, 99, 103, 120, 128, 138, 151, 168, 175, 189, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 212, 227, 234, 236, 241, 250, 256, 262, 266, 267, 269, 271, 283, 285, 286, 315, 319, 335, 337, 344, 350, 358, 361, 362, 380, 387, 392, 394, 407, 413, 464, 465, 466, 474, 475, 476, 477, 478, 482], "importerror": [23, 66, 99, 101, 212, 249, 250, 268, 279, 283, 299, 302, 334, 341, 352, 361, 387, 409, 422, 431, 435, 449, 455, 462, 464, 467, 475, 476, 478, 479, 481, 482], "pyerr_setimporterrorsubclass": [23, 55, 478], "pyerr_syntaxlocationobject": [23, 482], "lineno": [23, 66, 95, 120, 144, 166, 184, 186, 187, 190, 192, 212, 217, 218, 221, 255, 262, 264, 265, 267, 273, 285, 286, 297, 299, 308, 312, 314, 315, 319, 331, 361, 362, 380, 381, 387, 399, 430, 454, 471, 477, 478, 480, 482], "col_offset": [23, 66, 120, 190, 264, 480, 482], "syntaxerror": [23, 64, 66, 77, 102, 120, 156, 158, 167, 192, 212, 224, 246, 319, 361, 377, 380, 385, 426, 428, 430, 434, 435, 441, 442, 445, 448, 449, 461, 462, 463, 472, 473, 474, 476, 477, 478, 479, 482], "subsystem": [23, 93, 99, 250, 348, 368, 460, 464, 466, 468, 480, 482], "think": [23, 58, 62, 73, 76, 83, 88, 93, 97, 99, 102, 103, 105, 108, 192, 200, 224, 235, 252, 261, 267, 292, 299, 385, 388, 389, 427, 429, 431, 463, 466, 467], "pyerr_syntaxlocationex": [23, 55, 482], "pyerr_syntaxloc": [23, 55], "omit": [23, 56, 58, 66, 73, 88, 99, 100, 102, 115, 118, 120, 125, 139, 153, 166, 174, 175, 176, 182, 189, 192, 199, 200, 201, 203, 212, 222, 224, 229, 233, 244, 246, 247, 249, 258, 259, 265, 266, 271, 276, 278, 283, 288, 292, 293, 297, 299, 305, 314, 319, 320, 328, 331, 332, 334, 335, 337, 343, 344, 345, 347, 357, 364, 375, 380, 383, 385, 387, 388, 399, 400, 408, 410, 412, 413, 420, 425, 426, 427, 429, 430, 434, 435, 454, 460, 464, 465, 466, 468, 469, 471, 472, 475, 476, 478, 479, 482], "pyerr_badinternalcal": [23, 55], "pyexc_systemerror": [23, 53, 55], "mirror": [23, 66, 106, 222, 267, 268, 269, 362, 368, 376, 386, 414, 454, 465, 482], "user": [23, 28, 32, 33, 34, 41, 55, 59, 61, 62, 64, 66, 70, 71, 72, 74, 77, 82, 83, 84, 88, 91, 92, 95, 96, 97, 98, 99, 101, 102, 105, 106, 109, 112, 116, 118, 125, 132, 134, 138, 142, 144, 151, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 172, 174, 176, 178, 180, 182, 184, 185, 186, 188, 192, 199, 209, 210, 211, 212, 215, 222, 225, 226, 227, 228, 229, 232, 234, 239, 241, 242, 244, 247, 250, 251, 255, 256, 257, 258, 262, 266, 267, 269, 271, 272, 275, 281, 283, 286, 288, 292, 293, 294, 295, 296, 297, 299, 300, 305, 310, 311, 312, 319, 320, 322, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 348, 352, 354, 357, 358, 359, 361, 364, 365, 367, 368, 369, 372, 374, 375, 378, 379, 380, 383, 384, 387, 389, 393, 394, 395, 398, 399, 402, 404, 406, 410, 411, 412, 413, 414, 418, 420, 421, 424, 425, 426, 427, 428, 429, 431, 435, 437, 440, 452, 454, 455, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "problem": [23, 25, 32, 34, 57, 61, 66, 71, 74, 76, 82, 83, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 103, 105, 112, 125, 139, 141, 152, 157, 158, 166, 168, 174, 182, 185, 189, 192, 195, 198, 202, 204, 206, 222, 229, 235, 244, 246, 249, 250, 262, 266, 267, 268, 283, 292, 293, 299, 308, 314, 333, 337, 340, 341, 343, 344, 350, 356, 357, 361, 363, 385, 388, 389, 401, 406, 409, 412, 426, 434, 442, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 479, 480, 482], "machineri": [23, 44, 61, 66, 71, 85, 91, 99, 114, 157, 208, 210, 224, 249, 251, 255, 280, 302, 341, 352, 384, 401, 405, 422, 423, 427, 431, 454, 460, 462, 463, 465, 468, 471, 472, 474, 475, 476, 477, 478, 479, 482], "nor": [23, 32, 33, 61, 73, 74, 82, 87, 92, 96, 106, 114, 132, 143, 144, 157, 187, 241, 242, 267, 270, 275, 283, 286, 292, 293, 297, 299, 302, 319, 330, 338, 340, 341, 344, 352, 375, 379, 385, 387, 402, 424, 425, 427, 429, 454, 455, 471, 473, 474, 476, 478, 479, 482], "intent": [23, 24, 30, 70, 71, 88, 99, 180, 182, 195, 204, 246, 258, 275, 288, 293, 352, 385, 387, 388, 406, 418, 426, 427, 464, 465, 467, 469, 475, 476, 482], "pyerr_warnex": [23, 55, 399, 466], "stack_level": 23, "forth": [23, 83, 90, 102, 103, 159, 293, 319, 328, 344, 427, 461, 463, 464, 466], "pyexc_warn": [23, 55], "pyexc_except": [23, 55], "pyexc_runtimewarn": [23, 55], "command": [23, 32, 33, 34, 64, 66, 68, 70, 71, 75, 77, 83, 88, 98, 99, 100, 101, 105, 108, 110, 112, 116, 117, 125, 136, 142, 151, 156, 163, 176, 184, 186, 187, 190, 191, 192, 205, 213, 221, 222, 224, 229, 244, 247, 251, 254, 256, 258, 264, 268, 272, 283, 285, 288, 295, 296, 298, 301, 305, 306, 308, 309, 310, 313, 315, 324, 327, 331, 332, 335, 341, 344, 350, 352, 353, 358, 362, 366, 367, 368, 374, 375, 381, 383, 398, 399, 402, 406, 412, 419, 420, 427, 428, 435, 436, 447, 450, 455, 457, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 477, 479, 480, 481, 482, 483], "pyerr_warnexplicitobject": 23, "registri": [23, 31, 33, 62, 63, 66, 145, 166, 174, 194, 196, 202, 225, 249, 250, 254, 259, 269, 276, 299, 303, 341, 352, 353, 385, 394, 399, 403, 405, 412, 457, 461, 467, 468, 478, 481, 482], "straightforward": [23, 34, 71, 82, 83, 97, 99, 105, 157, 166, 175, 259, 268, 292, 328, 337, 388, 389, 463, 464, 467, 472, 474, 475, 482], "warn_explicit": [23, 66, 315, 399, 478, 482], "pyerr_warnexplicit": [23, 55], "pyerr_warnformat": [23, 55], "pyerr_resourcewarn": [23, 55, 478, 482], "resourcewarn": [23, 66, 124, 186, 212, 226, 254, 293, 348, 361, 387, 399, 449, 474, 478, 482], "warningmessag": [23, 478, 482], "pyerr_set": 23, "pyerr_restor": [23, 55, 61, 73], "pyerr_exceptionmatch": [23, 34, 55], "shown": [23, 34, 41, 71, 75, 88, 90, 97, 98, 99, 100, 101, 104, 106, 108, 114, 118, 147, 168, 180, 185, 187, 189, 190, 192, 202, 212, 213, 246, 261, 267, 268, 292, 297, 308, 313, 319, 325, 345, 348, 365, 374, 375, 380, 383, 387, 388, 389, 393, 399, 401, 427, 460, 467, 471, 477, 478, 479, 480, 481, 482], "pyerr_givenexceptionmatch": [23, 55], "subtupl": 23, "pyerr_fetch": [23, 55, 61, 73, 476, 482], "ptraceback": 23, "catch": [23, 34, 41, 66, 76, 83, 90, 93, 99, 101, 105, 106, 118, 120, 138, 166, 174, 192, 212, 243, 255, 267, 292, 293, 315, 322, 331, 333, 340, 348, 361, 385, 387, 394, 407, 427, 429, 461, 464, 466, 467, 468, 469, 472, 474, 475, 476, 478, 481, 482], "save": [23, 32, 34, 41, 61, 66, 70, 71, 73, 83, 88, 91, 92, 93, 97, 98, 99, 102, 108, 118, 138, 140, 147, 149, 151, 152, 155, 166, 168, 176, 182, 186, 199, 208, 225, 226, 242, 246, 256, 261, 266, 269, 270, 271, 292, 293, 299, 308, 313, 319, 320, 334, 340, 352, 361, 364, 365, 367, 368, 380, 383, 399, 404, 418, 423, 424, 426, 427, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 479, 481, 482], "temporarili": [23, 34, 66, 71, 88, 99, 106, 108, 150, 168, 185, 192, 226, 229, 266, 267, 315, 332, 344, 348, 361, 366, 375, 381, 387, 388, 389, 426, 460, 467, 473, 478, 479, 482], "invalid": [23, 28, 33, 55, 57, 59, 61, 62, 66, 71, 83, 85, 87, 91, 92, 96, 98, 102, 105, 106, 113, 116, 125, 146, 156, 158, 159, 162, 175, 182, 183, 185, 195, 198, 200, 202, 204, 207, 208, 210, 211, 212, 215, 225, 226, 229, 233, 237, 239, 241, 243, 246, 249, 250, 255, 262, 268, 271, 275, 283, 292, 293, 294, 295, 299, 309, 311, 319, 322, 328, 329, 333, 337, 341, 343, 344, 345, 348, 357, 361, 364, 365, 375, 378, 385, 387, 393, 399, 400, 401, 404, 409, 418, 424, 426, 427, 430, 435, 440, 442, 448, 454, 461, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482], "later": [23, 24, 32, 33, 34, 41, 44, 59, 70, 71, 73, 74, 82, 88, 90, 93, 98, 99, 102, 103, 106, 108, 112, 118, 124, 125, 137, 138, 140, 141, 149, 151, 152, 155, 157, 166, 168, 175, 176, 182, 190, 195, 201, 204, 229, 234, 242, 246, 250, 255, 258, 261, 265, 266, 270, 279, 283, 292, 299, 319, 325, 328, 331, 333, 337, 340, 341, 352, 361, 380, 385, 387, 388, 389, 394, 398, 399, 400, 401, 420, 423, 426, 427, 429, 431, 435, 454, 460, 461, 462, 463, 464, 467, 468, 469, 474, 476, 477, 479, 481, 482], "away": [23, 32, 34, 74, 83, 88, 93, 98, 103, 118, 176, 182, 185, 192, 212, 246, 255, 275, 292, 293, 294, 308, 319, 451, 463, 464, 469, 476, 477, 482], "pyerr_normalizeexcept": [23, 55, 482], "tb": [23, 99, 190, 212, 246, 380, 381, 384, 389, 427, 466, 467, 476], "circumst": [23, 41, 83, 90, 92, 98, 99, 151, 166, 212, 242, 267, 270, 292, 293, 322, 332, 343, 394, 402, 427, 435, 465, 472, 476, 480, 482], "unnorm": [23, 482], "instanti": [23, 74, 82, 92, 97, 98, 99, 106, 114, 120, 125, 131, 132, 138, 151, 153, 155, 159, 175, 176, 180, 182, 189, 193, 195, 197, 202, 229, 239, 241, 244, 247, 249, 250, 267, 268, 269, 271, 283, 289, 292, 296, 297, 299, 328, 329, 331, 335, 337, 338, 344, 361, 368, 375, 384, 385, 387, 388, 389, 398, 402, 407, 409, 410, 413, 415, 427, 435, 439, 442, 466, 467, 474, 477, 479, 480, 481, 482], "delay": [23, 66, 82, 90, 99, 111, 128, 138, 176, 221, 244, 246, 255, 269, 283, 288, 325, 333, 337, 341, 361, 383, 389, 394, 395, 427, 449, 467, 471, 474, 478, 479, 480, 482], "implicit": [23, 33, 57, 61, 66, 71, 83, 88, 97, 99, 110, 112, 118, 125, 132, 138, 143, 165, 166, 168, 180, 183, 187, 189, 212, 222, 224, 239, 247, 250, 255, 258, 268, 281, 295, 297, 314, 319, 324, 333, 335, 337, 340, 344, 345, 347, 348, 385, 388, 389, 399, 401, 411, 427, 429, 431, 435, 439, 442, 454, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 482, 483], "__traceback__": [23, 212, 352, 427, 429, 435, 469, 472, 482], "snippet": [23, 66, 76, 92, 99, 138, 169, 184, 243, 254, 268, 331, 341, 364, 460, 463, 464, 466, 477, 482], "pyexception_settraceback": [23, 55, 482], "pyerr_gethandledexcept": [23, 55, 472, 482], "activ": [23, 32, 34, 48, 57, 61, 64, 70, 83, 90, 100, 101, 102, 103, 108, 125, 131, 137, 138, 139, 144, 151, 152, 159, 168, 176, 185, 209, 212, 217, 222, 224, 242, 246, 251, 263, 272, 283, 288, 292, 295, 297, 305, 308, 314, 328, 334, 338, 340, 341, 344, 348, 352, 364, 365, 368, 375, 383, 384, 388, 389, 398, 410, 411, 414, 435, 440, 452, 454, 460, 461, 463, 464, 466, 467, 468, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482], "fresh": [23, 61, 83, 88, 93, 157, 165, 168, 255, 283, 307, 324, 361, 384, 431, 460, 463, 464, 482], "pyerr_sethandledexcept": [23, 55, 472, 482], "pyerr_getexcinfo": [23, 55, 472, 482], "info": [23, 61, 66, 71, 82, 91, 98, 99, 116, 118, 124, 136, 152, 157, 168, 182, 190, 224, 226, 229, 241, 242, 245, 251, 255, 256, 264, 267, 268, 269, 271, 283, 288, 302, 303, 307, 332, 349, 368, 383, 385, 387, 394, 420, 421, 429, 451, 458, 462, 464, 466, 467, 468, 471, 474, 476, 480, 482], "kept": [23, 24, 32, 44, 57, 62, 83, 88, 97, 99, 112, 166, 175, 183, 185, 194, 198, 207, 210, 212, 213, 224, 242, 243, 246, 249, 258, 261, 269, 271, 311, 312, 334, 338, 341, 343, 385, 388, 401, 423, 435, 461, 463, 468, 469, 471, 472, 474, 475, 476, 481, 482], "backward": [23, 24, 32, 55, 57, 62, 64, 66, 78, 85, 88, 98, 99, 118, 121, 127, 139, 144, 166, 176, 182, 190, 192, 193, 195, 204, 206, 207, 212, 221, 227, 235, 244, 246, 247, 250, 255, 258, 267, 268, 271, 293, 294, 295, 299, 302, 308, 314, 319, 322, 332, 337, 341, 344, 348, 356, 361, 365, 380, 383, 385, 393, 394, 396, 418, 429, 431, 434, 435, 439, 460, 461, 463, 464, 466, 467, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyerr_setexcinfo": [23, 55, 472, 482], "deriv": [23, 32, 48, 57, 59, 66, 74, 76, 86, 108, 114, 118, 120, 144, 156, 157, 165, 173, 175, 176, 177, 180, 182, 196, 198, 200, 201, 202, 212, 225, 229, 239, 243, 247, 249, 250, 251, 255, 258, 261, 262, 267, 268, 272, 288, 292, 293, 308, 310, 312, 313, 314, 328, 338, 341, 345, 352, 368, 383, 385, 387, 394, 397, 399, 406, 407, 410, 415, 418, 419, 425, 427, 430, 431, 434, 439, 442, 461, 464, 465, 466, 467, 468, 469, 472, 475, 476, 478, 479, 482], "interact": [23, 32, 33, 34, 41, 57, 61, 64, 66, 70, 77, 82, 83, 85, 91, 99, 102, 108, 112, 113, 118, 120, 125, 144, 155, 165, 176, 179, 185, 186, 190, 193, 206, 212, 217, 224, 242, 246, 249, 254, 255, 257, 258, 283, 284, 292, 293, 294, 295, 297, 307, 308, 313, 315, 320, 323, 334, 341, 348, 350, 352, 353, 357, 358, 368, 374, 375, 380, 383, 387, 394, 399, 412, 419, 421, 427, 430, 431, 432, 433, 434, 435, 447, 454, 460, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "main": [23, 32, 33, 34, 41, 44, 57, 61, 64, 66, 70, 71, 73, 74, 82, 83, 88, 90, 91, 97, 98, 99, 100, 112, 113, 118, 120, 122, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 140, 151, 155, 156, 165, 166, 168, 169, 176, 184, 186, 187, 189, 192, 193, 195, 198, 199, 200, 203, 204, 205, 207, 225, 227, 229, 239, 246, 250, 251, 252, 255, 258, 267, 268, 271, 277, 283, 288, 292, 293, 296, 299, 309, 315, 322, 324, 333, 334, 338, 340, 344, 352, 353, 354, 357, 361, 364, 366, 368, 371, 374, 375, 381, 383, 385, 387, 388, 389, 394, 398, 401, 406, 410, 412, 414, 418, 419, 420, 427, 428, 431, 449, 450, 451, 454, 457, 460, 463, 464, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "sent": [23, 66, 88, 90, 93, 98, 103, 105, 106, 120, 121, 125, 132, 136, 139, 168, 176, 199, 222, 234, 239, 241, 243, 244, 246, 247, 259, 267, 268, 269, 283, 288, 293, 297, 305, 322, 333, 335, 337, 338, 340, 341, 348, 365, 366, 385, 394, 406, 418, 419, 460, 461, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 480, 482], "pend": [23, 32, 38, 66, 73, 110, 125, 132, 138, 165, 258, 271, 281, 305, 328, 333, 340, 341, 423, 429, 474, 475, 476, 478, 481, 482, 483], "invoc": [23, 54, 66, 71, 88, 95, 163, 168, 175, 209, 274, 283, 308, 364, 380, 387, 398, 406, 414, 426, 427, 439, 454, 465, 474, 476, 480, 482], "press": [23, 90, 99, 125, 154, 176, 246, 282, 297, 323, 368, 374, 375, 383, 387, 421, 468, 474, 482], "ctrl": [23, 66, 84, 90, 99, 116, 125, 134, 167, 177, 283, 297, 333, 338, 340, 440, 454, 461, 466, 474, 480, 482], "sigint": [23, 66, 113, 134, 283, 297, 316, 333, 348, 387, 471, 474, 480, 482], "keyboardinterrupt": [23, 66, 98, 99, 113, 134, 138, 156, 212, 283, 316, 333, 387, 406, 419, 437, 442, 449, 466, 467, 468, 469, 478, 479, 480, 482], "pyerr_setinterrupt": [23, 55], "simul": [23, 66, 88, 90, 91, 99, 104, 113, 125, 132, 135, 176, 233, 235, 299, 318, 333, 343, 347, 362, 383, 401, 462, 463, 471, 476], "arriv": [23, 113, 192, 242, 244, 283, 318, 333, 338, 341, 365, 441, 461], "pyerr_setinterruptex": [23, 55, 471], "signum": [23, 82, 113, 125, 213, 293, 333, 482], "sig_dfl": [23, 66, 113, 333, 348, 482], "sig_ign": [23, 66, 113, 333, 348, 482], "outsid": [23, 57, 83, 88, 91, 93, 98, 99, 102, 103, 108, 125, 131, 138, 150, 157, 162, 165, 169, 175, 176, 182, 185, 195, 198, 204, 207, 212, 244, 246, 262, 299, 313, 314, 319, 325, 332, 337, 341, 344, 345, 347, 357, 361, 364, 365, 366, 375, 383, 385, 412, 414, 421, 426, 427, 434, 435, 439, 464, 465, 468, 474, 478, 479, 480, 481, 482], "pysignal_setwakeupfd": [23, 467], "fd": [23, 24, 66, 82, 125, 129, 132, 142, 176, 214, 221, 258, 282, 293, 309, 328, 329, 332, 333, 337, 360, 382, 383, 467, 482], "whenev": [23, 50, 59, 61, 64, 71, 76, 83, 91, 92, 93, 98, 99, 108, 118, 132, 176, 185, 189, 206, 224, 226, 246, 252, 255, 258, 267, 269, 271, 283, 292, 299, 314, 328, 333, 340, 341, 344, 352, 361, 375, 383, 387, 388, 412, 424, 427, 431, 463, 464, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 482], "disabl": [23, 28, 32, 33, 34, 41, 55, 61, 66, 71, 92, 98, 99, 102, 108, 110, 116, 118, 125, 134, 144, 151, 163, 166, 174, 176, 184, 185, 189, 192, 200, 213, 217, 222, 224, 225, 226, 241, 255, 258, 262, 267, 268, 269, 283, 288, 292, 293, 297, 299, 308, 315, 319, 320, 327, 328, 331, 333, 334, 335, 337, 339, 340, 341, 344, 352, 361, 375, 383, 385, 387, 388, 394, 399, 401, 404, 412, 424, 427, 431, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "featur": [23, 32, 33, 48, 52, 59, 61, 64, 66, 73, 76, 77, 82, 83, 85, 88, 90, 91, 92, 93, 98, 99, 102, 105, 108, 111, 118, 143, 147, 151, 152, 154, 157, 165, 166, 171, 175, 176, 178, 179, 180, 182, 186, 192, 193, 207, 209, 212, 224, 225, 235, 242, 246, 249, 250, 257, 262, 267, 270, 283, 292, 293, 297, 299, 302, 319, 324, 335, 340, 341, 343, 344, 347, 348, 350, 352, 357, 361, 364, 368, 379, 383, 387, 388, 394, 399, 401, 406, 408, 409, 410, 413, 414, 415, 421, 425, 427, 429, 431, 433, 434, 435, 454, 455, 460, 461, 462, 463, 464, 465, 467, 469, 470, 474, 482, 483], "set_wakeup_fd": [23, 66, 333, 467, 477, 479, 482], "socket": [23, 66, 78, 85, 93, 94, 96, 98, 102, 105, 123, 126, 129, 130, 142, 157, 169, 170, 186, 206, 211, 212, 222, 234, 241, 244, 246, 247, 254, 256, 257, 258, 259, 260, 267, 268, 269, 283, 284, 288, 293, 296, 305, 307, 322, 328, 329, 333, 335, 338, 342, 350, 357, 358, 368, 401, 406, 412, 427, 438, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 482], "pyerr_newexcept": [23, 55, 71, 466, 468, 474], "classnam": [23, 83, 120, 160, 368, 374, 388, 389, 426, 439], "__module__": [23, 27, 61, 86, 91, 92, 159, 196, 210, 224, 225, 255, 279, 361, 427, 464, 471, 477, 478, 482], "dot": [23, 30, 44, 61, 66, 74, 76, 85, 88, 91, 95, 98, 99, 102, 108, 120, 192, 221, 224, 230, 242, 246, 249, 250, 259, 261, 262, 264, 266, 267, 268, 271, 276, 288, 296, 302, 313, 319, 323, 332, 337, 344, 352, 357, 359, 368, 376, 383, 387, 388, 389, 419, 421, 422, 426, 427, 431, 433, 435, 439, 446, 454, 467, 470, 471, 477, 482], "pyerr_newexceptionwithdoc": [23, 55, 468, 474], "docstr": [23, 27, 33, 34, 44, 56, 58, 61, 64, 66, 73, 82, 85, 88, 99, 120, 155, 159, 186, 221, 224, 225, 246, 255, 297, 313, 361, 377, 384, 385, 387, 406, 426, 427, 434, 435, 439, 440, 450, 454, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 476, 477, 478, 479, 480, 481, 482], "pyexception_gettraceback": [23, 55], "ex": [23, 33, 41, 99, 320, 337, 344, 418, 430, 454, 466, 477, 478, 481, 482], "pyexception_getcontext": [23, 55], "__context__": [23, 66, 212, 315, 380, 435, 469, 475, 482], "pyexception_setcontext": [23, 55], "pyexception_getcaus": [23, 55], "__cause__": [23, 66, 190, 212, 315, 380, 435, 469, 482], "pyexception_setcaus": [23, 55], "__suppress_context__": [23, 66, 212, 315, 380, 435], "pyunicodedecodeerror_cr": [23, 55], "pyunicodedecodeerror_getencod": [23, 55], "pyunicodeencodeerror_getencod": [23, 55], "pyunicodedecodeerror_getobject": [23, 55], "pyunicodeencodeerror_getobject": [23, 55], "pyunicodetranslateerror_getobject": [23, 55], "pyunicodedecodeerror_getstart": [23, 55], "pyunicodeencodeerror_getstart": [23, 55], "pyunicodetranslateerror_getstart": [23, 55], "pyunicodedecodeerror_setstart": [23, 55], "pyunicodeencodeerror_setstart": [23, 55], "pyunicodetranslateerror_setstart": [23, 55], "pyunicodedecodeerror_getend": [23, 55], "pyunicodeencodeerror_getend": [23, 55], "pyunicodetranslateerror_getend": [23, 55], "pyunicodedecodeerror_setend": [23, 55], "pyunicodeencodeerror_setend": [23, 55], "pyunicodetranslateerror_setend": [23, 55], "pyunicodedecodeerror_getreason": [23, 55], "pyunicodeencodeerror_getreason": [23, 55], "pyunicodetranslateerror_getreason": [23, 55], "pyunicodedecodeerror_setreason": [23, 55], "pyunicodeencodeerror_setreason": [23, 55], "pyunicodetranslateerror_setreason": [23, 55], "core": [23, 28, 33, 57, 66, 71, 74, 98, 101, 102, 116, 125, 162, 165, 166, 204, 234, 250, 251, 254, 261, 266, 269, 292, 293, 300, 308, 313, 322, 333, 344, 361, 364, 368, 384, 388, 398, 409, 412, 424, 425, 427, 435, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 480, 481, 483], "track": [23, 28, 34, 41, 61, 66, 83, 92, 98, 101, 102, 125, 151, 157, 166, 168, 180, 184, 185, 186, 192, 226, 254, 269, 275, 283, 284, 292, 293, 296, 299, 319, 328, 352, 364, 365, 368, 370, 387, 388, 394, 409, 461, 462, 465, 468, 470, 474, 476, 477, 478, 479, 480, 481, 482], "depth": [23, 89, 98, 120, 162, 166, 176, 178, 183, 190, 195, 204, 212, 234, 270, 299, 307, 321, 340, 344, 352, 357, 361, 374, 387, 411, 412, 461, 462, 463, 477, 478, 479, 482], "use_stackcheck": [23, 57, 482], "pyos_checkstack": [23, 55, 57, 482], "reach": [23, 24, 34, 50, 64, 71, 73, 82, 83, 93, 99, 102, 106, 125, 136, 144, 149, 153, 158, 224, 241, 258, 261, 267, 270, 293, 297, 313, 314, 328, 331, 337, 338, 340, 344, 348, 380, 394, 412, 414, 423, 426, 427, 429, 431, 435, 460, 461, 462, 463, 464, 466, 467, 468, 474, 476, 477, 479, 480, 482], "recursionerror": [23, 66, 120, 212, 262, 299, 307, 352, 442, 477, 478, 482], "concaten": [23, 51, 52, 66, 74, 102, 118, 119, 149, 151, 156, 157, 186, 190, 224, 233, 234, 267, 270, 271, 293, 294, 296, 297, 314, 319, 331, 335, 337, 341, 344, 345, 357, 380, 385, 423, 427, 429, 442, 445, 448, 460, 464, 465, 471, 482], "tp_repr": [23, 61, 73], "protect": [23, 32, 71, 73, 74, 99, 138, 166, 175, 176, 180, 222, 229, 234, 235, 247, 258, 270, 278, 283, 307, 324, 331, 338, 341, 342, 388, 399, 420, 427, 454, 463, 466, 472, 477, 482], "cycl": [23, 28, 59, 61, 66, 71, 74, 76, 83, 85, 93, 95, 97, 99, 108, 112, 138, 209, 223, 226, 231, 246, 255, 261, 284, 352, 361, 364, 375, 401, 426, 427, 435, 462, 464, 466, 467, 468, 474, 476, 480, 481, 482, 483], "facilit": [23, 88, 246, 268, 319, 320, 335, 399, 476, 479, 482], "reprlib": [23, 66, 181, 254, 451, 469, 482], "recursive_repr": [23, 66, 181, 321, 474, 482], "py_reprent": [23, 55], "detect": [23, 28, 33, 34, 41, 57, 61, 66, 71, 73, 74, 83, 88, 91, 93, 102, 103, 106, 110, 114, 132, 139, 140, 157, 160, 174, 176, 180, 182, 185, 187, 190, 193, 202, 205, 212, 231, 246, 250, 254, 264, 271, 275, 292, 293, 294, 295, 296, 299, 307, 314, 320, 321, 331, 333, 335, 337, 340, 344, 352, 357, 361, 363, 364, 377, 381, 387, 388, 394, 402, 406, 426, 427, 428, 429, 434, 436, 454, 455, 460, 461, 462, 463, 464, 467, 468, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482], "typic": [23, 32, 33, 34, 44, 48, 55, 56, 59, 61, 71, 75, 83, 88, 91, 92, 97, 98, 99, 101, 106, 108, 112, 118, 120, 121, 125, 138, 149, 151, 157, 166, 172, 185, 189, 192, 195, 202, 204, 217, 222, 224, 225, 227, 229, 244, 250, 251, 252, 253, 255, 258, 266, 267, 268, 269, 271, 275, 276, 281, 283, 292, 293, 297, 299, 306, 307, 308, 320, 324, 332, 334, 341, 343, 344, 345, 347, 348, 352, 354, 357, 358, 364, 365, 366, 368, 370, 375, 384, 385, 387, 388, 394, 397, 398, 399, 404, 406, 409, 410, 412, 413, 414, 415, 420, 422, 427, 429, 431, 454, 460, 464, 465, 468, 469, 472, 474, 476, 477, 479, 480, 482], "py_reprleav": [23, 55], "pyexc_": 23, "complet": [23, 32, 33, 34, 41, 55, 57, 62, 64, 66, 71, 73, 74, 75, 76, 85, 88, 90, 92, 93, 97, 99, 102, 103, 108, 115, 118, 125, 132, 135, 136, 138, 140, 150, 151, 154, 155, 156, 157, 158, 162, 165, 166, 168, 176, 180, 182, 185, 189, 192, 193, 195, 201, 202, 204, 205, 206, 207, 210, 212, 214, 222, 229, 231, 232, 234, 235, 239, 244, 249, 254, 255, 259, 260, 261, 262, 267, 268, 269, 271, 272, 276, 281, 283, 284, 292, 293, 295, 297, 299, 308, 316, 319, 322, 331, 332, 334, 337, 338, 340, 341, 342, 344, 348, 352, 353, 357, 360, 361, 362, 364, 367, 368, 374, 375, 377, 379, 380, 383, 385, 387, 389, 393, 394, 400, 406, 407, 409, 410, 412, 415, 426, 427, 428, 429, 431, 432, 433, 444, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyexc_baseexcept": [23, 55], "baseexcept": [23, 66, 126, 165, 212, 267, 352, 431, 435, 442, 449, 466, 467, 469, 472, 479, 480, 482], "pyexc_arithmeticerror": [23, 55], "arithmeticerror": [23, 66, 185, 212, 449], "pyexc_assertionerror": [23, 55], "assertionerror": [23, 66, 190, 212, 283, 361, 387, 388, 389, 406, 435, 449, 472, 481, 482], "pyexc_attributeerror": [23, 55, 73, 74], "attributeerror": [23, 48, 56, 66, 86, 91, 99, 151, 168, 175, 180, 212, 224, 225, 250, 255, 261, 268, 283, 299, 302, 319, 333, 344, 361, 366, 384, 387, 388, 389, 409, 410, 426, 427, 429, 435, 449, 455, 461, 463, 468, 472, 474, 475, 476, 477, 479, 482], "pyexc_blockingioerror": [23, 55], "blockingioerror": [23, 66, 116, 139, 211, 212, 258, 293, 341, 426, 449, 475, 482], "pyexc_brokenpipeerror": [23, 55], "brokenpipeerror": [23, 66, 136, 211, 212, 333, 449, 475, 482], "buffererror": [23, 66, 212, 299, 449, 482], "pyexc_childprocesserror": [23, 55], "childprocesserror": [23, 66, 211, 212, 449, 475, 482], "pyexc_connectionabortederror": [23, 55], "connectionabortederror": [23, 66, 211, 212, 449, 475], "pyexc_connectionerror": [23, 55], "connectionerror": [23, 66, 212, 241, 442, 449, 475, 477], "pyexc_connectionrefusederror": [23, 55], "connectionrefusederror": [23, 66, 211, 212, 449, 475], "pyexc_connectionreseterror": [23, 55], "connectionreseterror": [23, 66, 136, 211, 212, 241, 449, 475, 482], "pyexc_eoferror": [23, 55], "eoferror": [23, 24, 40, 66, 119, 126, 149, 153, 156, 212, 222, 224, 233, 270, 274, 283, 299, 335, 358, 449, 469], "pyexc_fileexistserror": [23, 55], "fileexistserror": [23, 66, 199, 211, 212, 224, 258, 293, 296, 311, 332, 357, 421, 449, 475, 476, 482], "pyexc_filenotfounderror": [23, 55], "filenotfounderror": [23, 66, 140, 168, 211, 212, 253, 286, 293, 296, 320, 442, 449, 475, 477, 482], "pyexc_floatingpointerror": [23, 55], "floatingpointerror": [23, 66, 212, 449], "pyexc_generatorexit": [23, 55], "generatorexit": [23, 66, 93, 212, 427, 429, 449, 466, 467, 482], "pyexc_importerror": [23, 55, 97], "pyexc_indentationerror": [23, 55], "indentationerror": [23, 66, 84, 212, 449, 461, 482], "pyexc_indexerror": [23, 55], "indexerror": [23, 36, 37, 46, 58, 66, 157, 159, 175, 195, 212, 235, 261, 283, 299, 318, 319, 344, 345, 380, 388, 427, 429, 435, 448, 449, 461, 474, 482], "pyexc_interruptederror": [23, 55], "interruptederror": [23, 66, 211, 212, 224, 293, 328, 333, 337, 449, 475, 477, 482], "pyexc_isadirectoryerror": [23, 55], "isadirectoryerror": [23, 66, 211, 212, 293, 449, 475, 482], "pyexc_keyerror": [23, 34, 55], "pyexc_keyboardinterrupt": [23, 55], "pyexc_lookuperror": [23, 55], "pyexc_modulenotfounderror": [23, 55], "modulenotfounderror": [23, 66, 212, 250, 431, 478, 479, 482], "pyexc_nameerror": [23, 55], "nameerror": [23, 66, 175, 212, 249, 250, 297, 428, 429, 435, 442, 448, 449, 461, 462, 463, 466, 482], "pyexc_notadirectoryerror": [23, 55], "notadirectoryerror": [23, 66, 211, 212, 293, 449, 475, 482], "pyexc_notimplementederror": [23, 55], "notimplementederror": [23, 66, 121, 132, 167, 182, 199, 212, 225, 242, 249, 250, 267, 283, 293, 296, 318, 341, 385, 404, 421, 449, 476, 478, 482], "pyexc_oserror": [23, 55], "pyexc_overflowerror": [23, 55], "overflowerror": [23, 25, 38, 46, 66, 113, 156, 158, 182, 185, 192, 212, 224, 275, 304, 337, 340, 344, 364, 365, 427, 449, 463, 464, 467, 468, 470, 471, 475, 476, 482], "pyexc_permissionerror": [23, 55], "permissionerror": [23, 66, 211, 212, 250, 293, 322, 339, 359, 361, 449, 475, 478, 482], "pyexc_processlookuperror": [23, 55], "processlookuperror": [23, 66, 211, 212, 322, 449, 475], "pyexc_recursionerror": [23, 55, 477], "pyexc_referenceerror": [23, 55], "referenceerror": [23, 66, 212, 449, 462, 463], "runtimeerror": [23, 66, 93, 103, 113, 119, 125, 126, 131, 136, 137, 138, 165, 168, 169, 212, 217, 224, 258, 261, 283, 293, 296, 319, 335, 344, 348, 352, 361, 364, 385, 405, 421, 427, 429, 435, 442, 449, 464, 465, 466, 468, 475, 477, 478, 479, 480, 482], "pyexc_stopasynciter": [23, 55], "stopasynciter": [23, 66, 85, 190, 212, 224, 388, 426, 427, 429, 435, 482], "pyexc_stopiter": [23, 55], "stopiter": [23, 61, 66, 73, 85, 93, 111, 159, 190, 212, 224, 261, 274, 283, 344, 388, 427, 429, 435, 439, 449, 463, 464, 466, 467, 471, 478, 479, 482], "pyexc_syntaxerror": [23, 55, 430], "pyexc_systemexit": [23, 55], "pyexc_taberror": [23, 55], "taberror": [23, 66, 84, 212, 434, 449, 461], "pyexc_timeouterror": [23, 55], "timeouterror": [23, 66, 126, 138, 163, 165, 211, 212, 283, 335, 337, 449, 471, 475, 482], "pyexc_unboundlocalerror": [23, 55], "unboundlocalerror": [23, 66, 190, 212, 428, 449, 461, 482], "pyexc_unicodedecodeerror": [23, 55], "pyexc_unicodeencodeerror": [23, 55], "pyexc_unicodeerror": [23, 55], "pyexc_unicodetranslateerror": [23, 55], "pyexc_valueerror": [23, 55, 71, 468], "pyexc_zerodivisionerror": [23, 55, 71], "zerodivisionerror": [23, 66, 90, 99, 182, 185, 212, 220, 283, 333, 340, 429, 435, 442, 449, 450, 464, 470, 472, 474, 477, 481, 482], "3151": [23, 66, 212, 322, 328, 337, 464, 483], "alias": [23, 66, 92, 118, 150, 157, 186, 194, 210, 212, 229, 266, 297, 303, 337, 375, 383, 386, 434, 439, 455, 460, 462, 464, 467, 471, 472, 473, 474, 475, 476, 478, 481, 482], "pyexc_environmenterror": [23, 55], "pyexc_ioerror": [23, 55, 71], "separ": [23, 32, 33, 53, 55, 57, 61, 62, 66, 75, 77, 82, 83, 86, 88, 90, 92, 97, 98, 99, 101, 102, 104, 105, 108, 110, 114, 118, 124, 126, 131, 135, 138, 146, 150, 151, 154, 155, 157, 165, 166, 168, 174, 175, 176, 177, 182, 185, 189, 192, 195, 200, 201, 204, 207, 210, 212, 219, 224, 225, 229, 244, 246, 247, 250, 252, 258, 259, 262, 266, 267, 268, 269, 270, 271, 276, 283, 288, 292, 293, 294, 296, 297, 302, 303, 307, 313, 314, 319, 324, 331, 334, 335, 337, 338, 340, 341, 343, 344, 345, 348, 360, 361, 363, 364, 366, 367, 368, 371, 379, 387, 388, 389, 393, 394, 397, 399, 401, 402, 406, 421, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 440, 451, 454, 455, 460, 461, 463, 465, 466, 467, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "preprocessor": [23, 41, 55, 66, 88, 108, 331, 420, 457, 461, 468, 482], "ms_window": [23, 33], "pyexc_byteswarn": [23, 55], "byteswarn": [23, 33, 66, 212, 399, 449, 479, 482], "pyexc_deprecationwarn": [23, 55], "deprecationwarn": [23, 66, 102, 110, 167, 187, 212, 319, 347, 361, 387, 399, 427, 431, 434, 449, 454, 462, 464, 468, 471, 472, 473, 474, 476, 477, 478, 480, 482, 483], "pyexc_futurewarn": [23, 55], "futurewarn": [23, 66, 212, 319, 399, 449, 464, 465, 468, 479, 482], "pyexc_importwarn": [23, 55], "importwarn": [23, 66, 187, 212, 387, 399, 431, 449, 466, 471, 473, 478, 482], "pyexc_pendingdeprecationwarn": [23, 55], "pendingdeprecationwarn": [23, 66, 110, 187, 212, 387, 399, 449, 464, 467, 468, 477, 478, 479, 480, 481, 482], "pyexc_resourcewarn": [23, 55], "runtimewarn": [23, 44, 66, 124, 212, 337, 352, 387, 399, 449, 474, 480], "pyexc_syntaxwarn": [23, 55], "syntaxwarn": [23, 66, 212, 361, 399, 434, 449, 464, 472, 478, 480, 482], "pyexc_unicodewarn": [23, 55], "unicodewarn": [23, 66, 212, 399, 449, 466, 474], "pyexc_userwarn": [23, 55], "userwarn": [23, 66, 212, 228, 361, 399, 449, 482], "minim": [24, 44, 60, 66, 71, 74, 82, 88, 90, 99, 112, 120, 141, 151, 185, 189, 192, 213, 234, 239, 247, 250, 254, 259, 273, 292, 299, 305, 319, 324, 333, 337, 339, 361, 363, 378, 385, 394, 408, 436, 455, 460, 461, 466, 478, 482], "emul": [24, 32, 66, 74, 76, 77, 83, 91, 108, 139, 156, 158, 176, 180, 188, 192, 214, 249, 258, 266, 271, 283, 292, 293, 294, 302, 309, 320, 332, 333, 348, 352, 358, 426, 463, 464, 467, 474, 475, 478, 480, 482], "reli": [24, 55, 71, 74, 86, 91, 92, 97, 99, 101, 103, 132, 140, 151, 160, 180, 182, 224, 249, 250, 255, 267, 276, 283, 292, 293, 299, 302, 330, 332, 352, 361, 363, 364, 365, 387, 389, 398, 420, 426, 427, 428, 431, 460, 461, 464, 465, 466, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482], "io": [24, 32, 33, 66, 69, 77, 83, 85, 101, 108, 116, 122, 123, 124, 125, 135, 138, 149, 157, 163, 168, 186, 187, 189, 195, 212, 214, 217, 218, 224, 233, 234, 241, 244, 251, 253, 254, 262, 270, 271, 288, 293, 299, 308, 309, 338, 341, 344, 348, 352, 357, 359, 361, 377, 378, 385, 388, 398, 406, 410, 420, 421, 424, 427, 454, 458, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 481, 482, 483], "unbuff": [24, 32, 258, 348, 352, 454, 482], "meant": [24, 34, 48, 59, 98, 99, 101, 112, 120, 132, 138, 141, 157, 165, 212, 229, 235, 239, 250, 308, 337, 361, 368, 385, 394, 421, 430, 460, 466, 467, 468, 471, 474, 475, 476, 477, 479, 480, 482], "advis": [24, 98, 168, 226, 247, 283, 288, 293, 364, 399, 424, 425, 427, 429, 474, 480, 482], "pyfile_fromfd": [24, 55], "newlin": [24, 66, 77, 85, 99, 102, 116, 118, 120, 143, 146, 149, 156, 158, 174, 176, 189, 192, 195, 206, 217, 224, 233, 246, 250, 258, 262, 264, 265, 267, 269, 270, 271, 278, 288, 296, 299, 307, 319, 331, 337, 338, 344, 348, 355, 359, 363, 365, 366, 376, 377, 380, 381, 393, 399, 410, 418, 420, 421, 426, 430, 434, 436, 448, 450, 451, 454, 462, 465, 466, 467, 468, 469, 472, 476, 478, 479, 480, 482, 483], "closefd": [24, 187, 224, 258, 283, 469, 482], "open": [24, 32, 33, 40, 64, 66, 71, 76, 82, 85, 88, 90, 93, 98, 101, 102, 105, 108, 110, 115, 116, 117, 118, 132, 135, 139, 140, 142, 145, 148, 149, 151, 155, 157, 159, 166, 168, 174, 176, 182, 183, 187, 188, 189, 199, 206, 207, 211, 212, 213, 214, 217, 218, 222, 224, 229, 233, 234, 239, 241, 242, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 264, 265, 266, 267, 268, 269, 270, 271, 276, 277, 278, 280, 281, 283, 288, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 309, 313, 314, 320, 322, 326, 328, 330, 331, 333, 335, 336, 337, 340, 341, 342, 343, 344, 348, 349, 350, 352, 355, 357, 358, 359, 361, 364, 367, 368, 374, 375, 377, 378, 380, 383, 385, 388, 389, 394, 396, 400, 402, 404, 406, 410, 412, 413, 415, 418, 420, 421, 424, 425, 427, 434, 437, 439, 442, 445, 449, 450, 451, 454, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "comprehens": [24, 66, 82, 83, 85, 88, 97, 110, 149, 190, 234, 255, 264, 299, 344, 368, 428, 429, 430, 434, 439, 444, 456, 465, 466, 468, 469, 471, 472, 475, 476, 477, 479, 480, 481, 482, 483], "pleas": [24, 32, 34, 69, 86, 88, 97, 98, 99, 101, 102, 103, 106, 118, 127, 136, 151, 166, 175, 183, 222, 229, 241, 247, 250, 258, 267, 268, 269, 288, 293, 305, 319, 322, 332, 335, 337, 340, 341, 348, 352, 357, 360, 383, 385, 388, 406, 425, 427, 429, 433, 440, 442, 456, 460, 461, 462, 464, 466, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482], "mix": [24, 32, 41, 66, 87, 99, 101, 108, 114, 121, 139, 166, 182, 185, 203, 204, 205, 206, 210, 217, 224, 227, 259, 283, 289, 295, 319, 338, 341, 343, 344, 354, 361, 385, 393, 426, 427, 434, 463, 464, 466, 467, 468, 469, 470, 472, 474, 475, 476, 482], "unexpect": [24, 28, 98, 99, 169, 192, 204, 207, 222, 229, 267, 275, 288, 318, 319, 322, 333, 335, 337, 341, 343, 361, 387, 389, 394, 399, 421, 426, 427, 429, 434, 439, 442, 460, 463, 468, 471, 475, 477, 479, 480, 481, 482], "pyobject_asfiledescriptor": [24, 55], "fileno": [24, 57, 66, 82, 99, 116, 139, 142, 149, 163, 187, 214, 217, 218, 234, 241, 256, 258, 278, 283, 293, 295, 328, 329, 333, 337, 338, 341, 350, 358, 359, 360, 368, 463, 466, 476, 482], "pyfile_getlin": [24, 55], "readlin": [24, 33, 64, 66, 77, 82, 93, 97, 105, 116, 125, 135, 136, 140, 143, 145, 151, 155, 157, 169, 187, 189, 203, 206, 212, 217, 222, 224, 247, 254, 256, 258, 268, 278, 293, 296, 297, 299, 315, 331, 338, 362, 368, 377, 381, 388, 394, 398, 420, 421, 427, 437, 439, 442, 445, 446, 447, 454, 455, 461, 462, 463, 464, 466, 467, 468, 471, 474, 476, 479, 482], "greater": [24, 32, 33, 37, 38, 44, 54, 61, 62, 66, 74, 90, 98, 99, 104, 105, 113, 132, 138, 144, 146, 147, 154, 176, 182, 185, 189, 195, 207, 208, 210, 225, 229, 241, 247, 259, 264, 267, 269, 275, 293, 297, 322, 334, 335, 343, 344, 352, 361, 364, 375, 376, 381, 383, 387, 406, 409, 423, 427, 434, 435, 461, 463, 464, 465, 466, 477, 478, 479, 481, 482], "partial": [24, 33, 66, 86, 88, 93, 105, 106, 112, 116, 121, 125, 126, 128, 135, 176, 180, 186, 196, 205, 206, 223, 224, 247, 254, 255, 256, 261, 269, 270, 273, 275, 284, 322, 324, 337, 338, 344, 348, 408, 412, 426, 461, 464, 465, 467, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 482, 483], "less": [24, 25, 33, 34, 38, 54, 57, 62, 66, 71, 74, 83, 88, 97, 99, 102, 104, 105, 108, 110, 111, 132, 138, 147, 149, 151, 153, 157, 165, 176, 182, 185, 186, 192, 195, 214, 225, 227, 231, 233, 234, 243, 246, 251, 258, 259, 261, 264, 267, 270, 275, 278, 283, 284, 293, 297, 299, 300, 307, 308, 319, 332, 333, 337, 340, 341, 343, 344, 345, 348, 352, 361, 364, 365, 368, 374, 375, 376, 380, 387, 394, 399, 409, 426, 427, 429, 435, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482], "pyfile_setopencodehook": [24, 258], "py_opencodehookfunct": 24, "open_cod": [24, 66, 116, 258, 482], "userdata": [24, 57], "pyunicodeobject": [24, 61, 62, 88, 471, 472], "hook": [24, 30, 31, 33, 57, 64, 66, 85, 91, 95, 97, 113, 142, 155, 175, 182, 187, 207, 215, 217, 224, 241, 249, 254, 280, 302, 307, 308, 315, 331, 340, 344, 352, 362, 364, 381, 384, 388, 398, 399, 422, 427, 429, 435, 437, 454, 455, 461, 463, 466, 468, 471, 472, 475, 477, 478, 479, 481, 482, 483], "avoid": [24, 32, 33, 34, 41, 59, 61, 66, 70, 71, 73, 74, 76, 83, 86, 88, 90, 93, 97, 98, 101, 102, 103, 104, 105, 111, 114, 118, 125, 131, 132, 136, 137, 138, 147, 157, 159, 165, 166, 168, 175, 176, 182, 185, 209, 212, 214, 224, 226, 235, 241, 244, 247, 255, 259, 262, 265, 268, 269, 271, 275, 278, 283, 284, 289, 292, 293, 299, 314, 319, 321, 332, 333, 337, 340, 342, 343, 344, 348, 352, 357, 361, 363, 364, 365, 366, 368, 374, 384, 385, 387, 389, 401, 405, 408, 409, 410, 412, 416, 426, 427, 429, 430, 431, 434, 435, 455, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "frozen": [24, 30, 33, 66, 175, 224, 249, 250, 283, 302, 315, 352, 381, 385, 427, 431, 454, 460, 464, 476, 479, 482], "py_initi": [24, 30, 32, 33, 34, 55, 57, 70, 71, 84, 460, 471, 474, 479, 481, 482], "audit": [24, 32, 57, 66, 73, 95, 119, 142, 175, 184, 209, 214, 222, 224, 226, 230, 241, 247, 258, 274, 278, 282, 288, 293, 296, 297, 299, 305, 309, 315, 322, 332, 333, 335, 337, 340, 344, 348, 352, 355, 358, 384, 394, 402, 404, 427, 435, 449, 454, 464, 471, 482], "setopencodehook": [24, 142], "pyfile_writeobject": [24, 55], "py_print_raw": [24, 48], "pyfile_writestr": [24, 55], "pyfloatobject": [25, 74], "pyfloat_typ": [25, 55], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 55], "pyfloat_fromdoubl": [25, 55], "pyfloat_asdoubl": [25, 55, 480], "pyfloat": 25, "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 55, 467], "structseq": [25, 468, 482], "minimum": [25, 33, 34, 41, 55, 74, 88, 91, 99, 101, 109, 113, 132, 141, 154, 175, 176, 185, 196, 257, 261, 275, 293, 328, 334, 341, 343, 344, 345, 352, 361, 364, 371, 375, 383, 387, 388, 455, 463, 464, 467, 471, 474, 475, 476, 478, 479, 482], "thin": [25, 57, 66, 139, 225, 275, 287, 306, 333, 367, 368, 455, 472, 482], "pyfloat_getmax": [25, 55, 467], "dbl_max": [25, 352], "pyfloat_getmin": [25, 55, 467], "dbl_min": [25, 352], "routin": [25, 32, 40, 61, 66, 70, 71, 73, 84, 91, 104, 105, 141, 172, 176, 183, 194, 214, 250, 254, 258, 266, 281, 293, 308, 341, 365, 390, 403, 406, 464, 465, 479, 482], "suffix": [25, 62, 66, 69, 88, 99, 108, 110, 117, 175, 199, 218, 244, 247, 249, 250, 259, 267, 268, 269, 276, 293, 296, 319, 330, 335, 344, 359, 394, 421, 429, 430, 455, 460, 461, 463, 472, 474, 475, 480, 482], "appear": [25, 32, 33, 44, 56, 57, 64, 66, 73, 74, 82, 88, 90, 92, 93, 96, 98, 99, 100, 101, 102, 108, 110, 118, 120, 132, 151, 157, 162, 166, 174, 175, 176, 180, 185, 189, 190, 192, 195, 198, 201, 202, 204, 212, 221, 224, 226, 229, 234, 246, 247, 250, 255, 259, 266, 268, 269, 271, 272, 281, 283, 297, 308, 314, 317, 319, 331, 333, 335, 337, 340, 344, 345, 357, 363, 368, 375, 385, 388, 389, 394, 399, 401, 406, 407, 409, 412, 415, 419, 425, 426, 427, 429, 430, 431, 433, 434, 435, 454, 460, 462, 464, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482], "ieee": [25, 154, 185, 262, 275, 294, 347, 361, 429, 443, 465, 467, 470, 472, 474, 478, 479, 482], "754": [25, 154, 185, 262, 275, 347, 361, 429, 443, 465, 467, 470, 472, 474, 478, 479, 482], "binary16": [25, 347], "half": [25, 90, 99, 132, 174, 176, 182, 220, 225, 275, 295, 328, 344, 347, 434, 468, 471, 473, 478, 482], "binary32": [25, 347], "binary64": [25, 347], "inf": [25, 66, 154, 185, 224, 262, 275, 290, 344, 345, 352, 467, 468, 472, 474, 477, 478, 482], "nan": [25, 66, 83, 154, 185, 224, 275, 285, 290, 343, 344, 345, 352, 429, 441, 465, 467, 468, 471, 472, 474, 475, 477, 478, 482], "thing": [25, 32, 34, 61, 66, 70, 71, 73, 74, 75, 82, 83, 88, 90, 92, 93, 96, 98, 99, 101, 103, 105, 106, 108, 118, 132, 139, 156, 158, 166, 168, 175, 180, 192, 199, 205, 214, 222, 224, 226, 243, 250, 258, 267, 268, 275, 283, 292, 299, 319, 334, 341, 346, 352, 364, 366, 368, 373, 375, 385, 386, 387, 388, 389, 394, 399, 402, 429, 430, 433, 460, 461, 462, 463, 464, 465, 466, 469, 475, 476, 480, 482], "larger": [25, 34, 41, 54, 74, 83, 90, 91, 115, 132, 139, 151, 154, 175, 176, 182, 185, 214, 224, 234, 258, 259, 275, 278, 284, 293, 306, 319, 322, 340, 341, 343, 344, 345, 361, 364, 366, 421, 423, 427, 429, 434, 460, 461, 463, 464, 466, 468, 469, 472, 473, 474, 477, 478, 479, 480, 481, 482], "smaller": [25, 41, 62, 90, 91, 102, 103, 132, 175, 182, 185, 189, 190, 225, 259, 270, 275, 293, 299, 308, 343, 345, 347, 354, 368, 375, 381, 383, 393, 410, 423, 427, 429, 434, 454, 462, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 480, 482], "accident": [25, 32, 99, 101, 185, 189, 192, 212, 385, 435, 462, 464, 467, 477, 482], "ala": 25, "le": [25, 66, 93, 105, 106, 157, 199, 223, 291, 462, 470, 475], "littl": [25, 30, 62, 66, 88, 93, 98, 99, 102, 103, 105, 141, 146, 153, 157, 175, 176, 177, 185, 189, 190, 192, 229, 242, 268, 283, 292, 295, 319, 333, 337, 344, 347, 352, 366, 381, 389, 397, 404, 425, 440, 451, 461, 462, 463, 467, 471, 472, 474, 475, 476, 482], "expon": [25, 87, 185, 224, 275, 318, 344, 345, 347, 352, 377, 434, 465, 467, 475, 480, 482], "py_big_endian": 25, "processor": [25, 34, 55, 66, 71, 91, 103, 105, 116, 139, 165, 283, 288, 292, 295, 303, 314, 322, 337, 394, 408, 414, 427, 461, 465, 466, 480, 481, 482], "ok": [25, 66, 71, 106, 116, 176, 188, 192, 222, 240, 241, 242, 244, 247, 289, 292, 335, 341, 372, 374, 385, 387, 406, 440, 465, 472, 474, 482], "infin": [25, 102, 154, 185, 224, 262, 275, 344, 345, 352, 465, 467, 474, 482], "pyfloat_pack2": [25, 472, 482], "pyfloat_pack4": [25, 472, 482], "pyfloat_pack8": [25, 472, 482], "refus": [25, 34, 103, 211, 212, 272, 288, 330, 335, 337, 341, 421, 482], "pyfloat_unpack2": [25, 472, 482], "pyfloat_unpack4": [25, 472, 482], "pyfloat_unpack8": [25, 472, 482], "pyeval_getfram": [26, 32, 51, 55, 482], "pythreadstate_getfram": [26, 32, 51, 55, 472, 481, 482], "reflect": [26, 31, 63, 66, 83, 87, 95, 99, 115, 118, 120, 174, 176, 182, 192, 209, 214, 224, 225, 246, 250, 255, 284, 292, 293, 308, 320, 337, 340, 341, 344, 347, 352, 368, 383, 384, 400, 404, 410, 420, 426, 427, 454, 467, 472, 473, 474, 475, 477, 480, 481, 482], "pyframe_getback": [26, 472, 481, 482], "pyframe_getbuiltin": [26, 472, 482], "f_builtin": [26, 255, 427, 472, 482], "pyframe_getcod": [26, 55, 472, 481, 482], "pyframe_getgener": [26, 472, 482], "pyframe_getglob": [26, 472, 482], "f_global": [26, 255, 427, 472, 482], "pyframe_getlasti": [26, 472, 482], "f_lasti": [26, 190, 255, 427, 464, 471, 472, 482], "pyframe_getloc": [26, 472, 482], "f_local": [26, 255, 384, 427, 472, 482], "pyfunctionobject": [27, 473, 482], "pyfunction_typ": [27, 482], "functiontyp": [27, 66, 120, 181, 384, 471, 482], "pyfunction_check": 27, "pyfunction_new": 27, "annot": [27, 66, 83, 85, 88, 94, 111, 120, 180, 186, 190, 225, 247, 254, 255, 266, 300, 315, 351, 361, 379, 385, 401, 406, 426, 427, 429, 430, 444, 469, 471, 472, 474, 475, 477, 480, 481, 482], "closur": [27, 56, 64, 74, 125, 168, 169, 190, 224, 250, 255, 292, 344, 359, 427, 475, 478, 482], "co_qualnam": [27, 255, 427, 482], "pyfunction_newwithqualnam": 27, "pyfunction_getcod": 27, "pyfunction_getglob": 27, "pyfunction_getmodul": 27, "pyfunction_getdefault": 27, "pyfunction_setdefault": 27, "pyfunction_setvectorcal": [27, 473, 482], "func": [27, 32, 33, 34, 43, 51, 57, 61, 64, 66, 76, 83, 85, 86, 91, 93, 97, 118, 120, 125, 138, 140, 144, 159, 165, 175, 176, 211, 223, 225, 255, 261, 266, 267, 283, 292, 308, 314, 332, 340, 344, 352, 361, 364, 366, 368, 379, 385, 387, 401, 419, 426, 442, 465, 467, 469, 474, 475, 478, 480, 482], "warn": [27, 31, 32, 33, 34, 50, 56, 57, 66, 74, 76, 83, 88, 95, 98, 99, 101, 103, 110, 116, 124, 125, 134, 138, 180, 181, 186, 187, 212, 250, 254, 258, 268, 269, 272, 273, 283, 298, 308, 311, 315, 319, 333, 339, 340, 341, 348, 352, 368, 372, 385, 387, 396, 406, 413, 414, 415, 427, 428, 431, 434, 449, 450, 451, 454, 455, 461, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 476, 477, 480, 481, 482, 483], "preserv": [27, 34, 41, 66, 71, 82, 88, 93, 99, 103, 104, 110, 118, 165, 166, 174, 182, 185, 189, 192, 195, 200, 202, 204, 207, 212, 230, 239, 255, 261, 262, 268, 269, 292, 293, 297, 299, 300, 331, 332, 340, 344, 357, 361, 367, 378, 384, 385, 387, 388, 401, 410, 412, 423, 426, 427, 429, 434, 460, 461, 462, 463, 464, 466, 467, 468, 472, 474, 475, 476, 477, 479, 480, 481, 482], "unalt": [27, 482], "pyfunction_getclosur": 27, "pyfunction_setclosur": 27, "pyfunction_getannot": [27, 482], "pyfunction_setannot": 27, "involv": [28, 41, 44, 61, 71, 74, 88, 97, 120, 154, 166, 168, 176, 185, 192, 212, 225, 226, 231, 242, 283, 289, 292, 299, 308, 332, 340, 341, 344, 347, 361, 380, 389, 394, 411, 427, 429, 430, 431, 435, 461, 468, 471, 476, 477, 479, 480, 482], "circular": [28, 32, 34, 71, 74, 83, 249, 262, 383, 389, 427, 462, 477, 479, 482], "atom": [28, 66, 82, 226, 283, 293, 316, 319, 337, 344, 364, 365, 430, 432, 468, 469, 472, 475, 482], "tp_flag": [28, 59, 61, 73, 74, 97, 190, 467, 481, 482], "py_tpflags_have_gc": [28, 49, 59, 61, 66, 74, 97, 472, 482], "tp_travers": [28, 59, 61, 73, 74, 97, 226, 472, 481, 482], "tp_clear": [28, 44, 61, 73, 74, 97, 482], "conform": [28, 55, 61, 66, 92, 98, 125, 146, 151, 166, 181, 182, 185, 200, 202, 207, 208, 210, 244, 246, 249, 250, 252, 256, 267, 273, 296, 299, 314, 352, 385, 393, 410, 412, 418, 424, 425, 427, 455, 465, 469, 470, 471, 475, 476, 478, 479, 480, 481, 482], "pyobject_gc_new": [28, 61, 463, 480], "pyobject_gc_newvar": [28, 61, 463, 480], "pyobject_gc_track": [28, 55, 463, 482], "pyobject_gc_untrack": [28, 55, 61, 73, 74, 463, 472, 482], "pyobject_gc_del": [28, 55, 61, 463, 480, 482], "pytype_readi": [28, 44, 55, 59, 61, 73, 74, 97, 472, 482], "indirect": [28, 48, 56, 62, 71, 83, 91, 101, 175, 212, 250, 293, 307, 314, 348, 352, 401, 425, 427, 428, 429, 431, 469, 476, 479, 480, 482], "pytype_fromspecwithbas": [28, 55, 59, 61, 471, 482], "pytype_fromspec": [28, 44, 55, 56, 59, 61, 74, 97, 480, 481, 482], "popul": [28, 34, 44, 66, 98, 99, 112, 118, 120, 182, 190, 206, 250, 267, 284, 299, 318, 324, 343, 344, 350, 384, 399, 406, 410, 412, 427, 431, 460, 464, 471, 472, 478, 482], "child": [28, 32, 57, 83, 98, 99, 118, 120, 131, 132, 136, 159, 211, 212, 226, 247, 253, 278, 283, 293, 296, 309, 314, 322, 328, 333, 337, 338, 348, 368, 375, 388, 389, 409, 410, 412, 421, 427, 461, 465, 466, 467, 468, 473, 474, 475, 476, 478, 479, 480, 481, 482], "analog": [28, 37, 62, 73, 83, 99, 185, 255, 267, 268, 275, 283, 299, 363, 383, 427, 429, 431, 463, 465, 466, 468, 474, 476, 480, 482], "pyobject_gc_res": 28, "becom": [28, 32, 33, 34, 61, 62, 64, 71, 76, 82, 83, 90, 91, 92, 93, 95, 97, 99, 101, 102, 103, 104, 105, 110, 111, 112, 125, 132, 138, 139, 141, 157, 174, 176, 192, 195, 201, 204, 210, 224, 231, 235, 246, 255, 258, 261, 283, 292, 293, 294, 297, 299, 308, 311, 318, 319, 328, 329, 331, 333, 341, 344, 345, 348, 352, 364, 368, 375, 385, 388, 389, 394, 401, 421, 426, 427, 428, 429, 435, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "near": [28, 88, 98, 101, 103, 139, 154, 166, 183, 185, 189, 246, 269, 275, 283, 293, 297, 343, 347, 383, 427, 435, 463, 464, 466, 467, 468, 469, 472, 474, 477, 482], "pyobject_is_gc": [28, 61, 73, 481, 482], "pyobject_gc_istrack": [28, 55, 481, 482], "gc": [28, 44, 59, 61, 66, 71, 74, 76, 83, 85, 95, 142, 254, 255, 315, 352, 361, 366, 381, 401, 410, 427, 451, 455, 461, 464, 466, 468, 473, 474, 482], "is_track": [28, 66, 226, 315, 468], "pyobject_gc_isfin": [28, 55, 481, 482], "final": [28, 31, 33, 34, 44, 48, 57, 59, 61, 66, 71, 72, 74, 82, 83, 88, 92, 93, 98, 99, 101, 102, 103, 104, 108, 111, 113, 114, 120, 125, 132, 134, 137, 138, 141, 144, 157, 175, 180, 181, 185, 186, 187, 189, 190, 192, 196, 202, 210, 212, 226, 234, 244, 249, 250, 255, 258, 261, 265, 267, 271, 283, 292, 293, 296, 297, 299, 308, 311, 314, 315, 319, 332, 334, 338, 340, 341, 343, 345, 352, 353, 357, 359, 360, 361, 363, 364, 366, 368, 375, 377, 380, 381, 383, 384, 385, 387, 388, 389, 398, 399, 405, 408, 413, 421, 427, 428, 429, 430, 431, 434, 435, 442, 445, 455, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 477, 478, 479, 480, 481, 483], "is_fin": [28, 32, 66, 226, 315, 352, 449, 477, 480, 481, 482], "again": [28, 32, 44, 61, 71, 73, 74, 82, 83, 90, 92, 93, 99, 102, 103, 104, 105, 106, 120, 125, 132, 146, 147, 151, 166, 169, 175, 176, 182, 187, 199, 211, 213, 220, 225, 231, 242, 246, 249, 261, 267, 269, 275, 278, 282, 283, 292, 293, 295, 296, 297, 299, 308, 313, 328, 331, 333, 335, 340, 341, 344, 348, 352, 359, 361, 364, 368, 374, 375, 383, 386, 388, 389, 394, 399, 408, 412, 413, 423, 427, 429, 431, 434, 435, 440, 442, 460, 461, 463, 464, 467, 469, 471, 474, 475, 479, 480, 482], "_pyobject_gc_track": [28, 480, 482], "_pyobject_gc_untrack": [28, 480, 482], "visitproc": [28, 55, 61, 74, 481], "visitor": [28, 120], "travers": [28, 30, 44, 50, 61, 66, 74, 93, 97, 110, 120, 162, 183, 195, 204, 212, 252, 253, 267, 280, 293, 302, 344, 375, 387, 388, 406, 411, 412, 421, 431, 435, 461, 463, 464, 466, 467, 468, 472, 473, 477, 480, 481, 482], "traverseproc": [28, 44, 55, 61, 73, 74], "visit": [28, 61, 66, 74, 93, 97, 120, 182, 226, 264, 293, 296, 313, 332, 342, 414, 460, 461, 463, 464, 467, 475, 481, 482], "simplifi": [28, 30, 32, 41, 64, 91, 93, 102, 106, 121, 123, 127, 134, 157, 168, 182, 183, 196, 200, 215, 225, 250, 255, 283, 319, 337, 338, 343, 374, 375, 377, 385, 401, 409, 426, 434, 460, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "py_visit": [28, 61, 74, 97, 481], "my_travers": 28, "noddi": 28, "foo": [28, 76, 77, 83, 84, 85, 86, 87, 88, 92, 98, 99, 100, 102, 106, 108, 114, 118, 120, 151, 155, 166, 175, 192, 195, 199, 227, 242, 246, 249, 250, 255, 262, 266, 267, 268, 272, 283, 288, 291, 292, 293, 294, 296, 299, 302, 308, 311, 319, 334, 340, 344, 357, 361, 385, 387, 388, 389, 404, 406, 410, 411, 412, 421, 422, 426, 429, 431, 434, 435, 440, 461, 463, 464, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 482], "bar": [28, 83, 85, 88, 92, 98, 99, 100, 102, 118, 120, 155, 166, 175, 176, 199, 227, 242, 246, 249, 250, 262, 267, 268, 283, 288, 291, 292, 293, 294, 296, 297, 302, 308, 311, 313, 319, 334, 340, 344, 357, 361, 368, 373, 375, 385, 387, 388, 389, 406, 421, 422, 424, 426, 431, 433, 434, 435, 440, 461, 467, 472, 482], "inquiri": [28, 44, 55, 61, 73, 74, 258, 387], "drop": [28, 61, 66, 68, 74, 82, 83, 91, 92, 98, 101, 105, 111, 132, 159, 192, 210, 211, 224, 249, 250, 254, 261, 269, 283, 305, 321, 325, 341, 344, 352, 363, 367, 368, 375, 387, 393, 461, 462, 463, 465, 466, 467, 469, 474, 476, 477, 482], "pygc_collect": [28, 55, 481, 482], "uncondit": [28, 113, 246, 283, 288, 293, 296, 297, 334, 387, 389, 427, 434, 454, 468, 469, 474, 475, 476, 477, 479, 481, 482], "unreach": [28, 34, 211, 226, 385, 427, 479, 481, 482], "pygc_en": [28, 55, 471, 482], "pygc_dis": [28, 55, 471, 482], "pygc_isen": [28, 55, 471, 482], "queri": [28, 31, 66, 82, 88, 93, 99, 102, 105, 116, 132, 135, 151, 157, 168, 204, 218, 229, 244, 250, 251, 255, 281, 296, 298, 305, 328, 350, 357, 361, 368, 374, 375, 385, 393, 394, 404, 406, 409, 418, 431, 454, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "isen": [28, 66, 226, 315], "pygen_new": 29, "pygen_newwithqualnam": 29, "pygenobject": 29, "pygen_typ": 29, "pygen_check": 29, "pygen_checkexact": 29, "pyimport_importmodul": [30, 55, 71, 77, 462, 467, 469, 471, 482], "pyimport_importmoduleex": [30, 475], "submodul": [30, 61, 66, 85, 114, 157, 183, 192, 224, 237, 249, 250, 302, 324, 341, 379, 385, 408, 421, 435, 454, 466, 469, 470, 471, 476, 479, 482], "fromlist": [30, 66, 119, 181, 190, 224, 249, 250, 482], "top": [30, 32, 34, 41, 66, 71, 82, 83, 88, 90, 92, 93, 95, 98, 99, 101, 102, 106, 108, 113, 116, 118, 120, 134, 138, 142, 151, 152, 157, 166, 169, 175, 176, 178, 184, 188, 189, 190, 192, 206, 212, 224, 225, 229, 235, 242, 246, 247, 250, 251, 254, 255, 256, 257, 258, 266, 276, 285, 293, 296, 299, 302, 304, 305, 308, 312, 313, 314, 315, 324, 341, 342, 351, 352, 361, 364, 367, 368, 370, 374, 375, 383, 384, 387, 388, 398, 412, 418, 419, 421, 426, 428, 431, 432, 434, 435, 439, 449, 450, 454, 461, 462, 463, 464, 466, 467, 468, 469, 471, 474, 475, 476, 478, 479, 480, 481, 482], "unfortun": [30, 82, 86, 90, 93, 97, 99, 100, 101, 102, 106, 151, 157, 283, 305, 308, 330, 337, 341, 357, 368, 389, 460, 462, 465, 467, 470, 478, 481], "fact": [30, 32, 34, 62, 71, 76, 83, 93, 98, 102, 103, 106, 108, 125, 150, 166, 175, 185, 192, 205, 209, 222, 224, 231, 250, 279, 292, 299, 308, 344, 357, 368, 383, 385, 394, 406, 420, 427, 429, 431, 433, 460, 461, 462, 467, 472, 475, 476, 477, 482], "subpackag": [30, 61, 85, 250, 281, 352, 387, 421, 431, 449, 461], "__all__": [30, 224, 246, 279, 319, 361, 435, 449, 462, 478, 482], "absolut": [30, 32, 33, 46, 61, 66, 70, 74, 82, 98, 104, 108, 111, 120, 125, 138, 141, 144, 151, 153, 154, 155, 185, 190, 192, 212, 218, 224, 229, 230, 250, 251, 257, 258, 268, 269, 270, 275, 278, 292, 293, 294, 296, 324, 331, 332, 335, 340, 344, 345, 352, 353, 357, 365, 368, 371, 381, 383, 393, 398, 404, 414, 421, 423, 424, 429, 431, 435, 445, 449, 454, 455, 460, 461, 465, 467, 468, 469, 472, 474, 475, 476, 477, 479, 481, 482, 483], "pyimport_importmodulenoblock": [30, 55, 467, 469, 475, 482], "deprec": [30, 32, 34, 41, 48, 52, 54, 55, 57, 61, 62, 66, 73, 91, 92, 108, 110, 114, 118, 120, 125, 138, 139, 149, 151, 157, 165, 172, 175, 185, 186, 197, 198, 204, 206, 212, 217, 222, 224, 233, 241, 242, 247, 249, 250, 252, 255, 259, 267, 272, 275, 292, 293, 298, 299, 304, 305, 314, 322, 324, 327, 328, 332, 335, 337, 341, 344, 346, 361, 364, 365, 368, 370, 383, 387, 394, 396, 398, 399, 402, 412, 427, 429, 431, 460, 462, 463, 466, 469, 482, 483], "alia": [30, 39, 57, 66, 73, 83, 85, 92, 99, 101, 120, 125, 132, 136, 153, 157, 160, 165, 175, 177, 182, 190, 194, 196, 204, 212, 217, 227, 229, 242, 250, 254, 255, 258, 264, 283, 287, 292, 293, 297, 314, 322, 328, 329, 333, 337, 340, 341, 348, 358, 364, 375, 383, 385, 402, 404, 405, 406, 418, 421, 427, 428, 455, 469, 471, 472, 473, 476, 478, 479, 481, 482], "switch": [30, 32, 34, 62, 66, 73, 82, 88, 97, 103, 105, 106, 108, 109, 110, 127, 132, 136, 157, 192, 209, 224, 229, 235, 242, 244, 246, 292, 305, 319, 322, 324, 344, 345, 352, 383, 388, 411, 431, 440, 449, 454, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 479, 481, 482], "behaviour": [30, 32, 34, 48, 61, 66, 82, 83, 93, 98, 99, 102, 108, 125, 165, 168, 188, 212, 214, 216, 242, 255, 258, 266, 267, 268, 269, 283, 292, 293, 296, 299, 311, 319, 320, 328, 331, 333, 337, 338, 340, 343, 344, 348, 352, 363, 383, 388, 389, 393, 394, 399, 412, 415, 418, 420, 427, 429, 431, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 475, 476, 478, 479, 482], "best": [30, 34, 53, 62, 66, 82, 85, 88, 90, 93, 94, 97, 98, 99, 101, 108, 141, 173, 182, 185, 187, 189, 192, 193, 194, 204, 212, 222, 224, 225, 229, 233, 234, 235, 241, 246, 247, 249, 255, 267, 270, 283, 288, 292, 293, 305, 307, 308, 331, 335, 337, 340, 344, 352, 357, 366, 368, 374, 383, 385, 388, 402, 424, 427, 431, 455, 460, 461, 465, 466, 469, 471, 472, 473, 474, 476, 477, 478, 481, 482], "__import__": [30, 66, 190, 224, 249, 250, 254, 268, 280, 299, 427, 431, 449, 467, 470, 475, 478, 481, 482], "incomplet": [30, 62, 66, 116, 146, 156, 157, 179, 182, 239, 246, 249, 261, 268, 285, 314, 328, 421, 423, 464, 465, 468, 469, 475, 476, 482], "pyimport_importmodulelevelobject": [30, 55], "pyimport_importmodulelevel": [30, 55, 475], "pyimport_import": [30, 55, 70, 467], "higher": [30, 32, 54, 66, 82, 93, 95, 98, 99, 103, 113, 125, 139, 140, 146, 165, 168, 176, 185, 190, 201, 203, 222, 223, 229, 241, 254, 258, 261, 267, 268, 269, 270, 279, 281, 282, 283, 288, 293, 299, 305, 325, 332, 337, 340, 341, 344, 350, 352, 357, 358, 364, 366, 381, 385, 412, 423, 462, 463, 466, 467, 471, 472, 474, 475, 476, 479, 482], "__builtins__": [30, 148, 224, 255, 428, 449, 469, 471, 482], "instal": [30, 32, 33, 34, 41, 55, 66, 68, 70, 74, 77, 82, 83, 90, 95, 101, 106, 109, 110, 112, 131, 134, 144, 162, 183, 187, 191, 211, 213, 229, 245, 246, 250, 251, 254, 261, 267, 269, 276, 277, 311, 315, 320, 333, 334, 340, 341, 344, 348, 350, 352, 353, 360, 368, 374, 381, 383, 387, 394, 398, 399, 404, 406, 420, 425, 431, 447, 452, 454, 457, 458, 459, 462, 463, 464, 466, 467, 468, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483], "environ": [30, 32, 33, 34, 41, 61, 64, 66, 68, 82, 83, 85, 91, 98, 99, 101, 105, 106, 108, 109, 116, 125, 151, 157, 159, 162, 175, 176, 181, 185, 187, 191, 209, 213, 224, 227, 229, 234, 246, 249, 251, 254, 256, 258, 266, 268, 280, 292, 294, 295, 297, 299, 306, 308, 309, 311, 313, 315, 324, 325, 327, 332, 337, 338, 341, 344, 348, 352, 354, 357, 361, 365, 368, 379, 381, 387, 388, 390, 394, 399, 402, 404, 409, 419, 427, 428, 431, 436, 437, 447, 452, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 476, 479, 480, 481, 482, 483], "pyimport_reloadmodul": [30, 55, 482], "reload": [30, 66, 83, 110, 242, 246, 249, 250, 280, 350, 352, 361, 381, 431, 449, 464, 469, 476, 479, 482], "pyimport_addmoduleobject": [30, 55], "pyimport_addmodul": [30, 55, 71], "pyimport_execcodemodul": [30, 55], "compil": [30, 32, 33, 34, 41, 44, 55, 56, 57, 61, 64, 66, 72, 74, 75, 82, 83, 84, 88, 93, 99, 100, 105, 110, 111, 142, 156, 166, 175, 179, 181, 183, 190, 192, 212, 219, 224, 229, 234, 241, 246, 247, 249, 250, 254, 255, 264, 268, 270, 274, 306, 308, 314, 319, 320, 324, 331, 340, 341, 344, 345, 347, 352, 354, 358, 361, 362, 366, 380, 384, 385, 386, 387, 399, 409, 420, 421, 427, 428, 431, 433, 434, 435, 439, 449, 454, 457, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "danger": [30, 34, 57, 83, 283, 292, 293, 296, 341, 388, 433, 462, 465, 466], "know": [30, 32, 34, 57, 61, 71, 74, 75, 83, 88, 91, 93, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108, 115, 118, 131, 138, 139, 151, 154, 160, 174, 175, 177, 180, 189, 192, 194, 199, 200, 207, 222, 235, 242, 244, 250, 259, 266, 268, 269, 271, 272, 283, 292, 293, 330, 332, 337, 341, 343, 344, 352, 368, 375, 381, 383, 388, 394, 399, 404, 406, 415, 418, 420, 421, 424, 431, 433, 435, 460, 461, 462, 463, 466, 467, 468, 475, 476, 478, 482], "unknown": [30, 32, 62, 66, 86, 92, 102, 120, 138, 141, 189, 192, 195, 198, 200, 201, 207, 210, 224, 234, 244, 256, 276, 288, 292, 293, 304, 307, 319, 342, 343, 352, 364, 365, 381, 385, 394, 397, 415, 440, 455, 463, 464, 468, 472, 474, 478, 479, 482], "probabl": [30, 32, 34, 54, 71, 73, 77, 83, 88, 90, 96, 99, 101, 102, 103, 108, 139, 143, 157, 158, 175, 182, 192, 199, 212, 229, 235, 283, 293, 297, 300, 308, 318, 335, 337, 338, 340, 341, 343, 352, 366, 388, 394, 397, 404, 405, 406, 414, 433, 455, 461, 462, 463, 464, 466, 467, 469, 471, 472, 474, 475, 482], "damag": [30, 299, 357, 385, 425], "author": [30, 68, 71, 75, 93, 97, 98, 100, 102, 106, 108, 109, 125, 157, 159, 192, 212, 234, 251, 269, 289, 293, 307, 340, 341, 387, 394, 406, 418, 425, 452, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 476, 477, 482], "__spec__": [30, 66, 181, 250, 252, 324, 384, 449, 471, 473, 476, 478, 479, 482], "__loader__": [30, 44, 66, 181, 224, 249, 250, 265, 324, 384, 431, 449, 471, 475, 476, 479, 482], "spec": [30, 44, 59, 66, 85, 104, 210, 235, 238, 243, 250, 255, 262, 324, 341, 352, 375, 388, 389, 393, 418, 422, 464, 476, 477, 478, 479, 480, 481, 482], "loader": [30, 66, 85, 168, 175, 192, 249, 250, 251, 252, 253, 265, 280, 302, 361, 381, 384, 387, 412, 420, 422, 464, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482], "sourcefileload": [30, 66, 250, 280, 475, 478, 482], "__file__": [30, 44, 66, 87, 99, 112, 187, 192, 224, 234, 250, 255, 265, 302, 323, 324, 361, 381, 387, 422, 427, 431, 455, 464, 476, 478, 479, 481, 482], "co_filenam": [30, 255, 427, 468, 482], "applic": [30, 31, 32, 33, 34, 61, 62, 66, 70, 71, 73, 75, 76, 83, 93, 97, 98, 100, 101, 102, 103, 105, 106, 108, 112, 118, 120, 125, 132, 136, 138, 139, 140, 143, 145, 151, 156, 166, 168, 174, 176, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 207, 212, 213, 224, 225, 226, 234, 235, 241, 245, 258, 262, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 281, 282, 283, 292, 293, 294, 296, 299, 305, 308, 314, 319, 325, 331, 332, 333, 337, 340, 341, 343, 344, 346, 347, 348, 353, 361, 363, 364, 365, 367, 368, 370, 371, 374, 375, 381, 383, 385, 386, 387, 393, 394, 399, 401, 404, 406, 409, 410, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 433, 435, 454, 457, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483], "__cached__": [30, 66, 224, 250, 324, 431, 471, 473, 474, 476, 482], "pyimport_execcodemoduleex": [30, 55], "pyimport_execcodemodulewithpathnam": [30, 55], "modulespec": [30, 44, 66, 85, 250, 280, 302, 324, 352, 384, 431], "pathnam": [30, 66, 82, 142, 151, 175, 218, 219, 222, 249, 254, 267, 269, 279, 281, 293, 296, 306, 331, 342, 352, 357, 368, 374, 396, 421, 422, 427, 431, 454, 472, 474, 477, 482], "pyimport_execcodemoduleobject": [30, 55, 482], "cpathnam": 30, "figur": [30, 71, 74, 90, 92, 93, 101, 102, 105, 118, 185, 192, 292, 308, 337, 357, 461, 462, 463, 464, 465, 466, 467, 468, 472, 475, 482], "imp": [30, 66, 254, 350, 352, 431, 469, 471, 474, 475, 476, 478, 482], "source_from_cach": [30, 66, 249, 250, 280, 350, 474, 476, 478], "pyimport_getmagicnumb": [30, 55, 475], "magic": [30, 66, 83, 85, 87, 88, 113, 166, 175, 186, 192, 199, 229, 249, 250, 308, 341, 349, 361, 364, 365, 385, 389, 421, 424, 461, 462, 464, 472, 476, 477, 478, 479, 482], "pyc": [30, 32, 33, 66, 84, 85, 162, 249, 250, 274, 281, 299, 311, 332, 344, 352, 361, 381, 421, 422, 427, 431, 449, 454, 460, 462, 464, 465, 467, 468, 472, 476, 477, 481, 482, 483], "four": [30, 56, 62, 86, 87, 90, 91, 92, 102, 105, 118, 131, 157, 176, 189, 190, 206, 210, 222, 238, 241, 246, 255, 259, 267, 268, 271, 278, 281, 292, 314, 318, 334, 337, 338, 340, 344, 345, 368, 375, 383, 388, 434, 440, 460, 467, 470, 474, 481, 482], "pyimport_getmagictag": [30, 55], "tag": [30, 55, 59, 61, 66, 73, 95, 102, 120, 151, 189, 239, 247, 249, 250, 269, 273, 278, 293, 299, 314, 346, 352, 355, 367, 394, 409, 412, 416, 418, 460, 461, 466, 468, 472, 476, 477, 480, 482, 483], "3147": [30, 66, 83, 162, 249, 250, 311, 324, 361, 431, 449, 475, 483], "keep": [30, 32, 34, 38, 61, 66, 71, 83, 88, 92, 97, 99, 101, 102, 105, 108, 118, 120, 127, 138, 139, 144, 147, 151, 157, 159, 168, 175, 176, 178, 180, 181, 185, 190, 192, 195, 210, 213, 225, 226, 233, 235, 242, 246, 252, 255, 258, 261, 271, 278, 292, 293, 296, 299, 305, 307, 319, 338, 344, 348, 352, 361, 368, 383, 387, 388, 394, 401, 406, 409, 414, 426, 427, 431, 435, 462, 464, 465, 466, 467, 468, 474, 476, 479, 482], "mind": [30, 83, 88, 90, 97, 99, 101, 102, 118, 120, 147, 175, 185, 199, 252, 269, 283, 292, 343, 385, 394, 412, 431, 463, 465, 474], "cache_tag": [30, 249, 250, 352, 475, 482], "authorit": [30, 106, 423, 482], "pyimport_getmoduledict": [30, 55, 482], "administr": [30, 32, 57, 98, 108, 151, 155, 247, 287, 288, 293, 334, 337, 365, 406, 428, 460, 465, 475, 480, 481, 482], "pyimport_getmodul": [30, 55, 479, 482], "pyimport_getimport": [30, 55], "finder": [30, 66, 85, 192, 250, 251, 270, 279, 280, 302, 352, 432, 458, 460, 465, 467, 471, 475, 476, 482], "pkg": [30, 250, 302, 420, 435, 454, 455, 459, 461, 462, 466, 468, 471, 472, 473, 480, 482], "__path__": [30, 66, 85, 249, 250, 302, 312, 352, 449, 476, 478, 479, 482], "fetch": [30, 66, 88, 91, 93, 106, 112, 166, 174, 207, 247, 256, 257, 261, 281, 283, 293, 299, 307, 315, 333, 337, 340, 341, 350, 388, 389, 394, 395, 413, 418, 451, 465, 472, 474, 475, 482], "path_importer_cach": [30, 66, 249, 250, 302, 315, 352, 431, 449, 464, 472, 475, 476, 477, 479, 482], "path_hook": [30, 66, 85, 142, 250, 280, 302, 315, 352, 431, 435, 449, 464, 475, 476, 482], "until": [30, 32, 33, 34, 57, 61, 64, 70, 71, 74, 77, 82, 83, 86, 88, 90, 93, 98, 99, 102, 103, 108, 113, 118, 120, 125, 128, 132, 133, 136, 137, 138, 139, 143, 151, 153, 159, 165, 176, 182, 185, 206, 210, 213, 217, 222, 224, 225, 229, 231, 234, 235, 239, 241, 242, 246, 249, 250, 258, 261, 265, 267, 269, 270, 283, 292, 293, 295, 297, 299, 305, 308, 316, 320, 325, 328, 329, 331, 333, 337, 338, 339, 340, 341, 344, 347, 348, 358, 360, 361, 364, 366, 368, 380, 388, 394, 399, 401, 402, 404, 406, 407, 411, 414, 415, 423, 426, 427, 435, 451, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482], "our": [30, 34, 71, 74, 83, 87, 88, 91, 92, 99, 102, 103, 105, 106, 112, 133, 166, 168, 175, 195, 199, 204, 259, 292, 299, 319, 335, 338, 340, 341, 361, 385, 388, 389, 401, 406, 412, 421, 463, 466, 467, 471, 482], "find": [30, 32, 59, 61, 66, 70, 71, 73, 75, 88, 91, 92, 93, 95, 96, 98, 99, 101, 102, 105, 108, 110, 111, 116, 118, 120, 141, 147, 151, 157, 159, 176, 180, 182, 186, 189, 190, 192, 194, 195, 196, 198, 204, 206, 210, 212, 220, 224, 225, 229, 230, 234, 235, 245, 246, 249, 250, 251, 254, 255, 258, 262, 266, 267, 273, 278, 280, 286, 292, 293, 299, 300, 302, 313, 323, 332, 337, 341, 343, 344, 348, 352, 353, 361, 362, 364, 366, 368, 385, 387, 388, 389, 393, 394, 401, 409, 420, 428, 429, 431, 433, 435, 440, 441, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482], "pyimport_importfrozenmoduleobject": [30, 55, 482], "misnom": 30, "pyimport_importfrozenmodul": [30, 55, 482], "_frozen": [30, 175, 472, 482], "freez": [30, 66, 79, 83, 165, 225, 226, 246, 288, 315, 452, 479, 482], "tool": [30, 32, 34, 55, 66, 68, 70, 77, 83, 85, 88, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 105, 108, 110, 111, 112, 116, 120, 125, 136, 147, 155, 168, 175, 186, 192, 193, 203, 218, 222, 224, 225, 229, 230, 251, 254, 255, 256, 261, 262, 264, 299, 307, 321, 331, 333, 343, 352, 367, 377, 379, 381, 383, 385, 387, 398, 412, 420, 421, 427, 435, 455, 456, 460, 461, 462, 463, 464, 466, 467, 469, 470, 472, 474, 475, 476, 477, 478, 481, 483], "distribut": [30, 32, 34, 55, 64, 66, 68, 69, 71, 73, 82, 83, 112, 125, 185, 208, 229, 234, 250, 271, 275, 280, 283, 284, 290, 302, 340, 343, 354, 357, 368, 376, 383, 387, 413, 420, 425, 455, 460, 461, 462, 464, 466, 467, 469, 471, 472, 474, 477, 478, 479, 480, 481, 482], "is_packag": [30, 66, 250, 280, 422, 472, 482], "pyimport_frozenmodul": [30, 33, 175, 482], "record": [30, 59, 66, 73, 76, 90, 91, 92, 93, 98, 99, 100, 104, 105, 108, 111, 120, 147, 155, 159, 162, 174, 175, 176, 177, 183, 184, 185, 186, 196, 202, 211, 251, 255, 259, 267, 269, 271, 279, 292, 293, 295, 299, 308, 309, 340, 342, 344, 347, 350, 361, 383, 384, 385, 387, 388, 389, 399, 421, 431, 439, 444, 461, 464, 465, 466, 467, 468, 474, 475, 476, 477, 480, 482], "play": [30, 34, 66, 74, 87, 103, 175, 185, 254, 295, 318, 341, 383, 387, 403, 427, 439, 469, 482], "trick": [30, 66, 76, 83, 175, 224, 340, 352, 385, 389, 439, 463], "collect": [30, 31, 41, 44, 49, 50, 61, 62, 65, 66, 71, 72, 73, 76, 82, 83, 85, 88, 90, 93, 95, 98, 99, 101, 102, 103, 110, 112, 114, 118, 120, 121, 124, 132, 138, 139, 147, 151, 157, 165, 166, 168, 169, 175, 178, 180, 181, 183, 186, 192, 193, 212, 213, 224, 225, 226, 241, 242, 251, 254, 255, 261, 264, 283, 293, 299, 305, 308, 314, 315, 316, 330, 332, 333, 336, 337, 338, 341, 343, 344, 347, 352, 358, 359, 361, 366, 375, 381, 383, 384, 387, 394, 400, 401, 404, 410, 412, 426, 427, 429, 435, 440, 441, 451, 452, 455, 460, 463, 464, 465, 466, 467, 469, 470, 472, 473, 482, 483], "pyimport_appendinittab": [30, 32, 33, 44, 55, 70, 71, 482], "initfunc": 30, "pyimport_extendinittab": [30, 32, 33, 482], "extend": [30, 32, 34, 41, 44, 61, 66, 71, 72, 73, 74, 76, 78, 80, 82, 90, 92, 99, 102, 106, 116, 118, 119, 120, 122, 132, 139, 143, 150, 154, 155, 157, 159, 160, 166, 167, 168, 175, 176, 181, 182, 189, 190, 191, 192, 195, 204, 206, 212, 224, 225, 229, 244, 246, 248, 249, 258, 261, 262, 271, 273, 275, 276, 278, 280, 282, 299, 302, 303, 308, 314, 320, 328, 332, 335, 337, 341, 344, 350, 352, 357, 359, 365, 375, 377, 383, 385, 387, 394, 400, 401, 408, 409, 412, 419, 427, 428, 429, 431, 435, 440, 441, 460, 462, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483], "_inittab": 30, "emb": [30, 32, 33, 34, 64, 66, 70, 83, 162, 192, 245, 250, 366, 368, 408, 412, 463, 468, 479, 480, 482], "conjunct": [30, 189, 191, 192, 224, 249, 255, 268, 331, 337, 341, 378, 430, 434, 471, 476], "newtab": 30, "sentinel": [30, 36, 56, 66, 71, 73, 74, 83, 88, 99, 163, 180, 186, 224, 261, 269, 283, 389, 463, 475, 479, 482], "fault": [30, 66, 98, 175, 184, 256, 292, 322, 333, 365, 466, 468, 475, 482], "insuffici": [30, 160, 185, 192, 211, 252, 283, 293, 388, 478], "consider": [31, 34, 66, 71, 83, 97, 98, 116, 125, 163, 176, 180, 192, 212, 222, 241, 247, 254, 256, 262, 271, 285, 288, 305, 315, 335, 340, 394, 409, 432, 461, 464, 465, 466, 468, 471, 473, 475, 479, 482], "high": [31, 37, 41, 58, 62, 66, 71, 72, 76, 77, 82, 83, 98, 99, 101, 103, 106, 116, 120, 125, 127, 129, 132, 134, 135, 136, 138, 139, 147, 149, 163, 165, 176, 182, 185, 190, 193, 200, 218, 230, 247, 254, 259, 260, 261, 266, 270, 283, 289, 293, 294, 295, 299, 308, 309, 318, 319, 328, 333, 337, 340, 341, 343, 352, 355, 365, 385, 398, 402, 435, 463, 464, 465, 466, 467, 471, 472, 474, 475, 476, 477, 479, 481, 482], "signal": [31, 32, 33, 48, 57, 61, 66, 90, 93, 97, 99, 100, 102, 113, 129, 131, 132, 134, 136, 140, 141, 142, 165, 175, 176, 184, 186, 187, 192, 212, 241, 254, 257, 258, 260, 261, 267, 268, 275, 283, 290, 292, 293, 297, 299, 309, 319, 322, 328, 329, 331, 337, 340, 341, 345, 348, 352, 361, 364, 365, 370, 385, 394, 412, 414, 418, 429, 431, 454, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 478, 480, 482], "categori": [31, 66, 82, 98, 102, 105, 132, 212, 256, 258, 266, 269, 315, 319, 340, 344, 361, 362, 386, 393, 434, 454, 461, 462, 466, 467, 469, 474, 479, 482], "marshal": [31, 63, 66, 83, 121, 142, 157, 254, 262, 269, 298, 378, 418, 464, 465, 468, 477, 482], "pars": [31, 33, 34, 57, 62, 63, 64, 66, 71, 77, 82, 83, 88, 96, 99, 102, 106, 108, 110, 112, 116, 120, 121, 132, 135, 151, 155, 156, 158, 166, 174, 182, 186, 192, 193, 195, 198, 199, 200, 202, 204, 205, 207, 208, 216, 221, 224, 227, 229, 237, 239, 241, 242, 243, 244, 247, 250, 254, 256, 259, 262, 264, 268, 269, 271, 273, 276, 285, 286, 293, 308, 340, 344, 345, 348, 350, 354, 362, 365, 378, 381, 391, 394, 395, 398, 399, 406, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 429, 430, 434, 435, 436, 442, 445, 449, 454, 461, 462, 463, 464, 465, 466, 467, 472, 473, 475, 476, 477, 478, 480, 482, 483], "abstract": [31, 37, 53, 66, 72, 74, 76, 77, 82, 83, 85, 89, 90, 91, 104, 121, 125, 131, 132, 165, 168, 175, 181, 182, 185, 186, 207, 212, 220, 225, 243, 251, 254, 255, 258, 264, 269, 280, 290, 293, 301, 315, 329, 337, 341, 344, 352, 359, 406, 424, 427, 429, 464, 466, 468, 469, 471, 474, 475, 477, 478, 479, 481, 482, 483], "configur": [31, 34, 41, 57, 61, 62, 66, 70, 71, 83, 88, 90, 93, 95, 97, 100, 102, 113, 116, 125, 131, 135, 169, 171, 175, 181, 183, 185, 188, 210, 216, 221, 222, 234, 244, 246, 247, 250, 254, 266, 267, 269, 271, 272, 292, 293, 305, 306, 307, 314, 315, 320, 323, 327, 331, 335, 337, 340, 341, 352, 353, 360, 361, 364, 367, 368, 371, 372, 373, 374, 375, 378, 387, 388, 389, 394, 398, 399, 404, 406, 410, 411, 412, 416, 418, 425, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483], "wide": [31, 33, 57, 62, 66, 68, 76, 88, 90, 93, 97, 98, 101, 105, 108, 113, 118, 131, 134, 141, 150, 155, 166, 175, 176, 182, 185, 192, 193, 242, 246, 255, 257, 266, 271, 282, 293, 295, 299, 302, 305, 315, 330, 341, 343, 344, 347, 348, 357, 364, 365, 374, 409, 421, 424, 425, 455, 460, 463, 466, 467, 468, 472, 474, 475, 476, 482], "sub": [31, 44, 49, 66, 88, 93, 97, 98, 99, 102, 116, 120, 123, 132, 174, 175, 176, 177, 182, 189, 190, 193, 195, 200, 204, 206, 213, 223, 230, 247, 252, 254, 261, 264, 268, 271, 278, 291, 294, 308, 314, 319, 330, 344, 352, 361, 362, 374, 385, 387, 389, 404, 412, 429, 430, 442, 450, 460, 461, 463, 467, 468, 470, 474, 475, 476, 477, 478, 479, 482], "asynchron": [31, 61, 66, 82, 85, 120, 121, 124, 125, 129, 132, 134, 136, 138, 139, 160, 165, 168, 169, 186, 190, 212, 224, 254, 255, 256, 260, 267, 283, 337, 341, 348, 352, 384, 387, 388, 405, 426, 435, 468, 471, 472, 474, 475, 476, 477, 479, 480, 482], "notif": [31, 65, 66, 329, 399, 404, 414, 461, 468, 473, 480, 482], "trace": [31, 33, 34, 41, 61, 66, 71, 95, 98, 100, 113, 144, 156, 170, 175, 184, 190, 225, 235, 240, 247, 254, 255, 257, 293, 297, 315, 340, 352, 361, 364, 380, 383, 425, 427, 435, 454, 455, 462, 463, 464, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "advanc": [31, 66, 74, 77, 83, 90, 99, 102, 103, 108, 149, 166, 168, 174, 175, 176, 185, 186, 193, 210, 224, 233, 235, 255, 258, 261, 267, 270, 278, 292, 337, 341, 345, 348, 352, 366, 379, 389, 401, 410, 411, 421, 426, 427, 433, 460, 464, 469, 474, 480, 482, 483], "pywidestringlist": [31, 66, 480], "pystatus": [31, 66, 480], "pypreconfig": [31, 32, 41, 66, 473, 480], "preiniti": [31, 41, 57, 66, 266], "pyconfig": [31, 32, 34, 57, 64, 66, 85, 293, 352, 353, 354, 455, 468, 471, 472, 473, 480, 481, 482], "isol": [31, 32, 61, 64, 66, 85, 93, 94, 112, 120, 138, 192, 246, 327, 352, 353, 361, 387, 388, 398, 454, 460, 472, 473, 476, 478, 481, 482], "py_runmain": [31, 66, 480, 482], "py_getargcargv": [31, 66, 482], "privat": [31, 32, 41, 42, 55, 66, 83, 91, 92, 93, 175, 180, 189, 222, 224, 246, 247, 250, 259, 278, 283, 299, 305, 335, 341, 346, 348, 361, 385, 388, 429, 434, 435, 439, 460, 462, 463, 464, 467, 471, 472, 474, 475, 476, 477, 478, 480, 482], "provision": [31, 66, 85, 196, 202, 204, 207, 251, 352, 476, 477, 478, 479, 480, 482], "domain": [31, 66, 95, 98, 125, 145, 165, 184, 193, 202, 207, 208, 211, 229, 234, 242, 243, 247, 266, 268, 269, 283, 285, 287, 335, 337, 338, 341, 346, 352, 381, 393, 397, 454, 464, 466, 475, 476, 477, 478, 479, 482], "custom": [31, 32, 33, 34, 57, 61, 66, 69, 71, 74, 77, 83, 106, 113, 114, 116, 117, 120, 125, 134, 138, 150, 155, 157, 160, 163, 180, 182, 184, 188, 192, 193, 206, 207, 210, 212, 216, 224, 241, 244, 246, 250, 251, 254, 255, 256, 258, 262, 267, 269, 271, 280, 285, 292, 298, 320, 323, 332, 333, 334, 341, 344, 352, 353, 361, 362, 364, 368, 375, 385, 387, 388, 394, 398, 399, 401, 406, 409, 411, 412, 418, 424, 426, 429, 431, 435, 455, 457, 459, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 480, 481, 482], "pymalloc": [31, 33, 66, 352, 454, 455, 462, 467, 468, 474, 476, 478, 480, 482, 483], "tracemalloc": [31, 33, 66, 184, 187, 254, 361, 425, 454, 482], "pyinitfrozenextens": 32, "pymem_setalloc": [32, 33, 41], "pymem_setupdebughook": [32, 41, 187, 478, 482], "pyobject_setarenaalloc": [32, 41], "py_setpath": [32, 55, 353, 460, 472, 480, 482], "py_setprogramnam": [32, 33, 34, 55, 70, 71, 460, 472, 482], "py_setpythonhom": [32, 33, 55, 472, 482], "py_setstandardstreamencod": [32, 33, 472, 476, 482], "pysys_addwarnopt": [32, 55, 57, 472, 479, 482], "pysys_addxopt": [32, 55, 57, 472, 482], "pysys_resetwarnopt": [32, 55, 57, 482], "py_isiniti": [32, 34, 55], "pymem_getalloc": [32, 41], "pyobject_getarenaalloc": [32, 41], "py_getbuildinfo": [32, 55, 466], "py_getcompil": [32, 55], "py_getcopyright": [32, 55], "py_getplatform": [32, 55], "py_getvers": [32, 55], "py_decodelocal": [32, 33, 55, 57, 62, 70, 71, 477, 479, 482], "pymem_rawmalloc": [32, 33, 41, 64, 476, 482], "pymem_rawrealloc": [32, 41, 64, 476], "pymem_rawcalloc": [32, 41, 477, 482], "pymem_rawfre": [32, 41, 57, 70, 71], "py_encodelocal": [32, 55, 57, 62, 477, 479, 482], "py_getpath": [32, 34, 55, 471, 482], "py_getprefix": [32, 34, 55, 471, 482], "py_getexecprefix": [32, 34, 55, 471, 482], "py_getprogramfullpath": [32, 34, 55, 471, 480, 482], "py_getpythonhom": [32, 55, 471, 482], "py_getprogramnam": [32, 55, 471, 480, 482], "pyeval_initthread": [32, 55, 474, 481, 482], "py_byteswarningflag": [32, 473, 479], "bb": [32, 93, 101, 159, 261, 267, 454, 479, 482], "bytes_warn": [32, 33, 352, 473, 474], "py_debugflag": [32, 473], "parser_debug": [32, 33, 473], "parser": [32, 33, 66, 71, 77, 87, 93, 99, 102, 105, 110, 116, 120, 156, 158, 159, 174, 189, 192, 193, 195, 198, 199, 200, 202, 204, 205, 207, 212, 216, 222, 237, 254, 262, 268, 273, 285, 297, 304, 309, 319, 331, 344, 350, 378, 394, 398, 408, 409, 410, 411, 412, 414, 416, 430, 434, 435, 436, 440, 442, 446, 450, 454, 455, 461, 462, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482], "expert": [32, 33, 292, 454], "pythondebug": [32, 33, 454, 455], "py_dontwritebytecodeflag": [32, 473], "write_bytecod": [32, 33, 473], "pythondontwritebytecod": [32, 33, 83, 352, 454, 467], "py_frozenflag": [32, 473], "pathconfig_warn": [32, 33, 473], "_freeze_modul": [32, 482], "frozenmain": 32, "py_hashrandomizationflag": [32, 473], "hash_se": [32, 33, 473], "use_hash_se": [32, 33, 473], "pythonhashse": [32, 33, 427, 454, 475, 482], "secret": [32, 66, 132, 173, 234, 254, 283, 292, 293, 305, 318, 327, 341, 425, 454, 461, 482], "seed": [32, 33, 66, 76, 85, 290, 293, 318, 341, 343, 352, 425, 454, 468, 474, 481, 482], "py_ignoreenvironmentflag": [32, 473, 479, 482], "use_environ": [32, 33, 34, 473, 481], "pythonpath": [32, 33, 34, 69, 84, 108, 151, 352, 353, 361, 431, 449, 454, 458, 460, 476, 482], "pythonhom": [32, 33, 34, 108, 353, 361, 454, 460, 478], "py_inspectflag": [32, 473], "script": [32, 33, 34, 64, 66, 70, 71, 73, 77, 84, 85, 87, 88, 95, 98, 99, 100, 106, 108, 110, 112, 118, 120, 152, 162, 168, 183, 187, 192, 209, 212, 221, 227, 229, 239, 243, 244, 250, 251, 254, 280, 292, 297, 308, 309, 311, 313, 315, 324, 327, 330, 334, 340, 350, 352, 353, 356, 361, 368, 375, 377, 385, 387, 394, 398, 402, 406, 419, 420, 428, 431, 433, 434, 435, 436, 449, 450, 452, 454, 455, 457, 459, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "enter": [32, 33, 34, 66, 77, 82, 83, 84, 88, 90, 93, 95, 103, 105, 134, 139, 144, 151, 155, 156, 158, 163, 168, 176, 188, 224, 246, 258, 282, 292, 293, 297, 312, 325, 335, 340, 341, 344, 352, 358, 364, 368, 374, 383, 387, 399, 426, 427, 428, 436, 440, 442, 451, 454, 463, 464, 466, 474, 475, 476, 479, 480, 482], "stdin": [32, 33, 57, 64, 66, 74, 83, 85, 92, 93, 97, 118, 120, 125, 129, 132, 136, 144, 151, 155, 156, 162, 163, 175, 182, 185, 189, 192, 207, 213, 214, 217, 228, 233, 246, 247, 258, 259, 262, 283, 293, 296, 297, 309, 315, 321, 328, 331, 344, 348, 352, 357, 360, 361, 377, 386, 394, 406, 419, 426, 427, 429, 431, 435, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 454, 455, 462, 463, 464, 465, 467, 468, 469, 471, 473, 475, 476, 477, 478, 479, 481, 482], "pythoninspect": [32, 33, 454, 464], "py_interactiveflag": [32, 473], "py_isolatedflag": [32, 473], "neither": [32, 74, 88, 93, 96, 102, 112, 132, 143, 144, 157, 180, 185, 192, 195, 204, 208, 224, 241, 262, 267, 270, 271, 275, 283, 286, 292, 293, 299, 319, 338, 340, 341, 344, 352, 375, 379, 385, 387, 402, 424, 425, 427, 429, 454, 473, 476, 478, 479, 482], "directori": [32, 33, 34, 66, 71, 73, 74, 76, 77, 82, 83, 84, 87, 88, 91, 93, 95, 99, 105, 108, 110, 112, 116, 136, 151, 152, 162, 166, 168, 183, 188, 189, 192, 199, 209, 211, 212, 218, 219, 222, 224, 229, 230, 244, 246, 247, 249, 250, 251, 252, 253, 254, 271, 279, 283, 286, 292, 294, 296, 297, 302, 306, 310, 311, 312, 313, 320, 324, 327, 331, 334, 340, 341, 342, 348, 350, 352, 353, 354, 356, 357, 359, 361, 367, 374, 379, 383, 387, 394, 398, 401, 402, 406, 420, 421, 422, 424, 425, 431, 442, 450, 454, 455, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483], "site": [32, 33, 66, 83, 93, 105, 106, 108, 166, 209, 224, 242, 243, 250, 251, 254, 259, 267, 293, 302, 315, 335, 352, 353, 354, 394, 398, 413, 429, 431, 437, 449, 452, 454, 455, 460, 461, 466, 468, 469, 475, 476, 477, 482, 483], "py_legacywindowsfsencodingflag": [32, 473, 482], "legacy_windows_fs_encod": [32, 33, 57, 473], "surrogatepass": [32, 33, 157, 454, 476, 478, 482], "pythonlegacywindowsfsencod": [32, 33, 352, 454, 478], "529": [32, 62, 66, 293, 352, 454, 460, 480, 482], "py_legacywindowsstdioflag": [32, 473], "legacy_windows_stdio": [32, 33, 473], "fileio": [32, 33, 66, 116, 118, 224, 258, 468, 476, 482], "windowsconsoleio": [32, 33, 482], "pythonlegacywindowsstdio": [32, 33, 352, 454, 478], "528": [32, 33, 66, 460, 482], "py_nositeflag": [32, 473], "site_import": [32, 33, 473], "entail": [32, 33, 454], "trigger": [32, 33, 41, 61, 66, 74, 88, 91, 93, 95, 101, 138, 168, 176, 185, 188, 195, 204, 209, 212, 225, 250, 255, 283, 284, 286, 292, 293, 333, 334, 340, 344, 352, 368, 370, 387, 388, 393, 399, 408, 418, 427, 454, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 482], "py_nousersitedirectori": [32, 473], "user_site_directori": [32, 33, 473], "pythonnousersit": [32, 33, 334, 454, 467], "py_optimizeflag": [32, 473], "optimization_level": [32, 33, 473], "pythonoptim": [32, 33, 454], "py_quietflag": [32, 473], "quiet": [32, 33, 87, 108, 162, 185, 189, 275, 292, 311, 352, 361, 396, 460, 465, 468, 471, 473, 474, 477, 482], "display": [32, 33, 41, 66, 85, 87, 92, 95, 99, 105, 116, 118, 120, 138, 151, 152, 155, 156, 159, 178, 184, 185, 187, 190, 192, 199, 202, 212, 213, 237, 246, 254, 255, 259, 266, 267, 271, 281, 288, 293, 296, 297, 307, 311, 313, 319, 320, 321, 342, 344, 345, 346, 348, 352, 357, 363, 366, 368, 371, 374, 375, 377, 379, 380, 383, 387, 394, 398, 399, 402, 420, 425, 427, 434, 435, 448, 454, 455, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "copyright": [32, 33, 66, 67, 71, 84, 108, 167, 234, 246, 315, 352, 412, 425, 447, 449, 454, 474, 480], "py_unbufferedstdioflag": [32, 473], "buffered_stdio": [32, 33, 473], "stdout": [32, 33, 57, 62, 64, 66, 71, 85, 88, 98, 99, 118, 120, 125, 129, 132, 136, 151, 155, 163, 168, 175, 176, 189, 190, 192, 209, 215, 222, 224, 241, 246, 247, 258, 262, 268, 269, 283, 292, 293, 297, 300, 307, 308, 309, 315, 321, 333, 344, 348, 352, 357, 358, 361, 377, 379, 380, 387, 388, 398, 399, 406, 412, 416, 421, 427, 445, 449, 450, 454, 460, 461, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 482], "pythonunbuff": [32, 33, 352, 454, 482], "py_verboseflag": [32, 473], "verbos": [32, 33, 61, 66, 87, 96, 98, 99, 108, 118, 159, 176, 186, 187, 192, 209, 225, 227, 264, 268, 292, 301, 319, 331, 332, 345, 352, 356, 357, 361, 362, 366, 381, 387, 398, 418, 427, 460, 463, 464, 465, 467, 468, 472, 473, 474, 476, 478, 479, 482], "show": [32, 33, 34, 66, 70, 71, 74, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99, 100, 103, 105, 106, 114, 116, 118, 120, 121, 125, 138, 147, 151, 152, 155, 157, 159, 168, 171, 175, 178, 185, 187, 188, 189, 192, 201, 212, 215, 224, 225, 233, 234, 241, 242, 246, 247, 250, 261, 262, 267, 278, 283, 292, 293, 299, 307, 308, 318, 321, 332, 334, 337, 340, 341, 343, 344, 345, 366, 367, 368, 369, 374, 375, 377, 379, 380, 383, 387, 388, 389, 398, 399, 401, 418, 419, 420, 430, 434, 441, 450, 451, 452, 454, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 476, 477, 478, 481, 482], "cleanup": [32, 33, 34, 57, 66, 88, 93, 99, 113, 134, 140, 163, 168, 213, 284, 293, 338, 348, 350, 352, 359, 361, 387, 389, 401, 404, 410, 426, 428, 429, 454, 461, 463, 466, 468, 469, 473, 474, 475, 480, 482], "pythonverbos": [32, 33, 454], "fundament": [32, 34, 61, 66, 76, 103, 116, 193, 259, 283, 292, 299, 307, 308, 340, 384, 385, 401, 431, 460, 461, 467, 478], "builtin": [32, 33, 34, 51, 61, 66, 83, 85, 88, 91, 104, 120, 142, 157, 159, 186, 190, 192, 224, 229, 234, 243, 246, 249, 250, 254, 255, 258, 259, 261, 268, 299, 308, 315, 323, 334, 344, 352, 359, 384, 385, 389, 426, 429, 431, 434, 436, 439, 449, 455, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 483], "__main__": [32, 33, 34, 64, 66, 77, 82, 83, 85, 91, 98, 99, 100, 125, 144, 155, 165, 187, 189, 192, 199, 212, 227, 249, 250, 254, 279, 283, 292, 297, 299, 308, 313, 315, 323, 324, 333, 338, 340, 342, 344, 361, 366, 381, 383, 385, 387, 388, 389, 398, 399, 401, 406, 420, 428, 432, 436, 439, 449, 454, 462, 465, 466, 467, 468, 470, 474, 475, 476, 477, 480, 481, 482], "argv": [32, 33, 34, 64, 66, 70, 71, 99, 112, 116, 125, 135, 142, 187, 189, 192, 217, 227, 246, 292, 293, 297, 309, 315, 324, 338, 342, 352, 355, 368, 387, 406, 442, 447, 449, 450, 454, 464, 468, 469, 474, 479, 480, 482], "pysys_setargvex": [32, 55, 468, 472, 474, 482], "py_finalizeex": [32, 34, 55, 57, 70, 97, 478, 482], "py_initializefromconfig": [32, 33, 353, 473, 480, 482], "consol": [32, 33, 64, 66, 83, 90, 98, 99, 112, 175, 177, 179, 192, 200, 246, 268, 293, 297, 313, 320, 348, 352, 403, 420, 454, 460, 463, 467, 474, 475, 479, 482], "o_text": [32, 66, 116, 282, 293], "o_binari": [32, 33, 66, 116, 282, 293], "py_initializeex": [32, 55, 97, 482], "initsig": 32, "registr": [32, 57, 160, 168, 293, 299, 329, 394, 404, 419, 420, 467, 482], "undo": [32, 66, 155, 176, 221, 246, 267, 383, 388, 467, 482], "py_newinterpret": [32, 55, 97], "ideal": [32, 61, 93, 99, 101, 105, 134, 150, 182, 352, 399, 406, 465, 474], "flush": [32, 66, 98, 99, 103, 113, 116, 117, 125, 129, 132, 135, 139, 149, 157, 159, 176, 213, 224, 244, 258, 267, 269, 270, 271, 278, 283, 285, 293, 314, 322, 333, 337, 348, 352, 361, 398, 404, 406, 412, 423, 475, 476, 478, 480, 482], "restart": [32, 99, 176, 211, 222, 246, 268, 297, 333, 360, 365, 467, 468, 477, 479, 480, 482], "loadabl": [32, 61, 97, 249, 250, 307, 340, 455, 460, 482], "dll": [32, 55, 66, 75, 82, 108, 175, 269, 293, 352, 368, 420, 460, 466, 467, 471, 476, 480, 482], "unload": [32, 66, 97, 186, 361, 401, 482], "hunt": [32, 292, 482], "develop": [32, 33, 34, 66, 68, 73, 75, 76, 83, 85, 88, 90, 95, 97, 98, 99, 101, 102, 105, 124, 125, 151, 160, 168, 175, 185, 186, 212, 213, 234, 254, 258, 264, 267, 268, 269, 292, 293, 307, 313, 340, 344, 348, 352, 361, 367, 368, 374, 383, 385, 399, 418, 421, 424, 425, 454, 455, 456, 460, 462, 463, 464, 465, 466, 468, 469, 472, 474, 475, 476, 477, 480, 481, 482, 483], "destruct": [32, 71, 73, 155, 176, 255, 258, 284, 344, 427, 462, 474, 482], "random": [32, 33, 34, 66, 71, 83, 85, 90, 93, 99, 105, 116, 125, 133, 149, 157, 172, 173, 175, 192, 217, 218, 225, 235, 246, 254, 257, 258, 261, 283, 290, 292, 308, 319, 326, 327, 328, 343, 357, 361, 383, 387, 397, 409, 423, 425, 427, 450, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 477, 480, 482], "amount": [32, 34, 44, 71, 74, 82, 83, 88, 93, 103, 121, 125, 132, 138, 176, 185, 222, 230, 234, 235, 258, 259, 270, 283, 288, 292, 293, 295, 296, 299, 305, 307, 322, 330, 332, 333, 337, 342, 344, 363, 364, 365, 368, 371, 375, 383, 394, 408, 410, 423, 462, 465, 467, 471, 474, 476, 477, 478, 479, 481, 482], "tie": [32, 185, 308, 341, 343, 426, 472, 480, 482], "_pysys_clearaudithook": [32, 142], "py_fin": [32, 33, 55, 468, 482], "stdio_encod": [32, 33, 352], "stdio_error": [32, 33, 352], "pythonioencod": [32, 33, 293, 352, 454, 467, 476, 482], "backslashreplac": [32, 33, 105, 157, 213, 224, 258, 267, 293, 344, 352, 454, 464, 477, 479, 482], "program_nam": [32, 33], "durat": [32, 34, 99, 125, 134, 138, 182, 271, 283, 308, 337, 338, 341, 344, 352, 360, 361, 364, 365, 405, 468, 474, 475, 477, 480, 482], "wchar_": 32, "wchar": [32, 482], "prefix": [32, 33, 34, 46, 55, 59, 61, 62, 66, 71, 88, 96, 101, 102, 103, 116, 155, 158, 162, 166, 172, 174, 175, 176, 185, 189, 190, 202, 212, 227, 229, 234, 242, 244, 246, 256, 268, 269, 273, 280, 293, 294, 297, 302, 312, 314, 315, 319, 332, 334, 344, 345, 352, 353, 354, 359, 361, 363, 368, 374, 375, 379, 387, 388, 397, 398, 409, 412, 414, 418, 422, 423, 430, 434, 435, 439, 448, 449, 454, 459, 460, 464, 467, 468, 471, 474, 475, 477, 478, 480, 482], "complic": [32, 61, 71, 86, 88, 90, 93, 97, 101, 102, 103, 105, 106, 108, 141, 157, 168, 175, 180, 189, 192, 214, 225, 226, 242, 292, 299, 319, 365, 427, 429, 461, 463, 464, 465, 466, 467, 468, 470, 474, 482], "usr": [32, 34, 77, 82, 93, 95, 99, 105, 108, 151, 166, 175, 199, 229, 230, 272, 292, 294, 296, 303, 319, 326, 334, 344, 348, 352, 354, 359, 365, 368, 381, 394, 420, 437, 447, 452, 454, 455, 458, 459, 460, 462, 464, 466, 471, 474, 476, 477, 482], "bin": [32, 34, 66, 70, 77, 82, 93, 99, 105, 106, 108, 151, 163, 166, 199, 224, 244, 251, 254, 292, 293, 296, 301, 344, 345, 354, 394, 395, 398, 420, 427, 437, 447, 449, 452, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 482], "makefil": [32, 66, 70, 71, 77, 230, 234, 258, 296, 337, 341, 354, 427, 457, 461, 462, 467, 468, 473, 475, 476, 477, 478, 482], "exec": [32, 66, 71, 82, 108, 110, 120, 142, 144, 156, 158, 192, 211, 212, 224, 250, 254, 293, 297, 308, 344, 348, 351, 352, 361, 368, 377, 379, 380, 381, 427, 428, 435, 436, 437, 439, 449, 461, 462, 463, 465, 466, 469, 471, 476, 477, 482], "exec_prefix": [32, 33, 34, 66, 108, 283, 315, 334, 352, 353, 379, 398, 449, 454, 459, 474], "background": [32, 66, 75, 90, 95, 99, 103, 125, 138, 139, 166, 168, 176, 245, 246, 269, 283, 293, 340, 348, 350, 361, 364, 368, 374, 375, 383, 398, 426, 427, 451, 465, 476, 482], "plat": [32, 108, 460, 478, 482], "subtre": [32, 412, 461], "speak": [32, 33, 66, 71, 83, 103, 108, 182, 344, 355], "hardwar": [32, 105, 108, 141, 154, 176, 185, 293, 295, 322, 337, 348, 365, 397, 404, 468, 477, 482], "softwar": [32, 66, 67, 75, 78, 83, 93, 98, 99, 105, 108, 151, 157, 176, 186, 191, 192, 193, 209, 211, 227, 234, 244, 245, 246, 266, 288, 293, 307, 341, 365, 398, 404, 406, 418, 425, 458, 460, 461, 462, 464, 465, 467, 468, 482, 483], "sparc": [32, 295], "machin": [32, 62, 66, 71, 82, 85, 95, 98, 99, 103, 116, 132, 157, 165, 176, 177, 182, 199, 211, 229, 242, 255, 258, 260, 268, 269, 270, 272, 283, 284, 288, 293, 296, 303, 308, 313, 333, 335, 337, 340, 341, 343, 344, 347, 364, 366, 397, 408, 419, 420, 427, 433, 447, 455, 460, 461, 462, 463, 466, 467, 468, 470, 472, 474, 475, 479, 480, 482], "solari": [32, 66, 245, 293, 303, 306, 328, 352, 354, 365, 461, 468, 474, 475, 477, 479, 482], "consid": [32, 33, 41, 48, 53, 54, 55, 61, 62, 66, 70, 71, 73, 74, 76, 83, 86, 87, 88, 90, 91, 92, 93, 96, 97, 99, 100, 102, 108, 110, 112, 114, 118, 125, 127, 144, 147, 151, 154, 162, 166, 174, 175, 176, 180, 182, 183, 185, 189, 190, 192, 195, 203, 204, 207, 224, 225, 227, 229, 230, 234, 242, 249, 250, 252, 253, 255, 257, 258, 259, 262, 266, 267, 268, 269, 270, 271, 275, 283, 288, 289, 292, 294, 296, 297, 299, 308, 314, 319, 320, 328, 331, 333, 340, 341, 343, 344, 345, 352, 354, 357, 361, 363, 364, 365, 368, 384, 385, 387, 388, 394, 401, 406, 409, 410, 411, 419, 420, 426, 427, 428, 429, 431, 435, 455, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "intel": [32, 84, 141, 295, 308, 347, 455, 458, 466, 468, 477, 478, 480, 481, 482], "linux": [32, 33, 66, 68, 69, 78, 81, 82, 90, 91, 94, 95, 108, 113, 116, 131, 175, 176, 185, 211, 213, 214, 229, 246, 257, 258, 269, 278, 295, 306, 309, 322, 326, 328, 332, 333, 337, 342, 348, 352, 354, 357, 359, 361, 364, 365, 368, 394, 447, 454, 455, 457, 460, 461, 462, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "major": [32, 66, 75, 88, 91, 92, 101, 103, 105, 106, 108, 116, 120, 166, 176, 182, 186, 193, 202, 205, 207, 229, 234, 242, 285, 292, 293, 303, 305, 313, 344, 352, 354, 393, 420, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 480, 481, 482], "revis": [32, 66, 76, 105, 106, 347, 385, 407, 461, 466, 467, 470, 478, 479, 482], "stori": [32, 71, 147, 235, 445], "strategi": [32, 41, 61, 71, 74, 77, 118, 134, 139, 157, 269, 361, 368, 387, 402, 423, 424, 431, 440, 464, 469, 474, 479, 482], "meaningless": [32, 105, 462, 463, 472, 476, 482], "mount": [32, 293, 294, 296, 468, 476, 479, 482], "automount": 32, "comput": [32, 33, 34, 48, 61, 62, 66, 70, 73, 74, 76, 83, 85, 88, 90, 91, 93, 95, 96, 98, 99, 102, 104, 105, 108, 132, 138, 141, 146, 147, 150, 154, 159, 160, 165, 177, 180, 182, 184, 185, 190, 192, 215, 222, 224, 225, 234, 235, 254, 255, 259, 261, 267, 269, 275, 283, 293, 294, 296, 307, 308, 311, 318, 334, 337, 338, 341, 343, 344, 352, 362, 364, 368, 383, 387, 394, 397, 404, 423, 426, 427, 429, 434, 435, 439, 450, 454, 455, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 476, 479, 480, 482], "delimit": [32, 57, 66, 83, 85, 88, 102, 103, 166, 174, 192, 200, 216, 220, 237, 246, 247, 271, 288, 292, 299, 319, 320, 344, 345, 348, 368, 377, 393, 424, 432, 451, 460, 464, 474, 482], "maco": [32, 33, 55, 66, 78, 79, 81, 82, 83, 95, 105, 108, 109, 113, 116, 132, 175, 214, 257, 269, 278, 283, 293, 304, 308, 309, 320, 328, 332, 334, 337, 340, 341, 342, 352, 354, 361, 364, 365, 367, 368, 375, 394, 402, 425, 438, 452, 454, 457, 458, 461, 462, 463, 464, 466, 467, 468, 471, 478, 479, 480], "startup": [32, 33, 66, 112, 187, 213, 250, 266, 268, 293, 334, 344, 352, 362, 367, 381, 425, 431, 454, 466, 467, 471, 475, 476, 477, 479, 481, 482], "module_search_path": [32, 33, 57, 472, 482], "module_search_paths_set": [32, 33, 57, 472, 482], "knowledg": [32, 90, 182, 193, 266, 289, 330, 467], "compon": [32, 34, 41, 44, 66, 71, 83, 91, 98, 99, 102, 105, 106, 114, 138, 157, 159, 176, 182, 185, 193, 207, 209, 229, 230, 242, 244, 250, 251, 254, 255, 256, 281, 289, 293, 294, 296, 319, 331, 344, 345, 352, 354, 355, 365, 366, 368, 375, 383, 384, 385, 394, 404, 409, 414, 419, 421, 424, 427, 431, 432, 434, 454, 460, 464, 465, 468, 469, 472, 474, 476, 477, 478, 479, 482], "0a5": 32, "py3k": [32, 85, 101, 352, 354, 469], "63103m": 32, "2008": [32, 157, 182, 222, 332, 347, 412, 425, 467, 468, 469, 474, 482], "00": [32, 87, 100, 103, 105, 182, 185, 234, 267, 319, 341, 365, 383, 424, 450, 451, 454, 466, 467, 468, 474, 478, 481, 482], "53": [32, 76, 99, 100, 138, 182, 185, 275, 318, 343, 344, 365, 389, 443, 466], "55": [32, 91, 93, 98, 99, 100, 138, 185, 225, 284, 318, 319, 383, 440, 441, 443, 448, 449, 454, 478], "gcc": [32, 34, 61, 108, 175, 303, 352, 447, 454, 455, 467, 468, 470, 471, 472, 476, 478, 482], "minor": [32, 55, 61, 64, 66, 75, 77, 82, 90, 99, 101, 106, 116, 120, 176, 193, 202, 205, 285, 293, 303, 313, 352, 354, 414, 455, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 482], "period": [32, 55, 83, 88, 92, 98, 151, 176, 182, 185, 219, 225, 267, 269, 283, 294, 302, 323, 337, 338, 341, 343, 363, 375, 419, 429, 434, 460, 461, 464, 465, 466, 467, 468, 472, 473, 474, 482], "offici": [32, 157, 194, 208, 276, 295, 341, 368, 387, 410, 418, 427, 460, 461, 462, 463, 466, 468, 471, 474, 475, 477, 479, 481, 482], "suno": [32, 303, 357, 482], "sunos5": [32, 352], "darwin": [32, 303, 352, 365, 461, 467, 477, 482], "1991": [32, 67, 78, 340, 425], "1995": [32, 67, 208, 425, 461, 482], "sticht": [32, 67, 425], "mathematisch": [32, 67, 425], "centrum": [32, 67, 425], "amsterdam": [32, 365, 425], "67": [32, 100, 224, 337, 343, 381, 383, 445, 467, 482], "aug": [32, 93, 108, 182, 422, 463, 464], "1997": [32, 147, 425, 468, 474], "22": [32, 75, 99, 102, 105, 159, 172, 175, 182, 235, 246, 259, 267, 284, 318, 337, 341, 345, 383, 422, 425, 464, 474, 480, 481, 482], "34": [32, 99, 138, 182, 185, 225, 337, 341, 343, 429, 440, 448, 449, 474, 482], "argc": [32, 33, 64, 70, 71, 190, 482], "updatepath": [32, 468], "parse_argv": [32, 33, 34, 482], "safe_path": [32, 33, 352, 472], "host": [32, 66, 82, 99, 103, 125, 135, 139, 142, 157, 176, 177, 208, 211, 216, 222, 241, 242, 244, 246, 247, 256, 257, 269, 271, 283, 286, 287, 288, 293, 294, 296, 305, 313, 319, 335, 337, 338, 341, 344, 346, 347, 358, 361, 388, 393, 394, 397, 406, 418, 455, 460, 461, 464, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 482], "condit": [32, 34, 57, 61, 66, 71, 73, 76, 83, 85, 92, 93, 106, 108, 112, 120, 121, 123, 132, 136, 138, 144, 163, 180, 185, 189, 198, 212, 227, 230, 235, 239, 247, 250, 251, 257, 258, 267, 268, 271, 272, 281, 283, 297, 309, 314, 319, 327, 328, 337, 341, 350, 352, 359, 361, 385, 387, 399, 401, 411, 413, 415, 418, 425, 426, 427, 428, 432, 444, 451, 454, 461, 462, 463, 465, 467, 468, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "py_fatalerror": [32, 34, 41, 55, 57, 62, 481, 482], "algorithm": [32, 41, 66, 82, 83, 85, 102, 104, 105, 117, 125, 132, 141, 146, 149, 151, 157, 172, 173, 181, 182, 185, 189, 192, 201, 207, 224, 229, 235, 247, 254, 258, 259, 266, 269, 275, 277, 280, 281, 302, 308, 310, 327, 337, 341, 343, 344, 352, 363, 366, 389, 394, 406, 421, 422, 423, 429, 455, 461, 463, 464, 466, 468, 470, 471, 472, 474, 475, 478, 480, 482], "prepend": [32, 33, 66, 88, 91, 99, 157, 162, 177, 201, 225, 261, 269, 271, 288, 292, 301, 312, 327, 331, 332, 350, 352, 355, 363, 398, 412, 420, 454, 460, 472, 482], "orig_argv": [32, 33, 66, 315, 352, 471, 482], "themselv": [32, 61, 71, 73, 83, 88, 96, 98, 102, 141, 151, 154, 157, 166, 174, 175, 193, 207, 210, 229, 261, 262, 275, 283, 297, 299, 319, 332, 340, 344, 361, 363, 385, 387, 388, 389, 410, 418, 427, 429, 431, 463, 466, 467, 468, 474, 476, 477, 479, 482], "cve": [32, 344, 468, 472, 482], "5983": [32, 468], "achiev": [32, 44, 61, 70, 76, 83, 88, 93, 97, 99, 118, 157, 166, 175, 225, 235, 244, 261, 267, 283, 320, 341, 343, 352, 361, 364, 366, 368, 373, 388, 389, 394, 398, 400, 412, 427, 434, 435, 461, 463, 464, 466, 476, 477], "manual": [32, 44, 59, 66, 70, 71, 75, 77, 82, 83, 90, 91, 93, 97, 99, 101, 105, 108, 110, 118, 125, 131, 132, 138, 163, 175, 176, 184, 192, 196, 205, 214, 224, 258, 267, 271, 283, 284, 292, 293, 302, 304, 313, 320, 328, 337, 340, 344, 355, 357, 360, 365, 367, 374, 388, 409, 412, 420, 423, 427, 433, 450, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 473, 475, 476, 477, 479, 480, 482], "pop": [32, 34, 66, 78, 82, 83, 88, 99, 119, 121, 159, 160, 181, 185, 190, 193, 202, 235, 261, 271, 285, 293, 305, 331, 344, 374, 375, 383, 387, 398, 427, 434, 441, 451, 463, 464, 465, 466, 467, 474, 476, 477, 482], "pysys_setargv": [32, 55, 468, 472, 482], "pyrun_simplestr": [32, 33, 64, 70, 77, 84], "home": [32, 33, 66, 83, 84, 90, 99, 102, 151, 155, 166, 176, 213, 218, 221, 233, 246, 251, 271, 272, 286, 293, 294, 296, 297, 306, 310, 314, 320, 331, 334, 348, 353, 354, 361, 368, 374, 383, 398, 423, 433, 437, 452, 460, 467, 474, 475, 477, 480, 482], "w_char": 32, "simplest": [32, 61, 70, 71, 74, 88, 93, 96, 97, 98, 102, 103, 106, 118, 139, 157, 168, 174, 185, 192, 199, 209, 235, 267, 299, 319, 341, 364, 385, 387, 388, 420, 427, 429, 454, 461, 463, 464, 471], "simultan": [32, 61, 99, 101, 136, 137, 149, 185, 230, 246, 258, 261, 271, 281, 330, 338, 340, 361, 364, 374, 435, 460, 467, 471, 472, 477, 480, 482], "twice": [32, 33, 75, 86, 93, 99, 101, 104, 105, 108, 111, 146, 162, 166, 182, 187, 213, 231, 235, 255, 275, 319, 340, 377, 399, 421, 454, 461, 463, 464, 465, 467, 468, 478, 480, 482], "concurr": [32, 66, 82, 85, 112, 122, 123, 125, 128, 129, 132, 133, 136, 169, 254, 271, 283, 296, 299, 311, 320, 330, 340, 341, 348, 352, 364, 412, 442, 468, 472, 480, 482, 483], "setswitchinterv": [32, 66, 82, 186, 315, 352, 361, 449, 474, 481, 482], "potenti": [32, 33, 34, 61, 83, 93, 97, 99, 101, 125, 166, 172, 182, 222, 224, 247, 250, 253, 255, 261, 267, 268, 269, 283, 284, 293, 294, 299, 305, 327, 338, 341, 344, 352, 363, 384, 385, 387, 393, 408, 420, 427, 431, 454, 460, 462, 463, 467, 471, 472, 474, 475, 476, 477, 479, 482], "meantim": [32, 120, 482], "bookkeep": [32, 66, 176, 290, 473], "pythreadst": [32, 55, 471, 472, 476, 481, 482], "pythreadstate_get": [32, 55, 482], "reacquir": [32, 175, 364], "py_end_allow_thread": [32, 55, 71, 480, 482], "hidden": [32, 55, 66, 83, 116, 178, 190, 230, 246, 297, 308, 338, 375, 383, 475, 479, 480, 481, 482], "close": [32, 61, 64, 66, 74, 76, 77, 83, 88, 93, 97, 98, 99, 103, 105, 115, 116, 117, 118, 121, 125, 129, 131, 132, 134, 135, 138, 139, 151, 153, 154, 155, 156, 157, 160, 163, 166, 168, 169, 176, 183, 187, 189, 190, 193, 198, 206, 207, 212, 213, 217, 218, 222, 224, 233, 234, 239, 241, 242, 246, 247, 249, 256, 258, 267, 269, 270, 271, 273, 275, 277, 278, 281, 283, 284, 285, 288, 292, 293, 295, 296, 298, 301, 308, 309, 314, 315, 320, 328, 329, 330, 331, 333, 335, 337, 338, 340, 341, 343, 344, 348, 349, 350, 357, 358, 359, 361, 364, 365, 368, 374, 375, 377, 385, 387, 388, 389, 394, 398, 400, 403, 404, 406, 412, 415, 416, 418, 419, 420, 421, 427, 429, 430, 434, 442, 445, 451, 454, 461, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "expand": [32, 56, 61, 66, 73, 102, 105, 108, 120, 166, 182, 185, 192, 229, 246, 255, 259, 261, 268, 283, 292, 294, 296, 314, 319, 344, 354, 362, 363, 365, 368, 375, 388, 393, 404, 408, 409, 411, 412, 414, 419, 429, 460, 463, 464, 467, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_save": 32, "pyeval_savethread": [32, 55, 474], "pyeval_restorethread": [32, 55, 474, 480, 482], "compress": [32, 66, 88, 93, 96, 99, 115, 117, 132, 157, 166, 199, 217, 223, 233, 234, 254, 256, 259, 261, 276, 281, 295, 299, 332, 336, 341, 342, 349, 357, 400, 408, 420, 421, 450, 463, 464, 466, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482], "cryptograph": [32, 234, 293, 341, 412, 423, 425, 475, 478], "zlib": [32, 66, 82, 88, 99, 102, 108, 117, 157, 233, 234, 254, 332, 361, 421, 450, 463, 464, 466, 471, 472, 481, 482], "hashlib": [32, 66, 82, 172, 173, 236, 254, 327, 340, 425, 455, 467, 468, 469, 473, 482], "dedic": [32, 66, 99, 166, 192, 234, 341, 344, 361, 482], "aforement": [32, 475], "pygilstate_ensur": [32, 55, 480, 482], "pygilstate_releas": [32, 55], "idiom": [32, 34, 71, 76, 83, 101, 104, 110, 112, 118, 192, 224, 283, 331, 341, 352, 401, 464, 469, 474, 475, 481, 482], "pygilstate_st": [32, 55], "gstate": 32, "action": [32, 41, 53, 66, 71, 73, 74, 87, 90, 102, 113, 116, 120, 121, 144, 155, 159, 168, 174, 176, 189, 199, 214, 227, 241, 247, 281, 283, 293, 297, 301, 308, 309, 325, 328, 333, 338, 340, 344, 350, 352, 357, 358, 360, 364, 375, 383, 387, 388, 394, 398, 399, 406, 423, 425, 427, 440, 454, 461, 462, 464, 465, 466, 467, 468, 470, 471, 474, 476, 481, 482], "callsomefunct": 32, "beyond": [32, 66, 72, 90, 96, 98, 102, 116, 182, 185, 196, 202, 255, 262, 268, 271, 282, 293, 319, 337, 340, 341, 344, 385, 404, 426, 433, 462, 475, 482], "pygilstate_": 32, "unsupport": [32, 33, 66, 87, 88, 106, 113, 118, 125, 166, 182, 192, 224, 229, 258, 283, 284, 295, 299, 304, 337, 341, 343, 348, 364, 385, 388, 393, 394, 404, 421, 431, 442, 460, 461, 465, 467, 474, 478, 481, 482], "face": [32, 105, 149, 246, 269, 302, 424, 461, 467, 469, 471, 475, 476, 477, 482], "impact": [32, 73, 166, 250, 293, 307, 334, 341, 347, 348, 361, 472, 482], "solv": [32, 82, 83, 88, 93, 102, 112, 139, 246, 283, 330, 343, 357, 385, 388, 389, 426, 463, 464, 466, 470, 474, 476, 480, 482], "afterward": [32, 70, 91, 175, 182, 185, 261, 293, 328, 340, 352, 358, 389, 420, 427, 463, 464], "pthread_atfork": 32, "accomplish": [32, 34, 83, 88, 101, 118, 176, 247, 306, 330, 409, 471, 482], "deadlock": [32, 136, 165, 211, 213, 249, 267, 283, 316, 338, 348, 352, 364, 427, 467, 474, 475, 482], "defunct": 32, "pyos_afterfork_child": [32, 55, 57, 293, 479, 480, 482], "go": [32, 41, 66, 71, 73, 74, 76, 77, 83, 87, 88, 90, 92, 93, 98, 99, 101, 102, 103, 106, 108, 113, 132, 138, 151, 176, 188, 192, 199, 235, 246, 296, 313, 319, 340, 341, 348, 352, 358, 364, 365, 367, 379, 393, 394, 445, 456, 461, 462, 463, 464, 466, 468, 469, 475, 482], "belong": [32, 41, 56, 61, 71, 83, 92, 97, 108, 138, 165, 192, 210, 242, 258, 259, 272, 281, 292, 293, 314, 338, 340, 344, 375, 384, 399, 409, 415, 426, 427, 468, 471, 475, 482], "pyinterpreterst": [32, 33, 55, 61, 471, 480, 481, 482], "natur": [32, 34, 76, 83, 92, 102, 105, 112, 125, 154, 157, 175, 185, 192, 193, 229, 275, 278, 294, 308, 330, 337, 343, 375, 401, 402, 412, 429, 434, 461, 465, 467, 468, 469, 470, 472, 474, 478, 479, 482], "cooper": [32, 85, 114, 138, 202, 224, 341, 352, 368, 425, 479, 482], "interp": [32, 368, 482], "didn": [32, 74, 77, 83, 88, 101, 102, 105, 112, 139, 168, 292, 319, 335, 389, 427, 461, 462, 463, 465, 466, 467, 468, 476, 479, 481, 482], "pyeval_threadsiniti": [32, 55, 465, 481, 482], "tstate": [32, 472, 481, 482], "ensu": [32, 474], "_py_isfin": [32, 480], "unwant": [32, 34, 83, 479, 482], "needn": [32, 319, 347, 479], "pythreadstate_swap": [32, 55], "swap": [32, 70, 103, 157, 159, 175, 190, 283, 322, 337, 347, 361, 427, 435, 472, 479, 482], "readi": [32, 62, 66, 78, 90, 98, 101, 131, 132, 135, 139, 144, 150, 163, 169, 175, 185, 189, 231, 241, 244, 258, 269, 283, 328, 329, 337, 341, 365, 380, 388, 415, 416, 461, 464, 474, 475, 477, 482], "uniqu": [32, 66, 71, 73, 91, 93, 95, 98, 101, 105, 113, 118, 159, 175, 181, 182, 183, 189, 202, 204, 208, 210, 211, 224, 227, 235, 255, 259, 261, 262, 271, 281, 284, 293, 299, 305, 314, 340, 341, 343, 344, 354, 364, 371, 375, 385, 387, 388, 393, 397, 425, 426, 427, 431, 439, 441, 455, 460, 465, 466, 468, 470, 474, 479, 481, 482], "henc": [32, 71, 87, 99, 112, 120, 168, 171, 192, 226, 246, 253, 269, 283, 292, 296, 301, 308, 322, 331, 343, 344, 347, 348, 364, 388, 399, 426, 427, 429, 465, 476, 479, 482], "gilstat": 32, "everi": [32, 34, 41, 48, 55, 56, 66, 71, 73, 75, 83, 88, 91, 93, 97, 98, 99, 100, 102, 105, 106, 108, 110, 114, 120, 125, 131, 138, 140, 143, 146, 157, 166, 175, 176, 182, 183, 185, 186, 189, 190, 192, 193, 195, 204, 213, 222, 224, 229, 231, 242, 244, 246, 251, 255, 259, 261, 262, 267, 269, 278, 283, 292, 293, 295, 302, 314, 319, 332, 333, 334, 338, 340, 344, 345, 348, 351, 354, 355, 363, 364, 375, 378, 383, 385, 387, 388, 394, 399, 406, 407, 409, 412, 418, 424, 426, 427, 431, 433, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 476, 477, 478, 480, 482], "pygilstate_getthisthreadst": [32, 55], "auto": [32, 66, 91, 106, 181, 182, 210, 246, 320, 331, 337, 341, 383, 388, 389, 455, 459, 461, 468, 471, 474, 478, 479, 482], "diagnost": [32, 41, 66, 73, 98, 286, 356, 385, 388, 406, 418, 420, 457, 474, 478], "pygilstate_check": 32, "sensit": [32, 147, 166, 219, 247, 269, 276, 296, 385, 387, 399, 427, 454, 462, 464, 465, 466, 467, 472, 476, 482], "brace": [32, 88, 157, 281, 344, 345, 397, 429, 434, 478, 479, 482], "py_block_thread": [32, 55], "py_unblock_thread": [32, 55], "pyinterpreterstate_new": [32, 55, 142, 482], "serial": [32, 40, 41, 66, 99, 166, 181, 193, 195, 196, 200, 202, 204, 205, 206, 207, 254, 262, 267, 269, 283, 284, 298, 304, 330, 333, 335, 340, 352, 412, 445, 461, 467, 468, 470, 472, 474, 475, 476, 481, 482], "pyinterpreterstate_clear": [32, 55, 142], "pyinterpreterstate_delet": [32, 55], "pythreadstate_new": [32, 55, 482], "pythreadstate_clear": [32, 55, 482], "on_delet": [32, 482], "pythreadstate_delet": [32, 55, 482], "pythreadstate_deletecurr": [32, 481, 482], "uint64_t": 32, "pythreadstate_getid": [32, 55, 481, 482], "pythreadstate_getinterpret": [32, 55, 481, 482], "pythreadstate_entertrac": [32, 472, 482], "suspend": [32, 93, 138, 176, 255, 314, 333, 360, 364, 365, 426, 427, 429, 463, 464, 466, 472, 477, 479, 482], "pythreadstate_leavetrac": [32, 472, 482], "pyeval_settrac": [32, 463, 482], "pyeval_setprofil": [32, 463, 482], "pyinterpreterstate_get": [32, 55, 481, 482], "int64_t": 32, "pyinterpreterstate_getid": [32, 55, 479], "pyinterpreterstate_getdict": [32, 55, 482], "pymodule_getst": [32, 44, 55, 59, 88, 97, 481, 482], "_pyframeevalfunct": [32, 472, 482], "_pyinterpreterfram": [32, 472, 482], "throwflag": [32, 64, 482], "throw": [32, 64, 66, 75, 86, 88, 92, 93, 98, 110, 127, 138, 160, 176, 190, 246, 293, 361, 385, 393, 427, 429, 430, 466, 471, 473, 475, 478, 481, 482], "_pyinterpreterstate_getevalframefunc": [32, 482], "523": [32, 66, 464, 472, 481, 482], "_pyinterpreterstate_setevalframefunc": [32, 482], "eval_fram": [32, 481], "pythreadstate_getdict": [32, 55, 482], "okay": [32, 92, 118, 166, 266, 406], "pythreadstate_setasyncexc": [32, 55, 479, 482], "naiv": [32, 66, 102, 181, 202, 208, 234, 340, 343, 475, 482], "misus": [32, 44, 101, 340, 463, 482], "pyeval_acquirethread": [32, 55, 480, 482], "pyeval_releasethread": [32, 55], "pyeval_acquirelock": [32, 55, 474, 480, 482], "pyeval_releaselock": [32, 55, 474], "perhap": [32, 61, 70, 71, 74, 77, 82, 88, 92, 97, 98, 99, 102, 103, 106, 108, 118, 151, 154, 176, 180, 192, 217, 242, 258, 266, 268, 283, 293, 299, 334, 337, 410, 427, 429, 430, 461, 462, 463, 465, 466, 467, 471, 480, 482], "pyinterpreterstate_main": [32, 482], "total": [32, 33, 34, 57, 66, 71, 76, 83, 87, 88, 93, 99, 115, 125, 132, 133, 138, 159, 181, 182, 185, 189, 190, 192, 195, 204, 224, 225, 226, 229, 235, 258, 259, 261, 272, 293, 308, 319, 332, 337, 340, 341, 344, 345, 365, 366, 375, 381, 385, 387, 394, 400, 427, 429, 434, 454, 468, 472, 474, 475, 476, 477, 478, 480, 482], "unsuccess": [32, 37, 249, 482], "pymodule_fromdefandspec": [32, 44, 477], "squirrel": [32, 308], "init": [32, 44, 61, 66, 71, 84, 142, 175, 202, 249, 250, 276, 285, 293, 296, 308, 315, 362, 374, 385, 466, 467, 482], "across": [32, 41, 55, 59, 61, 66, 68, 76, 88, 95, 97, 101, 104, 108, 118, 163, 166, 168, 175, 182, 190, 192, 208, 254, 255, 260, 261, 266, 267, 268, 269, 283, 299, 300, 320, 328, 330, 340, 344, 352, 364, 368, 375, 377, 383, 429, 434, 464, 465, 467, 468, 471, 472, 474, 478, 479, 480, 482], "initmodul": 32, "py_endinterpret": [32, 55, 97, 482], "haven": [32, 102, 105, 138, 151, 185, 231, 343, 388, 467, 468, 482], "insul": 32, "perfect": [32, 88, 93, 103, 151, 195, 242, 246, 292, 341, 343, 429, 460, 471, 482], "malici": [32, 105, 262, 268, 299, 314, 327, 408, 410, 411, 412, 413, 418, 419, 454, 467, 472, 482], "especi": [32, 61, 70, 71, 74, 82, 83, 96, 101, 105, 108, 125, 139, 166, 168, 182, 185, 192, 197, 204, 235, 246, 258, 262, 268, 284, 288, 293, 297, 308, 311, 313, 314, 333, 341, 342, 348, 352, 361, 401, 409, 426, 431, 433, 461, 463, 464, 467, 468, 469, 471, 474, 475, 476, 477, 478, 480, 482], "namespac": [32, 44, 66, 71, 76, 77, 83, 85, 87, 88, 91, 93, 98, 112, 116, 120, 156, 159, 163, 167, 180, 190, 192, 206, 224, 225, 229, 246, 247, 249, 250, 251, 255, 256, 267, 268, 273, 283, 293, 297, 299, 302, 314, 324, 331, 337, 344, 345, 351, 365, 366, 381, 384, 385, 387, 388, 389, 397, 399, 409, 410, 411, 414, 415, 426, 428, 435, 436, 444, 449, 454, 461, 462, 463, 464, 466, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 482, 483], "reachabl": [32, 50, 103, 192, 226, 292, 293, 296, 385, 427, 472, 481, 482], "delic": [32, 61], "biject": [32, 105], "assumpt": [32, 61, 71, 74, 97, 140, 160, 180, 182, 463, 467, 471, 474, 478, 479, 482], "broken": [32, 66, 97, 99, 103, 105, 110, 137, 163, 165, 189, 206, 211, 230, 255, 266, 283, 293, 294, 296, 305, 333, 341, 344, 352, 361, 363, 364, 368, 387, 388, 389, 393, 434, 454, 466, 470, 471, 472, 473, 475, 476, 480, 481, 482], "presenc": [32, 34, 61, 71, 73, 110, 157, 160, 185, 217, 242, 249, 250, 256, 286, 292, 296, 308, 341, 343, 348, 352, 377, 385, 387, 426, 427, 429, 463, 464, 469, 472, 478, 482], "furthermor": [32, 82, 108, 118, 157, 255, 268, 269, 271, 324, 344, 385, 398, 420, 426, 460, 471, 472, 476], "ctype": [32, 66, 71, 116, 142, 163, 195, 199, 204, 213, 254, 293, 302, 344, 385, 425, 455, 468, 475, 478, 482], "py_addpendingcal": [32, 55, 468, 481, 482], "schedul": [32, 66, 78, 82, 111, 113, 116, 124, 139, 163, 165, 235, 252, 254, 255, 322, 333, 352, 365, 375, 429, 463, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "queu": [32, 125, 139, 155, 176, 269, 295, 337, 360, 467], "met": [32, 61, 73, 91, 92, 93, 98, 189, 210, 341, 425, 466, 480], "boundari": [32, 92, 102, 153, 182, 192, 195, 198, 204, 205, 210, 212, 283, 299, 319, 344, 347, 361, 414, 434, 467, 472, 482], "subinterpret": [32, 61, 140, 293, 344, 348, 361, 472, 480, 481, 482], "quick": [32, 49, 66, 73, 82, 83, 93, 99, 101, 102, 103, 106, 108, 116, 186, 189, 212, 215, 216, 217, 269, 290, 319, 333, 352, 368, 374, 387, 389, 423, 462, 463, 464, 465, 466, 467, 469, 470, 474, 476, 482], "busi": [32, 83, 103, 136, 211, 269, 338, 348, 368, 405, 414, 425, 440], "pygilst": 32, "attach": [32, 44, 66, 70, 97, 98, 99, 118, 125, 131, 165, 182, 186, 192, 193, 195, 196, 198, 202, 204, 205, 206, 211, 246, 267, 268, 284, 285, 328, 329, 340, 352, 368, 374, 387, 389, 406, 424, 426, 427, 435, 462, 464, 468, 469, 472, 475, 478, 480, 482], "coverag": [32, 83, 101, 352, 379, 469, 471, 476, 482], "overhead": [32, 34, 73, 99, 103, 131, 187, 252, 261, 270, 293, 308, 340, 342, 344, 352, 366, 381, 385, 401, 427, 431, 461, 462, 463, 464, 466, 470, 472, 474, 475, 478, 479, 480, 481, 482], "essenti": [32, 71, 83, 91, 103, 132, 166, 214, 224, 250, 268, 269, 275, 288, 292, 293, 296, 324, 330, 338, 344, 352, 383, 387, 410, 421, 432, 461, 463, 468, 469, 472, 475, 476, 481, 482], "py_tracefunc": 32, "pertain": [32, 34, 61, 71, 293, 352, 374, 425, 469, 482], "pytrace_cal": 32, "pytrace_except": 32, "pytrace_lin": 32, "pytrace_return": 32, "pytrace_c_cal": 32, "pytrace_c_except": 32, "pytrace_c_return": 32, "pytrace_opcod": 32, "transfer": [32, 34, 66, 70, 71, 90, 103, 106, 135, 143, 168, 190, 194, 195, 196, 197, 200, 201, 202, 205, 206, 207, 222, 234, 240, 241, 243, 271, 276, 283, 288, 293, 299, 335, 394, 396, 418, 429, 431, 467, 468, 474, 475, 478, 480, 482], "unwind": [32, 73, 100, 134, 168, 255, 427], "f_trace_lin": [32, 352, 427, 472, 479, 482], "opcod": [32, 66, 189, 264, 299, 300, 352, 427, 464, 465, 467, 468, 471, 472, 473, 476, 478, 479, 480, 481, 482], "emit": [32, 33, 44, 66, 73, 74, 98, 99, 113, 116, 125, 134, 138, 176, 182, 187, 190, 212, 226, 244, 258, 261, 267, 269, 293, 299, 348, 352, 361, 375, 380, 385, 387, 399, 410, 412, 416, 427, 429, 435, 454, 464, 467, 470, 471, 472, 474, 476, 478, 479, 480, 481, 482], "f_trace_opcod": [32, 352, 427, 472, 479, 482], "monitor": [32, 95, 98, 99, 125, 131, 136, 185, 269, 308, 329, 338, 398, 465, 467, 478, 479, 482], "setprofil": [32, 66, 142, 163, 283, 315, 352, 364, 449, 463, 471, 482], "pyeval_setprofileallthread": [32, 473, 482], "settrac": [32, 66, 142, 144, 163, 283, 315, 352, 364, 449, 463, 471, 482], "pyeval_settraceallthread": [32, 473, 482], "pyinterpreterstate_head": [32, 463], "head": [32, 61, 66, 99, 102, 135, 150, 151, 155, 177, 199, 221, 239, 240, 241, 244, 288, 294, 308, 318, 333, 334, 338, 341, 350, 367, 375, 383, 394, 412, 461, 463, 475, 482], "pyinterpreterstate_next": [32, 463], "pyinterpreterstate_threadhead": [32, 463], "pythreadstate_next": [32, 463], "offer": [32, 61, 68, 71, 82, 89, 90, 91, 92, 93, 96, 98, 99, 105, 108, 156, 160, 171, 185, 215, 222, 224, 230, 234, 258, 261, 267, 268, 269, 271, 283, 294, 296, 297, 319, 320, 324, 332, 337, 344, 348, 353, 364, 365, 388, 394, 404, 407, 415, 425, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 474, 476, 480, 481, 482], "pthread": [32, 113, 352, 364, 455, 474, 482], "pythread": 32, "behalf": [32, 125, 333, 482], "introduc": [32, 33, 44, 55, 71, 76, 83, 87, 88, 93, 97, 98, 99, 101, 102, 111, 120, 125, 187, 212, 234, 242, 244, 250, 251, 269, 271, 275, 283, 292, 299, 305, 308, 341, 344, 345, 347, 351, 352, 368, 374, 375, 383, 384, 385, 393, 413, 424, 426, 427, 428, 429, 431, 433, 434, 435, 454, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "supersed": [32, 57, 253, 288, 295, 341, 461, 468, 471, 475, 479, 482], "py_tss_t": [32, 479], "539": [32, 66, 482], "py_limited_api": [32, 54, 55, 57, 59, 420, 471, 472, 474, 479, 481, 482], "py_tss_needs_init": 32, "pythread_tss_alloc": [32, 55], "pythread_tss_fre": [32, 55], "pythread_tss_delet": [32, 55], "unassign": [32, 91, 346, 482], "dangl": [32, 61, 71, 75, 85, 293, 332, 344, 345, 361, 426, 482], "moreov": [32, 33, 34, 224, 235, 271, 383, 385, 468, 469, 471, 472, 482], "pythread_tss_set": [32, 55], "pythread_tss_get": [32, 55], "pythread_tss_cr": [32, 55], "pythread_tss_is_cr": [32, 55], "repeat": [32, 52, 56, 61, 66, 77, 88, 93, 103, 106, 110, 118, 147, 155, 160, 175, 176, 182, 184, 189, 196, 213, 223, 224, 234, 246, 261, 266, 276, 285, 292, 295, 297, 302, 308, 318, 319, 337, 338, 341, 344, 345, 347, 364, 366, 379, 380, 383, 385, 387, 388, 394, 404, 405, 406, 408, 426, 427, 454, 463, 464, 465, 467, 468, 474, 475, 476, 477, 478, 482], "forget": [32, 34, 66, 70, 71, 88, 97, 99, 138, 185, 186, 258, 361, 367, 375, 429, 430, 441, 465, 466, 467, 471, 474, 480, 482], "pythread_create_key": [32, 55, 482], "ops": [32, 98, 120, 341], "pythread_delete_key": [32, 55], "pythread_set_key_valu": [32, 55, 476], "pythread_get_key_valu": [32, 55], "pythread_delete_key_valu": [32, 55], "pythread_reinittl": [32, 55], "py_preiniti": [33, 57, 473, 480], "lc_ctype": [33, 57, 66, 85, 105, 245, 266, 293, 344, 454, 478, 479, 482], "unchang": [33, 41, 88, 91, 99, 102, 110, 144, 151, 155, 166, 175, 176, 185, 207, 229, 255, 261, 266, 269, 271, 293, 294, 302, 319, 337, 340, 344, 345, 368, 383, 384, 385, 393, 420, 426, 427, 429, 434, 460, 463, 465, 466, 467, 468, 469, 470, 474, 475, 478, 479, 482], "587": [33, 66, 99, 341, 472, 482], "config": [33, 66, 70, 77, 83, 98, 99, 116, 166, 246, 254, 266, 267, 269, 292, 332, 352, 354, 367, 368, 371, 388, 389, 406, 451, 455, 459, 464, 468, 471, 472, 473, 474, 476, 478, 479, 480, 482], "pyconfig_initpythonconfig": [33, 480], "pyconfig_setbytesargv": [33, 480], "pystatus_except": [33, 480], "goto": [33, 34, 66, 155, 221, 383, 455, 470, 472, 474, 482], "pyconfig_clear": [33, 480], "pystatus_isexit": [33, 480], "exitcod": [33, 66, 163, 283, 293, 348, 361, 482], "py_exitstatusexcept": [33, 480], "pywidestringlist_append": [33, 480], "pywidestringlist_insert": [33, 480], "err_msg": [33, 340, 352, 361], "pystatus_ok": [33, 480], "pystatus_error": [33, 480], "pystatus_nomemori": [33, 480], "pystatus_exit": [33, 480], "pystatus_iserror": [33, 480], "wherea": [33, 71, 83, 99, 125, 136, 166, 239, 262, 267, 283, 319, 329, 352, 368, 388, 398, 401, 431, 460, 469, 471, 472, 481, 482], "preconfigur": [33, 388], "pypreconfig_initpythonconfig": [33, 480], "preconfig": [33, 480], "pypreconfig_initisolatedconfig": [33, 480], "pymem_allocator_not_set": 33, "pymem_allocator_default": 33, "pymem_allocator_debug": 33, "pymem_allocator_malloc": 33, "pymem_allocator_malloc_debug": 33, "pymem_allocator_pymalloc": 33, "pymem_allocator_pymalloc_debug": 33, "configure_local": 33, "coerce_c_local": 33, "coerce_c_locale_warn": 33, "coerc": [33, 62, 96, 166, 174, 185, 194, 195, 204, 262, 343, 345, 454, 461, 469, 472, 479, 482], "decid": [33, 34, 74, 83, 87, 88, 93, 98, 101, 103, 111, 144, 156, 168, 182, 192, 226, 242, 269, 337, 338, 352, 364, 385, 427, 431, 435, 466, 468, 471, 482], "dev_mod": [33, 187, 352, 482], "utf8_mod": [33, 293, 352, 473], "filesystem_encod": [33, 57, 85, 293, 352, 473], "filesystem_error": [33, 57, 85, 293, 352, 473], "ifdef": [33, 66, 71, 420, 455, 461, 482], "py_preinitializefromarg": [33, 480], "py_preinitializefrombytesarg": [33, 480], "utf8": [33, 66, 120, 151, 157, 193, 202, 204, 206, 207, 247, 256, 285, 293, 305, 314, 335, 352, 410, 412, 454, 460, 477, 479, 482], "pythonutf8": [33, 293, 352, 454, 460, 479, 482], "_pyruntim": [33, 481, 482], "pre": [33, 34, 71, 98, 99, 102, 109, 139, 185, 190, 202, 207, 225, 235, 244, 250, 258, 261, 268, 292, 296, 324, 331, 338, 352, 380, 385, 386, 388, 394, 398, 426, 435, 454, 455, 460, 461, 464, 465, 466, 468, 474, 476, 477, 478, 479, 481, 482], "pyconfig_initisolatedconfig": [33, 480], "pyconfig_setstr": [33, 480], "config_str": 33, "pyconfig_setbytesstr": [33, 57, 480], "pyconfig_setargv": [33, 480], "pyconfig_setwidestringlist": [33, 482], "pyconfig_read": [33, 57, 85, 293, 352, 472, 480, 482], "stripp": [33, 482], "tune": [33, 225, 226, 242, 292, 319, 322, 341, 423, 461, 464, 482], "strip": [33, 66, 83, 88, 93, 102, 118, 120, 157, 166, 169, 176, 177, 182, 185, 189, 192, 199, 207, 208, 222, 224, 227, 244, 246, 268, 269, 294, 308, 326, 331, 335, 338, 343, 344, 348, 355, 361, 380, 381, 393, 399, 406, 412, 421, 441, 442, 461, 464, 469, 470, 474, 477, 482], "unsaf": [33, 55, 61, 66, 73, 83, 149, 166, 187, 256, 283, 327, 331, 340, 352, 387, 388, 397, 454, 464, 471, 472, 477, 479, 482], "py": [33, 34, 66, 71, 74, 77, 83, 84, 85, 87, 88, 92, 93, 95, 98, 99, 100, 105, 108, 109, 110, 111, 114, 115, 118, 120, 121, 124, 125, 126, 128, 130, 132, 133, 134, 135, 136, 137, 139, 143, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 174, 175, 180, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 210, 213, 215, 217, 219, 220, 222, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 276, 279, 281, 284, 286, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 361, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 429, 431, 437, 447, 448, 449, 450, 451, 452, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "link": [33, 34, 55, 61, 64, 66, 69, 71, 72, 75, 76, 77, 82, 83, 84, 85, 98, 99, 103, 108, 116, 120, 142, 160, 162, 177, 182, 199, 211, 230, 239, 242, 244, 257, 259, 261, 266, 267, 293, 294, 296, 328, 332, 341, 342, 348, 352, 353, 356, 357, 361, 368, 374, 375, 398, 401, 402, 404, 406, 412, 413, 427, 431, 454, 455, 461, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "resolv": [33, 66, 73, 83, 98, 99, 118, 125, 127, 138, 166, 175, 182, 190, 192, 218, 250, 251, 255, 259, 268, 292, 293, 294, 296, 302, 308, 314, 337, 341, 348, 352, 384, 385, 387, 388, 398, 410, 411, 412, 414, 415, 416, 428, 454, 460, 463, 471, 475, 476, 477, 478, 479, 480, 482], "pythonsafepath": [33, 327, 352, 454, 472, 482], "base_exec_prefix": [33, 66, 315, 334, 352, 398, 420, 449], "base_execut": 33, "_base_execut": [33, 482], "__pyvenv_launcher__": [33, 482], "base_prefix": [33, 66, 229, 315, 334, 352, 398, 449], "configure_c_stdio": 33, "warn_default_encod": [33, 258, 454, 471, 482], "encodingwarn": [33, 66, 116, 212, 454, 482], "textiowrapp": [33, 66, 116, 118, 149, 187, 217, 224, 233, 253, 258, 270, 348, 359, 421, 467, 471, 475, 476, 478, 479, 482], "opt": [33, 55, 66, 70, 108, 116, 166, 189, 212, 227, 250, 292, 299, 306, 338, 431, 449, 454, 455, 464, 467, 468, 474, 476, 477, 479, 482], "code_debug_rang": 33, "inclus": [33, 34, 38, 41, 66, 88, 118, 159, 165, 182, 184, 211, 237, 259, 265, 267, 270, 293, 308, 318, 319, 331, 343, 381, 412, 429, 433, 435, 454, 468, 474, 479, 482], "caret": [33, 102, 176, 177, 192, 319, 380, 482], "pythonnodebugrang": [33, 427, 454, 472], "no_debug_rang": [33, 427, 454, 472], "check_hash_pycs_mod": 33, "check_sourc": 33, "552": [33, 66, 250, 311, 472, 482], "determinist": [33, 66, 102, 168, 184, 187, 250, 255, 337, 340, 358, 412, 474, 479, 481, 482], "dev": [33, 66, 77, 78, 95, 99, 125, 187, 228, 269, 271, 272, 293, 295, 307, 333, 348, 352, 354, 437, 454, 458, 461, 462, 463, 464, 465, 466, 467, 468, 474, 475, 477, 482], "pythondevmod": [33, 187, 454, 479], "dump_ref": 33, "dump": [33, 41, 66, 71, 88, 92, 98, 99, 120, 142, 151, 171, 174, 184, 187, 216, 254, 256, 262, 264, 266, 269, 273, 274, 284, 285, 286, 293, 298, 299, 304, 308, 333, 340, 342, 381, 406, 412, 418, 445, 454, 455, 461, 462, 463, 464, 467, 468, 470, 475, 476, 477, 478, 481, 482], "aliv": [33, 61, 66, 83, 175, 181, 225, 283, 284, 305, 344, 361, 364, 401, 426, 427, 451, 454, 462, 468, 469, 474, 476, 482], "pythondumpref": [33, 61, 454, 455, 480, 482], "py_trace_ref": [33, 34, 61, 455, 471, 480, 481, 482], "faulthandl": [33, 66, 175, 184, 187, 254, 333, 361, 454, 482], "pythonfaulthandl": [33, 187, 213, 454, 475], "getfilesystemencod": [33, 64, 66, 85, 105, 118, 293, 315, 352, 357, 420, 449, 478, 482], "android": [33, 62, 85, 266, 303, 352, 361, 478, 479, 480, 482], "vxwork": [33, 62, 85, 172, 266, 293, 301, 322, 471, 482], "nl_langinfo": [33, 66, 245, 266, 463, 482], "codeset": [33, 66, 157, 229, 245, 266, 463, 472, 480, 482], "announc": [33, 78, 105, 111, 293, 475], "mbstowc": 33, "latin1": [33, 135, 157, 299, 314, 466, 475, 478, 481, 482], "ansi_x3": 33, "1968": 33, "getfilesystemencodeerror": [33, 66, 85, 315, 352, 449, 478], "surrogateescap": [33, 57, 62, 105, 157, 200, 207, 217, 224, 293, 337, 352, 357, 454, 474, 477, 478, 479, 482], "chosen": [33, 44, 71, 88, 92, 98, 102, 108, 165, 185, 210, 222, 224, 234, 268, 283, 284, 292, 299, 337, 341, 347, 352, 374, 397, 414, 427, 450, 454, 460, 464, 465, 469, 482], "import_tim": 33, "importtim": [33, 454, 479, 482], "pythonprofileimporttim": [33, 454, 479, 482], "install_signal_handl": [33, 471, 482], "repl": [33, 112, 319, 352, 454, 471, 480, 482], "int_max_str_digit": [33, 344, 352, 454, 482], "4300": [33, 344, 472], "int_info": [33, 66, 315, 344, 352, 449, 455, 470], "default_max_str_digit": [33, 344, 352], "640": [33, 344, 383], "str_digits_check_threshold": [33, 344, 352], "pythonintmaxstrdigit": [33, 344, 352, 454, 482], "varabl": 33, "prompt": [33, 64, 66, 77, 83, 108, 110, 112, 118, 142, 155, 156, 165, 172, 175, 188, 190, 192, 199, 206, 221, 222, 224, 228, 246, 247, 254, 283, 297, 313, 319, 320, 335, 341, 344, 348, 352, 360, 364, 367, 380, 383, 394, 398, 431, 435, 440, 443, 448, 454, 460, 464, 467, 471, 472, 474, 476, 478, 479, 480, 481, 482], "malloc_stat": 33, "statist": [33, 41, 66, 91, 184, 225, 226, 254, 275, 288, 290, 308, 318, 332, 341, 352, 366, 379, 450, 454, 455, 461, 462, 466, 468, 474, 475, 482], "pythonmallocstat": [33, 41, 454, 482], "platlibdir": [33, 66, 315, 352, 353, 454, 455, 481, 482], "pythonplatlibdir": [33, 353, 454, 482], "lib": [33, 34, 70, 75, 77, 82, 84, 87, 93, 95, 108, 110, 111, 114, 115, 118, 120, 121, 122, 125, 126, 128, 130, 132, 133, 134, 135, 136, 137, 139, 143, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 174, 175, 180, 182, 183, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 215, 217, 219, 220, 222, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 276, 279, 281, 283, 284, 286, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 425, 429, 437, 449, 451, 452, 454, 455, 459, 460, 461, 462, 463, 464, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482], "dlls": [33, 66, 72, 116, 293, 461, 466, 480, 482], "layout": [33, 41, 61, 66, 74, 97, 98, 99, 108, 157, 188, 212, 267, 271, 341, 347, 354, 367, 368, 372, 397, 427, 431, 444, 460, 467, 475, 476, 482], "virtual": [33, 34, 66, 68, 71, 83, 85, 101, 108, 109, 114, 160, 175, 176, 178, 191, 209, 224, 225, 241, 251, 254, 255, 280, 293, 333, 337, 340, 341, 352, 354, 357, 367, 384, 394, 406, 426, 427, 428, 431, 439, 452, 457, 461, 467, 472, 474, 476, 478, 479, 480, 482, 483], "pythonpath_env": 33, "delim": 33, "pathsep": [33, 66, 116, 293, 334, 379, 402, 424, 454, 455], "optim": [33, 34, 41, 56, 61, 64, 66, 74, 83, 88, 102, 120, 127, 132, 138, 141, 157, 162, 176, 190, 210, 224, 226, 234, 242, 249, 250, 255, 264, 265, 293, 299, 300, 308, 311, 318, 337, 340, 351, 352, 361, 364, 365, 421, 426, 427, 435, 455, 460, 461, 463, 482, 483], "peephol": [33, 465, 466, 474, 479, 482], "__debug__": [33, 64, 66, 167, 187, 224, 249, 250, 254, 435, 449, 454, 464, 471, 482], "assert": [33, 34, 48, 64, 66, 99, 104, 110, 114, 120, 138, 167, 180, 182, 183, 186, 187, 190, 192, 212, 224, 227, 255, 264, 283, 292, 297, 299, 319, 340, 344, 361, 385, 387, 388, 399, 401, 410, 424, 426, 429, 430, 432, 434, 449, 454, 455, 464, 465, 467, 470, 474, 476, 477, 480, 481, 482], "py_debug": [33, 34, 66, 186, 361, 455, 471, 480, 482], "log": [33, 57, 66, 91, 93, 94, 105, 116, 121, 124, 125, 138, 147, 151, 152, 154, 163, 165, 168, 187, 192, 213, 222, 229, 235, 244, 254, 258, 275, 288, 290, 293, 305, 327, 332, 335, 341, 344, 348, 352, 355, 361, 385, 387, 399, 406, 419, 427, 444, 450, 454, 460, 461, 462, 463, 465, 466, 467, 470, 471, 481, 482, 483], "pythonexecut": [33, 454], "with_next_framework": 33, "python3": [33, 55, 70, 87, 88, 95, 99, 105, 108, 109, 110, 112, 187, 199, 207, 213, 251, 296, 297, 334, 344, 353, 354, 366, 381, 398, 420, 437, 447, 452, 454, 455, 459, 460, 468, 471, 474, 476, 478, 480, 481, 482], "pycache_prefix": [33, 66, 162, 315, 352, 449, 454, 480, 482], "pythonpycacheprefix": [33, 352, 454, 480, 482], "run_command": [33, 142, 454], "run_filenam": 33, "skip_source_first_lin": 33, "run_modul": [33, 66, 142, 280, 324, 454, 482], "show_ref_count": 33, "showrefcount": [33, 454, 455, 476, 482], "py_ref_debug": [33, 455], "no_sit": [33, 352, 474], "invert": [33, 66, 91, 93, 120, 157, 185, 190, 210, 223, 264, 291, 344, 427, 429, 430, 472, 482], "cmd": [33, 66, 84, 99, 118, 125, 136, 142, 144, 163, 176, 214, 221, 222, 254, 293, 297, 301, 308, 332, 335, 348, 379, 398, 454, 474, 482], "dos": [33, 76, 176, 288, 292, 454, 461, 463, 474, 476, 482], "hack": [33, 82, 93, 97, 192, 331, 394, 454, 461, 462, 463, 482], "pythontracemalloc": [33, 381, 454, 482], "perf_profil": 33, "perf": [33, 66, 94, 454, 482], "trampolin": [33, 482], "pythonperfsupport": [33, 100, 454], "warnopt": [33, 57, 66, 315, 352, 361, 399, 449, 479, 482], "filter": [33, 57, 66, 83, 93, 95, 98, 110, 116, 117, 141, 159, 176, 184, 187, 188, 189, 212, 215, 217, 218, 219, 224, 254, 261, 268, 312, 315, 328, 337, 357, 361, 387, 388, 398, 420, 424, 429, 441, 449, 454, 455, 461, 462, 463, 464, 465, 467, 468, 469, 471, 474, 478, 479, 480, 481, 482], "lowest": [33, 41, 55, 98, 120, 185, 190, 210, 220, 235, 278, 289, 341, 343, 344, 348, 364, 366, 371, 429, 461, 466, 478], "highest": [33, 77, 91, 92, 98, 120, 132, 166, 210, 226, 267, 278, 299, 300, 328, 333, 340, 341, 343, 344, 352, 365, 371, 429, 467, 475, 482], "prioriti": [33, 66, 91, 123, 142, 166, 181, 250, 261, 262, 269, 293, 299, 316, 322, 325, 328, 341, 344, 348, 355, 364, 374, 427, 429, 463, 464, 467, 474, 475, 476, 478, 480, 482], "revers": [33, 37, 66, 71, 78, 90, 91, 93, 103, 104, 105, 119, 140, 141, 157, 159, 160, 168, 174, 176, 180, 181, 182, 185, 186, 190, 210, 213, 224, 235, 254, 255, 259, 261, 283, 289, 293, 296, 308, 314, 319, 331, 340, 344, 350, 377, 381, 384, 385, 387, 393, 401, 427, 439, 441, 449, 461, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483], "pythonwarn": [33, 187, 399, 454, 468, 474, 479, 482], "dont_write_bytecod": [33, 66, 315, 352, 449, 467, 474], "xoption": [33, 57, 454, 472, 482], "_xoption": [33, 57, 66, 315, 352, 449, 454], "show_alloc_count": [33, 478, 481, 482], "init_python": 33, "my_program": 33, "pysys_getobject": [33, 55, 57, 472], "stdlib": [33, 34, 66, 71, 97, 99, 210, 234, 246, 354, 408, 455, 466, 471, 472, 474, 475, 477, 482], "my_execut": 33, "unspecifi": [33, 88, 93, 101, 125, 149, 175, 192, 230, 258, 259, 270, 275, 287, 293, 296, 299, 314, 337, 365, 375, 385], "coercion": [33, 66, 224, 293, 345, 427, 454, 455, 466, 468, 482, 483], "538": [33, 66, 454, 455, 482], "540": [33, 66, 293, 482], "pythoncoerceclocal": [33, 293, 454, 455, 479, 482], "softwarepythonpythoncorex": 33, "ypythonpath": 33, "hkey_current_us": [33, 66, 403, 404, 460], "hkey_local_machin": [33, 66, 403, 404, 460], "unset": [33, 57, 61, 66, 186, 271, 293, 295, 344, 352, 361, 397, 431, 467, 468, 479, 482], "overridden": [33, 76, 83, 91, 92, 99, 108, 114, 118, 121, 139, 144, 155, 160, 166, 182, 207, 210, 224, 229, 239, 242, 243, 244, 250, 255, 258, 267, 269, 292, 293, 297, 307, 313, 324, 338, 340, 341, 344, 348, 352, 357, 364, 375, 385, 387, 394, 398, 399, 406, 427, 429, 431, 442, 454, 467, 468, 471, 475, 476, 480, 481, 482], "py_main": [33, 55, 64, 420, 460, 479, 482], "pyvenv": [33, 334, 353, 398, 460, 475, 476, 478, 480, 482], "cfg": [33, 83, 108, 166, 268, 334, 353, 383, 398, 460, 467, 475, 477, 478, 482], "_pth": [33, 66, 280, 460, 478, 479, 482], "pybuilddir": [33, 482], "txt": [33, 34, 66, 76, 93, 99, 105, 108, 118, 159, 165, 168, 187, 192, 207, 217, 219, 224, 229, 230, 233, 234, 242, 246, 251, 254, 256, 258, 278, 288, 292, 293, 296, 299, 332, 344, 348, 352, 357, 368, 386, 391, 398, 412, 420, 421, 434, 439, 442, 450, 451, 452, 455, 460, 461, 467, 468, 470, 474, 475, 476, 477, 478, 480, 482], "432": [33, 479, 482], "bare": [33, 88, 98, 99, 120, 166, 202, 292, 335, 430, 458, 460, 466, 469, 472, 480, 482], "importlib": [33, 66, 83, 85, 95, 99, 101, 110, 224, 246, 249, 254, 255, 268, 280, 302, 311, 324, 352, 361, 381, 384, 422, 427, 432, 435, 449, 460, 470, 472, 473, 474, 480, 482, 483], "_init_main": 33, "_isolated_interpret": 33, "subprocess": [33, 66, 99, 122, 129, 130, 131, 142, 163, 165, 168, 207, 209, 247, 254, 257, 283, 293, 301, 327, 331, 337, 338, 361, 367, 381, 383, 398, 399, 420, 454, 459, 464, 467, 468, 471, 474, 480, 481, 482, 483], "fork": [33, 57, 66, 71, 82, 99, 116, 142, 165, 212, 226, 257, 278, 283, 293, 309, 328, 332, 338, 341, 348, 390, 464, 468, 476, 479, 480, 482], "_py_initializemain": 33, "move": [33, 66, 74, 82, 83, 88, 89, 90, 91, 96, 99, 103, 106, 110, 116, 118, 120, 142, 155, 175, 176, 178, 180, 182, 195, 204, 205, 217, 218, 226, 235, 246, 261, 269, 271, 278, 293, 297, 311, 332, 361, 365, 367, 370, 374, 375, 383, 387, 389, 393, 394, 398, 412, 450, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "mayb": [33, 71, 88, 92, 93, 103, 271, 399, 430, 433, 471, 472], "meta_path": [33, 66, 85, 142, 250, 251, 302, 315, 352, 431, 435, 449, 460, 464, 475, 478, 482], "calculatin": 33, "motiv": [33, 88, 91, 427, 429, 462, 464, 465, 471, 475, 480, 482], "anytim": [33, 151, 341, 344, 368], "res": [33, 41, 44, 77, 102, 138, 241, 283, 319, 337, 340, 482], "varieti": [34, 62, 71, 73, 93, 97, 105, 118, 157, 185, 193, 222, 224, 229, 273, 292, 308, 344, 348, 368, 372, 385, 406, 431, 465, 466, 467, 468, 472, 476], "usabl": [34, 38, 47, 52, 54, 55, 57, 61, 62, 74, 83, 96, 101, 103, 104, 125, 139, 151, 157, 175, 176, 208, 224, 244, 250, 259, 268, 276, 283, 293, 294, 337, 341, 344, 345, 348, 409, 427, 429, 431, 463, 464, 465, 466, 472, 474, 478, 479, 482], "breviti": [34, 73, 292], "techniqu": [34, 83, 93, 99, 104, 105, 139, 151, 160, 192, 200, 225, 293, 308, 319, 353, 360, 374, 385, 388, 389, 431, 474, 480, 482], "understood": [34, 70, 103, 151, 174, 242, 268, 283, 293, 297, 331, 344, 366, 396, 420, 425, 427], "cookbook": [34, 66, 72, 83, 94, 98, 106, 210, 267, 268, 269, 275, 366, 453, 474], "approach": [34, 66, 71, 72, 74, 77, 83, 86, 87, 88, 93, 98, 99, 104, 105, 106, 113, 151, 157, 168, 185, 189, 192, 209, 224, 249, 275, 283, 293, 296, 333, 338, 340, 343, 344, 348, 359, 364, 366, 368, 385, 387, 389, 394, 412, 418, 420, 427, 429, 460, 461, 462, 466, 467, 468, 470, 472, 474, 475, 477, 478, 479, 482, 483], "autom": [34, 74, 82, 88, 101, 120, 222, 288, 364, 462, 468, 476, 480, 482], "extent": [34, 132, 155, 234, 258, 278, 375, 383, 425, 470, 482], "peopl": [34, 76, 88, 91, 93, 96, 101, 105, 176, 185, 189, 192, 229, 234, 292, 343, 412, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 475, 478, 480, 482], "familiar": [34, 74, 90, 93, 96, 99, 102, 112, 156, 193, 227, 262, 340, 378, 431, 462, 463, 464, 467, 482], "guidelin": [34, 66, 73, 86, 97, 163, 246, 361, 461, 462, 466, 482], "contribut": [34, 180, 229, 234, 250, 308, 319, 396, 431, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "convent": [34, 56, 59, 61, 71, 83, 88, 90, 91, 97, 98, 99, 105, 108, 112, 150, 166, 175, 176, 177, 180, 182, 208, 227, 229, 242, 245, 266, 271, 284, 292, 293, 294, 295, 344, 345, 352, 361, 363, 365, 394, 420, 427, 429, 433, 434, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 479, 482], "stdio": [34, 70, 71, 100, 293, 467, 472, 482], "_pi": [34, 480, 482], "writer": [34, 41, 66, 71, 74, 105, 125, 135, 149, 157, 169, 192, 216, 245, 251, 258, 293, 319, 378, 410, 412, 415, 454, 464, 471, 477, 479, 482], "reserv": [34, 66, 92, 103, 117, 255, 259, 296, 299, 314, 319, 322, 333, 339, 344, 364, 397, 404, 409, 418, 421, 425, 427, 435, 442, 454, 462, 467, 469, 474, 479, 480, 482], "confus": [34, 61, 70, 82, 83, 90, 97, 99, 101, 102, 104, 106, 111, 114, 156, 175, 185, 189, 192, 224, 259, 269, 292, 293, 299, 319, 333, 368, 388, 394, 427, 429, 434, 435, 461, 462, 463, 464, 465, 466, 468, 470, 471, 473, 474, 476, 478, 479, 480, 482], "reader": [34, 66, 89, 96, 102, 103, 105, 125, 135, 149, 157, 159, 169, 195, 199, 201, 204, 216, 224, 241, 253, 258, 271, 272, 283, 288, 292, 299, 333, 337, 341, 386, 398, 409, 412, 413, 414, 415, 416, 427, 433, 454, 464, 466, 469, 471, 477, 482], "jeopard": 34, "portabl": [34, 63, 66, 71, 78, 79, 99, 103, 105, 130, 176, 214, 215, 218, 248, 250, 266, 275, 278, 293, 298, 299, 303, 306, 337, 342, 357, 365, 398, 402, 420, 447, 460, 461, 464, 470, 475, 479, 480, 482], "pythonvers": 34, "version_info": [34, 66, 78, 101, 111, 120, 298, 315, 340, 352, 354, 398, 449, 461, 468, 470, 472, 474, 475, 482], "parent": [34, 57, 59, 61, 66, 83, 96, 98, 99, 112, 116, 120, 132, 159, 176, 181, 188, 218, 224, 226, 247, 250, 253, 255, 256, 264, 267, 278, 280, 281, 283, 293, 294, 296, 302, 305, 309, 312, 314, 333, 337, 338, 341, 348, 352, 367, 368, 370, 375, 384, 388, 389, 394, 398, 409, 412, 420, 427, 431, 439, 463, 464, 465, 466, 467, 471, 473, 475, 476, 478, 479, 482], "pythonx": [34, 70, 108, 334, 344, 352, 398, 482], "break": [34, 55, 61, 62, 66, 73, 74, 76, 82, 88, 90, 92, 93, 99, 101, 102, 103, 108, 120, 127, 131, 135, 138, 144, 151, 157, 168, 169, 175, 176, 189, 192, 199, 201, 207, 246, 250, 255, 261, 264, 271, 283, 292, 297, 299, 307, 314, 319, 321, 326, 333, 335, 337, 341, 344, 345, 348, 352, 358, 360, 361, 363, 364, 383, 387, 393, 398, 399, 406, 410, 426, 427, 428, 429, 430, 432, 434, 439, 442, 444, 461, 462, 463, 464, 466, 467, 468, 470, 474, 475, 476, 477, 479, 480, 482], "extern": [34, 66, 71, 77, 82, 83, 88, 91, 97, 99, 104, 116, 119, 120, 151, 157, 166, 175, 183, 196, 215, 246, 249, 250, 255, 257, 267, 272, 293, 298, 311, 314, 338, 344, 348, 361, 364, 368, 387, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 427, 429, 460, 467, 469, 470, 472, 474, 477, 478, 479, 480, 481, 482], "closer": [34, 92, 331, 389, 399, 468, 469, 477, 482], "py_return_non": [34, 45, 71, 465], "py_ab": 34, "py_always_inlin": [34, 482], "ask": [34, 41, 83, 85, 88, 90, 99, 139, 160, 193, 222, 232, 234, 242, 246, 258, 269, 292, 297, 310, 319, 332, 339, 341, 344, 385, 394, 411, 412, 413, 421, 429, 431, 435, 460, 465, 466, 467, 468, 469, 472, 482], "inlin": [34, 50, 55, 56, 58, 62, 66, 85, 88, 166, 189, 190, 195, 196, 202, 204, 236, 308, 319, 387, 464, 466, 471, 474, 478, 480, 482], "critic": [34, 66, 73, 85, 98, 99, 116, 125, 249, 250, 267, 268, 269, 292, 405, 431, 450, 451, 464, 466, 467, 470, 472, 474, 477, 482], "msc": [34, 84, 482], "blind": [34, 101, 344, 476], "wors": [34, 83, 102, 103, 125, 182, 187, 262, 473, 475, 476, 482], "smarter": [34, 389, 470, 474, 482], "cost": [34, 70, 83, 88, 166, 182, 187, 189, 225, 234, 242, 250, 293, 344, 366, 368, 380, 385, 389, 421, 427, 461, 464, 467, 468, 472, 476, 482], "benefit": [34, 76, 83, 93, 99, 101, 104, 112, 185, 267, 268, 284, 299, 344, 352, 361, 375, 385, 401, 406, 460, 463, 464, 465, 468, 472, 474, 475, 479, 480, 482], "py_charmask": 34, "128": [34, 62, 85, 96, 99, 105, 141, 159, 176, 185, 225, 234, 259, 284, 293, 340, 341, 383, 397, 434, 448, 466, 477, 482], "127": [34, 62, 99, 103, 105, 125, 132, 135, 169, 244, 246, 259, 283, 293, 338, 341, 344, 348, 352, 361, 381, 466, 477, 482], "255": [34, 62, 66, 85, 90, 96, 105, 111, 157, 159, 176, 190, 224, 234, 259, 344, 347, 383, 429, 475, 477, 479, 482, 483], "py_deprec": [34, 480, 482], "pyapi_func": [34, 455, 464, 480, 482], "py_oldfunct": [34, 480], "msvc": [34, 61, 75, 84, 175, 420, 465, 480, 482], "py_getenv": 34, "getenv": [34, 66, 116, 293, 306], "py_max": 34, "py_member_s": 34, "py_min": 34, "py_no_inlin": [34, 482], "reduc": [34, 41, 54, 55, 66, 73, 76, 83, 93, 110, 125, 132, 176, 185, 223, 225, 234, 246, 258, 261, 293, 299, 308, 328, 341, 344, 361, 364, 385, 388, 401, 408, 412, 420, 434, 455, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "consumpt": [34, 73, 120, 255, 299, 322, 332, 352, 474, 475, 482], "lto": [34, 455, 472, 482], "pgo": [34, 66, 186, 361, 455, 467, 478, 481, 482], "heavili": [34, 108, 183, 250, 335, 426, 462, 478, 479], "33720": [34, 482], "py_stringifi": 34, "123": [34, 71, 88, 97, 99, 101, 102, 120, 185, 220, 224, 261, 268, 337, 344, 429, 439, 445, 461, 463, 467, 468, 470, 474], "py_unreach": [34, 479, 482], "claus": [34, 66, 93, 99, 113, 120, 138, 168, 212, 255, 283, 297, 314, 344, 352, 361, 427, 428, 429, 434, 435, 442, 461, 466, 467, 471, 472, 474, 476, 479, 480, 481, 482], "cover": [34, 55, 74, 77, 83, 90, 92, 97, 98, 99, 102, 103, 105, 108, 132, 168, 190, 192, 193, 207, 242, 268, 283, 292, 319, 335, 337, 344, 348, 368, 379, 385, 387, 393, 409, 423, 425, 426, 433, 454, 461, 462, 463, 466, 469, 471, 472, 475, 476, 482], "tempt": [34, 74, 99, 101, 102, 366], "__builtin_unreach": [34, 482], "_py_no_return": 34, "better": [34, 66, 70, 71, 73, 74, 76, 82, 83, 88, 91, 93, 97, 99, 101, 102, 103, 112, 118, 125, 137, 141, 158, 175, 189, 192, 210, 214, 222, 225, 227, 233, 234, 235, 246, 261, 266, 271, 283, 292, 293, 305, 308, 328, 340, 343, 348, 364, 365, 368, 375, 383, 387, 388, 389, 396, 412, 423, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482], "py_unus": [34, 56, 74, 482], "unus": [34, 56, 61, 74, 87, 88, 125, 149, 176, 229, 258, 259, 282, 283, 300, 313, 332, 338, 340, 345, 361, 400, 434, 460, 463, 467, 472, 476, 479, 481, 482], "silenc": [34, 57, 118, 224, 323, 332, 396, 468, 474, 476, 481, 482], "pydoc_strvar": [34, 44, 88, 97, 455, 482], "pop_doc": 34, "rightmost": [34, 147, 157, 159, 176, 185, 261, 293, 344, 429, 465], "deque_method": 34, "pycfunct": [34, 43, 55, 56, 71, 73, 74, 88, 97, 465, 482], "deque_pop": 34, "meth_noarg": [34, 49, 56, 66, 74, 463, 464, 482], "pydoc_str": [34, 61, 74, 482], "pysqlite_row_method": 34, "pysqlite_row_key": 34, "row": [34, 66, 71, 83, 86, 150, 174, 224, 298, 368, 375, 377, 383, 434, 441, 466, 470, 474, 477, 478, 482], "treat": [34, 45, 54, 56, 57, 61, 62, 64, 66, 82, 92, 93, 96, 97, 101, 102, 111, 118, 138, 139, 141, 157, 166, 176, 180, 182, 185, 187, 189, 192, 193, 202, 204, 215, 220, 225, 242, 244, 258, 259, 261, 267, 268, 271, 275, 292, 294, 296, 319, 331, 335, 340, 341, 343, 344, 345, 348, 357, 361, 363, 366, 368, 371, 375, 385, 387, 393, 394, 399, 400, 406, 411, 412, 426, 427, 428, 429, 434, 435, 460, 461, 463, 466, 467, 468, 469, 472, 475, 478, 480, 481, 482], "assign": [34, 37, 52, 61, 66, 71, 73, 74, 76, 77, 83, 85, 86, 87, 88, 91, 92, 93, 105, 110, 113, 118, 120, 125, 138, 157, 166, 175, 176, 180, 185, 190, 195, 201, 202, 204, 207, 211, 212, 224, 225, 242, 250, 264, 267, 271, 278, 283, 284, 292, 293, 296, 297, 299, 306, 314, 319, 330, 331, 337, 340, 341, 343, 344, 347, 351, 352, 361, 363, 364, 375, 385, 386, 387, 388, 399, 410, 412, 421, 424, 426, 427, 428, 430, 431, 432, 434, 439, 440, 441, 448, 455, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 477, 478, 479, 481, 482, 483], "fit": [34, 71, 96, 103, 118, 175, 176, 177, 185, 190, 192, 194, 214, 222, 235, 250, 259, 269, 292, 307, 308, 337, 343, 347, 363, 368, 383, 387, 394, 409, 420, 423, 425, 464, 465, 468, 471, 472, 474, 475, 476, 481, 482], "live": [34, 61, 65, 66, 68, 71, 82, 88, 99, 108, 151, 165, 182, 206, 222, 226, 246, 247, 251, 253, 254, 283, 289, 293, 299, 305, 315, 340, 341, 393, 401, 409, 424, 427, 445, 460, 461, 462, 463, 469, 474, 482], "sole": [34, 55, 83, 88, 92, 101, 108, 160, 185, 255, 283, 284, 340, 344, 363, 384, 401, 427, 429, 468, 471, 472, 475, 476, 477, 479, 482], "explain": [34, 41, 44, 61, 71, 73, 74, 75, 77, 83, 87, 90, 93, 96, 98, 99, 101, 102, 105, 106, 108, 112, 151, 175, 192, 212, 224, 234, 242, 244, 246, 261, 292, 297, 343, 344, 368, 375, 387, 388, 423, 429, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "hierarchi": [34, 44, 66, 83, 95, 98, 99, 114, 116, 144, 185, 224, 250, 254, 255, 262, 267, 268, 289, 290, 299, 302, 329, 333, 340, 344, 352, 368, 374, 375, 385, 387, 409, 412, 426, 429, 431, 432, 435, 464, 466, 469, 482, 483], "pylist_check": [34, 37, 77], "today": [34, 66, 70, 92, 101, 105, 166, 181, 182, 210, 288, 295, 340, 389, 418, 434, 450, 462, 464, 465, 467, 480], "obvious": [34, 61, 71, 88, 93, 98, 99, 102, 108, 166, 176, 185, 267, 292, 295, 299, 308, 323, 347, 348, 361, 378, 388, 389, 412, 460, 461, 465, 466, 472, 478, 482], "solut": [34, 66, 71, 82, 83, 88, 91, 92, 93, 97, 99, 101, 102, 103, 105, 108, 131, 180, 185, 235, 246, 261, 299, 319, 333, 338, 340, 343, 350, 389, 425, 431, 460, 461, 463, 464, 465, 466, 467, 468, 470, 474, 480, 482], "py_incref": [34, 50, 55, 65, 71, 73, 74, 84, 85, 471, 472, 480, 482], "incref": [34, 61, 482], "sizeof": [34, 41, 61, 66, 74, 116, 175, 303, 347, 352, 388, 420, 482], "theori": [34, 82, 319, 425, 476, 477], "goe": [34, 75, 87, 88, 91, 97, 101, 102, 120, 132, 166, 168, 176, 177, 192, 229, 242, 246, 268, 275, 283, 292, 314, 343, 352, 380, 426, 463, 471, 474, 475], "down": [34, 66, 70, 74, 83, 93, 98, 101, 103, 108, 125, 138, 151, 159, 176, 178, 192, 211, 221, 235, 244, 246, 267, 275, 283, 293, 296, 297, 308, 309, 319, 328, 333, 337, 338, 341, 352, 370, 375, 383, 387, 393, 406, 451, 454, 461, 463, 464, 468, 472, 477, 478, 479, 480, 481, 482], "cancel": [34, 66, 123, 124, 125, 128, 133, 134, 137, 141, 151, 163, 165, 168, 176, 177, 188, 213, 281, 314, 325, 333, 364, 367, 370, 374, 375, 383, 387, 426, 429, 472, 474, 479, 480, 481, 482], "we": [34, 55, 62, 70, 71, 73, 74, 83, 86, 87, 88, 89, 91, 92, 93, 98, 99, 100, 102, 103, 105, 106, 108, 112, 118, 120, 121, 125, 128, 132, 133, 135, 138, 139, 144, 155, 156, 159, 165, 166, 168, 169, 175, 182, 189, 193, 195, 199, 201, 204, 207, 210, 212, 231, 234, 235, 241, 242, 246, 249, 251, 261, 266, 268, 269, 283, 284, 289, 292, 293, 296, 299, 319, 332, 333, 338, 340, 341, 343, 344, 345, 348, 361, 366, 368, 377, 381, 385, 387, 388, 389, 394, 397, 399, 401, 406, 410, 412, 418, 421, 423, 426, 427, 429, 430, 431, 440, 442, 445, 461, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 478, 480, 481, 482], "aris": [34, 185, 258, 267, 268, 299, 343, 384, 425, 429, 463, 465, 474, 480, 482], "pitfal": [34, 66, 102, 117, 472, 482], "conceiv": [34, 299, 357], "innoc": 34, "flow": [34, 66, 71, 93, 129, 132, 176, 177, 185, 264, 348, 358, 385, 426, 428, 429, 461, 463, 464, 466, 467, 477, 482], "pyobject_": [34, 44, 61, 466], "pynumber_": 34, "pysequence_": 34, "pymapping_": 34, "soon": [34, 82, 88, 90, 101, 102, 103, 105, 138, 192, 227, 231, 261, 283, 293, 297, 344, 359, 361, 410, 426, 427, 464, 466, 476, 481, 482], "term": [34, 71, 88, 91, 93, 101, 108, 114, 121, 138, 176, 185, 208, 212, 220, 234, 242, 250, 258, 262, 267, 275, 289, 292, 299, 308, 343, 345, 361, 365, 368, 384, 398, 400, 401, 406, 413, 425, 426, 430, 431, 465, 467, 468, 470, 475, 476, 478, 480, 482], "ownership": [34, 66, 97, 99, 125, 135, 257, 283, 286, 364, 467, 475, 482], "decref": [34, 61, 62, 482], "ing": [34, 62, 77, 102, 103, 192, 242, 468, 472, 475, 479, 482], "py_xdecref": [34, 44, 50, 61, 70, 71, 74, 472, 480, 482], "said": [34, 83, 90, 91, 166, 212, 283, 426, 427, 434, 448, 462, 463, 472, 478, 482], "notabl": [34, 66, 68, 97, 136, 190, 283, 284, 333, 340, 390, 399, 424, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 483], "pylist_setitem": [34, 37, 55, 71], "pytuple_setitem": [34, 53, 55, 58, 70, 71], "moment": [34, 83, 88, 101, 105, 182, 212, 258, 283, 293, 343, 400, 431, 478, 482], "pytuple_new": [34, 55, 58, 70], "1l": [34, 463, 464, 467, 468, 482], "2l": [34, 461], "grab": [34, 83, 98, 99, 364, 460, 482], "incident": [34, 83, 108, 212, 251, 384, 425, 482], "pysequence_setitem": [34, 37, 52, 55, 61, 482], "pyobject_setitem": [34, 39, 48, 55, 61, 466, 482], "practic": [34, 41, 61, 66, 72, 74, 82, 85, 90, 92, 93, 94, 96, 98, 99, 101, 106, 118, 121, 139, 173, 176, 177, 185, 192, 193, 198, 222, 224, 234, 241, 247, 251, 255, 283, 284, 288, 305, 335, 340, 341, 344, 347, 365, 368, 385, 393, 410, 424, 427, 429, 462, 463, 464, 469, 471, 472, 474, 476, 479, 482], "rare": [34, 61, 82, 125, 132, 139, 176, 180, 192, 198, 212, 222, 234, 242, 246, 258, 267, 292, 330, 333, 337, 344, 357, 385, 389, 406, 409, 462, 463, 466, 467, 471, 472, 475, 482], "iis": [34, 406], "friend": [34, 61, 71, 90, 99, 108, 118, 189, 193, 226, 292, 337, 344, 352, 387, 389, 412, 424, 461, 465, 469, 476, 479, 481, 482], "regard": [34, 61, 88, 97, 98, 114, 168, 204, 225, 234, 269, 293, 340, 343, 344, 348, 409, 412, 425, 460, 471, 472, 482], "saner": 34, "set_al": [34, 225], "pyobject_length": [34, 48, 55], "pylong_fromssize_t": [34, 38, 55], "slight": [34, 73, 77, 83, 87, 88, 93, 98, 99, 104, 106, 108, 168, 174, 185, 195, 214, 229, 242, 251, 258, 292, 293, 294, 297, 307, 308, 341, 344, 383, 389, 393, 431, 435, 461, 463, 464, 465, 466, 467, 468, 472, 474, 476, 477, 479, 481, 482], "fli": [34, 66, 73, 100, 185, 224, 245, 426, 438], "pysequence_getitem": [34, 52, 55, 61, 77, 482], "owner": [34, 66, 71, 91, 95, 99, 180, 218, 283, 293, 296, 332, 342, 357, 425, 427, 451, 478, 482], "realiz": [34, 76, 77, 101, 103, 207, 466, 467, 482], "plumag": [34, 71, 440], "pylist_getitem": [34, 37, 55, 71, 77, 482], "sum_list": 34, "pylist_s": [34, 37, 55, 466], "pylong_check": [34, 38, 61], "bail": 34, "sum_sequ": 34, "pysequence_length": [34, 52, 55, 77], "role": [34, 157, 341, 412, 469, 474, 480, 482], "integr": [34, 64, 66, 71, 83, 85, 95, 99, 103, 113, 116, 185, 192, 220, 224, 246, 270, 275, 289, 290, 319, 338, 340, 344, 347, 364, 367, 368, 387, 388, 389, 400, 427, 429, 456, 460, 461, 464, 465, 467, 469, 473, 474, 475, 479, 480, 481, 482], "353": [34, 66, 471, 482, 483], "py_ssize_t_max": [34, 46, 54, 88, 482], "largest": [34, 66, 93, 97, 166, 182, 185, 186, 222, 235, 275, 322, 343, 344, 352, 361, 423, 461, 462, 463, 464, 465, 466, 467, 475, 482], "unhandl": [34, 64, 113, 151, 156, 168, 192, 227, 246, 352, 364, 380, 394, 427, 442, 469, 482], "accompani": [34, 190, 271, 335, 337, 427, 462, 474, 482], "claim": [34, 71, 101, 189, 198, 341, 425, 482], "unthread": [34, 461], "loop": [34, 35, 44, 62, 64, 66, 71, 76, 90, 93, 98, 99, 102, 103, 120, 121, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 147, 156, 158, 175, 176, 183, 185, 188, 190, 195, 204, 217, 223, 224, 231, 254, 257, 269, 283, 294, 296, 297, 308, 309, 319, 332, 333, 337, 338, 341, 344, 345, 348, 350, 352, 361, 364, 366, 368, 380, 383, 387, 388, 411, 412, 419, 426, 427, 428, 429, 430, 434, 435, 439, 440, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "overwrit": [34, 66, 71, 88, 98, 99, 110, 116, 149, 162, 176, 180, 195, 199, 204, 258, 267, 269, 270, 293, 320, 330, 344, 357, 394, 420, 421, 426, 427, 440, 460, 464, 467, 468, 470, 474, 475, 476, 482], "principl": [34, 71, 83, 185, 388, 406, 475], "task": [34, 66, 71, 83, 85, 93, 97, 98, 102, 105, 108, 113, 122, 124, 126, 128, 129, 133, 134, 135, 137, 139, 147, 165, 166, 168, 169, 200, 206, 231, 235, 246, 249, 259, 267, 269, 271, 283, 293, 296, 299, 308, 316, 322, 338, 340, 348, 364, 387, 393, 419, 429, 451, 455, 461, 463, 467, 468, 470, 471, 472, 474, 477, 478, 479, 480, 481, 482], "lose": [34, 41, 92, 102, 166, 182, 185, 210, 212, 239, 242, 261, 269, 271, 318, 319, 340, 348, 461, 468, 474, 482], "remind": [34, 83, 344, 440, 469, 482], "whi": [34, 66, 71, 73, 88, 90, 91, 92, 93, 96, 98, 101, 105, 108, 112, 114, 151, 166, 175, 192, 200, 234, 253, 261, 271, 275, 283, 292, 299, 345, 387, 388, 389, 406, 427, 460, 463, 466, 468, 472, 479, 482], "incr_item": 34, "glori": 34, "const_on": 34, "incremented_item": 34, "0l": [34, 71], "pynumber_add": [34, 46, 55], "endors": [34, 425, 482], "illustr": [34, 83, 88, 97, 98, 99, 106, 118, 138, 172, 182, 192, 207, 239, 242, 250, 268, 331, 333, 340, 344, 348, 358, 368, 387, 394, 398, 426, 429, 465, 475], "dispos": [34, 71, 387], "confront": [34, 413, 464], "likewis": [34, 53, 83, 92, 104, 110, 118, 185, 189, 207, 208, 210, 267, 271, 338, 383, 414, 433, 434, 474, 475, 482], "propos": [34, 76, 78, 85, 153, 165, 174, 225, 267, 341, 344, 348, 401, 409, 426, 429, 431, 434, 435, 461, 462, 464, 465, 466, 467, 468, 474, 478, 480, 482], "embedd": [34, 66, 243, 283, 457, 480, 482], "oppos": [34, 74, 88, 90, 102, 120, 125, 156, 200, 207, 222, 246, 337, 343, 394, 431, 467, 477, 482], "worri": [34, 71, 73, 88, 90, 98, 101, 105, 108, 151, 182, 193, 292, 319, 347, 387, 463, 468, 475], "guess": [34, 82, 157, 166, 183, 192, 199, 205, 208, 244, 250, 255, 266, 276, 308, 394, 406, 433, 455, 464, 474, 482], "shell": [34, 66, 71, 74, 77, 78, 83, 84, 85, 90, 93, 99, 108, 109, 123, 125, 129, 136, 151, 155, 163, 166, 176, 192, 219, 221, 230, 254, 255, 262, 272, 284, 288, 292, 293, 294, 309, 313, 332, 340, 350, 352, 353, 361, 367, 368, 387, 398, 399, 404, 437, 438, 446, 447, 449, 450, 452, 454, 455, 458, 459, 461, 463, 465, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "fallback": [34, 66, 125, 162, 167, 183, 216, 229, 299, 332, 352, 357, 361, 375, 405, 427, 431, 471, 474, 480, 482], "front": [34, 37, 88, 102, 168, 200, 207, 246, 261, 296, 302, 389, 399, 406, 422, 427, 429, 454, 461, 464, 466, 468, 482], "steer": [34, 111, 462, 465, 472, 474, 482], "getpath": [34, 482], "sometim": [34, 71, 77, 82, 83, 90, 91, 92, 93, 96, 97, 99, 101, 102, 103, 105, 106, 108, 110, 112, 114, 118, 121, 134, 138, 151, 157, 168, 175, 176, 185, 187, 189, 192, 202, 212, 222, 224, 225, 234, 239, 246, 255, 259, 261, 268, 271, 288, 292, 293, 299, 306, 308, 319, 341, 342, 365, 368, 383, 385, 388, 389, 394, 412, 427, 429, 433, 435, 461, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 481, 482], "notic": [34, 55, 71, 74, 87, 88, 97, 98, 99, 102, 103, 104, 106, 108, 110, 121, 131, 132, 157, 166, 172, 183, 185, 201, 217, 226, 230, 250, 258, 269, 283, 332, 337, 340, 354, 361, 368, 385, 425, 427, 429, 460, 462, 464, 468, 471, 472, 474, 475, 479, 480, 482], "tend": [34, 76, 83, 97, 149, 189, 225, 305, 308, 470], "specialbuild": [34, 455], "remaind": [34, 46, 66, 73, 95, 102, 118, 155, 182, 185, 207, 261, 268, 275, 290, 292, 294, 296, 319, 344, 365, 368, 429, 448, 467, 479, 482], "pydebug": [34, 352, 361, 455, 464, 471, 476, 482], "_debug": 34, "doubli": [34, 61, 83, 468], "pyiter_check": [35, 55, 61, 482], "pyiter_next": [35, 55, 61], "pyaiter_check": [35, 55, 482], "asynciter": [35, 48, 66, 160, 181, 186, 344, 385, 477, 482], "pyobject_getit": [35, 48, 53, 55, 61], "pysendresult": [35, 61], "enum": [35, 41, 66, 94, 118, 162, 181, 240, 254, 255, 262, 308, 311, 319, 333, 341, 384, 427, 440, 475, 482], "pyiter_send": [35, 55, 61, 471, 482], "presult": 35, "pygen_return": 35, "pygen_next": 35, "pygen_error": 35, "__getitem__": [36, 39, 52, 61, 62, 66, 78, 85, 95, 99, 104, 114, 159, 160, 175, 181, 193, 195, 202, 204, 210, 217, 223, 224, 271, 283, 285, 291, 319, 344, 345, 362, 385, 388, 389, 406, 409, 411, 412, 426, 429, 451, 463, 464, 465, 469, 472, 474, 478, 480, 482], "pyseqiter_typ": [36, 55], "pyseqiter_new": [36, 55], "pyseqiter_check": 36, "seq": [36, 62, 83, 159, 219, 224, 261, 291, 318, 344, 461, 465, 472, 474], "subscript": [36, 61, 66, 85, 175, 212, 246, 264, 344, 385, 427, 435, 448, 454, 464, 467, 471, 472, 481, 482], "pycalliter_typ": [36, 55], "pycalliter_new": [36, 55], "pycalliter_check": 36, "pylist_typ": [37, 55, 74], "pylist_checkexact": 37, "pylist_get_s": 37, "pylist_get_item": [37, 55], "pylist_set_item": [37, 471, 482], "pylist_insert": [37, 55], "pylist_append": [37, 55], "pylist_getslic": [37, 55], "pylist_setslic": [37, 55], "itemlist": 37, "pylist_sort": [37, 55], "sort": [37, 66, 74, 75, 78, 82, 85, 87, 93, 106, 110, 118, 147, 151, 159, 166, 172, 175, 183, 185, 189, 192, 207, 224, 225, 230, 231, 235, 247, 251, 254, 255, 256, 259, 261, 262, 266, 271, 283, 291, 292, 293, 296, 304, 307, 308, 316, 318, 319, 328, 335, 340, 343, 344, 357, 361, 381, 383, 387, 394, 406, 409, 412, 421, 427, 429, 439, 440, 441, 449, 451, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 479, 480, 481, 482], "pylist_revers": [37, 55], "pylist_astupl": [37, 55], "pylong_a": 38, "distinguish": [38, 61, 66, 71, 120, 154, 160, 176, 186, 190, 192, 196, 224, 242, 255, 268, 275, 314, 341, 354, 375, 385, 399, 423, 427, 429, 431, 460, 462, 463, 468, 471, 475, 476, 482], "pylongobject": [38, 55], "pylong_typ": [38, 55], "pylong_checkexact": 38, "256": [38, 41, 62, 85, 96, 157, 172, 176, 185, 224, 234, 270, 326, 341, 344, 357, 427, 448, 465, 466, 480, 481, 482], "pylong_fromunsignedlong": [38, 55, 482], "pylong_fromsize_t": [38, 55, 482], "pylong_fromlonglong": [38, 55, 482], "pylong_fromunsignedlonglong": [38, 55, 482], "pylong_fromdoubl": [38, 55, 481, 482], "pylong_fromstr": [38, 55, 482], "radix": [38, 66, 185, 266, 290, 352, 434, 482], "decim": [38, 57, 62, 66, 76, 83, 102, 105, 154, 157, 166, 177, 182, 220, 224, 225, 239, 254, 259, 261, 262, 266, 268, 275, 290, 292, 308, 319, 343, 344, 345, 352, 362, 364, 365, 377, 378, 386, 387, 418, 425, 427, 429, 434, 443, 444, 448, 454, 455, 461, 466, 467, 468, 470, 471, 472, 480, 482, 483], "36": [38, 98, 100, 105, 224, 261, 271, 283, 318, 322, 343, 345, 365, 441, 445, 448, 450, 451, 452, 471, 474, 476, 480, 481, 482], "underscor": [38, 55, 66, 69, 83, 88, 92, 99, 146, 151, 157, 175, 185, 195, 204, 220, 224, 271, 307, 317, 319, 331, 344, 345, 352, 353, 368, 388, 406, 421, 426, 427, 428, 429, 433, 434, 435, 467, 469, 470, 472, 473, 482], "digit": [38, 57, 62, 66, 83, 97, 102, 103, 105, 115, 141, 143, 146, 154, 157, 159, 172, 177, 182, 185, 192, 220, 222, 234, 243, 259, 266, 268, 275, 288, 293, 319, 321, 326, 340, 341, 344, 345, 352, 361, 362, 365, 366, 368, 377, 386, 387, 393, 394, 397, 412, 423, 425, 434, 443, 455, 461, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 478, 482], "pylong_fromunicodeobject": [38, 471], "pylong_fromvoidptr": [38, 55], "pylong_asvoidptr": [38, 55], "__int__": [38, 61, 66, 220, 224, 385, 388, 427, 466, 468, 471, 472, 479, 480, 482], "pylong_aslongandoverflow": [38, 55, 468, 474], "long_min": 38, "pylong_aslonglong": [38, 55], "pylong_aslonglongandoverflow": [38, 55, 468, 474], "llong_max": 38, "llong_min": 38, "pylong_asssize_t": [38, 55], "pylong": [38, 470, 482], "pylong_asunsignedlong": [38, 55], "pylong_assize_t": [38, 55], "pylong_asunsignedlonglong": [38, 55, 470], "pylong_asunsignedlongmask": [38, 55], "reduct": [38, 66, 76, 171, 298, 344, 475, 482], "modulo": [38, 99, 185, 212, 224, 291, 333, 344, 375, 427, 429, 445, 464, 468, 474, 480, 482], "ulong_max": 38, "pylong_asunsignedlonglongmask": [38, 55, 482], "ullong_max": 38, "pylong_asdoubl": [38, 55, 482], "assur": [38, 74, 83, 154, 225, 275, 283, 377, 427, 468, 470, 474, 482], "pyobject_delitem": [39, 48, 55, 61, 464], "pymapping_check": [39, 55, 61], "pymapping_s": [39, 55, 61, 482], "pymapping_length": [39, 55], "pymapping_getitemstr": [39, 55], "pymapping_setitemstr": [39, 55, 482], "pymapping_delitem": 39, "del": [39, 48, 52, 56, 66, 71, 74, 83, 86, 91, 97, 120, 144, 159, 177, 190, 195, 204, 224, 226, 229, 235, 246, 255, 264, 271, 283, 284, 291, 292, 293, 296, 299, 330, 344, 388, 401, 426, 427, 428, 429, 430, 431, 432, 434, 439, 440, 444, 451, 461, 462, 464, 466, 467, 468, 474, 482], "pymapping_delitemstr": 39, "pymapping_haskey": [39, 55], "pymapping_haskeystr": [39, 55], "pymapping_valu": [39, 55, 479, 482], "pymapping_item": [39, 55, 479, 482], "unmarshal": [40, 418, 464, 466, 478, 482], "py_marshal_vers": [40, 472, 482], "pymarshal_writelongtofil": [40, 472, 482], "pymarshal_writeobjecttofil": [40, 472, 482], "pymarshal_writeobjecttostr": [40, 472, 482], "pymarshal_readlongfromfil": 40, "pymarshal_readshortfromfil": 40, "pymarshal_readobjectfromfil": 40, "pymarshal_readlastobjectfromfil": 40, "aggress": [40, 344, 388, 466, 482], "pymarshal_readobjectfromstr": [40, 472, 482], "aspect": [41, 70, 71, 88, 92, 99, 102, 106, 180, 182, 192, 250, 268, 293, 335, 427, 474, 478], "prealloc": 41, "room": [41, 53, 343, 388, 433, 445, 469, 482], "polici": [41, 55, 66, 99, 122, 125, 130, 193, 195, 199, 200, 202, 204, 205, 206, 212, 224, 242, 285, 293, 335, 338, 341, 398, 455, 460, 462, 465, 468, 471, 473, 476, 477, 478, 482], "adapt": [41, 66, 83, 99, 120, 141, 175, 185, 190, 224, 229, 267, 297, 298, 332, 337, 341, 368, 383, 461, 462, 466, 468, 470, 471, 473, 478, 482], "peculiar": [41, 83, 125, 255, 293], "tradeoff": [41, 482], "deleg": [41, 61, 66, 97, 98, 99, 139, 224, 225, 233, 267, 268, 269, 275, 289, 299, 324, 384, 387, 389, 427, 429, 431, 469, 472, 474, 478, 480, 481, 482, 483], "corrupt": [41, 57, 91, 105, 146, 176, 211, 214, 242, 270, 271, 283, 299, 340, 344, 460, 479, 480, 482], "calloc": [41, 477, 482], "consequ": [41, 61, 71, 76, 83, 147, 160, 166, 235, 255, 283, 293, 296, 333, 337, 344, 427, 429, 433, 434, 466, 468, 469, 474, 475, 476, 477, 479, 482], "bufsiz": [41, 66, 71, 118, 125, 295, 337, 348, 350, 357, 410, 411, 423, 465, 480, 482], "exclus": [41, 46, 61, 66, 83, 102, 103, 108, 116, 149, 150, 176, 185, 214, 247, 258, 262, 269, 270, 271, 291, 292, 293, 319, 340, 343, 344, 357, 379, 381, 402, 421, 425, 427, 429, 467, 475, 476, 477, 480, 481, 482], "accur": [41, 88, 101, 175, 206, 244, 275, 292, 308, 352, 357, 365, 366, 368, 381, 400, 421, 465, 467, 468, 474, 476, 478, 479, 480, 482], "footprint": [41, 90, 226, 455, 475, 478, 480, 482], "compact": [41, 83, 102, 105, 120, 151, 155, 189, 196, 197, 262, 299, 307, 317, 347, 380, 429, 464, 475, 476, 478, 482], "procedur": [41, 70, 78, 93, 100, 119, 151, 157, 175, 294, 308, 335, 346, 361, 383, 417, 418, 435, 440, 462, 463, 466, 474], "pythonmalloc": [41, 66, 187, 454, 455, 482], "shutdown": [41, 66, 85, 97, 103, 116, 125, 134, 140, 163, 165, 211, 212, 226, 247, 256, 267, 269, 283, 284, 333, 337, 338, 341, 364, 401, 404, 427, 429, 454, 467, 474, 476, 477, 479, 481, 482], "pymemallocatordomain": 41, "hard": [41, 66, 70, 71, 74, 76, 88, 90, 91, 93, 97, 99, 101, 102, 103, 162, 166, 174, 175, 176, 182, 189, 192, 201, 224, 267, 268, 292, 293, 296, 297, 308, 319, 322, 340, 341, 348, 357, 361, 374, 389, 460, 461, 474, 476, 479, 480, 482], "pyobject_malloc": [41, 55, 464, 466, 476, 478, 482], "pymem_malloc": [41, 55, 62, 64, 464, 466, 476, 478, 482], "nelem": 41, "elsiz": 41, "model": [41, 58, 60, 66, 82, 83, 91, 125, 168, 182, 185, 193, 195, 204, 254, 273, 283, 293, 306, 318, 335, 341, 343, 364, 367, 383, 394, 410, 411, 414, 432, 460, 461, 463, 464, 465, 466, 472, 474, 476, 477, 478, 479, 480, 482, 483], "ansi": [41, 66, 85, 118, 145, 175, 266, 293, 352, 365, 460, 461, 473, 475, 478, 480, 482], "pymem_calloc": [41, 55, 477, 482], "pymem_realloc": [41, 55, 64, 464, 466, 476], "pymem_new": [41, 62, 462], "pymem_res": 41, "pymem_del": [41, 462], "intercept": [41, 99, 138, 343, 352, 478, 482], "pyobject_calloc": [41, 55, 477, 482], "pyobject_realloc": [41, 55, 464, 466, 482], "pyobject_fre": [41, 55, 61, 464, 466, 478, 482], "pymalloc_debug": [41, 454, 482], "malloc_debug": [41, 454], "legend": 41, "pymemallocatorex": [41, 477], "new_siz": [41, 472], "pymemalloc": [41, 477], "renam": [41, 61, 66, 74, 82, 99, 108, 110, 116, 142, 159, 212, 218, 222, 246, 247, 256, 269, 271, 293, 296, 311, 328, 332, 342, 380, 387, 388, 420, 451, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 482], "pymem_domain_raw": [41, 454], "pymem_domain_mem": [41, 454, 478, 482], "pymem_domain_obj": [41, 454, 478], "reinstal": [41, 108, 460], "setup": [41, 66, 71, 74, 90, 99, 106, 108, 168, 186, 192, 221, 246, 256, 296, 338, 341, 361, 366, 383, 387, 388, 389, 452, 454, 455, 458, 460, 461, 462, 463, 464, 466, 467, 468, 472, 473, 474, 475, 478, 480, 482], "recogniz": [41, 160, 185, 482], "pattern": [41, 61, 66, 74, 83, 91, 98, 104, 105, 142, 144, 162, 168, 177, 186, 188, 189, 190, 218, 225, 246, 247, 254, 261, 264, 267, 275, 281, 283, 284, 288, 292, 293, 296, 297, 308, 318, 319, 332, 344, 345, 361, 362, 368, 370, 381, 383, 385, 387, 388, 389, 401, 428, 429, 430, 434, 440, 455, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 482], "0xcd": [41, 482], "pymem_cleanbyt": 41, "0xdd": [41, 482], "pymem_deadbyt": 41, "surround": [41, 77, 93, 102, 166, 174, 189, 224, 243, 246, 266, 345, 348, 373, 398, 426, 428, 429, 430, 434, 449, 455, 461, 466, 467, 468, 469, 470, 478, 482], "0xfd": [41, 482], "pymem_forbiddenbyt": 41, "underflow": [41, 66, 185, 187, 290, 455, 478, 482], "treatment": [41, 48, 99, 193, 283, 343, 393, 461, 469], "easier": [41, 74, 82, 85, 88, 90, 93, 95, 97, 101, 102, 104, 108, 113, 121, 139, 160, 165, 168, 174, 192, 205, 250, 252, 259, 269, 293, 308, 313, 319, 344, 345, 361, 373, 387, 388, 389, 393, 406, 433, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 482], "excess": [41, 83, 108, 110, 120, 132, 146, 175, 185, 241, 267, 321, 365, 426, 429, 471, 482], "overwritten": [41, 88, 99, 108, 242, 271, 296, 308, 332, 352, 385, 426, 468, 475, 482], "pymem_debug_serialno": [41, 482], "excel": [41, 66, 83, 105, 174, 192, 199, 216, 464, 465, 469], "breakpoint": [41, 66, 77, 83, 121, 142, 144, 147, 184, 224, 246, 254, 297, 352, 454, 466, 471, 474, 482], "captur": [41, 66, 90, 93, 99, 120, 168, 175, 182, 192, 265, 267, 293, 319, 341, 345, 348, 352, 356, 361, 380, 385, 399, 428, 465, 471, 472, 475, 476, 477, 479, 482], "instant": [41, 66, 90, 184, 293, 383], "bumpserialno": 41, "obmalloc": [41, 462, 464, 466, 476, 481, 482], "intact": [41, 99, 166, 182, 202, 204, 207, 217, 269, 345, 406, 465], "ve": [41, 74, 87, 88, 92, 93, 95, 96, 99, 102, 103, 105, 108, 112, 138, 152, 251, 271, 292, 296, 340, 368, 461, 462, 463, 464, 465, 467, 468, 470, 476, 482], "provok": 41, "0xcb": [41, 478, 482], "0xdb": [41, 478, 482], "0xfb": [41, 478, 482], "crt": [41, 66, 341, 468, 476, 482], "512": [41, 130, 172, 234, 293, 328, 357, 423, 445, 466, 474, 478, 480, 482], "kib": [41, 113, 135, 270, 293, 332, 364, 381, 480, 482], "virtualalloc": [41, 476], "virtualfre": 41, "mmap": [41, 66, 142, 212, 254, 260, 461, 467, 472, 474, 477, 478, 482], "munmap": 41, "pyobjectarenaalloc": 41, "pytracemalloc_track": [41, 479], "uintptr_t": 41, "pytracemalloc_untrack": [41, 479], "untrack": [41, 74, 470, 482], "rewritten": [41, 88, 134, 192, 193, 234, 283, 435, 461, 462, 463, 464, 467, 468, 470, 474, 475, 476, 478, 479, 480, 482], "inde": [41, 74, 76, 103, 136, 194, 341], "label": [41, 66, 76, 92, 93, 157, 188, 190, 246, 271, 281, 292, 318, 331, 341, 345, 367, 368, 374, 385, 427, 460, 463, 464, 474, 476, 479, 482], "buf1": 41, "buf2": 41, "buf3": 41, "aim": [41, 70, 73, 96, 101, 105, 134, 270, 281, 343, 352, 385, 412, 460, 463, 465, 466, 476, 480], "pymemoryview_fromobject": [42, 55], "discret": [42, 66, 277, 290, 338, 343, 480], "pymemoryview_frommemori": [42, 55, 475], "pybuf_read": 42, "pymemoryview_getcontigu": [42, 55], "buffertyp": 42, "ortran": 42, "pymemoryview_check": 42, "pymemoryview_get_buff": 42, "mview": 42, "pymemoryview_get_bas": 42, "pymethod_new": 43, "pyinstancemethod_typ": 43, "pyinstancemethod_check": 43, "pyinstancemethod_new": 43, "pyinstancemethod_funct": 43, "im": [43, 83, 90, 344], "pyinstancemethod_get_funct": 43, "pymethod_typ": [43, 91], "methodtyp": [43, 66, 91, 181, 384, 482], "pymethod_check": 43, "pymethod_funct": 43, "pymethod_get_funct": 43, "pymethod_self": 43, "pymethod_get_self": 43, "pymodule_typ": [44, 55], "moduletyp": [44, 66, 181, 250, 252, 384, 427, 431, 464, 477, 482], "pymodule_check": 44, "pymodule_checkexact": 44, "pymodule_newobject": [44, 55], "__doc__": [44, 61, 66, 73, 78, 82, 85, 91, 92, 156, 159, 181, 189, 192, 210, 224, 225, 255, 289, 313, 320, 323, 384, 426, 427, 434, 439, 440, 449, 462, 463, 464, 469, 471, 474, 476, 477, 481, 482], "__package__": [44, 66, 181, 224, 250, 324, 384, 431, 449, 467, 471, 473, 475, 476, 478, 482], "pymodule_new": [44, 55], "pymodule_getdict": [44, 55], "__dict__": [44, 48, 61, 66, 83, 86, 91, 97, 99, 114, 144, 148, 192, 224, 225, 250, 255, 267, 269, 297, 299, 308, 344, 384, 418, 426, 427, 431, 439, 462, 463, 468, 469, 471, 473, 477, 478, 482], "pymodule_": 44, "pymodule_getnameobject": [44, 55], "pymodule_getnam": [44, 55], "pymoduledef": [44, 55, 59, 69, 70, 71, 74, 88, 97, 481, 482], "m_size": [44, 74, 97, 481, 482], "pymodule_getdef": [44, 55], "pymodule_getfilenameobject": [44, 55], "pymodule_getfilenam": [44, 55], "pymoduledef_bas": [44, 55], "m_base": 44, "pymoduledef_head_init": [44, 70, 71, 74], "m_name": [44, 74], "m_doc": [44, 74], "m_free": [44, 97, 481, 482], "3121": [44, 469, 482], "m_method": [44, 482], "pymoduledef_slot": 44, "m_slot": 44, "m_reload": 44, "m_travers": [44, 97, 481, 482], "py_mod_exec": [44, 481, 482], "m_clear": [44, 97, 481, 482], "collector": [44, 49, 61, 66, 71, 74, 83, 85, 93, 97, 213, 254, 283, 292, 315, 352, 361, 401, 410, 427, 455, 461, 463, 466, 467, 468, 470, 471, 473, 475, 476, 479, 481, 482], "freefunc": [44, 61, 73], "pymodule_create2": [44, 55], "module_api_vers": 44, "python_api_vers": [44, 464], "pymodule_addobjectref": [44, 55, 471, 482], "split": [44, 62, 66, 76, 82, 83, 99, 104, 118, 141, 155, 157, 166, 185, 189, 190, 195, 199, 201, 207, 212, 218, 221, 227, 229, 247, 261, 281, 291, 292, 293, 294, 297, 303, 307, 318, 319, 321, 331, 335, 340, 341, 344, 345, 348, 362, 363, 377, 385, 387, 393, 398, 406, 414, 434, 439, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "__new__": [44, 59, 61, 66, 74, 78, 83, 88, 91, 119, 142, 202, 210, 212, 224, 274, 278, 296, 299, 337, 381, 384, 388, 427, 476, 478, 480, 482], "__init__": [44, 59, 61, 66, 74, 76, 77, 78, 83, 85, 88, 91, 98, 99, 103, 104, 112, 116, 118, 121, 127, 132, 139, 148, 159, 160, 166, 168, 171, 174, 175, 182, 183, 189, 193, 212, 213, 224, 225, 237, 240, 244, 250, 251, 252, 253, 261, 262, 267, 268, 269, 281, 283, 299, 302, 308, 315, 320, 333, 340, 345, 361, 362, 364, 368, 381, 384, 385, 387, 388, 389, 398, 401, 406, 409, 413, 421, 427, 431, 439, 449, 451, 461, 462, 463, 464, 466, 467, 471, 472, 475, 478, 480, 482], "pyinit_modulenam": [44, 69], "pymoduledef_init": [44, 55], "py_mod_cr": 44, "create_modul": [44, 66, 250, 280, 422, 431, 471, 477, 478, 482], "451": [44, 66, 85, 159, 240, 250, 302, 324, 352, 431, 471, 473, 477, 482], "symlink": [44, 66, 116, 142, 162, 230, 257, 292, 293, 294, 296, 311, 332, 398, 449, 458, 459, 465, 467, 471, 474, 475, 476, 480, 482], "exec_modul": [44, 66, 97, 250, 280, 422, 431, 471, 476, 477, 478, 482], "489": [44, 66, 69, 71, 250, 481, 482], "hood": [44, 98, 99, 102, 361, 388, 389, 466, 467, 474], "pymodule_execdef": [44, 55, 477], "pymodule_fromdefandspec2": [44, 55, 477], "pymodule_setdocstr": [44, 55], "pymodule_addfunct": [44, 55], "lack": [44, 45, 83, 96, 174, 212, 215, 246, 250, 283, 293, 294, 335, 341, 359, 421, 428, 429, 460, 461, 462, 467, 469, 472, 475, 476, 477, 479, 482], "add_spam": 44, "spam": [44, 71, 75, 99, 102, 106, 118, 169, 174, 175, 217, 224, 225, 229, 241, 242, 244, 250, 255, 258, 268, 296, 297, 307, 313, 319, 321, 330, 334, 340, 344, 348, 357, 380, 385, 388, 389, 394, 412, 421, 427, 429, 431, 439, 440, 442, 445, 448, 449, 461, 467, 477, 482], "pymodule_addobject": [44, 55, 71, 74, 461, 471, 482], "easi": [44, 61, 66, 71, 82, 83, 87, 88, 90, 96, 97, 99, 102, 103, 104, 108, 118, 136, 151, 166, 168, 174, 182, 185, 190, 192, 193, 203, 207, 225, 227, 268, 292, 293, 299, 318, 331, 337, 341, 343, 344, 363, 387, 388, 389, 406, 410, 420, 427, 429, 462, 463, 465, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 482, 483], "stole": 44, "pymodule_addintconst": [44, 55, 461], "pymodule_addstringconst": [44, 55, 461], "pymodule_addintmacro": [44, 467], "af_inet": [44, 66, 99, 103, 125, 139, 283, 337, 338, 341, 361, 467, 482], "pymodule_addstringmacro": [44, 467], "pymodule_addtyp": [44, 55, 481, 482], "tp_name": [44, 59, 61, 73, 74, 88, 482], "pystate_findmodul": [44, 55], "pystate_addmodul": [44, 55, 482], "beforehand": [44, 431], "unnecessari": [44, 71, 83, 98, 118, 132, 147, 271, 283, 284, 288, 344, 352, 381, 385, 389, 393, 409, 435, 462, 463, 465, 468, 477, 480, 482], "harmless": [44, 71, 88, 192, 375, 482], "pystate_removemodul": [44, 55], "suffici": [45, 61, 71, 77, 95, 96, 97, 98, 113, 120, 139, 157, 182, 183, 185, 192, 275, 293, 312, 341, 344, 364, 387, 389, 398, 402, 414, 431, 435, 460, 474, 475, 478, 479, 482], "pynone_check": 45, "pynumber_check": [46, 55, 480], "o1": [46, 48, 52, 76, 180], "o2": [46, 48, 52, 76, 180, 306, 401], "pynumber_subtract": [46, 53, 55], "subtract": [46, 66, 141, 159, 181, 182, 185, 259, 270, 275, 290, 308, 343, 383, 418, 429, 461, 464, 467, 468, 472, 474, 479, 482], "pynumber_multipli": [46, 55], "multipli": [46, 66, 70, 74, 141, 165, 175, 182, 185, 198, 269, 290, 308, 318, 344, 345, 352, 418, 429, 461, 464, 465, 467, 471, 472, 474, 482], "pynumber_matrixmultipli": [46, 55, 477], "matrix": [46, 66, 83, 150, 224, 383, 401, 425, 429, 441, 462, 480, 482], "pynumber_floordivid": [46, 55], "floor": [46, 66, 83, 85, 101, 165, 182, 185, 192, 220, 224, 275, 289, 290, 344, 427, 429, 448, 463, 467, 480, 481, 482], "divid": [46, 66, 82, 90, 102, 141, 166, 182, 185, 190, 192, 193, 224, 246, 275, 284, 290, 296, 308, 343, 366, 374, 418, 434, 442, 467, 474, 475, 476, 480, 482], "pynumber_truedivid": [46, 55], "approxim": [46, 62, 66, 77, 83, 154, 157, 165, 176, 180, 185, 189, 192, 201, 212, 220, 246, 275, 280, 283, 343, 344, 347, 348, 361, 380, 383, 387, 427, 429, 431, 445, 460, 467, 468, 479, 482], "mathemat": [46, 66, 93, 102, 182, 185, 254, 275, 290, 318, 343, 344, 427, 429, 465, 467, 477, 482], "pynumber_remaind": [46, 55], "pynumber_divmod": [46, 55], "divmod": [46, 66, 83, 182, 185, 224, 254, 289, 290, 344, 427, 429, 443, 449, 480, 482], "pynumber_pow": [46, 55], "o3": [46, 70], "pow": [46, 66, 83, 87, 120, 165, 168, 223, 224, 254, 261, 264, 275, 283, 289, 290, 291, 344, 419, 427, 429, 430, 449, 463, 472, 474, 480, 482], "pynumber_neg": [46, 55], "pynumber_posit": [46, 55], "pynumber_absolut": [46, 55], "abs": [46, 61, 66, 93, 154, 182, 185, 223, 224, 254, 275, 289, 290, 291, 344, 380, 381, 383, 427, 429, 439, 441, 449, 472, 479, 482], "pynumber_invert": [46, 55], "bitwis": [46, 66, 73, 88, 90, 92, 93, 102, 176, 177, 192, 210, 214, 282, 293, 319, 329, 337, 340, 405, 427, 430, 432, 464, 467, 468, 478, 482], "pynumber_lshift": [46, 55], "shift": [46, 66, 176, 177, 182, 185, 246, 283, 290, 293, 344, 375, 406, 427, 432, 461, 463, 465, 467, 468, 472, 475, 482], "pynumber_rshift": [46, 55], "pynumber_and": [46, 53, 55], "pynumber_xor": [46, 53, 55], "pynumber_or": [46, 53, 55], "pynumber_inplaceadd": [46, 55], "pynumber_inplacesubtract": [46, 53, 55], "pynumber_inplacemultipli": [46, 55], "pynumber_inplacematrixmultipli": [46, 55, 477], "pynumber_inplacefloordivid": [46, 55], "pynumber_inplacetruedivid": [46, 55], "pynumber_inplaceremaind": [46, 55], "pynumber_inplacepow": [46, 55], "pynumber_inplacelshift": [46, 55], "pynumber_inplacershift": [46, 55], "pynumber_inplaceand": [46, 53, 55], "pynumber_inplacexor": [46, 53, 55], "pynumber_inplaceor": [46, 53, 55], "pynumber_long": [46, 55, 470, 480], "pynumber_float": [46, 55, 480], "pynumber_index": [46, 55, 77, 466, 471, 482], "pynumber_tobas": [46, 55, 482], "marker": [46, 66, 105, 115, 149, 157, 169, 190, 192, 224, 255, 258, 270, 297, 299, 340, 341, 376, 385, 399, 455, 471, 475, 478, 479, 482], "0b": [46, 224, 292, 344, 345, 467, 474], "0o": [46, 83, 224, 344, 345, 467, 474], "pynumber_asssize_t": [46, 55], "clip": [46, 54, 88, 176, 435], "py_ssize_t_min": [46, 54], "pyindex_check": [46, 55, 481, 482], "nb_index": [46, 61, 466], "tp_as_numb": [46, 61, 73, 481, 482], "eas": [47, 61, 66, 330, 344, 364, 387, 435, 461, 475, 477, 479, 482], "port": [47, 66, 88, 89, 90, 99, 101, 103, 106, 125, 135, 139, 142, 166, 222, 241, 242, 244, 246, 247, 256, 257, 268, 269, 283, 288, 293, 305, 313, 333, 335, 337, 338, 340, 341, 342, 358, 361, 393, 394, 406, 418, 419, 431, 462, 463, 482, 483], "act": [47, 61, 65, 73, 83, 93, 98, 101, 114, 120, 144, 175, 180, 182, 190, 195, 200, 204, 207, 224, 225, 243, 247, 250, 253, 259, 267, 293, 309, 311, 340, 344, 352, 364, 374, 384, 385, 388, 427, 434, 460, 461, 462, 467, 471, 475, 476, 480, 481, 482], "pyobject_ascharbuff": [47, 55, 482], "buffer_len": 47, "pyobject_asreadbuff": [47, 55, 482], "pyobject_checkreadbuff": [47, 55, 482], "pyobject_aswritebuff": [47, 55, 482], "py_notimpl": [48, 61, 62, 73, 462], "notimpl": [48, 66, 92, 114, 167, 182, 212, 225, 250, 254, 289, 299, 384, 388, 427, 429, 449, 468, 469, 471, 476, 481, 482], "py_return_notimpl": 48, "pyobject_print": [48, 53, 71, 482], "fp": [48, 57, 64, 76, 93, 118, 151, 185, 187, 195, 199, 200, 203, 206, 222, 229, 241, 249, 262, 276, 293, 304, 354, 359, 378, 381, 394, 425, 465, 482], "pyobject_hasattr": [48, 55], "attr_nam": [48, 361, 463], "hasattr": [48, 66, 85, 91, 99, 106, 224, 225, 254, 255, 283, 320, 344, 352, 366, 387, 388, 398, 426, 427, 431, 449, 464, 467, 474, 476, 479, 482], "__getattr__": [48, 61, 66, 73, 83, 91, 142, 175, 215, 224, 255, 299, 323, 344, 384, 388, 427, 429, 446, 463, 467, 474, 475, 476, 479, 482], "__getattribute__": [48, 61, 66, 78, 85, 91, 224, 255, 299, 427, 463, 467, 474, 479, 482], "pyobject_getattr": [48, 55, 61], "pyobject_hasattrstr": [48, 55], "pyobject_getattrstr": [48, 55, 70, 71, 77, 472], "pyobject_genericgetattr": [48, 55, 61, 91], "getter": [48, 55, 56, 66, 74, 91, 114, 166, 224, 344, 364, 394, 467, 476, 477, 482], "tp_getattro": [48, 61, 73], "mro": [48, 59, 66, 83, 85, 114, 180, 196, 344, 384, 439, 479, 482], "outlin": [48, 98, 99, 114, 134, 138, 166, 243, 383, 427, 482], "pyobject_setattr": [48, 55, 61, 482], "favour": [48, 52, 76, 250, 255, 466, 475, 478, 479, 481, 482], "pyobject_delattr": 48, "plan": [48, 88, 101, 103, 111, 132, 299, 385, 402, 461, 465, 466, 467, 468, 469, 471, 472, 474, 476, 482], "pyobject_setattrstr": [48, 55, 77, 482], "pyobject_delattrstr": 48, "pyobject_genericsetattr": [48, 55, 61], "setter": [48, 55, 56, 66, 74, 91, 114, 224, 225, 344, 364, 388, 394, 467, 476, 482], "tp_setattro": [48, 61, 73], "pyobject_genericgetdict": [48, 55, 61, 472, 482], "pyobject_genericsetdict": [48, 55], "_pyobject_getdictptr": 48, "pyobject_richcompar": [48, 55, 61, 73], "opid": 48, "py_lt": [48, 61, 62, 73], "py_l": [48, 61, 62, 73], "py_eq": [48, 61, 62, 73], "py_n": [48, 61, 62, 73], "py_gt": [48, 61, 62, 73], "py_g": [48, 61, 62, 73], "pyobject_richcomparebool": [48, 53, 55, 73, 482], "pyobject_repr": [48, 53, 55, 61, 62, 476, 477, 482], "pyobject_ascii": [48, 55], "pyobject_str": [48, 55, 61, 62, 476], "pyobject_byt": [48, 55], "pyobject_issubclass": [48, 55, 59, 477, 482], "cls": [48, 61, 83, 88, 91, 92, 114, 120, 160, 180, 202, 210, 212, 224, 225, 255, 262, 296, 299, 361, 381, 385, 387, 426, 427, 430, 435, 442, 463, 465, 472, 474, 478, 479, 482], "against": [48, 55, 70, 71, 73, 74, 83, 92, 99, 101, 102, 110, 118, 120, 125, 135, 141, 172, 175, 180, 189, 190, 192, 234, 251, 255, 278, 292, 293, 296, 305, 307, 308, 311, 314, 319, 324, 331, 333, 340, 341, 342, 344, 361, 364, 368, 374, 383, 384, 385, 387, 388, 389, 399, 408, 410, 411, 412, 413, 418, 419, 420, 426, 427, 431, 454, 455, 461, 462, 463, 464, 465, 466, 471, 472, 474, 476, 477, 479, 480, 482], "__subclasscheck__": [48, 59, 66, 114, 388, 427, 482], "3119": [48, 66, 114, 160, 427, 469, 483], "__mro__": [48, 61, 66, 83, 91, 114, 196, 224, 344, 385, 427], "__bases__": [48, 61, 66, 74, 202, 224, 299, 344, 427, 464, 482], "pyobject_isinst": [48, 55, 61, 477, 482], "inst": [48, 91, 435, 442], "__instancecheck__": [48, 66, 388, 427, 482], "__class__": [48, 66, 78, 83, 85, 91, 92, 97, 182, 186, 210, 224, 250, 299, 344, 388, 399, 427, 439, 463, 464, 467, 478, 482], "py_hash_t": [48, 61, 73, 474], "pyobject_hash": [48, 53, 55, 61, 472], "pyobject_hashnotimpl": [48, 55, 61, 467], "tp_hash": [48, 61, 73, 467], "pyobject_istru": [48, 53, 55, 482], "pyobject_not": [48, 55, 482], "pyobject_typ": [48, 55], "realli": [48, 61, 70, 73, 75, 83, 86, 88, 90, 93, 102, 103, 105, 108, 112, 139, 182, 190, 199, 202, 204, 271, 283, 288, 293, 328, 344, 352, 364, 365, 383, 386, 412, 427, 434, 435, 440, 461, 462, 463, 464, 465, 466, 469, 478, 482], "py_typ": [48, 56, 59, 61, 73, 74, 88, 97, 467, 472, 480, 481, 482], "pyobject_typecheck": [48, 73, 482], "pyobject_s": [48, 55, 61, 482], "pyobject_lengthhint": [48, 476], "defaultvalu": 48, "estim": [48, 174, 185, 288, 318, 343, 361, 427, 482], "__length_hint__": [48, 66, 291, 427, 476, 482], "length_hint": [48, 66, 223, 291, 427, 476], "pyobject_dir": [48, 55], "dir": [48, 66, 76, 78, 83, 92, 108, 110, 112, 162, 183, 188, 209, 210, 222, 224, 254, 256, 266, 292, 293, 294, 296, 323, 344, 348, 357, 359, 368, 379, 388, 398, 421, 427, 444, 450, 455, 464, 467, 471, 472, 474, 475, 482], "pyobject_getait": [48, 55, 482], "aiter": [48, 66, 224, 254, 427, 471, 478, 482], "meth_fastcal": [49, 56, 66, 97, 479, 482], "meth_o": [49, 56, 60, 66, 463, 482], "meth_class": [49, 56, 60, 66, 464], "meth_stat": [49, 56, 66, 464], "meth_coexist": [49, 56, 66, 465], "tp": [49, 66, 73, 337, 361, 383, 385, 482], "py_tpflags_heaptyp": [49, 59, 61, 66, 97, 471, 481], "py_tpflags_basetyp": [49, 61, 66, 74], "py_tpflags_readi": [49, 61, 66], "py_tpflags_default": [49, 61, 66, 74], "py_tpflags_managed_dict": [49, 56, 59, 61, 66, 473, 482], "py_tpflags_managed_weakref": [49, 56, 59, 61, 66, 73, 473, 482], "py_tpflags_long_subclass": [49, 61, 66], "py_tpflags_list_subclass": [49, 61, 66], "py_tpflags_tuple_subclass": [49, 61, 66], "py_tpflags_bytes_subclass": [49, 61, 66], "py_tpflags_unicode_subclass": [49, 61, 66], "py_tpflags_dict_subclass": [49, 61, 66], "py_tpflags_base_exc_subclass": [49, 61, 66], "py_tpflags_type_subclass": [49, 61, 66], "py_tpflags_have_fin": [49, 61, 66, 480], "py_tpflags_immutabletyp": [49, 61, 66, 97, 471, 472, 482], "py_tpflags_disallow_instanti": [49, 61, 66, 97, 471, 482], "py_tpflags_map": [49, 61, 66, 190, 426, 482], "py_tpflags_sequ": [49, 61, 66, 190, 426, 482], "py_refcnt": [50, 56, 74, 467, 471, 482], "py_set_refcnt": [50, 471, 482], "refcnt": [50, 471], "counter": [50, 61, 66, 71, 74, 83, 85, 93, 140, 181, 186, 189, 190, 199, 235, 283, 292, 293, 344, 364, 365, 385, 387, 429, 439, 463, 465, 466, 467, 468, 470, 474, 475, 480, 482], "py_newref": [50, 55, 85, 471, 482], "aren": [50, 74, 82, 83, 86, 90, 91, 93, 96, 102, 103, 105, 110, 138, 154, 166, 175, 200, 216, 224, 226, 255, 259, 268, 269, 292, 296, 338, 341, 352, 368, 376, 388, 389, 418, 420, 461, 462, 463, 464, 465, 466, 467, 468, 475, 476, 482], "py_xincref": [50, 71, 472, 480, 482], "py_xnewref": [50, 55, 471, 482], "attr": [50, 61, 66, 77, 88, 90, 120, 176, 239, 243, 251, 255, 273, 281, 291, 292, 299, 314, 361, 368, 387, 388, 412, 414, 415, 416, 426, 427, 430, 435, 461, 462, 465, 472, 475, 482], "py_clear": [50, 61, 71, 73, 74, 465, 482], "pyeval_getbuiltin": [51, 55], "pyeval_getloc": [51, 55], "pyeval_getglob": [51, 55], "pyeval_getfuncnam": [51, 55], "pyeval_getfuncdesc": [51, 55], "pysequence_check": [52, 55, 61], "pysequence_s": [52, 55, 61, 482], "pysequence_concat": [52, 55, 61], "pysequence_repeat": [52, 55, 61], "pysequence_inplaceconcat": [52, 55, 61], "pysequence_inplacerepeat": [52, 55, 61], "th": [52, 174, 190, 195, 224, 235, 266, 275, 283, 323, 343, 344, 365, 383, 409, 427, 461, 464, 466], "pysequence_getslic": [52, 55, 61], "i1": [52, 189, 278, 418, 465], "i2": [52, 189, 278, 418, 465], "pysequence_delitem": [52, 55, 482], "pysequence_setslic": [52, 55], "pysequence_delslic": [52, 55], "pysequence_count": [52, 55], "occurr": [52, 62, 83, 102, 120, 140, 159, 166, 176, 185, 195, 204, 227, 271, 284, 292, 319, 328, 343, 344, 357, 371, 399, 412, 427, 428, 429, 430, 433, 434, 435, 463, 465, 466, 469, 474, 482], "pysequence_contain": [52, 55, 61], "pysequence_index": [52, 55], "pysequence_list": [52, 55], "pysequence_tupl": [52, 55, 482], "pysequence_fast": [52, 55], "pysequence_fast_get_s": 52, "faster": [52, 55, 61, 66, 82, 83, 88, 91, 102, 103, 104, 125, 138, 175, 176, 185, 206, 225, 233, 234, 246, 261, 283, 293, 308, 341, 343, 344, 383, 388, 423, 425, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "pysequence_fast_get_item": 52, "pysequence_fast_item": 52, "reloc": [52, 467, 482], "pysequence_item": 52, "frozenset": [53, 66, 85, 120, 181, 186, 224, 254, 274, 299, 352, 385, 387, 401, 426, 427, 429, 449, 465, 466, 467, 472, 474, 481, 482], "pysetobject": 53, "medium": [53, 177, 185, 465, 466, 482], "pyset_typ": [53, 55], "pyfrozenset_typ": [53, 55], "pyset_check": 53, "pyfrozenset_check": 53, "pyanyset_check": 53, "pyset_checkexact": [53, 471, 482], "pyanyset_checkexact": 53, "pyfrozenset_checkexact": 53, "pyset_new": [53, 55, 466], "pyfrozenset_new": [53, 55, 466], "pyset_s": [53, 55, 466], "anyset": 53, "pyset_get_s": 53, "pyset_contain": [53, 55, 466], "__contains__": [53, 56, 61, 66, 78, 83, 85, 92, 95, 160, 181, 193, 195, 204, 210, 223, 261, 271, 285, 291, 344, 388, 406, 415, 427, 429, 461, 464, 465, 467, 482], "unhash": [53, 76, 180, 344, 387, 427, 429, 471, 481, 482], "pyset_add": [53, 55, 466], "grow": [53, 58, 83, 99, 103, 192, 225, 235, 269, 320, 375, 461, 465, 467, 468, 474, 482], "pyset_discard": [53, 55, 466], "miss": [53, 66, 101, 102, 120, 159, 163, 169, 174, 175, 180, 185, 195, 198, 204, 210, 225, 234, 246, 250, 251, 255, 261, 267, 276, 279, 286, 289, 292, 296, 315, 319, 341, 343, 345, 348, 361, 365, 366, 374, 379, 385, 388, 393, 394, 424, 426, 427, 429, 430, 431, 440, 461, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "pyset_pop": [53, 55], "pyset_clear": [53, 55], "pyslice_typ": [54, 55], "pyslice_check": 54, "pyslice_new": [54, 55], "step": [54, 61, 66, 70, 71, 75, 82, 83, 88, 91, 93, 97, 100, 101, 102, 103, 104, 106, 108, 110, 118, 120, 141, 144, 147, 151, 155, 157, 165, 168, 175, 184, 185, 192, 224, 229, 231, 241, 246, 250, 261, 267, 281, 283, 292, 293, 297, 318, 319, 338, 340, 344, 352, 367, 375, 383, 389, 398, 413, 420, 426, 427, 429, 435, 440, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 482], "pyslice_getindic": [54, 55], "pysliceobject": 54, "pyslice_getindicesex": [54, 55, 479, 482], "slicelength": 54, "manner": [54, 71, 83, 88, 90, 99, 166, 244, 268, 270, 292, 294, 296, 307, 311, 313, 319, 321, 348, 385, 387, 399, 414, 426, 427, 431, 455, 464, 466, 467, 471, 482], "pyslice_unpack": [54, 55, 479, 482], "pyslice_adjustindic": [54, 55, 479, 482], "0x03050400": [54, 479, 482], "0x03060000": [54, 479, 482], "0x03060100": [54, 479, 482], "boost": [54, 77, 225, 465, 482], "py_ellipsi": [54, 430], "387": [55, 212], "serious": [55, 98, 125, 192, 212, 234, 388], "forward": [55, 62, 66, 83, 88, 93, 102, 120, 147, 153, 155, 175, 176, 182, 190, 199, 221, 225, 229, 246, 258, 271, 289, 294, 296, 297, 340, 341, 344, 383, 385, 401, 406, 410, 426, 461, 462, 463, 465, 467, 470, 471, 472, 474, 479, 482], "vice": [55, 70, 82, 141, 175, 250, 267, 293, 296, 319, 344, 375, 379, 412, 467, 476, 482], "versa": [55, 70, 82, 141, 175, 250, 267, 293, 296, 319, 344, 375, 379, 412, 467, 476, 482], "_py_internalst": 55, "subset": [55, 93, 101, 103, 157, 166, 176, 234, 246, 247, 253, 257, 262, 269, 271, 295, 299, 306, 314, 328, 332, 337, 344, 357, 364, 372, 409, 412, 414, 421, 429, 464, 466, 468, 472, 477, 479, 482], "simplic": [55, 62, 73, 262, 340, 344, 461, 463, 471], "talk": [55, 62, 83, 90, 99, 103, 105, 341, 343, 348, 427, 466, 477], "recompil": [55, 70, 77, 162, 249, 250, 461, 464, 468, 474, 477, 478], "onward": [55, 93, 99, 185, 220, 255, 333, 340, 344, 482], "hardcod": [55, 175, 257, 267, 269, 459, 476, 482], "0x030a0000": 55, "0x03020000": 55, "python39": 55, "abi3": [55, 475], "mymodul": [55, 77, 98, 229, 297, 388, 389, 399, 468, 474], "goal": [55, 61, 66, 73, 93, 97, 200, 224, 234, 320, 361, 412, 433, 462, 464, 466, 467, 474, 476, 477, 478], "penalti": [55, 99, 180, 215, 306, 461, 474], "prereleas": [55, 473, 482], "upcom": [55, 212, 225, 325, 482], "guard": [55, 61, 66, 97, 99, 120, 125, 251, 313, 361, 364, 384, 385, 430, 431, 440, 480, 482], "derefer": [55, 283, 357, 482], "review": [55, 106, 143, 168, 234, 340, 464, 469, 471, 474, 478, 480, 482], "technic": [55, 66, 76, 93, 110, 166, 181, 190, 212, 262, 292, 319, 344, 399, 431, 460, 461, 468, 471, 479], "unintent": [55, 97, 99, 112, 267, 348, 472, 474, 482], "stay": [55, 62, 66, 137, 343, 352, 425, 474, 475, 478, 482], "architectur": [55, 66, 100, 116, 212, 272, 279, 303, 347, 354, 367, 409, 420, 427, 455, 459, 460, 464, 465, 467, 475, 477, 481, 482], "distributor": [55, 341, 424, 472, 478, 482], "pybaseobject_typ": [55, 61], "pybytearrayiter_typ": 55, "pybytesiter_typ": 55, "pybytes_decodeescap": [55, 482], "pybytes_repr": [55, 482], "pycfunctionwithkeyword": [55, 56], "pycfunction_cal": [55, 482], "pycfunction_getflag": 55, "pycfunction_getfunct": 55, "pycfunction_getself": 55, "pycfunction_new": [55, 482], "pycfunction_newex": [55, 482], "pycfunction_typ": 55, "pycmethod_new": [55, 482], "pycapsule_typ": 55, "pyclassmethoddescr_typ": 55, "pydictitems_typ": 55, "pydictiteritem_typ": 55, "pydictiterkey_typ": 55, "pydictitervalue_typ": 55, "pydictkeys_typ": 55, "pydictproxy_typ": 55, "pydictreviteritem_typ": 55, "pydictreviterkey_typ": 55, "pydictrevitervalue_typ": 55, "pydictvalues_typ": 55, "pyellipsis_typ": 55, "pyenum_typ": 55, "pyerr_display": [55, 471, 482], "pyerr_programtext": 55, "pyeval_callfunct": [55, 481, 482], "pyeval_callmethod": [55, 481, 482], "pyeval_callobjectwithkeyword": [55, 481, 482], "pyeval_evalcod": [55, 64, 100, 471, 482], "pyeval_evalcodeex": [55, 64, 482], "pyeval_evalfram": [55, 64], "pyeval_evalframeex": [55, 64, 476, 482], "pyexc_baseexceptiongroup": 55, "pyexc_encodingwarn": 55, "pyexceptionclass_nam": [55, 480, 482], "pyfilter_typ": 55, "pygetsetdescr_typ": 55, "pylistiter_typ": 55, "pylistreviter_typ": 55, "pylongrangeiter_typ": 55, "pylong_getinfo": 55, "pymap_typ": 55, "pymemberdescr_typ": 55, "pymemoryview_typ": 55, "pymethoddescr_typ": 55, "pymoduledef_typ": 55, "pyos_afterfork": [55, 57, 479, 482], "pyos_afterfork_par": [55, 57, 293, 479, 482], "pyos_beforefork": [55, 57, 293, 479, 482], "pyos_fspath": [55, 57, 478, 482], "pyos_inputhook": [55, 64, 482], "pyos_interruptoccur": [55, 482], "pyos_getsig": [55, 57, 461], "pyos_mystricmp": [55, 482], "pyos_mystrnicmp": [55, 482], "pyos_setsig": [55, 57, 461, 482], "pyos_sighandler_t": [55, 57], "pyos_strtol": 55, "pyos_strtoul": 55, "ob_refcnt": [55, 61, 471, 482], "ob_typ": [55, 61, 74, 472, 482], "pyobject_clearweakref": [55, 61, 73, 473], "pyobject_delitemstr": [55, 464], "pyobject_format": [55, 190], "pyobject_selfit": 55, "pyrangeiter_typ": 55, "pyrange_typ": [55, 466], "pyreversed_typ": 55, "pysequence_in": 55, "pysetiter_typ": 55, "pystructsequence_desc": [55, 58, 479, 482], "pystructsequence_field": [55, 58, 479, 482], "pystructsequence_getitem": [55, 58], "pystructsequence_new": [55, 58], "pystructsequence_newtyp": [55, 58, 482], "pystructsequence_setitem": [55, 58], "pystructsequence_unnamedfield": [55, 58, 481, 482], "pysuper_typ": 55, "pysys_addwarnoptionunicod": [55, 57, 472, 479, 482], "pysys_formatstderr": [55, 57], "pysys_formatstdout": [55, 57], "pysys_getxopt": [55, 57], "pysys_haswarnopt": [55, 472, 482], "pysys_setobject": [55, 57], "pysys_setpath": [55, 57, 472, 482], "pysys_writestderr": [55, 57], "pysys_writestdout": [55, 57], "pythread_getinfo": 55, "pythread_acquire_lock": [55, 482], "pythread_acquire_lock_tim": [55, 482], "pythread_allocate_lock": 55, "pythread_exit_thread": [55, 482], "pythread_free_lock": 55, "pythread_get_stacks": 55, "pythread_get_thread_id": [55, 479, 482], "pythread_get_thread_native_id": [55, 482], "pythread_init_thread": 55, "pythread_release_lock": [55, 482], "pythread_set_stacks": 55, "pythread_start_new_thread": [55, 479, 482], "pytraceback_her": [55, 482], "pytraceback_print": [55, 478, 482], "pytraceback_typ": 55, "pytupleiter_typ": 55, "pytuple_getitem": [55, 58, 71, 77], "pytuple_getslic": [55, 58], "pytuple_pack": [55, 58, 77, 465], "pytuple_s": [55, 58, 77], "pytuple_typ": [55, 58], "pytype_clearcach": [55, 59], "pytype_frommetaclass": [55, 59, 61, 473, 482], "pytype_frommoduleandspec": [55, 59, 61, 88, 97, 471, 473, 481, 482], "pytype_genericalloc": [55, 59, 61, 480], "pytype_genericnew": [55, 59, 61, 74], "pytype_getflag": [55, 59, 482], "pytype_getmodul": [55, 59, 97, 481, 482], "pytype_getmodulest": [55, 59, 88, 97, 481, 482], "pytype_getnam": [55, 59, 472, 482], "pytype_getqualnam": [55, 59, 472, 482], "pytype_getslot": [55, 59, 471, 476, 482], "pytype_issubtyp": [55, 59], "pytype_modifi": [55, 59, 482], "pytype_slot": [55, 59], "pytype_spec": [55, 59, 61, 97, 482], "pytype_typ": [55, 59, 61, 482], "pyunicodeiter_typ": 55, "pyunicode_append": 55, "pyunicode_appendanddel": 55, "pyunicode_asasciistr": [55, 62, 475], "pyunicode_ascharmapstr": [55, 62], "pyunicode_asdecodedobject": [55, 478, 482], "pyunicode_asdecodedunicod": [55, 478, 482], "pyunicode_asencodedobject": [55, 475, 478, 482], "pyunicode_asencodedstr": [55, 62, 482], "pyunicode_asencodedunicod": [55, 478, 482], "pyunicode_aslatin1str": [55, 62, 475], "pyunicode_asmbcsstr": [55, 62, 475], "pyunicode_asrawunicodeescapestr": [55, 62, 475], "pyunicode_asucs4": [55, 62, 475], "pyunicode_asucs4copi": [55, 62, 471, 475], "pyunicode_asutf16str": [55, 62], "pyunicode_asutf32str": [55, 62], "pyunicode_asutf8ands": [55, 62, 471, 479, 482], "pyunicode_asutf8str": [55, 62, 475], "pyunicode_asunicodeescapestr": [55, 62, 475], "pyunicode_aswidechar": [55, 62, 482], "pyunicode_aswidecharstr": [55, 62, 471, 475, 479, 482], "pyunicode_buildencodingmap": 55, "pyunicode_compar": [55, 62, 471, 475], "pyunicode_comparewithasciistr": [55, 62, 474, 482], "pyunicode_concat": [55, 62, 475], "pyunicode_contain": [55, 62], "pyunicode_count": [55, 62], "pyunicode_decod": [55, 62, 482], "pyunicode_decodeascii": [55, 62], "pyunicode_decodecharmap": [55, 62], "pyunicode_decodecodepagest": 55, "pyunicode_decodefsdefault": [55, 62, 70], "pyunicode_decodefsdefaultands": [55, 57, 62], "pyunicode_decodelatin1": [55, 62], "pyunicode_decodelocal": [55, 62], "pyunicode_decodelocaleands": [55, 57, 62, 479], "pyunicode_decodembc": [55, 62], "pyunicode_decodembcsst": [55, 62], "pyunicode_decoderawunicodeescap": [55, 62], "pyunicode_decodeutf16": [55, 62], "pyunicode_decodeutf16st": [55, 62], "pyunicode_decodeutf32": [55, 62], "pyunicode_decodeutf32st": [55, 62], "pyunicode_decodeutf7": [55, 62], "pyunicode_decodeutf7st": [55, 62], "pyunicode_decodeutf8": [55, 62], "pyunicode_decodeutf8st": [55, 62], "pyunicode_decodeunicodeescap": [55, 62], "pyunicode_encodecodepag": [55, 62, 475, 482], "pyunicode_encodefsdefault": [55, 57, 62, 482], "pyunicode_encodelocal": [55, 57, 62, 479, 482], "pyunicode_fsdecod": [55, 62, 473, 478, 482], "pyunicode_find": [55, 62], "pyunicode_findchar": [55, 62, 471, 475, 479, 482], "pyunicode_format": [55, 62], "pyunicode_fromencodedobject": [55, 62], "pyunicode_fromformatv": [55, 57, 62, 473, 482], "pyunicode_fromobject": [55, 62], "pyunicode_fromordin": 55, "pyunicode_fromstringands": [55, 62, 471, 482], "pyunicode_fromwidechar": [55, 62, 475], "pyunicode_getdefaultencod": 55, "pyunicode_getlength": [55, 62, 471, 475], "pyunicode_internfromstr": [55, 62], "pyunicode_interninplac": [55, 62, 471, 482], "pyunicode_isidentifi": [55, 62, 482], "pyunicode_join": [55, 62, 475], "pyunicode_partit": 55, "pyunicode_rpartit": 55, "pyunicode_rsplit": 55, "pyunicode_readchar": [55, 62, 475], "pyunicode_replac": [55, 62], "pyunicode_res": 55, "pyunicode_richcompar": [55, 62], "pyunicode_split": [55, 62], "pyunicode_splitlin": [55, 62], "pyunicode_substr": [55, 62, 471, 475], "pyunicode_tailmatch": [55, 62, 471, 475, 481], "pyunicode_transl": [55, 62], "pyunicode_typ": [55, 61, 62, 88], "pyunicode_writechar": [55, 62, 475], "ob_bas": [55, 56, 74, 482], "ob_siz": [55, 56, 61, 472, 482], "pyweakrefer": [55, 472, 482], "pyweakref_getobject": [55, 65], "pyweakref_newproxi": [55, 65], "pywrapperdescr_typ": 55, "pyzip_typ": 55, "py_atexit": [55, 57], "py_bytesmain": [55, 64, 100, 480], "py_compilestr": [55, 64, 471], "py_exit": [55, 57, 478, 482], "py_filesystemdefaultencodeerror": [55, 473, 482], "py_filesystemdefaultencod": [55, 473], "py_genericalia": [55, 60, 482], "py_genericaliastyp": [55, 60, 482], "py_getrecursionlimit": 55, "py_hasfilesystemdefaultencod": 55, "py_i": [55, 56, 471, 482], "py_isfals": [55, 56, 471, 482], "py_isnon": [55, 56, 471, 482], "py_istru": [55, 56, 471, 482], "py_makependingcal": 55, "py_setrecursionlimit": 55, "py_ucs4": [55, 62, 475], "py_utf8mod": [55, 473, 482], "py_intptr_t": 55, "py_uintptr_t": 55, "allocfunc": [55, 61, 73], "binaryfunc": [55, 61], "descrgetfunc": [55, 61, 73], "descrsetfunc": [55, 61, 73], "getattrfunc": [55, 61, 73], "getattrofunc": [55, 61, 73], "getiterfunc": [55, 61, 73], "hashfunc": [55, 61, 73], "initproc": [55, 61, 73, 74], "iternextfunc": [55, 61, 73], "lenfunc": [55, 61], "newfunc": [55, 61, 73, 225], "objobjargproc": [55, 61], "objobjproc": [55, 61], "reprfunc": [55, 61, 73], "richcmpfunc": [55, 61, 73], "setattrfunc": [55, 61, 73], "setattrofunc": [55, 61, 73], "ssizeargfunc": [55, 61], "ssizeobjargproc": [55, 61], "ssizessizeargfunc": 55, "ssizessizeobjargproc": 55, "symtabl": [55, 66, 254, 264, 468, 471, 481, 482], "ternaryfunc": [55, 61, 73], "unaryfunc": [55, 61], "ultim": [56, 192, 224, 234, 292, 352, 385, 427, 429, 431, 435, 463, 465, 482], "expans": [56, 66, 218, 219, 246, 254, 275, 294, 308, 314, 348, 363, 408, 421, 465, 471, 475, 476], "notion": [56, 108, 182, 185, 189, 192, 224, 299, 344, 375, 409, 413, 429, 433, 436, 474], "py_siz": [56, 467, 472, 482], "pyobject_head": [56, 61, 74, 469], "pyobject_var_head": [56, 61, 73], "py_set_typ": [56, 472, 482], "py_is_typ": [56, 482], "py_set_s": [56, 472, 482], "pyobject_head_init": [56, 61], "_pyobject_extra_init": 56, "pyvarobject_head_init": [56, 61, 73, 74, 482], "shall": [56, 294, 296, 299, 329, 414, 425, 460, 474], "meth_keyword": [56, 71, 97], "_pycfunctionfast": 56, "narg": [56, 66, 87, 97, 99, 116, 292, 309, 340, 350, 398, 450, 468, 474, 482], "_pycfunctionfastwithkeyword": 56, "pycmethod": [56, 59, 97, 472, 481, 482], "meth_method": [56, 88, 97, 481], "defining_class": [56, 88, 97, 482], "ml_name": [56, 73], "ml_meth": [56, 73], "ml_flag": [56, 73], "ml_doc": [56, 73], "bitfield": [56, 111, 482], "fast": [56, 62, 66, 92, 97, 103, 104, 141, 147, 169, 183, 185, 190, 224, 233, 249, 250, 254, 255, 258, 261, 269, 273, 298, 299, 308, 332, 343, 344, 366, 367, 368, 383, 385, 412, 427, 441, 461, 465, 466, 468, 472, 474, 475, 476, 477, 478, 479, 481, 482], "fourth": [56, 88, 93, 111, 176, 190, 193, 267, 307, 319, 365, 418, 463, 471], "question": [56, 71, 77, 83, 92, 93, 98, 99, 102, 105, 111, 120, 141, 157, 192, 193, 234, 266, 267, 292, 340, 368, 372, 405, 406, 441, 461, 463, 464, 466, 479, 481, 482], "superclass": [56, 59, 61, 97, 114, 155, 180, 224, 225, 262, 268, 312, 338, 385, 427, 463, 464, 466, 482], "classmethod": [56, 66, 85, 91, 92, 114, 159, 160, 175, 182, 185, 190, 192, 202, 210, 220, 224, 225, 250, 254, 255, 261, 283, 296, 299, 343, 344, 357, 380, 381, 385, 387, 421, 424, 427, 449, 463, 465, 468, 471, 472, 474, 475, 478, 479, 480, 482], "staticmethod": [56, 66, 83, 85, 91, 114, 192, 210, 224, 225, 254, 268, 419, 427, 449, 463, 465, 468, 471, 474, 475, 480, 482], "sq_contain": [56, 61], "preclud": [56, 289, 344, 480], "t_": 56, "t_short": 56, "t_int": [56, 74], "t_long": 56, "t_float": 56, "t_doubl": 56, "t_string": 56, "t_object": 56, "t_object_ex": [56, 74], "t_char": 56, "t_byte": 56, "t_ubyt": 56, "t_uint": 56, "t_ushort": 56, "t_ulong": 56, "t_bool": 56, "t_longlong": 56, "t_ulonglong": 56, "t_pyssizet": 56, "__vectorcalloffset__": 56, "spam_type_memb": 56, "offsetof": [56, 74], "spam_object": 56, "tp_dictoffset": [56, 59, 61, 73, 472, 473, 482], "tp_weaklistoffset": [56, 59, 61, 73, 473, 481, 482], "encourag": [56, 71, 75, 86, 101, 212, 292, 328, 329, 331, 385, 404, 410, 414, 433, 461, 462, 469, 472, 480, 482], "pymember_geton": [56, 91], "obj_addr": 56, "pymember_seton": 56, "tp_getset": [56, 61, 73, 74], "pathlik": [57, 62, 66, 85, 116, 162, 224, 252, 293, 294, 296, 344, 388, 424, 478, 482], "__fspath__": [57, 66, 116, 293, 361, 388, 478, 482], "py_fdisinteract": 57, "deem": [57, 120, 206, 229, 269, 344, 406, 425, 461, 462, 466, 468, 474, 475, 476, 482], "isatti": [57, 66, 116, 153, 224, 258, 293, 350, 352, 445, 482], "clone": [57, 66, 193, 200, 204, 207, 221, 229, 234, 236, 283, 285, 293, 301, 335, 350, 375, 383, 409, 433, 459, 475, 480], "register_at_fork": [57, 66, 116, 293, 479, 482], "reliabl": [57, 103, 123, 125, 131, 132, 138, 157, 160, 185, 187, 283, 294, 333, 348, 402, 414, 423, 426, 431, 460, 464, 468, 471, 474, 475, 476, 477, 478, 479, 482], "microsoft": [57, 66, 75, 84, 157, 166, 175, 254, 293, 350, 352, 397, 398, 406, 434, 447, 457, 463, 464, 466, 467, 472, 477, 482], "visual": [57, 75, 83, 90, 101, 108, 319, 341, 374, 383, 412, 454, 460, 461, 464, 467, 477, 482], "sigact": [57, 482], "dc80": [57, 105, 157, 224], "dcff": [57, 105, 157, 224], "surrog": [57, 62, 157, 224, 262, 293, 346, 357, 409, 475, 476, 480, 482], "error_po": 57, "0x80": [57, 105, 177, 344, 482], "0xff": [57, 157, 224, 344], "1000": [57, 83, 95, 105, 149, 172, 176, 182, 220, 246, 259, 261, 275, 283, 284, 320, 329, 344, 345, 352, 368, 381, 383, 425, 439, 440, 443, 445, 448, 449, 461, 466, 467, 468, 474, 475, 480], "unrestrict": [57, 76], "hundr": [57, 99, 192, 234], "pysys_audit": [57, 95, 142, 352, 482], "apart": [57, 74, 93, 98, 102, 120, 166, 189, 275, 283, 292, 302, 343, 429, 434, 460, 464, 468, 470], "unavoid": [57, 93, 182, 465, 468, 470], "pysys_addaudithook": [57, 142, 352], "py_audithookfunct": 57, "578": [57, 66, 142, 352, 466, 467, 482], "addaudithook": [57, 66, 142, 315, 352, 449], "kill": [57, 66, 82, 103, 113, 116, 129, 132, 136, 140, 142, 163, 165, 176, 246, 257, 283, 293, 333, 348, 361, 401, 406, 421, 467, 468, 469, 474, 479, 482], "120": [57, 70, 93, 155, 192, 225, 261, 352, 383, 468, 478, 480, 482], "pytuple_check": [58, 77], "pytuple_checkexact": 58, "oo": [58, 175, 352, 361, 449, 454, 470, 477, 482], "pytuple_get_s": 58, "pytuple_get_item": 58, "pytuple_set_item": [58, 471, 482], "_pytuple_res": [58, 463], "shrink": [58, 183, 465, 482], "client": [58, 66, 71, 82, 91, 98, 99, 103, 106, 121, 125, 142, 144, 151, 157, 163, 166, 169, 193, 195, 240, 243, 244, 251, 254, 256, 258, 259, 267, 269, 286, 288, 293, 299, 328, 329, 337, 338, 340, 350, 358, 361, 364, 383, 385, 394, 406, 409, 416, 417, 419, 425, 440, 450, 463, 465, 467, 475, 480, 482], "namedtupl": [58, 66, 85, 92, 115, 147, 181, 186, 288, 299, 302, 303, 319, 329, 336, 344, 347, 349, 352, 381, 384, 385, 400, 441, 467, 468, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482], "desc": [58, 91, 281, 288, 340, 470], "pystructsequence_inittyp": [58, 476], "pystructsequence_inittype2": [58, 476], "meta": [58, 66, 85, 88, 110, 116, 120, 151, 176, 177, 219, 230, 250, 251, 292, 352, 394, 427, 463, 475, 476, 478, 482], "n_in_sequ": 58, "pystructsequence_get_item": 58, "pystructsequence_set_item": 58, "pytype_check": [59, 71, 482], "pytype_checkexact": [59, 482], "primarili": [59, 83, 96, 98, 138, 141, 157, 182, 193, 205, 225, 255, 267, 299, 304, 344, 348, 385, 387, 399, 406, 410, 460, 462, 463, 465, 467, 468, 472, 475, 477, 479, 481, 482], "pytype_addwatch": [59, 473], "pytype_watchcallback": 59, "pytype_watch": [59, 473, 482], "pytype_clearwatch": 59, "pytype_lookup": 59, "pytype_hasfeatur": [59, 61, 482], "pytype_is_gc": 59, "issubclass": [59, 66, 76, 85, 114, 160, 224, 254, 344, 384, 385, 399, 427, 439, 449, 461, 467, 471, 479, 482], "nitem": [59, 61], "tp_alloc": [59, 61, 73, 74, 482], "kwds": [59, 61, 73, 74, 91, 136, 144, 168, 174, 202, 210, 224, 225, 255, 283, 297, 318, 345, 361, 379, 384, 387, 427, 430, 440, 466, 480, 482], "qualifi": [59, 66, 85, 91, 190, 192, 196, 249, 250, 255, 268, 269, 299, 335, 337, 344, 348, 385, 387, 397, 399, 412, 415, 422, 427, 431, 435, 454, 460, 466, 472, 477, 480, 482, 483], "pytype_getmodulebydef": [59, 88, 97, 472, 482], "shortcut": [59, 66, 103, 192, 234, 246, 298, 319, 321, 344, 357, 384, 427, 460, 465, 467, 479, 482], "nb_add": [59, 61, 97], "metaclass": [59, 66, 85, 88, 91, 92, 110, 114, 120, 175, 210, 224, 225, 255, 344, 384, 385, 426, 467, 469, 472, 473, 474, 476, 477, 478, 479, 480, 482], "py_tp_bas": 59, "pytype_from": [59, 482], "__init_subclass__": [59, 66, 181, 210, 224, 427, 472, 478, 482], "__set_name__": [59, 66, 91, 180, 427, 478, 482], "tp_doc": [59, 61, 73, 74, 471, 482], "basics": 59, "pynumbermethod": [59, 61, 73, 463, 466], "pysequencemethod": [59, 61, 73], "pymappingmethod": [59, 61, 73], "pyasyncmethod": [59, 61, 73, 482], "py_": [59, 460, 482], "py_tp_dealloc": 59, "py_nb_add": 59, "py_sq_length": 59, "sq_length": [59, 61, 482], "tp_dict": [59, 61, 73, 467], "tp_mro": [59, 61, 73], "tp_cach": [59, 61, 73], "tp_subclass": [59, 61, 73, 473, 482], "tp_weaklist": [59, 61, 73, 473], "tp_vectorcal": [59, 61, 73, 482], "unlimit": [59, 125, 136, 151, 201, 202, 207, 234, 246, 283, 320, 322, 344, 348, 364, 427, 434, 482], "bf_getbuff": [59, 61, 472], "pfunc": [59, 70], "py_tp_doc": 59, "genericalia": [60, 66, 181, 384, 385, 427, 429, 471, 481, 482], "union": [60, 66, 86, 116, 159, 186, 224, 225, 231, 252, 254, 333, 342, 346, 384, 385, 427, 464, 465, 467, 468, 472, 477, 481, 482], "__origin__": [60, 66, 344], "__args__": [60, 66, 344, 471, 481, 482], "__parameters__": [60, 66, 344, 385, 482], "lazili": [60, 86, 165, 215, 242, 261, 344, 387, 388, 429, 471, 472, 476, 482], "my_obj_method": 60, "__class_getitem__": [60, 66, 344, 385, 429, 472, 479, 482], "585": [60, 85, 160, 344, 385, 472, 481, 482], "pytype_": 61, "fair": [61, 82, 90, 99, 103, 105, 192, 203, 207, 281, 308, 330, 341, 368, 387, 393, 409, 410, 455, 461, 463, 464, 466, 467, 478], "examin": [61, 66, 70, 83, 86, 98, 105, 108, 111, 180, 186, 226, 255, 264, 293, 297, 300, 308, 331, 332, 333, 335, 344, 352, 361, 409, 462, 464, 466, 467, 471, 475, 482], "glanc": [61, 99, 464], "insight": 61, "tp_getattr": [61, 73], "tp_setattr": [61, 73], "__setattr__": [61, 66, 73, 78, 83, 91, 142, 180, 299, 388, 427, 435, 463, 482], "__delattr__": [61, 66, 73, 78, 91, 142, 180, 427, 482], "tp_as_async": [61, 73, 477], "__repr__": [61, 66, 78, 91, 92, 104, 159, 163, 180, 181, 182, 194, 210, 216, 224, 255, 283, 286, 307, 321, 340, 384, 385, 388, 418, 424, 427, 451, 463, 464, 471, 472, 474, 479, 480, 482], "tp_as_sequ": [61, 73], "tp_as_map": [61, 73], "tp_str": [61, 73], "__str__": [61, 66, 78, 92, 98, 99, 159, 163, 181, 182, 193, 194, 195, 200, 201, 202, 204, 210, 255, 267, 283, 285, 344, 345, 384, 388, 424, 427, 442, 463, 471, 472, 480, 482], "tp_as_buff": [61, 73, 481, 482], "tp_richcompar": [61, 73, 482], "__lt__": [61, 66, 73, 78, 92, 104, 147, 160, 167, 180, 223, 224, 225, 291, 344, 384, 388, 427, 429, 462, 468, 469, 474, 482], "__le__": [61, 66, 78, 92, 160, 180, 223, 225, 291, 344, 388, 427, 462, 468, 474], "__ne__": [61, 66, 78, 160, 193, 194, 201, 223, 285, 291, 388, 418, 427, 462, 472, 482], "__gt__": [61, 66, 78, 92, 104, 160, 180, 223, 224, 225, 291, 344, 388, 427, 462, 468, 474], "__ge__": [61, 66, 78, 92, 160, 180, 223, 225, 291, 344, 388, 427, 462, 468, 474], "tp_iter": [61, 73, 344, 463], "__iter__": [61, 66, 73, 78, 85, 92, 99, 114, 160, 181, 186, 210, 224, 258, 261, 271, 283, 285, 344, 385, 387, 388, 389, 421, 427, 429, 439, 463, 464, 467, 476, 478, 481, 482], "tp_iternext": [61, 73, 344, 463, 482], "__next__": [61, 66, 73, 85, 93, 110, 160, 165, 174, 190, 212, 216, 224, 258, 261, 283, 344, 421, 427, 429, 439, 469, 482], "tp_method": [61, 73, 74], "tp_member": [61, 73, 74, 472, 482], "tp_base": [61, 73, 74, 482], "__base__": 61, "tp_descr_get": [61, 73], "__get__": [61, 66, 85, 91, 180, 225, 255, 388, 427, 463, 478, 482], "tp_descr_set": [61, 73, 482], "__set__": [61, 66, 85, 91, 180, 255, 388, 427, 463, 478, 482], "__delete__": [61, 66, 85, 91, 255, 388, 427, 463, 482], "tp_free": [61, 73, 74, 97], "tp_is_gc": [61, 73], "__subclasses__": [61, 66, 344, 388, 473, 482], "tp_del": [61, 73, 226], "tp_version_tag": [61, 73], "tp_final": [61, 73, 477, 480, 482], "angl": [61, 102, 144, 154, 157, 208, 224, 275, 383, 467, 468, 482], "am_await": 61, "__await__": [61, 66, 85, 160, 190, 384, 427, 477, 482], "am_ait": 61, "__aiter__": [61, 66, 85, 160, 190, 224, 388, 389, 426, 427, 477, 478, 479, 482], "am_anext": 61, "__anext__": [61, 66, 85, 160, 190, 212, 224, 388, 426, 427, 429, 482], "am_send": 61, "sendfunc": 61, "__add__": [61, 66, 78, 92, 97, 159, 167, 223, 255, 289, 291, 388, 427, 429, 482], "__radd__": [61, 66, 289, 427, 429], "nb_inplace_add": 61, "__iadd__": [61, 66, 78, 83, 160, 223, 291, 427, 461], "nb_subtract": 61, "__sub__": [61, 66, 160, 223, 291, 388, 427, 429], "__rsub__": [61, 66, 167, 427], "nb_inplace_subtract": 61, "__isub__": [61, 66, 160, 223, 291, 427, 461], "nb_multipli": 61, "__mul__": [61, 66, 78, 159, 223, 291, 388, 427, 429, 482], "__rmul__": [61, 66, 78, 427, 429, 482], "nb_inplace_multipli": 61, "__imul__": [61, 66, 78, 159, 167, 223, 291, 427, 482], "nb_remaind": 61, "__mod__": [61, 66, 101, 223, 291, 388, 427, 429, 471, 482], "__rmod__": [61, 66, 159, 427, 471, 477, 482], "nb_inplace_remaind": 61, "__imod__": [61, 66, 223, 291, 427], "nb_divmod": 61, "__divmod__": [61, 66, 388, 427, 471, 477, 482], "__rdivmod__": [61, 66, 427, 471, 482], "nb_power": 61, "__pow__": [61, 66, 223, 291, 388, 427, 429, 471, 482], "__rpow__": [61, 66, 427, 471, 482], "nb_inplace_pow": 61, "__ipow__": [61, 66, 223, 291, 427, 471, 482], "nb_negat": 61, "__neg__": [61, 66, 223, 291, 388, 427, 429], "nb_posit": 61, "__pos__": [61, 66, 223, 291, 388, 427, 429], "nb_absolut": 61, "__abs__": [61, 66, 223, 224, 291, 385, 427, 482], "nb_bool": [61, 469], "__bool__": [61, 66, 92, 110, 210, 231, 291, 344, 366, 388, 404, 427, 429, 469, 482], "nb_invert": 61, "__invert__": [61, 66, 210, 223, 291, 388, 427, 429], "nb_lshift": 61, "__lshift__": [61, 66, 223, 291, 388, 427, 429], "__rlshift__": [61, 66, 427], "nb_inplace_lshift": 61, "__ilshift__": [61, 66, 223, 291, 427], "nb_rshift": 61, "__rshift__": [61, 66, 223, 291, 388, 427, 429], "__rrshift__": [61, 66, 427], "nb_inplace_rshift": 61, "__irshift__": [61, 66, 223, 291, 427], "nb_and": 61, "__and__": [61, 66, 160, 181, 210, 223, 291, 388, 427, 429], "__rand__": [61, 66, 427, 429], "nb_inplace_and": 61, "__iand__": [61, 66, 160, 167, 223, 291, 427], "nb_xor": 61, "__xor__": [61, 66, 160, 181, 210, 223, 291, 388, 427, 429], "__rxor__": [61, 66, 427, 429], "nb_inplace_xor": 61, "__ixor__": [61, 66, 160, 223, 291, 427], "nb_or": 61, "__or__": [61, 66, 160, 181, 210, 223, 291, 344, 388, 427, 429], "__ror__": [61, 66, 427, 429, 482], "nb_inplace_or": 61, "__ior__": [61, 66, 160, 223, 291, 427], "nb_int": 61, "nb_reserv": 61, "nb_float": 61, "nb_floor_divid": 61, "__floordiv__": [61, 66, 101, 223, 291, 388, 427, 429, 463, 471, 482], "nb_inplace_floor_divid": 61, "__ifloordiv__": [61, 66, 223, 291, 427], "nb_true_divid": 61, "__truediv__": [61, 66, 101, 223, 253, 280, 291, 388, 427, 429, 463, 477], "nb_inplace_true_divid": 61, "__itruediv__": [61, 66, 223, 291, 427], "nb_matrix_multipli": 61, "__matmul__": [61, 66, 223, 291, 388, 427, 477], "__rmatmul__": [61, 66, 427, 477], "nb_inplace_matrix_multipli": 61, "__imatmul__": [61, 66, 223, 291, 427, 477], "mp_length": 61, "__len__": [61, 66, 78, 85, 114, 160, 181, 193, 195, 204, 210, 224, 271, 283, 285, 291, 344, 385, 388, 409, 412, 426, 427, 464, 465, 480, 482], "mp_subscript": [61, 482], "mp_ass_subscript": 61, "__setitem__": [61, 66, 78, 159, 160, 190, 193, 195, 204, 207, 223, 271, 283, 285, 291, 299, 388, 389, 406, 409, 412, 427, 435, 464, 469, 482], "__delitem__": [61, 66, 78, 159, 160, 193, 195, 204, 223, 271, 285, 291, 388, 406, 409, 412, 427, 464, 469, 482], "sq_concat": 61, "sq_repeat": 61, "sq_item": [61, 482], "sq_ass_item": 61, "sq_inplace_concat": 61, "sq_inplace_repeat": 61, "releasebufferproc": 61, "_typeobject": [61, 73], "tp_compar": [61, 73], "tp_reserv": [61, 73, 477], "suit": [61, 66, 73, 76, 82, 83, 85, 88, 93, 98, 99, 101, 160, 186, 192, 229, 254, 258, 283, 292, 341, 343, 381, 387, 388, 399, 421, 426, 455, 460, 466, 467, 468, 469, 471, 472, 474, 476, 478, 479, 481, 482], "rich": [61, 62, 66, 73, 82, 110, 159, 196, 224, 225, 291, 368, 374, 418, 427, 429, 431, 469, 474, 479, 481, 482, 483], "stuff": [61, 73, 77, 88, 98, 99, 120, 168, 175, 192, 307, 388, 469], "resolut": [61, 66, 73, 74, 83, 85, 91, 97, 114, 116, 125, 181, 182, 213, 215, 224, 225, 231, 244, 255, 293, 294, 295, 296, 299, 308, 337, 344, 365, 426, 427, 431, 439, 464, 466, 472, 475, 476, 477, 478, 480, 481, 482], "type_new": [61, 91, 482], "metatyp": [61, 255], "complain": [61, 74, 87, 88, 99, 168, 246, 462, 482], "foo_typ": 61, "_ob_next": 61, "_ob_prev": 61, "getobject": [61, 455, 480, 482], "pickl": [61, 66, 74, 82, 88, 98, 99, 142, 157, 159, 170, 175, 181, 182, 185, 225, 254, 262, 264, 267, 268, 269, 274, 283, 284, 298, 327, 330, 378, 385, 388, 445, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 482, 483], "pydoc": [61, 66, 74, 82, 186, 224, 254, 419, 462, 463, 464, 465, 468, 470, 477, 482], "meaning": [61, 102, 121, 192, 197, 234, 250, 255, 259, 268, 271, 293, 314, 319, 337, 341, 343, 352, 381, 384, 394, 397, 427, 433, 435, 469, 474, 476, 477, 482], "whichev": [61, 71, 73, 108, 112, 182, 267, 347, 387, 460, 475, 477], "align": [61, 66, 116, 145, 153, 345, 361, 375, 383, 407, 467, 468, 482], "permiss": [61, 82, 83, 85, 98, 99, 106, 108, 162, 211, 212, 215, 222, 247, 257, 286, 293, 294, 296, 311, 332, 333, 337, 340, 342, 357, 359, 385, 394, 396, 404, 425, 460, 468, 479, 482], "pyobject_varnew": 61, "foo_dealloc": [61, 480], "foo_object": 61, "tp_print": [61, 481], "inconsist": [61, 189, 212, 293, 337, 388, 434, 462, 478, 482], "group": [61, 66, 76, 82, 87, 92, 96, 98, 99, 105, 108, 116, 123, 142, 151, 157, 168, 174, 177, 185, 186, 189, 190, 192, 193, 202, 210, 218, 224, 247, 251, 254, 259, 261, 266, 271, 281, 283, 285, 288, 293, 296, 299, 310, 314, 319, 332, 334, 337, 339, 341, 342, 343, 344, 345, 348, 350, 357, 362, 364, 374, 375, 381, 385, 390, 393, 399, 404, 408, 414, 418, 427, 429, 430, 433, 434, 442, 451, 460, 461, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482], "relev": [61, 66, 71, 73, 82, 83, 87, 88, 90, 93, 96, 98, 99, 108, 120, 121, 145, 166, 185, 186, 192, 193, 207, 214, 222, 241, 244, 251, 262, 267, 268, 269, 288, 292, 293, 300, 302, 306, 341, 344, 348, 354, 361, 387, 406, 413, 422, 424, 460, 461, 463, 465, 473, 475, 476, 477, 478, 481, 482], "await": [61, 66, 85, 122, 123, 125, 128, 129, 131, 132, 133, 134, 135, 136, 137, 160, 168, 169, 181, 186, 187, 190, 224, 255, 264, 344, 376, 384, 385, 387, 388, 426, 430, 432, 434, 461, 464, 471, 472, 478, 479, 480, 481, 482], "eval": [61, 66, 83, 86, 110, 119, 120, 144, 156, 158, 212, 224, 254, 255, 268, 297, 299, 307, 327, 344, 374, 380, 428, 430, 434, 435, 436, 439, 443, 449, 461, 465, 467, 469, 470, 471, 472, 473, 474, 482], "feasibl": [61, 71, 330, 471, 476, 482], "deduc": [61, 174, 192, 283, 308, 353, 460, 474], "isinst": [61, 66, 76, 83, 85, 86, 91, 92, 98, 99, 110, 114, 151, 160, 168, 180, 182, 210, 224, 250, 251, 254, 255, 262, 289, 291, 299, 344, 384, 385, 387, 388, 389, 426, 427, 439, 449, 461, 464, 465, 467, 469, 471, 472, 474, 478, 479, 482], "among": [61, 104, 125, 141, 175, 180, 189, 192, 226, 231, 271, 283, 284, 300, 328, 347, 352, 365, 368, 374, 387, 427, 434, 460, 474, 480, 482], "mask": [61, 66, 175, 176, 210, 256, 293, 322, 329, 332, 333, 337, 342, 355, 368, 375, 404, 427, 465, 467, 474, 475, 481, 482], "xxx": [61, 98, 99, 118, 431, 468, 470, 475, 482], "ore": [61, 177, 189, 192, 214, 293, 319, 341, 368, 405], "java": [61, 66, 76, 78, 82, 83, 93, 99, 102, 103, 114, 116, 224, 293, 344, 364, 409, 413, 414, 427, 433, 438, 440, 443, 461, 465, 466, 467, 469, 471, 474], "bitmask": [61, 125, 192, 295, 328, 329], "py_tpflags_have_stackless_extens": 61, "__dict___": 61, "ins": [61, 92, 93, 461, 463, 464, 465], "abc": [61, 66, 71, 76, 78, 83, 85, 86, 88, 91, 93, 101, 102, 105, 110, 125, 132, 135, 159, 166, 169, 175, 181, 183, 186, 190, 225, 227, 241, 251, 252, 254, 258, 259, 261, 267, 268, 280, 283, 290, 299, 315, 319, 321, 330, 331, 344, 345, 352, 361, 381, 384, 422, 425, 426, 427, 429, 431, 434, 439, 441, 461, 463, 464, 465, 466, 467, 468, 469, 472, 473, 478, 479, 480, 482], "634": [61, 66, 110, 426, 427, 482], "local_travers": 61, "_thread": [61, 66, 82, 163, 254, 364, 464, 475, 482], "localobject": [61, 88], "hand": [61, 71, 73, 76, 82, 83, 88, 92, 93, 101, 102, 103, 108, 120, 128, 175, 176, 180, 185, 195, 200, 205, 212, 224, 229, 246, 258, 269, 299, 305, 319, 338, 365, 368, 383, 385, 388, 426, 429, 433, 435, 450, 461, 462, 463, 464, 466, 467, 469, 470, 475, 480, 482], "aid": [61, 100, 340, 460, 464, 465, 468, 474, 475, 476, 482], "anyway": [61, 74, 76, 87, 175, 182, 224, 242, 246, 259, 387, 388, 462, 463, 473, 482], "get_refer": [61, 66, 142, 226, 315, 464, 471, 482], "weakrefer": 61, "40217": [61, 481, 482], "doubt": [61, 82, 90, 166, 182, 466], "prove": [61, 93, 175, 261, 341, 426, 464, 469, 470], "compos": [61, 66, 114, 172, 199, 200, 201, 202, 207, 272, 293, 335, 354, 355, 374, 381, 385, 386, 434, 475], "local_clear": 61, "trash": [61, 271, 482], "reclam": 61, "weakref": [61, 66, 73, 83, 85, 180, 181, 212, 254, 283, 316, 344, 361, 451, 462, 463, 465, 466, 468, 472, 473, 482], "py_return_richcompar": [61, 479, 482], "val_a": 61, "val_b": 61, "pyweakref_": 61, "unari": [61, 66, 120, 185, 190, 344, 388, 427, 432, 434, 475], "overload": [61, 66, 125, 186, 225, 385, 394, 418, 427, 429, 462, 463, 472, 476, 482], "reiniti": [61, 482], "unrel": [61, 71, 83, 92, 114, 150, 212, 271, 337, 472, 482], "thumb": [61, 97, 101, 189, 375], "defer": [61, 66, 71, 98, 125, 159, 192, 231, 245, 258, 269, 278, 340, 341, 355, 462, 467, 482], "presum": [61, 98, 160, 174, 182, 208, 271, 283, 347, 348, 393, 429, 463, 468, 469, 482], "mixtur": [61, 202, 430, 434, 472, 477], "_pyobject_get_weakrefs_listptr": [61, 473], "sane": [61, 176, 182, 319, 482], "trivial": [61, 66, 70, 71, 73, 76, 82, 93, 136, 151, 193, 199, 207, 233, 283, 299, 319, 350, 389, 406, 464, 475, 476, 482], "local_fin": 61, "error_typ": 61, "error_valu": 61, "error_traceback": 61, "442": [61, 66, 73, 226, 481, 482], "tradit": [61, 71, 74, 76, 91, 97, 108, 172, 266, 271, 275, 292, 293, 299, 308, 310, 358, 361, 426, 430, 431, 455, 460, 464, 467, 474, 479, 482], "ternari": [61, 427, 429], "operand": [61, 66, 87, 120, 157, 182, 190, 192, 212, 224, 267, 290, 344, 427, 429, 435, 442, 448, 463, 468, 469, 474, 475, 482], "nb_long": 61, "pyobject_setslic": 61, "pyobject_delslic": 61, "augment": [61, 66, 83, 120, 192, 268, 276, 331, 374, 427, 430, 434, 454, 474, 482, 483], "root": [61, 66, 86, 91, 98, 99, 108, 109, 110, 112, 141, 142, 154, 159, 175, 185, 200, 204, 205, 206, 209, 218, 230, 234, 246, 247, 261, 267, 268, 275, 283, 289, 293, 294, 296, 302, 304, 314, 332, 339, 341, 342, 343, 348, 352, 357, 361, 365, 368, 370, 371, 374, 375, 385, 387, 409, 412, 414, 420, 421, 422, 427, 451, 454, 455, 461, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 480, 481, 482], "react": [61, 90, 272, 368, 461, 467], "adequ": [61, 74, 83, 212, 468, 475], "demonstr": [61, 71, 73, 87, 90, 92, 99, 102, 103, 112, 114, 118, 140, 149, 175, 185, 241, 243, 246, 261, 278, 283, 284, 292, 307, 319, 320, 343, 368, 379, 380, 383, 387, 412, 424, 429, 441, 460, 462, 474, 482], "tricki": [61, 83, 88, 92, 147, 156, 292, 368, 461, 462, 469], "tutori": [61, 66, 72, 87, 90, 99, 103, 106, 112, 116, 118, 161, 176, 192, 210, 212, 224, 225, 246, 267, 268, 269, 273, 290, 298, 337, 344, 350, 367, 368, 406, 426, 433, 452, 463, 465, 466, 467, 471, 474, 482], "assort": [61, 66, 72, 192, 374, 482], "topic": [61, 66, 70, 72, 74, 77, 82, 90, 102, 155, 192, 210, 267, 292, 307, 313, 337, 461, 464, 470, 482], "myobject": [61, 73], "myobject_typ": 61, "mymod": 61, "my": [61, 66, 71, 76, 88, 92, 93, 99, 103, 106, 108, 151, 159, 192, 229, 235, 247, 268, 296, 341, 344, 345, 361, 368, 445, 461, 463, 464, 465, 466, 472, 482], "myobj_new": 61, "myobj_dealloc": 61, "myobj_repr": 61, "myobj_travers": 61, "myobj_clear": 61, "myobj_hash": 61, "mystr": 61, "mystr_typ": 61, "393": [62, 66, 157, 352, 471, 481, 482, 483], "65536": [62, 448, 482], "1114112": [62, 157], "623": [62, 318, 471, 473, 482], "py_ucs2": [62, 475], "py_ucs1": [62, 475], "narrow": [62, 319, 337, 343, 344, 385, 455, 463, 471, 474, 475, 482], "pyasciiobject": [62, 475], "pycompactunicodeobject": [62, 475], "shouldn": [62, 66, 74, 86, 88, 97, 102, 132, 209, 267, 272, 302, 327, 341, 345, 352, 387, 394, 457, 462, 463, 465, 466, 467, 470, 478, 482], "pyunicode_check": [62, 74], "pyunicode_checkexact": 62, "pyunicode_readi": [62, 472, 475], "pyunicode_get_length": [62, 471, 475], "canon": [62, 66, 83, 85, 92, 144, 166, 182, 184, 185, 194, 234, 290, 292, 294, 296, 337, 346, 386, 412, 424, 429, 468, 472, 477, 482], "pyunicode_1byte_data": [62, 475], "pyunicode_2byte_data": [62, 475], "pyunicode_4byte_data": [62, 475], "ucs1": [62, 482], "ucs2": [62, 482], "ucs4": [62, 463, 482], "pyunicode_kind": [62, 475], "pyunicode_1byte_kind": [62, 475], "pyunicode_2byte_kind": [62, 475], "pyunicode_4byte_kind": [62, 475], "pyunicode_wchar_kind": [62, 472, 473, 475], "pyunicode_data": [62, 475, 482], "pyunicode_writ": [62, 475], "saniti": [62, 455, 476, 482], "pyunicode_read": [62, 475], "pyunicode_read_char": [62, 475], "pyunicode_max_char_valu": [62, 475], "py_unicode_isspac": [62, 482], "ch": [62, 88, 90, 98, 99, 157, 176, 189, 394, 459, 461, 482], "py_unicode_islow": 62, "lowercas": [62, 102, 105, 143, 155, 157, 166, 185, 195, 204, 234, 259, 294, 305, 319, 344, 345, 352, 363, 397, 434, 469, 482], "py_unicode_isupp": 62, "uppercas": [62, 83, 88, 91, 105, 118, 148, 177, 259, 281, 292, 344, 345, 434, 461, 468, 469, 476, 478, 482], "py_unicode_istitl": 62, "titlecas": [62, 344, 434, 482], "py_unicode_islinebreak": 62, "linebreak": 62, "py_unicode_isdecim": [62, 474], "py_unicode_isdigit": 62, "py_unicode_isnumer": 62, "py_unicode_isalpha": 62, "alphabet": [62, 83, 87, 104, 143, 146, 172, 177, 185, 195, 198, 262, 267, 271, 308, 326, 334, 344, 384, 460, 464, 465, 466, 467, 468, 471, 476, 477, 478, 479, 480, 482], "py_unicode_isalnum": 62, "alphanumer": [62, 102, 151, 177, 192, 250, 268, 272, 299, 319, 331, 344, 345, 365, 464, 482], "py_unicode_isprint": 62, "printabl": [62, 66, 146, 157, 176, 177, 194, 195, 196, 197, 201, 202, 207, 224, 254, 282, 285, 344, 345, 346, 362, 427, 462, 469, 474], "nonprint": [62, 317, 344], "databas": [62, 66, 70, 91, 102, 105, 142, 157, 174, 176, 180, 182, 208, 224, 242, 254, 261, 266, 276, 296, 298, 299, 308, 330, 339, 344, 346, 350, 362, 364, 365, 368, 374, 375, 390, 394, 424, 431, 434, 442, 462, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "0x20": [62, 143, 344, 427], "bear": [62, 108, 182, 242, 250, 283, 344, 352, 472, 482], "py_unicode_tolow": [62, 474], "py_unicode_toupp": 62, "upper": [62, 66, 83, 90, 93, 98, 99, 102, 120, 121, 146, 148, 151, 159, 176, 189, 247, 283, 319, 337, 338, 340, 341, 344, 345, 374, 383, 387, 427, 429, 430, 435, 464, 474, 480, 482], "py_unicode_totitl": 62, "py_unicode_todecim": 62, "py_unicode_todigit": 62, "py_unicode_tonumer": 62, "py_unicode_is_surrog": 62, "0xd800": 62, "0xdfff": 62, "py_unicode_is_high_surrog": 62, "0xdbff": 62, "py_unicode_is_low_surrog": 62, "0xdc00": 62, "py_unicode_join_surrog": 62, "join": [62, 66, 75, 77, 83, 93, 99, 103, 112, 118, 120, 121, 125, 133, 135, 151, 154, 157, 159, 163, 165, 174, 185, 189, 199, 201, 202, 207, 218, 221, 224, 241, 242, 243, 246, 259, 261, 268, 270, 279, 283, 284, 293, 294, 296, 302, 316, 319, 320, 321, 326, 331, 332, 335, 337, 338, 342, 344, 345, 361, 363, 364, 366, 384, 385, 393, 398, 406, 409, 410, 412, 420, 421, 424, 440, 448, 451, 461, 465, 466, 467, 474, 475, 476, 477, 478, 479, 480, 482], "pyunicode_new": [62, 471, 475], "maxchar": 62, "nearest": [62, 182, 185, 220, 224, 275, 289, 343, 400, 428, 435, 469, 470, 482], "65535": [62, 421, 463], "1114111": [62, 352, 475], "pyunicode_fromkindanddata": [62, 475], "transform": [62, 66, 85, 91, 92, 93, 99, 101, 103, 104, 105, 110, 120, 138, 145, 147, 166, 174, 182, 185, 192, 195, 196, 200, 204, 207, 210, 212, 224, 225, 255, 266, 267, 271, 299, 344, 377, 383, 384, 385, 412, 426, 427, 429, 461, 462, 467, 469, 476, 477, 479, 482], "codepoint": [62, 246], "li": [62, 410, 477, 479, 482], "lld": [62, 455, 468], "lli": [62, 383], "llu": [62, 468], "zi": 62, "width": [62, 66, 73, 83, 90, 102, 115, 118, 141, 150, 157, 175, 176, 180, 182, 185, 221, 224, 246, 281, 292, 293, 307, 319, 343, 344, 345, 352, 362, 363, 365, 368, 371, 375, 383, 385, 386, 400, 427, 434, 448, 451, 461, 464, 466, 467, 468, 474, 476, 478, 480, 482], "formatt": [62, 66, 116, 118, 268, 269, 292, 345, 362, 464, 468, 471, 474, 476, 477, 479, 482], "pyunicode_copycharact": [62, 471, 472, 475, 482], "to_start": 62, "from_start": 62, "how_mani": 62, "memcpi": [62, 420, 472, 482], "pyunicode_fil": [62, 472, 475, 482], "fill_char": 62, "bigger": [62, 91, 275, 332, 344, 357, 460, 480, 482], "contrast": [62, 104, 185, 225, 246, 262, 308, 341, 344, 368, 385, 411, 427, 429, 431, 463, 475, 478, 479], "substr": [62, 88, 93, 102, 105, 166, 192, 234, 292, 294, 319, 344, 387, 429, 448, 461, 463, 464, 465, 466, 467, 471, 475, 477, 479, 482], "buflen": [62, 337], "copy_nul": 62, "383": [62, 157, 337, 482], "strlen": [62, 77, 103, 105], "parsetupl": 62, "wcslen": 62, "deviat": [62, 101, 343, 348, 366, 393, 474, 475, 476, 482], "pyunicode_asutf8": [62, 475, 479, 482], "byteord": [62, 66, 315, 344, 347, 352, 449, 482], "bom": [62, 66, 105, 145, 262, 377, 482], "divis": [62, 64, 66, 83, 85, 99, 111, 120, 182, 185, 212, 302, 333, 340, 343, 344, 427, 428, 429, 435, 442, 448, 464, 465, 467, 468, 472, 474, 481, 482, 483], "ufeff": 62, "ufff": 62, "odd": [62, 66, 90, 93, 153, 185, 234, 308, 343, 348, 434, 440, 461, 464, 465, 466, 468, 482], "ordin": [62, 92, 105, 157, 175, 176, 177, 182, 343, 344, 475, 477], "unmap": [62, 375], "0xfffe": [62, 157], "translat": [62, 66, 71, 101, 102, 104, 105, 110, 157, 175, 176, 186, 211, 212, 218, 219, 221, 224, 237, 239, 244, 245, 250, 258, 262, 282, 293, 333, 337, 343, 344, 345, 348, 386, 412, 416, 418, 426, 427, 461, 464, 465, 467, 468, 469, 470, 472, 474, 477, 479, 480, 482], "dbcs": [62, 157], "code_pag": [62, 475], "cp_acp": [62, 157, 475, 478], "capabl": [62, 74, 90, 91, 93, 99, 102, 120, 125, 139, 168, 176, 185, 192, 211, 233, 235, 244, 247, 251, 253, 255, 257, 258, 259, 272, 282, 283, 288, 292, 305, 306, 307, 320, 374, 378, 389, 393, 412, 414, 421, 429, 454, 463, 464, 465, 466, 474, 475, 476, 477, 482], "sep": [62, 66, 83, 93, 116, 146, 182, 185, 224, 230, 243, 246, 293, 296, 341, 344, 345, 406, 426, 440, 463, 466, 467, 468, 469, 472, 482], "maxsplit": [62, 102, 319, 344], "keepend": [62, 157, 189, 199, 344], "crlf": [62, 222, 243, 244, 479, 482], "tail": [62, 66, 151, 159, 189, 261, 273, 294, 334, 412, 466, 475, 478, 482], "overlap": [62, 66, 90, 102, 160, 165, 176, 189, 256, 259, 261, 282, 290, 292, 296, 319, 343, 344, 371, 383, 435, 462, 463, 482], "replstr": 62, "maxcount": 62, "uni": 62, "iso": [62, 150, 157, 182, 189, 194, 195, 201, 204, 238, 241, 266, 288, 314, 337, 340, 352, 365, 397, 406, 416, 418, 461, 465, 472, 474, 477, 478, 480, 482], "8859": [62, 105, 157, 189, 194, 195, 201, 204, 241, 288, 314, 406, 416, 461, 474, 477], "clarif": [62, 431, 482], "lot": [62, 66, 71, 73, 75, 77, 82, 83, 88, 98, 102, 103, 105, 106, 108, 151, 168, 169, 175, 183, 192, 199, 233, 244, 259, 267, 283, 292, 304, 308, 330, 338, 348, 373, 381, 388, 408, 461, 462, 463, 464, 465, 467, 468, 469, 476, 481, 482], "neutral": [62, 71, 96, 476], "grammar": [64, 66, 93, 110, 156, 264, 345, 376, 426, 430, 433, 434, 436, 461, 462, 466, 469, 471, 481, 482], "py_eval_input": [64, 77, 430], "py_file_input": [64, 430, 471], "py_single_input": [64, 430], "incompat": [64, 78, 88, 101, 111, 165, 175, 183, 210, 212, 255, 259, 267, 271, 288, 299, 423, 435, 455, 461, 464, 466, 469, 474, 475, 477, 479, 480, 481, 482], "pyrun_anyfil": 64, "pyrun_anyfileexflag": 64, "closeit": 64, "pyrun_anyfileflag": 64, "pycompilerflag": [64, 480], "pyrun_anyfileex": 64, "devic": [64, 66, 96, 130, 157, 176, 177, 211, 224, 235, 246, 258, 269, 293, 294, 296, 328, 329, 332, 333, 337, 342, 348, 350, 352, 357, 404, 412, 436, 454, 461, 467, 482], "pseudo": [64, 66, 88, 92, 118, 175, 180, 190, 195, 254, 274, 286, 293, 302, 322, 326, 341, 344, 352, 390, 431, 463, 464, 467, 473, 475, 478, 482], "pyrun_interactiveloop": [64, 77], "pyrun_simplefil": [64, 70], "pyrun_simplefileexflag": [64, 482], "pyrun_simplestringflag": 64, "pyrun_simplefileex": 64, "fopen": [64, 189, 475], "rb": [64, 82, 85, 99, 101, 115, 125, 149, 159, 199, 207, 217, 224, 233, 234, 249, 252, 253, 258, 270, 288, 299, 302, 304, 344, 377, 378, 385, 396, 400, 406, 418, 421, 434, 445, 451, 461, 464, 471, 475, 482], "lf": [64, 177, 207, 434, 482], "pyrun_interactiveon": [64, 482], "pyrun_interactiveoneflag": 64, "ps1": [64, 66, 156, 315, 337, 352, 398, 437, 449, 454, 480, 482], "ps2": [64, 66, 156, 315, 352, 437, 449, 454, 482], "errcod": [64, 66, 256, 418], "pyrun_interactiveloopflag": 64, "eof": [64, 66, 103, 117, 125, 129, 132, 135, 136, 149, 155, 156, 167, 192, 212, 221, 222, 224, 258, 270, 293, 309, 328, 331, 337, 340, 341, 358, 423, 454, 466, 471, 475, 482], "prototyp": [64, 66, 70, 88, 116, 155, 185, 340, 461, 466, 468, 482], "idl": [64, 66, 77, 78, 83, 85, 165, 174, 175, 177, 228, 254, 334, 348, 367, 368, 383, 409, 410, 412, 458, 460, 463, 464, 483], "wait": [64, 66, 71, 83, 90, 99, 103, 106, 113, 116, 118, 120, 123, 124, 125, 128, 131, 132, 133, 135, 136, 137, 163, 165, 176, 188, 206, 207, 244, 246, 254, 255, 257, 260, 269, 282, 283, 284, 293, 295, 318, 322, 325, 329, 333, 335, 337, 338, 340, 341, 342, 348, 360, 361, 364, 369, 394, 398, 402, 440, 451, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_tkinter": [64, 368, 464, 472, 477, 481, 482], "pyos_readlinefunctionpoint": [64, 77, 471, 476, 482], "edit": [64, 66, 88, 90, 93, 99, 102, 105, 108, 116, 155, 166, 176, 189, 249, 250, 262, 271, 272, 293, 294, 319, 320, 343, 357, 366, 367, 368, 375, 378, 444, 454, 460, 461, 462, 464, 465, 467, 469, 474, 475, 478, 479, 482], "pyrun_str": [64, 77, 482], "pyrun_stringflag": 64, "pyrun_fil": 64, "pyrun_fileexflag": 64, "pyrun_fileex": 64, "pyrun_fileflag": 64, "py_compilestringflag": 64, "py_compilestringexflag": 64, "py_compilestringobject": 64, "constrain": [64, 96, 120, 207, 284, 385, 412, 429, 431, 463, 466, 474, 480], "kws": [64, 224, 352], "kwcount": 64, "defcount": 64, "kwdef": 64, "precompil": [64, 88, 324, 344, 454, 482], "unvarnish": 64, "thrown": [64, 88, 93, 138, 182, 185, 294, 319, 463, 464, 475, 482], "pyeval_mergecompilerflag": 64, "cf": [64, 102, 337], "arbitrarili": [64, 120, 166, 168, 190, 268, 318, 344, 387, 394, 429, 465, 471, 480, 482], "__future__": [64, 66, 85, 86, 101, 110, 158, 212, 224, 254, 255, 263, 315, 385, 426, 427, 435, 463, 464, 466, 467, 469, 471, 472, 476, 477, 479, 481, 482, 483], "cf_flag": [64, 480], "cf_feature_vers": [64, 480, 482], "pycf_only_ast": [64, 66, 120, 264, 466, 480, 482], "co_future_divis": [64, 481], "238": [64, 66, 85, 111, 469, 483], "proxi": [65, 66, 163, 166, 169, 181, 186, 212, 224, 225, 241, 247, 257, 341, 344, 384, 387, 394, 401, 409, 418, 425, 427, 462, 467, 474, 475, 477, 478, 480, 482], "pyweakref_check": 65, "pyweakref_checkref": 65, "pyweakref_checkproxi": 65, "pyweakref_get_object": [65, 472, 482], "summari": [66, 82, 88, 192, 251, 292, 302, 307, 322, 350, 379, 380, 385, 406, 425, 452, 460, 462, 463, 464, 465, 474, 482, 483], "highlight": [66, 78, 90, 176, 189, 246, 387, 393, 456, 461, 468, 474, 482, 483], "asyncio": [66, 82, 98, 99, 112, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 163, 168, 187, 254, 260, 267, 283, 341, 348, 352, 364, 388, 389, 427, 429, 454, 482], "pathlib": [66, 118, 142, 162, 218, 230, 251, 252, 253, 254, 293, 294, 415, 420, 421, 482], "dis": [66, 85, 254, 255, 264, 300, 352, 478, 482], "shutil": [66, 82, 99, 106, 117, 142, 165, 218, 224, 233, 254, 293, 296, 348, 357, 361, 401, 450, 464, 467, 468, 471, 479, 482], "sqlite3": [66, 82, 91, 142, 159, 254, 298, 299, 455, 467, 468, 480, 482], "unicodedata": [66, 102, 105, 254, 344, 362, 429, 434, 461, 466, 467, 468, 471, 474, 475, 482], "tempfil": [66, 106, 142, 199, 218, 224, 254, 283, 293, 327, 361, 394, 401, 467, 469, 482], "demo": [66, 87, 99, 221, 246, 406, 410, 419, 450, 464, 467, 474, 483], "13": [66, 93, 95, 99, 100, 105, 108, 110, 115, 138, 141, 150, 151, 152, 153, 157, 159, 172, 175, 182, 192, 210, 225, 235, 240, 248, 259, 261, 266, 272, 278, 281, 287, 294, 295, 301, 322, 332, 336, 339, 340, 343, 344, 345, 349, 358, 359, 377, 383, 385, 396, 402, 407, 440, 445, 448, 449, 463, 464, 465, 466, 467, 468, 472, 474, 476, 477, 479, 480, 481, 482, 483], "14": [66, 83, 87, 92, 93, 95, 102, 105, 119, 138, 141, 157, 159, 175, 176, 182, 185, 190, 192, 224, 235, 240, 246, 253, 259, 261, 293, 319, 322, 340, 343, 345, 352, 365, 377, 383, 397, 429, 431, 434, 441, 443, 445, 448, 451, 463, 465, 466, 468, 472, 474, 477, 478, 479, 480, 481, 482, 483], "657": [66, 482], "fine": [66, 71, 76, 82, 83, 97, 99, 103, 105, 106, 166, 175, 176, 192, 200, 210, 242, 292, 293, 318, 319, 333, 341, 352, 368, 385, 388, 394, 427, 460, 461, 462, 464, 466, 482], "grain": [66, 82, 98, 99, 176, 192, 210, 267, 293, 318, 352, 394, 427, 482, 483], "654": [66, 482], "678": [66, 482], "enrich": [66, 70, 482], "exe": [66, 84, 100, 102, 246, 269, 283, 293, 294, 332, 334, 398, 420, 421, 437, 445, 447, 455, 460, 463, 468, 474, 478, 479, 482], "launcher": [66, 398, 420, 447, 457, 468, 476, 478, 479, 482, 483], "646": [66, 157, 385, 482], "variad": [66, 385, 440, 482], "655": [66, 385, 482], "typeddict": [66, 186, 385, 471, 480, 482], "673": [66, 99, 385, 482], "675": [66, 224, 385, 482], "681": [66, 385, 482], "563": [66, 111, 288, 385, 426, 435, 482], "contextlib": [66, 76, 254, 315, 344, 381, 385, 468, 469, 470, 480, 482], "dataclass": [66, 159, 235, 254, 307, 308, 315, 316, 344, 385, 440, 482], "fraction": [66, 71, 105, 182, 185, 192, 224, 225, 254, 261, 266, 275, 289, 290, 308, 318, 319, 340, 341, 343, 344, 364, 365, 383, 429, 434, 443, 448, 463, 464, 465, 466, 468, 469, 470, 471, 477, 478, 480, 481, 482], "functool": [66, 83, 85, 86, 91, 104, 110, 125, 128, 147, 159, 219, 223, 224, 251, 254, 255, 261, 344, 427, 466, 467, 468, 469, 470, 482], "idlelib": [66, 367, 368, 464, 482], "math": [66, 85, 88, 93, 108, 154, 165, 185, 192, 211, 220, 224, 254, 261, 283, 289, 290, 318, 343, 344, 347, 352, 383, 425, 427, 429, 441, 443, 445, 450, 455, 464, 465, 467, 468, 470, 482], "sysconfig": [66, 70, 100, 254, 293, 315, 381, 398, 420, 424, 471, 476, 482], "tkinter": [66, 78, 254, 367, 383, 458, 461, 464, 467, 469, 470, 482], "unittest": [66, 76, 82, 110, 186, 254, 361, 381, 399, 450, 464, 470, 473, 481, 482], "venv": [66, 85, 109, 112, 191, 251, 254, 354, 452, 460, 475, 479, 482], "zipfil": [66, 117, 254, 324, 327, 332, 357, 399, 420, 431, 450, 451, 454, 461, 466, 467, 468, 470, 482], "fcntl": [66, 142, 254, 337, 390, 463, 464, 465, 467, 482], "cheaper": [66, 380, 479], "lazi": [66, 86, 93, 108, 134, 224, 280, 341, 344, 352, 358, 404, 466, 471, 477, 479, 482], "659": [66, 482], "faq": [66, 76, 80, 83, 84, 224, 234, 255, 290, 305, 344, 393, 453, 466, 468, 476, 482], "wildcard": [66, 120, 188, 219, 230, 288, 331, 348, 387, 412, 434, 440, 442, 444, 479, 480, 482], "604": [66, 86, 344, 385, 482], "612": [66, 98, 385, 467, 482], "613": [66, 385, 482], "typealia": [66, 186, 385, 482], "647": [66, 385, 482], "argpars": [66, 94, 99, 116, 159, 189, 199, 227, 254, 292, 309, 398, 450, 473, 482, 483], "asynchat": [66, 139, 254, 350, 425, 467, 472, 476, 482], "asyncor": [66, 121, 254, 338, 350, 425, 465, 467, 472, 473, 482], "smtpd": [66, 472, 473, 478, 481, 482], "base64": [66, 146, 157, 194, 195, 196, 197, 198, 201, 202, 205, 207, 234, 247, 251, 254, 285, 317, 326, 327, 335, 341, 381, 394, 396, 418, 463, 465, 481, 482], "bdb": [66, 166, 184, 254, 297, 455, 468, 480, 482], "bisect": [66, 181, 254, 451, 465, 482], "curs": [66, 88, 94, 116, 254, 461, 462, 465, 467, 482], "__slots__": [66, 85, 159, 180, 224, 225, 255, 299, 401, 463, 468, 480, 482], "distutil": [66, 68, 69, 74, 75, 109, 251, 334, 354, 420, 454, 455, 458, 460, 462, 466, 467, 468, 472, 474, 480, 482, 483], "doctest": [66, 76, 82, 110, 175, 186, 254, 262, 361, 377, 380, 381, 387, 450, 462, 464, 466, 468, 470, 474, 475, 482], "fileinput": [66, 218, 224, 254, 293, 352, 466, 472, 474, 480, 482], "glob": [66, 99, 142, 144, 186, 192, 218, 219, 254, 281, 294, 296, 297, 332, 348, 350, 450, 467, 468, 472, 474, 478, 482], "hmac": [66, 172, 173, 234, 254, 269, 283, 299, 326, 337, 463, 468, 480, 482], "metadata": [66, 68, 82, 95, 106, 109, 180, 225, 229, 250, 254, 255, 280, 288, 293, 294, 311, 332, 342, 357, 385, 418, 420, 421, 427, 431, 440, 452, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483], "itertool": [66, 85, 110, 159, 223, 224, 225, 235, 246, 250, 254, 279, 291, 318, 343, 464, 465, 466, 467, 468, 469, 470, 482], "linecach": [66, 218, 254, 381, 482], "pprint": [66, 91, 147, 181, 189, 254, 297, 299, 341, 451, 462, 470, 474, 482], "py_compil": [66, 83, 162, 249, 254, 264, 350, 468, 474, 476, 482], "pyclbr": [66, 254, 264, 482], "shelv": [66, 82, 183, 254, 274, 298, 299, 327, 344, 461, 464, 474, 482], "ssl": [66, 92, 106, 125, 132, 135, 222, 241, 247, 254, 260, 269, 288, 293, 305, 327, 335, 337, 385, 394, 406, 418, 425, 455, 459, 461, 464, 465, 468, 473, 481, 482], "urllib": [66, 82, 94, 110, 135, 142, 151, 165, 168, 222, 225, 240, 241, 242, 254, 256, 269, 307, 381, 388, 398, 450, 461, 464, 466, 467, 469, 480, 482], "zipimport": [66, 175, 252, 254, 280, 302, 431, 464, 466, 470, 473, 482], "652": [66, 482], "zoneinfo": [66, 181, 182, 254, 365, 455, 482], "graphlib": [66, 181, 254, 482], "ast": [66, 183, 224, 254, 264, 351, 376, 466, 471, 472, 473, 475, 479, 482], "compileal": [66, 83, 254, 264, 311, 352, 449, 460, 474, 478, 482], "ftplib": [66, 142, 157, 254, 256, 394, 462, 464, 467, 468, 474, 476, 477, 478, 482], "http": [66, 78, 82, 98, 99, 103, 106, 121, 132, 142, 143, 151, 157, 165, 168, 182, 193, 199, 207, 208, 239, 254, 256, 269, 285, 313, 314, 327, 333, 337, 338, 341, 350, 361, 381, 392, 393, 394, 395, 408, 412, 414, 417, 418, 419, 423, 425, 427, 431, 450, 451, 452, 453, 454, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 480, 482], "imaplib": [66, 102, 142, 193, 254, 256, 305, 463, 464, 465, 468, 470, 478, 482], "ipaddress": [66, 94, 254, 256, 480, 482], "multiprocess": [66, 82, 98, 103, 124, 125, 163, 165, 246, 254, 269, 316, 327, 341, 361, 364, 397, 406, 420, 468, 469, 482, 483], "nntplib": [66, 142, 193, 200, 254, 350, 461, 465, 468, 470, 472, 473, 474, 482], "pdb": [66, 83, 112, 142, 144, 184, 192, 224, 254, 352, 381, 454, 460, 464, 466, 467, 470, 472, 482], "poplib": [66, 142, 193, 254, 256, 450, 465, 475, 478, 482], "smtplib": [66, 82, 99, 142, 193, 199, 200, 207, 254, 256, 269, 341, 450, 463, 467, 474, 478, 482], "sur": [66, 482], "appl": [66, 91, 189, 216, 246, 254, 269, 291, 441, 450, 458, 464, 467, 468, 478, 482], "silicon": [66, 482], "mac": [66, 68, 108, 224, 234, 303, 332, 341, 375, 397, 455, 457, 469, 471, 474, 476, 478, 479, 482], "parallel": [66, 82, 85, 93, 97, 99, 123, 125, 128, 133, 136, 162, 163, 168, 206, 224, 231, 234, 254, 261, 352, 383, 387, 400, 402, 412, 442, 454, 461, 468, 472, 474, 475, 476, 477, 481, 482], "band": [66, 139, 298, 328, 482], "cprofil": [66, 184, 466, 482], "csv": [66, 97, 159, 216, 254, 361, 450, 464, 466, 470, 478, 482], "gettext": [66, 99, 245, 254, 266, 410, 434, 450, 461, 465, 472, 482], "gzip": [66, 78, 85, 99, 117, 149, 157, 199, 217, 254, 276, 332, 357, 361, 408, 425, 450, 461, 464, 468, 470, 471, 473, 476, 478, 482], "json": [66, 98, 99, 118, 151, 166, 251, 254, 258, 268, 269, 285, 298, 307, 444, 450, 468, 470, 471, 474, 475, 476, 481, 482], "plistlib": [66, 216, 254, 478, 479, 481, 482], "shlex": [66, 112, 125, 136, 166, 221, 254, 297, 348, 473, 481, 482], "tarfil": [66, 112, 117, 254, 332, 450, 464, 465, 466, 467, 468, 478, 479, 482], "xmlrpc": [66, 254, 256, 283, 299, 408, 425, 450, 463, 469, 476, 482], "postpon": [66, 111, 176, 250, 385, 426, 427, 472, 482], "553": [66, 482], "562": [66, 427, 482], "564": [66, 482], "nanosecond": [66, 293, 365, 404, 466, 472, 475, 480, 481, 482], "565": [66, 212], "560": [66, 384, 427, 482], "545": 66, "binascii": [66, 97, 143, 157, 254, 285, 396, 425, 468, 472, 476, 481, 482], "calendar": [66, 181, 182, 254, 365, 450, 461, 464, 472, 478, 482], "crypt": [66, 173, 254, 310, 350, 425, 472, 473, 478, 482], "dbm": [66, 82, 254, 298, 299, 330, 427, 455, 468, 469, 480, 482], "server": [66, 82, 83, 90, 93, 98, 103, 106, 108, 121, 135, 151, 166, 169, 175, 191, 193, 197, 199, 207, 222, 225, 234, 240, 241, 242, 243, 246, 247, 254, 256, 257, 259, 267, 268, 269, 283, 288, 293, 296, 305, 313, 318, 327, 328, 329, 333, 335, 337, 340, 350, 352, 355, 358, 361, 364, 368, 381, 385, 392, 394, 408, 417, 425, 450, 451, 460, 462, 463, 464, 465, 466, 467, 468, 473, 475, 476, 477, 478, 480, 481, 482, 483], "mimetyp": [66, 196, 199, 254, 272, 285, 381, 406, 463, 467, 478, 482], "msilib": [66, 254, 350, 466, 467, 472, 473, 482], "queue": [66, 82, 98, 99, 103, 121, 122, 125, 135, 159, 163, 176, 181, 211, 231, 254, 261, 268, 269, 293, 318, 322, 325, 328, 337, 338, 344, 358, 360, 364, 368, 412, 444, 451, 461, 464, 465, 466, 467, 469, 474, 477, 480, 481, 482], "socketserv": [66, 99, 240, 244, 254, 256, 337, 419, 467, 468, 469, 482], "mock": [66, 186, 254, 381, 387, 472, 475, 476, 480, 481, 482], "uu": [66, 146, 157, 396, 425, 463, 472, 473, 482], "uuid": [66, 254, 256, 281, 337, 466, 472, 480, 482], "etre": [66, 254, 273, 408, 410, 450, 466, 468, 473, 474, 478, 480, 481, 482], "zipapp": [66, 112, 191, 254, 482], "aifc": [66, 205, 254, 336, 349, 350, 400, 461, 472, 473, 481, 482], "macpath": [66, 480, 482], "sunau": [66, 254, 350, 472, 473, 481, 482], "wave": [66, 153, 254, 277, 349, 461, 478, 481, 482], "498": [66, 85, 434, 476, 482], "526": [66, 85, 99, 120, 180, 385, 426, 435, 471, 479, 480, 482], "515": [66, 220, 345, 472, 482], "525": [66, 85, 160, 255, 352, 429, 482], "530": [66, 429, 482], "487": [66, 482], "enhanc": [66, 78, 85, 90, 93, 99, 103, 174, 225, 244, 268, 341, 348, 361, 375, 383, 385, 429, 434, 461, 462, 463, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 482, 483], "519": [66, 85, 381, 482], "495": [66, 424, 482], "520": 66, "468": [66, 159, 482], "dtrace": [66, 94, 455, 482], "systemtap": [66, 94, 455, 482], "probe": [66, 476, 482], "cmath": [66, 85, 254, 275, 290, 344, 465, 467, 476, 482], "email": [66, 85, 98, 143, 146, 151, 234, 241, 242, 244, 251, 254, 268, 269, 271, 272, 285, 293, 319, 335, 341, 352, 365, 394, 425, 431, 450, 452, 463, 465, 466, 467, 468, 482], "pickletool": [66, 254, 264, 299, 381, 467, 482], "rlcomplet": [66, 112, 254, 320, 334, 362, 466, 467, 482], "telnetlib": [66, 142, 254, 350, 467, 472, 473, 482], "timeit": [66, 83, 168, 184, 254, 308, 450, 454, 464, 465, 467, 482], "robotpars": [66, 254, 256, 391, 461, 469, 482], "winreg": [66, 142, 254, 403, 449, 469, 482], "winsound": [66, 75, 254, 403, 482], "grp": [66, 254, 310, 339, 348, 390, 464, 481, 482], "regen": [66, 455, 482], "492": [66, 85, 160, 255, 426, 427, 429, 478, 482], "465": [66, 335, 482], "infix": 66, "448": [66, 429, 482], "461": [66, 344], "percent": [66, 82, 264, 343, 345, 376, 393, 460, 467, 469, 474, 482], "484": [66, 85, 120, 344, 385, 426, 427, 435, 440, 471, 472, 478, 479, 480, 482], "471": [66, 159, 482], "scandir": [66, 116, 142, 230, 293, 296, 478, 479, 480, 482], "475": [66, 212, 224, 293, 328, 329, 333, 337, 365, 482], "retri": [66, 88, 102, 106, 212, 269, 293, 328, 329, 333, 337, 341, 348, 394, 428, 440, 463, 464, 468, 472, 482], "479": [66, 111, 212, 478, 479, 482], "485": [66, 154, 275, 482], "486": [66, 213, 475, 482], "awar": [66, 75, 96, 102, 103, 104, 166, 178, 181, 193, 195, 199, 201, 202, 204, 205, 208, 225, 229, 247, 266, 272, 293, 296, 340, 341, 345, 352, 365, 366, 368, 399, 412, 415, 454, 455, 460, 461, 463, 464, 465, 469, 470, 471, 473, 474, 475, 478, 479, 482], "488": [66, 250, 311, 361, 454, 482], "elimin": [66, 91, 98, 101, 185, 189, 250, 251, 261, 262, 271, 294, 296, 300, 383, 455, 465, 472, 475, 480, 482], "pyo": [66, 162, 249, 250, 381, 464, 467, 468, 476, 482], "bz2": [66, 117, 157, 175, 217, 254, 270, 296, 332, 357, 361, 421, 450, 464, 468, 470, 471, 476, 481, 482], "cgi": [66, 106, 244, 254, 327, 328, 350, 394, 395, 406, 419, 461, 467, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482], "configpars": [66, 112, 216, 254, 268, 331, 461, 465, 468, 469, 470, 472, 473, 476, 479, 482], "difflib": [66, 145, 192, 215, 254, 362, 462, 463, 465, 466, 467, 468, 476, 482], "heapq": [66, 85, 181, 224, 225, 254, 316, 318, 451, 464, 465, 466, 467, 482], "imghdr": [66, 254, 336, 350, 472, 473, 482], "lzma": [66, 117, 149, 254, 332, 357, 361, 408, 421, 450, 471, 476, 482], "selector": [66, 93, 124, 125, 130, 241, 254, 256, 260, 261, 328, 333, 338, 341, 360, 367, 394, 468, 470, 472, 479, 482], "sndhdr": [66, 254, 350, 472, 473, 482], "bio": [66, 288, 482], "negoti": [66, 139, 240, 341, 467, 475, 482], "wsgiref": [66, 254, 256, 472, 474, 478, 480, 482], "sax": [66, 254, 273, 408, 409, 410, 411, 450, 461, 462, 471, 480, 482], "453": [66, 209], "bootstrap": [66, 109, 142, 191, 254, 318, 334, 398, 482], "pip": [66, 68, 101, 108, 112, 191, 251, 254, 261, 398, 420, 444, 458, 460, 471, 482], "446": [66, 468], "ensurepip": [66, 109, 142, 191, 254, 398, 455, 471, 482], "audioop": [66, 254, 350, 466, 472, 473, 481, 482], "colorsi": [66, 254, 277], "filecmp": [66, 189, 218, 254, 461, 482], "html": [66, 69, 76, 77, 78, 93, 98, 102, 106, 108, 125, 135, 150, 151, 152, 157, 161, 189, 199, 204, 241, 242, 244, 246, 254, 273, 293, 313, 340, 341, 350, 368, 379, 393, 394, 395, 406, 410, 411, 412, 416, 418, 419, 423, 425, 427, 434, 451, 454, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 477, 479, 480, 481, 482, 483], "pti": [66, 142, 254, 293, 341, 390, 482], "stat": [66, 85, 105, 116, 184, 189, 215, 218, 233, 250, 254, 256, 258, 269, 288, 293, 294, 296, 305, 332, 341, 350, 357, 381, 385, 431, 455, 463, 464, 466, 467, 471, 474, 477, 478, 479, 480, 482], "textwrap": [66, 118, 254, 362, 451, 464, 467, 482], "445": 66, "456": [66, 71, 99, 185], "secur": [66, 83, 99, 108, 116, 125, 163, 173, 175, 222, 241, 242, 243, 247, 254, 256, 269, 270, 272, 283, 285, 286, 288, 293, 299, 305, 314, 326, 331, 334, 335, 337, 344, 350, 394, 404, 406, 408, 410, 411, 412, 413, 418, 419, 423, 457, 461, 462, 463, 464, 466, 467, 471, 472, 474, 475, 477, 478, 479, 480, 481], "interchang": [66, 99, 115, 143, 153, 182, 185, 212, 234, 262, 267, 336, 344, 368, 385, 389, 427, 434, 461, 467, 474, 475], "436": [66, 319], "clinic": [66, 94, 478, 480, 482], "476": [66, 381, 482], "certif": [66, 125, 132, 135, 222, 241, 247, 269, 305, 335, 361, 394, 418, 467, 473, 479, 482], "verif": [66, 268, 340, 341, 344, 474], "405": [66, 106, 240, 398, 483], "420": [66, 85, 250, 431, 482, 483], "3118": [66, 344, 469, 480, 482, 483], "flexibl": [66, 71, 82, 87, 88, 91, 96, 98, 99, 102, 110, 132, 151, 168, 175, 189, 192, 195, 204, 207, 229, 267, 268, 283, 292, 295, 299, 340, 344, 348, 357, 365, 385, 388, 399, 410, 412, 427, 461, 462, 464, 466, 468, 469, 474, 477, 481, 483], "397": [66, 332, 460, 477, 482, 483], "rework": [66, 212, 288, 462, 463, 464, 466, 468, 474, 478, 482, 483], "380": [66, 429, 483], "subgener": [66, 429, 483], "409": [66, 106, 240, 483], "414": [66, 106, 185, 240, 381, 434, 464, 482, 483], "3155": [66, 85, 483], "412": [66, 106, 225, 240, 483], "362": [66, 85, 95, 255, 483], "421": [66, 240, 352, 482, 483], "simplenamespac": [66, 159, 181, 307, 384, 398, 481, 482], "finer": [66, 72, 98, 125, 267, 293, 479, 480, 482, 483], "framework": [66, 82, 99, 114, 121, 122, 125, 132, 155, 166, 169, 175, 184, 186, 192, 221, 246, 254, 256, 334, 335, 341, 344, 352, 367, 385, 387, 388, 394, 406, 419, 427, 442, 455, 458, 463, 464, 467, 468, 469, 474, 476, 477, 479, 480, 481, 482, 483], "sched": [66, 163, 254, 467, 482], "webbrows": [66, 142, 199, 254, 256, 461, 466, 472, 473, 482], "elementtre": [66, 254, 273, 408, 410, 450, 473, 476, 478, 480, 481, 482], "384": [66, 182, 466, 471, 481, 482, 483], "389": [66, 483], "391": [66, 483], "3148": [66, 165, 483], "repositori": [66, 250, 424, 459, 461, 462, 466, 468, 482, 483], "3149": [66, 352, 482, 483], "3333": [66, 406, 483], "web": [66, 82, 83, 93, 101, 103, 105, 106, 108, 121, 151, 225, 234, 243, 244, 246, 254, 256, 257, 269, 272, 313, 340, 341, 394, 406, 409, 419, 425, 431, 460, 461, 462, 463, 464, 465, 466, 467, 468, 476, 482, 483], "gateway": [66, 106, 151, 256, 466, 483], "v1": [66, 337, 347, 482, 483], "ftp": [66, 78, 106, 254, 256, 269, 286, 393, 394, 459, 461, 462, 467, 468, 475, 481, 482], "popen": [66, 99, 116, 125, 132, 136, 142, 151, 163, 207, 247, 293, 301, 306, 328, 337, 359, 361, 398, 427, 465, 467, 475, 476, 478, 479, 480, 482], "nntp": [66, 193, 254, 350, 393, 465, 475, 481, 482], "mailbox": [66, 83, 193, 200, 247, 254, 285, 305, 466, 468, 478, 481, 482], "turtledemo": [66, 221, 246, 482], "372": [66, 483], "378": [66, 345, 381, 483], "thousand": [66, 105, 234, 266, 307, 308, 319, 345, 408, 440, 478, 479, 482, 483], "stumbl": [66, 103, 483], "vs": [66, 186, 308, 362, 366, 426, 482], "overview": [66, 72, 96, 103, 105, 221, 256, 259, 277, 280, 288, 292, 307, 308, 315, 408, 460, 461, 462, 463, 464, 466, 467, 468, 474, 477, 479, 483], "3101": [66, 345, 483], "miscellan": [66, 116, 117, 155, 163, 190, 193, 216, 254, 285, 367, 406, 457, 482, 483], "3106": [66, 483], "3137": [66, 483], "ttk": [66, 254, 367, 368, 374, 470, 478, 479, 480, 482], "theme": [66, 246, 254, 367, 368, 464, 467, 470, 478, 479, 482], "widget": [66, 79, 90, 91, 99, 108, 116, 168, 180, 188, 246, 254, 292, 367, 370, 383, 387, 461, 464, 465, 470, 474, 478, 482], "tk": [66, 108, 246, 254, 370, 371, 383, 438, 458, 460, 461, 462, 467, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482], "freebsd": [66, 90, 113, 132, 211, 214, 293, 295, 309, 322, 328, 337, 352, 361, 364, 365, 457, 466, 472, 476, 479, 481, 482], "mainten": [66, 209, 434, 460, 471, 474, 475, 476, 479, 480, 481, 482, 483], "434": [66, 246], "branch": [66, 76, 154, 190, 270, 319, 361, 374, 379, 461, 466, 467, 471, 481, 482], "466": 66, "network": [66, 98, 103, 105, 106, 108, 121, 124, 132, 135, 139, 141, 145, 183, 211, 246, 248, 254, 256, 257, 269, 283, 288, 293, 299, 322, 328, 335, 341, 347, 357, 361, 393, 394, 397, 404, 408, 413, 419, 431, 462, 463, 464, 467, 472, 475, 477, 479, 480, 482], "477": 66, "backport": [66, 101, 185, 246, 251, 252, 385, 388, 421, 467, 471, 477, 478, 479, 480, 481, 482], "493": [66, 95], "migrat": [66, 89, 251, 252, 255, 409, 435, 466, 467, 470, 471, 472, 473, 475, 476, 482], "roundup": 66, "343": [66, 85, 111, 168, 426, 427, 445, 448, 469, 483], "366": [66, 92, 95, 182, 250, 324, 365, 431, 469, 475, 483], "370": [66, 334, 454, 469, 482, 483], "371": [66, 469, 483], "3105": [66, 111, 469, 483], "3110": [66, 469, 483], "3112": [66, 111, 469, 483], "3116": [66, 85, 469, 470, 483], "3127": [66, 469, 483], "3129": [66, 426, 469, 483], "decor": [66, 85, 91, 92, 99, 114, 120, 140, 160, 175, 180, 181, 186, 224, 225, 255, 315, 321, 344, 361, 385, 387, 419, 426, 427, 429, 430, 466, 468, 469, 471, 472, 474, 475, 476, 479, 480, 481, 482, 483], "3141": [66, 114, 289, 469, 483], "future_builtin": [66, 110], "javascript": [66, 166, 239, 243, 257, 262, 299, 440, 445, 471, 482], "notat": [66, 76, 85, 93, 96, 99, 102, 105, 166, 185, 224, 259, 262, 273, 278, 293, 299, 314, 337, 344, 345, 348, 362, 368, 388, 409, 412, 414, 426, 427, 429, 430, 432, 434, 439, 445, 454, 464, 465, 466, 469, 474, 480, 481, 482], "irix": [66, 469, 482], "308": [66, 225, 240, 429, 482, 483], "309": [66, 483], "314": [66, 83, 483], "328": [66, 111, 224, 250, 431, 469, 475, 483], "338": [66, 324, 431, 454, 483], "341": [66, 99, 483], "unifi": [66, 120, 157, 189, 192, 299, 386, 476, 482, 483], "342": [66, 93, 160, 366, 429, 483], "352": [66, 467, 469, 472, 482, 483], "ssize_t": [66, 88, 175, 347, 474, 475, 483], "357": [66, 483], "218": [66, 225, 483], "237": [66, 344, 469, 483], "289": [66, 93, 225, 308, 483], "292": [66, 99, 267, 345, 483], "substitut": [66, 76, 83, 85, 98, 99, 102, 110, 131, 143, 157, 163, 166, 177, 182, 185, 192, 250, 261, 272, 292, 293, 308, 319, 320, 321, 340, 344, 345, 358, 362, 377, 385, 402, 425, 426, 429, 435, 446, 451, 460, 464, 466, 467, 468, 474, 476, 477, 482, 483], "318": [66, 426, 483], "322": [66, 483], "324": [66, 83, 348, 483], "327": [66, 472, 483], "331": [66, 483], "cookielib": [66, 468, 469], "datatyp": [66, 73, 83, 175, 185, 216, 262, 299, 378, 465, 467, 468, 470, 474, 483], "263": [66, 105, 250, 377, 466, 482, 483], "273": [66, 157, 270, 284, 325, 422, 483], "zip": [66, 83, 85, 93, 108, 110, 112, 117, 146, 157, 159, 165, 191, 224, 250, 251, 252, 253, 254, 261, 275, 280, 327, 332, 340, 344, 345, 353, 357, 361, 408, 431, 439, 441, 449, 451, 452, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 482, 483], "archiv": [66, 82, 101, 108, 112, 117, 191, 218, 234, 251, 254, 271, 280, 342, 353, 361, 398, 425, 450, 461, 462, 466, 467, 468, 470, 472, 473, 474, 476, 479, 480, 482, 483], "277": [66, 483], "nt": [66, 98, 106, 159, 269, 293, 303, 314, 352, 354, 398, 410, 412, 461, 474, 480, 482, 483], "278": [66, 85, 483], "univers": [66, 85, 92, 174, 182, 224, 234, 247, 250, 258, 344, 357, 365, 387, 397, 421, 455, 458, 465, 466, 467, 472, 476, 478, 479, 481, 482, 483], "279": [66, 225, 483], "282": [66, 267, 332, 483], "285": [66, 85, 439, 483], "293": [66, 381, 483], "301": [66, 99, 106, 240, 394, 482, 483], "302": [66, 85, 106, 224, 240, 241, 244, 249, 250, 265, 302, 324, 352, 394, 422, 431, 466, 467, 470, 475, 482, 483], "305": [66, 106, 174, 240, 483], "307": [66, 106, 240, 299, 394, 483], "optpars": [66, 87, 116, 254, 350, 465, 466, 468, 474, 478, 482], "252": [66, 96, 427, 482, 483], "253": [66, 96, 483], "diamond": [66, 92, 176, 224, 427], "234": [66, 185, 345, 451, 470, 477, 483], "227": [66, 111, 483], "236": [66, 435, 483], "207": [66, 240, 308, 483], "230": [66, 222, 474, 478, 483], "229": [66, 483], "205": [66, 106, 240, 244, 288, 401, 482, 483], "232": [66, 483], "235": [66, 250, 482, 483], "217": [66, 381, 483], "208": [66, 240, 483], "241": [66, 483], "sax2": [66, 254, 273, 408, 410, 414], "dom": [66, 254, 257, 273, 408, 414, 450, 462, 464, 466, 472, 480, 482], "relationship": [66, 91, 100, 132, 160, 182, 192, 298, 343, 344, 352, 368, 379, 401, 409, 425, 427, 466, 482], "pyxml": [66, 462], "changelog": [66, 307, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 483], "candid": [66, 78, 91, 111, 204, 229, 352, 427, 466, 467, 468, 476, 483], "lambda": [66, 85, 99, 104, 120, 125, 132, 144, 147, 159, 166, 180, 189, 225, 234, 255, 261, 264, 283, 299, 318, 340, 344, 363, 366, 384, 387, 388, 389, 398, 419, 426, 427, 430, 432, 434, 441, 444, 461, 462, 463, 465, 466, 467, 469, 476, 477, 481, 482], "templat": [66, 71, 83, 88, 98, 112, 159, 200, 267, 319, 344, 350, 362, 366, 367, 372, 383, 444, 445, 463, 465, 467, 468, 472, 474, 475, 478, 479, 482], "histori": [66, 78, 99, 105, 140, 155, 182, 235, 246, 271, 297, 334, 362, 364, 423, 444, 454, 471, 476, 477, 478, 482], "openbsd": [66, 113, 222, 293, 337, 364, 365, 457, 477, 479, 482], "opensolari": [66, 457], "openssl": [66, 234, 236, 341, 361, 455, 457, 461, 466, 467, 468, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482], "webassembl": [66, 107, 121, 122, 139, 151, 162, 165, 172, 209, 214, 222, 228, 232, 241, 244, 247, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 355, 358, 364, 394, 398, 402, 418, 419, 424, 457, 472, 482], "linker": [66, 70, 75, 175, 457, 472, 482], "cross": [66, 68, 70, 74, 99, 103, 108, 141, 182, 211, 243, 246, 293, 299, 337, 350, 409, 424, 434, 457, 461, 462, 463, 464, 467, 468, 470, 472, 474, 475, 476, 477, 478, 480, 482], "max_path": [66, 457, 478, 482], "nuget": [66, 457, 479, 482], "bundl": [66, 83, 168, 200, 206, 209, 222, 247, 305, 341, 367, 368, 420, 455, 457, 464, 468, 471, 474, 476, 477, 479, 482], "excursus": [66, 447, 457], "shebang": [66, 166, 398, 420, 447, 457, 459, 475, 478, 482], "ini": [66, 216, 331, 457, 474, 482], "dri": [66, 284, 292, 457], "pywin32": [66, 83, 457, 482], "cx_freez": [66, 83, 283, 457], "macpython": [66, 457, 463], "gui": [66, 81, 83, 93, 105, 246, 254, 292, 340, 342, 350, 352, 368, 387, 420, 438, 457, 467, 475, 482], "ide": [66, 78, 83, 85, 356, 385, 435, 450, 457, 460, 461, 463], "editor": [66, 70, 88, 102, 105, 249, 250, 367, 434, 457, 461, 467, 471, 472, 476, 477, 478, 479, 480, 482], "lexic": [66, 221, 239, 254, 255, 296, 356, 377, 414, 427, 429, 432, 433, 479, 482], "blank": [66, 82, 83, 88, 93, 118, 121, 151, 155, 166, 174, 176, 185, 189, 192, 195, 204, 206, 207, 241, 244, 246, 268, 297, 300, 334, 341, 344, 353, 383, 393, 406, 412, 435, 436, 465, 477, 479, 482], "indent": [66, 88, 95, 102, 110, 118, 120, 166, 168, 181, 186, 192, 203, 212, 254, 255, 262, 264, 273, 300, 307, 321, 362, 363, 366, 367, 374, 376, 377, 388, 389, 410, 412, 426, 430, 446, 461, 471, 474, 475, 476, 481, 482], "soft": [66, 176, 246, 263, 322, 361, 426, 430, 471, 482], "codeobject": [66, 427, 472, 482], "co_posit": [66, 427, 472], "__bytes__": [66, 193, 195, 200, 204, 285, 344, 385, 427, 472, 476, 477, 482], "__format__": [66, 78, 181, 182, 210, 224, 256, 259, 345, 388, 427, 434, 467, 468, 472, 475, 476, 479, 482], "__dir__": [66, 78, 92, 181, 186, 210, 224, 255, 388, 427, 467, 476, 479, 482], "bodi": [66, 82, 83, 88, 106, 110, 120, 134, 135, 138, 143, 168, 182, 188, 190, 194, 195, 196, 198, 199, 200, 204, 206, 207, 224, 239, 241, 244, 247, 255, 271, 272, 288, 317, 333, 335, 340, 344, 350, 361, 366, 367, 385, 387, 388, 389, 394, 401, 406, 412, 426, 428, 429, 430, 435, 465, 466, 467, 474, 475, 476, 477, 478, 479, 480, 482], "versus": [66, 182, 192, 253, 267, 429, 474, 480, 482], "__missing__": [66, 159, 181, 344, 388, 426, 427, 466, 474, 482], "__reversed__": [66, 78, 85, 159, 160, 181, 210, 224, 388, 427, 478], "__rtruediv__": [66, 427], "__rfloordiv__": [66, 427, 471, 482], "__round__": [66, 220, 224, 290, 385, 388, 427, 469, 482], "__trunc__": [66, 224, 275, 388, 427, 472, 482], "__floor__": [66, 220, 275, 290, 388, 427, 482], "__ceil__": [66, 220, 275, 290, 388, 427, 482], "__enter__": [66, 85, 99, 190, 258, 283, 315, 333, 344, 385, 387, 388, 403, 404, 426, 427, 466, 467, 468, 472, 475, 478, 482], "__exit__": [66, 85, 99, 168, 190, 258, 283, 333, 344, 361, 387, 388, 403, 404, 426, 427, 466, 467, 468, 478, 482], "__match_args__": [66, 180, 426, 427, 440, 471, 482], "__aenter__": [66, 85, 168, 190, 387, 388, 389, 426, 427, 482], "__aexit__": [66, 85, 138, 168, 190, 387, 388, 389, 426, 427, 482], "arithmet": [66, 167, 182, 212, 220, 224, 254, 256, 275, 290, 319, 343, 344, 352, 418, 424, 427, 430, 432, 450, 464, 465, 466, 472, 474, 475, 477, 480, 482], "agen": [66, 255, 429], "asend": [66, 160, 429, 481, 482], "athrow": [66, 160, 429, 473, 481, 482], "aclos": [66, 125, 160, 168, 315, 429, 471, 481, 482], "power": [66, 83, 87, 91, 92, 100, 141, 166, 172, 175, 185, 210, 224, 234, 290, 292, 293, 297, 299, 319, 337, 344, 347, 388, 389, 412, 426, 430, 432, 448, 464, 465, 467, 468, 469, 471, 472, 474, 475, 480, 482], "membership": [66, 90, 92, 96, 151, 177, 210, 232, 293, 344, 388, 427, 441, 465, 474, 482], "nonloc": [66, 83, 85, 120, 159, 224, 255, 264, 351, 426, 428, 430, 432, 434, 439, 440, 469, 478, 482], "irrefut": 66, "anext": [66, 224, 254, 471, 482], "chr": [66, 83, 105, 224, 239, 254, 314, 386, 427, 449, 466, 468], "delattr": [66, 224, 254, 439, 449], "oct": [66, 83, 93, 99, 108, 182, 210, 222, 224, 254, 341, 344, 345, 352, 366, 427, 449, 463, 467, 469, 482], "ord": [66, 90, 105, 118, 120, 175, 177, 224, 254, 340, 344, 388, 427, 429, 434, 449, 461, 467], "setattr": [66, 83, 85, 91, 118, 180, 224, 250, 254, 292, 401, 439, 449, 461, 482], "super": [66, 83, 85, 99, 102, 108, 114, 118, 131, 159, 168, 180, 202, 212, 224, 250, 254, 264, 283, 299, 312, 322, 368, 381, 383, 389, 394, 398, 401, 427, 439, 449, 463, 467, 469, 471, 476, 478, 482], "credit": [66, 84, 108, 167, 173, 246, 261, 352, 426, 447, 449, 472, 480, 482], "licens": [66, 84, 108, 167, 246, 251, 271, 307, 352, 425, 447, 449, 452, 463, 480, 482], "bit_length": [66, 275, 318, 344, 468, 470], "bit_count": [66, 344, 471, 482], "to_byt": [66, 344, 482], "from_byt": [66, 344, 482], "as_integer_ratio": [66, 185, 220, 290, 344, 443, 467, 478, 480, 482], "is_integ": [66, 344, 482], "fromhex": [66, 146, 344, 443, 467, 472, 478, 479, 482], "capit": [66, 102, 105, 108, 185, 319, 344, 345, 385, 386, 429, 461, 479, 481, 482], "casefold": [66, 105, 118, 143, 159, 344, 475, 477, 480, 482], "center": [66, 150, 155, 176, 185, 246, 247, 255, 344, 345, 368, 375, 383, 425, 427, 445, 465, 467, 475, 482], "endswith": [66, 299, 344, 398, 461, 464, 466, 467, 477, 482], "expandtab": [66, 344, 363], "format_map": [66, 159, 344, 474, 477, 482], "isalnum": [66, 83, 116, 177, 344], "isalpha": [66, 116, 177, 344], "isascii": [66, 116, 177, 344, 479, 482], "isdecim": [66, 101, 344], "isdigit": [66, 116, 177, 326, 344], "isidentifi": [66, 344, 482], "islow": [66, 116, 177, 326, 344], "isnumer": [66, 101, 344], "isprint": [66, 116, 159, 177, 344, 477, 482], "isspac": [66, 116, 177, 344], "istitl": [66, 344], "isupp": [66, 91, 116, 177, 261, 326, 344, 387], "ljust": [66, 337, 344, 445, 465, 475], "lstrip": [66, 344, 464, 482], "maketran": [66, 159, 344, 470, 474, 477, 482], "partit": [66, 147, 261, 337, 344, 466, 477, 480, 482], "removeprefix": [66, 344, 481, 482], "removesuffix": [66, 344, 481, 482], "rfind": [66, 99, 278, 344, 467, 474, 475, 477, 482], "rindex": [66, 344, 468, 474, 475], "rjust": [66, 344, 445, 465, 475], "rpartit": [66, 250, 344, 466, 468, 474, 482], "rsplit": [66, 344, 465, 468, 474, 482], "rstrip": [66, 83, 132, 135, 136, 187, 246, 344, 450, 464, 482], "splitlin": [66, 85, 155, 189, 199, 207, 344, 363, 380, 467, 474, 476, 482], "startswith": [66, 239, 293, 344, 352, 387, 398, 421, 450, 461, 464, 466, 467, 470, 475, 477, 480, 482], "swapcas": [66, 344, 482], "zfill": [66, 344, 445, 464], "tobyt": [66, 119, 181, 344, 468, 474, 481, 482], "tolist": [66, 119, 181, 344, 463, 468, 474], "toreadon": [66, 344, 482], "nbyte": [66, 125, 132, 142, 282, 284, 314, 326, 337, 344], "c_contigu": [66, 344], "f_contigu": [66, 344], "isdisjoint": [66, 160, 344, 482], "issubset": [66, 344, 464], "issuperset": [66, 344, 464, 482], "intersect": [66, 159, 344, 383, 427, 464, 465, 467, 468, 482], "symmetric_differ": [66, 344, 464], "intersection_upd": [66, 344, 464, 467], "difference_upd": [66, 344, 467, 481, 482], "symmetric_difference_upd": [66, 344, 464], "fromkey": [66, 91, 159, 181, 261, 344, 384, 464, 472, 474, 482], "popitem": [66, 159, 160, 166, 181, 261, 271, 285, 288, 344, 427, 462, 464, 468, 482], "contextmanag": [66, 168, 186, 315, 344, 385, 466, 467, 474, 478, 482], "__unpacked__": [66, 344, 482], "with_traceback": [66, 110, 212, 435, 482], "add_not": [66, 212, 442, 472, 482], "__notes__": [66, 212, 315, 380, 482], "winerror": [66, 116, 175, 212, 482], "end_lineno": [66, 120, 190, 212, 264, 430, 471, 480, 482], "end_offset": [66, 212, 471, 482], "environmenterror": [66, 212, 449, 475], "ioerror": [66, 153, 189, 212, 214, 217, 224, 229, 242, 255, 258, 282, 283, 295, 332, 333, 392, 422, 449, 467, 468, 469, 475], "characters_written": [66, 212, 482], "exceptiongroup": [66, 125, 138, 212, 337, 426, 442, 472, 482], "baseexceptiongroup": [66, 138, 212, 426, 472, 482], "subgroup": [66, 102, 190, 212, 319, 472, 474, 480, 482], "ascii_lett": [66, 243, 326, 345, 362, 463, 469], "ascii_lowercas": [66, 319, 345, 362, 463], "ascii_uppercas": [66, 345, 362, 463], "hexdigit": [66, 177, 281, 345, 362, 434], "octdigit": [66, 345, 362, 434], "punctuat": [66, 102, 105, 331, 345, 362, 434, 478], "vformat": [66, 345, 362], "get_field": [66, 345, 362], "get_valu": [66, 345, 362], "check_unused_arg": [66, 345, 362], "format_field": [66, 345, 362], "convert_field": [66, 345, 362], "mini": [66, 166, 224, 344, 362, 427, 434, 445, 468, 470, 472], "safe_substitut": [66, 345, 362, 451, 465], "is_valid": [66, 345, 362, 482], "get_identifi": [66, 264, 345, 351, 362, 482], "capword": [66, 344, 345, 362, 482], "regexflag": [66, 319, 362, 472, 479, 482], "ignorecas": [66, 102, 319, 345, 362, 482], "multilin": [66, 102, 157, 166, 246, 319, 335, 362, 387, 474, 481, 482], "noflag": [66, 319, 362, 482], "dotal": [66, 102, 319, 362], "fullmatch": [66, 319, 362, 476, 482], "findal": [66, 102, 159, 273, 319, 362, 412, 450, 476, 482], "findit": [66, 102, 279, 319, 362, 463, 482], "subn": [66, 102, 319, 362, 468, 470, 477, 482], "purg": [66, 319, 362], "colno": [66, 262, 285, 319, 362, 477], "groupindex": [66, 319, 362, 482], "groupdict": [66, 102, 319, 362, 482], "span": [66, 97, 102, 120, 150, 166, 174, 192, 219, 239, 278, 319, 344, 345, 362, 426, 466, 467, 475, 477, 478, 482], "endpo": [66, 319, 362], "lastindex": [66, 319, 362], "lastgroup": [66, 319, 362], "scanf": [66, 362], "phonebook": [66, 362], "mung": [66, 362], "adverb": [66, 362], "htmldiff": [66, 189, 362, 465, 477, 482], "make_fil": [66, 189, 362, 477, 482], "make_t": [66, 189, 362], "context_diff": [66, 189, 362], "get_close_match": [66, 189, 362], "ndiff": [66, 192, 362, 462, 463], "unified_diff": [66, 189, 362], "diff_byt": [66, 189, 362, 477, 482], "is_line_junk": [66, 189, 362], "is_character_junk": [66, 189, 362], "sequencematch": [66, 362, 462, 466, 467, 476, 482], "set_seq": [66, 189, 362], "set_seq1": [66, 189, 362], "set_seq2": [66, 189, 362], "find_longest_match": [66, 189, 362, 482], "get_matching_block": [66, 189, 362, 466, 482], "get_opcod": [66, 189, 362], "get_grouped_opcod": [66, 189, 362], "ratio": [66, 149, 189, 220, 275, 343, 344, 362, 383, 475, 482], "quick_ratio": [66, 189, 362], "real_quick_ratio": [66, 189, 362], "shorten": [66, 183, 321, 362, 363, 471, 474, 475, 476, 481, 482], "dedent": [66, 118, 246, 264, 362, 363, 376, 377, 426, 430, 434, 482], "textwrapp": [66, 362, 363, 464, 476, 482], "expand_tab": [66, 362, 363], "tabsiz": [66, 189, 344, 362, 363], "replace_whitespac": [66, 362, 363], "drop_whitespac": [66, 362, 363, 467], "initial_ind": [66, 362, 363], "subsequent_ind": [66, 362, 363], "fix_sentence_end": [66, 362, 363], "break_long_word": [66, 362, 363, 482], "break_on_hyphen": [66, 362, 363, 482], "max_lin": [66, 362, 363, 476], "placehold": [66, 91, 99, 108, 190, 229, 235, 267, 269, 298, 321, 345, 362, 363, 393, 398, 404, 435, 451, 466, 474, 476, 479, 482], "bidirect": [66, 105, 125, 132, 283, 344, 346, 362, 386, 461], "east_asian_width": [66, 362, 386, 482], "decomposit": [66, 99, 362, 386, 482], "is_norm": [66, 185, 290, 362, 386, 480, 482], "unidata_vers": [66, 362, 386], "ucd_3_2_0": [66, 362, 386, 466], "stringprep": [66, 157, 254, 362, 464], "internet": [66, 96, 101, 103, 106, 143, 193, 209, 222, 234, 239, 242, 246, 254, 272, 317, 335, 337, 338, 341, 361, 362, 365, 393, 394, 425, 440, 460, 461, 462, 464, 471, 474, 476, 482], "in_table_a1": [66, 346, 362], "in_table_b1": [66, 346, 362], "map_table_b2": [66, 346, 362], "map_table_b3": [66, 346, 362], "in_table_c11": [66, 346, 362], "in_table_c12": [66, 346, 362], "in_table_c11_c12": [66, 346, 362], "in_table_c21": [66, 346, 362], "in_table_c22": [66, 346, 362], "in_table_c21_c22": [66, 346, 362], "in_table_c3": [66, 346, 362], "in_table_c4": [66, 346, 362], "in_table_c5": [66, 346, 362], "in_table_c6": [66, 346, 362], "in_table_c7": [66, 346, 362], "in_table_c8": [66, 346, 362], "in_table_c9": [66, 346, 362], "in_table_d1": [66, 346, 362], "in_table_d2": [66, 346, 362], "gnu": [66, 95, 227, 233, 245, 254, 266, 292, 293, 298, 330, 332, 357, 362, 425, 427, 434, 437, 446, 447, 454, 455, 459, 461, 464, 465, 467, 468, 477, 479, 480, 482], "parse_and_bind": [66, 320, 323, 362, 482], "read_init_fil": [66, 320, 323, 362, 482], "get_line_buff": [66, 320, 323, 362], "insert_text": [66, 320, 323, 362], "redisplay": [66, 176, 320, 362, 464], "read_history_fil": [66, 320, 362], "write_history_fil": [66, 320, 362], "append_history_fil": [66, 320, 362, 477, 482], "get_history_length": [66, 320, 362, 482], "set_history_length": [66, 320, 362], "clear_histori": [66, 320, 362], "get_current_history_length": [66, 320, 362, 464], "get_history_item": [66, 320, 362, 464], "remove_history_item": [66, 320, 362], "replace_history_item": [66, 320, 362], "add_histori": [66, 320, 362], "set_auto_histori": [66, 320, 362, 478, 482], "set_startup_hook": [66, 320, 362], "set_pre_input_hook": [66, 320, 362], "set_complet": [66, 320, 323, 362], "get_complet": [66, 320, 362], "get_completion_typ": [66, 320, 362], "get_begidx": [66, 320, 362, 482], "get_endidx": [66, 320, 362, 482], "set_completer_delim": [66, 320, 362, 482], "get_completer_delim": [66, 320, 362], "set_completion_display_matches_hook": [66, 320, 362], "servic": [66, 99, 103, 106, 120, 139, 224, 245, 254, 255, 262, 267, 269, 282, 283, 284, 293, 303, 321, 328, 335, 337, 338, 341, 344, 362, 365, 408, 418, 425, 427, 436, 454, 460, 461, 465, 468, 471, 472, 475, 482], "pack_into": [66, 145, 224, 347, 466, 482], "unpack_from": [66, 145, 224, 347, 466, 482], "iter_unpack": [66, 145, 347, 476], "codecinfo": [66, 145, 157, 466], "getencod": [66, 85, 90, 105, 145, 157, 174, 176, 224, 245, 258, 266, 273, 415, 460, 472, 482], "getdecod": [66, 105, 145, 157], "getincrementalencod": [66, 145, 157, 475], "getincrementaldecod": [66, 145, 157], "getread": [66, 105, 145, 157], "getwrit": [66, 105, 145, 157], "encodedfil": [66, 145, 157], "iterencod": [66, 145, 157, 262, 285], "iterdecod": [66, 145, 157], "bom_b": [66, 145, 157], "bom_l": [66, 145, 157], "bom_utf8": [66, 145, 157], "bom_utf16": [66, 145, 157], "bom_utf16_b": [66, 145, 157], "bom_utf16_l": [66, 145, 157], "bom_utf32": [66, 145, 157], "bom_utf32_b": [66, 145, 157], "bom_utf32_l": [66, 145, 157], "register_error": [66, 145, 157, 224, 258, 344, 464], "lookup_error": [66, 145, 157, 464], "strict_error": [66, 145, 157], "ignore_error": [66, 145, 157, 332], "replace_error": [66, 145, 157], "backslashreplace_error": [66, 145, 157], "xmlcharrefreplace_error": [66, 145, 157], "namereplace_error": [66, 145, 157], "stateless": [66, 141, 145, 147], "getstat": [66, 145, 157, 290, 318], "setstat": [66, 145, 157, 290, 318, 482], "writelin": [66, 116, 129, 132, 135, 145, 157, 189, 258, 461, 482], "streamreaderwrit": [66, 145], "streamrecod": [66, 105, 145, 482], "idna": [66, 145, 202, 386, 393, 464, 482], "internation": [66, 105, 145, 193, 245, 254, 282, 285, 335, 341, 345, 346, 365, 434, 461, 464, 465, 477, 479, 482], "nameprep": [66, 145, 157, 346], "toascii": [66, 145, 157], "tounicod": [66, 83, 119, 145, 157, 181], "codepag": [66, 118, 145, 352, 473, 482], "utf_8_sig": [66, 145], "minyear": [66, 181, 182], "maxyear": [66, 181, 182, 482], "total_second": [66, 181, 182, 468], "fromordin": [66, 181, 182, 479], "fromisoformat": [66, 181, 182, 340, 472, 479, 482], "fromisocalendar": [66, 181, 182, 480, 482], "timetupl": [66, 181, 182], "toordin": [66, 181, 182], "weekday": [66, 92, 150, 181, 182, 210, 269, 365, 480, 482], "isoweekday": [66, 92, 181, 182, 210], "isocalendar": [66, 181, 182, 480, 481, 482], "isoformat": [66, 99, 181, 182, 189, 340, 424, 464, 478, 479, 482], "ctime": [66, 70, 116, 181, 182, 293, 294, 342, 365, 464], "strftime": [66, 98, 99, 116, 138, 181, 266, 267, 269, 271, 365, 418, 450, 451, 464, 466, 467, 474, 475, 478, 482], "utcnow": [66, 181, 182, 482], "utcfromtimestamp": [66, 181, 182, 341, 482], "strptime": [66, 116, 181, 267, 341, 365, 418, 463, 464, 466, 474, 482], "timetz": [66, 181, 182], "astimezon": [66, 181, 182, 189, 424, 475, 478, 480, 482], "utcoffset": [66, 181, 182, 482], "dst": [66, 142, 175, 181, 182, 293, 332, 340, 365, 475], "utctimetupl": [66, 181, 182, 482], "timestamp": [66, 95, 99, 125, 150, 159, 162, 181, 182, 202, 208, 233, 244, 264, 293, 311, 335, 340, 341, 357, 365, 379, 397, 421, 431, 454, 464, 468, 475, 477, 479, 482], "fromutc": [66, 181, 182, 482], "iana": [66, 181, 182, 240, 254, 259, 276, 314, 341, 410, 412, 481, 482], "from_fil": [66, 117, 181, 412, 421, 424, 478, 482], "no_cach": [66, 181, 424], "clear_cach": [66, 181, 215, 218, 424, 476], "available_timezon": [66, 181, 424, 482], "reset_tzpath": [66, 181, 424], "tzpath": [66, 181, 424, 455, 482], "zoneinfonotfounderror": [66, 181, 424], "invalidtzpathwarn": [66, 181, 424], "iterweekday": [66, 150, 181], "itermonthd": [66, 150, 181, 479, 482], "itermonthday": [66, 150, 181, 482], "itermonthdays2": [66, 150, 181, 482], "itermonthdays3": [66, 150, 181, 479, 482], "itermonthdays4": [66, 150, 181, 479, 482], "monthdatescalendar": [66, 150, 181], "monthdays2calendar": [66, 150, 181], "monthdayscalendar": [66, 150, 181], "yeardatescalendar": [66, 150, 181], "yeardays2calendar": [66, 150, 181], "yeardayscalendar": [66, 150, 181], "textcalendar": [66, 150, 181, 482], "formatmonth": [66, 150, 181], "prmonth": [66, 150, 181, 482], "formatyear": [66, 150, 181], "pryear": [66, 150, 181, 482], "htmlcalendar": [66, 150, 181, 479], "formatyearpag": [66, 150, 181], "cssclass": [66, 150, 181], "cssclass_noday": [66, 150, 181], "cssclasses_weekday_head": [66, 150, 181], "cssclass_month_head": [66, 150, 181], "cssclass_month": [66, 150, 181], "cssclass_year": [66, 150, 181], "cssclass_year_head": [66, 150, 181], "localetextcalendar": [66, 150, 181, 472, 482], "localehtmlcalendar": [66, 150, 181, 472, 482], "setfirstweekday": [66, 150, 181], "firstweekday": [66, 150, 181], "isleap": [66, 150, 181], "leapday": [66, 150, 181], "weekhead": [66, 150, 181], "monthrang": [66, 150, 181], "monthcalendar": [66, 150, 181], "prcal": [66, 150, 181], "timegm": [66, 150, 181, 365], "day_nam": [66, 150, 181], "day_abbr": [66, 150, 181], "month_nam": [66, 150, 181, 434], "month_abbr": [66, 150, 181], "monday": [66, 92, 150, 181, 182, 210, 266, 269, 365, 482], "tuesday": [66, 92, 150, 181, 182, 210, 269, 450], "wednesday": [66, 92, 150, 181, 182, 210], "thursday": [66, 92, 150, 181, 182, 210], "friday": [66, 92, 150, 181, 210], "saturday": [66, 92, 150, 181, 182, 210], "sunday": [66, 92, 150, 181, 182, 210, 266, 269, 365, 468, 482], "chainmap": [66, 181, 186, 344, 385, 475, 476, 479, 482], "new_child": [66, 159, 181, 476, 482], "most_common": [66, 159, 181, 468], "dequ": [66, 181, 186, 261, 316, 344, 385, 401, 426, 429, 441, 451, 465, 466, 467, 468, 472, 474, 477, 478, 482], "appendleft": [66, 159, 181, 465], "extendleft": [66, 159, 181], "popleft": [66, 159, 181, 261, 316, 441, 451, 465], "rotat": [66, 98, 116, 159, 181, 185, 269, 290, 383, 465, 467, 468, 482], "maxlen": [66, 151, 159, 181, 261, 385, 467, 468], "defaultdict": [66, 85, 181, 186, 344, 385, 466, 474, 482], "default_factori": [66, 159, 180, 181, 385, 482], "somenamedtupl": [66, 159, 181], "_make": [66, 159, 181, 347, 482], "_asdict": [66, 159, 181, 467, 468, 470, 480, 482], "_replac": [66, 159, 181, 393, 467, 482], "_field": [66, 120, 159, 181, 264, 385, 467, 468, 482], "_field_default": [66, 159, 181, 385, 482], "ordereddict": [66, 85, 166, 174, 181, 186, 255, 344, 385, 468, 470, 472, 474, 477, 478, 480, 481, 482], "move_to_end": [66, 159, 181, 474, 482], "userdict": [66, 181, 462, 464, 467, 482], "userlist": [66, 181, 463, 482], "userstr": [66, 181, 461, 477, 481, 482], "mutablesequ": [66, 160, 181, 186, 344, 385, 469, 475, 477, 482], "bytestr": [66, 90, 160, 181, 186, 293, 337, 340, 344, 385, 406, 412, 423, 467, 482], "mutableset": [66, 160, 181, 186, 344, 385, 482], "mutablemap": [66, 76, 85, 160, 166, 181, 183, 186, 330, 344, 385, 427, 467, 469, 475], "mappingview": [66, 160, 181, 186, 344, 385, 482], "itemsview": [66, 160, 181, 186, 344, 385], "keysview": [66, 160, 181, 186, 344, 385], "valuesview": [66, 160, 181, 186, 344, 385, 482], "asyncgener": [66, 160, 181, 186, 344, 385, 478, 482], "recip": [66, 83, 92, 99, 106, 147, 159, 181, 189, 199, 223, 249, 250, 275, 290, 293, 298, 315, 318, 330, 344, 352, 412, 453, 473, 474, 482], "heappush": [66, 181, 235, 451, 464, 467], "heappop": [66, 181, 235, 261, 451, 464, 467], "heappushpop": [66, 181, 235, 467], "heapifi": [66, 181, 235, 318, 451, 482], "heapreplac": [66, 181, 235, 318], "nlargest": [66, 85, 181, 224, 225, 235, 465, 466, 482], "nsmallest": [66, 85, 181, 224, 225, 235, 465, 466], "bisect_left": [66, 147, 181], "bisect_right": [66, 147, 181], "insort_left": [66, 147, 181, 482], "insort_right": [66, 147, 181], "insort": [66, 147, 181, 451, 482], "typecod": [66, 119, 142, 181, 283, 384, 469, 482], "buffer_info": [66, 119, 181], "byteswap": [66, 119, 141, 181, 350, 476], "frombyt": [66, 119, 181, 337, 474, 481, 482], "fromfil": [66, 119, 181, 189, 469], "fromunicod": [66, 119, 181], "tofil": [66, 119, 181, 189, 469], "__callback__": [66, 181, 401, 476], "getweakrefcount": [66, 181, 401], "getweakref": [66, 181, 401], "weakkeydictionari": [66, 181, 344, 401, 466, 482], "keyref": [66, 181, 401, 466], "weakvaluedictionari": [66, 181, 344, 401, 451, 466, 482], "valueref": [66, 181, 401, 466], "weakset": [66, 181, 344, 401, 468, 472, 482], "weakmethod": [66, 181, 344, 401, 476], "detach": [66, 116, 131, 142, 149, 181, 258, 270, 293, 337, 341, 367, 375, 401, 403, 404, 429, 474, 475, 482], "peek": [66, 116, 117, 149, 159, 181, 233, 258, 270, 401, 474, 482], "atexit": [66, 76, 82, 110, 165, 181, 254, 267, 315, 320, 401, 461, 465, 471, 482], "referencetyp": [66, 181, 401, 482], "proxytyp": [66, 181, 283, 401, 482], "callableproxytyp": [66, 181, 401, 482], "new_class": [66, 181, 384, 475, 482], "prepare_class": [66, 181, 384, 475], "resolve_bas": [66, 181, 384, 479, 482], "nonetyp": [66, 87, 88, 167, 181, 192, 225, 284, 318, 319, 384, 471, 472, 482], "lambdatyp": [66, 181, 384], "generatortyp": [66, 181, 384], "coroutinetyp": [66, 181, 384, 477, 482], "asyncgeneratortyp": [66, 181, 384], "codetyp": [66, 181, 384, 480, 482], "celltyp": [66, 181, 384, 482], "builtinfunctiontyp": [66, 181, 384], "builtinmethodtyp": [66, 181, 384, 482], "wrapperdescriptortyp": [66, 181, 384, 479, 482], "methodwrappertyp": [66, 181, 255, 384, 472, 479, 482], "notimplementedtyp": [66, 167, 181, 384, 471, 482], "methoddescriptortyp": [66, 181, 384, 479, 482], "classmethoddescriptortyp": [66, 181, 384, 479, 482], "ellipsistyp": [66, 167, 181, 384, 471, 482], "uniontyp": [66, 181, 225, 344, 384, 385, 472, 482], "tracebacktyp": [66, 181, 267, 384, 427, 479, 482], "frametyp": [66, 181, 384, 482], "getsetdescriptortyp": [66, 181, 384], "memberdescriptortyp": [66, 181, 384, 482], "dynamicclassattribut": [66, 181, 384, 472, 476], "deep": [66, 99, 181, 250, 254, 299, 307, 331, 352, 409, 482], "deepcopi": [66, 83, 159, 170, 180, 181, 319, 389, 423, 468, 478, 479, 482], "pretti": [66, 74, 87, 90, 105, 108, 120, 166, 181, 184, 189, 254, 255, 262, 269, 292, 297, 308, 377, 388, 410, 412, 418, 429, 461, 462, 463, 466, 467, 469, 471, 481, 482], "printer": [66, 102, 181, 246, 254, 368, 377, 404], "prettyprint": [66, 181, 476, 482], "pformat": [66, 181, 307, 476, 482], "pp": [66, 91, 181, 297, 307, 318, 480, 482], "isread": [66, 181, 307], "isrecurs": [66, 181, 307], "saferepr": [66, 181, 307], "arepr": [66, 181, 321], "fillvalu": [66, 181, 261, 321, 467, 482], "maxlevel": [66, 162, 181, 307, 321], "maxdict": [66, 181, 321], "maxlist": [66, 181, 321], "maxtupl": [66, 181, 321], "maxset": [66, 181, 321], "maxfrozenset": [66, 181, 321], "maxdequ": [66, 181, 321], "maxarray": [66, 181, 321], "maxlong": [66, 181, 321], "maxstr": [66, 181, 321], "maxoth": [66, 181, 321], "repr1": [66, 181, 321], "enumtyp": [66, 181, 210, 472], "_ignore_": [66, 92, 181, 210, 479, 482], "_generate_next_value_": [66, 92, 181, 210, 482], "_missing_": [66, 92, 181, 210, 482], "intenum": [66, 181, 210, 240, 333, 337, 341, 472, 478, 482], "strenum": [66, 181, 210, 240, 471, 472, 482], "_numeric_repr_": [66, 181, 210], "intflag": [66, 181, 210, 319, 341, 472, 478, 482], "enumcheck": [66, 181, 210, 472], "named_flag": [66, 181, 210], "flagboundari": [66, 92, 181, 210, 472], "eject": [66, 92, 181, 210], "__dunder__": [66, 181], "_sunder_": [66, 181], "nonmemb": [66, 181, 210, 472, 482], "graph": [66, 181, 254, 268, 292, 299, 343, 383, 463, 476, 481, 482], "topologicalsort": [66, 181, 231, 481, 482], "is_act": [66, 131, 181, 231], "get_readi": [66, 181, 231], "static_ord": [66, 181, 231], "cycleerror": [66, 181, 231], "tower": [66, 220, 290, 343, 383, 467, 469, 482], "conjug": [66, 185, 289, 290, 344, 467], "ration": [66, 182, 185, 254, 289, 290, 344, 427, 467, 468, 469, 474, 482], "denomin": [66, 185, 220, 289, 290, 344, 467, 478, 480, 482], "implementor": [66, 290, 463, 468, 478], "theoret": [66, 86, 88, 93, 185, 290], "ceil": [66, 220, 275, 289, 290, 322, 344, 427, 467, 480, 482], "comb": [66, 261, 275, 290, 343, 441, 472, 480, 482], "copysign": [66, 275, 290, 467, 472, 482], "fab": [66, 275, 290], "fmod": [66, 275, 290, 429], "frexp": [66, 275, 290], "fsum": [66, 224, 275, 290, 343, 443, 467, 482], "gcd": [66, 220, 275, 290, 477, 481, 482], "isclos": [66, 154, 275, 290, 477, 482], "isfinit": [66, 154, 275, 290, 472, 474, 482], "isinf": [66, 154, 275, 290, 344, 467, 472, 482], "isnan": [66, 154, 275, 290, 343, 344, 441, 467, 472, 482], "isqrt": [66, 261, 275, 290, 480, 482], "lcm": [66, 275, 290, 481, 482], "ldexp": [66, 275, 290, 318, 482], "modf": [66, 275, 290], "nextaft": [66, 275, 290, 481, 482], "perm": [66, 92, 222, 275, 290, 434, 472, 479, 480, 482], "prod": [66, 261, 275, 290, 480, 482], "trunc": [66, 275, 289, 290, 344, 427, 467, 482], "ulp": [66, 275, 290, 318, 352, 467, 481, 482], "logarithm": [66, 147, 185, 235, 290, 295, 344, 423, 464, 467, 470, 474, 475], "cbrt": [66, 275, 290, 472, 482], "exp2": [66, 275, 290, 472, 482], "expm1": [66, 275, 290, 468, 474, 482], "log1p": [66, 275, 290, 467, 482], "log2": [66, 275, 290, 474, 475], "log10": [66, 154, 185, 275, 290, 467], "sqrt": [66, 141, 154, 165, 185, 275, 290, 343, 465, 466, 467, 474, 480, 482], "trigonometr": [66, 290, 465], "aco": [66, 154, 275, 290], "asin": [66, 154, 275, 290], "atan": [66, 154, 275, 290, 467], "atan2": [66, 154, 275, 290, 482], "cos": [66, 154, 185, 220, 275, 290, 299, 450, 464, 480], "dist": [66, 251, 270, 275, 290, 296, 383, 420, 466, 474, 477, 480, 482], "hypot": [66, 159, 275, 290, 472, 480, 482], "sin": [66, 120, 154, 185, 275, 290, 427, 464], "tan": [66, 154, 275, 290, 482], "angular": [66, 290, 433], "degre": [66, 71, 155, 176, 221, 275, 290, 343, 344, 383, 427, 464, 480, 482], "radian": [66, 154, 185, 221, 275, 290, 383, 464, 480, 482], "hyperbol": [66, 189, 290, 467], "acosh": [66, 154, 275, 290, 467, 482], "asinh": [66, 154, 275, 290, 467, 482], "atanh": [66, 154, 275, 290, 467, 482], "cosh": [66, 154, 275, 290], "sinh": [66, 154, 275, 290], "tanh": [66, 154, 275, 290], "erf": [66, 91, 275, 290, 468, 474, 479, 482], "erfc": [66, 275, 290, 468, 474, 479, 482], "gamma": [66, 275, 290, 318, 468, 474], "lgamma": [66, 275, 290, 468, 474], "pi": [66, 91, 154, 175, 176, 185, 220, 273, 275, 290, 297, 318, 383, 412, 441, 443, 445, 450, 474, 475, 480], "tau": [66, 154, 275, 290, 478, 482], "polar": [66, 290, 467, 482], "coordin": [66, 68, 76, 83, 88, 90, 92, 99, 175, 176, 178, 182, 271, 275, 281, 290, 340, 345, 365, 368, 375, 377, 383, 461, 467, 471, 482], "rect": [66, 154, 175, 290, 467], "classif": [66, 266, 290, 292, 434], "infj": [66, 154, 290, 478, 482], "nanj": [66, 154, 290, 478, 482], "as_tupl": [66, 185, 290, 467], "compare_sign": [66, 185, 290], "compare_tot": [66, 185, 290], "compare_total_mag": [66, 185, 290], "copy_ab": [66, 185, 290], "copy_neg": [66, 185, 290], "copy_sign": [66, 185, 290], "from_float": [66, 185, 220, 290, 443, 468, 470, 474, 482], "fma": [66, 185, 290], "is_canon": [66, 185, 290, 468], "is_finit": [66, 185, 290], "is_infinit": [66, 185, 290], "is_nan": [66, 185, 290], "is_qnan": [66, 185, 290], "is_sign": [66, 185, 290], "is_snan": [66, 185, 290], "is_subnorm": [66, 185, 290], "is_zero": [66, 185, 290], "ln": [66, 185, 246, 290, 467, 475, 482], "logb": [66, 185, 290], "logical_and": [66, 185, 290], "logical_invert": [66, 185, 290], "logical_or": [66, 185, 290], "logical_xor": [66, 185, 290], "max_mag": [66, 185, 290], "min_mag": [66, 185, 290], "next_minus": [66, 185, 290], "next_plus": [66, 185, 290], "next_toward": [66, 185, 290], "number_class": [66, 185, 290], "quantiz": [66, 185, 290, 475, 482], "remainder_near": [66, 185, 290], "same_quantum": [66, 185, 290], "scaleb": [66, 185, 290], "to_eng_str": [66, 185, 290, 465], "to_integr": [66, 185, 290], "to_integral_exact": [66, 185, 290], "to_integral_valu": [66, 185, 290], "getcontext": [66, 185, 290, 451, 465], "setcontext": [66, 185, 290], "localcontext": [66, 185, 290, 344, 466, 467, 482], "basiccontext": [66, 185, 290, 475], "extendedcontext": [66, 185, 290, 475], "defaultcontext": [66, 185, 290, 475], "clear_flag": [66, 185, 290], "clear_trap": [66, 185, 290], "copy_decim": [66, 185, 290], "create_decim": [66, 185, 290, 467, 475], "create_decimal_from_float": [66, 185, 290], "etini": [66, 185, 290], "etop": [66, 185, 290], "divide_int": [66, 185, 290], "minus": [66, 176, 185, 224, 226, 264, 275, 290, 332, 344, 345, 347, 364, 376, 429, 435, 479, 482], "to_sci_str": [66, 185, 290, 465], "max_prec": [66, 185, 290, 475], "max_emax": [66, 185, 290, 475], "min_emin": [66, 185, 290, 475], "min_etini": [66, 185, 290], "have_thread": [66, 185, 290, 475], "have_contextvar": [66, 185, 290, 455], "round_ceil": [66, 185, 290, 465], "round_down": [66, 185, 290, 465], "round_floor": [66, 185, 290, 482], "round_half_down": [66, 185, 290], "round_half_even": [66, 185, 290, 465, 482], "round_half_up": [66, 185, 290], "round_up": [66, 185, 290], "round_05up": [66, 185, 290], "clamp": [66, 185, 290, 474, 475, 482], "decimalexcept": [66, 185, 290], "divisionbyzero": [66, 185, 290, 465], "inexact": [66, 185, 290, 293, 475], "invalidoper": [66, 185, 290, 465, 467, 468, 475], "subnorm": [66, 185, 290, 482], "floatoper": [66, 185, 290, 475], "mitig": [66, 134, 243, 290, 344, 470, 472, 480, 482], "off": [66, 82, 88, 90, 93, 98, 99, 101, 102, 106, 108, 110, 118, 121, 155, 166, 175, 176, 182, 189, 190, 199, 207, 208, 215, 224, 231, 235, 242, 246, 261, 267, 268, 269, 275, 290, 292, 294, 301, 305, 308, 331, 335, 344, 352, 360, 361, 365, 366, 375, 383, 387, 388, 394, 419, 427, 431, 434, 435, 447, 454, 461, 462, 463, 464, 465, 466, 467, 469, 474, 476, 477, 478, 480, 481, 482], "from_decim": [66, 220, 290, 474], "limit_denomin": [66, 220, 290], "randbyt": [66, 290, 318, 481, 482], "randrang": [66, 82, 290, 318, 450, 465, 471, 473, 474, 482], "randint": [66, 290, 318, 474, 482], "getrandbit": [66, 290, 318, 465, 476, 482], "shuffl": [66, 82, 290, 318, 319, 474, 481, 482], "sampl": [66, 71, 73, 82, 86, 88, 91, 92, 93, 99, 100, 102, 104, 108, 115, 141, 155, 174, 175, 192, 222, 246, 279, 290, 295, 299, 307, 308, 318, 319, 336, 343, 349, 357, 366, 375, 394, 400, 412, 426, 440, 450, 460, 462, 463, 464, 467, 468, 472, 474, 476, 478, 479, 480, 482], "binomialvari": [66, 290, 318, 482], "uniform": [66, 82, 106, 133, 189, 255, 290, 318, 393, 397, 418, 474, 482], "triangular": [66, 290, 318, 467], "betavari": [66, 290, 318], "expovari": [66, 290, 318, 482], "gammavari": [66, 290, 318, 482], "gauss": [66, 290, 318, 482], "lognormvari": [66, 290, 318], "normalvari": [66, 82, 290, 318, 482], "vonmisesvari": [66, 290, 318], "paretovari": [66, 290, 318, 482], "weibullvari": [66, 290, 318], "systemrandom": [66, 173, 290, 293, 318, 326], "reproduc": [66, 83, 106, 120, 200, 233, 290, 343, 348, 361, 394, 416, 425, 474, 479, 480, 482], "spread": [66, 103, 134, 290, 368, 467], "fmean": [66, 290, 318, 343, 480, 482], "geometric_mean": [66, 290, 343, 480, 482], "harmonic_mean": [66, 290, 343, 478, 482], "median": [66, 91, 290, 318, 343, 450, 476, 482], "median_low": [66, 290, 343], "median_high": [66, 290, 343], "median_group": [66, 290, 343, 482], "multimod": [66, 290, 343, 480], "pstdev": [66, 290, 343, 482], "pvarianc": [66, 290, 343, 482], "stdev": [66, 225, 290, 343, 480, 482], "varianc": [66, 290, 343, 385, 450, 476, 478, 480, 482], "quantil": [66, 290, 318, 343, 480, 482], "covari": [66, 290, 343, 385, 471, 482], "correl": [66, 253, 290, 343, 471, 472, 482], "linear_regress": [66, 290, 343, 471, 482], "statisticserror": [66, 290, 343], "normaldist": [66, 290, 480, 482], "from_sampl": [66, 290, 343, 480], "pdf": [66, 78, 98, 105, 234, 290, 318, 343, 352, 480, 482], "cdf": [66, 290, 343, 480], "inv_cdf": [66, 290, 343, 482], "zscore": [66, 290, 343, 482], "accumul": [66, 83, 88, 90, 93, 118, 185, 223, 225, 261, 292, 299, 308, 318, 331, 379, 387, 462, 474, 475, 480, 482], "batch": [66, 98, 102, 125, 223, 261, 299, 348, 460, 477, 482], "from_iter": [66, 223, 261, 467, 482], "combinations_with_replac": [66, 93, 159, 223, 261, 318, 468, 470, 482], "dropwhil": [66, 93, 223, 261], "filterfals": [66, 93, 110, 223, 224, 261, 343], "groupbi": [66, 85, 93, 223, 225, 261, 291, 465, 470, 482], "islic": [66, 85, 93, 159, 223, 224, 261, 466, 479, 482], "pairwis": [66, 223, 261, 383, 471, 482], "permut": [66, 82, 93, 223, 261, 318, 423, 434, 461, 467, 470, 480, 482], "starmap": [66, 93, 163, 223, 224, 261, 283, 475], "takewhil": [66, 93, 223, 261], "tee": [66, 93, 176, 223, 261, 465, 482], "zip_longest": [66, 223, 224, 261, 469, 482], "cached_properti": [66, 83, 91, 223, 225, 344, 480, 482], "cmp_to_key": [66, 104, 223, 224, 225, 344, 468, 474], "lru_cach": [66, 83, 159, 219, 223, 225, 474, 475, 477, 480, 482], "total_ord": [66, 223, 225, 427, 429, 468, 474, 476, 482], "partialmethod": [66, 223, 225, 344, 476, 480, 482], "singledispatch": [66, 85, 223, 225, 472, 476, 479, 482], "singledispatchmethod": [66, 223, 225, 480, 482], "update_wrapp": [66, 86, 223, 225, 255, 466, 476], "lt": [66, 93, 120, 221, 223, 264, 291, 344, 383, 416, 430, 434, 462, 474], "eq": [66, 93, 120, 180, 223, 264, 291, 385, 430, 482], "ne": [66, 93, 110, 223, 291, 368], "ge": [66, 93, 223, 291], "gt": [66, 93, 120, 223, 237, 238, 239, 264, 291, 416, 430, 474, 475], "not_": [66, 93, 223, 291], "__not__": [66, 223, 291], "is_": [66, 93, 223, 291], "is_not": [66, 93, 223, 291], "and_": [66, 93, 223, 291], "floordiv": [66, 93, 120, 223, 264, 291, 430], "inv": [66, 223, 291, 477], "__inv__": [66, 223, 291], "lshift": [66, 120, 223, 264, 291, 430], "mod": [66, 83, 99, 120, 223, 224, 250, 264, 279, 291, 379, 420, 430, 435, 467, 480, 482], "mul": [66, 93, 110, 141, 185, 223, 261, 283, 291, 350, 419], "matmul": [66, 223, 291, 477, 482], "neg": [66, 185, 223, 225, 261, 291], "or_": [66, 93, 223, 291], "rshift": [66, 120, 223, 264, 291, 430], "truediv": [66, 223, 291], "xor": [66, 185, 210, 223, 291, 429], "__concat__": [66, 223, 291], "countof": [66, 223, 291, 481, 482], "delitem": [66, 223, 291], "getitem": [66, 223, 261, 291, 389, 463], "indexof": [66, 223, 291, 481, 482], "setitem": [66, 223, 291, 389], "attrgett": [66, 85, 93, 104, 147, 223, 291, 465, 466, 467, 474, 477, 482], "itemgett": [66, 85, 104, 147, 223, 261, 291, 465, 466, 477, 480, 482], "methodcal": [66, 85, 104, 223, 291, 467, 477, 482], "iadd": [66, 223, 291], "iand": [66, 223, 291], "iconcat": [66, 223, 291], "__iconcat__": [66, 223, 291], "ifloordiv": [66, 223, 291], "ilshift": [66, 223, 291], "imod": [66, 223, 291], "imul": [66, 110, 223, 291], "imatmul": [66, 223, 291, 477], "ior": [66, 223, 291], "ipow": [66, 223, 291], "irshift": [66, 223, 291], "isub": [66, 223, 291], "itruediv": [66, 223, 291], "ixor": [66, 223, 291], "pure": [66, 72, 82, 83, 93, 95, 97, 99, 101, 108, 120, 175, 182, 185, 218, 222, 224, 229, 234, 246, 261, 308, 333, 352, 355, 361, 408, 426, 427, 441, 454, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 482], "purepath": [66, 218, 251, 293, 296, 471, 472, 481, 482], "pureposixpath": [66, 218, 296], "purewindowspath": [66, 218, 296, 482], "drive": [66, 103, 108, 218, 230, 235, 246, 292, 294, 296, 357, 361, 368, 387, 421, 425, 460, 475, 476, 477, 482], "anchor": [66, 218, 250, 296, 341, 353, 368, 375, 468, 476], "stem": [66, 117, 218, 296, 420, 421, 468, 472, 482], "as_posix": [66, 218, 296], "as_uri": [66, 218, 296], "is_absolut": [66, 218, 296], "is_relative_to": [66, 218, 296, 482], "is_reserv": [66, 218, 256, 259, 296, 482], "joinpath": [66, 117, 218, 252, 253, 280, 296, 421, 482], "relative_to": [66, 218, 296, 482], "with_nam": [66, 218, 296, 482], "with_stem": [66, 218, 296, 482], "with_suffix": [66, 218, 296, 482], "posixpath": [66, 218, 251, 294, 296, 482], "windowspath": [66, 218, 296, 482], "cwd": [66, 142, 218, 222, 256, 293, 296, 348, 361, 398, 465, 480, 482], "chmod": [66, 82, 99, 116, 142, 151, 218, 293, 296, 332, 342, 437, 459, 471, 475, 482], "expandus": [66, 108, 166, 218, 230, 242, 286, 294, 296, 320, 332, 348, 477, 480, 482], "is_dir": [66, 116, 117, 218, 253, 280, 293, 296, 421, 478, 480, 482], "is_fil": [66, 116, 117, 218, 252, 253, 280, 293, 296, 421, 477, 480, 482], "is_mount": [66, 218, 296, 479, 480, 482], "is_symlink": [66, 116, 218, 293, 296, 480, 482], "is_socket": [66, 218, 296, 480, 482], "is_fifo": [66, 218, 296, 480, 482], "is_block_devic": [66, 218, 296, 480, 482], "is_char_devic": [66, 218, 296, 480, 482], "iterdir": [66, 117, 218, 252, 253, 280, 296, 421, 482], "walk": [66, 116, 118, 120, 142, 193, 195, 199, 203, 204, 206, 218, 264, 285, 292, 293, 296, 348, 368, 380, 407, 463, 467, 469, 473, 475, 477, 482], "lchmod": [66, 116, 218, 293, 296, 467, 482], "lstat": [66, 116, 218, 293, 294, 296, 342, 361, 475, 480, 482], "mkdir": [66, 82, 116, 117, 142, 199, 218, 293, 296, 421, 450, 472, 475, 477, 482], "read_byt": [66, 117, 218, 252, 253, 278, 280, 296, 421, 477, 482], "read_text": [66, 117, 218, 251, 252, 253, 258, 280, 296, 421, 477, 482], "readlink": [66, 116, 218, 293, 296, 475, 480, 481, 482], "rglob": [66, 142, 218, 296, 472, 482], "rmdir": [66, 82, 116, 142, 186, 218, 293, 296, 361, 475], "samefil": [66, 218, 294, 296, 476, 477, 482], "symlink_to": [66, 218, 296, 471, 480, 482], "hardlink_to": [66, 218, 296, 471, 480, 482], "unlink": [66, 82, 116, 163, 186, 212, 218, 273, 283, 284, 293, 296, 328, 359, 361, 375, 398, 409, 410, 475, 482], "write_byt": [66, 218, 278, 296, 477, 482], "write_text": [66, 218, 296, 477, 482], "abspath": [66, 199, 218, 294, 296, 398, 468, 482], "basenam": [66, 88, 95, 99, 118, 183, 192, 218, 292, 294, 296, 368, 374, 398, 421, 482], "commonpath": [66, 218, 294, 477, 482], "commonprefix": [66, 218, 294, 477], "dirnam": [66, 88, 91, 218, 222, 271, 293, 294, 296, 302, 361, 387, 455, 479], "lexist": [66, 218, 294, 465, 480, 482], "expandvar": [66, 218, 230, 294, 348, 467, 482], "getatim": [66, 218, 294], "getmtim": [66, 218, 294], "getctim": [66, 218, 294], "getsiz": [66, 153, 218, 293, 294, 350, 482], "isab": [66, 218, 294, 296], "isfil": [66, 117, 199, 218, 294, 296, 357, 437, 474, 480, 482], "isdir": [66, 117, 218, 294, 296, 302, 357, 480, 482], "islink": [66, 218, 293, 294, 296, 480, 482], "ismount": [66, 218, 294, 476, 480, 482], "normcas": [66, 218, 219, 294, 482], "normpath": [66, 218, 293, 294, 468, 482], "realpath": [66, 218, 293, 294, 296, 460, 471, 480, 482], "relpath": [66, 218, 294, 296, 467, 482], "sameopenfil": [66, 218, 294], "samestat": [66, 218, 294, 296, 476], "splitdriv": [66, 218, 294, 479, 482], "splitext": [66, 88, 99, 199, 218, 294, 296, 357, 451, 467, 478, 482], "supports_unicode_filenam": [66, 218, 294, 464], "filelineno": [66, 217, 218], "isfirstlin": [66, 217, 218], "isstdin": [66, 217, 218], "nextfil": [66, 217, 218], "hook_compress": [66, 217, 218, 471], "hook_encod": [66, 217, 218, 478, 482], "s_isdir": [66, 218, 293, 342], "s_ischr": [66, 218, 342], "s_isblk": [66, 218, 342], "s_isreg": [66, 218, 342], "s_isfifo": [66, 218, 342], "s_islnk": [66, 218, 342], "s_issock": [66, 218, 342], "s_isdoor": [66, 218, 342, 482], "s_isport": [66, 218, 342, 482], "s_iswht": [66, 218, 342, 482], "s_imod": [66, 218, 342], "s_ifmt": [66, 218, 342], "filemod": [66, 98, 99, 218, 267, 342, 357, 475, 480, 482], "st_mode": [66, 116, 218, 293, 296, 342, 476, 480], "st_ino": [66, 116, 218, 269, 293, 342, 482], "st_dev": [66, 116, 218, 293, 342], "st_nlink": [66, 116, 218, 293, 342], "st_uid": [66, 116, 218, 293, 342], "st_gid": [66, 116, 218, 293, 342], "st_size": [66, 116, 218, 293, 296, 342, 463], "st_atim": [66, 116, 218, 293, 342], "st_mtime": [66, 116, 189, 218, 233, 293, 296, 342, 464], "st_ctime": [66, 116, 218, 293, 342], "s_ifsock": [66, 218, 342], "s_iflnk": [66, 218, 342, 480], "s_ifreg": [66, 218, 293, 342], "s_ifblk": [66, 218, 293, 342], "s_ifdir": [66, 218, 342], "s_ifchr": [66, 218, 293, 342, 482], "s_ififo": [66, 218, 293, 342], "s_ifdoor": [66, 218, 342, 476, 482], "s_ifport": [66, 218, 342, 476, 482], "s_ifwht": [66, 218, 342, 476, 482], "s_isuid": [66, 218, 293, 342], "s_isgid": [66, 218, 293, 342], "s_isvtx": [66, 218, 293, 342], "s_irwxu": [66, 218, 293, 342], "s_irusr": [66, 218, 293, 342], "s_iwusr": [66, 218, 293, 342], "s_ixusr": [66, 218, 293, 342], "s_irwxg": [66, 218, 293, 342], "s_irgrp": [66, 218, 293, 342], "s_iwgrp": [66, 218, 293, 342], "s_ixgrp": [66, 218, 293, 342], "s_irwxo": [66, 218, 293, 342], "s_iroth": [66, 218, 293, 342], "s_iwoth": [66, 218, 293, 342], "s_ixoth": [66, 218, 293, 342], "s_enfmt": [66, 218, 293, 342], "s_iread": [66, 218, 293, 342], "s_iwrit": [66, 218, 293, 332, 342], "s_iexec": [66, 218, 293, 342], "uf_nodump": [66, 218, 293, 342], "uf_immut": [66, 218, 293, 342, 467], "uf_append": [66, 218, 293, 342, 467], "uf_opaqu": [66, 218, 293, 342], "uf_nounlink": [66, 218, 293, 342], "uf_compress": [66, 218, 293, 342], "uf_hidden": [66, 218, 293, 342], "sf_archiv": [66, 218, 293, 342], "sf_immut": [66, 218, 293, 342], "sf_append": [66, 218, 293, 342], "sf_nounlink": [66, 218, 293, 342], "sf_snapshot": [66, 218, 293, 342], "file_attribute_arch": [66, 218, 342], "file_attribute_compress": [66, 218, 342], "file_attribute_devic": [66, 218, 342], "file_attribute_directori": [66, 218, 342], "file_attribute_encrypt": [66, 218, 342], "file_attribute_hidden": [66, 218, 342], "file_attribute_integrity_stream": [66, 218, 342], "file_attribute_norm": [66, 218, 342], "file_attribute_not_content_index": [66, 218, 342], "file_attribute_no_scrub_data": [66, 218, 342], "file_attribute_offlin": [66, 218, 342], "file_attribute_readon": [66, 218, 342], "file_attribute_reparse_point": [66, 218, 293, 342], "file_attribute_sparse_fil": [66, 218, 342], "file_attribute_system": [66, 218, 342], "file_attribute_temporari": [66, 218, 342], "file_attribute_virtu": [66, 218, 342], "io_reparse_tag_symlink": [66, 218, 342], "io_reparse_tag_mount_point": [66, 218, 342], "io_reparse_tag_appexeclink": [66, 218, 342, 482], "cmp": [66, 104, 215, 218, 224, 344, 461, 462, 465, 469, 482], "cmpfile": [66, 215, 218], "dircmp": [66, 218, 461, 466, 476, 482], "report_partial_closur": [66, 215, 218], "report_full_closur": [66, 215, 218], "left_list": [66, 215, 218], "right_list": [66, 215, 218], "left_on": [66, 215, 218], "right_on": [66, 215, 218], "common_dir": [66, 215, 218], "common_fil": [66, 215, 218], "common_funni": [66, 215, 218], "same_fil": [66, 215, 218], "diff_fil": [66, 215, 218], "funny_fil": [66, 215, 218], "subdir": [66, 118, 215, 218, 271, 361, 482], "default_ignor": [66, 215, 218, 476], "temporaryfil": [66, 218, 359, 482], "namedtemporaryfil": [66, 106, 199, 218, 359, 467, 473, 482], "spooledtemporaryfil": [66, 218, 359, 467, 475, 482], "temporarydirectori": [66, 218, 359, 474, 482], "mkstemp": [66, 142, 218, 283, 359, 482], "mkdtemp": [66, 142, 218, 293, 359, 361, 401, 482], "gettempdir": [66, 218, 359, 482], "gettempdirb": [66, 218, 359, 482], "gettempprefix": [66, 218, 359], "gettempprefixb": [66, 218, 359], "tempdir": [66, 218, 359, 401, 482], "mktemp": [66, 218, 327, 359, 394, 482], "iglob": [66, 218, 230, 471, 477, 478, 482], "fnmatch": [66, 218, 230, 254, 296, 348, 381, 387, 482], "fnmatchcas": [66, 218, 219, 387, 482], "getlin": [66, 218, 265, 381, 477, 482], "clearcach": [66, 218, 265], "checkcach": [66, 218, 265, 482], "lazycach": [66, 218, 265, 477, 482], "copyfileobj": [66, 106, 218, 233, 332, 480, 482], "copyfil": [66, 82, 142, 218, 332, 450, 468, 476, 480, 482], "samefileerror": [66, 218, 332, 476, 482], "copymod": [66, 142, 218, 332], "copystat": [66, 142, 218, 332, 475, 482], "copy2": [66, 82, 218, 332, 474, 475, 477, 480, 482], "ignore_pattern": [66, 218, 332, 361, 467], "copytre": [66, 82, 142, 218, 467, 468, 474, 480, 482], "rmtree": [66, 82, 142, 186, 218, 293, 296, 361, 401, 472, 475, 479, 480, 482], "avoids_symlink_attack": [66, 218, 332], "disk_usag": [66, 218, 332, 475, 482], "chown": [66, 99, 116, 142, 218, 293, 332, 475, 482], "make_arch": [66, 142, 218, 332, 468, 473, 474, 477, 480, 482], "get_archive_format": [66, 218, 332, 474], "register_archive_format": [66, 218, 332, 474], "unregister_archive_format": [66, 218, 332], "unpack_arch": [66, 142, 218, 332, 474, 482], "register_unpack_format": [66, 218, 332], "unregister_unpack_format": [66, 218, 332], "get_unpack_format": [66, 218, 332], "base_dir": [66, 142, 218], "get_terminal_s": [66, 116, 218, 293, 332, 475, 482], "persist": [66, 183, 240, 244, 246, 254, 268, 269, 274, 281, 320, 350, 389, 425, 474, 476, 482], "highest_protocol": [66, 298, 299, 464], "default_protocol": [66, 298, 299, 330, 471, 482], "pickleerror": [66, 298, 299], "picklingerror": [66, 88, 298, 299], "unpicklingerror": [66, 298, 299, 482], "pickler": [66, 88, 171, 298, 299, 300, 470, 475, 480, 482], "persistent_id": [66, 298, 299, 482], "dispatch_t": [66, 171, 298, 299, 475, 482], "reducer_overrid": [66, 298, 299, 480, 482], "unpickl": [66, 74, 92, 99, 182, 267, 269, 283, 284, 298, 300, 424, 464, 467, 468, 470, 482], "persistent_load": [66, 298, 299, 482], "find_class": [66, 142, 298, 299], "picklebuff": [66, 298, 299, 482], "__getnewargs_ex__": [66, 298, 299, 482], "__getnewargs__": [66, 92, 159, 298, 299, 388, 464, 477, 482], "__getstate__": [66, 298, 299, 388, 464, 472, 482], "__setstate__": [66, 298, 299, 388, 464, 480, 482], "__reduce__": [66, 78, 210, 298, 299, 388, 466, 480, 482], "__reduce_ex__": [66, 78, 92, 298, 299, 388, 482], "dispatch": [66, 76, 82, 83, 85, 98, 99, 103, 121, 139, 144, 155, 176, 196, 225, 244, 298, 308, 321, 350, 387, 418, 470, 472, 474, 476, 480, 482], "copyreg": [66, 170, 254, 279, 298, 299, 469, 482], "shelf": [66, 298, 330, 344, 474, 476], "sync": [66, 92, 116, 176, 183, 283, 293, 295, 298, 330, 350, 368, 475, 480, 482], "bsddbshelf": [66, 298, 330, 344], "dbfilenameshelf": [66, 298, 330, 344], "whichdb": [66, 183, 298, 469], "reinterpret": [66, 298], "gdbm": [66, 82, 183, 298, 455, 469, 482], "firstkey": [66, 183, 298], "nextkey": [66, 183, 298], "reorgan": [66, 183, 193, 298, 462, 467, 470, 472, 478, 480, 482], "ndbm": [66, 298, 330, 427, 455, 480, 482], "dumb": [66, 103, 298, 358, 477, 478, 479, 480, 482], "dumbdbm": [66, 183, 298, 469], "sqlite": [66, 254, 298, 442, 450, 455, 466, 468, 471, 472, 474, 475, 476, 479, 482], "connect": [66, 90, 91, 96, 99, 103, 106, 116, 121, 123, 135, 139, 142, 151, 159, 163, 168, 206, 211, 212, 222, 240, 241, 242, 244, 246, 247, 256, 258, 267, 269, 284, 288, 292, 293, 298, 299, 305, 309, 327, 328, 332, 333, 335, 338, 341, 347, 348, 350, 352, 358, 361, 364, 368, 374, 383, 385, 389, 394, 396, 404, 406, 408, 410, 413, 415, 418, 425, 429, 448, 454, 455, 460, 461, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "complete_stat": [66, 298, 340], "enable_callback_traceback": [66, 298, 340], "register_adapt": [66, 298, 340], "register_convert": [66, 298, 340], "parse_colnam": [66, 298, 340, 482], "parse_decltyp": [66, 298, 340], "sqlite_ok": [66, 298, 340], "sqlite_deni": [66, 298, 340], "sqlite_ignor": [66, 298, 340], "apilevel": [66, 298, 340], "paramstyl": [66, 298, 340], "sqlite_vers": [66, 298, 340], "sqlite_version_info": [66, 298, 340], "threadsafeti": [66, 298, 340, 472, 482], "cursor": [66, 90, 155, 159, 174, 176, 246, 293, 298, 299, 320, 368, 374, 375, 389, 466, 467, 470, 474, 478, 480, 481, 482], "blobopen": [66, 298, 340, 472, 482], "commit": [66, 91, 118, 281, 288, 298, 305, 340, 348, 350, 370, 430, 466, 467, 468, 476, 478, 482], "rollback": [66, 298, 340, 466, 467, 472, 482], "executemani": [66, 298, 340, 482], "executescript": [66, 298, 340, 482], "create_funct": [66, 298, 340, 482], "create_aggreg": [66, 298, 340, 482], "create_window_funct": [66, 298, 340, 472, 482], "create_col": [66, 298, 340, 472, 482], "set_author": [66, 298, 340, 472, 482], "set_progress_handl": [66, 298, 340, 482], "set_trace_callback": [66, 298, 340, 475, 482], "enable_load_extens": [66, 142, 298, 340, 455, 468, 471, 474, 482], "load_extens": [66, 142, 298, 340, 468, 471, 474, 482], "iterdump": [66, 298, 340, 482], "backup": [66, 99, 110, 217, 269, 298, 340, 357, 467, 474, 479, 482], "getlimit": [66, 298, 340, 472, 482], "setlimit": [66, 298, 340, 472, 482], "deseri": [66, 262, 284, 298, 299, 340, 424, 445, 468, 472, 476, 478, 482], "in_transact": [66, 298, 340], "isolation_level": [66, 298, 340, 482], "row_factori": [66, 298, 340], "text_factori": [66, 298, 340], "total_chang": [66, 298, 340], "fetchon": [66, 91, 298, 299, 340, 466, 474], "fetchmani": [66, 298, 340], "fetchal": [66, 159, 298, 340, 466], "setinputs": [66, 298, 340], "setoutputs": [66, 298, 340], "arrays": [66, 298, 340], "lastrowid": [66, 298, 340, 478, 482], "rowcount": [66, 298, 340, 482], "blob": [66, 298, 341, 389, 472, 482], "seek": [66, 77, 82, 83, 105, 115, 116, 153, 174, 211, 214, 217, 235, 258, 278, 298, 299, 340, 350, 357, 359, 361, 421, 423, 445, 461, 467, 470, 482], "prepareprotocol": [66, 298, 482], "sqlite_errorcod": [66, 298, 340, 472], "sqlite_errornam": [66, 298, 340, 472], "interfaceerror": [66, 298, 340, 472, 482], "databaseerror": [66, 298, 340], "dataerror": [66, 298, 340, 482], "operationalerror": [66, 298, 340, 482], "integrityerror": [66, 298, 340], "internalerror": [66, 298, 340], "programmingerror": [66, 298, 340, 472, 482], "notsupportederror": [66, 298, 340, 482], "guid": [66, 72, 74, 89, 90, 91, 97, 101, 105, 108, 112, 182, 185, 186, 189, 209, 224, 251, 295, 298, 350, 389, 398, 455, 459, 467, 468, 474, 476, 482], "sql": [66, 93, 105, 174, 261, 281, 292, 298, 385, 450, 466, 470, 472, 475, 482], "uri": [66, 99, 106, 242, 296, 298, 314, 341, 383, 393, 394, 406, 409, 412, 414, 415, 417, 418, 471, 473, 475, 476, 482], "transact": [66, 93, 241, 242, 281, 298, 318, 364, 464, 466, 467, 474, 477, 478, 482], "adler32": [66, 117, 234, 423, 482], "compressobj": [66, 117, 423, 482], "crc32": [66, 117, 146, 234, 285, 423, 450, 451, 482], "decompress": [66, 117, 149, 157, 217, 233, 408, 423, 450, 466, 471, 474, 475, 477, 478, 482], "decompressobj": [66, 117, 423], "unused_data": [66, 117, 149, 270, 423], "unconsumed_tail": [66, 117, 423], "zlib_vers": [66, 117, 423], "zlib_runtime_vers": [66, 117, 423, 475], "badgzipfil": [66, 117, 233, 480, 482], "gzipfil": [66, 85, 117, 233, 357, 468, 470, 471, 473, 474, 477, 481, 482], "mtime": [66, 117, 215, 233, 250, 256, 293, 357, 395, 480, 482], "bzip2": [66, 117, 217, 254, 332, 357, 421, 472, 474, 475, 482], "bz2file": [66, 117, 149, 270, 468, 470, 471, 475, 476, 481, 482], "bz2compressor": [66, 117, 149], "bz2decompressor": [66, 117, 149, 477, 482], "needs_input": [66, 117, 149, 270], "shot": [66, 117, 168, 328, 479], "lzmaerror": [66, 117, 270], "lzmafil": [66, 117, 270, 476, 482], "lzmacompressor": [66, 117, 270], "lzmadecompressor": [66, 117, 270, 477, 482], "is_check_support": [66, 117, 270], "badzipfil": [66, 117, 421, 482], "largezipfil": [66, 117, 421], "zipinfo": [66, 117, 467, 478, 482], "is_zipfil": [66, 117, 421, 468, 482], "zip_stor": [66, 117, 421, 482], "zip_defl": [66, 117, 421, 451], "zip_bzip2": [66, 117, 421], "zip_lzma": [66, 117, 421], "getinfo": [66, 117, 421], "infolist": [66, 117, 421], "namelist": [66, 117, 421], "extractal": [66, 117, 357, 421, 466, 467, 477, 482], "printdir": [66, 117, 421], "setpassword": [66, 117, 421], "testzip": [66, 117, 421], "writestr": [66, 117, 421, 468], "pyzipfil": [66, 117, 476], "writepi": [66, 117, 421, 476], "date_tim": [66, 117, 247, 421], "compress_typ": [66, 117, 421, 468], "create_system": [66, 117, 421], "create_vers": [66, 117, 421], "extract_vers": [66, 117, 421], "flag_bit": [66, 117, 421, 482], "volum": [66, 76, 82, 117, 159, 261, 295, 327, 421, 465, 476], "internal_attr": [66, 117, 421], "external_attr": [66, 117, 421], "header_offset": [66, 117, 421], "crc": [66, 117, 146, 421, 423, 482], "compress_s": [66, 117, 421], "file_s": [66, 117, 421, 463], "tar": [66, 78, 108, 117, 254, 276, 292, 296, 332, 398, 452, 459, 461, 464, 465, 466, 467, 468, 474, 482], "is_tarfil": [66, 117, 357, 482], "tarerror": [66, 117, 357], "readerror": [66, 117, 357, 482], "compressionerror": [66, 117, 357], "streamerror": [66, 117, 357], "extracterror": [66, 117, 357], "headererror": [66, 117, 357], "ustar_format": [66, 117, 357], "gnu_format": [66, 117, 357], "pax_format": [66, 117, 357, 467], "default_format": [66, 117, 357, 478], "getmemb": [66, 117, 255, 315, 357, 477, 482], "getnam": [66, 117, 153, 163, 273, 350, 357, 364, 415, 471, 482], "extractfil": [66, 117, 357, 482], "addfil": [66, 117, 357], "gettarinfo": [66, 117, 357], "pax_head": [66, 117, 357], "tarinfo": [66, 117, 468, 474], "frombuf": [66, 117, 357], "fromtarfil": [66, 117, 357], "tobuf": [66, 117, 357], "linknam": [66, 117, 357], "uid": [66, 117, 125, 142, 151, 216, 244, 247, 256, 293, 296, 304, 305, 310, 322, 332, 342, 357, 467, 468, 475, 477, 480, 482], "gid": [66, 117, 142, 232, 293, 296, 310, 357, 467, 468, 475, 477, 482], "unam": [66, 116, 117, 293, 303, 352, 354, 357, 474, 475, 482], "gname": [66, 117, 357], "isreg": [66, 117, 357], "issym": [66, 117, 357], "islnk": [66, 117, 357], "ischr": [66, 117, 357], "isblk": [66, 117, 357], "isfifo": [66, 117, 357], "isdev": [66, 117, 357], "register_dialect": [66, 174, 216], "unregister_dialect": [66, 174, 216, 482], "get_dialect": [66, 174, 216, 482], "list_dialect": [66, 174, 216, 482], "field_size_limit": [66, 97, 174, 216, 466, 482], "dictread": [66, 174, 216, 478, 480, 482], "dictwrit": [66, 174, 216, 474, 482], "dialect": [66, 216, 340, 464, 466, 474, 482], "excel_tab": [66, 174, 216], "unix_dialect": [66, 174, 216, 474], "sniffer": [66, 174, 216, 337, 482], "sniff": [66, 174, 216, 482], "has_head": [66, 174, 216, 242, 256, 394, 482], "quote_al": [66, 174, 216], "quote_minim": [66, 174, 216], "quote_nonnumer": [66, 174, 216], "quote_non": [66, 174, 216], "doublequot": [66, 174, 216, 482], "escapechar": [66, 174, 216, 482], "linetermin": [66, 174, 216], "quotechar": [66, 174, 216, 482], "skipinitialspac": [66, 174, 216, 482], "csvreader": [66, 174, 216], "line_num": [66, 174, 216, 319, 466], "fieldnam": [66, 120, 159, 174, 216, 467, 470, 482], "csvwriter": [66, 174, 216], "writerow": [66, 174, 216, 474, 477, 482], "writehead": [66, 174, 216, 474, 482], "interpol": [66, 216, 343, 344, 429, 445, 474, 477, 478, 482], "basicinterpol": [66, 166, 216, 472, 482], "extendedinterpol": [66, 166, 216, 472, 474, 482], "boolean_st": [66, 166, 216], "sectcr": [66, 166, 216], "add_sect": [66, 166, 216, 474], "has_sect": [66, 166, 216], "has_opt": [66, 166, 216, 292, 350], "read_fil": [66, 166, 216, 268, 473], "read_str": [66, 166, 216, 474, 477], "read_dict": [66, 166, 216, 474, 479, 480, 481, 482], "getint": [66, 166, 216, 482], "getfloat": [66, 166, 216], "getboolean": [66, 166, 216, 482], "remove_opt": [66, 166, 216, 292, 350], "remove_sect": [66, 166, 216], "optionxform": [66, 166, 216], "max_interpolation_depth": [66, 166, 216], "rawconfigpars": [66, 216, 268, 468, 472, 476, 482], "nosectionerror": [66, 166, 216], "duplicatesectionerror": [66, 166, 216, 474], "duplicateoptionerror": [66, 166, 216, 474], "nooptionerror": [66, 166, 216, 468], "interpolationerror": [66, 166, 216], "interpolationdeptherror": [66, 166, 216], "interpolationmissingoptionerror": [66, 166, 216, 482], "interpolationsyntaxerror": [66, 166, 216], "missingsectionheadererror": [66, 166, 216], "parsingerror": [66, 166, 216, 472, 473, 482], "tomllib": [66, 216, 254, 472, 482], "toml": [66, 216, 254, 258, 471, 472, 482], "tomldecodeerror": [66, 216, 378], "netrc": [66, 216, 222, 254, 288, 463, 476, 477, 482], "netrcparseerror": [66, 216, 286], "authent": [66, 163, 216, 222, 234, 240, 247, 256, 267, 269, 286, 288, 305, 335, 341, 394, 418, 423, 463, 468, 474, 475, 476, 477, 478, 480, 481, 482], "plist": [66, 216, 254, 272, 458, 467, 476, 479, 480, 482], "fmt_xml": [66, 216, 304, 476], "fmt_binari": [66, 216, 304, 476], "digest": [66, 173, 195, 203, 204, 236, 254, 283, 305, 341, 394, 466, 468, 469, 474, 475, 476, 479, 480, 481, 482], "algorithms_guarante": [66, 173, 234, 468, 474], "algorithms_avail": [66, 173, 234, 468, 474, 482], "digest_s": [66, 173, 234, 236, 476], "block_siz": [66, 173, 234, 236, 476], "hexdigest": [66, 173, 234, 236, 340, 466, 482], "shake": [66, 173, 455, 472, 478, 481, 482], "file_digest": [66, 173, 234, 472, 482], "pbkdf2_hmac": [66, 173, 234, 468, 471, 473, 476, 482], "scrypt": [66, 173, 234, 478, 482], "blake2": [66, 173, 455, 472, 478, 481, 482], "blake2b": [66, 173, 234, 472, 478, 481, 482], "salt_siz": [66, 173, 234], "person_s": [66, 173, 234], "max_key_s": [66, 173, 234], "max_digest_s": [66, 173, 234], "person": [66, 91, 93, 108, 173, 246, 340, 341, 343, 425, 460, 461, 463, 467], "compare_digest": [66, 172, 173, 234, 236, 326, 468, 475, 482], "randbelow": [66, 173, 326, 482], "randbit": [66, 173, 326], "token_byt": [66, 173, 318, 326], "token_hex": [66, 173, 326], "token_urlsaf": [66, 173, 326], "ctermid": [66, 116, 293], "environb": [66, 116, 293, 474, 482], "fsencod": [66, 85, 116, 293, 296, 352, 361, 474, 478, 482], "fspath": [66, 85, 116, 293, 296, 478, 482], "getenvb": [66, 116, 293, 474], "get_exec_path": [66, 116, 293], "getegid": [66, 116, 293, 482], "geteuid": [66, 116, 293, 482], "getgid": [66, 116, 293, 482], "getgrouplist": [66, 116, 293, 475, 482], "getgroup": [66, 116, 293, 482], "getlogin": [66, 116, 228, 293], "getpgid": [66, 116, 293, 464], "getpgrp": [66, 116, 214, 293], "getpid": [66, 98, 116, 125, 283, 293, 482], "getppid": [66, 116, 283, 293, 482], "getprior": [66, 116, 293, 475], "prio_process": [66, 116, 293], "prio_pgrp": [66, 116, 293], "prio_us": [66, 116, 293], "getresuid": [66, 116, 293, 468, 482], "getresgid": [66, 116, 293, 468, 482], "getuid": [66, 116, 293, 482], "initgroup": [66, 116, 293, 468], "putenv": [66, 116, 142, 293, 306, 481, 482], "setegid": [66, 116, 293], "seteuid": [66, 116, 293], "setgid": [66, 116, 293], "setgroup": [66, 116, 293, 348, 482], "setn": [66, 116, 293, 482], "setpgrp": [66, 116, 293], "setpgid": [66, 116, 293, 348], "setprior": [66, 116, 293, 475], "setregid": [66, 116, 293, 348], "setresgid": [66, 116, 293, 468], "setresuid": [66, 116, 293, 468], "setreuid": [66, 116, 293, 348], "getsid": [66, 116, 293, 465], "setsid": [66, 116, 293, 348, 482], "setuid": [66, 116, 293], "supports_bytes_environ": [66, 116, 293, 474], "umask": [66, 116, 183, 293, 296, 348, 361, 479, 482], "unsetenv": [66, 116, 142, 293, 467, 481, 482], "unshar": [66, 116, 293, 322, 482], "clone_fil": [66, 116, 293], "clone_f": [66, 116, 293], "clone_newcgroup": [66, 116, 293], "clone_newipc": [66, 116, 293], "clone_newnet": [66, 116, 293], "clone_newn": [66, 116, 293], "clone_newpid": [66, 116, 293], "clone_newtim": [66, 116, 293], "clone_newus": [66, 116, 293], "clone_newut": [66, 116, 293], "clone_sighand": [66, 116, 293], "clone_sysvsem": [66, 116, 293], "clone_thread": [66, 116, 293], "clone_vm": [66, 116, 293], "fdopen": [66, 116, 282, 293, 337, 427], "closerang": [66, 116, 293, 467, 482], "copy_file_rang": [66, 116, 293, 482], "device_encod": [66, 116, 293, 482], "dup": [66, 116, 139, 159, 293, 337, 482], "dup2": [66, 116, 213, 293, 333, 472, 477, 479, 482], "fchmod": [66, 116, 293, 467, 477], "fchown": [66, 116, 293, 467, 477], "fdatasync": [66, 116, 293, 477], "fpathconf": [66, 116, 293, 482], "fstat": [66, 116, 293, 294, 342, 463, 475, 477, 482], "fstatvf": [66, 116, 293, 463, 477], "fsync": [66, 116, 293, 477, 482], "ftruncat": [66, 82, 116, 293, 477, 482], "get_block": [66, 116, 293, 477, 482], "lockf": [66, 116, 142, 214, 271, 293, 390, 463, 467, 475, 482], "f_lock": [66, 116, 293, 482], "f_tlock": [66, 116, 293], "f_ulock": [66, 116, 293], "f_test": [66, 116, 293], "login_tti": [66, 116, 293, 482], "lseek": [66, 116, 293, 466, 475], "seek_set": [66, 116, 214, 258, 278, 293, 340, 466, 470], "seek_cur": [66, 116, 214, 258, 278, 293, 340, 466, 470], "seek_end": [66, 116, 214, 258, 278, 293, 340, 466, 470], "o_rdon": [66, 116, 224, 282, 283, 293], "o_wron": [66, 116, 293, 333], "o_rdwr": [66, 116, 293, 333], "o_append": [66, 116, 282, 293], "o_creat": [66, 116, 293], "o_excl": [66, 116, 293, 359], "o_trunc": [66, 116, 293], "o_dsync": [66, 116, 293], "o_rsync": [66, 116, 293], "o_sync": [66, 116, 293], "o_ndelay": [66, 103, 116, 214, 293], "o_nonblock": [66, 103, 116, 293, 475, 477, 482], "o_noctti": [66, 116, 293], "o_cloexec": [66, 116, 293, 475], "o_noinherit": [66, 116, 293], "o_short_liv": [66, 116, 293], "o_temporari": [66, 116, 293, 359], "o_random": [66, 116, 293], "o_sequenti": [66, 116, 293], "o_evton": [66, 116, 293, 471, 482], "o_fsync": [66, 116, 293, 471, 482], "o_symlink": [66, 116, 293, 471, 482], "o_nofollow_ani": [66, 116, 293, 471, 482], "o_async": [66, 116, 293], "o_direct": [66, 116, 293], "o_directori": [66, 116, 293], "o_nofollow": [66, 116, 293], "o_noatim": [66, 116, 293], "o_path": [66, 116, 293, 476, 482], "o_tmpfil": [66, 116, 293, 359, 476, 482], "o_shlock": [66, 116, 214, 293, 466, 482], "o_exlock": [66, 116, 214, 293, 466, 482], "openpti": [66, 116, 293, 309, 390, 482], "pipe": [66, 85, 99, 102, 103, 116, 124, 129, 130, 132, 136, 163, 189, 207, 211, 212, 214, 254, 258, 293, 328, 329, 332, 333, 342, 348, 350, 352, 361, 398, 454, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482], "pipe2": [66, 116, 293, 475], "posix_falloc": [66, 116, 293, 475, 477, 482], "posix_fadvis": [66, 116, 293, 475, 477, 482], "posix_fadv_norm": [66, 116, 293], "posix_fadv_sequenti": [66, 116, 293], "posix_fadv_random": [66, 116, 293], "posix_fadv_noreus": [66, 116, 293], "posix_fadv_willne": [66, 116, 293], "posix_fadv_dontne": [66, 116, 293], "pread": [66, 116, 293, 475, 477, 479, 482], "preadv": [66, 116, 293, 479, 482], "rwf_nowait": [66, 116, 293], "rwf_hipri": [66, 116, 293], "pwrite": [66, 116, 293, 475, 477, 479], "pwritev": [66, 116, 293, 479, 482], "rwf_dsync": [66, 116, 293], "rwf_sync": [66, 116, 293], "rwf_append": [66, 116, 293, 482], "sendfil": [66, 116, 125, 126, 129, 132, 256, 293, 332, 337, 341, 406, 475, 477, 479, 482], "set_block": [66, 116, 293, 477, 482], "sf_nodiskio": [66, 116, 293], "sf_mnowait": [66, 116, 293], "sf_sync": [66, 116, 293], "sf_nocach": [66, 116, 293, 482], "splice": [66, 116, 211, 293, 471, 482], "splice_f_mov": [66, 116, 293], "splice_f_nonblock": [66, 116, 293], "splice_f_mor": [66, 116, 293], "readv": [66, 116, 293, 475, 477, 479, 482], "tcgetpgrp": [66, 116, 293], "tcsetpgrp": [66, 116, 293], "ttynam": [66, 116, 293, 482], "writev": [66, 116, 293, 475, 477, 479, 482], "terminal_s": [66, 116, 293, 332], "get_inherit": [66, 116, 293, 337, 476], "set_inherit": [66, 116, 293, 328, 337, 476, 482], "get_handle_inherit": [66, 116, 293, 476], "set_handle_inherit": [66, 116, 293, 348, 476], "f_ok": [66, 116, 293, 332], "r_ok": [66, 116, 293], "w_ok": [66, 116, 293], "x_ok": [66, 116, 293, 332], "chdir": [66, 116, 142, 168, 293, 315, 332, 352, 450, 472, 474, 475, 481, 482], "chflag": [66, 116, 142, 293, 332, 342, 467, 475], "chroot": [66, 116, 293, 482], "fchdir": [66, 116, 293, 477], "getcwd": [66, 110, 116, 293, 294, 296, 361, 406, 450, 479, 482], "getcwdb": [66, 116, 293, 469, 480, 482], "lchflag": [66, 116, 293, 467], "lchown": [66, 116, 293, 464], "listdir": [66, 76, 91, 105, 116, 142, 199, 212, 219, 229, 244, 293, 296, 332, 342, 398, 464, 465, 468, 469, 475, 479, 482], "makedir": [66, 82, 116, 293, 296, 477, 479, 482], "mkfifo": [66, 116, 293, 475, 477, 482], "mknod": [66, 116, 293, 464, 475, 477, 482], "makedev": [66, 116, 293, 464, 482], "pathconf": [66, 116, 293, 475], "pathconf_nam": [66, 116, 293], "removedir": [66, 82, 116, 293], "direntri": [66, 116, 293, 477, 478, 482], "inod": [66, 116, 269, 293, 342, 482], "stat_result": [66, 116, 293, 296, 464, 477, 480, 482], "st_atime_n": [66, 116, 293], "st_mtime_n": [66, 116, 293], "st_ctime_n": [66, 116, 293], "st_block": [66, 116, 293, 482], "st_blksize": [66, 116, 293], "st_rdev": [66, 116, 293], "st_flag": [66, 116, 293, 466], "st_gen": [66, 116, 293, 466], "st_birthtim": [66, 116, 293, 466], "st_fstype": [66, 116, 293, 479, 482], "st_rsize": [66, 116, 293], "st_creator": [66, 116, 293], "st_type": [66, 116, 293], "st_file_attribut": [66, 116, 293, 342, 477, 482], "st_reparse_tag": [66, 116, 293, 342, 480], "statvf": [66, 116, 293, 463, 467, 475, 482], "supports_dir_fd": [66, 116, 293, 475], "supports_effective_id": [66, 116, 293, 475], "supports_fd": [66, 116, 293, 475], "supports_follow_symlink": [66, 116, 293, 332], "utim": [66, 116, 142, 293, 332, 475, 482], "fwalk": [66, 116, 142, 293, 475, 479, 482], "memfd_creat": [66, 116, 214, 293, 480, 482], "mfd_cloexec": [66, 116, 293], "mfd_allow_s": [66, 116, 293], "mfd_hugetlb": [66, 116, 293], "mfd_huge_shift": [66, 116, 293], "mfd_huge_mask": [66, 116, 293], "mfd_huge_64kb": [66, 116, 293], "mfd_huge_512kb": [66, 116, 293], "mfd_huge_1mb": [66, 116, 293], "mfd_huge_2mb": [66, 116, 293], "mfd_huge_8mb": [66, 116, 293], "mfd_huge_16mb": [66, 116, 293], "mfd_huge_32mb": [66, 116, 293], "mfd_huge_256mb": [66, 116, 293], "mfd_huge_512mb": [66, 116, 293], "mfd_huge_1gb": [66, 116, 293], "mfd_huge_2gb": [66, 116, 293], "mfd_huge_16gb": [66, 116, 293], "eventfd": [66, 116, 293, 471, 482], "eventfd_read": [66, 116, 293], "eventfd_writ": [66, 116, 293], "efd_cloexec": [66, 116, 293, 482], "efd_nonblock": [66, 116, 293, 482], "efd_semaphor": [66, 116, 293, 482], "getxattr": [66, 116, 142, 293, 475], "listxattr": [66, 116, 142, 293, 475], "removexattr": [66, 116, 142, 293, 475], "setxattr": [66, 116, 142, 293, 475, 482], "xattr_size_max": [66, 116, 293], "xattr_creat": [66, 116, 293], "xattr_replac": [66, 116, 293], "add_dll_directori": [66, 116, 142, 293, 480, 482], "execl": [66, 116, 292, 293], "execlp": [66, 116, 293], "execv": [66, 116, 257, 292, 293, 306, 475, 482], "execvp": [66, 116, 293, 348], "_exit": [66, 116, 140, 212, 213, 293], "ex_ok": [66, 116, 293], "ex_usag": [66, 116, 293], "ex_dataerr": [66, 116, 293], "ex_noinput": [66, 116, 293], "ex_nous": [66, 116, 293], "ex_nohost": [66, 116, 293], "ex_unavail": [66, 116, 293], "ex_softwar": [66, 116, 293], "ex_oserr": [66, 116, 293], "ex_osfil": [66, 116, 293], "ex_cantcreat": [66, 116, 293], "ex_ioerr": [66, 116, 293], "ex_tempfail": [66, 116, 293], "ex_protocol": [66, 116, 293], "ex_noperm": [66, 116, 293], "ex_config": [66, 116, 293], "ex_notfound": [66, 116, 293], "forkpti": [66, 116, 142, 293], "killpg": [66, 116, 142, 293, 464, 482], "nice": [66, 88, 103, 116, 118, 140, 144, 151, 168, 175, 192, 224, 235, 270, 293, 322, 335, 338, 343, 344, 389, 402, 427, 461, 474, 475], "pidfd_open": [66, 116, 293, 473, 481, 482], "pidfd_nonblock": [66, 116, 293, 473, 482], "plock": [66, 116, 293], "posix_spawn": [66, 116, 142, 163, 293, 480, 482], "posix_spawn_open": [66, 116, 293], "posix_spawn_clos": [66, 116, 293], "posix_spawn_dup2": [66, 116, 293], "posix_spawnp": [66, 116, 293, 482], "spawnl": [66, 116, 293], "spawnlp": [66, 116, 293, 348], "spawnv": [66, 116, 293, 482], "spawnvp": [66, 116, 293, 348], "p_nowait": [66, 116, 293, 348], "p_nowaito": [66, 116, 293], "p_wait": [66, 116, 293, 348], "p_detach": [66, 116, 293], "p_overlay": [66, 116, 293], "startfil": [66, 116, 142, 293, 482], "waitid": [66, 116, 293, 475, 477, 482], "p_pid": [66, 116, 293], "p_pgid": [66, 116, 293], "p_all": [66, 116, 293], "p_pidfd": [66, 116, 293, 481, 482], "wexit": [66, 116, 293], "wstop": [66, 116, 293], "wnowait": [66, 116, 293], "cld_exit": [66, 116, 293], "cld_kill": [66, 116, 293, 481, 482], "cld_dump": [66, 116, 293], "cld_trap": [66, 116, 293], "cld_stop": [66, 116, 293, 481, 482], "cld_continu": [66, 116, 293], "waitpid": [66, 116, 131, 257, 293, 309, 466, 476, 477, 482], "wait3": [66, 116, 293, 466, 477, 482], "wait4": [66, 116, 293, 466, 477], "waitstatus_to_exitcod": [66, 116, 293, 309, 481, 482], "wnohang": [66, 116, 293], "wcontinu": [66, 116, 293], "wuntrac": [66, 116, 293], "wcoredump": [66, 116, 293], "wifcontinu": [66, 116, 293], "wifstop": [66, 116, 293], "wifsign": [66, 116, 293], "wifexit": [66, 116, 293], "wexitstatus": [66, 116, 293], "wstopsig": [66, 116, 293], "wtermsig": [66, 116, 293], "sched_oth": [66, 116, 293], "sched_batch": [66, 116, 293], "sched_idl": [66, 116, 293], "sched_sporad": [66, 116, 293], "sched_fifo": [66, 116, 293], "sched_rr": [66, 116, 293], "sched_reset_on_fork": [66, 116, 293], "sched_param": [66, 116, 293], "sched_prior": [66, 116, 293], "sched_get_priority_min": [66, 116, 293, 475], "sched_get_priority_max": [66, 116, 293, 475], "sched_setschedul": [66, 116, 293, 475], "sched_getschedul": [66, 116, 293, 475], "sched_setparam": [66, 116, 293, 475], "sched_getparam": [66, 116, 293, 475], "sched_rr_get_interv": [66, 116, 293, 475], "sched_yield": [66, 116, 293, 475, 482], "sched_setaffin": [66, 116, 293, 475, 482], "sched_getaffin": [66, 116, 283, 293, 475, 482], "confstr": [66, 116, 293, 482], "confstr_nam": [66, 116, 293], "cpu_count": [66, 116, 162, 163, 165, 283, 293, 471, 476, 482], "getloadavg": [66, 116, 293], "sysconf": [66, 116, 293, 337, 482], "sysconf_nam": [66, 116, 293, 482], "curdir": [66, 116, 188, 215, 293, 294, 332, 368], "pardir": [66, 116, 215, 293], "altsep": [66, 116, 230, 246, 293, 296, 472], "extsep": [66, 116, 293], "defpath": [66, 116, 293, 332, 482], "linesep": [66, 116, 193, 200, 201, 202, 207, 224, 258, 285, 293, 335, 348, 475, 482], "devnul": [66, 116, 125, 136, 163, 283, 293, 333, 348, 475, 482], "rtld_lazi": [66, 116, 293, 352, 475], "rtld_now": [66, 116, 175, 293, 475], "rtld_global": [66, 116, 175, 293, 352, 475, 480, 482], "rtld_local": [66, 116, 175, 293, 475, 480, 482], "rtld_nodelet": [66, 116, 293, 475], "rtld_noload": [66, 116, 293, 475], "rtld_deepbind": [66, 116, 293, 475], "getrandom": [66, 116, 293, 477, 478, 482], "urandom": [66, 116, 125, 234, 283, 293, 318, 341, 465, 468, 472, 473, 476, 477, 478, 482], "grnd_nonblock": [66, 116, 293, 482], "grnd_random": [66, 116, 293], "default_buffer_s": [66, 116, 224, 258, 348, 482], "text_encod": [66, 116, 258, 482], "unsupportedoper": [66, 116, 258, 482], "iobas": [66, 116, 187, 189, 212, 214, 258, 377, 454, 480, 482], "seekabl": [66, 115, 116, 149, 258, 400, 421, 467, 482], "rawiobas": [66, 116, 224, 258, 467, 475, 477, 482], "readal": [66, 116, 258, 471, 476, 482], "bufferediobas": [66, 116, 149, 224, 233, 241, 244, 258, 270, 299, 338, 359, 368, 406, 467, 468, 474, 475, 477, 478, 482], "read1": [66, 116, 149, 233, 258, 482], "readinto1": [66, 116, 258, 477], "bytesio": [66, 85, 116, 195, 206, 233, 234, 258, 271, 299, 344, 359, 377, 420, 424, 467, 469, 474, 477, 482], "getbuff": [66, 116, 258, 474], "getvalu": [66, 76, 77, 83, 116, 151, 168, 195, 233, 258, 262, 273, 299, 308, 361, 388, 415, 420, 474, 477], "bufferedread": [66, 116, 224, 258, 357, 467, 468, 474, 482], "bufferedwrit": [66, 116, 224, 258, 467, 474, 482], "bufferedrandom": [66, 116, 224, 258, 467], "bufferedrwpair": [66, 116, 258, 467, 482], "textiobas": [66, 77, 116, 224, 241, 258, 359, 368, 427, 467, 468, 469, 482], "line_buff": [66, 116, 258], "write_through": [66, 116, 224, 258, 475, 482], "reconfigur": [66, 88, 116, 224, 258, 479, 482], "stringio": [66, 77, 83, 85, 116, 168, 195, 206, 258, 262, 308, 344, 352, 361, 388, 406, 410, 467, 468, 469, 474, 476, 477, 482], "incrementalnewlinedecod": [66, 116, 258, 482], "reentranc": [66, 116, 168, 316, 482], "asctim": [66, 98, 99, 116, 267, 268, 309, 365, 462, 468, 474], "pthread_getcpuclockid": [66, 116, 365, 479, 482], "clock_getr": [66, 116, 365, 475], "clock_gettim": [66, 116, 365, 475, 481, 482], "clock_gettime_n": [66, 116, 365, 479, 482], "clock_settim": [66, 116, 365, 475], "clock_settime_n": [66, 116, 365, 479, 482], "get_clock_info": [66, 116, 365, 475, 482], "gmtime": [66, 98, 99, 116, 150, 182, 208, 267, 271, 304, 365, 463, 474, 475, 482], "localtim": [66, 85, 98, 116, 182, 193, 202, 208, 247, 267, 285, 365, 462, 463, 475, 482], "mktime": [66, 116, 182, 208, 304, 365, 474, 482], "monoton": [66, 88, 116, 125, 130, 133, 168, 189, 325, 343, 365, 439, 464, 472, 475, 477, 482], "monotonic_n": [66, 116, 365, 479, 482], "perf_count": [66, 116, 308, 365, 366, 475, 480, 482], "perf_counter_n": [66, 116, 365, 479, 482], "process_tim": [66, 116, 308, 365, 366, 475, 480, 482], "process_time_n": [66, 116, 365, 479, 482], "sleep": [66, 82, 93, 99, 116, 122, 123, 124, 125, 128, 132, 133, 134, 136, 137, 165, 166, 176, 257, 283, 322, 325, 333, 340, 348, 361, 365, 467, 471, 472, 475, 477, 478, 479, 480, 482], "struct_tim": [66, 116, 182, 247, 271, 365, 478], "time_n": [66, 116, 365, 479, 482], "thread_tim": [66, 116, 365, 479, 481, 482], "thread_time_n": [66, 116, 365, 479, 482], "tzset": [66, 116, 365, 482], "clock": [66, 83, 116, 125, 130, 182, 308, 322, 383, 467, 472, 475, 477, 478, 479, 480, 482], "clock_boottim": [66, 116, 365, 479, 482], "clock_highr": [66, 116, 365], "clock_monoton": [66, 116, 365, 472, 479, 482], "clock_monotonic_raw": [66, 116, 365], "clock_process_cputime_id": [66, 116, 365], "clock_prof": [66, 116, 365, 479, 482], "clock_tai": [66, 116, 365, 482], "clock_thread_cputime_id": [66, 116, 365, 481, 482], "clock_uptim": [66, 116, 365, 479, 482], "clock_uptime_raw": [66, 116, 365, 480, 482], "clock_realtim": [66, 116, 365, 472, 482], "altzon": [66, 116, 182, 365], "daylight": [66, 116, 182, 208, 365, 424, 481], "add_argu": [66, 87, 99, 116, 159, 189, 199, 227, 309, 398, 450, 468, 474, 482], "argumentpars": [66, 87, 99, 116, 159, 189, 199, 227, 309, 398, 450, 468, 473, 474, 477, 479, 482], "prog": [66, 87, 99, 116, 292, 319, 398, 450, 474], "epilog": [66, 116, 204, 292, 466, 474], "formatter_class": [66, 99, 116], "rawdescriptionhelpformatt": [66, 116, 118], "rawtexthelpformatt": [66, 116, 118], "argumentdefaultshelpformatt": [66, 99, 116, 118, 482], "metavartypehelpformatt": [66, 116, 118], "prefix_char": [66, 116], "fromfile_prefix_char": [66, 116, 473, 482], "argument_default": [66, 116], "allow_abbrev": [66, 116, 477, 482], "conflict_handl": [66, 116, 292], "add_help": [66, 116], "exit_on_error": [66, 116, 482], "metavar": [66, 99, 116, 199, 292, 350, 398, 468, 474, 482], "parse_arg": [66, 87, 99, 116, 159, 189, 199, 227, 292, 309, 398, 450, 464, 468, 474], "abbrevi": [66, 105, 116, 150, 176, 182, 185, 266, 292, 297, 308, 348, 365, 380, 412, 454, 476, 477, 478, 482], "add_subpars": [66, 99, 116, 118, 474, 479, 482], "filetyp": [66, 116, 188, 336, 468, 476, 482], "add_argument_group": [66, 116, 118, 482], "add_mutually_exclusive_group": [66, 87, 116, 118, 482], "set_default": [66, 116, 118, 292, 350, 482], "get_default": [66, 116, 118], "print_usag": [66, 116, 118, 292, 350], "print_help": [66, 116, 118, 292], "format_usag": [66, 116, 118, 482], "format_help": [66, 116, 118], "parse_known_arg": [66, 116, 118, 482], "convert_arg_line_to_arg": [66, 116, 118], "intermix": [66, 116, 227, 479, 482], "parse_intermixed_arg": [66, 116, 118, 479, 482], "parse_known_intermixed_arg": [66, 116, 118], "upgrad": [66, 106, 108, 109, 116, 135, 209, 246, 398, 452, 455, 460, 463, 464, 468, 472, 474, 476, 478, 479, 480, 482], "getopt": [66, 83, 87, 116, 189, 254, 292, 464, 468, 482], "gnu_getopt": [66, 116, 227, 464], "getopterror": [66, 116, 227], "logger": [66, 116, 124, 168, 268, 269, 283, 332, 355, 385, 387, 464, 468, 470, 474, 475, 476, 477, 479, 480, 481, 482], "setlevel": [66, 98, 99, 116, 124, 267, 283, 464, 482], "isenabledfor": [66, 98, 99, 116, 267, 468, 482], "geteffectivelevel": [66, 116, 267], "getchild": [66, 116, 267, 468], "getchildren": [66, 116, 267, 468, 474, 480, 481, 482], "addfilt": [66, 98, 99, 116, 267], "removefilt": [66, 98, 116, 267], "addhandl": [66, 98, 99, 116, 267, 470], "removehandl": [66, 98, 99, 116, 186, 267, 387, 468], "findcal": [66, 116, 267], "makerecord": [66, 99, 116, 267], "hashandl": [66, 116, 267], "createlock": [66, 116, 267, 269], "setformatt": [66, 98, 99, 116, 267, 269], "handleerror": [66, 98, 116, 267, 269], "formattim": [66, 116, 267], "formatexcept": [66, 99, 116, 267], "formatstack": [66, 116, 267], "bufferingformatt": [66, 98, 116, 267], "formathead": [66, 116, 267], "formatfoot": [66, 116, 267], "logrecord": [66, 98, 116, 269, 387, 464, 476, 482], "getmessag": [66, 99, 116, 267, 273, 413], "loggeradapt": [66, 116, 468, 482], "getlogg": [66, 98, 99, 116, 124, 267, 387, 464, 468, 470, 481, 482], "getloggerclass": [66, 116, 267], "getlogrecordfactori": [66, 99, 116, 267], "addlevelnam": [66, 116, 267], "getlevelnamesmap": [66, 116, 267, 472, 482], "getlevelnam": [66, 99, 116, 267], "gethandlerbynam": [66, 116, 267, 268, 482], "gethandlernam": [66, 116, 267, 482], "makelogrecord": [66, 99, 116, 267, 269], "basicconfig": [66, 91, 98, 99, 116, 124, 168, 267, 465, 474, 475, 480, 482], "setloggerclass": [66, 99, 116, 267], "setlogrecordfactori": [66, 99, 116, 267], "lastresort": [66, 98, 116, 267, 474], "capturewarn": [66, 116, 267, 399], "dictconfig": [66, 98, 116, 268, 269, 468, 474, 482], "fileconfig": [66, 98, 99, 116, 268, 468, 476, 479, 482], "listen": [66, 82, 103, 116, 125, 139, 163, 221, 244, 268, 269, 288, 313, 329, 335, 337, 338, 341, 343, 350, 361, 383, 406, 418, 464, 467, 468, 476, 477, 482], "stoplisten": [66, 99, 116, 268], "schema": [66, 91, 116, 281, 340, 350, 468, 482], "queuehandl": [66, 98, 116, 482], "queuelisten": [66, 116, 477, 482], "streamhandl": [66, 98, 99, 116, 267, 268, 474, 479, 482], "setstream": [66, 116, 269, 281, 350, 479, 482], "filehandl": [66, 98, 99, 106, 116, 256, 267, 268, 467, 482], "nullhandl": [66, 98, 116, 470], "watchedfilehandl": [66, 98, 116, 467, 478], "reopenifneed": [66, 116, 269, 478], "baserotatinghandl": [66, 98, 116, 465], "namer": [66, 116, 269, 482], "rotation_filenam": [66, 116, 269], "rotatingfilehandl": [66, 98, 99, 116, 268, 465, 467, 468], "dorollov": [66, 116, 269], "timedrotatingfilehandl": [66, 98, 116, 465, 467, 476, 482], "getfilestodelet": [66, 116, 269], "sockethandl": [66, 98, 99, 116, 268, 472, 476], "makesocket": [66, 116, 269], "makepickl": [66, 99, 116, 269], "createsocket": [66, 116, 269, 472, 482], "datagramhandl": [66, 98, 116, 268, 476], "sysloghandl": [66, 98, 116, 268, 355, 468, 472, 475, 482], "encodeprior": [66, 116, 269], "mapprior": [66, 116, 269], "nteventloghandl": [66, 98, 116, 268], "geteventcategori": [66, 116, 269], "geteventtyp": [66, 116, 269], "getmessageid": [66, 116, 269], "smtphandler": [66, 98, 99, 116, 268, 482], "getsubject": [66, 116, 269], "memoryhandl": [66, 98, 99, 116, 268, 482], "bufferinghandl": [66, 99, 116, 269], "shouldflush": [66, 116, 269], "settarget": [66, 116, 269, 482], "httphandler": [66, 98, 99, 106, 116, 256, 268, 477, 482], "maplogrecord": [66, 116, 269], "enqueu": [66, 99, 116, 165, 269, 283, 482], "dequeu": [66, 99, 116, 269, 482], "enqueue_sentinel": [66, 116, 269], "getpass": [66, 116, 172, 247, 254, 282, 293, 305, 358, 360, 467, 482], "getpasswarn": [66, 116, 228], "getus": [66, 116, 228, 247, 293, 305], "baudrat": [66, 116, 176], "beep": [66, 116, 176, 403, 405, 478], "can_change_color": [66, 90, 116, 176], "cbreak": [66, 90, 116, 176, 382], "color_cont": [66, 116, 176, 471], "color_pair": [66, 90, 116, 176, 482], "curs_set": [66, 90, 116, 176], "def_prog_mod": [66, 116, 176], "def_shell_mod": [66, 116, 176], "delay_output": [66, 116, 176], "doupdat": [66, 90, 116, 176, 178], "echo": [66, 87, 90, 112, 116, 125, 129, 136, 141, 169, 176, 228, 246, 262, 282, 293, 299, 329, 331, 337, 348, 350, 360, 387, 429, 449, 467, 482], "endwin": [66, 90, 116, 176], "erasechar": [66, 116, 176], "flash": [66, 90, 116, 176, 482], "flushinp": [66, 116, 176], "getmous": [66, 116, 176], "getsyx": [66, 116, 176], "getwin": [66, 116, 176], "has_color": [66, 90, 116, 176], "has_extended_color_support": [66, 116, 176, 471, 482], "has_ic": [66, 116, 176], "has_il": [66, 116, 176], "has_key": [66, 110, 116, 176, 461, 462, 463, 464, 469, 482], "halfdelay": [66, 90, 116, 176], "init_color": [66, 116, 176, 471], "init_pair": [66, 90, 116, 176, 471], "initscr": [66, 90, 116, 176], "is_term_res": [66, 116, 176], "isendwin": [66, 116, 176], "keynam": [66, 116, 176], "killchar": [66, 116, 176], "longnam": [66, 116, 176, 357, 482], "mouseinterv": [66, 116, 176], "mousemask": [66, 116, 176], "napm": [66, 116, 176], "newpad": [66, 90, 116, 176], "newwin": [66, 90, 116, 176], "nl": [66, 116, 176, 177, 239, 264, 337, 376, 377, 393, 425, 434, 467, 482], "nocbreak": [66, 90, 116, 176], "noecho": [66, 90, 116, 176], "nonl": [66, 116, 176], "noqiflush": [66, 116, 176], "noraw": [66, 116, 176], "pair_cont": [66, 116, 176, 471], "pair_numb": [66, 116, 176], "putp": [66, 116, 176], "qiflush": [66, 116, 176], "reset_prog_mod": [66, 116, 176], "reset_shell_mod": [66, 116, 176], "resetti": [66, 116, 176], "resize_term": [66, 116, 176], "resizeterm": [66, 116, 176], "savetti": [66, 116, 176], "get_escdelay": [66, 116, 176, 481, 482], "set_escdelay": [66, 116, 176, 481, 482], "get_tabs": [66, 116, 176, 481, 482], "set_tabs": [66, 116, 176, 481, 482], "setsyx": [66, 116, 176], "setupterm": [66, 116, 176], "start_color": [66, 90, 116, 176], "termattr": [66, 116, 176], "termnam": [66, 116, 176], "tigetflag": [66, 116, 176], "tigetnum": [66, 116, 176], "tigetstr": [66, 116, 176], "tparm": [66, 116, 176], "typeahead": [66, 116, 176], "unctrl": [66, 116, 176, 177], "ungetch": [66, 116, 176, 282, 403], "update_lines_col": [66, 116, 176, 477, 482], "unget_wch": [66, 116, 176, 475, 482], "ungetmous": [66, 116, 176, 482], "use_env": [66, 116, 176], "use_default_color": [66, 116, 176, 465], "addch": [66, 88, 90, 116, 176, 482], "addnstr": [66, 116, 176], "addstr": [66, 90, 116, 176, 482], "attroff": [66, 116, 176], "attron": [66, 116, 176], "attrset": [66, 116, 176], "bkgd": [66, 116, 176], "bkgdset": [66, 116, 176], "border": [66, 90, 116, 176, 368, 375, 393], "box": [66, 88, 90, 99, 116, 176, 246, 271, 368, 372, 374, 375, 429, 478, 479, 480, 482], "chgat": [66, 116, 176, 467], "clearok": [66, 116, 176], "clrtobot": [66, 116, 176], "clrtoeol": [66, 116, 176], "cursyncup": [66, 116, 176], "delch": [66, 116, 176], "deleteln": [66, 116, 176], "derwin": [66, 116, 176], "echochar": [66, 116, 176], "enclos": [66, 71, 85, 88, 102, 116, 159, 176, 224, 241, 247, 255, 262, 288, 297, 319, 331, 345, 361, 364, 366, 385, 387, 409, 426, 428, 429, 433, 434, 435, 439, 462, 463, 466, 471, 472, 474, 480, 482], "eras": [66, 83, 90, 99, 116, 176, 344, 358], "getbegyx": [66, 116, 176], "getbkgd": [66, 116, 176], "getch": [66, 84, 90, 116, 176, 282, 403], "get_wch": [66, 116, 176, 475], "getkey": [66, 90, 116, 176, 482], "getmaxyx": [66, 116, 176], "getparyx": [66, 116, 176], "getstr": [66, 90, 116, 176, 281, 350, 467, 482], "getyx": [66, 116, 176], "hline": [66, 116, 176], "idcok": [66, 116, 176], "idlok": [66, 116, 176], "immedok": [66, 116, 176], "inch": [66, 116, 176, 368], "insch": [66, 116, 176], "insdelln": [66, 116, 176], "insertln": [66, 116, 176], "insnstr": [66, 116, 176], "insstr": [66, 116, 176], "instr": [66, 116, 176, 190, 361, 476, 482], "is_linetouch": [66, 116, 176], "is_wintouch": [66, 116, 176], "keypad": [66, 90, 116, 176], "leaveok": [66, 90, 116, 176], "mvderwin": [66, 116, 176], "mvwin": [66, 116, 176], "nodelay": [66, 90, 116, 176], "notimeout": [66, 116, 176], "noutrefresh": [66, 90, 116, 176], "overlay": [66, 116, 176], "putwin": [66, 116, 176], "redrawln": [66, 116, 176], "redrawwin": [66, 116, 176], "refresh": [66, 90, 116, 159, 176, 288, 368, 375, 466, 481, 482], "scroll": [66, 90, 116, 155, 176, 246, 254, 367, 368, 375, 482], "scrollok": [66, 116, 176], "setscrreg": [66, 116, 176], "standend": [66, 116, 176], "standout": [66, 116, 176], "subpad": [66, 116, 176], "subwin": [66, 116, 176], "syncdown": [66, 116, 176], "syncok": [66, 116, 176], "syncup": [66, 116, 176], "timeout": [66, 99, 103, 106, 113, 116, 123, 125, 128, 133, 134, 136, 137, 139, 163, 165, 168, 176, 184, 222, 241, 247, 256, 268, 269, 283, 288, 305, 316, 328, 329, 333, 335, 338, 340, 341, 348, 358, 361, 364, 365, 385, 394, 455, 464, 467, 468, 471, 472, 474, 475, 477, 480, 481, 482], "touchlin": [66, 116, 176], "touchwin": [66, 116, 176], "untouchwin": [66, 116, 176], "vline": [66, 116, 176], "err": [66, 90, 116, 176, 212, 227, 269, 314, 348, 387, 418, 425, 442, 475], "ncurses_vers": [66, 116, 176, 480, 482], "textpad": [66, 90, 116, 254, 467, 482], "rectangl": [66, 71, 90, 116, 176, 180], "textbox": [66, 90, 116, 467, 482], "do_command": [66, 116, 176], "gather": [66, 90, 95, 116, 118, 123, 133, 136, 138, 176, 210, 226, 293, 308, 337, 379, 387, 455, 471, 472, 477, 479, 480, 482], "stripspac": [66, 116, 176], "isblank": [66, 116, 177, 482], "iscntrl": [66, 116, 177, 482], "isgraph": [66, 116, 177], "ispunct": [66, 116, 177, 482], "isxdigit": [66, 116, 177], "isctrl": [66, 116, 177], "ismeta": [66, 116, 177], "alt": [66, 116, 176, 177, 239, 246, 375, 461, 482], "controlnam": [66, 116, 177], "panel": [66, 81, 116, 176, 254, 405, 462, 482], "bottom_panel": [66, 116, 178], "new_panel": [66, 116, 178], "top_panel": [66, 116, 178], "update_panel": [66, 116, 178], "bottom": [66, 71, 88, 93, 97, 116, 118, 175, 176, 178, 190, 258, 267, 293, 296, 297, 341, 368, 375, 383, 385, 388, 389, 427, 434, 460, 461, 463, 464, 471, 482], "hide": [66, 90, 95, 105, 116, 174, 178, 192, 193, 215, 246, 258, 292, 348, 361, 366, 367, 375, 383, 385, 399, 426, 460, 464, 468, 474, 481, 482], "set_userptr": [66, 116, 178], "userptr": [66, 116, 178, 482], "node": [66, 116, 231, 234, 239, 259, 264, 273, 293, 294, 296, 303, 337, 341, 352, 375, 376, 385, 397, 410, 411, 412, 414, 451, 455, 461, 464, 466, 467, 468, 471, 472, 474, 478, 479, 480, 481, 482], "python_build": [66, 116, 303, 482], "python_compil": [66, 116, 303], "python_branch": [66, 116, 303, 482], "python_implement": [66, 116, 303], "python_revis": [66, 116, 303, 482], "python_vers": [66, 116, 303], "python_version_tupl": [66, 116, 303], "system_alia": [66, 116, 303], "java_v": [66, 116, 303], "win32_ver": [66, 116, 303, 482], "win32_edit": [66, 116, 303, 482], "win32_is_iot": [66, 116, 303, 482], "mac_ver": [66, 116, 303, 482], "libc_ver": [66, 116, 303, 482], "freedesktop_os_releas": [66, 116, 303, 471, 482], "errorcod": [66, 116, 211, 273, 314], "eperm": [66, 116, 211, 212, 475, 482], "enoent": [66, 116, 211, 212, 328, 475, 482], "esrch": [66, 116, 211, 212], "eio": [66, 116, 211], "enxio": [66, 116, 211], "e2big": [66, 116, 211], "enoexec": [66, 116, 211], "ebadf": [66, 116, 211, 328, 478, 481, 482], "echild": [66, 116, 211, 212], "eagain": [66, 116, 211, 212, 214, 293], "enomem": [66, 116, 211, 482], "eacc": [66, 116, 211, 212, 214, 250, 475, 482], "efault": [66, 116, 211], "enotblk": [66, 116, 211], "ebusi": [66, 116, 211], "eexist": [66, 116, 211, 212, 293, 482], "exdev": [66, 116, 211, 293], "enodev": [66, 116, 211], "enotdir": [66, 116, 211, 212], "eisdir": [66, 116, 211, 212], "einval": [66, 116, 211, 293, 482], "enfil": [66, 116, 211], "emfil": [66, 116, 211, 482], "enotti": [66, 116, 211, 482], "etxtbsi": [66, 116, 211], "efbig": [66, 116, 211], "enospc": [66, 116, 211], "espip": [66, 116, 211], "erof": [66, 116, 211], "emlink": [66, 116, 211], "epip": [66, 116, 211, 212, 333], "erang": [66, 116, 211], "edeadlk": [66, 116, 211], "enametoolong": [66, 116, 211], "enolck": [66, 116, 211], "enosi": [66, 116, 211, 482], "enotempti": [66, 116, 211], "eloop": [66, 116, 211], "ewouldblock": [66, 116, 211, 212], "enomsg": [66, 116, 211], "eidrm": [66, 116, 211], "echrng": [66, 116, 211], "el2nsync": [66, 116, 211], "el3hlt": [66, 116, 211], "el3rst": [66, 116, 211], "elnrng": [66, 116, 211], "eunatch": [66, 116, 211], "enocsi": [66, 116, 211], "el2hlt": [66, 116, 211], "ebad": [66, 116, 211], "ebadr": [66, 116, 211], "exful": [66, 116, 211], "enoano": [66, 116, 211], "ebadrqc": [66, 116, 211], "ebadslt": [66, 116, 211], "edeadlock": [66, 116, 211], "ebfont": [66, 116, 211], "enostr": [66, 116, 211], "enodata": [66, 116, 211, 293], "etim": [66, 116, 211], "enosr": [66, 116, 211], "enonet": [66, 116, 211], "enopkg": [66, 116, 211], "eremot": [66, 116, 211], "enolink": [66, 116, 211], "eadv": [66, 116, 211], "esrmnt": [66, 116, 211], "ecomm": [66, 116, 211], "eproto": [66, 116, 211], "emultihop": [66, 116, 211], "edotdot": [66, 116, 211], "ebadmsg": [66, 116, 211], "eoverflow": [66, 116, 211], "enotuniq": [66, 116, 211], "ebadfd": [66, 116, 211], "eremchg": [66, 116, 211], "elibacc": [66, 116, 211], "elibbad": [66, 116, 211], "elibscn": [66, 116, 211], "elibmax": [66, 116, 211], "elibexec": [66, 116, 211], "eilseq": [66, 116, 211], "erestart": [66, 116, 211], "estrpip": [66, 116, 211], "euser": [66, 116, 211], "enotsock": [66, 116, 211], "edestaddrreq": [66, 116, 211], "emsgsiz": [66, 116, 211], "eprototyp": [66, 116, 211], "enoprotoopt": [66, 116, 211], "eprotonosupport": [66, 116, 211], "esocktnosupport": [66, 116, 211], "eopnotsupp": [66, 116, 211], "epfnosupport": [66, 116, 211], "eafnosupport": [66, 116, 211], "eaddrinus": [66, 116, 211], "eaddrnotavail": [66, 116, 211], "enetdown": [66, 116, 211], "enetunreach": [66, 116, 211, 482], "enetreset": [66, 116, 211], "econnabort": [66, 116, 211, 212], "econnreset": [66, 116, 211, 212, 482], "enobuf": [66, 116, 132, 211, 482], "eisconn": [66, 82, 116, 211], "enotconn": [66, 116, 211, 476], "eshutdown": [66, 116, 211, 212], "etoomanyref": [66, 116, 211], "etimedout": [66, 116, 211, 212, 467], "econnrefus": [66, 116, 211, 212], "ehostdown": [66, 116, 211], "ehostunreach": [66, 116, 211], "ealreadi": [66, 116, 211, 212], "einprogress": [66, 82, 116, 211, 212], "estal": [66, 116, 211], "euclean": [66, 116, 211], "enotnam": [66, 116, 211], "enavail": [66, 116, 211], "eisnam": [66, 116, 211], "eremoteio": [66, 116, 211], "edquot": [66, 116, 211], "eqful": [66, 116, 211, 482], "enotcap": [66, 116, 211, 212, 482], "foreign": [66, 101, 116, 166, 254, 332, 340], "surpris": [66, 82, 83, 86, 88, 99, 103, 116, 182, 185, 192, 224, 246, 267, 275, 283, 308, 343, 368, 424, 431, 462, 463, 466, 470, 477, 479], "cdll": [66, 116, 175, 466, 480, 482], "oledl": [66, 116, 175, 467], "windll": [66, 116, 175, 467], "pydll": [66, 116, 175], "_handl": [66, 116, 175], "_name": [66, 91, 116, 175, 180, 195, 204, 482], "libraryload": [66, 116, 175], "loadlibrari": [66, 116, 175], "_funcptr": [66, 116, 175], "restyp": [66, 116, 175, 466], "argtyp": [66, 116, 120, 175, 482], "errcheck": [66, 116, 175], "argumenterror": [66, 116, 118, 175, 482], "cfunctyp": [66, 116, 175, 482], "winfunctyp": [66, 116, 175, 482], "pyfunctyp": [66, 116, 175], "addressof": [66, 116, 142, 175], "byref": [66, 116, 175, 467], "create_string_buff": [66, 116, 142, 175, 466], "create_unicode_buff": [66, 116, 142, 175, 482], "dllcanunloadnow": [66, 116, 175], "dllgetclassobject": [66, 116, 175], "find_librari": [66, 116, 175, 478, 482], "find_msvcrt": [66, 116, 175], "formaterror": [66, 116, 175, 271, 285], "get_errno": [66, 116, 142, 175, 467], "get_last_error": [66, 116, 142, 175, 467], "memmov": [66, 116, 175, 467], "memset": [66, 116, 175, 482], "set_errno": [66, 116, 142, 175, 467], "set_last_error": [66, 116, 142, 175, 467], "string_at": [66, 116, 142, 175, 213, 475], "wstring_at": [66, 116, 142, 175], "_cdata": [66, 116, 175, 482], "from_buff": [66, 116, 175, 467, 482], "from_buffer_copi": [66, 116, 175, 467, 482], "from_address": [66, 116, 175], "from_param": [66, 116, 175], "in_dll": [66, 116, 175], "_b_base_": [66, 116, 175], "_b_needsfree_": [66, 116, 175], "_object": [66, 116, 175], "_simplecdata": [66, 116, 175], "c_byte": [66, 116, 175], "c_char": [66, 116, 175, 283], "c_char_p": [66, 116, 175, 466], "c_doubl": [66, 116, 175, 283, 466, 482], "c_longdoubl": [66, 116, 175, 482], "c_float": [66, 116, 175, 466], "c_int": [66, 116, 175, 283, 466, 482], "c_int8": [66, 116, 175], "c_int16": [66, 116, 175], "c_int32": [66, 116, 175], "c_int64": [66, 116, 175], "c_long": [66, 116, 175, 344], "c_longlong": [66, 116, 175], "c_short": [66, 116, 175, 283], "c_size_t": [66, 116, 175], "c_ssize_t": [66, 116, 175, 474], "c_time_t": [66, 116, 175, 482], "c_ubyt": [66, 116, 175], "c_uint": [66, 116, 175], "c_uint8": [66, 116, 175], "c_uint16": [66, 116, 175], "c_uint32": [66, 116, 175], "c_uint64": [66, 116, 175], "c_ulong": [66, 116, 175], "c_ulonglong": [66, 116, 175], "c_ushort": [66, 116, 175], "c_void_p": [66, 116, 175], "c_wchar": [66, 116, 175], "c_wchar_p": [66, 116, 175, 482], "c_bool": [66, 116, 175, 467], "hresult": [66, 116, 175], "py_object": [66, 116, 175, 466], "bigendianunion": [66, 116, 175, 482], "littleendianunion": [66, 116, 175, 482], "bigendianstructur": [66, 116, 175, 344, 482], "littleendianstructur": [66, 116, 175, 482], "_fields_": [66, 116, 175, 283, 344, 482], "_pack_": [66, 116, 175], "_anonymous_": [66, 116, 175, 482], "_length_": [66, 116, 175, 482], "_type_": [66, 116, 175], "_pointer": [66, 116, 175], "active_count": [66, 163, 246, 283, 364, 467, 471, 482], "current_thread": [66, 82, 163, 283, 338, 364, 471, 482], "excepthook": [66, 142, 152, 163, 315, 352, 361, 364, 449, 462, 471, 480, 481, 482], "__excepthook__": [66, 163, 315, 352, 364, 449, 471, 482], "get_id": [66, 113, 163, 264, 333, 351, 364, 365, 475], "get_native_id": [66, 113, 163, 364, 480, 482], "main_thread": [66, 163, 364, 476], "settrace_all_thread": [66, 163, 364, 473, 482], "gettrac": [66, 163, 315, 352, 364, 449, 467, 471, 482], "setprofile_all_thread": [66, 163, 364, 473, 482], "getprofil": [66, 163, 315, 352, 364, 449, 467, 471, 482], "stack_siz": [66, 113, 163, 364, 466, 482], "timeout_max": [66, 113, 163, 364], "setnam": [66, 163, 364, 471, 482], "native_id": [66, 163, 364, 480, 482], "is_al": [66, 163, 283, 364, 467, 481, 482], "daemon": [66, 98, 99, 163, 269, 283, 316, 335, 337, 338, 364, 365, 401, 464, 467, 471, 475, 479, 481, 482], "isdaemon": [66, 163, 364, 467, 471, 482], "setdaemon": [66, 163, 364, 467, 471, 482], "rlock": [66, 163, 168, 283, 467, 471, 474, 477, 482], "wait_for": [66, 123, 133, 136, 137, 138, 163, 283, 364, 472, 480, 481, 482], "notify_al": [66, 137, 163, 364, 471, 482], "semaphor": [66, 82, 95, 113, 123, 163, 211, 283, 293, 352, 361, 451, 467, 474, 475, 480, 481, 482], "boundedsemaphor": [66, 123, 163, 283, 364, 475, 480, 482], "is_set": [66, 137, 163, 364, 471, 482], "timer": [66, 90, 95, 163, 184, 211, 213, 283, 328, 333, 365, 366, 368, 375, 383, 450, 463, 464, 467, 472, 475, 477, 478, 479, 482], "barrier": [66, 123, 163, 283, 472, 474, 482], "n_wait": [66, 137, 163, 364], "brokenbarriererror": [66, 123, 137, 163, 364, 472, 474], "exchang": [66, 70, 103, 163, 175, 211, 234, 235, 278, 293, 341, 357, 364, 467, 468, 474, 475, 482], "synchron": [66, 113, 122, 163, 168, 177, 183, 185, 211, 250, 258, 278, 293, 330, 333, 338, 341, 361, 364, 368, 388, 397, 427, 451, 467, 472, 474, 477, 479, 482], "pool": [66, 71, 82, 123, 129, 163, 165, 222, 261, 284, 293, 318, 462, 464, 467, 468, 474, 475, 476, 478, 482], "worker": [66, 99, 133, 162, 163, 165, 231, 316, 364, 466, 467, 468, 477, 481, 482], "pid": [66, 95, 125, 131, 136, 142, 163, 166, 278, 283, 293, 299, 309, 322, 337, 348, 361, 466, 468, 481, 482], "authkey": [66, 163, 283, 284], "processerror": [66, 163, 283], "buffertooshort": [66, 163, 283], "authenticationerror": [66, 163, 283], "qsize": [66, 133, 163, 283, 316], "put_nowait": [66, 99, 133, 163, 269, 283, 316], "get_nowait": [66, 133, 163, 261, 283, 316], "join_thread": [66, 163, 186, 283, 361, 482], "cancel_join_thread": [66, 163, 283], "simplequeu": [66, 163, 269, 283, 344, 479, 481, 482], "joinablequeu": [66, 163, 283, 477, 482], "task_don": [66, 133, 163, 283, 316, 466, 477, 482], "active_children": [66, 163, 283], "current_process": [66, 99, 163, 283], "parent_process": [66, 163, 283, 482], "freeze_support": [66, 163, 283], "get_all_start_method": [66, 163, 283, 476, 482], "get_context": [66, 125, 138, 163, 283, 476, 482], "get_start_method": [66, 163, 283, 476], "set_execut": [66, 163, 283, 420, 482], "set_start_method": [66, 163, 283, 476], "recv": [66, 99, 103, 125, 139, 163, 283, 327, 329, 333, 337, 338, 341, 350, 361, 368, 468, 477, 482], "poll": [66, 82, 121, 125, 131, 136, 139, 163, 283, 293, 329, 333, 338, 341, 342, 348, 465, 467, 474, 475, 477, 481, 482], "send_byt": [66, 163, 283], "recv_byt": [66, 163, 283], "recv_bytes_into": [66, 163, 283], "primit": [66, 73, 82, 83, 113, 122, 123, 134, 135, 163, 175, 176, 186, 258, 299, 308, 319, 328, 329, 333, 341, 364, 383, 451, 471, 472, 475, 476, 479, 482], "sharedctyp": [66, 163, 477, 482], "rawarray": [66, 163, 283], "rawvalu": [66, 163, 283], "basemanag": [66, 163, 283, 284, 482], "get_serv": [66, 163, 283], "syncmanag": [66, 163, 283, 482], "remot": [66, 98, 99, 108, 119, 121, 125, 132, 139, 163, 169, 211, 241, 247, 267, 268, 269, 288, 305, 335, 337, 341, 358, 374, 394, 402, 404, 408, 413, 417, 418, 463, 474, 477, 482], "baseproxi": [66, 163, 283, 482], "_callmethod": [66, 163, 283], "_getvalu": [66, 163, 283], "apply_async": [66, 163, 283, 467], "map_async": [66, 163, 283, 467, 475], "imap": [66, 78, 110, 163, 193, 247, 283, 305, 393, 464, 465, 480, 482], "imap_unord": [66, 163, 283, 482], "starmap_async": [66, 163, 283, 475], "asyncresult": [66, 163, 283], "deliver_challeng": [66, 163, 283], "answer_challeng": [66, 163, 283], "last_accept": [66, 163, 283], "get_logg": [66, 163, 283], "log_to_stderr": [66, 163, 283, 482], "threadpool": [66, 163, 283, 482], "spawn": [66, 99, 123, 129, 131, 136, 137, 142, 163, 165, 257, 293, 309, 338, 361, 364, 390, 476, 480, 481, 482], "forkserv": [66, 163, 476, 482], "shared_memori": [66, 163, 254, 352, 480, 482], "sharedmemori": [66, 163, 283, 284, 482], "sharedmemorymanag": [66, 163, 284, 482], "shareablelist": [66, 163, 284, 482], "shm": [66, 163, 284, 482], "executor": [66, 99, 124, 125, 134, 163, 472, 474, 477, 481, 482], "submit": [66, 90, 99, 106, 138, 151, 163, 165, 246, 283, 461, 468, 474, 475, 477, 478, 479, 480, 482], "threadpoolexecutor": [66, 82, 124, 125, 163, 283, 364, 472, 474, 477, 478, 479, 480, 481, 482], "processpoolexecutor": [66, 82, 124, 125, 163, 283, 364, 474, 477, 479, 480, 481, 482], "add_done_callback": [66, 128, 138, 163, 165, 479, 482], "set_running_or_notify_cancel": [66, 163, 165], "set_result": [66, 128, 132, 138, 163, 165, 482], "set_except": [66, 124, 128, 138, 163, 165, 478, 482], "as_complet": [66, 123, 128, 138, 163, 165, 471, 480, 482], "cancellederror": [66, 123, 126, 128, 134, 137, 138, 163, 165, 480, 482], "brokenexecutor": [66, 163, 165], "invalidstateerror": [66, 126, 128, 138, 163, 165, 482], "brokenthreadpool": [66, 163, 165], "brokenprocesspool": [66, 163, 165], "completedprocess": [66, 163, 348, 477, 482], "returncod": [66, 131, 132, 136, 163, 348, 477, 480, 482], "check_returncod": [66, 163, 348], "subprocesserror": [66, 163, 348, 482], "timeoutexpir": [66, 163, 348], "calledprocesserror": [66, 163, 348, 468, 477, 482], "communic": [66, 99, 100, 103, 125, 132, 136, 139, 163, 192, 211, 241, 244, 246, 254, 257, 269, 283, 284, 293, 299, 305, 309, 333, 337, 338, 341, 348, 364, 375, 385, 406, 418, 461, 465, 466, 467, 477, 479, 480, 482], "send_sign": [66, 129, 132, 136, 163, 348, 467, 482], "startupinfo": [66, 163, 348, 465, 479, 482], "dwflag": [66, 163, 348], "hstdinput": [66, 163, 348], "hstdoutput": [66, 163, 348], "hstderror": [66, 163, 348], "wshowwindow": [66, 163, 348], "lpattributelist": [66, 163, 348, 479], "std_input_handl": [66, 163, 348], "std_output_handl": [66, 163, 348], "std_error_handl": [66, 163, 348], "sw_hide": [66, 163, 348], "startf_usestdhandl": [66, 163, 348], "startf_useshowwindow": [66, 163, 348], "create_new_consol": [66, 163, 348], "create_new_process_group": [66, 136, 163, 348], "above_normal_priority_class": [66, 163, 348], "below_normal_priority_class": [66, 163, 348], "high_priority_class": [66, 163, 348], "idle_priority_class": [66, 163, 348], "normal_priority_class": [66, 163, 348], "realtime_priority_class": [66, 163, 348], "create_no_window": [66, 163, 348], "detached_process": [66, 163, 348], "create_default_error_mod": [66, 163, 348], "create_breakaway_from_job": [66, 163, 348], "check_cal": [66, 163, 348], "check_output": [66, 163, 186, 192, 348, 468, 476, 482], "sh": [66, 82, 163, 301, 309, 331, 461, 482], "pipelin": [66, 163, 254, 350, 461, 482], "popen2": [66, 163, 465, 467], "popen3": [66, 163], "getstatusoutput": [66, 163, 348, 476, 482], "getoutput": [66, 163, 348, 482], "vfork": [66, 163, 482], "enterab": [66, 163, 325, 475], "lifoqueu": [66, 123, 133, 163, 316, 344, 467, 482], "priorityqueu": [66, 123, 133, 163, 316, 344, 467, 482], "old_valu": [66, 163, 169], "copy_context": [66, 163, 169], "locktyp": [66, 113, 163], "start_new_thread": [66, 113, 163, 482], "interrupt_main": [66, 113, 163, 471, 482], "allocate_lock": [66, 113, 163], "interprocess": [66, 132, 254, 283, 337], "runner": [66, 99, 122, 123, 192, 387, 399, 465, 468, 472, 482], "get_loop": [66, 125, 128, 134, 479, 482], "keyboard": [66, 79, 84, 90, 176, 246, 333, 348, 375, 383, 387, 440, 467, 482], "create_task": [66, 123, 124, 125, 127, 128, 129, 133, 137, 138, 472, 477, 479, 480, 482], "taskgroup": [66, 123, 138, 472, 482], "shield": [66, 123, 471, 480, 482], "reschedul": [66, 125, 138], "expir": [66, 125, 138, 211, 242, 243, 256, 283, 325, 329, 333, 335, 337, 339, 341, 348, 364, 365, 394, 475, 482], "timeout_at": [66, 138, 482], "to_thread": [66, 123, 138, 481, 482], "run_coroutine_threadsaf": [66, 123, 124, 138, 471, 477, 478, 482], "current_task": [66, 123, 127, 138, 479, 481, 482], "all_task": [66, 123, 138, 479, 481, 482], "remove_done_callback": [66, 128, 138, 482], "get_stack": [66, 138, 144, 184, 482], "print_stack": [66, 138, 267, 315, 380, 477, 482], "get_coro": [66, 138, 480, 482], "get_nam": [66, 138, 264, 351, 480, 482], "set_nam": [66, 91, 125, 138, 480, 482], "uncancel": [66, 138, 472, 482], "open_connect": [66, 123, 125, 132, 135, 477, 479, 482], "start_serv": [66, 123, 125, 132, 135, 169, 364, 479, 482], "open_unix_connect": [66, 123, 135], "start_unix_serv": [66, 123, 125, 135], "readexact": [66, 135, 478, 482], "readuntil": [66, 135, 477, 478, 482], "at_eof": [66, 135], "can_write_eof": [66, 129, 132, 135], "write_eof": [66, 129, 132, 135, 341, 482], "transport": [66, 122, 125, 128, 129, 135, 136, 169, 193, 197, 200, 205, 211, 317, 335, 341, 417, 418, 463, 477, 478, 479, 482], "get_extra_info": [66, 129, 132, 135, 169, 480, 482], "drain": [66, 132, 135, 137, 341, 474, 482], "start_tl": [66, 125, 129, 135, 472, 479, 482], "is_clos": [66, 125, 129, 132, 135, 477, 478, 479, 482], "wait_clos": [66, 125, 135, 479, 482], "tcp": [66, 78, 82, 98, 99, 103, 123, 125, 129, 257, 269, 283, 335, 337, 338, 341, 361, 467, 468, 478, 479, 482], "create_subprocess_exec": [66, 123, 125, 131, 136, 348, 480, 482], "create_subprocess_shel": [66, 123, 125, 136, 480, 482], "maxsiz": [66, 83, 88, 91, 110, 133, 159, 219, 224, 225, 261, 283, 303, 315, 316, 344, 352, 361, 368, 427, 449, 469, 474, 480, 482], "lifo": [66, 123, 159, 316, 344, 387], "queueempti": [66, 133], "queueful": [66, 133], "sendfilenotavailableerror": [66, 125, 126], "incompletereaderror": [66, 126, 135, 482], "limitoverrunerror": [66, 126, 135, 482], "get_running_loop": [66, 125, 128, 129, 132, 135, 138, 471, 479, 482], "get_event_loop": [66, 125, 129, 131, 471, 477, 478, 479, 482], "set_event_loop": [66, 125, 129, 130, 131, 134, 480, 482], "new_event_loop": [66, 125, 129, 131, 134, 480], "run_until_complet": [66, 125, 129, 477, 478, 480, 482], "run_forev": [66, 125, 129, 482], "is_run": [66, 125, 129], "shutdown_asyncgen": [66, 125, 129, 352, 429, 478, 482], "shutdown_default_executor": [66, 125, 134, 481, 482], "call_soon": [66, 124, 128, 129, 132, 135, 385, 479, 482], "call_soon_threadsaf": [66, 124, 125, 129, 479, 482], "call_lat": [66, 129, 479, 482], "call_at": [66, 124, 125, 129, 479], "create_futur": [66, 125, 127, 128, 129, 132, 477, 478, 482], "set_task_factori": [66, 125, 129, 477, 482], "get_task_factori": [66, 125, 129, 477, 482], "create_connect": [66, 125, 127, 129, 132, 135, 337, 341, 467, 468, 472, 474, 477, 479, 480, 482], "create_datagram_endpoint": [66, 125, 129, 132, 472, 478, 479, 480, 481, 482], "create_unix_connect": [66, 125, 129, 130, 132, 135, 482], "create_serv": [66, 125, 129, 132, 135, 337, 477, 478, 479, 480, 482], "create_unix_serv": [66, 125, 129, 130, 132, 135, 479, 482], "connect_accepted_socket": [66, 125, 129, 132, 471, 478, 482], "tls": [66, 129, 135, 222, 241, 254, 260, 269, 305, 327, 335, 337, 361, 455, 459, 463, 467, 468, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482], "add_read": [66, 125, 129, 130, 132, 135, 482], "remove_read": [66, 125, 129], "add_writ": [66, 125, 129, 130, 482], "remove_writ": [66, 125, 129], "sock_recv": [66, 125, 129, 479, 482], "sock_recv_into": [66, 125, 129, 479, 482], "sock_recvfrom": [66, 125, 129, 472, 482], "sock_recvfrom_into": [66, 125, 129, 472, 482], "sock_sendal": [66, 125, 129, 479, 482], "sock_sendto": [66, 125, 129, 472, 482], "sock_connect": [66, 125, 129, 477, 482], "sock_accept": [66, 125, 129, 479, 482], "sock_sendfil": [66, 125, 129, 479, 482], "dns": [66, 99, 127, 129, 157, 259, 269, 337, 341, 477], "getaddrinfo": [66, 106, 125, 129, 142, 337, 425, 477, 478, 479, 482], "getnameinfo": [66, 125, 129, 142, 337, 425, 479, 482], "connect_read_pip": [66, 125, 129, 130, 132, 136, 482], "connect_write_pip": [66, 125, 129, 130, 132, 136, 482], "add_signal_handl": [66, 125, 129, 130, 482], "remove_signal_handl": [66, 125, 129, 130], "run_in_executor": [66, 124, 125, 129, 138, 481, 482], "set_default_executor": [66, 125, 129, 472, 480, 482], "set_exception_handl": [66, 125, 129], "get_exception_handl": [66, 125, 129, 477, 478, 482], "default_exception_handl": [66, 125, 129], "call_exception_handl": [66, 125, 129], "get_debug": [66, 125, 129, 226, 315, 477], "set_debug": [66, 124, 125, 129, 226, 315, 477], "subprocess_exec": [66, 125, 129, 130, 131, 136, 482], "subprocess_shel": [66, 125, 129, 130, 132, 136], "timerhandl": [66, 125, 482], "serve_forev": [66, 125, 132, 135, 169, 244, 256, 283, 333, 338, 406, 418, 419, 466, 467, 475, 479, 482], "is_serv": [66, 125, 479, 482], "selectoreventloop": [66, 125, 130, 131, 136, 472, 482], "proactoreventloop": [66, 125, 130, 131, 136, 472, 480, 482], "abstracteventloop": [66, 125, 127, 131, 481, 482], "hello": [66, 71, 73, 77, 83, 84, 99, 110, 112, 119, 128, 132, 134, 135, 136, 138, 146, 151, 175, 183, 225, 229, 234, 239, 278, 283, 288, 291, 299, 301, 304, 337, 338, 340, 341, 344, 359, 361, 363, 364, 367, 377, 385, 387, 388, 406, 434, 439, 441, 442, 445, 460, 474, 476, 477, 480, 481, 482], "world": [66, 71, 74, 77, 83, 90, 96, 99, 103, 112, 128, 132, 135, 138, 146, 151, 168, 175, 182, 225, 229, 234, 247, 257, 278, 283, 291, 292, 299, 301, 310, 325, 337, 338, 340, 341, 344, 359, 361, 363, 364, 367, 377, 383, 387, 406, 409, 425, 434, 439, 442, 445, 469, 477, 478, 482], "sigterm": [66, 132, 136, 283, 333, 348, 467, 482], "isfutur": [66, 128, 482], "ensure_futur": [66, 128, 138, 471, 477, 478, 482], "wrap_futur": [66, 128, 471, 482], "basetransport": [66, 132, 135, 480], "writetransport": [66, 125, 132, 482], "readtransport": [66, 125, 132, 479, 482], "datagramtransport": [66, 132, 482], "subprocesstransport": [66, 125, 132], "set_protocol": [66, 129, 132, 482], "get_protocol": [66, 129, 132, 482], "is_read": [66, 129, 132, 479, 482], "pause_read": [66, 129, 132, 479, 482], "resume_read": [66, 129, 132, 479, 482], "get_write_buffer_s": [66, 129, 132], "get_write_buffer_limit": [66, 129, 132, 477, 482], "set_write_buffer_limit": [66, 129, 132], "datagram": [66, 125, 129, 269, 338, 341, 451, 472, 482], "sendto": [66, 125, 129, 132, 142, 337, 338, 477, 482], "get_pid": [66, 129, 132], "get_pipe_transport": [66, 129, 132], "get_returncod": [66, 129, 132], "baseprotocol": [66, 132], "bufferedprotocol": [66, 132, 479, 480, 482], "datagramprotocol": [66, 132], "subprocessprotocol": [66, 125], "connection_mad": [66, 125, 129, 132, 482], "connection_lost": [66, 129, 132, 482], "pause_writ": [66, 129, 132], "resume_writ": [66, 129, 132], "data_receiv": [66, 129, 132, 482], "eof_receiv": [66, 129, 132], "get_buff": [66, 129, 132, 350, 407], "buffer_upd": [66, 129, 132], "datagram_receiv": [66, 129, 132], "error_receiv": [66, 129, 132], "pipe_data_receiv": [66, 129, 132, 482], "pipe_connection_lost": [66, 129, 132], "process_exit": [66, 129, 132, 482], "udp": [66, 98, 125, 129, 269, 337, 338, 361, 468, 472, 478, 479, 480, 481, 482], "get_event_loop_polici": [66, 129, 131], "set_event_loop_polici": [66, 125, 129, 131], "abstracteventlooppolici": [66, 129, 131, 473, 482], "get_child_watch": [66, 131, 473, 482], "set_child_watch": [66, 130, 131, 473, 482], "defaulteventlooppolici": [66, 125, 131], "windowsselectoreventlooppolici": [66, 131, 479, 482], "windowsproactoreventlooppolici": [66, 131, 479, 482], "abstractchildwatch": [66, 131], "add_child_handl": [66, 131], "remove_child_handl": [66, 131], "attach_loop": [66, 131, 482], "threadedchildwatch": [66, 131, 136, 473], "multiloopchildwatch": [66, 131, 473, 482], "safechildwatch": [66, 131, 473, 482], "fastchildwatch": [66, 131, 473, 482], "pidfdchildwatch": [66, 131, 473, 481, 482], "_register_task": [66, 127, 482], "_unregister_task": [66, 127, 482], "_enter_task": [66, 127, 482], "_leave_task": [66, 127, 482], "multithread": [66, 125, 136, 138, 234, 266, 283, 348, 358, 406, 464, 481, 482], "herror": [66, 337], "gaierror": [66, 337], "af_unix": [66, 125, 130, 283, 337, 338, 482], "af_inet6": [66, 125, 337, 482], "sock_stream": [66, 99, 103, 125, 139, 269, 337, 338, 341, 361, 468, 479], "sock_dgram": [66, 125, 269, 337, 338, 468], "sock_raw": [66, 337], "sock_rdm": [66, 337], "sock_seqpacket": [66, 337], "sock_cloexec": [66, 337, 479, 482], "sock_nonblock": [66, 337, 479, 482], "somaxconn": [66, 337, 477], "af_can": [66, 337, 482], "pf_can": [66, 337, 475], "can_bcm": [66, 337, 476], "can_raw_fd_fram": [66, 337, 477, 482], "can_raw_join_filt": [66, 337, 481, 482], "can_isotp": [66, 337, 482], "can_j1939": [66, 337, 481, 482], "af_packet": [66, 337, 482], "pf_packet": [66, 337], "af_rd": [66, 337], "pf_rds": [66, 337, 475], "sol_rd": [66, 337], "sio_rcval": [66, 337], "sio_keepalive_v": [66, 337], "sio_loopback_fast_path": [66, 337, 478, 482], "af_alg": [66, 337, 478, 482], "sol_alg": [66, 337, 478], "af_vsock": [66, 337, 479, 482], "ioctl_vm_sockets_get_local_cid": [66, 337], "af_link": [66, 337, 476], "has_ipv6": [66, 337], "bdaddr_ani": [66, 337], "bdaddr_loc": [66, 337], "hci_filt": [66, 337], "hci_time_stamp": [66, 337], "hci_data_dir": [66, 337], "af_qipcrtr": [66, 337, 482], "scm_creds2": [66, 337, 482], "local_cr": [66, 337, 482], "local_creds_persist": [66, 337, 482], "so_incoming_cpu": [66, 337, 482], "af_hyperv": [66, 337], "hv_protocol_raw": [66, 337], "hvsocket_connect_timeout": [66, 337], "hvsocket_connect_timeout_max": [66, 337], "hvsocket_connected_suspend": [66, 337], "hvsocket_address_flag_passthru": [66, 337], "hv_guid_zero": [66, 337], "hv_guid_wildcard": [66, 337], "hv_guid_broadcast": [66, 337], "hv_guid_children": [66, 337], "hv_guid_loopback": [66, 337], "socketpair": [66, 125, 132, 135, 333, 337, 465, 479, 482], "has_dualstack_ipv6": [66, 337, 480, 482], "fromfd": [66, 328, 337], "fromshar": [66, 337, 479], "sockettyp": [66, 337], "getfqdn": [66, 335, 337], "gethostbynam": [66, 142, 337], "gethostbyname_ex": [66, 337, 482], "gethostnam": [66, 99, 103, 142, 293, 337], "gethostbyaddr": [66, 142, 293, 337, 482], "getprotobynam": [66, 337], "getservbynam": [66, 142, 337, 482], "getservbyport": [66, 142, 337, 465, 482], "ntohl": [66, 103, 337], "ntoh": [66, 103, 337, 471, 479, 482], "htonl": [66, 103, 337], "hton": [66, 103, 337, 471, 479, 482], "inet_aton": [66, 337, 480, 481, 482], "inet_ntoa": [66, 337], "inet_pton": [66, 125, 259, 337, 476, 480, 481, 482], "inet_ntop": [66, 337, 476], "cmsg_len": [66, 337, 482], "cmsg_space": [66, 337, 482], "getdefaulttimeout": [66, 337], "setdefaulttimeout": [66, 106, 337], "sethostnam": [66, 142, 337, 475], "if_nameindex": [66, 337, 480, 482], "if_nametoindex": [66, 337, 480, 482], "if_indextonam": [66, 337, 480, 482], "send_fd": [66, 337, 481, 482], "recv_fd": [66, 337, 481], "connect_ex": [66, 82, 337, 461], "getpeernam": [66, 132, 169, 337, 341], "getsocknam": [66, 132, 135, 337, 341, 482], "getsockopt": [66, 132, 337, 341, 468, 478], "getblock": [66, 337, 479, 482], "gettimeout": [66, 337, 341], "ioctl": [66, 119, 142, 254, 295, 337, 390, 465, 467, 478, 482], "recvfrom": [66, 125, 337, 368, 477, 482], "recvmsg": [66, 337, 475, 477], "recvmsg_into": [66, 337, 475], "recvfrom_into": [66, 125, 337, 466, 468], "recv_into": [66, 125, 337, 341, 466, 468, 482], "sendal": [66, 125, 337, 338, 341, 477, 482], "sendmsg": [66, 142, 337, 475, 477], "sendmsg_afalg": [66, 337, 478], "setblock": [66, 103, 293, 329, 337, 341, 482], "settimeout": [66, 256, 337, 341, 394, 464, 482], "setsockopt": [66, 337, 341, 468, 478], "proto": [66, 125, 135, 300, 337, 385, 394], "create_default_context": [66, 125, 222, 241, 247, 305, 335, 341, 394, 468, 476, 482], "sslerror": [66, 341, 474], "sslzeroreturnerror": [66, 341], "sslwantreaderror": [66, 341, 477, 482], "sslwantwriteerror": [66, 341, 477, 482], "sslsyscallerror": [66, 341], "ssleoferror": [66, 341, 482], "sslcertverificationerror": [66, 341, 479, 482], "verify_cod": [66, 341], "verify_messag": [66, 341], "certificateerror": [66, 341], "rand_byt": [66, 341, 473, 475, 482], "rand_status": [66, 341, 482], "rand_add": [66, 341, 482], "cert_time_to_second": [66, 341, 477, 482], "get_server_certif": [66, 341, 471, 475, 482], "der_cert_to_pem_cert": [66, 341], "pem_cert_to_der_cert": [66, 341], "get_default_verify_path": [66, 341, 476], "enum_certif": [66, 341, 476, 482], "enum_crl": [66, 341, 476, 482], "wrap_socket": [66, 341, 467, 468, 471, 473, 474, 479, 482], "cert_non": [66, 341, 482], "cert_opt": [66, 341, 482], "cert_requir": [66, 341, 482], "verifymod": [66, 341], "verify_default": [66, 341, 476], "verify_crl_check_leaf": [66, 341, 476], "verify_crl_check_chain": [66, 341, 476], "verify_x509_strict": [66, 341, 476], "verify_allow_proxy_cert": [66, 341, 482], "verify_x509_trusted_first": [66, 341], "verify_x509_partial_chain": [66, 341, 471], "verifyflag": [66, 341], "protocol_tl": [66, 341, 471, 482], "protocol_tls_cli": [66, 341, 471, 482], "protocol_tls_serv": [66, 341, 471, 482], "protocol_sslv23": [66, 222, 341, 471, 482], "protocol_sslv3": [66, 341, 471, 482], "protocol_tlsv1": [66, 341, 471], "protocol_tlsv1_1": [66, 341, 471, 476], "protocol_tlsv1_2": [66, 341, 471, 476, 482], "op_al": [66, 341], "op_no_sslv2": [66, 341, 471, 474, 482], "op_no_sslv3": [66, 341, 471, 482], "op_no_tlsv1": [66, 341, 471], "op_no_tlsv1_1": [66, 341, 471], "op_no_tlsv1_2": [66, 341, 471], "op_no_tlsv1_3": [66, 341, 471, 482], "op_no_renegoti": [66, 341, 482], "op_cipher_server_prefer": [66, 341, 475, 482], "op_single_dh_us": [66, 341, 482], "op_single_ecdh_us": [66, 341, 482], "op_enable_middlebox_compat": [66, 341, 482], "op_no_compress": [66, 341, 475, 482], "op_no_ticket": [66, 341], "op_ignore_unexpected_eof": [66, 341, 471, 482], "has_alpn": [66, 341, 477], "has_never_check_common_nam": [66, 341], "has_ecdh": [66, 341], "has_sni": [66, 222, 241, 247, 288, 305, 335, 341, 394], "has_npn": [66, 341], "has_sslv2": [66, 341], "has_sslv3": [66, 341], "has_tlsv1": [66, 341], "has_tlsv1_1": [66, 341, 479], "has_tlsv1_2": [66, 341], "has_tlsv1_3": [66, 341], "channel_binding_typ": [66, 341], "openssl_vers": [66, 341, 468, 474], "openssl_version_info": [66, 341, 468, 474], "openssl_version_numb": [66, 341, 468, 474], "alert_description_handshake_failur": [66, 341], "alert_description_internal_error": [66, 341], "alertdescript": [66, 341], "server_auth": [66, 341, 476], "client_auth": [66, 341, 476], "sslerrornumb": [66, 341], "tlsversion": [66, 341, 482], "minimum_support": [66, 341], "maximum_support": [66, 341], "sslv3": [66, 341, 475, 477, 482], "tlsv1": [66, 341, 476, 482], "tlsv1_1": [66, 341], "tlsv1_2": [66, 341], "tlsv1_3": [66, 341], "sslsocket": [66, 132, 341, 468, 471, 476, 477, 479, 481, 482], "do_handshak": [66, 341, 476, 477], "getpeercert": [66, 132, 341, 467, 476, 482], "cipher": [66, 132, 166, 172, 234, 455, 468, 471, 474, 475, 477, 478, 479, 482], "shared_ciph": [66, 341, 477, 482], "get_channel_bind": [66, 341, 475], "selected_alpn_protocol": [66, 341, 477], "selected_npn_protocol": [66, 341, 471], "unwrap": [66, 86, 255, 256, 315, 341, 393, 476, 482], "verify_client_post_handshak": [66, 341, 480, 482], "server_sid": [66, 125, 341], "server_hostnam": [66, 125, 135, 341, 474, 479, 482], "session": [66, 83, 91, 98, 99, 121, 155, 168, 192, 212, 222, 241, 242, 283, 293, 305, 309, 320, 329, 335, 352, 394, 435, 449, 454, 460, 465, 475, 476, 478, 480, 482], "session_reus": [66, 341], "sslcontext": [66, 125, 132, 135, 222, 241, 247, 269, 288, 305, 335, 341, 394, 418, 468, 471, 473, 474, 475, 476, 477, 478, 479, 482], "cert_store_stat": [66, 341, 476], "load_cert_chain": [66, 222, 241, 247, 305, 335, 341, 394, 475], "load_default_cert": [66, 341, 476, 482], "load_verify_loc": [66, 341, 394, 476, 482], "get_ca_cert": [66, 341, 476], "get_ciph": [66, 341, 478, 482], "set_default_verify_path": [66, 341, 476, 482], "set_ciph": [66, 341], "set_alpn_protocol": [66, 241, 341, 394, 477], "set_npn_protocol": [66, 341, 471, 475], "sni_callback": [66, 341, 482], "set_servername_callback": [66, 341, 476], "load_dh_param": [66, 341, 475, 482], "set_ecdh_curv": [66, 341, 475], "sslsocket_class": [66, 341], "wrap_bio": [66, 341, 477, 479, 482], "sslobject_class": [66, 341], "session_stat": [66, 341], "check_hostnam": [66, 222, 241, 247, 288, 305, 335, 341, 394, 412, 478, 482], "keylog_filenam": [66, 341], "maximum_vers": [66, 341, 471, 479, 482], "minimum_vers": [66, 341, 471, 479, 482], "num_ticket": [66, 341, 482], "post_handshake_auth": [66, 241, 341, 480, 482], "hostname_checks_common_nam": [66, 341, 479, 482], "security_level": [66, 341, 482], "verify_flag": [66, 341, 476], "verify_mod": [66, 341, 482], "ca": [66, 90, 102, 161, 222, 241, 247, 261, 305, 335, 394, 425, 467, 468, 476, 482], "sslobject": [66, 132, 341, 385, 477, 479, 482], "memorybio": [66, 341, 477, 482], "sslsession": [66, 341, 478, 482], "ticket_lifetime_hint": [66, 341], "has_ticket": [66, 341], "devpol": [66, 328, 329, 475, 476, 477, 482], "epol": [66, 329, 467, 476, 477, 481, 482], "kqueue": [66, 322, 329, 467, 477, 482], "kevent": 66, "pipe_buf": [66, 328, 474, 482], "edg": [66, 101, 175, 176, 192, 200, 224, 231, 361, 363, 383, 475, 476, 482], "fflag": [66, 328], "udata": [66, 328], "multiplex": [66, 103, 254, 260, 328, 341, 476], "selectorkey": [66, 329], "fileobj": [66, 233, 234, 329, 333, 357, 475, 482], "baseselector": [66, 329, 482], "get_key": [66, 329, 482], "get_map": [66, 329], "defaultselector": [66, 329, 333, 482], "selectselector": [66, 125, 130, 329], "pollselector": [66, 130, 329, 479], "epollselector": [66, 329, 479, 482], "devpollselector": [66, 329, 477, 479], "kqueueselector": [66, 130, 329, 482], "sigmask": [66, 333], "sigabrt": [66, 187, 213, 293, 333, 454, 475, 482], "sigalrm": [66, 333, 482], "sigbreak": [66, 333], "sigbus": [66, 187, 213, 333, 454, 475], "sigchld": [66, 131, 333], "sigcld": [66, 333], "sigcont": [66, 293, 333], "sigfp": [66, 187, 213, 333, 454, 475, 482], "sighup": [66, 333, 482], "sigil": [66, 187, 213, 333, 454, 475], "sigkil": [66, 132, 136, 283, 293, 333, 348, 359, 465, 479, 482], "sigpip": [66, 348], "sigsegv": [66, 187, 213, 333, 454, 475, 482], "sigstkflt": [66, 333, 482], "sigusr1": [66, 333], "sigusr2": [66, 333], "sigwinch": [66, 176, 333, 482], "ctrl_c_event": [66, 136, 293, 333, 348, 468], "ctrl_break_ev": [66, 136, 293, 333, 348, 468], "nsig": [66, 333, 482], "itimer_r": [66, 333], "itimer_virtu": [66, 333], "itimer_prof": [66, 333], "sig_block": [66, 333], "sig_unblock": [66, 333], "sig_setmask": [66, 333], "itimererror": [66, 333], "alarm": [66, 308, 333, 476, 482], "getsign": [66, 333, 482], "strsignal": [66, 333, 482], "valid_sign": [66, 333, 482], "paus": [66, 90, 93, 132, 136, 176, 295, 297, 333, 429, 465, 466, 482], "raise_sign": [66, 113, 333, 482], "pidfd_send_sign": [66, 333, 481, 482], "pthread_kil": [66, 142, 293, 333, 475], "pthread_sigmask": [66, 333, 475], "setitim": [66, 333, 467, 482], "getitim": [66, 333, 467], "siginterrupt": [66, 333, 467, 475, 482], "sigpend": [66, 333, 475], "sigwait": [66, 333, 475], "sigwaitinfo": [66, 333, 475, 477, 482], "sigtimedwait": [66, 333, 475, 477, 482], "madvis": [66, 278, 480, 482], "madv_": 66, "madv_norm": [66, 278], "madv_random": [66, 278], "madv_sequenti": [66, 278], "madv_willne": [66, 278], "madv_dontne": [66, 278], "madv_remov": [66, 278], "madv_dontfork": [66, 278], "madv_dofork": [66, 278], "madv_hwpoison": [66, 278], "madv_merg": [66, 278], "madv_unmerg": [66, 278], "madv_soft_offlin": [66, 278], "madv_hugepag": [66, 278], "madv_nohugepag": [66, 278], "madv_dontdump": [66, 278], "madv_dodump": [66, 278], "madv_fre": [66, 278], "madv_nosync": [66, 278], "madv_autosync": [66, 278], "madv_nocor": [66, 278], "madv_cor": [66, 278], "madv_protect": [66, 278], "madv_free_reus": [66, 278], "map_": 66, "map_shar": [66, 278], "map_priv": [66, 278], "map_denywrit": [66, 278], "map_execut": [66, 278], "map_anon": [66, 278], "map_anonym": [66, 278], "map_popul": [66, 278, 482], "map_stack": [66, 278, 482], "mime": [66, 85, 102, 143, 146, 151, 157, 195, 199, 201, 202, 203, 204, 206, 207, 244, 254, 272, 285, 352, 406, 431, 450, 463, 465, 468, 474, 476, 477, 478, 479, 482], "emailmessag": [66, 151, 193, 195, 196, 199, 200, 201, 204, 206, 207, 241, 285, 394, 476, 478, 482], "as_str": [66, 193, 195, 200, 201, 204, 285, 476, 482], "as_byt": [66, 193, 195, 199, 200, 204, 207, 251, 285, 476], "is_multipart": [66, 193, 195, 198, 204, 206, 285, 482], "set_unixfrom": [66, 193, 195, 204, 285], "get_unixfrom": [66, 193, 195, 204, 285], "get_al": [66, 193, 195, 204, 208, 256, 285, 406, 482], "add_head": [66, 193, 195, 204, 205, 256, 285, 388, 394, 406], "replace_head": [66, 193, 195, 204, 285], "get_content_typ": [66, 151, 193, 195, 199, 204, 285], "get_content_maintyp": [66, 193, 195, 199, 204, 285], "get_content_subtyp": [66, 193, 195, 204, 285], "get_default_typ": [66, 193, 195, 204, 285], "set_default_typ": [66, 193, 195, 204, 285], "set_param": [66, 193, 195, 204, 285, 476], "del_param": [66, 193, 195, 204, 285], "get_filenam": [66, 193, 195, 199, 204, 250, 280, 285, 422, 476], "get_boundari": [66, 193, 195, 204, 285], "set_boundari": [66, 193, 195, 198, 204, 285], "get_content_charset": [66, 193, 195, 204, 285], "get_charset": [66, 193, 195, 204, 285], "is_attach": [66, 193, 204, 285, 482], "get_content_disposit": [66, 193, 195, 204, 285, 477], "get_bodi": [66, 193, 199, 204, 206, 285], "iter_attach": [66, 193, 199, 204, 285, 482], "iter_part": [66, 193, 195, 204, 206, 285], "get_cont": [66, 193, 195, 196, 199, 204, 207, 285], "set_cont": [66, 193, 195, 196, 197, 199, 204, 206, 207, 285, 482], "make_rel": [66, 193, 204, 285], "make_altern": [66, 193, 204, 285], "make_mix": [66, 193, 204, 285], "add_rel": [66, 193, 199, 204, 285], "add_altern": [66, 193, 199, 204, 285], "add_attach": [66, 193, 199, 204, 285], "clear_cont": [66, 193, 196, 204, 285], "preambl": [66, 193, 195, 199, 204, 285, 300, 482], "epilogu": [66, 193, 195, 204, 285], "defect": [66, 193, 195, 202, 204, 206, 207, 285, 465, 475, 479, 482], "mimepart": [66, 193, 196, 204, 285, 476], "feedpars": [66, 193, 198, 285, 465, 482], "bytesfeedpars": [66, 193, 206, 285, 474], "feed": [66, 92, 157, 176, 177, 193, 206, 207, 234, 239, 261, 273, 283, 285, 344, 388, 406, 412, 415, 423, 466, 474, 482], "bytespars": [66, 193, 199, 200, 206, 285, 474, 482], "parsebyt": [66, 193, 206, 285], "bytesheaderpars": [66, 193, 206, 285, 475], "parsestr": [66, 193, 199, 206, 273, 285, 410, 411, 413, 461, 477, 482], "headerpars": [66, 193, 206, 285, 475], "message_from_byt": [66, 193, 206, 285, 474], "message_from_binary_fil": [66, 193, 199, 206, 207, 285, 474], "message_from_str": [66, 193, 206, 285, 475], "message_from_fil": [66, 193, 203, 206, 285], "bytesgener": [66, 193, 195, 196, 200, 204, 207, 285, 335, 474], "flatten": [66, 159, 193, 195, 200, 201, 202, 204, 207, 261, 285, 299, 344, 385, 441, 471, 476, 477, 481, 482], "decodedgener": [66, 193, 200, 285, 478, 482], "max_line_length": [66, 193, 195, 204, 207, 285, 475, 482], "cte_typ": [66, 193, 200, 202, 207, 285, 475], "raise_on_defect": [66, 193, 207, 285, 475], "mangle_from_": [66, 193, 195, 200, 207, 285, 477], "message_factori": [66, 193, 206, 207, 285, 478], "handle_defect": [66, 193, 207, 285], "register_defect": [66, 193, 207, 285], "header_max_count": [66, 193, 207, 285], "header_source_pars": [66, 193, 207, 285], "header_store_pars": [66, 193, 207, 285], "header_fetch_pars": [66, 193, 207, 285], "fold_binari": [66, 193, 207, 285], "emailpolici": [66, 193, 196, 202, 207, 285, 475, 477], "refold_sourc": [66, 193, 200, 207, 285, 475], "header_factori": [66, 193, 202, 207, 285, 475], "content_manag": [66, 193, 196, 204, 207, 285, 476], "smtp": [66, 78, 82, 98, 99, 193, 199, 200, 202, 207, 254, 256, 269, 285, 341, 450, 461, 463, 467, 474, 475, 476, 477, 481, 482], "smtputf8": [66, 193, 207, 285, 335, 477, 482], "compat32": [66, 193, 194, 197, 200, 201, 204, 205, 206, 207, 208, 285, 475, 477, 478, 482], "messageerror": [66, 193, 198, 285], "messageparseerror": [66, 193, 198, 271, 285], "headerparseerror": [66, 193, 195, 198, 204, 285], "boundaryerror": [66, 193, 198, 285], "multipartconversionerror": [66, 193, 198, 205, 285], "headerregistri": [66, 193, 198, 199, 204, 207, 285, 482], "basehead": [66, 193, 202, 204, 285], "max_count": [66, 193, 202, 207, 285], "unstructuredhead": [66, 193, 202, 285], "datehead": [66, 193, 202, 285], "addresshead": [66, 193, 202, 285], "singleaddresshead": [66, 193, 202, 285], "mimeversionhead": [66, 193, 202, 285], "parameterizedmimehead": [66, 193, 202, 285], "param": [66, 99, 138, 151, 193, 195, 196, 202, 204, 208, 241, 255, 268, 281, 285, 293, 305, 387, 393, 394, 398, 418, 419, 430, 468, 474, 481, 482], "contenttypehead": [66, 193, 202, 285], "content_typ": [66, 193, 199, 202, 285], "maintyp": [66, 193, 195, 196, 199, 200, 202, 203, 204, 285], "contentdispositionhead": [66, 193, 202, 285], "content_disposit": [66, 193, 202, 285], "contenttransferencod": [66, 193, 202, 285], "cte": [66, 193, 195, 196, 197, 202, 204, 207, 285, 340, 482], "map_to_typ": [66, 193, 202, 285], "display_nam": [66, 193, 199, 202, 285, 475], "usernam": [66, 99, 106, 151, 172, 193, 199, 202, 228, 247, 269, 285, 293, 294, 305, 335, 393, 394, 474, 475, 477, 482], "addr_spec": [66, 193, 202, 285, 475], "contentmanag": [66, 193, 205, 285, 476, 482], "add_get_handl": [66, 193, 196, 285], "add_set_handl": [66, 193, 196, 285], "raw_data_manag": [66, 193, 196, 207, 285], "get_payload": [66, 193, 195, 199, 203, 205, 285, 474], "set_payload": [66, 193, 195, 205, 285, 482], "set_charset": [66, 193, 195, 285], "get_param": [66, 193, 195, 208, 285, 482], "set_typ": [66, 193, 195, 285], "scratch": [66, 87, 127, 188, 193, 197, 200, 206, 285, 341, 409, 475, 476, 482], "mimebas": [66, 193, 205, 285], "mimenonmultipart": [66, 193, 198, 205, 285, 482], "mimemultipart": [66, 193, 205, 285], "mimeappl": [66, 193, 205, 285], "mimeaudio": [66, 193, 197, 205, 285, 482], "mimeimag": [66, 193, 197, 198, 199, 205, 285], "mimemessag": [66, 193, 205, 285], "mimetext": [66, 193, 197, 205, 285, 477, 482], "decode_head": [66, 193, 201, 285, 288, 350, 475], "make_head": [66, 193, 201, 285, 475], "charset": [66, 151, 182, 189, 193, 195, 196, 201, 204, 205, 207, 208, 229, 245, 247, 285, 341, 394, 406, 474, 477, 482], "input_charset": [66, 193, 194, 195, 285], "header_encod": [66, 193, 194, 285], "body_encod": [66, 193, 194, 285, 482], "output_charset": [66, 193, 194, 195, 285, 468, 472, 480], "input_codec": [66, 193, 194, 285], "output_codec": [66, 193, 194, 285], "get_body_encod": [66, 193, 194, 285], "get_output_charset": [66, 193, 194, 285], "header_encode_lin": [66, 193, 194, 285], "add_charset": [66, 193, 194, 285], "add_alia": [66, 193, 194, 285], "add_codec": [66, 193, 194, 285], "encode_quopri": [66, 193, 197, 285], "encode_base64": [66, 193, 197, 205, 285], "encode_7or8bit": [66, 193, 197, 285], "encode_noop": [66, 193, 197, 285], "make_msgid": [66, 193, 199, 208, 285, 482], "unquot": [66, 174, 193, 195, 204, 208, 239, 256, 285, 303, 393, 394, 482], "parseaddr": [66, 193, 208, 285], "formataddr": [66, 193, 208, 285, 475], "getaddress": [66, 193, 208, 285, 482], "parsed": [66, 193, 208, 285], "parsedate_tz": [66, 193, 208, 285, 482], "parsedate_to_datetim": [66, 193, 208, 285, 475], "mktime_tz": [66, 193, 208, 285], "formatd": [66, 193, 208, 285, 465, 482], "format_datetim": [66, 193, 202, 208, 285, 475], "decode_rfc2231": [66, 193, 208, 285], "encode_rfc2231": [66, 193, 208, 285], "collapse_rfc2231_valu": [66, 193, 195, 208, 285], "decode_param": [66, 193, 208, 285], "body_line_iter": [66, 193, 203, 285], "typed_subpart_iter": [66, 193, 203, 285], "_structur": [66, 193, 195, 203, 204, 285], "jsondecod": [66, 262, 285, 468, 478, 482], "raw_decod": [66, 262, 285, 482], "jsonencod": [66, 99, 262, 285, 478, 482], "jsondecodeerror": [66, 118, 262, 285, 477, 482], "attrdict": [66, 262, 267, 285, 482], "complianc": [66, 185, 193, 202, 207, 285, 288, 406, 409, 475, 476, 482], "interoper": [66, 92, 99, 114, 125, 141, 207, 244, 259, 285, 299, 318, 341, 344, 421, 427, 445, 470, 474, 476, 482], "iterkey": [66, 110, 271, 285, 463, 464, 465, 467, 469, 482], "itervalu": [66, 110, 271, 285, 463, 464, 465, 469, 482], "iteritem": [66, 110, 271, 285, 463, 464, 465, 469, 482], "get_messag": [66, 271, 285], "get_byt": [66, 271, 285, 474], "get_str": [66, 271, 285, 474, 482], "get_fil": [66, 271, 285, 474], "unlock": [66, 113, 137, 214, 271, 282, 283, 285, 305, 361, 364, 427, 466, 482], "maildir": [66, 285, 466, 468, 482], "list_fold": [66, 271, 285], "get_fold": [66, 271, 285], "add_fold": [66, 271, 285], "remove_fold": [66, 271, 285], "mbox": [66, 195, 200, 285, 466, 482], "mh": [66, 285, 466], "get_sequ": [66, 271, 285], "set_sequ": [66, 271, 285], "babyl": [66, 285], "get_label": [66, 271, 285], "mmdf": [66, 285], "maildirmessag": [66, 285], "get_subdir": [66, 271, 285], "set_subdir": [66, 271, 285], "get_flag": [66, 271, 285], "set_flag": [66, 271, 285], "add_flag": [66, 271, 285], "remove_flag": [66, 271, 285], "get_dat": [66, 132, 136, 271, 285], "set_dat": [66, 271, 285], "get_info": [66, 271, 285], "set_info": [66, 271, 285], "mboxmessag": [66, 204, 285], "get_from": [66, 271, 285], "set_from": [66, 271, 285], "mhmessag": [66, 285], "add_sequ": [66, 271, 285], "remove_sequ": [66, 271, 285], "babylmessag": [66, 285], "set_label": [66, 271, 285], "add_label": [66, 271, 285], "remove_label": [66, 271, 285], "get_vis": [66, 271, 285], "set_vis": [66, 271, 285], "update_vis": [66, 271, 285], "mmdfmessag": [66, 285], "nosuchmailboxerror": [66, 271, 285], "notemptyerror": [66, 271, 285], "externalclasherror": [66, 271, 285], "guess_typ": [66, 199, 244, 276, 285, 406, 482], "guess_all_extens": [66, 276, 285, 482], "guess_extens": [66, 199, 276, 285], "read_mime_typ": [66, 276, 285, 482], "add_typ": [66, 276, 285], "knownfil": [66, 276, 285], "suffix_map": [66, 276, 285], "encodings_map": [66, 276, 285, 482], "types_map": [66, 276, 285, 467, 482], "common_typ": [66, 276, 285], "types_map_inv": [66, 276, 285], "readfp": [66, 166, 276, 285, 468, 472, 473, 482], "read_windows_registri": [66, 276, 285], "base16": [66, 254, 285, 465], "base32": [66, 254, 285, 465, 471, 482], "base85": [66, 254, 285, 476, 482], "b64encod": [66, 143, 234, 285, 482], "b64decod": [66, 143, 234, 285, 475, 482], "standard_b64encod": [66, 143, 285], "standard_b64decod": [66, 143, 285], "urlsafe_b64encod": [66, 143, 285], "urlsafe_b64decod": [66, 143, 285], "b32encod": [66, 143, 285], "b32decod": [66, 143, 285, 476, 482], "b32hexencod": [66, 143, 285, 471, 482], "b32hexdecod": [66, 143, 285, 471, 482], "b16encod": [66, 143, 285], "b16decod": [66, 143, 285], "a85encod": [66, 143, 285, 476, 482], "a85decod": [66, 143, 285, 476, 482], "b85encod": [66, 143, 285, 476, 482], "b85decod": [66, 143, 285, 476], "decodebyt": [66, 143, 157, 285, 481, 482], "encodebyt": [66, 143, 157, 285, 481, 482], "a2b_uu": [66, 146, 285], "b2a_uu": [66, 146, 285, 479, 482], "a2b_base64": [66, 143, 146, 285, 482], "b2a_base64": [66, 146, 285, 478, 482], "a2b_qp": [66, 146, 285, 482], "b2a_qp": [66, 146, 285, 482], "crc_hqx": [66, 146, 285, 472, 482], "b2a_hex": [66, 146, 157, 285, 482], "hexlifi": [66, 146, 285, 482], "a2b_hex": [66, 146, 157, 285, 476], "unhexlifi": [66, 97, 146, 285, 482], "quopri": [66, 146, 157, 254, 285], "decodestr": [66, 285, 317, 481, 482], "encodestr": [66, 285, 317, 481, 482], "markup": [66, 216, 239, 254, 314, 409, 418, 467, 474, 475, 482], "hypertext": [66, 106, 239, 240, 254, 273, 409], "unescap": [66, 85, 102, 189, 237, 238, 273, 288, 319, 393, 416, 434, 476, 481, 482], "xhtml": [66, 106, 237, 238, 254, 273, 314, 394, 409, 410, 412, 474], "htmlparser": [66, 273, 469, 471, 475, 476, 477, 481, 482], "getpo": [66, 239, 273], "get_starttag_text": [66, 239, 273], "handle_starttag": [66, 239, 273], "handle_endtag": [66, 239, 273], "handle_startendtag": [66, 239, 273], "handle_data": [66, 239, 273], "handle_entityref": [66, 239, 273], "handle_charref": [66, 239, 273], "handle_com": [66, 239, 273], "handle_decl": [66, 239, 273], "handle_pi": [66, 239, 273], "unknown_decl": [66, 239, 273], "entiti": [66, 85, 102, 106, 237, 239, 241, 254, 268, 273, 314, 343, 394, 408, 409, 410, 411, 413, 414, 415, 416, 464, 475, 480, 482], "html5": [66, 238, 273, 475, 476, 482], "entitydef": [66, 238, 273], "name2codepoint": [66, 238, 239, 273], "codepoint2nam": [66, 238, 273], "vulner": [66, 105, 125, 136, 192, 273, 299, 314, 327, 331, 340, 348, 385, 410, 411, 412, 413, 418, 419, 423, 466, 482], "defusedxml": [66, 273], "pull": [66, 71, 182, 185, 273, 328, 383, 388, 411, 424, 461, 465, 468, 476, 479, 482], "xpath": [66, 273, 408, 481, 482], "canonic": [66, 273, 412, 480, 482], "fromstr": [66, 119, 273, 412, 474, 481, 482], "fromstringlist": [66, 273, 412, 474], "isel": [66, 273, 412], "iterpars": [66, 273, 412, 476, 482], "processinginstruct": [66, 273, 412, 414, 466], "register_namespac": [66, 273, 412, 468, 474], "subel": [66, 273, 412, 474], "tostr": [66, 119, 273, 412, 468, 474, 476, 481, 482], "tostringlist": [66, 273, 412, 474, 476, 482], "xmlid": [66, 273, 412], "xinclud": [66, 273, 482], "elementinclud": [66, 273, 412, 466], "default_load": [66, 273, 412], "attrib": [66, 273, 412, 466, 482], "findtext": [66, 273, 412, 482], "iterfind": [66, 273, 412, 474], "itertext": [66, 273, 412, 468, 474, 482], "makeel": [66, 273, 412], "_setroot": [66, 273, 412], "getroot": [66, 273, 412, 466], "qname": [66, 273, 409, 414, 415], "treebuild": [66, 273, 474, 480, 482], "doctyp": [66, 106, 239, 241, 273, 314, 394, 409, 412, 474, 480, 482], "start_n": [66, 273, 412, 480, 482], "end_n": [66, 273, 412, 480, 482], "c14nwritertarget": [66, 273, 412], "xmlparser": [66, 273, 468, 476, 480, 482], "xmlpullpars": [66, 273, 476, 482], "read_ev": [66, 273, 412], "parseerror": [66, 273, 412, 468, 474, 482], "registerdomimplement": [66, 273, 409], "getdomimplement": [66, 273, 409, 410], "empty_namespac": [66, 273, 409], "xml_namespac": [66, 273, 409], "xmlns_namespac": [66, 273, 409], "xhtml_namespac": [66, 273, 409], "domimplement": [66, 273], "hasfeatur": [66, 273, 409], "createdocu": [66, 273, 409, 410], "createdocumenttyp": [66, 273, 409], "nodetyp": [66, 273, 409, 410], "parentnod": [66, 273, 409], "previouss": [66, 273, 409], "nextsibl": [66, 273, 409], "childnod": [66, 273, 409, 410, 461], "firstchild": [66, 273, 409], "lastchild": [66, 273, 409], "localnam": [66, 273, 409, 414, 415, 482], "namespaceuri": [66, 273, 409, 415], "nodenam": [66, 273, 293, 303, 409], "nodevalu": [66, 273, 409], "hasattribut": [66, 273, 409], "haschildnod": [66, 273, 409], "issamenod": [66, 273, 409], "appendchild": [66, 273, 409, 410, 461], "insertbefor": [66, 273, 409, 461], "removechild": [66, 273, 409, 461], "replacechild": [66, 273, 409], "clonenod": [66, 273, 409, 482], "nodelist": [66, 273, 410, 427], "documenttyp": [66, 273], "publicid": [66, 273, 314, 409, 414], "systemid": [66, 273, 314, 409, 414], "internalsubset": [66, 273, 409], "documentel": [66, 273, 409, 410, 461], "createel": [66, 273, 409], "createelementn": [66, 273, 409], "createtextnod": [66, 273, 409, 410], "createcom": [66, 273, 409], "createprocessinginstruct": [66, 273, 409], "createattribut": [66, 273, 409], "createattributen": [66, 273, 409], "getelementsbytagnam": [66, 273, 409, 410, 461], "getelementsbytagnamen": [66, 273, 409], "tagnam": [66, 273, 278, 375, 409, 410, 411], "hasattributen": [66, 273, 409], "getattribut": [66, 273, 409, 411, 427], "getattributenod": [66, 273, 409], "getattributen": [66, 273, 409], "getattributenoden": [66, 273, 409], "removeattribut": [66, 273, 409], "removeattributenod": [66, 273, 409, 482], "removeattributen": [66, 273, 409], "setattribut": [66, 273, 409], "setattributenod": [66, 273, 409], "setattributenoden": [66, 273, 409], "setattributen": [66, 273, 409], "namednodemap": [66, 273], "cdatasect": [66, 273], "domexcept": [66, 273, 409, 410], "domstringsizeerr": [66, 273, 409], "hierarchyrequesterr": [66, 273, 409], "indexsizeerr": [66, 273, 409], "inuseattributeerr": [66, 273, 409], "invalidaccesserr": [66, 273, 409], "invalidcharactererr": [66, 273, 409], "invalidmodificationerr": [66, 273, 409], "invalidstateerr": [66, 273, 409], "namespaceerr": [66, 273, 409], "notfounderr": [66, 273, 409], "notsupportederr": [66, 273, 409], "nodataallowederr": [66, 273, 409], "nomodificationallowederr": [66, 273, 409], "syntaxerr": [66, 273, 409], "wrongdocumenterr": [66, 273, 409], "minidom": [66, 254, 273, 408, 409, 411, 461, 462, 464, 480, 482], "writexml": [66, 273, 410, 480], "toxml": [66, 273, 410, 411, 461, 464, 480], "toprettyxml": [66, 273, 410, 464, 480], "pulldom": [66, 254, 273, 408, 472, 480, 482], "sax2dom": [66, 273, 411], "default_bufs": [66, 273, 411], "domeventstream": [66, 273, 472, 480, 482], "getev": [66, 273, 411], "expandnod": [66, 273, 411], "make_pars": [66, 273, 411, 413, 415, 461, 482], "saxexcept": [66, 273], "saxparseexcept": [66, 273, 413, 414], "saxnotrecognizedexcept": [66, 273, 413, 415], "saxnotsupportedexcept": [66, 273, 413, 415], "getexcept": [66, 273, 413], "contenthandl": [66, 273, 411, 413, 415, 416, 461], "dtdhandler": [66, 273, 415], "entityresolv": [66, 273, 415], "errorhandl": [66, 273, 413, 415, 454, 467], "lexicalhandl": [66, 273, 465, 471, 482], "feature_namespac": [66, 273, 414], "feature_namespace_prefix": [66, 273, 414], "feature_string_intern": [66, 273, 414], "feature_valid": [66, 273, 414], "feature_external_g": [66, 273, 411, 413, 414], "feature_external_p": [66, 273, 414], "all_featur": [66, 273, 414], "property_lexical_handl": [66, 273, 414], "property_declaration_handl": [66, 273, 414], "property_dom_nod": [66, 273, 414], "property_xml_str": [66, 273, 414], "all_properti": [66, 273, 414], "setdocumentloc": [66, 273, 414], "startdocu": [66, 273, 414], "enddocu": [66, 273, 414], "startprefixmap": [66, 273, 414], "endprefixmap": [66, 273, 414], "startel": [66, 273, 414, 415, 461], "endel": [66, 273, 414, 461], "startelementn": [66, 273, 414, 415], "endelementn": [66, 273, 414], "ignorablewhitespac": [66, 273, 414], "skippedent": [66, 273, 414], "notationdecl": [66, 273, 414], "unparsedentitydecl": [66, 273, 414], "resolveent": [66, 273, 414, 415], "fatalerror": [66, 273, 414], "startdtd": [66, 273, 414, 465], "enddtd": [66, 273, 414], "startcdata": [66, 273, 414], "endcdata": [66, 273, 414], "saxutil": [66, 254, 273, 413], "quoteattr": [66, 273, 416], "xmlgener": [66, 273, 416], "xmlfilterbas": [66, 273, 416], "prepare_input_sourc": [66, 273, 416], "xmlreader": [66, 254, 273, 411, 413, 414, 416, 477], "incrementalpars": [66, 273], "inputsourc": [66, 273, 413, 414, 416, 477, 482], "attributesimpl": [66, 273, 415], "attributesnsimpl": [66, 273, 415], "getcontenthandl": [66, 273, 415], "setcontenthandl": [66, 273, 415, 461], "getdtdhandl": [66, 273, 415], "setdtdhandl": [66, 273, 415], "getentityresolv": [66, 273, 415], "setentityresolv": [66, 273, 415], "geterrorhandl": [66, 273, 415], "seterrorhandl": [66, 273, 415], "setlocal": [66, 85, 245, 258, 266, 273, 415, 451, 472, 477, 482], "getfeatur": [66, 273, 415], "setfeatur": [66, 273, 411, 413, 415], "getproperti": [66, 273, 281, 350, 415, 482], "setproperti": [66, 273, 281, 350, 414, 415], "getcolumnnumb": [66, 273, 415], "getlinenumb": [66, 273, 415], "getpublicid": [66, 273, 415], "getsystemid": [66, 273, 415], "setpublicid": [66, 273, 415], "setsystemid": [66, 273, 415], "setencod": [66, 273, 415], "setbytestream": [66, 273, 415], "getbytestream": [66, 273, 415], "setcharacterstream": [66, 273, 415], "getcharacterstream": [66, 273, 415], "getlength": [66, 273, 415], "gettyp": [66, 273, 415, 466], "attributesn": [66, 273, 413, 414], "getvaluebyqnam": [66, 273, 415], "getnamebyqnam": [66, 273, 415], "getqnamebynam": [66, 273, 415], "getqnam": [66, 273, 415], "expat": [66, 254, 273, 304, 408, 412, 414, 455, 461, 462, 464, 466, 468, 474, 482], "expaterror": [66, 273, 474], "xmlparsertyp": [66, 273, 314], "errorstr": [66, 273, 314], "parsercr": [66, 273, 314], "parsefil": [66, 273, 314], "setbas": [66, 273, 314], "getbas": [66, 273, 314], "getinputcontext": [66, 273, 314], "externalentityparsercr": [66, 273, 314], "setparamentitypars": [66, 273, 314], "useforeigndtd": [66, 273, 314], "buffer_s": [66, 139, 258, 273, 314, 467], "buffer_text": [66, 273, 314, 464], "buffer_us": [66, 273, 314], "ordered_attribut": [66, 273, 314], "specified_attribut": [66, 273, 314, 482], "errorbyteindex": [66, 273, 314], "errorcolumnnumb": [66, 273, 314], "errorlinenumb": [66, 273, 314], "currentbyteindex": [66, 273, 314], "currentcolumnnumb": [66, 273, 314], "currentlinenumb": [66, 273, 314], "xmldeclhandl": [66, 273, 314], "startdoctypedeclhandl": [66, 273, 314], "enddoctypedeclhandl": [66, 273, 314], "elementdeclhandl": [66, 273, 314], "attlistdeclhandl": [66, 273, 314], "startelementhandl": [66, 273, 314], "endelementhandl": [66, 273, 314], "processinginstructionhandl": [66, 273, 314], "characterdatahandl": [66, 273, 314], "unparsedentitydeclhandl": [66, 273, 314], "entitydeclhandl": [66, 273, 314], "notationdeclhandl": [66, 273, 314], "startnamespacedeclhandl": [66, 273, 314], "endnamespacedeclhandl": [66, 273, 314], "commenthandl": [66, 273, 314], "startcdatasectionhandl": [66, 273, 314], "endcdatasectionhandl": [66, 273, 314], "defaulthandl": [66, 273, 314], "defaulthandlerexpand": [66, 273, 314], "notstandalonehandl": [66, 273, 314], "externalentityrefhandl": [66, 273, 314], "xml_error_async_ent": [66, 273, 314], "xml_error_attribute_external_entity_ref": [66, 273, 314], "xml_error_bad_char_ref": [66, 273, 314], "xml_error_binary_entity_ref": [66, 273, 314], "xml_error_duplicate_attribut": [66, 273, 314], "xml_error_incorrect_encod": [66, 273, 314], "xml_error_invalid_token": [66, 273, 314], "xml_error_junk_after_doc_el": [66, 273, 314], "xml_error_misplaced_xml_pi": [66, 273, 314], "xml_error_no_el": [66, 273, 314], "xml_error_no_memori": [66, 273, 314], "xml_error_param_entity_ref": [66, 273, 314], "xml_error_partial_char": [66, 273, 314], "xml_error_recursive_entity_ref": [66, 273, 314], "xml_error_syntax": [66, 273, 314], "xml_error_tag_mismatch": [66, 273, 314], "xml_error_unclosed_token": [66, 273, 314], "xml_error_undefined_ent": [66, 273, 314], "xml_error_unknown_encod": [66, 273, 314], "xml_error_unclosed_cdata_sect": [66, 273, 314], "xml_error_external_entity_handl": [66, 273, 314], "xml_error_not_standalon": [66, 273, 314], "xml_error_unexpected_st": [66, 273, 314], "xml_error_entity_declared_in_p": [66, 273, 314], "xml_error_feature_requires_xml_dtd": [66, 273, 314], "xml_error_cant_change_feature_once_pars": [66, 273, 314], "xml_error_unbound_prefix": [66, 273, 314], "xml_error_undeclaring_prefix": [66, 273, 314], "xml_error_incomplete_p": [66, 273, 314], "xml_error_xml_decl": [66, 273, 314], "xml_error_text_decl": [66, 273, 314], "xml_error_publicid": [66, 273, 314], "xml_error_suspend": [66, 273, 314], "xml_error_not_suspend": [66, 273, 314], "xml_error_abort": [66, 273, 314], "xml_error_finish": [66, 273, 314], "xml_error_suspend_p": [66, 273, 314], "xml_error_reserved_prefix_xml": [66, 273, 314], "xml_error_reserved_prefix_xmln": [66, 273, 314], "xml_error_reserved_namespace_uri": [66, 273, 314], "xml_error_invalid_argu": [66, 273, 314], "xml_error_no_buff": [66, 273, 314], "xml_error_amplification_limit_breach": [66, 273, 314], "browser": [66, 93, 103, 105, 106, 121, 151, 152, 189, 243, 244, 246, 254, 256, 257, 264, 272, 308, 313, 352, 393, 394, 439, 455, 461, 462, 464, 465, 466, 467, 472, 474, 475, 478, 479, 482], "open_new": [66, 256, 402, 466], "open_new_tab": [66, 256, 402, 466], "wsgi": [66, 254, 256, 466, 472, 474, 482], "guess_schem": [66, 256, 406], "request_uri": [66, 256, 406], "application_uri": [66, 256, 406], "shift_path_info": [66, 256, 406], "setup_testing_default": [66, 256, 406], "is_hop_by_hop": [66, 256, 406], "filewrapp": [66, 256, 406, 472, 480, 482], "simple_serv": [66, 256, 466, 478, 482], "make_serv": [66, 256, 406, 466], "demo_app": [66, 256, 406], "wsgiserv": [66, 256, 406, 482], "set_app": [66, 256, 406], "get_app": [66, 256, 406], "wsgirequesthandl": [66, 256, 406, 482], "get_environ": [66, 256, 406], "get_stderr": [66, 256, 406], "checker": [66, 83, 101, 118, 176, 192, 256, 292, 344, 385, 427, 465, 466, 471, 472, 477, 478, 480, 481, 482], "cgihandl": [66, 256, 406], "iiscgihandl": [66, 256, 406], "basecgihandl": [66, 256, 406], "simplehandl": [66, 256, 406, 461], "basehandl": [66, 256, 388, 406, 482], "_write": [66, 256, 406], "_flush": [66, 256, 406], "get_stdin": [66, 256, 406], "add_cgi_var": [66, 256, 406], "wsgi_multithread": [66, 256, 406], "wsgi_multiprocess": [66, 256, 406], "wsgi_run_onc": [66, 256, 406], "os_environ": [66, 256, 406], "server_softwar": [66, 256, 406], "get_schem": [66, 256, 406], "setup_environ": [66, 256, 406], "log_except": [66, 256, 406], "traceback_limit": [66, 184, 256, 381, 406], "error_output": [66, 256, 406], "error_status": [66, 256, 406], "error_head": [66, 256, 406], "error_bodi": [66, 256, 406], "wsgi_file_wrapp": [66, 256, 406], "origin_serv": [66, 256, 406], "http_version": [66, 256, 406], "read_environ": [66, 256, 406, 474], "startrespons": [66, 256, 406], "wsgienviron": [66, 256, 406], "wsgiapplic": [66, 256, 406], "inputstream": [66, 256, 406, 482], "errorstream": [66, 256, 406], "url": [66, 83, 135, 142, 143, 151, 165, 166, 222, 240, 241, 242, 244, 246, 251, 254, 256, 269, 276, 313, 326, 344, 361, 395, 397, 398, 402, 406, 412, 415, 416, 418, 419, 425, 431, 461, 464, 465, 466, 467, 468, 474, 476, 477, 482], "urlopen": [66, 82, 106, 165, 168, 225, 242, 256, 307, 392, 393, 394, 450, 466, 467, 468, 474, 475, 476, 477, 482], "install_open": [66, 106, 256, 394], "build_open": [66, 106, 242, 256, 394], "pathname2url": [66, 256, 394], "url2pathnam": [66, 256, 394], "getproxi": [66, 106, 256, 394, 482], "openerdirector": [66, 106, 256, 476], "httpdefaulterrorhandl": [66, 106, 256, 394], "httpredirecthandl": [66, 106, 256], "httpcookieprocessor": [66, 242, 256, 465], "proxyhandl": [66, 106, 256, 482], "httppasswordmgr": [66, 106, 256, 482], "httppasswordmgrwithdefaultrealm": [66, 106, 256, 394], "httppasswordmgrwithpriorauth": [66, 256, 477, 482], "abstractbasicauthhandl": [66, 256, 388, 482], "httpbasicauthhandl": [66, 106, 256], "proxybasicauthhandl": [66, 256], "abstractdigestauthhandl": [66, 256, 388, 482], "httpdigestauthhandl": [66, 256], "proxydigestauthhandl": [66, 256], "httpshandler": [66, 256, 474], "datahandl": [66, 106, 256, 476], "ftphandler": [66, 106, 256], "cacheftphandl": [66, 256], "unknownhandl": [66, 106, 256], "httperrorprocessor": [66, 106, 256], "full_url": [66, 106, 256, 394, 476], "origin_req_host": [66, 242, 256, 394], "unverifi": [66, 241, 242, 256, 394], "get_method": [66, 256, 264, 351, 394, 475], "add_unredirected_head": [66, 242, 256, 394], "remove_head": [66, 256, 394, 476], "get_full_url": [66, 242, 256, 394], "set_proxi": [66, 256, 394, 418, 476], "get_head": [66, 242, 256, 385, 394], "header_item": [66, 242, 256, 394], "add_handl": [66, 106, 256, 394], "add_par": [66, 256, 394], "default_open": [66, 256, 394], "unknown_open": [66, 256, 394], "http_error_default": [66, 256, 394], "redirect_request": [66, 256, 394], "http_error_301": [66, 256, 394], "http_error_302": [66, 256, 394], "http_error_303": [66, 256, 394], "http_error_307": [66, 256, 394], "http_error_308": [66, 256, 394], "cookiejar": [66, 240, 243, 254, 256, 394, 482], "add_password": [66, 106, 256, 394], "find_user_password": [66, 256, 394, 482], "update_authent": [66, 256, 394], "is_authent": [66, 256, 394, 482], "http_error_auth_req": [66, 256, 394], "http_error_401": [66, 256, 394], "http_error_407": [66, 256, 394], "http_open": [66, 256, 394], "https_open": [66, 256, 394], "file_open": [66, 256, 394], "data_open": [66, 256, 394], "ftp_open": [66, 256, 394], "setmaxconn": [66, 256, 394], "http_respons": [66, 256, 394], "https_respons": [66, 256, 394], "urlretriev": [66, 256, 392, 394, 398, 482], "urlcleanup": [66, 256, 394, 482], "open_unknown": [66, 256, 394], "fancyurlopen": [66, 256, 394, 482], "prompt_user_passwd": [66, 256, 394], "addinfourl": [66, 256, 394, 482], "geturl": [66, 241, 256, 393, 394, 482], "getstatus": [66, 241, 256, 394, 476], "urlpars": [66, 256, 393, 398, 467, 468, 469, 474, 478, 482], "parse_q": [66, 151, 256, 393, 467, 471, 478, 479, 480, 481, 482], "parse_qsl": [66, 151, 256, 393, 467, 471, 478, 479, 480, 481, 482], "urlunpars": [66, 256, 393], "urlsplit": [66, 135, 256, 393, 468, 478, 482], "urlunsplit": [66, 256, 393], "urljoin": [66, 256, 393, 477, 482], "urldefrag": [66, 256, 393, 474], "splitresult": [66, 256, 393, 482], "defragresult": [66, 256, 393, 474, 482], "parseresult": [66, 256, 393, 468, 474, 482], "defragresultbyt": [66, 256, 393, 482], "parseresultbyt": [66, 256, 393, 474, 482], "splitresultbyt": [66, 256, 393, 482], "quote_plus": [66, 256, 393, 474], "quote_from_byt": [66, 256, 393, 482], "unquote_plus": [66, 256, 393], "unquote_to_byt": [66, 256, 393, 482], "urlencod": [66, 82, 106, 151, 241, 256, 269, 393, 394, 474, 477, 482], "urlerror": [66, 256, 392, 394, 467, 482], "httperror": [66, 225, 256, 392, 394, 476, 482], "contenttooshorterror": [66, 256, 392, 394], "robot": [66, 254, 256, 391, 461, 482], "robotfilepars": [66, 256, 395, 478, 482], "set_url": [66, 256, 395], "can_fetch": [66, 256, 395, 482], "crawl_delay": [66, 256, 395, 482], "request_r": [66, 256, 395, 482], "site_map": [66, 256, 395, 482], "httpstatus": [66, 240, 256, 477, 481, 482], "httpmethod": [66, 240, 256, 482], "httpconnect": [66, 256, 418, 467, 468, 474, 476, 477, 478, 479, 482], "httpsconnect": [66, 241, 256, 394, 467, 468, 474, 476, 479, 482], "httprespons": [66, 256, 394, 468, 475, 482], "parse_head": [66, 121, 151, 241, 244, 256, 350, 482], "httpexcept": [66, 241, 256], "notconnect": [66, 241, 256], "invalidurl": [66, 241, 256, 482], "unknownprotocol": [66, 241, 256], "unknowntransferencod": [66, 241, 256], "unimplementedfilemod": [66, 241, 256], "incompleteread": [66, 241, 256], "improperconnectionst": [66, 241, 256], "cannotsendrequest": [66, 241, 256], "cannotsendhead": [66, 241, 256], "responsenotreadi": [66, 241, 256], "badstatuslin": [66, 241, 256], "linetoolong": [66, 241, 256], "remotedisconnect": [66, 241, 256, 477, 482], "http_port": [66, 241, 256], "https_port": [66, 241, 256], "getrespons": [66, 241, 256, 477, 482], "set_debuglevel": [66, 222, 241, 256, 288, 305, 335, 350, 358, 477], "set_tunnel": [66, 241, 256, 418, 474, 482], "blocksiz": [66, 222, 241, 256, 293, 357, 479, 482], "putrequest": [66, 241, 256, 482], "puthead": [66, 241, 256], "endhead": [66, 241, 256, 478], "gethead": [66, 121, 241, 256], "debuglevel": [66, 241, 256, 335, 358, 394, 477, 482], "httpmessag": [66, 106, 244, 256], "ftp_tls": [66, 256, 468, 474, 475, 481, 482], "error_repli": [66, 222, 256], "error_temp": [66, 222, 256], "error_perm": [66, 222, 256], "error_proto": [66, 222, 256, 305, 475], "all_error": [66, 125, 222, 256, 337, 472, 482], "getwelcom": [66, 222, 256, 288, 305, 350], "login": [66, 99, 172, 222, 247, 256, 286, 288, 293, 310, 335, 339, 350, 358, 394, 474, 482], "sendcmd": [66, 142, 222, 256], "voidcmd": [66, 222, 256], "retrbinari": [66, 222, 256], "retrlin": [66, 222, 256], "set_pasv": [66, 222, 256, 462], "storbinari": [66, 222, 256, 467, 468], "storlin": [66, 222, 256, 467], "transfercmd": [66, 222, 256], "ntransfercmd": [66, 222, 256], "mlsd": [66, 222, 256, 475], "nlst": [66, 222, 256, 475], "mkd": [66, 222, 256], "pwd": [66, 108, 172, 222, 228, 232, 254, 256, 293, 294, 339, 348, 390, 421, 464, 481, 482], "rmd": [66, 222, 256], "ssl_version": [66, 222, 256, 341], "auth": [66, 222, 247, 256, 269, 335, 341, 464, 477, 482], "ccc": [66, 222, 256, 375, 475], "prot_p": [66, 222, 256], "prot_c": [66, 222, 256], "pop3": [66, 254, 256, 475, 476, 477, 481, 482], "pop3_ssl": [66, 256, 305, 474, 481, 482], "capa": [66, 256, 305, 476], "pass_": [66, 256, 305], "apop": [66, 256, 305], "rpop": [66, 256, 305], "retr": [66, 222, 256, 305], "dele": [66, 256, 305], "rset": [66, 256, 305, 335, 482], "noop": [66, 247, 256, 283, 305, 335, 482], "uidl": [66, 256, 305], "stls": [66, 256, 305, 476], "imap4": [66, 254, 256, 305, 474, 477, 478, 480, 481, 482], "imap4_ssl": [66, 247, 256, 475, 481, 482], "imap4_stream": [66, 247, 256, 481, 482], "internaldate2tupl": [66, 247, 256], "int2ap": [66, 247, 256], "parseflag": [66, 247, 256], "time2internald": [66, 247, 256], "deleteacl": [66, 247, 256, 465], "expung": [66, 247, 256], "getacl": [66, 247, 256, 463], "getannot": [66, 247, 256], "getquota": [66, 247, 256], "getquotaroot": [66, 247, 256], "login_cram_md5": [66, 247, 256], "logout": [66, 247, 256, 477, 480, 482], "lsub": [66, 247, 256], "myright": [66, 247, 256, 465], "proxyauth": [66, 247, 256], "recent": [66, 68, 71, 74, 82, 83, 87, 91, 92, 93, 96, 97, 99, 105, 112, 118, 124, 131, 144, 151, 159, 166, 168, 175, 182, 185, 187, 192, 209, 210, 213, 224, 225, 233, 239, 246, 247, 255, 256, 259, 267, 269, 283, 284, 293, 295, 296, 297, 299, 307, 314, 319, 335, 337, 340, 341, 344, 345, 347, 348, 352, 361, 374, 380, 381, 383, 386, 387, 388, 389, 393, 399, 401, 421, 426, 427, 429, 435, 439, 440, 441, 442, 445, 448, 451, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "setacl": [66, 247, 256, 463], "setannot": [66, 247, 256], "setquota": [66, 247, 256], "starttl": [66, 99, 247, 256, 269, 288, 335, 341, 350, 467, 474, 475, 482], "subscrib": [66, 99, 247, 256, 385, 427, 482], "unsubscrib": [66, 247, 256, 482], "unselect": [66, 247, 256, 481, 482], "xatom": [66, 247, 256], "protocol_vers": [66, 244, 247, 256], "utf8_en": [66, 247, 256, 477], "smtp_ssl": [66, 256, 335, 467, 475, 481, 482], "lmtp": [66, 256, 335, 467, 475, 481, 482], "smtpexcept": [66, 256, 335, 476], "smtpserverdisconnect": [66, 256, 335, 482], "smtpresponseexcept": [66, 256, 335], "smtpsenderrefus": [66, 256, 335], "smtprecipientsrefus": [66, 256, 335], "smtpdataerror": [66, 256, 335], "smtpconnecterror": [66, 256, 335], "smtpheloerror": [66, 256, 335], "smtpnotsupportederror": [66, 256, 335, 482], "smtpauthenticationerror": [66, 256, 335], "docmd": [66, 256, 335], "helo": [66, 256, 335], "ehlo": [66, 256, 335, 475], "ehlo_or_helo_if_need": [66, 256, 335], "has_extn": [66, 256, 335], "sendmail": [66, 82, 99, 102, 200, 207, 256, 319, 335, 450, 474, 477], "send_messag": [66, 199, 207, 256, 335, 474, 477, 482], "rfc": [66, 98, 99, 102, 106, 125, 143, 146, 157, 174, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 222, 229, 234, 236, 240, 241, 242, 243, 244, 247, 254, 256, 259, 262, 266, 269, 271, 272, 288, 305, 317, 327, 335, 337, 341, 346, 347, 358, 365, 392, 393, 394, 406, 407, 418, 450, 461, 463, 465, 466, 467, 468, 474, 475, 477, 479, 481, 482], "4122": [66, 254, 256, 466], "safeuuid": [66, 256, 397, 482], "bytes_l": [66, 256, 397], "urn": [66, 256, 393, 397], "is_saf": [66, 256, 397, 479, 482], "getnod": [66, 256, 397, 479, 482], "uuid1": [66, 256, 397, 466, 479, 482], "uuid3": [66, 256, 397, 466], "uuid4": [66, 256, 397, 466, 482], "uuid5": [66, 256, 397, 466], "namespace_dn": [66, 256, 397, 466], "namespace_url": [66, 256, 397], "namespace_oid": [66, 256, 397], "namespace_x500": [66, 256, 397], "reserved_nc": [66, 256, 397], "rfc_4122": [66, 256, 397], "reserved_microsoft": [66, 256, 397], "reserved_futur": [66, 256, 397], "tcpserver": [66, 99, 244, 256, 267, 419, 468, 482], "udpserv": [66, 256], "unixstreamserv": [66, 256, 338, 482], "unixdatagramserv": [66, 256, 338], "forkingmixin": [66, 256, 338, 475, 479, 482], "threadingmixin": [66, 244, 256, 338, 479, 482], "forkingtcpserv": [66, 256, 338], "forkingudpserv": [66, 256, 338], "threadingtcpserv": [66, 99, 256, 338], "threadingudpserv": [66, 256, 338], "baseserv": [66, 256, 338, 475, 482], "handle_request": [66, 99, 121, 169, 256, 333, 338, 406, 419, 468], "service_act": [66, 256, 338, 475], "server_clos": [66, 256, 338, 406, 479, 482], "address_famili": [66, 256, 337, 338], "requesthandlerclass": [66, 244, 256, 338, 406], "server_address": [66, 244, 256, 338, 406], "allow_reuse_address": [66, 99, 256, 338, 419, 467], "request_queue_s": [66, 256, 338], "socket_typ": [66, 256, 338], "finish_request": [66, 256, 338], "get_request": [66, 256, 338], "handle_error": [66, 139, 256, 338, 350, 478, 482], "handle_timeout": [66, 256, 338, 467, 468], "process_request": [66, 99, 256, 338], "server_activ": [66, 256, 338, 419, 467], "server_bind": [66, 256, 338, 419, 467], "verify_request": [66, 256, 338, 482], "baserequesthandl": [66, 256, 338], "streamrequesthandl": [66, 99, 256, 338, 478, 482], "datagramrequesthandl": [66, 256, 338], "mixin": [66, 92, 160, 168, 256, 258, 361, 394, 482], "httpserver": [66, 244, 256, 333, 406], "threadinghttpserv": [66, 244, 256, 479, 482], "basehttprequesthandl": [66, 106, 241, 244, 256, 392, 406, 474, 475, 482], "client_address": [66, 244, 256, 338, 406], "close_connect": [66, 244, 256], "requestlin": [66, 244, 256], "request_vers": [66, 244, 256], "rfile": [66, 244, 256, 338], "wfile": [66, 244, 256, 338, 478, 482], "server_vers": [66, 244, 256], "sys_vers": [66, 244, 256], "error_message_format": [66, 244, 256, 476], "error_content_typ": [66, 244, 256], "messageclass": [66, 244, 256], "handle_one_request": [66, 244, 256], "handle_expect_100": [66, 244, 256], "send_error": [66, 244, 256, 476, 482], "send_respons": [66, 244, 256], "send_head": [66, 244, 256], "send_response_on": [66, 244, 256], "end_head": [66, 244, 256, 475], "flush_head": [66, 244, 256, 475], "log_request": [66, 244, 256], "log_error": [66, 244, 256], "log_messag": [66, 244, 256], "version_str": [66, 244, 256], "date_time_str": [66, 244, 256], "log_date_time_str": [66, 244, 256], "address_str": [66, 244, 256], "simplehttprequesthandl": [66, 244, 256, 333, 479, 482], "extensions_map": [66, 244, 256], "do_head": [66, 155, 244, 256], "do_get": [66, 244, 256], "cgihttprequesthandl": [66, 244, 256, 482], "cgi_directori": [66, 244, 256], "do_post": [66, 244, 256], "cooki": [66, 106, 113, 234, 240, 254, 256, 341, 364, 377, 394, 465, 467, 468, 469, 477, 479, 482], "cookieerror": [66, 243, 256], "basecooki": [66, 243, 256], "simplecooki": [66, 243, 256, 482], "value_decod": [66, 243, 256], "value_encod": [66, 243, 256], "js_output": [66, 243, 256], "morsel": [66, 256, 467, 477, 479, 482], "coded_valu": [66, 243, 256, 477, 479, 482], "isreservedkey": [66, 243, 256], "outputstr": [66, 243, 256], "loaderror": [66, 242, 256], "filecookiejar": [66, 256, 482], "cookiepolici": [66, 256], "defaultcookiepolici": [66, 256, 482], "add_cookie_head": [66, 242, 256], "extract_cooki": [66, 242, 256], "set_polici": [66, 242, 256], "make_cooki": [66, 242, 256, 482], "set_cookie_if_ok": [66, 242, 256], "set_cooki": [66, 242, 256], "clear_session_cooki": [66, 242, 256], "revert": [66, 99, 169, 210, 222, 241, 242, 256, 324, 361, 454, 468, 475, 478, 482], "delayload": [66, 242, 256], "mozillacookiejar": [66, 242, 256, 482], "lwpcookiejar": [66, 242, 256, 482], "set_ok": [66, 242, 256], "return_ok": [66, 242, 256], "domain_return_ok": [66, 242, 256], "path_return_ok": [66, 242, 256], "netscap": [66, 176, 242, 256, 271, 402, 425, 462, 465, 467, 482], "rfc2965": [66, 242, 256], "hide_cookie2": [66, 242, 256], "blocked_domain": [66, 242, 256], "set_blocked_domain": [66, 242, 256], "is_block": [66, 242, 256], "allowed_domain": [66, 242, 256], "set_allowed_domain": [66, 242, 256], "is_not_allow": [66, 242, 256], "rfc2109_as_netscap": [66, 242, 256], "strict_domain": [66, 242, 256], "strict_rfc2965_unverifi": [66, 242, 256], "strict_ns_unverifi": [66, 242, 256], "strict_ns_domain": [66, 242, 256], "strict_ns_set_initial_dollar": [66, 242, 256], "strict_ns_set_path": [66, 242, 256], "domainstrictnodot": [66, 242, 256], "domainstrictnondomain": [66, 242, 256], "domainrfc2965match": [66, 242, 256], "domainliber": [66, 242, 256], "domainstrict": [66, 242, 256], "comment_url": [66, 242, 256], "rfc2109": [66, 242, 256], "port_specifi": [66, 242, 256], "domain_specifi": [66, 242, 256], "domain_initial_dot": [66, 242, 256], "has_nonstandard_attr": [66, 242, 256], "get_nonstandard_attr": [66, 242, 256], "set_nonstandard_attr": [66, 242, 256], "is_expir": [66, 242, 256], "rpc": [66, 78, 246, 254, 256, 262, 274, 417, 425, 463, 464, 465, 466, 467, 468, 478, 482], "serverproxi": [66, 256, 419, 477, 480, 482], "listmethod": [66, 256, 418, 419], "methodsignatur": [66, 256, 418, 419], "methodhelp": [66, 256, 418, 419], "faultcod": [66, 256, 418, 482], "faultstr": [66, 256, 418], "protocolerror": [66, 256], "errmsg": [66, 256, 418], "multical": [66, 256, 419], "simplexmlrpcserv": [66, 256, 418, 463, 465, 466, 467, 468, 469], "cgixmlrpcrequesthandl": [66, 256, 465], "simplexmlrpcrequesthandl": [66, 256, 419, 465, 468], "register_funct": [66, 256, 418, 419, 479, 482], "register_inst": [66, 256, 419], "register_introspection_funct": [66, 256, 419], "register_multicall_funct": [66, 256, 418, 419], "rpc_path": [66, 256, 419, 466], "docxmlrpcserv": [66, 256, 464, 466, 467, 469, 482], "doccgixmlrpcrequesthandl": [66, 256], "docxmlrpcrequesthandl": [66, 256, 419], "set_server_titl": [66, 256, 419], "set_server_nam": [66, 256, 419], "set_server_document": [66, 256, 419], "ipv4": [66, 96, 103, 125, 244, 254, 256, 337, 341, 467, 475, 480, 481, 482], "ipv6": [66, 96, 125, 244, 254, 256, 337, 341, 361, 393, 455, 463, 467, 468, 470, 474, 475, 477, 480, 481, 482], "ip_address": [66, 96, 142, 256, 259, 337], "ip_network": [66, 96, 256, 259], "ip_interfac": [66, 96, 256, 259, 482], "ip": [66, 78, 98, 99, 125, 147, 242, 244, 256, 267, 269, 337, 338, 341, 358, 361, 393, 394, 461, 467, 474, 475, 477, 479, 482], "ipv4address": [66, 96, 256, 259, 477, 482], "max_prefixlen": [66, 256, 259], "explod": [66, 96, 256, 259, 461, 463], "reverse_point": [66, 256, 259, 477, 482], "is_multicast": [66, 256, 259, 482], "is_priv": [66, 256, 259, 482], "is_glob": [66, 256, 259, 264, 351, 476, 482], "is_unspecifi": [66, 256, 259], "is_loopback": [66, 256, 259], "is_link_loc": [66, 256, 259], "ipv6address": [66, 96, 256, 259, 477, 481, 482], "is_site_loc": [66, 256, 259], "ipv4_map": [66, 256, 259], "scope_id": [66, 256, 259, 337, 481], "sixtofour": [66, 256, 259], "teredo": [66, 256, 259], "net": [66, 79, 82, 106, 108, 182, 193, 234, 242, 256, 293, 319, 328, 423, 425, 433, 460, 461, 462, 463, 464, 465, 466, 467, 469, 475, 482], "ipv4network": [66, 96, 256, 259, 477, 479, 482], "network_address": [66, 256, 259], "broadcast_address": [66, 256, 259], "hostmask": [66, 96, 256, 259], "netmask": [66, 96, 256, 259, 477, 482], "with_prefixlen": [66, 256, 259], "with_netmask": [66, 256, 259], "with_hostmask": [66, 256, 259], "num_address": [66, 96, 256, 259], "prefixlen": [66, 256, 259], "address_exclud": [66, 256, 259], "subnet": [66, 256, 259, 475, 477, 482], "supernet": [66, 256, 259, 477], "subnet_of": [66, 256, 259, 479, 482], "supernet_of": [66, 256, 259, 479], "compare_network": [66, 256, 259], "ipv6network": [66, 96, 256, 259, 477, 479, 482], "ipv4interfac": [66, 96, 256, 259, 482], "ipv6interfac": [66, 96, 256, 259, 482], "v4_int_to_pack": [66, 256, 259], "v6_int_to_pack": [66, 256, 259], "summarize_address_rang": [66, 256, 259, 477, 482], "collapse_address": [66, 256, 259, 477, 482], "get_mixed_type_key": [66, 256, 259], "addressvalueerror": [66, 96, 256, 259], "netmaskvalueerror": [66, 96, 256, 259], "multimedia": [66, 254, 272, 295], "wav": [66, 141, 205, 254, 277, 336, 405, 449], "wave_read": [66, 277], "getnchannel": [66, 115, 277, 349, 350, 400], "getsampwidth": [66, 115, 277, 349, 350, 400], "getframer": [66, 115, 277, 349, 350, 400], "getnfram": [66, 115, 277, 349, 350, 400], "getcomptyp": [66, 115, 277, 349, 350, 400], "getcompnam": [66, 115, 277, 349, 350, 400], "getparam": [66, 115, 277, 349, 350, 400, 476], "readfram": [66, 115, 277, 349, 350, 400], "rewind": [66, 115, 235, 277, 349, 350, 400], "getmark": [66, 115, 277, 349, 350, 400], "setpo": [66, 115, 221, 277, 349, 350, 383, 400], "wave_writ": [66, 277], "setnchannel": [66, 115, 277, 349, 350, 400], "setsampwidth": [66, 115, 277, 349, 350, 400, 476], "setframer": [66, 115, 277, 349, 350, 400], "setnfram": [66, 115, 277, 349, 350, 400], "setcomptyp": [66, 115, 277, 349, 350, 400], "setparam": [66, 115, 277, 349, 350, 400], "writeframesraw": [66, 115, 277, 349, 350, 400, 476], "writefram": [66, 115, 277, 349, 350, 400, 476], "rgb_to_yiq": [66, 161, 277], "yiq_to_rgb": [66, 161, 277], "rgb_to_hl": [66, 161, 277], "hls_to_rgb": [66, 161, 277], "rgb_to_hsv": [66, 161, 277], "hsv_to_rgb": [66, 161, 277], "multilingu": [66, 245, 246, 254, 482], "bindtextdomain": [66, 229, 245, 266], "textdomain": [66, 229, 245, 266], "dgettext": [66, 229, 245, 266], "ngettext": [66, 229, 245], "dngettext": [66, 229, 245], "pgettext": [66, 229, 245, 480, 482], "dpgettext": [66, 229, 245], "npgettext": [66, 229, 245], "dnpgettext": [66, 229, 245], "nulltransl": [66, 245], "_pars": [66, 229, 245], "add_fallback": [66, 229, 245], "gnutransl": [66, 245], "catalog": [66, 245, 461, 462, 464, 482], "localeconv": [66, 245, 266, 344, 451, 478, 479, 482], "d_t_fmt": [66, 245, 266], "d_fmt": [66, 245, 266], "t_fmt": [66, 245, 266], "t_fmt_ampm": [66, 245, 266], "radixchar": [66, 245, 266], "thousep": [66, 245, 266], "yesexpr": [66, 245, 266], "noexpr": [66, 245, 266], "crncystr": [66, 245, 266], "era": [66, 245, 266, 466], "era_d_t_fmt": [66, 245, 266], "era_d_fmt": [66, 245, 266], "era_t_fmt": [66, 245, 266], "alt_digit": [66, 245, 266], "getdefaultlocal": [66, 245, 266, 454, 472, 473, 482], "getlocal": [66, 182, 245, 266, 472, 482], "getpreferredencod": [66, 118, 245, 258, 266, 293, 348, 472, 473, 479, 482], "resetlocal": [66, 245, 266, 472, 482], "strcoll": [66, 104, 225, 245, 266, 474], "strxfrm": [66, 85, 104, 245, 266], "format_str": [66, 245, 266, 345, 451, 466, 473, 477, 479, 482], "currenc": [66, 185, 245, 266, 466, 482], "deloc": [66, 245, 266, 477, 482], "atof": [66, 245, 266, 465, 466], "atoi": [66, 70, 245, 266], "lc_collat": [66, 245, 266], "lc_time": [66, 150, 245, 266], "lc_monetari": [66, 245, 266, 482], "lc_messag": [66, 229, 245, 266], "lc_numer": [66, 245, 266, 344, 477, 478, 479, 482], "lc_all": [66, 229, 245, 266, 361, 451, 454, 472, 479, 482], "char_max": [66, 245, 266], "tip": [66, 83, 224, 245, 246, 461, 468, 482], "dcgettext": [66, 229, 245, 266], "turtl": [66, 155, 221, 246, 254, 368, 467, 469, 472, 473, 474, 482], "screen": [66, 83, 90, 93, 95, 105, 155, 176, 178, 221, 246, 320, 348, 368, 374, 375, 377, 461, 463, 464, 467, 471, 474, 477, 481, 482], "turtlescreen": [66, 221], "rawturtl": [66, 221, 472, 473, 482], "motion": [66, 176, 221, 343, 370], "bk": [66, 221, 383], "rt": [66, 149, 221, 224, 233, 270, 361, 383, 482], "setposit": [66, 221, 383], "setx": [66, 91, 221, 224, 383, 460], "seti": [66, 221, 383], "sethead": [66, 221, 383], "seth": [66, 221, 383, 482], "circl": [66, 92, 155, 221, 275, 383, 467], "stamp": [66, 182, 221, 383, 464, 465, 482], "clearstamp": [66, 221, 383], "toward": [66, 83, 146, 185, 192, 195, 204, 217, 220, 221, 224, 267, 275, 344, 363, 365, 383, 427, 462, 464, 466, 467, 473, 476, 481, 482], "xcor": [66, 221, 383], "ycor": [66, 221, 383], "distanc": [66, 118, 154, 155, 221, 270, 275, 343, 368, 371, 383, 472, 480, 482], "measur": [66, 90, 91, 101, 132, 139, 141, 154, 184, 185, 189, 221, 225, 254, 299, 308, 322, 334, 338, 343, 365, 367, 368, 371, 381, 440, 461, 464, 465, 466, 467, 468, 472, 475, 476, 479, 480, 481, 482], "pen": [66, 221], "draw": [66, 90, 155, 176, 221, 246, 318, 375, 467, 482], "pendown": [66, 221, 383], "pd": [66, 221, 383], "penup": [66, 221, 383], "pu": [66, 221, 383], "pensiz": [66, 221, 383], "isdown": [66, 221, 383], "color": [66, 83, 85, 92, 99, 155, 159, 161, 176, 188, 210, 221, 239, 254, 331, 367, 368, 374, 375, 377, 404, 427, 440, 441, 471, 472, 474, 478, 479, 482], "pencolor": [66, 221, 383], "fillcolor": [66, 221, 383], "begin_fil": [66, 221, 383], "end_fil": [66, 221, 383], "hideturtl": [66, 221, 383], "ht": [66, 177, 221, 343, 383], "showturtl": [66, 221, 383], "st": [66, 221, 383, 464, 478, 479, 482], "isvis": [66, 221, 383], "resizemod": [66, 221, 383], "shapes": [66, 221, 383], "turtles": [66, 221, 383], "shearfactor": [66, 221, 383], "tilt": [66, 221, 383], "settiltangl": [66, 221, 383, 472, 473, 482], "tiltangl": [66, 221, 383, 472, 482], "shapetransform": [66, 221, 383], "get_shapepoli": [66, 221, 383], "onreleas": [66, 221, 383], "ondrag": [66, 221, 383], "begin_poli": [66, 221, 383], "end_poli": [66, 221, 383], "get_poli": [66, 221, 383], "getturtl": [66, 221, 383], "getpen": [66, 221, 383], "getscreen": [66, 221, 383], "setundobuff": [66, 221, 383], "undobufferentri": [66, 221, 383], "bgcolor": [66, 221, 383], "bgpic": [66, 221, 383], "clearscreen": [66, 221, 383], "resetscreen": [66, 221, 383], "screensiz": [66, 221, 383], "setworldcoordin": [66, 221, 383], "anim": [66, 92, 221, 229, 375, 445, 467, 477], "tracer": [66, 221, 379, 383, 467, 482], "onkey": [66, 221, 383], "onkeyreleas": [66, 221, 383], "onkeypress": [66, 221, 383], "onclick": [66, 221, 383], "onscreenclick": [66, 221, 383], "ontim": [66, 221, 383], "mainloop": [66, 79, 103, 221, 246, 368, 375, 383, 482], "textinput": [66, 221, 383, 482], "numinput": [66, 221, 383, 482], "colormod": [66, 221, 383], "getcanva": [66, 221, 383], "getshap": [66, 221, 383], "register_shap": [66, 221, 383], "addshap": [66, 221, 383], "window_height": [66, 221, 383], "window_width": [66, 221, 383], "bye": [66, 155, 169, 221, 247, 288, 383, 475], "exitonclick": [66, 221, 383], "rawpen": [66, 221, 383], "scrolledcanva": [66, 221, 383], "addcompon": [66, 221, 383], "vec2d": [66, 221, 383, 482], "write_docstringdict": [66, 221, 383], "cmdloop": [66, 155, 221], "onecmd": [66, 155, 221], "emptylin": [66, 155, 221], "completedefault": [66, 155, 221], "precmd": [66, 155, 221], "postcmd": [66, 155, 221], "preloop": [66, 155, 221], "postloop": [66, 155, 221], "identchar": [66, 155, 221], "lastcmd": [66, 155, 221], "cmdqueue": [66, 155, 221], "intro": [66, 155, 221, 341, 458, 468], "doc_head": [66, 155, 221], "misc_head": [66, 155, 221], "undoc_head": [66, 155, 221], "ruler": [66, 155, 221], "use_rawinput": [66, 155, 221], "get_token": [66, 221, 331], "push_token": [66, 221, 331], "read_token": [66, 221, 331], "sourcehook": [66, 221, 331], "push_sourc": [66, 221, 331], "pop_sourc": [66, 221, 331], "error_lead": [66, 221, 331], "wordchar": [66, 221, 331], "escapedquot": [66, 221, 331], "whitespace_split": [66, 221, 331], "infil": [66, 118, 120, 140, 221, 262, 301, 331, 379, 451, 470, 474, 482], "instream": [66, 221, 331], "punctuation_char": [66, 221, 331, 478, 482], "tcl": [66, 79, 246, 254, 367, 374, 375, 451, 458, 460, 461, 464, 467, 468, 471, 472, 474, 477, 478, 480, 481, 482], "master": [66, 102, 105, 188, 192, 292, 293, 295, 299, 309, 319, 367, 368, 369, 372, 373, 375, 383, 467, 482], "children": [66, 83, 98, 100, 120, 131, 264, 267, 283, 293, 296, 312, 314, 322, 361, 367, 368, 375, 387, 388, 389, 409, 410, 411, 412, 421, 461, 468, 479, 482], "life": [66, 85, 88, 166, 225, 284, 299, 340, 357, 367, 409, 421, 440, 460, 461, 467, 480, 482], "concept": [66, 90, 93, 96, 97, 98, 101, 105, 108, 114, 138, 166, 185, 193, 243, 250, 258, 261, 283, 301, 309, 340, 344, 357, 364, 367, 385, 389, 411, 412, 426, 431, 463, 464, 469, 471, 472, 475, 476, 477, 482], "handi": [66, 83, 90, 91, 92, 100, 101, 102, 103, 108, 112, 150, 166, 175, 189, 292, 344, 367, 388, 461, 465], "packer": [66, 350, 367], "coupl": [66, 73, 83, 88, 99, 101, 103, 108, 118, 125, 204, 207, 208, 267, 283, 292, 333, 367, 388, 389, 394, 408, 460, 476, 478, 479, 482], "createfilehandl": [66, 367, 368, 482], "deletefilehandl": [66, 367, 368], "colorchoos": [66, 254, 367, 368, 482], "choos": [66, 71, 73, 82, 83, 87, 88, 93, 99, 101, 102, 103, 105, 108, 118, 157, 162, 192, 204, 224, 225, 234, 244, 250, 254, 267, 275, 284, 292, 295, 299, 308, 340, 341, 347, 352, 364, 367, 368, 374, 388, 397, 412, 431, 460, 463, 464, 468, 474, 475, 476, 479, 482], "dialog": [66, 75, 90, 246, 254, 281, 292, 350, 361, 367, 368, 374, 383, 460, 471, 476, 477, 478, 479, 480, 481, 482], "chooser": [66, 367, 369], "askcolor": [66, 367, 369], "font": [66, 99, 105, 166, 211, 246, 254, 363, 367, 368, 374, 375, 383, 471, 478, 479, 481, 482], "bold": [66, 90, 150, 176, 367, 368, 371], "ital": [66, 150, 176, 367, 371], "roman": [66, 105, 367, 371, 386, 464, 482], "cget": [66, 367, 371, 375], "metric": [66, 83, 367, 371, 482], "nametofont": [66, 367, 371, 482], "simpledialog": [66, 367, 368, 482], "askfloat": [66, 188, 367], "askinteg": [66, 188, 367, 482], "askstr": [66, 188, 367], "buttonbox": [66, 188, 367, 374], "filedialog": [66, 367, 368], "askopenfil": [66, 188, 367], "asksaveasfil": [66, 188, 367], "askopenfilenam": [66, 188, 367], "asksaveasfilenam": [66, 188, 367], "askdirectori": [66, 188, 367], "savea": [66, 188, 367], "cancel_command": [66, 188, 367], "dirs_double_ev": [66, 188, 367], "dirs_select_ev": [66, 188, 367], "files_double_ev": [66, 188, 367], "files_select_ev": [66, 188, 367], "filter_command": [66, 188, 367], "get_filt": [66, 188, 367], "get_select": [66, 188, 367], "ok_ev": [66, 188, 367], "set_filt": [66, 188, 367], "set_select": [66, 188, 367], "loadfiledialog": [66, 188, 367], "ok_command": [66, 188, 367], "savefiledialog": [66, 188, 367], "commondialog": [66, 367, 368, 369], "messagebox": [66, 175, 188, 254, 367, 368, 482], "showinfo": [66, 367, 372], "showwarn": [66, 315, 367, 372, 399, 467, 482], "showerror": [66, 367, 372], "askquest": [66, 367, 372], "askokcancel": [66, 367, 372], "askretrycancel": [66, 367, 372], "askyesno": [66, 367, 372], "askyesnocancel": [66, 367, 372], "scrolledtext": [66, 254, 367, 368], "vbar": [66, 264, 367, 373, 376], "dnd": [66, 254, 367, 368], "drag": [66, 254, 367, 368, 374, 375, 383, 471, 482], "dndhandler": [66, 367, 370], "on_mot": [66, 367, 370], "on_releas": [66, 367, 370], "dnd_start": [66, 367, 370], "scrollabl": [66, 246, 367, 374], "instat": [66, 367, 375], "combobox": [66, 367, 374], "spinbox": [66, 367, 374, 479, 480, 482], "notebook": [66, 367, 374, 480, 482], "enable_travers": [66, 367, 375], "progressbar": [66, 367], "sizegrip": [66, 367], "treeview": [66, 367, 480, 482], "bbox": [66, 367, 375], "get_children": [66, 264, 351, 367, 375], "set_children": [66, 367, 375], "focus": [66, 79, 83, 97, 103, 106, 182, 188, 207, 246, 357, 367, 368, 375, 383, 393, 466, 468, 472, 474, 475, 476, 478, 482], "identify_row": [66, 367, 375], "identify_column": [66, 367, 375], "identify_region": [66, 367, 375], "identify_el": [66, 367, 375], "prev": [66, 176, 367, 375], "reattach": [66, 367, 375], "selection_set": [66, 367, 375, 480, 482], "selection_add": [66, 367, 375, 482], "selection_remov": [66, 367, 375, 482], "selection_toggl": [66, 367, 375, 482], "tag_bind": [66, 367, 375], "tag_configur": [66, 367, 375], "tag_ha": [66, 367, 375, 482], "xview": [66, 367, 375], "yview": [66, 367, 375], "element_cr": [66, 367, 375], "element_nam": [66, 367, 375], "element_opt": [66, 367, 375], "theme_cr": [66, 367, 375], "theme_set": [66, 367, 375], "theme_nam": [66, 367, 375], "theme_us": [66, 367, 375], "tix": [66, 79, 254, 367, 368, 464, 478, 482], "balloon": [66, 367, 374], "labelentri": [66, 367, 374], "labelfram": [66, 367, 374, 375], "meter": [66, 92, 367, 374], "optionmenu": [66, 367, 374, 482], "popupmenu": [66, 367, 374], "stdbuttonbox": [66, 367, 374], "dirlist": [66, 367, 374], "dirtre": [66, 367, 374], "dirselectdialog": [66, 367, 374], "dirselectbox": [66, 367, 374], "exfileselectbox": [66, 367, 374], "fileselectbox": [66, 367, 374], "fileentri": [66, 367, 374], "hierarch": [66, 98, 244, 249, 267, 268, 367, 368, 375, 393, 411, 412, 419, 431], "listbox": [66, 367, 375, 482], "hlist": [66, 367, 374, 482], "checklist": [66, 367, 374], "tabular": [66, 174, 367], "tlist": [66, 367, 374], "panedwindow": [66, 367, 374, 375, 482], "listnotebook": [66, 367, 374], "inputon": [66, 367, 374], "geometri": [66, 367, 368, 373, 375, 482], "tixcommand": [66, 367, 374], "tix_configur": [66, 367, 374], "tix_cget": [66, 367, 374], "tix_getbitmap": [66, 367, 374], "tix_addbitmapdir": [66, 367, 374], "tix_filedialog": [66, 367, 374], "tix_getimag": [66, 367, 374], "tix_option_get": [66, 367, 374], "tix_resetopt": [66, 367, 374], "menu": [66, 90, 367, 368, 374, 383, 427, 460, 466, 470, 471, 474, 478, 479, 480, 481, 482], "menus": [66, 367, 368, 482], "calltip": [66, 367, 482], "newtyp": [66, 186, 478, 482], "nomin": [66, 120, 186, 343, 482], "literalstr": [66, 186, 385, 472, 482], "noreturn": [66, 186, 385, 482], "classvar": [66, 180, 186, 385, 472, 478, 482], "notrequir": [66, 186, 385, 472, 482], "typeguard": [66, 186, 385, 471, 482], "typevar": [66, 186, 344, 385, 472, 482], "typevartupl": [66, 186, 344, 385, 472, 482], "paramspec": [66, 186, 344, 385, 471, 482], "paramspecarg": [66, 186, 385, 471, 482], "paramspeckwarg": [66, 186, 385, 471, 482], "anystr": [66, 186, 385], "runtime_check": [66, 186, 385, 471, 480, 482], "__total__": [66, 186, 385], "__required_keys__": [66, 186, 385, 482], "__optional_keys__": [66, 186, 385, 482], "textio": [66, 186, 252, 385, 482], "binaryio": [66, 186, 252, 385, 482], "abstractset": [66, 186, 385], "asynccontextmanag": [66, 168, 186, 315, 385, 389, 427, 479, 482], "supportsab": [66, 186, 385], "supportsbyt": [66, 186, 385, 472, 482], "supportscomplex": [66, 186, 385, 472, 482], "supportsfloat": [66, 186, 385], "supportsindex": [66, 186, 385, 480, 482], "supportsint": [66, 186, 220, 385, 472, 480, 482], "supportsround": [66, 186, 385], "assert_typ": [66, 186, 385, 472, 482], "assert_nev": [66, 186, 385, 472, 482], "reveal_typ": [66, 186, 385, 472, 482], "dataclass_transform": [66, 186, 385, 472, 482], "get_overload": [66, 186, 385, 472, 482], "clear_overload": [66, 186, 385, 472, 482], "no_type_check": [66, 186, 385, 472, 482], "no_type_check_decor": [66, 186, 385], "type_check_on": [66, 186, 385, 482], "get_type_hint": [66, 85, 186, 385, 472, 479, 481, 482], "get_arg": [66, 186, 385, 471, 472, 480, 481, 482], "get_origin": [66, 186, 385, 480, 482], "is_typeddict": [66, 186, 385, 471, 482], "forwardref": [66, 186, 385, 482], "type_check": [66, 86, 186, 250, 292, 350, 385, 478, 482], "timelin": [66, 186], "onlin": [66, 101, 186, 254, 368, 383, 398, 413, 425, 463, 467], "recogn": [66, 71, 83, 91, 96, 102, 118, 121, 155, 157, 166, 176, 186, 190, 195, 202, 217, 222, 227, 234, 248, 249, 250, 258, 262, 266, 276, 282, 292, 297, 299, 319, 331, 333, 336, 345, 361, 365, 368, 376, 385, 388, 393, 394, 415, 434, 435, 460, 461, 469, 474, 475, 476, 477, 482], "dont_accept_true_for_1": [66, 186, 192], "dont_accept_blanklin": [66, 186, 192], "normalize_whitespac": [66, 186, 192], "ignore_exception_detail": [66, 186, 192, 468], "comparison_flag": [66, 186, 192], "report_udiff": [66, 186, 192, 465], "report_cdiff": [66, 186, 192, 465], "report_ndiff": [66, 186, 192, 465], "report_only_first_failur": [66, 186, 192], "fail_fast": [66, 186, 192, 476], "reporting_flag": [66, 186, 192], "register_optionflag": [66, 186, 192], "testfil": [66, 186, 192, 466, 482], "testmod": [66, 186, 192, 361, 450, 465, 470], "run_docstring_exampl": [66, 186, 192], "docfilesuit": [66, 186, 192, 466], "doctestsuit": [66, 186, 192, 387, 464, 477, 482], "set_unittest_reportflag": [66, 186, 192], "exc_msg": [66, 186, 192], "doctestfind": [66, 186, 465], "doctestpars": [66, 186], "get_doctest": [66, 186, 192], "get_exampl": [66, 186, 192], "doctestrunn": [66, 186, 465], "report_start": [66, 186, 192], "report_success": [66, 186, 192], "report_failur": [66, 186, 192], "report_unexpected_except": [66, 186, 192], "summar": [66, 91, 101, 105, 185, 186, 192, 258, 259, 330, 343, 344, 385, 387, 426, 429, 431, 465, 474], "outputcheck": [66, 186, 465], "output_differ": [66, 186, 192], "script_from_exampl": [66, 186, 192], "testsourc": [66, 186, 192], "debug_src": [66, 186, 192], "debugrunn": [66, 186, 192], "doctestfailur": [66, 186, 192], "got": [66, 71, 106, 111, 125, 135, 137, 186, 192, 267, 283, 335, 340, 383, 394, 429, 440, 454, 466, 470, 480, 482], "unexpectedexcept": [66, 186, 192], "soapbox": [66, 186], "discoveri": [66, 186, 192, 280, 335, 418, 472, 474, 476, 477, 482], "organ": [66, 82, 86, 93, 98, 99, 102, 186, 192, 258, 341, 425, 431, 464, 481, 482], "skipif": [66, 186, 361, 387], "skipunless": [66, 186, 387, 470], "expectedfailur": [66, 186, 361, 387, 470, 482], "skiptest": [66, 186, 361, 387, 468, 476, 482], "subtest": [66, 186, 476, 482], "testcas": [66, 186, 192, 361, 387, 388, 389, 425, 450, 468, 470, 472, 473, 474, 475, 476, 480, 482], "teardown": [66, 186, 192, 361, 387, 388, 389, 468, 482], "setupclass": [66, 186, 468, 480, 482], "teardownclass": [66, 186, 468, 482], "assertequ": [66, 110, 186, 361, 387, 388, 389, 450, 468, 473, 474, 476, 480, 482], "assertnotequ": [66, 110, 186, 387, 473, 474], "asserttru": [66, 110, 186, 387, 468, 473, 474], "assertfals": [66, 110, 186, 387, 468, 473], "asserti": [66, 186, 387, 389, 468], "assertisnot": [66, 186, 387, 468], "assertisnon": [66, 186, 387, 468, 470], "assertisnotnon": [66, 186, 387, 468, 470], "assertin": [66, 186, 387, 468], "assertnotin": [66, 186, 387, 468], "assertisinst": [66, 186, 387, 468], "assertnotisinst": [66, 186, 387, 468], "assertrais": [66, 110, 186, 387, 450, 468, 470, 473, 475, 482], "assertraisesregex": [66, 186, 387, 473, 475, 482], "assertwarn": [66, 186, 387, 474, 475, 482], "assertwarnsregex": [66, 186, 387, 474, 475, 482], "assertlog": [66, 186, 387, 471, 476, 482], "assertnolog": [66, 186, 387, 471, 482], "assertalmostequ": [66, 110, 186, 387, 468, 473, 474, 482], "assertnotalmostequ": [66, 110, 186, 387, 468, 473, 474, 482], "assertgreat": [66, 186, 387, 468], "assertgreaterequ": [66, 186, 387, 468], "assertless": [66, 186, 387, 468], "assertlessequ": [66, 186, 387, 468], "assertregex": [66, 186, 387, 473, 474, 482], "assertnotregex": [66, 186, 387, 473], "assertcountequ": [66, 186, 387, 474], "addtypeequalityfunc": [66, 186, 387, 468], "assertmultilineequ": [66, 186, 387, 468], "assertsequenceequ": [66, 186, 387, 468, 470, 482], "assertlistequ": [66, 186, 387, 468, 470, 482], "asserttupleequ": [66, 186, 387, 468, 470, 482], "assertsetequ": [66, 186, 387, 468, 470], "assertdictequ": [66, 186, 387, 468, 470], "failureexcept": [66, 186, 192, 387], "longmessag": [66, 106, 186, 244, 387, 468, 482], "maxdiff": [66, 186, 387, 474], "counttestcas": [66, 186, 387], "defaulttestresult": [66, 186, 387], "shortdescript": [66, 186, 387, 482], "addcleanup": [66, 186, 387, 388, 389, 468, 480], "entercontext": [66, 186, 387, 472, 482], "docleanup": [66, 186, 387, 468], "addclasscleanup": [66, 186, 387, 480, 482], "enterclasscontext": [66, 186, 387, 472, 482], "doclasscleanup": [66, 186, 387], "isolatedasynciotestcas": [66, 186, 387, 472, 480, 482], "asyncsetup": [66, 186, 387, 480], "asyncteardown": [66, 186, 387, 480], "addasynccleanup": [66, 186, 387], "enterasynccontext": [66, 186, 387, 472, 482], "functiontestcas": [66, 186, 387], "testsuit": [66, 186, 192, 361, 387, 464, 476, 477, 482], "addtest": [66, 186, 192, 387], "testload": [66, 186, 361, 387, 388, 468, 472, 473, 477, 482], "loadtestsfromtestcas": [66, 186, 387, 472, 482], "loadtestsfrommodul": [66, 186, 361, 387, 472, 473, 477, 482], "loadtestsfromnam": [66, 186, 387, 468], "gettestcasenam": [66, 186, 387, 472, 473, 482], "discov": [66, 101, 103, 112, 182, 186, 195, 204, 243, 361, 387, 414, 462, 463, 464, 468, 474, 476, 482], "testmethodprefix": [66, 186, 387], "sorttestmethodsus": [66, 186, 387], "suiteclass": [66, 186, 387, 468], "testnamepattern": [66, 186, 387], "testresult": [66, 186, 192, 387, 468, 470, 475, 482], "unexpectedsuccess": [66, 186, 387], "shouldstop": [66, 186, 387], "testsrun": [66, 186, 387], "failfast": [66, 186, 387, 468, 482], "tb_local": [66, 186, 387], "wassuccess": [66, 186, 387], "starttest": [66, 186, 387], "stoptest": [66, 186, 387], "starttestrun": [66, 186, 387, 468, 482], "stoptestrun": [66, 186, 387, 468, 482], "adderror": [66, 186, 387, 482], "addfailur": [66, 186, 387, 482], "addsuccess": [66, 186, 387], "addskip": [66, 186, 387, 482], "addexpectedfailur": [66, 186, 387], "addunexpectedsuccess": [66, 186, 387], "addsubtest": [66, 186, 387, 482], "texttestresult": [66, 186, 387, 473, 482], "defaulttestload": [66, 186, 387], "texttestrunn": [66, 186, 387, 482], "_makeresult": [66, 186, 387], "load_test": [66, 186, 192, 361, 477, 482], "fixtur": [66, 186, 468], "setupmodul": [66, 186, 468, 480, 482], "teardownmodul": [66, 186, 468, 482], "addmodulecleanup": [66, 186, 387, 480, 482], "entermodulecontext": [66, 186, 387, 472, 482], "domodulecleanup": [66, 186, 387, 482], "installhandl": [66, 186, 387], "registerresult": [66, 186, 387], "removeresult": [66, 186, 387], "assert_cal": [66, 186, 388, 478, 482], "assert_called_onc": [66, 186, 388, 478, 482], "assert_called_with": [66, 186, 388, 389, 482], "assert_called_once_with": [66, 186, 388, 389, 482], "assert_any_cal": [66, 186, 388], "assert_has_cal": [66, 186, 388, 389, 482], "assert_not_cal": [66, 186, 388, 477, 482], "reset_mock": [66, 186, 388, 478, 482], "mock_add_spec": [66, 186, 388], "attach_mock": [66, 186, 388, 389, 482], "configure_mock": [66, 186, 388, 389, 482], "_get_child_mock": [66, 186, 388, 389], "call_count": [66, 186, 388, 389], "return_valu": [66, 144, 186, 190, 388, 389, 474, 476, 478, 482], "side_effect": [66, 186, 388, 389, 478, 482], "call_arg": [66, 186, 388, 389, 482], "call_args_list": [66, 186, 388, 389], "method_cal": [66, 186, 388, 389], "mock_cal": [66, 186, 388, 389, 482], "noncallablemock": [66, 186, 388, 482], "propertymock": [66, 186, 388], "asyncmock": [66, 186, 388, 389, 480, 482], "assert_await": [66, 186, 388], "assert_awaited_onc": [66, 186, 388, 389], "assert_awaited_with": [66, 186, 388], "assert_awaited_once_with": [66, 186, 388], "assert_any_await": [66, 186, 388], "assert_has_await": [66, 186, 388, 482], "assert_not_await": [66, 186, 388], "await_count": [66, 186, 388], "await_arg": [66, 186, 388], "await_args_list": [66, 186, 388, 482], "patcher": [66, 186, 389, 482], "stopal": [66, 186, 388, 482], "test_prefix": [66, 186], "magicmock": [66, 186, 477, 482], "noncallablemagicmock": [66, 186, 388], "call_list": [66, 186, 388, 389], "create_autospec": [66, 186, 482], "filter_dir": [66, 186], "mock_open": [66, 186, 476, 482], "autospecc": [66, 186, 482], "seal": [66, 186, 214, 474, 479, 482], "cope": [66, 186, 465, 482], "2to3": [66, 85, 186, 254, 467, 468, 469, 472, 474, 482], "fixer": [66, 186, 482], "lib2to3": [66, 85, 186, 472, 481, 482], "regress": [66, 76, 83, 88, 186, 192, 254, 262, 343, 468, 476, 477, 482], "testfail": [66, 186, 361], "resourcedeni": [66, 186, 361], "is_jython": [66, 186, 361], "is_android": [66, 186, 361, 482], "unix_shel": [66, 186, 361, 482], "loopback_timeout": [66, 186, 361, 482], "internet_timeout": [66, 186, 361, 482], "short_timeout": [66, 186, 361, 482], "long_timeout": [66, 186, 361, 482], "pipe_max_s": [66, 186, 361], "sock_max_s": [66, 186, 361], "test_support_dir": [66, 186, 361], "test_home_dir": [66, 186, 361], "test_data_dir": [66, 186, 361], "max_py_ssize_t": [66, 186, 361], "max_memus": [66, 186, 361], "real_max_memus": [66, 186, 361], "missing_c_docstr": [66, 186, 361], "have_docstr": [66, 186, 361], "test_http_url": [66, 186, 361, 482], "always_eq": [66, 186, 361], "never_eq": [66, 186, 361], "smallest": [66, 93, 105, 182, 185, 186, 235, 275, 343, 344, 352, 361, 368, 381, 451, 464, 465, 466, 467, 482], "busy_retri": [66, 186, 361], "sleeping_retri": [66, 186, 361], "is_resource_en": [66, 186, 361], "python_is_optim": [66, 186, 361], "with_pymalloc": [66, 186, 361], "sortdict": [66, 186, 361], "findfil": [66, 186, 361, 482], "match_test": [66, 186, 361, 381], "set_match_test": [66, 186, 361], "run_unittest": [66, 186, 361, 482], "run_doctest": [66, 186, 361, 381], "check_impl_detail": [66, 186, 361], "set_memlimit": [66, 186, 361], "record_original_stdout": [66, 186, 361], "get_original_stdout": [66, 186, 361], "args_from_interpreter_flag": [66, 186, 361], "optim_args_from_interpreter_flag": [66, 186, 361], "captured_stdin": [66, 186, 361], "captured_stdout": [66, 186, 361], "captured_stderr": [66, 186, 361, 482], "disable_faulthandl": [66, 186, 361], "gc_collect": [66, 186, 361], "disable_gc": [66, 186, 361], "swap_attr": [66, 186, 361, 482], "swap_item": [66, 186, 361, 482], "flush_std_stream": [66, 186, 361], "print_warn": [66, 186, 361], "wait_process": [66, 186, 361, 482], "calcobjs": [66, 186, 361, 482], "calcvobjs": [66, 186, 361], "checksizeof": [66, 186, 361], "anticipate_failur": [66, 186, 361], "system_must_validate_cert": [66, 186, 361], "run_with_local": [66, 186, 361], "run_with_tz": [66, 186, 361], "requires_freebsd_vers": [66, 186, 361], "requires_linux_vers": [66, 186, 361], "requires_mac_vers": [66, 186, 361], "requires_ieee_754": [66, 186, 361], "requires_zlib": [66, 186, 361, 482], "requires_gzip": [66, 186, 361], "requires_bz2": [66, 186, 361], "requires_lzma": [66, 186, 361], "requires_resourc": [66, 186, 361], "requires_docstr": [66, 186, 361], "requires_limited_api": [66, 186, 361], "cpython_on": [66, 186, 361], "impl_detail": [66, 186, 361], "no_trac": [66, 186, 361], "refcount_test": [66, 186, 361], "bigmemtest": [66, 186, 361], "bigaddrspacetest": [66, 186, 361], "check_syntax_error": [66, 186, 361], "open_urlresourc": [66, 186, 361], "reap_children": [66, 186, 361], "get_attribut": [66, 186, 361], "catch_unraisable_except": [66, 186, 361, 482], "load_package_test": [66, 186, 361, 482], "detect_api_mismatch": [66, 186, 361], "run_in_subinterp": [66, 186, 361], "check_free_after_iter": [66, 186, 361], "missing_compiler_execut": [66, 186, 361, 482], "check__all__": [66, 186, 361, 482], "skip_if_broken_multiprocessing_synchron": [66, 186, 361, 482], "check_disallow_instanti": [66, 186, 361], "adjust_int_max_str_digit": [66, 186, 361], "suppresscrashreport": [66, 186, 361], "savesign": [66, 186, 361], "matcher": [66, 186, 361, 389], "match_valu": [66, 186, 361], "socket_help": [66, 186, 254], "ipv6_en": [66, 186, 361], "find_unused_port": [66, 186, 361, 482], "bind_port": [66, 186, 361], "bind_unix_socket": [66, 186, 361], "skip_unless_bind_unix_socket": [66, 186, 361, 482], "transient_internet": [66, 186, 361], "script_help": [66, 186, 254, 482], "interpreter_requires_environ": [66, 186, 361], "run_python_until_end": [66, 186, 361, 482], "assert_python_ok": [66, 186, 361, 482], "assert_python_failur": [66, 186, 361, 482], "spawn_python": [66, 186, 361], "kill_python": [66, 186, 361], "make_script": [66, 186, 361], "make_zip_script": [66, 186, 361], "make_pkg": [66, 186, 361], "make_zip_pkg": [66, 186, 361], "bytecode_help": [66, 186, 254, 482], "bytecodetestcas": [66, 186, 361], "get_disassembly_as_str": [66, 186, 361], "assertinbytecod": [66, 186, 361], "assertnotinbytecod": [66, 186, 361, 482], "threading_help": [66, 186, 254], "reap_thread": [66, 186, 361], "start_thread": [66, 99, 186, 361, 482], "threading_cleanup": [66, 186, 361, 482], "threading_setup": [66, 186, 361, 482], "wait_threads_exit": [66, 186, 361], "catch_threading_except": [66, 186, 361, 482], "os_help": [66, 186, 254], "fs_nonascii": [66, 186, 361], "savedcwd": [66, 186, 361], "testfn": [66, 186, 361, 482], "testfn_nonascii": [66, 186, 361], "testfn_unencod": [66, 186, 361], "testfn_undecod": [66, 186, 361], "testfn_unicod": [66, 186, 361], "environmentvarguard": [66, 186, 361, 467], "fakepath": [66, 186, 361], "can_symlink": [66, 186, 361], "can_xattr": [66, 186, 361], "change_cwd": [66, 186, 361], "create_empty_fil": [66, 186, 361], "fd_count": [66, 186, 361, 482], "fs_is_case_insensit": [66, 186, 361], "make_bad_fd": [66, 186, 361], "skip_unless_symlink": [66, 186, 361], "skip_unless_xattr": [66, 186, 361], "temp_cwd": [66, 186, 361, 482], "temp_dir": [66, 186, 361], "temp_umask": [66, 186, 361], "import_help": [66, 186, 254, 482], "import_fresh_modul": [66, 186, 361, 482], "import_modul": [66, 83, 99, 186, 224, 249, 268, 280, 324, 361, 427, 431, 435, 468, 475, 482], "modules_setup": [66, 186, 361], "modules_cleanup": [66, 186, 361], "make_legacy_pyc": [66, 186, 361, 482], "cleanimport": [66, 186, 361], "dirsonsyspath": [66, 186, 361], "warnings_help": [66, 186, 254, 482], "check_no_resource_warn": [66, 186, 361, 482], "check_syntax_warn": [66, 186, 361, 482], "check_warn": [66, 186, 361, 467], "warningsrecord": [66, 186, 361], "bdbquit": [66, 144, 184], "deletem": [66, 144, 184], "bpformat": [66, 144, 184], "bpprint": [66, 144, 184], "cond": [66, 137, 144, 184, 352, 466], "bpbynumb": [66, 144, 184], "bplist": [66, 144, 184], "hit": [66, 84, 90, 144, 153, 175, 184, 212, 225, 246, 297, 341, 358, 368, 379, 388, 400, 466, 471, 474, 482], "trace_dispatch": [66, 144, 184], "dispatch_lin": [66, 144, 184], "dispatch_cal": [66, 144, 184], "dispatch_return": [66, 144, 184], "dispatch_except": [66, 144, 184], "is_skipped_lin": [66, 144, 184], "stop_her": [66, 144, 184], "break_her": [66, 144, 184], "break_anywher": [66, 144, 184], "user_cal": [66, 144, 184], "user_lin": [66, 144, 184], "user_return": [66, 144, 184], "user_except": [66, 144, 184], "do_clear": [66, 144, 184], "set_step": [66, 144, 184], "set_next": [66, 144, 184], "set_return": [66, 144, 184], "set_until": [66, 144, 184], "set_trac": [66, 144, 184, 192, 224, 297, 352, 454, 479, 482], "set_continu": [66, 144, 184], "set_quit": [66, 144, 184], "set_break": [66, 144, 184], "clear_break": [66, 144, 184], "clear_bpbynumb": [66, 144, 184], "clear_all_file_break": [66, 144, 184], "clear_all_break": [66, 144, 184], "get_bpbynumb": [66, 144, 184], "get_break": [66, 144, 184], "get_file_break": [66, 144, 184], "get_all_break": [66, 144, 184], "format_stack_entri": [66, 144, 184, 482], "runev": [66, 144, 184, 297], "runctx": [66, 144, 184, 308, 379], "runcal": [66, 144, 184, 297, 308, 480], "checkfuncnam": [66, 144, 184], "dump_traceback": [66, 184, 213, 477, 482], "is_en": [66, 184, 213], "dump_traceback_lat": [66, 184, 213, 477, 482], "cancel_dump_traceback_lat": [66, 184, 213], "post_mortem": [66, 184, 192, 297, 467], "pm": [66, 182, 184, 192, 266, 297, 352, 365], "introduct": [66, 74, 90, 93, 96, 111, 112, 118, 132, 184, 192, 259, 283, 337, 341, 366, 385, 389, 461, 462, 463, 465, 476, 478, 482], "create_stat": [66, 184, 308], "print_stat": [66, 184, 308], "dump_stat": [66, 184, 308], "strip_dir": [66, 184, 308], "sort_stat": [66, 184, 308], "reverse_ord": [66, 184, 308], "print_cal": [66, 184, 308], "print_calle": [66, 184, 308], "get_stats_profil": [66, 184, 308], "default_tim": [66, 184, 366], "autorang": [66, 184, 366, 478, 482], "print_exc": [66, 99, 184, 315, 366, 380, 482], "programmat": [66, 70, 111, 120, 166, 168, 184, 207, 209, 264, 266, 268, 280, 292, 299, 309, 320, 352, 377, 394, 468, 475, 476, 482], "runfunc": [66, 184, 379, 480], "coverageresult": [66, 184, 379], "write_result": [66, 184, 379], "peak": [66, 141, 184, 466, 481], "clear_trac": [66, 184, 381], "get_object_traceback": [66, 184, 381, 482], "get_traceback_limit": [66, 184, 381], "get_traced_memori": [66, 184, 381], "reset_peak": [66, 184, 381, 481], "get_tracemalloc_memori": [66, 184, 381], "is_trac": [66, 184, 381], "take_snapshot": [66, 184, 381], "domainfilt": [66, 184, 478], "filename_pattern": [66, 184, 381], "all_fram": [66, 184, 381], "snapshot": [66, 184, 257, 342, 476], "compare_to": [66, 184, 381], "filter_trac": [66, 184, 381], "statisticdiff": [66, 184], "count_diff": [66, 184, 381], "size_diff": [66, 184, 381], "total_nfram": [66, 184, 381, 482], "envbuild": [66, 191, 476, 482], "ensure_directori": [66, 191, 398, 482], "create_configur": [66, 191, 398], "setup_python": [66, 191, 398], "setup_script": [66, 191, 398], "upgrade_depend": [66, 191, 398, 482], "post_setup": [66, 191, 398], "install_script": [66, 191, 398], "create_arch": [66, 191, 420, 479, 482], "get_interpret": [66, 191, 420], "standalon": [66, 76, 120, 168, 191, 192, 252, 314, 383, 387, 410, 426, 467, 482], "abiflag": [66, 108, 315, 352, 449, 455, 474, 480, 482], "builtin_module_nam": [66, 82, 250, 315, 352, 449], "call_trac": [66, 315, 352, 449, 482], "_clear_type_cach": [66, 315, 352, 449], "_current_fram": [66, 142, 315, 352, 449, 466], "_current_except": [66, 142, 315, 352, 482], "breakpointhook": [66, 142, 224, 315, 352, 449, 454, 479, 482], "_debugmallocstat": [66, 315, 352, 449], "dllhandl": [66, 315, 352], "displayhook": [66, 224, 315, 352, 449, 462], "_emscripten_info": [66, 315, 352, 482], "__breakpointhook__": [66, 315, 352, 449, 482], "__displayhook__": [66, 315, 352, 449], "__unraisablehook__": [66, 315, 352, 449], "float_info": [66, 85, 275, 315, 344, 352, 449, 467, 482], "float_repr_styl": [66, 315, 352, 449, 468], "getallocatedblock": [66, 315, 352, 449, 476], "getandroidapilevel": [66, 315, 352, 479, 482], "getdefaultencod": [66, 315, 352, 449], "getdlopenflag": [66, 293, 315, 352, 449, 463], "get_int_max_str_digit": [66, 315, 344, 352], "getrefcount": [66, 85, 315, 352, 449], "getrecursionlimit": [66, 162, 212, 246, 315, 352, 449, 461, 482], "getsizeof": [66, 185, 315, 352, 361, 381, 449, 467, 472, 482], "getswitchinterv": [66, 315, 352, 449, 481, 482], "_getfram": [66, 98, 142, 315, 352, 449, 462, 472, 482], "getwindowsvers": [66, 315, 352, 468, 478, 482], "get_asyncgen_hook": [66, 315, 352, 449, 482], "get_coroutine_origin_tracking_depth": [66, 315, 352, 449, 479, 482], "hash_info": [66, 315, 344, 352, 427, 449, 474, 476], "__interactivehook__": [66, 315, 334, 352, 449, 454, 476], "maxunicod": [66, 315, 352, 449, 475], "setdlopenflag": [66, 293, 315, 352, 449, 463, 475], "set_int_max_str_digit": [66, 315, 344, 352, 361, 482], "setrecursionlimit": [66, 246, 299, 315, 352, 449, 461, 482], "set_asyncgen_hook": [66, 315, 352, 429, 449, 482], "set_coroutine_origin_tracking_depth": [66, 255, 315, 352, 449, 479, 482], "_enablelegacywindowsfsencod": [66, 315, 352, 454, 478], "__stdin__": [66, 246, 315, 352, 449], "__stdout__": [66, 246, 315, 332, 352, 449], "__stderr__": [66, 246, 315, 352, 361, 449], "stdlib_module_nam": [66, 315, 352, 471, 482], "thread_info": [66, 315, 352, 449, 475, 482], "tracebacklimit": [66, 315, 352, 482], "api_vers": [66, 315, 352, 449, 464], "winver": [66, 315, 352], "get_config_var": [66, 70, 293, 315, 354, 424, 468, 474, 476, 482], "get_scheme_nam": [66, 315, 354], "get_default_schem": [66, 315, 354, 482], "get_preferred_schem": [66, 315, 354, 472, 482], "_get_preferred_schem": [66, 315, 354], "get_path_nam": [66, 315, 354], "get_path": [66, 315, 354, 468, 474, 482], "get_python_vers": [66, 315, 354, 474], "get_platform": [66, 315, 354, 474, 482], "is_python_build": [66, 315, 354, 468], "parse_config_h": [66, 315, 354], "get_config_h_filenam": [66, 315, 354], "get_makefile_filenam": [66, 70, 315, 354], "idiomat": [66, 101, 110, 315, 385], "formatwarn": [66, 267, 315, 399, 467, 482], "filterwarn": [66, 315, 399, 454, 462, 464, 482], "simplefilt": [66, 315, 361, 399, 467, 468, 472, 482], "resetwarn": [66, 315, 399, 474], "catch_warn": [66, 315, 361, 399, 467, 472, 482], "asdict": [66, 180, 315, 482], "astupl": [66, 180, 315, 482], "make_dataclass": [66, 180, 315, 482], "is_dataclass": [66, 180, 315, 482], "kw_on": [66, 180, 315, 385, 471, 482], "frozeninstanceerror": [66, 180, 315, 482], "post": [66, 92, 93, 98, 99, 106, 121, 143, 151, 175, 192, 193, 240, 241, 244, 269, 288, 295, 297, 315, 341, 350, 352, 368, 393, 394, 398, 419, 439, 455, 461, 463, 467, 474, 475, 480, 482], "abstractcontextmanag": [66, 168, 315, 344, 385, 478, 482], "abstractasynccontextmanag": [66, 168, 315, 344, 385, 479, 482], "nullcontext": [66, 168, 315, 471, 479, 482], "redirect_stdout": [66, 168, 315, 476, 477], "redirect_stderr": [66, 168, 315, 477, 482], "contextdecor": [66, 168, 315, 474], "asynccontextdecor": [66, 168, 315, 471, 482], "exitstack": [66, 168, 315, 472, 475, 479, 480, 482], "enter_context": [66, 168, 315, 472, 482], "push": [66, 88, 99, 121, 156, 159, 168, 176, 178, 179, 185, 190, 212, 235, 282, 283, 315, 331, 350, 364, 412, 434, 435, 440, 461, 467, 472, 475, 482], "pop_al": [66, 168, 315], "asyncexitstack": [66, 168, 315, 472, 479, 480, 482], "enter_async_context": [66, 168, 315, 472, 482], "push_async_exit": [66, 168, 315], "push_async_callback": [66, 168, 315, 480], "reusabl": [66, 112, 315, 406, 476], "reentrant": [66, 258, 315, 316, 364, 476, 482], "abcmeta": [66, 114, 315, 427, 467, 474, 475, 476, 482], "__subclasshook__": [66, 78, 114, 160, 315, 482], "abstractmethod": [66, 91, 114, 225, 250, 251, 253, 289, 293, 315, 329, 467, 475], "abstractclassmethod": [66, 114, 315, 474, 475], "abstractstaticmethod": [66, 114, 315, 474, 475], "abstractproperti": [66, 114, 315, 467, 475], "get_cache_token": [66, 114, 315, 476], "update_abstractmethod": [66, 114, 315, 482], "print_tb": [66, 315, 380, 477], "print_except": [66, 267, 269, 315, 380, 471, 482], "print_last": [66, 315, 380], "extract_tb": [66, 315, 380], "extract_stack": [66, 315, 380, 482], "format_list": [66, 315, 380, 482], "format_exception_on": [66, 192, 315, 380, 471, 482], "format_except": [66, 315, 380, 471, 482], "format_exc": [66, 315, 380], "format_tb": [66, 315, 380, 381], "format_stack": [66, 315, 380, 482], "clear_fram": [66, 315, 380, 476], "walk_stack": [66, 315, 380, 477], "walk_tb": [66, 315, 380, 477], "tracebackexcept": [66, 315, 472, 477, 482], "exc_typ": [66, 110, 168, 315, 333, 344, 352, 361, 364, 380, 389, 427, 469, 472, 482], "from_except": [66, 315, 380], "stacksummari": [66, 315, 472, 477, 482], "from_list": [66, 315, 380], "format_frame_summari": [66, 315, 380, 472, 482], "framesummari": [66, 315, 477, 482], "get_object": [66, 142, 226, 315, 471, 480, 482], "get_stat": [66, 93, 226, 315, 476, 482], "set_threshold": [66, 226, 315], "get_count": [66, 226, 315, 466], "get_threshold": [66, 226, 315], "get_referr": [66, 142, 226, 315, 381, 471, 482], "unfreez": [66, 226, 315, 479], "get_freeze_count": [66, 226, 315, 479], "debug_stat": [66, 226, 315], "debug_collect": [66, 226, 315], "debug_uncollect": [66, 226, 315, 474], "debug_saveal": [66, 226, 315], "debug_leak": [66, 226, 315], "getmembers_stat": [66, 255, 315, 472, 482], "getmodulenam": [66, 250, 255, 315, 478], "ismodul": [66, 255, 315], "isclass": [66, 255, 315, 427], "ismethod": [66, 255, 315], "isfunct": [66, 255, 315], "isgeneratorfunct": [66, 255, 315, 467, 482], "isgener": [66, 255, 315, 467], "iscoroutinefunct": [66, 255, 315, 388, 477, 482], "iscoroutin": [66, 128, 255, 315, 477, 482], "isawait": [66, 128, 160, 255, 315, 388, 477, 482], "isasyncgenfunct": [66, 255, 315, 482], "isasyncgen": [66, 255, 315], "istraceback": [66, 255, 315], "isfram": [66, 255, 315], "iscod": [66, 255, 315], "isbuiltin": [66, 255, 315], "ismethodwrapp": [66, 255, 315, 472, 482], "isroutin": [66, 255, 315, 482], "isabstract": [66, 255, 315, 467, 482], "ismethoddescriptor": [66, 255, 315], "isdatadescriptor": [66, 255, 315, 482], "isgetsetdescriptor": [66, 255, 315], "ismemberdescriptor": [66, 255, 315], "getdoc": [66, 255, 315, 427, 477, 480, 482], "getcom": [66, 255, 313, 315], "getfil": [66, 255, 315, 482], "getmodul": [66, 255, 315, 482], "getsourcefil": [66, 255, 315, 482], "getsourcelin": [66, 255, 315, 482], "getsourc": [66, 255, 315, 482], "cleandoc": [66, 120, 255, 315], "return_annot": [66, 255, 315], "bind_parti": [66, 255, 315], "from_cal": [66, 255, 315, 471, 472, 477, 482], "boundargu": [66, 255, 315, 475, 477, 481, 482], "apply_default": [66, 255, 315, 477, 482], "getclasstre": [66, 255, 315], "getfullargspec": [66, 255, 313, 315, 472, 476, 477, 478, 482], "getargvalu": [66, 255, 315, 477], "formatargvalu": [66, 255, 315, 477], "getmro": [66, 255, 315], "getcallarg": [66, 255, 315, 468, 477, 482], "getclosurevar": [66, 255, 315, 475], "get_annot": [66, 86, 255, 315, 471, 482], "frameinfo": [66, 255, 315], "code_context": [66, 255, 315], "getframeinfo": [66, 255, 315, 472, 482], "getouterfram": [66, 255, 315, 472, 477, 482], "getinnerfram": [66, 255, 315, 472, 477, 482], "currentfram": [66, 255, 315, 472], "getattr_stat": [66, 255, 315, 474, 482], "getgeneratorst": [66, 255, 315, 474], "getcoroutinest": [66, 255, 315, 477, 482], "getgeneratorloc": [66, 255, 315, 475], "getcoroutineloc": [66, 255, 315, 477, 482], "co_optim": [66, 255, 315], "co_newloc": [66, 255, 315], "co_vararg": [66, 255, 315], "co_varkeyword": [66, 255, 315], "co_nest": [66, 255, 315], "co_gener": [66, 255, 315, 482], "co_coroutin": [66, 255, 315, 480, 482], "co_iterable_coroutin": [66, 190, 255, 315], "co_async_gener": [66, 255, 315], "enable_user_sit": [66, 315, 334], "user_sit": [66, 108, 315, 334], "user_bas": [66, 108, 315, 334, 468], "addsitedir": [66, 108, 315, 334], "getsitepackag": [66, 315, 334, 468, 474], "getuserbas": [66, 315, 334, 468, 474], "getusersitepackag": [66, 315, 334, 437, 468, 474], "interactiveinterpret": [66, 156, 179, 477, 482], "interactiveconsol": [66, 156, 179, 320], "compile_command": [66, 156, 158, 179, 482], "runsourc": [66, 156, 179, 340], "runcod": [66, 156, 179], "showsyntaxerror": [66, 156, 179], "showtraceback": [66, 156, 179, 477, 482], "resetbuff": [66, 156, 179], "raw_input": [66, 110, 156, 179, 469], "codeop": [66, 77, 179, 254, 482], "commandcompil": [66, 158, 179], "zipimporterror": [66, 280, 422], "find_load": [66, 249, 250, 280, 302, 422, 431, 471, 472, 473, 475, 476, 479, 482], "find_modul": [66, 249, 250, 280, 350, 352, 422, 431, 464, 471, 472, 473, 475, 476, 479, 482], "find_spec": [66, 249, 250, 280, 302, 352, 422, 431, 471, 473, 476, 477, 479, 482], "get_cod": [66, 175, 250, 280, 422, 476], "get_data": [66, 250, 280, 302, 394, 422, 467, 476, 482], "get_sourc": [66, 250, 265, 280, 422, 476, 482], "load_modul": [66, 85, 249, 250, 280, 350, 422, 431, 464, 471, 476, 478, 482], "invalidate_cach": [66, 250, 280, 422, 471, 475, 479, 482], "pkgutil": [66, 254, 280, 459, 466, 467, 471, 472, 475, 478, 479, 482], "moduleinfo": [66, 280, 302, 478], "extend_path": [66, 280, 302], "impimport": [66, 280, 302, 471, 472], "impload": [66, 280, 302, 471, 472], "get_import": [66, 280, 302], "get_load": [66, 280, 302, 482], "iter_import": [66, 280, 302, 475], "iter_modul": [66, 280, 302, 475, 478, 482], "walk_packag": [66, 280, 302, 475, 478, 479, 482], "resolve_nam": [66, 250, 280, 302, 481, 482], "modulefind": [66, 254, 280, 482], "addpackagepath": [66, 279, 280], "replacepackag": [66, 279, 280], "run_script": [66, 279, 280], "runpi": [66, 112, 254, 280, 381, 454, 466, 467, 468, 470, 471, 476, 482], "run_path": [66, 280, 324, 454, 468, 482], "metapathfind": [66, 85, 250, 251, 280, 352, 471, 472, 475, 476, 479, 482], "pathentryfind": [66, 85, 250, 280, 422, 431, 471, 472, 475, 476, 479], "resourceload": [66, 250, 280, 479, 482], "inspectload": [66, 250, 280, 476, 477, 482], "source_to_cod": [66, 250, 280, 476, 477, 482], "executionload": [66, 250, 280], "fileload": [66, 250, 280, 475, 476], "sourceload": [66, 250, 280, 475, 476], "path_stat": [66, 250, 280, 475], "path_mtim": [66, 250, 280, 475], "set_data": [66, 250, 280], "source_suffix": [66, 250, 280], "debug_bytecode_suffix": [66, 250, 280], "optimized_bytecode_suffix": [66, 250, 280], "bytecode_suffix": [66, 250, 280], "extension_suffix": [66, 250, 280], "all_suffix": [66, 250, 255, 280], "builtinimport": [66, 250, 280, 471, 472, 478, 482], "frozenimport": [66, 250, 280, 471, 472, 476, 482], "windowsregistryfind": [66, 250, 280, 460, 471, 472, 478, 482], "pathfind": [66, 250, 280, 431, 471, 472, 476, 479, 482], "filefind": [66, 250, 280, 302, 471, 472, 475, 482], "sourcelessfileload": [66, 250, 280, 475, 478], "extensionfileload": [66, 250, 280, 475, 476, 478], "submodule_search_loc": [66, 250, 252, 280, 431], "loader_st": [66, 250, 280, 482], "has_loc": [66, 250, 280, 431], "magic_numb": [66, 249, 250, 280, 476], "cache_from_sourc": [66, 249, 250, 280, 350, 474, 476, 477, 478], "decode_sourc": [66, 250, 280, 476], "module_from_spec": [66, 249, 250, 280, 384, 477, 482], "spec_from_load": [66, 250, 280, 471], "spec_from_file_loc": [66, 249, 250, 280, 478], "source_hash": [66, 250, 280, 479], "lazyload": [66, 250, 280, 477, 478, 482], "as_fil": [66, 252, 280, 482], "open_binari": [66, 252, 280], "open_text": [66, 252, 280], "read_binari": [66, 252, 280, 482], "is_resourc": [66, 252, 253, 280], "resourceread": [66, 250, 252, 253, 280, 473, 479, 482], "open_resourc": [66, 253, 280], "resource_path": [66, 253, 280], "traversableresourc": [66, 253, 280, 473, 482], "end_col_offset": [66, 120, 190, 264, 430, 480, 482], "formattedvalu": [66, 120, 264, 482], "joinedstr": [66, 120, 264], "star": [66, 91, 120, 190, 264, 357, 376, 412, 426, 430, 433, 435, 471, 472, 482], "expr": [66, 93, 120, 144, 264, 387, 429, 435, 461, 465, 469, 480, 481, 482], "unaryop": [66, 120, 264], "uadd": [66, 120, 264, 430], "usub": [66, 120, 264, 430], "binop": [66, 120, 264, 467, 482], "mult": [66, 120, 264, 430], "div": [66, 83, 120, 185, 239, 264, 411, 430], "bitor": [66, 120, 264, 430], "bitxor": [66, 120, 264, 430], "bitand": [66, 120, 264, 430], "matmult": [66, 120, 264, 430], "boolop": [66, 120, 264], "noteq": [66, 120, 264, 430], "lte": [66, 120, 264, 430], "gte": [66, 120, 264, 430], "isnot": [66, 120, 264, 430], "notin": [66, 120, 264, 430], "ifexp": [66, 120, 264], "namedexpr": [66, 120, 264], "listcomp": [66, 93, 120, 264, 430, 441], "setcomp": [66, 120, 264, 430], "generatorexp": [66, 120, 264], "dictcomp": [66, 120, 264, 430], "type_com": [66, 120, 264, 376, 430, 480, 482], "annassign": [66, 120, 264], "augassign": [66, 120, 264, 430], "importfrom": [66, 120, 264, 482], "trystar": [66, 120, 264], "excepthandl": [66, 120, 264], "withitem": [66, 120, 264], "match_cas": [66, 120, 264], "matchvalu": [66, 120, 264, 482], "matchsingleton": [66, 120, 264, 482], "matchsequ": [66, 120, 264, 482], "matchstar": [66, 120, 264, 482], "matchmap": [66, 120, 264, 482], "matchclass": [66, 120, 264, 482], "matcha": [66, 120, 264, 482], "matchor": [66, 120, 264, 482], "functiondef": [66, 120, 264, 482], "yieldfrom": [66, 120, 264], "classdef": [66, 120, 264, 426, 482], "asyncfunctiondef": [66, 120, 264, 482], "asyncfor": [66, 120, 264, 482], "asyncwith": [66, 120, 264, 482], "unpars": [66, 118, 120, 198, 251, 264, 314, 414, 481, 482], "literal_ev": [66, 120, 224, 264, 467, 474, 479, 482], "get_docstr": [66, 120, 264, 482], "get_source_seg": [66, 120, 264, 480, 482], "fix_missing_loc": [66, 120, 264, 482], "increment_lineno": [66, 120, 264, 482], "copy_loc": [66, 120, 264], "iter_field": [66, 120, 264], "iter_child_nod": [66, 120, 264], "nodevisitor": [66, 120, 264, 467, 480, 482], "generic_visit": [66, 120, 264], "nodetransform": [66, 120, 264, 467, 482], "pycf_allow_top_level_await": [66, 120, 224, 264, 480, 481, 482], "pycf_type_com": [66, 120, 264], "symbolt": [66, 264, 351, 481, 482], "get_typ": [66, 264, 351, 394, 476], "get_lineno": [66, 264, 351], "is_optim": [66, 264, 351], "is_nest": [66, 264, 351], "has_children": [66, 264, 351], "get_symbol": [66, 264, 351], "get_paramet": [66, 264, 351], "get_loc": [66, 264, 351], "get_glob": [66, 264, 351], "get_nonloc": [66, 264, 351], "get_fre": [66, 264, 351], "is_referenc": [66, 264, 351], "is_import": [66, 264, 351], "is_paramet": [66, 264, 351], "is_nonloc": [66, 264, 351, 482], "is_declared_glob": [66, 264, 351, 468], "is_loc": [66, 264, 351], "is_annot": [66, 264, 351], "is_fre": [66, 264, 351], "is_assign": [66, 264, 351], "is_namespac": [66, 264, 351], "get_namespac": [66, 264, 351], "tok_nam": [66, 264, 376, 482], "istermin": [66, 264, 376], "isnontermin": [66, 264, 376], "iseof": [66, 264, 376], "endmark": [66, 264, 376, 377, 430], "lpar": [66, 264, 376, 377, 482], "rpar": [66, 264, 376, 377], "lsqb": [66, 264, 376], "rsqb": [66, 264, 376], "semi": [66, 88, 264, 283, 292, 376, 482], "slash": [66, 102, 108, 220, 224, 255, 259, 264, 292, 293, 294, 296, 313, 376, 393, 406, 421, 422, 482], "amper": [66, 264, 376], "lbrace": [66, 264, 376], "rbrace": [66, 264, 376], "eqequ": [66, 264, 376], "notequ": [66, 264, 376], "lessequ": [66, 264, 376], "greaterequ": [66, 264, 376], "tild": [66, 108, 192, 230, 264, 294, 376], "circumflex": [66, 105, 264, 376], "leftshift": [66, 264, 376], "rightshift": [66, 264, 376], "doublestar": [66, 264, 376], "plusequ": [66, 264, 376], "minequ": [66, 264, 376], "starequ": [66, 264, 376], "slashequ": [66, 264, 376], "percentequ": [66, 264, 376], "amperequ": [66, 264, 376], "vbarequ": [66, 264, 376], "circumflexequ": [66, 264, 376], "leftshiftequ": [66, 264, 376], "rightshiftequ": [66, 264, 376], "doublestarequ": [66, 264, 376], "doubleslash": [66, 264, 376], "doubleslashequ": [66, 264, 376], "atequ": [66, 264, 376], "rarrow": [66, 264, 376], "colonequ": [66, 264, 376], "type_ignor": [66, 120, 264, 376], "soft_keyword": [66, 264, 376, 430], "errortoken": [66, 264, 376, 377], "n_token": [66, 264, 376], "nt_offset": [66, 264, 376], "iskeyword": [66, 263, 264, 344], "kwlist": [66, 71, 74, 189, 263, 264], "issoftkeyword": [66, 263, 264], "softkwlist": [66, 263, 264], "generate_token": [66, 264, 377, 469, 482], "untoken": [66, 264, 377, 482], "detect_encod": [66, 264, 265, 377], "tokenerror": [66, 264, 377], "tabnanni": [66, 84, 254, 264, 461, 482], "filename_on": [66, 264, 356], "nannynag": [66, 264, 356], "process_token": [66, 264, 356], "readmodul": [66, 264, 312, 482], "readmodule_ex": [66, 264, 312, 482], "is_async": [66, 120, 264, 312, 482], "pycompileerror": [66, 264, 311, 482], "pycinvalidationmod": [66, 162, 264, 311], "checked_hash": [66, 264, 311], "unchecked_hash": [66, 264, 311], "compile_dir": [66, 162, 264, 477, 479, 482], "compile_fil": [66, 162, 264, 477, 482], "compile_path": [66, 162, 264, 477], "from_traceback": [66, 190, 264, 476], "codeobj": [66, 190, 264], "first_lin": [66, 190, 264], "code_info": [66, 190, 264, 474], "show_cod": [66, 190, 264, 474, 476], "distb": [66, 190, 264, 476, 482], "disassembl": [66, 190, 264, 300, 361, 476, 479, 482], "disco": [66, 190, 264], "get_instruct": [66, 190, 264, 476, 482], "findlinestart": [66, 190, 264, 482], "findlabel": [66, 190, 264], "stack_effect": [66, 190, 264, 476, 482], "opnam": [66, 83, 190, 264, 361, 476], "argval": [66, 190, 264, 361], "argrepr": [66, 190, 264], "starts_lin": [66, 190, 264], "is_jump_target": [66, 190, 264], "opmap": [66, 190, 264], "cmp_op": [66, 190, 264], "hasarg": [66, 190, 264, 473], "hasconst": [66, 190, 264], "hasfre": [66, 190, 264], "hasnam": [66, 190, 264], "hasjrel": [66, 190, 264], "hasjab": [66, 190, 264], "hasloc": [66, 190, 264], "hascompar": [66, 190, 264], "hasexc": [66, 190, 264], "genop": [66, 264, 300], "ms": [66, 95, 108, 157, 175, 176, 254, 292, 293, 348, 374, 460, 461, 479, 482], "msvcrt": [66, 84, 142, 175, 254, 403, 467, 468, 482], "vc": [66, 175, 254, 403, 482], "lk_lock": [66, 282, 403], "lk_rlck": [66, 282, 403], "lk_nblck": [66, 282, 403], "lk_nbrlck": [66, 282, 403], "lk_unlck": [66, 282, 403], "setmod": [66, 282, 403], "open_osfhandl": [66, 142, 282, 403], "get_osfhandl": [66, 142, 282, 403], "kbhit": [66, 84, 282, 403], "getwch": [66, 282, 403, 467], "putch": [66, 282, 403], "putwch": [66, 282, 403, 467], "ungetwch": [66, 282, 403], "heapmin": [66, 282, 403], "closekey": [66, 403, 404], "connectregistri": [66, 142, 403, 404], "createkey": [66, 142, 403, 404], "createkeyex": [66, 403, 404, 468], "deletekey": [66, 142, 403, 404], "deletekeyex": [66, 403, 404, 468], "deletevalu": [66, 142, 403, 404], "enumkey": [66, 142, 403, 404], "enumvalu": [66, 142, 403, 404], "expandenvironmentstr": [66, 142, 403, 404, 467], "flushkey": [66, 403, 404], "loadkey": [66, 142, 403, 404], "openkey": [66, 142, 403, 404], "openkeyex": [66, 403, 404], "queryinfokey": [66, 142, 403, 404], "queryvalu": [66, 142, 403, 404], "queryvalueex": [66, 403, 404, 482], "savekey": [66, 142, 403, 404], "setvalu": [66, 142, 403, 404], "setvalueex": [66, 403, 404, 482], "disablereflectionkey": [66, 142, 403, 404, 467, 468], "enablereflectionkey": [66, 142, 403, 404, 467, 468], "queryreflectionkey": [66, 142, 403, 404, 467, 468], "hkey_": [66, 403], "hkey_classes_root": [66, 403, 404], "hkey_us": [66, 403, 404], "hkey_performance_data": [66, 403, 404], "hkey_current_config": [66, 403, 404], "hkey_dyn_data": [66, 403, 404], "key_all_access": [66, 403, 404], "key_writ": [66, 403, 404], "key_read": [66, 403, 404], "key_execut": [66, 403, 404], "key_query_valu": [66, 403, 404], "key_set_valu": [66, 403, 404], "key_create_sub_key": [66, 403, 404], "key_enumerate_sub_key": [66, 403, 404], "key_notifi": [66, 403, 404], "key_create_link": [66, 403, 404], "key_wow64_64key": [66, 403, 404], "key_wow64_32key": [66, 403, 404], "reg_binari": [66, 403, 404, 482], "reg_dword": [66, 403, 404], "reg_dword_little_endian": [66, 403, 404], "reg_dword_big_endian": [66, 403, 404], "reg_expand_sz": [66, 403, 404], "reg_link": [66, 403, 404], "reg_multi_sz": [66, 403, 404, 482], "reg_non": [66, 403, 404], "reg_qword": [66, 403, 404, 478, 482], "reg_qword_little_endian": [66, 403, 404], "reg_resource_list": [66, 403, 404], "reg_full_resource_descriptor": [66, 403, 404], "reg_resource_requirements_list": [66, 403, 404], "reg_sz": [66, 403, 404], "pyhkey": [66, 142, 403, 404], "sound": [66, 70, 82, 108, 115, 141, 176, 222, 254, 295, 336, 400, 403, 449, 464, 467], "playsound": [66, 403, 405, 478, 482], "messagebeep": [66, 403, 405, 478, 482], "snd_filenam": [66, 403, 405], "snd_alia": [66, 403, 405], "snd_loop": [66, 403, 405], "snd_memori": [66, 403, 405, 482], "snd_purg": [66, 403, 405], "snd_async": [66, 403, 405], "snd_nodefault": [66, 403, 405], "snd_nostop": [66, 403, 405], "snd_nowait": [66, 403, 405], "mb_iconasterisk": [66, 403, 405], "mb_iconexclam": [66, 403, 405], "mb_iconhand": [66, 403, 405], "mb_iconquest": [66, 403, 405], "mb_ok": [66, 403, 405], "password": [66, 99, 106, 172, 228, 232, 234, 247, 254, 269, 283, 286, 288, 293, 294, 305, 326, 335, 339, 341, 358, 360, 390, 393, 394, 418, 421, 466, 467, 468, 475, 476, 477, 478, 482], "getpwuid": [66, 108, 293, 310, 390, 482], "getpwnam": [66, 172, 310, 348, 390, 482], "getpwal": [66, 310, 390], "getgrgid": [66, 232, 390, 478, 482], "getgrnam": [66, 232, 348, 390, 464, 482], "getgral": [66, 232, 390, 482], "termio": [66, 214, 254, 382, 390, 481, 482], "tti": [66, 176, 228, 254, 258, 293, 390, 436, 437, 447, 454, 467, 482], "tcgetattr": [66, 360, 390], "tcsetattr": [66, 360, 382, 390], "tcsendbreak": [66, 360, 390], "tcdrain": [66, 360, 390], "tcflush": [66, 360, 390], "tcflow": [66, 360, 390], "tcgetwins": [66, 360, 390, 482], "tcsetwins": [66, 360, 390, 482], "setraw": [66, 382, 390], "setcbreak": [66, 382, 390], "flock": [66, 142, 214, 271, 390, 482], "rlim_infin": [66, 322, 390], "getrlimit": [66, 322, 390, 482], "setrlimit": [66, 142, 322, 361, 390, 482], "prlimit": [66, 142, 322, 390, 476, 482], "rlimit_cor": [66, 322, 361, 390], "rlimit_cpu": [66, 322, 390, 482], "rlimit_fs": [66, 322, 390, 482], "rlimit_data": [66, 322, 390], "rlimit_stack": [66, 322, 390], "rlimit_rss": [66, 322, 390], "rlimit_nproc": [66, 322, 390], "rlimit_nofil": [66, 322, 390], "rlimit_ofil": [66, 322, 390], "rlimit_memlock": [66, 322, 390], "rlimit_vmem": [66, 322, 390], "rlimit_a": [66, 322, 390], "rlimit_msgqueu": [66, 322, 390, 476], "rlimit_nic": [66, 322, 390, 476], "rlimit_rtprio": [66, 322, 390, 476], "rlimit_rttim": [66, 322, 390, 476], "rlimit_sigpend": [66, 322, 390, 476], "rlimit_sbs": [66, 322, 390, 476], "rlimit_swap": [66, 322, 390, 476], "rlimit_npt": [66, 322, 390, 476], "rlimit_kqueu": [66, 322, 390, 482], "getrusag": [66, 293, 322, 390, 466, 482], "getpages": [66, 322, 390], "rusage_self": [66, 322, 390], "rusage_children": [66, 322, 390], "rusage_both": [66, 322, 390], "rusage_thread": [66, 322, 390], "syslog": [66, 98, 142, 254, 269, 390, 468, 475, 482], "openlog": [66, 142, 355, 390, 482], "closelog": [66, 142, 355, 390], "setlogmask": [66, 142, 355, 390], "aiff": [66, 153, 205, 254, 336, 350, 449, 482], "setmark": [66, 115, 350], "async_chat": [66, 121, 139, 350, 476, 482], "ac_in_buffer_s": [66, 121, 350], "ac_out_buffer_s": [66, 121, 350], "close_when_don": [66, 121, 350, 482], "collect_incoming_data": [66, 121, 350], "discard_buff": [66, 121, 350], "found_termin": [66, 121, 350], "get_termin": [66, 121, 350], "push_with_produc": [66, 121, 350], "set_termin": [66, 121, 350, 482], "handle_read": [66, 139, 350, 482], "handle_writ": [66, 121, 139, 350], "handle_expt": [66, 139, 350], "handle_connect": [66, 139, 350], "handle_clos": [66, 139, 350], "handle_accept": [66, 139, 350, 474], "create_socket": [66, 139, 350], "dispatcher_with_send": [66, 139, 350], "file_dispatch": [66, 139, 350], "file_wrapp": [66, 139, 350, 406, 482], "adpcm2lin": [66, 141, 350, 482], "alaw2lin": [66, 141, 350], "avg": [66, 141, 350], "avgpp": [66, 141, 350], "bias": [66, 141, 195, 204, 308, 318, 343, 350, 464, 474], "findfactor": [66, 141, 350], "findfit": [66, 141, 350], "findmax": [66, 141, 350], "getsampl": [66, 141, 350], "lin2adpcm": [66, 141, 350, 482], "lin2alaw": [66, 141, 350], "lin2lin": [66, 141, 350], "lin2ulaw": [66, 141, 350], "maxpp": [66, 141, 350], "minmax": [66, 141, 350], "ratecv": [66, 141, 350, 482], "rms": [66, 141, 350], "tomono": [66, 141, 350], "tostereo": [66, 141, 350], "ulaw2lin": [66, 141, 350], "fieldstorag": [66, 151, 350, 476, 477, 479, 482], "getfirst": [66, 151, 350], "getlist": [66, 151, 350, 477], "parse_multipart": [66, 151, 350, 471, 478, 479, 480, 481, 482], "print_environ": [66, 151, 350], "print_form": [66, 151, 350], "print_directori": [66, 151, 350], "print_environ_usag": [66, 151, 350], "cgitb": [66, 151, 254, 350, 472, 473, 482], "iff": [66, 189, 192, 254, 350], "method_sha512": [66, 172, 350], "method_sha256": [66, 172, 350], "method_blowfish": [66, 172, 350], "method_md5": [66, 172, 350], "method_crypt": [66, 172, 350, 478, 482], "mksalt": [66, 172, 350, 475, 479, 482], "get_mag": [66, 249, 350, 476], "get_suffix": [66, 249, 350], "new_modul": [66, 249, 350], "get_tag": [66, 249, 250, 350, 474], "lock_held": [66, 249, 350], "acquire_lock": [66, 249, 350, 469], "release_lock": [66, 249, 350, 469], "py_sourc": [66, 249, 350], "c_extens": [66, 249, 350], "pkg_directori": [66, 249, 350], "c_builtin": [66, 249, 350], "py_frozen": [66, 249, 350], "nullimport": [66, 249, 350, 352, 431, 475], "mailcap": [66, 254, 350, 472, 473, 482], "findmatch": [66, 272, 350], "getcap": [66, 272, 288, 350], "fcicreat": [66, 281, 350, 482], "uuidcreat": [66, 281, 350], "opendatabas": [66, 281, 350, 482], "createrecord": [66, 281, 350], "init_databas": [66, 281, 350, 482], "add_data": [66, 281, 350, 394, 476], "add_tabl": [66, 281, 350], "add_stream": [66, 281, 350], "gen_uuid": [66, 281, 350], "openview": [66, 281, 350, 482], "getsummaryinform": [66, 281, 350], "getcolumninfo": [66, 281, 350], "summaryinform": [66, 281, 350, 482], "getpropertycount": [66, 281, 350], "getfieldcount": [66, 281, 350], "getinteg": [66, 281, 350, 467], "setstr": [66, 281, 350], "setinteg": [66, 281, 350], "cleardata": [66, 281, 350], "cab": [66, 350, 466, 482], "start_compon": [66, 281, 350, 482], "add_fil": [66, 281, 350], "remove_pyc": [66, 281, 350], "set_curr": [66, 281, 350], "radiobuttongroup": [66, 281, 350], "bitmap": [66, 248, 255, 281, 328, 350, 368, 374, 375], "pushbutton": [66, 281, 350], "radiogroup": [66, 281, 350], "checkbox": [66, 90, 151, 281, 350, 460], "precomput": [66, 147, 350, 482], "nis": [66, 232, 254, 350, 466, 472, 473, 482], "sun": [66, 105, 141, 150, 182, 244, 248, 254, 274, 295, 343, 350, 365, 407, 472, 482], "yellow": [66, 90, 92, 147, 159, 176, 254, 350, 383, 451, 465], "cat": [66, 83, 92, 99, 102, 159, 229, 287, 348, 350, 440, 450, 452, 474, 477], "get_default_domain": [66, 287, 350], "nntp_ssl": [66, 288, 350, 474, 481, 482], "nntperror": [66, 288, 350, 482], "nntpreplyerror": [66, 288, 350], "nntptemporaryerror": [66, 288, 350], "nntppermanenterror": [66, 288, 350], "nntpprotocolerror": [66, 288, 350], "nntpdataerror": [66, 288, 350], "nntp_version": [66, 288, 350], "nntp_implement": [66, 288, 350], "newgroup": [66, 288, 350], "newnew": [66, 288, 350], "articl": [66, 93, 105, 225, 234, 261, 271, 288, 341, 350, 383, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "ihav": [66, 288, 350], "slave": [66, 288, 293, 309, 350, 368, 482], "xhdr": [66, 288, 350], "xover": [66, 288, 350], "terminolog": [66, 88, 96, 200, 244, 350, 365, 375, 409, 462, 463, 466, 467], "optiongroup": [66, 292, 350], "optionpars": [66, 118, 292, 350, 464, 466], "get_option_group": [66, 292, 350], "print_vers": [66, 292, 350], "get_vers": [66, 292, 350], "add_opt": [66, 118, 292, 350, 464], "callback_arg": [66, 292, 350], "callback_kwarg": [66, 292, 350], "disable_interspersed_arg": [66, 118, 292, 350], "enable_interspersed_arg": [66, 292, 350], "get_opt": [66, 292, 350], "conflict": [66, 71, 102, 106, 114, 118, 166, 210, 212, 229, 240, 350, 352, 385, 404, 412, 425, 434, 454, 460, 471, 474, 476, 479, 482], "set_usag": [66, 292, 350], "get_usag": [66, 292, 350], "store_act": [66, 292, 350], "typed_act": [66, 292, 350], "always_typed_act": [66, 292, 350], "ossaudiodev": [66, 254, 350, 464, 472, 473, 477, 482], "oss": [66, 254, 348, 350, 464, 475, 482], "ossaudioerror": [66, 295, 350], "openmix": [66, 295, 350], "audio": [66, 115, 141, 153, 205, 336, 350, 361, 400, 405, 461, 482], "oss_audio_devic": [66, 295, 350], "writeal": [66, 295, 350], "nonblock": [66, 295, 350, 482], "getfmt": [66, 295, 350], "setfmt": [66, 295, 350], "channel": [66, 105, 115, 121, 132, 139, 141, 175, 200, 211, 222, 268, 283, 295, 336, 337, 341, 349, 350, 400, 463, 475, 482], "setparamet": [66, 295, 350], "obufcount": [66, 295, 350], "obuffre": [66, 295, 350], "mixer": [66, 350], "oss_mixer_devic": [66, 295, 350], "stereocontrol": [66, 295, 350], "reccontrol": [66, 295, 350], "get_recsrc": [66, 295, 350], "set_recsrc": [66, 295, 350], "whathdr": [66, 336, 350, 477, 482], "spwd": [66, 232, 254, 310, 350, 466, 472, 473, 478, 482], "shadow": [66, 83, 84, 172, 232, 254, 255, 310, 350, 466, 472, 476, 481, 482], "getspnam": [66, 339, 350, 478, 482], "getspal": [66, 339, 350], "au": [66, 205, 254, 295, 336, 341, 350, 449], "audio_file_mag": [66, 349, 350], "audio_file_encoding_mulaw_8": [66, 349, 350], "audio_file_encoding_linear_8": [66, 349, 350], "audio_file_encoding_linear_16": [66, 349, 350], "audio_file_encoding_linear_24": [66, 349, 350], "audio_file_encoding_linear_32": [66, 349, 350], "audio_file_encoding_alaw_8": [66, 349, 350], "audio_file_encoding_float": [66, 349, 350], "audio_file_encoding_doubl": [66, 349, 350], "audio_file_encoding_adpcm_g721": [66, 349, 350], "audio_file_encoding_adpcm_g722": [66, 349, 350], "audio_file_encoding_adpcm_g723_3": [66, 349, 350], "audio_file_encoding_adpcm_g723_5": [66, 349, 350], "au_read": [66, 350], "au_writ": [66, 350, 476], "telnet": [66, 142, 169, 254, 350, 393, 467, 478, 482], "read_until": [66, 350, 358], "read_al": [66, 350, 358], "read_som": [66, 350, 358], "read_very_eag": [66, 350, 358], "read_eag": [66, 350, 358], "read_lazi": [66, 350, 358], "read_very_lazi": [66, 350, 358], "read_sb_data": [66, 350, 358], "get_socket": [66, 350, 358], "mt_interact": [66, 350, 358], "set_option_negotiation_callback": [66, 350, 358], "xdrlib": [66, 119, 254, 347, 350, 472, 473, 482], "uuencod": [66, 143, 146, 157, 254, 350], "xdr": [66, 119, 254, 299, 347, 350], "pack_float": [66, 350, 407], "pack_doubl": [66, 350, 407], "pack_fstr": [66, 350, 407], "pack_fopaqu": [66, 350, 407], "pack_str": [66, 350, 407], "pack_opaqu": [66, 350, 407], "pack_byt": [66, 350, 407], "pack_list": [66, 350, 407], "pack_farray": [66, 350, 407], "pack_array": [66, 350, 407], "get_posit": [66, 350, 407], "set_posit": [66, 350, 407], "unpack_float": [66, 350, 407], "unpack_doubl": [66, 350, 407], "unpack_fstr": [66, 350, 407], "unpack_fopaqu": [66, 350, 407], "unpack_str": [66, 350, 407], "unpack_opaqu": [66, 350, 407], "unpack_byt": [66, 350, 407], "unpack_list": [66, 350, 407], "unpack_farray": [66, 350, 407], "unpack_array": [66, 350, 407], "conversionerror": [66, 350, 407, 482], "intermezzo": [66, 72], "linkag": [66, 72, 303], "ice": [66, 284], "suggest": [66, 72, 82, 83, 89, 93, 99, 102, 105, 113, 132, 185, 224, 229, 234, 250, 299, 307, 320, 364, 365, 381, 420, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 476, 478, 480, 481, 482], "setuptool": [66, 68, 72, 74, 75, 108, 251, 302, 307, 354, 398, 452, 455, 458, 460, 468, 471, 476, 478, 482], "app": [66, 72, 99, 103, 246, 269, 352, 368, 398, 406, 425, 460, 467, 468, 474, 482], "caution": [66, 71, 83, 127, 189, 268, 292, 293, 296, 348, 412, 466, 482], "tss": [66, 479, 482], "arena": [66, 430, 454, 466, 481, 482], "transit": [66, 92, 96, 97, 106, 182, 225, 261, 268, 330, 338, 394, 424, 429, 463, 465, 466, 468, 471, 475, 482], "pad": [66, 82, 120, 143, 146, 153, 176, 182, 185, 195, 198, 224, 233, 234, 259, 337, 344, 345, 347, 349, 365, 368, 375, 394, 407, 461, 464, 467, 468, 474, 478, 482], "howto": [66, 83, 90, 94, 101, 102, 118, 337, 418, 461, 463, 468, 469, 474, 482], "primer": 66, "thought": [66, 76, 88, 93, 97, 147, 283, 461, 463, 464, 469, 471, 477], "orm": 66, "_private__nam": 66, "minutia": 66, "aka": [66, 120, 192, 354, 408, 421, 427, 460, 472, 479, 482], "orderedenum": 66, "duplicatefreeenum": 66, "planet": [66, 466], "timeperiod": [66, 210], "formal": [66, 88, 192, 224, 234, 292, 319, 344, 345, 393, 413, 420, 427, 428, 429, 433, 435, 461, 463, 470, 476, 477, 480, 481, 482], "provabl": [66, 460, 482], "modular": [66, 82, 98, 172, 224, 475, 480, 482], "combinator": [66, 261, 318, 470, 480], "acknowledg": [66, 166, 177, 425], "destin": [66, 88, 98, 105, 176, 188, 207, 211, 267, 268, 269, 271, 278, 292, 293, 332, 337, 344, 355, 398, 465, 467, 475, 476, 480, 482], "contextu": [66, 189, 267], "impart": [66, 267], "deploy": [66, 82, 98, 143, 201, 239, 293, 348, 368, 406, 424, 460, 474, 480, 481, 482], "gunicorn": 66, "uwsgi": [66, 348], "zeromq": 66, "elabor": [66, 88, 102, 108, 434, 461, 464, 482], "gmt": [66, 98, 182, 208, 244, 267, 341, 365], "cli": [66, 233, 251, 340, 361, 420, 454, 476, 479, 482], "starter": 66, "qt": 66, "rfc5424": 66, "plagu": [66, 476], "metacharact": [66, 272, 319, 348, 465], "lookahead": [66, 319, 426, 430, 465], "greedi": [66, 157, 319, 358], "feedback": [66, 229, 425, 465], "ipc": [66, 122, 129, 132, 257, 337], "disconnect": [66, 305, 335, 340, 404, 480, 482], "die": [66, 90, 328, 401, 480, 482], "undecor": [66, 99, 225, 344], "instrument": [66, 94, 125, 225, 308, 455, 474, 478, 482], "tapset": 66, "newer": [66, 69, 73, 74, 98, 101, 115, 138, 192, 234, 242, 246, 257, 268, 269, 288, 293, 297, 299, 312, 314, 328, 340, 341, 344, 365, 368, 385, 407, 408, 421, 460, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482], "un": [66, 199, 202, 255, 288, 435, 448, 471, 476, 482], "stringiz": [66, 255, 471, 482], "__annotations__": [66, 85, 180, 190, 224, 225, 255, 385, 426, 427, 435, 440, 469, 471, 474, 476, 477, 478, 480, 481, 482], "quirk": [66, 90, 344, 433, 471, 476, 482], "lossless": [66, 185, 189, 377, 427, 473, 474, 482], "__builtin_new": 66, "__pure_virtu": 66, "pyd": [66, 69, 82, 269, 353, 422, 466, 474, 477, 480, 482], "keypress": [66, 90, 282, 467], "l1": [66, 82, 157, 375], "0a0": [66, 471, 472, 473, 481], "psf": [66, 78, 296], "beopen": [66, 67], "cnri": [66, 461], "cwi": [66, 78, 239, 337, 393], "bsd": [66, 82, 90, 103, 132, 176, 214, 322, 328, 333, 337, 342, 365, 437, 455, 461, 463, 467, 476, 482], "mersenn": [66, 318, 464], "twister": [66, 318, 464], "uudecod": 66, "test_epol": 66, "siphash24": [66, 455, 472, 482], "strtod": 66, "dtoa": [66, 455, 468, 482], "libffi": [66, 468, 472, 479, 482], "cfuhash": 66, "libmpdec": [66, 185, 455, 475, 482], "w3c": [66, 106, 239, 241, 394, 409, 410, 414, 427, 462, 471, 478, 479, 480, 481, 482], "c14n": [66, 412, 480, 482], "2001": [67, 96, 99, 208, 259, 332, 357, 365, 412, 421, 425, 462, 463, 464, 467, 474, 480, 482], "2022": [67, 157, 194, 234, 425, 447, 450, 465, 471, 472, 473, 481, 482], "foundat": [67, 68, 78, 93, 168, 341, 368, 425, 460, 464, 465, 467, 475], "2000": [67, 83, 98, 157, 222, 269, 284, 365, 383, 425, 440, 443, 461, 464, 467, 474, 475, 476, 482], "corpor": [67, 425], "nation": [67, 425], "research": [67, 93, 425, 471, 482], "sig": [68, 78, 97, 105, 109, 125, 142, 157, 234, 255, 293, 333, 377, 458, 461, 462, 464, 468, 477], "bitbucket": [68, 109, 166, 398], "1998": [68, 102, 109, 318, 425], "laid": 68, "infrastructur": [68, 99, 114, 121, 139, 157, 341, 399, 467, 468, 476, 479, 482], "mail": [68, 76, 78, 93, 97, 99, 101, 102, 143, 193, 194, 195, 197, 199, 201, 204, 216, 247, 269, 271, 272, 288, 293, 317, 335, 341, 355, 387, 406, 451, 453, 461, 462, 463, 464, 465, 466, 467, 474, 477, 482], "publish": [68, 71, 99, 102, 185, 189, 191, 340, 361, 366, 419, 425, 460, 462, 468, 474, 481, 482], "2004": [68, 108, 157, 182, 375, 465], "wheel": [68, 109, 189, 251, 318, 455, 471, 472, 480, 481, 482], "project": [68, 73, 75, 82, 83, 84, 89, 99, 101, 108, 110, 120, 151, 166, 182, 192, 209, 222, 229, 234, 250, 251, 261, 292, 307, 314, 385, 387, 388, 420, 421, 424, 425, 433, 455, 458, 460, 461, 464, 467, 468, 469, 472, 473, 474, 475, 476, 478, 481, 482], "bdist_wheel": [68, 471, 472, 480, 481, 482], "427": 68, "twine": 68, "pypirc": [68, 482], "pyinit_": [69, 482], "pyinitu_": 69, "punycod": [69, 157, 464, 482], "hyphen": [69, 118, 157, 227, 292, 319, 363, 385, 397, 454, 464, 482], "initfunc_nam": 69, "u_": 69, "pyinit": 69, "come": [69, 73, 82, 83, 88, 90, 91, 95, 98, 99, 101, 103, 105, 106, 108, 112, 150, 151, 157, 160, 168, 176, 180, 185, 192, 208, 225, 231, 234, 243, 249, 250, 292, 295, 299, 300, 319, 320, 334, 338, 341, 344, 367, 368, 375, 385, 394, 398, 409, 414, 423, 427, 431, 433, 440, 461, 462, 463, 464, 465, 467, 476, 479, 480, 481, 482], "readthedoc": [69, 108, 251, 385, 406, 466], "en": [69, 93, 105, 106, 108, 159, 229, 234, 239, 288, 394, 459, 460, 466, 474, 475, 482], "latest": [69, 83, 108, 151, 182, 209, 246, 398, 421, 460, 466, 468, 470, 474, 475, 476, 478, 482], "learn": [69, 71, 73, 75, 77, 82, 85, 87, 88, 90, 91, 93, 101, 102, 105, 151, 175, 185, 192, 246, 275, 299, 331, 340, 343, 368, 383, 410, 463, 464, 466, 467, 468, 474, 478, 479, 482], "tailor": [70, 88, 245, 340, 344, 361, 473], "occasion": [70, 82, 88, 99, 118, 168, 176, 185, 189, 200, 204, 229, 246, 271, 275, 292, 293, 364, 367, 435, 461, 466, 467, 474, 482], "identif": [70, 136, 283, 346, 364, 471, 482], "great": [70, 92, 98, 190, 235, 242, 319, 348, 388, 401, 461, 462, 463, 464, 466, 467, 468, 469, 472, 475, 477, 480, 482], "fprintf": [70, 71], "shut": [70, 103, 125, 244, 328, 333, 337, 338, 352, 383, 406, 451, 454, 464, 468, 477, 481, 482], "troubl": [70, 96, 103, 106, 212, 460, 465], "piec": [70, 85, 93, 100, 102, 103, 132, 141, 146, 151, 168, 178, 189, 190, 192, 201, 242, 270, 292, 341, 368, 385, 413, 428, 434, 463, 466, 476, 481, 482], "cumbersom": [70, 97, 185, 368], "say": [70, 71, 73, 75, 76, 83, 91, 96, 99, 102, 103, 105, 108, 114, 132, 138, 147, 174, 182, 192, 201, 225, 229, 235, 242, 246, 251, 266, 267, 268, 269, 271, 283, 348, 394, 412, 420, 427, 431, 433, 445, 462, 463, 464, 466, 467, 468, 471, 472, 474, 476, 482], "despit": [70, 83, 99, 103, 234, 262, 296, 341, 348, 385, 431, 467, 482], "accommod": [70, 99, 104, 200, 368, 465, 482], "pname": 70, "pmodul": [70, 71, 482], "parg": 70, "pythonfil": 70, "proceed": [70, 74, 106, 185, 194, 204, 261, 271, 283, 293, 308, 341, 364, 426, 429], "subroutin": [70, 85, 93, 466], "glue": [70, 88, 463, 465], "numarg": 70, "emb_numarg": 70, "embmethod": 70, "embmodul": 70, "pyinit_emb": 70, "cflag": [70, 100, 108, 306, 360, 455, 464, 482], "4m": 70, "dndebug": 70, "fwrapv": 70, "wall": [70, 182, 308, 467, 482], "wstrict": [70, 482], "ldflag": [70, 455, 464, 482], "lpthread": 70, "ldl": 70, "lutil": 70, "lm": [70, 108, 344, 434], "lpython3": [70, 480, 482], "xlinker": [70, 108], "welcom": [70, 88, 90, 139, 155, 222, 283, 288, 383, 425, 466, 474, 482], "linkforshar": [70, 482], "incorpor": [71, 98, 102, 185, 267, 341, 412, 425, 464, 466, 467, 468, 471, 474, 480, 482], "cffi": [71, 72, 89, 185, 482], "favorit": [71, 105, 441], "food": [71, 85, 299, 445], "monti": [71, 166, 192, 224, 262, 296, 340, 343, 344, 357, 421, 438, 453, 465, 467, 474], "fan": 71, "ls": [71, 87, 99, 136, 176, 331, 348, 357, 358, 477], "spammodul": 71, "spammifi": 71, "ll": [71, 73, 74, 82, 83, 86, 87, 88, 90, 91, 92, 93, 96, 98, 99, 102, 103, 105, 106, 108, 110, 178, 192, 199, 235, 269, 272, 289, 292, 297, 319, 331, 340, 341, 344, 368, 389, 412, 431, 433, 434, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 474, 480, 481], "spam_system": 71, "sts": [71, 82, 348, 465], "saw": 71, "predefin": [71, 83, 98, 102, 110, 155, 157, 175, 176, 246, 267, 281, 345, 368, 402, 404, 423, 427, 482], "pyerr_": 71, "lost": [71, 87, 88, 92, 98, 99, 105, 132, 176, 182, 185, 200, 225, 246, 262, 267, 269, 283, 308, 332, 333, 335, 338, 426, 443, 461, 463, 474, 475, 476, 481, 482], "pretend": [71, 101, 103, 176, 388, 427, 463, 480], "went": [71, 87, 144, 212, 295, 335, 412, 461, 463, 466, 467, 481], "predeclar": 71, "cours": [71, 74, 88, 92, 93, 98, 99, 103, 108, 114, 175, 185, 192, 199, 201, 206, 234, 267, 268, 283, 289, 292, 293, 331, 338, 341, 343, 368, 383, 388, 389, 409, 418, 427, 454, 461, 462, 464, 469, 474, 475, 476], "wise": [71, 92, 180, 185, 463, 479], "couldn": [71, 102, 106, 189, 258, 293, 333, 340, 385, 389, 422, 462, 463, 466, 468, 478, 482], "satisfi": [71, 106, 180, 220, 230, 233, 255, 258, 268, 275, 347, 364, 427, 431, 474], "spamerror": 71, "pyinit_spam": 71, "pymodinit_func": [71, 74, 455, 464, 482], "retain": [71, 86, 104, 108, 118, 166, 168, 176, 189, 195, 204, 207, 212, 246, 249, 250, 255, 261, 267, 271, 293, 331, 340, 341, 383, 393, 418, 425, 427, 429, 434, 475, 476, 478, 480, 482], "unintend": [71, 83, 185, 283, 296, 482], "going": [71, 73, 74, 77, 82, 88, 91, 93, 95, 101, 102, 103, 108, 115, 125, 136, 144, 151, 182, 185, 195, 199, 235, 279, 292, 293, 308, 334, 341, 357, 361, 364, 388, 389, 406, 412, 418, 427, 460, 461, 463, 467, 472, 482], "genuin": [71, 192, 214, 468, 474], "seen": [71, 73, 82, 83, 88, 92, 93, 99, 155, 210, 229, 234, 255, 261, 269, 271, 292, 305, 331, 361, 368, 399, 401, 412, 414, 423, 454, 464, 467, 470, 476, 479, 482], "promis": [71, 92, 255, 474], "spammethod": 71, "obsolet": [71, 90, 151, 212, 242, 262, 267, 306, 314, 344, 352, 365, 388, 399, 407, 418, 461, 462, 463, 466, 468, 471, 474, 476, 477, 478, 482], "spam_doc": 71, "pyinit_nam": 71, "satisfactorili": 71, "pyimport_inittab": [71, 482], "interven": [71, 99, 189, 192, 203, 475], "exercis": [71, 82, 98, 103, 159, 186, 267, 292, 308, 361, 467, 482], "substanti": [71, 242, 261, 314, 409, 425, 463, 465, 470, 473, 474, 475, 476, 478, 482], "xxmodul": 71, "perman": [71, 106, 108, 222, 226, 247, 394, 451, 460, 477, 481, 482], "rebuild": [71, 108, 162, 474, 482], "luckili": [71, 88, 101, 387, 406], "toplevel": [71, 159, 185, 224, 351, 368, 374, 375, 412], "subdirectori": [71, 74, 82, 83, 108, 162, 199, 215, 230, 246, 252, 253, 271, 293, 296, 302, 334, 379, 387, 398, 420, 421, 422, 460, 461, 462, 464, 467, 468, 477, 479, 480, 481, 482], "lx11": 71, "far": [71, 74, 83, 87, 88, 102, 103, 168, 182, 185, 189, 234, 235, 242, 258, 275, 283, 292, 293, 294, 296, 308, 319, 331, 332, 358, 365, 374, 387, 394, 433, 461, 462, 463, 464, 465, 467, 482], "concentr": [71, 102, 106, 234, 368, 467], "imagin": [71, 102, 112, 299, 388, 389], "fortun": [71, 74, 90, 112, 151, 469], "dwell": 71, "somehow": [71, 76, 283, 343, 357, 467, 468], "wherev": [71, 77, 88, 90, 92, 99, 102, 105, 176, 368, 385, 396, 463, 466, 472], "my_callback": [71, 73, 292], "my_set_callback": 71, "temp": [71, 108, 283, 330, 340, 359, 410, 420, 429, 455, 460, 482], "set_callback": 71, "rememb": [71, 83, 87, 88, 90, 91, 93, 98, 99, 102, 108, 158, 192, 246, 261, 283, 319, 340, 361, 368, 375, 394, 401, 409, 411, 435, 440, 460, 461, 462, 466, 467, 468, 470, 474, 475], "boilerpl": [71, 74, 88, 97, 289, 361, 388, 431, 477, 482], "arglist": 71, "eventcod": 71, "placement": [71, 146, 302, 368, 412, 473, 482], "mistak": [71, 92, 101, 102, 103, 118, 210, 212, 267, 271, 292, 344, 365, 368, 455, 465, 466, 468, 470, 471, 472, 482], "whoop": [71, 99], "lls": 71, "ii": [71, 77, 159, 175, 341, 426], "si": [71, 177, 348], "wb": [71, 85, 99, 115, 118, 149, 199, 207, 222, 233, 270, 278, 299, 304, 309, 320, 349, 385, 396, 400, 418, 420, 421, 461, 470, 474], "100000": [71, 224, 308, 366, 381, 464], "400": [71, 99, 106, 115, 155, 222, 240, 283, 288, 335, 368, 383, 440, 451, 471], "300": [71, 90, 99, 106, 155, 240, 246, 383, 394, 426, 451, 474, 482], "myfunct": [71, 77, 168], "2j": [71, 95, 224, 262, 482], "geoff": [71, 482], "philbrick": 71, "hks": 71, "keywdarg_parrot": 71, "keywd": 71, "voltag": [71, 224, 440], "stiff": [71, 440], "voom": [71, 440], "norwegian": [71, 157, 440], "blue": [71, 90, 92, 99, 102, 104, 147, 155, 159, 176, 210, 261, 318, 343, 344, 368, 375, 383, 401, 440, 441, 451, 464, 465, 470, 471, 474, 478, 482], "sss": [71, 73, 182], "parrot": [71, 224, 241, 307, 440, 467], "wouldn": [71, 82, 88, 101, 102, 249, 267, 332, 343, 361, 387, 388, 426, 440, 461, 462, 463, 464, 465, 467, 482], "volt": [71, 440], "love": [71, 99, 147, 174, 243, 440, 470, 476], "keywdarg_method": 71, "skit": [71, 192], "keywdargmodul": 71, "keywdarg": 71, "pyinit_keywdarg": 71, "counterpart": [71, 99, 176, 190, 224, 258, 261, 267, 288, 319, 337, 344, 360, 468, 470, 471, 472, 474, 479, 482], "iii": 71, "789": [71, 185, 467], "ss": [71, 105, 182, 247, 344, 365, 471, 475], "hell": 71, "forgotten": [71, 105, 124], "occupi": [71, 105, 115, 283, 322, 371, 375, 476], "reus": [71, 74, 78, 88, 103, 125, 127, 137, 157, 165, 168, 175, 183, 192, 213, 225, 235, 250, 293, 319, 337, 338, 341, 347, 361, 363, 364, 388, 401, 426, 431, 466, 474, 481, 482], "unusu": [71, 90, 99, 108, 182, 212, 295, 308, 322, 343, 348, 429, 482], "prematur": [71, 98, 241, 271, 434, 469, 482], "undetect": [71, 271, 364], "modern": [71, 95, 101, 112, 125, 138, 143, 176, 177, 193, 234, 258, 310, 332, 337, 341, 357, 368, 405, 461, 465, 467, 468, 474, 475, 478, 479, 480, 481, 482], "plenti": [71, 103], "appar": [71, 90, 151, 333, 407, 461, 465], "heavi": [71, 106, 166, 468, 475, 479, 482], "somewher": [71, 82, 83, 88, 99, 244, 246, 292, 302, 314, 343, 344, 409, 440, 467, 471], "advantag": [71, 73, 83, 88, 93, 98, 99, 104, 108, 139, 185, 196, 222, 249, 250, 299, 308, 324, 331, 344, 366, 374, 387, 401, 410, 412, 414, 420, 461, 464, 465, 470, 474, 475, 476, 477, 480, 482], "disadvantag": [71, 74, 82, 83, 102, 131, 157, 185, 341, 366, 463, 470], "truli": [71, 82, 83, 97, 113, 180, 271, 363, 394, 468, 469, 482], "reclaim": [71, 73, 249, 250, 385, 401], "nobodi": [71, 151, 234, 244, 335, 482], "seem": [71, 74, 77, 88, 93, 98, 102, 118, 139, 192, 215, 271, 279, 293, 308, 340, 429, 431, 461, 462, 463, 464, 466, 482], "popular": [71, 82, 91, 99, 103, 104, 139, 189, 192, 225, 247, 256, 271, 379, 383, 433, 460, 472, 474, 475, 480], "pictur": [71, 166, 199, 463, 465], "bet": 71, "therebi": [71, 83, 196, 202, 383, 476, 482], "no_bug": 71, "someon": [71, 83, 88, 103, 182, 335, 394, 412, 468, 473, 482], "spent": [71, 138, 308, 322, 333, 466, 467], "his": [71, 82, 229, 434, 461, 463, 467, 468, 476, 478, 482], "redund": [71, 88, 114, 270, 294, 319, 344, 385, 423, 435, 463, 468, 471, 482], "slowli": [71, 99, 471], "ever": [71, 83, 91, 92, 103, 111, 120, 176, 198, 200, 250, 258, 261, 282, 283, 341, 348, 385, 388, 460, 463, 464, 466, 467, 468, 469, 476, 482], "__cplusplus": 71, "sight": [71, 141], "aix": [71, 113, 293, 306, 352, 364, 480, 481, 482], "unic": [71, 295, 310], "wish": [71, 73, 86, 88, 90, 93, 98, 102, 106, 108, 118, 146, 157, 166, 182, 192, 202, 207, 233, 250, 251, 252, 253, 259, 262, 267, 269, 271, 278, 292, 319, 335, 341, 342, 348, 375, 384, 398, 399, 401, 406, 427, 462, 465, 466, 467, 468, 476, 482], "clash": [71, 175, 246, 267, 268, 271, 429, 434, 467, 477, 481, 482], "certainti": [71, 404], "burden": [71, 468, 469, 475, 477], "pyspam_system": 71, "realiti": [71, 182, 292, 337, 394], "plain": [71, 83, 92, 99, 106, 125, 150, 151, 152, 159, 172, 182, 195, 196, 199, 203, 204, 205, 212, 241, 255, 267, 335, 341, 342, 346, 385, 394, 406, 420, 421, 425, 434, 463, 469, 474, 476, 477, 478, 482], "spam_modul": 71, "pyspam_api": 71, "pyspam_api_point": 71, "c_api_object": 71, "pyspam_system_num": 71, "_c_api": 71, "disappear": [71, 73, 98, 103, 138, 463, 465, 482], "bulk": [71, 185, 476], "ifndef": [71, 88, 482], "py_spammodule_h": 71, "endif": [71, 88, 239, 319, 420, 455, 471, 472, 480, 481], "pyspam_system_return": 71, "pyspam_system_proto": 71, "import_spam": 71, "pyinit_cli": 71, "clientmodul": 71, "mention": [71, 73, 74, 75, 86, 93, 96, 99, 101, 102, 105, 108, 112, 166, 175, 176, 192, 212, 213, 214, 224, 262, 268, 271, 283, 292, 293, 331, 334, 338, 353, 361, 385, 425, 426, 427, 431, 433, 434, 435, 461, 469, 472, 473, 475, 476, 479, 481, 482], "metaphor": [71, 252, 253, 374], "cython": [72, 76, 77, 83, 89, 476, 482], "swig": [72, 77, 84], "numba": 72, "baggag": 73, "easiest": [73, 74, 77, 82, 83, 103, 118, 185, 192, 242, 246, 258, 292, 293, 388], "dealt": [73, 103, 156, 210, 292], "newdatatype_dealloc": 73, "newdatatypeobject": 73, "obj_underlyingdatatypeptr": 73, "other_obj": 73, "unwound": [73, 267, 319, 427], "mislead": [73, 105, 120, 152, 182, 394, 410, 463, 471, 474, 482], "my_dealloc": 73, "cbresult": 73, "err_typ": 73, "err_valu": 73, "err_traceback": 73, "unstabl": [73, 110, 185, 480, 482], "textual": [73, 74, 83, 101, 105, 118, 175, 200, 267, 286, 288, 314, 319, 344, 357, 375, 409, 410, 425, 429, 435, 439, 463, 478, 482], "newdatatype_repr": 73, "ified_newdatatyp": 73, "human": [73, 98, 99, 105, 115, 189, 190, 197, 229, 242, 244, 267, 288, 299, 303, 333, 335, 341, 342, 349, 352, 376, 386, 400, 413, 429, 452, 463, 470, 475, 476, 482], "newdatatype_str": 73, "stringified_newdatatyp": 73, "sens": [73, 83, 87, 88, 92, 96, 98, 99, 108, 110, 112, 118, 121, 182, 185, 189, 204, 205, 225, 246, 259, 271, 283, 292, 293, 308, 333, 338, 340, 341, 344, 345, 352, 366, 383, 402, 425, 427, 431, 469, 474, 476, 477, 479, 482], "structmemb": [73, 74, 91], "py_audit_read": 73, "read_restrict": 73, "write_restrict": 73, "flavor": [73, 103, 192, 222, 234, 293, 342, 344, 429, 455, 482], "newdatatype_getattr": 73, "50s": 73, "400s": 73, "newdatatype_setattr": 73, "newdatatype_richcmp": 73, "obj1": [73, 465], "obj2": [73, 465], "size1": 73, "size2": 73, "newdatatyp": 73, "unfil": [73, 429, 482], "newdatatype_hash": 73, "some_s": 73, "32767": 73, "some_numb": 73, "toy": [73, 299], "newdatatype_cal": 73, "arg3": [73, 83, 95, 114], "incur": [73, 185, 261, 474], "trivialtyp": 73, "trivial_dealloc": 73, "trivialobject": 73, "tp_": 73, "some_object": [73, 83, 255, 388], "mytyp": [73, 292, 472], "myth": 73, "download": [73, 78, 83, 99, 108, 296, 307, 374, 394, 398, 425, 427, 439, 452, 460, 466, 467, 468, 474, 475, 479, 480, 482], "www": [73, 77, 93, 103, 105, 106, 108, 139, 151, 157, 161, 165, 168, 182, 183, 199, 234, 239, 241, 242, 314, 318, 319, 328, 340, 341, 344, 352, 386, 393, 394, 395, 402, 410, 412, 423, 425, 427, 434, 439, 444, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 477, 479, 482], "gentl": [74, 91, 96, 118, 463], "customobject": 74, "customtyp": 74, "custommodul": 74, "pyinit_custom": 74, "hope": [74, 96, 98, 99, 103, 212, 329, 385, 460, 461, 462, 475, 476, 478, 480], "mandatori": [74, 82, 111, 247, 250, 268, 293, 341, 342, 455, 464, 475, 479, 481, 482], "wari": [74, 353], "accid": [74, 118, 467, 468, 469, 480, 482], "besid": [74, 88, 91, 92, 182, 224, 258, 333, 375, 401, 434, 435, 460, 471, 482], "ob_fval": 74, "pick": [74, 83, 99, 106, 108, 141, 159, 244, 251, 275, 292, 381, 387, 420, 461, 466, 472], "us": [74, 76, 87, 92, 93, 157, 160, 177, 182, 194, 195, 201, 205, 208, 222, 266, 284, 299, 318, 319, 332, 341, 365, 385, 388, 389, 394, 406, 412, 425, 427, 459, 460, 466, 482], "mycustom": 74, "ext_modul": [74, 461], "fire": [74, 95, 99, 118, 138, 139, 333, 482], "uninterest": [74, 189], "showcas": [74, 125, 132], "custom2": 74, "custom_dealloc": 74, "custom_new": 74, "custom_init": 74, "tmp": [74, 99, 105, 108, 168, 222, 244, 271, 332, 359, 431, 455, 461, 464, 465, 466, 467, 468, 474, 480], "ooi": 74, "custom_memb": 74, "custom_nam": 74, "custom_method": 74, "pyinit_custom2": 74, "midway": [74, 423], "polymorph": [74, 85, 88, 416], "ourselv": [74, 92, 112, 385, 482], "anyon": [74, 101, 108, 341, 361, 425, 462, 468, 476], "riski": [74, 192, 482], "paranoid": 74, "uui": 74, "custom_getfirst": 74, "custom_setfirst": 74, "custom_getlast": 74, "custom_setlast": 74, "custom_getsett": 74, "custom3": 74, "pyinit_custom3": 74, "did": [74, 82, 88, 99, 101, 102, 103, 106, 138, 165, 166, 190, 192, 201, 242, 283, 284, 286, 292, 293, 314, 319, 329, 341, 348, 352, 381, 385, 387, 414, 421, 427, 430, 441, 461, 462, 463, 471, 474, 475, 476, 479, 480, 482], "unneed": [74, 76, 410, 468, 476, 481, 482], "some_attribut": [74, 388], "custom_travers": 74, "custom_clear": 74, "custom4": 74, "pyinit_custom4": 74, "subobject": [74, 83], "vret": 74, "nevertheless": [74, 99, 157, 196, 212, 258, 292, 357, 367, 412, 469], "prone": [74, 112, 151, 182, 192, 299, 308, 344, 471, 477], "micro": [74, 83, 352, 461, 468, 470, 471, 479, 482], "expens": [74, 76, 83, 98, 147, 180, 187, 189, 225, 258, 266, 289, 308, 332, 338, 341, 352, 423, 431, 454, 465, 472, 475, 476, 478, 479, 480, 482], "robust": [74, 138, 151, 183, 255, 308, 333, 343, 367, 401, 468, 474, 476, 477, 482], "reimplement": [74, 383, 387, 463, 476, 477, 478, 479, 482], "difficult": [74, 82, 90, 93, 98, 101, 102, 105, 118, 139, 268, 299, 394, 412, 461, 462, 463, 464, 465, 468, 471, 474, 480, 482], "sublist": [74, 374, 461, 474], "sublistobject": 74, "sublist_incr": 74, "sublist_method": 74, "sublist_init": 74, "sublisttyp": 74, "sublistmodul": 74, "pyinit_sublist": 74, "resembl": [74, 92, 108, 176, 224, 242, 293, 297, 331, 454, 463, 467, 468, 471, 480], "briefli": [75, 105, 185, 466], "explanatori": [75, 192, 314, 387, 482], "materi": [75, 93, 102, 176, 189, 233, 337, 341, 367, 374, 425, 465, 468, 482], "xy": [75, 108, 261, 334, 385], "studi": [75, 83, 93, 192, 235, 383, 464, 467], "paradigm": [75, 93], "reassur": 75, "pythonxi": [75, 460, 480], "ni": [75, 307, 393, 445, 466], "cl": [75, 297, 467], "thank": [75, 93, 97, 101, 102, 105, 155, 199, 234, 283, 340, 361, 385, 388, 461, 462, 463, 464, 465, 466, 467, 468, 474, 475, 478, 479, 482], "_declspec": 75, "dllexport": [75, 84], "initspam": 75, "nigetspamdata": 75, "studio": [75, 83, 460, 467, 477, 482], "100k": 75, "rid": [75, 103, 462, 471, 482], "msvcrtxx": 75, "guido": [76, 78, 83, 85, 91, 189, 279, 344, 385, 425, 441, 449, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 476, 477, 478, 479, 480, 481, 482], "van": [76, 78, 83, 85, 159, 182, 422, 425, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482], "rossum": [76, 78, 83, 85, 422, 425, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 476, 477, 478, 479, 480, 481, 482], "20": [76, 83, 87, 90, 91, 93, 95, 98, 99, 102, 105, 133, 138, 155, 175, 180, 182, 185, 192, 208, 210, 234, 235, 246, 255, 259, 267, 283, 293, 296, 308, 318, 319, 321, 322, 337, 341, 343, 344, 352, 357, 365, 366, 383, 385, 393, 395, 425, 434, 439, 448, 450, 454, 455, 461, 465, 466, 467, 468, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482], "30": [76, 82, 83, 90, 91, 93, 95, 98, 99, 125, 139, 155, 159, 182, 185, 192, 235, 259, 261, 267, 269, 293, 316, 318, 321, 337, 343, 344, 345, 361, 364, 365, 366, 383, 422, 439, 440, 450, 451, 455, 464, 465, 466, 468, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482], "19999999999999996": 76, "0011001100110011001100110011001100110011001100110011": 76, "1999999999999999555910790149937383830547332763671875": 76, "15": [76, 83, 90, 93, 95, 98, 99, 104, 105, 130, 157, 159, 166, 180, 182, 192, 202, 210, 214, 222, 235, 240, 246, 258, 259, 261, 267, 288, 293, 299, 318, 319, 322, 340, 341, 343, 344, 345, 348, 352, 365, 366, 377, 383, 386, 423, 424, 434, 445, 455, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482], "eight": [76, 105, 176, 259, 343, 344, 354, 368, 434, 461, 464, 465, 480, 482], "modula": [76, 78, 274, 439], "m_": 76, "baseclass": 76, "methodnam": [76, 283, 387, 418, 439, 440], "walrus": [76, 120, 429, 480, 482], "200": [76, 83, 106, 155, 176, 185, 189, 222, 240, 241, 244, 337, 341, 344, 368, 383, 387, 394, 406, 426, 445, 451, 464, 478, 480, 482], "572": [76, 426, 429, 480, 482], "pipermail": [76, 453, 462, 464], "3000": [76, 85, 111, 384, 385, 426, 427, 467, 469], "2006": [76, 93, 182, 267, 314, 410, 412, 421, 425, 466, 481], "novemb": [76, 182, 434, 482], "004643": 76, "mydict": [76, 83, 385, 465], "elif": [76, 83, 87, 90, 93, 99, 106, 120, 121, 182, 189, 199, 227, 250, 289, 319, 340, 342, 344, 352, 357, 398, 426, 427, 430, 431, 434, 440, 466, 475, 482], "function_1": [76, 95], "function_2": [76, 95], "method_1": 76, "myvisitor": 76, "visit_a": 76, "method_nam": [76, 77], "visit_": [76, 120], "stackless": [76, 433], "nuitka": [76, 83], "jython": [76, 82, 85, 92, 303, 361, 406, 433, 448, 454, 462, 465, 467, 474, 476], "pypi": [76, 82, 87, 98, 101, 151, 187, 303, 307, 341, 352, 388, 398, 408, 424, 433, 448, 452, 453, 458, 464, 466, 468, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482], "very_long_list_of_fil": 76, "interv": [76, 93, 98, 176, 182, 246, 269, 293, 308, 318, 333, 343, 352, 361, 364, 365, 375, 383, 465, 467, 474, 478, 480, 482], "boehm": 76, "purifi": [76, 455], "pascal": [76, 78, 83, 93, 347, 426, 439, 440, 441, 448, 464, 468], "cartesian": [76, 154, 261, 340, 467, 470, 477], "lisp": [76, 83, 93, 463], "539294296": 76, "1142331976": 76, "resid": [76, 99, 108, 199, 229, 271, 293, 313, 322, 342, 431, 461, 482], "listwrapp": 76, "the_list": 76, "98767": 76, "555": 76, "el": [76, 143, 358, 393, 412, 430], "9999999": 76, "1001": [76, 157, 345], "7777777": 76, "333": [76, 83, 441, 443, 466], "anomali": [76, 185], "meet": [76, 91, 93, 99, 140, 168, 174, 185, 189, 192, 299, 343, 344, 394, 427, 461, 465, 471], "stub": [76, 155, 257, 258, 293, 352, 385, 388, 482], "disciplin": [76, 207], "driven": [76, 83, 168, 276, 361, 368, 383, 387, 409, 411, 461, 474, 482], "1970s": 76, "messi": [76, 93, 464, 468], "spaghetti": 76, "feel": [76, 101, 188, 292, 367, 375, 389, 440, 463, 464, 467, 471], "jump": [76, 99, 190, 192, 246, 270, 297, 383, 427, 440, 464, 466, 469, 472, 478, 479, 482], "middl": [76, 83, 88, 90, 125, 168, 198, 297, 318, 321, 343, 363, 383, 415, 466, 468, 478, 482], "abus": [76, 408, 435, 474, 482], "spare": [76, 462], "mydir": 76, "entranc": 76, "delphi": 76, "harder": [76, 83, 192, 292, 344, 389, 482], "21": [76, 93, 95, 99, 105, 182, 185, 189, 202, 222, 225, 234, 235, 319, 341, 343, 365, 377, 381, 440, 448, 449, 454, 463, 464, 466, 467, 474, 475, 478, 480, 481, 482], "42": [76, 83, 92, 98, 118, 120, 124, 128, 138, 159, 168, 169, 175, 185, 192, 224, 225, 255, 268, 283, 284, 292, 318, 343, 344, 345, 366, 380, 383, 385, 387, 388, 419, 426, 428, 439, 440, 445, 448, 465, 466, 467, 474, 475, 478, 480, 481, 482], "63": [76, 318, 340, 352, 482], "2016": [76, 182, 341, 445, 452, 460, 478, 479, 482], "040070": 76, "fee": [76, 224, 425], "fie": 76, "fum": [76, 224], "fiefoo": 76, "book": [77, 89, 93, 101, 102, 150, 154, 159, 182, 271, 319, 340, 361, 367, 368, 474, 482], "pyrex": 77, "sip": [77, 393], "cxx": [77, 354, 455, 482], "weav": 77, "pythonrun": [77, 466, 482], "pylists": 77, "al": [77, 93, 180, 337, 341, 346, 375, 467, 478, 482], "pymap": 77, "arg_format": 77, "print_error": [77, 474], "stdoutcatch": 77, "attrnam": [77, 267, 409], "ugli": [77, 112, 189, 368, 461, 464], "hackeri": 77, "worth": [77, 99, 115, 192, 222, 261, 268, 269, 283, 433, 434, 461, 462, 463, 466, 473, 477, 482], "effort": [77, 83, 88, 99, 102, 225, 275, 307, 343, 461, 463, 464, 465, 467, 468, 470, 471, 472, 474, 479], "gdb": [77, 83, 468, 482], "gdbinit": [77, 468, 482], "br": [77, 176, 434, 469, 470, 474, 475, 482], "_pyimport_loaddynamicmodul": 77, "myscript": [77, 297, 308, 437, 454], "50": [77, 82, 83, 93, 98, 99, 101, 138, 155, 159, 182, 185, 246, 262, 267, 279, 308, 318, 319, 337, 343, 352, 365, 366, 375, 383, 387, 389, 411, 412, 448, 449, 450, 467, 468, 472, 474, 477, 478, 479, 480, 481, 482], "python2": [77, 108, 109, 110, 344, 420, 460, 462, 467, 476, 482], "red": [77, 78, 90, 92, 98, 99, 102, 104, 108, 147, 150, 159, 176, 210, 239, 261, 318, 343, 344, 368, 375, 383, 401, 425, 440, 451, 464, 465, 470, 471, 478, 482], "hat": [77, 78, 108, 425, 450], "devel": [77, 95, 288, 482], "rpm": [77, 461, 464], "debian": [77, 222, 459, 461, 462, 479, 482], "apt": [77, 95, 478, 482], "tripl": [77, 85, 102, 105, 189, 249, 288, 293, 296, 300, 319, 328, 337, 344, 363, 383, 426, 434, 471, 482], "myreadlin": 77, "relink": 77, "linkcc": [77, 455], "bpl": 77, "amoeba": 78, "bourn": [78, 301], "1989": [78, 182, 467], "usenet": [78, 82, 98], "bugfix": [78, 87, 101, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "bn": 78, "rcn": [78, 91], "0an": 78, "0bn": 78, "0rcn": 78, "a0": 78, "4a0": 78, "newsgroup": [78, 288, 465], "comp": [78, 82, 83, 98, 149, 288, 453, 462, 463, 466, 475, 476], "lang": [78, 82, 83, 98, 105, 229, 266, 340, 394, 453, 462, 463, 464, 466, 469], "communiti": [78, 83, 246, 458, 461, 462, 466, 467, 472, 474, 479], "rss": [78, 463], "git": [78, 143, 348, 476, 480, 482], "jelk": 78, "boer": 78, "283": [78, 182], "303": [78, 106, 240, 394], "wiki": [78, 79, 82, 83, 93, 159, 234, 340, 341, 367, 458, 465, 466, 468, 474, 475, 482], "moin": [78, 82, 458, 465], "pythonbook": 78, "1970": [78, 147, 150, 182, 339, 365, 482], "bbc": [78, 165, 438, 477], "18": [78, 87, 93, 95, 105, 182, 185, 192, 222, 225, 235, 296, 318, 319, 332, 341, 343, 344, 352, 375, 383, 445, 450, 464, 465, 468, 471, 472, 474, 479, 480, 481, 482], "602": [78, 481], "mailman": [78, 463, 465, 472, 481, 482], "zope": [78, 425, 462, 463, 474], "googl": [78, 81, 82, 98, 106, 402, 418, 466, 467, 468, 475, 480, 482], "yahoo": [78, 183, 466, 467], "lucasfilm": 78, "ltd": [78, 341, 425], "pygam": 78, "__sizeof__": [78, 352, 388, 467, 482], "__": [78, 83, 99, 289, 361, 434], "emac": [78, 84, 90, 105, 155, 176, 246, 271, 331, 434, 458, 467], "edu": [78, 93, 394, 425, 463, 464, 482], "tcl_librari": 79, "tk_librari": 79, "sam": [79, 425, 461, 472, 482], "sourceforg": [79, 108, 182, 461, 462, 464, 467, 482], "tkappinit": 79, "tclsam_init": 79, "libtclsam": 79, "libtksam": 79, "xt": [79, 149, 233, 270, 385], "xtaddinput": 79, "takefocus": [79, 375], "hp": [81, 465, 482], "compaq": 81, "engin": [82, 93, 96, 102, 185, 266, 319, 340, 368, 375, 412, 414, 461, 463, 465, 467, 468, 472, 477, 482], "mathmodul": 82, "sl": [82, 284, 482], "scriptfil": 82, "755": [82, 99], "env": [82, 99, 105, 142, 166, 199, 293, 296, 344, 348, 394, 398, 420, 437, 447, 452, 454, 459, 460, 464, 465, 472, 480, 482], "alex": [82, 464, 467, 468, 471, 472, 477, 478, 480, 481, 482], "rezinski": 82, "ncurs": [82, 90, 176, 461, 462, 465, 471, 480, 482], "sysv": [82, 461, 462], "colour": [82, 90, 102, 120, 461, 482], "mous": [82, 90, 176, 348, 370, 375, 383, 461, 467, 482], "ose": [82, 258, 337, 461, 479, 482], "fancier": [82, 118, 189, 465, 466, 468], "smalltalk": [82, 93, 159, 387, 439, 462], "delight": 82, "main_log": 82, "tractabl": 82, "ters": [82, 303, 460], "pleasant": [82, 461, 462, 466], "fun": [82, 166, 225, 383, 385, 387, 472, 478], "flaw": [82, 86, 388, 463, 472, 474, 482], "self_test": 82, "unavail": [82, 106, 192, 255, 270, 283, 293, 332, 385, 427, 482], "fake": [82, 292, 406, 427, 482], "epydoc": 82, "thread_task": 82, "sequenti": [82, 99, 103, 124, 162, 217, 234, 258, 283, 299, 308, 344, 361, 388, 427, 451, 482], "001": [82, 182, 224, 261, 271, 308, 365, 434, 443], "job": [82, 88, 90, 98, 99, 102, 105, 118, 127, 150, 158, 165, 200, 206, 222, 229, 283, 293, 299, 345, 348, 374, 394, 431, 461, 467, 474, 482], "realist": [82, 348, 388, 410, 423, 465, 466], "130283832797456": 82, "130283824404752": 82, "130283816012048": 82, "130283807619344": 82, "130283799226640": 82, "consult": [82, 83, 90, 93, 98, 102, 108, 154, 166, 175, 182, 190, 229, 267, 268, 271, 293, 295, 319, 322, 335, 337, 340, 342, 352, 365, 367, 406, 423, 431, 460, 461, 463, 464, 465, 466, 467, 468, 469, 481, 482], "account": [82, 102, 103, 157, 159, 162, 166, 182, 185, 189, 201, 208, 222, 224, 234, 243, 266, 267, 268, 286, 293, 296, 307, 310, 339, 347, 352, 358, 361, 398, 466, 470, 471, 474, 476, 477, 478, 480, 481, 482], "pvm": 82, "l2": [82, 157, 375], "d1": [82, 468, 481], "d2": [82, 468, 481], "mass": [82, 92, 182, 461], "mutex": [82, 113, 123, 137, 340, 352, 482], "hindranc": 82, "multiprocessor": [82, 284, 303], "cpu": [82, 100, 103, 105, 120, 124, 125, 129, 138, 157, 163, 165, 234, 235, 262, 270, 293, 322, 337, 344, 365, 366, 381, 408, 455, 458, 464, 471, 475, 479, 480, 481, 482], "insist": [82, 309, 368], "greg": [82, 108, 461, 463, 464, 465, 466, 475, 477, 480, 482], "stein": [82, 461, 482], "adam": [82, 467, 468, 471, 474, 475, 478, 479, 480, 481, 482], "olsen": [82, 467, 468], "experi": [82, 88, 92, 93, 98, 100, 102, 125, 175, 229, 308, 340, 368, 383, 387, 409, 460, 461, 462, 463, 467, 468, 470, 471, 472, 477, 480, 482], "safethread": 82, "exhibit": [82, 246, 258, 293, 344], "sharp": [82, 157], "slower": [82, 83, 102, 157, 225, 246, 258, 270, 283, 330, 383, 464, 465, 467, 469, 479, 480, 481, 482], "compens": [82, 308, 478, 482], "creativ": [82, 234, 336], "judici": [82, 180, 467], "tremend": 82, "3rd": [82, 319, 334, 385, 445, 475, 482], "rate": [82, 115, 141, 235, 289, 295, 308, 343, 349, 395, 400, 478, 482], "gain": [82, 88, 99, 144, 166, 250, 258, 299, 352, 394, 431, 433, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 482], "old_path": 82, "new_path": 82, "ntfs": 82, "hfs": 82, "hhl": [82, 347], "letter": [82, 90, 102, 105, 143, 147, 157, 176, 177, 185, 189, 192, 227, 266, 267, 292, 294, 296, 297, 301, 310, 319, 341, 344, 345, 363, 375, 386, 393, 394, 421, 429, 434, 441, 448, 461, 463, 465, 466, 467, 468, 469, 472, 473, 475, 477, 478, 479, 482], "homogen": [82, 344, 347, 385, 407], "osx": [82, 175, 476, 479, 482], "ironpython": [82, 85, 92, 303, 433, 467, 482], "pyseri": 82, "mitch": 82, "chapman": [82, 465, 480, 482], "selm": 82, "34a04430": 82, "cf9": 82, "ohioe": 82, "arrang": [82, 93, 98, 99, 125, 131, 132, 138, 192, 235, 255, 268, 283, 341, 364, 368, 374, 375, 482], "paul": [82, 314, 460, 461, 462, 463, 464, 466, 467, 468, 472, 475, 476, 477, 479, 480, 481, 482], "boddi": [82, 460], "webprogram": 82, "cameron": [82, 147], "laird": 82, "technolog": [82, 90, 103, 256, 425], "20210224183619": 82, "phaseit": 82, "claird": 82, "web_python": 82, "me": [82, 103, 108, 199, 225, 235, 239, 288, 345, 361, 389, 452, 460, 467, 472], "qs": [82, 393], "josephin": 82, "mi": [82, 149, 466, 480, 481, 482], "req": [82, 106, 341, 388, 394, 474], "hdrs": [82, 394], "guy": 82, "steel": [82, 482], "2c": [82, 368, 482], "sender": [82, 99, 199, 202, 207, 271, 335], "fromaddr": [82, 99, 268, 269, 335, 341], "toaddr": [82, 99, 268, 269, 335], "localhost": [82, 99, 103, 106, 139, 199, 241, 244, 246, 268, 269, 283, 305, 313, 329, 335, 338, 341, 358, 394, 418, 419, 450, 482], "sbin": [82, 175, 319], "progress": [82, 102, 151, 192, 211, 222, 231, 235, 283, 289, 331, 340, 341, 374, 375, 398, 399, 460, 461, 463, 468, 482], "twist": [82, 389, 425, 482], "disk": [82, 93, 98, 105, 168, 183, 193, 199, 207, 212, 235, 242, 246, 258, 265, 269, 271, 278, 281, 284, 288, 293, 295, 298, 299, 322, 327, 330, 332, 340, 348, 352, 381, 404, 412, 421, 427, 464, 466, 467, 469, 472, 475, 482], "lightweight": [82, 215, 225, 262, 340, 380, 398, 408, 460, 461, 466, 467, 477, 478], "databaseprogram": 82, "sdev": 82, "gaussian": [82, 474], "graphic": [83, 90, 105, 108, 157, 172, 176, 248, 317, 368, 374, 383, 387, 402, 467], "pythonwin": [83, 175, 460, 461], "cool": 83, "activepython": [83, 460], "eric": [83, 90, 174, 176, 296, 324, 412, 425, 441, 461, 462, 465, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "pyqt": [83, 458], "scintilla": 83, "trepan3k": 83, "wing": 83, "komodo": 83, "pycharm": [83, 478], "pylint": [83, 101], "pyflak": [83, 482], "sooner": [83, 175, 410, 467], "mypi": [83, 101, 427, 472, 477, 478, 482], "pyre": 83, "pytyp": [83, 101, 478], "scan": [83, 88, 91, 93, 95, 98, 102, 103, 157, 176, 227, 229, 244, 293, 319, 328, 361, 368, 385, 427, 428, 454, 463, 464, 466, 468, 474, 477, 482], "pyinstal": [83, 283], "pyoxid": 83, "py2app": [83, 458], "py2ex": [83, 283, 482], "foobar": [83, 118, 219, 224, 292, 319, 344, 389, 482], "superfici": 83, "clutter": [83, 99, 474], "defeat": [83, 102, 399, 427, 482], "everywher": [83, 103, 361, 482], "basi": [83, 98, 99, 157, 175, 239, 242, 262, 267, 271, 308, 352, 357, 421, 425, 431, 435, 460, 463, 464, 471, 472, 479, 482], "linter": [83, 120, 385], "mx": 83, "zodb": [83, 463], "gordon": [83, 103, 461, 464, 482], "mcmillan": [83, 103, 464], "2nd": [83, 261, 319, 368, 482], "1st": [83, 182, 261], "gone": [83, 96, 106, 240, 388, 461, 462, 464, 467, 469, 474, 480, 482], "bite": [83, 102, 292, 389], "neophyt": 83, "memoiz": [83, 225, 462, 478, 482], "_cach": [83, 283, 462], "matter": [83, 91, 92, 99, 105, 108, 162, 182, 192, 207, 246, 253, 266, 292, 293, 296, 338, 340, 344, 352, 360, 375, 385, 387, 388, 389, 399, 427, 430, 460, 461, 463, 465, 466, 467, 468, 476, 482], "tast": 83, "3c": [83, 368], "somevar": 83, "wrote": [83, 88, 93, 338, 425, 461, 463, 465, 476, 482], "wonder": [83, 88, 91, 104, 151, 174, 308, 433, 461, 464, 474], "factor": [83, 105, 141, 160, 192, 234, 292, 314, 344, 385, 387, 429, 430, 440, 463, 468, 475, 479, 481, 482], "mistaken": [83, 439, 461, 474, 476, 482], "diagnos": [83, 98, 175, 246, 387, 389], "a_list": [83, 380], "some_tupl": 83, "some_int": 83, "calle": [83, 379], "se": [83, 242, 358, 368], "func1": [83, 385], "99": [83, 90, 103, 147, 175, 182, 185, 266, 268, 319, 343, 344, 365, 465, 468, 469, 474], "100": [83, 90, 99, 105, 106, 115, 124, 125, 135, 147, 155, 180, 182, 185, 189, 200, 207, 213, 224, 240, 244, 246, 261, 266, 275, 283, 284, 295, 318, 329, 337, 343, 344, 345, 357, 365, 366, 375, 383, 387, 394, 404, 406, 418, 426, 429, 440, 443, 445, 448, 449, 450, 451, 461, 464, 466, 467, 468, 471, 472, 474, 476, 477, 480, 482], "clearest": [83, 464], "changeabl": 83, "func2": 83, "func3": 83, "func4": 83, "linear": [83, 131, 141, 147, 160, 168, 189, 231, 328, 343, 344, 349, 383, 439, 464, 476, 480, 482], "tax": [83, 319, 448, 464], "10e6": 83, "inc": [83, 341, 407, 425, 461, 467], "dec": [83, 84, 93, 182, 220, 222, 450, 463, 464, 482], "newdict": 83, "olddict": 83, "new_l": 83, "0x16d07cc": 83, "arguabl": [83, 341], "deliber": [83, 88, 118, 292, 305, 334, 344, 384, 387, 454, 476], "benefici": [83, 99, 477], "gave": [83, 105, 387, 468, 474, 482], "answer": [83, 87, 91, 92, 132, 154, 192, 225, 234, 268, 271, 308, 345, 365, 441, 445, 461, 465, 469, 482], "porch": 83, "neighbour": 83, "syntact": [83, 168, 201, 239, 250, 262, 286, 314, 340, 344, 385, 388, 393, 399, 413, 426, 429, 433, 434, 435, 440, 465, 466, 469], "on_tru": 83, "on_fals": 83, "ulf": 83, "bartelt": 83, "prime": [83, 165, 192, 207, 224, 261, 283, 344, 352, 365, 440, 450, 474, 478, 480, 482], "fibonacci": [83, 225, 440, 448, 449, 472], "mandelbrot": 83, "ru": [83, 217, 464], "ro": [83, 340], "iu": [83, 464], "sx": 83, "sy": 83, "yc": 83, "xc": [83, 352], "80": [83, 88, 101, 103, 135, 139, 147, 155, 157, 166, 207, 241, 242, 246, 307, 308, 332, 337, 338, 343, 383, 387, 393, 394, 451, 465, 472, 474, 477, 478, 482], "___": 83, "______": 83, "__________": 83, "_________________": 83, "axi": [83, 154, 275, 375, 440, 471], "____________________________": 83, "kid": [83, 383], "invari": [83, 92, 93, 185, 195, 235, 299, 385, 429, 431, 482], "0o10": [83, 224], "0xa5": 83, "165": [83, 267, 343], "0xb2": 83, "178": 83, "ago": [83, 463, 482], "190": [83, 343, 463], "144": [83, 225, 261, 440, 448, 449, 480], "0144": 83, "0x144": 83, "rm": [83, 87, 296, 331, 482], "rf": [83, 331, 434, 482], "09": [83, 99, 154, 208, 267, 275, 332, 341, 447, 482], "fanci": [83, 90, 99, 464, 468, 482], "04d": [83, 225], "3f": [83, 159, 445, 474, 480], "assembl": [83, 93, 105, 190, 340, 348, 368, 427, 433, 466, 482], "sio": 83, "yello": 83, "paren": [83, 110, 120, 174, 246, 430, 466, 482], "get_input": 83, "do_foo": [83, 155], "do_bar": [83, 155], "foo_inst": 83, "do_": [83, 155, 244], "myfunc": [83, 99, 190, 319, 419], "fname": [83, 105, 168, 189, 268, 381, 476], "tough": 83, "dive": [83, 88], "hot": [83, 246, 308, 472], "spot": [83, 295, 363], "benchmark": [83, 225, 308, 454, 461, 462, 464, 465, 466, 468, 469, 470, 472, 475, 476, 477, 480, 481, 482], "sophist": [83, 88, 132, 139, 155, 168, 185, 267, 341, 345, 412, 463, 466], "sprinkl": [83, 433], "moder": [83, 93, 102, 222, 288, 292, 305, 319, 463, 464], "outweigh": 83, "detriment": 83, "confid": [83, 101, 108, 151, 318], "skill": 83, "devot": [83, 102], "ineffici": [83, 258, 293, 341, 381, 472, 477, 482], "quadrat": [83, 160, 189, 344, 408, 468, 471, 482], "my_str": 83, "my_bytes_object": 83, "cheap": [83, 175, 299, 482], "penultim": 83, "activest": [83, 108, 453, 458, 461, 474], "52560": 83, "reorder": [83, 92, 125, 286, 412, 482], "mylist": [83, 180, 321, 474], "variat": [83, 91, 92, 102, 182, 192, 271, 293, 305, 341, 348, 353, 427, 460, 466, 482], "keep_funct": 83, "keep_condit": 83, "fastest": [83, 88, 233, 283, 319, 366, 383, 423, 450, 467, 474, 480], "con": [83, 340, 482], "lisp_list": 83, "analogu": [83, 283], "car": [83, 343], "cdr": 83, "replic": [83, 93, 207, 283, 460, 465, 468, 482], "exemplar": 83, "randal": [83, 104], "schwartz": [83, 104, 467], "isort": 83, "list1": 83, "list2": 83, "embodi": [83, 206, 409], "refin": [83, 479, 482], "mboxmailbox": 83, "maildirmailbox": 83, "outlookmailbox": 83, "mere": [83, 168, 182, 192, 224, 284, 292, 333, 348, 352, 383, 426, 469], "class1": [83, 388, 389, 463], "class2": [83, 388, 389, 463], "upperout": 83, "outfil": [83, 118, 140, 262, 292, 301, 379, 451, 470, 474, 482], "_outfil": 83, "redefin": [83, 108, 144, 160, 239, 249, 250, 338, 427, 464, 467, 482], "trickier": [83, 292], "rough": [83, 91, 99, 103, 105, 174, 201, 225, 242, 252, 261, 275, 281, 283, 292, 293, 302, 318, 344, 364, 384, 427, 461, 467, 468, 479, 481], "basealia": 83, "getcount": [83, 291, 481], "rebind": [83, 226, 435, 465], "tight": [83, 98, 108, 134, 429, 433, 482], "cout": 83, "mangl": [83, 195, 224, 321, 429, 434, 435, 439, 476, 482], "_classname__spam": [83, 439], "privaci": [83, 341, 397], "bother": [83, 90, 99, 101, 105, 283, 462, 463], "vanish": [83, 157, 235, 385], "inconveni": [83, 88, 242, 255, 389, 412], "patholog": [83, 482], "13901272": 83, "13891296": 83, "inadvis": 83, "500": [83, 106, 155, 182, 185, 213, 222, 240, 288, 343, 344, 397, 406, 449, 451, 464, 466, 471, 482], "thon": [83, 448], "english": [83, 99, 105, 292, 363, 365, 383, 433, 434, 468, 469, 477], "_sentinel": 83, "late": [83, 90, 101, 189, 461, 482], "firstofmonthd": 83, "namedint": 83, "xlat": 83, "ten": [83, 91, 99, 159, 176, 185, 308, 318, 464], "titlestr": [83, 383], "2012": [83, 90, 105, 222, 475, 481, 482], "blog": [83, 389, 466], "rock": [83, 105, 118], "princip": [83, 120, 242, 341, 470, 474], "age": [83, 91, 101, 104, 159, 225, 242, 243, 340, 341, 450, 463, 464, 465, 468, 474], "weather": 83, "govern": [83, 99, 180, 185, 193, 393, 418, 425, 474], "websit": [83, 106, 183, 394, 433, 474, 482], "station_id": 83, "_station_id": 83, "current_temperatur": 83, "longitud": [83, 345], "latitud": [83, 345], "station": 83, "historic_rainfal": 83, "mm": [83, 108, 182, 247, 278, 344, 365], "rainfal": 83, "change_st": 83, "cm": [83, 138, 168, 361, 387], "__pycache__": [83, 249, 250, 296, 311, 352, 449, 454, 472, 474, 480, 482], "xyz": [83, 118, 267, 268, 344, 387, 474, 482], "cfile": [83, 311], "bar_var": 83, "foo_var": 83, "workaround": [83, 180, 192, 297, 341, 344, 389, 421, 434, 475, 480, 482], "jim": [83, 93, 99, 308, 433, 461, 465, 467, 474, 478, 482], "roskind": [83, 308], "strang": [83, 88, 113, 139, 235, 363, 427, 460, 462, 466, 467], "matthia": [83, 468, 471, 475, 478, 479, 480, 482], "urlich": 83, "restructur": [83, 103, 307, 461, 462, 467, 482], "modnam": [83, 439, 449, 466, 478], "fool": [83, 461, 465], "proof": [83, 93, 202, 283, 461, 480, 482], "paradox": [83, 464], "0x7352a0": 83, "0x4198d0": 83, "yournam": 84, "v3": [84, 337, 482], "d48eceb": 84, "19": [84, 87, 93, 98, 99, 102, 105, 108, 138, 159, 175, 182, 185, 192, 208, 222, 235, 261, 293, 341, 343, 344, 345, 383, 422, 464, 465, 466, 467, 468, 471, 474, 480, 481, 482], "2017": [84, 341, 434, 482], "06": [84, 99, 182, 244, 267, 332, 448, 466, 478, 482], "04": [84, 87, 90, 182, 345, 347, 365, 424, 447, 466, 468, 471, 478, 479, 482], "45": [84, 88, 93, 146, 159, 166, 185, 267, 283, 318, 337, 383, 385, 464, 465, 466, 471, 480, 481], "1900": [84, 182, 365, 434, 467, 474], "hellohellohello": 84, "desktop": [84, 105, 402, 460], "pathext": [84, 332, 398, 460, 476, 482], "mcafe": 84, "pyinit_foo": 84, "__declspec": 84, "nn": 84, "33": [84, 147, 159, 175, 177, 283, 284, 319, 352, 388, 443, 449, 450, 463, 464, 465, 474, 480, 481, 482], "loadlibraryex": [84, 175, 480], "getprocaddress": 84, "leo": [84, 149], "initleo": 84, "initleoc": 84, "initmyappc": 84, "myapp": [84, 98, 99, 166, 234, 368, 420, 477], "pythonnn": 84, "_resultobj": 84, "typemap": [84, 269], "wxpythonwindow": 84, "duck": [85, 385, 467, 476, 482], "bdfl": 85, "benevol": [85, 461], "argument1": 85, "argument2": 85, "1j": [85, 154, 224, 262, 388, 482], "multidimension": [85, 344], "perl": [85, 93, 102, 104, 242, 319, 438, 443, 451, 461, 465, 466, 482], "dictview": [85, 344, 480, 482], "eafp": [85, 293], "forgiv": [85, 461], "lbyl": 85, "75": [85, 90, 99, 189, 192, 283, 343, 383, 448, 450, 464, 465, 467, 468, 478, 479, 480, 481, 482], "sum_two_numb": 85, "_featur": [85, 111, 224], "8192": [85, 103, 139, 222, 224, 241, 406], "81": [85, 100, 261, 283, 318, 343, 377, 441, 445, 448, 450, 480], "443": [85, 135, 241, 341, 476], "parameter": [85, 176, 192, 340, 344, 384, 385, 427, 471, 481, 482], "483": [85, 385, 477], "intens": [85, 176, 270, 293, 475, 482], "collat": [85, 266, 340, 472, 482], "leap": [85, 98, 102, 150, 182, 365], "race": [85, 185, 250, 293, 327, 337, 359, 401, 474, 475, 481, 482], "new_local": 85, "cp1252": [85, 157, 447], "04x": [85, 105], "organiz": [85, 341, 427], "1024": [85, 105, 174, 185, 214, 234, 268, 309, 337, 338, 341, 344, 381, 434, 450, 482], "max_exp": [85, 352], "posonly1": 85, "posonly2": 85, "positional_or_keyword": [85, 255], "kw_only1": 85, "kw_only2": 85, "411": [85, 106, 240, 267, 352, 381, 482], "abracadabra": [85, 91, 159, 283, 344, 345, 441, 465], "variable_nam": 85, "0000": [85, 96, 105, 157, 182, 202, 208, 259, 344, 365, 427, 461, 474, 475, 482], "10ffff": [85, 157, 427, 475, 482], "datastream": 85, "remove_gray_shad": 85, "refactor": [85, 93, 110, 120, 387, 388, 389, 465, 472, 476, 477, 478, 479, 482], "macintosh": [85, 157, 434, 461, 464], "zen": [85, 112], "larri": [86, 88, 343, 468, 470, 471, 475, 476, 480, 481, 482], "hast": [86, 88, 468, 470, 471, 475, 476, 480, 481, 482], "viabl": 86, "inadvert": [86, 108, 168, 255, 467, 476, 477, 482], "ann": 86, "exot": [86, 97, 262, 463], "malform": [86, 120, 157, 185, 198, 224, 241, 258, 271, 294, 345, 465, 467, 474, 482], "nutshel": [86, 88], "__wrapped__": [86, 224, 225, 255, 471, 472, 474, 476, 477, 482], "__globals__": [86, 255, 427, 469, 471, 482], "fn": [86, 99, 105, 165, 199, 267, 398, 406, 420, 421, 469, 477, 480], "paragraph": [86, 88, 98, 138, 196, 246, 262, 292, 293, 296, 341, 344, 363, 412, 419, 425, 427, 461, 464, 482], "tshepang": 87, "mbambo": 87, "devguid": [87, 476], "ctypes_configur": 87, "dotview": 87, "lib_pypi": 87, "drwxr": [87, 222], "xr": [87, 222, 332, 474], "wena": 87, "4096": [87, 103, 105, 113, 121, 159, 172, 222, 224, 234, 337, 344, 364, 474], "feb": [87, 93, 182, 463], "51": [87, 99, 100, 318, 383, 441, 467, 471], "rwxr": [87, 332], "535": 87, "05": [87, 99, 133, 154, 182, 261, 275, 319, 341, 347, 365, 451, 466, 467, 478, 482], "rw": [87, 92, 99, 222, 295, 332, 340, 348, 474, 477, 478, 479], "741": [87, 482], "01": [87, 99, 103, 146, 182, 185, 208, 224, 234, 239, 267, 332, 337, 339, 341, 344, 365, 407, 421, 424, 429, 450, 462, 464, 465, 466, 474, 475, 478, 479, 482], "cftuvsux": 87, "cp": [87, 91, 157, 292, 293, 468, 477], "store_tru": [87, 118, 189, 227, 292, 309, 398, 468, 474], "spirit": 87, "brought": [87, 103, 299, 464, 482], "complaint": [87, 88, 462], "vv": [87, 118, 454, 470, 478, 482], "vvv": [87, 118, 394], "sad": [87, 92, 469, 482], "vvvv": 87, "surfac": 87, "explor": [87, 98, 106, 166, 190, 239, 246, 293, 398, 412, 427, 460, 467, 472, 474, 482], "greedili": 87, "opposit": [87, 93, 102, 105, 208, 319, 383, 427, 461, 467, 469, 482], "sake": [87, 88, 90, 99, 127, 204, 293, 331, 431, 464, 482], "vq": 87, "ship": [88, 125, 131, 253, 368, 387, 408, 420, 460, 461, 464, 468, 470, 474, 476, 477, 481, 482], "black": [88, 90, 92, 99, 105, 147, 159, 176, 210, 246, 318, 375, 383, 451, 464, 465, 471, 472, 476, 480], "chore": [88, 92, 461], "paramount": [88, 185], "speedup": [88, 299, 425, 430, 462, 466, 467, 468, 470, 472, 474, 475, 476, 480, 482], "rewrit": [88, 97, 101, 120, 199, 217, 293, 377, 461, 464, 466, 468, 469, 477, 480, 482], "past": [88, 99, 118, 120, 138, 182, 192, 215, 246, 255, 293, 296, 299, 314, 345, 348, 365, 406, 423, 472, 474, 476, 477, 480, 481, 482], "admit": 88, "evolv": [88, 97, 257, 268, 431], "smart": [88, 246, 463, 482], "checksum": [88, 146, 337, 357, 421, 423], "clariti": [88, 103, 112, 292, 365, 426, 474, 482], "farther": 88, "walkthrough": 88, "checkout": [88, 118, 460, 468, 482], "trunk": [88, 466, 467], "_pickl": [88, 482], "scenario": [88, 98, 99, 134, 185, 187, 267, 268, 320, 387, 388, 389, 394, 431, 471, 476, 478, 482], "cut": [88, 102, 154, 224, 343, 365, 465, 467, 471, 482], "junk": [88, 189, 283, 288, 348, 482], "margin": 88, "wider": [88, 157, 182, 385, 465, 476], "hygien": 88, "picklerobject": 88, "pickler_typ": 88, "name_of_paramet": 88, "establish": [88, 98, 125, 139, 192, 222, 235, 246, 247, 269, 283, 299, 302, 305, 319, 328, 335, 341, 358, 394, 404, 426, 427, 428, 468, 474, 482], "multicharact": 88, "infer": [88, 118, 160, 192, 224, 225, 258, 268, 283, 302, 365, 380, 385, 472, 478], "relax": [88, 93, 182, 243, 474, 481, 482], "outdent": 88, "luck": [88, 409], "reopen": [88, 98, 222, 269, 299, 340, 358, 359, 468, 478, 482], "_pickle_pickler_dump": 88, "87ecad1261e02ac7": 88, "552eb1c0f52260d9": 88, "__pickle_pickler_dump_methoddef": 88, "__pickle_pickler_dump": 88, "__pickle_pickler_dump__doc__": 88, "rerun": [88, 431, 469], "impl": [88, 410, 482], "cur": [88, 105, 271, 281, 340, 345, 386, 397, 429, 434, 467, 468, 478, 482], "reiter": 88, "weird": [88, 118], "return_typ": [88, 430], "your_function_impl": 88, "da39a3ee5e6b4b0d3255bfef95601890afd80709": 88, "_pickle_pickler_dump_impl": 88, "3bd30745bf206a48f8b576a1da3d90f55a0a4187": 88, "issue3664": 88, "segfault": [88, 176, 465, 466, 478, 479, 482], "_pickler_clearbuff": 88, "pickler_method": 88, "__pickle_pickler_clear_memo_methoddef": 88, "_py_id": 88, "new_unique_py_id": 88, "generate_global_object": 88, "regener": [88, 200, 311, 431, 455, 468, 477, 478, 482], "congratul": 88, "collid": [88, 283, 319, 394, 435], "_impl": 88, "pickler_dump": 88, "pickler_dumper_impl": 88, "file_obj": [88, 461, 464], "fix_import": [88, 299, 470], "group_": 88, "favor": [88, 160, 222, 224, 241, 247, 249, 288, 293, 305, 335, 341, 344, 361, 385, 394, 465, 467, 469, 471, 473, 474, 476, 477, 478, 480, 482], "clearer": [88, 93, 101, 192, 292, 344, 461, 462, 463, 464, 465, 467, 479, 482], "c_default": 88, "mandat": [88, 195, 204, 247, 262, 319, 365, 478], "subclass_of": 88, "parameter_nam": 88, "_length": 88, "unsigned_short": 88, "unsigned_char": 88, "name_of_encod": 88, "unsigned_int": 88, "unsigned_long": 88, "unsigned_long_long": 88, "pysomething_typ": 88, "name_of_c_funct": 88, "rwbuffer": 88, "robuff": 88, "unsigned_": 88, "preprocess": [88, 166, 174, 258, 393], "unreason": [88, 466, 482], "bat": [88, 102, 296, 361, 398, 482], "yep": 88, "nope": [88, 166, 440], "nada": 88, "perspect": [88, 253, 406], "came": [88, 93, 98, 99, 101, 192, 201, 283, 462, 463, 464, 465, 466], "max_widget": 88, "preload": [88, 455, 482], "decodefsdefault": 88, "new_funct": 88, "c_basenam": 88, "existing_funct": 88, "sorri": [88, 440], "proposit": 88, "__ignored_unused_variable__": 88, "self_convert": 88, "thereof": [88, 139, 205, 268, 269, 293, 361, 364, 425, 428, 482], "picklerobject_convert": 88, "zlibmodul": 88, "zlib_compress_compress_impl": 88, "compobject": 88, "6731b3f0ff357ca6": 88, "04d00f65ab01d260": 88, "zlibstat": 88, "__text_signature__": [88, 482], "setattro": 88, "_threadmodul": 88, "local_setattro": 88, "thread_modul": 88, "thread_module_st": 88, "get_thread_st": 88, "573": [88, 481, 482], "cconvert": 88, "_convert": [88, 482], "converter_init": 88, "py_default": 88, "c_ignored_default": 88, "impl_by_refer": 88, "parse_by_refer": 88, "ssize_t_convert": 88, "da39a3ee5e6b4b0d": 88, "35521e4e733823c7": 88, "grep": [88, 95, 99, 100, 246, 348, 461, 482], "creturnconvert": 88, "meth_o_sampl": 88, "interspers": [88, 99, 292], "boon": 88, "rearrang": [88, 451, 461, 464, 466, 468, 471, 481, 482], "hamper": 88, "subsect": [88, 90, 102, 108, 125, 246, 344, 429, 482], "methoddef_defin": 88, "seven": [88, 150, 185, 243, 389, 474, 482], "docstring_prototyp": 88, "docstring_definit": 88, "impl_prototyp": 88, "parser_prototyp": 88, "parser_definit": 88, "impl_definit": 88, "methoddef": [88, 482], "_prototyp": 88, "_definit": 88, "_defin": 88, "five": [88, 99, 147, 185, 269, 271, 292, 293, 319, 338, 340, 341, 352, 393, 414, 461, 467, 475, 480, 482], "preset": [88, 270, 357, 482], "subcommand": [88, 99, 118, 468, 474], "file_templ": 88, "basename_root": 88, "basename_extens": 88, "line_prefix": 88, "line_suffix": 88, "have_functionnam": 88, "module_functionnam": 88, "functionnam": 88, "module_functionname_methoddef": 88, "_methoddef": 88, "clever": [88, 105, 151, 235, 299, 345, 463], "ticklish": 88, "posixmodul": [88, 482], "12357": 88, "py3c": 89, "opinion": [89, 461, 466], "kuchl": [90, 93, 102, 105, 176, 461, 462, 463, 464, 465, 466, 467, 468, 476], "raymond": [90, 91, 93, 104, 176, 347, 426, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "paint": [90, 176, 383, 463], "vt100s": [90, 176], "nich": 90, "valuabl": [90, 112, 229, 337, 380, 475], "kernel": [90, 113, 125, 131, 257, 261, 278, 293, 328, 332, 333, 337, 354, 364, 461, 466, 471, 475, 476, 478, 480, 482], "button": [90, 99, 151, 176, 188, 246, 281, 368, 374, 375, 383, 425, 460, 478, 479, 480, 482], "urwid": 90, "commerci": [90, 295, 425, 467], "carri": [90, 98, 157, 183, 185, 190, 265, 267, 275, 283, 292, 318, 340, 344, 387, 408, 409, 428, 434, 435, 466, 467, 468, 477, 480, 482], "proprietari": [90, 343], "unicurs": 90, "biggest": [90, 101, 381, 469, 474, 475], "mvaddstr": 90, "mvwaddstr": 90, "stdscr": [90, 176, 467], "multibyt": [90, 176, 207, 344, 475, 482], "key_left": [90, 176], "mess": [90, 118, 292, 463], "buggi": [90, 103, 461, 463, 475, 476, 482], "uncaught": [90, 152, 340, 352, 364, 429, 462, 480, 482], "funni": [90, 141], "rectangular": [90, 154, 383], "redraw": 90, "begin_x": [90, 176], "begin_i": [90, 176], "height": [90, 176, 180, 246, 281, 293, 319, 343, 368, 375, 383, 385, 448, 466, 482], "40": [90, 91, 93, 98, 155, 159, 182, 192, 246, 267, 308, 318, 319, 321, 332, 343, 365, 374, 383, 423, 440, 450, 451, 471, 476, 479, 480, 481, 482], "col": [90, 176, 246, 340, 345, 477, 482], "slow": [90, 99, 103, 183, 234, 246, 258, 261, 269, 283, 330, 338, 344, 361, 383, 397, 421, 422, 461, 462, 464, 465, 467, 472, 481, 482], "baud": [90, 482], "flurri": [90, 461], "redrawn": [90, 176, 383], "26": [90, 92, 98, 100, 108, 182, 190, 235, 259, 283, 318, 332, 341, 365, 366, 377, 393, 422, 425, 464, 468, 474, 478, 480, 481, 482], "ordinari": [90, 98, 102, 151, 168, 192, 224, 233, 300, 319, 330, 333, 340, 343, 356, 357, 388, 401, 412, 431, 434, 435, 461, 471, 475, 482], "annoy": [90, 105, 151, 174, 235, 267, 388, 461, 463, 464, 467, 469, 475, 480, 482], "flicker": [90, 176, 482], "twisti": 90, "maze": 90, "subt": [90, 103, 174, 195, 204, 431], "waddstr": [90, 475], "boldfac": [90, 467], "underlin": [90, 176, 371, 375], "acs_plminus": [90, 176], "acs_ulcorn": [90, 176], "distract": [90, 292, 482], "blink": [90, 176, 480, 481, 482], "invis": [90, 157, 176, 178, 383, 468, 470, 482], "synonym": [90, 99, 105, 113, 176, 292, 299, 319, 342, 368, 385, 409, 434, 467, 482], "video": [90, 176, 272, 275, 467], "viewer": [90, 246, 269, 383, 482], "safest": [90, 175, 271, 482], "stick": [90, 105, 270, 283, 361, 375, 383, 463, 464, 467], "a_blink": [90, 176], "a_bold": [90, 176, 467], "bright": 90, "a_dim": [90, 176], "a_revers": [90, 176], "a_standout": [90, 176], "a_underlin": [90, 176], "xterm": [90, 176, 482], "american": [90, 182], "spell": [90, 157, 182, 202, 267, 308, 344, 375, 434, 435, 464, 469, 475, 482], "canadian": [90, 157], "british": 90, "resign": 90, "misspel": [90, 91, 166, 388, 482], "foreground": [90, 176, 246, 375, 451], "wire": [90, 98, 157, 176, 267, 268, 269, 341, 346, 388, 418, 477], "white": [90, 92, 102, 176, 177, 198, 210, 246, 348, 375, 383, 394, 425, 433, 451, 476, 481, 482], "green": [90, 92, 120, 159, 176, 210, 239, 318, 343, 383, 401, 440, 451, 464, 465, 470, 471, 474, 478, 482], "magenta": [90, 92, 176, 451], "cyan": [90, 92, 176, 451], "color_black": [90, 176], "color_r": [90, 176], "color_whit": [90, 176], "alert": [90, 103, 239, 269, 341, 385, 399, 479, 482], "rgb": [90, 92, 161, 176, 205, 248, 292, 368, 383, 476, 482], "purpl": [90, 92, 99, 210], "unabl": [90, 93, 98, 99, 106, 255, 271, 293, 328, 340, 348, 352, 363, 442, 460, 466, 482], "lucki": [90, 175], "talent": 90, "key_up": [90, 176], "tenth": [90, 141, 176, 208], "key_ppag": [90, 176], "key_hom": [90, 176], "printdocu": 90, "backspac": [90, 102, 176, 177, 246, 319, 434, 447, 482], "keybind": [90, 176, 246, 320], "editwin": 90, "struck": 90, "brows": [90, 106, 313, 375, 467, 482], "vendor": [90, 234, 303, 459, 460, 471, 472, 482], "acs_": 90, "lengthi": [90, 93, 102, 261, 300, 461, 462, 463, 464, 465, 474, 482], "swear": 90, "pycon": [90, 105, 341, 466], "2013": [90, 99, 105, 182, 294, 341, 425, 482], "hetting": [91, 93, 104, 426, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "curious": [91, 151, 482], "objtyp": 91, "directorys": 91, "song": 91, "game": [91, 103, 118, 383, 466, 467], "twenti": [91, 174], "chess": [91, 93, 105, 463, 464], "reveal": [91, 182, 385, 467, 474, 482], "_age": 91, "loggedageaccess": 91, "birthday": [91, 450, 471], "mari": [91, 337, 440], "dave": [91, 104, 464, 465, 468, 474, 482], "david": [91, 93, 95, 105, 229, 425, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 474, 475, 476, 477, 478, 480, 482], "hardwir": [91, 168, 308], "loggedaccess": 91, "public_nam": 91, "private_nam": 91, "pete": 91, "peter": [91, 96, 112, 229, 318, 366, 461, 462, 463, 464, 465, 466, 467, 475, 476, 477, 478, 481, 482], "kate": 91, "catherin": 91, "some_class": 91, "descriptor_nam": 91, "notori": [91, 401], "oneof": 91, "predic": [91, 93, 137, 255, 261, 363, 364, 412, 464, 467, 474, 479, 481, 482], "minvalu": 91, "maxvalu": 91, "minsiz": 91, "wood": [91, 118], "metal": 91, "plastic": 91, "quantiti": [91, 185, 275, 293, 319, 341, 464, 468, 474], "metl": 91, "toolset": [91, 261, 292, 467, 482], "deeper": [91, 106, 166, 182, 192, 307, 345, 352, 472], "behind": [91, 108, 139, 175, 192, 284, 309, 325, 394, 427, 460, 462, 465, 471, 482], "everyday": [91, 224], "find_name_in_mro": 91, "_pytype_lookup": [91, 471, 482], "object_getattribut": 91, "cls_var": 91, "descr_get": 91, "bypass": [91, 157, 225, 234, 293, 345, 353, 388, 424, 427, 429, 431, 482], "getattr_hook": 91, "slot_tp_getattr_hook": 91, "type_getattro": [91, 482], "super_getattro": 91, "skeleton": 91, "conn": [91, 125, 139, 159, 165, 168, 241, 283, 299, 329, 337, 341, 364, 466, 474, 477], "movi": [91, 147, 340, 472], "director": [91, 147, 394], "music": [91, 159], "artist": 91, "genr": 91, "entertain": [91, 151], "war": [91, 472], "georg": [91, 105, 261, 445, 466, 467, 468, 470, 471, 474, 475, 477, 478, 482], "luca": [91, 234, 476, 477, 482], "jaw": [91, 147], "1975": [91, 147, 262, 340, 343, 480], "steven": [91, 462, 466, 468, 474, 476, 477, 478, 480, 482], "spielberg": 91, "countri": [91, 242, 266, 341, 344, 412, 465], "road": [91, 243], "john": [91, 104, 106, 159, 174, 189, 368, 412, 439, 440, 441, 462, 465, 466, 467, 468, 471, 472, 475, 478, 482], "denver": [91, 482], "abram": 91, "excit": [91, 461, 463], "prepackag": 91, "succinct": [91, 261, 385, 471], "fget": [91, 224, 384], "fset": [91, 224, 384], "fdel": [91, 224, 384], "getx": [91, 224], "__x": 91, "delx": [91, 224], "descrobject": 91, "prop": [91, 460, 482], "intervent": [91, 368, 424], "spreadsheet": [91, 174, 343, 464], "b10": 91, "recalcul": [91, 114, 120, 267, 343, 424, 472], "recalc": 91, "_valu": [91, 195, 204], "seamless": 91, "classobject": [91, 472, 482], "__func__": [91, 110, 255, 344, 427, 439, 467, 468], "__self__": [91, 255, 344, 427, 439, 467, 482], "func_descr_get": 91, "funcobject": [91, 472, 482], "0x00c45070": 91, "0x00b18c90": 91, "0x1012e1f98": 91, "recap": 91, "chart": [91, 105], "experiment": [91, 246, 271, 368, 370, 409, 433, 455, 464, 469, 470, 472, 473, 474, 479, 480, 482], "averag": [91, 141, 235, 261, 293, 308, 318, 343, 344, 348, 366, 375, 381, 433, 450, 469, 471, 472, 476, 480, 482], "conceptu": [91, 93, 98, 118, 141, 193, 195, 199, 204, 253, 345, 385, 399, 431, 471, 479], "dataset": [91, 104, 166, 225, 235, 343, 465, 480, 482], "9332": 91, "unexcit": 91, "pystaticmethod_typ": 91, "dict_fromkey": 91, "dictobject": [91, 466, 482], "pyclassmethod_typ": 91, "vehicl": 91, "id_numb": 91, "id_nubm": 91, "vye483814lqex": 91, "_dept": 91, "dept": [91, 439, 470, 474], "botani": 91, "watney": 91, "pirat": 91, "mar": [91, 92, 93, 182, 262, 343, 433, 440, 463, 467], "48": [91, 234, 343, 344, 381, 397, 471, 482], "152": 91, "flyweight": 91, "35": [91, 93, 185, 224, 318, 343, 434, 464, 465, 466, 467, 474, 478, 480, 481, 482], "m1": [91, 472], "100_000": [91, 343], "faith": [91, 207, 345, 352], "_slotvalu": 91, "clsname": 91, "descr_new": 91, "member_get": 91, "member_set": 91, "member_delet": 91, "member_repr": 91, "mcls": [91, 381], "pytypereadi": 91, "add_method": 91, "slot_nam": 91, "object_new": 91, "empty_slot": 91, "_pyobject_genericsetattrwithdict": 91, "0x7fb5d302f9d0": 91, "slot_valu": 91, "xz": [91, 270, 332, 357, 385, 474, 475, 477, 482], "week": [92, 150, 182, 266, 365, 461, 480, 482], "upper_cas": [92, 482], "from_dat": 92, "plot": [92, 465], "first_week_day": 92, "weekend": 92, "96": [92, 96, 108, 259, 344, 381, 478, 479, 480, 481, 482], "chores_for_ethan": 92, "dish": [92, 344], "show_chor": 92, "alias_for_squar": 92, "unimport": [92, 210], "autonam": 92, "north": [92, 182, 375, 383, 468, 470, 482], "south": [92, 157, 319, 375, 383, 467, 470], "east": [92, 182, 365, 375, 383, 386, 439, 465], "west": [92, 182, 365, 375, 383, 439, 470], "__members__": [92, 210, 463, 469], "vast": [92, 330, 367, 480, 481, 482], "mood": 92, "funki": [92, 166], "happi": [92, 125, 464, 480, 482], "favorite_mood": 92, "enumnam": 92, "morecolor": 92, "pink": [92, 383], "some_behavior": 92, "test_enum": 92, "fruit": [92, 307, 427, 441], "tomato": [92, 340], "picklabl": [92, 165, 255, 283, 299, 477, 482], "ant": [92, 149], "bee": 92, "dog": [92, 102, 159, 319, 439, 474, 477], "somedata": [92, 234, 304], "newenumnam": 92, "chartreus": 92, "sea_green": 92, "rosemari": 92, "rwx": [92, 332], "floatenum": 92, "_value_": [92, 210], "px": [92, 275], "km": [92, 343], "vx": 92, "vy": 92, "member_nam": [92, 210, 471], "_name_": [92, 210], "_order_": [92, 210, 482], "enumclass": [92, 482], "discourag": [92, 93, 102, 138, 157, 180, 193, 224, 250, 288, 319, 334, 341, 344, 361, 427, 463, 466, 471, 482], "myenum": 92, "earth": [92, 262, 340, 343, 440], "jupit": [92, 343], "mercuri": [92, 262, 343, 474, 476, 482], "neptun": [92, 343], "saturn": [92, 343], "uranus": [92, 343], "venus": [92, 262, 343, 440], "radius": [92, 155, 275, 340, 383], "surface_grav": 92, "compris": [92, 120, 288, 302, 348, 429, 434, 435, 467], "_convert_": [92, 482], "some_enum_var": 92, "renumb": [92, 247, 427], "autonumb": 92, "swatch": 92, "panton": 92, "auburn": 92, "3497": 92, "1246": 92, "bleached_cor": 92, "grade": [92, 104, 147, 224, 343, 344, 383, 464, 482], "grene": 92, "303e": 92, "4397e6": 92, "869e": 92, "0518e6": 92, "976e": 92, "37814e6": 92, "421e": 92, "3972e6": 92, "9e": 92, "27": [92, 108, 182, 235, 257, 293, 319, 337, 341, 343, 366, 377, 434, 445, 448, 461, 464, 470, 471, 474, 475, 479, 480, 481, 482], "1492e7": 92, "688e": 92, "0268e7": 92, "686e": 92, "5559e7": 92, "024e": 92, "4746e7": 92, "kilogram": 92, "gravit": [92, 383], "m3": [92, 365, 472], "kg": 92, "67300e": 92, "6378140": 92, "802652743337129": 92, "367": 92, "day_": 92, "day_0": 92, "day_1": [92, 266], "day_365": 92, "365": [92, 182, 262, 341, 343, 365], "day_366": 92, "tour": [93, 463, 464], "subclaus": 93, "ml": [93, 464], "ocaml": 93, "haskel": [93, 261, 440, 461, 464], "emphas": [93, 192, 284, 426, 482], "puriti": 93, "constraint": [93, 185, 210, 231, 267, 293, 299, 307, 344, 385, 430, 431, 466, 467, 469, 472, 482], "conclud": [93, 98, 102], "rigor": 93, "aros": 93, "impract": 93, "enorm": 93, "daili": [93, 463, 482], "proven": [93, 192, 464], "believ": [93, 103, 235, 292, 464], "synthes": [93, 192, 385], "jan": [93, 182, 341, 348, 404, 463, 468, 471, 472, 474, 477, 478, 479, 480, 481, 482], "apr": [93, 454, 463, 466], "jun": [93, 222, 365, 463], "jul": [93, 222, 463, 474], "nov": [93, 182, 208, 222, 244, 341, 365, 463, 478], "itali": 93, "rome": 93, "franc": 93, "pari": [93, 102, 424], "washington": [93, 247], "dc": [93, 261, 412, 466], "genexp": [93, 430], "concis": [93, 96, 166, 292, 340, 427, 461, 465, 472, 474, 478, 482], "line_list": 93, "stripped_it": 93, "stripped_list": 93, "sequence1": [93, 461], "condition1": 93, "expr2": [93, 429, 461], "sequence2": [93, 461], "condition2": 93, "expr3": [93, 429], "sequence3": 93, "condition3": 93, "exprn": [93, 461], "sequencen": [93, 461], "conditionn": 93, "obj_tot": 93, "list_all_object": [93, 465], "expr1": [93, 429, 461], "seq1": [93, 291, 461], "doubtless": [93, 462, 463, 464], "weren": [93, 102, 120, 234, 462, 463, 464, 465, 466, 468], "generate_int": [93, 463, 464], "gen": [93, 255, 261, 429, 463, 464, 474, 477, 482], "messier": [93, 102, 463, 464, 468], "test_gener": [93, 463, 464, 482], "inord": [93, 463, 464], "queen": [93, 318, 319, 463, 464], "nxn": [93, 463, 464], "board": [93, 97, 176, 463, 464], "threaten": [93, 463, 464], "knight": [93, 105, 307, 425, 441, 445, 463, 464, 480], "rout": [93, 103, 106, 211, 384, 406, 451, 463, 464, 468, 476], "chessboard": [93, 463, 464], "becam": [93, 111, 149, 212, 293, 335, 352, 365, 385, 461, 467, 468, 471, 477, 480, 481, 482], "cumul": [93, 217, 225, 275, 308, 343, 379, 381, 454, 466, 474, 476, 477, 482], "itera": 93, "iterb": 93, "sentenc": [93, 225, 319, 363, 463, 464, 467, 482], "fragment": [93, 141, 314, 344, 393, 394, 411, 412, 466, 468, 474, 475, 482], "is_even": [93, 418], "verb": [93, 103, 293], "10000": [93, 308, 333, 366, 383, 464, 475, 482], "rand_list": 93, "769": 93, "7953": 93, "9828": 93, "6431": 93, "8442": 93, "9878": 93, "6213": 93, "2207": 93, "shortest": [93, 194, 224, 261, 461, 466, 468, 469, 470, 474], "broad": [93, 182, 292, 393, 463, 466, 468, 475, 482], "elem": [93, 147, 159, 224, 225, 261, 344, 412, 441, 466, 468, 472, 474], "endless": [93, 261, 461, 463, 465, 466, 482], "rubi": [93, 343, 451], "less_than_10": 93, "aba": 93, "key_func": 93, "city_list": 93, "decatur": 93, "huntsvill": 93, "selma": 93, "anchorag": 93, "ak": 93, "nome": 93, "flagstaff": 93, "az": 93, "phoenix": 93, "tucson": 93, "city_st": 93, "kwarg1": [93, 466], "value1": [93, 166, 466, 481], "kwarg2": [93, 466], "value2": [93, 166, 466, 481], "server_log": [93, 466], "initial_valu": [93, 258], "abbc": 93, "stripped_lin": 93, "existing_fil": 93, "file_list": 93, "anonym": [93, 175, 222, 268, 278, 286, 293, 383, 426, 429, 461, 474, 482], "adder": 93, "print_assign": 93, "multiway": 93, "disentangl": 93, "heck": 93, "essenc": 93, "disagre": [93, 377, 461], "assist": [93, 105, 264, 278, 284, 359, 384, 398, 427, 463, 464, 465, 466, 467, 468, 479, 482], "draft": [93, 105, 151, 271, 296, 352, 409, 461, 462, 463, 464, 465, 466, 467, 468, 473, 478, 479, 482], "ian": [93, 406, 472], "bick": [93, 406], "nick": [93, 96, 101, 105, 324, 427, 463, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 482], "coghlan": [93, 96, 101, 105, 324, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 482], "efford": 93, "jewett": [93, 465, 467], "mike": [93, 463, 465, 466, 467, 472, 482], "krell": 93, "leandro": 93, "lameiro": 93, "jussi": 93, "salmela": 93, "collin": [93, 467, 468, 477, 482], "winter": [93, 224, 467, 468], "blake": [93, 234], "winton": 93, "june": [93, 407, 470, 479], "juli": [93, 189, 425, 434, 463, 464, 468, 482], "typo": [93, 151, 385, 388, 429, 463, 482], "tutor": 93, "harold": [93, 345], "abelson": 93, "gerald": 93, "jay": [93, 462, 474, 482], "sussman": 93, "mitpress": 93, "mit": [93, 251, 307, 425], "sicp": 93, "classic": [93, 166, 183, 202, 229, 271, 302, 343, 368, 383, 389, 448, 463, 464, 466, 468, 469, 474, 482], "textbook": [93, 102, 319, 466, 467], "scienc": [93, 102, 343, 364, 477], "defmacro": 93, "rambl": 93, "wikipedia": [93, 105, 159, 234, 271, 341, 343, 347, 383, 466, 474, 475, 482], "functional_program": 93, "partial_appl": 93, "curri": 93, "gnosi": 93, "cx": [93, 261, 464], "tpip": 93, "mertz": 93, "ibm": [93, 157, 176, 185, 347, 421, 464, 466, 475, 482], "developerwork": 93, "malcolm": [95, 319, 468, 474, 478, 482], "ukasz": [95, 288, 474, 476, 477, 478, 479, 480, 481, 482], "langa": [95, 288, 474, 476, 477, 478, 479, 480, 481, 482], "yum": 95, "sdt": 95, "sudo": [95, 99], "29564": [95, 482], "python18035": 95, "_pyeval_evalframedefault": [95, 100, 482], "29565": 95, "dtrace_function_entri": 95, "29566": [95, 482], "29567": 95, "dtrace_function_return": 95, "29568": [95, 482], "29569": 95, "29570": 95, "29571": [95, 482], "maybe_dtrace_lin": 95, "stapsdt": 95, "readelf": 95, "0000000000000000": 95, "00308d78": 95, "libpython3": [95, 482], "3dm": 95, "00365b68": 95, "0x00000254": 95, "0x00000020": [95, 175], "0x00000010": 95, "nt_gnu_abi_tag": 95, "0x00000274": 95, "0x00000024": 95, "0x00000014": 95, "nt_gnu_build_id": 95, "bitstr": 95, "df924a2b08a7e89f6e11251d4602022977af2670": 95, "0x002d6c30": 95, "0x00000144": 95, "0x00000031": 95, "nt_stapsdt": 95, "gc__start": 95, "0x00000000004371c3": 95, "0x0000000000630ce2": 95, "0x00000000008d6bf6": 95, "ebx": 95, "0x00000030": 95, "gc__done": 95, "0x00000000004374e1": 95, "0x00000000008d6bf8": 95, "rax": 95, "0x00000045": 95, "function__entri": 95, "0x000000000053db6c": 95, "0x00000000008d6be8": 95, "rbp": 95, "r12": 95, "eax": 95, "0x00000046": 95, "function__return": 95, "0x000000000053dba8": 95, "0x00000000008d6bea": 95, "strateg": 95, "copyinstr": 95, "probenam": 95, "arg0": [95, 293], "call_stack": 95, "156641360502280": 95, "156641360518804": 95, "156641360532797": 95, "function_3": 95, "156641360546807": 95, "156641360563367": 95, "156641360578365": 95, "156641360591757": 95, "156641360605556": 95, "156641360617482": 95, "156641360629814": 95, "156641360642285": 95, "156641360656770": 95, "156641360669707": 95, "156641360687853": 95, "function_4": 95, "156641360700719": 95, "156641360719640": 95, "function_5": 95, "156641360732567": 95, "156641360747370": 95, "user_str": 95, "thread_ind": 95, "stap": 95, "stp": 95, "11408": 95, "8274": 95, "_abcol": 95, "11414": 95, "425": [95, 240, 481, 482], "11418": 95, "490": 95, "11424": 95, "11428": 95, "426": [95, 240], "11433": 95, "libpython": [95, 455, 471, 472, 480, 482], "6dm": 95, "begun": [95, 364, 464, 465], "import__find__load__start": [95, 479], "import__find__load__don": [95, 479], "find_and_load": 95, "frameptr": 95, "arg4": 95, "probepoint": 95, "fn_call": 95, "033": [95, 176, 482], "1h": [95, 468], "6s": [95, 99, 189], "80s": 95, "30s": 95, "foreach": 95, "6d": [95, 99], "moodi": [96, 475, 476, 477], "192": [96, 99, 242, 259, 267, 345], "db8": [96, 259], "3221225985": [96, 259], "42540766411282592856903984951653826561": 96, "3221225984": 96, "42540766411282592856903984951653826560": 96, "firewal": [96, 222, 246, 283, 408, 462, 475], "router": [96, 259, 337], "hybrid": [96, 182, 476], "ipv": [96, 482], "intuit": [96, 97, 98, 102, 151, 185, 189, 261, 374, 429, 461, 462, 463, 472, 476], "addr4": 96, "addr6": [96, 477], "host4": 96, "host6": 96, "net4": 96, "net6": 96, "4294967296": [96, 259, 469], "254": [96, 482], "ffff": [96, 259, 461, 475], "0db8": 96, "0001": [96, 182, 434, 479, 482], "explos": [96, 412], "lend": [96, 463], "agnost": [96, 344], "168": [96, 99, 242, 259, 267, 345], "octet": [96, 199, 205, 259, 305, 345, 393, 397, 482], "concern": [96, 98, 108, 125, 132, 157, 166, 269, 299, 314, 341, 361, 389, 425, 462, 463, 468, 471, 472, 478, 479, 480, 481, 482], "safer": [97, 192, 299, 300, 464, 465, 482], "granular": [97, 99, 250, 293, 352], "old_binascii": 97, "stringent": [97, 476], "qwertyuiop": 97, "boo": 97, "hexadecim": [97, 102, 146, 157, 177, 234, 239, 259, 292, 319, 344, 345, 352, 397, 434, 461, 465, 467, 472, 474, 475, 476, 482], "circuit": [97, 344, 441], "led": [97, 166, 293, 462, 472, 475, 478, 482], "price": [97, 159, 319, 411, 448, 465, 466, 477, 480, 482], "xxlimit": [97, 482], "my_struct": 97, "pay": [97, 99, 102, 192, 460, 476], "myattribut": 97, "pickleabl": [97, 269, 482], "blueprint": 97, "py_tp_travers": 97, "tedious": [97, 105, 108, 120, 127, 151, 388, 461, 466, 480], "roadblock": 97, "get_defining_class": 97, "get_type_of_self": 97, "example_method": 97, "example_method_doc": 97, "my_method": 97, "module_def": 97, "capi": [97, 468], "iron": 97, "vinay": [98, 99, 464, 465, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481], "sajip": [98, 99, 464, 465, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481], "vinay_sajip": [98, 99], "dove": [98, 99], "investig": [98, 344], "confirm": [98, 188, 294, 297, 385, 394, 399, 460, 471, 472, 482], "told": [98, 385, 398, 427, 464], "resund": 98, "malm": 98, "threshold": [98, 99, 226, 267, 344, 466], "loglevel": 98, "numeric_level": 98, "afresh": [98, 168, 267], "mylib": [98, 387], "do_someth": [98, 99, 151, 341, 387, 429], "levelnam": [98, 99, 267, 268, 269, 283, 465, 468, 474], "2010": [98, 99, 105, 267, 332, 345, 352, 389, 468, 474], "41": [98, 307, 318, 319, 343, 418, 450, 467, 481, 482], "iso8601": [98, 418], "3339": 98, "datefmt": [98, 99, 267, 268], "46": [98, 159, 318, 344, 451, 471, 480, 481, 482], "am": [98, 99, 182, 266, 299, 365, 433], "invest": 98, "favourit": 98, "beverag": 98, "hereaft": [98, 108, 308], "diagram": [98, 192, 224, 235, 338, 463], "threefold": 98, "baz": [98, 99, 100, 118, 166, 246, 249, 250, 262, 267, 268, 283, 293, 311, 319, 361, 387, 388, 389, 406, 431, 435], "bam": [98, 267], "descend": [98, 104, 114, 120, 162, 195, 204, 255, 267, 283, 296, 308, 342, 356, 368, 375, 387, 409, 410, 412, 466, 468, 482], "ancestor": [98, 99, 176, 267, 268, 283, 296, 341, 375, 388, 389, 412, 427, 464, 482], "deconfigur": 98, "fmt": [98, 99, 182, 200, 259, 267, 295, 304, 361, 451, 467, 482], "millisecond": [98, 125, 176, 182, 246, 267, 328, 375, 383, 405, 472, 474, 478, 481, 482], "tack": [98, 420], "simple_exampl": [98, 99], "simple_logging_modul": 98, "2005": [98, 99, 182, 271, 425, 465, 466, 467], "03": [98, 99, 182, 185, 341, 345, 365, 450, 464, 466, 482], "618": [98, 471, 482], "620": [98, 465], "695": 98, "697": 98, "773": 98, "conf": [98, 99, 102, 296, 451, 464, 474, 482], "simpleexampl": [98, 99], "consolehandl": 98, "simpleformatt": 98, "logger_root": [98, 268], "logger_simpleexampl": 98, "handler_consolehandl": 98, "formatter_simpleformatt": 98, "simple_logging_config": 98, "38": [98, 99, 189, 224, 267, 337, 381, 464, 471, 480, 481, 482], "977": [98, 288], "979": 98, "56": [98, 100, 182, 185, 224, 258, 283, 337, 343, 441, 443, 474, 477, 482], "054": 98, "055": 98, "130": [98, 259, 343, 468], "noncod": 98, "disable_existing_logg": [98, 99, 268], "mypackag": 98, "myhandl": [98, 99, 268], "superset": [98, 306, 344, 429, 461, 464, 482], "yaml": [98, 118, 251, 262, 268, 468, 471, 474], "ext": [98, 99, 157, 190, 199, 268, 276, 294, 297, 451, 464, 465, 474, 482], "raiseexcept": [98, 99, 267, 269, 474], "resort": [98, 147, 183, 266, 267, 463], "absenc": [98, 106, 113, 165, 255, 265, 267, 319, 341, 364, 406, 427, 482], "organis": [98, 99, 235, 267], "orgnam": 98, "prerog": 98, "audienc": [98, 307, 399, 433, 464, 469], "interfer": [98, 131, 166, 225, 266, 482], "deliv": [98, 106, 132, 182, 224, 328, 333, 335, 375, 389, 429, 467, 482], "notset": [98, 267, 268, 283], "desk": 98, "staff": [98, 332], "convinc": [98, 266], "xp": [98, 269, 375, 464, 477], "criteria": [98, 174, 247, 267, 308], "provis": [98, 302, 341, 425, 429], "trailer": [98, 293, 423, 430, 482], "swallow": [98, 99, 138, 451, 461, 468, 474, 480, 482], "misconfigur": [98, 246, 482], "altogeth": [98, 99, 151, 212, 421, 427, 472, 474], "expensive_func1": 98, "expensive_func2": 98, "deepli": [98, 361, 388, 408, 434, 461, 467, 472, 482], "recomput": [98, 328, 329, 333, 365, 476, 482], "_srcfile": 98, "logthread": 98, "logprocess": 98, "logmultiprocess": 98, "logasynciotask": 98, "somelogg": 99, "auxiliary_modul": 99, "spam_appl": 99, "fh": 99, "auxiliari": [99, 261, 474, 482], "some_funct": [99, 388, 389], "module_logg": 99, "47": [99, 182, 208, 318, 319, 423, 441, 450, 467, 471, 482], "663": 99, "665": 99, "668": [99, 332], "669": [99, 159], "670": [99, 472], "671": 99, "672": 99, "hi": [99, 147, 175, 304, 344, 368, 385, 482], "relativecr": [99, 267], "threadnam": [99, 267], "mainthread": [99, 482], "505": [99, 106, 240], "1007": 99, "1507": [99, 467], "1508": 99, "2258": 99, "2512": 99, "3009": 99, "3013": 99, "3515": 99, "3761": 99, "4017": 99, "4513": 99, "4518": 99, "quota": [99, 211, 247], "dormant": 99, "12s": 99, "8s": [99, 267, 268, 468, 474], "jackdaw": 99, "quartz": 99, "logger1": 99, "area1": 99, "logger2": 99, "area2": 99, "zephyr": 99, "blow": [99, 151, 292, 474, 482], "vex": [99, 462], "daft": 99, "zebra": [99, 159, 299], "jail": 99, "zesti": 99, "vixen": 99, "quack": [99, 467], "wizard": [99, 463], "warnings_and_below": 99, "filter_mak": 99, "levelno": [99, 267], "9999": [99, 100, 132, 182, 246, 338, 474, 479, 482], "data_to_send": 99, "culprit": 99, "sluggish": 99, "poor": [99, 149, 289, 305, 308, 319, 462, 463, 482], "capac": [99, 176, 269, 293, 343, 364, 466, 468, 471], "precaut": [99, 114], "eat": [99, 275, 482], "que": 99, "queue_handl": 99, "respect_handler_level": [99, 269, 477, 482], "rootlogg": 99, "default_tcp_logging_port": [99, 268], "unformat": [99, 262, 319], "logrecordstreamhandl": 99, "slen": 99, "handlelogrecord": 99, "lognam": [99, 228, 293], "wast": [99, 105, 469, 472, 482], "bandwidth": [99, 105, 440, 468, 471], "logrecordsocketreceiv": 99, "serve_until_stop": 99, "rd": [99, 341, 344], "wr": [99, 462, 482], "5d": 99, "15s": [99, 267, 268, 468, 474], "69": [99, 365, 412, 471], "supervisor": 99, "gist": 99, "bone": [99, 458], "customadapt": 99, "connid": 99, "some_conn_id": 99, "threadloc": 99, "contextfilt": 99, "inject": [99, 125, 136, 267, 272, 331, 340, 348, 385, 408, 454, 466, 472, 477, 482], "sheila": 99, "ips": [99, 482], "231": 99, "5s": 99, "a1": [99, 227, 482], "a2": [99, 227, 319], "lvl": 99, "lvlname": 99, "webapplib": 99, "webapp": 99, "11s": 99, "appnam": [99, 269], "9s": 99, "4s": 99, "ctx_request": 99, "ctx_appnam": 99, "injectingfilt": 99, "num_request": 99, "adhf": 99, "ap": 99, "aa": [99, 159, 261, 319, 441, 468], "app1": 99, "app2": 99, "49": [99, 244, 261, 267, 283, 381, 441, 445, 448, 471, 480, 481, 482], "wc": 99, "153": 99, "147": [99, 480], "600": [99, 182, 478, 482], "issue3770": 99, "listener_configur": 99, "mptest": 99, "processnam": [99, 267, 283], "10s": [99, 347], "listener_process": 99, "worker_configur": 99, "worker_process": 99, "orchestr": 99, "logger_thread": 99, "qh": 99, "ham": [99, 159, 169, 189, 224, 255, 279, 321, 429, 431, 440, 477], "egg": [99, 159, 174, 189, 217, 224, 225, 251, 258, 296, 307, 319, 321, 330, 344, 348, 357, 380, 388, 389, 394, 412, 421, 431, 440, 442, 445, 448, 461, 482], "mplog": 99, "foofil": 99, "wp": 99, "lp": [99, 270, 472], "max_work": [99, 125, 165, 474, 482], "log_filenam": 99, "logging_rotatingfile_exampl": 99, "my_logg": 99, "mylogg": [99, 267], "maxbyt": [99, 268, 269, 468], "backupcount": [99, 268, 269, 468], "logfil": [99, 151], "bf": [99, 319, 450], "df": [99, 468], "924": 99, "494": [99, 478], "833": 99, "recal": [99, 246, 385], "bracemessag": 99, "dollarmessag": 99, "unwieldi": 99, "palat": 99, "brethren": 99, "2f": [99, 133, 345, 393, 443, 467, 468, 470, 482], "trip": [99, 120, 149, 242, 377, 467, 469, 470, 482], "sugar": [99, 168, 224, 243, 250, 261, 340, 440, 469], "xxxmessag": 99, "styleadapt": 99, "_log": [99, 267], "interrog": [99, 204, 389], "old_factori": [99, 267], "record_factori": [99, 267], "custom_attribut": [99, 267], "0xdecafbad": [99, 267], "born": [99, 344], "zmq": 99, "pyzmq": 99, "sock": [99, 102, 103, 121, 125, 132, 135, 139, 241, 308, 329, 337, 338, 341, 361, 474, 477, 479, 482], "pub": [99, 123, 222, 332, 459], "5556": 99, "zeromqsockethandl": [99, 482], "send_json": 99, "socktyp": [99, 269, 337, 361, 468], "zeromqsocketlisten": [99, 482], "setsockopt_str": 99, "recv_json": 99, "django": [99, 159, 297, 302, 388, 468, 475], "specialfilt": 99, "mail_admin": 99, "adminemailhandl": 99, "myproject": [99, 387], "gz": [99, 108, 217, 233, 276, 296, 332, 357, 398, 423, 452, 459, 461, 466, 473, 474, 482], "sf": [99, 467], "rh": 99, "stop_ev": 99, "heterogen": [99, 344, 469, 482], "bunch": [99, 127, 199, 206, 292, 461, 462, 463, 464, 467, 482], "config_initi": 99, "config_work": 99, "config_listen": 99, "hang": [99, 103, 106, 134, 283, 328, 333, 361, 464, 474, 482], "5424": [99, 269], "compliant": [99, 110, 125, 146, 182, 193, 194, 195, 197, 200, 201, 202, 206, 207, 208, 214, 234, 262, 271, 302, 311, 331, 340, 365, 406, 408, 425, 429, 463, 466, 468, 475, 478, 479, 482], "ufeffunicod": 99, "feff": [99, 105, 157], "xef": [99, 146, 393, 434], "xbb": [99, 434], "xbf": [99, 434], "readili": [99, 258, 283, 343, 358, 471, 476, 482], "parseabl": [99, 303, 331], "serialis": [99, 157, 324, 412, 482], "structuredmessag": 99, "fnum": 99, "specialis": [99, 106, 340, 344, 430, 482], "unicode_escap": [99, 157], "set_valu": 99, "snowman": 99, "u2603": 99, "owned_file_handl": 99, "creator": [99, 283, 293, 332, 398, 410, 421, 422, 427, 433, 482], "puls": 99, "chowntest": 99, "orthogon": 99, "decis": [99, 101, 103, 111, 156, 255, 352, 375, 426, 435, 461, 465, 466, 468, 474, 475, 482], "cater": [99, 192, 268, 269], "myfilt": [99, 474], "noshow": 99, "onelineexceptionformatt": 99, "exc_text": [99, 267, 269, 482], "configure_log": 99, "2015": [99, 182, 326, 477, 482], "07": [99, 182, 267, 271, 319, 345, 365, 377, 424, 466, 467, 478, 481, 482], "logtest7": 99, "nzerodivisionerror": 99, "simplist": [99, 388], "render": [99, 105, 125, 188, 197, 200, 222, 306, 338, 375, 380, 410, 427, 460, 464, 467, 468, 471, 480, 482], "audibl": [99, 176], "speech": [99, 295], "tts": 99, "frequenc": [99, 115, 226, 343, 365, 400, 405, 414, 467], "swamp": 99, "spoken": 99, "espeak": 99, "ttshandler": 99, "femal": [99, 343], "voic": [99, 336, 463], "s150": 99, "ven": 99, "f3": [99, 118], "goodby": [99, 140, 222, 299, 368, 442], "parameteris": [99, 472], "log_if_error": 99, "target_handl": 99, "flush_level": 99, "flushlevel": [99, 269], "write_lin": 99, "decorated_foo": 99, "har": [99, 155, 387, 474, 476, 482], "bufferingsmtphandl": 99, "mailhost": [99, 268, 269], "mailport": 99, "nto": [99, 335], "nsubject": 99, "addresse": [99, 269], "102": [99, 185, 240, 261, 343, 468, 474, 480, 481], "eleven": 99, "eleventh": 99, "utcformatt": 99, "console1": 99, "console2": 99, "501": [99, 106, 240, 244, 293, 474], "sat": [99, 150, 182, 341, 343], "loggingcontext": 99, "old_level": 99, "ev": [99, 341], "logctx": 99, "generalis": 99, "scriptnam": 99, "subpars": [99, 118, 474, 479, 482], "start_cmd": 99, "add_pars": [99, 118, 474], "stop_cmd": 99, "restart_cmd": 99, "log_level": 99, "plural": [99, 229, 468, 479, 482], "ui": [99, 406, 460, 461, 482], "pyside2": 99, "pyqt5": 99, "qthandler": 99, "qthread": 99, "qtcore": 99, "qtgui": 99, "qtwidget": 99, "pyqtsign": 99, "pyqtslot": 99, "qobject": 99, "slotfunc": 99, "ctname": 99, "currentthread": [99, 189, 364, 471, 482], "objectnam": 99, "kick": 99, "qthreadnam": 99, "isinterruptionrequest": 99, "1f": [99, 318, 381, 482], "qwidget": 99, "orang": [99, 159, 291, 383, 441, 482], "textedit": 99, "te": 99, "qplaintextedit": 99, "monospac": [99, 246, 363], "qfont": 99, "nosuchfont": 99, "setstylehint": 99, "setfont": 99, "setreadon": 99, "pb": [99, 270], "qpushbutton": 99, "work_button": 99, "log_button": 99, "clear_button": 99, "update_status": 99, "fs": [99, 165, 177, 293, 343, 482], "abouttoquit": 99, "force_quit": 99, "lay": [99, 214], "qvboxlayout": 99, "addwidget": 99, "setfixeds": 99, "900": [99, 448], "click": [99, 103, 151, 176, 188, 246, 293, 383, 398, 425, 460, 471, 475, 478, 479, 480, 482], "manual_upd": 99, "clear_display": 99, "seten": 99, "worker_thread": 99, "setobjectnam": 99, "workerthread": 99, "movetothread": 99, "kill_thread": 99, "requestinterrupt": 99, "isrun": 99, "appendhtml": 99, "qapplic": 99, "exec_": 99, "2009": [99, 182, 319, 340, 389, 425, 462, 468, 470], "detault": 99, "3164": 99, "hail": 99, "2003": [99, 182, 267, 412, 422, 450, 464, 467, 482], "widespread": [99, 101, 201, 433, 462, 474], "sysloghandler5424": 99, "tz_offset": 99, "msgid": [99, 199, 208], "has_offset": 99, "hrs": 99, "hostnam": [99, 106, 125, 135, 142, 151, 157, 183, 208, 222, 241, 247, 259, 269, 283, 288, 293, 305, 313, 335, 337, 341, 393, 394, 418, 448, 461, 464, 468, 473, 474, 475, 476, 479, 482], "procid": 99, "sdata": 99, "structured_data": 99, "sd": 99, "sdid": 99, "dv": [99, 361], "specir": 99, "12345": [99, 175, 224, 439, 441, 464, 470, 478, 482], "bozz": [99, 268], "fizz": 99, "buzz": 99, "54321": [99, 441], "rab": 99, "zab": 99, "zzif": 99, "loggerwrit": 99, "info_fp": 99, "debug_fp": 99, "merci": [99, 427], "mutipl": 99, "slghtli": 99, "bufferingloggerwrit": 99, "52": [99, 100, 102, 138, 182, 275, 318, 319, 341, 343, 345, 381, 441, 443, 465, 468, 482], "unhelp": [99, 461, 482], "garbl": 99, "circumv": [99, 408], "pointless": [99, 482], "pablo": [100, 468, 471, 472, 473, 477, 479, 480, 481, 482], "galindo": [100, 471, 472, 473, 479, 480, 481, 482], "vibrant": 100, "ecosystem": [100, 299], "interpos": 100, "teach": [100, 229, 340, 463, 480], "have_perf_trampolin": 100, "1000000": [100, 166, 182, 220, 224, 283, 308, 366, 440, 468, 478, 482], "hertz": [100, 405], "my_script": 100, "analyz": [100, 101, 111, 174, 279, 299, 300, 319, 331, 341, 381, 385, 425, 434, 466, 467, 468, 474, 482], "91": [100, 343], "08": [100, 182, 208, 234, 244, 267, 341, 365, 424, 481, 482], "_start": 100, "90": [100, 101, 108, 147, 155, 261, 283, 318, 343, 383, 480], "71": [100, 381, 482], "__libc_start_main": 100, "88": [100, 182, 262, 343, 381, 477], "pymain_run_python": [100, 482], "constprop": 100, "_pyrun_anyfileobject": 100, "_pyrun_simplefileobject": 100, "02": [100, 108, 182, 185, 267, 283, 332, 365, 422, 450, 461, 463, 464, 465, 474, 478, 482], "run_mod": 100, "54": [100, 138, 318, 332, 343, 422, 464, 471, 472], "65": [100, 288, 318, 332, 343, 344, 448, 461, 467, 468, 477, 482], "_pyeval_vector": [100, 482], "_pylong_add": 100, "97": [100, 105, 120, 224, 278, 344, 468, 474], "_pyobject_malloc": [100, 482], "_py_eval_evalframedefault": 100, "58": [100, 157, 318, 343, 345, 482], "89": [100, 147, 185, 225, 337, 343, 344, 440, 448, 449, 470, 474], "86": [100, 172, 343, 345, 381, 383], "43": [100, 159, 172, 182, 222, 341, 344, 366, 440, 474, 480, 481], "62": [100, 185, 237, 239, 381], "77": [100, 147, 185, 381, 383, 474], "xperf": 100, "actiav": 100, "activate_stack_trampolin": [100, 482], "deactivate_stack_trampolin": [100, 482], "fno": [100, 455, 471, 482], "mno": 100, "leaf": [100, 234, 293, 376, 385, 482], "dwarf": [100, 427], "brett": [101, 308, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "cannon": [101, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "caniusepython3": 101, "tox": 101, "cleaner": [101, 344, 461, 470, 471, 475, 477, 482], "clarifi": [101, 102, 344, 388, 466, 467, 474, 476, 482], "six": [101, 182, 224, 225, 299, 318, 319, 340, 375, 393, 397, 421, 467, 474, 476, 479, 480], "worst": [101, 102, 103, 175, 187, 189, 235, 427, 431, 454, 465, 478, 479, 482], "overal": [101, 120, 174, 182, 193, 235, 268, 284, 292, 308, 319, 345, 366, 381, 427, 443, 468, 476, 477], "freeli": [101, 121, 139, 192, 344, 425, 472], "commonplac": [101, 474], "trove": [101, 464], "classifi": [101, 226, 251, 307, 343, 464, 468, 482], "oldest": [101, 138, 226, 269, 364, 381, 401, 468, 474, 479, 482], "cheat": 101, "sheet": [101, 150, 482], "pariti": [101, 471, 482], "conserv": [101, 121, 462, 465], "accustom": [101, 185], "diff": [101, 110, 143, 189, 192, 387, 462, 465, 468, 474, 482], "2002": [101, 105, 108, 182, 234, 259, 425, 463, 464], "confluenc": 101, "brittl": 101, "pronounc": [101, 474], "predat": [101, 177, 189, 283], "pose": [101, 125, 461, 465], "difficulti": [101, 283, 461, 464], "dichotomi": 101, "outdat": [101, 175, 250, 367, 368, 467, 473, 474, 479, 482], "x00": [101, 175, 234, 258, 259, 337, 344, 347, 397, 482], "indexbyt": 101, "inevit": 101, "importlib2": 101, "absolute_import": [101, 111, 435, 466], "print_funct": [101, 110, 111, 435, 467], "werror": [101, 454, 455, 482], "lint": [101, 406, 473, 482], "amk": [102, 319, 464, 467, 468], "regex": [102, 162, 219, 266, 302, 319, 358, 387, 462, 466, 467, 474, 476, 479, 482], "tex": 102, "explan": [102, 106, 166, 182, 189, 244, 266, 271, 283, 286, 297, 301, 304, 319, 337, 344, 352, 365, 368, 383, 394, 461, 462, 463, 464, 465, 466, 467, 474, 482], "automata": 102, "akm": 102, "complement": [102, 319, 344, 383, 427, 471, 475, 479, 481, 482], "za": [102, 105, 172, 319, 344, 434, 463], "z0": [102, 105, 172, 319, 345, 434], "9_": [102, 105, 319, 434], "ct": [102, 103], "caaat": 102, "repetit": [102, 118, 149, 234, 261, 270, 275, 319, 344, 366, 380, 387, 389, 399, 427, 429, 433, 463, 482], "fewer": [102, 120, 174, 246, 258, 261, 319, 340, 343, 375, 431, 464, 466, 469, 471, 476, 478, 479, 480, 482], "bcd": [102, 261], "abcbd": 102, "abcb": 102, "bc": [102, 150, 159, 246, 261, 344, 461], "quantifi": [102, 261, 314, 319, 472, 482], "brew": 102, "homebrew": 102, "ab": [102, 149, 159, 189, 233, 261, 270, 292, 309, 319, 344, 416, 425, 434, 441, 461, 464], "reductionist": 102, "bent": 102, "shorter": [102, 201, 224, 234, 261, 292, 300, 347, 429, 461, 462, 465, 467, 468, 473, 474, 482], "bloat": 102, "latex": [102, 467, 481], "stage": [102, 364, 394, 399, 409, 461, 481, 482], "tempo": 102, "drummer": 102, "drum": 102, "piper": 102, "lord": 102, "cook": [102, 176, 358, 482], "callable_iter": 102, "fromag": 102, "thu": [102, 150, 365], "0130": [102, 319], "0131": [102, 319], "dotless": [102, 319], "017f": [102, 319], "212a": [102, 319], "kelvin": [102, 319], "pam": [102, 482], "french": [102, 105, 365, 477, 479], "unreli": [102, 176, 319, 482], "cultur": [102, 104, 229, 266, 319], "charref": 102, "octal": [102, 110, 151, 183, 259, 292, 293, 319, 344, 345, 434, 461, 462, 464, 465, 467, 469, 472, 474, 480, 481, 482], "9a": [102, 319], "fa": [102, 319], "crow": 102, "servo": 102, "cro": 102, "ervo": 102, "etern": [102, 138], "recit": 102, "bclass": 102, "declassifi": 102, "subtleti": [102, 182, 242], "collis": [102, 234, 289, 330, 460, 471, 476, 481, 482], "x08class": 102, "x08": [102, 347, 397], "dissect": [102, 462, 463], "822": [102, 105, 199, 201, 229, 241, 335, 365, 463], "agent": [102, 106, 271, 272, 335, 352, 394, 395, 463, 467], "thunderbird": 102, "x11": [102, 368, 375, 394, 402, 482], "20061227": 102, "ababababab": 102, "upward": [102, 176, 296, 299, 383, 388], "parenthesi": [102, 110, 120, 246, 319, 430, 465, 482], "abcd": [102, 105, 159, 189, 261, 464, 467, 471], "backrefer": [102, 319, 482], "spring": [102, 182, 224], "keystrok": [102, 155, 176, 333, 461, 468], "chose": [102, 249, 250, 433, 466], "subexpress": [102, 482], "jane": [102, 104], "internald": [102, 247], "mon": [102, 150, 182, 208, 464], "sec": [102, 365, 366, 477, 482], "zonen": 102, "zoneh": 102, "zonem": 102, "news": [102, 183, 193, 225, 269, 288, 393, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 482, 483], "rc": [102, 175, 207, 296, 348, 354, 361, 398, 410], "autoexec": 102, "sweet": [102, 261], "p2": [102, 175, 261, 284, 348, 426, 440, 465, 471, 472, 477], "leftmost": [102, 147, 159, 189, 192, 225, 234, 319, 429, 465, 479, 480], "shoe": 102, "adjac": [102, 182, 189, 270, 282, 319, 387, 409, 434, 460, 476, 479, 482], "abxd": [102, 319, 479], "carriag": [102, 177, 206, 207, 258, 319, 331, 344, 363, 406, 418, 434, 464, 466], "hexrepl": 102, "65490": 102, "49152": 102, "0xffd2": 102, "0xc000": 102, "bbbb": 102, "deed": 102, "swordfish": 102, "sdeedfish": 102, "bword": 102, "superstit": 102, "insuper": 102, "resist": [102, 234, 332, 462, 468, 475], "temptat": [102, 387, 462], "backtrack": [102, 319, 482], "balanc": [102, 104, 159, 235, 341, 476], "pain": [102, 266, 461, 466, 482], "dirti": 102, "terribl": [102, 235], "neat": [102, 168, 463, 468], "pat": [102, 188, 477], "unclear": 102, "jeffrey": [102, 319, 341, 467, 468, 471, 472, 474, 482], "friedl": [102, 319], "reilli": [102, 319, 366, 453, 463, 477, 482], "flavour": [102, 105, 250, 296, 357, 389, 466], "misunderstood": 103, "000": [103, 159, 175, 182, 185, 234, 261, 282, 308, 460, 474, 475], "foot": [103, 319, 343, 450], "decent": 103, "inet": [103, 337], "endpoint": [103, 121, 125, 132, 139, 211, 241, 337, 383, 474, 482], "switchboard": 103, "town": 103, "invent": [103, 157, 271, 364, 433, 464, 468], "berkeley": [103, 183, 469], "wildfir": 103, "unbeliev": 103, "repli": [103, 182, 202, 222, 244, 271, 283, 288, 335, 394, 482], "serversocket": 103, "snmp": 103, "clientsocket": 103, "client_thread": 103, "chat": 103, "recycl": [103, 113, 364, 482], "beast": 103, "peer": [103, 132, 211, 212, 288, 328, 341, 482], "etiquett": 103, "signon": 103, "forev": [103, 121, 138, 309, 328, 462, 463, 464, 465, 475, 482], "eot": [103, 177], "yuck": [103, 449], "shrug": 103, "righter": 103, "mysocket": [103, 262], "mysend": 103, "totals": 103, "msglen": [103, 337], "myrec": 103, "bytes_recd": 103, "2048": [103, 341, 404, 482], "asid": [103, 182, 224, 246, 308, 357, 389, 427, 429, 474, 479, 480], "onto": [103, 108, 168, 174, 176, 190, 212, 235, 247, 299, 307, 331, 346, 383, 387, 389, 420, 431, 461, 467, 482], "nasti": 103, "competit": 103, "x86": [103, 175, 300, 347, 455, 460, 467, 472, 479, 482], "amd64": [103, 303, 347, 354, 482], "arm": [103, 347, 477, 482], "risc": [103, 347, 482], "advisori": [103, 271, 427, 454, 461], "riddanc": 103, "neglect": [103, 404], "habit": [103, 229, 271], "indefinit": [103, 138, 150, 176, 182, 244, 261, 265, 269, 271, 333, 358, 468, 472, 476, 477, 482], "dead": [103, 307, 401, 439, 440, 455, 464, 469, 474, 482], "screw": 103, "indistinguish": [103, 283, 308], "tcp_nodelay": [103, 125, 468, 478, 479, 482], "nut": 103, "crazi": 103, "suck": 103, "brain": [103, 465], "cake": 103, "ready_to_read": 103, "ready_to_writ": 103, "in_error": 103, "potential_read": 103, "potential_writ": 103, "potential_err": 103, "sensibl": [103, 106, 118, 125, 166, 182, 234, 255, 292, 364, 388, 389, 429, 465, 468, 478, 479, 482], "healthi": 103, "outbound": 103, "andrew": [104, 105, 176, 425, 461, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "dalk": [104, 425, 463, 464, 466], "ascend": [104, 190, 308, 344], "student_tupl": 104, "student": [104, 112, 174, 225, 343, 347, 383, 385, 439, 460, 472, 474], "student_object": 104, "secondari": [104, 125, 246, 261, 308, 352, 468, 469, 471, 482], "multisort": 104, "xs": 104, "timsort": [104, 474], "dsu": 104, "lexicograph": [104, 261, 344, 429, 441, 466], "schwartzian": 104, "scale": [104, 131, 328, 343, 375, 385, 461, 464, 467, 478, 479, 482], "lighter": 104, "heavier": 104, "standard_way": 104, "double_revers": 104, "newgrad": 104, "japanes": [105, 157, 266, 465, 479], "hebrew": [105, 157], "russian": [105, 157], "emoji": [105, 474, 480, 482], "0x10ffff": [105, 224, 352, 475], "million": [105, 343, 366, 440], "265e": 105, "0x265e": 105, "0061": 105, "0062": 105, "0063": 105, "007b": 105, "2167": 105, "2168": 105, "nine": [105, 185, 343, 354, 476, 482], "265f": 105, "pawn": 105, "1f600": 105, "grin": 105, "1f609": 105, "wink": 105, "paper": [105, 118, 337, 464, 482], "glyph": [105, 207, 246], "diagon": [105, 440, 471], "stroke": [105, 463], "horizont": [105, 176, 177, 374, 375, 383, 434], "toolkit": [105, 246, 261, 367, 368, 425, 438, 461], "114": [105, 120, 224], "111": [105, 224, 261, 343, 345, 460], "0x50": 105, "79": [105, 381, 440], "74": [105, 343, 451, 480, 481], "68": [105, 185, 224, 318, 365, 412, 480], "6f": 105, "6e": 105, "0x00": [105, 177, 190], "ram": [105, 185, 340, 466, 482], "gigabyt": [105, 408], "intoler": 105, "strcpi": 105, "resynchron": [105, 475], "consortium": [105, 409], "glossari": [105, 180, 482], "chronolog": [105, 125, 478], "computerphil": 105, "youtub": 105, "tom": [105, 378, 463, 466, 471, 474, 476, 482], "scott": [105, 147, 464, 466, 480, 482], "jukka": [105, 477], "korpela": 105, "introductori": [105, 337, 466], "joel": [105, 478, 482], "spolski": 105, "rudiment": 105, "fichier": 105, "trouv": 105, "pertoir": 105, "greek": [105, 157], "u0394": 105, "u00000394": 105, "xnn": 105, "x80abc": 105, "ufffdabc": 105, "iso_8859_1": 105, "57344": 105, "ue000": 105, "xmlcharrefreplac": [105, 157, 224, 258, 344, 464, 482], "unnnn": 105, "namereplac": [105, 157, 224, 258, 477, 482], "40960": 105, "1972": [105, 340, 464, 465, 466], "xea": 105, "x80": [105, 300, 463], "x80abcd": 105, "xde": 105, "xb4": 105, "ua000": 105, "ua000abcd": 105, "u07b4": 105, "yi": 105, "syllabl": 105, "comfort": [105, 192], "xac": 105, "u1234": [105, 157, 262], "u20ac": [105, 469, 477], "u00008000": 105, "172": [105, 475], "4660": 105, "8364": [105, 224], "32768": [105, 219, 341, 423, 482], "dose": 105, "accent": [105, 331], "inspir": [105, 166, 199, 261, 262, 425, 426, 461, 462, 464, 467, 471, 472, 474, 475, 482], "fifth": [105, 176, 246, 344, 365, 482], "233": [105, 225, 440, 448, 449], "0x0bf2": 105, "3972": [105, 468], "6000": [105, 234, 283], "13231": 105, "00e9": 105, "acut": 105, "0bf2": 105, "tamil": 105, "0f84": 105, "mn": [105, 434], "tibetan": 105, "halanta": 105, "1770": 105, "lo": [105, 147, 344, 434, 470], "tagbanwa": 105, "sa": [105, 182, 337], "33af": 105, "rad": [105, 464], "subcategori": 105, "nonspac": [105, 434], "00ea": 105, "0065": 105, "0302": 105, "german": [105, 157, 266, 344, 383, 476, 482], "00df": 105, "street": [105, 118, 319], "rzenichstra": 105, "rzenichstrass": 105, "inequ": [105, 185, 194, 201, 387, 429, 467, 474], "compare_str": 105, "nfd": [105, 386], "single_char": 105, "multiple_char": 105, "strs": [105, 385], "nfc": [105, 386, 480], "nfkc": [105, 346, 386, 393, 434, 482], "nfkd": [105, 386], "caseless": [105, 344, 475], "compare_caseless": 105, "nd": [105, 246, 319, 344, 434], "57": [105, 182, 464, 480, 481, 482], "thai": [105, 157, 425], "arab": [105, 157, 185, 344, 461, 468, 474], "u0e55": 105, "u0e57": 105, "pragmat": 105, "ned": [105, 468, 474, 476, 481, 482], "batcheld": [105, 482], "marc": [105, 229, 340, 461, 462, 463, 464, 466, 475, 482], "andr": [105, 229, 340, 461, 462, 463, 464, 466, 482], "lemburg": [105, 229, 340, 461, 462, 463, 464, 466], "slide": [105, 410], "europython": 105, "transmiss": [105, 121, 177, 207, 269, 300, 406], "gib": [105, 270, 306, 357, 361, 421, 461, 464, 466, 482], "u4500": 105, "blah": [105, 270, 292], "autodetect": [105, 304, 357, 394, 462, 466], "converg": [105, 343], "u4500abc": 105, "xe4": 105, "x94": [105, 234], "occas": [105, 106, 297, 313, 333, 347, 361, 466, 476], "untrust": [105, 120, 189, 262, 268, 283, 299, 300, 312, 314, 327, 330, 332, 341, 357, 408, 410, 411, 412, 413, 418, 419, 421, 464, 467, 482], "attack": [105, 120, 125, 172, 224, 234, 243, 262, 268, 332, 340, 344, 385, 408, 466, 468, 472, 475, 476, 477, 482], "bytestream": 105, "transpar": [105, 118, 149, 157, 175, 176, 201, 202, 217, 240, 246, 258, 270, 299, 357, 375, 383, 420, 460, 462, 464, 465, 471, 472, 475, 476, 478, 479, 482], "new_f": 105, "beazley": [105, 463, 474], "gut": [105, 151, 482], "benjamin": [105, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "peterson": [105, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480], "alexand": [105, 467, 468, 470, 474, 477, 478, 479, 482], "belopolski": [105, 467, 468, 470, 474, 477, 478, 479, 482], "brandl": [105, 466, 467, 468, 470, 474, 475, 477, 478, 482], "ezio": [105, 468, 474, 475, 476, 477], "melotti": [105, 468, 474, 475, 476, 477], "ric": [105, 472, 475, 476, 480, 482], "araujo": [105, 472, 475, 476, 480, 482], "nichola": [105, 464, 471], "bastin": [105, 465], "marius": [105, 461], "gedmina": 105, "kent": [105, 341, 361, 387, 462, 466, 467], "johnson": [105, 466, 467, 482], "ken": [105, 368, 471, 472, 473, 478, 479, 480, 481, 482], "krugler": 105, "martin": [105, 229, 288, 461, 463, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 480, 482], "von": [105, 229, 318, 427, 461, 463, 464, 465, 466, 467, 468, 474, 475, 476, 480], "wis": [105, 229, 288, 461, 463, 464, 465, 466, 467, 468, 474, 475, 476, 480], "terri": [105, 441, 471, 472, 477, 478, 479, 480, 481, 482], "reedi": [105, 464, 471, 472, 477, 478, 479, 480, 481, 482], "serhiy": [105, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "storchaka": [105, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "eryk": [105, 472, 482], "chad": [105, 464, 466, 467, 482], "whitacr": 105, "graham": [105, 441, 467, 472, 482], "wideman": 105, "michael": [106, 440, 441, 462, 463, 464, 465, 466, 467, 468, 474, 475, 476, 477, 480, 481, 482], "foord": [106, 468, 474], "urllib2": [106, 110, 394, 465, 467, 468, 469], "manuel": [106, 479, 482], "manquant": 106, "2616": [106, 392, 394, 406, 474], "tmp_file": 106, "voidspac": [106, 468], "uk": [106, 165, 242, 344, 365, 468], "the_pag": 106, "transmit": [106, 121, 125, 132, 141, 288, 335, 337, 360, 406, 408, 418, 465, 480], "someserv": 106, "northampton": 106, "upload": [106, 151, 462, 466, 468, 477, 479, 481, 482], "submiss": [106, 151, 283, 314, 461], "hundredweight": 106, "tin": [106, 271, 482], "door": [106, 118, 342], "somebodi": 106, "url_valu": 106, "dislik": [106, 388], "user_ag": 106, "win64": [106, 461, 477, 482], "x64": [106, 467], "pretend_serv": 106, "fulfil": [106, 240, 244, 341, 359, 462, 464, 474], "404": [106, 151, 240, 241, 244, 262, 394, 406, 418, 419, 440, 471, 477], "403": [106, 240, 244, 440, 471], "401": [106, 240, 394, 440, 471, 477, 482], "299": [106, 222, 240], "599": [106, 222, 240, 288], "shortmessag": [106, 244], "101": [106, 118, 240, 261, 318, 343, 345, 381, 388, 460, 468, 474], "obey": [106, 331, 344, 348, 364, 427, 467], "201": [106, 240, 261, 368, 461], "202": [106, 182, 240], "203": [106, 240], "204": [106, 240, 244, 383], "206": [106, 240], "304": [106, 240, 244, 479], "unauthor": [106, 240], "402": [106, 240, 381], "payment": [106, 261], "charg": [106, 250, 385, 425], "406": [106, 240], "407": [106, 240], "408": [106, 240], "410": [106, 240], "precondit": [106, 341, 463, 474], "413": [106, 240, 482], "415": [106, 240], "media": [106, 153, 234, 281, 319, 425], "416": [106, 240, 381], "417": [106, 240, 244], "502": [106, 240, 465], "503": [106, 240], "504": [106, 240, 344], "respond": [106, 222, 241, 244, 246, 269, 313, 337, 341, 352, 368, 388, 406, 418, 419, 468, 482], "fish": [106, 299, 388, 389, 398, 452, 476, 482], "dtd": [106, 239, 314, 394, 408, 413, 414, 415, 480, 482], "w3": [106, 239, 314, 394, 410, 412, 425, 482], "tr": [106, 176, 239, 301, 314, 394, 410, 412, 425, 482], "xhtml1": [106, 394], "someurl": 106, "brief": [106, 108, 118, 192, 204, 224, 225, 268, 292, 302, 308, 319, 322, 344, 348, 379, 425, 461, 463, 465, 466, 469, 474, 482], "lift": [106, 478, 479, 480], "some_handler_inst": 106, "realm": [106, 207, 394, 482], "cpanel": 106, "password_mgr": [106, 394], "knew": [106, 289, 469], "top_level_url": 106, "a_url": 106, "http_proxi": [106, 394, 482], "8080": [106, 139, 241, 242, 337, 394, 418], "userinfo": [106, 394], "joe": [106, 151, 233, 383, 394, 477, 480, 482], "proxy_support": 106, "request_method": [106, 394, 406, 482], "lee": [106, 465, 466, 468, 472, 474, 479, 482], "snif": 106, "msie": [106, 243], "sv1": 106, "clr": 106, "4322": 106, "ie": [106, 204, 217, 239, 242, 247, 278, 292, 394, 418, 477, 482], "aspn": [106, 275], "emscripten": [107, 121, 122, 139, 151, 162, 165, 172, 209, 214, 222, 228, 232, 241, 244, 247, 257, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 355, 358, 364, 394, 398, 402, 418, 419, 424, 455, 472, 482], "wasi": [107, 121, 122, 139, 151, 162, 165, 172, 209, 211, 212, 214, 222, 228, 232, 241, 244, 247, 257, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 355, 358, 364, 394, 398, 402, 418, 419, 424, 455, 472, 482], "wasm32": [107, 121, 122, 139, 151, 162, 165, 172, 209, 214, 222, 228, 232, 241, 244, 247, 257, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 355, 358, 364, 394, 398, 402, 418, 419, 424, 455, 472, 482], "ward": [108, 461, 463, 464, 465, 466, 477, 482], "distro": [108, 471, 482], "promin": [108, 469, 482], "readm": [108, 187, 222, 246, 258, 296, 455, 459, 460, 461, 474, 478, 479, 482], "accessori": 108, "gunzip": [108, 233], "xf": [108, 292, 439], "cd": [108, 115, 118, 189, 261, 295, 387, 416, 467], "winzip": 108, "unzip": [108, 224, 420, 422, 464, 482], "pkunzip": 108, "privileg": [108, 151, 288, 293, 337, 339, 342, 365, 404, 475, 478, 482], "pristin": 108, "pybuild": 108, "6a1": [108, 467], "distnam": 108, "python32": [108, 474], "painless": 108, "platbas": [108, 474], "userbas": [108, 474], "build_ext": [108, 477, 482], "rpath": [108, 455, 459, 471, 482], "stash": 108, "typist": 108, "sitecustom": [108, 334, 353, 437, 468, 476, 482], "mental": [108, 482], "trifl": 108, "mnt": 108, "immateri": [108, 431], "purelib": [108, 354, 398, 474], "platlib": [108, 354, 474, 482], "wind": [108, 292], "pth": [108, 302, 334, 352, 353, 454, 461, 478, 482], "20000731": 108, "112": [108, 185, 343, 381, 471, 480, 481, 482], "linux2": [108, 352, 475], "dynload": [108, 352, 353, 455, 482], "stock": [108, 340, 466, 474, 482], "ver": [108, 482], "pydistutil": 108, "python1": 108, "userprofil": [108, 294, 480, 482], "homedr": [108, 294], "homepath": [108, 294], "forcibl": [108, 224, 475, 476], "blib": 108, "implic": [108, 250, 283, 299, 408, 429, 482], "inappropri": [108, 212, 338, 346, 427, 482], "foreseen": 108, "sourcefil": 108, "cpparg": 108, "judg": 108, "cc": [108, 159, 202, 208, 261, 271, 335, 360, 420, 455, 464, 475, 482], "foomodul": 108, "libm": [108, 175, 455, 482], "xcompil": 108, "o32": 108, "omf": 108, "coff": 108, "python25": 108, "coff2omf": 108, "python25_bcpp": 108, "eg": [108, 212, 242, 247, 293, 341, 426, 482], "_bcpp": 108, "foo_bcpp": 108, "bcpp": 108, "builder": [108, 398, 409, 410, 412], "mingw32": 108, "inferior": 108, "binutil": [108, 480], "20030111": 108, "pexport": 108, "dlltool": [108, 480], "dllname": [108, 269, 480], "libpython25": 108, "sourcewar": 108, "cygwin1": 108, "virtualenv": [109, 460, 475, 482], "somepackag": 109, "greet": [110, 305, 335, 340, 385, 477], "beneath": [110, 412, 482], "py3": [110, 319, 452, 470, 474, 482], "mycod": 110, "failunlessequ": [110, 473], "failifequ": [110, 473], "failunless": [110, 473], "assert_": [110, 473, 474], "failif": [110, 473], "failunlessrais": [110, 473], "cal": [110, 150, 394, 395], "failunlessalmostequ": [110, 473], "failifalmostequ": [110, 473], "basestr": [110, 464, 469, 476], "viewitem": [110, 468], "viewkey": [110, 468], "viewvalu": [110, 468], "execfil": [110, 464, 465, 469, 482], "exitfunc": [110, 461, 465, 469], "funcattr": 110, "my_funct": [110, 440], "func_closur": [110, 469], "__closure__": [110, 427, 469, 482], "new_featur": 110, "getcwdu": [110, 464], "someclass": [110, 299, 385, 388, 389, 461], "some_iter": 110, "imports2": 110, "itertools_import": 110, "ifilt": [110, 464], "izip": [110, 465], "ifilterfals": 110, "__metaclass__": [110, 463, 467, 469], "methodattr": 110, "im_func": [110, 467], "__nonzero__": [110, 469], "numliter": 110, "iscal": [110, 468, 469, 482], "sequenceinclud": [110, 468, 469], "issequencetyp": 110, "ismappingtyp": 110, "isnumbertyp": 110, "irepeat": 110, "maxint": [110, 469], "backtick": [110, 146, 396, 469, 479], "set_liter": 110, "standarderror": [110, 467, 469], "sys_exc": 110, "exc_valu": [110, 340, 352, 361, 364, 380, 427, 468, 469, 472, 482], "exc_traceback": [110, 352, 361, 364, 380, 469, 472, 482], "tuple_param": 110, "ws_comma": 110, "xrang": [110, 462, 463, 464, 465, 469], "xreadlin": [110, 462, 464, 465], "peg": [110, 430, 471, 472, 481, 482], "617": [110, 430, 471, 472, 481, 482], "parsabl": [110, 475, 481, 482], "libcst": [110, 120, 481], "parso": [110, 120, 481], "featurenam": [111, 415], "optionalreleas": 111, "mandatoryreleas": [111, 482], "compilerflag": 111, "0a3": [111, 482], "predict": [111, 141, 224, 258, 343, 352, 412, 427, 454, 460, 474, 481, 482], "getoptionalreleas": 111, "getmandatoryreleas": 111, "compiler_flag": [111, 224], "nested_scop": [111, 435, 462, 463], "0b1": [111, 482], "0a1": [111, 482], "0a2": [111, 482], "with_stat": [111, 435, 466, 467], "unicode_liter": [111, 435, 467], "generator_stop": [111, 212, 435, 477, 482], "tbd": [111, 482], "council": [111, 472, 482], "649": 111, "helloworld": [112, 434], "tim": [112, 345, 366, 425, 460, 461, 462, 463, 464, 465, 466, 468, 476, 477, 478, 481, 482], "beauti": [112, 189], "__name___": 112, "phrase": [112, 240, 241, 247, 272, 292, 394, 429, 433, 434, 464, 467, 471, 475, 477, 482], "proactiv": 112, "exemplifi": [112, 268], "hypothet": [112, 292, 337, 461], "bandclass": 112, "teacher": 112, "search_stud": 112, "student_nam": 112, "fenc": 112, "did_user_define_their_nam": 112, "my_nam": [112, 388], "print_user_nam": 112, "dinsdal": 112, "uncom": [112, 199, 246, 463], "jabberwocki": 112, "light": [113, 175, 176, 467, 468, 470, 482], "weight": [113, 159, 175, 201, 318, 343, 345, 371, 478, 482], "netbsd": [113, 303, 337, 364, 365, 472, 479, 482], "dragonflybsd": [113, 337, 364, 482], "768": [113, 364], "a_lock": 113, "surviv": [113, 175, 226, 401], "honor": [113, 251, 297, 352, 419, 467, 468, 478, 482], "myabc": 114, "get_iter": 114, "myiter": [114, 385], "innermost": [114, 168, 192, 314, 352, 385, 429, 476, 482], "my_abstract_method": 114, "my_abstract_classmethod": 114, "my_abstract_staticmethod": 114, "my_abstract_properti": 114, "_get_x": 114, "_set_x": 114, "__isabstractmethod__": [114, 475], "_fget": 114, "_fset": 114, "_fdel": 114, "594": [115, 121, 139, 141, 151, 152, 153, 172, 248, 272, 281, 287, 288, 295, 301, 336, 339, 349, 358, 396, 407, 472, 473, 482], "mono": [115, 141, 295, 400], "stereo": [115, 141, 295, 400], "quadro": 115, "nchannel": [115, 141, 295, 336, 349, 400], "samples": 115, "framer": [115, 336, 349, 400], "qualiti": [115, 192, 293, 295, 305, 427, 474, 482], "44": [115, 159, 185, 284, 318, 328, 386, 471, 475, 480, 481], "44100": [115, 295], "176": 115, "ahead": [115, 261, 358, 365, 402, 409, 430, 465, 482], "sampwidth": [115, 336, 349, 400], "nframe": [115, 336, 349, 381, 400, 454], "comptyp": [115, 349, 400], "compnam": [115, 349, 400], "uncompress": [115, 149, 233, 270, 332, 357, 420, 421, 423, 471, 474, 482], "ulaw": [115, 336, 349], "alaw": [115, 349], "g722": 115, "programnam": 118, "store_const": [118, 292, 482], "append_const": [118, 292, 482], "helpformatt": [118, 292, 482], "myprogram": 118, "parent_pars": 118, "foo_pars": 118, "bar_pars": 118, "yyy": [118, 431], "nbar": 118, "foonley": 118, "store_fals": [118, 292], "foon": 118, "_storeact": 118, "option_str": 118, "absent": [118, 176, 268, 297, 337, 345, 394, 474, 482], "f1": [118, 189, 215, 268, 283, 344, 426, 439, 482], "f2": [118, 189, 215, 283, 344, 426, 482], "f4": [118, 463], "booleanoptionalact": [118, 482], "fooaction": 118, "xx": [118, 319, 330, 393, 482], "yy": 118, "_io": [118, 187, 474, 478, 482], "argumenttypeerror": 118, "code_point": 118, "source_fil": 118, "dest_fil": 118, "datapath": 118, "short_titl": 118, "tale": 118, "citi": [118, 341, 395, 425, 482], "downstream": [118, 424, 472, 482], "filenotfound": 118, "scissor": 118, "frobbl": 118, "foo_bar": [118, 292, 389], "xyzz": 118, "badger": 118, "inher": [118, 364, 398, 412, 482], "cautious": [118, 262, 271], "1s": 118, "bacon": [118, 159, 189, 250, 279, 344, 380, 394, 427], "bac": 118, "mmm": [118, 247], "ba": [118, 255, 261, 421, 477], "parser_class": 118, "svn": [118, 162, 354, 393, 464, 466, 467, 468, 474, 482], "cmd1": 118, "cmd2": 118, "parser_a": 118, "parser_b": 118, "parser_foo": 118, "parser_bar": 118, "xyzyx": 118, "subparser_nam": 118, "subparser1": 118, "subparser2": 118, "dat": [118, 183, 460], "group1": [118, 319, 442], "group2": [118, 442], "exclusive_group": 118, "736": 118, "arg_lin": 118, "myargumentpars": 118, "errorcatchingargumentpars": 118, "doit": 118, "monkey": [118, 388, 389, 482], "callback_": 118, "optionerror": [118, 292], "optionvalueerror": [118, 292], "unicodestr": 119, "enc": [119, 341], "u2641": 119, "asdl": [120, 466, 471, 481, 482], "stmt": [120, 340, 366, 467, 482], "decorator_list": 120, "orels": [120, 467], "finalbodi": 120, "elt": 120, "cmpop": 120, "format_spec": [120, 224, 345, 427, 434, 467, 482], "expr_context": 120, "ifs": 120, "posonlyarg": [120, 482], "vararg": [120, 255], "kwonlyarg": [120, 255], "kw_default": 120, "asnam": 120, "context_expr": 120, "optional_var": 120, "kwd_attr": 120, "kwd_pattern": 120, "typeignor": 120, "_ast": [120, 466, 474, 482], "asterisk": [120, 247, 310, 344, 405, 412, 429, 435, 479], "source_lin": 120, "nameconst": [120, 480, 482], "extslic": [120, 481, 482], "fantast": 120, "snake": [120, 159], "contributor": [120, 425, 469, 472, 482], "115": [120, 261, 345, 381, 482], "collaps": [120, 195, 259, 294, 296, 363, 476, 482], "stararg": [120, 467, 482], "soc": 120, "otherexcept": [120, 212], "subpattern": [120, 426, 440, 471], "point2d": [120, 385], "point3d": [120, 159, 385], "outermost": [120, 255, 344, 364, 482], "decorator1": 120, "decorator2": 120, "3115": [120, 384, 426, 427, 469, 475], "base1": [120, 439], "base2": [120, 439], "other_func": 120, "feature_vers": [120, 376, 480, 482], "misplac": [120, 482], "func_typ": [120, 430, 480], "ast_obj": 120, "node_or_str": 120, "oneself": 120, "denial": [120, 224, 262, 344, 408, 427, 454, 472, 482], "new_nod": 120, "old_nod": 120, "visit_num": [120, 480, 482], "visit_str": [120, 480, 482], "visit_byt": [120, 480], "visit_nameconst": [120, 480], "visit_ellipsi": [120, 480], "visit_const": [120, 480, 482], "rewritenam": 120, "visit_nam": 120, "new_tre": 120, "yourtransform": 120, "annotate_field": 120, "include_attribut": 120, "asttoken": 120, "leoast": 120, "codemod": 120, "recoveri": [120, 200, 247, 394, 430], "incom": [121, 125, 132, 139, 212, 235, 244, 262, 283, 338, 341, 411, 474, 482], "fifo": [121, 123, 133, 159, 261, 283, 293, 296, 316, 329, 342, 357, 478, 479, 482], "emerg": [121, 269, 461], "encrypt": [121, 157, 172, 232, 247, 268, 288, 305, 310, 335, 339, 341, 421, 461, 463, 464, 468, 474, 475, 476, 482], "http_request_handl": 121, "extran": [121, 262, 308, 368, 482], "addr": [121, 132, 135, 139, 151, 169, 259, 329, 337, 341, 361, 419, 474, 477, 482], "ibuff": 121, "obuff": 121, "reading_head": 121, "cgi_data": 121, "clen": 121, "pythonasynciodebug": [124, 125, 187, 454, 482], "threadsaf": [124, 225, 261, 267, 318, 482], "slow_callback_dur": 124, "fut": [124, 128], "coro_func": 124, "coro": [124, 125, 127, 134, 138, 477, 482], "321": [124, 185], "source_traceback": 124, "base_ev": [125, 352, 429, 482], "prefac": [125, 132], "idempot": [125, 132, 166, 479, 482], "irrevers": 125, "567": [125, 128, 169, 185, 345, 451, 470, 479, 482], "protocol_factori": [125, 132], "local_addr": [125, 132, 135], "ssl_handshake_timeout": [125, 135, 479], "ssl_shutdown_timeout": 125, "happy_eyeballs_delay": [125, 135, 480, 482], "interleav": [125, 135, 192, 283, 468, 474, 479, 480, 482], "synopsi": [125, 313, 341, 482], "eyebal": [125, 480, 482], "8305": 125, "250": [125, 222, 308, 335, 340, 383, 468], "local_host": 125, "local_port": 125, "handshak": [125, 135, 341, 471, 476, 477, 478, 479, 480, 482], "60": [125, 135, 147, 155, 165, 182, 185, 195, 261, 307, 318, 341, 343, 365, 380, 381, 383, 397, 434, 464, 466, 472, 474, 478, 480, 482], "dual": [125, 337, 341, 425, 434, 482], "undesir": [125, 462, 466, 472, 482], "ietf": [125, 234, 259, 341, 347], "rfc6555": 125, "remote_addr": [125, 132], "reuse_port": [125, 135, 337], "allow_broadcast": 125, "remote_host": 125, "remote_port": 125, "so_reuseport": [125, 337, 361, 482], "broadcast": [125, 259, 337, 482], "preexist": 125, "reuse_address": [125, 135, 472, 478, 479, 480, 481, 482], "so_reuseaddr": [125, 139, 337, 361, 472, 478, 479, 480, 481, 482], "packet": [125, 132, 141, 259, 269, 337, 338, 418, 468, 482], "af_unspec": [125, 135, 337], "ai_pass": [125, 135, 337], "backlog": [125, 135, 139, 283, 337, 477, 482], "time_wait": [125, 337], "syscal": [125, 212, 293, 322, 332, 471, 477, 478, 480, 482], "sockaddr": [125, 142, 337], "runnabl": [125, 398, 482], "uncatch": 125, "blocking_io": [125, 138], "cpu_bound": 125, "asyncgen": 125, "universal_newlin": [125, 136, 348, 465, 479, 482], "srv": [125, 169, 479], "client_connect": 125, "mypolici": [125, 475], "iocp": [125, 482], "msdn": [125, 293], "hello_world": 125, "display_d": [125, 138], "end_tim": [125, 138], "rsock": [125, 132, 135], "wsock": [125, 132, 135], "recept": [125, 132, 135], "ask_exit": 125, "signam": [125, 333], "3600": [125, 132, 138, 168, 182], "baseeventloop": [127, 482], "successor": [127, 231], "_make_socket_transport": 127, "get_task": 127, "base_futur": 128, "_asyncio_future_block": 128, "set_aft": 128, "excutor": 129, "water": [129, 328, 477, 482], "proactor_ev": 130, "windows_ev": [130, 482], "windows_util": [130, 479, 482], "hpet": 130, "prohibit": [131, 192, 258, 262, 341, 406, 429, 471, 472, 479, 480, 481, 482], "inact": [131, 136, 440, 467, 482], "disrupt": [131, 482], "reap": [131, 482], "pidfd": [131, 333, 482], "goldilock": 131, "launch": [131, 165, 185, 283, 293, 348, 352, 361, 397, 402, 447, 460, 461, 472, 474, 475, 476, 480, 482], "myeventlooppolici": 131, "eventloop": [131, 482], "outgo": [132, 199, 337, 341, 474, 475], "peernam": [132, 135], "socknam": [132, 482], "peercert": 132, "ssl_object": 132, "watermark": [132, 135], "opportun": [132, 138, 157, 325, 389, 460, 482], "list_of_data": 132, "terminateprocess": [132, 136, 142, 283, 293, 348, 467, 468], "unidirect": [132, 283], "reassembl": 132, "sizehint": [132, 157, 328, 482], "recipi": [132, 199, 207, 208, 335, 338], "undeliver": 132, "echoserverprotocol": 132, "8888": [132, 135], "echoclientprotocol": 132, "on_con_lost": 132, "myprotocol": 132, "dateprotocol": 132, "exit_futur": 132, "unblock": [133, 137, 231, 283, 333, 482], "priority_numb": [133, 316], "sleep_for": 133, "slept": 133, "workload": [133, 472, 481, 482], "total_sleep_tim": 133, "started_at": 133, "total_slept_for": 133, "return_except": [133, 138, 482], "loop_factori": 134, "tcp_echo_cli": 135, "client_connected_cb": 135, "feed_eof": [135, 482], "handle_echo": 135, "print_http_head": 135, "wait_for_data": 135, "base_subprocess": 136, "proc": [136, 239, 293, 348, 478, 482], "zzz": [136, 431], "stdout_data": [136, 348, 465], "stderr_data": [136, 348, 465], "creationflag": [136, 348, 465], "waiter": [137, 364, 482], "waiter_task": 137, "codit": 137, "sem": 137, "example_barri": 137, "housekeep": [137, 364], "0x1053bb7c8": 138, "say_aft": 138, "task1": [138, 451], "task2": [138, 451], "tg": 138, "function_that_returns_a_future_object": 138, "some_python_coroutin": 138, "mid": [138, 482], "background_task": 138, "some_coro": 138, "misbehav": [138, 482], "another_coro": 138, "bubbl": [138, 426, 482], "aws": 138, "aggreg": [138, 261, 340, 387, 472, 482], "aw": [138, 482], "long_running_task": 138, "deadlin": [138, 325], "new_deadlin": 138, "yay": 138, "return_when": [138, 165], "all_complet": [138, 165], "first_complet": [138, 165], "first_except": [138, 165], "earliest": [138, 150, 182, 189, 365], "earliest_result": 138, "took": [138, 168, 308, 366, 461, 482], "newest": 138, "deni": [138, 211, 338, 427, 464, 482], "cancel_m": 138, "ineffect": [138, 476], "make_request_with_timeout": 138, "make_request": 138, "make_another_request": 138, "unrelated_cod": 138, "fashion": [138, 165, 233, 262, 283, 308, 319, 337, 380, 385, 412, 426, 427, 429, 465, 468, 475, 476, 482], "emptiv": 139, "juggl": 139, "snap": 139, "companion": [139, 464], "invalu": [139, 192, 319], "use_pol": 139, "oob": 139, "tenuous": 139, "banner": [139, 155, 156], "condens": [139, 234, 268, 466, 482], "passiv": [139, 222, 255, 460, 462], "partner": 139, "set_reuse_addr": 139, "httpclient": 139, "nhost": [139, 341], "echohandl": 139, "echoserv": 139, "unregistr": [140, 329], "counterfil": 140, "_count": 140, "incrcount": 140, "savecount": 140, "adject": [140, 445], "donni": 140, "sector": 140, "law": [141, 234, 336, 343, 349, 365, 425, 466, 482], "dvi": 141, "adpcm": 141, "fragment1": 141, "fragment2": 141, "adpcmfrag": 141, "newstat": 141, "proport": [141, 166, 318, 343, 482], "energi": 141, "maxim": [141, 189, 190, 195, 234, 246, 361, 439, 482], "wherebi": [141, 151, 268, 299], "ima": 141, "coder": 141, "newwidth": 141, "new_fram": 141, "old_width": 141, "inrat": 141, "outrat": 141, "weighta": 141, "weightb": [141, 482], "newfrag": 141, "s_i": 141, "lfactor": 141, "rfactor": 141, "recombin": [141, 475], "mul_stereo": 141, "lsampl": 141, "rsampl": 141, "toler": [141, 154, 259, 275, 477, 479, 482], "loss": [141, 185, 224, 242, 258, 271, 275, 365, 394, 420, 425, 429, 463, 465, 467, 471, 474, 478, 479, 480, 482], "misinterpret": 141, "energet": 141, "echocancel": 141, "outputdata": 141, "inputdata": 141, "800": [141, 234, 270, 466, 468, 471, 474, 478], "out_test": 141, "in_test": 141, "ipo": 141, "prefil": 141, "postfil": 141, "run_fil": [142, 454], "run_interactivehook": [142, 352], "run_startup": [142, 454], "run_stdin": [142, 454], "call_funct": [142, 175, 472, 478, 482], "func_point": 142, "cdata": [142, 175, 314, 409, 414, 415, 482], "dlopen": [142, 175, 293, 352, 455, 463, 466, 482], "dlsym": [142, 175], "seh_except": [142, 175], "code_object": [142, 482], "whenc": [142, 153, 214, 258, 278, 445, 463], "root_dir": [142, 230, 332, 471, 473, 482], "dir_fd": [142, 224, 230, 293, 332, 471, 472, 475, 482], "putlin": [142, 288, 305, 482], "topdown": [142, 293], "onerror": [142, 293, 302, 332, 479, 482], "follow_symlink": [142, 293, 296, 332, 471, 475, 482], "pgid": [142, 293], "src_dir_fd": [142, 293], "dst_dir_fd": [142, 293], "show_cmd": [142, 293], "ns": [142, 293, 314, 381, 384, 412, 472, 482], "followlink": [142, 293, 467], "base_nam": [142, 332], "extract_dir": [142, 332], "thread_id": [142, 333, 365], "signalnum": [142, 333], "servicenam": [142, 337], "protocolnam": [142, 337], "connection_handl": [142, 340], "set_asyncgen_hooks_fin": [142, 352], "set_asyncgen_hooks_firstit": [142, 352], "logopt": [142, 355], "maskpri": [142, 355], "fullpath": [142, 359], "fullurl": [142, 394], "computer_nam": [142, 404], "sub_key": [142, 404], "file_nam": [142, 404], "value_nam": [142, 404], "_winapi": [142, 482], "createfil": 142, "desired_access": 142, "share_mod": 142, "creation_disposit": 142, "flags_and_attribut": 142, "createjunct": 142, "src_path": 142, "dst_path": 142, "createnamedpip": 142, "open_mod": 142, "pipe_mod": 142, "createpip": 142, "createprocess": [142, 348], "application_nam": 142, "command_lin": [142, 348], "current_directori": 142, "openprocess": 142, "process_id": [142, 337], "exit_cod": [142, 212], "pyobj_fromptr": 142, "4648": [143, 327, 482], "ascii85": [143, 476, 482], "76": [143, 201, 343, 381, 383, 418], "2045": [143, 193, 195, 201, 202, 204, 418], "altchar": 143, "map01": 143, "oh": 143, "eye": [143, 185, 189, 466, 477, 480], "foldspac": 143, "wrapcol": 143, "adob": [143, 476, 482], "btoa": 143, "ignorechar": 143, "x0b": [143, 344, 397], "zgf0ysb0bybizsblbmnvzgvk": 143, "1521": [143, 317], "multipurpos": [143, 317], "botfram": 144, "stopfram": 144, "returnfram": 144, "c_call": [144, 352], "c_return": [144, 352], "c_except": [144, 352], "module_nam": [144, 250, 361, 471, 479, 482], "argument_list": [144, 426, 429], "dispatch_": 144, "frame_lineno": 144, "lprefix": 144, "a2b_": [146, 475], "strict_mod": [146, 482], "3548": [146, 465], "quotetab": [146, 157, 317], "istext": 146, "1522": [146, 317], "linefe": [146, 207, 331, 345, 434, 464], "ccitt": [146, 349], "polynomi": [146, 261, 275], "0x1021": 146, "binhex4": [146, 481, 482], "010x": 146, "bytes_per_sep": [146, 344], "xb9": 146, "x01": [146, 258, 259, 337, 347, 397], "b901ef": 146, "b9": 146, "ef": [146, 159, 261, 393, 416], "b9_01ef": 146, "b901": 146, "hexstr": 146, "invers": [146, 150, 154, 182, 185, 200, 208, 224, 243, 259, 275, 291, 299, 331, 340, 343, 344, 365, 429, 430, 467, 480, 482], "liber": [146, 192], "85": [146, 153, 288, 343, 477], "domin": [147, 242], "sortedcollect": 147, "straight": [147, 201, 205, 224, 283, 352, 387, 401, 410, 461, 469, 480, 482], "awkward": [147, 468, 480], "find_lt": 147, "find_l": 147, "find_gt": 147, "find_g": 147, "exam": [147, 343], "score": [147, 189, 340, 343, 451], "70": [147, 182, 185, 318, 343, 363, 381, 440, 450, 451, 482], "fdcba": 147, "speilberg": 147, "titan": 147, "bird": 147, "1963": 147, "hitchcock": 147, "alien": [147, 364], "1986": [147, 182], "1960": 147, "by_year": 147, "romanc": 147, "hiller": 147, "_f": 148, "compresslevel": [149, 233, 357, 421, 479, 481, 482], "xb": [149, 233, 270], "wt": [149, 224, 233, 270, 343], "compressor": [149, 270, 423, 482], "decompressor": [149, 270, 423, 482], "max_length": [149, 270, 423, 477, 482], "donec": 149, "rhoncus": 149, "qui": 149, "sapien": 149, "sit": [149, 374, 416], "amet": 149, "molesti": 149, "fusc": 149, "scelerisqu": 149, "vel": 149, "augu": 149, "nec": 149, "ullamcorp": 149, "nam": 149, "rutrum": 149, "pretium": 149, "placerat": 149, "aliquam": 149, "tristiqu": 149, "lorem": 149, "cursus": 149, "interdum": 149, "laoreet": 149, "ultric": 149, "purus": 149, "pulvinar": 149, "gravida": 149, "euismod": 149, "magna": 149, "varius": 149, "justo": 149, "tincidunt": 149, "feugiat": 149, "pharetra": 149, "lacus": 149, "risus": 149, "vehicula": 149, "maecena": 149, "feli": 149, "pellentesqu": 149, "semper": 149, "nunc": 149, "nibh": 149, "ac": [149, 159, 261, 425, 455, 464, 482], "elementum": 149, "dolor": 149, "luctus": 149, "curabitur": 149, "lacinia": 149, "ornar": 149, "consectetur": 149, "vestibulum": 149, "513595166163142": 149, "gen_data": 149, "chunksiz": [149, 165, 283, 303, 477, 482], "nonrandom": 149, "myfil": [149, 258, 293, 387, 421, 439, 442, 451], "european": [150, 157, 468], "gregorian": [150, 182], "prolept": [150, 182], "dershowitz": [150, 182], "reingold": [150, 182], "calendr": [150, 182], "prescrib": [150, 436], "8601": [150, 182, 189, 266, 340, 418, 472, 478, 482], "theyear": 150, "themonth": 150, "withyear": 150, "css": [150, 239, 474, 479, 482], "cascad": [150, 482], "tue": [150, 182], "wed": [150, 182, 365], "fri": [150, 208, 474, 475, 482], "formatmonthnam": [150, 482], "singular": [150, 229, 482], "customhtmlc": 150, "nowrap": 150, "formatweekday": [150, 482], "y1": [150, 429, 440, 471], "y2": [150, 224, 440, 471], "centuri": [150, 182, 365, 474, 482], "epoch": [150, 208, 242, 247, 271, 288, 294, 340, 341, 365, 418, 462, 482], "januari": [150, 153, 182, 318, 365, 434, 462], "multipart": [151, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 482], "isindex": 151, "goodi": 151, "h1": [151, 234, 239, 241, 268, 419], "logdir": [151, 152], "keep_blank_valu": [151, 393], "minifieldstorag": [151, 482], "fileitem": 151, "userfil": 151, "linecount": 151, "employ": [151, 283, 293, 411, 431, 475], "strict_pars": [151, 393], "pdict": 151, "megabyt": 151, "rfcs": [151, 157, 193, 195, 200, 201, 202, 204, 207, 208, 305, 341, 464, 477, 482], "hole": [151, 293, 331, 468, 471, 482], "hacker": [151, 318], "exploit": [151, 270, 293, 408, 427, 454, 476, 482], "gullibl": 151, "trust": [151, 222, 241, 247, 268, 283, 299, 302, 305, 335, 341, 348, 459, 460, 467, 468, 476, 480, 482], "dash": [151, 157, 176, 195, 204, 319, 331, 406], "0o755": 151, "0755": [151, 482], "0o644": 151, "0o666": [151, 183, 293, 296, 396], "everybodi": [151, 243], "cryptic": [151, 482], "yourhostnam": 151, "suspect": [151, 461, 482], "userid": [151, 269, 385, 478], "suexec": 151, "liabil": [151, 425], "excerpt": [152, 185, 480], "ea": 153, "rmff": 153, "bigendian": 153, "inclhead": 153, "jerri": 153, "morrison": [153, 476], "electron": [153, 341], "art": [153, 154, 159, 192, 235], "1985": [153, 340], "modulus": [154, 289, 344, 352, 467, 474, 480], "phi": [154, 275], "counterclockwis": [154, 383], "141592653589793": [154, 443, 474], "arc": [154, 275, 383, 467, 468, 470, 474, 482], "cosin": [154, 185, 275], "sine": [154, 185, 275], "tangent": [154, 275, 383], "rel_tol": [154, 275, 477], "1e": [154, 224, 275, 345, 347, 429, 477, 482], "abs_tol": [154, 275, 477], "curv": [154, 341, 383, 475, 482], "elementari": [154, 176, 383], "enlighten": 154, "kahan": 154, "ado": 154, "iserl": 154, "powel": [154, 482], "eds": 154, "clarendon": 154, "1987": [154, 157, 182, 407], "pp165": 154, "211": [154, 288, 475], "completekey": [155, 297], "bash": [155, 296, 331, 398, 446, 452, 482], "do_help": [155, 482], "do_shel": 155, "complete_foo": 155, "begidx": 155, "endidx": 155, "help_bar": 155, "help_": 155, "undocu": [155, 267, 297, 361, 387, 421, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482], "nonempti": [155, 319, 344, 383, 402, 427], "complete_": 155, "displaywidth": 155, "solicit": 155, "drawn": [155, 176, 267, 293, 383], "do_forward": 155, "playback": [155, 295], "do_playback": 155, "turtleshel": 155, "do_right": 155, "do_left": 155, "do_goto": 155, "do_hom": 155, "do_circl": 155, "do_posit": 155, "do_color": 155, "do_undo": 155, "do_reset": 155, "do_by": 155, "do_record": 155, "rose": [155, 261, 478, 482], "spiral": 155, "180": [155, 234, 343, 383, 474], "__console__": 156, "readfunc": 156, "exitmsg": 156, "stuf": 156, "data_encod": 157, "file_encod": 157, "transcod": [157, 406, 474], "base64_codec": 157, "rot_13": 157, "xdf": [157, 234, 304], "u266c": 157, "223": 157, "9836": 157, "xhh": [157, 434], "uxxxx": [157, 434], "uxxxxxxxx": [157, 434], "d800": 157, "dfff": 157, "error_handl": [157, 413], "utf_8": [157, 482], "rescan": [157, 302], "recov": [157, 189, 212, 220, 352, 396, 414, 468, 474], "firstlin": [157, 187], "huge": [157, 258, 461, 476, 482], "reposit": [157, 258], "resp": [157, 266, 288, 307, 477], "frontend": 157, "backend": [157, 176, 340, 361, 389, 455], "adher": [157, 166, 244, 262, 269, 283, 340, 433], "recreat": [157, 189, 298, 337, 393, 398, 401, 427, 475, 479, 482], "0x0": 157, "00ff": [157, 474, 475, 482], "charmap": 157, "fffe": 157, "ligatur": 157, "2060": [157, 247], "joiner": [157, 477, 482], "payload": [157, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 241, 251, 468, 482], "00000000": 157, "0000007f": 157, "0xxxxxxx": 157, "00000080": 157, "000007ff": 157, "110xxxxx": 157, "10xxxxxx": 157, "00000800": 157, "0000ffff": 157, "1110xxxx": 157, "00010000": 157, "0010ffff": 157, "11110xxx": 157, "notepad": [157, 434], "0xef": 157, "0xbb": 157, "0xbf": 157, "improb": 157, "diaeresi": 157, "quotat": [157, 348, 467, 482], "iso8859": 157, "utf16": 157, "utf32": 157, "euro": [157, 468, 469], "ebcdic": [157, 476], "pc": [157, 176, 274, 405, 420, 421, 434, 455, 460, 467, 472, 482], "big5": [157, 465], "csbig5": 157, "big5hksc": [157, 465], "hkscs": 157, "cp037": 157, "ibm037": 157, "ibm039": 157, "cp273": [157, 476], "ibm273": 157, "csibm273": 157, "cp424": 157, "he": [157, 235, 297, 319, 364, 434, 461, 478], "ibm424": 157, "cp437": [157, 421], "437": 157, "ibm437": 157, "cp500": 157, "ibm500": 157, "western": [157, 365], "europ": [157, 165, 365, 424, 468], "cp720": [157, 468, 474], "cp737": 157, "cp775": 157, "ibm775": 157, "baltic": 157, "cp850": 157, "850": [157, 468], "ibm850": 157, "cp852": 157, "852": 157, "ibm852": 157, "central": [157, 182, 193, 204, 287, 343, 461, 462, 463, 464, 466, 474, 482], "eastern": [157, 182, 365, 478], "cp855": 157, "855": 157, "ibm855": 157, "bulgarian": 157, "byelorussian": 157, "macedonian": 157, "serbian": 157, "cp856": 157, "cp857": 157, "857": 157, "ibm857": 157, "cp858": [157, 468], "858": 157, "ibm858": 157, "cp860": 157, "860": 157, "ibm860": 157, "portugues": [157, 482], "cp861": 157, "861": [157, 296], "ibm861": 157, "iceland": [157, 466], "cp862": 157, "862": 157, "ibm862": 157, "cp863": 157, "863": 157, "ibm863": 157, "cp864": 157, "ibm864": 157, "cp865": 157, "865": 157, "ibm865": 157, "danish": 157, "cp866": 157, "866": [157, 189, 480], "ibm866": 157, "cp869": 157, "869": 157, "gr": [157, 466, 471, 472, 480, 482], "ibm869": 157, "cp874": 157, "cp875": 157, "cp932": [157, 465], "932": 157, "ms932": 157, "mskanji": 157, "kanji": 157, "cp949": [157, 465], "949": 157, "ms949": 157, "uhc": 157, "cp950": [157, 465], "950": 157, "ms950": 157, "cp1006": 157, "urdu": 157, "cp1026": 157, "ibm1026": 157, "cp1125": [157, 476], "1125": 157, "ibm1125": 157, "cp866u": 157, "ruscii": 157, "cp1140": 157, "ibm1140": 157, "cp1250": [157, 166], "1250": 157, "cp1251": 157, "1251": 157, "1252": [157, 447, 451], "cp1253": 157, "1253": 157, "cp1254": 157, "1254": [157, 319], "cp1255": 157, "1255": 157, "cp1256": 157, "1256": 157, "cp1257": 157, "1257": 157, "cp1258": 157, "1258": 157, "euc_jp": 157, "eucjp": [157, 182], "uji": 157, "jis": [157, 465], "euc_jis_2004": 157, "jisx0213": [157, 465], "eucjis2004": 157, "euc_jisx0213": 157, "eucjisx0213": 157, "euc_kr": 157, "euckr": 157, "korean": [157, 465, 479, 482], "ksc5601": 157, "ks_c": 157, "5601": 157, "ksx1001": 157, "ks_x": 157, "gb2312": [157, 386, 465, 475], "chines": [157, 465, 482], "csiso58gb231280": 157, "euc": [157, 194, 465], "cn": 157, "euccn": 157, "eucgb2312": 157, "1980": [157, 189, 421, 482], "ir": 157, "gbk": [157, 465], "936": 157, "cp936": 157, "ms936": 157, "gb18030": [157, 465, 482], "hz": [157, 465, 475, 482], "hzgb": 157, "gb": [157, 341, 482], "2312": 157, "iso2022_jp": 157, "csiso2022jp": 157, "iso2022jp": 157, "jp": [157, 194, 425, 465], "iso2022_jp_1": 157, "iso2022_jp_2": 157, "iso2022_jp_2004": 157, "iso2022_jp_3": 157, "iso2022_jp_ext": 157, "iso2022_kr": 157, "csiso2022kr": 157, "iso2022kr": 157, "kr": [157, 465], "latin_1": [157, 194, 482], "cp819": 157, "iso8859_2": 157, "latin2": 157, "iso8859_3": 157, "latin3": 157, "l3": 157, "esperanto": 157, "maltes": 157, "iso8859_4": 157, "latin4": 157, "l4": 157, "iso8859_5": 157, "cyril": 157, "iso8859_6": 157, "iso8859_7": 157, "greek8": 157, "iso8859_8": 157, "iso8859_9": 157, "latin5": 157, "l5": 157, "iso8859_10": 157, "latin6": 157, "l6": [157, 475], "nordic": 157, "iso8859_11": 157, "iso8859_13": 157, "latin7": 157, "l7": 157, "iso8859_14": 157, "latin8": 157, "l8": 157, "celtic": 157, "iso8859_15": 157, "latin9": 157, "l9": 157, "iso8859_16": 157, "latin10": 157, "l10": 157, "johab": [157, 465], "cp1361": 157, "ms1361": 157, "koi8_r": 157, "koi8_t": [157, 477, 482], "tajik": [157, 477], "koi8_u": 157, "kz1048": [157, 477, 482], "kz_1048": 157, "strk1048_2002": 157, "rk1048": 157, "kazakh": [157, 477], "mac_cyril": 157, "maccyril": 157, "mac_greek": 157, "macgreek": 157, "mac_iceland": 157, "maciceland": 157, "mac_latin2": [157, 482], "maclatin2": 157, "maccentraleurop": 157, "mac_centeuro": [157, 482], "mac_roman": 157, "macroman": 157, "mac_turkish": 157, "macturkish": 157, "ptcp154": 157, "csptcp154": 157, "pt154": 157, "cp154": 157, "asian": [157, 386, 465], "shift_ji": 157, "csshiftji": 157, "shiftji": 157, "sjis": [157, 182], "s_jis": 157, "shift_jis_2004": 157, "shiftjis2004": 157, "sjis_2004": 157, "sjis2004": 157, "shift_jisx0213": 157, "shiftjisx0213": 157, "sjisx0213": 157, "s_jisx0213": 157, "utf_32": 157, "u32": 157, "utf_32_b": 157, "32be": 157, "utf_32_l": 157, "32le": 157, "utf_16": 157, "u16": 157, "utf_16_b": 157, "16be": 157, "utf_16_l": 157, "16le": 157, "utf_7": 157, "u7": 157, "u8": 157, "cp65001": [157, 475, 482], "asymmetr": 157, "3490": [157, 464], "oem": [157, 478, 482], "cp_oemcp": [157, 478], "palmo": 157, "3492": [157, 464], "raw_unicode_escap": 157, "bewar": [157, 212, 220, 262, 283, 330, 340, 341, 431, 450, 469], "unicode_intern": [157, 475, 480, 482], "base_64": 157, "bz2_codec": [157, 476], "hex_codec": [157, 476], "quopri_codec": 157, "quotedprint": 157, "quoted_print": 157, "uu_codec": [157, 482], "zlib_codec": 157, "rot13": [157, 476, 482], "caesar": 157, "cypher": 157, "idn": [157, 341, 479, 482], "5891": 157, "5895": 157, "alliancefran": [157, 464], "ais": [157, 464], "nu": [157, 464], "ace": [157, 318, 319, 464], "xn": [157, 341, 464, 479], "alliancefranais": [157, 464], "npb": [157, 464], "allowunassign": 157, "usestd3asciirul": 157, "outcom": [158, 166, 385, 387, 388, 426], "subcontext": 159, "baselin": [159, 366, 371], "bach": 159, "rembrandt": 159, "gogh": 159, "opera": [159, 402, 466, 482], "carmen": 159, "584": [159, 293, 384, 401, 481, 482], "enthought": [159, 460], "codetool": 159, "multicontext": 159, "pylookup": 159, "guest": [159, 337, 482], "command_line_arg": 159, "deepchainmap": 159, "inner": [159, 168, 190, 234, 236, 255, 319, 340, 344, 383, 385, 412, 426, 465, 468, 474, 475, 482], "eleph": 159, "lion": 159, "topmost": [159, 352, 466, 482], "talli": [159, 468, 474, 475], "cnt": 159, "hamlet": [159, 461], "1143": 159, "966": 159, "762": 159, "631": 159, "554": [159, 482], "546": [159, 381], "514": [159, 269, 464, 472, 482], "bag": [159, 199, 439], "multiset": [159, 474], "gallahad": [159, 441, 470], "sausag": [159, 224, 344], "list_of_pair": 159, "knuth": [159, 185], "donald": [159, 341, 468, 476], "deck": [159, 318], "ghi": [159, 175, 267, 331, 465], "jkl": 159, "pyshel": [159, 185, 246, 319, 478, 479, 480, 482], "moving_averag": 159, "39": [159, 182, 192, 283, 293, 365, 455, 465, 471, 475, 480, 481], "roundrobin": [159, 261], "delete_nth": 159, "rot": [159, 463, 482], "roll": [159, 182, 269, 340, 361, 387, 439, 466, 467, 482], "mississippi": [159, 344], "constant_factori": 159, "ran": [159, 192, 212, 348, 387, 467, 468, 482], "typenam": [159, 307, 340, 467, 482], "field_nam": [159, 345], "_1": [159, 468, 470], "_3": 159, "_sourc": [159, 479, 482], "employeerecord": 159, "depart": [159, 224, 344], "paygrad": 159, "emp": 159, "employe": [159, 385, 439, 482], "companydata": 159, "partnum": 159, "inventori": [159, 180, 291], "newpric": 159, "pixel": [159, 368, 371, 375, 383, 482], "premium": 159, "714": 159, "018": 159, "hardcov": 159, "isbn": [159, 368, 453], "part_numb": 159, "lru": [159, 225, 482], "k1": 159, "k2": 159, "od": [159, 468, 471, 474, 482], "acdeb": 159, "bacd": 159, "od1": [159, 468], "od2": [159, 468], "lastupdatedordereddict": 159, "timeboundedlru": 159, "maxag": 159, "multihitlrucach": 159, "maxrequest": 159, "cache_aft": 159, "uncached_key": 159, "request_count": 159, "cached_key": 159, "function_result": 159, "uncach": [159, 293, 474, 482], "initialdata": 159, "_collections_abc": 160, "gencoro": 160, "myvar": 160, "listbasedset": 160, "lst": 160, "abcdef": [160, 175, 258, 261, 319, 468, 476], "defghi": [160, 261], "_from_iter": 160, "_hash": [160, 482], "orderedset": 160, "yiq": [161, 476], "hls": 161, "hsv": 161, "poynton": 161, "colorfaq": 161, "cambridgeincolour": 161, "htm": [161, 182, 244, 463, 464, 465, 466, 467, 468, 469], "qq": 162, "destdir": 162, "strip_prefix": 162, "prepend_prefix": 162, "coexist": 162, "uncheck": [162, 431, 454, 479, 482], "source_date_epoch": [162, 311, 479, 482], "hardlink": [162, 357, 481, 482], "dupe": [162, 481], "consolid": [162, 284, 464, 475, 478, 482], "multilevel": [162, 482], "ddir": [162, 482], "rx": [162, 319], "invalidation_mod": [162, 311, 479, 482], "stripdir": [162, 481], "prependdir": [162, 481], "limit_sl_dest": [162, 481], "hardlink_dup": [162, 481], "fullnam": [162, 249, 250, 252, 253, 302, 422, 464], "skip_curdir": 162, "323": [165, 478], "1235": 165, "chop": [165, 283, 294, 461, 465, 469], "cancel_futur": [165, 481, 482], "src1": [165, 474], "dest1": [165, 474], "src2": [165, 474], "dest2": [165, 474], "src3": [165, 474], "dest3": [165, 474], "src4": 165, "dest4": [165, 474], "wait_on_b": 165, "wait_on_a": 165, "wait_on_futur": 165, "thread_name_prefix": [165, 478, 482], "initarg": [165, 283, 479], "grace": [165, 319, 333, 364, 429, 468, 474, 479, 482], "foxnew": 165, "cnn": [165, 183], "wsj": 165, "load_url": 165, "future_to_url": 165, "mp_context": [165, 479, 482], "max_tasks_per_child": [165, 482], "61": [165, 344, 365, 465, 482], "abrupt": [165, 338, 341, 359, 364, 482], "start_method": 165, "112272535095293": 165, "112582705942171": 165, "115280095190773": 165, "115797848077099": 165, "1099726899285419": 165, "is_prim": 165, "sqrt_n": 165, "woken": [165, 467], "not_don": 165, "serveraliveinterv": 166, "compressionlevel": 166, "forwardx11": 166, "hg": [166, 296, 341, 464, 468, 474, 482], "topsecret": 166, "50022": 166, "configfil": 166, "bytebong": 166, "another_config": 166, "nport": 166, "48484": 166, "21212": 166, "3des": [166, 341, 478, 482], "cbc": [166, 337], "monster": [166, 363], "batchmod": 166, "14159265359": [166, 443, 445], "chorus": 166, "lumberjack": [166, 307, 380], "night": 166, "key_without_valu": 166, "harm": [166, 292, 420, 474], "can_values_be_as_wel": 166, "does_that_mean_anything_speci": 166, "multiline_valu": 166, "home_dir": 166, "my_dir": 166, "my_pictur": 166, "zc": 166, "buildout": [166, 474], "library_dir": 166, "system_dir": 166, "macports_dir": 166, "arthur": [166, 344, 480, 482], "nicknam": 166, "shed": 166, "last_nam": [166, 174, 319], "jackson": [166, 476], "twosh": 166, "python_dir": 166, "defaultsect": 166, "section_nam": 166, "section_proxi": 166, "eleg": [166, 465, 474], "dict_typ": [166, 304], "section1": 166, "key1": [166, 426, 481], "key2": [166, 426, 481], "key3": [166, 481], "value3": [166, 481], "section2": 166, "keya": 166, "valuea": 166, "keyb": 166, "valueb": 166, "keyc": 166, "valuec": 166, "section3": 166, "allow_no_valu": [166, 468], "sample_config": [166, 468], "mysqld": [166, 468], "mysql": [166, 222, 468], "old_password": 166, "acid": [166, 463], "innodb": 166, "space_around_delimit": 166, "comment_prefix": 166, "inline_comment_prefix": 166, "enabled_extens": 166, "another_extens": 166, "disabled_by_com": 166, "yet_another_extens": 166, "empty_lines_in_valu": 166, "gotcha": 166, "she": 166, "default_sect": 166, "parser_inst": 166, "getdecim": 166, "unsuit": [166, 327, 412, 462, 468, 482], "anotherkey": 166, "larch": 166, "optcr": 166, "downright": 166, "counterintuit": 166, "an_int": 166, "a_bool": 166, "a_float": 166, "1415": [166, 185, 467], "evil": [166, 468, 482], "fileobject": [166, 471], "cfgparser": 166, "footnot": 166, "managed_resourc": 168, "acquire_resourc": 168, "release_resourc": 168, "rerais": [168, 190, 283, 344, 426, 427, 482], "trap": [168, 185, 366, 463, 465, 475, 482], "get_connect": 168, "acquire_db_connect": 168, "release_db_connect": 168, "get_all_us": 168, "my_gener": 168, "enter_result": 168, "ignore_except": 168, "process_fil": 168, "file_or_path": 168, "send_http": 168, "aiohttp": 168, "clientsess": 168, "somefil": [168, 203, 229, 293, 331, 379], "someotherfil": 168, "new_target": [168, 370], "relinquish": [168, 284, 293, 364, 365], "mycontext": 168, "contextbaseclass": 168, "close_fil": 168, "need_special_resourc": 168, "acquire_special_resourc": 168, "release_special_resourc": 168, "acquisit": [168, 214, 267, 364, 474, 482], "resourcemanag": 168, "check_resource_ok": 168, "_cleanup_on_error": 168, "exc_detail": 168, "cleanup_need": 168, "perform_oper": 168, "cleanup_resourc": 168, "cb": [168, 261], "track_entry_and_exit": [168, 474], "exc_tb": [168, 333, 344], "load_widget": [168, 474], "singleus": 168, "write_to_stream": 168, "outer_stack": 168, "inner_stack": 168, "bleed": 169, "client_addr_var": 169, "client_addr": 169, "render_goodby": 169, "8081": 169, "memo": [170, 299, 300, 430, 478, 482], "copied_list": 170, "original_list": 170, "__copy__": [170, 473, 482], "__deepcopy__": 170, "constructor_ob": 171, "pickle_c": 171, "des": [172, 310, 425], "crack": [172, 189], "salt": [172, 234, 326, 427, 454, 474, 475, 482], "sha": [172, 234, 397, 466, 467, 471, 474, 475, 478, 482], "strongest": [172, 468], "blowfish": [172, 479, 482], "md5": [172, 234, 236, 247, 335, 340, 341, 397, 455, 466, 467, 468, 469, 474, 476, 480, 481, 482], "weakest": 172, "method_": 172, "perturb": 172, "999_999_999": 172, "5000": [172, 185], "2_147_483_648": 172, "exposur": [172, 475], "compare_hash": 172, "cryptedpasswd": 172, "cleartext": [172, 269], "plaintext": [172, 222, 247, 475], "4180": [174, 482], "csvfile": 174, "fmtparam": 174, "spamread": 174, "bake": [174, 319], "bean": [174, 319], "stringifi": [174, 380, 472, 482], "spamwrit": 174, "new_limit": [174, 466], "restkey": 174, "restval": 174, "first_nam": [174, 319], "clees": [174, 412, 440, 480], "extrasact": 174, "putat": 174, "heurist": [174, 189, 196, 202, 224, 470, 474, 482], "recognis": [174, 212, 268, 302, 331, 340, 388, 420, 427, 482], "quote_": 174, "passwd": [174, 222, 296, 310, 360, 387, 394, 465, 466, 467], "someiter": 174, "unixpwd": 174, "linend": 174, "cdecl": 175, "stdcall": 175, "kernel32": [175, 352, 482], "libc": [175, 257, 303, 348, 455, 466, 482], "getmodulehandlea": 175, "myownfunct": 175, "239": 175, "_stdcallfuncptr": 175, "user32": 175, "getmodulehandl": 175, "hmodul": 175, "lpcstr": 175, "lpmodulenam": 175, "getmodulehandlew": 175, "lpcwstr": 175, "yapaxi": 175, "310": 175, "rand": [175, 341], "1804289383": 175, "0x1d000000": 175, "erron": [175, 292, 383, 408, 424, 461, 476, 477, 479, 481, 482], "_bool": [175, 347, 467], "__int64": 175, "time_t": [175, 482], "140018365411392": 175, "65533": 175, "c_s": 175, "139966785747344": 175, "139966783348904": 175, "x00lo": 175, "c_buffer": 175, "bottl": [175, 467], "beer": [175, 482], "1234": [175, 185, 259, 313, 329, 344, 377, 397, 441, 467, 471, 477, 482], "140000": [175, 345], "_as_parameter_": 175, "200000": [175, 366], "37": [175, 244, 318, 344, 345, 381, 405, 450, 465, 468, 470, 471, 472, 479, 480, 481, 482], "000000": [175, 182, 463], "typecheck": [175, 385], "1150640792": 175, "strchr": 175, "8059983": 175, "validhandl": 175, "486539264": 175, "silli": [175, 292, 389], "126": [175, 259, 381, 480], "sscanf": 175, "1400001049": 175, "upperleft": 175, "lowerright": 175, "ofs": 175, "pragma": [175, 482], "first_16": 175, "second_16": 175, "tenpointsarraytyp": 175, "artifici": [175, 412, 427, 476, 482], "mystruct": [175, 283], "point_array": 175, "arr": [175, 283], "pt": 175, "teninteg": 175, "c_long_array_10": 175, "oor": 175, "scene": [175, 460], "lp_c_long": 175, "null_ptr": 175, "c_byte_array_4": 175, "c1": [175, 344], "c2": 175, "qsort": 175, "intarray5": 175, "ia": 175, "cmpfunc": 175, "py_cmp_func": 175, "cmp_func": 175, "pythonapi": [175, 466], "0x30c00a0": 175, "struct_frozen": 175, "frozent": 175, "_pyimport_frozenbootstrap": 175, "_frozen_importlib": [175, 482], "31764": [175, 482], "_frozen_importlib_extern": [175, 482], "41499": 175, "__hello__": [175, 482], "p1": [175, 261, 284, 348, 426, 465, 472, 477], "hm": 175, "temp0": 175, "temp1": 175, "short_array": 175, "dylib": [175, 482], "ldconfig": [175, 482], "objdump": 175, "ld_library_path": [175, 478, 482], "libbz2": 175, "agl": 175, "default_mod": 175, "use_errno": [175, 467], "use_last_error": [175, 467], "winmod": [175, 480], "dumpbin": 175, "manpag": [175, 293, 478, 482], "setlasterror": 175, "hijack": 175, "prefabr": 175, "dlltype": 175, "func_spec": 175, "paramflag": 175, "name_or_ordin": 175, "vtbl_index": 175, "iid": [175, 375, 482], "messageboxw": 175, "winuserapi": 175, "winapi": [175, 348, 420, 482], "hwnd": 175, "lptext": 175, "lpcaption": 175, "uint": 175, "utyp": 175, "wintyp": [175, 482], "caption": 175, "getwindowrect": 175, "lprect": 175, "obj_or_typ": 175, "init_or_s": 175, "_ctype": [175, 425, 455, 468, 479, 482], "lasterror": [175, 467], "enlarg": [175, 482], "writeabl": [175, 224, 258, 341, 348, 482], "wparam": 175, "dword": 175, "pnext": 175, "_u": 175, "lptdesc": 175, "typedesc": 175, "lpadesc": 175, "arraydesc": 175, "hreftyp": 175, "vt": [175, 177, 385, 434], "vartyp": 175, "td": [175, 182], "vt_ptr": 175, "some_typ": 175, "facto": [176, 242, 357, 393, 418], "a_norm": 176, "driver": [176, 192, 211, 229, 293, 295, 337, 361, 404, 405, 415, 464, 482], "color_numb": 176, "a_": 176, "ground": 176, "cup": 176, "cud": 176, "cud1": 176, "cuu1": 176, "cuu": 176, "vpa": 176, "cr": [176, 177, 207, 434, 479, 482], "confin": [176, 192], "bell": [176, 177, 368, 434, 466, 482], "key_mous": 176, "bstate": 176, "buttonn_press": 176, "buttonn_releas": 176, "buttonn_click": 176, "buttonn_double_click": 176, "buttonn_triple_click": 176, "button_shift": 176, "button_ctrl": 176, "button_alt": 176, "button5_": [176, 471, 482], "256color": [176, 482], "region": [176, 246, 278, 282, 284, 293, 319, 368, 375, 383, 439, 467, 470, 472, 482], "fg": [176, 261, 344, 368, 375], "bg": [176, 368, 375, 383, 482], "nline": [176, 187], "ncol": 176, "deiniti": 176, "terminfo": 176, "elaps": [176, 269, 283, 293, 308, 329, 337, 364, 365, 474, 482], "availmask": 176, "oldmask": 176, "pminrow": 176, "pmincol": 176, "sminrow": 176, "smincol": 176, "smaxrow": 176, "smaxcol": 176, "vertic": [176, 177, 231, 297, 344, 345, 363, 368, 371, 373, 374, 375, 383, 426, 433, 434], "intr": 176, "susp": 176, "tput": 176, "putchar": 176, "capnam": 176, "4h": [176, 347], "breakout": 176, "newterm": 176, "subwindow": 176, "20190511": 176, "stuck": 176, "rs": [176, 177], "ts": [176, 231, 383, 385, 466, 482], "bs": [176, 177, 434], "tl": 176, "bl": 176, "acs_vlin": 176, "acs_hlin": 176, "acs_urcorn": 176, "acs_llcorn": 176, "acs_lrcorn": 176, "vertch": 176, "horch": 176, "repaint": 176, "degrad": [176, 474, 482], "wrefresh": 176, "movement": [176, 235, 383, 467, 474, 482], "new_i": 176, "new_x": 176, "destwin": 176, "dminrow": 176, "dmincol": 176, "dmaxrow": 176, "dmaxcol": 176, "beg": 176, "rendit": 176, "__version__": [176, 189, 244, 387, 475, 477, 481, 482], "a_altcharset": 176, "dim": 176, "a_invi": 176, "a_ital": [176, 482], "a_protect": 176, "a_horizont": 176, "a_left": 176, "a_low": 176, "a_right": 176, "a_top": 176, "a_vert": 176, "a_chartext": 176, "a_attribut": 176, "a_color": 176, "key_": 176, "keycap": 176, "key_min": 176, "key_break": 176, "key_down": 176, "arrow": [176, 246, 297, 374, 375, 383], "key_right": 176, "key_backspac": 176, "key_f0": 176, "key_fn": 176, "key_dl": 176, "key_il": 176, "key_dc": 176, "key_ic": 176, "key_eic": 176, "key_clear": 176, "key_eo": 176, "key_eol": 176, "key_sf": 176, "key_sr": 176, "key_npag": 176, "key_stab": 176, "key_ctab": 176, "key_catab": 176, "key_ent": 176, "key_sreset": 176, "key_reset": 176, "key_print": 176, "key_ll": 176, "key_a1": 176, "key_a3": 176, "key_b2": 176, "key_c1": 176, "key_c3": 176, "key_btab": 176, "key_beg": 176, "key_cancel": 176, "key_clos": 176, "key_command": 176, "key_copi": 176, "key_creat": 176, "key_end": 176, "key_exit": 176, "key_find": 176, "key_help": 176, "key_mark": 176, "key_messag": 176, "key_mov": 176, "key_next": 176, "key_open": 176, "key_opt": 176, "key_previ": 176, "key_redo": 176, "redo": [176, 246, 482], "key_refer": 176, "key_refresh": 176, "key_replac": 176, "key_restart": 176, "key_resum": 176, "key_sav": 176, "key_sbeg": 176, "key_scancel": 176, "key_scommand": 176, "key_scopi": 176, "key_screat": 176, "key_sdc": 176, "key_sdl": 176, "key_select": 176, "key_send": 176, "key_seol": 176, "key_sexit": 176, "key_sfind": 176, "key_shelp": 176, "key_shom": 176, "key_sic": 176, "key_sleft": 176, "key_smessag": 176, "key_smov": 176, "key_snext": 176, "key_sopt": 176, "key_sprevi": 176, "key_sprint": 176, "key_sredo": 176, "key_sreplac": 176, "key_sright": 176, "key_srsum": 176, "key_ssav": 176, "key_ssuspend": 176, "key_sundo": 176, "key_suspend": 176, "key_undo": 176, "key_res": 176, "key_max": 176, "key_f1": 176, "key_f2": 176, "key_f3": 176, "key_f4": 176, "twelv": [176, 375], "vt100": 176, "crude": 176, "acs": 176, "acs_bbss": 176, "acs_block": 176, "solid": [176, 475, 476], "acs_board": 176, "acs_bsb": 176, "acs_bssb": 176, "acs_bsss": 176, "acs_bte": 176, "acs_bullet": 176, "bullet": [176, 299], "acs_ckboard": 176, "stippl": 176, "acs_darrow": 176, "acs_degre": 176, "acs_diamond": 176, "acs_gequ": 176, "acs_lantern": 176, "lantern": 176, "acs_larrow": 176, "acs_lequ": 176, "acs_lte": 176, "acs_nequ": 176, "acs_pi": 176, "acs_plus": 176, "acs_rarrow": 176, "acs_rte": 176, "acs_s1": 176, "acs_s3": 176, "acs_s7": 176, "acs_s9": 176, "acs_sbb": 176, "acs_sbsb": 176, "acs_sbss": 176, "acs_ssbb": 176, "acs_ssb": 176, "acs_sssb": 176, "acs_ssss": 176, "crossov": 176, "acs_sterl": 176, "pound": [176, 189], "sterl": 176, "acs_tte": 176, "acs_uarrow": 176, "color_blu": 176, "color_cyan": 176, "greenish": 176, "color_green": 176, "color_magenta": 176, "purplish": 176, "color_yellow": 176, "bbedit": [176, 458], "framemak": 176, "uli": 176, "ulx": 176, "lri": 176, "lrx": 176, "land": [176, 289, 482], "soh": 177, "stx": 177, "etx": 177, "enq": 177, "enquiri": 177, "bel": [177, 434, 464, 465, 466, 467, 468, 474, 475], "ff": [177, 189, 224, 319, 434], "dle": 177, "dc1": 177, "xon": 177, "dc2": 177, "dc3": 177, "xoff": 177, "dc4": 177, "nak": 177, "syn": 177, "etb": 177, "em": [177, 319], "esc": 177, "gs": 177, "sp": [177, 234, 239], "mnemon": [177, 268, 341, 375, 463], "teleprint": 177, "0x1f": [177, 471, 473], "0x7f": [177, 344], "thirti": [177, 316], "557": [180, 381, 479, 482], "inventoryitem": 180, "unit_pric": 180, "quantity_on_hand": 180, "total_cost": 180, "unsafe_hash": [180, 385, 482], "match_arg": [180, 385, 482], "weakref_slot": [180, 482], "dunder": [180, 434, 480, 482], "nonetheless": [180, 247], "__weakref__": [180, 401, 427, 482], "class_or_inst": 180, "initvar": [180, 482], "dict_factori": [180, 340], "tuple_factori": 180, "cls_name": [180, 210], "add_on": 180, "__post_init__": [180, 482], "forewarn": 180, "is_dataclass_inst": 180, "databasetyp": 180, "my_databas": 180, "intconversiondescriptor": 180, "_default": 180, "dateutil": [182, 482], "categor": [182, 292, 319, 399, 429], "polit": [182, 222, 461], "metr": 182, "mile": 182, "est": [182, 365, 474, 478], "edt": [182, 365, 475, 478], "customiz": [182, 368, 468, 482], "29000": [182, 482], "29156": 182, "tiebreak": 182, "t1": [182, 185, 261, 385, 398], "t2": [182, 185, 261, 385, 398], "t3": [182, 185, 292], "uuuuuu": 182, "68400": 182, "delta1": 182, "delta2": 182, "270": [182, 383], "accuraci": [182, 261, 275, 308, 366, 443, 465, 482], "another_year": 182, "84": [182, 343, 478, 480, 482], "31536000": 182, "ten_year": 182, "3650": 182, "nine_year": 182, "3285": 182, "three_year": 182, "1095": [182, 288], "2038": [182, 365, 482], "date_str": 182, "yyyi": [182, 247], "ddd": 182, "2019": [182, 343, 454, 480, 482], "20191204": 182, "2021": [182, 467, 471, 482], "w01": 182, "dd": [182, 247, 261, 292], "date2": 182, "date1": 182, "comparand": 182, "yday": 182, "isocalendard": 182, "2007": [182, 368, 425, 467, 482], "my_birthday": 182, "time_to_birthday": 182, "730920": 182, "730920th": 182, "march": [182, 344, 365, 383, 450, 461, 465, 476], "70th": 182, "ic": [182, 347, 467], "tz": [182, 361, 365, 424, 482], "gettimeofday": [182, 365, 482], "formula": [182, 229, 344, 482], "2011": [182, 202, 341, 412, 425, 427, 454, 474], "20111104": 182, "04t00": 182, "23z": 182, "20111104t000523": 182, "2t00": 182, "283000": 182, "14400": 182, "datetime2": 182, "datetime1": 182, "astz": 182, "dt": [182, 208, 418, 424, 481], "magnitud": [182, 185, 262, 275, 344, 345, 408, 461, 475], "tm_isdst": [182, 365], "spill": 182, "utcfromtimetupl": 182, "timespec": [182, 478, 482], "ddthh": 182, "ffffff": [182, 383], "hh": [182, 247, 365, 434], "132263": 182, "18t15": 182, "27t00": 182, "000100": 182, "25t00": 182, "01t12": 182, "79043": 182, "79060": 182, "tt": 182, "325": [182, 185, 466], "30pm": 182, "kabul": 182, "afghanistan": 182, "1945": 182, "thereaft": [182, 246, 266, 394], "kabultz": 182, "utc_move_d": 182, "1944": 182, "pep495": 182, "tz1": 182, "dt1": 182, "dt2": 182, "dt3": 182, "midnight": [182, 269, 467, 474, 477], "obscur": [182, 192, 388, 467, 476, 477, 479, 482], "13936": [182, 477, 482], "time_str": 182, "t04": 182, "t042301": 182, "000384": 182, "01z": 182, "123456": 182, "geograph": 182, "dston": 182, "dstoff": 182, "america": [182, 424, 425, 468, 481], "york": 182, "straddl": 182, "dtoff": 182, "dtdst": 182, "tzinfo_exampl": 182, "_time": 182, "stdoffset": 182, "dstoffset": 182, "dstdiff": 182, "localtimezon": 182, "dst_diff": 182, "_isdst": 182, "first_sunday_on_or_aft": 182, "days_to_go": 182, "olson": [182, 482], "pytz": 182, "twinsun": 182, "2am": 182, "dststart_2007": 182, "dstend_2007": 182, "april": [182, 434, 447, 461, 462], "octob": [182, 461, 463, 464, 467, 471, 480, 481], "dststart_1987_2006": 182, "dstend_1987_2006": 182, "1967": [182, 383, 468], "dststart_1967_1986": 182, "dstend_1967_1986": 182, "us_dst_rang": 182, "dststart": 182, "dstend": 182, "1966": 182, "ustimezon": 182, "reprnam": 182, "stdname": [182, 308], "dstname": [182, 332], "gap": [182, 269, 271, 474], "std_time": 182, "dst_time": 182, "cst": 182, "cdt": 182, "mountain": 182, "mst": 182, "mdt": 182, "pacif": [182, 424], "pst": [182, 424, 481], "pdt": [182, 424, 481], "0500": [182, 208], "u0": [182, 478], "mimic": [182, 255, 267, 380, 383, 468, 470, 482], "bring": [182, 246, 261, 345, 374, 388, 471, 472, 476, 477, 480, 481, 482], "tzdata": [182, 424, 481, 482], "globe": 182, "civil": 182, "en_us": [182, 477], "mo": [182, 229, 319, 344, 464, 478, 480, 482], "de_d": [182, 266, 477], "sonntag": 182, "montag": 182, "samstag": 182, "dez": 182, "februari": [182, 365, 434, 462, 474], "decemb": [182, 434, 450, 463, 464, 469, 478], "januar": 182, "februar": 182, "dezemb": 182, "0002": 182, "2014": [182, 236, 341, 467, 468, 476, 482], "9998": [182, 478, 482], "000001": 182, "hhmm": [182, 247, 365], "0400": [182, 475], "1030": 182, "063415": 182, "030712": 182, "345216": 182, "002": [182, 308, 344], "1988": [182, 189, 357, 467], "di": [182, 466], "c89": [182, 467], "01t00": 182, "ja_jp": 182, "0330": 182, "japan": [182, 266], "jst": 182, "gent": 182, "oracl": [183, 340, 466, 475, 482], "unread": [183, 299, 394, 470, 477, 482], "prevail": [183, 429, 482], "cabl": 183, "open_flag": 183, "unwritten": 183, "pag": 183, "bottleneck": [184, 225, 470], "school": [185, 343, 347, 464], "3000000000000003": 185, "5511151231257827e": 185, "017": 185, "customari": [185, 363, 454], "monetari": [185, 266, 466, 479, 482], "schoolbook": 185, "multiplicand": 185, "5600": 185, "prec": [185, 451, 465, 466, 467], "142857": [185, 192], "1428571428571428571428571429": [185, 465], "modest": [185, 482], "prejudic": 185, "unround": 185, "coeffici": [185, 261, 275, 343, 344, 345, 464, 476, 482], "differenti": [185, 320, 394, 471, 474, 475, 478, 481, 482], "sticki": [185, 342, 375], "emin": [185, 475], "emax": [185, 475], "140000000000000124344978758017532527446746826171875": 185, "4142135623730951": 185, "414213562373095048801688724": 185, "1415926535": 185, "7182818285": 185, "85987": 185, "85988": 185, "1e9999999999999999999": 185, "circus": [185, 224, 438], "87": [185, 247, 343, 348], "5058": 185, "718281828459045235360287471": [185, 467], "302585092994045684017991455": 185, "myothercontext": 185, "142857142857142857142857142857142857142857142857142857142857": 185, "142857143": [185, 465], "143": [185, 247, 381, 383, 463], "355": [185, 220], "113": [185, 220, 448], "14159292": 185, "snan": [185, 468], "devan": 185, "gar": [185, 296], "fullwidth": 185, "uff10": 185, "uff19": 185, "100000000000000088817841970012523233890533447265625": [185, 470, 474], "00000": 185, "321e": 185, "157": [185, 478], "decimaltupl": 185, "unequ": [185, 296, 344, 427, 429, 465, 466, 469, 475, 482], "unaffect": [185, 332, 365, 427, 435, 454, 464, 467, 478, 482], "compli": [185, 262, 271, 314, 425, 467, 482], "561702493119680037517373933e": 185, "139": [185, 381, 463], "0x1": [185, 344, 443, 467, 470, 471, 473], "999999999999ap": 185, "1000000000000000055511151231257827021181583404541015625": [185, 443, 468], "fuse": 185, "closest": [185, 220, 224, 275, 426, 467, 468], "0e0": [185, 434], "321000e": 185, "41421356": 185, "123e": 185, "23e": 185, "calculate_someth": 185, "halt": [185, 211, 292, 296, 387, 476], "02e": 185, "weaker": [185, 462], "999": [185, 284], "23e999": 185, "23000e": 185, "4445": 185, "0023": 185, "recount": 185, "qnan": 185, "msd": 185, "scientif": [185, 343, 345, 453, 460, 467], "425000000": [185, 475], "999999999999999999": [185, 475], "849999999": 185, "1999999999999999997": 185, "inward": 185, "outward": 185, "stricter": [185, 388, 461, 462, 466, 475, 477, 479, 482], "amplifi": 185, "breakdown": 185, "seminumer": 185, "11111113": 185, "11111111": [185, 344], "51111111": 185, "5111111": 185, "20000": [185, 366], "0000003": 185, "0060000": 185, "affin": 185, "indetermin": [185, 375, 399, 407], "854": [185, 358], "0e": 185, "1000026": 185, "interf": [185, 283, 366, 429, 476], "applicationwid": 185, "moneyfmt": 185, "curr": 185, "dp": [185, 482], "trailneg": 185, "money": [185, 348], "1234567": [185, 451, 470], "8901": [185, 481, 482], "568": 185, "123456789": 185, "141592653589793238462643383": 185, "na": [185, 296, 326, 462, 471, 472, 473, 480, 481, 482], "da": [185, 261, 319], "389056098930650227230427461": 185, "38905609893": 185, "0j": [185, 224, 344, 418, 482], "taylor": [185, 467, 482], "8775825618903727161162815826": 185, "87758256189": 185, "4794255386042030002732879352": 185, "479425538604": 185, "twoplac": 185, "214": [185, 308], "72": [185, 246, 261, 343, 383, 465, 466, 482], "105": [185, 343], "4314": 185, "2e2": 185, "2e": [185, 482], "remove_expon": 185, "5e": [185, 347], "141592653589793115997963468544185161590576171875": 185, "spurious": [185, 296, 333, 470, 482], "ill": [185, 304, 474, 479, 482], "104": [185, 343, 474, 480, 481], "23456789": 185, "2345678": 185, "2345": 185, "pypy3": 185, "karatsuba": [185, 464], "bignum": [185, 344, 475], "904625697166532776746648320380374280103671755200316906558262375061821325312": 185, "overalloc": [185, 344, 480, 482], "8gb": 185, "500mb": 185, "maxdigit": [185, 352], "524288112": 185, "tighter": [185, 426, 465, 475], "269": [187, 482], "unclos": [187, 246, 340, 377, 471, 474, 478, 482], "rst": [187, 296, 455, 459, 479, 482], "18748": [187, 480, 482], "modal": [188, 369, 372], "initialdir": 188, "initialfil": 188, "defaultextens": 188, "mustexist": 188, "dir_or_fil": 188, "ratcliff": 189, "obershelp": 189, "gestalt": 189, "longest": [189, 235, 259, 261, 294, 434, 463, 466, 477], "cubic": 189, "autojunk": 189, "intralin": 189, "intra": 189, "wrapcolumn": 189, "linejunk": 189, "charjunk": 189, "fromlin": 189, "tolin": 189, "fromdesc": 189, "todesc": 189, "numlin": 189, "hyperlink": [189, 482], "fromfiled": 189, "tofiled": 189, "lineterm": 189, "eggi": 189, "hamster": 189, "cutoff": [189, 482], "appel": 189, "ape": 189, "peach": 189, "puppi": 189, "pineappl": 189, "constitut": [189, 259, 331, 471, 482], "nois": [189, 292, 293, 343, 482], "ntwo": 189, "nthree": 189, "ntree": 189, "nemu": 189, "emu": 189, "dfunc": 189, "metzen": 189, "dr": [189, 222, 363, 474], "dobb": 189, "journal": 189, "isjunk": 189, "synch": 189, "bjunk": [189, 476], "bpopular": [189, 476], "b2j": 189, "alo": 189, "ahi": 189, "blo": 189, "bhi": 189, "abxcd": 189, "j1": [189, 459, 482], "j2": 189, "qabxcd": 189, "abycdf": 189, "cluster": [189, 224, 337, 343, 454, 467], "tide": [189, 374], "diet": 189, "bcde": [189, 261, 468], "volatil": [189, 284, 482], "text1": 189, "text2": 189, "flat": [189, 200, 203, 368, 375, 411], "interlin": 189, "file_mtim": 189, "fromdat": 189, "todat": 189, "tf": [189, 474], "file1": [189, 468], "file2": [189, 468], "r1": [189, 241, 383, 393], "r2": [189, 241, 383, 393], "ndiff_output": 189, "file1_or_file2": 189, "sed": [189, 482], "gripe": 189, "spray": 189, "fcompar": 189, "f1name": 189, "f2name": 189, "qr": 189, "noisi": [189, 292, 482], "qseen": 189, "rseen": 189, "whichfil": 189, "vms": [190, 292, 475, 476], "show_cach": [190, 482], "alist": [190, 304, 427], "load_glob": [190, 480, 482], "load_fast": [190, 476, 482], "current_offset": [190, 476], "analys": 190, "lasti": [190, 482], "co_lin": [190, 471], "co_firstlineno": [190, 255, 427, 482], "co_lnotab": [190, 255, 427, 471, 478, 482], "oparg": [190, 473, 482], "nop": [190, 358, 440, 482], "pop_top": [190, 482], "tos": [190, 208, 471, 482], "quicken": [190, 472, 482], "unary_posit": 190, "unary_neg": 190, "unary_not": 190, "unary_invert": 190, "get_it": 190, "get_yield_from_it": [190, 482], "tos1": 190, "tos2": 190, "tos3": 190, "binary_op": [190, 472, 482], "binary_subscr": [190, 482], "store_subscr": [190, 482], "delete_subscr": 190, "binary_slic": [190, 482], "store_slic": [190, 482], "get_await": [190, 482], "get_ait": 190, "get_anext": 190, "end_async_for": [190, 480, 482], "cleanup_throw": 190, "before_async_with": 190, "print_expr": 190, "set_add": 190, "list_append": [190, 465], "map_add": [190, 480], "yield_valu": [190, 482], "setup_annot": [190, 478], "import_star": 190, "pop_except": 190, "push_exc_info": 190, "check_exc_match": [190, 472, 482], "check_eg_match": [190, 472, 482], "prep_reraise_star": [190, 482], "reconstruct": [190, 258, 299, 307, 377, 406], "with_except_start": [190, 482], "context_manag": 190, "load_assertion_error": [190, 481], "load_build_class": 190, "__build_class__": [190, 449, 482], "before_with": 190, "get_len": 190, "match_map": 190, "match_sequ": 190, "match_key": [190, 472], "store_nam": [190, 341], "namei": 190, "co_nam": [190, 255, 427, 477, 482], "store_fast": [190, 482], "store_glob": 190, "delete_nam": 190, "unpack_sequ": [190, 482], "unpack_ex": 190, "leftov": [190, 292], "store_attr": [190, 482], "delete_attr": 190, "delete_glob": 190, "load_const": [190, 474, 476, 482], "consti": 190, "co_const": [190, 255, 427, 482], "load_nam": [190, 474], "build_tupl": 190, "build_list": 190, "build_set": 190, "build_map": [190, 482], "build_const_key_map": [190, 478, 482], "build_str": [190, 478, 482], "list_to_tupl": [190, 482], "list_extend": [190, 482], "set_upd": [190, 482], "dict_upd": [190, 482], "dict_merg": [190, 482], "load_attr": [190, 471, 473, 482], "compare_op": [190, 474, 481, 482], "is_op": [190, 481, 482], "contains_op": [190, 481, 482], "import_nam": [190, 430], "import_from": [190, 430], "jump_forward": [190, 482], "jump_backward": [190, 472, 482], "jump_backward_no_interrupt": [190, 472, 482], "pop_jump_if_tru": [190, 472, 482], "pop_jump_if_fals": [190, 472, 474, 482], "pop_jump_if_not_non": [190, 482], "pop_jump_if_non": [190, 482], "jump_if_true_or_pop": [190, 472, 482], "jump_if_false_or_pop": [190, 472, 482], "for_it": [190, 482], "var_num": 190, "load_fast_check": [190, 482], "delete_fast": 190, "make_cel": [190, 482], "load_closur": [190, 482], "co_fastlocalnam": [190, 482], "load_deref": 190, "load_classderef": [190, 476], "store_deref": [190, 482], "delete_deref": 190, "copy_free_var": [190, 482], "raise_vararg": 190, "kw_name": [190, 472, 482], "call_function_ex": [190, 478, 482], "push_nul": [190, 472, 482], "load_method": [190, 473, 479, 482], "make_funct": [190, 471, 478, 482], "0x02": [190, 478], "0x08": [190, 427], "build_slic": 190, "extended_arg": [190, 482], "format_valu": [190, 478, 482], "fmt_spec": 190, "match_class": [190, 472], "return_gener": [190, 482], "async_gen_wrap": [190, 482], "async_generator_wrapped_valu": 190, "have_argu": [190, 473], "setup_fin": [190, 482], "setup_cleanup": 190, "setup_with": 190, "pop_block": 190, "jump_no_interrupt": [190, 482], "undirect": 190, "min_pseudo_opcod": 190, "expositori": 192, "265252859812191058636308480000000": 192, "ridicul": 192, "1e100": [192, 275, 429, 434], "1e300": 192, "test_doctest": [192, 482], "giant": 192, "720": [192, 474, 480], "__test__": 192, "blanklin": [192, 465], "trial": [192, 318, 343, 366, 464], "crumb": 192, "your_dict": 192, "rapid": [192, 308, 480, 482], "verbatim": [192, 348, 408, 425], "ndetail": 192, "transcript": 192, "oop": [192, 442], "mismatch": [192, 212, 215, 267, 319, 334, 341, 412, 426, 462, 464, 466, 468, 477, 482], "my_flag": 192, "directive_opt": 192, "on_or_off": 192, "directive_option_nam": 192, "hermion": 192, "harri": [192, 466], "7948648": 192, "0x00ac18f0": 192, "14285714285714285": [192, 445], "142857142857": 192, "contriv": [192, 482], "utter": [192, 469], "module_rel": 192, "optionflag": [192, 361], "extraglob": 192, "raise_on_error": 192, "failure_count": [192, 361], "test_count": [192, 361], "slate": [192, 431, 471, 472, 476, 477, 482], "mortem": [192, 297, 352, 439], "exclude_empti": 192, "nonam": [192, 421], "compileflag": 192, "systemat": [192, 482], "my_module_with_doctest": 192, "tear": [192, 387], "test_find": 192, "doctestcas": 192, "docfilecas": 192, "runtest": [192, 387], "revolv": 192, "testrunn": [192, 387], "clear_glob": 192, "report_": 192, "cont": 192, "sketch": [192, 242, 440, 466, 467, 471], "grown": [192, 328], "amaz": [192, 463], "skimp": 192, "prose": 192, "attitud": 192, "coher": 192, "narrat": 192, "blur": [192, 261], "_regrtest_top": 192, "2821": 193, "5322": [193, 195, 198, 200, 202, 204, 206, 207, 335], "6532": [193, 204, 206, 207, 477, 479, 482], "2046": [193, 196, 201], "2047": [193, 201, 202, 207, 208, 234, 474], "2183": [193, 195, 204, 482], "2231": [193, 195, 201, 204, 208], "subcompon": 193, "forego": [193, 425], "promot": [193, 235, 425, 467, 472, 482], "offic": [193, 425], "default_charset": 194, "impos": [194, 262, 293, 294, 296, 299, 321, 322, 344, 385, 433, 454], "outright": 194, "qp": 194, "7bit": [194, 196, 197, 200, 202, 207, 271, 474, 475, 482], "maxlength": [194, 283], "header_enc": 194, "body_enc": 194, "codecnam": 194, "philosophi": [195, 469], "rfc822": [195, 196, 203, 204, 205, 206, 247, 463, 465], "envelop": [195, 200, 204, 206, 247, 271, 335, 482], "from_": [195, 271, 375, 482], "unixfrom": [195, 200, 204, 476, 482], "maxheaderlen": [195, 200, 204, 476], "invalidbase64paddingdefect": [195, 198], "invalidbase64charactersdefect": [195, 198], "8bit": [195, 196, 197, 200, 201, 202, 206, 207, 474, 475], "2822": [195, 201, 208, 241, 244, 271, 365, 450, 463], "contravent": 195, "mymessag": [195, 204], "extant": [195, 204, 482], "roolz": [195, 204], "failobj": [195, 204], "_param": [195, 204, 205, 406], "disposit": [195, 196, 202, 204, 247, 293, 333, 399, 406, 477], "bud": [195, 204, 406], "gif": [195, 204, 205, 230, 248, 368, 383, 406, 466, 482], "fu": [195, 204], "baller": [195, 204], "ppt": [195, 204], "dfballer": 195, "subpart": [195, 197, 198, 200, 203, 204, 205, 206], "rawparam": 195, "requot": [195, 204], "make_": 195, "add_": [195, 196], "deliveri": [195, 199, 204, 206, 271, 293, 333, 337, 482], "armor": [195, 204], "typ": [196, 247, 385], "typekey": 196, "cid": [196, 199, 337], "headernam": 196, "headervalu": 196, "_subtyp": [197, 205], "_charset": [197, 205, 229, 482], "unprint": [197, 482], "drawback": [197, 252, 292, 479], "add_payload": 198, "messagedefect": 198, "noboundaryinmultipartdefect": 198, "startboundarynotfounddefect": 198, "closeboundarynotfounddefect": 198, "firstheaderlineiscontinuationdefect": 198, "misplacedenvelopeheaderdefect": 198, "missingheaderbodyseparatordefect": 198, "malformedheaderdefect": 198, "multipartinvariantviolationdefect": [198, 206], "invalidbase64lengthdefect": 198, "invaliddatedefect": 198, "textfil": 199, "messagefil": 199, "uncommon": [199, 250, 466, 482], "someone_els": 199, "reunion": 199, "pngfile": 199, "img_data": 199, "png": [199, 205, 239, 248, 368], "msgfile": 199, "sanit": [199, 455, 482], "03d": [199, 267, 344], "ayon": 199, "asperg": 199, "pour": 199, "jeuner": 199, "pew": 199, "pepe": 199, "penelop": 199, "pussycat": 199, "fabrett": 199, "salut": 199, "cela": 199, "ressembl": 199, "yumm": 199, "roast": 199, "asparagus": 199, "epicuri": 199, "203718": 199, "asparagus_cid": 199, "href": [199, 237, 239, 241, 412, 468], "img": [199, 239], "peel": 199, "jpg": [199, 258, 294, 418, 451, 466], "jpeg": [199, 205, 248, 368, 445, 467, 482], "magic_html_pars": 199, "html_text": 199, "partfil": 199, "preview": [199, 257, 482], "useless": [199, 222, 388, 410, 471, 480, 482], "preferencelist": [199, 204], "ans": 199, "richest": 199, "matthew": [199, 472, 476, 482], "dixon": 199, "cowl": 199, "necess": [200, 482], "smime": 200, "outfp": 200, "refold": [200, 207, 475], "rewrap": [200, 225], "manheaderlen": 200, "craft": [200, 299, 431, 474, 482], "amessag": 200, "transfer_encod": 200, "part_info": 200, "_mangle_from_": 200, "worldwid": [201, 234], "slew": 201, "xf6stal": 201, "f6stal": 201, "maxlinelen": 201, "header_nam": [201, 394, 406], "continuation_w": 201, "splitchar": 201, "decoded_str": 201, "decoded_seq": 201, "headerdefect": 202, "_myattr": 202, "myattr": 202, "unstructur": 202, "wild": [202, 435, 461, 482], "uniqueunstructuredhead": 202, "supplement": [202, 212, 226, 293, 460, 467, 476, 482], "base_class": 202, "default_class": 202, "use_default_map": 202, "uniquedatehead": 202, "resent": [202, 208, 271, 335], "orig": [202, 395], "uniquesingleaddresshead": 202, "uniqueaddresshead": 202, "bcc": [202, 335], "contenttransferencodinghead": 202, "messageidhead": 202, "5321": [202, 475], "include_default": 203, "6531": [204, 207, 335, 477, 482], "ordinarili": [205, 331], "dice": 205, "_maintyp": 205, "nonmultipart": [205, 482], "_subpart": 205, "_data": [205, 225], "_encod": 205, "_audiodata": 205, "_imagedata": 205, "tiff": [205, 248, 368, 466], "pbm": [205, 248], "pgm": [205, 248, 368], "ppm": [205, 248, 368, 374], "rast": [205, 248], "xbm": [205, 248, 368, 374], "bmp": [205, 246, 248, 368, 475, 476, 479, 480, 482], "webp": [205, 248, 368, 477, 482], "exr": [205, 248], "_msg": 205, "_text": 205, "cloth": 206, "conduc": 206, "_factori": 206, "stitch": 206, "fed": [206, 234, 239, 283, 314, 412, 466], "_class": 206, "headerson": 206, "mybyt": 206, "edness": 206, "dispar": 207, "settabl": [207, 246, 399, 461, 463, 482], "mymsg": [207, 476], "compat_smtp": 207, "compat_strict": 207, "compat_strict_smtp": 207, "commut": 207, "policy100": 207, "policy80": 207, "apolici": 207, "78": [207, 284, 475, 482], "sourcelin": 207, "unfold": 207, "stype": 207, "rejoin": 207, "refold_head": 207, "traffic": [207, 337, 341, 343, 463, 474, 482], "somepolici": 207, "isdst": 208, "summer": [208, 224, 365, 466, 467], "divin": 208, "idstr": 208, "strengthen": [208, 482], "constitu": [208, 251, 409], "realnam": 208, "email_address": 208, "fieldvalu": 208, "ccs": [208, 341], "resent_to": 208, "resent_cc": 208, "all_recipi": 208, "mailer": 208, "greenwich": [208, 365], "timev": [208, 482], "usegmt": 208, "fallback_charset": 208, "uninstal": [209, 213, 281, 381, 452, 460, 476, 482], "rational": [209, 212, 234, 293, 328, 329, 333, 337, 365, 401, 427, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 476, 477, 478, 480, 482], "pipx": [209, 468, 476], "altinstal": [209, 455, 459, 468, 474, 476], "default_pip": 209, "nomenclatur": [210, 352], "some_var": 210, "powersofthre": 210, "otherstyl": 210, "something_els": 210, "crimson": 210, "neon": 210, "0x18": 210, "show_flag_valu": 210, "strictflag": 210, "0b0": 210, "10100": 210, "00111": 210, "conformflag": 210, "ejectflag": 210, "keepflag": 210, "generate_next_value_": 210, "myintenum": 210, "typewrit": 211, "csi": 211, "anod": 211, "advertis": [211, 288, 335, 341, 425, 467, 476, 477, 480, 482], "srmount": 211, "multihop": 211, "rfs": 211, "stale": [211, 250, 476, 482], "nfs": [211, 293, 482], "xenix": 211, "new_exc": 212, "original_exc": 212, "3134": [212, 469, 482], "someexcept": [212, 387, 469], "rescu": 212, "unqualifi": [212, 348, 439, 476, 482], "perror": 212, "abandon": [212, 368, 414, 474], "dubious": [212, 399, 482], "mygroup": [212, 341], "apport": 213, "sigaltstack": [213, 482], "catastroph": [213, 474, 482], "all_thread": 213, "watchdog": 213, "0x00007fb899f39700": [213, 475], "f_add_seal": 214, "f_get_seal": 214, "f_seal_": 214, "f_getpath": [214, 482], "f_ofd_getlk": [214, 481, 482], "f_ofd_setlk": [214, 481, 482], "f_ofd_setlkw": [214, 481, 482], "f_getpipe_sz": [214, 482], "f_setpipe_sz": [214, 482], "f_dup2fd": [214, 472, 482], "f_dup2fd_cloexec": [214, 472, 482], "fd_cloexec": [214, 472], "ficlon": [214, 482], "ficlonerang": [214, 482], "reflink": [214, 293], "btrfs": [214, 293], "ocfs2": 214, "xfs": [214, 293], "mutate_flag": 214, "simplif": [214, 482], "13341": 214, "tiocgpgrp": 214, "lock_un": 214, "lock_sh": 214, "lock_ex": 214, "lock_nb": 214, "svr4": 214, "f_setfl": 214, "lockdata": 214, "hhllhh": 214, "f_wrlck": 214, "f_setlkw": 214, "dir1": 215, "dir2": 215, "mydircmp": 215, "print_diff_fil": 215, "dcmp": 215, "sub_dcmp": 215, "openhook": [217, 466, 482], "inplac": [217, 482], "bak": 217, "fi": [217, 224], "reobj": 219, "other_fract": 220, "414213": 220, "1414213": 220, "125": [220, 443, 445, 448, 467], "7e": 220, "2476979795053773": [220, 474], "2251799813685248": [220, 474], "flt": 220, "max_denomin": 220, "1415926535897932": 220, "4503599627370497": 220, "9007199254740992": 220, "greatest": [220, 275, 344], "ndigit": [220, 224, 427, 482], "959": 222, "2640": [222, 481, 482], "1176": 222, "1063": 222, "sr": 222, "226": [222, 240], "221": 222, "acct": 222, "source_address": [222, 241, 335, 337, 468, 474, 475], "ftp1": [222, 474], "proftpd": [222, 474], "154": [222, 284, 381, 465, 474], "cento": [222, 472, 474, 479, 482], "fedora": [222, 352, 455, 459, 471, 474, 481, 482], "keyfil": [222, 247, 269, 281, 305, 335, 341, 461, 478, 482], "certfil": [222, 247, 305, 335, 341, 461, 478, 482], "4217": 222, "pem": [222, 247, 305, 335, 341, 459, 476, 482], "ftps": 222, "pureftpd": 222, "6jack": 222, "antilink": 222, "blogbench": 222, "bsdcam": 222, "clockspe": 222, "djbdns": 222, "jedi": 222, "eacceler": 222, "favicon": 222, "ico": [222, 482], "francoton": 222, "fugu": 222, "libpuzzl": 222, "metalog": 222, "minidentd": 222, "udf": [222, 482], "php": [222, 418, 461, 463], "jenkin": [222, 387], "skein": [222, 234], "webdav": [222, 240], "phpaudit": 222, "phpbench": 222, "pincast": 222, "ping": [222, 461, 462, 463, 466], "posto": 222, "public_key": 222, "ftpd": 222, "qscan": 222, "qtc": 222, "shared": 222, "skycach": 222, "ucarp": 222, "499": [222, 240, 288], "disclaim": [222, 288, 349, 400, 425], "stor": 222, "eprt": 222, "epsv": 222, "pasv": [222, 482], "3659": 222, "fromnam": 222, "tonam": 222, "unilater": 222, "nat": [222, 337, 475], "async_iter": 224, "0b11": 224, "0b1010": [224, 469], "0b1110": 224, "1110": 224, "dont_inherit": [224, 476], "pycf_": 224, "__initializing__": 224, "_clearcach": 224, "perimet": 224, "season": 224, "floatnumb": [224, 429, 434], "numeric_valu": 224, "003": [224, 427, 445, 454], "1e6": 224, "0x2a": [224, 345], "010": [224, 261, 361], "classinfo": 224, "mydata": [224, 364, 410, 451, 474], "process_block": 224, "iterat": 224, "keyfunc": [224, 261], "0o70": 224, "0o12": 224, "nnn": [224, 239, 394], "untransl": [224, 258], "somedir": 224, "spamspam": 224, "3j": [224, 289, 468], "inv_bas": 224, "_x": [224, 259, 467, 478], "_voltag": 224, "salari": [224, 344, 439], "suffic": [224, 295, 340], "regular_funct": 224, "object_or_typ": 224, "type2": [224, 385], "spice": 224, "transpos": [224, 441, 465], "fo": [224, 227, 463], "manifest": [224, 361, 468, 482], "x2": [224, 429, 440, 471], "attain": 224, "till": [224, 283, 308, 341, 358, 481, 482], "saus": 224, "_temp": 224, "pythoncaseok": [224, 454, 462, 481, 482], "user_funct": 225, "evict": 225, "3628800": 225, "479001600": 225, "sequence_of_numb": [225, 480], "count_vowel": 225, "vowel": 225, "aeiouaeiou": 225, "cache_paramet": [225, 482], "cache_info": [225, 474], "currsiz": [225, 474], "cache_clear": [225, 474], "predictor": 225, "impur": 225, "get_pep": 225, "290": 225, "320": [225, 387], "9991": 225, "cacheinfo": [225, 474], "fib": [225, 440, 449], "377": [225, 440, 448, 449], "610": [225, 440, 448, 449], "_is_valid_operand": 225, "lastnam": [225, 340, 474, 480], "firstnam": [225, 340, 474], "unrecognis": [225, 268, 475], "farg": 225, "fkeyword": 225, "newkeyword": 225, "basetwo": 225, "10010": 225, "_aliv": 225, "set_stat": 225, "set_dead": 225, "strength": [225, 343, 472], "eh": [225, 472], "fun_num": 225, "615": [225, 424, 481, 482], "0x1035a2840": 225, "0x103fe0000": 225, "dict_key": [225, 262, 468, 482], "wrapper_assign": 225, "wrapper_upd": 225, "17482": 225, "my_decor": [225, 466], "uncollect": [226, 474, 482], "threshold0": 226, "threshold1": 226, "threshold2": 226, "sweep": [226, 466], "youngest": 226, "count0": 226, "count1": 226, "count2": 226, "referr": 226, "lazarus": 226, "unfamiliar": [227, 267, 292, 466, 467], "shortopt": 227, "longopt": 227, "frob": [227, 389], "posixly_correct": 227, "cfoo": 227, "optlist": 227, "ho": [227, 482], "lname": 228, "i18n": [229, 345, 461, 468, 482], "l10n": [229, 461], "monolingu": 229, "localedir": 229, "po": [229, 468], "unimpl": [229, 242], "myapplic": 229, "class_": 229, "lgettext": [229, 472, 480, 482], "lngettext": [229, 472, 480], "_info": 229, "_fallback": 229, "albeit": [229, 385], "gnome": [229, 343, 465, 475, 482], "jame": [229, 422, 425, 461, 464, 466, 468, 472, 479, 482], "henstridg": [229, 461, 468], "mylog": [229, 470, 474], "xgettext": [229, 482], "babel": 229, "pybabel": 229, "fran": [229, 475, 476, 477], "ois": [229, 475, 476, 477], "pinard": 229, "xpot": 229, "pygettext": [229, 477, 482], "msgfmt": [229, 468], "lang1": 229, "lang2": 229, "fr": [229, 271, 318, 434, 464, 479], "lang3": 229, "language1": 229, "mollusk": 229, "albatross": 229, "rat": 229, "penguin": [229, 426], "n_": 229, "markthisstringfortransl": 229, "funk": [229, 461], "juan": [229, 468], "ib": 229, "ez": 229, "palomar": 229, "barri": [229, 461, 462, 463, 465, 466, 467, 474, 475, 476, 477, 478, 479, 480, 482], "warsaw": [229, 461, 462, 463, 465, 466, 467, 474, 475, 476, 477, 479, 480, 482], "gustavo": [229, 463, 464, 465, 466, 482], "niemey": [229, 463, 464, 465, 466], "redhat": [229, 482], "concert": [230, 471, 474], "subshel": [230, 293], "include_hidden": [230, 482], "inordin": [230, 296], "unc": [230, 293, 294, 296, 421, 482], "sharepoint": [230, 294, 421], "quo": 230, "vadi": 230, "card": [230, 295, 318, 319, 435], "topolog": [231, 464, 481, 482], "vertex": [231, 383], "acycl": 231, "predecessor": [231, 464, 474], "topological_sort": 231, "task_queu": [231, 283], "finalized_tasks_queu": 231, "node_group": 231, "ts2": 231, "gr_name": [232, 464], "gr_passwd": 232, "gr_gid": [232, 348, 464], "gr_mem": 232, "yp": 232, "discern": 233, "slowest": [233, 361, 383, 423, 482], "unseek": [233, 400, 421, 474, 476, 477, 482], "wbit": [233, 423, 482], "file_cont": [233, 270], "f_in": 233, "f_out": 233, "s_in": 233, "s_out": 233, "fip": [234, 482], "sha1": [234, 455, 466, 468, 474, 482], "sha224": [234, 466, 468, 474], "sha256": [234, 251, 337, 341, 455, 466, 468, 474, 482], "sha384": [234, 341, 466, 468, 474], "sha512": [234, 455, 466, 468, 474, 482], "rsa": [234, 341, 425, 471, 482], "1321": 234, "sha3_224": [234, 478], "sha3_256": [234, 478], "sha3_384": [234, 478], "sha3_512": [234, 478, 482], "shake_128": [234, 478], "shake_256": [234, 478], "sha3": [234, 455, 472, 481, 482], "keccak": [234, 472, 478, 482], "usedforsecur": [234, 327, 482], "insecur": [234, 286, 327, 330, 340, 341, 466, 473, 474, 482], "spammish": 234, "x03": [234, 337, 344, 347, 397], "x1e": [234, 344], "xdd": 234, "ae": 234, "x15": [234, 347], "x93": 234, "xc5": 234, "xfe": 234, "x00o": 234, "xa5u": 234, "xfd": 234, "xf7": 234, "xbcn": 234, "x84": [234, 467], "xa6": 234, "xaf": [234, 467], "x0c": [234, 344, 397], "x95": 234, "x0fk": 234, "x06": [234, 397], "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 234, "upstream": [234, 340, 480, 482], "incept": 234, "length_in_bit": 234, "socketio": 234, "mac1": 234, "digestmod": [234, 236, 476, 480, 482], "mac2": 234, "stretch": [234, 246, 375, 383, 409, 479], "brute": 234, "tunabl": [234, 293, 474], "hash_nam": 234, "dklen": 234, "pkcs": [234, 341, 476, 482], "pseudorandom": [234, 318, 341], "appendix": 234, "nist": [234, 464], "132": 234, "stackexchang": 234, "pbkdf2": [234, 471], "our_app_it": 234, "500_000": [234, 344], "dk": 234, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 234, "maxmem": 234, "7914": 234, "mib": [234, 270, 283, 332, 480, 482], "7693": 234, "fanout": 234, "leaf_siz": [234, 482], "node_offset": [234, 482], "node_depth": 234, "inner_s": 234, "last_nod": 234, "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 234, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 234, "6fa1d8fcfd719046d762": 234, "eb6ec15daf9546254f0809": 234, "1bf21a98c78a1c376ae9": 234, "567004bf96e4a25773ebf4": 234, "indifferenti": 234, "3d363ff7401e02026f4a4687d4863c": 234, "symmetr": [234, 284, 341, 344, 427, 429, 461, 463, 464, 465, 475, 482], "tamper": [234, 299], "secret_key": 234, "auth_siz": 234, "good_sig": 234, "alic": 234, "43b3c982cf697e0c5ab22172d1ca7421": 234, "bob": [234, 283, 458, 466, 467, 468, 470, 475], "0102030405060708090a0b0c0d0e0f00": 234, "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 234, "signer": 234, "likelihood": [234, 343, 480], "106": [234, 261, 343, 460, 463], "salt1": 234, "salt2": 234, "h2": [234, 241, 268, 410], "summarili": 234, "files_hash_person": 234, "block_hash_person": 234, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 234, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 234, "orig_key": 234, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 234, "khy6h21km": 234, "enc_key": 234, "kencrypt": 234, "mac_key": 234, "kmac": 234, "rbpb15s": 234, "z9t": 234, "agffno5wuhb77vbri6f9iv2qixu7whw": 234, "g9gthfe1yluxy1zwplyk1": 234, "nwfu0wseb0krcjhdep": 234, "h00": 234, "h01": 234, "h10": 234, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 234, "jean": [234, 425, 467, 468, 475], "philipp": [234, 425, 466, 471, 482], "aumasson": [234, 425], "samuel": [234, 337, 425, 464, 466, 478, 481, 482], "neve": [234, 425, 478], "zooko": [234, 425], "wilcox": 234, "hearn": 234, "christian": [234, 425, 461, 465, 467, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482], "winnerlein": 234, "finalist": 234, "henzen": 234, "willi": 234, "meier": 234, "raphael": 234, "phan": 234, "chacha": 234, "daniel": [234, 464, 467, 468, 471, 472, 474, 476, 477, 478, 482], "bernstein": [234, 425, 467, 482], "pyblake2": 234, "dmitri": [234, 465, 477, 478, 482], "chestnykh": [234, 478], "heim": [234, 425, 467, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482], "neighbor": [234, 412, 463, 464], "warranti": [234, 425, 480], "cc0": 234, "creativecommon": 234, "publicdomain": 234, "alexandr": [234, 467, 468, 470, 474, 476, 482], "sokolovskiy": 234, "csrc": 234, "gov": [234, 242, 464], "fips180": 234, "cryptographic_hash_funct": 234, "cryptographic_hash_algorithm": 234, "rfc8018": 234, "cryptographi": [234, 337], "nvlpub": 234, "nistpub": 234, "nistspecialpublication800": 234, "heapsort": 235, "challeng": [235, 283, 335, 343, 474, 479, 482], "prioritizeditem": [235, 316], "pq": [235, 319], "entry_find": 235, "add_task": 235, "remove_task": 235, "pop_task": 235, "tournament": 235, "sport": 235, "winner": [235, 482], "oppon": 235, "loser": 235, "percol": [235, 482], "midi": 235, "speedi": 235, "fuzzili": 235, "melt": 235, "nowaday": [235, 357], "tape": [235, 357], "spectacular": 235, "digest_con": [236, 482], "crypto_memcmp": [236, 482], "x3e": [237, 239], "lenient": 237, "html4": [238, 239, 482], "whatwg": [238, 393, 482], "multipag": 238, "convert_charref": [239, 476, 477, 482], "myhtmlpars": 239, "insofar": [239, 271, 435], "unprocess": 239, "xnnn": 239, "condcom": 239, "ie9": 239, "decl": 239, "sgml": [239, 273, 416, 467], "ent": 239, "logo": [239, 383, 425], "buff": 239, "ere": 239, "pan": [239, 482], "soup": 239, "switching_protocol": 240, "7231": 240, "2518": 240, "103": [240, 261, 343, 344, 381, 460, 468, 474, 481, 482], "early_hint": [240, 481, 482], "8297": [240, 482], "non_authoritative_inform": 240, "no_cont": 240, "reset_cont": 240, "partial_cont": 240, "7233": 240, "multi_status": 240, "4918": 240, "already_report": 240, "5842": 240, "im_us": 240, "3229": 240, "multiple_choic": 240, "moved_perman": [240, 465], "see_oth": 240, "not_modifi": 240, "7232": [240, 468], "use_proxi": 240, "temporary_redirect": 240, "permanent_redirect": 240, "7238": 240, "bad_request": 240, "7235": 240, "payment_requir": 240, "not_found": [240, 241, 482], "method_not_allow": 240, "not_accept": 240, "proxy_authentication_requir": 240, "request_timeout": 240, "length_requir": 240, "precondition_fail": 240, "request_entity_too_larg": 240, "request_uri_too_long": 240, "unsupported_media_typ": 240, "requested_range_not_satisfi": 240, "expectation_fail": 240, "418": [240, 440, 471, 475, 481, 482], "im_a_teapot": [240, 481], "htcpcp": 240, "2324": 240, "misdirected_request": 240, "7540": 240, "422": 240, "unprocessable_ent": 240, "423": 240, "424": [240, 476], "failed_depend": 240, "too_ear": [240, 481, 482], "8470": 240, "upgrade_requir": 240, "428": [240, 296, 476], "precondition_requir": 240, "6585": 240, "429": [240, 476], "too_many_request": 240, "431": 240, "request_header_fields_too_larg": 240, "unavailable_for_legal_reason": [240, 482], "obstacl": [240, 482], "7725": 240, "internal_server_error": 240, "not_impl": 240, "bad_gateway": 240, "service_unavail": 240, "gateway_timeout": 240, "http_version_not_support": 240, "506": [240, 326, 478, 482], "variant_also_negoti": 240, "2295": 240, "507": 240, "insufficient_storag": 240, "508": 240, "loop_detect": 240, "510": 240, "not_extend": 240, "2774": 240, "511": [240, 421, 478], "network_authentication_requir": 240, "is_inform": 240, "199": 240, "is_success": [240, 482], "is_redirect": 240, "399": [240, 482], "is_client_error": 240, "is_server_error": 240, "httmethod": 240, "5789": 240, "h3": 241, "h4": 241, "key_fil": [241, 394], "cert_fil": [241, 394, 482], "_create_unverified_context": [241, 468, 476], "alpn": [241, 341, 394, 471, 477, 482], "encode_chunk": 241, "reconnect": [241, 477, 482], "tunnel": [241, 474], "skip_host": 241, "skip_accept_encod": 241, "message_bodi": 241, "7230": [241, 394], "amt": 241, "data1": 241, "data2": 241, "12524": 241, "issue12524": 241, "filecont": 241, "2965": [242, 394, 482], "2109": [242, 243], "cookie2": 242, "secure_protocol": [242, 482], "wss": [242, 393, 482], "websocket": [242, 257, 482], "downgrad": 242, "curl": [242, 459, 460, 482], "cookie_spec": 242, "kristol": 242, "errata": [242, 262], "unfinish": [242, 283, 482], "2964": 242, "get_origin_req_host": [242, 394, 476], "approv": [242, 288, 307, 460, 461, 468, 482], "ignore_discard": 242, "ignore_expir": 242, "wipe": 242, "lynx": [242, 402, 465], "clobber": [242, 292, 482], "libwww": [242, 465], "cookie3": 242, "mycookiepolici": 242, "i_dont_want_to_store_this_cooki": 242, "tighten": [242, 461, 468, 474], "loos": [242, 364, 482], "benign": 242, "blocklist": 242, "allowlist": [242, 393], "coyot": 242, "193": [242, 383, 469], "nz": 242, "acm": [242, 318], "rocket_launch": 242, "expiri": [242, 482], "began": [242, 250, 267, 361, 461, 462, 471, 482], "cj": 242, "ads": 242, "serializ": [243, 262], "2068": [243, 365], "real_valu": 243, "rawdata": 243, "http_cooki": 243, "httpon": [243, 467, 482], "samesit": [243, 482], "csrf": 243, "lax": [243, 466, 482], "fig": 243, "newton": [243, 319], "wafer": 243, "rocki": [243, 467], "chip": [243, 468], "ahoy": 243, "vienna": 243, "finger": [243, 469], "keebler": 243, "fudg": 243, "012": [243, 261, 344, 462], "oreo": 243, "doublestuff": 243, "twix": 243, "server_class": [244, 406], "handler_class": [244, 406], "8000": [244, 295, 333, 406, 418, 419, 466, 480, 482], "httpd": [244, 276, 333, 406, 466], "server_nam": [244, 406, 419], "server_port": [244, 406], "do_spam": 244, "3986": [244, 393, 468, 477, 479, 482], "hier": 244, "basehttp": 244, "1xx": 244, "1994": [244, 425], "simplehttp": 244, "list_directori": 244, "webserv": 244, "9000": [244, 385, 429], "empt": 244, "htbin": 244, "namag": 246, "aqua": [246, 458, 482], "unsav": 246, "undon": [246, 383, 388, 389], "clipboard": [246, 368, 478, 479, 480, 482], "reformat": [246, 271, 292, 464, 482], "tabifi": 246, "untabifi": 246, "toggl": [246, 337, 375, 480, 481, 482], "chitespac": 246, "autosav": 246, "wake": [246, 328, 333, 364, 467, 482], "pane": [246, 374, 375, 482], "zoom": [246, 482], "momentarili": [246, 271, 482], "deiconifi": 246, "idlerc": [246, 482], "squeez": [246, 478, 479, 480, 482], "leftarrow": 246, "rightarrow": 246, "expres": 246, "pageup": 246, "pagedown": 246, "popup": [246, 361, 383, 482], "100000000": 246, "contract": [246, 344, 425], "uncolor": 246, "idlestartup": [246, 482], "pythonstartup": [246, 320, 334, 352, 437, 454, 476, 482], "masquerad": [246, 388, 482], "tcpconnect": 246, "irv": [246, 441], "6543": 246, "tcplisten": 246, "antivirus": [246, 361], "taught": [246, 343], "mis": [246, 482], "admin": 246, "zombi": [246, 283, 338, 361, 466, 475, 482], "pythonw": [246, 283, 334, 352, 458, 460, 463, 478, 479, 482], "dismiss": 246, "glitch": 246, "pyw": [246, 437, 460, 463, 482], "plane": [246, 275, 471, 482], "x02": [246, 259, 337, 347, 397], "x07": [246, 397], "x08c": 246, "loopback": [246, 259, 361], "transient": [246, 268, 340, 482], "f5": [246, 461], "mousewheel": [246, 482], "scrollbar": [246, 368, 373, 375, 383, 482], "toc": [246, 482], "dock": [246, 482], "zzdummi": [246, 482], "imap4rev1": 247, "1730": 247, "imap4_port": 247, "d25if65hy903weo": 247, "imap4_ssl_port": 247, "ssl_context": [247, 288], "993": 247, "datestr": 247, "flagstr": 247, "uw": 247, "message_set": 247, "authobject": [247, 335], "checkpoint": [247, 352], "new_mailbox": 247, "acl": [247, 332], "5161": [247, 477, 482], "6855": [247, 477, 482], "message_part": 247, "cyrus": [247, 482], "rfc2087": 247, "folder": [247, 271, 398, 460, 482], "cram": [247, 335], "2342": [247, 463], "message_num": 247, "authoris": 247, "oldmailbox": 247, "newmailbox": 247, "criterion": [247, 299, 427, 461], "msgnum": 247, "ldj": 247, "inbox": [247, 271], "sort_criteria": 247, "search_criterion": 247, "flag_list": 247, "3501": 247, "gmail": [247, 482], "threading_algorithm": 247, "sgi": 248, "imglib": 248, "87a": 248, "89a": 248, "graymap": 248, "pixmap": [248, 374], "raster": 248, "jfif": [248, 482], "exif": [248, 482], "openexr": [248, 477, 482], "bass": [248, 336], "conduct": 249, "reexecut": 249, "rebound": [249, 250, 435], "redefinit": [249, 250, 427, 482], "debug_overrid": [249, 250, 477], "path_str": 249, "comprehend": 250, "3120": [250, 434, 469], "subpkg": 250, "educ": [250, 261], "get_resource_read": [250, 252, 253, 479, 482], "sourceless": [250, 475, 477], "allevi": [250, 461], "loader_detail": 250, "inhibit": [250, 314], "namespaceload": [250, 476, 482], "path_find": 250, "my_namespac": 250, "source_byt": 250, "lazy_load": 250, "file_path": 250, "lazy_import": 250, "lazy_typ": 250, "spammetapathfind": 250, "spampathentryfind": 250, "absolute_nam": 250, "parent_nam": 250, "child_nam": 250, "parent_modul": 250, "importlib_metadata": [251, 471, 481, 482], "pkg_resourc": [251, 252, 482], "discover": [251, 312, 476, 482], "package_distribut": 251, "entrypoint": [251, 471, 482], "console_script": 251, "entry_point": [251, 482], "eps": 251, "setup_keyword": [251, 464], "egg_info": 251, "0x103528488": 251, "entry_points_select": 251, "wheel_metadata": 251, "packagemetadata": [251, 482], "566": [251, 482], "requires_python": [251, 307], "quickest": 251, "packagepath": [251, 480], "859": 251, "_hook": 251, "pathdistribut": [251, 482], "0x101e0cef0": 251, "filehash": 251, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 251, "text_typ": 251, "gustav": 251, "always_iter": 251, "pytest": [251, 387], "cov": 251, "packages_distribut": [251, 471, 482], "pyyaml": [251, 468, 470], "jaraco": 251, "find_distribut": 251, "distributionfind": 251, "leverag": [252, 283, 476, 481], "akin": [252, 344, 431], "artifact": [253, 295, 475, 482], "priori": 253, "traversableread": [253, 482], "__code__": [255, 344, 427, 469, 480, 482], "__defaults__": [255, 427, 469], "__kwdefaults__": [255, 427, 476], "tb_frame": [255, 384, 427, 482], "tb_lasti": [255, 384, 427], "tb_lineno": [255, 380, 384, 427], "tb_next": [255, 380, 384, 427, 479, 482], "f_back": [255, 380, 427, 472, 482], "f_code": [255, 427, 464, 472, 482], "f_lineno": [255, 427, 464, 471, 472, 478, 482], "f_trace": [255, 352, 427, 472, 482], "co_argcount": [255, 427, 482], "co_flag": [255, 427, 482], "co_": [255, 482], "co_posonlyargcount": [255, 427, 480, 482], "co_kwonlyargcount": [255, 427], "co_nloc": [255, 427], "co_stacks": [255, 427], "gi_fram": [255, 466], "gi_run": 255, "gi_cod": [255, 467, 477, 482], "gi_yieldfrom": [255, 477, 482], "cr_await": [255, 482], "cr_frame": [255, 482], "cr_run": 255, "cr_code": 255, "cr_origin": [255, 352, 482], "gen_coro": 255, "follow_wrap": [255, 477, 482], "eval_str": 255, "omiss": [255, 314, 337, 482], "new_sig": 255, "anno": 255, "globaln": [255, 385, 482], "localn": [255, 385, 482], "mysignatur": 255, "implicit0": [255, 478, 482], "keyword_on": 255, "positional_on": 255, "var_posit": 255, "var_keyword": 255, "fullargspec": 255, "varkw": 255, "kwonlydefault": 255, "getargspec": [255, 472, 476, 477, 478, 482], "arginfo": 255, "formatarg": 255, "formatvararg": 255, "formatvarkw": 255, "formatvalu": 255, "closurevar": 255, "__signature__": [255, 476, 482], "conting": 255, "lifespan": 255, "handle_stackframe_without_leak": 255, "_foo": 255, "slot_descriptor": 255, "getset_descriptor": 255, "wrapper_descriptor": [255, 465], "descriptor_typ": 255, "gen_creat": [255, 474], "gen_run": 255, "gen_suspend": [255, 474], "gen_clos": [255, 474], "coro_cr": 255, "coro_run": 255, "coro_suspend": 255, "coro_clos": 255, "glibc": [257, 259, 293, 322, 472, 476, 480, 481, 482], "sandbox": [257, 324, 482], "sdk": [257, 455, 481, 482], "wasm": [257, 455, 482], "nodej": 257, "wasmtim": [257, 482], "pyodid": [257, 472, 482], "pyscript": 257, "xmlhttprequest": 257, "markdown": [258, 471], "md": 258, "long_descript": 258, "686": [258, 293], "597": [258, 471, 482], "pythonwarndefaultencod": [258, 454, 471, 482], "blksize": [258, 406], "stacklevel": [258, 267, 399, 466, 482], "unoptim": [258, 477], "seek_": 258, "seek_hol": [258, 293, 475], "seek_data": [258, 293, 475], "immin": 258, "latenc": [258, 269, 293, 440, 468, 471, 478], "initial_byt": 258, "ab56ef": 258, "nsecond": [258, 448], "downsid": [259, 460, 475, 479], "3232235521": [259, 345], "xc0": [259, 463], "xa8": 259, "arpa": [259, 358, 477], "ip6": [259, 477], "multicast": [259, 337, 361, 397, 482], "3171": 259, "2373": 259, "5735": 259, "3330": 259, "3927": 259, "0b11000000101010000000000000000001": 259, "2001_0db8_0000_0000_0000_0000_0000_1000": 259, "_n": 259, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 259, "longhand": 259, "4291": [259, 482], "0abc": 259, "0007": 259, "0def": 259, "4007": 259, "fe80": 259, "ff02": 259, "5678": [259, 397], "3879": 259, "4193": 259, "6to4": 259, "3056": 259, "4380": 259, "nbit": 259, "ff00": 259, "cisco": [259, 482], "wholli": [259, 412], "n1": 259, "n2": 259, "prefixlen_diff": 259, "new_prefix": 259, "db00": 259, "anycast": 259, "ipaddr": 259, "sortabl": [259, 269], "apl": [261, 470, 474], "sml": 261, "recast": [261, 474], "algebra": [261, 467, 482], "tabul": [261, 344, 410], "vector": [261, 275, 348, 366, 383, 385, 408, 482], "vector1": 261, "vector2": 261, "p0": 261, "plast": 261, "p_n": 261, "abcdefg": [261, 291, 472, 482], "q0": 261, "q1": 261, "pred": [261, 398], "it1": 261, "it2": 261, "itn": [261, 482], "ax": 261, "ad": [261, 425, 464], "bd": 261, "addabl": 261, "110": [261, 305, 343, 345, 440], "amort": 261, "1296": 261, "loan": 261, "annual": [261, 481], "cashflow": 261, "bal": 261, "pmt": 261, "960": [261, 482], "918": 261, "873": 261, "9000000000001": 261, "827": 261, "5950000000001": 261, "flattened_data": 261, "violet": [261, 383], "unflatten": 261, "013": 261, "023": 261, "uniq": [261, 465], "uniquekey": 261, "aaaabbbccdaabbb": 261, "aaaabbbccd": 261, "aaaa": [261, 319, 468], "bbb": 261, "tgtkey": 261, "currkey": 261, "currvalu": 261, "_grouper": 261, "nexti": 261, "021": 261, "210": 261, "odomet": 261, "ay": 261, "bx": 261, "cy": 261, "dx": [261, 343], "dy": 261, "011": 261, "mydequ": 261, "newval": 261, "uneven": 261, "num_act": 261, "incub": 261, "iter_index": 261, "superior": 261, "all_equ": 261, "pad_non": 261, "ncycl": 261, "dotproduct": 261, "vec1": 261, "vec2": [261, 385], "convolv": 261, "betterexplain": 261, "convolut": 261, "polynomial_from_root": 261, "4x": [261, 292, 471, 475, 476, 478, 482], "17x": [261, 471, 482], "aabcadeaf": 261, "seq_index": 261, "siev": 261, "list_of_list": 261, "repeatfunc": 261, "grouper": 261, "gxx": 261, "triplewis": 261, "triplet": [261, 482], "cde": 261, "efg": 261, "sliding_window": 261, "cdef": 261, "defg": 261, "sakki": [261, 468], "is_odd": 261, "before_and_aft": 261, "abcdefghi": 261, "all_upp": 261, "true_iter": 261, "remainder_iter": 261, "subslic": 261, "powerset": 261, "unique_everseen": 261, "abbccad": 261, "dedupl": [261, 482], "unique_justseen": 261, "iter_except": 261, "first_tru": 261, "nth_combin": 261, "7159": [262, 477, 482], "4627": [262, 482], "ecma": 262, "sort_key": [262, 304, 474], "x08ar": 262, "as_complex": 262, "dct": 262, "object_hook": [262, 482], "parse_float": [262, 378], "complexencod": 262, "unord": [262, 283, 344, 427], "skipkey": [262, 304, 482], "ensure_ascii": [262, 477, 482], "check_circular": 262, "allow_nan": 262, "item_separ": 262, "key_separ": 262, "parse_int": 262, "parse_const": 262, "object_pairs_hook": [262, 468, 470], "num_str": [262, 378], "bigobject": 262, "json_str": 262, "225": [262, 343, 383, 461], "687": [262, 343], "orbital_period": [262, 343], "dict_item": 262, "forbid": [262, 299, 341, 344, 408, 468, 482], "unpair": 262, "weird_json": 262, "voluntarili": [262, 293], "mp_film": 262, "1971": [262, 340, 343], "holi": [262, 340, 345, 441], "grail": [262, 340, 402, 441], "2028": 262, "2029": 262, "ecmascript": [262, 409], "module_glob": [265, 399, 482], "_local": [266, 481, 482], "decimal_point": [266, 344, 482], "thousands_sep": [266, 344, 482], "int_curr_symbol": 266, "currency_symbol": [266, 451], "p_cs_preced": 266, "n_cs_preced": 266, "p_sep_by_spac": 266, "n_sep_by_spac": 266, "mon_decimal_point": 266, "frac_digit": [266, 451], "int_frac_digit": 266, "mon_thousands_sep": 266, "mon_group": 266, "positive_sign": 266, "negative_sign": 266, "p_sign_posn": 266, "n_sign_posn": 266, "day_7": 266, "abday_1": 266, "abday_7": 266, "mon_1": 266, "mon_12": 266, "abmon_1": 266, "abmon_12": 266, "emperor": 266, "reign": 266, "envvar": [266, 361], "1766": 266, "lc_": 266, "do_setlocal": [266, 293], "localenam": 266, "string1": [266, 340, 441], "string2": [266, 340, 441], "loc": 266, "xe4n": 266, "umlaut": 266, "bind_textdomain_codeset": [266, 465, 472, 480], "grip": [267, 375], "stack_info": [267, 482], "clientip": 267, "fblogg": 267, "hdlr": 267, "lno": 267, "sinfo": 267, "tidi": [267, 387, 464, 466, 467, 482], "emiss": [267, 361, 482], "preparatori": 267, "uuu": 267, "default_time_format": 267, "default_msec_format": 267, "linefmt": 267, "footer": [267, 341, 482], "pertin": [267, 325], "msec": [267, 366, 477], "004": 267, "896": [267, 343], "la": [267, 466, 472], "tasknam": [267, 482], "entrant": [267, 482], "throttl": 267, "28524": 267, "reinstat": [267, 482], "reconstitut": [267, 299], "klass": 267, "inabl": [268, 293], "dictconfigur": 268, "dictconfigclass": 268, "uncustom": 268, "default_logging_config_port": 268, "decrypt": [268, 341, 421], "victim": 268, "customis": 268, "allow_foo": 268, "logconfig": 268, "compel": [268, 468], "customformatterfactori": 268, "my_app": 268, "tld": 268, "support_team": 268, "dev_team": 268, "houston": 268, "mykey": 268, "config_dict": 268, "baseconfigur": 268, "qhand": 268, "queue_factori": 268, "customlisten": 268, "hand_name_1": 268, "hand_name_2": 268, "log01": 268, "logger_log01": 268, "hand01": 268, "handler_hand01": 268, "form01": 268, "formatter_form01": 268, "log02": 268, "log03": 268, "log04": 268, "log05": 268, "log06": 268, "log07": 268, "hand02": 268, "hand03": 268, "hand04": 268, "hand05": 268, "hand06": 268, "hand07": 268, "hand08": 268, "hand09": 268, "form02": 268, "form03": 268, "form04": 268, "form05": 268, "form06": 268, "form07": 268, "form08": 268, "form09": 268, "logger_pars": 268, "_defaultformatt": 268, "handler_hand02": 268, "handler_hand03": 268, "handler_hand04": 268, "default_udp_logging_port": 268, "handler_hand05": 268, "syslog_udp_port": [268, 269], "log_us": [268, 269, 355], "handler_hand06": 268, "handler_hand07": 268, "user1": [268, 472], "user2": [268, 472], "handler_hand08": 268, "handler_hand09": 268, "9022": 268, "typifi": 268, "42378": [269, 482], "newsyslog": 269, "logrot": 269, "precursor": 269, "rollov": [269, 359, 476, 482], "default_nam": [269, 427], "predetermin": 269, "attim": [269, 476], "w0": 269, "w6": 269, "w1": [269, 439], "d_": 269, "record_attr_dict": 269, "datalen": 269, "retrystart": 269, "retryfactor": 269, "retrymax": 269, "rsyslog": 269, "monterey": [269, 482], "gh": [269, 319, 348, 385, 471, 472, 473, 482], "91070": 269, "12168": 269, "append_nul": [269, 475], "12419": 269, "log_": 269, "log_alert": [269, 355], "crit": 269, "log_crit": [269, 355], "log_debug": [269, 355], "panic": [269, 464], "log_emerg": [269, 355], "log_err": [269, 355], "log_info": [269, 355], "log_notic": [269, 355], "log_warn": [269, 355], "log_auth": [269, 355], "authpriv": 269, "log_authpriv": [269, 355], "cron": 269, "log_cron": [269, 355], "log_daemon": [269, 355], "log_ftp": 269, "kern": 269, "log_kern": [269, 355], "lpr": 269, "log_lpr": [269, 355], "log_mail": [269, 355], "log_new": [269, 355], "log_syslog": [269, 355], "uucp": 269, "log_uucp": [269, 355], "local0": 269, "log_local0": [269, 355], "local1": 269, "log_local1": 269, "local2": 269, "log_local2": 269, "local3": 269, "log_local3": 269, "local4": 269, "log_local4": 269, "local5": 269, "log_local5": 269, "local6": 269, "log_local6": 269, "local7": 269, "log_local7": [269, 355], "hammond": [269, 460, 461, 463, 464, 475, 482], "logtyp": 269, "win32servic": 269, "slimmer": 269, "credenti": [269, 288, 337, 394, 460, 477, 482], "zap": 269, "flushonclos": [269, 482], "format_xz": 270, "format_alon": [270, 482], "format_raw": 270, "format_auto": 270, "check_non": 270, "check_crc32": 270, "check_crc64": 270, "check_sha256": 270, "preset_extrem": 270, "preset_default": 270, "memlimit": 270, "check_unknown": 270, "liblzma": [270, 472], "filter_lzma1": 270, "filter_lzma2": 270, "filter_delta": 270, "bcj": 270, "filter_x86": 270, "filter_ia64": 270, "filter_arm": 270, "filter_armthumb": 270, "filter_powerpc": 270, "filter_sparc": 270, "dict_siz": 270, "lc": 270, "mode_fast": 270, "mode_norm": 270, "nice_len": 270, "mf": 270, "mf_hc3": 270, "mf_hc4": 270, "mf_bt2": 270, "mf_bt3": 270, "mf_bt4": 270, "start_offset": 270, "data_in": 270, "data_out": 270, "lzc": 270, "out1": 270, "out2": 270, "out3": 270, "out4": 270, "lzf": 270, "my_filt": 270, "noteworthi": [271, 461, 462], "qmail": 271, "courier": [271, 368, 371, 482], "exclam": [271, 297, 345, 375, 405, 434], "deserv": [271, 461], "remark": [271, 383, 389, 461, 465, 482], "inventor": 271, "perceiv": 271, "shortcom": [271, 464], "mboxo": 271, "mh_sequenc": 271, "mh_profil": 271, "nmh": 271, "gpl": [271, 425, 463], "rmail": 271, "037": 271, "014": 271, "abridg": 271, "attract": [271, 467, 469], "multichannel": 271, "memorandum": 271, "newsread": 271, "composit": [271, 352, 375, 386, 431, 472, 482], "bounc": [271, 461], "unseen": 271, "mua": [271, 341, 479], "time_": 271, "list_nam": 271, "list_id": 271, "mpeg": 272, "xmpeg": 272, "1524": 272, "cap": [272, 482], "showparti": 272, "tmp1223": 272, "unmarsh": [274, 472], "binomi": [275, 318, 343, 482], "mantissa": [275, 318, 465, 467], "9999999999999999": 275, "summat": 275, "halfway": [275, 469], "denorm": [275, 352, 482], "epsilon": [275, 352, 467], "cube": [275, 343, 448, 472, 482], "718281": 275, "0000050000069649e": 275, "0000050000166668e": 275, "quadrant": 275, "euclidean": [275, 480, 482], "qx": 275, "norm": [275, 482], "hypotenus": 275, "triangl": [275, 383], "pythagorean": 275, "theorem": [275, 343, 344], "hyperbola": 275, "complementari": [275, 318, 407, 468, 474], "141592": 275, "283185": 275, "circumfer": 275, "vi": [275, 320], "hart": 275, "celebr": 275, "pie": [275, 340], "annex": [275, 386, 434, 467], "rebuilt": [276, 475, 477, 482], "recognit": 276, "tgz": [276, 459], "access_read": 278, "access_writ": 278, "access_copi": 278, "access_default": [278, 482], "prot": 278, "allocationgranular": 278, "prot_writ": 278, "prot_read": 278, "lieu": [278, 425], "pages": 278, "advic": [278, 293, 460, 482], "pagefil": 278, "pkg_name": [279, 361, 381], "oldnam": 279, "newnam": [279, 451], "replace_path": 279, "oldpath": 279, "newpath": 279, "baconhamegg": 279, "globalnam": 279, "badmodul": 279, "_type": 279, "_inverted_registri": 279, "_slotnam": [279, 482], "_compil": [279, 308], "isstr": 279, "_sre": [279, 477, 482], "_optimize_unicod": 279, "_constant": [279, 482], "repeat_on": 279, "makedict": 279, "at_end_lin": 279, "_expand": 279, "_parser": [279, 308], "_patternend": 279, "sre_flag_unicod": 279, "inttyp": [279, 482], "typetyp": 279, "msi": [281, 460, 466, 477, 479, 482], "cabinet": [281, 482], "cabnam": 281, "mszip": 281, "uuidtostr": 281, "msiopendatabas": 281, "msidbopen_createdirect": 281, "msidbopen_cr": 281, "msidbopen_direct": 281, "msidbopen_readon": 281, "msidbopen_transact": 281, "msidbopen_patchfil": 281, "msicreaterecord": 281, "productnam": 281, "productcod": 281, "productvers": 281, "manufactur": 281, "_validation_record": 281, "_stream": 281, "msidatabaseopenview": 281, "msidatabasecommit": 281, "msigetsummaryinform": 281, "msiclosehandl": 281, "msiviewexecut": 281, "msiviewgetcolumninfo": 281, "msicolinfo_nam": 281, "msicolinfo_typ": 281, "msiviewfetch": 281, "msiviewmodifi": 281, "msimodify_seek": 281, "msimodify_refresh": 281, "msimodify_insert": 281, "msimodify_upd": 281, "msimodify_assign": 281, "msimodify_replac": 281, "msimodify_merg": 281, "msimodify_delet": 281, "msimodify_insert_temporari": 281, "msimodify_valid": 281, "msimodify_validate_new": 281, "msimodify_validate_field": 281, "msimodify_validate_delet": 281, "msiviewclos": 281, "msisummaryinfogetproperti": 281, "pid_codepag": 281, "pid_titl": 281, "pid_subject": 281, "pid_author": 281, "pid_keyword": 281, "pid_com": 281, "pid_templ": 281, "pid_lastauthor": 281, "pid_revnumb": 281, "pid_lastprint": 281, "pid_create_dtm": 281, "pid_lastsave_dtm": 281, "pid_pagecount": 281, "pid_wordcount": 281, "pid_charcount": 281, "pid_appnam": 281, "pid_secur": 281, "msisummaryinfogetpropertycount": 281, "msisummaryinfosetproperti": 281, "msisummaryinfopersist": 281, "msirecordgetfieldcount": 281, "msirecordsetstr": 281, "msirecordsetstream": 281, "msirecordsetinteg": 281, "msirecordcleardata": 281, "msierror": [281, 482], "basedir": 281, "componentflag": 281, "defaultdir": 281, "keypath": 281, "featurecompon": 281, "dlg": 281, "controlev": 281, "eventmap": 281, "controlcondit": 281, "radio": [281, 374, 482], "control_next": 281, "next_control": 281, "radiobutton": [281, 374, 375, 482], "adminexecutesequ": 281, "adminuisequ": 281, "advtexecutesequ": 281, "installexecutesequ": 281, "installuisequ": 281, "uitext": 281, "actiontext": 281, "lk_": 282, "xe0": 282, "keycod": [282, 368], "unicode_char": 282, "33725": [283, 480, 482], "reboot": [283, 296, 476], "mp": [283, 464], "duplex": [283, 295], "parent_conn": 283, "child_conn": 283, "liabl": [283, 401, 425], "1415927": 283, "offload": 283, "multiple_result": 283, "patienc": 283, "poolwork": 283, "orphan": [283, 482], "waitforsingleobject": 283, "waitformultipleobject": [283, 482], "infinitesim": 283, "conn1": 283, "conn2": 283, "feeder": [283, 385, 482], "sem_getvalu": [283, 482], "allow_exit_without_flush": 283, "3770": 283, "cpus": [283, 293, 476, 477, 482], "allow_non": [283, 418, 419, 464], "arr1": 283, "arr2": 283, "solitari": 283, "unown": [283, 482], "sem_timedwait": [283, 482], "typecode_or_typ": 283, "get_lock": 283, "size_or_initi": 283, "get_obj": 283, "875": 283, "375": [283, 343], "1111111111111111": 283, "515625": 283, "0625": [283, 448], "640625": 283, "shutdown_timeout": [283, 482], "xmlrpclib": [283, 408, 463, 464, 465, 466, 467, 468, 469, 482], "50000": [283, 366], "typeid": [283, 480], "method_to_typeid": 283, "create_method": 283, "_exposed_": 283, "_method_to_typeid_": 283, "_z": 283, "mathsclass": 283, "mymanag": 283, "queuemanag": 283, "get_queu": 283, "listproxi": [283, 482], "l_outer": 283, "d_first_inn": 283, "lproxi": 283, "remoteerror": 283, "deregist": 283, "maxtasksperchild": [283, 468, 482], "apach": [283, 341, 418, 452, 461, 478, 482], "mod_wsgi": [283, 348], "error_callback": 283, "lazier": 283, "outstand": 283, "af_pip": 283, "object_list": 283, "waitabl": [283, 293, 328, 365, 472, 482], "1729": 283, "pipenam": 283, "servernam": 283, "doom": [283, 466], "mainprocess": 283, "pymp": 283, "_bootstrap": [283, 381, 482], "_pid": 283, "5155": 283, "5313": 283, "5331": 283, "_h": 283, "generatorproxi": 283, "get_operator_modul": 283, "foo1": [283, 319], "foo2": [283, 319], "94": [283, 318, 468], "calculatestar": 283, "pow3": 283, "imap_it": 283, "imap_unordered_it": 283, "tgot": 283, "imapiter": 283, "applyresult": 283, "number_of_process": 283, "tasks1": 283, "tasks2": 283, "done_queu": 283, "multicor": 284, "smp": 284, "novel": [284, 463, 464, 466], "shm_a": 284, "shm_b": 284, "howdi": 284, "ndarray": 284, "np": [284, 475], "dtype": [284, 385], "psm_21467_46075": 284, "existing_shm": 284, "int64": 284, "888": 284, "smm": 284, "psm_6572_7512": 284, "raw_shm": 284, "another_sl": 284, "psm_6572_12221": 284, "depict": 284, "do_work": [284, 293], "total_result": 284, "storabl": 284, "10m": 284, "deserialized_sl": 284, "mapnam": 287, "default_domain": 287, "joy": 287, "nntlib": 288, "poster": 288, "3977": 288, "2980": 288, "gmane": [288, 475, 482], "committ": [288, 475], "1096": 288, "1087": 288, "1088": 288, "1089": 288, "1090": 288, "1091": 288, "1092": 288, "ssh": [288, 331, 332, 393, 482], "1093": 288, "1094": 288, "fellow": 288, "240": [288, 383], "119": [288, 343, 381, 480], "readermod": 288, "usenetrc": 288, "authinfo": 288, "1755": [288, 475], "nntps": 288, "4642": 288, "groupinfo": 288, "tor": 288, "group_pattern": [288, 426, 430], "offlin": [288, 381, 460], "grouppattern": 288, "wildmat": 288, "295": [288, 473, 482], "biopython": 288, "elid": 288, "message_spec": 288, "article_numb": 288, "art_num": 288, "117216": 288, "xref": 288, "ik1hcnrpbib2libmw7z3axmi": 288, "loewi": 288, "message_id": 288, "9099": 288, "20030112190404": 288, "ge29873": 288, "metaslash": 288, "neal": [288, 464, 466, 467], "norwitz": [288, 464, 466, 467], "hdr": 288, "header_str": 288, "e9buter_en_python": 288, "buter": 288, "chjvymzdqg1ligrlig1hdhjpy2u": 288, "probl": 288, "matric": [288, 462], "myfoo": 289, "myintegr": 289, "do_my_adding_stuff": 289, "othertypeiknowabout": 289, "do_my_other_adding_stuff": 289, "intellig": [289, 292, 294, 295, 297], "_operator_fallback": 289, "monomorphic_oper": 289, "fallback_oper": 289, "__r": 289, "_add": 289, "66": [291, 388, 441, 462, 467], "tuppl": 291, "resolve_attr": 291, "cdefg": 291, "soldier": 291, "rank": [291, 343, 412], "captain": [291, 478], "dotterbart": 291, "banana": [291, 344, 441, 450], "pear": [291, 441, 450], "yourscript": 292, "foutfil": 292, "qfoutfil": 292, "acquaint": 292, "pf": [292, 375], "ffoo": 292, "controversi": [292, 463], "contradictori": 292, "whatsoev": [292, 325, 425], "mutant": 292, "oddbal": 292, "humbl": 292, "tweak": [292, 389, 462, 465, 478, 482], "mission": 292, "overwhelm": 292, "opt_str": 292, "jam": 292, "n42": 292, "vewwi": 292, "wabbit": 292, "novic": 292, "bland": [292, 466, 467], "clue": 292, "optioncontain": 292, "add_option_group": 292, "suppress_usag": 292, "option_list": 292, "standard_option_list": 292, "option_class": 292, "indentedhelpformatt": 292, "titledhelpformatt": 292, "add_help_opt": 292, "make_opt": 292, "irrelev": [292, 468, 482], "suppress_help": 292, "fbar": 292, "mypkg": [292, 387], "check_choic": 292, "poke": 292, "set_conflict_handl": 292, "optionconflicterror": 292, "whittl": 292, "overkil": 292, "rarg": 292, "optionvalu": 292, "record_foo_seen": 292, "saw_foo": 292, "check_ord": 292, "moon": 292, "check_moon": 292, "is_moon_ful": 292, "store_valu": 292, "hairi": 292, "intricaci": 292, "stab": 292, "vararg_callback": 292, "floatabl": 292, "vararg_attr": 292, "check_mytyp": 292, "sillier": 292, "check_complex": 292, "myoption": 292, "take_act": 292, "ding": [292, 481, 482], "dong": [292, 471, 472, 473, 480, 481, 482], "ensure_valu": 292, "optparse_pars": 292, "valv": 292, "threat": 293, "inaccess": [293, 294, 394, 427, 461, 464, 476, 482], "dcxx": 293, "nonsens": [293, 476], "macosx_deployment_target": [293, 482], "ruid": 293, "euid": 293, "suid": 293, "rgid": 293, "egid": 293, "sgid": 293, "superus": 293, "nstype": 293, "reassoci": 293, "clone_new": 293, "pgrp": 293, "sysnam": [293, 303], "disassoci": 293, "clone_": 293, "decept": [293, 464], "fd_low": [293, 482], "fd_high": [293, 482], "offset_src": 293, "offset_dst": 293, "procf": [293, 482], "sysf": 293, "fd2": 293, "filedescriptor": 293, "95": [293, 314, 318, 343, 381, 464, 467], "98": [293, 337, 344, 404, 467, 468, 474], "_commit": 293, "leader": [293, 331, 482], "0o777": [293, 296], "sc_iov_max": [293, 337], "out_fd": [293, 482], "in_fd": [293, 482], "pg": 293, "stdout_fileno": 293, "close_fd": [293, 348, 465, 474, 479, 480, 482], "faccessat": 293, "effective_id": [293, 475], "vista": [293, 375, 482], "repars": [293, 480, 482], "junction": [293, 294, 332, 480, 482], "exist_ok": [293, 296, 477, 482], "21082": [293, 482], "rendezv": [293, 474], "0o600": 293, "prune": [293, 296, 482], "opendir": [293, 482], "readdir": [293, 477], "findfirstfilew": [293, 482], "findnextfilew": 293, "scandir_path": 293, "dirent": 293, "d_type": 293, "dt_unknown": 293, "statinfo": 293, "33188": 293, "7876932": 293, "234881026": 293, "264": [293, 347, 463], "1297230295": 293, "1297230027": 293, "fat": [293, 354, 404], "fat32": 293, "dwfileattribut": [293, 477], "by_handle_file_inform": [293, 477], "getfileinformationbyhandl": [293, 477], "file_attribute_": 293, "io_reparse_tag_": 293, "f_bsize": 293, "f_frsize": 293, "f_block": 293, "f_bfree": 293, "f_bavail": 293, "f_file": 293, "f_ffree": 293, "f_favail": 293, "f_flag": 293, "f_namemax": 293, "f_fsid": [293, 482], "st_rdon": 293, "st_nosuid": 293, "st_nodev": 293, "st_noexec": 293, "st_synchron": 293, "st_mandlock": 293, "st_write": 293, "st_append": 293, "st_immut": 293, "st_noatim": 293, "st_nodiratim": 293, "st_relatim": 293, "atim": 293, "target_is_directori": [293, 296, 475], "morph": 293, "unprivileg": 293, "secreatesymboliclinkprivileg": 293, "unelev": 293, "atime_n": 293, "mtime_n": 293, "dirpath": [293, 296], "resumpt": [293, 478, 482], "cvs": [293, 461, 462, 463, 464, 465, 466, 482], "dirfd": 293, "rootfd": 293, "mfd_": 293, "memfd": [293, 482], "mfd_huge": 293, "initv": 293, "efc_cloexec": 293, "adddlldirectori": 293, "exit_success": 293, "retryabl": 293, "cygwin": [293, 352, 359, 460, 462, 464, 480, 482], "file_act": [293, 482], "setpgroup": [293, 482], "resetid": [293, 482], "setsigmask": [293, 482], "setsigdef": [293, 482], "new_fd": 293, "posix_spawn_file_actions_addopen": 293, "posix_spawn_file_actions_addclos": 293, "posix_spawn_file_actions_adddup2": 293, "posix_spawn_setpgroup": 293, "posix_spawn_resetid": 293, "posix_spawn_setsid": 293, "posix_spawn_setsid_np": 293, "posix_spawn_setsigmask": 293, "sigdef": 293, "posix_spawn_setsigdef": 293, "posix_spawn_setschedparam": 293, "posix_spawn_setschedul": 293, "after_in_par": 293, "after_in_child": 293, "shellexecut": [293, 482], "comspec": [293, 348, 475, 476], "children_us": 293, "children_system": 293, "getprocesstim": 293, "idtyp": 293, "siginfo_t": [293, 333, 482], "si_pid": [293, 333], "si_uid": [293, 333], "si_signo": [293, 333], "si_status": [293, 333], "si_cod": [293, 333, 481, 482], "ptrace": [293, 482], "sporad": 293, "robin": [293, 412, 441, 480, 482], "quantum": 293, "undetermin": 293, "unobtain": 293, "sc_minsigstksz": [293, 482], "entropi": [293, 341, 478, 482], "environment": [293, 394, 454, 482], "unnecessarili": [293, 482], "524": [293, 478, 482], "bcryptgenrandom": [293, 472, 482], "getentropi": [293, 477, 482], "cryptgenrandom": [293, 472, 482], "ntpath": [294, 479, 482], "unrepresent": [294, 296, 480, 482], "getvolumepathnam": 294, "std": [294, 352, 365, 466, 482], "1003": 294, "filepath": 294, "path1": 294, "path2": 294, "fp1": 294, "fp2": 294, "stat1": 294, "stat2": 294, "cshrc": [294, 458], "soundcard": 295, "audiodev": [295, 467], "dsp": 295, "player": [295, 319, 345, 383], "linuxaudiodev": [295, 461, 464, 467], "mixerdev": 295, "sndctl_dsp_setfmt": 295, "sndctl_dsp_sync": 295, "afmt_mu_law": 295, "afmt_a_law": 295, "afmt_ima_adpcm": 295, "afmt_u8": 295, "afmt_s16_l": 295, "afmt_s16_b": 295, "68k": 295, "powerpc": [295, 465, 466, 467, 482], "afmt_s8": 295, "afmt_u16_l": 295, "afmt_u16_b": 295, "afmt_queri": 295, "monophon": 295, "stereophon": 295, "sampler": 295, "11025": 295, "22050": 295, "96000": 295, "dvd": 295, "mixabl": 295, "sound_mixer_pcm": 295, "sound_mixer_synth": 295, "sound_mixer_": 295, "pcm": [295, 400], "sound_mixer_volum": 295, "gravi": 295, "ultrasound": 295, "left_volum": 295, "right_volum": 295, "microphon": 295, "setrecsrc": 295, "sound_mixer_m": 295, "test_pathlib": [296, 482], "pathseg": 296, "mimick": 296, "lib64": [296, 352, 353, 455, 481, 482], "apache2": 296, "regroup": 296, "694": [296, 474], "subpath": [296, 422], "antoin": [296, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "751": 296, "851": 296, "798": 296, "956": 296, "1327883547": 296, "852554": 296, "33277": 296, "0o444": 296, "33060": 296, "nonexistentfil": 296, "film": [296, 343, 385], "_templat": 296, "_build": 296, "_static": [296, 482], "top_down": 296, "on_error": [296, 385], "my_binary_fil": 296, "my_text_fil": 296, "mylink": 296, "other_path": 296, "missing_ok": [296, 482], "abnorm": [297, 352, 393, 474], "pdbrc": [297, 472, 474, 478, 481, 482], "test2": [297, 345, 426], "nosigint": [297, 474], "readrc": [297, 478, 482], "elp": 297, "hel": 297, "reak": 297, "tbreak": 297, "ear": 297, "bpnumber": 297, "some_vari": 297, "tep": 297, "unt": 297, "il": [297, 341, 433], "eturn": 297, "ont": 297, "inu": 297, "ump": 297, "ist": 297, "longlist": 297, "rgs": 297, "whati": [297, 482], "undisplay": [297, 474], "classinst": 297, "ps": [297, 308, 348, 398], "unalia": 297, "list_opt": 297, "uit": 297, "retval": [297, 462], "tackl": [299, 461], "3154": [299, 476, 482], "574": [299, 381, 480, 482], "buffer_callback": 299, "therein": 299, "superflu": [299, 337, 340, 482], "referenti": 299, "elig": [299, 429, 474], "picklestr": [299, 300], "worthwhil": [299, 466, 475], "list_of_item": 299, "sixth": [299, 463, 480], "memorecord": 299, "dbpickler": 299, "dbunpickl": 299, "type_tag": 299, "key_id": 299, "fight": [299, 474], "italian": [299, 383], "disturb": [299, 482], "reduce_someclass": 299, "mypickl": 299, "textread": 299, "new_read": 299, "myclass": [299, 427, 439], "my_attribut": 299, "unpickled_class": 299, "massiv": [299, 465, 466, 477, 482], "eschew": 299, "reconstructor": 299, "zerocopybytearray": 299, "_reconstruct": 299, "unseri": [299, 474], "new_b": 299, "unaccept": [299, 337, 412, 435], "nsystem": 299, "ntr": 299, "inoffens": 299, "safe_builtin": 299, "restrictedunpickl": 299, "restricted_load": 299, "cbuiltin": [299, 470], "neval": 299, "4j": [299, 426, 434, 441, 467], "intim": 300, "binint1": 300, "tuple2": 300, "binput": [300, 482], "indentlevel": 300, "opcodeinfo": 300, "pipefil": 301, "module_find": 302, "ispkg": 302, "path_item": 302, "module_or_nam": 302, "12915": [302, 482], "pyramid": 302, "is_64bit": 303, "amdk6": 303, "buildno": 303, "builddat": [303, 482], "scm": 303, "dega": 303, "vminfo": 303, "osinfo": 303, "vm_name": 303, "vm_releas": 303, "vm_vendor": 303, "os_nam": 303, "os_vers": 303, "os_arch": 303, "csd": 303, "uniprocessor": 303, "enterpris": [303, 482], "iotuap": 303, "serverstandard": 303, "nanoserv": 303, "iot": [303, 482], "versioninfo": 303, "dev_stag": 303, "non_release_vers": 303, "16384": 303, "freedesktop": [303, 471, 475, 482], "pretty_nam": 303, "id_lik": 303, "version_id": 303, "variant_id": 303, "get_like_distro": 303, "ios": 304, "nskeyedarchiv": [304, 480], "nskeyedunarchiv": 304, "invalidfileexcept": [304, 482], "pl": 304, "astr": 304, "doodah": 304, "afloat": 304, "anint": 304, "728": 304, "adict": 304, "anotherstr": 304, "athirdstr": 304, "xe4ssig": 304, "ma": [304, 471, 472, 482], "atruevalu": 304, "afalsevalu": 304, "gunk": 304, "somemoredata": 304, "adat": 304, "akey": 304, "1939": 305, "2595": 305, "obsolesc": 305, "mailserv": 305, "pop3_port": 305, "pop3_ssl_port": 305, "995": [305, 478], "fetchmail": 305, "noncompli": 305, "2449": 305, "mesg_num": 305, "eudora": 305, "qpop": 305, "signoff": 305, "howmuch": 305, "mesgnum": 305, "6856": [305, 468, 474, 477, 482], "nummessag": 305, "disguis": [306, 319, 427], "off_t": 306, "getconf": 306, "lfs_cflag": 306, "d_largefile64_sourc": 306, "d_file_offset_bit": 306, "sort_dict": [307, 480, 482], "underscore_numb": [307, 471, 482], "tup": [307, 383, 385], "sampleproject": 307, "project_info": 307, "author_email": [307, 482], "pypa": [307, 398, 458], "googlegroup": 307, "bugtrack_url": 307, "osi": 307, "webpag": 307, "description_content_typ": 307, "docs_url": 307, "download_url": [307, 466], "last_day": 307, "last_month": 307, "last_week": 307, "home_pag": 307, "maintainer_email": [307, 482], "package_url": 307, "project_url": 307, "homepag": 307, "release_url": 307, "requires_dist": 307, "pstat": [308, 450, 462, 466, 482], "lsprof": 308, "rosen": 308, "ted": 308, "czotter": 308, "imit": [308, 467], "ncall": [308, 482], "tottim": 308, "percal": 308, "cumtim": [308, 482], "759": 308, "937": 308, "598": 308, "_code": 308, "435": [308, 476], "_parse_sub": 308, "induc": [308, 424], "subfunct": [308, 475], "restat": 308, "output_fil": 308, "sort_ord": 308, "sortkey": 308, "cull": 308, "timeunit": 308, "subcal": 308, "pr": [308, 461, 482], "sortbi": 308, "coalesc": 308, "printout": [308, 482], "pcall": 308, "nfl": 308, "percentag": [308, 343, 345, 445, 467, 482], "statsprofil": [308, 482], "functionprofil": [308, 482], "tick": [308, 322, 365], "lag": 308, "calibr": 308, "probabilist": 308, "god": 308, "8ghz": 308, "i5": 308, "04e": 308, "your_computed_bia": 308, "your_time_func": 308, "lone": [308, 335, 429, 482], "cleanest": 308, "your_integer_time_func": 308, "_lsprof": [308, 482], "thorough": [309, 319, 337, 344, 474, 482], "master_read": 309, "stdin_read": 309, "baffl": 309, "pseudotermin": 309, "typescript": 309, "use_python": 309, "pw_name": 310, "pw_passwd": 310, "pw_uid": [310, 348], "pw_gid": 310, "pw_geco": 310, "pw_dir": 310, "pw_shell": 310, "dfile": 311, "dorais": 311, "filen": 311, "pagin": 313, "pager": [313, 482], "pythondoc": [313, 482], "pyexpat": [314, 408, 425, 455, 461, 464, 466, 467, 468, 482], "unauthent": [314, 341, 408, 410, 411, 412, 413, 418, 419], "namespace_separ": 314, "repertoir": [314, 335, 374, 467], "xmlns": [314, 394, 412, 468, 482], "elem1": [314, 466], "elem2": [314, 466], "isfin": 314, "xml_param_entity_parsing_nev": 314, "xml_param_entity_parsing_unless_standalon": 314, "xml_param_entity_parsing_alway": 314, "handlernam": 314, "doctypenam": 314, "has_internal_subset": 314, "elnam": 314, "attnam": 314, "idref": 314, "entitynam": 314, "notationnam": 314, "ndata": [314, 414], "is_parameter_ent": 314, "some_xml_docu": 314, "start_el": [314, 411], "end_el": [314, 411], "char_data": 314, "child1": [314, 388], "child2": [314, 388], "xml_ctype_ani": 314, "xml_ctype_choic": 314, "xml_ctype_empti": 314, "xml_ctype_mix": 314, "xml_ctype_nam": 314, "xml_ctype_seq": 314, "xml_cquant_non": 314, "xml_cquant_opt": 314, "xml_cquant_plus": 314, "xml_cquant_rep": 314, "xml_error_": 314, "constant_nam": 314, "undeclar": 314, "amplif": 314, "breach": [314, 425], "rec": [314, 410, 412], "xml11": [314, 410, 412], "20060816": [314, 410, 412], "encodingdecl": [314, 410, 412], "mise": 318, "19937": 318, "matsumoto": [318, 425], "nishimura": [318, 425], "equidistribut": 318, "vol": 318, "cum_weight": 318, "2080": 318, "10000000": 318, "lambd": 318, "mu": [318, 343, 480, 482], "sigma": [318, 343, 480], "kappa": 318, "pareto": 318, "weibul": 318, "seeder": 318, "37444887175646646": 318, "1800146073117523": 318, "148957571865031": 318, "roulett": 318, "spin": [318, 482], "jack": [318, 319, 344, 396, 425, 441, 445, 463, 464, 466, 470, 482], "king": [318, 319, 461, 480, 482], "coin": 318, "settl": [318, 467], "10_000": [318, 343], "4169": 318, "quartil": [318, 343, 480], "2_500": 318, "7_500": 318, "7958": 318, "thoughtco": 318, "3126155": 318, "73": [318, 381, 451, 465, 480, 481], "denni": [318, 471, 472, 481, 482], "shasha": 318, "manda": 318, "wilson": [318, 464, 465, 477, 481, 482], "drug": 318, "placebo": 318, "observed_diff": 318, "new_diff": 318, "reshuffl": 318, "4f": 318, "hypothesi": 318, "average_arrival_interv": 318, "average_service_tim": 318, "stdev_service_tim": 318, "num_serv": 318, "arrival_tim": 318, "1_000_000": [318, 478, 482], "next_server_avail": 318, "service_dur": 318, "service_complet": 318, "jake": [318, 468, 470, 480, 482], "vanderpla": 318, "econom": 318, "norvig": 318, "random_product": 318, "random_permut": 318, "random_combin": 318, "random_combination_with_replac": 318, "05954861408025609": 318, "fullrandom": 318, "0x10_0000_0000_0000": 318, "87925541791544": 318, "allen": [318, 341, 474, 482], "downey": 318, "frie09": 319, "gentler": 319, "nfoo2": 319, "possess": [319, 344, 404, 472, 482], "aaaab": 319, "aaab": 319, "aaaaaa": 319, "ailmsux": 319, "imsx": 319, "isaac": 319, "asimov": 319, "lookbehind": [319, 477, 482], "theth": 319, "bfoo": 319, "foo3": 319, "py2": [319, 452, 474, 482], "typographi": 319, "nicer": [319, 389, 471, 482], "0a3b9": 319, "fell": [319, 440, 450, 462, 463, 464], "z_": [319, 434], "z_0": 319, "npy_": 319, "npy_myfunc": 319, "dashrepl": 319, "matchobj": 319, "pro": 319, "gram": [319, 430], "sand": 319, "unmatch": [319, 345, 393, 477, 482], "new_str": 319, "number_of_subs_mad": 319, "legal_char": 319, "abcdefghijklmnopqrstuvwxyz0123456789": 319, "digits_r": 319, "ogr": 319, "doggi": 319, "og": [319, 361, 482], "groupn": 319, "physicist": 319, "reynold": 319, "a1b2c3": 319, "c3": [319, 393, 427, 464, 475], "1632": 319, "cba": 319, "remove_thi": 319, "toni": [319, 467, 482], "tiremove_thisg": 319, "tiger": 319, "displaymatch": 319, "poker": [319, 383], "9tjqk": 319, "akt5q": 319, "akt5": 319, "akt": 319, "727ak": 319, "717ak": 319, "7s": 319, "717": 319, "718ak": 319, "354aa": 319, "5c": 319, "ee": [319, 344, 470], "nb": [319, 469], "nx": 319, "ross": [319, 468, 470, 475, 481, 482], "mcfluff": 319, "834": 319, "345": [319, 465, 470], "155": 319, "elm": 319, "ronald": [319, 466, 467, 468, 474, 476, 481], "heathmor": 319, "892": 319, "3428": 319, "finley": 319, "avenu": [319, 425, 463], "frank": [319, 482], "burger": 319, "925": 319, "541": 319, "7625": 319, "662": 319, "dogwood": 319, "heather": 319, "albrecht": 319, "548": 319, "326": 319, "4584": 319, "919": 319, "park": 319, "telephon": 319, "hous": [319, 478], "inner_word": 319, "professor": [319, 343], "abdolmalek": 319, "poefsrosr": 319, "aealmlobdk": 319, "pslaee": 319, "reorpt": 319, "abnsec": 319, "plmrptoy": 319, "pofsros": 319, "aodlambelk": 319, "plase": 319, "reoprt": 319, "yuor": 319, "asnebc": 319, "potlmrpi": 319, "polic": 319, "ly": 319, "02d": 319, "scanner": [319, 356, 377, 476, 482], "gosub": 319, "token_specif": 319, "tok_regex": 319, "line_start": 319, "inputrc": [320, 482], "libedit": [320, 482], "editlin": [320, 455, 482], "editrc": [320, 482], "rl_complet": 320, "rl_parse_and_bind": 320, "rl_read_init_fil": 320, "rl_line_buff": 320, "rl_insert_text": 320, "rl_redisplay": 320, "read_histori": 320, "write_histori": [320, 482], "nelement": 320, "append_histori": 320, "history_truncate_fil": 320, "history_get": 320, "remove_histori": 320, "replace_history_entri": 320, "rl_startup_hook": 320, "rl_pre_input_hook": 320, "entry_func": 320, "rl_completion_match": 320, "rl_attempted_completion_funct": 320, "rl_completion_typ": 320, "libreadlin": [320, 482], "rl_completer_word_break_charact": 320, "rl_completion_display_matches_hook": 320, "longest_match_length": 320, "python_histori": [320, 334, 446], "histfil": 320, "unruli": 320, "h_len": 320, "prev_h_len": 320, "new_h_len": 320, "historyconsol": 320, "init_histori": 320, "save_histori": 320, "repr_typ": 321, "subobj": 321, "myrepr": 321, "repr_textiowrapp": 321, "cap_sys_resourc": 322, "sigxcpu": 322, "rlim_cur": 322, "spend": [322, 461, 472, 482], "mbuf": 322, "overcommit": 322, "sysctl": 322, "rusage_": 322, "ru_utim": 322, "ru_stim": 322, "ru_maxrss": 322, "ru_ixrss": 322, "ru_idrss": 322, "ru_isrss": 322, "ru_minflt": 322, "ru_majflt": 322, "ru_nswap": 322, "ru_inblock": 322, "ru_oublock": 322, "ru_msgsnd": 322, "ru_msgrcv": 322, "ru_nsign": 322, "ru_nvcsw": 322, "voluntari": 322, "ru_nivcsw": 322, "involuntari": 322, "mod_nam": 324, "init_glob": 324, "run_nam": 324, "alter_si": 324, "path_nam": 324, "snow": [324, 472, 475, 476, 477, 478, 479, 480], "timefunc": [325, 475], "delayfunc": 325, "print_tim": 325, "print_some_tim": 325, "930343690": 325, "257": [325, 482], "930343695": 325, "274": [325, 469], "275": 325, "930343700": 325, "276": 325, "soonest": [325, 475], "xebr": 326, "x17d": 326, "xae": 326, "xd4": 326, "xe3": [326, 467], "xb6": 326, "xe2": [326, 467], "xebp1": 326, "x8b": 326, "f9bf78b9a18ce6d46a0cd2b0b86df9da": 326, "drmhze6epcv0fn_81bj": 326, "token_": 326, "xkcd": [326, 340], "passphras": 326, "epoll_create1": 328, "epoll_cloexec": 328, "kq_filter_read": 328, "kq_ev_add": 328, "rlist": 328, "wlist": 328, "xlist": 328, "parameterless": 328, "winsock": [328, 337, 482], "eventmask": [328, 467], "pollin": 328, "pollpri": 328, "pollout": 328, "epollin": 328, "epollout": 328, "epollpri": 328, "urgent": 328, "epollerr": 328, "assoc": 328, "epollhup": 328, "epollet": 328, "epolloneshot": 328, "epollexclus": [328, 482], "epollrdhup": [328, 482], "epollrdnorm": 328, "epollrdband": 328, "epollwrnorm": 328, "epollwrband": 328, "epollmsg": 328, "maxev": 328, "scalabl": [328, 461], "fds": [328, 337, 482], "pollerr": 328, "pollhup": 328, "hung": 328, "pollrdhup": [328, 482], "pollnval": 328, "changelist": 328, "max_ev": 328, "eventlist": 328, "sektion": 328, "kq_filter_writ": 328, "kq_filter_aio": 328, "aio": 328, "kq_filter_vnod": 328, "kq_filter_proc": 328, "kq_filter_netdev": 328, "kq_filter_sign": 328, "kq_filter_tim": 328, "kq_ev_delet": 328, "kq_ev_en": 328, "permitscontrol": 328, "kq_ev_dis": 328, "disablesev": 328, "kq_ev_oneshot": 328, "kq_ev_clear": 328, "kq_ev_sysflag": 328, "kq_ev_flag1": 328, "kq_ev_eof": 328, "kq_ev_error": 328, "kq_note_lowat": 328, "kq_note_delet": 328, "kq_note_writ": 328, "kq_note_extend": 328, "kq_note_attrib": 328, "kq_note_link": 328, "kq_note_renam": 328, "kq_note_revok": 328, "revok": 328, "kq_note_exit": 328, "kq_note_fork": 328, "kq_note_exec": 328, "kq_note_pctrlmask": 328, "kq_note_pdatamask": 328, "kq_note_track": 328, "kq_note_child": 328, "note_track": 328, "kq_note_trackerr": 328, "kq_note_linkup": 328, "kq_note_linkdown": 328, "kq_note_linkinv": 328, "event_read": [329, 333], "event_writ": 329, "sel": [329, 333], "writeback": 330, "handier": 330, "keyencod": 330, "set_loc": 330, "bsddb": [330, 464, 467, 468], "pybsddb": [330, 464, 467, 468, 469], "hashopen": 330, "btopen": 330, "rnopen": 330, "klist": 330, "minilanguag": 331, "split_command": 331, "boom": [331, 388, 389], "plug": [331, 482], "remote_command": 331, "pushback": 331, "newstream": 331, "newfil": 331, "lexer": 331, "beginn": 331, "donotsepar": 331, "fsrc": 332, "fdst": 332, "uncontrol": 332, "copy_funct": [332, 474, 477, 482], "ignore_dangling_symlink": [332, 474], "dirs_exist_ok": [332, 480, 482], "suscept": [332, 460, 482], "excinfo": 332, "mv": [332, 475], "python33": 332, "srcname": 332, "33671": [332, 480, 482], "userspac": [332, 475, 480], "outfd": [332, 480], "infd": [332, 480], "fcopyfil": [332, 482], "_logpath": 332, "reattempt": 332, "remove_readon": 332, "xztar": [332, 477, 482], "dry_run": [332, 361], "gztar": [332, 474, 478, 482], "bztar": [332, 474], "pax": [332, 357, 467, 480, 482], "extra_arg": [332, 474], "supports_root_dir": 332, "archive_nam": 332, "myarchiv": [332, 451, 474], "tarek": [332, 354, 467, 468, 474, 477, 482], "tzvf": 332, "drwx": 332, "609": 332, "authorized_key": 332, "id_dsa": 332, "1675": 332, "id_rsa": 332, "37192": 332, "known_host": 332, "please_add": 332, "do_not_add": 332, "my_arch": 332, "uninterrupt": 333, "air": 333, "ctrl_": 333, "sigquit": [333, 348], "bus": [333, 404], "hangup": 333, "death": [333, 475], "coprocessor": 333, "sigvtalrm": 333, "sigprof": 333, "siginfo": 333, "sigstop": 333, "warn_on_full_buff": [333, 479, 482], "wakeup": [333, 475, 479, 482], "sigset": [333, 482], "si_errno": 333, "si_band": [333, 482], "ttys0": 333, "spamcontext": 333, "exc_val": [333, 344], "interrupt_read": 333, "interrupt_writ": 333, "subsubdirectori": 334, "bletch": 334, "usercustom": [334, 353, 437, 476, 482], "appdata": [334, 460, 467], "pythonuserbas": [334, 454, 467], "sitedir": 334, "known_path": 334, "esmtp": 335, "821": 335, "1869": 335, "local_hostnam": 335, "fqdn": 335, "lmtp_port": 335, "smtp_code": 335, "smtp_error": 335, "helo_resp": 335, "ehlo_resp": 335, "does_esmtp": 335, "esmtp_featur": 335, "vrfi": 335, "foil": 335, "spammer": 335, "initial_response_ok": [335, 482], "4954": [335, 482], "auth_cram_md5": 335, "auth_plain": 335, "auth_login": [335, 482], "from_addr": [335, 474], "to_addr": [335, 474], "mail_opt": [335, 477, 482], "rcpt_option": 335, "8bitmim": [335, 477, 482], "dsn": 335, "rcpt": 335, "smtpnotsupport": 335, "hcom": 336, "sndr": 336, "sndt": 336, "voc": 336, "8svx": 336, "sb": [336, 358], "ub": 336, "ul": [336, 410, 463], "sampling_r": 336, "bits_per_sampl": 336, "sndtool": 336, "lab": [336, 425, 439, 461, 463, 464], "waveform": [336, 405], "transliter": 337, "dare": 337, "inaddr_ani": 337, "inaddr_broadcast": 337, "flowinfo": 337, "sin6_flowinfo": 337, "sin6_scope_id": 337, "sockaddr_in6": 337, "af_netlink": [337, 466], "tipc": [337, 467], "af_tipc": 337, "addr_typ": 337, "v2": [337, 347, 466, 467, 482], "tipc_addr_nameseq": 337, "tipc_addr_nam": 337, "tipc_addr_id": 337, "tipc_zone_scop": 337, "tipc_cluster_scop": 337, "tipc_node_scop": 337, "can0": 337, "rx_addr": 337, "tx_addr": 337, "pgn": 337, "ecu": 337, "sysproto_control": 337, "pf_system": [337, 475], "af_bluetooth": [337, 482], "btproto_l2cap": 337, "bdaddr": 337, "psm": 337, "bluetooth": [337, 482], "btproto_rfcomm": 337, "btproto_hci": 337, "device_id": 337, "btproto_sco": 337, "feat": 337, "aead": [337, 341], "skcipher": 337, "rng": 337, "aes": [337, 341, 464], "drbg_nopr_ctr_aes256": 337, "32bit": [337, 463, 482], "vsock": 337, "ifnam": 337, "pkttype": 337, "hatyp": 337, "ethernet": 337, "packet_host": 337, "packet_broadcast": 337, "packet_multicast": 337, "packet_otherhost": 337, "promiscu": 337, "packet_outgo": 337, "arp": [337, 482], "qualcomm": [337, 482], "ipproto_udplit": [337, 482], "udplite_send_cscov": [337, 482], "udplite_recv_cscov": [337, 482], "hyper": [337, 482], "vm_id": 337, "service_id": 337, "vmid": 337, "hv_guid_par": 337, "v6": 337, "nondeterminist": 337, "h_errno": 337, "hstrerror": 337, "gai_strerror": 337, "eai_": 337, "af_": [337, 476], "sock_": [337, 476, 482], "addressfamili": 337, "socketkind": 337, "so_": 337, "msg_": 337, "sol_": 337, "scm_": 337, "ipproto_": 337, "ipport_": 337, "inaddr_": 337, "ip_": [337, 482], "ipv6_": 337, "ai_": 337, "ni_": 337, "tcp_": [337, 482], "so_domain": [337, 478], "so_protocol": [337, 478], "so_peersec": [337, 478], "so_passsec": [337, 478], "tcp_user_timeout": [337, 478, 479, 482], "tcp_congest": [337, 478, 479, 482], "tcp_fastopen": [337, 482], "tcp_keepcnt": [337, 482], "tcp_notsent_lowat": [337, 479, 482], "tcp_keepidl": [337, 482], "tcp_keepintvl": [337, 482], "ip_recvto": [337, 471, 482], "tcp_keepal": [337, 482], "tcp_connection_info": [337, 482], "tcp_info": 337, "so_rtabl": [337, 482], "so_user_cooki": [337, 482], "so_mark": 337, "sol_can_": 337, "can_": 337, "can_bcm_": 337, "bcm": [337, 482], "can_bcm_can_fd_fram": 337, "can_raw": 337, "15765": 337, "sae": 337, "j1939": [337, 482], "packet_": 337, "rds_": 337, "rcvall_": 337, "wsaioctl": [337, 467], "tipc_": 337, "alg_": [337, 478], "vmaddr": 337, "so_vm": 337, "so_passcr": 337, "overrul": 337, "ipproto_mptcp": [337, 471, 482], "global_default": 337, "dualstack_ipv6": 337, "ai_numerichost": 337, "canonnam": 337, "ai_canonnam": 337, "ipproto_tcp": 337, "2606": 337, "2800": 337, "220": [337, 341, 440], "248": 337, "1893": 337, "25c8": 337, "1946": 337, "93": [337, 480, 481], "184": 337, "216": [337, 445, 448], "aliaslist": 337, "ipaddrlist": 337, "icmp": 337, "ip_str": 337, "quad": [337, 463, 482], "in_addr": 337, "packed_ip": 337, "in6_addr": 337, "5aef": 337, "2b": [337, 478], "ancillari": [337, 475, 482], "3542": [337, 482], "fb605b73": 337, "aac2": 337, "49a6": 337, "9a2f": 337, "25416aea0573": 337, "ethernet_32770": 337, "vethernet": 337, "if_nam": 337, "if_index": 337, "scm_right": 337, "maxfd": 337, "optnam": [337, 478], "ancbufs": 337, "ancdata": 337, "msg_flag": 337, "cmsg_level": 337, "cmsg_type": 337, "cmsg_data": 337, "unconnect": [337, 467], "sol_socket": 337, "scatter": [337, 463, 464, 468], "b1": [337, 383], "b2": [337, 383], "0123456789": [337, 344, 345], "b3": 337, "lamb": [337, 440], "iv": 337, "assoclen": 337, "optlen": [337, 478], "optval": 337, "halv": [337, 465, 468], "shut_rd": 337, "shut_wr": 337, "shut_rdwr": [337, 341, 482], "50007": 337, "af": 337, "ipproto_ip": 337, "ip_hdrincl": 337, "rcvall_on": 337, "65565": 337, "rcvall_off": 337, "can_fram": 337, "can_frame_fmt": 337, "ib3x8": 337, "can_frame_s": 337, "build_can_fram": 337, "can_id": 337, "can_dlc": 337, "dissect_can_fram": 337, "vcan0": 337, "3bsd": 337, "stuart": 337, "sechrest": 337, "leffler": 337, "supplementari": 337, "3493": 337, "bind_and_activ": [338, 419, 467], "infrequ": 338, "daemon_thread": 338, "autonom": [338, 425], "block_on_clos": [338, 479, 482], "deaf": [338, 474], "poll_interv": 338, "mytcphandl": 338, "tcpclient": 338, "myudphandl": 338, "threadedtcprequesthandl": 338, "cur_thread": 338, "threadedtcpserv": 338, "server_thread": 338, "sp_namp": 339, "sp_pwdp": 339, "sp_lstchg": 339, "sp_min": 339, "sp_max": 339, "sp_warn": 339, "sp_inact": 339, "sp_expir": 339, "sp_flag": 339, "nonstandard": [340, 455, 466], "postgresql": [340, 466], "gerhard": [340, 463, 466, 467, 468], "ring": [340, 463, 466, 467, 468], "249": [340, 466, 482], "w3school": 340, "sqlite_mast": 340, "hollywood": 340, "bowl": 340, "1982": [340, 343, 365], "1983": [340, 343], "brian": [340, 433, 461, 464, 465, 467, 468, 474, 475, 476, 479, 482], "1979": [340, 343], "new_con": 340, "new_cur": 340, "detect_typ": 340, "check_same_thread": 340, "cached_stat": 340, "evil_trac": 340, "authorizer_callback": 340, "qmark": 340, "sqlite_threadsaf": 340, "pysqlit": [340, 466, 468, 474], "rowid": 340, "zeroblob": 340, "sql_script": 340, "md5sum": [340, 482], "acbd18db4cc2f85cedef654fccc4a4d8": 340, "n_arg": 340, "aggregate_class": 340, "mysum": 340, "num_param": 340, "windowfunct": 340, "udfwinfunc": 340, "windowsumint": 340, "sumint": 340, "sum_i": 340, "collate_revers": 340, "4th": 340, "5th": 340, "progress_handl": 340, "trace_callback": 340, "fulltext": [340, 474], "fts3": 340, "ingredi": 340, "broccoli": 340, "stew": 340, "pepper": 340, "chees": [340, 440, 453], "pumpkin": 340, "onion": 340, "garlic": 340, "celeri": 340, "flour": 340, "butter": 340, "1000000000": 340, "sqlite_limit_sql_length": [340, 482], "sqlite_limit_attach": 340, "autocommit": 340, "uncommit": [340, 474], "col_nam": 340, "db_row": 340, "austria": [340, 412], "sterreich": 340, "barfoo": 340, "row1": 340, "row2": 340, "6378": 340, "blob_col": 340, "246": [340, 467, 482], "webcom": 340, "humor": 340, "rhat": [340, 466], "first_appear": 340, "lang_list": 340, "1957": 340, "__conform__": [340, 482], "adapt_point": 340, "convert_point": 340, "adapt_date_iso": 340, "adapt_datetime_iso": 340, "adapt_datetime_epoch": 340, "convert_d": 340, "convert_datetim": 340, "convert_timestamp": 340, "1984": 340, "varchar": 340, "nosuchdb": 340, "mem1": 340, "con1": 340, "con2": 340, "ddl": [340, 478, 482], "644": [341, 471, 473, 482], "sni": [341, 473, 476, 479, 482], "ssock": 341, "cert": [341, 459, 468, 476, 482], "cabundl": 341, "certchain": 341, "8443": 341, "cafil": [341, 394, 468, 476], "capath": [341, 394, 476], "cadata": [341, 476, 482], "rc4": [341, 425, 482], "sslkeylogfil": [341, 482], "ssl3": 341, "chacha20": [341, 478, 482], "poly1305": [341, 478, 482], "superimpos": 341, "x509": [341, 394], "certificate_verify_fail": 341, "prng": 341, "csprng": [341, 482], "rand_egd": [341, 471, 482], "1750": 341, "cert_tim": 341, "notbefor": 341, "notaft": 341, "2018": [341, 472, 479, 482], "1515144883": 341, "5280": [341, 477, 482], "ca_cert": 341, "der_cert_byt": 341, "der": [341, 397, 467, 476, 482], "pem_cert_str": 341, "defaultverifypath": 341, "openssl_cafile_env": 341, "openssl_cafil": 341, "openssl_capath_env": 341, "openssl_capath": 341, "cert_byt": 341, "encoding_typ": 341, "x509_asn": 341, "509": [341, 467, 476, 482], "asn": 341, "pkcs_7_asn": 341, "oid": [341, 397, 401, 482], "trustworthi": 341, "crls": [341, 476], "cert_req": 341, "do_handshake_on_connect": 341, "suppress_ragged_eof": [341, 482], "cert_": 341, "revoc": [341, 476, 482], "crl": [341, 476, 482], "issuer": 341, "cas": 341, "verify_": 341, "ssl_op_al": 341, "sslv2": [341, 474], "renegoti": [341, 468], "hellorequest": 341, "clienthello": 341, "0h": [341, 482], "dh": [341, 471, 482], "secreci": [341, 471, 482], "ecdh": [341, 482], "op_": 341, "ticket": [341, 482], "7301": [341, 468, 474, 477], "ellipt": [341, 475, 482], "diffi": [341, 475], "hellman": [341, 475], "6066": 341, "2k": [341, 482], "268443839": 341, "0x100020bf": 341, "alert_description_": 341, "5246": 341, "ssl_error_": 341, "atop": [341, 466, 467], "diverg": [341, 463], "ssl_read_ex": [341, 482], "ssl_write_ex": [341, 482], "unencrypt": [341, 482], "match_hostnam": [341, 471, 473, 474, 476, 477, 479, 482], "binary_form": 341, "amongst": 341, "3280": 341, "subjectaltnam": 341, "rdns": 341, "rdn": 341, "countrynam": 341, "organizationnam": 341, "startcom": 341, "organizationalunitnam": 341, "commonnam": 341, "serialnumb": 341, "95f0": 341, "571208": 341, "sle257ohy9fvq07z": 341, "stateorprovincenam": 341, "california": [341, 425], "localitynam": 341, "san": [341, 395], "francisco": [341, 395, 482], "frontier": 341, "eff": 341, "emailaddress": 341, "hostmast": 341, "x509v3": [341, 476], "crldistributionpoint": [341, 476], "caissuer": 341, "ocsp": [341, 476], "cb_type": 341, "5929": 341, "npn": [341, 471, 482], "pha": 341, "certificaterequest": 341, "pythn": [341, 479], "pyth": [341, 479], "protocol_": 341, "sslv23": 341, "ecc": [341, 471, 482], "224": [341, 466], "x509_ca": 341, "aesgcm": 341, "ecdsa": [341, 474, 482], "alg_bit": 341, "aes256": [341, 482], "gcm": 341, "kx": 341, "50380848": 341, "kea": 341, "strength_bit": 341, "aes128": 341, "50380847": 341, "spdi": 341, "agre": [341, 425, 482], "openssl_no_tlsext": 341, "server_name_callback": 341, "dhfile": 341, "curve_nam": 341, "prime256v1": [341, 482], "vincent": [341, 472, 477, 478, 482], "bernat": 341, "ssl_sock": 341, "verisign": 341, "keylog": [341, 482], "nss": 341, "wireshark": 341, "2197947391": 341, "op_no_ssl": [341, 482], "op_no_tl": 341, "1k": [341, 482], "satisfact": 341, "1422": 341, "agenc": [341, 425], "buy": [341, 466], "keyout": 341, "dn": [341, 397, 482], "provinc": 341, "mystat": 341, "compani": [341, 460, 466, 467, 472, 482], "widgit": 341, "myserv": 341, "myorgan": 341, "digicert": 341, "cacert": 341, "digicertsha2extendedvalidationserverca": 341, "crl3": 341, "sha2": [341, 481, 482], "g1": [341, 383], "crl4": 341, "01bb6f00122b177f36cab49cea8b6b26": 341, "businesscategori": 341, "311": 341, "delawar": 341, "3359300": 341, "streetaddress": 341, "postalcod": 341, "03894": 341, "4801": 341, "nh": 341, "wolfeboro": 341, "testpypi": 341, "pythonhost": 341, "linuxfr": 341, "nginx": 341, "sameorigin": 341, "45679": [341, 482], "varnish": 341, "2188": 341, "lcy1134": 341, "lci": 341, "63072000": 341, "includesubdomain": 341, "mycertfil": 341, "mykeyfil": 341, "bindsocket": 341, "myaddr": 341, "10023": 341, "newsocket": 341, "connstream": 341, "deal_with_cli": 341, "client_context": 341, "disjunct": [341, 430], "rekey": 341, "steve": [341, 462, 467, 477, 478, 479, 480, 481, 482], "4086": 341, "schiller": 341, "dierk": 341, "eastlak": 341, "7525": [341, 482], "dtls": 341, "whiteout": 342, "s_is": 342, "walktre": 342, "visitfil": 342, "rwxrwxrwx": [342, 475], "v7": [342, 357], "competitor": 343, "scipi": [343, 443, 450, 453, 460], "profession": [343, 460, 470], "statistician": 343, "minitab": 343, "sas": 343, "matlab": 343, "input_data": 343, "harmon": [343, 482], "pearson": [343, 471, 482], "spearman": [343, 482], "slope": 343, "625": [343, 480], "5625": [343, 448], "outlier": 343, "tendenc": 343, "unbias": 343, "quizz": 343, "homework": 343, "midterm": 343, "92": [343, 480, 481], "83": [343, 381, 450, 476], "geometr": [343, 472], "reciproc": 343, "travel": 343, "hr": 343, "journey": 343, "50th": 343, "percentil": [343, 480], "midpoint": 343, "frederick": 343, "gravett": 343, "wallnau": 343, "8th": 343, "ssmedian": 343, "gnumer": 343, "aabbbbccddddeeffffgg": 343, "986893273527251": 343, "dispers": 343, "815": 343, "freedom": [343, 412, 435], "xbar": [343, 482], "0810874155219827": 343, "3720238095238095": [343, 450], "01875": 343, "108": [343, 381, 460], "bessel": 343, "decil": [343, 480], "0th": 343, "100th": 343, "empir": 343, "129": 343, "109": [343, 381, 460], "121": [343, 468], "107": [343, 460], "joint": [343, 425], "kepler": 343, "planetari": 343, "4331": [343, 476], "10_756": 343, "30_687": 343, "60_190": 343, "dist_from_sun": 343, "150": [343, 383, 387, 464, 468], "228": 343, "778": 343, "1_400": 343, "2_900": 343, "4_500": 343, "imperfect": [343, 363], "9882": 343, "orbit": 343, "period_squar": 343, "dist_cub": 343, "pace": [343, 462, 467], "films_tot": 343, "densiti": 343, "agreement": [343, 425, 461, 480], "temperature_februari": 343, "celsius": 343, "fahrenheit": [343, 480], "birth_weight": 343, "drug_effect": 343, "1060": [343, 480, 482], "195": [343, 478], "1100": [343, 470], "1200": [343, 455], "928": 343, "1192": 343, "810": 343, "958": 343, "1011": [343, 345], "1109": 343, "1162": 343, "1224": 343, "1310": 343, "analyt": 343, "mont": 343, "carlo": 343, "3652260728": 343, "4582495471": 343, "6582483453": 343, "4591308524824727": 343, "8035946855390597": 343, "175091447274739": 343, "confer": [343, 375, 462, 466], "750": 343, "attende": 343, "8402": [343, 476], "8675309": 343, "8398": 343, "bayesian": 343, "gender": 343, "train": 343, "height_mal": 343, "height_femal": 343, "weight_mal": 343, "170": [343, 383], "weight_femal": 343, "foot_size_mal": 343, "foot_size_femal": 343, "male": 343, "posterior": 343, "prior_mal": 343, "prior_femal": 343, "posterior_mal": 343, "posterior_femal": 343, "posteriori": 343, "unadorn": 344, "widen": [344, 482], "ucd": [344, 386, 434, 475, 476, 482], "derivednumerictyp": 344, "0b100101": [344, 468, 470], "100101": 344, "0b10011": 344, "x04": [344, 397, 463], "xff": [344, 475], "xfc": 344, "xe8": 344, "x10": [344, 463], "64512": 344, "16711680": 344, "little_ord": 344, "tohexstr": 344, "0x3": 344, "a7p10": 344, "3740": 344, "d380000000000p": 344, "invmod": 344, "hash_fract": 344, "coprim": 344, "hash_valu": 344, "fermat": 344, "hash_float": 344, "hash_complex": 344, "breadth": [344, 383, 451], "gg": 344, "haunt": 344, "economi": 344, "subrang": 344, "linspac": 344, "zoot": 344, "digraph": 344, "fillchar": 344, "t012": 344, "t0123": 344, "t01234": 344, "0123": 344, "01234": 344, "007f": [344, 434], "0660": [344, 461], "superscript": 344, "kharosthi": 344, "numeric_typ": 344, "2155": 344, "vulgar": 344, "zs": 344, "ws": [344, 393, 418], "uncas": 344, "justifi": [344, 368, 375, 467], "spacious": 344, "cmowz": 344, "testhook": 344, "basetestcas": 344, "misctest": 344, "tmpdirmixin": 344, "ipz": 344, "mississ": 344, "x1c": 344, "x1d": 344, "x85": 344, "u2028": 344, "u2029": 344, "nde": [344, 474], "rkl": 344, "kl": 344, "comment_str": 344, "apostroph": [344, 470], "bill": [344, 445, 461, 467], "00042": 344, "0042": 344, "sprintf": [344, 461, 463], "parenthesis": [344, 482], "somenam": 344, "1e50": 344, "ieee754": 344, "emphasis": 344, "2ef0": 344, "f1f2": 344, "xf0": 344, "xf1": 344, "xf2": 344, "f0f1f2": 344, "f0": 344, "f0_f1f2": 344, "uuddlrlrab": 344, "55554444": 344, "4c524c52": 344, "4142": 344, "aeiou": 344, "ths": 344, "shrt": 344, "fillbyt": 344, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [344, 468], "abcabc1": 344, "abc1": 344, "abcabc": 344, "abcdefghijklmnopqrstuvwxyz": [344, 345, 468], "subview": 344, "abcefg": 344, "0x7f3ddc9f4350": 344, "bce": 344, "22222222": 344, "33333333": 344, "44444444": 344, "zbcefg": 344, "z123fg": 344, "rvalu": 344, "z1spam": 344, "ce": [344, 460, 461, 482], "bepoint": 344, "616263": 344, "byte_length": 344, "new_items": 344, "1d": [344, 482], "zyz": 344, "ayz": 344, "3d": [344, 445], "2d": [344, 445, 482], "32000": 344, "32001": 344, "32002": [344, 482], "sjoerd": [344, 445, 461, 467], "cardin": 344, "disjoint": 344, "cbs": 344, "unwis": [344, 434], "4098": [344, 441, 445], "4127": [344, 441, 445], "salad": 344, "juic": 344, "mappingproxi": 344, "synchronis": [344, 475], "neglig": [344, 425], "send_post_request": 344, "union_object": 344, "whoami": 344, "abitrari": 344, "2020": [344, 424, 425, 468, 472, 481, 482], "10735": [344, 472], "5432": 344, "i_squar": 344, "8599": 344, "7144": 344, "578966293710682886880994035146873798396722250538762761564": 344, "9252925514383915483333812743580549779436104706260696366600": 344, "571186405732": 344, "initil": 344, "upper_bound": [344, 429], "68000": 344, "lower_bound": [344, 429], "4004": 344, "current_limit": 344, "0123456789abcdefabcdef": 345, "01234567": 345, "formfe": [345, 363, 434], "repack": 345, "literal_text": 345, "used_key": 345, "used_arg": 345, "arg_nam": 345, "attribute_nam": 345, "element_index": 345, "index_str": 345, "thou": [345, 474], "shalt": [345, 474], "quest": [345, 441], "ton": 345, "grouping_opt": 345, "000000120": 345, "682": [345, 472], "insignific": [345, 482], "significand": [345, 352], "abra": 345, "cad": 345, "24n": 345, "81w": 345, "coord": 345, "5j": [345, 448], "test1": [345, 426], "2a": [345, 482], "101010": 345, "0o52": [345, 467], "0b101010": 345, "1234567890": [345, 467], "890": 345, "02x": 345, "c0a80001": 345, "dxob": 345, "1010": [345, 480], "flufl": 345, "noun": [345, 482], "ific": 345, "kung": 345, "pao": 345, "idpattern": [345, 482], "_a": 345, "braceidpattern": [345, 482], "unbrac": 345, "3454": [346, 464], "mkstringprep": [346, 464], "tablea": 346, "tableb": 346, "tablec": 346, "switchabl": 347, "bi": 347, "1700": 347, "hhhh": [347, 461], "10c": 347, "0s": 347, "0c": 347, "x32": 347, "x12": [347, 397], "serialnum": 347, "gradelevel": 347, "10shhb": 347, "4658": 347, "ci": [347, 460, 479, 480, 482], "0x12131415": 347, "x13": 347, "x14": 347, "llh0l": 347, "capture_output": [348, 479, 482], "other_popen_kwarg": 348, "crw": [348, 477], "symmetri": [348, 461], "preexec_fn": [348, 465, 480, 482], "restore_sign": 348, "start_new_sess": [348, 480, 482], "pass_fd": [348, 480, 482], "extra_group": [348, 482], "pipes": [348, 482], "process_group": [348, 482], "lpapplicationnam": 348, "lpcommandlin": 348, "vike": 348, "seldom": 348, "handle_list": 348, "sigxfz": 348, "sigxfsz": 348, "systemroot": 348, "ifconfig": [348, 482], "qemu": [348, 480, 482], "ncmdshow": [348, 420], "showwindow": 348, "sw_showdefault": 348, "startupinfoex": 348, "updateprocthreadattribut": 348, "error_invalid_paramet": 348, "conin": 348, "conout": 348, "realtim": 348, "non_existent_fil": 348, "mycmd": 348, "myarg": 348, "dmesg": 348, "hda": 348, "retcod": 348, "child_stdin": 348, "child_stdout": 348, "child_stderr": 348, "child_stdout_and_stderr": 348, "popen4": 348, "somestr": 348, "capturestderr": 348, "_use_vfork": 348, "nnnnnn": 348, "_use_posix_spawn": 348, "knob": 348, "snd": 349, "711": 349, "compile_typ": 351, "some_func": 351, "__cantrace__": 352, "pythonbreakpoint": [352, 454, 479], "emscripten_vers": 352, "js": [352, 455], "v14": 352, "pycach": 352, "underdevelop": 352, "no_user_sit": [352, 474], "ignore_environ": [352, 474, 482], "hash_random": [352, 482], "division_warn": [352, 474, 475], "1999": [352, 365, 394, 425], "iec": 352, "dbl_epsilon": 352, "dig": 352, "dbl_dig": 352, "mant_dig": [352, 467], "dbl_mant_dig": 352, "dbl_max_exp": 352, "max_10_exp": 352, "dbl_max_10_exp": 352, "min_exp": 352, "dbl_min_exp": 352, "min_10_exp": 352, "dbl_min_10_exp": 352, "flt_radix": 352, "flt_round": 352, "14159265358979": 352, "15g": 352, "9876543211234567": 352, "16g": 352, "9876543211234568": 352, "rtld_xxx": 352, "service_pack": [352, 468], "service_pack_minor": [352, 468], "service_pack_major": [352, 468], "suite_mask": [352, 468], "product_typ": [352, 468], "platform_vers": [352, 478, 482], "ver_platform_win32_nt": 352, "ver_nt_workst": 352, "workstat": 352, "ver_nt_domain_control": 352, "ver_nt_serv": 352, "getversionex": [352, 482], "osversioninfoex": 352, "asyncgen_hook": 352, "firstit": 352, "hash_bit": 352, "seed_bit": 352, "0x010502f0": 352, "bits_per_digit": [352, 455, 468, 470], "sizeof_digit": [352, 468, 470], "immort": [352, 464, 480], "engag": 352, "0xffff": [352, 475, 482], "freebsd8": 352, "linux3": [352, 475], "aix5": 352, "aix7": [352, 480, 482], "coarser": 352, "suse": [352, 455, 481, 482], "profilefunc": 352, "timeslic": 352, "tracefunc": 352, "lnotab_not": [352, 478], "resurrect": [352, 361, 364, 427, 474, 481, 482], "releaselevel": [352, 468, 470], "xa": 352, "2a3": 352, "citat": 352, "9899": 352, "jtc1": 352, "sc22": 352, "wg14": 352, "n1256": 352, "nuanc": 353, "landmark": [353, 460, 478, 482], "majorvers": 353, "minorvers": 353, "python311": 353, "alongsid": [353, 374, 420, 434, 460], "py_enable_shar": 354, "libdir": [354, 459], "ar": [354, 455, 482], "posix_prefix": [354, 474, 482], "posix_hom": [354, 474], "posix_us": [354, 474, 482], "posix_venv": [354, 472, 482], "nt_user": [354, 474], "nt_venv": [354, 472, 482], "ether": 354, "osx_framework_us": 354, "platstdlib": [354, 474], "platinclud": [354, 474], "_get_default_schem": 354, "redistributor": [354, 468], "_install_schem": 354, "i586": [354, 474], "sun4u": 354, "64bit": [354, 472, 473, 482], "x86_64": [354, 455, 477, 480, 482], "intel64": [354, 482], "em64t": 354, "macosx": [354, 402, 458, 472, 473, 474, 482], "ppc": [354, 458, 467, 474], "ppc64": [354, 482], "i386": [354, 459, 460, 477], "ac_apple_universal_build": 354, "aix_genuine_cplusplus": 354, "arflag": 354, "log_mask": 355, "pri": 355, "log_upto": 355, "log_pid": 355, "log_con": 355, "log_ndelay": 355, "log_odelay": 355, "log_nowait": 355, "log_perror": 355, "file_or_dir": 356, "ustar": [357, 467, 482], "longlink": 357, "10240": 357, "errorlevel": 357, "ignore_zero": [357, 482], "numeric_own": [357, 477, 482], "set_attr": 357, "arcnam": [357, 421], "regtyp": 357, "aregtyp": 357, "lnktype": 357, "symtyp": 357, "dirtyp": 357, "fifotyp": 357, "conttyp": 357, "chrtype": 357, "blktype": 357, "gnutype_spars": 357, "brian_1979": [357, 421], "source1": [357, 421], "sourcen": [357, 421], "output_dir": [357, 421], "py_fil": 357, "quux": 357, "bsdtar": 357, "libarch": 357, "unmaintain": [357, 374, 474, 476, 478], "ancient": [357, 466, 482], "seventh": 357, "miscalcul": 357, "telopt_": 358, "iac": 358, "dont": 358, "wont": 358, "subnegoti": 358, "dm": 358, "brk": 358, "ao": 358, "ayt": 358, "ec": [358, 482], "ga": 358, "read_": 358, "tn": 358, "eager": [358, 398, 426, 479, 482], "midst": 358, "subopt": 358, "uncompil": 358, "delete_on_clos": [359, 473, 482], "max_siz": [359, 385], "spool": 359, "_file": 359, "ignore_cleanup_error": [359, 482], "tmpdir": [359, 482], "tmpdirnam": [359, 474], "tmptjujjt": 359, "iflag": 360, "oflag": 360, "lflag": 360, "ispe": 360, "ospe": 360, "vmin": 360, "vtime": 360, "tcsanow": 360, "tcsadrain": 360, "tcsaflush": [360, 382], "tciflush": 360, "tcoflush": 360, "tcioflush": 360, "tcooff": 360, "tcoon": 360, "tcioff": 360, "tcion": 360, "ws_row": 360, "ws_col": 360, "tiocgwinsz": 360, "tiocgsiz": 360, "winsiz": [360, 482], "tiocswinsz": 360, "tiocssiz": 360, "regrtest": [361, 381, 464, 468, 482], "test_": [361, 421, 482], "pyunit": [361, 462], "mytestcase1": 361, "test_feature_on": 361, "test_feature_two": 361, "mytestcase2": 361, "whitebox": 361, "blackbox": 361, "improp": [361, 393, 427, 461, 473, 476, 482], "crop": 361, "anomal": 361, "testfuncacceptssequencesmixin": 361, "mysuperwhammyfunct": 361, "test_func": 361, "acceptlist": 361, "acceptstr": 361, "accepttupl": 361, "beck": [361, 387, 462], "test_main": [361, 482], "test_spam": 361, "uall": [361, 464], "largefil": [361, 482], "pcbuild": [361, 460, 467, 482], "buildbot": [361, 387, 455, 482], "with_doc_str": [361, 455], "init_delay": 361, "max_delay": 361, "backoff": [361, 482], "o0": [361, 482], "_testcapi": [361, 455, 482], "accept_pattern": 361, "new_val": 361, "catstr": 361, "min_vers": 361, "memus": 361, "bigmem": 361, "_4g": 361, "errtext": 361, "hog": 361, "refleak": [361, 482], "pkg_dir": 361, "standard_test": [361, 387], "ref_api": 361, "other_api": 361, "test_inst": 361, "object_to_patch": 361, "cmd_name": 361, "test_cas": [361, 387], "name_of_modul": 361, "not_export": [361, 482], "_csv": [361, 482], "misctestcas": 361, "test__all__": 361, "othertestcas": 361, "bar_const": 361, "foo_const": 361, "_bar": 361, "max_digit": 361, "seterrormod": 361, "coredump": 361, "elicit": 361, "ephemer": [361, 401], "s_server": 361, "so_exclusiveaddrus": 361, "resource_nam": 361, "assert_python": 361, "pythonusersit": 361, "env_var": 361, "__isol": 361, "__cleanenv": 361, "__cwd": 361, "script_dir": 361, "script_basenam": 361, "omit_suffix": 361, "zip_dir": 361, "zip_basenam": 361, "script_nam": [361, 406], "name_in_zip": 361, "init_sourc": 361, "_unspecifi": 361, "original_valu": 361, "xattr": 361, "tempcwd": 361, "reinsert": [361, 375, 468, 470], "py_warn": 361, "_warn": [361, 471, 482], "c_warn": 361, "required_on": 361, "oldmodul": 361, "regexp": [361, 474, 482], "warningcategori": 361, "warningrecord": 361, "hey": 361, "thello": 363, "nworld": 363, "frankenstein": 363, "insec": 363, "camelcas": 364, "overcom": [364, 474, 482], "activecount": [364, 467, 471, 482], "_threading_loc": 364, "threadgroup": 364, "tid": [364, 482], "awaken": 364, "cv": [364, 383], "an_item_is_avail": 364, "get_an_available_item": 364, "make_an_item_avail": 364, "notifyal": [364, 471, 482], "dutch": [364, 434], "scientist": 364, "edsger": 364, "dijkstra": 364, "awoken": 364, "maxconnect": 364, "pool_sema": 364, "connectdb": 364, "isset": [364, 471, 482], "accept_connect": 364, "process_server_connect": 364, "make_connect": [364, 418], "process_client_connect": 364, "awri": 364, "some_lock": 364, "1969": 365, "acronym": 365, "compromis": [365, 397, 423], "wisdom": 365, "tm_gmtoff": [365, 478, 482], "tm_zone": [365, 478, 482], "tm": [365, 374], "1993": [365, 482], "clk_id": 365, "ntp": 365, "suspens": [365, 427, 429], "clock_nanosleep": [365, 472, 482], "nanosleep": [365, 472, 482], "tm_year": [365, 463], "tm_mon": 365, "tm_mday": 365, "tm_hour": 365, "tm_min": 365, "tm_sec": 365, "tm_wday": 365, "tm_yday": 365, "335": 365, "meridian": 365, "julian": [365, 476, 477, 482], "05edt": 365, "m4": [365, 482], "m10": 365, "aest": 365, "10aedt": 365, "tzfile": 365, "datafil": [365, 464], "australia": 365, "melbourn": 365, "egypt": 365, "eet": 365, "eest": 365, "discontinu": [365, 482], "settimeofday": 365, "nonadjust": 365, "ptp": 365, "uptim": [365, 479, 482], "asleep": 365, "1123": [365, 470], "usec": [366, 477], "3018611848820001": 366, "2727368790656328": 366, "23702679807320237": 366, "19665591977536678": 366, "time_taken": 366, "wallclock": 366, "nsec": 366, "5000000": 366, "0877": 366, "41440500499993504": 366, "7246671520006203": 366, "3955516149999312": 366, "40183617287970225": 366, "37027556854118704": 366, "38344867356679524": 366, "3712595970846668": 366, "37866875250654886": 366, "9138244460009446": 366, "5829014980008651": 366, "04215312199994514": 366, "08588060699912603": 366, "stupid": 366, "chief": 367, "virtu": [367, 420], "famous": 367, "woefulli": 368, "tkdoc": [368, 482], "roseman": [368, 471, 481, 482], "978": 368, "1999149567": 368, "alan": [368, 466, 467, 479, 482], "moor": [368, 463, 464, 467, 476, 477, 479, 482], "1788835886": 368, "lutz": 368, "0596158101": 368, "ousterhout": 368, "jone": [368, 464, 466, 476, 477], "0321336330": 368, "multitask": 368, "bridg": [368, 474], "xlib": 368, "cocoa": [368, 458, 474, 482], "gdi": 368, "screennam": [368, 374], "usetk": 368, "argv0": 368, "winfo_id": 368, "winfo_par": 368, "loadtk": 368, "frm": 368, "grid": [368, 373, 375], "applicaton": 368, "lbl": 368, "btn": [368, 375, 383], "winfo_x": 368, "winfo_height": 368, "winfo_view": 368, "winfo": 368, "reenter": 368, "idiosyncrat": 368, "relief": [368, 375], "groov": 368, "placer": 368, "qualit": 368, "183": 368, "parcel": [368, 375], "ipadx": 368, "ipadi": 368, "padx": 368, "padi": 368, "textvari": [368, 375], "onvalu": 368, "offvalu": 368, "stringvar": [368, 375], "intvar": [368, 482], "doublevar": 368, "booleanvar": [368, 482], "entrythingi": 368, "print_cont": 368, "wm": 368, "icon": [368, 460, 463, 464, 482], "_root": 368, "compass": 368, "sw": 368, "nw": 368, "gray25": 368, "gray50": 368, "hourglass": 368, "questhead": 368, "contrib": 368, "gumbi": 368, "print_it": 368, "rrggbb": 368, "rrrgggbbb": 368, "rrrrggggbbbb": 368, "160": [368, 381, 383, 425], "cursorfont": 368, "xc_": 368, "xc_hand2": 368, "hand2": 368, "179": 368, "centimetr": 368, "millimetr": 368, "5i": 368, "widthxheight": 368, "200x100": 368, "3i": 368, "2i": 368, "4c": 368, "43c": 368, "sunken": 368, "ridg": 368, "scrollcommand": [368, 375], "3tk": 368, "turn_r": 368, "activeforeground": 368, "send_ev": 368, "keysym": 368, "keysym_num": 368, "x_root": 368, "y_root": 368, "entryconfig": 368, "bitmapimag": 368, "photoimag": [368, 480, 482], "pillow": [368, 449], "maxbytecount": 368, "picker": 369, "buttonpress": 370, "dnd_accept": 370, "old_target": 370, "dnd_leav": 370, "dnd_enter": 370, "dnd_commit": 370, "dnd_end": 370, "buttonreleas": 370, "slant": [371, 461], "emphasi": 371, "overstrik": 371, "strikeout": 371, "displayof": 371, "ascent": 371, "descent": 371, "linespac": 371, "tixinspect": 374, "inspector": 374, "combo": [374, 375], "subwidget": 374, "mega": 374, "tk_popup": 374, "motif": 374, "tixexfileselectdialog": 374, "checkbutton": [374, 375, 482], "tixnotebook": 374, "xpm": 374, "cnf": [374, 459], "tix_librari": 374, "dlgclass": 374, "fileselectdialog": 374, "monochrom": 374, "newschem": 374, "newfontset": 374, "newscmprio": 374, "fontset": 374, "resetopt": 374, "tix_config": 374, "anti": [375, 389, 482], "menubutton": 375, "tile": [375, 383, 468], "monograph": 375, "bw": 375, "tlabel": 375, "ttkstyle": 375, "bindtag": 375, "viewabl": 375, "xscrollcommand": 375, "yscrollcommand": 375, "statespec": 375, "inquir": [375, 477], "icursor": 375, "exportselect": 375, "selection_get": 375, "postcommand": 375, "dropdown": 375, "comboboxselect": 375, "newindex": 375, "tab_id": 375, "notebooktabchang": 375, "unmanag": 375, "autoincr": [375, 482], "recur": 375, "southeast": 375, "displaycolumn": 375, "selectmod": 375, "treeviewselect": 375, "treeviewopen": 375, "treeviewclos": 375, "offscreen": 375, "newchildren": 375, "minwidth": 375, "imagenam": 375, "winfo_class": 375, "somewidget": 375, "query_opt": 375, "tbutton": 375, "colored_btn": 375, "layoutspec": 375, "tmenubutton": 375, "mbtn": 375, "elementnam": 375, "etyp": [375, 380, 471], "vsapi": 375, "6a": 375, "imagespec": 375, "interior": [375, 383, 462, 463], "themenam": 375, "tcombobox": 375, "green2": 375, "green4": 375, "fieldbackground": 375, "green3": 375, "olivedrab1": 375, "olivedrab2": 375, "themechang": [375, 482], "caviti": 375, "whichsid": 375, "nswe": 375, "sublayout": 375, "exact_typ": 377, "srow": 377, "scol": 377, "erow": 377, "ecol": 377, "decistmt": 377, "3e": 377, "007": 377, "13th": 377, "21716034272e": 377, "217160342717258261933904529e": 377, "toknum": 377, "tokval": 377, "say_hello": 377, "kit": [378, 471, 482], "pyproject": [378, 482], "toml_str": 378, "listfunc": 379, "coverdir": 379, "trackcal": 379, "countfunc": 379, "countcal": 379, "ignoremod": 379, "ignoredir": 379, "show_miss": 379, "extracted_list": 380, "lookup_lin": 380, "capture_loc": [380, 482], "frame_gen": 380, "frame_summari": 380, "run_user_cod": 380, "envdir": 380, "bright_side_of_lif": 380, "formatted_lin": 380, "another_funct": 380, "lumberstack": 380, "an_error": 380, "top_stat": 381, "716": 381, "4855": 381, "39328": 381, "284": 381, "521": 381, "3199": 381, "167": 381, "368": 381, "244": 381, "2315": 381, "381": 381, "185": [381, 470], "779": 381, "243": [381, 462], "133": 381, "347": [381, 466], "262": 381, "1446": 381, "911": 381, "1454": 381, "2131": 381, "148": 381, "344": 381, "snapshot1": 381, "snapshot2": 381, "8173": 381, "4428": 381, "71332": 381, "39369": [381, 482], "117": [381, 462], "940": 381, "8106": 381, "571": 381, "298": 381, "589": [381, 385, 480, 482], "1005": 381, "166": 381, "7423": 381, "1526": 381, "1334": 381, "848": 381, "1465": 381, "784": 381, "491": 381, "969": 381, "903": 381, "870": 381, "1036": 381, "934": 381, "1068": 381, "619": 381, "1581": 381, "1614": 381, "938": 381, "1728": 381, "test_pickletool": 381, "1276": 381, "test_runn": 381, "976": 381, "display_failur": 381, "761": 381, "1563": 381, "main_in_temp_cwd": 381, "run_glob": 381, "display_top": 381, "key_typ": 381, "419": [381, 470], "_b85chars2": 381, "_b85char": 381, "306": 381, "_a85chars2": 381, "_a85char": 381, "class_definit": 381, "testmethod": 381, "_hexdig": 381, "_weakrefset": 381, "142": [381, 441, 445], "_b32tab2": 381, "_b32tab": 381, "6220": 381, "3602": 381, "5303": 381, "large_sum": 381, "first_siz": 381, "first_peak": 381, "small_sum": 381, "second_s": 381, "second_peak": 381, "664": 381, "3592984": 381, "804": 381, "29704": [381, 482], "optimis": [381, 427, 482], "old_snapshot": 381, "most_recent_first": [381, 479, 482], "walli": 383, "feurzeig": 383, "seymour": 383, "papert": 383, "cynthia": 383, "solomon": [383, 482], "merit": 383, "playground": 383, "canva": [383, 467, 480, 482], "337": 383, "to_angl": 383, "clockwis": 383, "inscrib": 383, "polygon": 383, "semicircl": 383, "colorstr": 383, "diamet": 383, "stamp_id": 383, "stampid": 383, "astamp": 383, "undobuff": 383, "speedstr": 383, "speedvalu": 383, "440": 383, "27876": 383, "60254": 383, "fullcircl": 383, "360": 383, "grad": 383, "gon": [383, 475], "gradian": 383, "5707963267948966": 383, "thick": 383, "turtleshap": 383, "pendict": 383, "nores": 383, "stretchfactor": 383, "penstat": 383, "33cc8c": 383, "brown": [383, 467, 482], "5490196078431373": 383, "140": [383, 468, 482], "32c18f": 383, "colorstring1": 383, "colorstring2": 383, "g2": 383, "285078": 383, "a0c8f0": 383, "fillstat": 383, "arial": 383, "fontnam": 383, "fontsiz": 383, "fonttyp": 383, "shapenam": 383, "rmode": 383, "outlinewidth": 383, "stretch_wid": 383, "stretch_len": 383, "perpendicular": 383, "shear": 383, "t11": 383, "t12": 383, "t21": 383, "t22": 383, "myturtl": 383, "glow": 383, "unglow": 383, "handdraw": 383, "myfavouriteshap": 383, "mick": [383, 461, 464, 466], "pet": 383, "_screen": 383, "poly1": 383, "poly2": 383, "shapelist": 383, "myshap": 383, "800080": 383, "picnam": 383, "nopic": 383, "backgroundimag": 383, "landscap": [383, 467], "canvwidth": 383, "canvheight": 383, "canvaswidth": 383, "canvasheight": 383, "1500": 383, "llx": 383, "urx": 383, "distort": 383, "octagon": 383, "acceler": [383, 461, 462, 466, 469, 475, 476, 482], "xdummi": 383, "ydummi": 383, "nim": 383, "minval": 383, "maxval": 383, "stake": 383, "cmode": 383, "turtlegraphicserror": 383, "thusli": 383, "480": 383, "turtlegraph": 383, "using_idl": 383, "_cfg": 383, "startx": 383, "leftright": 383, "starti": 383, "topbottom": 383, "200x200": 383, "titlebar": 383, "zoo": [383, 426], "setbg": 383, "type_": 383, "poli": [383, 461], "tooltip": [383, 482], "backgroundcolor": 383, "turtle_docstringdict": 383, "turtle_docstringdict_german": 383, "glingl": 383, "aon": 383, "classroom": [383, 482], "undobuffers": 383, "exampleturtl": 383, "examplescreen": 383, "docstringdict": 383, "turtle_docstringdict_italian": 383, "bytedesign": 383, "sourcecod": 383, "chao": 383, "verhulst": 383, "colormix": 383, "forest": 383, "fractalcurv": 383, "hilbert": 383, "koch": 383, "lindenmay": 383, "ethnomathemat": 383, "indian": 383, "kolam": 383, "minimal_hanoi": 383, "hanoi": 383, "disc": 383, "nimstick": 383, "minimalist": 383, "peac": 383, "penros": [383, 482], "aperiod": 383, "kite": 383, "dart": 383, "planet_and_moon": 383, "round_danc": 383, "danc": [383, 441], "sorting_anim": 383, "two_canvas": 383, "canvas": 383, "yinyang": 383, "keyreleas": 383, "tdemo_nim": 383, "tdemo_round_d": 383, "exec_bodi": 384, "__prepare__": [384, 388, 427, 476, 478, 482], "__mro_entries__": [384, 427, 479, 482], "listiter": 384, "t_origin": 384, "t_arg": 384, "guidanc": [384, 468, 472, 482], "gen_func": [384, 482], "typing_extens": 385, "544": [385, 480, 482], "586": [385, 471, 480, 481, 482], "591": [385, 480, 482], "593": [385, 481, 482], "new_vector": 385, "connectionopt": 385, "broadcast_messag": 385, "some_id": [385, 478], "524313": [385, 478], "get_user_nam": 385, "user_id": 385, "user_a": 385, "42351": 385, "user_b": 385, "23413": 385, "54341": 385, "some_valu": 385, "adminuserid": 385, "prouserid": 385, "arg1typ": 385, "arg2typ": 385, "returntyp": 385, "get_next_item": 385, "async_queri": 385, "on_success": 385, "on_upd": 385, "paramspecvari": 385, "notify_by_email": 385, "loggedvar": 385, "zero_all_var": 385, "contravari": 385, "weirdtrio": 385, "linkedlist": 385, "vec": [385, 441], "inproduct": 385, "type1": 385, "aesthet": 385, "legacy_pars": 385, "hatch": [385, 468], "hash_a": 385, "hash_b": 385, "typesaf": 385, "unpython": 385, "bucket": [385, 427], "enjoy": [385, 412], "unconstrain": 385, "run_queri": [385, 472], "arbitrary_str": [385, 472], "literal_str": 385, "never_call_m": 385, "int_or_str": 385, "return_self": 385, "subclassoffoo": 385, "with_lock": 385, "my_lock": 385, "sum_threadsaf": 385, "ct_co": 385, "basicus": 385, "prouser": 385, "teamus": 385, "make_new_us": 385, "user_class": 385, "new_non_team_us": 385, "validate_simpl": 385, "open_help": 385, "starship": [385, 466, 478], "enterprise_d": 385, "fastconnector": 385, "typehint": 385, "valuerang": 385, "include_extra": [385, 481, 482], "is_str": 385, "is_str_list": 385, "typea": 385, "typeb": 385, "kt": 385, "lookup_nam": 385, "print_capit": 385, "stringsubclass": 385, "move_first_element_to_last": 385, "get_shap": 385, "happili": 385, "array2": 385, "float_array_1d": 385, "int_array_2d": 385, "yup": 385, "add_log": 385, "add_two": 385, "genproto": 385, "poni": 385, "closabl": 385, "_field_typ": [385, 480, 481, 482], "first_us": 385, "count_word": 385, "keep_posit": 385, "t_co": 385, "add_unicode_checkmark": 385, "u2713": 385, "kt_co": 385, "vt_co": 385, "get_position_in_index": 385, "word_list": 385, "t_contra": 385, "v_co": 385, "yieldtyp": 385, "sendtyp": 385, "echo_round": 385, "infinite_stream": 385, "complex_funct": 385, "create_model": [385, 472], "customermodel": [385, 472], "modelbas": 385, "modelmeta": 385, "eq_default": 385, "order_default": 385, "kw_only_default": 385, "field_specifi": 385, "__dataclass_transform__": 385, "__final__": [385, 472, 482], "fetch_respons": 385, "expensive_mod": 385, "sometyp": [385, 477], "local_var": 385, "anothertyp": 385, "other_fun": 385, "38291": [385, 471, 482], "undecid": 385, "92332": [385, 472, 473, 482], "94309": [385, 473, 482], "unistr": [386, 461], "00c7": [386, 429], "cedilla": [386, 429], "0043": [386, 429], "0327": [386, 429], "2160": 386, "0049": 386, "kd": 386, "kc": 386, "solidus": 386, "etter": 386, "ppercas": 386, "u0660": [386, 461], "rabic": 386, "umber": 386, "namealias": [386, 434], "namedsequ": 386, "junit": [387, 462, 482], "taxonomi": 387, "unittestgui": 387, "appveyor": 387, "teststringmethod": 387, "test_upp": 387, "test_isupp": 387, "test_split": 387, "000s": 387, "001s": 387, "test_module1": 387, "test_module2": 387, "test_modul": [387, 389], "testclass": 387, "test_method": 387, "test_someth": [387, 388, 389, 479], "foo_test": [387, 479], "sometest": [387, 479], "bar_test": [387, 479], "test_foo": [387, 389, 479], "footest": [387, 479], "project_directori": 387, "_test": [387, 474], "proj": [387, 482], "test_mypkg": 387, "defaultwidgetsizetestcas": 387, "test_default_widget_s": 387, "widgettestcas": 387, "test_widget_res": 387, "suffer": [387, 388, 462, 463, 464], "test_widget": [387, 482], "testsometh": 387, "makesometh": 387, "makesomethingdb": 387, "deletesomethingdb": 387, "mytestcas": 387, "test_noth": 387, "test_format": 387, "test_windows_support": 387, "test_maybe_skip": 387, "external_resource_avail": 387, "005s": 387, "myskippedtestcas": 387, "test_not_run": 387, "expectedfailuretestcas": 387, "test_fail": 387, "skipunlesshasattr": 387, "numberstest": [387, 476], "test_even": [387, 476], "the_except": 387, "error_cod": 387, "assertraisesregexp": [387, 468, 470, 473], "somewarn": 387, "legacy_funct": [387, 474], "frobnic": [387, 401], "assertregexpmatch": [387, 468, 473, 474], "typeobj": 387, "seq_typ": 387, "assertxyy": 387, "_async_connect": 387, "asyncconnect": [387, 480], "test_respons": 387, "status_cod": [387, 480], "on_cleanup": 387, "testfunc": 387, "_removetestatindex": [387, 476], "synthet": [387, 482], "testcaseclass": 387, "unoffici": [387, 477], "use_load_test": [387, 473, 477, 482], "sampletest": 387, "sampletestcas": 387, "test_on": [387, 389], "test_two": [387, 389], "test_thre": 387, "start_dir": [387, 482], "top_level_dir": 387, "loadtestsfrom": 387, "formatted_err": 387, "resultclass": 387, "wd": [387, 399, 466, 468, 476, 478], "wa": 387, "defaulttest": [387, 476], "catchbreak": 387, "testprogram": 387, "testcase1": 387, "testcase2": 387, "testcase3": 387, "test_class": 387, "this_dir": 387, "package_test": 387, "basetestsuit": 387, "_errorhold": 387, "_connect": [387, 418], "createexpensiveconnectionobject": 387, "createconnect": 387, "closeconnect": 387, "test_signal_handl": 387, "replay": 388, "productionclass": [388, 389], "classname2": [388, 389], "classname1": [388, 389], "mockclass1": [388, 389], "mockclass2": [388, 389], "mock_method": [388, 389], "newkey": [388, 389], "newvalu": [388, 389], "foobarbaz": 388, "wheeeeee": 388, "specc": [388, 389], "autospec": [388, 389, 482], "mock_funct": 388, "fishi": 388, "new_cal": 388, "spec_set": [388, 389], "assret": [388, 482], "asert": [388, 482], "aseert": [388, 482], "assrt": [388, 482], "wow": 388, "any_ord": [388, 389], "some_mock": 388, "w00t": 388, "140161580456576": [388, 389], "mock_foo": [388, 389], "mockiti": 388, "this_foo": 388, "async_func": 388, "asyncmockmixin": 388, "_mock_cal": 388, "exampleclass": 388, "sync_foo": 388, "async_foo": 388, "a_mock": 388, "coroutine_mock": 388, "bang": 388, "not_a_child": 388, "thing1": 388, "thing2": 388, "unpatch": [388, 482], "normal_argu": 388, "mock_class": 388, "mockclass": 388, "mock_th": 388, "mock_stdout": 388, "non_existing_attribut": 388, "honour": [388, 482], "class_method": 388, "in_dict": 388, "testsampl": 388, "test_sampl": 388, "patched_foo": 388, "first_patch": 388, "second_patch": 388, "test_funct": 388, "mock_exit": 388, "new_mock": [388, 389], "mytest": [388, 389], "patcher1": 388, "patcher2": 388, "fiddlier": [388, 389], "bonus": [388, 462], "mock_ord": 388, "foo_on": 388, "foo_two": 388, "static_method": [388, 389], "mock1": 388, "mock2": 388, "foobl": [388, 389], "__getinitargs__": 388, "__getformat__": [388, 482], "kall": [388, 465, 482], "abstracthttphandl": [388, 478, 482], "_noncallablemock__get_return_valu": 388, "_noncallablemock__get_side_effect": 388, "_noncallablemock__return_value_doc": 388, "_noncallablemock__set_return_valu": 388, "_noncallablemock__set_side_effect": 388, "my_mock": 388, "irrespect": 388, "read_data": [388, 445, 482], "deplet": 388, "rewound": 388, "fidd": 388, "bibbl": 388, "assret_called_once_with": 388, "dandi": 388, "assret_called_with": 388, "has_data": [388, 394, 476], "mock_request": 388, "somethingfortest": 388, "submock": 388, "attribute1": 388, "not_submock": 388, "sample_nam": 388, "new_attribut": 388, "attribute2": 388, "mock_inst": 389, "some_method": [389, 418], "old_method": 389, "stronger": [389, 482], "file_handl": 389, "testabl": 389, "backendprovid": 389, "get_endpoint": 389, "create_cal": 389, "start_cal": 389, "mock_backend": 389, "mock_respons": 389, "mock_dat": 389, "mocksomeclass": 389, "not_a_test": 389, "whilst": [389, 482], "nuisanc": 389, "grob": 389, "mock_frob": 389, "copy_call_arg": 389, "copyingmock": 389, "mock_bar": 389, "mock_spam": 389, "create_patch": 389, "my_dict": 389, "mymock": 389, "has_been_cal": 389, "adaptor": 389, "blip": 389, "expected_cal": 389, "fifti": 389, "some_obj": 389, "match_foo": 389, "match_wrong": 389, "pyhamcrest": 389, "hamcrest": 389, "match_equ": 389, "gopher": 393, "hdl": [393, 425], "mailto": [393, 425], "mms": 393, "prospero": 393, "rsync": 393, "rtsp": 393, "rtspu": 393, "sftp": 393, "shttp": 393, "snew": 393, "wai": 393, "urlstr": 393, "allow_frag": 393, "netloc": [393, 468, 474], "1808": [393, 477, 482], "7eguido": 393, "max_num_field": [393, 482], "doseq": 393, "2396": [393, 468, 477, 479, 482], "unreserv": 393, "20ni": 393, "b1o": 393, "2fel": 393, "quote_via": [393, 477, 482], "std66": 393, "2732": [393, 468, 474], "2368": 393, "1738": 393, "cadefault": 394, "_proxi": [394, 482], "handler_ord": 394, "firefox": [394, 402, 466, 482], "i686": 394, "gecko": 394, "20071127": 394, "camel": [394, 467, 474], "request_host": 394, "no_proxi": [394, 482], "cern": 394, "ncsa": 394, "uiuc": 394, "basicauth": 394, "passwd_mgr": 394, "40x": 394, "unredirect": 394, "header_valu": 394, "get_host": [394, 476], "get_selector": [394, 476], "is_unverifi": [394, 476], "http_error_404": 394, "_open": [394, 482], "http_error_": 394, "_error": 394, "_request": 394, "_respons": 394, "adopt": [394, 431, 462, 463, 464, 467, 481, 482], "newurl": 394, "http_error_30": 394, "authuri": 394, "authreq": 394, "2397": 394, "equiv": 394, "xhtm": 394, "ngot": 394, "auth_handl": 394, "pdq": 394, "mahler": 394, "8092": 394, "klem": 394, "kadidd": 394, "ehopp": 394, "proxy_handl": 394, "3128": 394, "proxy_auth_handl": 394, "contact": [394, 406, 425], "addhead": 394, "musi": [394, 395], "requestb": 394, "xrbl82xr": 394, "reporthook": 394, "local_filenam": 394, "30x": [394, 475], "maxtri": 394, "550": 394, "_urlopen": 394, "robotstxt": 395, "userag": 395, "crawl": [395, 478, 482], "requestr": 395, "sitemap": 395, "rp": 395, "rrate": 395, "lanc": [396, 425], "ellinghous": [396, 425], "jansen": [396, 425, 463, 464, 477, 482], "in_fil": 396, "out_fil": [396, 412], "relay": [397, 479, 482], "time_low": 397, "time_mid": 397, "time_hi_vers": 397, "clock_seq_hi_vari": 397, "clock_seq_low": 397, "12345678": 397, "567812345678": 397, "12345678123456781234567812345678": 397, "x34": 397, "x56": [397, 461], "x78": 397, "0x12345678": 397, "0x1234": 397, "0x5678": 397, "0x12": 397, "0x34": 397, "0x567812345678": 397, "0x12345678123456781234567812345678": 397, "clock_seq": 397, "administ": [397, 461, 467, 479, 482], "ncs": 397, "a8098c1a": [397, 466], "f86e": [397, 466], "11da": [397, 466], "bd1a": [397, 466], "00112444be1e": [397, 466], "6fa459ea": [397, 466], "ee8a": [397, 466], "3ca4": [397, 466], "894e": [397, 466], "db77e160355": [397, 466], "16fd2706": [397, 466], "8baf": [397, 466], "433b": [397, 466], "82eb": [397, 466], "8c7fada847da": [397, 466], "886313e1": [397, 466], "3b8a": [397, 466], "5372": [397, 466], "9b90": [397, 466], "0c9aee199e5d": [397, 466], "00010203": 397, "0405": 397, "0607": 397, "0809": 397, "0a0b0c0d0e0f": 397, "x05": 397, "x0e": 397, "x0f": 397, "python35": [398, 452], "myenv": 398, "dep": [398, 482], "env_dir": 398, "powershel": [398, 460, 480, 482], "executionpolici": 398, "remotesign": 398, "currentus": 398, "zsh": 398, "csh": [398, 452, 476], "tcsh": [398, 465], "virtual_env": [398, 477], "system_site_packag": 398, "with_pip": [398, 476], "upgrade_dep": 398, "holder": [398, 425, 468, 482], "__venv_dir__": 398, "env_nam": 398, "__venv_name__": [398, 481], "__venv_prompt__": [398, 481, 482], "inc_path": 398, "lib_path": 398, "bin_path": 398, "bin_nam": 398, "__venv_bin_name__": 398, "env_ex": 398, "__venv_python__": 398, "env_exec_cmd": 398, "redirector": [398, 479, 482], "extendedenvbuild": 398, "easy_instal": 398, "nodist": 398, "nopip": 398, "install_setuptool": 398, "install_pip": 398, "binpath": 398, "distpath": 398, "ez_setup": 398, "system_sit": 398, "use_symlink": 398, "warrant": [399, 469], "user_n": 399, "fxn": 399, "__warningregistry__": [399, 482], "wave_format_extens": [400, 482], "ksdataformat_subtype_pcm": 400, "defici": 400, "0x7fc859830220": 401, "lifecycl": [401, 468, 476], "do_something_us": 401, "extendedref": 401, "__counter": 401, "_id2obj_dict": 401, "id2obj": 401, "kenni": [401, 476], "newobj": [401, 482], "_final": 401, "unloading_modul": 401, "autorais": [402, 466], "galeon": 402, "epiphani": 402, "skipston": 402, "backgroundbrows": 402, "kfmclient": 402, "konqueror": [402, 466], "kfm": 402, "mosaic": 402, "genericbrows": 402, "elink": [402, 466], "w3m": 402, "windowsdefault": 402, "macosxosascript": [402, 482], "safari": 402, "chrome": [402, 475, 482], "chromium": [402, 475], "kde": 402, "kdedir": 402, "hkey": 404, "computernam": 404, "subkey": [404, 460], "wow64": 404, "windir": 404, "flusher": 404, "se_restore_privileg": 404, "regloadkey": 404, "1601": 404, "sebackupprivileg": 404, "security_attribut": 404, "_winreg": [404, 461, 467, 468, 469], "subordin": [404, 468], "standard_rights_requir": 404, "standard_rights_writ": 404, "standard_rights_read": 404, "speaker": 405, "767": 405, "systemasterisk": 405, "systemexclam": 405, "systemhand": 405, "systemquest": 405, "systemdefault": 405, "url_schem": 406, "fastcgi": 406, "include_queri": 406, "path_info": 406, "query_str": [406, 472], "http_host": 406, "simple_app": 406, "start_respons": [406, 474, 482], "ret": 406, "hop": 406, "filelik": 406, "nonexist": [406, 482], "base_environ": 406, "middlewar": 406, "nonconform": 406, "validator_app": 406, "run_onc": 406, "allowpathinfo": 406, "metabas": 406, "allowpathinfoforscriptmap": 406, "path_transl": 406, "vhost": 406, "iis7": 406, "scgi": 406, "retarget": 406, "spit": 406, "hello_world_app": 406, "mime_typ": 406, "1014": 407, "microsystem": 407, "1832": 407, "pack_typ": 407, "pack_uint": 407, "pack_int": 407, "pack_enum": 407, "pack_bool": 407, "pack_uhyp": 407, "pack_hyp": 407, "pack_item": 407, "unpack_typ": 407, "unpack_item": 407, "billion": [408, 482], "laugh": [408, 475, 482], "blowup": 408, "bomb": [408, 421, 482], "relianc": [408, 482], "expat_vers": 408, "parsererror": [408, 482], "unexpand": 408, "countermeasur": 408, "omg": [409, 410], "python_dom": 409, "qualifiednam": 409, "element_nod": 409, "attribute_nod": 409, "text_nod": [409, 410], "cdata_section_nod": 409, "entity_nod": 409, "processing_instruction_nod": [409, 410], "comment_nod": 409, "document_nod": 409, "document_type_nod": 409, "notation_nod": 409, "uncontroversi": 409, "newchild": 409, "refchild": 409, "oldchild": 409, "oldattr": 409, "newattr": [409, 463], "removenameditem": 409, "domstring_size_err": 409, "hierarchy_request_err": 409, "index_size_err": 409, "inuse_attribute_err": 409, "invalid_access_err": 409, "invalid_character_err": 409, "invalid_modification_err": 409, "invalid_state_err": 409, "namespace_err": 409, "not_found_err": 409, "not_supported_err": 409, "no_data_allowed_err": 409, "no_modification_allowed_err": 409, "syntax_err": 409, "wrong_document_err": 409, "domstr": [409, 410], "somevalu": 409, "anothervalu": 409, "_get_somevalu": 409, "_get_anothervalu": 409, "_set_anothervalu": 409, "corba": 409, "profici": 410, "dom1": 410, "datasourc": 410, "dom2": 410, "dom3": 410, "myxml": 410, "filename_or_fil": 410, "grasp": 410, "newdoc": 410, "some_tag": 410, "top_el": 410, "addind": 410, "newl": 410, "subnod": 410, "prologu": 410, "slideshow": 410, "handleslideshow": 410, "handleslideshowtitl": 410, "handletoc": 410, "handleslid": 410, "handleslidetitl": 410, "handlepoint": 410, "_get_foo": 410, "_set_foo": 410, "domtimestamp": 410, "entityrefer": 410, "sales_item": 411, "start_docu": 411, "end_docu": 411, "processing_instruct": 411, "ignorable_whitespac": 411, "documentfactori": 411, "stream_or_str": 411, "celementtre": [412, 466, 474, 475, 482], "liechtenstein": 412, "gdppc": 412, "141100": 412, "switzerland": 412, "singapor": 412, "59900": 412, "malaysia": 412, "panama": 412, "13600": 412, "costa": 412, "rica": 412, "colombia": 412, "country_data": 412, "country_data_as_str": 412, "mytag": 412, "sometext": 412, "0x7fa66db2be58": 412, "new_rank": 412, "sometag": 412, "fiction": 412, "actor": [412, 440, 480], "lancelot": [412, 441], "archi": 412, "leach": 412, "sir": [412, 440, 470, 480], "gunther": 412, "clement": [412, 478, 482], "xml_text": 412, "real_person": 412, "countrydata": 412, "grand": 412, "dublin": 412, "purl": 412, "grandchildren": [412, 482], "xml_data": 412, "normalis": 412, "c14n_output": 412, "inputfil": 412, "with_com": 412, "strip_text": 412, "rewrite_prefix": 412, "qname_aware_tag": 412, "qname_aware_attr": 412, "exclude_attr": 412, "exclude_tag": 412, "xml_declar": [412, 468, 482], "default_namespac": [412, 468, 482], "short_empty_el": [412, 416, 476], "xi": 412, "xpointer": 412, "para": 412, "base_url": 412, "max_depth": 412, "unprefix": [412, 482], "convey": 412, "perceptu": 412, "reorder_attribut": 412, "0xb77e6fac": 412, "0xb77ec26c": 412, "0xb77ec2ac": 412, "0xb77ec1cc": 412, "text_or_uri": 412, "element_factori": 412, "comment_factori": 412, "pi_factori": 412, "insert_com": 412, "insert_pi": 412, "pis": 412, "pubid": 412, "attrs_dict": 412, "maxdepth": 412, "examplexml": 412, "parser_list": [413, 482], "create_pars": [413, 415], "filename_or_stream": 413, "focal": 413, "sax2lib": 414, "declhandl": 414, "documenthandl": [414, 415], "unrecover": [414, 482], "recover": 414, "public_id": 414, "system_id": [414, 415], "propertynam": 415, "formed": 415, "bytefil": 415, "charfil": 415, "amp": [416, 474], "use_datetim": [418, 466], "use_builtin_typ": [418, 419, 481], "safetransport": [418, 482], "ontosi": 418, "i4": 418, "i8": [418, 467], "biginteg": 418, "2147483648": 418, "2147483647": [418, 434, 466], "nil": [418, 464], "bigdecim": 418, "python_logo": 418, "fetched_python_logo": 418, "boxcar": 418, "methodrespons": 418, "betti": 418, "userland": 418, "getstatenam": 418, "proxiedtransport": 418, "proxy_head": 418, "requesthandl": 419, "logrequest": 419, "allow_dotted_nam": 419, "_dispatch": 419, "intrud": 419, "rpc2": [419, 466], "adder_funct": 419, "exampleservic": 419, "getdata": 419, "currenttim": 419, "getcurrenttim": 419, "nkeyboard": 419, "request_text": 419, "server_titl": 419, "server_document": 419, "pyz": [420, 477, 482], "mainfn": 420, "deflat": [420, 423, 482], "old_arch": 420, "new_arch": 420, "pyzw": [420, 482], "win32_lean_and_mean": 420, "wwinmain": 420, "hinstanc": 420, "hprevinst": 420, "lpwstr": 420, "lpcmdline": 420, "wmain": 420, "myargv": 420, "_alloca": 420, "__argc": 420, "__wargv": 420, "ccompil": [420, 482], "new_compil": 420, "add_include_dir": 420, "get_python_inc": 420, "add_library_dir": 420, "link_execut": 420, "define_macro": [420, 461], "zastub": 420, "pkzip": [421, 422, 461], "zip64": [421, 466, 482], "phil": [421, 422, 467, 482], "katz": [421, 422], "allowzip64": [421, 476, 482], "strict_timestamp": [421, 482], "metadata_encod": [421, 482], "2107": [421, 482], "myzip": 421, "force_zip64": 421, "zipextfil": [421, 474, 482], "appreci": [421, 425], "zinfo_or_arcnam": 421, "zinfo_or_directori": 421, "grandchild": 421, "zipp": [421, 482], "filterfunc": [421, 476], "zf": 421, "myprog": 421, "notest": 421, "testal": [421, 467], "bogus": [421, 468, 482], "ahlstrom": [422, 461, 464], "archivepath": 422, "8467": [422, 464], "jwzthread": [422, 464], "adler": [423, 425], "max_wbit": 423, "z_best_spe": 423, "z_best_compress": 423, "z_no_compress": 423, "z_default_compress": 423, "memlevel": 423, "def_mem_level": 423, "z_default_strategi": 423, "zdict": [423, 482], "z_filter": 423, "z_huffman_on": 423, "z_rle": 423, "z_fix": 423, "def_buf_s": 423, "z_no_flush": 423, "z_partial_flush": 423, "z_sync_flush": 423, "z_full_flush": 423, "z_block": 423, "z_finish": 423, "unconsum": 423, "los_angel": [424, 481], "dt_add": 424, "dt_utc": 424, "pythontzpath": 424, "fobj": [424, 437], "only_key": 424, "new_york": 424, "asia": 424, "tokyo": 424, "cldr": 424, "kwajalein": 424, "01t03": 424, "europe_berlin_pkl": 424, "berlin": 424, "europe_berlin_pkl_nc": 424, "posixrul": 424, "cautionari": [424, 465], "1990": 425, "reston": 425, "pythonlab": [425, 461, 463], "opensourc": 425, "license": 425, "herebi": 425, "nonexclus": 425, "royalti": 425, "herein": 425, "merchant": 425, "infring": 425, "consequenti": 425, "partnership": 425, "ventur": 425, "trademark": 425, "saratoga": 425, "santa": 425, "clara": 425, "95051": 425, "1895": 425, "preston": [425, 479], "20191": [425, 482], "1013": 425, "feder": 425, "intellectu": 425, "commonwealth": 425, "virginia": 425, "notwithstand": [425, 461], "netherland": 425, "profit": 425, "tortious": 425, "_random": [425, 482], "sci": 425, "hiroshima": 425, "mat": [425, 468, 481, 482], "mt": 425, "mt2002": 425, "emt19937ar": 425, "mt19937": 425, "takuji": 425, "makoto": [425, 482], "init_genrand": 425, "init_by_array": 425, "init_key": 425, "key_length": 425, "redistribut": [425, 482], "exemplari": 425, "procur": 425, "tort": 425, "emt": 425, "1996": 425, "rush": [425, 461], "timothi": 425, "malley": [425, 464], "timo": [425, 482], "alum": 425, "industri": 425, "whielacronx": 425, "mojam": 425, "montanaro": [425, 461, 464, 465, 466, 467], "bioreason": 425, "automatrix": 425, "cathedr": 425, "republ": 425, "laboratori": 425, "sublicens": 425, "sell": [425, 466], "whom": 425, "furnish": 425, "noninfring": 425, "doug": [425, 482], "pyhash": [425, 455, 482], "marek": 425, "majkowski": 425, "dan": [425, 465, 466, 474, 475, 476, 477, 481, 482], "popcount": 425, "majek": 425, "csiphash": 425, "supercop": 425, "crypto_auth": 425, "djb": 425, "little2": 425, "131002": 425, "siphash": [425, 476, 482], "gay": [425, 468, 470, 471, 476, 478, 479, 482], "20220517033456": 425, "netlib": 425, "lucent": 425, "ssleay": 425, "young": 425, "eay": 425, "cryptsoft": 425, "hudson": [425, 462, 463, 464, 466, 482], "tjh": 425, "ahear": 425, "lhash": 425, "rouin": 425, "licenc": 425, "clark": [425, 475, 482], "loup": 425, "gailli": 425, "misrepres": 425, "jloup": 425, "madler": 425, "alumni": 425, "caltech": 425, "owen": 425, "_decim": [425, 455, 475, 482], "stefan": [425, 468, 472, 475, 476, 477, 478, 479, 480, 481, 482], "krah": [425, 468, 475, 478, 482], "xmltestdata": 425, "c14n2": 425, "ercim": 425, "keio": 425, "beihang": 425, "incarn": 426, "if_stmt": [426, 430], "while_stmt": [426, 430], "for_stmt": [426, 430], "try_stmt": [426, 430], "with_stmt": [426, 430], "match_stmt": [426, 430], "funcdef": 426, "async_with_stmt": 426, "async_for_stmt": 426, "async_funcdef": 426, "stmt_list": [426, 436], "compound_stmt": [426, 430, 436], "simple_stmt": [426, 430], "assignment_express": [426, 429, 430], "target_list": [426, 429, 435], "starred_list": [426, 429], "try1_stmt": 426, "try2_stmt": 426, "try3_stmt": 426, "0x10efad080": 426, "0x10efad040": 426, "with_stmt_cont": 426, "with_item": [426, 430], "hit_except": 426, "subject_expr": [426, 430], "case_block": [426, 430], "star_named_express": [426, 430], "named_express": [426, 430], "prerequisit": [426, 469], "636": [426, 440, 471], "ebnf": [426, 430], "open_sequence_pattern": [426, 430], "as_pattern": [426, 430], "or_pattern": [426, 430], "literal_pattern": [426, 430], "capture_pattern": [426, 430], "wildcard_pattern": [426, 430], "value_pattern": [426, 430], "sequence_pattern": [426, 430], "mapping_pattern": [426, 430], "class_pattern": [426, 430], "closed_pattern": [426, 430], "signed_numb": [426, 430], "name_or_attr": [426, 430], "name1": [426, 466], "name2": [426, 466], "maybe_sequence_pattern": [426, 430], "maybe_star_pattern": [426, 430], "star_pattern": [426, 430], "p3": 426, "items_pattern": [426, 430], "key_value_pattern": [426, 430], "double_star_pattern": [426, 430], "pattern_argu": 426, "positional_pattern": [426, 430], "keyword_pattern": [426, 430], "parameter_list": [426, 429], "defparamet": 426, "parameter_list_no_poson": 426, "parameter_list_stararg": 426, "614": [426, 481, 482], "whats_on_the_telli": 426, "570": [426, 480, 482], "3107": [426, 440, 469, 477, 479], "param1": 426, "param2": 426, "do_stuff": 426, "some_coroutin": 426, "suite2": 426, "aenter": 426, "aexit": 426, "neumann": 427, "illus": [427, 474], "affix": [427, 482], "cell_cont": 427, "0x2000": 427, "0x10": 427, "0x1000": 427, "precari": 427, "parentclass": 427, "ocert": [427, 454], "asymmetri": 427, "verbosemodul": 427, "__objclass__": 427, "unlist": 427, "philosoph": 427, "australianphilosoph": 427, "bruce": [427, 482], "mysubclass": 427, "__classcell__": [427, 478, 480, 482], "3135": [427, 468, 469], "boundless": 427, "class_of_obj": 427, "breakfast": 427, "enummeta": [427, 472, 482], "a_tupl": 427, "unbind": [428, 482], "repair": [428, 460, 482], "offend": [428, 462], "bnf": [429, 433, 462], "othernam": [429, 461], "enclosur": 429, "parenth_form": 429, "list_display": 429, "dict_display": 429, "set_display": 429, "generator_express": 429, "yield_atom": 429, "__spam": [429, 439], "_ham__spam": 429, "stringliter": 429, "bytesliter": 429, "imagnumb": 429, "starred_express": [429, 430, 435], "unparenthes": [429, 471, 481, 482], "comp_for": 429, "or_test": 429, "comp_it": 429, "comp_if": 429, "datum": [429, 435], "key_datum_list": 429, "dict_comprehens": 429, "key_datum": 429, "or_expr": [429, 434], "yield_express": [429, 434, 435], "expression_list": [429, 435, 436], "subiter": [429, 475], "yield_from": [429, 482], "attributeref": [429, 435], "slice_list": 429, "slice_item": 429, "proper_slic": 429, "positional_argu": 429, "starred_and_keyword": 429, "keywords_argu": 429, "positional_item": 429, "keyword_item": 429, "x1": [429, 440, 471], "x3": 429, "x4": 429, "ym": 429, "await_expr": 429, "u_expr": 429, "m_expr": 429, "a_expr": 429, "shift_expr": [429, 430], "and_expr": 429, "xor_expr": 429, "comp_oper": 429, "op1": 429, "op2": 429, "opn": 429, "reflex": 429, "and_test": 429, "not_test": 429, "conditional_express": [429, 434], "lambda_expr": 429, "starred_item": 429, "expr4": 429, "expr5": 429, "roundoff": 429, "0041": 429, "precompos": 429, "u00c7": 429, "u0043": 429, "u0327": 429, "_not_": 430, "_pypegen_pars": 430, "reserved_keyword": 430, "n_keyword_list": 430, "start_rul": 430, "file_rul": 430, "interactive_rul": 430, "eval_rul": 430, "py_func_type_input": 430, "func_type_rul": 430, "py_fstring_input": 430, "fstring_rul": 430, "grammat": [430, 482], "invalid_": 430, "rule_nam": 430, "e1": [430, 474], "e2": 430, "first_alt": 430, "second_alt": 430, "mod_ti": [430, 471, 482], "_pypegen_make_modul": 430, "statement_newlin": 430, "_pyast_interact": 430, "_pyast_express": 430, "type_express": 430, "_pyast_functiontyp": 430, "fstring": [430, 482], "expr_ti": 430, "star_express": 430, "asdl_stmt_seq": 430, "_pypegen_seq_flatten": 430, "_pypegen_singleton_seq": 430, "stmt_ti": 430, "_pyast_pass": 430, "_pypegen_interactive_exit": 430, "_pyast_expr": 430, "return_stmt": [430, 435], "import_stmt": [430, 435], "raise_stmt": [430, 435], "del_stmt": [430, 435], "yield_stmt": [430, 435], "assert_stmt": [430, 435], "_pyast_break": 430, "_pyast_continu": 430, "global_stmt": [430, 435], "nonlocal_stmt": [430, 435], "function_def": 430, "class_def": 430, "annotated_rh": 430, "yield_expr": 430, "check_vers": 430, "_pyast_annassign": 430, "_pypegen_set_expr_context": 430, "single_target": 430, "single_subscript_attribute_target": 430, "asdl_expr_seq": 430, "star_target": 430, "tc": 430, "_pyast_assign": 430, "new_type_com": 430, "_pyast_augassign": 430, "invalid_assign": 430, "augoper": 430, "_pypegen_augoper": 430, "_pyast_return": 430, "_pyast_rais": 430, "_pyast_glob": 430, "asdl_identifier_seq": 430, "_pypegen_map_names_to_id": 430, "_pyast_nonloc": 430, "del_target": 430, "_pyast_delet": 430, "invalid_del_stmt": 430, "_pyast_assert": 430, "dotted_as_nam": 430, "_pyast_import": 430, "dotted_nam": 430, "import_from_target": 430, "_pyast_importfrom": 430, "_pypegen_seq_count_dot": 430, "asdl_alias_seq": 430, "import_from_as_nam": 430, "alias_ti": 430, "_pypegen_alias_for_star": 430, "invalid_import_from_target": 430, "_pyast_alia": 430, "_pypegen_join_names_with_dot": 430, "invalid_block": 430, "class_def_raw": 430, "_pypegen_class_def_decor": 430, "invalid_class_def_raw": 430, "_pyast_classdef": 430, "function_def_raw": 430, "_pypegen_function_def_decor": 430, "invalid_def_raw": 430, "func_type_com": 430, "_pyast_functiondef": 430, "arguments_ti": 430, "_pypegen_empty_argu": 430, "_pyast_asyncfunctiondef": 430, "invalid_paramet": 430, "slash_no_default": 430, "asdl_arg_seq": 430, "param_no_default": 430, "param_with_default": 430, "star_etc": 430, "_pypegen_make_argu": 430, "slash_with_default": 430, "slashwithdefault": 430, "_pypegen_slash_with_default": 430, "staretc": 430, "invalid_star_etc": 430, "param_maybe_default": 430, "_pypegen_star_etc": 430, "param_no_default_star_annot": 430, "arg_ti": 430, "invalid_kwd": 430, "_pypegen_add_type_comment_to_arg": 430, "param_star_annot": 430, "namedefaultpair": 430, "_pypegen_name_default_pair": 430, "_pyast_arg": 430, "star_annot": 430, "invalid_default": 430, "invalid_if_stmt": 430, "elif_stmt": 430, "_pyast_if": 430, "else_block": 430, "invalid_elif_stmt": 430, "invalid_else_stmt": 430, "invalid_while_stmt": 430, "_pyast_whil": 430, "invalid_for_stmt": 430, "_pyast_for": 430, "_pyast_asyncfor": 430, "invalid_for_target": 430, "invalid_with_stmt_ind": 430, "asdl_withitem_seq": 430, "_pyast_with": 430, "_pyast_asyncwith": 430, "invalid_with_stmt": 430, "withitem_ti": 430, "_pyast_withitem": 430, "invalid_with_item": 430, "invalid_try_stmt": 430, "finally_block": 430, "_pyast_tri": 430, "asdl_excepthandler_seq": 430, "except_block": 430, "except_star_block": 430, "_pyast_trystar": 430, "excepthandler_ti": 430, "invalid_except_stmt_ind": 430, "_pyast_excepthandl": 430, "invalid_except_stmt": 430, "invalid_except_star_stmt_ind": 430, "invalid_finally_stmt": 430, "asdl_match_case_seq": 430, "_pyast_match": 430, "invalid_match_stmt": 430, "_pyast_tupl": 430, "_pypegen_seq_insert_in_front": 430, "match_case_ti": 430, "invalid_case_block": 430, "_pyast_match_cas": 430, "pattern_ti": 430, "asdl_pattern_seq": 430, "_pyast_matchsequ": 430, "pattern_capture_target": 430, "_pyast_matcha": 430, "invalid_as_pattern": 430, "asdl_seq_len": 430, "asdl_seq_get": 430, "_pyast_matchor": 430, "_pyast_matchvalu": 430, "complex_numb": 430, "_pyast_matchsingleton": 430, "literal_expr": 430, "_pyast_const": 430, "signed_real_numb": 430, "imaginary_numb": 430, "_pyast_binop": 430, "_pyast_unaryop": 430, "real_numb": 430, "_pypegen_ensure_r": 430, "_pypegen_ensure_imaginari": 430, "_pyast_attribut": 430, "asdl_seq": 430, "_pyast_matchstar": 430, "_pyast_matchmap": 430, "_pypegen_get_pattern_key": 430, "_pypegen_get_pattern": 430, "keypatternpair": 430, "_pypegen_key_pattern_pair": 430, "_pyast_matchclass": 430, "invalid_class_pattern": 430, "invalid_express": 430, "invalid_legacy_express": 430, "_pyast_ifexp": 430, "lambdef": 430, "_pyast_yieldfrom": 430, "_pyast_yield": 430, "bitwise_or": 430, "_pyast_star": 430, "_pyast_namedexpr": 430, "invalid_named_express": 430, "_pyast_boolop": 430, "compare_op_bitwise_or_pair": 430, "_pyast_compar": 430, "asdl_int_seq": 430, "_pypegen_get_cmpop": 430, "_pypegen_get_expr": 430, "cmpopexprpair": 430, "eq_bitwise_or": 430, "noteq_bitwise_or": 430, "lte_bitwise_or": 430, "lt_bitwise_or": 430, "gte_bitwise_or": 430, "gt_bitwise_or": 430, "notin_bitwise_or": 430, "in_bitwise_or": 430, "isnot_bitwise_or": 430, "is_bitwise_or": 430, "_pypegen_cmpop_expr_pair": 430, "tok": 430, "_pypegen_check_barry_as_flufl": 430, "bitwise_xor": 430, "bitwise_and": 430, "await_primari": 430, "_pyast_await": 430, "_pyast_cal": 430, "_pyast_subscript": 430, "_pyast_slic": 430, "invalid_group": 430, "lambda_param": 430, "_pyast_lambda": 430, "invalid_lambda_paramet": 430, "lambda_paramet": 430, "lambda_slash_no_default": 430, "lambda_param_no_default": 430, "lambda_param_with_default": 430, "lambda_star_etc": 430, "lambda_slash_with_default": 430, "invalid_lambda_star_etc": 430, "lambda_param_maybe_default": 430, "lambda_kwd": 430, "invalid_lambda_kwd": 430, "_pypegen_concatenate_str": 430, "_pyast_list": 430, "_pyast_set": 430, "double_starred_kvpair": 430, "_pyast_dict": 430, "_pypegen_get_key": 430, "_pypegen_get_valu": 430, "invalid_double_starred_kvpair": 430, "keyvaluepair": 430, "_pypegen_key_value_pair": 430, "kvpair": 430, "for_if_claus": 430, "asdl_comprehension_seq": 430, "comprehension_ti": 430, "_pyast_comprehens": 430, "_pyast_listcomp": 430, "invalid_comprehens": 430, "_pyast_setcomp": 430, "_pyast_generatorexp": 430, "_pyast_dictcomp": 430, "invalid_dict_comprehens": 430, "invalid_argu": 430, "_pypegen_collect_call_seq": 430, "_pypegen_dummy_nam": 430, "check_null_allow": 430, "_pypegen_seq_extract_starred_expr": 430, "asdl_keyword_seq": 430, "_pypegen_seq_delete_starred_expr": 430, "kwarg_or_star": 430, "kwarg_or_double_star": 430, "_pypegen_join_sequ": 430, "keywordorstar": 430, "invalid_kwarg": 430, "_pypegen_keyword_or_star": 430, "keyword_ti": 430, "_pyast_keyword": 430, "star_targets_list_seq": 430, "star_targets_tuple_seq": 430, "target_with_star_atom": 430, "t_primari": 430, "t_lookahead": 430, "star_atom": 430, "del_t_atom": 430, "_pypegen_seq_append_to_end": 430, "invalid_double_type_com": 430, "raise_syntax_error_known_loc": 430, "raise_syntax_error_known_rang": 430, "_pypegen_get_last_comprehension_item": 430, "pypegen_last_item": 430, "_pypegen_nonparen_genexp_in_cal": 430, "_pypegen_arguments_parsing_error": 430, "_without_invalid": 430, "expression_without_invalid": 430, "_pypegen_check_legacy_stmt": 430, "kf": 430, "dsfsdf": 430, "forgot": [430, 471], "_pypegen_get_expr_nam": 430, "invalid_ann_assign_target": 430, "raise_syntax_error_invalid_target": 430, "raise_indentation_error": 430, "invalid_parameters_help": 430, "raise_syntax_error": 430, "invalid_lambda_parameters_help": 430, "for_target": 430, "raise_syntax_error_starting_from": 430, "invalid_class_argument_pattern": 430, "pypegen_first_item": 430, "invalid_kvpair": 430, "raise_error_known_loc": 430, "anew": [431, 481, 482], "reinitialis": 431, "mpf": 431, "_init_module_attr": 431, "crucial": [431, 461], "atyp": 431, "module_repr": [431, 471, 472, 473, 476, 482], "searchabl": [431, 482], "subpackage1": 431, "modulex": 431, "moduley": 431, "subpackage2": 431, "modulez": 431, "modulea": 431, "volunt": [433, 467, 472], "lloyd": 433, "hugunin": 433, "lc_letter": 433, "vim": [434, 458, 476], "fileencod": 434, "bram": [434, 463], "moolenaar": 434, "2100": 434, "maart": 434, "mei": 434, "juni": 434, "augustus": 434, "septemb": [434, 461, 466, 475, 477], "oktob": 434, "uax": 434, "3131": [434, 469, 482], "xid_start": 434, "xid_continu": 434, "other_id_start": 434, "id_start": 434, "mc": [434, 482], "other_id_continu": 434, "id_continu": 434, "connector": 434, "proplist": 434, "normat": 434, "derivedcoreproperti": 434, "breakag": [434, 461, 462, 464, 473, 479, 482], "stringprefix": 434, "shortstr": 434, "longstr": 434, "shortstringitem": 434, "longstringitem": 434, "shortstringchar": 434, "stringescapeseq": 434, "longstringchar": 434, "bytesprefix": 434, "shortbyt": 434, "longbyt": 434, "shortbytesitem": 434, "longbytesitem": 434, "shortbyteschar": 434, "bytesescapeseq": 434, "longbyteschar": 434, "ur": [434, 469, 482], "reintroduc": [434, 471, 482], "codebas": [434, 472, 476, 477, 482], "ooo": 434, "xxxx": [434, 482], "xxxxxxxx": 434, "0o377": [434, 472, 482], "mistyp": 434, "literal_char": 434, "replacement_field": 434, "f_express": 434, "34567": [434, 478], "0x400": 434, "mill": 434, "decinteg": 434, "bininteg": 434, "octinteg": 434, "hexinteg": 434, "nonzerodigit": 434, "bindigit": 434, "0o177": 434, "0b100110111": 434, "79228162514264337593543950336": 434, "0xdeadbeef": 434, "100_000_000_000": 434, "0b_1110_0101": 434, "pointfloat": 434, "exponentfloat": 434, "digitpart": 434, "077e010": 434, "77e10": 434, "14e": 434, "14_15_93": 434, "14j": 434, "10j": 434, "001j": 434, "1e100j": 434, "14_15_93j": 434, "expression_stmt": 435, "assignment_stmt": 435, "augmented_assignment_stmt": 435, "annotated_assignment_stmt": 435, "pass_stmt": 435, "break_stmt": 435, "continue_stmt": 435, "future_stmt": 435, "3132": [435, 469], "augtarget": 435, "augop": 435, "expression1": 435, "expression2": 435, "tracebackobj": 435, "relative_modul": 435, "fbb": 435, "subpkg2": 435, "subpkg1": 435, "3104": [435, 469], "pythonrc": 437, "startup_fil": 437, "awk": [438, 461], "smalltak": 439, "pyhon": [439, 449], "the_answ": 439, "scope_test": 439, "do_loc": 439, "do_nonloc": 439, "do_glob": 439, "realpart": 439, "imagpart": 439, "canin": 439, "fido": 439, "buddi": 439, "add_trick": 439, "warehous": [439, 474], "w2": 439, "addtwic": 439, "derivedclassnam": 439, "baseclassnam": 439, "base3": 439, "_spam": 439, "items_list": 439, "__updat": 439, "mappingsubclass": 439, "_mapping__upd": 439, "_mappingsubclass__upd": 439, "str_iter": 439, "0x10c90e650": 439, "rev": 439, "0x00a1db50": 439, "golf": 439, "xvec": 439, "yvec": 439, "260": [439, 460, 468, 478], "unique_word": 439, "valedictorian": 439, "gpa": 439, "graduat": [439, 477, 480], "defenestr": 440, "han": [440, 464, 471, 482], "onor": 440, "active_us": 440, "myemptyclass": 440, "initlog": 440, "rust": 440, "http_error": [440, 471], "teapot": [440, 471, 482], "where_i": 440, "grass": [440, 471], "987": [440, 448, 449], "1597": 440, "10042ed0": 440, "fib2": [440, 449], "f100": 440, "ask_ok": 440, "ye": [440, 472, 482], "vooooom": 440, "bereft": 440, "daisi": 440, "cheeseshop": 440, "limburg": 440, "runni": 440, "shopkeep": 440, "palin": 440, "shop": [440, 453], "pos1": 440, "pos2": 440, "pos_or_kwd": 440, "kwd1": 440, "kwd2": 440, "standard_arg": 440, "pos_only_arg": 440, "kwd_only_arg": 440, "combined_exampl": 440, "pos_on": 440, "kwd_on": 440, "write_multiple_item": 440, "bleedin": 440, "demis": 440, "make_incrementor": 440, "uppercamelcas": 440, "lowercase_with_underscor": 440, "kiwi": 441, "tangerin": 441, "grape": 441, "7j": 441, "freshfruit": 441, "loganberri": 441, "passion": 441, "weapon": 441, "1416": 441, "14159": [441, 443], "comprehes": 441, "3x4": 441, "transposed_row": 441, "88888": 441, "basket": 441, "crabgrass": 441, "alacazam": [441, 465], "tel": 441, "sape": 441, "4139": 441, "brave": 441, "tic": 441, "tac": 441, "toe": 441, "raw_data": 441, "filtered_data": 441, "string3": 441, "trondheim": 441, "hammer": [441, 461], "non_nul": 441, "this_fail": 442, "hither": 442, "flew": 442, "bool_return": 442, "0001100110011001100110011001100110011001100110011": 443, "3602879701896397": 443, "10000000000000001": 443, "12g": [443, 461], "peril": 443, "3537115888337719": 443, "1125899906842624": 443, "921f9f01b866ep": 443, "7205759403792794": 443, "17f": 443, "36028797018963968": 443, "referendum": 445, "yes_vot": 445, "42_572_654": 445, "no_vot": 445, "43_132_495": 445, "vote": [445, 461, 466, 474], "42572654": 445, "40000": [445, 482], "dcab": 445, "7678": 445, "phone": [445, 474], "10d": 445, "eel": 445, "hovercraft": 445, "roach": [445, 478, 480, 482], "horribl": 445, "manfr": 445, "8637678": 445, "4d": 445, "729": 445, "00012": 445, "workfil": 445, "0123456789abcdef": 445, "6th": [445, 482], "korn": 446, "ipython": [446, 467, 471], "bpython": 446, "the_world_is_flat": 447, "666666666666667": 448, "ame": [448, 478], "thingi": 448, "ium": 448, "unununium": 448, "tho": 448, "supercalifragilisticexpialidoci": [448, 451], "fibo": 449, "itemnam": 449, "ufs": 449, "_framework": 449, "_git": 449, "_home": 449, "callstat": [449, 479, 481, 482], "wavread": 449, "wavwrit": 449, "aiffread": 449, "aiffwrit": 449, "auread": 449, "auwrit": 449, "vocod": 449, "karaok": 449, "echofilt": 449, "atten": 449, "subitem": 449, "subsubitem": 449, "specific_submodul": 449, "python312": [450, 451], "accesslog": 450, "installdir": [450, 455], "tea": 450, "70710678118654757": 450, "17970987693706186": 450, "6071428571428572": 450, "worldtimeapi": 450, "01t01": 450, "689215": 450, "soothsay": 450, "jcaesar": 450, "1964": 450, "14368": 450, "witch": 450, "wrist": 450, "226805979": 450, "57535828626024577": 450, "54962537085770791": 450, "teststatisticalfunct": 450, "test_averag": 450, "batteri": 450, "sqllite3": 450, "english_unit": 451, "conv": [451, 477], "villag": 451, "folk": 451, "nottingham": 451, "ditch": 451, "fund": [451, 461, 466, 472], "nottinghamfolk": 451, "unladen": [451, 474], "photofil": 451, "img_1074": 451, "img_1076": 451, "img_1077": 451, "batchrenam": 451, "seqnum": 451, "ashley_": 451, "ashley_0": 451, "ashley_1": 451, "ashley_2": 451, "iiihh": 451, "comp_siz": 451, "uncomp_s": 451, "filenames": 451, "extra_s": 451, "decoupl": [451, 472, 477, 479], "asynczip": 451, "4000": 451, "700": 451, "22222": 451, "26932": [451, 482], "task3": 451, "task4": 451, "unsearch": 451, "starting_nod": 451, "breadth_first_search": 451, "gen_mov": 451, "is_goal": 451, "lua": 451, "09999999999999995": 451, "142857142857142857142857142857142857": 451, "nova": 452, "136kb": 452, "whl": 452, "kenneth": 452, "reitz": 452, "kennethreitz": 452, "akuchl": 452, "596": [453, 481], "00797": 453, "pyvideo": 453, "bbdehiioqssuvvwx": 454, "0b2": [454, 482], "0c076caaa8": 454, "20161005": 454, "wdefault": [454, 468, 474, 482], "walway": [454, 464], "wmodul": 454, "wonc": 454, "wignor": 454, "wi": 454, "frozen_modul": [454, 482], "importlib_bootstrap": 454, "importlib_bootstrap_extern": 454, "showalloccount": [454, 478, 481, 482], "oldpars": [454, 481, 482], "qualif": [454, 476], "selftest": 454, "4294967295": [454, 478], "encodingnam": 454, "pythondumprefsfil": [454, 482], "_sqlite": [455, 482], "pylong_bits_in_digit": [455, 472, 482], "dbmlibord": [455, 468], "py_coerce_c_local": 455, "_bundl": [455, 471, 482], "pystat": [455, 482], "py_stat": 455, "summarize_stat": 455, "memf": 455, "noderawf": 455, "bolt": [455, 473, 482], "profile_task": [455, 481, 482], "clang": [455, 473, 476, 478, 482], "llvm": [455, 478, 482], "profdata": [455, 482], "interposit": [455, 471, 482], "testtimeout": [455, 482], "gold": 455, "thinlto": [455, 472, 473, 482], "fdata": 455, "gprof": [455, 465], "gettotalrefcount": [455, 482], "__lltrace__": [455, 482], "_pyobject_assert": 455, "ndebug": 455, "py_safe_downcast": 455, "valgrind": [455, 468, 474, 478, 482], "addresssanit": [455, 482], "asan": 455, "memorysanit": 455, "msan": 455, "undefinedbehaviorsanit": 455, "ubsan": [455, 482], "libpythonmajor": [455, 471, 482], "lib1": 455, "ffi": [455, 478, 482], "mpdec": 455, "with_editlin": 455, "have_libreadlin": 455, "fnv": [455, 476], "siphash13": [455, 472, 482], "universalsdk": [455, 466, 481, 482], "sdkdir": 455, "arch": [455, 467, 482], "universal2": [455, 481, 482], "config_sit": [455, 482], "aarch64": [455, 482], "ac_cv_buggy_getaddrinfo": 455, "ac_cv_file__dev_ptmx": 455, "ac_cv_file__dev_ptc": 455, "makesetup": [455, 472, 482], "buildbottest": 455, "autoconf": [455, 482], "distclean": [455, 482], "py_build_core_builtin": 455, "_asyncio": [455, 482], "py_build_core_modul": [455, 482], "pyapi_api": 455, "pyport": [455, 461, 482], "py_exported_symbol": 455, "py_imported_symbol": 455, "pyinit_xxx": [455, 482], "configure_cppflag": 455, "cppflag": [455, 464, 482], "basecppflag": 455, "py_cppflag": 455, "srcdir": [455, 474, 482], "cflags_nodist": [455, 482], "21121": [455, 482], "harden": [455, 482], "heighten": 455, "extra_cflag": 455, "configure_cflag": 455, "configure_cflags_nodist": 455, "basecflag": 455, "cflags_alias": 455, "ccshare": 455, "fpic": [455, 482], "cflagsforshar": 455, "py_cflag": [455, 482], "py_cflags_nodist": [455, 482], "py_stdmodule_cflag": [455, 482], "py_core_cflag": 455, "dpy_build_cor": [455, 482], "py_builtin_module_cflag": 455, "dpy_build_core_builtin": 455, "_testemb": [455, 482], "configure_ldflag": 455, "stomp": 455, "ldflags_nodist": 455, "35257": [455, 482], "configure_ldflags_nodist": 455, "lrt": 455, "ldshare": 455, "py_ldflag": 455, "bldshare": 455, "py_core_ldflag": 455, "py_ldflags_nodist": 455, "savag": 458, "bobsavag": 458, "pythonlaunch": 458, "textwrangl": 458, "barebon": 458, "textmat": [458, 476], "macrom": 458, "gvim": 458, "macvim": 458, "aquamac": 458, "qa1067": 458, "hashcollis": 458, "hkn": 458, "idle_intro": 458, "pyobjc": 458, "wxpython": 458, "riverbankcomput": 458, "pythonmac": 458, "maint": 459, "opensus": 459, "portal": 459, "fedoraproject": 459, "fedora_draft_document": 459, "rpm_guid": 459, "rpms": 459, "slackbook": 459, "slackwar": 459, "pkg_add": 459, "1p2": 459, "opencsw": 459, "python27": 459, "pki": 459, "install_sw": 459, "xzf": 459, "pushd": 459, "openssldir": 459, "j8": 459, "popd": 459, "team": [460, 461, 462, 463, 468, 472, 474, 476, 481, 482], "longpathsen": 460, "currentcontrolset": 460, "installallus": 460, "targetdir": [460, 482], "defaultalluserstargetdir": 460, "programfil": 460, "defaultjustformetargetdir": 460, "localappdata": 460, "defaultcustomtargetdir": 460, "associatefil": 460, "prependpath": [460, 472], "appendpath": [460, 472], "include_doc": 460, "include_debug": 460, "include_dev": 460, "include_ex": 460, "include_launch": 460, "installlauncherallus": 460, "include_lib": 460, "include_pip": 460, "include_symbol": 460, "include_tcltk": 460, "include_test": 460, "include_tool": 460, "launcheron": 460, "simpleinstal": 460, "simpleinstalldescript": 460, "elev": [460, 482], "unattend": [460, 482], "pythonsoftwarefound": 460, "8_qbz5n2kfra8p0": 460, "localcach": 460, "system32": 460, "windowsapp": 460, "package_nam": 460, "vfs": 460, "systemx86": 460, "test_fil": 460, "hklm": 460, "msix": 460, "uwp": 460, "nugetclidl": 460, "excludevers": 460, "outputdirectori": 460, "pythonx86": 460, "msbuild": [460, 482], "python37": 460, "ucrtbas": [460, 482], "anaconda": 460, "panda": 460, "conda": 460, "canopi": 460, "winpython": 460, "prebuilt": 460, "my_python_lib": 460, "procthread": 460, "set_1": 460, "wsl": 460, "pylauncher_no_search_path": 460, "shgetfolderpath": 460, "csidl_local_appdata": 460, "py_python": 460, "py_python3": 460, "pylauncher_debug": 460, "pylauncher_dryrun": 460, "pylauncher_allow_instal": [460, 482], "pylauncher_always_instal": 460, "rc_bad_venv_cfg": 460, "rc_create_process": 460, "rc_instal": 460, "rc_internal_error": 460, "rc_no_commandlin": 460, "rc_no_python": 460, "rc_no_venv_cfg": 460, "pythoncor": [460, 472, 482], "hive": 460, "hkcu": 460, "apploc": 460, "pythonxx": 460, "mfc": 460, "golden": [460, 476], "ongo": [460, 479], "mosh": [461, 462, 463, 465], "zadka": [461, 462, 463, 465], "steadi": 461, "paid": 461, "contractu": 461, "oblig": 461, "evolut": [461, 462], "6final": 461, "0beta1": 461, "fourfold": 461, "schneider": [461, 482], "kamp": 461, "checkin": 461, "submitt": 461, "ka": [461, 462, 463, 466], "yee": [461, 462, 463, 466], "scraper": 461, "indiffer": 461, "him": 461, "consensus": 461, "dissent": 461, "editori": 461, "lockstep": 461, "elementwis": [461, 462], "objectwis": 461, "536": 461, "countless": 461, "stormi": 461, "uhhhh": 461, "xhhhh": 461, "01ff": 461, "777": [461, 477], "setdefaultencod": 461, "unichr": [461, 463, 466], "encode_func": 461, "decode_func": 461, "stream_read": 461, "stream_writ": 461, "ustr": 461, "u2000ab": 461, "utf8_encod": 461, "utf8_decod": 461, "utf8_streamread": 461, "utf8_streamwrit": 461, "sre": [461, 463], "workhors": 461, "ewe": [461, 475], "argu": [461, 463, 468], "lengthier": [461, 462], "thoma": [461, 462, 465, 466, 467, 468, 471, 472, 476, 477, 478, 479, 482], "wouter": [461, 462, 465, 466, 467, 468, 477, 480, 482], "strop": 461, "hlinuxtnam": 461, "joke": [461, 482], "jpython": 461, "realis": 461, "myself": 461, "afford": 461, "tobi": [461, 482], "kelsey": 461, "tiedemann": 461, "neil": [461, 462, 463, 464, 466, 468, 474, 477, 478, 479, 480, 482], "schemenau": [461, 462, 463, 464, 466, 468, 474, 477, 480], "overrod": 461, "tismer": [461, 476], "rewrot": [461, 464, 482], "jeremi": [461, 462, 463, 464, 465, 466, 467, 468, 482], "hylton": [461, 462, 463, 464, 465, 466, 467, 468], "isomorph": 461, "trashcan": [461, 472, 481, 482], "__cmp__": [461, 462, 464, 467, 468, 469], "itanium": [461, 477], "trent": [461, 464, 466, 476], "pythonc": 461, "dyld": [461, 482], "wart": [461, 469], "291": 461, "1beta1": 461, "runaway": 461, "gpf": 461, "find_recursionlimit": 461, "listobject": 461, "no_strict_list_append": 461, "0alpha1": 461, "gvr": [461, 463, 464, 465, 468, 478], "reaction": [461, 462], "x123456": 461, "3l": 461, "abcabcabc": 461, "4l": 461, "18446744073709551616": [461, 468], "subtlest": 461, "longval": 461, "17g": [461, 470], "0999999999999996": 461, "fulton": [461, 465, 478, 482], "extensionclass": 461, "myextensionclass": 461, "importdl": 461, "reorganis": 461, "dynload_": 461, "vladimir": [461, 462, 464, 471, 480, 482], "marangozov": [461, 462, 464], "pymem": [461, 466], "objimpl": 461, "gusi": 461, "yakov": 461, "markovitch": 461, "charl": [461, 468, 475, 476, 477, 478, 479, 482], "waldman": 461, "affair": 461, "arduous": 461, "ritual": 461, "shepherd": [461, 464], "tarbal": [461, 482], "py_modul": 461, "module1": 461, "module2": 461, "expat_extens": 461, "xml_ns": 461, "include_dir": 461, "xmltok": 461, "xmlpars": 461, "xmlrole": 461, "sdist": [461, 462, 466, 468, 478, 479, 482], "bdist_rpm": [461, 482], "bdist_wininst": [461, 471, 480, 481, 482], "xmllib": 461, "mullend": [461, 467], "tag1": 461, "perslist": 461, "persona": 461, "claudius": 461, "denmark": 461, "son": 461, "nephew": 461, "20th": 461, "4dom": 461, "fourthought": 461, "xmlproc": 461, "lar": [461, 464, 465, 466, 467, 468, 474, 475], "garshol": 461, "sgmlop": 461, "gallew": 461, "httplib": [461, 464, 465, 467, 468, 469, 482], "create_lin": 461, "create_polygon": 461, "oliv": [461, 482], "andrich": 461, "hewlett": 461, "packard": 461, "cmpcach": 461, "macmillan": 461, "twin": 461, "sunaudiodev": [461, 467], "bosch": 461, "prescod": [461, 462, 463, 466], "spider": 461, "fetchabl": 461, "browsercontrol": 461, "tutt": 461, "imputil": [461, 464, 468], "ihook": [461, 464, 467, 468], "vanilla": 461, "stdwin": 461, "packmail": 461, "whatsound": 461, "zmod": 461, "bolen": [461, 463], "gregg": 461, "hauser": 461, "detlef": [461, 464], "lannert": [461, 464], "aahz": [461, 465, 466], "maruch": 461, "tobia": 461, "polzin": 461, "russ": 461, "schmidt": 461, "sizabl": [462, 463], "clumsier": [462, 463], "list_attribut": [462, 463], "unknow": [462, 463], "gradual": [462, 463], "compulsori": [462, 463, 464], "crunch": 462, "tp_richcmp": 462, "ascher": 462, "toolbox": [462, 463, 464], "aycock": 462, "spark": [462, 482], "135143996": 462, "py_tpflags_checktyp": 462, "middleton": 462, "vault": 462, "parnassus": 462, "retir": [462, 482], "wayback": 462, "catalogu": 462, "bdist_": 462, "sean": [462, 464, 465, 466, 468, 482], "reifschneid": [462, 464, 465, 466, 468], "addict": 462, "purcel": 462, "gellekum": 462, "ninth": 462, "edward": [462, 463, 465, 466], "136": 462, "underestim": [462, 463, 464, 465, 466, 467], "afoul": [462, 464], "getc": 462, "jeff": [462, 464, 476, 478, 482], "epler": 462, "fuller": 462, "preliminari": [462, 471, 479, 482], "ben": [462, 466, 477, 482], "wolfson": 462, "vestigi": [462, 482], "ancestri": 462, "shrunk": [462, 482], "340k": 462, "majewski": 462, "jason": [462, 464, 467, 473, 476, 480, 481, 482], "tishler": [462, 464, 482], "risco": [462, 469], "dietmar": 462, "schwertberg": 462, "unixwar": 462, "billi": 462, "alli": 462, "graem": 462, "goodger": [462, 463, 465], "grave": 462, "irregular": 463, "dark": [463, 482], "safeguard": 463, "esoter": [463, 466], "lockablefil": 463, "posixfil": [463, 467], "__methods__": [463, 469, 482], "inaccur": [463, 465, 482], "defstat": 463, "eiffel": 463, "postcondit": 463, "eiffelmethod": 463, "pre_f": 463, "post_f": 463, "get_par": 463, "__coerce__": [463, 468], "get_siz": 463, "set_siz": 463, "new_attr": 463, "whet": 463, "appetit": 463, "corp": 463, "0x8116870": 463, "crew": [463, 464, 466], "0x8117f90": [463, 464], "cs": [463, 464], "arizona": [463, 464], "ipd266": [463, 464], "harbor": [463, 464], "magnus": [463, 464], "hetland": [463, 464], "1234567890123": 463, "1234567890123l": 463, "18446744073709551616l": 463, "herald": 463, "erupt": 463, "storm": 463, "sarcast": 463, "110000": 463, "261": [463, 482], "x9c": 463, "xc9": 463, "xc1": 463, "nand": 463, "666": 463, "m2": [463, 468, 472, 475], "5r92": 463, "qe": 463, "ee8v4": 463, "v8": 463, "f5d": 463, "6yd86yt": 463, "f5r": 463, "f5r8f": 463, "s92p": 463, "86yd": 463, "5t": 463, "71i": 463, "5x": [463, 478, 479, 482], "sheesh": 463, "furrfu": 463, "__unicode__": [463, 468], "headlin": 463, "oreillynet": 463, "meerkat": 463, "getchannel": 463, "freshmeat": 463, "4549": 463, "3dgamer": 463, "52719": 463, "xsl": 463, "html2fo": 463, "2104": 463, "memberst_mtim": 463, "mathewson": 463, "ichiro": 463, "itojun": 463, "hagino": 463, "bigcharset": 463, "2487": 463, "pier": [463, 464], "lauder": [463, 464], "anthoni": [463, 465, 466, 479, 480, 481, 482], "baxter": [463, 465, 466], "michel": [463, 464, 475, 476, 477, 478, 479, 480, 481, 482], "pelleti": 463, "rfc2822": 463, "grunt": 463, "generator": 463, "itamar": 463, "shtull": 463, "traur": 463, "py_tpflags_gc": 463, "pytpflags_have_gc": 463, "pyobject_gc_init": 463, "pyobject_gc_fini": 463, "pygc_head_s": 463, "pyobject_as_gc": 463, "pyobject_from_gc": 463, "untyp": 463, "vsprintf": 463, "overrun": [463, 468, 482], "527": 463, "683": 463, "82": 463, "blown": 463, "osa": 463, "quicktim": 463, "cleanfutur": 463, "gpled": 463, "ftpmirror": 463, "romberg": 463, "pyrange_new": [463, 466], "sneakili": 463, "rhythm": 463, "borland": [463, 482], "stephen": [463, 472, 482], "hansen": [463, 481, 482], "generous": [463, 472], "installermast": 463, "0a": 463, "stolk": 463, "bremmer": 463, "keith": 463, "brigg": 463, "carel": [463, 482], "felling": 463, "mclay": 463, "donnel": 463, "joona": 463, "paalasma": 463, "jen": [463, 482], "reinhardt": 463, "welbourn": 463, "polish": 464, "berkeleydb": [464, 467, 468, 482], "immutableset": [464, 465], "union_upd": 464, "ungain": 464, "martelli": [464, 467], "suzuki": 464, "hisao": 464, "nyman": 464, "inadequ": 464, "hodgson": 464, "irrit": 464, "__builtin__": [464, 469, 470], "walter": [464, 465, 466, 467, 480], "rwald": [464, 465, 466, 480], "heart": 464, "quixot": 464, "richard": [464, 466, 467, 475, 476, 482], "toss": 464, "sundri": 464, "kevin": [464, 465, 467, 468, 473, 474, 482], "alti": 464, "cole": [464, 465, 474, 482], "mcnamara": [464, 466], "cliff": [464, 468], "cpickl": [464, 466, 468, 469], "fanciest": 464, "__safe_for_unpickling__": 464, "rip": 464, "dcba": 464, "innocu": 464, "welter": 464, "fakeseq": 464, "calc_item": 464, "underw": [464, 465, 466, 467], "dylan": 464, "simionato": 464, "029035": 464, "pedroni": [464, 466], "setcheckinterv": [464, 481, 482], "getcheckinterv": [464, 481, 482], "_socket": [464, 482], "u4000": 464, "u4001abc": 464, "simon": [464, 482], "brun": 464, "0045": 464, "goofi": 464, "0goofi": 464, "oren": [464, 475, 479, 482], "tirosh": [464, 475], "christoph": [464, 477, 482], "craig": [464, 482], "set_lineno": 464, "idiosyncrasi": [464, 482], "hotspot": 464, "pyston": [464, 465, 466, 469, 482], "orendorff": [464, 467], "bsddb185": 464, "db2pickl": 464, "pickle2db": 464, "bsddb3": [464, 469], "sampmodul": 464, "samp": 464, "cpp": [464, 482], "robert": [464, 466, 467, 468, 477, 479, 482], "weber": [464, 477, 482], "strand": [464, 465], "lg": 464, "xlinux": 464, "dad": 464, "priorityqu": 464, "connor": [464, 476, 478, 482], "idlefork": 464, "tino": 464, "deg": 464, "loadavg": 464, "geert": [464, 477, 482], "otkidach": 464, "stat_float_tim": [464, 466, 475, 479, 482], "1034791200": 464, "6335014": 464, "fitzroy": 464, "dale": [464, 475], "tu": 464, "sn": 464, "nos": 464, "3407": 464, "3805": 464, "1505": 464, "7023": 464, "2401": 464, "2267": 464, "9733": 464, "8083": 464, "9195": 464, "rexec": 464, "bastion": 464, "rotor": [464, 465], "gilfix": 464, "collabor": 464, "exc_clear": [464, 469], "gust": [464, 465, 466, 467, 468, 474, 475], "whit": 464, "defi": 464, "auguri": 464, "sparrow": 464, "tis": [464, 465, 482], "dummy_thread": [464, 479, 481, 482], "timer1": 464, "timer2": 464, "laptop": 464, "36831796169281006": 464, "37441694736480713": 464, "35304892063140869": 464, "17574405670166016": 464, "18193507194519043": 464, "17565798759460449": 464, "031107": 464, "tcl_obj": [464, 482], "wantobject": [464, 482], "tkapp": [464, 482], "dictmixin": 464, "seqdict": 464, "lookalik": 464, "keylist": [464, 465], "valuelist": 464, "quinlan": [464, 465, 468, 474], "3491": 464, "30t21": 464, "994956": 464, "827738": 464, "optik": [464, 465, 466], "0x400cad4c": 464, "0x400cad2c": 464, "iinput": 464, "llength": 464, "undistinguish": 464, "pymemcompat": 464, "libpython2": 464, "ondrej": 464, "palkovski": 464, "dl_export": 464, "dl_import": 464, "pyapi_data": [464, 482], "pyarg_noarg": 464, "pystring_new": 464, "test_bufio": 464, "emx": 464, "macintyr": [464, 466], "weaklink": [464, 481, 482], "atheo": [464, 482], "hurd": [464, 482], "openvm": 464, "mist": 464, "nifti": 464, "richi": 464, "hindl": 464, "0xffffffff": [464, 478, 482], "0xffffffffl": 464, "get_distutil_opt": 464, "bauer": 464, "chermsid": 464, "fraser": 464, "kelli": [464, 475, 476], "gerber": 464, "chris": [464, 466, 467, 475, 477, 478, 482], "lambert": [464, 476], "lalo": 464, "netzer": 464, "nowak": 464, "francesco": 464, "ricciardi": 464, "suzi": 464, "radic": 465, "481": 465, "arbcd": 465, "wxi": 465, "unif": 465, "8589934592": 465, "svensson": 465, "get_all_link": 465, "jiwon": [465, 475], "seo": [465, 475], "hye": [465, 466], "shik": [465, 466], "untrain": 465, "deco": 465, "0x402ef0d4": 465, "require_int": 465, "_deco": 465, "bend": 465, "func_nam": [465, 469], "smith": [465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "979728": 465, "russel": 465, "pythondecoratorlibrari": 465, "dpkg": 465, "deb": 465, "unawar": 465, "0001100110011": 465, "inaccuraci": [465, 468], "1000000000000001": [465, 470], "magnifi": 465, "dodg": 465, "12f": 465, "100000000000": 465, "7956": 465, "64739884393063583815028902": 465, "1275": 465, "9184": 465, "123456789012": 465, "351364": 465, "18288201344": 465, "18288201344j": 465, "1828820134592177245001": 465, "facundo": [465, 467], "batista": [465, 467], "lahey": 465, "speleotrov": 465, "cowlishaw": 465, "rexx": 465, "resolve_dotted_attribut": 465, "dima": 465, "dorfman": 465, "gtk": [465, 467], "pyos_ascii_strtod": [465, 468, 470], "pyos_ascii_atof": [465, 468, 470], "pyos_ascii_formatd": 465, "buf_len": 465, "glib": 465, "relicens": 465, "donat": 465, "rei": 465, "carneiro": 465, "colormap": 465, "overflowwarn": 465, "method_descriptor": 465, "armin": [465, 466, 467, 468, 470, 474, 475, 476, 482], "rigo": [465, 466, 467, 482], "vasiliev": 465, "cjkcodec": [465, 482], "prc": 465, "roc": 465, "roman8": [465, 482], "iso_8859": 465, "pctp": 465, "belmont": [465, 471, 472, 482], "rg": 465, "lehmann": 465, "gass": 465, "tenfold": 465, "eland": 465, "yves": [465, 472], "dionn": 465, "arnaud": [465, 475], "mazin": 465, "key_val": 465, "0x402c2080": 465, "0x402c2090": 465, "bookmark": 465, "rgen": [465, 482], "erhard": 465, "extractor": 465, "cryptoapi": 465, "trevor": 465, "perrin": [465, 471], "beni": 465, "cherniavski": 465, "raynor": 465, "hector": 465, "urtubia": 465, "30000": 465, "sidestep": 465, "unlucki": [465, 482], "mpz": 465, "jar": 465, "loper": 465, "ambiti": 465, "objn": 465, "py_is_nan": 465, "tsc": 465, "pentium": 465, "misnam": [465, 474], "tracebackobject": 465, "pytracebackobject": 465, "dircach": [465, 467], "koray": 465, "dyck": 465, "hurt": 465, "hamish": 465, "lawson": 465, "sadruddin": 465, "rejeb": 465, "august": 466, "356": 466, "458": 466, "true_valu": 466, "false_valu": 466, "voter": 466, "true_v": 466, "false_v": 466, "rarer": 466, "pygtk": 466, "open_item": 466, "open_func": 466, "item_path": 466, "popup_menu": 466, "pypackag": 466, "numarray": 466, "oldpackag": 466, "gpg": 466, "unclean": [466, 482], "holger": 466, "krekel": 466, "tidier": 466, "pylib": 466, "pycheck": 466, "exception1": 466, "exception2": 466, "hackish": 466, "trivia": 466, "phillip": [466, 467, 470, 474, 478, 482], "ebi": [466, 467, 470, 474], "288": 466, "20160321211320": 466, "sidh": 466, "000178": 466, "sugalski": 466, "db_connect": [466, 467], "databaseconnect": [466, 467], "flawless": [466, 467], "db_transact": [466, 467], "mgr1": [466, 467], "mgr2": [466, 467], "version2": 466, "whatsnew": [466, 482], "lp64_wp": 466, "travi": [466, 467, 468, 482], "oliph": [466, 467, 468], "zerodict": 466, "is_image_fil": 466, "lynn": 466, "bethard": [466, 468, 474, 477, 482], "puzzl": 466, "newbi": [466, 468], "needforspe": 466, "sprint": [466, 467], "reykjavik": 466, "ewt": 466, "llc": 466, "ccp": 466, "mcintyr": [466, 467], "ippolito": [466, 467, 468, 470], "diederich": [466, 470], "immisch": 466, "nel": 466, "mezzo": 466, "cammin": 466, "nostra": 466, "vita": 466, "ritrovai": 466, "una": 466, "selva": 466, "oscura": 466, "che": 466, "diritta": 466, "smarrita": 466, "init_lett": 466, "hotshot": 466, "josh": [466, 467, 477, 478, 480, 481, 482], "spoerri": 466, "bjorn": [466, 482], "tillenius": 466, "gregori": [466, 467, 468, 470, 471, 472, 476, 478, 479, 480, 482], "schroeder": [466, 482], "antti": 466, "louko": 466, "diego": [466, 480], "petten": 466, "goir": 466, "pybench": [466, 482], "regsub": 466, "statcach": 466, "tzpars": 466, "whrandom": 466, "kiendl": 466, "biondi": 466, "netlink": 466, "linuxjourn": 466, "7356": 466, "group_mask": 466, "getfamili": 466, "getproto": 466, "ih3": 466, "187": 466, "blai": 466, "subvers": [466, 467, 468, 474, 479, 482], "45313": 466, "45315": 466, "45355": 466, "45356m": 466, "iterkeyref": 466, "itervalueref": 466, "oleg": [466, 473, 482], "broytmann": 466, "oussoren": [466, 467, 468, 474, 476, 481], "atle": [466, 482], "heller": [466, 467, 468], "dl": [466, 467, 482], "strfri": 466, "71828": 466, "1783957616": 466, "20180410025338": 466, "theller": 466, "elementpath": [466, 479], "20201124024954": 466, "effbot": [466, 468], "textnod": 466, "rss10": 466, "svg": 466, "10px": 466, "320px": 466, "tran": 466, "qti": 466, "msoft": 466, "140000000000001": 466, "wsgi_app": 466, "20160331090247": 466, "supervis": 466, "market": 466, "for_loop": 466, "339": 466, "pyparser_astfromstr": [466, 471, 482], "pyparser_astfromfil": [466, 471, 482], "pyast_compil": [466, 471, 482], "ehresman": [466, 482], "kurt": 466, "kaiser": [466, 482], "evan": [466, 481, 482], "256k": 466, "py_loc": 466, "py_local_inlin": 466, "py_local_aggress": 466, "pyerr_warn": 466, "lll": [466, 482], "2573": 466, "pymem_": 466, "_malloc": 466, "_free": 466, "ralf": [466, 467], "gross": [466, 482], "kunstlev": 466, "iain": 466, "pryor": 466, "rovner": 466, "weikart": 466, "361": 467, "redesign": [467, 468, 476], "259": [467, 482], "py3kwarn": 467, "py_py3kwarningflag": 467, "3xxx": 467, "3100": 467, "committe": 467, "jira": 467, "launchpad": 467, "trac": 467, "upfront": 467, "stellenbosch": 467, "africa": 467, "1980s": 467, "1990s": [467, 482], "ream": 467, "toolchain": [467, 478, 482], "dozen": [467, 474, 482], "python26": 467, "39916800": 467, "51090942171709440000": 467, "8222838654177922817725562880000000": 467, "33452526613163807108170062053440751665152000000000": 467, "mgr": 467, "15511187532873822802242430164693032110632597200169861120000": 467, "jess": [467, 470, 477, 478, 479, 482], "noller": [467, 470], "oudkerk": [467, 475, 476, 482], "last_login": 467, "npython": 467, "61261m": 467, "5367": 467, "mp4": 467, "banquet": 467, "invoic": 467, "750000e": 467, "6564": 467, "talin": 467, "u751f": 467, "u3080": 467, "u304": 467, "u3000": 467, "u3054": 467, "u3081": 467, "u305f": 467, "u307": 467, "pystringobject": 467, "u21ef": 467, "u3244": 467, "x87": 467, "x89": 467, "u31ef": 467, "ttys": 467, "cstringio": [467, 469], "stutzbach": [467, 468, 474], "verdon": 467, "doerwald": 467, "lownd": 467, "pybuf_lock": 467, "carl": [467, 468, 473, 474, 475, 480, 481, 482], "bank": 467, "vagu": 467, "printabletyp": 467, "drawabl": 467, "draw_doubl": 467, "aranguren": 467, "0o21": 467, "0b101111": 467, "052": 467, "173": 467, "0b10101101": 467, "1101": 467, "0b1101": 467, "patrick": [467, 471, 482], "maupin": 467, "undergo": 467, "yasskin": [467, 468, 474], "guil": 467, "r5rs": 467, "66666666666666663": 467, "40000000000000002": 467, "7074029114692207l": 467, "2251799813685248l": 467, "6004799503160661l": 467, "18014398509481984l": 467, "andi": [467, 470, 482], "chu": [467, 470], "1739468": [467, 470, 477], "2196": 467, "ud": 467, "1686487": 467, "amauri": [467, 468, 470, 474, 482], "forgeot": [467, 468, 470, 474, 482], "3473": 467, "2719": 467, "abc123": 467, "cdf246": 467, "1635": 467, "1640": 467, "3008": 467, "e000000000000p": 467, "5555555555555p": 467, "niceti": 467, "dickinson": [467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "2235": 467, "austin": 467, "1537": 467, "1473257": 467, "1444529": 467, "cplx": 467, "1491866": 467, "bengt": 467, "richter": 467, "1193128": 467, "1591665": 467, "im_self": 467, "1631171": 467, "jacob": [467, 472, 482], "1700288": 467, "py_tpflags_have_version_tag": [467, 482], "1878": 467, "pitrou": [467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "1819": 467, "jvm": 467, "josiah": [467, 475], "carlson": [467, 475], "1736190": 467, "jes": [467, 468, 475, 478, 479, 482], "cea": [467, 468, 475, 478, 479, 482], "avi": [467, 468, 475, 478, 479, 482], "jcea": [467, 468, 469], "programacion": [467, 469], "dbshelv": 467, "barn": [467, 479, 482], "fiori": 467, "nubi": 467, "1817": 467, "600362": 467, "1381": 467, "var_typ": 467, "amplitud": 467, "dq": 467, "arvin": 467, "schnell": 467, "1638033": 467, "fabian": 467, "kreutz": 467, "insert_mod": 467, "1158": 467, "7182818": 467, "9999999895305022877376682436": 467, "1221598": 467, "1739906": 467, "1001604": 467, "iter1": 467, "iter2": 467, "getmoduleinfo": [467, 478, 482], "getarg": [467, 482], "izip_longest": 467, "2n": [467, 482], "2138": 467, "brouwer": 467, "2819": 467, "711019": 467, "lenton": 467, "wine": [467, 482], "petrosyan": 467, "inst_nam": 467, "_helper": 467, "levinson": 467, "1663329": 467, "horcicka": 467, "1181": 467, "1273829": 467, "1115886": 467, "barran": 467, "1339796": 467, "957650": 467, "1393667": 467, "1106316": 467, "exception_hierarchi": 467, "2439": 467, "achim": 467, "gaedk": 467, "1137": 467, "shawn": 467, "ligocki": 467, "1727780": 467, "wladmir": 467, "laan": 467, "1681432": 467, "hoyt": [467, 477, 482], "schmitt": 467, "846388": 467, "3487": 467, "lorenz": [467, 482], "2250": 467, "1861": 467, "pollobj": 467, "1657": 467, "ziad": [467, 468, 474, 477, 482], "2663": 467, "1583": 467, "guilherm": [467, 468, 470, 476, 478, 479, 482], "polo": [467, 468, 470, 476, 478, 479, 482], "2240": 467, "2033": 467, "leif": 467, "hedstrom": 467, "957003": 467, "3207": 467, "fenner": 467, "829951": 467, "alberto": [467, 475], "bertog": 467, "1646": 467, "pomran": 467, "pedro": 467, "werneck": 467, "742598": 467, "1193577": 467, "remahl": 467, "1534": 467, "schuppeni": 467, "2898": 467, "1648": 467, "damien": [467, 476], "miller": [467, 476], "1537850": 467, "dustin": [467, 482], "mitchel": [467, 472, 482], "test_support": [467, 469], "transientresourc": 467, "3781": 467, "wrec": 467, "dwayn": 467, "bailey": 467, "1581073": 467, "2871": 467, "erik": [467, 472, 479, 482], "demain": 467, "1533909": 467, "2906": 467, "gregor": 467, "lingl": 467, "1513695": 467, "ftpwrapper": [467, 482], "3811": 467, "1599845": 467, "_send_traceback_head": 467, "1330538": 467, "riku": 467, "lindblad": 467, "2985": 467, "251": 467, "sysmodul": 467, "467924": 467, "horler": 467, "1775025": 467, "alexey": [467, 476, 477, 482], "borzenkov": 467, "1734346": 467, "ronach": [467, 468, 470, 474, 475, 476], "abcdefghijklm": 467, "iterable1": 467, "__hex__": [467, 469], "__oct__": [467, 469], "in_json": 467, "simplejson": [467, 468], "data_struct": 467, "lastaccess": 467, "plist_str": 467, "writeplisttostr": 467, "new_struct": 467, "readplistfromstr": 467, "writeplist": [467, 476], "readplist": [467, 476, 479, 482], "1649190": 467, "outset": 467, "1798": 467, "janssen": 467, "bgenloc": 467, "buildtool": 467, "bundlebuild": [467, 482], "fpformat": 467, "gensuitemodul": 467, "imageop": 467, "imgfil": 467, "mhlib": 467, "mimetool": 467, "multifil": 467, "toaiff": 467, "gopherlib": [467, 469], "mimewrit": 467, "mimifi": 467, "rgbimg": 467, "duncan": 467, "grisbi": 467, "pyfile_incusecount": 467, "pyfile_decusecount": 467, "1675423": 467, "1629": 467, "1530959": 467, "free_list": [467, 482], "numfre": 467, "_maxfreelist": 467, "patchcheck": [467, 482], "nt4": 467, "sp4": 467, "1753245": 467, "flori": 467, "bruynoogh": 467, "2125": 467, "macf": 467, "macostool": 467, "1490190": 467, "_builtinsuit": 467, "aepack": 467, "aetool": 467, "aetyp": 467, "applesingl": 467, "appletrawmain": 467, "appletrunn": 467, "argvemul": 467, "audio_mac": 467, "autogil": 467, "carbon": [467, 474], "cfmfile": 467, "codewarrior": 467, "colorpick": 467, "easydialog": 467, "findertool": 467, "icglu": 467, "icopen": 467, "macerror": 467, "macresourc": 467, "miniaefram": 467, "nav": [467, 482], "osaterminolog": 467, "pimp": 467, "pixmapwrapp": 467, "stdsuit": 467, "systemev": 467, "terminalcommand": 467, "cddb": 467, "cdplayer": 467, "fl": 467, "flp": 467, "fm": 467, "glws": 467, "gl": 467, "panelpars": 467, "readcd": 467, "sv": 467, "torgb": 467, "videoread": 467, "1683368": 467, "conversionsyntax": 467, "1706815": 467, "dict1": 467, "dict2": 467, "ralph": 467, "corderoy": 467, "lambach": 467, "michlmayr": 467, "warner": 467, "373": 468, "7319": 468, "reenabl": 468, "qwarn": 468, "744": 468, "073": [468, 482], "709": 468, "551": 468, "616": [468, 481, 482], "is_verbos": 468, "bore": 468, "1mb": 468, "configdict": 468, "netlog": 468, "netlogg": 468, "vk": 468, "revamp": [468, 474], "vassalotti": [468, 470, 474, 476, 482], "0x37f850": 468, "0x37f080": 468, "122": [468, 478], "mb": [468, 482], "2335": 468, "aaa": 468, "aaaaa": 468, "2333": 468, "codereview": 468, "appspot": [468, 470, 474], "53094": [468, 470, 474], "icc": [468, 470, 482], "suncc": 468, "7117": 468, "295147905179352891391": 468, "9514790517935283e": 468, "65535l": 468, "9514790517935289e": 468, "3166": 468, "1811": 468, "meador": [468, 475, 482], "5211": 468, "5237": [468, 470], "1588": 468, "7988": 468, "3382": 468, "7994": [468, 476], "124": [468, 470, 474, 476], "johansson": [468, 470], "victor": [468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "stinner": [468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "3439": [468, 470], "7902": 468, "1583863": 468, "4759": 468, "5982": 468, "7604": 468, "belchenko": 468, "1616979": [468, 474], "8016": 468, "kaliszewski": 468, "4764": 468, "5677": 468, "lingard": 468, "7362": 468, "8268": 468, "7140": 468, "curtin": [468, 474, 475, 476, 479], "survivor": 468, "4074": 468, "4688": [468, 470], "long_info": 468, "4258": [468, 470, 480], "5260": 468, "5512": 468, "1087418": 468, "5176": 468, "4715": 468, "gawain": [468, 474], "bolton": [468, 474], "6713": [468, 474], "florent": [468, 474], "xicluna": [468, 474], "7462": [468, 474], "7622": [468, 474], "mcguir": [468, 470], "5084": [468, 470], "5670": 468, "maru": 468, "senthil": [468, 471, 474, 476, 477, 478, 479, 480, 481, 482], "kumaran": [468, 471, 474, 476, 477, 478, 479, 480, 481, 482], "5142": 468, "7703": 468, "2devel9": 468, "8156": 468, "hagen": [468, 482], "rstenau": [468, 482], "3860": 468, "1696199": [468, 470], "field1": 468, "field2": 468, "_2": [468, 470], "1818": [468, 470], "8729": 468, "kindahl": 468, "7005": 468, "3924": 468, "1515": 468, "4606": 468, "klose": [468, 475, 478], "8142": 468, "5788": 468, "strive": 468, "4796": 468, "2531": [468, 474], "8257": [468, 474], "6595": 468, "jos": [468, 482], "conti": 468, "7633": 468, "6857": 468, "7279": 468, "anatoli": 468, "techtonik": 468, "7585": 468, "8688": 468, "lennart": [468, 482], "regebro": [468, 482], "7490": 468, "murray": [468, 474, 476, 477, 478, 482], "1368247": 468, "5812": 468, "8294": [468, 474], "oversight": [468, 475, 477, 479, 482], "giampaolo": [468, 474, 475, 477, 479, 480, 482], "rodola": [468, 474, 477, 479, 482], "2054": 468, "mouzo": 468, "6845": 468, "5479": 468, "nir": [468, 474, 475, 479, 482], "7471": [468, 474], "jacqu": 468, "frechet": 468, "4272": 468, "tadek": 468, "pietraszek": 468, "2846": [468, 474], "chenet": [468, 474], "7418": [468, 474], "kristj": [468, 474, 476], "valur": [468, 474, 476], "nsson": [468, 474, 476], "4879": 468, "eldon": 468, "ziegler": 468, "derek": [468, 470], "morr": [468, 470], "1655": [468, 470], "_pyio": [468, 470, 473, 482], "4991": 468, "chambon": 468, "6939": 468, "5032": 468, "4816": 468, "4136": [468, 470], "5381": 468, "1607951": 468, "6896": 468, "nirina": 468, "raseliarison": 468, "3366": 468, "lekma": 468, "5585": 468, "cazabon": 468, "6963": 468, "1664": [468, 470], "6508": 468, "calderon": [468, 475], "7333": 468, "zsolt": [468, 482], "cserna": [468, 482], "7242": 468, "matt": [468, 476, 477, 482], "giuca": 468, "5827": 468, "3426": [468, 482], "laban": [468, 470], "4739": [468, 470], "6816": 468, "specialfileerror": 468, "3002": 468, "francoi": 468, "natali": [468, 475, 476, 477], "8354": 468, "6693": [468, 474], "8104": 468, "nagl": [468, 482], "disable_nagle_algorithm": 468, "6192": 468, "6267": 468, "7133": 468, "ssl_mode_auto_retri": 468, "8222": 468, "8322": [468, 474], "beda": 468, "kosata": 468, "8484": [468, 474], "8321": [468, 474], "bbhhiillqq": 468, "1523": 468, "8300": 468, "disk0s2": 468, "52g": 468, "49g": 468, "0g": [468, 482], "1068268": 468, "8451": 468, "4285": [468, 470], "7766": 468, "unnot": 468, "7357": 468, "lesher": [468, 482], "1674032": 468, "unihan": 468, "ander": [468, 471, 479, 482], "chrigstr": 468, "1571184": 468, "8024": 468, "2987": [468, 474], "1080": 468, "200c": 468, "417a": 468, "ampersand": 468, "stylesheet": [468, 482], "style1": 468, "muller": 468, "2746": 468, "encode_threshold": 468, "5511": 468, "kuba": 468, "wieczorek": 468, "4710": 468, "7610": [468, 474], "gabriel": [468, 472, 482], "genellina": 468, "4756": 468, "6003": 468, "anydbm": [468, 469], "file_util": [468, 482], "distutils2": 468, "tck": 468, "tcl8": 468, "tkcmd": 468, "ttk_intro": 468, "screenshot": 468, "2983": [468, 470], "franklin": 468, "walzer": [468, 474, 482], "2618": 468, "unittest2": 468, "nose": 468, "6001": 468, "impati": 468, "dyer": 468, "8074": 468, "1034053": 468, "5663": 468, "4444": 468, "5679": 468, "2578": 468, "7031": 468, "assertnotregexpmatch": [468, 473], "8038": 468, "assertitemsequ": 468, "assertdictcontainssubset": [468, 470, 473, 474, 482], "roddi": 468, "6866": 468, "fern": 468, "ndez": 468, "3379": 468, "5728": 468, "20210619163128": 468, "shtml": 468, "getiter": [468, 474, 480, 481, 482], "childless": 468, "20200703234532": 468, "6472": [468, 474], "bt": [468, 482], "8032": 468, "3632": 468, "4293": 468, "7033": [468, 474], "horsen": 468, "7528": 468, "7767": [468, 474], "trojan": 468, "hors": 468, "5753": [468, 474], "py_isalnum": 468, "py_isalpha": 468, "py_isdigit": 468, "py_islow": 468, "py_isspac": 468, "py_isupp": 468, "py_isxdigit": 468, "py_tolow": 468, "py_toupp": 468, "5793": 468, "pyeval_callobject": [468, 474, 481, 482], "8276": [468, 474], "pyformat_fromstr": 468, "pyformat_fromstringv": 468, "7228": 468, "1590864": 468, "_shutdown": [468, 482], "1722344": 468, "t_string_inplac": 468, "3102": [468, 469], "arfrev": [468, 474, 482], "freht": [468, 474, 482], "taifersar": [468, 474, 482], "arahesi": [468, 474, 482], "7609": 468, "2422": [468, 474], "6491": 468, "x87_double_round": 468, "2937": 468, "ldcxxshare": 468, "1222585": 468, "clinton": 468, "roy": [468, 482], "3585": 468, "6094": 468, "ucnhash_capi": [468, 471, 482], "pycobject": [468, 470, 474], "vtabl": 468, "pycobject_asvoidptr": 468, "cobject": 468, "5630": [468, 470], "crtassem": 468, "crt_assembly_vers": 468, "vc_assembly_publickeytoken": 468, "libraries_assembly_name_prefix": 468, "cournapeau": 468, "4365": 468, "7347": 468, "_beginthreadex": 468, "3582": 468, "miki": [468, 474], "tebeka": [468, 474], "1220212": 468, "hirokazu": [468, 475, 482], "yamamoto": [468, 475, 479, 482], "5913": 468, "mimelib": 468, "4969": 468, "4865": 468, "28440": [468, 482], "so_setfib": 468, "kyle": [468, 471, 478, 479, 480, 481, 482], "vanderbeek": 468, "8235": 468, "iobench": 468, "ccbench": 468, "throughput": [468, 479, 482], "5464": 468, "ziga": 468, "seilnacht": 468, "1180193": 468, "randse": 468, "6152": [468, 477], "7312": 468, "piotr": 468, "arowski": 468, "8233": 468, "1533": 468, "5920": 468, "6101": 468, "7853": 468, "leander": 468, "anand": [468, 474], "pillai": [468, 474], "7150": 468, "7348": 468, "5080": 468, "exempt": 468, "pythonshowrefcount": 468, "31733": 468, "count_alloc": [468, 478, 481, 482], "pythonshowalloccount": 468, "31692": 468, "gaynor": [468, 471, 477, 482], "21306": 468, "1g": [468, 482], "zachari": [468, 476, 477, 479, 482], "ware": [468, 476, 477, 479, 482], "21462": 468, "21304": 468, "21671": 468, "0224": 468, "tls1": 468, "reid": [468, 474], "21308": 468, "21305": 468, "21307": 468, "stufft": [468, 476], "deili": [468, 474, 476, 481], "pythonhttpsverifi": 468, "_https_verify_certif": 468, "autotool": [468, 477, 478], "pregener": [468, 477, 478, 482], "23404": [468, 477, 478, 482], "philip": [468, 473, 474, 478, 482], "jenvey": [468, 474], "ryan": [468, 475, 476, 478, 479, 482], "lovett": 468, "hugh": 468, "secker": 468, "walker": 468, "cruft": 469, "wealth": 469, "softspac": [469, 482], "retrain": 469, "corollari": 469, "incompar": 469, "0720": 469, "0o720": 469, "loud": 469, "unixi": 469, "3138": 469, "some_sequ": 469, "vindic": 469, "3109": 469, "crutch": 469, "item1": 469, "item2": 469, "3113": 469, "b_c": 469, "3108": 469, "beo": 469, "instabl": 469, "disobey": 469, "copy_reg": 469, "markupbas": 469, "_markupbas": [469, 471, 482], "dbhash": 469, "htmlentitydef": 469, "basehttpserv": 469, "cgihttpserv": [469, 482], "simplehttpserv": [469, 482], "jumpahead": 469, "tmpnam": 469, "tempnam": 469, "tmpfile": 469, "scoop": 469, "secondaryexcept": 469, "primary_except": 469, "__getslice__": 469, "__setslice__": 469, "__delslice__": 469, "3114": 469, "func_x": 469, "__x__": 469, "wit": 469, "func_cod": 469, "func_default": 469, "func_dict": 469, "func_doc": 469, "func_glob": 469, "3111": 469, "tru64": 469, "3123": 469, "pynumber_coerc": 469, "pynumber_coerceex": 469, "pymember_get": 469, "pymember_set": 469, "nb_nonzero": 469, "with_cycle_gc": 469, "contort": 469, "8901234": 470, "12j": 470, "600000": 470, "901": 470, "120000j": 470, "underway": 470, "camelot": 470, "5675": [470, 474], "mattia": [470, 474], "ndstr": [470, 474], "4707": 470, "199999999999ap": 470, "1580": 470, "grew": [470, 474], "namesak": 470, "lv": 470, "ov": 470, "oe": 470, "_0": 470, "query_field": 470, "userqueri": 470, "sale": [470, 474], "4384": 470, "vajda": 470, "4195": 470, "4201": 470, "5228": 470, "testgizmo": 470, "test_gizmo_on_window": 470, "test_gimzo_without_required_librari": 470, "builtout": 470, "test_division_by_zero": 470, "confound": 470, "remap": 470, "c__builtin__": 470, "nset": 470, "np0": 470, "lp1": 470, "nl1l": 470, "nal2l": 470, "nal3l": 470, "natp2": 470, "nrp3": 470, "6137": 470, "sunpro": 470, "4753": 470, "4868": 470, "roger": [470, 481, 482], "serwi": [470, 482], "5150": [470, 474], "lisandro": 470, "dalcrin": 470, "5175": 470, "pynumber_int": 470, "4910": 470, "5914": 470, "7182818284590451": 470, "718281828459045": 470, "salgado": [471, 472, 477, 480, 481, 482], "635": 471, "12782": 471, "632": 471, "wstr": [471, 473], "624": [471, 472, 482], "ctxmanag": 471, "ctxmanager1": 471, "ctxmanager2": 471, "example1": 471, "example2": 471, "ctxmanager3": 471, "example3": 471, "lysandro": [471, 481, 482], "nikolaou": [471, 481, 482], "40334": [471, 481, 482], "some_other_cod": 471, "eol": [471, 482], "42864": [471, 482], "batuhan": [471, 472, 481, 482], "taskaya": [471, 472, 481, 482], "40176": [471, 482], "43914": [471, 482], "rocket": 471, "event_horizon": 471, "42997": [471, 482], "unparenthesis": 471, "43017": [471, 482], "43822": [471, 482], "build_dyson_spher": 471, "notenoughscienceerror": 471, "notenoughresourceserror": 471, "43149": [471, 482], "43823": [471, 482], "44305": [471, 482], "43797": [471, 482], "all_black_hol": 471, "revel": 471, "41064": [471, 482], "lel": 471, "namedtoplo": 471, "38530": [471, 482], "schwarzschild_black_hol": 471, "schwarschild_black_hol": 471, "pattern_1": 471, "action_1": 471, "pattern_2": 471, "action_2": 471, "pattern_3": 471, "action_3": 471, "action_wildcard": 471, "scala": 471, "elixir": 471, "imper": 471, "insur": 471, "test_vari": 471, "maggi": [471, 480], "moss": 471, "prado": 471, "41428": [471, 482], "yurii": [471, 472, 481, 482], "karaba": [471, 472, 481, 482], "44490": [471, 482], "jin": [471, 472, 473, 478, 479, 480, 481, 482], "41559": [471, 482], "jell": [471, 472, 478, 479, 482], "zijlstra": [471, 472, 478, 479, 482], "43783": 471, "mendoza": [471, 472], "unannot": 471, "strcach": 471, "log_prefix": 471, "mikhail": 471, "golubev": 471, "41923": [471, 482], "43766": [471, 482], "traut": [471, 472], "nikla": [471, 472, 482], "fieka": [471, 482], "29882": [471, 482], "sweeney": [471, 472, 481, 482], "40890": [471, 482], "37999": [471, 482], "shkop": [471, 482], "38302": [471, 482], "shannon": [471, 472, 475, 479, 480, 481, 482], "42990": [471, 482], "joshua": [471, 477, 482], "bronson": [471, 480, 482], "pope": [471, 482], "justin": [471, 475, 482], "wang": [471, 479, 482], "31861": [471, 482], "43682": [471, 482], "42737": [471, 482], "43901": [471, 482], "42725": [471, 482], "effectless": 471, "43475": [471, 482], "hee": [471, 472, 473, 480, 481, 482], "45000": [471, 482], "nholm": [471, 472, 480], "41332": [471, 482], "9694": [471, 482], "lorentsen": [471, 479, 482], "zackeri": [471, 472, 480, 481, 482], "spytz": [471, 472, 480, 481, 482], "31956": [471, 482], "clearbreakpoint": 471, "irit": [471, 472, 473, 482], "katriel": [471, 472, 473, 482], "24160": [471, 482], "4356": [471, 482], "hai": [471, 472], "shi": [471, 472], "41842": [471, 482], "42195": [471, 481, 482], "joongi": [471, 482], "kim": [471, 482], "41229": [471, 482], "gringauz": 471, "41543": [471, 482], "kintscher": [471, 482], "petter": [471, 480, 482], "jansson": 471, "36982": [471, 482], "39273": [471, 482], "42269": [471, 482], "43532": [471, 482], "42802": [471, 482], "42133": [471, 482], "normalize_encod": [471, 481, 482], "39337": [471, 482], "enum_nam": 471, "ethan": [471, 472, 475, 476, 477, 478, 479, 480, 481, 482], "furman": [471, 475, 476, 477, 478, 479, 482], "40066": [471, 482], "41816": [471, 482], "inada": [471, 472, 473, 477, 478, 479, 480, 481, 482], "naoki": [471, 472, 473, 477, 478, 479, 480, 481, 482], "43712": [471, 482], "5758": 471, "44466": [471, 482], "43439": [471, 482], "38144": [471, 482], "43669": [471, 482], "38820": [471, 482], "43880": [471, 482], "40645": [471, 482], "hilton": [471, 472, 481, 482], "43008": [471, 481, 482], "40468": [471, 481, 482], "33962": [471, 481, 482], "sidebar": [471, 482], "tal": [471, 477, 478, 479, 480, 482], "einat": [471, 477, 478, 479, 480, 482], "37903": [471, 482], "37892": [471, 482], "44010": [471, 482], "pyi": [471, 472, 481, 482], "waygood": [471, 472, 481, 482], "45447": [471, 472, 481, 482], "95191": [471, 472, 482], "from_funct": [471, 472, 477, 482], "43817": [471, 482], "38200": [471, 482], "rtos": [471, 482], "peix": [471, 482], "xin": [471, 482], "41440": [471, 482], "eventfd2": 471, "41001": [471, 482], "41625": [471, 482], "43106": [471, 482], "barney": [471, 482], "gale": [471, 482], "43757": 471, "35498": [471, 482], "yaroslav": [471, 482], "pankovych": [471, 482], "21041": [471, 482], "link_to": [471, 472, 480, 482], "39950": [471, 482], "39906": [471, 482], "28468": [471, 482], "sblondon": 471, "42914": [471, 482], "lewi": [471, 482], "gaul": [471, 482], "43080": [471, 482], "schevchenko": [471, 482], "38731": [471, 482], "readline_ex": 471, "avir": [471, 482], "srivastava": [471, 482], "38307": [471, 482], "34204": [471, 482], "tymoteusz": [471, 482], "wo": [471, 482], "ko": [471, 478, 479, 482], "38490": [471, 482], "42413": [471, 482], "mptcp": [471, 482], "rui": 471, "cunha": 471, "43571": [471, 482], "dscp": [471, 482], "ecn": [471, 482], "sauthoff": 471, "44077": [471, 482], "43794": [471, 482], "43788": [471, 482], "43791": [471, 482], "43799": [471, 482], "43920": [471, 482], "43789": [471, 482], "43811": [471, 482], "hynek": [471, 475, 476, 482], "schlawack": [471, 475, 476, 482], "43998": [471, 482], "31870": [471, 482], "42333": [471, 482], "l0x": 471, "40849": [471, 482], "erlend": [471, 472, 473, 482], "aasland": [471, 472, 473, 482], "43762": [471, 482], "23427": [471, 482], "42955": [471, 482], "43356": [471, 482], "mario": [471, 479, 482], "corchero": [471, 479, 482], "42251": [471, 482], "42308": [471, 482], "bussonni": [471, 479, 480, 482], "26389": [471, 482], "bas": 471, "beek": 471, "41810": [471, 482], "42345": [471, 481, 482], "41792": [471, 482], "38908": [471, 482], "sebastian": [471, 472, 482], "rittau": [471, 472], "yan": [471, 482], "choi": [471, 482], "39385": [471, 482], "goldschmidt": [471, 478, 479, 480, 481, 482], "42967": [471, 478, 479, 480, 481, 482], "jonathan": [471, 475, 477, 480, 482], "gossag": 471, "35018": [471, 482], "42131": [471, 482], "desmond": [471, 482], "cheong": [471, 482], "14678": [471, 482], "41334": [471, 482], "41006": [471, 482], "41718": 471, "yuri": [471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "selivanov": [471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "42093": [471, 482], "42927": [471, 482], "micropython": [471, 482], "38980": [471, 482], "_compress": [471, 482], "decompressread": [471, 482], "09x": 471, "20x": 471, "32x": 471, "11x": 471, "18x": 471, "lin": [471, 472, 482], "41486": [471, 482], "42202": [471, 482], "str1": [471, 482], "str2": [471, 482], "crochemor": 471, "41972": [471, 482], "dino": [471, 478, 481, 482], "viehland": [471, 478, 481, 482], "43452": [471, 482], "jeroen": [471, 478, 480, 481, 482], "demey": [471, 478, 480, 481, 482], "43575": [471, 482], "43287": [471, 482], "41922": [471, 482], "41873": [471, 482], "41870": [471, 482], "43785": [471, 482], "0in": [471, 473], "1or": [471, 473], "0if": [471, 473], "1els": [471, 473], "0x1for": [471, 473], "43833": [471, 482], "37319": 471, "26131": [471, 482], "zimport": 471, "42134": [471, 482], "43672": [471, 482], "42135": [471, 482], "set_package_wrapp": [471, 472], "set_loader_wrapp": [471, 472], "module_for_load": [471, 472, 476, 482], "43720": [471, 482], "42137": [471, 482], "frozenload": [471, 472], "builtinload": [471, 472], "42136": [471, 482], "optimizedunicod": [471, 472, 473, 482], "42264": [471, 482], "streamreaderprotocol": [471, 482], "39529": [471, 482], "enable_shared_cach": [471, 472, 473, 482], "24464": [471, 482], "87889": 471, "41139": [471, 482], "sslsslcontext": 471, "protocol_sslv2": 471, "rand_pseudo_byt": [471, 473, 475, 482], "pythonthreaddebug": [471, 472, 482], "44584": [471, 482], "41974": [471, 482], "parserbas": [471, 482], "berker": [471, 476, 477, 478, 479, 480, 482], "peksag": [471, 476, 477, 478, 479, 480, 482], "31844": [471, 482], "_pyunicode_name_capi": [471, 482], "42157": [471, 482], "graminit": 471, "pyparser_simpleparsestringflag": [471, 481], "pyparser_simpleparsestringflagsfilenam": [471, 481], "pyparser_simpleparsefileflag": [471, 481], "pynode_compil": [471, 481], "42299": [471, 482], "pymodule_getwarningsmodul": 471, "42599": 471, "37324": [471, 482], "multifold": 471, "svetlov": [471, 472, 476, 479, 480, 481, 482], "stanley": [471, 478, 479, 480, 481, 482], "42392": [471, 482], "42639": [471, 482], "42393": [471, 482], "_node": [471, 482], "io_modul": 471, "import_importmodul": 471, "source_bytes_object": 471, "source_buf": 471, "frameobject": [471, 472, 482], "wordcod": [471, 478, 482], "36020": [471, 482], "sergey": [471, 472, 481, 482], "fedoseev": [471, 481, 482], "40744": [471, 482], "40810": [471, 482], "xavier": [471, 476, 478, 479, 482], "petazzoni": [471, 482], "27640": [471, 482], "42856": [471, 482], "43103": [471, 482], "tcltk": [471, 472, 474, 481, 482], "manoli": 471, "stamatogiannaki": 471, "42603": [471, 482], "43466": [471, 482], "petr": [471, 472, 473, 477, 479, 480, 481, 482], "viktorin": [471, 472, 473, 477, 480, 481, 482], "43795": [471, 482], "40792": [471, 482], "30155": [471, 482], "matveev": [471, 480, 482], "41756": [471, 482], "41784": [471, 482], "1635741": [471, 482], "42262": [471, 482], "42423": [471, 482], "41832": [471, 482], "41073": [471, 482], "43277": [471, 482], "36465": [471, 480, 482], "43688": [471, 482], "43753": [471, 482], "43916": [471, 482], "43908": [471, 472, 482], "40943": [471, 482], "new_refcnt": 471, "0x030900a4": [471, 472], "39573": [471, 472, 482], "40839": [471, 482], "pyunicode_fromunicod": [471, 472, 473, 475, 481, 482], "36346": [471, 481, 482], "42260": [471, 482], "30459": [471, 482], "odictobject": [471, 482], "parser_interfac": [471, 482], "picklebufobject": [471, 482], "pyarena": [471, 482], "pyctyp": [471, 482], "pyfp": [471, 481, 482], "pytim": [471, 482], "sim": 471, "35134": [471, 472, 480, 482], "py_frozenmain": [471, 482], "26241": 471, "pyunicode_internimmort": [471, 472, 473, 482], "41692": [471, 482], "py_unicode_str": [471, 482], "41123": [471, 472, 482], "py_unicode_strlen": [471, 475], "py_unicode_strcat": [471, 475], "py_unicode_strcpi": [471, 475], "py_unicode_strncpi": [471, 475], "py_unicode_strcmp": [471, 475], "py_unicode_strncmp": [471, 475], "py_unicode_strchr": [471, 475], "py_unicode_strrchr": [471, 475], "pyunicode_getmax": [471, 475, 482], "41103": [471, 482], "pylong_fromunicod": [471, 482], "pyunicode_asunicodecopi": [471, 475, 482], "_py_checkrecursionlimit": [471, 481, 482], "ceval": [471, 482], "recursion_limit": [471, 472, 482], "41834": [471, 482], "py_allow_recurs": [471, 482], "py_end_allow_recurs": [471, 482], "recursion_crit": [471, 482], "41936": [471, 482], "pyos_initinterrupt": [471, 482], "41713": [471, 482], "pyast_valid": [471, 482], "43244": [471, 482], "pyst_getscop": [471, 482], "pysymtable_build": [471, 482], "pysymtable_buildobject": [471, 482], "pysymtable_fre": [471, 482], "py_symtablestr": [471, 482], "py_symtablestringobject": [471, 482], "43868": [471, 482], "winbas": [471, 482], "_mod": [471, 482], "pyast_compileex": [471, 482], "pyast_compileobject": [471, 482], "pyfuture_fromast": [471, 482], "pyfuture_fromastobject": [471, 482], "pyparser_astfromfileobject": [471, 482], "pyparser_astfromfilenam": [471, 482], "pyparser_astfromstringobject": [471, 482], "pyarena_new": [471, 482], "pyarena_fre": [471, 482], "pyarena_malloc": [471, 482], "pyarena_addpyobject": [471, 482], "use_trac": [471, 472], "43760": [471, 472, 482], "25x": 472, "680": [472, 482], "manhattan_dist": 472, "point_1": 472, "point_2": 472, "magic_arithmet": 472, "add_count": 472, "query_us": 472, "query_count": 472, "ammar": [472, 478, 479, 480, 482], "askar": [472, 478, 479, 480, 482], "43950": [472, 482], "45292": [472, 482], "45607": [472, 482], "zac": [472, 482], "hatfield": [472, 482], "dodd": [472, 482], "otherpython": 472, "tensorflow": 472, "rahtz": 472, "43224": [472, 482], "pradeep": 472, "kumar": [472, 473, 482], "srinivasan": 472, "sile": 472, "panther": 472, "foster": [472, 482], "47087": [472, 482], "mylock": 472, "myint": 472, "balf": [472, 482], "46534": [472, 482], "table_nam": 472, "47088": [472, 482], "bleaney": 472, "91860": [472, 482], "bont": 472, "46725": 472, "33346": [472, 482], "12022": [472, 482], "44471": [472, 482], "26579": [472, 482], "57684": [472, 482], "90153": 472, "broke": [472, 482], "grainger": [472, 482], "91181": 472, "24234": [472, 482], "29410": [472, 482], "45711": [472, 482], "_pyerr_stackitem": [472, 482], "bastian": 472, "neuburg": 472, "44934": [472, 482], "46142": [472, 482], "tane": 472, "hukkinen": 472, "40059": [472, 482], "42012": [472, 482], "90908": 472, "90927": 472, "91218": 472, "duprat": 472, "87518": 472, "34975": [472, 482], "46805": [472, 482], "filip": [472, 475, 476, 480, 482], "25625": [472, 482], "44674": [472, 482], "kabir": [472, 482], "kwatra": [472, 482], "91973": 472, "ganssl": [472, 479, 480, 481, 482], "80010": [472, 482], "reprenum": 472, "anintenum": 472, "anenum": 472, "global_enum": 472, "aflag": 472, "kirpichev": [472, 482], "44258": [472, 482], "some_fract": 472, "44547": [472, 482], "46014": [472, 482], "libb2": [472, 482], "47095": [472, 482], "_sha3": [472, 482], "tiny_sha3": [472, 482], "47098": [472, 482], "89313": 472, "weipeng": [472, 480, 482], "hong": [472, 480, 482], "30533": [472, 482], "hakan": [472, 482], "elik": [472, 482], "29418": [472, 482], "88116": [472, 482], "andrei": 472, "kulakovin": 472, "88024": 472, "kiril": 472, "pinchuk": 472, "88457": 472, "gideon": 472, "45917": [472, 482], "ajith": 472, "ramachandran": 472, "44357": [472, 482], "44339": [472, 482], "46917": [472, 482], "antoni": [472, 482], "44019": [472, 482], "44611": [472, 482], "eisuk": [472, 482], "kawasima": 472, "22276": [472, 482], "33392": 472, "433030": [472, 482], "46245": [472, 482], "klausner": 472, "30512": [472, 482], "29980": 472, "44491": [472, 482], "44688": [472, 482], "aviv": [472, 478, 480, 482], "palivoda": [472, 478, 480, 482], "shahaf": [472, 477, 482], "16379": [472, 482], "24139": [472, 482], "45243": [472, 482], "45613": [472, 482], "45828": [472, 482], "44092": [472, 482], "41930": [472, 482], "34916": 472, "24905": [472, 482], "46328": [472, 482], "miro": [472, 482], "hron": [472, 482], "45413": [472, 482], "sem_clockwait": [472, 482], "41710": [472, 482], "sz": [472, 482], "ke": [472, 482], "21302": [472, 482], "45429": [472, 482], "44569": [472, 482], "33809": [472, 482], "90633": [472, 482], "90572": 472, "90638": 472, "samodya": 472, "abeysiriwardan": 472, "89026": 472, "43923": 472, "shantanu": [472, 482], "jain": [472, 482], "91154": 472, "90500": 472, "89263": 472, "adrian": [472, 479, 482], "garcia": [472, 482], "badarasco": 472, "88970": 472, "91137": 472, "loosen": 472, "_type_check": 472, "beauregard": [472, 482], "90802": 472, "rosenstein": 472, "85542": 472, "nikita": [472, 482], "sobolev": [472, 482], "90353": 472, "90711": 472, "90729": 472, "info_patchlevel": [472, 482], "91827": [472, 482], "45190": [472, 482], "45046": [472, 482], "47074": 472, "turnbul": [472, 482], "28080": [472, 482], "ezeh": 472, "49083": 472, "miguel": [472, 482], "brito": [472, 482], "88261": 472, "28307": [472, 482], "40222": [472, 482], "44987": [472, 482], "37295": [472, 482], "272": [472, 482], "46845": [472, 482], "pyperform": [472, 482], "ubuntu": [472, 479, 482], "aditya": [472, 473, 482], "streamlin": [472, 477, 482], "sped": [472, 474, 477, 480, 481, 482], "44590": [472, 482], "7x": [472, 482], "45256": 472, "outperform": 472, "superinstruct": [472, 482], "brunthal": 472, "brandt": [472, 481, 482], "bucher": [472, 481, 482], "45947": [472, 482], "45340": [472, 482], "40116": [472, 482], "2x": [472, 475, 478, 482], "jit": [472, 473, 478], "bloomberg": 472, "binary_": [472, 482], "inplace_": [472, 482], "call_function_kw": [472, 478, 482], "call_method": [472, 479, 482], "precal": [472, 482], "copy_dict_without_key": 472, "gen_start": [472, 482], "dup_top": [472, 482], "dup_top_two": [472, 482], "rot_two": [472, 482], "rot_thre": [472, 482], "rot_four": [472, 480, 482], "rot_n": [472, 482], "jump_if_not_exc_match": [472, 481, 482], "jump_if_not_eg_match": [472, 482], "jump_absolut": [472, 482], "pop_jump_forward_if_tru": [472, 482], "pop_jump_backward_if_tru": [472, 482], "pop_jump_forward_if_fals": [472, 482], "pop_jump_backward_if_fals": [472, 482], "pop_jump_forward_if_not_non": [472, 482], "pop_jump_backward_if_not_non": [472, 482], "pop_jump_forward_if_non": [472, 482], "pop_jump_backward_if_non": [472, 482], "19072": [472, 482], "89519": [472, 482], "81548": [472, 482], "40360": [472, 481, 482], "sre_compil": [472, 482], "sre_const": [472, 477, 482], "sre_pars": [472, 482], "47152": [472, 482], "untest": [472, 482], "42255": [472, 482], "findtestcas": [472, 473, 482], "makesuit": [472, 473, 482], "5846": [472, 482], "hugo": [472, 473, 476, 481, 482], "kemenad": [472, 473, 481, 482], "45837": [472, 482], "44977": [472, 482], "safeconfigpars": [472, 473, 474, 482], "45173": [472, 482], "legacyinterpol": [472, 473, 482], "46607": [472, 482], "90817": [472, 473, 482], "47061": [472, 482], "68966": [472, 482], "47022": [472, 482], "91760": [472, 473, 482], "unplan": 472, "jingchen": [472, 482], "90224": 472, "92728": [472, 482], "loadermodule_repr": 472, "mailmanproxi": [472, 481, 482], "35800": [472, 481, 482], "binhex": [472, 481, 482], "a2b_hqx": [472, 481, 482], "b2a_hqx": [472, 481, 482], "rlecode_hqx": [472, 481, 482], "rledecode_hqx": [472, 481, 482], "45085": [472, 482], "bdist_msi": [472, 481, 482], "45124": [472, 482], "45129": [472, 482], "45132": [472, 482], "ldgettext": [472, 480], "ldngettext": [472, 480], "set_output_charset": [472, 480], "44235": [472, 482], "illia": [472, 482], "volochii": [472, 482], "43216": [472, 482], "corowrapp": [472, 482], "tkapptyp": [472, 481, 482], "38371": [472, 481, 482], "formatargspec": [472, 477, 482], "from_builtin": [472, 477, 482], "45320": [472, 482], "23882": [472, 482], "46483": [472, 482], "__set_format__": [472, 482], "__setformat__": [472, 482], "46852": [472, 482], "experimental_isolated_subinterpret": [472, 482], "pynch": [472, 482], "hue": 472, "43234": [472, 482], "37330": [472, 482], "sriniva": [472, 479, 482], "reddi": [472, 479, 482], "thatiparthi": [472, 479, 482], "41137": [472, 482], "46659": [472, 482], "47066": [472, 482], "35859": [472, 482], "40465": [472, 481, 482], "93351": [472, 482], "clase": 472, "c11": [472, 475, 482], "46656": [472, 482], "holman": [472, 482], "44340": [472, 482], "libcrypt": [472, 482], "gilbert": 472, "45433": [472, 482], "45440": [472, 482], "__builtin_nan": [472, 482], "46640": [472, 482], "py_no_nan": [472, 482], "freelist": [472, 482], "45522": [472, 482], "45548": [472, 482], "45570": [472, 482], "45571": [472, 482], "43974": [472, 482], "libnsl": [472, 482], "libsqlite3": 472, "egeberg": 472, "45847": [472, 482], "45747": [472, 482], "45763": [472, 482], "tcltk_cflag": 472, "tcltk_lib": 472, "rhel": [472, 479, 482], "ltk8": 472, "ltkstub8": 472, "ltcl8": 472, "rhel7": 472, "tier": [472, 482], "84461": [472, 482], "95085": [472, 482], "90473": [472, 482], "sizeof_void_p": 472, "45569": [472, 482], "46996": [472, 482], "42035": [472, 482], "tornetta": [472, 482], "43931": [472, 482], "pybuffer_copydata": 472, "45459": [472, 482], "46613": [472, 482], "46906": [472, 482], "46343": [472, 482], "89653": 472, "46608": [472, 482], "exception_t": 472, "46841": [472, 482], "92154": [472, 482], "94936": [472, 482], "py_trashcan_safe_begin": [472, 481, 482], "py_trashcan_safe_end": [472, 481, 482], "py_trashcan_begin": [472, 481, 482], "py_trashcan_end": [472, 481, 482], "mytype_dealloc": 472, "cpy_trashcan_begin": 472, "cpy_trashcan_end": 472, "44263": [472, 482], "new_typ": 472, "_py_set_typ": 472, "_py_set_s": 472, "0x030b0000": [472, 482], "45434": [472, 482], "cellobject": [472, 482], "genobject": [472, 482], "longintrepr": [472, 482], "pyunicode_check_intern": [472, 482], "46007": [472, 482], "pyframe_check": [472, 482], "pyframe_typ": [472, 482], "93937": [472, 482], "f_blockstack": 472, "f_gen": 472, "f_iblock": 472, "f_stackdepth": 472, "f_state": [472, 482], "f_frame": 472, "f_localsplus": 472, "localsplus": 472, "f_valuestack": 472, "pyframe_fasttolocalswitherror": [472, 482], "pyframe_localstofast": [472, 482], "0x030900b1": 472, "pythoncapi_compat": 472, "40429": [472, 482], "recursion_depth": [472, 481, 482], "recursion_remain": 472, "stackcheck_count": 472, "0x030b00a2": 472, "0x030a00a1": 472, "cframe": 472, "c_tracefunc": 472, "c_profilefunc": 472, "_py_setprogramfullpath": [472, 482], "88279": [472, 482], "ob_shash": [472, 482], "46864": [472, 482], "pyunicode_as_data": [472, 473, 475, 482], "pyunicode_as_unicod": [472, 473, 475, 482], "pyunicode_asunicodeands": [472, 473, 475, 481, 482], "pyunicode_asunicod": [472, 473, 475, 481, 482], "pyunicode_get_data_s": [472, 473, 475, 482], "pyunicode_get_s": [472, 473, 475, 482], "pyunicode_gets": [472, 473, 475], "pyunicode_is_compact": 472, "pyunicode_is_readi": 472, "py_unicode_wstr_length": 472, "_pyunicode_asunicod": [472, 481], "pyframe_blocksetup": 472, "pyframe_blockpop": 472, "py_adjust_erange1": [472, 482], "py_adjust_erange2": [472, 482], "py_overflow": [472, 482], "py_set_erange_if_overflow": [472, 482], "py_set_errno_on_math_error": [472, 482], "45412": [472, 482], "py_unicode_copi": [472, 475, 481, 482], "py_unicode_fil": [472, 475, 481, 482], "pystrhex": [472, 482], "py_force_doubl": [472, 482], "py_is_infin": [472, 482], "45474": [472, 482], "pyheaptype_get_memb": [472, 482], "40170": [472, 481, 482], "have_py_set_53bit_precis": [472, 482], "pyunicode_encod": [472, 475, 482], "pyunicode_encodeascii": [472, 475], "pyunicode_encodelatin1": [472, 475, 482], "pyunicode_encodeutf7": [472, 475, 482], "pyunicode_encodeutf8": [472, 475, 482], "pyunicode_encodeutf16": [472, 475, 482], "pyunicode_encodeutf32": [472, 475, 482], "pyunicode_encodeunicodeescap": [472, 475, 482], "pyunicode_encoderawunicodeescap": [472, 475, 482], "pyunicode_encodecharmap": [472, 475, 482], "pyunicode_translatecharmap": [472, 475, 482], "pyunicode_encodedecim": [472, 475, 482], "pyunicode_transformdecimaltoascii": [472, 475, 482], "44029": [472, 482], "87995": [473, 482], "90751": [473, 482], "96670": [473, 482], "breaker": [473, 482], "97922": [473, 482], "98024": 473, "94597": [473, 482], "stanislav": 473, "zmiev": 473, "90385": [473, 482], "94216": [473, 482], "93312": [473, 482], "74696": [473, 482], "77617": [473, 482], "93503": [473, 482], "96734": [473, 482], "evgeni": [473, 481, 482], "zorin": 473, "58451": 473, "wstr_length": 473, "92536": [473, 482], "modzelewski": 473, "90536": [473, 482], "93429": [473, 482], "97681": [473, 482], "97669": [473, 482], "90016": [473, 482], "ofey": [473, 482], "chan": [473, 482], "89874": 473, "65961": [473, 482], "90765": 473, "50096": 473, "86421": 473, "coomb": [473, 476, 480, 481], "93963": [473, 482], "ceas": [473, 482], "97879": 473, "87999": [473, 482], "isident": 473, "teyit": 473, "modernis": 473, "_texttestresult": [473, 482], "45162": [473, 482], "89336": [473, 482], "92548": 473, "aiosmtpd": [473, 482], "iarygin": [473, 482], "93243": [473, 482], "openwrapp": [473, 482], "94169": [473, 482], "94199": [473, 482], "94196": [473, 482], "94226": [473, 482], "94383": [473, 482], "94379": [473, 482], "cwe": [473, 482], "erad": [473, 482], "set_packag": [473, 476, 482], "suspici": [473, 482], "rstlint": [473, 482], "julien": [473, 479], "palard": [473, 479], "98179": 473, "1e25": 473, "86388": [473, 482], "94352": [473, 482], "98393": [473, 482], "93939": [473, 482], "va_start": [473, 482], "93207": [473, 482], "89536": 473, "wenzel": 473, "jakob": 473, "93012": [473, 482], "93274": [473, 482], "frost": 473, "92257": 473, "meyer": [473, 475, 480, 481, 482], "91052": [473, 482], "91051": [473, 482], "95781": [473, 482], "georgi": [473, 482], "95504": [473, 482], "95589": [473, 482], "_pyobject_visitmanageddict": [473, 482], "_pyobject_clearmanageddict": [473, 482], "77782": [473, 482], "92651": [473, 482], "leagci": 473, "sstate_interned_immort": [473, 482], "85858": [473, 482], "392": 474, "sneezi": 474, "sleepi": 474, "skycaptain": 474, "manage_cloud": 474, "helm": 474, "parser_l": 474, "missil": 474, "torpedo": 474, "parser_m": 474, "vessel": 474, "console_prior": 474, "compet": 474, "unladen10": 474, "py32": 474, "pyload": [474, 476], "pypycload": [474, 476], "pyshar": 474, "32m": 474, "33md": 474, "soabi": [474, 482], "32mu": 474, "ext_suffix": [474, 476, 482], "salient": 474, "pathway": [474, 482], "0o24": 474, "0f": [474, 482], "7094": 474, "shl": 474, "project_nam": 474, "lowercaseddict": 474, "lcd": 474, "placeholderdict": 474, "6081": 474, "marcin": 474, "wojdyr": 474, "1772833": 474, "9666": 474, "9337": 474, "abcdefgh": [474, 476], "9757": 474, "4617": 474, "structsequ": [474, 482], "8413": 474, "10093": 474, "477863": 474, "9213": 474, "2690": 474, "10889": 474, "10518": 474, "aggrav": 474, "9425": 474, "undergon": 474, "4661": 474, "10321": 474, "get_phone_numb": 474, "phonenumb": 474, "phonelist": 474, "user_request": 474, "4805": 474, "980": 474, "baker": 474, "498245": 474, "577479": 474, "10586": 474, "10593": 474, "terrenc": 474, "9567": 474, "3445": 474, "8814": 474, "prob_dist": 474, "satur": 474, "renew": 474, "resequenc": 474, "simsalabim": 474, "get_vot": 474, "ballot": 474, "conduct_elect": 474, "all_polls_clos": 474, "lockbox": 474, "seal_ballot": 474, "elect": 474, "deposit": 474, "8777": 474, "923754": 474, "accept2dyear": [474, 475], "guesswork": 474, "1289118": 474, "5094": 474, "6641": 474, "2706": 474, "1777412": 474, "8013": 474, "10827": 474, "013671875": 474, "013765762467652909": 474, "682689492137086": 474, "31731050786291404": 474, "gamma_funct": 474, "801": 474, "4551": 474, "950730698041": 474, "temperatur": 474, "from_fahrenheit": 474, "from_celsius": 474, "urban": [474, 476, 482], "5867": 474, "rec_len": 474, "loc_start": 474, "loc_len": 474, "change_loc": 474, "record_numb": 474, "byte_stream": 474, "g3805": 474, "storeroom": 474, "chassi": 474, "x7899": 474, "cog": 474, "l6988": 474, "sprocket": 474, "showroom": 474, "5506": 474, "9826": 474, "9840": 474, "susan": [474, 482], "salesl": 474, "talbot": 474, "5975": 474, "abraham": [474, 482], "1537721": 474, "duti": 474, "9110": 474, "8188": 474, "2305843009213693951": 474, "314159": 474, "1000003": 474, "8540": [474, 475], "log1": 474, "rodol": [474, 475, 480], "4972": [474, 477], "8046": 474, "1286": 474, "8806": 474, "7461": 474, "10554": 474, "bastien": [474, 476], "sabl": 474, "9862": 474, "3488": 474, "9962": 474, "1675951": 474, "redact": 474, "902": 474, "general_quest": 474, "3514": 474, "prion": 474, "py_todo": 474, "1399": 474, "semaphore_not": 474, "md2": 474, "dsawithsha": 474, "mdc2": 474, "md4": 474, "ripemd160": 474, "dsa": 474, "dsaencrypt": 474, "0x101739a10": 474, "sehensw": 474, "rdigkeiten": 474, "xc3": 474, "xbcrdigkeiten": 474, "bzip": 474, "in_transit": 474, "shashwat": 474, "8845": 474, "8524": 474, "9794": 474, "2818": 474, "8850": 474, "1589": 474, "5639": 474, "4870": 474, "dysfunct": 474, "9360": 474, "vant": 474, "1926": 474, "9003": 474, "lorenzo": [474, 476], "catucci": [474, 476], "4471": 474, "10980": 474, "10620": 474, "my_proj_dir": 474, "9754": 474, "test_anagram": 474, "volumin": 474, "ups": [474, 482], "9424": 474, "misimpl": 474, "optic": 474, "9025": 474, "8807": 474, "6706": 474, "5178": 474, "rodolpho": 474, "eckhardt": 474, "10220": 474, "0x1022bd788": 474, "pydoc3": 474, "ron": 474, "newloc": 474, "nofre": 474, "_randbelow": 474, "binary_modulo": 474, "binary_multipli": [474, 482], "binary_add": [474, 476, 482], "binary_floor_divid": 474, "9147": 474, "ray": [474, 476, 482], "9523": 474, "raymondhetting": 474, "os2": 474, "os2_hom": 474, "bindir": 474, "binlibdest": 474, "includepi": 474, "libdest": 474, "projectbas": 474, "py_version_nodot": 474, "py_version_short": 474, "antonio": 474, "cuni": 474, "ilya": [474, 479, 482], "sandler": 474, "pluggabl": [474, 476, 478], "ambv": 474, "zope9": 474, "plone": 474, "zope9instal": 474, "zope9inst": 474, "beef": 474, "cafe": 474, "5417": 474, "aff": 474, "8fa3": 474, "telenovela": 474, "elisa": 474, "bfd": 474, "f3nde": 474, "mahn": 474, "5468": 474, "9873": 474, "steffen": 474, "daod": 474, "nurpmeso": 474, "9124": 474, "10199": 474, "7316": 474, "torsten": [474, 475, 482], "landschoff": [474, 475, 482], "850728": 474, "kleckner": 474, "8844": 474, "6690": 474, "9410": 474, "3873": 474, "9915": 474, "7451": 474, "10314": 474, "10x": [474, 475, 476, 479, 482], "15x": [474, 481, 482], "3001": 474, "stringlib": 474, "differenc": [474, 482], "andress": 474, "bennett": 474, "8685": 474, "1569291": 474, "3709": [474, 475], "schaaf": [474, 475], "10160": 474, "christo": 474, "georgiou": 474, "7113": 474, "mobil": 474, "kannada": 474, "0cf1": 474, "0cf2": 474, "tai": 474, "lue": 474, "19da": 474, "disqualifi": 474, "cheatsheet": 474, "jog": 474, "adjunct": 474, "9528": 474, "7962": 474, "aquatk": 474, "6075": 474, "changeset": [474, 476, 482], "385": 474, "workflow": [474, 482], "10679": 474, "bupjo": 474, "5127": 474, "9203": 474, "wctype": 474, "9210": 474, "9778": 474, "py_va_copi": 474, "va_copi": 474, "2443": 474, "8837": 474, "buildscript": [474, 482], "8990": 474, "setfilesystemencod": 474, "6shhbbb": 474, "gif87a": 474, "10783": 474, "10711": 474, "10272": 474, "398": 475, "segreg": 475, "13411": 475, "10181": 475, "u0010ffff": 475, "udbff": 475, "udfff": 475, "13054": 475, "becker": 475, "3561": 475, "gather_t": 475, "acc": [475, 482], "renaud": [475, 482], "blanch": [475, 482], "zbigniew": [475, 482], "drzejewski": [475, 482], "szmek": [475, 482], "_extra_attribut": 475, "0x7f46b9fe31e0": 475, "amend": [475, 482], "2377": 475, "13959": 475, "14605": 475, "14646": 475, "growth": [475, 482], "delin": 475, "12753": 475, "13201": 475, "petri": [475, 482], "lehtinen": 475, "12170": 475, "12380": 475, "10516": 475, "11388": 475, "13748": 475, "gruszczi": [475, 476, 480, 482], "ski": [475, 476, 480, 482], "13521": 475, "clumsi": 475, "9260": 475, "4966": 475, "3144": 475, "nadeem": [475, 476], "vawda": [475, 476], "yvind": 475, "karlsen": [475, 482], "6715": 475, "darren": 475, "11610": 475, "10868": 475, "1172711": 475, "ywjj": 475, "catalin": [475, 482], "iacob": [475, 482], "13641": 475, "13637": 475, "5863": 475, "pbzip2": 475, "1625": 475, "13216": 475, "65001": [475, 482], "cp_utf8": [475, 482], "chcp": [475, 482], "cjk": [475, 482], "12016": 475, "u52ff": 475, "u65bd": 475, "u65bc": 475, "u4eba": 475, "u3002": 475, "npj": 475, "l6hk": 475, "hk": 475, "12100": 475, "11089": 475, "11297": 475, "11085": 475, "13121": 475, "13585": 475, "10924": 475, "ncursesw": [475, 482], "waddwstr": 475, "igo": 475, "serna": 475, "6755": 475, "15006": 475, "7652": 475, "100x": 475, "bytereef": 475, "mpdecim": [475, 482], "quickstart": 475, "02s": 475, "345s": 475, "120x": 475, "telco": 475, "19s": 475, "68s": 475, "psycopg": 475, "57s": 475, "29s": 475, "12x": 475, "rhs": 475, "watchexp": [475, 482], "465484": 475, "72000": 475, "89ric": 475, "pal": 475, "salli": 475, "bonzo": 475, "bonz": 475, "ought": 475, "8594": 475, "12139": 475, "11072": 475, "13227": 475, "15061": 475, "13295": 475, "kuhn": 475, "13464": 475, "htmlparseerror": 475, "15114": [475, 476, 477, 482], "14538": 475, "13993": 475, "13960": 475, "13358": 475, "1745761": 475, "755670": 475, "13357": 475, "12629": 475, "1200313": 475, "670664": 475, "13273": 475, "12888": 475, "7311": 475, "11113": 475, "15156": 475, "sijin": 475, "joseph": [475, 478, 482], "8808": 475, "13062": 475, "15153": 475, "townshend": 475, "12760": 475, "11888": 475, "12021": 475, "12328": 475, "4892": 475, "6064": 475, "12708": 475, "9795": 475, "lagerwal": 475, "10882": 475, "4761": 475, "10755": 475, "14626": 475, "supports_follows_symlink": 475, "10784": 475, "8828": 475, "14127": 475, "13609": 475, "12720": 475, "9344": 475, "dlfcn": [475, 478, 482], "13226": 475, "14210": 475, "14166": 475, "3665": 475, "13449": 475, "8684": 475, "delayfunct": 475, "13245": 475, "6397": 475, "12442": 475, "sandro": 475, "tosi": 475, "12191": 475, "15238": 475, "12715": 475, "niehof": 475, "9993": 475, "4489": 475, "8407": 475, "1870": 475, "elho": 475, "trevino": 475, "juhana": 475, "jauhiainen": 475, "orr": [475, 476, 480, 481, 482], "boswel": 475, "8739": 475, "paulo": [475, 482], "scardin": 475, "11281": 475, "11289": 475, "kasun": 475, "herath": 475, "8809": 475, "watson": 475, "6560": 475, "heiko": 475, "wundram": 475, "socketcan": [475, 482], "lwn": 475, "253425": 475, "fuch": [475, 480, 482], "tiago": 475, "alv": 475, "10141": 475, "reliable_datagram_socket": 475, "rds": [475, 482], "goderbau": 475, "13777": 475, "10866": 475, "warkentin": 475, "11109": 475, "11688": 475, "12049": 475, "11183": 475, "simpkin": 475, "12803": 475, "13626": 475, "13627": 475, "scram": 475, "jacek": [475, 478, 482], "konieczni": 475, "12551": 475, "13634": 475, "colin": [475, 482], "14204": 475, "14837": 475, "11811": 475, "13635": 475, "14807": 475, "3163": 475, "8513": 475, "5870": 475, "11223": 475, "5689": 475, "9957": 475, "13857": 475, "10968": 475, "clock_xxx": 475, "10278": 475, "14386": 475, "14588": 475, "winston": 475, "ewert": 475, "10775": 475, "1673007": 475, "xdg": [475, 482], "gvfs": [475, 482], "calmett": 475, "13620": 475, "14493": 475, "12646": 475, "12306": 475, "14624": 475, "14738": 475, "15026": 475, "osf": 475, "9856": 475, "11377": 475, "13374": 475, "13988": 475, "py_unicode_match": [475, 481, 482], "pyunicode_encodembc": [475, 482], "12326": 475, "13847": 475, "14180": 475, "longstand": 475, "1079": 475, "1690608": 475, "11291": 475, "assertsameel": 475, "_clamp": 475, "sslfakefil": 475, "13550": 475, "smalltabl": 475, "pymemoryviewobject": [475, 477], "memoryobject": [475, 477], "xxxmodul": 475, "14040": 475, "10998": 475, "11591": 475, "rdmurray": 476, "bitdanc": 476, "16499": 476, "16475": 476, "3156": 476, "450": 476, "454": 476, "8713": 476, "18891": 476, "18214": 476, "unvers": 476, "pip3": 476, "hex_decod": 476, "bz2_encod": 476, "68656c6c6f": 476, "7475": 476, "17827": 476, "17828": 476, "19619": 476, "stone": 476, "everyon": 476, "berman": 476, "18111": 476, "18416": 476, "kang": 476, "hao": 476, "12892": 476, "bierenfeld": 476, "1097797": 476, "ukrainian": [476, 479], "19668": 476, "15958": 476, "16772": 476, "17934": 476, "claudiu": [476, 477, 482], "popa": [476, 477, 482], "18690": 476, "19078": 476, "16148": 476, "declin": 476, "eli": [476, 478, 482], "benderski": 476, "aprano": [476, 478, 480], "16832": 476, "bruno": [476, 477, 482], "dupui": 476, "16049": 476, "17818": 476, "storchacha": 476, "16486": 476, "8311": 476, "maystr": 476, "11175": 476, "12866": 476, "19641": 476, "16685": 476, "17839": 476, "a85": 476, "17618": 476, "16613": 476, "fcc": 476, "ntsc": 476, "lander": [476, 479], "14323": 476, "15806": 476, "piraeus": 476, "19266": 476, "inflex": [476, 477], "15805": 476, "19282": 476, "kluyver": [476, 477, 478, 482], "11816": 476, "17916": 476, "19722": 476, "16522": 476, "11390": 476, "3158": 476, "18600": 476, "email6": 476, "levitt": 476, "18149": 476, "15442": 476, "horev": 476, "kati": [476, 482], "10042": 476, "thorn": 476, "12428": 476, "16351": 476, "18582": 476, "18532": 476, "jona": [476, 479, 482], "borgstr": 476, "18240": 476, "17276": 476, "247": 476, "18775": 476, "2927": 476, "invit": 476, "13633": 476, "karl": [476, 481, 482], "cow": 476, "12921": 476, "malt": 476, "swart": 476, "17764": 476, "15627": 476, "18072": 476, "18193": 476, "18192": 476, "18194": 476, "18058": 476, "19152": 476, "18626": 476, "unravel": 476, "aaron": [476, 482], "ile": 476, "13266": 476, "18929": 476, "19030": 476, "broader": 476, "17481": 476, "behnel": [476, 477, 479, 480, 482], "17159": 476, "routeabl": 476, "17400": 476, "9556": 476, "ce46195b56a9": 476, "16110": 476, "15452": 476, "bump": [476, 482], "19219": 476, "valeri": 476, "4885": 476, "18999": 476, "19946": 476, "16694": 476, "nelson": 476, "yogesh": 476, "chaudhari": 476, "17914": 476, "11939": 476, "9035": 476, "uapi": 476, "18673": 476, "16596": 476, "osborn": 476, "18764": 476, "14455": 476, "4473": 476, "19132": 476, "17150": 476, "19674": 476, "20710": 476, "barnett": [476, 482], "16203": 476, "lope": 476, "tavar": 476, "13592": 476, "17087": 476, "16595": 476, "19324": 476, "19343": 476, "16488": 476, "18794": 476, "13896": 476, "atsuo": 476, "ishimoto": 476, "1492704": 476, "smtpserver": [476, 477, 478, 482], "smtpchannel": [476, 477, 478, 482], "11959": 476, "2118": 476, "15359": 476, "7171": 476, "poq": 476, "13773": 476, "16692": 476, "19689": 476, "18138": 476, "18143": 476, "18147": 476, "christien": 476, "8813": 476, "19292": 476, "17134": 476, "8109": 476, "calissu": 476, "18379": 476, "_stat": [476, 482], "11016": 476, "hiem": 476, "17804": 476, "zack": 476, "weinberg": 476, "16624": 476, "10197": 476, "18901": 476, "18878": 476, "19261": 476, "13390": 476, "5845": 476, "13477": 476, "18585": 476, "18725": 476, "18882": 476, "1565525": 476, "mathia": 476, "panzenb": 476, "ck": 476, "16423": 476, "18978": 476, "kachayev": [476, 477, 482], "16464": 476, "wozniak": 476, "17485": 476, "brecht": [476, 477, 478, 482], "17272": 476, "15701": 476, "16997": 476, "jyrki": 476, "pulliainen": 476, "15132": 476, "zach": [476, 482], "16935": 476, "melin": 476, "ramnani": 476, "16709": 476, "wardil": 476, "mcclure": 476, "11798": 476, "18937": 476, "17457": 476, "17015": 476, "toshio": 476, "kuratomi": 476, "17467": 476, "15417": 476, "19552": 476, "17487": 476, "17616": 476, "5202": 476, "14631": 476, "15528": 476, "17643": 476, "17741": 476, "ariel": 476, "poliak": 476, "14377": 476, "19274": 476, "william": [476, 482], "mallard": 476, "17201": 476, "14621": 476, "dsl": 476, "17162": 476, "montagn": 476, "16129": 476, "1772673": 476, "ysj": [476, 482], "7330": 476, "dhiru": 476, "kholia": 476, "18596": 476, "16632": 476, "18338": 476, "18920": 476, "18922": 476, "18569": 476, "gcov": 476, "lcov": 476, "clav": 476, "milauer": 476, "16421": 476, "17853": 476, "pyfailmalloc": 476, "18408": 476, "18520": 476, "18807": [476, 482], "18818": 476, "heaney": [476, 477], "vajraski": [476, 477, 482], "kok": [476, 477, 482], "19201": 476, "19222": [476, 477], "19223": 476, "3x": [476, 482], "14625": 476, "linear_prob": 476, "18771": 476, "19218": 476, "19209": 476, "19205": 476, "9548": 476, "16034": 476, "16674": 476, "15596": 476, "15758": 476, "bryant": 476, "18020": 476, "18756": 476, "xxxloader": 476, "set_load": [476, 482], "endtim": [476, 482], "readplistfrombyt": [476, 479, 482], "writeplisttobyt": 476, "18823": 476, "19375": 476, "16135": 476, "e52df05b496a": 476, "14470": 476, "16136": 476, "shlib_suffix": 476, "16754": 476, "tick_count": 476, "19199": 476, "tara": 476, "lyapun": 476, "15641": 476, "type_int64": [476, 482], "riti": 476, "15480": 476, "isbjunk": 476, "isbpopular": 476, "sm": 476, "13248": [476, 478, 482], "_gestalt": 476, "_mac_ver_lookup": 476, "_mac_ver_gstalt": 476, "_bcd2str": 476, "18393": 476, "17323": 476, "17115": 476, "module_to_load": 476, "19413": 476, "18065": 476, "is_frozen": 476, "felt": [476, 480, 482], "interstiti": 476, "17434": 476, "b32": 476, "18011": 476, "9177": 476, "14794": 476, "16290": 476, "16967": 476, "perpetu": 476, "17094": 476, "20625": 476, "19555": 476, "15204": 476, "16333": 476, "20784": 476, "16742": 476, "f_tstate": 476, "14432": 476, "elvi": [477, 478, 479, 480, 481, 482], "pranskevichus": [477, 478, 479, 480, 481, 482], "478": 477, "441": [477, 482], "arnon": [477, 482], "yaari": [477, 482], "9951": [477, 482], "23632": [477, 482], "benno": [477, 482], "lesli": [477, 482], "24450": [477, 482], "19235": [477, 482], "lc_type": [477, 482], "19977": [477, 482], "22638": [477, 482], "22796": [477, 482], "rudimentari": 477, "http_get": 477, "nathaniel": [477, 479, 482], "landau": 477, "girdhar": [477, 478, 482], "detract": 477, "500000": 477, "evid": 477, "lehtosalo": 477, "intermitt": [477, 482], "conceal": 477, "unguard": 477, "pernici": 477, "angelico": [477, 478, 482], "99998": 477, "00003": 477, "00001": 477, "barker": [477, 482], "19676": [477, 482], "22286": [477, 482], "23681": [477, 482], "22682": [477, 482], "22681": [477, 482], "24064": [477, 482], "17636": [477, 482], "23491": [477, 482], "paugh": [477, 482], "j3": [477, 479, 482], "eriksson": [477, 482], "14910": [477, 482], "proactor": [477, 482], "22560": 477, "21326": [477, 482], "yann": [477, 478, 482], "sionneau": [477, 478], "uvloop": [477, 478, 482], "korenberg": [477, 478], "jiryu": [477, 478, 482], "davi": [477, 478, 482], "nikolaus": [477, 482], "rath": [477, 482], "15955": [477, 482], "20289": [477, 482], "24270": [477, 482], "17442": [477, 482], "16991": [477, 482], "19505": [477, 482], "23704": [477, 482], "coodin": 477, "abscissa": 477, "jevnik": [477, 480, 482], "22189": [477, 482], "devin": [477, 482], "jeanpierr": [477, 482], "23086": [477, 482], "24018": [477, 482], "24184": [477, 482], "16104": 477, "19628": [477, 482], "21338": [477, 482], "11271": [477, 482], "21527": [477, 482], "18159": 477, "22389": [477, 482], "23171": [477, 482], "4254": [477, 482], "18039": [477, 482], "2052": [477, 482], "17445": [477, 482], "5309": [477, 482], "bdist": 477, "16314": [477, 482], "glenn": 477, "15916": [477, 482], "milan": [477, 479, 482], "oberkirch": [477, 479, 482], "20098": [477, 482], "abhilash": [477, 482], "raj": [477, 482], "21083": 477, "24211": [477, 482], "claud": [477, 482], "paroz": [477, 482], "16324": [477, 482], "21706": 477, "wei": [477, 482], "wu": [477, 482], "23566": [477, 482], "14373": [477, 482], "13968": [477, 482], "55555": 477, "6666": 477, "13742": [477, 482], "demian": [477, 478, 482], "21793": [477, 482], "panter": [477, 478, 482], "3566": 477, "maciej": [477, 482], "szulik": 477, "21800": [477, 482], "vignali": 477, "20295": [477, 482], "fabric": [477, 482], "anech": [477, 482], "20197": [477, 482], "17621": [477, 482], "21156": [477, 482], "20383": [477, 482], "20726": [477, 482], "20334": [477, 482], "24190": [477, 482], "17373": [477, 482], "20691": [477, 482], "24017": [477, 482], "24400": [477, 482], "16808": [477, 482], "20578": 477, "16531": [477, 482], "leon": [477, 482], "20480": [477, 482], "21650": [477, 482], "19361": [477, 482], "17911": [477, 482], "dric": [477, 480, 482], "krier": [477, 480, 482], "13918": [477, 482], "20537": [477, 482], "22788": [477, 482], "23185": [477, 482], "22486": [477, 481, 482], "21565": 477, "rosenberg": [477, 481, 482], "22955": [477, 482], "21176": [477, 482], "22524": [477, 482], "21719": [477, 482], "22181": [477, 482], "22054": [477, 482], "dower": [477, 478, 479, 480, 481], "23668": [477, 482], "rafik": [477, 482], "draoui": [477, 482], "10395": [477, 482], "19775": [477, 482], "21539": [477, 482], "19776": [477, 482], "mayank": [477, 482], "tripathi": [477, 482], "19777": [477, 482], "spam42": 477, "welborn": 477, "20218": [477, 482], "23611": [477, 482], "21804": [477, 482], "aac": [477, 482], "sre_match": 477, "9179": [477, 482], "22437": [477, 482], "1519638": [477, 482], "22578": [477, 482], "cauet": [477, 482], "22940": [477, 482], "18931": [477, 482], "19840": 477, "5411": [477, 482], "22018": [477, 482], "21076": [477, 482], "decode_data": [477, 478, 482], "process_messag": [477, 478], "19662": 477, "21795": [477, 482], "21725": [477, 482], "14758": 477, "15014": [477, 482], "gavin": 477, "chappel": 477, "16914": [477, 482], "22027": [477, 482], "18615": [477, 482], "22043": [477, 482], "17552": [477, 482], "23853": [477, 482], "21455": [477, 482], "21965": [477, 482], "suboptim": 477, "20188": [477, 482], "20421": [477, 482], "20951": [477, 482], "akira": [477, 482], "19940": [477, 482], "23186": [477, 482], "23239": [477, 482], "10203": [477, 482], "sinclair": 477, "jessica": [477, 482], "mckellar": 477, "13583": [477, 482], "23342": [477, 482], "set_coroutine_wrapp": [477, 479, 480, 482], "get_coroutine_wrapp": [477, 479, 480, 482], "22696": [477, 482], "23437": [477, 482], "21717": [477, 482], "vogt": [477, 482], "23193": [477, 482], "21549": [477, 482], "gindi": [477, 482], "18983": [477, 482], "2527": [477, 482], "_fix": [477, 482], "20035": [477, 482], "kazakov": [477, 482], "22619": [477, 482], "16662": [477, 482], "19746": [477, 482], "22936": [477, 482], "kushal": [477, 478, 482], "das": [477, 478, 482], "21238": [477, 482], "21262": [477, 482], "johann": [477, 482], "baiter": [477, 482], "20968": [477, 482], "kan": [477, 482], "vdahl": [477, 482], "23581": [477, 482], "23568": [477, 482], "17660": 477, "matej": [477, 482], "cepl": [477, 481, 482], "19494": [477, 482], "akshit": 477, "khurana": [477, 479, 482], "samwys": 477, "13866": [477, 482], "22366": [477, 482], "22118": [477, 482], "torr": [477, 482], "navarret": [477, 482], "silentghost": [477, 478, 482], "5800": [477, 482], "20627": [477, 482], "22960": [477, 482], "2175": [477, 482], "10590": [477, 482], "23252": [477, 482], "23001": [477, 482], "findfirstfil": 477, "findnextfil": 477, "23605": [477, 482], "21233": [477, 482], "albert": [477, 479, 482], "markus": [477, 482], "21486": [477, 482], "21487": [477, 482], "20826": [477, 482], "23266": [477, 482], "23133": [477, 482], "15381": [477, 482], "22003": [477, 482], "20416": [477, 482], "23344": [477, 482], "15027": [477, 482], "19380": [477, 482], "23206": [477, 482], "22540": [477, 482], "22847": [477, 482], "23488": [477, 482], "23910": [477, 482], "22464": 477, "23573": [477, 482], "_py_char2wchar": [477, 482], "_py_wchar2char": [477, 482], "18395": [477, 482], "18711": [477, 482], "24268": [477, 482], "amd": [477, 478], "gnu32": 477, "win_amd64": [477, 482], "win_ia64": 477, "win_arm": 477, "_d": 477, "legalchar": 477, "23671": [477, 482], "linux_distribut": [477, 482], "1322": [477, 482], "24248": [477, 482], "20438": 477, "22407": [477, 482], "23622": [477, 482], "chaput": [477, 482], "6623": [477, 482], "23464": [477, 482], "21205": [477, 482], "htmlparsererror": [477, 482], "21047": [477, 482], "16518": [477, 482], "22834": [477, 482], "23014": 477, "22818": [477, 482], "2211": [477, 482], "nnnn": [477, 482], "pot": [477, 482], "24284": [477, 482], "15582": [477, 482], "7830": [477, 482], "22453": [477, 482], "20204": [477, 482], "python36": 478, "gonzalez": [478, 479], "ivan": [478, 479, 480, 482], "levkivskyi": [478, 479, 480, 482], "lisa": [478, 480, 482], "1_000_000_000_000_000": 478, "1000000000000000": 478, "0x_ff_ff_ff_ff": 478, "ffff_ffff": 478, "ticker": 478, "pluginbas": 478, "plugin1": 478, "plugin2": 478, "teichmann": [478, 482], "intfield": 478, "int_field": 478, "some_fil": 478, "dusti": [478, 482], "koo": 478, "zevenhoven": 478, "27350": [478, 482], "0x7fbcd41666f8": 478, "forbiddenbyt": [478, 482], "0x7fbcd41666fc": 478, "ouch": 478, "1233329": 478, "1a": 478, "test_byt": 478, "648": 478, "0x00007fbcdbd32700": 478, "test_hex": 478, "26516": [478, 482], "26564": [478, 482], "21590": [478, 482], "nikhil": 478, "benesch": 478, "barnert": [478, 482], "25958": [478, 482], "emanuel": [478, 482], "26823": [478, 482], "15767": 478, "23722": [478, 480, 482], "26492": [478, 482], "26146": [478, 482], "28613": [478, 482], "27041": [478, 482], "27040": [478, 482], "28370": [478, 482], "25593": [478, 482], "26221": 478, "27392": [478, 482], "27456": [478, 479, 482], "28003": [478, 482], "26081": [478, 482], "28544": [478, 482], "25357": [478, 482], "628": [478, 482], "23229": [478, 482], "27598": [478, 482], "25987": 478, "28720": [478, 482], "17941": [478, 482], "25628": [478, 482], "26482": [478, 482], "27664": [478, 482], "25609": [478, 482], "24773": [478, 482], "ashley": 478, "anderson": 478, "12006": 478, "alessandro": 478, "cucci": 478, "19475": [478, 482], "27661": [478, 482], "25928": [478, 482], "anticip": [478, 482], "27819": [478, 482], "24277": [478, 482], "27331": [478, 482], "20476": 478, "27959": [478, 482], "23591": [478, 482], "23848": [478, 482], "hackman": [478, 482], "25788": [478, 482], "26470": [478, 482], "26798": [478, 482], "16113": [478, 482], "bertoni": 478, "joan": 478, "daemen": 478, "micha": [478, 482], "peeter": 478, "gill": 478, "assch": 478, "ronni": 478, "keer": 478, "27928": [478, 482], "rolf": [478, 482], "krahl": 478, "12319": [478, 482], "tkfont": 478, "swiegart": 478, "24225": [478, 482], "autocomplet": [478, 479, 482], "louie": [478, 479, 482], "15786": [478, 479, 482], "cheryl": [478, 479, 480, 482], "sabella": [478, 479, 480, 482], "1612262": [478, 479, 482], "wohlgang": [478, 479, 482], "27099": [478, 479, 482], "13802": [478, 479, 482], "31860": [478, 479, 482], "maxlin": [478, 479, 482], "33642": [478, 479, 482], "33768": [478, 479, 482], "33679": [478, 479, 482], "dpi": [478, 479, 482], "sharper": [478, 479, 482], "33656": [478, 479, 482], "1529353": [478, 479, 480, 482], "19611": [478, 482], "churn": 478, "richer": 478, "27172": [478, 482], "17909": [478, 482], "marian": [478, 482], "horban": 478, "24884": 478, "davin": [478, 480, 482], "pott": [478, 480, 482], "6766": [478, 482], "25994": [478, 482], "27186": [478, 482], "24164": [478, 482], "25382": [478, 482], "8637": [478, 482], "24879": [478, 482], "18844": [478, 482], "ython": 478, "433028": [478, 482], "24454": [478, 482], "xiang": [478, 479, 480, 482], "zhang": [478, 479, 480, 482], "27177": [478, 482], "tyler": [478, 482], "crompton": [478, 482], "26870": [478, 482], "25011": [478, 482], "25209": [478, 482], "1521950": 478, "wolfgang": [478, 482], "langner": 478, "26587": [478, 482], "lordthorsen": [478, 482], "16864": [478, 482], "stoke": [478, 482], "26536": [478, 482], "26907": 478, "27744": [478, 482], "crypto": [478, 482], "omar": [478, 479, 482], "sandov": [478, 479, 482], "26273": [478, 479, 482], "26404": [478, 482], "26721": [478, 482], "27850": [478, 482], "27766": [478, 482], "28043": [478, 482], "19500": [478, 482], "warhawk": 478, "28025": [478, 482], "28085": 478, "27181": [478, 480, 482], "11734": [478, 482], "26741": [478, 482], "6135": [478, 482], "27781": [478, 482], "27932": [478, 482], "phane": [478, 479, 482], "wirtel": [478, 479, 482], "25485": [478, 482], "6422": [478, 482], "23552": [478, 482], "trace_add": [478, 482], "trace_remov": [478, 482], "trace_info": [478, 482], "trace_vari": [478, 482], "trace_vdelet": [478, 482], "trace_vinfo": [478, 482], "22115": [478, 482], "26588": [478, 482], "280": 478, "189": 478, "amit": [478, 482], "saha": [478, 482], "26323": [478, 482], "21271": [478, 482], "nikolay": [478, 482], "bogoychev": [478, 482], "16099": [478, 482], "balcerzak": 478, "22829": 478, "26568": 478, "26567": [478, 482], "rouault": [478, 482], "23026": [478, 482], "27982": [478, 482], "26885": [478, 482], "26039": [478, 482], "26243": [478, 482], "16764": [478, 482], "demur": [478, 482], "rume": [478, 482], "26647": [478, 482], "28050": 478, "24870": 478, "25227": [478, 482], "25267": [478, 482], "25301": [478, 482], "25349": [478, 482], "25399": [478, 482], "25401": [478, 482], "snider": [478, 482], "26574": [478, 482], "26249": [478, 482], "27056": [478, 482], "27574": [478, 482], "25596": [478, 482], "26032": [478, 482], "25638": [478, 482], "25873": [478, 482], "25869": [478, 482], "25971": [478, 482], "py_long_long": 478, "17884": [478, 482], "ndk": [478, 482], "lollipop": 478, "26865": 478, "alecsandru": [478, 482], "patrascu": [478, 482], "26359": [478, 482], "5319": [478, 482], "26282": [478, 482], "0b4": [478, 482], "223967b49e49": 478, "27243": [478, 482], "27364": [478, 482], "25791": [478, 482], "mariatta": [478, 482], "25002": 478, "21708": [478, 482], "extra_path": [478, 482], "27919": [478, 482], "26129": [478, 482], "26754": [478, 482], "22493": [478, 482], "28022": [478, 482], "25154": [478, 482], "fullmodnam": 478, "find_lines_from_cod": 478, "find_lin": 478, "find_str": 478, "find_executable_lin": 478, "tk_menubar": [478, 482], "tk_bindfortravers": [478, 482], "cdrom": [478, 482], "cdio": [478, 482], "stropt": [478, 482], "chronic": 478, "h2pi": [478, 482], "show_track_count": [478, 482], "23034": [478, 482], "balogh": [478, 482], "2091": [478, 482], "25768": [478, 482], "20059": [478, 482], "taddei": [478, 482], "odziej": [478, 482], "23883": [478, 482], "18018": [478, 482], "23430": [478, 482], "26685": [478, 482], "18726": [478, 482], "holden": [478, 482], "27842": [478, 482], "25287": [478, 482], "lita": [478, 482], "cho": [478, 482], "21815": [478, 482], "jakub": [478, 482], "stasiak": [478, 482], "26335": [478, 482], "ramchandra": [478, 482], "17211": 478, "25953": [478, 482], "plugin": 478, "25483": 478, "27078": [478, 482], "27140": [478, 482], "build_map_unpack_with_cal": [478, 482], "build_tuple_unpack_with_cal": [478, 482], "call_function_var": 478, "call_function_var_kw": 478, "make_closur": [478, 482], "27095": [478, 482], "27213": [478, 482], "28257": [478, 482], "store_annot": [478, 479, 482], "27985": [478, 482], "pyexc_recursionerrorinst": [478, 479, 482], "22898": [478, 479, 482], "30697": [478, 479, 482], "31900": [478, 479, 482], "33899": [478, 479, 480, 482], "37228": [478, 479, 480, 481, 482], "advent": 479, "uncov": [479, 482], "glare": 479, "advers": 479, "from_str": 479, "validate_b": 479, "bray": [479, 482], "masayuki": [479, 482], "coars": 479, "ja": 479, "12844": [479, 482], "18896": [479, 482], "xiao": [479, 482], "28927": [479, 482], "32677": [479, 482], "29546": [479, 482], "30024": [479, 482], "28974": [479, 482], "30579": [479, 482], "33053": [479, 482], "31415": [479, 482], "32248": [479, 482], "importlib_resourc": [479, 481, 482], "14191": [479, 482], "32314": [479, 480, 482], "32436": [479, 482], "32311": [479, 482], "23749": [479, 482], "31819": [479, 482], "32250": [479, 482], "32251": [479, 482], "32269": [479, 482], "32391": [479, 482], "32410": [479, 482], "32415": [479, 482], "32418": [479, 482], "32662": [479, 482], "32741": [479, 482], "quentin": [479, 482], "dawan": 479, "31245": [479, 482], "create_accepted_socket": 479, "aspinal": 479, "29970": [479, 482], "marat": [479, 482], "sharafutdinov": [479, 482], "31943": [479, 482], "32193": [479, 482], "32356": [479, 482], "32066": [479, 482], "30508": [479, 482], "33792": [479, 482], "30103": [479, 482], "oz": 479, "tiram": 479, "30095": 479, "32320": [479, 482], "31650": [479, 482], "21423": [479, 482], "moreau": 479, "31540": [479, 482], "bakker": [479, 482], "10049": [479, 482], "29679": 479, "30241": [479, 482], "mohr": [479, 482], "kulakov": [479, 482], "29302": [479, 482], "sanyam": [479, 482], "21862": [479, 482], "31664": [479, 482], "31702": [479, 482], "15873": [479, 482], "5288": [479, 482], "32630": [479, 482], "11822": [479, 482], "11913": [479, 482], "31801": [479, 482], "33217": [479, 482], "32227": [479, 482], "zekun": 479, "31558": [479, 482], "32433": [479, 482], "soffer": [479, 482], "31945": [479, 482], "pierr": [479, 480, 482], "quentel": [479, 482], "29654": [479, 482], "28707": 479, "31639": [479, 482], "5680": [479, 480, 482], "37627": [479, 480, 482], "saimadhav": [479, 480, 482], "heblikar": [479, 480, 482], "17535": [479, 480, 482], "garvit": [479, 482], "khatri": [479, 482], "29851": [479, 482], "30436": [479, 482], "30526": [479, 482], "15216": [479, 482], "20825": [479, 482], "30537": [479, 482], "10379": [479, 482], "30520": [479, 482], "30522": [479, 482], "31080": [479, 482], "29962": [479, 482], "nitish": [479, 482], "chandra": [479, 482], "22589": [479, 482], "20486": [479, 482], "30596": [479, 482], "vitor": [479, 482], "pereira": [479, 482], "30794": [479, 482], "18966": [479, 482], "28682": [479, 482], "25996": [479, 482], "16500": [479, 482], "31368": [479, 482], "19930": [479, 482], "32441": [479, 482], "32659": [479, 482], "ry": [479, 482], "30897": [479, 482], "31389": [479, 482], "32206": [479, 482], "bernhard": 479, "wiedemann": 479, "29708": [479, 482], "feanil": 479, "patel": 479, "31128": [479, 482], "14976": [479, 482], "31690": [479, 482], "25054": [479, 482], "30215": [479, 482], "30349": [479, 482], "10076": [479, 482], "30050": [479, 482], "32373": [479, 482], "32454": [479, 482], "29728": [479, 482], "cathi": 479, "averi": 479, "27584": [479, 482], "28134": [479, 482], "lele": [479, 482], "gaifax": [479, 482], "27645": [479, 482], "31843": [479, 482], "31399": [479, 482], "libssl": 479, "libressl": [479, 482], "32185": [479, 482], "mandeep": [479, 482], "singh": [479, 482], "23033": [479, 482], "blacklist": [479, 482], "whitelist": [479, 482], "31429": [479, 482], "28414": [479, 482], "32947": [479, 482], "20995": [479, 482], "29136": [479, 482], "30622": [479, 482], "33618": [479, 482], "32951": [479, 482], "32609": 479, "1198569": [479, 482], "bo": [479, 480, 482], "bayl": [479, 480, 482], "32102": [479, 480, 482], "clegg": [479, 482], "31756": [479, 482], "segev": [479, 482], "19764": [479, 482], "25942": [479, 482], "31353": [479, 482], "28740": [479, 482], "32591": [479, 482], "32025": [479, 482], "32585": [479, 482], "32121": [479, 482], "krebber": [479, 482], "29377": [479, 482], "32265": [479, 482], "32717": 479, "haag": 479, "32071": [479, 482], "20804": [479, 482], "30541": [479, 482], "theun": [479, 482], "ratnadeep": [479, 482], "debnath": [479, 482], "16285": [479, 482], "22807": [479, 482], "32107": [479, 482], "20361": [479, 482], "32043": [479, 482], "32230": [479, 482], "31975": [479, 482], "31648": [479, 482], "simplexmlrpcdispatch": [479, 482], "7769": [479, 482], "irmen": 479, "jong": 479, "31072": [479, 482], "zhime": 479, "31638": [479, 482], "21417": [479, 482], "30693": [479, 482], "25658": [479, 482], "28411": [479, 482], "victorin": 479, "23699": [479, 482], "31338": [479, 482], "30054": 479, "31574": [479, 482], "28761": [479, 482], "28769": [479, 482], "milman": [479, 482], "28280": [479, 482], "27867": [479, 482], "10381": [479, 482], "30708": [479, 482], "abid": 479, "29102": [479, 482], "29240": [479, 482], "28822": [479, 482], "31370": [479, 482], "27979": [479, 482], "30450": [479, 482], "29300": 479, "29507": 479, "29452": 479, "29286": 479, "29585": [479, 482], "31333": [479, 482], "26110": [479, 482], "32296": [479, 482], "32348": [479, 482], "32355": [479, 482], "32351": [479, 482], "31970": [479, 482], "32226": [479, 482], "elliot": [479, 482], "gorokhovski": [479, 482], "28685": [479, 482], "31179": [479, 482], "32544": [479, 482], "24821": [479, 482], "28638": [479, 482], "32403": [479, 482], "28564": [479, 482], "30285": [479, 482], "31671": [479, 482], "30014": [479, 482], "eugen": [479, 482], "toder": [479, 482], "29469": [479, 482], "11549": 479, "70x": [479, 482], "wielgosik": [479, 482], "24700": [479, 482], "26121": [479, 482], "31344": [479, 482], "32305": [479, 482], "32303": [479, 482], "32690": [479, 482], "32304": [479, 482], "10544": [479, 480, 482], "28894": 479, "openfp": [479, 481, 482], "31985": [479, 482], "32253": [479, 482], "25988": [479, 482], "28847": [479, 482], "28692": [479, 482], "29576": [479, 482], "chi": [479, 482], "hsuan": [479, 482], "yen": [479, 482], "9850": [479, 482], "_dummy_thread": [479, 481, 482], "28332": [479, 482], "28124": [479, 482], "28799": [479, 482], "nix": 479, "jessi": 479, "trusti": 479, "lts": 479, "xenial": 479, "sles": 479, "sp3": 479, "splitunc": [479, 482], "_internaldict": [479, 482], "_overlap": [479, 482], "install_misc": [479, 482], "vander": [479, 482], "weel": [479, 482], "29218": [479, 482], "fpectl": [479, 482], "29137": [479, 482], "30291": [479, 482], "0p": [479, 482], "30362": [479, 482], "30406": [479, 482], "32670": [479, 482], "31709": [479, 482], "32012": [479, 482], "32023": [479, 482], "31233": [479, 482], "33540": [479, 482], "31151": [479, 482], "24744": [479, 482], "29193": [479, 482], "29192": [479, 482], "21071": [479, 482], "29979": [479, 482], "30399": [479, 482], "utkarsh": 479, "upadhyay": 479, "30302": [479, 482], "32308": [479, 482], "29995": [479, 482], "32331": [479, 482], "33169": [479, 482], "32327": [479, 482], "sottil": [479, 480, 481, 482], "26510": [479, 482], "31778": [479, 482], "28292": [479, 482], "32792": [479, 482], "nemec": 479, "33097": [479, 482], "tocknel": [479, 482], "23835": [479, 482], "32550": [479, 482], "28137": [479, 482], "latent": 479, "22257": [479, 482], "25612": [479, 482], "34247": 479, "affection": 480, "tusk": 480, "discount": 480, "clean_nam": 480, "allowed_nam": 480, "emili": [480, 482], "morehous": [480, 482], "35224": [480, 482], "impair": 480, "36540": [480, 482], "33499": [480, 482], "21536": [480, 482], "36722": [480, 482], "36721": [480, 482], "eric_idl": 480, "member_sinc": 480, "075": 480, "theta": 480, "36817": [480, 482], "_pyruntimest": [480, 482], "36763": [480, 482], "36974": [480, 481, 482], "36785": [480, 482], "32489": [480, 482], "33073": [480, 482], "37819": [480, 482], "20092": [480, 482], "copyright_year_pattern": 480, "eunic": [480, 482], "30688": [480, 482], "lapeyr": [480, 481, 482], "33462": [480, 482], "34641": [480, 482], "simpson": 480, "homer": 480, "marg": 480, "bart": 480, "cuthbert": [480, 482], "jordan": [480, 482], "32117": [480, 482], "15248": [480, 482], "32417": [480, 482], "1054041": [480, 482], "37032": [480, 482], "137": 480, "diophantin": 480, "equat": 480, "369": 480, "36027": [480, 482], "rn": 480, "heissler": 480, "glaser": [480, 482], "olivi": [480, 482], "grisel": [480, 482], "35900": [480, 482], "chardet": 480, "34632": [480, 482], "33416": [480, 482], "35766": [480, 482], "37028": [480, 482], "32528": [480, 482], "34687": [480, 482], "meili": [480, 482], "29883": [480, 482], "23057": [480, 482], "36999": [480, 482], "34270": [480, 482], "twisteroid": 480, "ambassador": 480, "33530": [480, 482], "34616": [480, 482], "remedi": 480, "35864": [480, 482], "sanderson": [480, 482], "29235": [480, 482], "selik": [480, 482], "34003": [480, 482], "31680": [480, 482], "36085": [480, 482], "36004": [480, 482], "36772": [480, 482], "21145": [480, 482], "taskmanag": 480, "32380": [480, 482], "36016": [480, 482], "franz": [480, 482], "glasner": 480, "2504": [480, 482], "guo": [480, 482], "teo": [480, 482], "34898": [480, 482], "6584": [480, 482], "13153": [480, 482], "4603": [480, 481], "johnni": [480, 481, 482], "najera": [480, 481, 482], "38944": [480, 481, 482], "37765": [480, 481, 482], "audioclip": 480, "bit_rat": 480, "kilohertz": 480, "36326": [480, 482], "1015": 480, "1045": 480, "34659": [480, 482], "31553": [480, 482], "jupyt": 480, "33897": [480, 482], "33089": [480, 482], "35606": [480, 482], "yash": [480, 482], "aggarw": [480, 482], "keller": [480, 482], "37128": [480, 482], "37178": [480, 482], "35431": [480, 482], "650320427": 480, "650320426": 480, "36887": [480, 482], "33083": [480, 482], "32941": [480, 482], "35813": [480, 482], "26836": [480, 482], "37834": [480, 482], "33721": [480, 482], "36264": [480, 482], "joannah": [480, 481, 482], "nanjeky": [480, 481, 482], "26978": [480, 482], "jon": [480, 481, 482], "janzen": [480, 481], "26707": [480, 482], "30670": [480, 482], "22640": [480, 482], "20849": [480, 482], "gerlach": [480, 482], "30661": 480, "17561": [480, 482], "37007": [480, 482], "34670": [480, 482], "35904": [480, 482], "35892": 480, "equiprob": 480, "36546": [480, 482], "36018": [480, 482], "temperature_feb": 480, "356099432828281": 480, "3184678262814532": 480, "2039930378537762": 480, "el_ni": 480, "climat": 480, "830080526611674": 480, "294144947901014": 480, "672102882379219": 480, "000027119750287": 480, "647488369766392": 480, "36829": [480, 482], "36268": [480, 482], "1230540": [480, 482], "tesler": 480, "36084": [480, 482], "selection_from": [480, 482], "selection_pres": [480, 482], "selection_rang": [480, 482], "selection_to": [480, 482], "juliett": [480, 482], "monsel": [480, 482], "34829": [480, 482], "moveto": [480, 482], "23831": [480, 482], "transparency_get": 480, "transparency_set": 480, "25451": [480, 482], "35702": [480, 482], "lat_long": 480, "grid_squar": 480, "xy_coordin": 480, "get_status": 480, "1415926536": 480, "belang": 480, "euresti": 480, "32285": [480, 482], "37966": [480, 482], "26467": [480, 482], "24412": [480, 482], "strandmark": [480, 482], "35047": [480, 482], "32972": [480, 482], "testrequest": 480, "test_get": 480, "32718": [480, 482], "36669": [480, 482], "17239": [480, 482], "28238": [480, 482], "13611": [480, 482], "36676": [480, 482], "36673": [480, 482], "35153": [480, 482], "35537": [480, 482], "smb": [480, 482], "33695": [480, 482], "pygc_head": [480, 481, 482], "33597": [480, 482], "bolsterle": [480, 482], "30977": [480, 482], "35664": [480, 482], "32492": [480, 482], "33234": [480, 482], "36012": [480, 482], "23867": 480, "35582": 480, "36127": 480, "26219": [480, 482], "36707": [480, 482], "8m": 480, "37m": 480, "35081": [480, 482], "pyobject_init_var": [480, 481, 482], "_py_dealloc": 480, "35059": [480, 482], "pybytearray_init": [480, 482], "pybytearray_fini": [480, 482], "35713": [480, 482], "33818": [480, 482], "dualiti": 480, "32430": [480, 482], "36048": [480, 482], "eddi": 480, "elizondo": 480, "35810": [480, 481, 482], "37221": [480, 482], "38234": [480, 482], "37481": [480, 482], "29209": [480, 482], "34075": [480, 482], "9372": [480, 482], "36320": [480, 482], "32892": [480, 482], "36917": [480, 482], "36921": [480, 482], "34790": [480, 481, 482], "33710": [480, 482], "isal": [480, 481, 482], "35283": [480, 482], "sharedmemoryserv": 480, "36492": [480, 482], "36952": [480, 482], "35471": [480, 482], "35345": [480, 482], "36895": [480, 482], "25427": [480, 482], "36297": [480, 482], "30262": [480, 482], "36933": [480, 482], "34850": [480, 482], "35459": 480, "36793": [480, 482], "aix3": [480, 482], "36588": [480, 482], "36475": [480, 482], "37412": [480, 482], "34651": [480, 482], "37951": [480, 482], "36348": [480, 482], "31508": [480, 482], "roja": 480, "34160": [480, 482], "32749": [480, 482], "pycore_pyst": [480, 482], "35886": [480, 482], "2122": [480, 482], "33106": [480, 482], "32751": [480, 481, 482], "37027": [480, 482], "kb2533623": 480, "pgen": [480, 482], "36623": [480, 482], "pyeval_reinitthread": [480, 482], "36728": [480, 482], "36381": [480, 482], "foo_struct": [480, 481], "foo_new": 480, "0x03080000": 480, "33407": [480, 482], "32388": [480, 482], "pynode_addchild": 480, "pyparser_addtoken": 480, "libpython38": [480, 482], "mingw": [480, 482], "python38": 480, "gendef": 480, "37351": [480, 482], "unrol": [480, 482], "break_loop": [480, 482], "continue_loop": [480, 482], "setup_loop": [480, 482], "setup_except": [480, 482], "begin_fin": [480, 482], "call_fin": [480, 482], "pop_fin": [480, 482], "end_fin": [480, 482], "with_cleanup_start": [480, 482], "17611": [480, 482], "33041": [480, 482], "var_access_benchmark": [480, 481, 482], "35884": [480, 482], "read_loc": [480, 481], "read_nonloc": [480, 481], "read_glob": [480, 481], "read_builtin": [480, 481], "read_classvar_from_class": [480, 481], "read_classvar_from_inst": [480, 481], "read_instancevar": [480, 481], "read_instancevar_slot": [480, 481], "read_namedtupl": [480, 481], "read_boundmethod": [480, 481], "write_loc": [480, 481], "write_nonloc": [480, 481], "write_glob": [480, 481], "write_classvar": [480, 481], "write_instancevar": [480, 481], "write_instancevar_slot": [480, 481], "read_list": [480, 481], "read_dequ": [480, 481], "read_strdict": [480, 481], "write_list": [480, 481], "write_dequ": [480, 481], "write_dict": [480, 481], "write_strdict": [480, 481], "list_append_pop": [480, 481], "deque_append_pop": [480, 481], "deque_append_popleft": [480, 481], "loop_overhead": [480, 481], "i7": [480, 481], "4960hq": [480, 481], "36384": [480, 481, 482], "achraf": 480, "merzouki": 480, "_abc": [481, 482], "_bz2": [481, 482], "_codec": [481, 482], "_contextvar": [481, 482], "_crypt": [481, 482], "_functool": [481, 482], "_json": [481, 482], "multiphas": [481, 482], "_hashlib": [481, 482], "_posixsubprocess": [481, 482], "36144": [481, 482], "39939": [481, 482], "greet_al": 481, "ta": [481, 482], "kaya": [481, 482], "39481": [481, 482], "pythonoldpars": [481, 482], "ngalim": [481, 482], "siregar": [481, 482], "37444": [481, 482], "20443": [481, 482], "37388": [481, 482], "28029": [481, 482], "39702": [481, 482], "40257": [481, 482], "ag_run": [481, 482], "30773": [481, 482], "40824": [481, 482], "41848": 481, "43755": [481, 482], "17005": [481, 482], "37995": [481, 482], "38870": [481, 482], "39638": [481, 482], "34037": [481, 482], "38692": [481, 482], "32309": [481, 482], "typererror": [481, 482], "ido": [481, 482], "37404": [481, 482], "lum": 481, "frenzi": 481, "balhar": 481, "40495": [481, 482], "38112": [481, 482], "39349": [481, 482], "39812": [481, 482], "39207": [481, 482], "38312": [481, 482], "24416": [481, 482], "40698": [481, 482], "38602": [481, 482], "39259": [481, 482], "38379": [481, 482], "39322": [481, 482], "xof": [481, 482], "37630": [481, 482], "40479": [481, 482], "39509": [481, 482], "rhode": [481, 482], "39507": [481, 482], "38615": [481, 482], "40375": [481, 482], "39336": [481, 482], "39791": [481, 482], "36350": [481, 482], "39775": [481, 482], "oleksandr": [481, 482], "pavliuk": [481, 482], "34788": [481, 482], "39648": [481, 482], "ananthakrishnan": 481, "39479": [481, 482], "39288": [481, 482], "39310": [481, 482], "30966": [481, 482], "38493": [481, 482], "38713": [481, 482], "39413": [481, 482], "39395": [481, 482], "40094": [481, 482], "girt": [481, 482], "folkmani": [481, 482], "30618": [481, 482], "hopper": [481, 482], "lidral": [481, 482], "porter": [481, 482], "20523": [481, 482], "bordum": [481, 482], "37376": [481, 482], "40286": [481, 482], "38712": [481, 482], "39329": [481, 482], "tatschner": 481, "25780": [481, 482], "40291": [481, 482], "shinya": [481, 482], "okano": [481, 482], "28724": [481, 482], "thread_cputim": [481, 482], "40192": [481, 482], "jek": [481, 482], "charalampo": [481, 482], "strataki": [481, 482], "1294959": [481, 482], "jendrik": [481, 482], "seipp": [481, 482], "13601": [481, 482], "huon": 481, "40630": 481, "varoquaux": [481, 482], "konstantin": [481, 482], "kashin": [481, 482], "39926": [481, 482], "37663": [481, 482], "eoln": 481, "mefistot": 481, "39011": [481, 482], "32856": [481, 482], "40010": [481, 482], "closefrom": [481, 482], "mast": [481, 482], "conrad": [481, 482], "kubilay": [481, 482], "kocak": [481, 482], "38061": [481, 482], "87x": 481, "37986": [481, 482], "37207": [481, 482], "kapun": [481, 482], "8425": [481, 482], "thrash": [481, 482], "37257": [481, 482], "39434": [481, 482], "37348": [481, 482], "39586": [481, 482], "37315": [481, 482], "35712": [481, 482], "28286": [481, 482], "splitlist": [481, 482], "hexbin4": [481, 482], "39353": [481, 482], "34822": [481, 482], "augload": [481, 482], "augstor": [481, 482], "39639": [481, 482], "39969": [481, 482], "39988": [481, 482], "39877": [481, 482], "33262": [481, 482], "colvin": [481, 482], "xgtitl": [481, 482], "39366": [481, 482], "38916": [481, 482], "call_profil": [481, 482], "37414": [481, 482], "37392": [481, 482], "pyimport_cleanup": 481, "36710": 481, "37312": [481, 482], "37320": [481, 482], "37804": [481, 482], "36543": [481, 482], "36409": [481, 482], "pygen_needsfin": [481, 482], "15088": [481, 482], "39351": [481, 482], "39350": [481, 482], "39357": [481, 482], "39377": [481, 482], "34793": [481, 482], "39489": [481, 482], "40182": [481, 482], "has_exec": [481, 482], "40208": [481, 482], "40967": [481, 482], "39239": [481, 482], "39562": [481, 482], "34538": 481, "37742": [481, 482], "aiudi": [481, 482], "34775": [481, 482], "latex_latin1": 481, "jordon": 481, "xu": [481, 482], "37751": [481, 482], "foo_travers": 481, "0x03090000": 481, "29548": [481, 482], "34880": [481, 482], "39156": [481, 482], "setenv": [481, 482], "10945": [481, 482], "isysroot": [481, 482], "34956": [481, 482], "arm64": [481, 482], "33125": [481, 482], "36044": [481, 482], "37707": [481, 482], "marcel": [481, 482], "plch": [481, 482], "38787": [481, 482], "40421": [481, 482], "39947": [481, 482], "37194": [481, 482], "38644": [481, 482], "39542": [481, 482], "40024": [481, 482], "40241": [481, 482], "_pyobject_functionstr": [481, 482], "37645": [481, 482], "37483": [481, 482], "38500": [481, 482], "39984": [481, 482], "38650": [481, 482], "pycore_gc": 481, "pyunicode_wstr_length": [481, 482], "39882": [481, 482], "37540": [481, 482], "pyobject_new_var": [481, 482], "pyobject_get_weakrefs_listptr": [481, 482], "pyfpe_start_protect": [481, 482], "pyfpe_end_protect": [481, 482], "38835": [481, 482], "37878": [481, 482], "_py_newrefer": [481, 482], "_py_forgetrefer": [481, 482], "_pytracemalloc_newrefer": [481, 482], "_py_getreftot": [481, 482], "pytrash_unwind_level": [481, 482], "py_trashcan_begin_condit": [481, 482], "_pydebug_printtotalref": 481, "_py_printrefer": 481, "_py_printreferenceaddress": 481, "_py_tracemalloc_config": 481, "_py_addtoallobject": 481, "getfram": [481, 482], "_pythreadstate_getfram": [481, 482], "pythreadframegett": [481, 482], "39946": [481, 482], "37340": [481, 482], "38896": [481, 482], "40428": [481, 482], "pyasyncgen_clearfreelist": [481, 482], "pycontext_clearfreelist": [481, 482], "pydict_clearfreelist": [481, 482], "pyfloat_clearfreelist": [481, 482], "pyframe_clearfreelist": [481, 482], "pylist_clearfreelist": [481, 482], "pymethod_clearfreelist": [481, 482], "pycfunction_clearfreelist": [481, 482], "pyset_clearfreelist": [481, 482], "pytuple_clearfreelist": [481, 482], "pyunicode_clearfreelist": [481, 482], "_pyunicode_clearstaticstr": [481, 482], "39465": [481, 482], "_pybytes_insertthousandsgroupinglocal": [481, 482], "_pybytes_insertthousandsgroup": [481, 482], "_py_initializefromarg": [481, 482], "_py_initializefromwidearg": [481, 482], "_pyfloat_repr": [481, 482], "_pyfloat_digit": [481, 482], "_pyfloat_digitsinit": [481, 482], "pyframe_extendstack": [481, 482], "_pyaiterwrapper_typ": [481, 482], "pynullimporter_typ": [481, 482], "pycmpwrapper_typ": [481, 482], "pysortwrapper_typ": [481, 482], "pynoargsfunct": [481, 482], "39372": [481, 482], "lawrenc": [481, 482], "anna": 481, "41100": [481, 482], "97616": 482, "limor": 482, "97514": 482, "escal": 482, "42919": 482, "87389": 482, "hamza": 482, "avvan": 482, "79096": 482, "92888": 482, "98374": 482, "98461": 482, "98354": 482, "_imp": 482, "create_builtin": 482, "98398": 482, "98390": 482, "98254": 482, "97997": 482, "97973": 482, "96078": 482, "97955": 482, "97912": 482, "97002": 482, "97943": 482, "97850": 482, "86298": 482, "97779": 482, "97752": 482, "97591": 482, "97670": 482, "getdxp": 482, "analyze_dxp": 482, "dxp": 482, "dynamic_execution_profil": 482, "dxpair": 482, "94526": 482, "96975": 482, "96848": 482, "95921": 482, "96821": 482, "_testcapimodul": 482, "95778": 482, "96387": 482, "mingliang": 482, "zhao": 482, "96864": 482, "96678": 482, "96754": 482, "backtrac": 482, "90997": 482, "96751": 482, "64373": 482, "96641": 482, "keywrapp": 482, "96636": 482, "setrac": 482, "96572": 482, "96611": 482, "96612": 482, "90230": 482, "96587": 482, "96569": 482, "behavoir": 482, "96582": 482, "_pythread_currentfram": 482, "91079": 482, "93911": 482, "96348": 482, "95196": 482, "96364": 482, "96352": 482, "93554": 482, "fallthrough": 482, "backward_target": 482, "next_block": 482, "96268": 482, "96237": 482, "f_func": 482, "f_funcobj": 482, "96187": 482, "_pycode_getextra": 482, "96143": 482, "is_stack_trampoline_act": 482, "96071": 482, "96046": 482, "ht_cached_key": 482, "96005": 482, "pyenv": 482, "93678": 482, "_testinternalcapi": 482, "optimize_cfg": 482, "cfgoptimizationtestcas": 482, "95245": 482, "weakreflist": 482, "95977": 482, "91210": 482, "95922": 482, "eliminate_empty_basic_block": 482, "95818": 482, "95876": 482, "_pypegen_raise_error_known_loc": 482, "95605": 482, "95150": 482, "91146": 482, "87092": 482, "codegen": 482, "95355": 482, "_pypegen_parser_new": 482, "honglin": 482, "zhu": 482, "90081": 482, "slowdown": 482, "95324": 482, "cfg_builder": 482, "95185": 482, "absurd": 482, "94438": 482, "95060": 482, "addrq": 482, "95113": 482, "extended_arg_quick": 482, "unquicken": 482, "91409": 482, "95023": 482, "noam": 482, "cohen": 482, "94036": 482, "94938": 482, "94996": 482, "94739": 482, "94949": 482, "94947": 482, "91256": 482, "94869": 482, "94893": 482, "94822": 482, "91153": 482, "90699": 482, "94694": 482, "93252": 482, "94215": 482, "92228": 482, "94485": 482, "91719": 482, "94329": 482, "1000s": 482, "94360": 482, "int_min": 482, "94262": 482, "94192": 482, "93883": 482, "94163": 482, "94021": 482, "93955": 482, "93841": 482, "_stats_on": 482, "_stats_off": 482, "_stats_clear": 482, "_stats_dump": 482, "93516": 482, "traceabl": 482, "89828": 482, "93671": 482, "93662": 482, "93461": 482, "93621": 482, "93533": 482, "93444": 482, "basicblock": 482, "b_nofallthrough": 482, "b_exit": 482, "b_return": 482, "93418": 482, "93382": 482, "93359": 482, "93356": 482, "93354": 482, "93283": 482, "93345": 482, "93223": 482, "84694": 482, "91924": 482, "93040": 482, "93143": 482, "93061": 482, "93065": 482, "hamt": 482, "libman": 482, "magicstack": 482, "93021": 482, "89914": 482, "92955": 482, "92930": 482, "90690": 482, "92914": 482, "92858": 482, "92804": 482, "92777": 482, "92658": 482, "92236": 482, "91102": 482, "92619": 482, "88750": 482, "92261": 482, "91432": 482, "91399": 482, "unicodetype_db": 482, "91578": 482, "47091": 482, "42316": 482, "97928": 482, "98363": 482, "98331": 482, "98307": 482, "96035": 482, "98257": 482, "98251": 482, "98178": 482, "44098": 482, "87730": 482, "98023": 482, "90985": 482, "harsh": 482, "undeprec": 482, "97646": 482, "9239": 482, "97930": 482, "97837": 482, "97825": 482, "97008": 482, "82711": 482, "friedrich": 482, "bolz": 482, "tereick": 482, "97799": 482, "97781": 482, "mutablil": 482, "96827": 482, "95534": 482, "97592": 482, "97639": 482, "97545": 482, "73588": 482, "96865": 482, "97005": 482, "libexpat": 482, "85760": 482, "96704": 482, "96819": 482, "resource_track": 482, "95865": 482, "96741": 482, "96735": 482, "46412": 482, "ndb": 482, "96652": 482, "68163": 482, "96538": 482, "96465": 482, "96079": 482, "_annotatedalia": 482, "96415": 482, "_cell_factori": 482, "95987": 482, "96388": 482, "96385": 482, "__typing_prepare_subst__": 482, "96142": 482, "_dataclassparam": 482, "96073": 482, "overeag": 482, "89258": 482, "96346": 482, "96349": 482, "90467": 482, "96172": 482, "96159": 482, "96175": 482, "96145": 482, "96052": 482, "96125": 482, "96019": 482, "makeunicodedata": 482, "95463": 482, "69142": 482, "tzoffset": 482, "95899": 482, "95736": 482, "95861": 482, "95804": 482, "95704": 482, "95149": 482, "95609": 482, "95289": 482, "manger": 482, "94909": 482, "95385": 482, "83901": 482, "95339": 482, "95045": 482, "95231": 482, "95097": 482, "95087": 482, "95199": 482, "95194": 482, "93899": 482, "95166": 482, "95132": 482, "11a1": 482, "24421": 482, "85128": 482, "93157": 482, "91212": 482, "shin": 482, "myoung": 482, "serp": 482, "95077": 482, "95109": 482, "95105": 482, "95066": 482, "95005": 482, "_pyaccu": 482, "_pyunicodewrit": 482, "90085": 482, "94857": 482, "94821": 482, "94736": 482, "_multiprocess": 482, "semlock": 482, "81620": 482, "74116": 482, "87822": 482, "priorit": 482, "88050": 482, "94637": 482, "ssl_ctx_set_default_verify_path": 482, "92546": 482, "94607": 482, "94619": 482, "93910": 482, "93896": 482, "94343": 482, "94382": 482, "78724": 482, "94510": 482, "92336": 482, "94398": 482, "94318": 482, "89988": 482, "94254": 482, "93259": 482, "from_nam": 482, "93096": 482, "test_codec": 482, "encodedfiletest": 482, "94207": 482, "_struct": 482, "test_base64": 482, "legacybase64testcas": 482, "test_encodebyt": 482, "94214": 482, "94182": 482, "91742": 482, "94101": 482, "84753": 482, "mehdi": 482, "abaakouk": 482, "94028": 482, "27884": 482, "93973": 482, "93858": 482, "93820": 482, "93847": 482, "91404": 482, "83499": 482, "79512": 482, "91389": 482, "93626": 482, "90494": 482, "90549": 482, "93521": 482, "79579": 482, "dml": 482, "93421": 482, "93475": 482, "93370": 482, "91810": 482, "91162": 482, "93353": 482, "83658": 482, "88123": 482, "93297": 482, "gced": 482, "85308": 482, "93156": 482, "93162": 482, "92886": 482, "90155": 482, "91513": 482, "93033": 482, "0x0100": 482, "0x00010000": 482, "89973": 482, "93044": 482, "93010": 482, "invalidheadererror": 482, "invalidheaderdefect": 482, "92986": 482, "92932": 482, "92675": 482, "87901": 482, "11b1": 482, "91922": 482, "92869": 482, "92839": 482, "89325": 482, "92734": 482, "92671": 482, "91581": 482, "92550": 482, "92591": 482, "92445": 482, "92547": 482, "92530": 482, "92531": 482, "84131": 482, "92391": 482, "mueller": 482, "91968": 482, "81790": 482, "90622": 482, "91577": 482, "91539": 482, "getproxies_environ": 482, "91447": 482, "91456": 482, "47231": 482, "39064": 482, "41287": 482, "90005": 482, "32547": 482, "35540": 482, "47063": 482, "index_pag": 482, "47025": 482, "46951": 482, "42777": 482, "46755": 482, "45393": 482, "46642": 482, "46364": 482, "28249": 482, "46197": 482, "45924": 482, "44173": 482, "42627": 482, "42047": 482, "dragonfli": 482, "carlier": 482, "14243": 482, "41246": 482, "iocpproactor": 482, "39264": 482, "harel": 482, "38693": 482, "38267": 482, "34828": 482, "32990": 482, "26253": 482, "85525": 482, "86404": 482, "spinx": 482, "97741": 482, "96432": 482, "96098": 482, "95957": 482, "95588": 482, "unfix": 482, "91207": 482, "chm": 482, "htmlhelp": 482, "95454": 482, "documenti": 482, "shea": 482, "95451": 482, "95415": 482, "94321": 482, "86128": 482, "61162": 482, "87260": 482, "86986": 482, "88831": 482, "86438": 482, "93031": 482, "92240": 482, "47161": 482, "40838": 482, "43689": 482, "38056": 482, "overhaul": 482, "13553": 482, "95027": 482, "jn": 482, "96624": 482, "test_unittest": 482, "test_dotted_but_module_not_load": 482, "95243": 482, "testsocknam": 482, "burton": 482, "95573": 482, "test_asyncio": 482, "test_ssl": 482, "fb11063974": 482, "fantix": 482, "95280": 482, "test_get_ciph": 482, "pfs": 482, "95212": 482, "test_shared_memory_recr": 482, "95218": 482, "test_importlib": 482, "94675": 482, "exponent": 482, "rjsmin": 482, "91330": 482, "94208": 482, "94315": 482, "dac": 482, "54781": 482, "test_tk": 482, "test_tkint": 482, "test_ttk_guion": 482, "test_ttk": 482, "93839": 482, "test_ctyp": 482, "93951": 482, "test_bdb": 482, "statetestcas": 482, "test_skip": 482, "93957": 482, "test_venv": 482, "ensurepiptest": 482, "test_with_pip": 482, "93884": 482, "93852": 482, "test_log": 482, "test_socket": 482, "test_socketserv": 482, "run_test": 482, "hostrunn": 482, "93616": 482, "test_modulefind": 482, "modulefindertest": 482, "93575": 482, "test_unicod": 482, "test_raisememerror": 482, "57539": 482, "openat2": 482, "resolve_beneath": 482, "89858": 482, "test_emb": 482, "test_imaplib": 482, "test_zipimport": 482, "test_py_compil": 482, "test_sys_settrac": 482, "_test_multiprocess": 482, "92670": 482, "test_shutil": 482, "testcopi": 482, "test_copyfile_nonexistent_dir": 482, "92514": 482, "basictestrunn": 482, "47016": 482, "turner": 482, "96761": 482, "_bootstrap_python": 482, "96883": 482, "85936": 482, "96729": 482, "buildreleas": 482, "96269": 482, "module_dep": 482, "exportsym": 482, "95973": 482, "dsymutil": 482, "93744": 482, "maincc": 482, "94801": 482, "94802": 482, "95145": 482, "wasix": 482, "95174": 482, "netdb": 482, "94847": 482, "94841": 482, "1932": 482, "zlib_cflag": 482, "zlib_lib": 482, "94773": 482, "deepfreez": 482, "unsort": 482, "94682": 482, "1q": 482, "termcap": 482, "tinfo": 482, "_dbm": 482, "94404": 482, "94280": 482, "pegen": 482, "93584": 482, "93491": 482, "69093": 482, "_sqlite3": 482, "93202": 482, "34449": 482, "ux": 482, "osipov": 482, "98360": 482, "98414": 482, "97728": 482, "90989": 482, "97649": 482, "96965": 482, "96577": 482, "96559": 482, "94781": 482, "ouput": 482, "charli": 482, "89545": 482, "wmi": 482, "95733": 482, "95656": 482, "95587": 482, "94399": 482, "95445": 482, "95359": 482, "95285": 482, "90844": 482, "94772": 482, "94018": 482, "93824": 482, "43414": 482, "92817": 482, "92984": 482, "92841": 482, "46907": 482, "91061": 482, "42658": 482, "lcmapstringex": 482, "38704": 482, "97897": 482, "mkfifoat": 482, "mknodat": 482, "97527": 482, "2288": 482, "65802": 482, "95511": 482, "95471": 482, "95411": 482, "89610": 482, "68686": 482, "ptag": 482, "eptag": 482, "95853": 482, "wasm_build": 482, "emsdk": 482, "95731": 482, "check_modul": 482, "94538": 482, "94430": 482, "86087": 482, "parseent": 482, "95756": 482, "96512": 482, "92678": 482, "95388": 482, "94930": 482, "94731": 482, "wold": 482, "wzero": 482, "91321": 482, "91731": 482, "static_assert": 482, "89546": 482, "93442": 482, "_py_cast_impl": 482, "_py_cast": 482, "93466": 482, "92898": 482, "serg": 482, "guelton": 482, "93103": 482, "92913": 482, "92781": 482, "c90": 482, "92193": 482, "59121": 482, "45383": 482, "92345": 482, "43857": 482, "ogam": 482, "92245": 482, "11a7": 482, "92203": 482, "91173": 482, "92114": 482, "92112": 482, "92063": 482, "precall_method_descriptor_fast_with_keyword": 482, "92031": 482, "deoptim": 482, "_pycode_quicken": 482, "92036": 482, "92032": 482, "91869": 482, "91603": 482, "89373": 482, "91632": 482, "generic_alias_iter": 482, "encodingmap": 482, "91636": 482, "91625": 482, "78607": 482, "lltrace": 482, "__ltrace__": 482, "91576": 482, "89279": 482, "91502": 482, "_pyframe_isentryfram": 482, "91266": 482, "91479": 482, "__note__": 482, "46055": 482, "xinhang": 482, "91462": 482, "89455": 482, "91421": 482, "_py_decodeutf8ex": 482, "91428": 482, "_pyopcode_opnam": 482, "47120": 482, "45317": 482, "47197": 482, "mishandl": 482, "47177": 482, "prev_instr": 482, "46961": 482, "46962": 482, "testcapi": 482, "recursinginfinitelyerror": 482, "46942": 482, "46764": 482, "43464": 482, "46721": 482, "46509": 482, "chase": 482, "46045": 482, "36819": 482, "34093": 482, "flag_ref": 482, "92356": 482, "92301": 482, "close_rang": 482, "67248": 482, "92210": 482, "cinder": 482, "92118": 482, "90887": 482, "copyfile_stat": 482, "copyfile_acl": 482, "copyfile_xattr": 482, "91215": 482, "85984": 482, "92128": 482, "92049": 482, "92062": 482, "87390": 482, "88089": 482, "91996": 482, "91984": 482, "test_argpars": 482, "91952": 482, "91954": 482, "47029": 482, "91928": 482, "91401": 482, "64783": 482, "sigrtmin": 482, "sigrtmax": 482, "91910": 482, "91832": 482, "91821": 482, "test_from_tupl": 482, "test_decim": 482, "91217": 482, "90623": 482, "91734": 482, "91700": 482, "91231": 482, "91621": 482, "90568": 482, "91670": 482, "91616": 482, "47256": 482, "823": 482, "91595": 482, "write_repr": 482, "yu": 482, "liu": 482, "74166": 482, "91487": 482, "91575": 482, "89022": 482, "sqlite_misus": 482, "91526": 482, "91276": 482, "47000": 482, "91230": 482, "47260": 482, "seccomp": 482, "47227": 482, "47211": 482, "47135": 482, "43323": 482, "46681": 482, "45100": 482, "44807": 482, "badaracco": 482, "46787": 482, "46720": 482, "par": 482, "46696": 482, "46053": 482, "45639": 482, "avif": 482, "46285": 482, "44791": 482, "46547": 482, "46415": 482, "46075": 482, "45995": 482, "26175": 482, "carey": 482, "metcalf": 482, "45138": 482, "40318": 482, "44863": 482, "44587": 482, "43827": 482, "43218": 482, "rodrigu": 482, "38435": 482, "42066": 482, "iman": 482, "kermani": 482, "40617": 482, "40676": 482, "39716": 482, "36073": 482, "kawashima": 482, "91888": 482, "91783": 482, "91547": 482, "91298": 482, "44347": 482, "36329": 482, "htmlview": 482, "47189": 482, "38668": 482, "47115": 482, "26792": 482, "brezovski": 482, "92169": 482, "import_deprec": 482, "libregrtest": 482, "91904": 482, "pythonregrtest_unicode_guard": 482, "91752": 482, "test_tool": 482, "test_freez": 482, "testfreez": 482, "91607": 482, "test_concurrent_futur": 482, "40280": 482, "47109": 482, "macholib": 482, "29890": 482, "louisom": 482, "89452": 482, "47103": 482, "pginstrument": 482, "47239": 482, "46785": 482, "win32_xstat_impl": 482, "40859": 482, "91583": 482, "generate_re_casefix": 482, "91551": 482, "gitlab": 482, "92173": 482, "91320": 482, "reinterpret_cast": 482, "static_cast": 482, "80527": 482, "91768": 482, "91020": 482, "47169": 482, "47212": 482, "matthieu": 482, "dartiailh": 482, "47186": 482, "47176": 482, "py_emscriptensignalbuff": 482, "sharedarraybuff": 482, "py_emscripten_signal_handl": 482, "47182": 482, "47162": 482, "py_call_trampolin": 482, "46775": 482, "47129": 482, "47117": 482, "47127": 482, "42197": 482, "47070": 482, "array_inplace_repeat": 482, "unicodeobject": 482, "_pybytes_repeat": 482, "47053": 482, "binary_op_inplace_add_unicod": 482, "47045": 482, "46968": 482, "auxv": 482, "46329": 482, "47012": 482, "47009": 482, "47005": 482, "bytearray_repeat": 482, "bytearray_irepeat": 482, "46829": 482, "46993": 482, "39829": 482, "jeremiah": 482, "pascual": 482, "46944": 482, "46881": 482, "46838": 482, "43721": 482, "47208": 482, "ctypes_max_argcount": 482, "23689": 482, "47167": 482, "47151": 482, "4833": 482, "27929": 482, "14265": 482, "39622": 482, "47101": 482, "ossl": 482, "47099": 482, "open_ftp": 482, "_blake2": 482, "42885": 482, "23691": 482, "47067": 482, "42369": 482, "_sharedfil": 482, "38256": 482, "4gib": 482, "odditi": 482, "39394": 482, "47062": 482, "46382": 482, "ari": 482, "bovenberg": 482, "47057": 482, "fastcal": 482, "futureit": 482, "47039": 482, "2604": 482, "45150": 482, "34861": 482, "45997": 482, "aquir": 482, "43253": 482, "fdset": 482, "47004": 482, "46998": 482, "46995": 482, "46994": 482, "46981": 482, "46985": 482, "getauxv": 482, "at_minsigstksz": 482, "amx_til": 482, "sapphir": 482, "xeon": 482, "isa": 482, "46955": 482, "zabka": 482, "23325": 482, "46932": 482, "46933": 482, "464471": 482, "tvrtkovi": 482, "46644": 482, "typeform": 482, "46581": 482, "46557": 482, "41370": 482, "26120": 482, "46480": 482, "46421": 482, "22859": 482, "usageexit": 482, "46170": 482, "40296": 482, "20392": 482, "46030": 482, "44439": 482, "45171": 482, "24959": 482, "44859": 482, "44493": 482, "sockaddr_un": 482, "33178": 482, "43352": 482, "45099": 482, "47126": 482, "676": 482, "47040": 482, "compatibl": 482, "46033": 482, "45790": 482, "42340": 482, "41233": 482, "yyyyyyyan": 482, "orest": 482, "47205": 482, "46126": 482, "47104": 482, "47037": 482, "4y": 482, "46587": 482, "47015": 482, "main_modul": 482, "side_modul": 482, "46023": 482, "wasm64": 482, "47032": 482, "47024": 482, "1n": 482, "46973": 482, "quay": 482, "tiran": 482, "cpython_autoconf": 482, "45774": 482, "47194": 482, "25032": 482, "47171": 482, "46566": 482, "47086": 482, "44549": 482, "3189": 482, "12900": 482, "46948": 482, "26488": 482, "46890": 482, "46850": 482, "_pyeval_calltrac": 482, "_pyeval_getcoroutineorigintrackingdepth": 482, "_pyeval_getasyncgenfirstit": 482, "_pyeval_getasyncgenfin": 482, "_pyeval_setasyncgenfirstit": 482, "_pyeval_setasyncgenfin": 482, "46987": 482, "_pysys_getobjectid": 482, "_pysys_setobjectid": 482, "46940": 482, "46927": 482, "46921": 482, "46903": 482, "11alpha": 482, "46891": 482, "test_float": 482, "46712": 482, "46430": 482, "45107": 482, "44337": 482, "46729": 482, "45885": 482, "46794": 482, "46823": 482, "load_fast__load_attr_instance_valu": 482, "46820": 482, "1not": 482, "46808": 482, "precall_funct": 482, "precall_method": 482, "46762": 482, "46730": 482, "46724": 482, "46732": 482, "46072": 482, "46707": 482, "46323": 482, "45923": 482, "46702": 482, "46675": 482, "va_end": 482, "_hashopenssl": 482, "46615": 482, "setobject": 482, "30496": 482, "25707": 482, "46877": 482, "46848": 482, "46736": 482, "44886": 482, "46827": 482, "46811": 482, "46252": 482, "46784": 482, "46786": 482, "wbr": 482, "39327": 482, "virtualbox": 482, "45390": 482, "46756": 482, "46737": 482, "46752": 482, "trio": 482, "nurseri": 482, "46333": 482, "46643": 482, "45863": 482, "unarchiv": 482, "46066": 482, "46676": 482, "_argtypes_": 482, "46672": 482, "46655": 482, "45948": 482, "discrep": 482, "46626": 482, "ip_bind_address_no_port": 482, "46521": 482, "46571": 482, "46400": 482, "46556": 482, "46522": 482, "46475": 482, "46246": 482, "deprecatedlist": 482, "46232": 482, "46195": 482, "689": 482, "31369": 482, "45898": 482, "ffi_type_": 482, "cfield": 482, "decad": 482, "44953": 482, "44289": 482, "44011": 482, "41086": 482, "methodwrapp": 482, "14156": 482, "42238": 482, "46913": 482, "test_faulthandl": 482, "test_sigfp": 482, "faulthandler_sigfp": 482, "46760": 482, "test_di": 482, "46708": 482, "46678": 482, "46623": 482, "test_pair": 482, "test_speech128": 482, "test_zlib": 482, "s390x": 482, "46860": 482, "kb": 482, "setr": 482, "gu": 482, "cound": 482, "46744": 482, "46567": 482, "46638": 482, "46630": 482, "46748": 482, "stdbool": 482, "46836": 482, "_frame": 482, "pycore_fram": 482, "pybuff": 482, "conflit": 482, "accesss": 482, "45773": 482, "46564": 482, "46458": 482, "46527": 482, "46528": 482, "precall_funt": 482, "46503": 482, "46431": 482, "46476": 482, "46481": 482, "46417": 482, "add_subclass": 482, "43683": 482, "46407": 482, "longobject": 482, "vivian": 482, "46409": 482, "46406": 482, "46383": 482, "_zoneinfo": 482, "module_fre": 482, "46361": 482, "46161": 482, "46028": 482, "46091": 482, "44024": 482, "46624": 482, "46591": 482, "clickabl": 482, "46565": 482, "46553": 482, "46544": 482, "uspac": 482, "46487": 482, "46539": 482, "46510": 482, "46491": 482, "46436": 482, "41403": 482, "46474": 482, "46470": 482, "_remove_dups_flatten": 482, "46469": 482, "41906": 482, "46422": 482, "46434": 482, "43869": 482, "46414": 482, "46316": 482, "29688": 482, "43012": 482, "_accessor": 482, "terrain": 482, "46258": 482, "46242": 482, "_member_names_": 482, "43118": 482, "26552": 482, "21987": 482, "46124": 482, "46103": 482, "46080": 482, "felix": 482, "fontein": 482, "46463": 482, "escape4chm": 482, "43478": 482, "46616": 482, "test_window": 482, "44359": 482, "test_ftplib": 482, "46600": 482, "test_gdb": 482, "test_pycfunct": 482, "46542": 482, "test_lib2to3": 482, "46576": 482, "test_peg_gener": 482, "test_json": 482, "infinite_recurs": 482, "13886": 482, "test_builtin": 482, "requires_fork": 482, "requires_subprocess": 482, "46602": 482, "conftest": 482, "38472": 482, "46513": 482, "ac_c_char_unsign": 482, "__char_unsigned__": 482, "46471": 482, "46443": 482, "46429": 482, "45925": 482, "43112": 482, "musl": 482, "46362": 482, "com1": 482, "lpt1": 482, "45296": 482, "_py_getallocatedblock": 482, "_pyobject_debugmallocstat": 482, "46433": 482, "_pytype_getmodulebydef": 482, "14916": 482, "46070": 482, "46347": 482, "46339": 482, "46331": 482, "46314": 482, "11a4": 482, "46289": 482, "46297": 482, "bootup": 482, "derzsi": 482, "niel": 482, "46237": 482, "46263": 482, "use_frozen_modul": 482, "46006": 482, "_pyunicode_equaltoasciiid": 482, "update_slot": 482, "46208": 482, "46240": 482, "46009": 482, "46235": 482, "1_000": 482, "46221": 482, "46202": 482, "pop_except_and_rerais": 482, "46085": 482, "pylong_bas": 482, "46110": 482, "46107": 482, "44525": 482, "call_method_kw": 482, "call_no_kw": 482, "call_kw": 482, "46039": 482, "45635": 482, "_pyerr_display": 482, "46054": 482, "46042": 482, "46049": 482, "46048": 482, "37971": 482, "46031": 482, "45654": 482, "46025": 482, "46000": 482, "42918": 482, "45953": 482, "43413": 482, "46342": 482, "46307": 482, "46306": 482, "46244": 482, "46278": 482, "call_": 482, "46269": 482, "46266": 482, "46257": 482, "41011": 482, "46239": 482, "46238": 482, "46222": 482, "46176": 482, "43424": 482, "45321": 482, "46125": 482, "46118": 482, "37578": 482, "20369": 482, "46105": 482, "44893": 482, "22815": 482, "22047": 482, "26952": 482, "45615": 482, "16594": 482, "allow_reuse_port": 482, "27718": 482, "46032": 482, "27062": 482, "46018": 482, "46016": 482, "45755": 482, "45874": 482, "25066": 482, "45643": 482, "46196": 482, "46120": 482, "46109": 482, "19737": 482, "46296": 482, "_use_args_": 482, "_member_type_": 482, "46205": 482, "runtest_mp": 482, "test_capi": 482, "jemalloc": 482, "46262": 482, "46150": 482, "fakenam": 482, "posixpathtest": 482, "test_expandus": 482, "46129": 482, "23819": 482, "46114": 482, "0xmnn00pp0l": 482, "44133": 482, "46315": 482, "have_featur": 482, "45723": 482, "multiarch": 482, "46106": 482, "1m": 482, "46088": 482, "asset": 482, "45949": 482, "freeze_modul": 482, "46217": 482, "40477": 482, "46236": 482, "46140": 482, "45855": 482, "46004": 482, "_pyerr_chainstackitem": 482, "45915": 482, "is_valid_fd": 482, "f_getfd": 482, "44530": 482, "42268": 482, "45727": 482, "45786": 482, "45614": 482, "45813": 482, "45811": 482, "45848": 482, "45709": 482, "45829": 482, "45826": 482, "45822": 482, "45820": 482, "45636": 482, "42540": 482, "45738": 482, "45753": 482, "45764": 482, "45609": 482, "45582": 482, "45450": 482, "27946": 482, "13236": 482, "37658": 482, "45876": 482, "44649": 482, "45803": 482, "45831": 482, "41735": 482, "45235": 482, "45754": 482, "11a2": 482, "sqlite_limit_length": 482, "45766": 482, "45765": 482, "45757": 482, "45644": 482, "wessel": 482, "45703": 482, "45535": 482, "45664": 482, "45663": 482, "45662": 482, "43137": 482, "gio": 482, "45514": 482, "45507": 482, "45359": 482, "44733": 482, "28806": 482, "43498": 482, "42158": 482, "notation3": 482, "trig": 482, "45840": 482, "45640": 482, "milchior": 482, "45788": 482, "45772": 482, "45392": 482, "45250": 482, "25381": 482, "43905": 482, "45695": 482, "19460": 482, "45835": 482, "test_queu": 482, "45783": 482, "45745": 482, "findleak": 482, "45701": 482, "test_functool": 482, "44035": 482, "45950": 482, "45881": 482, "sys_shutdown": 482, "ac_cv_func_shutdown": 482, "fork1": 482, "33393": 482, "45866": 482, "pygen": 482, "41498": 482, "sigset_t": 482, "yurchak": 482, "45886": 482, "45873": 482, "python_for_regen": 482, "py_stdlib_mod": 482, "addext": 482, "save_env": 482, "restore_env": 482, "with_save_env": 482, "45573": 482, "45816": 482, "v143": 482, "45800": 482, "45798": 482, "45743": 482, "search_paths_first": 482, "xcode": 482, "stdc_header": 482, "ac_header_tim": 482, "45731": 482, "py_sqlite_enable_load_extens": 482, "ac_cache_check": 482, "45696": 482, "45561": 482, "smelli": 482, "45901": 482, "45616": 482, "45850": 482, "45732": 482, "45720": 482, "shlwapi": 482, "39026": 482, "45716": 482, "45688": 482, "_scproxi": 482, "45379": 482, "keyowrd": 482, "45530": 482, "45526": 482, "address_bit": 482, "30570": 482, "45521": 482, "45494": 482, "45445": 482, "45408": 482, "45385": 482, "descr_check": 482, "45367": 482, "binary_multiply_int": 482, "binary_multiply_float": 482, "21736": 482, "unfrozen": 482, "45020": 482, "orignam": 482, "45324": 482, "44050": 482, "call_function_builtin_o": 482, "call_function_builtin_fast": 482, "call_function_len": 482, "call_function_isinst": 482, "44511": 482, "43706": 482, "42064": 482, "45438": 482, "45574": 482, "print_escap": 482, "45581": 482, "45557": 482, "kreusada": 482, "42174": 482, "35673": 482, "_namespaceload": 482, "45515": 482, "45475": 482, "43787": 482, "45489": 482, "42222": 482, "45428": 482, "45467": 482, "45461": 482, "45239": 482, "45417": 482, "45249": 482, "45416": 482, "20028": 482, "44904": 482, "45406": 482, "getabsfil": 482, "45411": 482, "subtitl": 482, "srt": 482, "vtt": 482, "10716": 482, "serverhtmldoc": 482, "27580": 482, "45262": 482, "45386": 482, "45343": 482, "45328": 482, "45192": 482, "_infer_return_typ": 482, "kyungmin": 482, "45160": 482, "24444": 482, "40321": 482, "7538": 482, "jochem": 482, "schulenklopp": 482, "41374": 482, "35970": 482, "kuska": 482, "45726": 482, "45680": 482, "45618": 482, "olko": 482, "45655": 482, "45604": 482, "45516": 482, "45464": 482, "45449": 482, "20692": 482, "45678": 482, "45578": 482, "45668": 482, "45577": 482, "test_zoneinfo": 482, "45566": 482, "test_frozen_pickl": 482, "test_dataclass": 482, "43592": 482, "39679": 482, "45410": 482, "45402": 482, "test_sundri": 482, "45403": 482, "test_si": 482, "test_stdlib_dir": 482, "45400": 482, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 482, "test_except": 482, "10572": 482, "test_sqlit": 482, "test_sqlite3": 482, "43158": 482, "_uuid": 482, "libuuid": 482, "45666": 482, "swprintf": 482, "45595": 482, "_elementtre": 482, "have_expat_config_h": 482, "use_pyexpat_capi": 482, "xml_poor_entropi": 482, "expat_config": 482, "45532": 482, "jeong": 482, "yunwon": 482, "45536": 482, "45221": 482, "45405": 482, "bohman": 482, "43652": 482, "45337": 482, "43851": 482, "sqlite_omit_autoinit": 482, "44828": 482, "culler": 482, "45495": 482, "29103": 482, "interpreteridobject": 482, "45395": 482, "44220": 482, "42278": 482, "44600": 482, "burkland": 482, "41180": 482, "44394": 482, "0340": 482, "43124": 482, "putcmd": 482, "44022": 482, "45061": 482, "24076": 482, "45167": 482, "45155": 482, "44219": 482, "44959": 482, "45121": 482, "44348": 482, "45123": 482, "1514420": 482, "41031": 482, "45083": 482, "34561": 482, "munro": 482, "powersort": 482, "45056": 482, "45012": 482, "fstatat": 482, "stani": 482, "skonieczni": 482, "45018": 482, "44963": 482, "anext_await": 482, "44962": 482, "44954": 482, "8p": 482, "1074": 482, "44947": 482, "44945": 482, "binary_add_adapt": 482, "binary_add_float": 482, "binary_add_int": 482, "binary_add_unicod": 482, "binary_add_unicode_inplace_fast": 482, "44929": 482, "44914": 482, "44698": 482, "44895": 482, "44900": 482, "44889": 482, "load_method_cach": 482, "load_method_modul": 482, "load_method_class": 482, "44890": 482, "44885": 482, "44878": 482, "44874": 482, "44872": 482, "33930": 482, "augusto": 482, "goulart": 482, "25782": 482, "44856": 482, "update_bas": 482, "44826": 482, "store_attr_slot": 482, "store_attr_split_key": 482, "store_attr_with_hint": 482, "44838": 482, "44821": 482, "44792": 482, "34013": 482, "44732": 482, "44725": 482, "_opcod": 482, "get_specialization_stat": 482, "44717": 482, "44653": 482, "44676": 482, "44633": 482, "44661": 482, "property_descr_set": 482, "44662": 482, "44655": 482, "44646": 482, "44636": 482, "44635": 482, "26280": 482, "binary_subscr_list_int": 482, "binary_subscr_tuple_int": 482, "binary_subscr_dict": 482, "44589": 482, "44606": 482, "42073": 482, "fastsearch": 482, "43895": 482, "ish": 482, "dynload_shlib": 482, "levarag": 482, "44562": 482, "44553": 482, "44523": 482, "44483": 482, "44486": 482, "44472": 482, "ltrace": 482, "44297": 482, "44456": 482, "44409": 482, "44396": 482, "44376": 482, "44313": 482, "44338": 482, "load_global_modul": 482, "load_global_builtin": 482, "44368": 482, "44349": 482, "load_attr_slot": 482, "load_attr_split_key": 482, "load_attr_with_hint": 482, "load_attr_modul": 482, "44335": 482, "43693": 482, "44317": 482, "44304": 482, "43667": 482, "44232": 482, "44201": 482, "co_fastlocalkind": 482, "44184": 482, "44187": 482, "44180": 482, "44168": 482, "44156": 482, "44143": 482, "44032": 482, "datastack": 482, "44114": 482, "dictkeys_revers": 482, "dictitems_revers": 482, "44110": 482, "branchless": 482, "43918": 482, "43879": 482, "native_thread_id": 482, "17792": 482, "28146": 482, "11105": 482, "39091": 482, "noah": 482, "oxer": 482, "45371": 482, "unixccompil": 482, "45329": 482, "1596321": 482, "45274": 482, "45238": 482, "36674": 482, "45183": 482, "45234": 482, "45228": 482, "45225": 482, "genexpr": 482, "25169": 482, "20524": 482, "45168": 482, "35474": 482, "45166": 482, "20499": 482, "30856": 482, "45034": 482, "25894": 482, "45081": 482, "45075": 482, "format_fram": 482, "31299": 482, "41620": 482, "45021": 482, "43913": 482, "lesser": 482, "45030": 482, "45001": 482, "45010": 482, "__div__": 482, "39218": 482, "43613": 482, "37596": 482, "44955": 482, "39039": 482, "44935": 482, "44911": 482, "41322": 482, "44524": 482, "38956": 482, "44860": 482, "unicodencodeerror": 482, "44581": 482, "44849": 482, "44605": 482, "wherein": 482, "specialform": 482, "44839": 482, "44822": 482, "44801": 482, "44806": 482, "27275": 482, "44793": 482, "44784": 482, "44667": 482, "44771": 482, "shim": 482, "44752": 482, "rcomplet": 482, "44747": 482, "44720": 482, "44704": 482, "44666": 482, "lzl": 482, "44690": 482, "binacii": 482, "42854": 482, "_ssl": 482, "_sslsocket": 482, "44686": 482, "_import": 482, "44353": 482, "44682": 482, "44678": 482, "40897": 482, "44638": 482, "44648": 482, "44608": 482, "_flatten": 482, "44594": 482, "flight": 482, "42799": 482, "41928": 482, "44566": 482, "44558": 482, "41249": 482, "44554": 482, "34798": 482, "44539": 482, "44461": 482, "43625": 482, "44516": 482, "42892": 482, "44468": 482, "43977": 482, "44482": 482, "44404": 482, "41546": 482, "44458": 482, "buffer_block_s": 482, "lmza": 482, "44464": 482, "flake8": 482, "44446": 482, "44434": 482, "pthread_exit": 482, "libgcc_": 482, "42972": 482, "44422": 482, "37880": 482, "44389": 482, "27827": 482, "44395": 482, "34266": 482, "44362": 482, "44342": 482, "44356": 482, "44351": 482, "parse_makefil": 482, "44242": 482, "44246": 482, "43858": 482, "44260": 482, "44254": 482, "33693": 482, "44241": 482, "simplepath": 482, "44210": 482, "_meta": 482, "43643": 482, "multiplexedpath": 482, "27334": 482, "4928": 482, "44154": 482, "33433": 482, "44150": 482, "44142": 482, "44145": 482, "hmac_upd": 482, "44095": 482, "ds": 482, "congest": 482, "37788": 482, "44089": 482, "44081": 482, "44061": 482, "44059": 482, "serenityo": 482, "36515": 482, "unalign": 482, "44018": 482, "38352": 482, "44002": 482, "90s": 482, "43972": 482, "28528": 482, "checklin": 482, "43853": 482, "43666": 482, "_aix_support": 482, "wpar": 482, "fileset": 482, "bos": 482, "rte": 482, "mp64": 482, "odm": 482, "9988": 482, "43650": 482, "_unpack_zipfil": 482, "igor": 482, "bolshakov": 482, "43612": 482, "43392": 482, "_find_and_load": 482, "43318": 482, "43232": 482, "trsock": 482, "transportsocket": 482, "30077": 482, "sowt": 482, "42971": 482, "43086": 482, "scrict_mod": 482, "43024": 482, "42862": 482, "41818": 482, "soumendra": 482, "ganguli": 482, "40497": 482, "37449": 482, "40956": 482, "41730": 482, "20684": 482, "_signature_get_bound_param": 482, "41402": 482, "32695": 482, "24391": 482, "40563": 482, "henri": 482, "aud": 482, "oud": 482, "34990": 482, "y2k38": 482, "39549": 482, "37022": 482, "38840": 482, "test___all__": 482, "39359": 482, "38741": 482, "38415": 482, "30256": 482, "manager_own": 482, "autoproxi": 482, "27513": 482, "26228": 482, "33349": 482, "29298": 482, "45216": 482, "45024": 482, "44957": 482, "16580": 482, "44903": 482, "othergui": 482, "33479": 482, "36700": 482, "44740": 482, "44693": 482, "35183": 482, "30511": 482, "44561": 482, "44651": 482, "42958": 482, "44631": 482, "_environ": 482, "44613": 482, "44544": 482, "38062": 482, "40620": 482, "controlflow": 482, "43066": 482, "39452": 482, "broaden": 482, "13814": 482, "27752": 482, "44453": 482, "44392": 482, "44322": 482, "44195": 482, "41963": 482, "44072": 482, "43558": 482, "44025": 482, "41706": 482, "41621": 482, "41576": 482, "21760": 482, "furkan": 482, "onder": 482, "39498": 482, "40173": 482, "45280": 482, "45269": 482, "c_make_encod": 482, "45128": 482, "test_multiprocessing_fork": 482, "45209": 482, "_testsharedmemori": 482, "test_shared_memory_cleaned_after_process_termin": 482, "45185": 482, "testenumer": 482, "45195": 482, "test_readlin": 482, "test_nonascii": 482, "45156": 482, "45125": 482, "sharablelist": 482, "test_sysconfig": 482, "test_user_similar": 482, "45052": 482, "withprocessestestsharedmemori": 482, "test_shared_memory_bas": 482, "sms": 482, "sms2": 482, "unskip": 482, "45042": 482, "hashlib_help": 482, "requires_hashdigest": 482, "25130": 482, "45011": 482, "44949": 482, "44891": 482, "44852": 482, "wholesal": 482, "40928": 482, "spew": 482, "44734": 482, "44708": 482, "42095": 482, "interop": 482, "plutil": 482, "44647": 482, "44515": 482, "44287": 482, "test_popen": 482, "test_windows_util": 482, "militari": 482, "battl": 482, "44451": 482, "test_metadata_api": 482, "apitest": 482, "test_entry_points_by_index": 482, "44363": 482, "44364": 482, "43921": 482, "test_wrong_cert_tls13": 482, "test_pha_required_nocert": 482, "44131": 482, "test_frozenmain": 482, "31904": 482, "test_file_not_exist": 482, "42083": 482, "35753": 482, "unwrapp": 482, "dictproxi": 482, "45220": 482, "defaultwindowssdkvers": 482, "commandlin": 482, "45188": 482, "45163": 482, "haiku": 482, "45067": 482, "extended_color_cont": 482, "island": 482, "t20170401": 482, "20170401": 482, "45019": 482, "44535": 482, "43298": 482, "44381": 482, "enablecontrolflowguard": 482, "41282": 482, "45375": 482, "unnormalis": 482, "45022": 482, "45007": 482, "44848": 482, "44572": 482, "44582": 482, "41299": 482, "jitter": 482, "42686": 482, "40263": 482, "issue26903": 482, "34602": 482, "quadrupl": 482, "44689": 482, "43109": 482, "34932": 482, "shane": 482, "harvey": 482, "45193": 482, "40128": 482, "update_idletask": 482, "41611": 482, "autocompletewindow": 482, "winconfig_ev": 482, "44026": 482, "44786": 482, "44967": 482, "44978": 482, "43425": 482, "test2to3": 482, "44074": 482, "20291": 482, "44687": 482, "45116": 482, "45094": 482, "44751": 482, "42747": 482, "py_tpflags_have_am_send": 482, "44441": 482, "_pytrash_deposit_object": 482, "_pytrash_destroy_chain": 482, "_pytrash_thread_deposit_object": 482, "_pytrash_thread_destroy_chain": 482, "_tstate": 482, "trash_delete_nest": 482, "40939": 482, "pyparser_": 482, "44378": 482, "44113": 482, "44094": 482, "pyerr_setfromerrnowithunicodefilenam": 482, "pyerr_setfromwindowserrwithunicodefilenam": 482, "pyerr_setexcfromwindowserrwithunicodefilenam": 482, "pyunicodeencodeerror_cr": 482, "pyunicodetranslateerror_cr": 482, "43434": 482, "43882": 482, "43472": 482, "_xxsubinterpret": 482, "43362": 482, "43756": 482, "43075": 482, "42800": 482, "37363": 482, "43892": 482, "43933": 482, "kweyword": 482, "43963": 482, "_signal": 482, "42739": 482, "pylinetable_initaddressrang": 482, "43754": 482, "consistut": 482, "38605": 482, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 482, "pile": 482, "43859": 482, "41323": 482, "43846": 482, "43798": 482, "43751": 482, "ait": 482, "42128": 482, "43105": 482, "42609": 482, "44015": 482, "25478": 482, "43733": 482, "43979": 482, "zwerschk": 482, "43993": 482, "43957": 482, "42904": 482, "43945": 482, "43937": 482, "43930": 482, "43907": 482, "43926": 482, "43607": 482, "43284": 482, "_syscmd_ver": 482, "43867": 482, "serve_cli": 482, "40443": 482, "43820": 482, "43680": 482, "41515": 482, "43776": 482, "42248": 482, "_missing__": 482, "43744": 482, "43772": 482, "43764": 482, "openssl_api_compat": 482, "make_ssl_data": 482, "25264": 482, "43780": 482, "43731": 482, "38659": 482, "simple_enum": 482, "test_simple_enum": 482, "43752": 482, "24723": 482, "43655": 482, "43723": 482, "2135": 482, "43534": 482, "43522": 482, "hostflag": 482, "ssl_ctx": 482, "8978": 482, "43296": 482, "sqlite3_value_blob": 482, "sqlite_nomem": 482, "43312": 482, "43265": 482, "43176": 482, "18369": 482, "privatekey": 482, "36470": 482, "x509_v_flag_partial_chain": 482, "35114": 482, "39899": 482, "36076": 482, "33731": 482, "32745": 482, "43987": 482, "43959": 482, "43938": 482, "43778": 482, "glossary_search": 482, "43739": 482, "43961": 482, "test_namer_rotator_inherit": 482, "43842": 482, "43843": 482, "env_chang": 482, "ccach": 482, "tlsv1_alert_internal_error": 482, "43567": 482, "35306": 482, "43538": 482, "38822": 482, "26227": 482, "40432": 482, "43745": 482, "mislabel": 482, "1i": 482, "43492": 482, "30555": 482, "42119": 482, "sdks": 482, "iossupport": 482, "43568": 482, "44009": 482, "rosetta": 482, "42235": 482, "43981": 482, "test_sidebar": 482, "test_squeez": 482, "43774": 482, "43962": 482, "_pyinterpreterstate_idincref": 482, "_pyinterpreterstate_idinitref": 482, "id_refcount": 482, "get_curr": 482, "interpreterid": 482, "28254": 482, "42988": 482, "schw": 482, "rer": 482, "43285": 482, "trust_server_pasv_ipv4_address": 482, "27129": 482, "43660": 482, "43555": 482, "43517": 482, "misdetect": 482, "43497": 482, "39316": 482, "35883": 482, "43410": 482, "43406": 482, "43390": 482, "sa_onstack": 482, "friendlier": 482, "golang": 482, "cgo": 482, "37448": 482, "address_in_rang": 482, "ultra": 482, "unsanitari": 482, "_py_no_sanitize_address": 482, "_py_no_sanitize_thread": 482, "_py_no_sanitize_memori": 482, "dwith_pymalloc_radix_tre": 482, "29988": 482, "43433": 482, "35930": 482, "41369": 482, "43422": 482, "41324": 482, "43577": 482, "43542": 482, "heic": 482, "heif": 482, "43510": 482, "43521": 482, "41361": 482, "43423": 482, "27820": 482, "_always_": 482, "43445": 482, "43245": 482, "29982": 482, "43428": 482, "43332": 482, "43420": 482, "43399": 482, "43369": 482, "sqlite3_column_text": 482, "sqlite3_column_blob": 482, "43368": 482, "24562": 482, "mariusz": 482, "felisiak": 482, "42129": 482, "43295": 482, "43125": 482, "base64mim": 482, "43084": 482, "42994": 482, "opus": 482, "3gpp": 482, "3gpp2": 482, "42782": 482, "membernam": 482, "26053": 482, "40701": 482, "39342": 482, "x509_v_flag_allow_proxy_cert": 482, "man1": 482, "man7": 482, "jab": 482, "lordmauv": 482, "justin39": 482, "43199": 482, "43407": 482, "43354": 482, "41933": 482, "37945": 482, "test_getsetlocale_issue1813": 482, "test_local": 482, "41561": 482, "43179": 482, "alignof_x": 482, "sizeof_x": 482, "43631": 482, "43617": 482, "43372": 482, "_freeze_importlib": 482, "42246": 482, "877df851": 482, "test_frozent": 482, "43440": 482, "42225": 482, "43541": 482, "poison": 482, "43321": 482, "43121": 482, "42819": 482, "x1b": 482, "2004h": 482, "42808": 482, "42217": 482, "co_linet": 482, "40692": 482, "43316": 482, "43317": 482, "43146": 482, "43260": 482, "43258": 482, "needless": 482, "43251": 482, "sqlite3_column_nam": 482, "23838": 482, "43172": 482, "irreconcil": 482, "43163": 482, "43162": 482, "43102": 482, "42960": 482, "42151": 482, "_elementre": 482, "29753": 482, "shrank": 482, "27646": 482, "43288": 482, "43174": 482, "13501": 482, "39448": 482, "43155": 482, "41837": 482, "43283": 482, "43278": 482, "43270": 482, "_pyerr_occur": 482, "43239": 482, "fvisibl": 482, "43181": 482, "42938": 482, "pyeval_": 482, "_pyeval_evalcodewithnam": 482, "38631": 482, "42986": 482, "untermin": 482, "42924": 482, "42882": 482, "_pyunicode_fromid": 482, "_py_identifi": 482, "unicode_id": 482, "next_index": 482, "42827": 482, "42823": 482, "41994": 482, "27772": 482, "43108": 482, "43077": 482, "43014": 482, "42323": 482, "42944": 482, "42934": 482, "42931": 482, "38250": 482, "42877": 482, "42923": 482, "42848": 482, "42901": 482, "_proto_memb": 482, "42780": 482, "42866": 482, "getcodec": 482, "42846": 482, "_codecs_cn": 482, "_codecs_hk": 482, "_codecs_iso2022": 482, "_codecs_jp": 482, "_codecs_kr": 482, "_codecs_tw": 482, "42851": 482, "42834": 482, "41748": 482, "dubost": 482, "_multibytecodec": 482, "42384": 482, "42383": 482, "42005": 482, "41604": 482, "user_ptr": 482, "set_panel_userptr": 482, "41149": 482, "stratford": 482, "33289": 482, "40304": 482, "bori": 482, "verkhovskiy": 482, "42811": 482, "yair": 482, "frid": 482, "40823": 482, "checktracecallbackcont": 482, "43031": 482, "36143": 482, "42874": 482, "add_cross_compiling_path": 482, "42584": 482, "42504": 482, "33065": 482, "23544": 482, "32631": 482, "42979": 482, "43030": 482, "42814": 482, "genericaliasobject": 482, "42806": 482, "40631": 482, "27794": 482, "42745": 482, "32381": 482, "30858": 482, "42615": 482, "resulttyp": 482, "40137": 482, "40077": 482, "42008": 482, "40521": 482, "42257": 482, "42772": 482, "42759": 482, "42756": 482, "23328": 482, "envar": 482, "42740": 482, "42655": 482, "42727": 482, "38308": 482, "42721": 482, "nodefaultroot": 482, "tempor": 482, "25246": 482, "35728": 482, "15303": 482, "42681": 482, "42685": 482, "37961": 482, "42630": 482, "_run_exitfunc": 482, "42644": 482, "loge": 482, "36541": 482, "pgen2": 482, "42382": 482, "41877": 482, "autospect": 482, "auto_spec": 482, "set_spec": 482, "39717": 482, "42385": 482, "thread_stack_s": 482, "34750": 482, "_enumdict": 482, "42517": 482, "42678": 482, "28964": 482, "42470": 482, "42388": 482, "34463": 482, "42163": 482, "uname_result": 482, "42090": 482, "42059": 482, "41960": 482, "41907": 482, "41891": 482, "24792": 482, "41462": 482, "40219": 482, "labeledscal": 482, "37193": 482, "39068": 482, "brandon": 482, "stansburi": 482, "17140": 482, "34398": 482, "42794": 482, "test_nntplib": 482, "aioe": 482, "42641": 482, "test_select": 482, "_test_all_chown_common": 482, "42199": 482, "41443": 482, "test_posix": 482, "41439": 482, "test_uuid": 482, "42692": 482, "__builtin_avail": 482, "42604": 482, "310d": 482, "42598": 482, "29076": 482, "42361": 482, "rc2": 482, "42726": 482, "42613": 482, "prope": 482, "42591": 482, "_py_fopen": 482, "_py_wfopen": 482, "_py_fopen_obj": 482, "42111": 482, "40052": 482, "andrea": 482, "40791": 482, "42576": 482, "42536": 482, "42500": 482, "42435": 482, "bytarray": 482, "41686": 482, "_pyos_sigintev": 482, "42381": 482, "42374": 482, "42349": 482, "42296": 482, "42332": 482, "42282": 482, "42266": 482, "42233": 482, "5054": 482, "run_cgi": 482, "http_accept": 482, "getallmatchinghead": 482, "42562": 482, "17735": 482, "findsourc": 482, "co_lineno": 482, "42116": 482, "42532": 482, "spec_arg": 482, "test_master_read": 482, "42487": 482, "42482": 482, "test_openpti": 482, "test_bas": 482, "15450": 482, "42406": 482, "whichmodul": 482, "42403": 482, "_bootstrap_extern": 482, "42375": 482, "moham": 482, "koubaa": 482, "37205": 482, "42328": 482, "42318": 482, "42350": 482, "42014": 482, "42237": 482, "illumo": 482, "42249": 482, "42236": 482, "41754": 482, "42183": 482, "42140": 482, "39825": 482, "platform_tag": 482, "cp38": 482, "41889": 482, "41861": 482, "40624": 482, "28850": 482, "_safe_repr": 482, "34215": 482, "12800": 482, "40968": 482, "40816": 482, "40550": 482, "39411": 482, "tentat": 482, "42153": 482, "41028": 482, "switcher": 482, "docsbuild": 482, "41473": 482, "bugzilla": 482, "show_bug": 482, "1866884": 482, "42553": 482, "test_call_lat": 482, "test_netrc": 482, "test_getaddrinfo_ipv6_scopeid_symbol": 482, "test_getnameinfo_ipv6_scopeid_symbol": 482, "test_test": 482, "test_mailcap": 482, "test_pip": 482, "40754": 482, "test_min_max_version_mismatch": 482, "libnet": 482, "detect_socket": 482, "42398": 482, "moveov": 482, "41617": 482, "pycore_bitutil": 482, "__builtin_bswap16": 482, "38823": 482, "ctypes_unicod": 482, "42087": 482, "40680": 482, "40998": 482, "42120": 482, "_copysign": 482, "38506": 482, "41116": 482, "unixxcompil": 482, "find_library_fil": 482, "42232": 482, "38443": 482, "42508": 482, "42426": 482, "searchengin": 482, "42415": 482, "42212": 482, "36310": 482, "_posixshmem": 482, "_queue": 482, "_pytrash_cond": 482, "42171": 482, "42085": 482, "42103": 482, "42051": 482, "42218": 482, "42214": 482, "barry_as_flufl": 482, "42206": 482, "41796": 482, "42143": 482, "yonatan": 482, "41659": 482, "42150": 482, "42123": 482, "42030": 482, "41984": 482, "41993": 482, "41979": 482, "41902": 482, "41894": 482, "41435": 482, "35455": 482, "gethrvtim": 482, "kulik": 482, "26789": 482, "42146": 482, "uid_t": 482, "gid_t": 482, "41490": 482, "certifi": 482, "41052": 482, "42089": 482, "packagenotfounderror": 482, "41491": 482, "42065": 482, "charmap_decod": 482, "41966": 482, "dean": 482, "inwood": 482, "19270": 482, "28660": 482, "35823": 482, "42043": 482, "42021": 482, "39101": 482, "41976": 482, "triy": 482, "41943": 482, "41905": 482, "23706": 482, "41876": 482, "41831": 482, "41747": 482, "30681": 482, "toth": 482, "41586": 482, "16396": 482, "40592": 482, "40492": 482, "27321": 482, "38976": 482, "42061": 482, "41910": 482, "42010": 482, "41805": 482, "39693": 482, "39416": 482, "41739": 482, "test_race_between_set_target_and_flush": 482, "41970": 482, "41944": 482, "41306": 482, "scaletest": 482, "38439": 482, "38252": 482, "39107": 482, "41557": 482, "38324": 482, "41471": 482, "33987": 482, "40511": 482, "clover": 482, "42015": 482, "40423": 482, "41845": 482, "40422": 482, "_py_closerang": 482, "41986": 482, "41304": 482, "python3x": 482, "29778": 482, "15801": 482, "41162": 482, "15523": 482, "41004": 482, "39603": 482, "41909": 482, "_bisect": 482, "39934": 482, "41780": 482, "_sha256": 482, "41690": 482, "_curses_panel": 482, "41681": 482, "41675": 482, "41670": 482, "use_computed_goto": 482, "41654": 482, "41631": 482, "_oper": 482, "1653741": 482, "41533": 482, "va_build_stack": 482, "do_mkstack": 482, "small_stack": 482, "41531": 482, "41525": 482, "_sha1": 482, "_sha512": 482, "_md5": 482, "41431": 482, "41340": 482, "strdup": 482, "38156": 482, "pyos_stdioreadlin": 482, "41342": 482, "41295": 482, "41247": 482, "set_running_loop": 482, "41252": 482, "_servername_callback": 482, "41215": 482, "xlc": 482, "41218": 482, "41175": 482, "bytearrayobject": 482, "41094": 482, "39960": 482, "hackcheck": 482, "sneak": 482, "41084": 482, "41076": 482, "41056": 482, "41061": 482, "hashtabl": 482, "pypegen": 482, "pypars": 482, "35975": 482, "40636": 482, "_gdbm": 482, "40985": 482, "40958": 482, "40957": 482, "40950": 482, "40947": 482, "40847": 482, "threw": 482, "40889": 482, "40904": 482, "40903": 482, "40880": 482, "40883": 482, "40870": 482, "40854": 482, "40826": 482, "pyos_readlin": 482, "19468": 482, "nder": 482, "40780": 482, "38964": 482, "40750": 482, "40696": 482, "40679": 482, "29590": 482, "4022": 482, "_lzma": 482, "19569": 482, "_py_comp_diag_push": 482, "_py_comp_diag_ignore_depr_decl": 482, "_py_comp_diag_pop": 482, "26680": 482, "41900": 482, "41887": 482, "41773": 482, "41840": 482, "40564": 482, "40670": 482, "misindent": 482, "41833": 482, "41817": 482, "eventtyp": 482, "41815": 482, "mccormick": 482, "41517": 482, "39587": 482, "41789": 482, "32218": 482, "39651": 482, "mashal": 482, "_string": 482, "41732": 482, "41720": 482, "41696": 482, "41687": 482, "41662": 482, "39010": 482, "41638": 482, "41513": 482, "41609": 482, "39994": 482, "40782": 482, "41520": 482, "41528": 482, "41503": 482, "41497": 482, "41467": 482, "41425": 482, "41421": 482, "41316": 482, "41384": 482, "tclerror": 482, "41317": 482, "41364": 482, "35328": 482, "virtual_env_prompt": 482, "41341": 482, "41344": 482, "41333": 482, "41288": 482, "newobj_ex": 482, "39017": 482, "20907": 482, "41273": 482, "_proactorreadpipetransport": 482, "41235": 482, "41207": 482, "distutilsexecerror": 482, "29727": 482, "39168": 482, "41194": 482, "41195": 482, "41193": 482, "41182": 482, "41161": 482, "40874": 482, "41138": 482, "31082": 482, "31938": 482, "41068": 482, "41058": 482, "find_funct": 482, "41048": 482, "41043": 482, "41025": 482, "41002": 482, "merri": 482, "40448": 482, "krzysztof": 482, "konopko": 482, "40924": 482, "devis": 482, "40955": 482, "40855": 482, "33689": 482, "40884": 482, "asaf": 482, "40876": 482, "40807": 482, "_maybe_compil": 482, "32604": 482, "39314": 482, "40834": 482, "with_xxsubinterpret": 482, "channel_send": 482, "40755": 482, "26407": 482, "39384": 482, "40777": 482, "pydatetime_isocalendardatetyp": 482, "38488": 482, "40767": 482, "wayland": 482, "wayland_display": 482, "attali": 482, "40795": 482, "16995": 482, "30008": 482, "30064": 482, "40759": 482, "40756": 482, "37129": 482, "40737": 482, "40726": 482, "40695": 482, "9216": 482, "evp": 482, "test_hashlib": 482, "test_smtplib": 482, "40614": 482, "40626": 482, "h5": 482, "hdf5": 482, "hdf": 482, "schwab": 482, "25920": 482, "201311": 482, "40671": 482, "40611": 482, "39881": 482, "13097": 482, "23082": 482, "40105": 482, "mazur": 482, "40084": 482, "31122": 482, "39728": 482, "39244": 482, "39040": 482, "35714": 482, "26543": 482, "12178": 482, "itay": 482, "elbirt": 482, "36290": 482, "33944": 482, "35078": 482, "29620": 482, "runtimeexcept": 482, "kernc": 482, "34226": 482, "content_length": 482, "duran": 482, "33660": 482, "28557": 482, "rawio": 482, "41774": 482, "35293": 482, "removedinsphinx40warn": 482, "37149": 482, "shipman": 482, "nmt": 482, "41726": 482, "41624": 482, "40204": 482, "c_allow_pre_v3": 482, "c_warn_on_allowed_pre_v3": 482, "41045": 482, "41314": 482, "40979": 482, "40552": 482, "39883": 482, "bsd0": 482, "37703": 482, "41939": 482, "test_sit": 482, "test_license_exists_at_url": 482, "41731": 482, "test_cmd_line_script": 482, "41602": 482, "41521": 482, "41477": 482, "test_genericalia": 482, "41085": 482, "41069": 482, "38377": 482, "41009": 482, "require_": 482, "_version": 482, "41003": 482, "test_copyreg": 482, "pickletest": 482, "40964": 482, "cmu": 482, "40927": 482, "test_binhex": 482, "17258": 482, "38169": 482, "34401": 482, "38249": 482, "pin": 482, "40684": 482, "40683": 482, "41744": 482, "41627": 482, "41526": 482, "41492": 482, "uac": 482, "40948": 482, "41412": 482, "ucrt": 482, "40741": 482, "41142": 482, "41074": 482, "41039": 482, "40164": 482, "39631": 482, "40677": 482, "37556": 482, "39580": 482, "rick": 482, "heil": 482, "41005": 482, "41775": 482, "35764": 482, "40181": 482, "41468": 482, "41373": 482, "41300": 482, "41152": 482, "41144": 482, "39885": 482, "40723": 482, "test_idl": 482, "41689": 482, "41524": 482, "40989": 482, "pyerror": 482, "40910": 482, "40724": 482, "_pyeval_evalcod": 482, "40703": 482, "py_tp_memb": 482, "py_tp_getset": 482, "39583": 482, "40501": 482, "rpcrt4": 482, "40663": 482, "40596": 482, "40593": 482, "40585": 482, "40566": 482, "40502": 482, "n_col_offset": 482, "40527": 482, "40523": 482, "40246": 482, "d00": 482, "fca": 482, "40417": 482, "rouhani": 482, "40408": 482, "29587": 482, "40328": 482, "40228": 482, "38880": 482, "40662": 482, "40665": 482, "40536": 482, "40637": 482, "blake1": 482, "alpha2": 482, "40607": 482, "skurikhin": 482, "40612": 482, "40597": 482, "40571": 482, "40503": 482, "40397": 482, "40549": 482, "31033": 482, "40541": 482, "40515": 482, "40504": 482, "40559": 482, "40480": 482, "futil": 482, "40457": 482, "40355": 482, "curti": 482, "40459": 482, "39435": 482, "39305": 482, "_nntpbase": 482, "32494": 482, "gdbm_count": 482, "40453": 482, "40394": 482, "39995": 482, "_threadwakeup": 482, "39966": 482, "25597": 482, "40389": 482, "40273": 482, "39075": 482, "40025": 482, "onstott": 482, "39058": 482, "40561": 482, "40499": 482, "39705": 482, "40055": 482, "40436": 482, "pythoninfo": 482, "40653": 482, "_dirnamew": 482, "have_symlink": 482, "40514": 482, "40650": 482, "winsock2": 482, "40458": 482, "39148": 482, "35569": 482, "multissltest": 482, "40431": 482, "40163": 482, "pycfunction_checkexact": 482, "pycmethod_checkexact": 482, "pycmethod_check": 482, "40545": 482, "_pyerr_gettopmostexcept": 482, "40412": 482, "nullifi": 482, "inittab_copi": 482, "szorc": 482, "40121": 482, "39073": 482, "39503": 482, "8492": 482, "schwager": 482, "40313": 482, "40267": 482, "39522": 482, "40082": 482, "pyscannerobject": 482, "40141": 482, "40067": 482, "henriqu": 482, "silva": 482, "20526": 482, "40020": 482, "parsetok": 482, "codepath": 482, "32894": 482, "40398": 482, "40396": 482, "_sc_open_max": 482, "fdescf": 482, "emast": 482, "cem": 482, "kevan": 482, "koob": 482, "242274": 482, "40138": 482, "39942": 482, "40275": 482, "40330": 482, "40148": 482, "40325": 482, "40287": 482, "40290": 482, "40282": 482, "40277": 482, "40270": 482, "json_object": 482, "29255": 482, "40260": 482, "40234": 482, "40091": 482, "_at_fork_reinit": 482, "40149": 482, "_abc_data": 482, "40196": 482, "40190": 482, "_sc_aix_realmem": 482, "36517": 482, "40126": 482, "40108": 482, "incorr": 482, "40089": 482, "_after_fork": 482, "_mainthread": 482, "_main_thread": 482, "_dummythread": 482, "_reset_internal_lock": 482, "_register_atexit": 482, "40050": 482, "40014": 482, "ngroup": 482, "40017": 482, "40016": 482, "39953": 482, "38891": 482, "krennwalln": 482, "39682": 482, "38410": 482, "35967": 482, "35113": 482, "karthikeyan": 482, "singaravelan": 482, "31758": 482, "27635": 482, "39879": 482, "sami": 482, "lahfa": 482, "38387": 482, "13743": 482, "test_c_locale_coercion": 482, "40162": 482, "40146": 482, "azur": 482, "40003": 482, "bisect_cmd": 482, "verbose2": 482, "39380": 482, "39793": 482, "1812": 482, "doni": 482, "38360": 482, "40158": 482, "38527": 482, "38329": 482, "icn": 482, "38689": 482, "40385": 482, "checkpyc": 482, "40179": 482, "38576": 482, "18348": 482, "_collect": 482, "_heapq": 482, "tracing_poss": 482, "_statist": 482, "39968": 482, "get_module_st": 482, "39965": 482, "38373": 482, "19466": 482, "38894": 482, "wozniski": 482, "39871": 482, "39776": 482, "39778": 482, "38091": 482, "39087": 482, "39520": 482, "39220": 482, "22490": 482, "39830": 482, "39999": 482, "39991": 482, "39656": 482, "39360": 482, "experienc": 482, "35370": 482, "39936": 482, "_bootsubprocess": 482, "aix_platform": 482, "39652": 482, "39915": 482, "38662": 482, "38075": 482, "39916": 482, "39850": 482, "36287": 482, "39889": 482, "39828": 482, "13487": 482, "39674": 482, "28577": 482, "39826": 482, "getconnect": 482, "39763": 482, "39794": 482, "39517": 482, "0a4": 482, "39678": 482, "queue_manag": 482, "39764": 482, "pyasyncgenobject": 482, "39769": 482, "38691": 482, "39719": 482, "39667": 482, "39609": 482, "39548": 482, "qop": 482, "39495": 482, "38971": 482, "38641": 482, "vlad": 482, "emelianov": 482, "37534": 482, "prolog": 482, "39868": 482, "13790": 482, "17422": 482, "39530": 482, "39718": 482, "39677": 482, "40019": 482, "27807": 482, "test_startup_import": 482, "26067": 482, "test_chown": 482, "39855": 482, "test_subprocess": 482, "test_us": 482, "39761": 482, "dflag": 482, "39930": 482, "vcruntime140": 482, "39847": 482, "hibern": 482, "38597": 482, "38380": 482, "39789": 482, "34803": 482, "27115": 482, "39852": 482, "39781": 482, "36184": 482, "take_gil": 482, "pthread_cond_timedwait": 482, "38080": 482, "fix_urllib": 482, "roberto": 482, "meza": 482, "cabrera": 482, "_pyarg_nokwnam": 482, "_pytrash_begin": 482, "_pytrash_end": 482, "39884": 482, "38643": 482, "39824": 482, "38913": 482, "whwn": 482, "39184": 482, "39401": 482, "39382": 482, "39619": 482, "39606": 482, "39386": 482, "39579": 482, "ast_for_dotted_nam": 482, "39510": 482, "39502": 482, "1902": 482, "39492": 482, "39453": 482, "39320": 482, "build_map_unpack": 482, "39219": 482, "36051": 482, "38960": 482, "30566": 482, "39649": 482, "39681": 482, "35950": 482, "39104": 482, "processpoolexcutor": 482, "39627": 482, "39474": 482, "21016": 482, "39590": 482, "39595": 482, "39567": 482, "39559": 482, "38149": 482, "39546": 482, "39450": 482, "stripe": 482, "39493": 482, "39491": 482, "39485": 482, "38932": 482, "vegard": 482, "stikbakk": 482, "39082": 482, "39432": 482, "18819": 482, "devmajor": 482, "devminor": 482, "39274": 482, "35727": 482, "32173": 482, "39572": 482, "39654": 482, "39153": 482, "39392": 482, "impress": 482, "9056": 482, "38325": 482, "test_winconsoleio": 482, "test_zipfil": 482, "test_add_file_after_2107": 482, "39553": 482, "sxs": 482, "39439": 482, "39393": 482, "unresolv": 482, "38883": 482, "39185": 482, "39663": 482, "find_good_parse_start": 482, "39600": 482, "30780": 482, "configdialog": 482, "39388": 482, "38792": 482, "bytes_method": 482, "pycore_bytes_method": 482, "pydoc_strvar_shar": 482, "pycore_dtoa": 482, "py_build_cor": 482, "39500": 482, "39511": 482, "38076": 482, "39245": 482, "pyobject_fastcalldict": 482, "39427": 482, "39421": 482, "build_list_unpack": 482, "build_tuple_unpack": 482, "build_set_unpack": 482, "39048": 482, "39235": 482, "39209": 482, "39216": 482, "39215": 482, "39200": 482, "39166": 482, "39114": 482, "38588": 482, "38610": 482, "32021": 482, "brot": 482, "39430": 482, "39390": 482, "39406": 482, "39396": 482, "29435": 482, "woodruff": 482, "39389": 482, "39313": 482, "exec_funct": 482, "refactoringtool": 482, "39297": 482, "resili": 482, "38901": 482, "39242": 482, "35292": 482, "38907": 482, "39152": 482, "giovanni": 482, "lombardo": 482, "39198": 482, "stopit": 482, "39191": 482, "38871": 482, "39142": 482, "convertingtupl": 482, "39158": 482, "39129": 482, "39057": 482, "proxy_bypass_environ": 482, "39056": 482, "39055": 482, "21600": 482, "39019": 482, "38914": 482, "juergen": 482, "gmach": 482, "38878": 482, "35182": 482, "andriy": 482, "maletski": 482, "38630": 482, "38536": 482, "eur": 482, "38473": 482, "38361": 482, "38293": 482, "37958": 482, "get_profile_dict": 482, "28367": 482, "b500000": 482, "b576000": 482, "b921600": 482, "b1000000": 482, "b1152000": 482, "b1500000": 482, "b2000000": 482, "b2500000": 482, "b3000000": 482, "b3500000": 482, "b4000000": 482, "andrey": 482, "smirnov": 482, "39381": 482, "38918": 482, "3530": 482, "39160": 482, "39144": 482, "ctag": 482, "etag": 482, "39050": 482, "34118": 482, "etcetera": 482, "32989": 482, "newline_and_indent_ev": 482, "39164": 482, "_pyerr_getexcinfo": 482, "38945": 482, "38804": 482, "39028": 482, "39080": 482, "39031": 482, "39008": 482, "38673": 482, "38922": 482, "38920": 482, "38892": 482, "38852": 482, "38858": 482, "nsmallnegint": 482, "nsmallposint": 482, "36854": 482, "38328": 482, "38707": 482, "38629": 482, "27145": 482, "hongweipeng": 482, "38021": 482, "pep425": 482, "35409": 482, "33387": 482, "with_cleanup_finish": 482, "39033": 482, "39022": 482, "39006": 482, "38708": 482, "38698": 482, "invalidmessageid": 482, "38994": 482, "38979": 482, "38978": 482, "38986": 482, "taskwakeupmethwrapp": 482, "38982": 482, "38529": 482, "27413": 482, "38634": 482, "33684": 482, "parse_message_id": 482, "38927": 482, "26730": 482, "38881": 482, "38876": 482, "binget": 482, "long_binget": 482, "38688": 482, "kinoshita": 482, "38863": 482, "is_cgi": 482, "37838": 482, "38859": 482, "38857": 482, "38834": 482, "38821": 482, "federico": 482, "bond": 482, "38811": 482, "toke": 482, "iland": 482, "rgensen": 482, "38686": 482, "38348": 482, "37523": 482, "38045": 482, "_decompos": 482, "36820": 482, "36406": 482, "34776": 482, "20928": 482, "29636": 482, "38928": 482, "38899": 482, "fishshel": 482, "22377": 482, "38546": 482, "test_ressources_gced_in_work": 482, "38614": 482, "38547": 482, "test_pti": 482, "38992": 482, "38991": 482, "strip_python_stderr": 482, "38965": 482, "_stack_overflow": 482, "38875": 482, "38841": 482, "test_create_datagram_endpoint_existing_sock_unix": 482, "test_pidfd_open": 482, "38839": 482, "38669": 482, "37957": 482, "36500": 482, "39007": 482, "37931": 482, "beno": 482, "38943": 482, "38862": 482, "38636": 482, "38722": 482, "killen": 482, "38622": 482, "38418": 482, "38243": 482, "38174": 482, "15903": 482, "37764": 482, "_header_value_pars": 482, "get_unstructur": 482, "ashwin": 482, "ramaswami": 482, "37461": 482, "37463": 482, "37364": 482, "34631": 482, "1c": 482, "34155": 482, "maxk": 482, "jpic": 482, "38639": 482, "38640": 482, "38613": 482, "38535": 482, "38525": 482, "38465": 482, "38469": 482, "38437": 482, "gc_debug": 482, "38392": 482, "38210": 482, "38402": 482, "crypt_r": 482, "37474": 482, "fedisableexcept": 482, "38006": 482, "38317": 482, "38310": 482, "36871": 482, "11410": 482, "minimis": 482, "38219": 482, "38236": 482, "38013": 482, "async_generator_athrow": 482, "38124": 482, "38116": 482, "38113": 482, "38074": 482, "38073": 482, "38072": 482, "38069": 482, "38071": 482, "38005": 482, "channelid": 482, "36946": 482, "37994": 482, "37947": 482, "37812": 482, "check_small_int": 482, "37830": 482, "20490": 482, "37840": 482, "37802": 482, "37409": 482, "32912": 482, "37757": 482, "targetscopeerror": 482, "36279": 482, "36311": 482, "2gib": 482, "37648": 482, "needl": 482, "37619": 482, "37593": 482, "37543": 482, "37537": 482, "_pyobject_fre": 482, "37467": 482, "37433": 482, "37417": 482, "check_interv": 482, "24214": 482, "37316": 482, "37300": 482, "37269": 482, "37231": 482, "37213": 482, "37219": 482, "15913": 482, "36922": 482, "37160": 482, "37077": 482, "36781": 482, "34556": 482, "35551": 482, "tis260": 482, "tacti": 482, "dumpleton": 482, "27575": 482, "su": 482, "ag": 482, "36589": 482, "38807": 482, "38724": 482, "doroschenko": 482, "38786": 482, "python273": 482, "38785": 482, "38723": 482, "27805": 482, "38438": 482, "38761": 482, "38716": 482, "rotatinghandl": 482, "eponym": 482, "38334": 482, "38586": 482, "38565": 482, "34679": 482, "asynci": 482, "31202": 482, "36321": 482, "38521": 482, "38478": 482, "33604": 482, "38378": 482, "38417": 482, "38449": 482, "15522": 482, "38431": 482, "38109": 482, "38422": 482, "38405": 482, "38332": 482, "_encoded_word": 482, "38341": 482, "38319": 482, "38242": 482, "38019": 482, "38163": 482, "38161": 482, "_awaitev": 482, "38216": 482, "30458": 482, "38108": 482, "38265": 482, "38248": 482, "38237": 482, "34002": 482, "38191": 482, "_typenam": 482, "38155": 482, "tahia": 482, "khan": 482, "38185": 482, "38136": 482, "37828": 482, "toriz": 482, "cruz": 482, "38175": 482, "33936": 482, "34706": 482, "38153": 482, "blake2b512": 482, "38115": 482, "38148": 482, "38142": 482, "36991": 482, "38134": 482, "pbkdf2_hmac_fast": 482, "38132": 482, "38008": 482, "37405": 482, "38121": 482, "38110": 482, "closewalk": 482, "fdwalk": 482, "38093": 482, "37488": 482, "35640": 482, "38086": 482, "37251": 482, "38037": 482, "38066": 482, "feed_data": 482, "set_transport": 482, "38059": 482, "38049": 482, "37953": 482, "forwardrefer": 482, "38026": 482, "35923": 482, "_origin": 482, "38010": 482, "34410": 482, "37140": 482, "37587": 482, "scanstr": 482, "10978": 482, "37972": 482, "blhsing": 482, "37965": 482, "has_funct": 482, "37964": 482, "37960": 482, "36205": 482, "rusag": 482, "37950": 482, "methodi": 482, "37798": 482, "test_statist": 482, "26589": 482, "37915": 482, "32554": 482, "9938": 482, "37851": 482, "32793": 482, "37885": 482, "37868": 482, "__dataclass_fields__": 482, "37811": 482, "37863": 482, "21131": 482, "sigstksz": 482, "fastpath": 482, "14465": 482, "37810": 482, "37772": 482, "ancestr": 482, "18578": 482, "37785": 482, "34488": 482, "18049": 482, "thread_pthread": 482, "37738": 482, "setcchar": 482, "37723": 482, "vaginay": 482, "35943": 482, "32178": 482, "37268": 482, "11953": 482, "wsa": 482, "37685": 482, "37697": 482, "37695": 482, "37689": 482, "29553": 482, "nester": 482, "37691": 482, "37354": 482, "37664": 482, "37642": 482, "36161": 482, "ttyname_r": 482, "36324": 482, "37555": 482, "_call_match": 482, "_call": 482, "_spec_signatur": 482, "elizabeth": 482, "uselton": 482, "29446": 482, "16970": 482, "leender": 482, "34443": 482, "__qualnam": 482, "37491": 482, "marco": 482, "paolini": 482, "18378": 482, "_parse_localenam": 482, "37579": 482, "21478": 482, "37531": 482, "37482": 482, "36993": 482, "hillier": 482, "37502": 482, "37520": 482, "18374": 482, "37424": 482, "37421": 482, "get_temp_dir": 482, "37479": 482, "37440": 482, "37437": 482, "37428": 482, "ssl_verify_post_handshak": 482, "37420": 482, "37406": 482, "29412": 482, "37394": 482, "26967": 482, "37212": 482, "37372": 482, "blanchard": 482, "37345": 482, "udplit": 482, "gabe": 482, "appleton": 482, "37358": 482, "37347": 482, "aleksandr": 482, "balezin": 482, "37163": 482, "37085": 482, "37328": 482, "37305": 482, "webmanifest": 482, "33972": 482, "37280": 482, "37279": 482, "19865": 482, "37266": 482, "37210": 482, "21872": 482, "35922": 482, "36607": 482, "36402": 482, "37206": 482, "37111": 482, "12144": 482, "34886": 482, "37173": 482, "37165": 482, "_count_el": 482, "34767": 482, "37158": 482, "34282": 482, "37150": 482, "_actionscontain": 482, "35621": 482, "36520": 482, "30835": 482, "donnellan": 482, "31163": 482, "25068": 482, "26185": 482, "micka": 482, "schoentgen": 482, "21315": 482, "rfc2047": 482, "test_datetim": 482, "35805": 482, "35070": 482, "ngroups_max": 482, "31783": 482, "36582": 482, "32424": 482, "hemsley": 482, "36564": 482, "36302": 482, "36250": 482, "36046": 482, "mclean": 482, "32627": 482, "35168": 482, "8538": 482, "20504": 482, "11122": 482, "rpmbuild": 482, "34749": 482, "34519": 482, "28009": 482, "32498": 482, "33348": 482, "32689": 482, "maxwel": 482, "13b": 482, "mckinnon": 482, "32820": 482, "27657": 482, "4963": 482, "21767": 482, "38816": 482, "38351": 482, "38778": 482, "38592": 482, "brazilian": 482, "38294": 482, "38053": 482, "26868": 482, "36797": 482, "37977": 482, "37979": 482, "isopars": 482, "12707": 482, "getcod": 482, "37937": 482, "37759": 482, "37726": 482, "32910": 482, "37256": 482, "37284": 482, "30088": 482, "sviatoslav": 482, "sydorenko": 482, "37521": 482, "mintz": 482, "37456": 482, "37487": 482, "mexico": 482, "tech": 482, "37478": 482, "34903": 482, "gleen": 482, "36260": 482, "37004": 482, "36960": 482, "brad": 482, "36487": 482, "23460": 482, "tuoma": 482, "suutari": 482, "35803": 482, "34293": 482, "25237": 482, "test_commun": 482, "38502": 482, "35998": 482, "test_start_tls_server_1": 482, "serverproto": 482, "38470": 482, "test_compileal": 482, "test_compile_dir_maxlevel": 482, "38239": 482, "38275": 482, "38271": 482, "38270": 482, "37123": 482, "test_mymanag": 482, "_finalize_manag": 482, "38212": 482, "test_queue_feeder_donot_stop_onexc": 482, "38117": 482, "38018": 482, "37805": 482, "37876": 482, "36833": 482, "pydatetime_xxx_get_xxx": 482, "37558": 482, "37526": 482, "test_distutil": 482, "test_build_ext": 482, "_run_fin": 482, "37472": 482, "outstanding_bug": 482, "37199": 482, "19696": 482, "test_pkg_import": 482, "37335": 482, "37411": 482, "test_wsgiref": 482, "testenviron": 482, "37400": 482, "test_o": 482, "test_chown_gid": 482, "37359": 482, "test_python_": 482, "cleantest": 482, "37362": 482, "37278": 482, "proactorloopctrlc": 482, "37261": 482, "37069": 482, "37252": 482, "test_clos": 482, "test_events_mask_overflow": 482, "37169": 482, "_pyobject_isfre": 482, "37153": 482, "test_multiprocess": 482, "34001": 482, "36919": 482, "test_source_encod": 482, "test_issue2301": 482, "30202": 482, "test_abc": 482, "macaddr": 482, "34596": 482, "uncal": 482, "naitre": 482, "38809": 482, "38684": 482, "38468": 482, "getvar": 482, "37415": 482, "stdatom": 482, "atomic_uintptr_t": 482, "38301": 482, "d_reentrant": 482, "36002": 482, "ac_path_tool": 482, "ac_path_target_tool": 482, "37936": 482, "gitignor": 482, "repo": 482, "37760": 482, "37725": 482, "37468": 482, "wininst": 482, "37189": 482, "pyrun_xxx": 482, "25361": 482, "sse2": 482, "36210": 482, "asi": 482, "libcurs": 482, "38589": 482, "38453": 482, "38519": 482, "38492": 482, "38344": 482, "38359": 482, "38355": 482, "38092": 482, "38133": 482, "38114": 482, "32592": 482, "36634": 482, "38081": 482, "38087": 482, "test_ntpath": 482, "38088": 482, "v142": 482, "37283": 482, "38030": 482, "38020": 482, "37705": 482, "winerror_to_errno": 482, "37549": 482, "1311": 482, "9949": 482, "36266": 482, "_pyimport_findsharedfuncptrwindow": 482, "nyayapati": 482, "25172": 482, "37778": 482, "37734": 482, "37702": 482, "37672": 482, "pip_us": 482, "37445": 482, "format_message_ignore_insert": 482, "formatmessagew": 482, "37369": 482, "37380": 482, "_activ": 482, "ruslan": 482, "kuprieiev": 482, "35360": 482, "37267": 482, "36779": 482, "cp_utf7": 482, "32587": 482, "28269": 482, "strcasecmp": 482, "_stricmp": 482, "minmin": 482, "gong": 482, "36590": 482, "rfcomm": 482, "38089": 482, "5mb": 482, "16mb": 482, "26353": 482, "4630": 482, "38598": 482, "36698": 482, "35379": 482, "editorwindow": 482, "38183": 482, "38077": 482, "38041": 482, "35771": 482, "hover_delay": 482, "test_tooltip": 482, "37824": 482, "37929": 482, "37902": 482, "37849": 482, "36419": 482, "37748": 482, "37692": 482, "37628": 482, "33610": 482, "37530": 482, "27452": 482, "removefil": 482, "createconfighandl": 482, "37325": 482, "37321": 482, "26806": 482, "37177": 482, "37039": 482, "35763": 482, "obtrus": 482, "36390": 482, "38118": 482, "38347": 482, "pathfix": 482, "37803": 482, "37942": 482, "argumentclin": 482, "37704": 482, "37675": 482, "37034": 482, "37064": 482, "pathscript": 482, "37633": 482, "38540": 482, "38395": 482, "36389": 482, "_pyobject_checkconsist": 482, "visit_decref": 482, "38266": 482, "38303": 482, "kieft": 482, "38205": 482, "38140": 482, "37926": 482, "37879": 482, "subtype_dealloc": 482, "37151": 482, "21120": 482, "37337": 482, "28805": 482, "positon": 482, "37215": 482, "36842": 482, "37170": 482, "35381": 482, "direntrytyp": 482, "scandiriteratortyp": 482, "34331": 482, "35907": 482, "9948": 482, "local_fil": 482, "33529": 482, "33164": 482, "35814": 482, "37126": 482, "37122": 482, "37087": 482, "37072": 482, "pyast_fromnodeobject": 482, "37029": 482, "26423": 482, "wrap_lenfunc": 482, "37050": 482, "expr_text": 482, "22385": 482, "36878": 482, "e1000": 482, "2180": 482, "36907": 482, "36826": 482, "namedexpress": 482, "ast_unpars": 482, "1875": 482, "36861": 482, "28866": 482, "36851": 482, "27639": 482, "blahay": 482, "erick": 482, "cervant": 482, "vaultah": 482, "36737": 482, "pyruntimest": 482, "24048": 482, "remove_modul": 482, "27987": 482, "36601": 482, "main_pid": 482, "36594": 482, "36045": 482, "36035": 482, "35983": 482, "20602": 482, "26826": 482, "31862": 482, "37120": 482, "12202": 482, "26835": 482, "29262": 482, "12639": 482, "35246": 482, "35279": 482, "37076": 482, "37054": 482, "_buffer": 482, "37058": 482, "37047": 482, "37049": 482, "37046": 482, "37045": 482, "37035": 482, "pollut": 482, "37001": 482, "36996": 482, "37008": 482, "27737": 482, "36969": 482, "36983": 482, "36972": 482, "36949": 482, "36948": 482, "33524": 482, "licht": 482, "takeuchi": 482, "24564": 482, "ying": 482, "36888": 482, "25652": 482, "36916": 482, "36889": 482, "writeon": 482, "readwrit": 482, "connect_unix": 482, "streamserv": 482, "flowcontrolmix": 482, "36845": 482, "23378": 482, "36867": 482, "23896": 482, "pygram": 482, "35545": 482, "36778": 482, "semaphore_track": 482, "24538": 482, "36832": 482, "36814": 482, "33110": 482, "26903": 482, "36813": 482, "36806": 482, "36802": 482, "36801": 482, "36748": 482, "8138": 482, "simpleserv": 482, "29183": 482, "36548": 482, "36542": 482, "36533": 482, "35252": 482, "36368": 482, "27497": 482, "ashish": 482, "nitin": 482, "patil": 482, "36239": 482, "keyedarch": 482, "35125": 482, "35721": 482, "31855": 482, "26660": 482, "34271": 482, "33569": 482, "34424": 482, "troeger": 482, "34303": 482, "33361": 482, "22454": 482, "31922": 482, "24882": 482, "31961": 482, "33123": 482, "buchholz": 482, "22102": 482, "facioni": 482, "32515": 482, "32299": 482, "vadim": 482, "tsander": 482, "27141": 482, "31829": 482, "x1a": 482, "23395": 482, "36896": 482, "36686": 482, "36984": 482, "36868": 482, "host_flag": 482, "35924": 482, "36783": 482, "time_fromtimeandfold": 482, "edison": 482, "abahurir": 482, "22865": 482, "35397": 482, "32995": 482, "33519": 482, "33482": 482, "25735": 482, "20285": 482, "test_coroutin": 482, "test_cprofil": 482, "test_rais": 482, "test_yield_from": 482, "37098": 482, "test_memfd_cr": 482, "37081": 482, "36915": 482, "36719": 482, "child_error": 482, "36816": 482, "selfsigned_pythontestdotnet": 482, "pythontest": 482, "35925": 482, "36782": 482, "36342": 482, "sem_open": 482, "36786": 482, "36965": 482, "status_control_c_exit": 482, "35926": 482, "1b": 482, "36231": 482, "35610": 482, "context_use_ps1": 482, "prompt_last_lin": 482, "31858": 482, "37038": 482, "36958": 482, "36807": 482, "usb": 482, "32411": 482, "37053": 482, "chih": 482, "36379": 482, "37107": 482, "_pyobject_callmethodidobjarg": 482, "_pyobject_getmethod": 482, "sullivan": 482, "36742": 482, "9740": 482, "35755": 482, "cs_path": 482, "32849": 482, "20180": 482, "36611": 482, "serialno": 482, "36549": 482, "36504": 482, "pycarraytype_new": 482, "20844": 482, "36452": 482, "36459": 482, "tok_nextc": 482, "36433": 482, "classmethoddescr_cal": 482, "36430": 482, "36440": 482, "skrobov": 482, "18372": 482, "35952": 482, "1613500": 482, "36734": 482, "stack_t": 482, "current_stack": 482, "36650": 482, "28552": 482, "project_bas": 482, "find_execut": 482, "25430": 482, "ipnetwork": 482, "30485": 482, "36613": 482, "36598": 482, "36575": 482, "33461": 482, "36559": 482, "lean": 482, "34373": 482, "36232": 482, "rougeth": 482, "36050": 482, "36522": 482, "houglum": 482, "30427": 482, "maier": 482, "36385": 482, "36434": 482, "36407": 482, "surjaninov": 482, "36366": 482, "unstart": 482, "test_tim": 482, "faiur": 482, "36227": 482, "35936": 482, "35376": 482, "17396": 482, "35934": 482, "23078": 482, "felip": 482, "ochoa": 482, "35416": 482, "35082": 482, "34547": 482, "31658": 482, "34139": 482, "33291": 482, "31310": 482, "31292": 482, "36625": 482, "30840": 482, "36523": 482, "36425": 482, "36345": 482, "literalinclud": 482, "36157": 482, "33043": 482, "35581": 482, "33832": 482, "32913": 482, "36725": 482, "36454": 482, "test_monoton": 482, "test_cyclic_gc": 482, "36635": 482, "36629": 482, "test_imap4_host_default_valu": 482, "test_getallocatedblock": 482, "36560": 482, "warmup": 482, "36565": 482, "test_resourc": 482, "test_tabnanni": 482, "36436": 482, "pymem_buffer_overflow": 482, "test_utf8_mod": 482, "36341": 482, "36747": 482, "scriptsinstal": 482, "36618": 482, "fmax": 482, "movap": 482, "movup": 482, "36605": 482, "36577": 482, "36544": 482, "36146": 482, "36508": 482, "36503": 482, "aix4": 482, "35920": 482, "arm32": 482, "36649": 482, "34144": 482, "mend": 482, "36509": 482, "35941": 482, "36441": 482, "36010": 482, "29515": 482, "ipproto_ah": 482, "ipproto_cbt": 482, "ipproto_dstopt": 482, "ipproto_egp": 482, "ipproto_esp": 482, "ipproto_frag": 482, "ipproto_ggp": 482, "ipproto_hopopt": 482, "ipproto_iclfxbm": 482, "ipproto_icmpv6": 482, "ipproto_idp": 482, "ipproto_igmp": 482, "ipproto_igp": 482, "ipproto_ipv4": 482, "ipproto_ipv6": 482, "ipproto_l2tp": 482, "ipproto_max": 482, "ipproto_nd": 482, "ipproto_non": 482, "ipproto_pgm": 482, "ipproto_pim": 482, "ipproto_pup": 482, "ipproto_rdp": 482, "ipproto_rout": 482, "ipproto_sctp": 482, "ipproto_st": 482, "35947": 482, "34060": 482, "kloth": 482, "31512": 482, "18075": 482, "36429": 482, "14546": 482, "36641": 482, "pydoc_var": 482, "cleanbyt": 482, "deaddyt": 482, "36443": 482, "mojibak": 482, "_py_preiniti": 482, "_pypreconfig": 482, "36025": 482, "36216": 482, "35121": 482, "36421": 482, "36412": 482, "36398": 482, "structseq_repr": 482, "36256": 482, "parsermodul": 482, "dfa": 482, "36365": 482, "36374": 482, "merge_consts_recurs": 482, "36236": 482, "36352": 482, "36301": 482, "36333": 482, "_pyruntimestate_fini": 482, "36332": 482, "36282": 482, "30040": 482, "36262": 482, "_py_dg_strtod": 482, "36252": 482, "36218": 482, "36188": 482, "vestig": 482, "martijn": 482, "pieter": 482, "36124": 482, "35808": 482, "36401": 482, "34745": 482, "_fields_default": 482, "36298": 482, "36285": 482, "stephan": 482, "hohe": 482, "36272": 482, "36280": 482, "35931": 482, "36251": 482, "stderrprint": 482, "36235": 482, "customize_compil": 482, "35807": 482, "36139": 482, "36179": 482, "36169": 482, "36103": 482, "36130": 482, "35652": 482, "35178": 482, "tashrif": 482, "billah": 482, "36106": 482, "sinpi": 482, "dmitrii": 482, "pasechnik": 482, "36091": 482, "chen": 482, "36043": 482, "35899": 482, "21269": 482, "akshay": 482, "35843": 482, "_namespacepath": 482, "35802": 482, "35715": 482, "librat": 482, "_process_work": 482, "35493": 482, "35661": 482, "35198": 482, "36138": 482, "21314": 482, "36234": 482, "posixuidgidtest": 482, "test_r": 482, "test_locale_flag": 482, "36123": 482, "36356": 482, "test_extens": 482, "36312": 482, "50220": 482, "50221": 482, "50222": 482, "50225": 482, "50227": 482, "50229": 482, "57002": 482, "57011": 482, "65000": 482, "24643": 482, "_timezon": 482, "36405": 482, "36396": 482, "fgbg": 482, "gethighlight": 482, "36176": 482, "darken": 482, "23205": 482, "23216": 482, "36152": 482, "colordeleg": 482, "32129": 482, "blurri": 482, "36096": 482, "30348": 482, "35132": 482, "gdb7": 482, "32217": 482, "36142": 482, "coreconfig": 482, "pycore_coreconfig": 482, "36052": 482, "35942": 482, "35992": 482, "35993": 482, "35991": 482, "_randommodul": 482, "35961": 482, "slice_richcompar": 482, "35911": 482, "12822": 482, "pthread_condattr_setclock": 482, "31506": 482, "35724": 482, "33608": 482, "_py_addpendingcal": 482, "33989": 482, "35512": 482, "35918": 482, "18283": 482, "35960": 482, "35500": 482, "24209": 482, "35321": 482, "nina": 482, "zakharenko": 482, "35378": 482, "34294": 482, "35615": 482, "34572": 482, "burgess": 482, "36083": 482, "36007": 482, "22062": 482, "27313": 482, "comboboxtest": 482, "36019": 482, "36037": 482, "rhel8": 482, "35798": 482, "35505": 482, "35917": 482, "shareabl": 482, "35704": 482, "test_unpack_archive_xztar": 482, "maxdata": 482, "0x20000000": 482, "aixtool": 482, "34720": 482, "m_state": 482, "35976": 482, "35692": 482, "35872": 482, "35873": 482, "35299": 482, "24310": 482, "35833": 482, "35689": 482, "35746": 482, "5010": 482, "deref": 482, "talo": 482, "0758": 482, "nicola": 482, "edet": 482, "34812": 482, "34791": 482, "domreg": 482, "34623": 482, "14647": 482, "_py_hashsecret": 482, "34405": 482, "0i": 482, "33871": 482, "32533": 482, "33136": 482, "8970": 482, "x509_verify_param_set1_host": 482, "namelen": 482, "33001": 482, "32981": 482, "1061": 482, "jami": 482, "35877": 482, "typed_ast": 482, "35720": 482, "pymain_parse_cmdline_impl": 482, "35634": 482, "35623": 482, "35214": 482, "test_io": 482, "35560": 482, "35552": 482, "35504": 482, "35494": 482, "unbalanc": 482, "35444": 482, "35436": 482, "35423": 482, "35357": 482, "magicproxi": 482, "from_kal": 482, "_mock_": 482, "35372": 482, "35336": 482, "31241": 482, "33954": 482, "35269": 482, "6x": 482, "35193": 482, "35169": 482, "34022": 482, "28401": 482, "stefano": 482, "rivera": 482, "29341": 482, "35050": 482, "29743": 482, "16806": 482, "35029": 482, "34983": 482, "34974": 482, "34939": 482, "34973": 482, "34876": 482, "34879": 482, "bytesobject": 482, "34784": 482, "34854": 482, "34824": 482, "30156": 482, "property_descr_get": 482, "34751": 482, "xxhash": 482, "34735": 482, "timemodul": 482, "34683": 482, "34653": 482, "pyparser_simpleparsestringfilenam": 482, "32236": 482, "34637": 482, "1621": 482, "34588": 482, "34485": 482, "_bootlocal": 482, "34527": 482, "34403": 482, "34523": 482, "12458": 482, "34408": 482, "leakag": 482, "34400": 482, "34377": 482, "_pyobject_realloc": 482, "34353": 482, "34320": 482, "34113": 482, "constantin": 482, "petrisor": 482, "34100": 482, "34151": 482, "34170": 482, "33237": 482, "34149": 482, "34125": 482, "34141": 482, "34126": 482, "24618": 482, "34068": 482, "34087": 482, "34080": 482, "34066": 482, "34042": 482, "33418": 482, "33985": 482, "33956": 482, "24596": 482, "33451": 482, "1617161": 482, "33824": 482, "33803": 482, "hadn": 482, "33738": 482, "33786": 482, "30167": 482, "33706": 482, "gohlk": 482, "30654": 482, "kerl": 482, "33622": 482, "25711": 482, "33509": 482, "31849": 482, "33475": 482, "20104": 482, "33391": 482, "set_symmetric_differ": 482, "33363": 482, "28055": 482, "eik": 482, "33128": 482, "33331": 482, "33312": 482, "_dictkeysobject": 482, "33305": 482, "33306": 482, "33270": 482, "30455": 482, "33176": 482, "33231": 482, "normalizestr": 482, "33205": 482, "round_up_to_power_2": 482, "hashtable_s": 482, "29922": 482, "33199": 482, "ma_version_tag": 482, "33138": 482, "copyabl": 482, "33018": 482, "25750": 482, "33026": 482, "33005": 482, "_pygilstate_reinit": 482, "_pyinterpreterstate_en": 482, "32911": 482, "29463": 482, "7a1": 482, "17288": 482, "32946": 482, "32932": 482, "32925": 482, "32889": 482, "py_address_in_rang": 482, "32836": 482, "31356": 482, "ensure_dis": 482, "32711": 482, "32583": 482, "31902": 482, "25862": 482, "21983": 482, "31577": 482, "29832": 482, "getsockaddrarg": 482, "35845": 482, "35847": 482, "ctypes_pass_by_ref_hack": 482, "test_pass_by_valu": 482, "35780": 482, "misord": 482, "23846": 482, "34323": 482, "35674": 482, "35733": 482, "35726": 482, "35719": 482, "35717": 482, "35699": 482, "32710": 482, "readfil": 482, "wsasend": 482, "35682": 482, "35643": 482, "35619": 482, "28503": 482, "35614": 482, "35568": 482, "35588": 482, "35585": 482, "30561": 482, "35526": 482, "35523": 482, "selinux": 482, "31784": 482, "1e9": 482, "35513": 482, "35502": 482, "35348": 482, "35491": 482, "baseprocess": 482, "35477": 482, "31446": 482, "createprocessw": 482, "35052": 482, "20239": 482, "17185": 482, "35445": 482, "35415": 482, "35424": 482, "35330": 482, "35346": 482, "rhapsodi": 482, "10496": 482, "check_environ": 482, "35389": 482, "cs_gnu_libc_vers": 482, "35394": 482, "35310": 482, "oran": 482, "avraham": 482, "35380": 482, "35341": 482, "ismo": 482, "toijala": 482, "35371": 482, "35066": 482, "35344": 482, "35312": 482, "35308": 482, "24746": 482, "jairo": 482, "trad": 482, "28604": 482, "35277": 482, "35226": 482, "35189": 482, "fnctl": 482, "calcel": 482, "35186": 482, "bdist_dumb": 482, "35152": 482, "35062": 482, "35065": 482, "_untrack_read": 482, "35079": 482, "sequencemanag": 482, "35017": 482, "35024": 482, "agren": 482, "31047": 482, "35053": 482, "34794": 482, "34909": 482, "35022": 482, "35008": 482, "23420": 482, "33947": 482, "34890": 482, "34521": 482, "recvfd": 482, "31522": 482, "34970": 482, "34969": 482, "16965": 482, "34966": 482, "34926": 482, "asthana": 482, "34941": 482, "32680": 482, "34769": 482, "34936": 482, "selection_el": 482, "34911": 482, "34922": 482, "34925": 482, "34900": 482, "oliveira": 482, "34844": 482, "strformatstyl": 482, "percentstyl": 482, "stringtemplatestyl": 482, "34897": 482, "34871": 482, "28441": 482, "34866": 482, "34711": 482, "34872": 482, "34849": 482, "34819": 482, "34758": 482, "34789": 482, "delfino": 482, "34334": 482, "5950": 482, "34728": 482, "34738": 482, "29577": 482, "31177": 482, "34672": 482, "34666": 482, "awrit": 482, "6721": 482, "34658": 482, "after_par": 482, "34652": 482, "34638": 482, "34536": 482, "34636": 482, "microoptim": 482, "34630": 482, "32490": 482, "34363": 482, "34625": 482, "32270": 482, "34622": 482, "34610": 482, "34421": 482, "34604": 482, "grzybowski": 482, "34574": 482, "8110": 482, "34530": 482, "34563": 482, "peeknamedpip": 482, "34558": 482, "_aix": 482, "22872": 482, "34515": 482, "13312": 482, "34472": 482, "sila": 482, "sewel": 482, "34454": 482, "izbyshev": 482, "6700": 482, "34171": 482, "34441": 482, "34427": 482, "34412": 482, "31715": 482, "mjs": 482, "34384": 482, "22602": 482, "2152": 482, "34341": 482, "34333": 482, "18540": 482, "26502": 482, "34318": 482, "33613": 482, "34248": 482, "34246": 482, "blum": 482, "aguiar": 482, "woellert": 482, "32321": 482, "wright": 482, "34263": 482, "34035": 482, "32215": 482, "34251": 482, "19891": 482, "homedir": 482, "34228": 482, "13041": 482, "zbyszek": 482, "34213": 482, "34052": 482, "34197": 482, "32788": 482, "__adapt__": 482, "21446": 482, "940286": 482, "showtop": 482, "34164": 482, "33729": 482, "34097": 482, "34108": 482, "34070": 482, "27494": 482, "33967": 482, "34041": 482, "34056": 482, "34054": 482, "34043": 482, "34044": 482, "34010": 482, "34019": 482, "bumsik": 482, "33978": 482, "14117": 482, "rosett": 482, "33974": 482, "27500": 482, "24567": 482, "25007": 482, "33929": 482, "popen_spawn_win32": 482, "33916": 482, "32568": 482, "33833": 482, "proactorsockettransport": 482, "33663": 482, "26544": 482, "33843": 482, "33842": 482, "33805": 482, "33687": 482, "furrer": 482, "33812": 482, "32108": 482, "27397": 482, "33578": 482, "30805": 482, "33476": 482, "enriqu": 482, "perez": 482, "terron": 482, "33694": 482, "32493": 482, "uuid_enc_b": 482, "33274": 482, "33778": 482, "33165": 482, "33770": 482, "33769": 482, "ssltransport": 482, "33767": 482, "33734": 482, "31014": 482, "33197": 482, "_parameterkind": 482, "32684": 482, "33654": 482, "33674": 482, "512mib": 482, "sslprotocol": 482, "sslproto": 482, "31647": 482, "_selectorsockettransport": 482, "32610": 482, "33469": 482, "33672": 482, "33652": 482, "33238": 482, "haydaman": 482, "33625": 482, "33623": 482, "sigsgv": 482, "11874": 482, "wrappabl": 482, "30877": 482, "fos": 482, "7062": 482, "33582": 482, "33570": 482, "pre6": 482, "28556": 482, "12486": 482, "33548": 482, "_candidate_tempdir_list": 482, "33109": 482, "33541": 482, "_strptime": 482, "localetim": 482, "__pad": 482, "_localetime__pad": 482, "33536": 482, "33542": 482, "get_nod": 482, "duid": 482, "zvi": 482, "effron": 482, "26819": 482, "33516": 482, "28612": 482, "ladi": 482, "wirtz": 482, "28167": 482, "33504": 482, "33505": 482, "33497": 482, "amber": 482, "33495": 482, "26103": 482, "hall": 482, "33453": 482, "prs": 482, "paulius": 482, "arka": 482, "dombrova": 482, "33365": 482, "strigl": 482, "20087": 482, "33422": 482, "33281": 482, "33311": 482, "blondon": 482, "27300": 482, "32933": 482, "fluri": 482, "33383": 482, "33375": 482, "33336": 482, "6851": 482, "32455": 482, "27485": 482, "33332": 482, "sigfillset": 482, "33251": 482, "33329": 482, "33334": 482, "991266": 482, "33131": 482, "33308": 482, "line_info": 482, "col_info": 482, "23403": 482, "33266": 482, "11594": 482, "33254": 482, "33265": 482, "33263": 482, "starostin": 482, "33256": 482, "33144": 482, "33185": 482, "0b3": 482, "29613": 482, "33203": 482, "33224": 482, "mdiff": 482, "33209": 482, "32861": 482, "lazar": 482, "33175": 482, "33141": 482, "33096": 482, "32873": 482, "33134": 482, "33127": 482, "32505": 482, "33078": 482, "33116": 482, "32896": 482, "33100": 482, "32953": 482, "32968": 482, "33061": 482, "33064": 482, "33056": 482, "33021": 482, "31804": 482, "33034": 482, "eaton": 482, "30249": 482, "33037": 482, "27683": 482, "22674": 482, "32999": 482, "33009": 482, "32969": 482, "32056": 482, "32970": 482, "32844": 482, "32960": 482, "32713": 482, "joffrey": 482, "fuhrer": 482, "32257": 482, "32929": 482, "32146": 482, "32922": 482, "32759": 482, "32859": 482, "dup3": 482, "32556": 482, "_getfinalpathnam": 482, "_getvolumepathnam": 482, "_getdiskusag": 482, "21060": 482, "32857": 482, "after_cancel": 482, "32852": 482, "_abc_registri": 482, "_abc_cach": 482, "_abc_negative_cach": 482, "_dump_registri": 482, "_abc_registry_clear": 482, "_abc_caches_clear": 482, "32841": 482, "32819": 482, "19675": 482, "32394": 482, "31787": 482, "30157": 482, "32775": 482, "32622": 482, "32777": 482, "32647": 482, "libdl": 482, "32691": 482, "mod_spec": 482, "32734": 482, "32727": 482, "31453": 482, "ssl_ctx_set_min_proto_vers": 482, "24334": 482, "31848": 482, "aifc_read": 482, "initfp": 482, "ssnd": 482, "32512": 482, "8525": 482, "29877": 482, "32221": 482, "scopeid": 482, "32147": 482, "31908": 482, "31608": 482, "31425": 482, "gps": 482, "andersson": 482, "22005": 482, "16865": 482, "29456": 482, "hangul": 482, "u1176": 482, "u11a7": 482, "u11c3": 482, "21257": 482, "34764": 482, "35564": 482, "master_doc": 482, "35511": 482, "10536": 482, "35089": 482, "35038": 482, "unexist": 482, "f_restrict": 482, "35042": 482, "35044": 482, "35035": 482, "34967": 482, "add_object_typ": 482, "description_unit": 482, "34913": 482, "32174": 482, "charat": 482, "11233": 482, "34552": 482, "28617": 482, "stdtype": 482, "20177": 482, "hoffmann": 482, "34065": 482, "33460": 482, "33847": 482, "33409": 482, "versionad": 482, "parameterkind": 482, "17045": 482, "33736": 482, "23859": 482, "33594": 482, "33503": 482, "33421": 482, "33487": 482, "33378": 482, "33276": 482, "33201": 482, "33195": 482, "33126": 482, "27212": 482, "28247": 482, "18802": 482, "27428": 482, "himanshu": 482, "lakhara": 482, "17232": 482, "32800": 482, "11015": 482, "32613": 482, "8722": 482, "32614": 482, "20709": 482, "gehrck": 482, "32722": 482, "31972": 482, "30607": 482, "8243": 482, "32337": 482, "25041": 482, "31432": 482, "35772": 482, "test_tarfil": 482, "tmpfs": 482, "ppc64le": 482, "punch": 482, "35045": 482, "unbreak": 482, "test_min_max_vers": 482, "test_sendfil": 482, "33717": 482, "35488": 482, "31731": 482, "check_interrupted_writ": 482, "test_multiprocessing_main_handl": 482, "35519": 482, "test_xmlrpc": 482, "34279": 482, "testdidnotrun": 482, "35412": 482, "test_future4": 482, "26704": 482, "35352": 482, "35317": 482, "test_email": 482, "test_localtime_daylight_true_dst_tru": 482, "test_localtime_daylight_false_dst_tru": 482, "21263": 482, "34962": 482, "docstest": 482, "23596": 482, "34537": 482, "test_str": 482, "34587": 482, "rdstest": 482, "testcongest": 482, "34661": 482, "34200": 482, "flaki": 482, "test_pkg": 482, "scari": 482, "module_cleanup": 482, "34569": 482, "34594": 482, "34579": 482, "34542": 482, "3072": 482, "11193": 482, "test_undecodable_env": 482, "34347": 482, "test_cmd_lin": 482, "34490": 482, "34391": 482, "11192": 482, "inet_pton6_zon": 482, "34399": 482, "test_mktim": 482, "test_pthread_getcpuclickid": 482, "_pytime_localtim": 482, "11191": 482, "test_search_cpp": 482, "33746": 482, "33901": 482, "test_dbm_gnu": 482, "33873": 482, "huntrleak": 482, "33562": 482, "33655": 482, "test_posix_falloc": 482, "zfs": 482, "32962": 482, "mcet": 482, "fcf": 482, "33358": 482, "test_pre_initialization_sys_opt": 482, "32872": 482, "32517": 482, "32663": 482, "smtputf8simtest": 482, "27643": 482, "test_c": 482, "19417": 482, "31809": 482, "secp": 482, "34691": 482, "35683": 482, "35642": 482, "asynciomodul": 482, "vcxproj": 482, "35550": 482, "__sun": 482, "__svr4": 482, "35499": 482, "35351": 482, "35139": 482, "inlinefunctionexpans": 482, "onlyexplicitinlin": 482, "ob1": 482, "35011": 482, "pyexpatn": 482, "28015": 482, "34765": 482, "automak": 482, "34585": 482, "34710": 482, "pedant": 482, "34582": 482, "devop": 482, "34081": 482, "34555": 482, "have_linux_vm_sockets_h": 482, "have_sockaddr_alg": 482, "33015": 482, "34245": 482, "34121": 482, "30345": 482, "5755": 482, "33614": 482, "33648": 482, "33522": 482, "visualstudio": 482, "33512": 482, "33483": 482, "33394": 482, "33377": 482, "mip": 482, "r6": 482, "riscv": 482, "32232": 482, "33182": 482, "33163": 482, "v39": 482, "33012": 482, "32898": 482, "29442": 482, "35890": 482, "wcstok": 482, "32560": 482, "35854": 482, "35811": 482, "35797": 482, "35758": 482, "29734": 482, "35596": 482, "35402": 482, "35401": 482, "34977": 482, "35067": 482, "_distutils_findv": 482, "vswhere": 482, "32557": 482, "34770": 482, "pyshellext": 482, "34603": 482, "34581": 482, "socketmodul": 482, "_msc_ver": 482, "34532": 482, "34062": 482, "34225": 482, "34011": 482, "34006": 482, "31546": 482, "matplotlib": 482, "30237": 482, "readconsol": 482, "cancelsynchronousio": 482, "33895": 482, "29097": 482, "86400": 482, "33316": 482, "33184": 482, "32890": 482, "33016": 482, "32903": 482, "32901": 482, "31966": 482, "32409": 482, "32457": 482, "32370": 482, "ipconfig": 482, "29248": 482, "printnameoffset": 482, "holmquist": 482, "sse4": 482, "1104": 482, "summaryinfo": 482, "35025": 482, "24658": 482, "33635": 482, "_recursivewildcardselector": 482, "_iterate_directori": 482, "13631": 482, "32726": 482, "activetcl": 482, "31903": 482, "systemconfigur": 482, "35770": 482, "35769": 482, "untitl": 482, "35660": 482, "35641": 482, "34055": 482, "35591": 482, "35196": 482, "squeezer": 482, "35598": 482, "config_key": 482, "28097": 482, "35208": 482, "35555": 482, "gray": 482, "35521": 482, "22703": 482, "35213": 482, "34864": 482, "35202": 482, "33000": 482, "overfil": 482, "23220": 482, "35099": 482, "stdxxx": 482, "35097": 482, "35093": 482, "35088": 482, "copy_str": 482, "35087": 482, "34548": 482, "unsqueez": 482, "34047": 482, "34275": 482, "34120": 482, "unrespons": 482, "33975": 482, "htest": 482, "33905": 482, "stackview": 482, "stackbrows": 482, "33924": 482, "mainmenu": 482, "menudef": 482, "33906": 482, "33917": 482, "idle_test": 482, "33904": 482, "rstripextens": 482, "33907": 482, "calltip_w": 482, "calltipwindow": 482, "33856": 482, "33839": 482, "33855": 482, "33763": 482, "33664": 482, "slider": 482, "33628": 482, "codecontext": 482, "33564": 482, "21474": 482, "33204": 482, "32984": 482, "32940": 482, "stringtranslatepseudomap": 482, "32916": 482, "32905": 482, "32874": 482, "32837": 482, "32826": 482, "test_help_about": 482, "test_file_button": 482, "32831": 482, "32765": 482, "34989": 482, "20260": 482, "read_var": 482, "33189": 482, "31920": 482, "krasnikov": 482, "29673": 482, "pystackv": 482, "pystack": 482, "32885": 482, "32222": 482, "harradin": 482, "31583": 482, "33817": 482, "35322": 482, "35296": 482, "pycore_": 482, "35259": 482, "neufeld": 482, "34725": 482, "34910": 482, "34193": 482, "34127": 482, "23927": 482, "pycompile_opcodestackeffectwithjump": 482, "34008": 482, "32500": 482, "33042": 482, "32374": 482, "30863": 482, "33851": 482, "33932": 482, "7b1": 482, "wno": 482, "threadedhttpserv": 482, "32703": 482, "32650": 482, "32685": 482, "32697": 482, "26163": 482, "0rc1": 482, "24340": 482, "18533": 482, "20891": 482, "32028": 482, "31113": 482, "30306": 482, "32513": 482, "32660": 482, "fionread": 482, "fionclex": 482, "fioclex": 482, "fioasync": 482, "fionbio": 482, "27931": 482, "32643": 482, "_step": 482, "_wakeup": 482, "_schedule_callback": 482, "32502": 482, "32596": 482, "32576": 482, "32574": 482, "melero": 482, "32521": 482, "32467": 482, "32473": 482, "libtirpc": 482, "32503": 482, "29237": 482, "32404": 482, "32228": 482, "22908": 482, "31853": 482, "x509_verify_param_set1_ip": 482, "32724": 482, "32649": 482, "17799": 482, "32721": 482, "32602": 482, "32549": 482, "32635": 482, "libxcrypt": 482, "32598": 482, "ax_check_openssl": 482, "32593": 482, "32588": 482, "29911": 482, "32507": 482, "32681": 482, "timzon": 482, "32399": 482, "rfc4122": 482, "uuid_creat": 482, "32390": 482, "32143": 482, "32379": 482, "32259": 482, "27169": 482, "22091": 482, "32329": 482, "30416": 482, "32282": 482, "versionhelp": 482, "32260": 482, "32225": 482, "31901": 482, "32506": 482, "32279": 482, "32278": 482, "32499": 482, "32468": 482, "32422": 482, "31721": 482, "_log_traceback": 482, "26133": 482, "32363": 482, "32357": 482, "python_coroutin": 482, "cython_coroutin": 482, "32323": 482, "32302": 482, "v140": 482, "29711": 482, "stop_serv": 482, "17852": 482, "misunderstand": 482, "_py_pyatexit": 482, "_get_running_loop": 482, "32255": 482, "32277": 482, "32273": 482, "test_util": 482, "32272": 482, "classify_class_attr": 482, "32199": 482, "26439": 482, "31993": 482, "31802": 482, "31699": 482, "abstractserv": 482, "32252": 482, "faulthandler_suppress_crash_report": 482, "24960": 482, "32030": 482, "29084": 482, "32264": 482, "pygetopt": 482, "32241": 482, "32176": 482, "co_nofre": 482, "32137": 482, "32096": 482, "_pyruntime_initi": 482, "28180": 482, "_py_setlocalefromenv": 482, "31949": 482, "30696": 482, "20047": 482, "21720": 482, "31845": 482, "28936": 482, "31825": 482, "escape_decod": 482, "31618": 482, "28603": 482, "zane": 482, "bitter": 482, "31786": 482, "31781": 482, "31626": 482, "30817": 482, "32214": 482, "27240": 482, "30788": 482, "31831": 482, "32182": 482, "rfc2231": 482, "32186": 482, "32101": 482, "32154": 482, "32089": 482, "preferenti": 482, "12239": 482, "vt_empti": 482, "mahon": 482, "28334": 482, "dimitri": 482, "merejkowski": 482, "31325": 482, "wellner": 482, "12382": 482, "ter": 482, "19610": 482, "28684": 482, "32110": 482, "27535": 482, "32088": 482, "1647489": 482, "32072": 482, "32069": 482, "32046": 482, "32018": 482, "32037": 482, "32034": 482, "32015": 482, "32011": 482, "28369": 482, "31976": 482, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 482, "9678": 482, "takayuki": 482, "shimizukawa": 482, "30057": 482, "31933": 482, "poolexecutor": 482, "31927": 482, "27666": 482, "chtype": 482, "mmask_t": 482, "fink": 482, "31917": 482, "31897": 482, "25720": 482, "31893": 482, "kqueue_ev": 482, "31891": 482, "31884": 482, "28281": 482, "gollahon": 482, "30639": 482, "30768": 482, "intr_flag": 482, "31854": 482, "31834": 482, "ssse3": 482, "28416": 482, "31653": 482, "28326": 482, "superset_of": 482, "31827": 482, "31457": 482, "31806": 482, "31803": 482, "31800": 482, "30143": 482, "31770": 482, "31752": 482, "31620": 482, "poller": 482, "31632": 482, "_sslprotocoltransport": 482, "15037": 482, "31307": 482, "31334": 482, "riccardo": 482, "coccioli": 482, "31308": 482, "immun": 482, "30553": 482, "misdirect": 482, "32105": 482, "31380": 482, "test_httpserv": 482, "test_undecodable_fil": 482, "apf": 482, "31705": 482, "test_sha256": 482, "enokey": 482, "32138": 482, "requires_android_level": 482, "32136": 482, "28668": 482, "requires_multiprocessing_queu": 482, "32126": 482, "test_get_event_loop_new_process": 482, "test_ev": 482, "31174": 482, "test_unpars": 482, "directorytestcas": 482, "28538": 482, "28762": 482, "29040": 482, "r14": 482, "32059": 482, "detect_modul": 482, "sysroot": 482, "31957": 482, "31609": 482, "31934": 482, "31926": 482, "28791": 482, "28643": 482, "31866": 482, "1102": 482, "error_no_more_item": 482, "tuininga": 482, "31944": 482, "31857": 482, "31392": 482, "2m": 482, "32207": 482, "32164": 482, "tabbedpag": 482, "tabbedpageset": 482, "32100": 482, "pathbrows": 482, "31836": 482, "test_code_modul": 482, "ditto": 482, "32159": 482, "svneol": 482, "treesync": 482, "30722": 482, "redemo": 482, "sarnowski": 482, "32125": 482, "py_useclassexceptionsflag": 482, "31642": 482, "31708": 482, "30404": 482, "31619": 482, "31602": 482, "31592": 482, "31588": 482, "31566": 482, "31505": 482, "make_encod": 482, "31492": 482, "31478": 482, "31336": 482, "31410": 482, "31315": 482, "create_dynam": 482, "31311": 482, "31293": 482, "31285": 482, "30058": 482, "31672": 482, "31701": 482, "31728": 482, "bm_regex_compil": 482, "30397": 482, "31675": 482, "31673": 482, "adderrorinfo": 482, "30806": 482, "25351": 482, "20519": 482, "28293": 482, "31596": 482, "30347": 482, "30346": 482, "31556": 482, "31516": 482, "31525": 482, "sqlite3_prepare_v2": 482, "27541": 482, "31351": 482, "31537": 482, "30085": 482, "31696": 482, "31625": 482, "ranlib": 482, "31624": 482, "22140": 482, "31569": 482, "31536": 482, "31460": 482, "flist": 482, "31649": 482, "_htest": 482, "_utest": 482, "31559": 482, "test_brows": 482, "31459": 482, "yesterday": 482, "31500": 482, "hidpi": 482, "31532": 482, "29781": 482, "29505": 482, "fuzz": 482, "30947": 482, "30730": 482, "30694": 482, "9233": 482, "9063": 482, "0718": 482, "0876": 482, "flood": 482, "5300": 482, "xml_sethashsalt": 482, "30500": 482, "splithost": 482, "29591": 482, "4472": 482, "537": 482, "31490": 482, "31471": 482, "31418": 482, "31416": 482, "defaultact": 482, "31411": 482, "onceregistri": 482, "31373": 482, "demot": 482, "30465": 482, "30860": 482, "31347": 482, "_pyobject_fastcall_prepend": 482, "31343": 482, "sysmacro": 482, "libray": 482, "31291": 482, "31271": 482, "31243": 482, "30721": 482, "31070": 482, "_get_module_lock": 482, "30747": 482, "_py_atomic_stor": 482, "_py_atomic_load": 482, "31095": 482, "31071": 482, "30978": 482, "30808": 482, "_py_atom": 482, "30876": 482, "reimport": 482, "30703": 482, "30765": 482, "pthread_mutex_lock": 482, "31161": 482, "30814": 482, "30736": 482, "30604": 482, "co_extra_freefunc": 482, "30597": 482, "30682": 482, "30501": 482, "30486": 482, "25324": 482, "29104": 482, "27945": 482, "duan": 482, "griffin": 482, "25794": 482, "30039": 482, "12414": 482, "29839": 482, "29914": 482, "29949": 482, "29935": 482, "29816": 482, "29894": 482, "29859": 482, "pthread_": 482, "29849": 482, "28856": 482, "29723": 482, "29139": 482, "29714": 482, "29695": 482, "28893": 482, "28876": 482, "29683": 482, "_pycode_setextra": 482, "coleman": 482, "29684": 482, "segv": 482, "28598": 482, "29607": 482, "29602": 482, "29347": 482, "29438": 482, "29478": 482, "mircea": 482, "cosbuc": 482, "29319": 482, "runmainfromimport": 482, "29337": 482, "29327": 482, "29034": 482, "path_convert": 482, "29159": 482, "29049": 482, "28932": 482, "25677": 482, "layzel": 482, "28596": 482, "26919": 482, "28991": 482, "28147": 482, "28739": 482, "28512": 482, "28918": 482, "28797": 482, "pyeval_getcallstat": 482, "28782": 482, "28774": 482, "28731": 482, "_pydict_newpres": 482, "28532": 482, "27100": 482, "ellington": 482, "28746": 482, "26920": 482, "langinfo": 482, "28648": 482, "astral": 482, "28665": 482, "19398": 482, "28621": 482, "28580": 482, "28583": 482, "28128": 482, "28509": 482, "28426": 482, "28517": 482, "28214": 482, "23782": 482, "_pytraceback_add": 482, "28183": 482, "28379": 482, "28376": 482, "range_iter": 482, "26906": 482, "18287": 482, "koep": 482, "24098": 482, "28201": 482, "28350": 482, "26617": 482, "27942": 482, "28289": 482, "21578": 482, "28203": 482, "soumya": 482, "sharma": 482, "28086": 482, "unscath": 482, "27955": 482, "28192": 482, "27441": 482, "27222": 482, "long_rshift": 482, "28131": 482, "compile_sourc": 482, "28126": 482, "py_memcpi": 482, "28120": 482, "26182": 482, "28721": 482, "31499": 482, "31482": 482, "mitar": 482, "31544": 482, "31234": 482, "31431": 482, "approx": 482, "31400": 482, "27629": 482, "28958": 482, "28182": 482, "27340": 482, "31178": 482, "31350": 482, "31170": 482, "31326": 482, "27144": 482, "31281": 482, "10746": 482, "22536": 482, "29741": 482, "31249": 482, "workitem": 482, "31247": 482, "31238": 482, "serverthread": 482, "docserv": 482, "serve_until_quit": 482, "5001": 482, "31109": 482, "30102": 482, "openssl_add_all_algorithms_noconf": 482, "power8": 482, "serra": 482, "scalet": 482, "31183": 482, "diagnosi": 482, "luciano": 482, "ramalho": 482, "uninform": 482, "convert_to_error": 482, "31169": 482, "drallensmith": 482, "31185": 482, "include_fil": 482, "31135": 482, "31107": 482, "31061": 482, "30987": 482, "30502": 482, "30919": 482, "26732": 482, "29403": 482, "gallagh": 482, "30961": 482, "19896": 482, "30946": 482, "25684": 482, "30886": 482, "29854": 482, "30319": 482, "30828": 482, "cfutur": 482, "30807": 482, "30441": 482, "29293": 482, "sleeper": 482, "30532": 482, "9146": 482, "29169": 482, "30119": 482, "30879": 482, "30746": 482, "30664": 482, "29212": 482, "y_n": 482, "29755": 482, "30616": 482, "30038": 482, "23894": 482, "24484": 482, "30589": 482, "28994": 482, "30645": 482, "load_packag": 482, "alexandru": 482, "ardelean": 482, "30624": 482, "30595": 482, "30605": 482, "29870": 482, "sgha": 482, "er": 482, "27585": 482, "mathieu": 482, "sornay": 482, "30418": 482, "30463": 482, "30557": 482, "30245": 482, "yuan": 482, "30378": 482, "30470": 482, "wijaya": 482, "30414": 482, "_feed": 482, "30003": 482, "30149": 482, "30301": 482, "30375": 482, "30329": 482, "wsaeinval": 482, "10022": 482, "29196": 482, "30299": 482, "30048": 482, "30266": 482, "30340": 482, "30298": 482, "weaken": 482, "subsequenti": 482, "29990": 482, "30243": 482, "30185": 482, "fasaraki": 482, "hilliard": 482, "30205": 482, "30228": 482, "30190": 482, "30101": 482, "29822": 482, "nate": 482, "soar": 482, "29960": 482, "bryan": 482, "30070": 482, "22352": 482, "30061": 482, "sizeabl": 482, "30218": 482, "30068": 482, "_iobas": 482, "29694": 482, "29692": 482, "unchain": 482, "siddharth": 482, "velankar": 482, "26187": 482, "9303": 482, "30017": 482, "29998": 482, "29649": 482, "29931": 482, "sanjay": 482, "sundaresan": 482, "29953": 482, "29942": 482, "10030": 482, "29204": 482, "27863": 482, "28699": 482, "23890": 482, "29901": 482, "25803": 482, "29861": 482, "29884": 482, "zeitouni": 482, "25455": 482, "29800": 482, "seifert": 482, "8256": 482, "29619": 482, "28298": 482, "intabl": 482, "29645": 482, "28231": 482, "26915": 482, "29623": 482, "elli": 482, "_v2": 482, "28963": 482, "subprocessstreamprotocol": 482, "29271": 482, "29703": 482, "29615": 482, "motejlek": 482, "29376": 482, "28624": 482, "sayan": 482, "chowdhuri": 482, "28518": 482, "29742": 482, "29532": 482, "29110": 482, "29534": 482, "_pydecim": 482, "29100": 482, "29416": 482, "29444": 482, "wgh": 482, "29368": 482, "29338": 482, "29335": 482, "29290": 482, "28735": 482, "magickmock": 482, "29197": 482, "29210": 482, "29219": 482, "29195": 482, "28969": 482, "29142": 482, "28961": 482, "jiajun": 482, "huang": 482, "15812": 482, "brees": 482, "28985": 482, "dingyuan": 482, "29079": 482, "13051": 482, "tycho": 482, "andersen": 482, "9770": 482, "28427": 482, "28923": 482, "28871": 482, "19542": 482, "16255": 482, "28779": 482, "set_forkserver_preload": 482, "26937": 482, "27030": 482, "28835": 482, "revisit": 482, "28752": 482, "28727": 482, "sre_pattern": 482, "18383": 482, "20572": 482, "25659": 482, "28548": 482, "19717": 482, "28563": 482, "28387": 482, "cufr": 482, "27517": 482, "fogl": 482, "28549": 482, "ncurses6": 482, "28449": 482, "23262": 482, "broytman": 482, "24241": 482, "27939": 482, "28255": 482, "prweek": 482, "20491": 482, "kaarl": 482, "ritvanen": 482, "28353": 482, "28430": 482, "27025": 482, "25464": 482, "header_exist": 482, "addin": 482, "28488": 482, "28469": 482, "28115": 482, "18219": 482, "28448": 482, "23214": 482, "28480": 482, "28240": 482, "24452": 482, "20766": 482, "27998": 482, "28317": 482, "28380": 482, "28229": 482, "28321": 482, "28225": 482, "28227": 482, "27358": 482, "28322": 482, "leitch": 482, "28228": 482, "28226": 482, "28314": 482, "28148": 482, "localtime_r": 482, "schouten": 482, "28253": 482, "28275": 482, "27897": 482, "18893": 482, "madison": 482, "27611": 482, "displaystyl": 482, "27348": 482, "5a2": 482, "25651": 482, "27778": 482, "28200": 482, "25400": 482, "_sendfile_use_sendfil": 482, "28075": 482, "error_access_deni": 482, "25270": 482, "escape_encod": 482, "28181": 482, "antigrav": 482, "kaartic": 482, "sivaraam": 482, "25895": 482, "gerg": 482, "imreh": 482, "holtermann": 482, "28114": 482, "parse_envlist": 482, "27599": 482, "27906": 482, "conway": 482, "28174": 482, "larson": 482, "26654": 482, "iceboy": 482, "26909": 482, "28176": 482, "selectorloop": 482, "27759": 482, "28325": 482, "macurl2path": 482, "28368": 482, "28371": 482, "28372": 482, "28399": 482, "27972": 482, "24142": 482, "florian": 482, "29581": 482, "25532": 482, "30177": 482, "pietri": 482, "31294": 482, "21649": 482, "30803": 482, "thomassen": 482, "30176": 482, "30052": 482, "26985": 482, "19824": 482, "20314": 482, "12518": 482, "28929": 482, "25008": 482, "26355": 482, "29349": 482, "28513": 482, "29639": 482, "hostv4": 482, "hostv6": 482, "31320": 482, "31346": 482, "25674": 482, "tbs": 482, "30715": 482, "30822": 482, "extralargefil": 482, "test_zipfile64": 482, "30695": 482, "set_nomemori": 482, "remove_mem_hook": 482, "30357": 482, "test_thread": 482, "grzegorz": 482, "grzywacz": 482, "30197": 482, "24932": 482, "28950": 482, "j0": 482, "28683": 482, "26936": 482, "28666": 482, "unwrit": 482, "23839": 482, "26944": 482, "28409": 482, "28217": 482, "_testconsol": 482, "26939": 482, "armv7": 482, "31354": 482, "21st": 482, "31341": 482, "30854": 482, "30687": 482, "vcvarsal": 482, "20210": 482, "29941": 482, "28787": 482, "29243": 482, "29643": 482, "27593": 482, "29572": 482, "27659": 482, "29384": 482, "26851": 482, "28768": 482, "_setmod": 482, "29080": 482, "23903": 482, "r13": 482, "20211": 482, "28849": 482, "_multiarch": 482, "10656": 482, "tristan": 482, "haubenwalln": 482, "optimi": 482, "28444": 482, "28208": 482, "28248": 482, "21124": 482, "13756": 482, "roumen": 482, "petrov": 482, "21085": 482, "rebas": 482, "28258": 482, "estonian": 482, "26661": 482, "15819": 482, "28676": 482, "gareth": 482, "ree": 482, "30389": 482, "31358": 482, "31340": 482, "v141": 482, "30581": 482, "30916": 482, "30731": 482, "gadget": 482, "23451": 482, "29579": 482, "25778": 482, "28896": 482, "28522": 482, "getpathp": 482, "28402": 482, "28333": 482, "28251": 482, "28110": 482, "28161": 482, "28162": 482, "28163": 482, "_open_osfhandl": 482, "28164": 482, "_pyio_get_console_typ": 482, "28138": 482, "31493": 482, "31488": 482, "parenmatch": 482, "31477": 482, "31480": 482, "31421": 482, "31414": 482, "31051": 482, "genpag": 482, "30617": 482, "outwin": 482, "31287": 482, "test_configdialog": 482, "keyset": 482, "31206": 482, "highpag": 482, "31001": 482, "31205": 482, "keyspag": 482, "31130": 482, "31002": 482, "19903": 482, "31083": 482, "tabpag": 482, "31050": 482, "31004": 482, "fontpag": 482, "30781": 482, "31060": 482, "30853": 482, "vartrac": 482, "31003": 482, "30993": 482, "causal": 482, "create_font_tab": 482, "set_sampl": 482, "var_changed_font": 482, "test_font_set": 482, "test_indent_scal": 482, "30981": 482, "28523": 482, "30917": 482, "idleconf": 482, "30934": 482, "30913": 482, "30899": 482, "30881": 482, "30851": 482, "30870": 482, "8231": 482, "getusercfgdir": 482, "30779": 482, "configchang": 482, "changes_class_v4": 482, "test_config": 482, "changestest": 482, "configdialog_tests_v1": 482, "msg297804": 482, "30777": 482, "30495": 482, "textview": 482, "pep8": 482, "30723": 482, "30674": 482, "21519": 482, "29910": 482, "30728": 482, "6739": 482, "25514": 482, "subsubsect": 482, "30642": 482, "30290": 482, "30303": 482, "29071": 482, "28572": 482, "30983": 482, "polaco": 482, "penteado": 482, "29748": 482, "24037": 482, "29367": 482, "wrapperobject": 482, "28023": 482, "15369": 482, "microbenchmark": 482, "28102": 482, "30832": 482, "py_have_native_tl": 482, "29083": 482, "29058": 482, "28808": 482, "28748": 482, "_py_packagecontext": 482, "2o": 482, "29706": 482, "30353": 482, "32555": 482, "31518": 482, "sslv23_method": 482, "4rc1": 482, "31852": 482, "31641": 482, "3rc1": 482, "31662": 482, "uploadreleas": 482, "31423": 482, "29600": 482, "2159": 482, "26293": 482, "29094": 482, "29519": 482, "29316": 482, "29011": 482, "29203": 482, "29085": 482, "29061": 482, "brendan": 482, "donegan": 482, "29119": 482, "andra": 482, "bogildea": 482, "29055": 482, "neaten": 482, "29326": 482, "29409": 482, "29392": 482, "28087": 482, "test_asyncor": 482, "test_eintr": 482, "28990": 482, "hoho": 482, "28770": 482, "28898": 482, "have_long_long": 482, "28843": 482, "28600": 482, "28634": 482, "28639": 482, "mayfield": 482, "28652": 482, "28653": 482, "28703": 482, "28704": 482, "28471": 482, "28492": 482, "28500": 482, "26923": 482, "ebk": 482, "26796": 482, "lawrenz": 482, "25221": 482, "27080": 482, "27199": 482, "27948": 482, "x7b": 482, "x7d": 482, "28046": 482, "28071": 482, "25758": 482, "25856": 482, "26331": 482, "27999": 482, "26058": 482, "27911": 482, "exec_builtin_or_dynam": 482, "stdint": 482, "27961": 482, "27355": 482, "27870": 482, "25402": 482, "27214": 482, "long_invert": 482, "long_add": 482, "27506": 482, "27812": 482, "27811": 482, "27587": 482, "pvs": 482, "_pystate_addmodul": 482, "27792": 482, "26984": 482, "25604": 482, "24254": 482, "27662": 482, "list_new": 482, "py_size_max": 482, "27782": 482, "py_create_mod": 482, "27936": 482, "27487": 482, "27157": 482, "27558": 482, "28008": 482, "28732": 482, "28485": 482, "28037": 482, "sqlite3_get_autocommit": 482, "intransact": 482, "25283": 482, "10740": 482, "28070": 482, "24693": 482, "27137": 482, "1703178": 482, "28019": 482, "18401": 482, "matusiak": 482, "kimbrel": 482, "25969": 482, "14977": 482, "1542": 482, "28082": 482, "24594": 482, "17582": 482, "28047": 482, "27576": 482, "28027": 482, "27445": 482, "22450": 482, "pgen3": 482, "load_grammar": 482, "28005": 482, "26667": 482, "27570": 482, "22233": 482, "27988": 482, "tautolog": 482, "27776": 482, "27691": 482, "gen_rid": 482, "25761": 482, "sweet32": 482, "25387": 482, "27866": 482, "11620": 482, "12885": 482, "27881": 482, "27861": 482, "19884": 482, "27706": 482, "nofar": 482, "schnider": 482, "10513": 482, "_get_type_var": 482, "_eval_typ": 482, "27832": 482, "_normal": 482, "27539": 482, "21718": 482, "ctes": 482, "2466": 482, "27573": 482, "27930": 482, "andrad": 482, "21201": 482, "wojciech": 482, "walczak": 482, "15308": 482, "bayard": 482, "randel": 482, "27922": 482, "27891": 482, "17642": 482, "25564": 482, "27821": 482, "26900": 482, "26027": 482, "27427": 482, "couzo": 482, "27953": 482, "26040": 482, "test_math": 482, "test_cmath": 482, "rigour": 482, "27787": 482, "27566": 482, "27705": 482, "validate_ucrtbas": 482, "27976": 482, "27983": 482, "26307": 482, "27917": 482, "25825": 482, "libpl": 482, "2a4": 482, "21122": 482, "17128": 482, "27952": 482, "fixcid": 482, "28065": 482, "25144": 482, "1602": 482, "27731": 482, "aliasmbc": 482, "20366": 482, "27756": 482, "cherri": 482, "27883": 482, "27704": 482, "22557": 482, "17596": 482, "wincrypt": 482, "gw": 482, "17599": 482, "reparse_data_buff": 482, "27507": 482, "27581": 482, "27419": 482, "27083": 482, "27514": 482, "27366": 482, "27524": 482, "27736": 482, "27038": 482, "27773": 482, "26750": 482, "descriptortyp": 482, "26800": 482, "26981": 482, "27783": 482, "27774": 482, "27760": 482, "27758": 482, "27568": 482, "httpoxi": 482, "1000110": 482, "7063": 482, "chuck": 482, "27656": 482, "sched_": 482, "27130": 482, "27567": 482, "27533": 482, "_isdir": 482, "17711": 482, "27522": 482, "27512": 482, "27714": 482, "text_textview": 482, "test_autocomplet": 482, "27621": 482, "27620": 482, "27609": 482, "25507": 482, "27173": 482, "confighandl": 482, "25805": 482, "test_pkgutil": 482, "27472": 482, "27369": 482, "test_pyexpat": 482, "27594": 482, "test_ast": 482, "27647": 482, "27610": 482, "27469": 482, "27309": 482, "27713": 482, "27453": 482, "27641": 482, "26662": 482, "python_for_gen": 482, "10910": 482, "freedbsd": 482, "27278": 482, "22636": 482, "27473": 482, "27443": 482, "27007": 482, "26844": 482, "lev": 482, "maximov": 482, "23804": 482, "27466": 482, "time2netscap": 482, "27319": 482, "27079": 482, "27294": 482, "27048": 482, "27330": 482, "27238": 482, "27122": 482, "issue25782": 482, "26386": 482, "16182": 482, "27477": 482, "test_help": 482, "27380": 482, "sectionnam": 482, "helpsourc": 482, "itw": 482, "27372": 482, "27365": 482, "27245": 482, "24137": 482, "27310": 482, "28066": 482, "27442": 482, "android_api_level": 482, "27434": 482, "26930": 482, "2h": 482, "23968": 482, "machdep": 482, "platform_triplet": 482, "ldversion": 482, "_sysconfigdata": 482, "27332": 482, "27418": 482, "importbench": 482, "19489": 482, "27285": 482, "pierci": 482, "27027": 482, "26556": 482, "1283": 482, "0772": 482, "oststrom": 482, "26839": 482, "colm": 482, "buckley": 482, "27190": 482, "sawyer": 482, "27286": 482, "27066": 482, "26983": 482, "27097": 482, "23275": 482, "20508": 482, "21386": 482, "07a5610bae9d": 482, "luethi": 482, "27029": 482, "20900": 482, "ingrid": 482, "25738": 482, "susumu": 482, "koshiba": 482, "21313": 482, "27164": 482, "24291": 482, "serverhandl": 482, "21272": 482, "26809": 482, "26373": 482, "flip": 482, "sigiot": 482, "27167": 482, "25931": 482, "21776": 482, "26526": 482, "27114": 482, "_load_windows_store_cert": 482, "5124": 482, "24750": 482, "24759": 482, "27239": 482, "isxyztk": 482, "27262": 482, "27196": 482, "20567": 482, "27156": 482, "27117": 482, "26673": 482, "21939": 482, "21676": 482, "18410": 482, "westley": 482, "mart": 482, "nez": 482, "21703": 482, "27044": 482, "remove_var_callback": 482, "23977": 482, "test_deleg": 482, "16484": 482, "rodman": 482, "kaushik": 482, "nadikud": 482, "24136": 482, "22558": 482, "yoni": 482, "lavi": 482, "25285": 482, "27064": 482, "17500": 482, "pythondotorg": 482, "945": 482, "27229": 482, "26657": 482, "hagemeist": 482, "26313": 482, "baji": 482, "25939": 482, "20041": 482, "26168": 482, "26991": 482, "27039": 482, "23640": 482, "27005": 482, "18531": 482, "26811": 482, "20120": 482, "26802": 482, "26659": 482, "26718": 482, "27138": 482, "27147": 482, "25339": 482, "26494": 482, "26581": 482, "19711": 482, "21099": 482, "26563": 482, "26558": 482, "26464": 482, "22836": 482, "26302": 482, "26136": 482, "anish": 482, "shah": 482, "26204": 482, "4806": 482, "23601": 482, "25843": 482, "26107": 482, "26154": 482, "_pythreadstate_uncheckedget": 482, "_pythreadstate_curr": 482, "22995": 482, "_pyobject_getst": 482, "25961": 482, "25973": 482, "20440": 482, "py_setref": 482, "25766": 482, "25421": 482, "25709": 482, "24097": 482, "24731": 482, "25630": 482, "23564": 482, "fds_to_pass": 482, "25388": 482, "25462": 482, "24802": 482, "overread": 482, "25555": 482, "24726": 482, "25449": 482, "25395": 482, "_pybyteswrit": 482, "25274": 482, "24402": 482, "24806": 482, "24848": 482, "misform": 482, "25280": 482, "25003": 482, "9232": 482, "24965": 482, "26478": 482, "26171": 482, "25660": 482, "26288": 482, "26289": 482, "26315": 482, "25887": 482, "27057": 482, "eaccess": 482, "bednarski": 482, "27014": 482, "tuur": 482, "27031": 482, "14132": 482, "janech": 482, "17214": 482, "27033": 482, "27034": 482, "26892": 482, "22274": 482, "26807": 482, "yolanda": 482, "robla": 482, "25745": 482, "26977": 482, "26002": 482, "upendra": 482, "kuma": 482, "25974": 482, "26996": 482, "26881": 482, "23815": 482, "17765": 482, "26873": 482, "responseerror": 482, "26711": 482, "24114": 482, "crle": 482, "kee": 482, "26864": 482, "24902": 482, "26634": 482, "26804": 482, "lower_cas": 482, "mixed_cas": 482, "26837": 482, "26041": 482, "kumaripaba": 482, "miyurusara": 482, "athukorala": 482, "26822": 482, "26733": 482, "26801": 482, "24838": 482, "26717": 482, "ize": 482, "26782": 482, "26735": 482, "024": 482, "26585": 482, "_quote_html": 482, "16329": 482, "webm": 482, "13952": 482, "26709": 482, "y2038": 482, "23735": 482, "25951": 482, "26586": 482, "26676": 482, "22854": 482, "26641": 482, "docfiletest": 482, "25195": 482, "3603bae63c13": 482, "plummer": 482, "26644": 482, "26616": 482, "26637": 482, "21925": 482, "26530": 482, "_pytracemalloc_track": 482, "_pytracemalloc_untrack": 482, "_pytracemalloc_gettraceback": 482, "_tracemalloc": 482, "24266": 482, "26590": 482, "18787": 482, "26560": 482, "inglesbi": 482, "_showwarnmsg": 482, "26569": 482, "26499": 482, "ghost": 482, "25320": 482, "den": 482, "elzen": 482, "16181": 482, "http2time": 482, "26513": 482, "23718": 482, "tam": 482, "benc": 482, "gedai": 482, "20589": 482, "26177": 482, "15068": 482, "2202": 482, "get_algorithm_impl": 482, "dupuy": 482, "26167": 482, "25718": 482, "26475": 482, "26457": 482, "26385": 482, "26402": 482, "25913": 482, "swati": 482, "jaiswal": 482, "26186": 482, "26367": 482, "26309": 482, "25995": 482, "23992": 482, "mapresult": 482, "26117": 482, "25949": 482, "25911": 482, "26045": 482, "12923": 482, "brazil": 482, "rocco": 482, "25945": 482, "26202": 482, "23076": 482, "nyberg": 482, "19883": 482, "26099": 482, "26147": 482, "25935": 482, "16620": 482, "26013": 482, "25850": 482, "25822": 482, "22642": 482, "24705": 482, "_parse_makefil": 482, "26069": 482, "22138": 482, "mcculli": 482, "25672": 482, "ssl_mode_release_buff": 482, "26012": 482, "24120": 482, "ulrich": 482, "25447": 482, "25802": 482, "24103": 482, "25860": 482, "samson": 482, "25914": 482, "25902": 482, "22227": 482, "25717": 482, "5a1": 482, "24903": 482, "25764": 482, "25771": 482, "6478": 482, "14285": 482, "19771": 482, "25177": 482, "10131": 482, "ganisin": 482, "7990": 482, "santoso": 482, "25725": 482, "25663": 482, "25688": 482, "23914": 482, "25691": 482, "25624": 482, "25626": 482, "uint_max": 482, "25583": 482, "6973": 482, "mauro": 482, "25590": 482, "25498": 482, "eryksun": 482, "25584": 482, "25446": 482, "18010": 482, "25554": 482, "18973": 482, "25510": 482, "ryosuk": 482, "ito": 482, "25503": 482, "vandenberg": 482, "25515": 482, "21827": 482, "25390": 482, "25441": 482, "25410": 482, "25411": 482, "simon04": 482, "25407": 482, "25406": 482, "25364": 482, "25328": 482, "enable_smtputf8": 482, "25316": 482, "distutilsplatformerror": 482, "25380": 482, "stack_glob": 482, "23972": 482, "reuseport": 482, "reuseaddr": 482, "25304": 482, "25232": 482, "cgirequesthandl": 482, "24657": 482, "23600": 482, "25203": 482, "22241": 482, "23517": 482, "24633": 482, "24874": 482, "24360": 482, "23426": 482, "run_setup": 482, "13938": 482, "stringtyp": 482, "8585": 482, "zipimporter2": 482, "18622": 482, "palumbo": 482, "laurent": 482, "buyst": 482, "24426": 482, "23661": 482, "ignacio": 482, "rossi": 482, "25578": 482, "getpeerc": 482, "25530": 482, "25569": 482, "25471": 482, "25319": 482, "26050": 482, "25924": 482, "26406": 482, "26848": 482, "20640": 482, "confighelpsourceedit": 482, "iobind": 482, "25905": 482, "15348": 482, "24455": 482, "15347": 482, "vwait": 482, "25313": 482, "currentthem": 482, "24782": 482, "22726": 482, "24820": 482, "cobalt": 482, "25224": 482, "24972": 482, "24570": 482, "24988": 482, "scrolledlist": 482, "24801": 482, "25173": 482, "25198": 482, "pitch": 482, "blueish": 482, "25225": 482, "21995": 482, "22820": 482, "25219": 482, "24861": 482, "idleib": 482, "25199": 482, "16893": 482, "helpdialog": 482, "helt": 482, "24199": 482, "idlev": 482, "24790": 482, "26736": 482, "6953": 482, "23606": 482, "24952": 482, "mattip": 482, "26014": 482, "21916": 482, "loys": 482, "26295": 482, "testdir": 482, "26523": 482, "26015": 482, "26325": 482, "25940": 482, "25616": 482, "test_collect": 482, "test_ordered_dict": 482, "25188": 482, "22806": 482, "18174": 482, "25260": 482, "26583": 482, "test_timestamp_overflow": 482, "test_import": 482, "21277": 482, "ffi_conveni": 482, "26884": 482, "rtld_": 482, "22359": 482, "21668": 482, "_datetim": 482, "_ctypes_test": 482, "25702": 482, "26624": 482, "17603": 482, "fileblock": 482, "26079": 482, "bjoern": 482, "thiel": 482, "26465": 482, "2g": 482, "25348": 482, "build_pgo": 482, "25827": 482, "25696": 482, "j9": 482, "24986": 482, "_math": 482, "26268": 482, "25136": 482, "24324": 482, "27053": 482, "make_zip": 482, "prepare_ssl": 482, "26071": 482, "26073": 482, "26065": 482, "25022": 482, "example_nt": 482, "26799": 482, "ilsch": 482, "26271": 482, "shaulov": 482, "26489": 482, "26316": 482, "25440": 482, "26312": 482, "26198": 482, "32551": 482, "6rc1": 482, "30657": 482, "1000158": 482, "bosamiya": 482, "29537": 482, "30383": 482, "30523": 482, "matchfil": 482, "30540": 482, "warm": 482, "30675": 482, "29073": 482, "28189": 482, "dictitems_contain": 482, "26020": 482, "19003": 482, "26664": 482, "ld_so_aix": 482, "26867": 482, "26194": 482, "17633": 482, "27223": 482, "_read_readi": 482, "_write_readi": 482, "_conn_lost": 482, "22970": 482, "25500": 482, "25715": 482, "25182": 482, "stdprinter": 482, "25131": 482, "25150": 482, "_py_atomic_xxx": 482, "openmp": 482, "24483": 482, "22958": 482, "22609": 482, "25111": 482, "25262": 482, "binbytes8": 482, "binunicode8": 482, "25034": 482, "anthon": 482, "neut": 482, "25233": 482, "23329": 482, "_unpickler_read": 482, "25047": 482, "25135": 482, "deque_clear": 482, "19143": 482, "25092": 482, "25155": 482, "25108": 482, "25118": 482, "24684": 482, "25060": 482, "24857": 482, "kaptur": 482, "23144": 482, "24982": 482, "25019": 482, "16180": 482, "24891": 482, "24992": 482, "24881": 482, "21112": 482, "24764": 482, "read_multi": 482, "landri": 482, "24913": 482, "bryce": 482, "darl": 482, "24774": 482, "chiu": 482, "hsiang": 482, "hsu": 482, "21159": 482, "20362": 482, "ilia": 482, "kurenkov": 482, "23572": 482, "12067": 482, "23725": 482, "24808": 482, "weston": 482, "22812": 482, "mca": 482, "nulti": 482, "25099": 482, "23919": 482, "24915": 482, "24910": 482, "msis": 482, "25450": 482, "25164": 482, "25143": 482, "25163": 482, "25089": 482, "25165": 482, "25112": 482, "25102": 482, "25081": 482, "25091": 482, "25126": 482, "25213": 482, "requestedexecutionlevel": 482, "25071": 482, "25029": 482, "test_strptim": 482, "25027": 482, "24305": 482, "24912": 482, "24975": 482, "24917": 482, "time_strftim": 482, "24748": 482, "load_dynam": 482, "24635": 482, "24989": 482, "24769": 482, "21167": 482, "24492": 482, "24847": 482, "24839": 482, "24867": 482, "24667": 482, "odict": 482, "24824": 482, "24634": 482, "24798": 482, "_msvccompil": 482, "4395": 482, "23973": 482, "23004": 482, "hill": 482, "23888": 482, "23652": 482, "22932": 482, "shachnev": 482, "23779": 482, "23319": 482, "gautier": 482, "23254": 482, "19450": 482, "17527": 482, "sbardella": 482, "24791": 482, "23672": 482, "mohd": 482, "sanad": 482, "zaki": 482, "rizvi": 482, "24745": 482, "tkfixedfont": 482, "fontxxx": 482, "21192": 482, "adnan": 482, "umer": 482, "13884": 482, "tearoff": 482, "24129": 482, "20769": 482, "dorian": 482, "pula": 482, "23589": 482, "yongzhi": 482, "24729": 482, "24751": 482, "24569": 482, "24583": 482, "24407": 482, "24619": 482, "24687": 482, "15944": 482, "23441": 482, "sekera": 482, "24683": 482, "21697": 482, "eduardo": 482, "seabra": 482, "24695": 482, "24620": 482, "22485": 482, "22153": 482, "evilzero": 482, "24580": 482, "24206": 482, "24631": 482, "24608": 482, "18684": 482, "24259": 482, "24669": 482, "kai": 482, "groner": 482, "24688": 482, "24603": 482, "24467": 482, "24345": 482, "py_tp_fin": 482, "21750": 482, "24552": 482, "24514": 482, "19176": 482, "20387": 482, "24456": 482, "24336": 482, "24522": 482, "24489": 482, "24408": 482, "24347": 482, "24348": 482, "24359": 482, "24368": 482, "24362": 482, "24377": 482, "24369": 482, "defend": 482, "24373": 482, "_testmultiphas": 482, "16690": 482, "24458": 482, "24351": 482, "24432": 482, "24115": 482, "_pydict_contain": 482, "24328": 482, "11205": 482, "24285": 482, "23247": 482, "5633": 482, "24326": 482, "23934": 482, "24276": 482, "23955": 482, "24257": 482, "22939": 482, "23985": 482, "24102": 482, "23290": 482, "set_merg": 482, "2292": 482, "24096": 482, "23996": 482, "23911": 482, "24192": 482, "24022": 482, "22906": 482, "24230": 482, "24244": 482, "15836": 482, "wagner": 482, "9858": 482, "laura": 482, "rupprecht": 482, "22107": 482, "23780": 482, "6598": 482, "24091": 482, "21931": 482, "fci": 482, "armstrong": 482, "mangle_from": 482, "18682": 482, "23796": 482, "hergenroed": 482, "24155": 482, "20274": 482, "24134": 482, "23880": 482, "getdoubl": 482, "24094": 482, "9246": 482, "1025": 482, "23917": 482, "23008": 482, "23908": 482, "23728": 482, "23887": 482, "24178": 482, "24179": 482, "22547": 482, "23898": 482, "bayer": 482, "24298": 482, "23184": 482, "sweigart": 482, "21520": 482, "9517": 482, "christi": 482, "22155": 482, "24029": 482, "24077": 482, "24000": 482, "24001": 482, "23330": 482, "24031": 482, "22980": 482, "kfreebsd": 482, "22631": 482, "courtesi": 482, "23731": 482, "23726": 482, "23309": 482, "22977": 482, "23466": 482, "24044": 482, "21354": 482, "23840": 482, "23703": 482, "901e4e52b20a": 482, "_curs": 482, "19933": 482, "calledprocess": 482, "21217": 482, "balling": 482, "allison": 482, "24521": 482, "22931": 482, "23811": 482, "21116": 482, "boquien": 482, "22982": 482, "23529": 482, "21859": 482, "23865": 482, "23400": 482, "10838": 482, "23411": 482, "23881": 482, "22721": 482, "15133": 482, "23338": 482, "kato": 482, "16840": 482, "23834": 482, "23618": 482, "21526": 482, "23836": 482, "18473": 482, "3to2": 482, "23485": 482, "23752": 482, "23745": 482, "22117": 482, "23310": 482, "kasia": 482, "jachim": 482, "23817": 482, "sovers": 482, "23501": 482, "23799": 482, "22390": 482, "18128": 482, "23935": 482, "23944": 482, "20586": 482, "23492": 482, "23500": 482, "23998": 482, "pyimport_reinitlock": 482, "23753": 482, "23192": 482, "23629": 482, "14260": 482, "23792": 482, "pipepag": 482, "23775": 482, "23765": 482, "isbadstringptr": 482, "22364": 482, "23742": 482, "21802": 482, "23502": 482, "17530": 482, "22687": 482, "tetxtwrap": 482, "4727": 482, "23657": 482, "23688": 482, "23647": 482, "23539": 482, "22351": 482, "23715": 482, "23646": 482, "23136": 482, "carrol": 482, "23700": 482, "bohuslav": 482, "kabrda": 482, "22903": 482, "23631": 482, "rdivmod": 482, "23138": 482, "23051": 482, "diamant": 482, "22928": 482, "23615": 482, "23585": 482, "23583": 482, "22289": 482, "test_urllib2net": 482, "22826": 482, "bkfile": 482, "23571": 482, "23103": 482, "23476": 482, "x509_v_flag_trusted_first": 482, "23576": 482, "stall": 482, "23504": 482, "23563": 482, "19980": 482, "23521": 482, "21619": 482, "6639": 482, "814253": 482, "23215": 482, "aleksi": 482, "torhamo": 482, "5700": 482, "23374": 482, "23481": 482, "21548": 482, "apropo": 482, "22885": 482, "23146": 482, "23096": 482, "19105": 482, "23421": 482, "wdv4758h": 482, "23367": 482, "23361": 482, "19705": 482, "yeo": 482, "23801": 482, "23445": 482, "23686": 482, "23465": 482, "23285": 482, "22735": 482, "22896": 482, "21295": 482, "16795": 482, "22986": 482, "15859": 482, "campbel": 482, "barton": 482, "21408": 482, "23321": 482, "23253": 482, "22038": 482, "pyatom": 482, "lima": 482, "templ": 482, "20284": 482, "23048": 482, "20335": 482, "22869": 482, "pylifecycl": 482, "22335": 482, "0x7fffffff": 482, "22653": 482, "22643": 482, "22604": 482, "21052": 482, "22470": 482, "22520": 482, "22519": 482, "22518": 482, "1764286": 482, "18554": 482, "21391": 482, "11471": 482, "22215": 482, "22258": 482, "f_setfd": 482, "21389": 482, "22206": 482, "20184": 482, "22116": 482, "builtin_function_or_method": 482, "22077": 482, "20179": 482, "22082": 482, "slotdef": 482, "21897": 482, "21669": 482, "21642": 482, "42els": 482, "21523": 482, "pessimist": 482, "21418": 482, "21425": 482, "21435": 482, "21377": 482, "20355": 482, "21274": 482, "path_max": 482, "20904": 482, "fpu": 482, "m68k": 482, "21209": 482, "21193": 482, "21134": 482, "19537": 482, "20929": 482, "20731": 482, "20637": 482, "ingebretson": 482, "19995": 482, "19655": 482, "12546": 482, "13598": 482, "elson": 482, "8931": 482, "23165": 482, "23399": 482, "13128": 482, "23099": 482, "23326": 482, "23363": 482, "23364": 482, "23366": 482, "23369": 482, "encode_basestring_ascii": 482, "23353": 482, "why_yield": 482, "why_return": 482, "14099": 482, "tellabl": 482, "18518": 482, "23094": 482, "23268": 482, "19996": 482, "23248": 482, "23098": 482, "dev_t": 482, "21817": 482, "23250": 482, "23063": 482, "23209": 482, "23225": 482, "23143": 482, "23132": 482, "23112": 482, "23093": 482, "23111": 482, "22585": 482, "19104": 482, "23071": 482, "22783": 482, "15513": 482, "19858": 482, "22095": 482, "23016": 482, "21775": 482, "vfat": 482, "1218234": 482, "21740": 482, "23009": 482, "22959": 482, "16043": 482, "gzip_decod": 482, "1753": 482, "22966": 482, "pyc_compil": 482, "21971": 482, "21032": 482, "22902": 482, "pach": 482, "21356": 482, "bernard": 482, "spil": 482, "22915": 482, "22921": 482, "22894": 482, "22370": 482, "22841": 482, "ludov": 482, "gasc": 482, "httpbasicpriorauthhandl": 482, "22849": 482, "12728": 482, "22821": 482, "22824": 482, "22406": 482, "17293": 482, "netstat": 482, "aivar": 482, "kalv": 482, "22769": 482, "22417": 482, "22775": 482, "22776": 482, "22665": 482, "17381": 482, "22410": 482, "22759": 482, "8876": 482, "22217": 482, "22457": 482, "18216": 482, "22676": 482, "18853": 482, "__nain__": 482, "9351": 482, "7559": 482, "21991": 482, "22641": 482, "17401": 482, "compile_": 482, "20152": 482, "18643": 482, "22435": 482, "13096": 482, "11694": 482, "22462": 482, "21173": 482, "11866": 482, "21905": 482, "21883": 482, "22219": 482, "22449": 482, "ssl_cert_dir": 482, "ssl_cert_fil": 482, "22508": 482, "20076": 482, "20079": 482, "22396": 482, "22517": 482, "23392": 482, "10510": 482, "oshmyan": 482, "22448": 482, "oliva": 482, "22427": 482, "22362": 482, "20912": 482, "21866": 482, "22278": 482, "issue22118": 482, "22415": 482, "groupref_exist": 482, "22423": 482, "21332": 482, "21091": 482, "21079": 482, "22247": 482, "22419": 482, "bobrov": 482, "22384": 482, "22168": 482, "21147": 482, "21951": 482, "22338": 482, "12410": 482, "21270": 482, "22226": 482, "19524": 482, "19546": 482, "22051": 482, "21933": 482, "21597": 482, "kani": 482, "18132": 482, "22216": 482, "22098": 482, "22185": 482, "zongker": 482, "22287": 482, "_pytime_gettimeofday": 482, "librt": 482, "22182": 482, "move_fil": 482, "22042": 482, "22236": 482, "15696": 482, "22068": 482, "22165": 482, "8797": 482, "bull": 482, "20729": 482, "21448": 482, "22184": 482, "17923": 482, "delhallt": 482, "22176": 482, "elf": 482, "abiv2": 482, "21975": 482, "20170": 482, "exists_ok": 482, "22127": 482, "22085": 482, "21580": 482, "17172": 482, "21704": 482, "20173": 482, "22033": 482, "21947": 482, "16133": 482, "22044": 482, "call_tzinfo_method": 482, "flanagan": 482, "1034h": 482, "4350": 482, "6167": 482, "15275": 482, "21888": 482, "22032": 482, "22031": 482, "21044": 482, "21966": 482, "19076": 482, "16382": 482, "21932": 482, "21942": 482, "11259": 482, "12523": 482, "21707": 482, "replace_paths_in_cod": 482, "20639": 482, "tikhonov": 482, "21714": 482, "21151": 482, "21090": 482, "21781": 482, "21679": 482, "21863": 482, "11453": 482, "21858": 482, "21476": 482, "21729": 482, "21491": 482, "21832": 482, "21722": 482, "dengler": 482, "21723": 482, "21711": 482, "21766": 482, "21310": 482, "21256": 482, "21677": 482, "nonnorm": 482, "11709": 482, "21515": 482, "13223": 482, "writedoc": 482, "21463": 482, "21618": 482, "21552": 482, "14315": 482, "sapin": 482, "21402": 482, "3015": 482, "21513": 482, "21137": 482, "21538": 482, "21525": 482, "22166": 482, "_forget_codec": 482, "10744": 482, "nontrivi": 482, "13916": 482, "20998": 482, "21075": 482, "21226": 482, "21398": 482, "21424": 482, "heaqp": 482, "nmsmallest": 482, "21396": 482, "18314": 482, "sman": 482, "21088": 482, "21407": 482, "10650": 482, "21469": 482, "19414": 482, "21421": 482, "21101": 482, "21321": 482, "anton": 482, "afanasyev": 482, "21057": 482, "9815": 482, "13204": 482, "19385": 482, "21207": 482, "21291": 482, "21127": 482, "str_": 482, "15002": 482, "_temporaryfilewrapp": 482, "_temporaryfileclos": 482, "12220": 482, "mindom": 482, "21068": 482, "21276": 482, "use_xattr": 482, "incas": 482, "20896": 482, "21239": 482, "21203": 482, "jure": 482, "koren": 482, "21222": 482, "21197": 482, "17498": 482, "17826": 482, "7776": 482, "21529": 482, "vranken": 482, "4616": 482, "21169": 482, "21171": 482, "20539": 482, "21172": 482, "21155": 482, "21136": 482, "20636": 482, "21149": 482, "21058": 482, "21200": 482, "21013": 482, "20145": 482, "20633": 482, "20980": 482, "20990": 482, "21015": 482, "21000": 482, "20884": 482, "21499": 482, "test_api": 482, "19165": 482, "20574": 482, "20879": 482, "19157": 482, "usuabl": 482, "11599": 482, "distutils_debug": 482, "4931": 482, "grok_environment_error": 482, "20875": 482, "11558": 482, "20283": 482, "20778": 482, "20791": 482, "otten": 482, "19748": 482, "outsiz": 482, "2037": 482, "19573": 482, "20378": 482, "20816": 482, "lowin": 482, "20817": 482, "6676": 482, "gutteridg": 482, "21117": 482, "gi_": 482, "163": 482, "21311": 482, "_osx_support": 482, "szakmeist": 482, "11571": 482, "21801": 482, "21923": 482, "_config_var": 482, "21323": 482, "19435": 482, "byrn": 482, "22733": 482, "ffi_prep_arg": 482, "23302": 482, "mss": 482, "20577": 482, "formatparagraph": 482, "3068": 482, "16233": 482, "4832": 482, "21986": 482, "17390": 482, "14105": 482, "21765": 482, "hyperpars": 482, "21940": 482, "widgetredirector": 482, "18592": 482, "searchdialogbas": 482, "webster": 482, "21694": 482, "21686": 482, "12387": 482, "21695": 482, "18910": 482, "18292": 482, "autoexpand": 482, "saihadhav": 482, "18409": 482, "21477": 482, "18104": 482, "21139": 482, "21284": 482, "17654": 482, "23180": 482, "15506": 482, "pkg_prog_pkg_config": 482, "22935": 482, "22592": 482, "22591": 482, "djgpp": 482, "16537": 482, "hosmer": 482, "21958": 482, "have_round": 482, "18093": 482, "15759": 482, "linkcheck": 482, "21141": 482, "build_ssl": 482, "21037": 482, "19962": 482, "21285": 482, "15234": 482, "17861": 482, "generate_opcode_h": 482, "20644": 482, "20022": 482, "15968": 482, "17095": 482, "21811": 482, "21166": 482, "18096": 482, "17219": 482, "22919": 482, "21236": 482, "_msi": 482, "14203": 482, "bytearray_getbuff": 482, "bytesiobuf_getbuff": 482, "array_buffer_getbuf": 482, "22445": 482, "npy_relaxed_strides_check": 482, "22079": 482, "_pyobject_gc_calloc": 482, "20942": 482, "init_frozen": 482, "19548": 482, "22394": 482, "21514": 482, "21777": 482, "6916": 482, "17386": 482, "21312": 482, "thread_foobar": 482, "mccracken": 482, "21043": 482, "20765": 482, "19407": 482, "19697": 482, "18982": 482, "22838": 482, "22173": 482, "16000": 482, "test_curs": 482, "21456": 482, "remi": 482, "pointel": 482, "20746": 482, "test_pdb": 482, "22060": 482, "22104": 482, "22111": 482, "22002": 482, "21976": 482, "21918": 482, "9554": 482, "coneybear": 482, "radu": 482, "voicila": 482, "20155": 482, "19493": 482, "18492": 482, "21634": 482, "21605": 482, "21493": 482, "19925": 482, "21522": 482, "itemconfigur": 482, "paneconfigur": 482, "entryconfigur": 482, "17756": 482, "test_cod": 482, "17752": 482, "18604": 482, "21275": 482, "21223": 482, "20635": 482, "20743": 482, "test_tcl": 482, "21097": 482, "test_namespace_pkg": 482, "21503": 482, "test_both": 482, "20939": 482, "20668": 482, "21093": 482, "test_macholib": 482, "libz": 482, "22770": 482, "23211": 482, "23345": 482, "8zc": 482, "22314": 482, "22615": 482, "makelocalealia": 482, "22201": 482, "22120": 482, "18974": 482, "21906": 482, "21629": 482, "16047": 482, "11824": 482, "20535": 482, "23260": 482, "17896": 482, "17717": 482, "nasm": 482, "21907": 482, "22644": 482, "10747": 482, "kilburn": 482, "cp35": 482}, "objects": {"": [[64, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [35, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [62, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [53, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [53, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [61, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [61, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [56, 4, 1, "c.PyCFunction", "PyCFunction"], [56, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [56, 4, 1, "c.PyCMethod", "PyCMethod"], [36, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [36, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [36, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Addr2Location", "PyCode_Addr2Location"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_GetCellvars", "PyCode_GetCellvars"], [13, 2, 1, "c.PyCode_GetCode", "PyCode_GetCode"], [13, 2, 1, "c.PyCode_GetFreevars", "PyCode_GetFreevars"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_GetVarnames", "PyCode_GetVarnames"], [13, 2, 1, "c.PyCode_New", "PyCode_New"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 2, 1, "c.PyCode_NewWithPosOnlyArgs", "PyCode_NewWithPosOnlyArgs"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [62, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [64, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [33, 4, 1, "c.PyConfig", "PyConfig"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_AddWatcher", "PyDict_AddWatcher"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_ClearWatcher", "PyDict_ClearWatcher"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Unwatch", "PyDict_Unwatch"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [22, 2, 1, "c.PyDict_Watch", "PyDict_Watch"], [22, 4, 1, "c.PyDict_WatchCallback", "PyDict_WatchCallback"], [22, 4, 1, "c.PyDict_WatchEvent", "PyDict_WatchEvent"], [34, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [34, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GetHandledException", "PyErr_GetHandledException"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetHandledException", "PyErr_SetHandledException"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [32, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [32, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [64, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [64, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [64, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [64, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [51, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [51, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [51, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [51, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [51, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [51, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [32, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [64, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [32, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [32, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [32, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [32, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [32, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [32, 2, 1, "c.PyEval_SetProfileAllThreads", "PyEval_SetProfileAllThreads"], [32, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [32, 2, 1, "c.PyEval_SetTraceAllThreads", "PyEval_SetTraceAllThreads"], [32, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 2, 1, "c.PyFloat_Pack2", "PyFloat_Pack2"], [25, 2, 1, "c.PyFloat_Pack4", "PyFloat_Pack4"], [25, 2, 1, "c.PyFloat_Pack8", "PyFloat_Pack8"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [25, 2, 1, "c.PyFloat_Unpack2", "PyFloat_Unpack2"], [25, 2, 1, "c.PyFloat_Unpack4", "PyFloat_Unpack4"], [25, 2, 1, "c.PyFloat_Unpack8", "PyFloat_Unpack8"], [26, 4, 1, "c.PyFrameObject", "PyFrameObject"], [26, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [26, 2, 1, "c.PyFrame_GetBuiltins", "PyFrame_GetBuiltins"], [26, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [26, 2, 1, "c.PyFrame_GetGenerator", "PyFrame_GetGenerator"], [26, 2, 1, "c.PyFrame_GetGlobals", "PyFrame_GetGlobals"], [26, 2, 1, "c.PyFrame_GetLasti", "PyFrame_GetLasti"], [26, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [26, 2, 1, "c.PyFrame_GetLocals", "PyFrame_GetLocals"], [53, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [53, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [53, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [53, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [27, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [27, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [27, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [27, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [27, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [27, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [27, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [27, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [27, 2, 1, "c.PyFunction_New", "PyFunction_New"], [27, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [27, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [27, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [27, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [27, 2, 1, "c.PyFunction_SetVectorcall", "PyFunction_SetVectorcall"], [27, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [28, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [28, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [28, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [28, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [32, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [32, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [32, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [32, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [29, 4, 1, "c.PyGenObject", "PyGenObject"], [29, 2, 1, "c.PyGen_Check", "PyGen_Check"], [29, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [29, 2, 1, "c.PyGen_New", "PyGen_New"], [29, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [29, 0, 1, "c.PyGen_Type", "PyGen_Type"], [56, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [30, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [30, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [30, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [30, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [30, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [30, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [30, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [30, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [30, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [30, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [30, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [30, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [30, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [30, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [30, 2, 1, "c.PyImport_Import", "PyImport_Import"], [30, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [30, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [30, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [30, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [30, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [30, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [30, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [30, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [46, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [69, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [43, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [43, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [43, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [43, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [43, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [32, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [32, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [32, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [32, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [32, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [32, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [32, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [32, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [32, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [32, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [32, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [35, 2, 1, "c.PyIter_Check", "PyIter_Check"], [35, 2, 1, "c.PyIter_Next", "PyIter_Next"], [35, 2, 1, "c.PyIter_Send", "PyIter_Send"], [37, 4, 1, "c.PyListObject", "PyListObject"], [37, 2, 1, "c.PyList_Append", "PyList_Append"], [37, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [37, 2, 1, "c.PyList_Check", "PyList_Check"], [37, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [37, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [37, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [37, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [37, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [37, 2, 1, "c.PyList_Insert", "PyList_Insert"], [37, 2, 1, "c.PyList_New", "PyList_New"], [37, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [37, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [37, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [37, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [37, 2, 1, "c.PyList_Size", "PyList_Size"], [37, 2, 1, "c.PyList_Sort", "PyList_Sort"], [37, 0, 1, "c.PyList_Type", "PyList_Type"], [38, 4, 1, "c.PyLongObject", "PyLongObject"], [38, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [38, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [38, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [38, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [38, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [38, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [38, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [38, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [38, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [38, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [38, 2, 1, "c.PyLong_Check", "PyLong_Check"], [38, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [38, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [38, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [38, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [38, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [38, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [38, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [38, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [38, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [38, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [38, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [38, 0, 1, "c.PyLong_Type", "PyLong_Type"], [61, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [39, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [39, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [39, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [39, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [39, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [39, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [39, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [39, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [39, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [39, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [39, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [39, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [40, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [40, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [40, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [41, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [41, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [41, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [41, 2, 1, "c.PyMem_Del", "PyMem_Del"], [41, 2, 1, "c.PyMem_Free", "PyMem_Free"], [41, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [41, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [41, 2, 1, "c.PyMem_New", "PyMem_New"], [41, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [41, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [41, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [41, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [41, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [41, 2, 1, "c.PyMem_Resize", "PyMem_Resize"], [41, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [41, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [56, 4, 1, "c.PyMemberDef", "PyMemberDef"], [56, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [56, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [42, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [42, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [42, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [42, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [42, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [42, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [42, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [56, 4, 1, "c.PyMethodDef", "PyMethodDef"], [43, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [43, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [43, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [43, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [43, 2, 1, "c.PyMethod_New", "PyMethod_New"], [43, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [43, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [44, 4, 1, "c.PyModuleDef", "PyModuleDef"], [44, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [44, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [44, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [44, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [44, 2, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [44, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [44, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [44, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [44, 2, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [44, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [44, 2, 1, "c.PyModule_Check", "PyModule_Check"], [44, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [44, 2, 1, "c.PyModule_Create", "PyModule_Create"], [44, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [44, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [44, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [44, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [44, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [44, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [44, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [44, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [44, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [44, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [44, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [44, 2, 1, "c.PyModule_New", "PyModule_New"], [44, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [44, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [44, 0, 1, "c.PyModule_Type", "PyModule_Type"], [61, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [46, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [46, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [46, 2, 1, "c.PyNumber_And", "PyNumber_And"], [46, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [46, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [46, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [46, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [46, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [46, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [46, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [46, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [46, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [46, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [46, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [46, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [46, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [46, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [46, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [46, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [46, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [46, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [46, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [46, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [46, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [46, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [46, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [46, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [46, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [46, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [46, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [46, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [46, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [46, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [46, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [46, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [57, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [57, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [57, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [57, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [57, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [57, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [64, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [64, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [57, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [57, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [56, 4, 1, "c.PyObject", "PyObject"], [41, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [48, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [47, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [47, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [47, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [48, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [41, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [47, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [7, 2, 1, "c.PyObject_CopyData", "PyObject_CopyData"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [48, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [48, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [48, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [48, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [41, 2, 1, "c.PyObject_Free", "PyObject_Free"], [28, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [28, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [28, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [28, 2, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [28, 2, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [28, 2, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [28, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [28, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [48, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [48, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [48, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [48, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [48, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [41, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [48, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [48, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [48, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [48, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [56, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [56, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [48, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [48, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [48, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [48, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [28, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [48, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [48, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [48, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [48, 2, 1, "c.PyObject_Length", "PyObject_Length"], [48, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [41, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 2, 1, "c.PyObject_New", "PyObject_New"], [3, 2, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [48, 2, 1, "c.PyObject_Not", "PyObject_Not"], [48, 2, 1, "c.PyObject_Print", "PyObject_Print"], [41, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [48, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [48, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [48, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [41, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [48, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [48, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [48, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [48, 2, 1, "c.PyObject_Size", "PyObject_Size"], [48, 2, 1, "c.PyObject_Str", "PyObject_Str"], [48, 2, 1, "c.PyObject_Type", "PyObject_Type"], [48, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [56, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [33, 4, 1, "c.PyPreConfig", "PyPreConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [64, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [64, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [64, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [64, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [64, 2, 1, "c.PyRun_File", "PyRun_File"], [64, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [64, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [64, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [64, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [64, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [64, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [64, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [64, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [64, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [64, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [64, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [64, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [64, 2, 1, "c.PyRun_String", "PyRun_String"], [64, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [35, 4, 1, "c.PySendResult", "PySendResult"], [36, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [36, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [36, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [61, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [52, 2, 1, "c.PySequence_Check", "PySequence_Check"], [52, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [52, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [52, 2, 1, "c.PySequence_Count", "PySequence_Count"], [52, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [52, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [52, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [52, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [52, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [52, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [52, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [52, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [52, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [52, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [52, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [52, 2, 1, "c.PySequence_Index", "PySequence_Index"], [52, 2, 1, "c.PySequence_Length", "PySequence_Length"], [52, 2, 1, "c.PySequence_List", "PySequence_List"], [52, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [52, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [52, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [52, 2, 1, "c.PySequence_Size", "PySequence_Size"], [52, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [53, 4, 1, "c.PySetObject", "PySetObject"], [53, 2, 1, "c.PySet_Add", "PySet_Add"], [53, 2, 1, "c.PySet_Check", "PySet_Check"], [53, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [53, 2, 1, "c.PySet_Clear", "PySet_Clear"], [53, 2, 1, "c.PySet_Contains", "PySet_Contains"], [53, 2, 1, "c.PySet_Discard", "PySet_Discard"], [53, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [53, 2, 1, "c.PySet_New", "PySet_New"], [53, 2, 1, "c.PySet_Pop", "PySet_Pop"], [53, 2, 1, "c.PySet_Size", "PySet_Size"], [53, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [54, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [54, 2, 1, "c.PySlice_Check", "PySlice_Check"], [54, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [54, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [54, 2, 1, "c.PySlice_New", "PySlice_New"], [54, 0, 1, "c.PySlice_Type", "PySlice_Type"], [54, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [44, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [44, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [44, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [33, 4, 1, "c.PyStatus", "PyStatus"], [58, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [58, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [58, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [58, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [58, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [58, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [58, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [58, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [58, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [58, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [58, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [57, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [57, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [57, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [57, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [57, 2, 1, "c.PySys_Audit", "PySys_Audit"], [57, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [57, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [57, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [57, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [57, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [32, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [32, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [57, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [57, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [57, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [57, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [32, 4, 1, "c.PyThreadState", "PyThreadState"], [32, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [32, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [32, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [32, 2, 1, "c.PyThreadState_EnterTracing", "PyThreadState_EnterTracing"], [32, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [32, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [32, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [32, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [32, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [32, 2, 1, "c.PyThreadState_LeaveTracing", "PyThreadState_LeaveTracing"], [32, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [32, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [32, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [32, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [32, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [32, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [32, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [32, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [32, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [32, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [32, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [32, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [32, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [32, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [32, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [32, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [32, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [41, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [41, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [32, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [32, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [32, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [32, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [32, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [32, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [32, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [32, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [58, 4, 1, "c.PyTupleObject", "PyTupleObject"], [58, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [58, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [58, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [58, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [58, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [58, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [58, 2, 1, "c.PyTuple_New", "PyTuple_New"], [58, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [58, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [58, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [58, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [58, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [59, 4, 1, "c.PyTypeObject", "PyTypeObject"], [59, 2, 1, "c.PyType_AddWatcher", "PyType_AddWatcher"], [59, 2, 1, "c.PyType_Check", "PyType_Check"], [59, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [59, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [59, 2, 1, "c.PyType_ClearWatcher", "PyType_ClearWatcher"], [59, 2, 1, "c.PyType_FromMetaclass", "PyType_FromMetaclass"], [59, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [59, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [59, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [59, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [59, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [59, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [59, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [59, 2, 1, "c.PyType_GetModuleByDef", "PyType_GetModuleByDef"], [59, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [59, 2, 1, "c.PyType_GetName", "PyType_GetName"], [59, 2, 1, "c.PyType_GetQualName", "PyType_GetQualName"], [59, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [59, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [59, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [59, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [59, 2, 1, "c.PyType_Modified", "PyType_Modified"], [59, 2, 1, "c.PyType_Ready", "PyType_Ready"], [59, 4, 1, "c.PyType_Slot", "PyType_Slot"], [59, 4, 1, "c.PyType_Spec", "PyType_Spec"], [59, 0, 1, "c.PyType_Type", "PyType_Type"], [59, 2, 1, "c.PyType_Watch", "PyType_Watch"], [59, 4, 1, "c.PyType_WatchCallback", "PyType_WatchCallback"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [62, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [62, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [62, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [62, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [62, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [62, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [62, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [62, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [62, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [62, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [62, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [62, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [62, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [62, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [62, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [62, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [62, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [62, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [62, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [62, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [62, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [62, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [62, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [62, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [62, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [62, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [62, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [62, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [62, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [62, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [62, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [62, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [62, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [62, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [62, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [62, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [62, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [62, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [62, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [62, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [62, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [62, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [62, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [62, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [62, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [62, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [62, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [62, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [62, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [62, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [62, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [62, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [62, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [62, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [62, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [62, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [62, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [62, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [62, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [62, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [62, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [62, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [62, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [62, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [62, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [62, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [62, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [62, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [62, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [62, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [62, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [62, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [62, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [62, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [62, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [62, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [62, 2, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [62, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [62, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [62, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [62, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [62, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [62, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [62, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [62, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [62, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [62, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [62, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [62, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [62, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [62, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [62, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [56, 4, 1, "c.PyVarObject", "PyVarObject"], [56, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [65, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [65, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [65, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [65, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [65, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [65, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [65, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [33, 4, 1, "c.PyWideStringList", "PyWideStringList"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [34, 1, 1, "c.Py_ABS", "Py_ABS"], [34, 1, 1, "c.Py_ALWAYS_INLINE", "Py_ALWAYS_INLINE"], [32, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [57, 2, 1, "c.Py_AtExit", "Py_AtExit"], [32, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [32, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [64, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [32, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [34, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [50, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [64, 2, 1, "c.Py_CompileString", "Py_CompileString"], [64, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [64, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [64, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [50, 2, 1, "c.Py_DECREF", "Py_DECREF"], [34, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [32, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [50, 2, 1, "c.Py_DecRef", "Py_DecRef"], [57, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [32, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [32, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [54, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [57, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [32, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [57, 2, 1, "c.Py_Exit", "Py_Exit"], [6, 0, 1, "c.Py_False", "Py_False"], [57, 2, 1, "c.Py_FatalError", "Py_FatalError"], [57, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [32, 2, 1, "c.Py_Finalize", "Py_Finalize"], [32, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [32, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [34, 1, 1, "c.Py_GETENV", "Py_GETENV"], [60, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [60, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [33, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [32, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [32, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [32, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [32, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [32, 2, 1, "c.Py_GetPath", "Py_GetPath"], [32, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [32, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [32, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [32, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [32, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [32, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [32, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [50, 2, 1, "c.Py_INCREF", "Py_INCREF"], [56, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [32, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [50, 2, 1, "c.Py_IncRef", "Py_IncRef"], [32, 2, 1, "c.Py_Initialize", "Py_Initialize"], [32, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [33, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [32, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [32, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [56, 2, 1, "c.Py_Is", "Py_Is"], [56, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [32, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [56, 2, 1, "c.Py_IsNone", "Py_IsNone"], [56, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [32, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [55, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [32, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [32, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [34, 1, 1, "c.Py_MAX", "Py_MAX"], [34, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [34, 1, 1, "c.Py_MIN", "Py_MIN"], [64, 2, 1, "c.Py_Main", "Py_Main"], [34, 1, 1, "c.Py_NO_INLINE", "Py_NO_INLINE"], [32, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [50, 2, 1, "c.Py_NewRef", "Py_NewRef"], [32, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [32, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [45, 0, 1, "c.Py_None", "Py_None"], [48, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [32, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [33, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [33, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [33, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [32, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [50, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [45, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [48, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [33, 2, 1, "c.Py_RunMain", "Py_RunMain"], [50, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [56, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [56, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [56, 2, 1, "c.Py_SIZE", "Py_SIZE"], [34, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [32, 2, 1, "c.Py_SetPath", "Py_SetPath"], [32, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [32, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [32, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [56, 2, 1, "c.Py_TYPE", "Py_TYPE"], [6, 0, 1, "c.Py_True", "Py_True"], [62, 4, 1, "c.Py_UCS1", "Py_UCS1"], [62, 4, 1, "c.Py_UCS2", "Py_UCS2"], [62, 4, 1, "c.Py_UCS4", "Py_UCS4"], [32, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [62, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [62, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [62, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [62, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [62, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [62, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [62, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [62, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [62, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [62, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [62, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [62, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [62, 2, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [62, 2, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [62, 2, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [62, 2, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [62, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [62, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [62, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [62, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [62, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [62, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [34, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [34, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [32, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [28, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [32, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [4, 0, 1, "c.Py_Version", "Py_Version"], [50, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [50, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [50, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [64, 0, 1, "c.Py_eval_input", "Py_eval_input"], [64, 0, 1, "c.Py_file_input", "Py_file_input"], [44, 1, 1, "c.Py_mod_create", "Py_mod_create"], [44, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [64, 0, 1, "c.Py_single_input", "Py_single_input"], [34, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [32, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [32, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [32, 4, 1, "c.Py_tss_t", "Py_tss_t"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [56, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [56, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [32, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [32, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [32, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [48, 2, 1, "c._PyObject_GetDictPtr", "_PyObject_GetDictPtr"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [58, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [33, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [30, 5, 1, "c._frozen", "_frozen"], [30, 5, 1, "c._inittab", "_inittab"], [61, 4, 1, "c.allocfunc", "allocfunc"], [61, 4, 1, "c.binaryfunc", "binaryfunc"], [61, 4, 1, "c.descrgetfunc", "descrgetfunc"], [61, 4, 1, "c.descrsetfunc", "descrsetfunc"], [61, 4, 1, "c.destructor", "destructor"], [61, 4, 1, "c.freefunc", "freefunc"], [61, 4, 1, "c.getattrfunc", "getattrfunc"], [61, 4, 1, "c.getattrofunc", "getattrofunc"], [61, 4, 1, "c.getbufferproc", "getbufferproc"], [61, 4, 1, "c.getiterfunc", "getiterfunc"], [61, 4, 1, "c.hashfunc", "hashfunc"], [61, 4, 1, "c.initproc", "initproc"], [28, 4, 1, "c.inquiry", "inquiry"], [61, 4, 1, "c.iternextfunc", "iternextfunc"], [61, 4, 1, "c.lenfunc", "lenfunc"], [61, 4, 1, "c.newfunc", "newfunc"], [61, 4, 1, "c.objobjargproc", "objobjargproc"], [61, 4, 1, "c.objobjproc", "objobjproc"], [61, 4, 1, "c.releasebufferproc", "releasebufferproc"], [61, 4, 1, "c.reprfunc", "reprfunc"], [61, 4, 1, "c.richcmpfunc", "richcmpfunc"], [61, 4, 1, "c.sendfunc", "sendfunc"], [61, 4, 1, "c.setattrfunc", "setattrfunc"], [61, 4, 1, "c.setattrofunc", "setattrofunc"], [61, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [61, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [61, 4, 1, "c.ternaryfunc", "ternaryfunc"], [28, 4, 1, "c.traverseproc", "traverseproc"], [61, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [28, 4, 1, "c.visitproc", "visitproc"], [212, 6, 1, "", "ArithmeticError"], [212, 6, 1, "", "AssertionError"], [212, 6, 1, "", "AttributeError"], [212, 6, 1, "", "BaseException"], [212, 6, 1, "", "BaseExceptionGroup"], [212, 6, 1, "", "BlockingIOError"], [212, 6, 1, "", "BrokenPipeError"], [212, 6, 1, "", "BufferError"], [212, 6, 1, "", "BytesWarning"], [212, 6, 1, "", "ChildProcessError"], [212, 6, 1, "", "ConnectionAbortedError"], [212, 6, 1, "", "ConnectionError"], [212, 6, 1, "", "ConnectionRefusedError"], [212, 6, 1, "", "ConnectionResetError"], [212, 6, 1, "", "DeprecationWarning"], [212, 6, 1, "", "EOFError"], [167, 9, 1, "", "Ellipsis"], [212, 6, 1, "", "EncodingWarning"], [212, 6, 1, "", "EnvironmentError"], [212, 6, 1, "", "Exception"], [212, 6, 1, "", "ExceptionGroup"], [167, 9, 1, "", "False"], [212, 6, 1, "", "FileExistsError"], [212, 6, 1, "", "FileNotFoundError"], [212, 6, 1, "", "FloatingPointError"], [212, 6, 1, "", "FutureWarning"], [212, 6, 1, "", "GeneratorExit"], [212, 6, 1, "", "IOError"], [212, 6, 1, "", "ImportError"], [212, 6, 1, "", "ImportWarning"], [212, 6, 1, "", "IndentationError"], [212, 6, 1, "", "IndexError"], [212, 6, 1, "", "InterruptedError"], [212, 6, 1, "", "IsADirectoryError"], [212, 6, 1, "", "KeyError"], [212, 6, 1, "", "KeyboardInterrupt"], [212, 6, 1, "", "LookupError"], [56, 9, 1, "", "METH_CLASS"], [56, 9, 1, "", "METH_COEXIST"], [56, 9, 1, "", "METH_FASTCALL"], [56, 9, 1, "", "METH_NOARGS"], [56, 9, 1, "", "METH_O"], [56, 9, 1, "", "METH_STATIC"], [56, 9, 1, "", "METH_VARARGS"], [212, 6, 1, "", "MemoryError"], [212, 6, 1, "", "ModuleNotFoundError"], [212, 6, 1, "", "NameError"], [167, 9, 1, "", "None"], [212, 6, 1, "", "NotADirectoryError"], [167, 9, 1, "", "NotImplemented"], [212, 6, 1, "", "NotImplementedError"], [212, 6, 1, "", "OSError"], [212, 6, 1, "", "OverflowError"], [212, 6, 1, "", "PendingDeprecationWarning"], [212, 6, 1, "", "PermissionError"], [212, 6, 1, "", "ProcessLookupError"], [61, 9, 1, "", "Py_TPFLAGS_BASETYPE"], [61, 9, 1, "", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_BYTES_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_DEFAULT"], [61, 9, 1, "", "Py_TPFLAGS_DICT_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [61, 9, 1, "", "Py_TPFLAGS_HAVE_FINALIZE"], [61, 9, 1, "", "Py_TPFLAGS_HAVE_GC"], [61, 9, 1, "", "Py_TPFLAGS_HAVE_VECTORCALL"], [61, 9, 1, "", "Py_TPFLAGS_HEAPTYPE"], [61, 9, 1, "", "Py_TPFLAGS_IMMUTABLETYPE"], [61, 9, 1, "", "Py_TPFLAGS_LIST_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_LONG_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_MANAGED_DICT"], [61, 9, 1, "", "Py_TPFLAGS_MANAGED_WEAKREF"], [61, 9, 1, "", "Py_TPFLAGS_MAPPING"], [61, 9, 1, "", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [61, 9, 1, "", "Py_TPFLAGS_READY"], [61, 9, 1, "", "Py_TPFLAGS_READYING"], [61, 9, 1, "", "Py_TPFLAGS_SEQUENCE"], [61, 9, 1, "", "Py_TPFLAGS_TUPLE_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_TYPE_SUBCLASS"], [61, 9, 1, "", "Py_TPFLAGS_UNICODE_SUBCLASS"], [212, 6, 1, "", "RecursionError"], [212, 6, 1, "", "ReferenceError"], [212, 6, 1, "", "ResourceWarning"], [212, 6, 1, "", "RuntimeError"], [212, 6, 1, "", "RuntimeWarning"], [212, 6, 1, "", "StopAsyncIteration"], [212, 6, 1, "", "StopIteration"], [212, 6, 1, "", "SyntaxError"], [212, 6, 1, "", "SyntaxWarning"], [212, 6, 1, "", "SystemError"], [212, 6, 1, "", "SystemExit"], [212, 6, 1, "", "TabError"], [212, 6, 1, "", "TimeoutError"], [167, 9, 1, "", "True"], [212, 6, 1, "", "TypeError"], [212, 6, 1, "", "UnboundLocalError"], [212, 6, 1, "", "UnicodeDecodeError"], [212, 6, 1, "", "UnicodeEncodeError"], [212, 6, 1, "", "UnicodeError"], [212, 6, 1, "", "UnicodeTranslateError"], [212, 6, 1, "", "UnicodeWarning"], [212, 6, 1, "", "UserWarning"], [212, 6, 1, "", "ValueError"], [212, 6, 1, "", "Warning"], [212, 6, 1, "", "WindowsError"], [212, 6, 1, "", "ZeroDivisionError"], [431, 7, 1, "cached__", "__cached__"], [167, 9, 1, "debug__", "__debug__"], [431, 7, 1, "file__", "__file__"], [111, 10, 0, "-", "__future__"], [224, 11, 1, "import__", "__import__"], [431, 7, 1, "loader__", "__loader__"], [112, 10, 0, "-", "__main__"], [431, 7, 1, "name__", "__name__"], [431, 7, 1, "package__", "__package__"], [431, 7, 1, "path__", "__path__"], [431, 7, 1, "spec__", "__spec__"], [113, 10, 0, "-", "_thread"], [114, 10, 0, "-", "abc"], [224, 11, 1, "", "abs"], [115, 10, 0, "-", "aifc"], [224, 11, 1, "", "aiter"], [224, 11, 1, "", "all"], [224, 11, 1, "", "anext"], [224, 11, 1, "", "any"], [118, 10, 0, "-", "argparse"], [119, 10, 0, "-", "array"], [224, 11, 1, "", "ascii"], [120, 10, 0, "-", "ast"], [121, 10, 0, "-", "asynchat"], [122, 10, 0, "-", "asyncio"], [139, 10, 0, "-", "asyncore"], [140, 10, 0, "-", "atexit"], [141, 10, 0, "-", "audioop"], [143, 10, 0, "-", "base64"], [144, 10, 0, "-", "bdb"], [224, 11, 1, "", "bin"], [146, 10, 0, "-", "binascii"], [147, 10, 0, "-", "bisect"], [224, 12, 1, "", "bool"], [224, 11, 1, "", "breakpoint"], [148, 10, 0, "-", "builtins"], [344, 12, 1, "", "bytearray"], [344, 12, 1, "", "bytes"], [149, 10, 0, "-", "bz2"], [308, 10, 0, "-", "cProfile"], [150, 10, 0, "-", "calendar"], [224, 11, 1, "", "callable"], [151, 10, 0, "-", "cgi"], [152, 10, 0, "-", "cgitb"], [224, 11, 1, "", "chr"], [153, 10, 0, "-", "chunk"], [224, 11, 1, "", "classmethod"], [154, 10, 0, "-", "cmath"], [155, 10, 0, "-", "cmd"], [156, 10, 0, "-", "code"], [157, 10, 0, "-", "codecs"], [158, 10, 0, "-", "codeop"], [159, 10, 0, "-", "collections"], [161, 10, 0, "-", "colorsys"], [224, 11, 1, "", "compile"], [162, 10, 0, "-", "compileall"], [224, 12, 1, "", "complex"], [166, 10, 0, "-", "configparser"], [168, 10, 0, "-", "contextlib"], [169, 10, 0, "-", "contextvars"], [170, 10, 0, "-", "copy"], [171, 10, 0, "-", "copyreg"], [167, 9, 1, "", "copyright"], [167, 9, 1, "", "credits"], [172, 10, 0, "-", "crypt"], [174, 10, 0, "-", "csv"], [175, 10, 0, "-", "ctypes"], [176, 10, 0, "-", "curses"], [180, 10, 0, "-", "dataclasses"], [182, 10, 0, "-", "datetime"], [183, 10, 0, "-", "dbm"], [185, 10, 0, "-", "decimal"], [224, 11, 1, "", "delattr"], [344, 12, 1, "", "dict"], [189, 10, 0, "-", "difflib"], [224, 11, 1, "", "dir"], [190, 10, 0, "-", "dis"], [224, 11, 1, "", "divmod"], [192, 10, 0, "-", "doctest"], [193, 10, 0, "-", "email"], [209, 10, 0, "-", "ensurepip"], [210, 10, 0, "-", "enum"], [224, 11, 1, "", "enumerate"], [211, 10, 0, "-", "errno"], [224, 11, 1, "", "eval"], [224, 11, 1, "", "exec"], [167, 9, 1, "", "exit"], [213, 10, 0, "-", "faulthandler"], [214, 10, 0, "-", "fcntl"], [215, 10, 0, "-", "filecmp"], [217, 10, 0, "-", "fileinput"], [224, 11, 1, "", "filter"], [224, 12, 1, "", "float"], [219, 10, 0, "-", "fnmatch"], [224, 11, 1, "", "format"], [220, 10, 0, "-", "fractions"], [344, 12, 1, "", "frozenset"], [222, 10, 0, "-", "ftplib"], [225, 10, 0, "-", "functools"], [226, 10, 0, "-", "gc"], [224, 11, 1, "", "getattr"], [227, 10, 0, "-", "getopt"], [228, 10, 0, "-", "getpass"], [229, 10, 0, "-", "gettext"], [230, 10, 0, "-", "glob"], [224, 11, 1, "", "globals"], [231, 10, 0, "-", "graphlib"], [232, 10, 0, "-", "grp"], [233, 10, 0, "-", "gzip"], [224, 11, 1, "", "hasattr"], [224, 11, 1, "", "hash"], [234, 10, 0, "-", "hashlib"], [235, 10, 0, "-", "heapq"], [224, 11, 1, "", "help"], [224, 11, 1, "", "hex"], [236, 10, 0, "-", "hmac"], [237, 10, 0, "-", "html"], [240, 10, 0, "-", "http"], [224, 11, 1, "", "id"], [246, 10, 0, "-", "idlelib"], [247, 10, 0, "-", "imaplib"], [248, 10, 0, "-", "imghdr"], [249, 10, 0, "-", "imp"], [250, 10, 0, "-", "importlib"], [224, 11, 1, "", "input"], [255, 10, 0, "-", "inspect"], [224, 12, 1, "", "int"], [258, 10, 0, "-", "io"], [259, 10, 0, "-", "ipaddress"], [224, 11, 1, "", "isinstance"], [224, 11, 1, "", "issubclass"], [224, 11, 1, "", "iter"], [261, 10, 0, "-", "itertools"], [262, 10, 0, "-", "json"], [263, 10, 0, "-", "keyword"], [224, 11, 1, "", "len"], [110, 10, 0, "-", "lib2to3"], [167, 9, 1, "", "license"], [265, 10, 0, "-", "linecache"], [344, 12, 1, "", "list"], [266, 10, 0, "-", "locale"], [224, 11, 1, "", "locals"], [267, 10, 0, "-", "logging"], [270, 10, 0, "-", "lzma"], [271, 10, 0, "-", "mailbox"], [272, 10, 0, "-", "mailcap"], [224, 11, 1, "", "map"], [274, 10, 0, "-", "marshal"], [275, 10, 0, "-", "math"], [224, 11, 1, "", "max"], [344, 12, 1, "", "memoryview"], [276, 10, 0, "-", "mimetypes"], [224, 11, 1, "", "min"], [278, 10, 0, "-", "mmap"], [279, 10, 0, "-", "modulefinder"], [281, 10, 0, "-", "msilib"], [282, 10, 0, "-", "msvcrt"], [283, 10, 0, "-", "multiprocessing"], [286, 10, 0, "-", "netrc"], [224, 11, 1, "", "next"], [287, 10, 0, "-", "nis"], [288, 10, 0, "-", "nntplib"], [289, 10, 0, "-", "numbers"], [224, 12, 1, "", "object"], [224, 11, 1, "", "oct"], [224, 11, 1, "", "open"], [291, 10, 0, "-", "operator"], [292, 10, 0, "-", "optparse"], [224, 11, 1, "", "ord"], [293, 10, 0, "-", "os"], [295, 10, 0, "-", "ossaudiodev"], [296, 10, 0, "-", "pathlib"], [297, 10, 0, "-", "pdb"], [299, 10, 0, "-", "pickle"], [300, 10, 0, "-", "pickletools"], [301, 10, 0, "-", "pipes"], [302, 10, 0, "-", "pkgutil"], [303, 10, 0, "-", "platform"], [304, 10, 0, "-", "plistlib"], [305, 10, 0, "-", "poplib"], [306, 10, 0, "-", "posix"], [224, 11, 1, "", "pow"], [307, 10, 0, "-", "pprint"], [224, 11, 1, "", "print"], [308, 10, 0, "-", "profile"], [224, 12, 1, "", "property"], [308, 10, 0, "-", "pstats"], [309, 10, 0, "-", "pty"], [310, 10, 0, "-", "pwd"], [311, 10, 0, "-", "py_compile"], [312, 10, 0, "-", "pyclbr"], [313, 10, 0, "-", "pydoc"], [316, 10, 0, "-", "queue"], [167, 9, 1, "", "quit"], [317, 10, 0, "-", "quopri"], [318, 10, 0, "-", "random"], [344, 12, 1, "", "range"], [319, 10, 0, "-", "re"], [320, 10, 0, "-", "readline"], [224, 11, 1, "", "repr"], [321, 10, 0, "-", "reprlib"], [322, 10, 0, "-", "resource"], [224, 11, 1, "", "reversed"], [323, 10, 0, "-", "rlcompleter"], [224, 11, 1, "", "round"], [324, 10, 0, "-", "runpy"], [325, 10, 0, "-", "sched"], [326, 10, 0, "-", "secrets"], [328, 10, 0, "-", "select"], [329, 10, 0, "-", "selectors"], [344, 12, 1, "", "set"], [224, 11, 1, "", "setattr"], [330, 10, 0, "-", "shelve"], [331, 10, 0, "-", "shlex"], [332, 10, 0, "-", "shutil"], [333, 10, 0, "-", "signal"], [334, 10, 0, "-", "site"], [224, 12, 1, "", "slice"], [335, 10, 0, "-", "smtplib"], [336, 10, 0, "-", "sndhdr"], [337, 10, 0, "-", "socket"], [338, 10, 0, "-", "socketserver"], [224, 11, 1, "", "sorted"], [339, 10, 0, "-", "spwd"], [340, 10, 0, "-", "sqlite3"], [341, 10, 0, "-", "ssl"], [342, 10, 0, "-", "stat"], [224, 11, 1, "", "staticmethod"], [343, 10, 0, "-", "statistics"], [344, 12, 1, "", "str"], [345, 10, 0, "-", "string"], [346, 10, 0, "-", "stringprep"], [347, 10, 0, "-", "struct"], [348, 10, 0, "-", "subprocess"], [224, 11, 1, "", "sum"], [349, 10, 0, "-", "sunau"], [224, 12, 1, "", "super"], [351, 10, 0, "-", "symtable"], [352, 10, 0, "-", "sys"], [354, 10, 0, "-", "sysconfig"], [355, 10, 0, "-", "syslog"], [356, 10, 0, "-", "tabnanny"], [357, 10, 0, "-", "tarfile"], [358, 10, 0, "-", "telnetlib"], [359, 10, 0, "-", "tempfile"], [360, 10, 0, "-", "termios"], [361, 10, 0, "-", "test"], [363, 10, 0, "-", "textwrap"], [364, 10, 0, "-", "threading"], [365, 10, 0, "-", "time"], [366, 10, 0, "-", "timeit"], [368, 10, 0, "-", "tkinter"], [376, 10, 0, "-", "token"], [377, 10, 0, "-", "tokenize"], [378, 10, 0, "-", "tomllib"], [379, 10, 0, "-", "trace"], [380, 10, 0, "-", "traceback"], [381, 10, 0, "-", "tracemalloc"], [382, 10, 0, "-", "tty"], [344, 12, 1, "", "tuple"], [383, 10, 0, "-", "turtle"], [383, 10, 0, "-", "turtledemo"], [224, 12, 1, "", "type"], [384, 10, 0, "-", "types"], [385, 10, 0, "-", "typing"], [386, 10, 0, "-", "unicodedata"], [387, 10, 0, "-", "unittest"], [391, 10, 0, "-", "urllib"], [396, 10, 0, "-", "uu"], [397, 10, 0, "-", "uuid"], [224, 11, 1, "", "vars"], [398, 10, 0, "-", "venv"], [399, 10, 0, "-", "warnings"], [400, 10, 0, "-", "wave"], [401, 10, 0, "-", "weakref"], [402, 10, 0, "-", "webbrowser"], [404, 10, 0, "-", "winreg"], [405, 10, 0, "-", "winsound"], [406, 10, 0, "-", "wsgiref"], [407, 10, 0, "-", "xdrlib"], [408, 10, 0, "-", "xml"], [224, 11, 1, "", "zip"], [420, 10, 0, "-", "zipapp"], [421, 10, 0, "-", "zipfile"], [422, 10, 0, "-", "zipimport"], [423, 10, 0, "-", "zlib"], [424, 10, 0, "-", "zoneinfo"], [297, 13, 1, "pdbcommand-0", "!"], [455, 14, 1, "cmdoption-build", "--build"], [454, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [455, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [455, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [455, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [455, 14, 1, "cmdoption-enable-bolt", "--enable-bolt"], [455, 14, 1, "cmdoption-enable-framework", "--enable-framework"], [455, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [455, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [455, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [455, 14, 1, "cmdoption-enable-pystats", "--enable-pystats"], [455, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [455, 14, 1, "cmdoption-enable-universalsdk", "--enable-universalsdk"], [455, 14, 1, "cmdoption-enable-wasm-dynamic-linking", "--enable-wasm-dynamic-linking"], [455, 14, 1, "cmdoption-enable-wasm-pthreads", "--enable-wasm-pthreads"], [454, 14, 1, "cmdoption-help", "--help"], [454, 14, 1, "cmdoption-help-all", "--help-all"], [454, 14, 1, "cmdoption-help-env", "--help-env"], [454, 14, 1, "cmdoption-help-xoptions", "--help-xoptions"], [455, 14, 1, "cmdoption-host", "--host"], [454, 14, 1, "cmdoption-version", "--version"], [455, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [455, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [455, 14, 1, "cmdoption-with-build-python", "--with-build-python"], [455, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [455, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [455, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [455, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [455, 14, 1, "cmdoption-with-emscripten-target", "--with-emscripten-target"], [455, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [455, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [455, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [455, 14, 1, "cmdoption-with-libc", "--with-libc"], [455, 14, 1, "cmdoption-with-libm", "--with-libm"], [455, 14, 1, "cmdoption-with-libs", "--with-libs"], [455, 14, 1, "cmdoption-with-lto", "--with-lto"], [455, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [455, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [455, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [455, 14, 1, "cmdoption-with-pkg-config", "--with-pkg-config"], [455, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [455, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [455, 14, 1, "cmdoption-with-readline", "--with-readline"], [455, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [455, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [455, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [455, 14, 1, "cmdoption-with-system-ffi", "--with-system-ffi"], [455, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [455, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [455, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [455, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [455, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [455, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [455, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [455, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [455, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [455, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [455, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [455, 14, 1, "cmdoption-without-readline", "--without-readline"], [455, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [454, 14, 1, "cmdoption-0", "-?"], [454, 14, 1, "cmdoption-B", "-B"], [454, 14, 1, "cmdoption-E", "-E"], [454, 14, 1, "cmdoption-I", "-I"], [454, 14, 1, "cmdoption-J", "-J"], [454, 14, 1, "cmdoption-O", "-O"], [454, 14, 1, "cmdoption-OO", "-OO"], [454, 14, 1, "cmdoption-P", "-P"], [454, 14, 1, "cmdoption-R", "-R"], [454, 14, 1, "cmdoption-S", "-S"], [454, 14, 1, "cmdoption-V", "-V"], [454, 14, 1, "cmdoption-W", "-W"], [454, 14, 1, "cmdoption-X", "-X"], [454, 14, 1, "cmdoption-b", "-b"], [454, 14, 1, "cmdoption-c", "-c"], [454, 14, 1, "cmdoption-d", "-d"], [454, 14, 1, "cmdoption-h", "-h"], [454, 14, 1, "cmdoption-i", "-i"], [454, 14, 1, "cmdoption-m", "-m"], [454, 14, 1, "cmdoption-q", "-q"], [454, 14, 1, "cmdoption-s", "-s"], [454, 14, 1, "cmdoption-u", "-u"], [454, 14, 1, "cmdoption-1", "-v"], [454, 14, 1, "cmdoption-x", "-x"], [190, 15, 1, "-", "ASYNC_GEN_WRAP"], [455, 16, 1, "-", "BASECFLAGS"], [455, 16, 1, "-", "BASECPPFLAGS"], [190, 15, 1, "-", "BEFORE_ASYNC_WITH"], [190, 15, 1, "-", "BEFORE_WITH"], [190, 15, 1, "-", "BINARY_OP"], [190, 15, 1, "-", "BINARY_SLICE"], [190, 15, 1, "-", "BINARY_SUBSCR"], [455, 16, 1, "-", "BLDSHARED"], [190, 15, 1, "-", "BUILD_CONST_KEY_MAP"], [190, 15, 1, "-", "BUILD_LIST"], [190, 15, 1, "-", "BUILD_MAP"], [190, 15, 1, "-", "BUILD_SET"], [190, 15, 1, "-", "BUILD_SLICE"], [190, 15, 1, "-", "BUILD_STRING"], [190, 15, 1, "-", "BUILD_TUPLE"], [190, 15, 1, "-", "CACHE"], [190, 15, 1, "-", "CALL"], [190, 15, 1, "-", "CALL_FUNCTION_EX"], [455, 16, 1, "-", "CC"], [455, 16, 1, "-", "CCSHARED"], [455, 16, 1, "-", "CFLAGS"], [455, 16, 1, "-", "CFLAGSFORSHARED"], [455, 16, 1, "-", "CFLAGS_ALIASING"], [455, 16, 1, "-", "CFLAGS_NODIST"], [190, 15, 1, "-", "CHECK_EG_MATCH"], [190, 15, 1, "-", "CHECK_EXC_MATCH"], [190, 15, 1, "-", "CLEANUP_THROW"], [190, 15, 1, "-", "COMPARE_OP"], [455, 16, 1, "-", "CONFIGURE_CFLAGS"], [455, 16, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [455, 16, 1, "-", "CONFIGURE_CPPFLAGS"], [455, 16, 1, "-", "CONFIGURE_LDFLAGS"], [455, 16, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [455, 14, 1, "cmdoption-arg-CONFIG_SITE", "CONFIG_SITE"], [190, 15, 1, "-", "CONTAINS_OP"], [190, 15, 1, "-", "COPY"], [190, 15, 1, "-", "COPY_FREE_VARS"], [455, 16, 1, "-", "CPPFLAGS"], [455, 16, 1, "-", "CXX"], [190, 15, 1, "-", "DELETE_ATTR"], [190, 15, 1, "-", "DELETE_DEREF"], [190, 15, 1, "-", "DELETE_FAST"], [190, 15, 1, "-", "DELETE_GLOBAL"], [190, 15, 1, "-", "DELETE_NAME"], [190, 15, 1, "-", "DELETE_SUBSCR"], [190, 15, 1, "-", "DICT_MERGE"], [190, 15, 1, "-", "DICT_UPDATE"], [190, 15, 1, "-", "END_ASYNC_FOR"], [190, 15, 1, "-", "EXTENDED_ARG"], [455, 16, 1, "-", "EXTRA_CFLAGS"], [190, 15, 1, "-", "FORMAT_VALUE"], [190, 15, 1, "-", "FOR_ITER"], [190, 15, 1, "-", "GET_AITER"], [190, 15, 1, "-", "GET_ANEXT"], [190, 15, 1, "-", "GET_AWAITABLE"], [190, 15, 1, "-", "GET_ITER"], [190, 15, 1, "-", "GET_LEN"], [190, 15, 1, "-", "GET_YIELD_FROM_ITER"], [190, 15, 1, "-", "HAVE_ARGUMENT"], [190, 15, 1, "-", "IMPORT_FROM"], [190, 15, 1, "-", "IMPORT_NAME"], [190, 15, 1, "-", "IMPORT_STAR"], [190, 15, 1, "-", "IS_OP"], [190, 15, 1, "-", "JUMP"], [190, 15, 1, "-", "JUMP_BACKWARD"], [190, 15, 1, "-", "JUMP_BACKWARD_NO_INTERRUPT"], [190, 15, 1, "-", "JUMP_FORWARD"], [190, 15, 1, "-", "JUMP_IF_FALSE_OR_POP"], [190, 15, 1, "-", "JUMP_IF_TRUE_OR_POP"], [190, 15, 1, "-", "JUMP_NO_INTERRUPT"], [190, 15, 1, "-", "KW_NAMES"], [455, 16, 1, "-", "LDFLAGS"], [455, 16, 1, "-", "LDFLAGS_NODIST"], [455, 16, 1, "-", "LDSHARED"], [455, 16, 1, "-", "LIBS"], [455, 16, 1, "-", "LINKCC"], [190, 15, 1, "-", "LIST_APPEND"], [190, 15, 1, "-", "LIST_EXTEND"], [190, 15, 1, "-", "LIST_TO_TUPLE"], [190, 15, 1, "-", "LOAD_ASSERTION_ERROR"], [190, 15, 1, "-", "LOAD_ATTR"], [190, 15, 1, "-", "LOAD_BUILD_CLASS"], [190, 15, 1, "-", "LOAD_CLASSDEREF"], [190, 15, 1, "-", "LOAD_CLOSURE"], [190, 15, 1, "-", "LOAD_CONST"], [190, 15, 1, "-", "LOAD_DEREF"], [190, 15, 1, "-", "LOAD_FAST"], [190, 15, 1, "-", "LOAD_FAST_CHECK"], [190, 15, 1, "-", "LOAD_GLOBAL"], [190, 15, 1, "-", "LOAD_METHOD"], [190, 15, 1, "-", "LOAD_NAME"], [190, 15, 1, "-", "MAKE_CELL"], [190, 15, 1, "-", "MAKE_FUNCTION"], [190, 15, 1, "-", "MAP_ADD"], [190, 15, 1, "-", "MATCH_CLASS"], [190, 15, 1, "-", "MATCH_KEYS"], [190, 15, 1, "-", "MATCH_MAPPING"], [190, 15, 1, "-", "MATCH_SEQUENCE"], [190, 15, 1, "-", "NOP"], [455, 16, 1, "-", "OPT"], [190, 15, 1, "-", "POP_BLOCK"], [190, 15, 1, "-", "POP_EXCEPT"], [190, 15, 1, "-", "POP_JUMP_IF_FALSE"], [190, 15, 1, "-", "POP_JUMP_IF_NONE"], [190, 15, 1, "-", "POP_JUMP_IF_NOT_NONE"], [190, 15, 1, "-", "POP_JUMP_IF_TRUE"], [190, 15, 1, "-", "POP_TOP"], [190, 15, 1, "-", "PREP_RERAISE_STAR"], [190, 15, 1, "-", "PRINT_EXPR"], [455, 16, 1, "-", "PROFILE_TASK"], [455, 16, 1, "-", "PURIFY"], [190, 15, 1, "-", "PUSH_EXC_INFO"], [190, 15, 1, "-", "PUSH_NULL"], [454, 16, 1, "-", "PYTHONASYNCIODEBUG"], [454, 16, 1, "-", "PYTHONBREAKPOINT"], [454, 16, 1, "-", "PYTHONCASEOK"], [454, 16, 1, "-", "PYTHONCOERCECLOCALE"], [454, 16, 1, "-", "PYTHONDEBUG"], [454, 16, 1, "-", "PYTHONDEVMODE"], [454, 16, 1, "-", "PYTHONDONTWRITEBYTECODE"], [454, 16, 1, "-", "PYTHONDUMPREFS"], [454, 16, 1, "envvar-PYTHONDUMPREFSFILE-FILENAME", "PYTHONDUMPREFSFILE=FILENAME"], [454, 16, 1, "-", "PYTHONEXECUTABLE"], [454, 16, 1, "-", "PYTHONFAULTHANDLER"], [454, 16, 1, "-", "PYTHONHASHSEED"], [454, 16, 1, "-", "PYTHONHOME"], [454, 16, 1, "-", "PYTHONINSPECT"], [454, 16, 1, "-", "PYTHONINTMAXSTRDIGITS"], [454, 16, 1, "-", "PYTHONIOENCODING"], [454, 16, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [454, 16, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [454, 16, 1, "-", "PYTHONMALLOC"], [454, 16, 1, "-", "PYTHONMALLOCSTATS"], [454, 16, 1, "-", "PYTHONNODEBUGRANGES"], [454, 16, 1, "-", "PYTHONNOUSERSITE"], [454, 16, 1, "-", "PYTHONOPTIMIZE"], [454, 16, 1, "-", "PYTHONPATH"], [454, 16, 1, "-", "PYTHONPERFSUPPORT"], [454, 16, 1, "-", "PYTHONPLATLIBDIR"], [454, 16, 1, "-", "PYTHONPROFILEIMPORTTIME"], [454, 16, 1, "-", "PYTHONPYCACHEPREFIX"], [454, 16, 1, "-", "PYTHONSAFEPATH"], [454, 16, 1, "-", "PYTHONSTARTUP"], [454, 16, 1, "-", "PYTHONTRACEMALLOC"], [424, 16, 1, "-", "PYTHONTZPATH"], [454, 16, 1, "-", "PYTHONUNBUFFERED"], [454, 16, 1, "-", "PYTHONUSERBASE"], [454, 16, 1, "-", "PYTHONUTF8"], [454, 16, 1, "-", "PYTHONVERBOSE"], [454, 16, 1, "-", "PYTHONWARNDEFAULTENCODING"], [454, 16, 1, "-", "PYTHONWARNINGS"], [455, 16, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [455, 16, 1, "-", "PY_CFLAGS"], [455, 16, 1, "-", "PY_CFLAGS_NODIST"], [455, 16, 1, "-", "PY_CORE_CFLAGS"], [455, 16, 1, "-", "PY_CORE_LDFLAGS"], [455, 16, 1, "-", "PY_CPPFLAGS"], [455, 16, 1, "-", "PY_LDFLAGS"], [455, 16, 1, "-", "PY_LDFLAGS_NODIST"], [455, 16, 1, "-", "PY_STDMODULE_CFLAGS"], [190, 15, 1, "-", "RAISE_VARARGS"], [190, 15, 1, "-", "RERAISE"], [190, 15, 1, "-", "RESUME"], [190, 15, 1, "-", "RETURN_GENERATOR"], [190, 15, 1, "-", "RETURN_VALUE"], [190, 15, 1, "-", "SEND"], [190, 15, 1, "-", "SETUP_ANNOTATIONS"], [190, 15, 1, "-", "SETUP_CLEANUP"], [190, 15, 1, "-", "SETUP_FINALLY"], [190, 15, 1, "-", "SETUP_WITH"], [190, 15, 1, "-", "SET_ADD"], [190, 15, 1, "-", "SET_UPDATE"], [190, 15, 1, "-", "STORE_ATTR"], [190, 15, 1, "-", "STORE_DEREF"], [190, 15, 1, "-", "STORE_FAST"], [190, 15, 1, "-", "STORE_GLOBAL"], [190, 15, 1, "-", "STORE_NAME"], [190, 15, 1, "-", "STORE_SLICE"], [190, 15, 1, "-", "STORE_SUBSCR"], [190, 15, 1, "-", "SWAP"], [190, 15, 1, "-", "UNARY_INVERT"], [190, 15, 1, "-", "UNARY_NEGATIVE"], [190, 15, 1, "-", "UNARY_NOT"], [190, 15, 1, "-", "UNARY_POSITIVE"], [190, 15, 1, "-", "UNPACK_EX"], [190, 15, 1, "-", "UNPACK_SEQUENCE"], [190, 15, 1, "-", "WITH_EXCEPT_START"], [190, 15, 1, "-", "YIELD_VALUE"], [297, 13, 1, "-", "alias"], [110, 17, 1, "to3fixer-apply", "apply"], [297, 13, 1, "-", "args"], [110, 17, 1, "to3fixer-asserts", "asserts"], [110, 17, 1, "to3fixer-basestring", "basestring"], [297, 13, 1, "-", "break"], [110, 17, 1, "to3fixer-buffer", "buffer"], [297, 13, 1, "-", "clear"], [297, 13, 1, "-", "commands"], [297, 13, 1, "-", "condition"], [297, 13, 1, "-", "continue"], [297, 13, 1, "-", "debug"], [110, 17, 1, "to3fixer-dict", "dict"], [297, 13, 1, "-", "disable"], [297, 13, 1, "-", "display"], [297, 13, 1, "-", "down"], [297, 13, 1, "-", "enable"], [110, 17, 1, "to3fixer-except", "except"], [110, 17, 1, "to3fixer-exec", "exec"], [110, 17, 1, "to3fixer-execfile", "execfile"], [110, 17, 1, "to3fixer-exitfunc", "exitfunc"], [110, 17, 1, "to3fixer-filter", "filter"], [110, 17, 1, "to3fixer-funcattrs", "funcattrs"], [110, 17, 1, "to3fixer-future", "future"], [110, 17, 1, "to3fixer-getcwdu", "getcwdu"], [110, 17, 1, "to3fixer-has_key", "has_key"], [297, 13, 1, "-", "help"], [110, 17, 1, "to3fixer-idioms", "idioms"], [297, 13, 1, "-", "ignore"], [110, 17, 1, "to3fixer-import", "import"], [110, 17, 1, "to3fixer-imports", "imports"], [110, 17, 1, "to3fixer-imports2", "imports2"], [110, 17, 1, "to3fixer-input", "input"], [297, 13, 1, "-", "interact"], [110, 17, 1, "to3fixer-intern", "intern"], [110, 17, 1, "to3fixer-isinstance", "isinstance"], [110, 17, 1, "to3fixer-itertools", "itertools"], [110, 17, 1, "to3fixer-itertools_imports", "itertools_imports"], [297, 13, 1, "-", "jump"], [297, 13, 1, "-", "list"], [297, 13, 1, "-", "ll"], [110, 17, 1, "to3fixer-long", "long"], [110, 17, 1, "to3fixer-map", "map"], [110, 17, 1, "to3fixer-metaclass", "metaclass"], [110, 17, 1, "to3fixer-methodattrs", "methodattrs"], [110, 17, 1, "to3fixer-ne", "ne"], [110, 17, 1, "to3fixer-next", "next"], [297, 13, 1, "-", "next"], [110, 17, 1, "to3fixer-nonzero", "nonzero"], [110, 17, 1, "to3fixer-numliterals", "numliterals"], [110, 17, 1, "to3fixer-operator", "operator"], [297, 13, 1, "-", "p"], [110, 17, 1, "to3fixer-paren", "paren"], [297, 13, 1, "-", "pp"], [110, 17, 1, "to3fixer-print", "print"], [297, 13, 1, "-", "quit"], [110, 17, 1, "to3fixer-raise", "raise"], [110, 17, 1, "to3fixer-raw_input", "raw_input"], [110, 17, 1, "to3fixer-reduce", "reduce"], [110, 17, 1, "to3fixer-reload", "reload"], [110, 17, 1, "to3fixer-renames", "renames"], [110, 17, 1, "to3fixer-repr", "repr"], [297, 13, 1, "-", "restart"], [297, 13, 1, "-", "return"], [297, 13, 1, "-", "retval"], [297, 13, 1, "-", "run"], [110, 17, 1, "to3fixer-set_literal", "set_literal"], [297, 13, 1, "-", "source"], [110, 17, 1, "to3fixer-standarderror", "standarderror"], [297, 13, 1, "-", "step"], [110, 17, 1, "to3fixer-sys_exc", "sys_exc"], [297, 13, 1, "-", "tbreak"], [110, 17, 1, "to3fixer-throw", "throw"], [110, 17, 1, "to3fixer-tuple_params", "tuple_params"], [110, 17, 1, "to3fixer-types", "types"], [297, 13, 1, "-", "unalias"], [297, 13, 1, "-", "undisplay"], [110, 17, 1, "to3fixer-unicode", "unicode"], [297, 13, 1, "-", "until"], [297, 13, 1, "-", "up"], [110, 17, 1, "to3fixer-urllib", "urllib"], [297, 13, 1, "-", "whatis"], [297, 13, 1, "-", "where"], [110, 17, 1, "to3fixer-ws_comma", "ws_comma"], [110, 17, 1, "to3fixer-xrange", "xrange"], [110, 17, 1, "to3fixer-xreadlines", "xreadlines"], [110, 17, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[35, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[53, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[53, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[61, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [61, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [61, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [61, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[61, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [61, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCallIter_New": [[36, 3, 1, "c.PyCallIter_New", "callable"], [36, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Addr2Location": [[13, 3, 1, "c.PyCode_Addr2Location", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Location", "co"], [13, 3, 1, "c.PyCode_Addr2Location", "end_column"], [13, 3, 1, "c.PyCode_Addr2Location", "end_line"], [13, 3, 1, "c.PyCode_Addr2Location", "start_column"], [13, 3, 1, "c.PyCode_Addr2Location", "start_line"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_GetCellvars": [[13, 3, 1, "c.PyCode_GetCellvars", "co"]], "PyCode_GetCode": [[13, 3, 1, "c.PyCode_GetCode", "co"]], "PyCode_GetFreevars": [[13, 3, 1, "c.PyCode_GetFreevars", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_GetVarnames": [[13, 3, 1, "c.PyCode_GetVarnames", "co"]], "PyCode_New": [[13, 3, 1, "c.PyCode_New", "argcount"], [13, 3, 1, "c.PyCode_New", "cellvars"], [13, 3, 1, "c.PyCode_New", "code"], [13, 3, 1, "c.PyCode_New", "consts"], [13, 3, 1, "c.PyCode_New", "exceptiontable"], [13, 3, 1, "c.PyCode_New", "filename"], [13, 3, 1, "c.PyCode_New", "firstlineno"], [13, 3, 1, "c.PyCode_New", "flags"], [13, 3, 1, "c.PyCode_New", "freevars"], [13, 3, 1, "c.PyCode_New", "kwonlyargcount"], [13, 3, 1, "c.PyCode_New", "linetable"], [13, 3, 1, "c.PyCode_New", "name"], [13, 3, 1, "c.PyCode_New", "names"], [13, 3, 1, "c.PyCode_New", "nlocals"], [13, 3, 1, "c.PyCode_New", "stacksize"], [13, 3, 1, "c.PyCode_New", "varnames"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCode_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "exceptiontable"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "linetable"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "varnames"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[64, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [64, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[33, 2, 1, "c.PyConfig.PyConfig_Clear", "PyConfig_Clear"], [33, 2, 1, "c.PyConfig.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyConfig.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [33, 2, 1, "c.PyConfig.PyConfig_Read", "PyConfig_Read"], [33, 2, 1, "c.PyConfig.PyConfig_SetArgv", "PyConfig_SetArgv"], [33, 2, 1, "c.PyConfig.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [33, 2, 1, "c.PyConfig.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [33, 2, 1, "c.PyConfig.PyConfig_SetString", "PyConfig_SetString"], [33, 2, 1, "c.PyConfig.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [33, 0, 1, "c.PyConfig.argv", "argv"], [33, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [33, 0, 1, "c.PyConfig.base_executable", "base_executable"], [33, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [33, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [33, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [33, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [33, 0, 1, "c.PyConfig.code_debug_ranges", "code_debug_ranges"], [33, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [33, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [33, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [33, 0, 1, "c.PyConfig.executable", "executable"], [33, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [33, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [33, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [33, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [33, 0, 1, "c.PyConfig.home", "home"], [33, 0, 1, "c.PyConfig.import_time", "import_time"], [33, 0, 1, "c.PyConfig.inspect", "inspect"], [33, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [33, 0, 1, "c.PyConfig.int_max_str_digits", "int_max_str_digits"], [33, 0, 1, "c.PyConfig.interactive", "interactive"], [33, 0, 1, "c.PyConfig.isolated", "isolated"], [33, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [33, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [33, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [33, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [33, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [33, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [33, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [33, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [33, 0, 1, "c.PyConfig.perf_profiling", "perf_profiling"], [33, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [33, 0, 1, "c.PyConfig.prefix", "prefix"], [33, 0, 1, "c.PyConfig.program_name", "program_name"], [33, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [33, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [33, 0, 1, "c.PyConfig.quiet", "quiet"], [33, 0, 1, "c.PyConfig.run_command", "run_command"], [33, 0, 1, "c.PyConfig.run_filename", "run_filename"], [33, 0, 1, "c.PyConfig.run_module", "run_module"], [33, 0, 1, "c.PyConfig.safe_path", "safe_path"], [33, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [33, 0, 1, "c.PyConfig.site_import", "site_import"], [33, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [33, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [33, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [33, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [33, 0, 1, "c.PyConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [33, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [33, 0, 1, "c.PyConfig.verbose", "verbose"], [33, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [33, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [33, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [33, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig.PyConfig_Clear": [[33, 3, 1, "c.PyConfig.PyConfig_Clear", "config"]], "PyConfig.PyConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyConfig.PyConfig_InitIsolatedConfig", "config"]], "PyConfig.PyConfig_InitPythonConfig": [[33, 3, 1, "c.PyConfig.PyConfig_InitPythonConfig", "config"]], "PyConfig.PyConfig_Read": [[33, 3, 1, "c.PyConfig.PyConfig_Read", "config"]], "PyConfig.PyConfig_SetArgv": [[33, 3, 1, "c.PyConfig.PyConfig_SetArgv", "argc"], [33, 3, 1, "c.PyConfig.PyConfig_SetArgv", "argv"], [33, 3, 1, "c.PyConfig.PyConfig_SetArgv", "config"]], "PyConfig.PyConfig_SetBytesArgv": [[33, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "argc"], [33, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "argv"], [33, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "config"]], "PyConfig.PyConfig_SetBytesString": [[33, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "config"], [33, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "config_str"], [33, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "str"]], "PyConfig.PyConfig_SetString": [[33, 3, 1, "c.PyConfig.PyConfig_SetString", "config"], [33, 3, 1, "c.PyConfig.PyConfig_SetString", "config_str"], [33, 3, 1, "c.PyConfig.PyConfig_SetString", "str"]], "PyConfig.PyConfig_SetWideStringList": [[33, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "config"], [33, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "items"], [33, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "length"], [33, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_AddWatcher": [[22, 3, 1, "c.PyDict_AddWatcher", "callback"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_ClearWatcher": [[22, 3, 1, "c.PyDict_ClearWatcher", "watcher_id"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Unwatch": [[22, 3, 1, "c.PyDict_Unwatch", "dict"], [22, 3, 1, "c.PyDict_Unwatch", "watcher_id"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyDict_Watch": [[22, 3, 1, "c.PyDict_Watch", "dict"], [22, 3, 1, "c.PyDict_Watch", "watcher_id"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetHandledException": [[23, 3, 1, "c.PyErr_SetHandledException", "exc"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[32, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[64, 3, 1, "c.PyEval_EvalCode", "co"], [64, 3, 1, "c.PyEval_EvalCode", "globals"], [64, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[64, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [64, 3, 1, "c.PyEval_EvalCodeEx", "args"], [64, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [64, 3, 1, "c.PyEval_EvalCodeEx", "co"], [64, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [64, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [64, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [64, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [64, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [64, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [64, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[64, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[64, 3, 1, "c.PyEval_EvalFrameEx", "f"], [64, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[51, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[51, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[64, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[32, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[32, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[32, 3, 1, "c.PyEval_SetProfile", "func"], [32, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetProfileAllThreads": [[32, 3, 1, "c.PyEval_SetProfileAllThreads", "func"], [32, 3, 1, "c.PyEval_SetProfileAllThreads", "obj"]], "PyEval_SetTrace": [[32, 3, 1, "c.PyEval_SetTrace", "func"], [32, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyEval_SetTraceAllThreads": [[32, 3, 1, "c.PyEval_SetTraceAllThreads", "func"], [32, 3, 1, "c.PyEval_SetTraceAllThreads", "obj"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFloat_Pack2": [[25, 3, 1, "c.PyFloat_Pack2", "le"], [25, 3, 1, "c.PyFloat_Pack2", "p"], [25, 3, 1, "c.PyFloat_Pack2", "x"]], "PyFloat_Pack4": [[25, 3, 1, "c.PyFloat_Pack4", "le"], [25, 3, 1, "c.PyFloat_Pack4", "p"], [25, 3, 1, "c.PyFloat_Pack4", "x"]], "PyFloat_Pack8": [[25, 3, 1, "c.PyFloat_Pack8", "le"], [25, 3, 1, "c.PyFloat_Pack8", "p"], [25, 3, 1, "c.PyFloat_Pack8", "x"]], "PyFloat_Unpack2": [[25, 3, 1, "c.PyFloat_Unpack2", "le"], [25, 3, 1, "c.PyFloat_Unpack2", "p"]], "PyFloat_Unpack4": [[25, 3, 1, "c.PyFloat_Unpack4", "le"], [25, 3, 1, "c.PyFloat_Unpack4", "p"]], "PyFloat_Unpack8": [[25, 3, 1, "c.PyFloat_Unpack8", "le"], [25, 3, 1, "c.PyFloat_Unpack8", "p"]], "PyFrame_GetBack": [[26, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetBuiltins": [[26, 3, 1, "c.PyFrame_GetBuiltins", "frame"]], "PyFrame_GetCode": [[26, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetGenerator": [[26, 3, 1, "c.PyFrame_GetGenerator", "frame"]], "PyFrame_GetGlobals": [[26, 3, 1, "c.PyFrame_GetGlobals", "frame"]], "PyFrame_GetLasti": [[26, 3, 1, "c.PyFrame_GetLasti", "frame"]], "PyFrame_GetLineNumber": [[26, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrame_GetLocals": [[26, 3, 1, "c.PyFrame_GetLocals", "frame"]], "PyFrozenSet_Check": [[53, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[53, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[53, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_Check": [[27, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_GetAnnotations": [[27, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[27, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[27, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[27, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[27, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[27, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[27, 3, 1, "c.PyFunction_New", "code"], [27, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[27, 3, 1, "c.PyFunction_NewWithQualName", "code"], [27, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [27, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[27, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [27, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[27, 3, 1, "c.PyFunction_SetClosure", "closure"], [27, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[27, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [27, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyFunction_SetVectorcall": [[27, 3, 1, "c.PyFunction_SetVectorcall", "func"], [27, 3, 1, "c.PyFunction_SetVectorcall", "vectorcall"]], "PyGen_Check": [[29, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[29, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[29, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[29, 3, 1, "c.PyGen_NewWithQualName", "frame"], [29, 3, 1, "c.PyGen_NewWithQualName", "name"], [29, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyImport_AddModule": [[30, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[30, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[30, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [30, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[30, 3, 1, "c.PyImport_ExecCodeModule", "co"], [30, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[30, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[30, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[30, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[30, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[30, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[30, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[30, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[30, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[30, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[30, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[30, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[30, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[30, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[30, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[46, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[43, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[43, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[43, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[43, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterState_Clear": [[32, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[32, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[32, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[32, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[32, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[32, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[35, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[35, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[35, 3, 1, "c.PyIter_Send", "arg"], [35, 3, 1, "c.PyIter_Send", "iter"], [35, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[37, 3, 1, "c.PyList_Append", "item"], [37, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[37, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[37, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[37, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[37, 3, 1, "c.PyList_GET_ITEM", "i"], [37, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[37, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[37, 3, 1, "c.PyList_GetItem", "index"], [37, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[37, 3, 1, "c.PyList_GetSlice", "high"], [37, 3, 1, "c.PyList_GetSlice", "list"], [37, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[37, 3, 1, "c.PyList_Insert", "index"], [37, 3, 1, "c.PyList_Insert", "item"], [37, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[37, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[37, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[37, 3, 1, "c.PyList_SET_ITEM", "i"], [37, 3, 1, "c.PyList_SET_ITEM", "list"], [37, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[37, 3, 1, "c.PyList_SetItem", "index"], [37, 3, 1, "c.PyList_SetItem", "item"], [37, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[37, 3, 1, "c.PyList_SetSlice", "high"], [37, 3, 1, "c.PyList_SetSlice", "itemlist"], [37, 3, 1, "c.PyList_SetSlice", "list"], [37, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[37, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[37, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[38, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[38, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[38, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[38, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[38, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[38, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[38, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[38, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[38, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[38, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[38, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[38, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[38, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[38, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[38, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[38, 3, 1, "c.PyLong_FromString", "base"], [38, 3, 1, "c.PyLong_FromString", "pend"], [38, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[38, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [38, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[38, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[38, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[38, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[61, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [61, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [61, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[39, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[39, 3, 1, "c.PyMapping_DelItem", "key"], [39, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[39, 3, 1, "c.PyMapping_DelItemString", "key"], [39, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[39, 3, 1, "c.PyMapping_GetItemString", "key"], [39, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[39, 3, 1, "c.PyMapping_HasKey", "key"], [39, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[39, 3, 1, "c.PyMapping_HasKeyString", "key"], [39, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[39, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[39, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[39, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[39, 3, 1, "c.PyMapping_SetItemString", "key"], [39, 3, 1, "c.PyMapping_SetItemString", "o"], [39, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[39, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[39, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[40, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[40, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [40, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[40, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[40, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[40, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[40, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMemAllocatorDomain": [[41, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [41, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [41, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"]], "PyMem_Calloc": [[41, 3, 1, "c.PyMem_Calloc", "elsize"], [41, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[41, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[41, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[41, 3, 1, "c.PyMem_GetAllocator", "allocator"], [41, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[41, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_New": [[41, 3, 1, "c.PyMem_New", "n"]], "PyMem_RawCalloc": [[41, 3, 1, "c.PyMem_RawCalloc", "elsize"], [41, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[41, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[41, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[41, 3, 1, "c.PyMem_RawRealloc", "n"], [41, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[41, 3, 1, "c.PyMem_Realloc", "n"], [41, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_Resize": [[41, 3, 1, "c.PyMem_Resize", "n"], [41, 3, 1, "c.PyMem_Resize", "p"]], "PyMem_SetAllocator": [[41, 3, 1, "c.PyMem_SetAllocator", "allocator"], [41, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMember_GetOne": [[56, 3, 1, "c.PyMember_GetOne", "m"], [56, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[56, 3, 1, "c.PyMember_SetOne", "m"], [56, 3, 1, "c.PyMember_SetOne", "o"], [56, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[42, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[42, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[42, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [42, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [42, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[42, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[42, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[42, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[42, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethod_Check": [[43, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[43, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[43, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[43, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[43, 3, 1, "c.PyMethod_New", "func"], [43, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[43, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[44, 0, 1, "c.PyModuleDef.m_base", "m_base"], [44, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [44, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [44, 0, 1, "c.PyModuleDef.m_free", "m_free"], [44, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [44, 0, 1, "c.PyModuleDef.m_name", "m_name"], [44, 0, 1, "c.PyModuleDef.m_size", "m_size"], [44, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [44, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[44, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[44, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[44, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [44, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[44, 3, 1, "c.PyModule_AddFunctions", "functions"], [44, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[44, 3, 1, "c.PyModule_AddIntConstant", "module"], [44, 3, 1, "c.PyModule_AddIntConstant", "name"], [44, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddIntMacro": [[44, 3, 1, "c.PyModule_AddIntMacro", "module"]], "PyModule_AddObject": [[44, 3, 1, "c.PyModule_AddObject", "module"], [44, 3, 1, "c.PyModule_AddObject", "name"], [44, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[44, 3, 1, "c.PyModule_AddObjectRef", "module"], [44, 3, 1, "c.PyModule_AddObjectRef", "name"], [44, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[44, 3, 1, "c.PyModule_AddStringConstant", "module"], [44, 3, 1, "c.PyModule_AddStringConstant", "name"], [44, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddStringMacro": [[44, 3, 1, "c.PyModule_AddStringMacro", "module"]], "PyModule_AddType": [[44, 3, 1, "c.PyModule_AddType", "module"], [44, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[44, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[44, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[44, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[44, 3, 1, "c.PyModule_Create2", "def"], [44, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[44, 3, 1, "c.PyModule_ExecDef", "def"], [44, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[44, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[44, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[44, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[44, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[44, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[44, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[44, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[44, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[44, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[44, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[44, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[44, 3, 1, "c.PyModule_SetDocString", "docstring"], [44, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[61, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [61, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [61, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [61, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [61, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [61, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [61, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [61, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [61, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [61, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [61, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [61, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [61, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [61, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [61, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [61, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [61, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [61, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [61, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [61, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [61, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [61, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [61, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [61, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[46, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[46, 3, 1, "c.PyNumber_Add", "o1"], [46, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[46, 3, 1, "c.PyNumber_And", "o1"], [46, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[46, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [46, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[46, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[46, 3, 1, "c.PyNumber_Divmod", "o1"], [46, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[46, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[46, 3, 1, "c.PyNumber_FloorDivide", "o1"], [46, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[46, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[46, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[46, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[46, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [46, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[46, 3, 1, "c.PyNumber_InPlacePower", "o1"], [46, 3, 1, "c.PyNumber_InPlacePower", "o2"], [46, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[46, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[46, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[46, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [46, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[46, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [46, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[46, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[46, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[46, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[46, 3, 1, "c.PyNumber_Lshift", "o1"], [46, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[46, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[46, 3, 1, "c.PyNumber_Multiply", "o1"], [46, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[46, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[46, 3, 1, "c.PyNumber_Or", "o1"], [46, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[46, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[46, 3, 1, "c.PyNumber_Power", "o1"], [46, 3, 1, "c.PyNumber_Power", "o2"], [46, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[46, 3, 1, "c.PyNumber_Remainder", "o1"], [46, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[46, 3, 1, "c.PyNumber_Rshift", "o1"], [46, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[46, 3, 1, "c.PyNumber_Subtract", "o1"], [46, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[46, 3, 1, "c.PyNumber_ToBase", "base"], [46, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[46, 3, 1, "c.PyNumber_TrueDivide", "o1"], [46, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[46, 3, 1, "c.PyNumber_Xor", "o1"], [46, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[57, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[57, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[57, 3, 1, "c.PyOS_setsig", "h"], [57, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[61, 0, 1, "c.PyObject._ob_next", "_ob_next"], [61, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [61, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [61, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[48, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[47, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[47, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[48, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[41, 3, 1, "c.PyObject_Calloc", "elsize"], [41, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[47, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_CopyData": [[7, 3, 1, "c.PyObject_CopyData", "dest"], [7, 3, 1, "c.PyObject_CopyData", "src"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[48, 3, 1, "c.PyObject_DelAttr", "attr_name"], [48, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[48, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [48, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[48, 3, 1, "c.PyObject_DelItem", "key"], [48, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[48, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Free": [[41, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[28, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[28, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[28, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_New": [[28, 3, 1, "c.PyObject_GC_New", "type"]], "PyObject_GC_NewVar": [[28, 3, 1, "c.PyObject_GC_NewVar", "size"], [28, 3, 1, "c.PyObject_GC_NewVar", "type"]], "PyObject_GC_Resize": [[28, 3, 1, "c.PyObject_GC_Resize", "newsize"], [28, 3, 1, "c.PyObject_GC_Resize", "op"]], "PyObject_GC_Track": [[28, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[28, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[48, 3, 1, "c.PyObject_GenericGetAttr", "name"], [48, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[48, 3, 1, "c.PyObject_GenericGetDict", "context"], [48, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[48, 3, 1, "c.PyObject_GenericSetAttr", "name"], [48, 3, 1, "c.PyObject_GenericSetAttr", "o"], [48, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[48, 3, 1, "c.PyObject_GenericSetDict", "context"], [48, 3, 1, "c.PyObject_GenericSetDict", "o"], [48, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[48, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[41, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[48, 3, 1, "c.PyObject_GetAttr", "attr_name"], [48, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[48, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[48, 3, 1, "c.PyObject_GetItem", "key"], [48, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetIter": [[48, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_HasAttr": [[48, 3, 1, "c.PyObject_HasAttr", "attr_name"], [48, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[48, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [48, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[48, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[48, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[28, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[48, 3, 1, "c.PyObject_IsInstance", "cls"], [48, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[48, 3, 1, "c.PyObject_IsSubclass", "cls"], [48, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[48, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[48, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[48, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [48, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[41, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_New": [[3, 3, 1, "c.PyObject_New", "type"]], "PyObject_NewVar": [[3, 3, 1, "c.PyObject_NewVar", "size"], [3, 3, 1, "c.PyObject_NewVar", "type"]], "PyObject_Not": [[48, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[48, 3, 1, "c.PyObject_Print", "flags"], [48, 3, 1, "c.PyObject_Print", "fp"], [48, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[41, 3, 1, "c.PyObject_Realloc", "n"], [41, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[48, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[48, 3, 1, "c.PyObject_RichCompare", "o1"], [48, 3, 1, "c.PyObject_RichCompare", "o2"], [48, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[48, 3, 1, "c.PyObject_RichCompareBool", "o1"], [48, 3, 1, "c.PyObject_RichCompareBool", "o2"], [48, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[41, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[48, 3, 1, "c.PyObject_SetAttr", "attr_name"], [48, 3, 1, "c.PyObject_SetAttr", "o"], [48, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[48, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_SetAttrString", "o"], [48, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[48, 3, 1, "c.PyObject_SetItem", "key"], [48, 3, 1, "c.PyObject_SetItem", "o"], [48, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[48, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[48, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[48, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[48, 3, 1, "c.PyObject_TypeCheck", "o"], [48, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[33, 2, 1, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyPreConfig.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [33, 0, 1, "c.PyPreConfig.allocator", "allocator"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [33, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [33, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyPreConfig.isolated", "isolated"], [33, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [33, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig.PyPreConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig.PyPreConfig_InitPythonConfig": [[33, 3, 1, "c.PyPreConfig.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[64, 3, 1, "c.PyRun_AnyFile", "filename"], [64, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[64, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [64, 3, 1, "c.PyRun_AnyFileEx", "filename"], [64, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[64, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [64, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [64, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [64, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[64, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [64, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [64, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[64, 3, 1, "c.PyRun_File", "filename"], [64, 3, 1, "c.PyRun_File", "fp"], [64, 3, 1, "c.PyRun_File", "globals"], [64, 3, 1, "c.PyRun_File", "locals"], [64, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[64, 3, 1, "c.PyRun_FileEx", "closeit"], [64, 3, 1, "c.PyRun_FileEx", "filename"], [64, 3, 1, "c.PyRun_FileEx", "fp"], [64, 3, 1, "c.PyRun_FileEx", "globals"], [64, 3, 1, "c.PyRun_FileEx", "locals"], [64, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[64, 3, 1, "c.PyRun_FileExFlags", "closeit"], [64, 3, 1, "c.PyRun_FileExFlags", "filename"], [64, 3, 1, "c.PyRun_FileExFlags", "flags"], [64, 3, 1, "c.PyRun_FileExFlags", "fp"], [64, 3, 1, "c.PyRun_FileExFlags", "globals"], [64, 3, 1, "c.PyRun_FileExFlags", "locals"], [64, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[64, 3, 1, "c.PyRun_FileFlags", "filename"], [64, 3, 1, "c.PyRun_FileFlags", "flags"], [64, 3, 1, "c.PyRun_FileFlags", "fp"], [64, 3, 1, "c.PyRun_FileFlags", "globals"], [64, 3, 1, "c.PyRun_FileFlags", "locals"], [64, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[64, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [64, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[64, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [64, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [64, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[64, 3, 1, "c.PyRun_InteractiveOne", "filename"], [64, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[64, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [64, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [64, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[64, 3, 1, "c.PyRun_SimpleFile", "filename"], [64, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[64, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [64, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [64, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[64, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [64, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [64, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [64, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[64, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[64, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [64, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[64, 3, 1, "c.PyRun_String", "globals"], [64, 3, 1, "c.PyRun_String", "locals"], [64, 3, 1, "c.PyRun_String", "start"], [64, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[64, 3, 1, "c.PyRun_StringFlags", "flags"], [64, 3, 1, "c.PyRun_StringFlags", "globals"], [64, 3, 1, "c.PyRun_StringFlags", "locals"], [64, 3, 1, "c.PyRun_StringFlags", "start"], [64, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_New": [[36, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[61, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [61, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [61, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [61, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [61, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [61, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [61, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [61, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[52, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[52, 3, 1, "c.PySequence_Concat", "o1"], [52, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[52, 3, 1, "c.PySequence_Contains", "o"], [52, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[52, 3, 1, "c.PySequence_Count", "o"], [52, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[52, 3, 1, "c.PySequence_DelItem", "i"], [52, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[52, 3, 1, "c.PySequence_DelSlice", "i1"], [52, 3, 1, "c.PySequence_DelSlice", "i2"], [52, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[52, 3, 1, "c.PySequence_Fast", "m"], [52, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[52, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [52, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[52, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[52, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[52, 3, 1, "c.PySequence_GetItem", "i"], [52, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[52, 3, 1, "c.PySequence_GetSlice", "i1"], [52, 3, 1, "c.PySequence_GetSlice", "i2"], [52, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[52, 3, 1, "c.PySequence_ITEM", "i"], [52, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[52, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [52, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[52, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [52, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[52, 3, 1, "c.PySequence_Index", "o"], [52, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[52, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[52, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[52, 3, 1, "c.PySequence_Repeat", "count"], [52, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[52, 3, 1, "c.PySequence_SetItem", "i"], [52, 3, 1, "c.PySequence_SetItem", "o"], [52, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[52, 3, 1, "c.PySequence_SetSlice", "i1"], [52, 3, 1, "c.PySequence_SetSlice", "i2"], [52, 3, 1, "c.PySequence_SetSlice", "o"], [52, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[52, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[52, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[53, 3, 1, "c.PySet_Add", "key"], [53, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[53, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[53, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[53, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[53, 3, 1, "c.PySet_Contains", "anyset"], [53, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[53, 3, 1, "c.PySet_Discard", "key"], [53, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[53, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[53, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[53, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[53, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[54, 3, 1, "c.PySlice_AdjustIndices", "length"], [54, 3, 1, "c.PySlice_AdjustIndices", "start"], [54, 3, 1, "c.PySlice_AdjustIndices", "step"], [54, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[54, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[54, 3, 1, "c.PySlice_GetIndices", "length"], [54, 3, 1, "c.PySlice_GetIndices", "slice"], [54, 3, 1, "c.PySlice_GetIndices", "start"], [54, 3, 1, "c.PySlice_GetIndices", "step"], [54, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[54, 3, 1, "c.PySlice_GetIndicesEx", "length"], [54, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [54, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [54, 3, 1, "c.PySlice_GetIndicesEx", "start"], [54, 3, 1, "c.PySlice_GetIndicesEx", "step"], [54, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[54, 3, 1, "c.PySlice_New", "start"], [54, 3, 1, "c.PySlice_New", "step"], [54, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[54, 3, 1, "c.PySlice_Unpack", "slice"], [54, 3, 1, "c.PySlice_Unpack", "start"], [54, 3, 1, "c.PySlice_Unpack", "step"], [54, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[44, 3, 1, "c.PyState_AddModule", "def"], [44, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[44, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[44, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[33, 2, 1, "c.PyStatus.PyStatus_Error", "PyStatus_Error"], [33, 2, 1, "c.PyStatus.PyStatus_Exception", "PyStatus_Exception"], [33, 2, 1, "c.PyStatus.PyStatus_Exit", "PyStatus_Exit"], [33, 2, 1, "c.PyStatus.PyStatus_IsError", "PyStatus_IsError"], [33, 2, 1, "c.PyStatus.PyStatus_IsExit", "PyStatus_IsExit"], [33, 2, 1, "c.PyStatus.PyStatus_NoMemory", "PyStatus_NoMemory"], [33, 2, 1, "c.PyStatus.PyStatus_Ok", "PyStatus_Ok"], [33, 2, 1, "c.PyStatus.Py_ExitStatusException", "Py_ExitStatusException"], [33, 0, 1, "c.PyStatus.err_msg", "err_msg"], [33, 0, 1, "c.PyStatus.exitcode", "exitcode"], [33, 0, 1, "c.PyStatus.func", "func"]], "PyStatus.PyStatus_Error": [[33, 3, 1, "c.PyStatus.PyStatus_Error", "err_msg"]], "PyStatus.PyStatus_Exception": [[33, 3, 1, "c.PyStatus.PyStatus_Exception", "status"]], "PyStatus.PyStatus_Exit": [[33, 3, 1, "c.PyStatus.PyStatus_Exit", "exitcode"]], "PyStatus.PyStatus_IsError": [[33, 3, 1, "c.PyStatus.PyStatus_IsError", "status"]], "PyStatus.PyStatus_IsExit": [[33, 3, 1, "c.PyStatus.PyStatus_IsExit", "status"]], "PyStatus.Py_ExitStatusException": [[33, 3, 1, "c.PyStatus.Py_ExitStatusException", "status"]], "PyStructSequence_GET_ITEM": [[58, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [58, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[58, 3, 1, "c.PyStructSequence_GetItem", "p"], [58, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[58, 3, 1, "c.PyStructSequence_InitType", "desc"], [58, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[58, 3, 1, "c.PyStructSequence_InitType2", "desc"], [58, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[58, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[58, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[58, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [58, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [58, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[58, 3, 1, "c.PyStructSequence_SetItem", "o"], [58, 3, 1, "c.PyStructSequence_SetItem", "p"], [58, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[57, 3, 1, "c.PySys_AddAuditHook", "hook"], [57, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[57, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[57, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[57, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[57, 3, 1, "c.PySys_Audit", "event"], [57, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[57, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[57, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[57, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[32, 3, 1, "c.PySys_SetArgv", "argc"], [32, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[32, 3, 1, "c.PySys_SetArgvEx", "argc"], [32, 3, 1, "c.PySys_SetArgvEx", "argv"], [32, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[57, 3, 1, "c.PySys_SetObject", "name"], [57, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[57, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[57, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[57, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState_Clear": [[32, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[32, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_EnterTracing": [[32, 3, 1, "c.PyThreadState_EnterTracing", "tstate"]], "PyThreadState_GetFrame": [[32, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[32, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[32, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_LeaveTracing": [[32, 3, 1, "c.PyThreadState_LeaveTracing", "tstate"]], "PyThreadState_New": [[32, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[32, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[32, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [32, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[32, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[32, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[32, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[32, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[32, 3, 1, "c.PyThread_set_key_value", "key"], [32, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[32, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[32, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[32, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[32, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[32, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[32, 3, 1, "c.PyThread_tss_set", "key"], [32, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[41, 3, 1, "c.PyTraceMalloc_Track", "domain"], [41, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [41, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[41, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [41, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[58, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[58, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[58, 3, 1, "c.PyTuple_GET_ITEM", "p"], [58, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[58, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[58, 3, 1, "c.PyTuple_GetItem", "p"], [58, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[58, 3, 1, "c.PyTuple_GetSlice", "high"], [58, 3, 1, "c.PyTuple_GetSlice", "low"], [58, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[58, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[58, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[58, 3, 1, "c.PyTuple_SET_ITEM", "o"], [58, 3, 1, "c.PyTuple_SET_ITEM", "p"], [58, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[58, 3, 1, "c.PyTuple_SetItem", "o"], [58, 3, 1, "c.PyTuple_SetItem", "p"], [58, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[58, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[61, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [61, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [61, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [61, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [61, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [61, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [61, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [61, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [61, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [61, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [61, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [61, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [61, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [61, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [61, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [61, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [61, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [61, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [61, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [61, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [61, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [61, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [61, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [61, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [61, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [61, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [61, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [61, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [61, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [61, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [61, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [61, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [61, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [61, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [61, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [61, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [61, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [61, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [61, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [61, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [61, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [61, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [61, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [61, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [61, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [61, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [61, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [61, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyTypeObject.tp_richcompare": [[61, 1, 1, "c.PyTypeObject.tp_richcompare.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"]], "PyType_AddWatcher": [[59, 3, 1, "c.PyType_AddWatcher", "callback"]], "PyType_Check": [[59, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[59, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_ClearWatcher": [[59, 3, 1, "c.PyType_ClearWatcher", "watcher_id"]], "PyType_FromMetaclass": [[59, 3, 1, "c.PyType_FromMetaclass", "bases"], [59, 3, 1, "c.PyType_FromMetaclass", "metaclass"], [59, 3, 1, "c.PyType_FromMetaclass", "module"], [59, 3, 1, "c.PyType_FromMetaclass", "spec"]], "PyType_FromModuleAndSpec": [[59, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [59, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [59, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[59, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[59, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [59, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[59, 3, 1, "c.PyType_GenericAlloc", "nitems"], [59, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[59, 3, 1, "c.PyType_GenericNew", "args"], [59, 3, 1, "c.PyType_GenericNew", "kwds"], [59, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetFlags": [[59, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[59, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleByDef": [[59, 3, 1, "c.PyType_GetModuleByDef", "def"], [59, 3, 1, "c.PyType_GetModuleByDef", "type"]], "PyType_GetModuleState": [[59, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetName": [[59, 3, 1, "c.PyType_GetName", "type"]], "PyType_GetQualName": [[59, 3, 1, "c.PyType_GetQualName", "type"]], "PyType_GetSlot": [[59, 3, 1, "c.PyType_GetSlot", "slot"], [59, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_HasFeature": [[59, 3, 1, "c.PyType_HasFeature", "feature"], [59, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[59, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[59, 3, 1, "c.PyType_IsSubtype", "a"], [59, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[59, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[59, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot.PyType_Slot": [[59, 0, 1, "c.PyType_Slot.PyType_Slot.pfunc", "pfunc"], [59, 0, 1, "c.PyType_Slot.PyType_Slot.slot", "slot"]], "PyType_Spec.PyType_Spec": [[59, 0, 1, "c.PyType_Spec.PyType_Spec.basicsize", "basicsize"], [59, 0, 1, "c.PyType_Spec.PyType_Spec.flags", "flags"], [59, 0, 1, "c.PyType_Spec.PyType_Spec.itemsize", "itemsize"], [59, 0, 1, "c.PyType_Spec.PyType_Spec.name", "name"], [59, 0, 1, "c.PyType_Spec.PyType_Spec.slots", "slots"]], "PyType_Watch": [[59, 3, 1, "c.PyType_Watch", "type"], [59, 3, 1, "c.PyType_Watch", "watcher_id"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[62, 3, 1, "c.PyUnicode_1BYTE_DATA", "o"]], "PyUnicode_2BYTE_DATA": [[62, 3, 1, "c.PyUnicode_2BYTE_DATA", "o"]], "PyUnicode_4BYTE_DATA": [[62, 3, 1, "c.PyUnicode_4BYTE_DATA", "o"]], "PyUnicode_AsASCIIString": [[62, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[62, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [62, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[62, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [62, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [62, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[62, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[62, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[62, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[62, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [62, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [62, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [62, 3, 1, "c.PyUnicode_AsUCS4", "u"]], "PyUnicode_AsUCS4Copy": [[62, 3, 1, "c.PyUnicode_AsUCS4Copy", "u"]], "PyUnicode_AsUTF16String": [[62, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[62, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[62, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[62, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [62, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[62, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[62, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[62, 3, 1, "c.PyUnicode_AsWideChar", "size"], [62, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [62, 3, 1, "c.PyUnicode_AsWideChar", "w"]], "PyUnicode_AsWideCharString": [[62, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [62, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[62, 3, 1, "c.PyUnicode_Check", "o"]], "PyUnicode_CheckExact": [[62, 3, 1, "c.PyUnicode_CheckExact", "o"]], "PyUnicode_Compare": [[62, 3, 1, "c.PyUnicode_Compare", "left"], [62, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[62, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [62, 3, 1, "c.PyUnicode_CompareWithASCIIString", "uni"]], "PyUnicode_Concat": [[62, 3, 1, "c.PyUnicode_Concat", "left"], [62, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[62, 3, 1, "c.PyUnicode_Contains", "container"], [62, 3, 1, "c.PyUnicode_Contains", "element"]], "PyUnicode_CopyCharacters": [[62, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [62, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [62, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [62, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [62, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[62, 3, 1, "c.PyUnicode_Count", "end"], [62, 3, 1, "c.PyUnicode_Count", "start"], [62, 3, 1, "c.PyUnicode_Count", "str"], [62, 3, 1, "c.PyUnicode_Count", "substr"]], "PyUnicode_DATA": [[62, 3, 1, "c.PyUnicode_DATA", "o"]], "PyUnicode_Decode": [[62, 3, 1, "c.PyUnicode_Decode", "encoding"], [62, 3, 1, "c.PyUnicode_Decode", "errors"], [62, 3, 1, "c.PyUnicode_Decode", "s"], [62, 3, 1, "c.PyUnicode_Decode", "size"]], "PyUnicode_DecodeASCII": [[62, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [62, 3, 1, "c.PyUnicode_DecodeASCII", "s"], [62, 3, 1, "c.PyUnicode_DecodeASCII", "size"]], "PyUnicode_DecodeCharmap": [[62, 3, 1, "c.PyUnicode_DecodeCharmap", "data"], [62, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [62, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [62, 3, 1, "c.PyUnicode_DecodeCharmap", "size"]], "PyUnicode_DecodeFSDefault": [[62, 3, 1, "c.PyUnicode_DecodeFSDefault", "s"]], "PyUnicode_DecodeFSDefaultAndSize": [[62, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "s"], [62, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"]], "PyUnicode_DecodeLatin1": [[62, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [62, 3, 1, "c.PyUnicode_DecodeLatin1", "s"], [62, 3, 1, "c.PyUnicode_DecodeLatin1", "size"]], "PyUnicode_DecodeLocale": [[62, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [62, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[62, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [62, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "len"], [62, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[62, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [62, 3, 1, "c.PyUnicode_DecodeMBCS", "s"], [62, 3, 1, "c.PyUnicode_DecodeMBCS", "size"]], "PyUnicode_DecodeMBCSStateful": [[62, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [62, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [62, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "s"], [62, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"]], "PyUnicode_DecodeRawUnicodeEscape": [[62, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [62, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "s"], [62, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"]], "PyUnicode_DecodeUTF16": [[62, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [62, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF16", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF16", "size"]], "PyUnicode_DecodeUTF16Stateful": [[62, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [62, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [62, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"]], "PyUnicode_DecodeUTF32": [[62, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [62, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF32", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF32", "size"]], "PyUnicode_DecodeUTF32Stateful": [[62, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [62, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [62, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"]], "PyUnicode_DecodeUTF7": [[62, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF7", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF7", "size"]], "PyUnicode_DecodeUTF7Stateful": [[62, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [62, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"]], "PyUnicode_DecodeUTF8": [[62, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF8", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF8", "size"]], "PyUnicode_DecodeUTF8Stateful": [[62, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [62, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "s"], [62, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"]], "PyUnicode_DecodeUnicodeEscape": [[62, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [62, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "s"], [62, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"]], "PyUnicode_EncodeCodePage": [[62, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [62, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [62, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[62, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLocale": [[62, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [62, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_FSConverter": [[62, 3, 1, "c.PyUnicode_FSConverter", "obj"], [62, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[62, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [62, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[62, 3, 1, "c.PyUnicode_Fill", "fill_char"], [62, 3, 1, "c.PyUnicode_Fill", "length"], [62, 3, 1, "c.PyUnicode_Fill", "start"], [62, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[62, 3, 1, "c.PyUnicode_Find", "direction"], [62, 3, 1, "c.PyUnicode_Find", "end"], [62, 3, 1, "c.PyUnicode_Find", "start"], [62, 3, 1, "c.PyUnicode_Find", "str"], [62, 3, 1, "c.PyUnicode_Find", "substr"]], "PyUnicode_FindChar": [[62, 3, 1, "c.PyUnicode_FindChar", "ch"], [62, 3, 1, "c.PyUnicode_FindChar", "direction"], [62, 3, 1, "c.PyUnicode_FindChar", "end"], [62, 3, 1, "c.PyUnicode_FindChar", "start"], [62, 3, 1, "c.PyUnicode_FindChar", "str"]], "PyUnicode_Format": [[62, 3, 1, "c.PyUnicode_Format", "args"], [62, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[62, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [62, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [62, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[62, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[62, 3, 1, "c.PyUnicode_FromFormatV", "format"], [62, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[62, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [62, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [62, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[62, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[62, 3, 1, "c.PyUnicode_FromString", "u"]], "PyUnicode_FromStringAndSize": [[62, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [62, 3, 1, "c.PyUnicode_FromStringAndSize", "u"]], "PyUnicode_FromWideChar": [[62, 3, 1, "c.PyUnicode_FromWideChar", "size"], [62, 3, 1, "c.PyUnicode_FromWideChar", "w"]], "PyUnicode_GET_LENGTH": [[62, 3, 1, "c.PyUnicode_GET_LENGTH", "o"]], "PyUnicode_GetLength": [[62, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_InternFromString": [[62, 3, 1, "c.PyUnicode_InternFromString", "v"]], "PyUnicode_InternInPlace": [[62, 3, 1, "c.PyUnicode_InternInPlace", "string"]], "PyUnicode_IsIdentifier": [[62, 3, 1, "c.PyUnicode_IsIdentifier", "o"]], "PyUnicode_Join": [[62, 3, 1, "c.PyUnicode_Join", "separator"], [62, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[62, 3, 1, "c.PyUnicode_KIND", "o"]], "PyUnicode_MAX_CHAR_VALUE": [[62, 3, 1, "c.PyUnicode_MAX_CHAR_VALUE", "o"]], "PyUnicode_New": [[62, 3, 1, "c.PyUnicode_New", "maxchar"], [62, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[62, 3, 1, "c.PyUnicode_READ", "data"], [62, 3, 1, "c.PyUnicode_READ", "index"], [62, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[62, 3, 1, "c.PyUnicode_READY", "o"]], "PyUnicode_READ_CHAR": [[62, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [62, 3, 1, "c.PyUnicode_READ_CHAR", "o"]], "PyUnicode_ReadChar": [[62, 3, 1, "c.PyUnicode_ReadChar", "index"], [62, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[62, 3, 1, "c.PyUnicode_Replace", "maxcount"], [62, 3, 1, "c.PyUnicode_Replace", "replstr"], [62, 3, 1, "c.PyUnicode_Replace", "str"], [62, 3, 1, "c.PyUnicode_Replace", "substr"]], "PyUnicode_RichCompare": [[62, 3, 1, "c.PyUnicode_RichCompare", "left"], [62, 3, 1, "c.PyUnicode_RichCompare", "op"], [62, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[62, 3, 1, "c.PyUnicode_Split", "maxsplit"], [62, 3, 1, "c.PyUnicode_Split", "s"], [62, 3, 1, "c.PyUnicode_Split", "sep"]], "PyUnicode_Splitlines": [[62, 3, 1, "c.PyUnicode_Splitlines", "keepend"], [62, 3, 1, "c.PyUnicode_Splitlines", "s"]], "PyUnicode_Substring": [[62, 3, 1, "c.PyUnicode_Substring", "end"], [62, 3, 1, "c.PyUnicode_Substring", "start"], [62, 3, 1, "c.PyUnicode_Substring", "str"]], "PyUnicode_Tailmatch": [[62, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [62, 3, 1, "c.PyUnicode_Tailmatch", "end"], [62, 3, 1, "c.PyUnicode_Tailmatch", "start"], [62, 3, 1, "c.PyUnicode_Tailmatch", "str"], [62, 3, 1, "c.PyUnicode_Tailmatch", "substr"]], "PyUnicode_Translate": [[62, 3, 1, "c.PyUnicode_Translate", "errors"], [62, 3, 1, "c.PyUnicode_Translate", "str"], [62, 3, 1, "c.PyUnicode_Translate", "table"]], "PyUnicode_WRITE": [[62, 3, 1, "c.PyUnicode_WRITE", "data"], [62, 3, 1, "c.PyUnicode_WRITE", "index"], [62, 3, 1, "c.PyUnicode_WRITE", "kind"], [62, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[62, 3, 1, "c.PyUnicode_WriteChar", "character"], [62, 3, 1, "c.PyUnicode_WriteChar", "index"], [62, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyVarObject": [[61, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_GET_OBJECT": [[65, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[65, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[65, 3, 1, "c.PyWeakref_NewProxy", "callback"], [65, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[65, 3, 1, "c.PyWeakref_NewRef", "callback"], [65, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[33, 2, 1, "c.PyWideStringList.PyWideStringList_Append", "PyWideStringList_Append"], [33, 2, 1, "c.PyWideStringList.PyWideStringList_Insert", "PyWideStringList_Insert"], [33, 0, 1, "c.PyWideStringList.items", "items"], [33, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList.PyWideStringList_Append": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "list"]], "PyWideStringList.PyWideStringList_Insert": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "index"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[32, 3, 1, "c.Py_AddPendingCall", "arg"], [32, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[57, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[64, 3, 1, "c.Py_BytesMain", "argc"], [64, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[50, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[64, 3, 1, "c.Py_CompileString", "filename"], [64, 3, 1, "c.Py_CompileString", "start"], [64, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[64, 3, 1, "c.Py_CompileStringExFlags", "filename"], [64, 3, 1, "c.Py_CompileStringExFlags", "flags"], [64, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [64, 3, 1, "c.Py_CompileStringExFlags", "start"], [64, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[64, 3, 1, "c.Py_CompileStringFlags", "filename"], [64, 3, 1, "c.Py_CompileStringFlags", "flags"], [64, 3, 1, "c.Py_CompileStringFlags", "start"], [64, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[64, 3, 1, "c.Py_CompileStringObject", "filename"], [64, 3, 1, "c.Py_CompileStringObject", "flags"], [64, 3, 1, "c.Py_CompileStringObject", "optimize"], [64, 3, 1, "c.Py_CompileStringObject", "start"], [64, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[50, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[50, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[57, 3, 1, "c.Py_DecodeLocale", "arg"], [57, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[57, 3, 1, "c.Py_EncodeLocale", "error_pos"], [57, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[32, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[57, 3, 1, "c.Py_Exit", "status"]], "Py_FatalError": [[57, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[57, 3, 1, "c.Py_FdIsInteractive", "filename"], [57, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[60, 3, 1, "c.Py_GenericAlias", "args"], [60, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[33, 3, 1, "c.Py_GetArgcArgv", "argc"], [33, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[50, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[56, 3, 1, "c.Py_IS_TYPE", "o"], [56, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[50, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[32, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[33, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[56, 3, 1, "c.Py_Is", "x"], [56, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[56, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[56, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[56, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[64, 3, 1, "c.Py_Main", "argc"], [64, 3, 1, "c.Py_Main", "argv"]], "Py_NewRef": [[50, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[33, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[33, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[50, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[50, 3, 1, "c.Py_SET_REFCNT", "o"], [50, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[56, 3, 1, "c.Py_SET_SIZE", "o"], [56, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[56, 3, 1, "c.Py_SET_TYPE", "o"], [56, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[56, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[32, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[32, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[32, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [32, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[56, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[62, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[62, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[62, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[62, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[62, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[62, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[62, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[62, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[62, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[62, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[62, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_IS_HIGH_SURROGATE": [[62, 3, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "ch"]], "Py_UNICODE_IS_LOW_SURROGATE": [[62, 3, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "ch"]], "Py_UNICODE_IS_SURROGATE": [[62, 3, 1, "c.Py_UNICODE_IS_SURROGATE", "ch"]], "Py_UNICODE_JOIN_SURROGATES": [[62, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "high"], [62, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "low"]], "Py_UNICODE_TODECIMAL": [[62, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[62, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[62, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[62, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[62, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[62, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[28, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[50, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[50, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[50, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[44, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[44, 3, 1, "c.Py_mod_create.create_module", "def"], [44, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[44, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[44, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_GetDictPtr": [[48, 3, 1, "c._PyObject_GetDictPtr", "obj"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[58, 3, 1, "c._PyTuple_Resize", "newsize"], [58, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "BaseException": [[212, 7, 1, "", "__notes__"], [212, 8, 1, "", "add_note"], [212, 7, 1, "", "args"], [212, 8, 1, "", "with_traceback"]], "BaseExceptionGroup": [[212, 8, 1, "", "derive"], [212, 7, 1, "", "exceptions"], [212, 7, 1, "", "message"], [212, 8, 1, "", "split"], [212, 8, 1, "", "subgroup"]], "BlockingIOError": [[212, 7, 1, "", "characters_written"]], "OSError": [[212, 7, 1, "", "errno"], [212, 7, 1, "", "filename"], [212, 7, 1, "", "filename2"], [212, 7, 1, "", "strerror"], [212, 7, 1, "", "winerror"]], "SyntaxError": [[212, 7, 1, "", "end_lineno"], [212, 7, 1, "", "end_offset"], [212, 7, 1, "", "filename"], [212, 7, 1, "", "lineno"], [212, 7, 1, "", "offset"], [212, 7, 1, "", "text"]], "SystemExit": [[212, 7, 1, "", "code"]], "UnicodeError": [[212, 7, 1, "", "encoding"], [212, 7, 1, "", "end"], [212, 7, 1, "", "object"], [212, 7, 1, "", "reason"], [212, 7, 1, "", "start"]], "_thread": [[113, 9, 1, "thread.LockType", "LockType"], [113, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [113, 11, 1, "thread.allocate_lock", "allocate_lock"], [113, 6, 1, "thread.error", "error"], [113, 11, 1, "thread.exit", "exit"], [113, 11, 1, "thread.get_ident", "get_ident"], [113, 11, 1, "thread.get_native_id", "get_native_id"], [113, 11, 1, "thread.interrupt_main", "interrupt_main"], [113, 11, 1, "thread.stack_size", "stack_size"], [113, 11, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[113, 8, 1, "thread.lock.acquire", "acquire"], [113, 8, 1, "thread.lock.locked", "locked"], [113, 8, 1, "thread.lock.release", "release"]], "abc": [[114, 12, 1, "", "ABC"], [114, 12, 1, "", "ABCMeta"], [114, 11, 1, "", "abstractclassmethod"], [114, 11, 1, "", "abstractmethod"], [114, 11, 1, "", "abstractproperty"], [114, 11, 1, "", "abstractstaticmethod"], [114, 11, 1, "", "get_cache_token"], [114, 11, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[114, 8, 1, "", "__subclasshook__"], [114, 8, 1, "", "register"]], "agen": [[429, 8, 1, "", "__anext__"], [429, 8, 1, "", "aclose"], [429, 8, 1, "", "asend"], [429, 8, 1, "", "athrow"]], "aifc.aifc": [[115, 8, 1, "", "aifc"], [115, 8, 1, "", "aiff"], [115, 8, 1, "", "close"], [115, 8, 1, "", "getcompname"], [115, 8, 1, "", "getcomptype"], [115, 8, 1, "", "getframerate"], [115, 8, 1, "", "getmark"], [115, 8, 1, "", "getmarkers"], [115, 8, 1, "", "getnchannels"], [115, 8, 1, "", "getnframes"], [115, 8, 1, "", "getparams"], [115, 8, 1, "", "getsampwidth"], [115, 8, 1, "", "readframes"], [115, 8, 1, "", "rewind"], [115, 8, 1, "", "setcomptype"], [115, 8, 1, "", "setframerate"], [115, 8, 1, "", "setmark"], [115, 8, 1, "", "setnchannels"], [115, 8, 1, "", "setnframes"], [115, 8, 1, "", "setparams"], [115, 8, 1, "", "setpos"], [115, 8, 1, "", "setsampwidth"], [115, 8, 1, "", "tell"], [115, 8, 1, "", "writeframes"], [115, 8, 1, "", "writeframesraw"]], "aifc": [[115, 11, 1, "", "open"]], "argparse": [[118, 12, 1, "", "Action"], [118, 12, 1, "", "ArgumentDefaultsHelpFormatter"], [118, 12, 1, "", "ArgumentParser"], [118, 12, 1, "", "FileType"], [118, 12, 1, "", "MetavarTypeHelpFormatter"], [118, 12, 1, "", "Namespace"], [118, 12, 1, "", "RawDescriptionHelpFormatter"], [118, 12, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[118, 8, 1, "", "add_argument"], [118, 8, 1, "", "add_argument_group"], [118, 8, 1, "", "add_mutually_exclusive_group"], [118, 8, 1, "", "add_subparsers"], [118, 8, 1, "", "convert_arg_line_to_args"], [118, 8, 1, "", "error"], [118, 8, 1, "", "exit"], [118, 8, 1, "", "format_help"], [118, 8, 1, "", "format_usage"], [118, 8, 1, "", "get_default"], [118, 8, 1, "", "parse_args"], [118, 8, 1, "", "parse_intermixed_args"], [118, 8, 1, "", "parse_known_args"], [118, 8, 1, "", "parse_known_intermixed_args"], [118, 8, 1, "", "print_help"], [118, 8, 1, "", "print_usage"], [118, 8, 1, "", "set_defaults"]], "array": [[119, 12, 1, "", "array"], [119, 9, 1, "", "typecodes"]], "array.array": [[119, 8, 1, "", "append"], [119, 8, 1, "", "buffer_info"], [119, 8, 1, "", "byteswap"], [119, 8, 1, "", "count"], [119, 8, 1, "", "extend"], [119, 8, 1, "", "frombytes"], [119, 8, 1, "", "fromfile"], [119, 8, 1, "", "fromlist"], [119, 8, 1, "", "fromunicode"], [119, 8, 1, "", "index"], [119, 8, 1, "", "insert"], [119, 7, 1, "", "itemsize"], [119, 8, 1, "", "pop"], [119, 8, 1, "", "remove"], [119, 8, 1, "", "reverse"], [119, 8, 1, "", "tobytes"], [119, 8, 1, "", "tofile"], [119, 8, 1, "", "tolist"], [119, 8, 1, "", "tounicode"], [119, 7, 1, "", "typecode"]], "ast": [[120, 12, 1, "", "AST"], [120, 12, 1, "", "Add"], [120, 12, 1, "", "And"], [120, 12, 1, "", "AnnAssign"], [120, 12, 1, "", "Assert"], [120, 12, 1, "", "Assign"], [120, 12, 1, "", "AsyncFor"], [120, 12, 1, "", "AsyncFunctionDef"], [120, 12, 1, "", "AsyncWith"], [120, 12, 1, "", "Attribute"], [120, 12, 1, "", "AugAssign"], [120, 12, 1, "", "Await"], [120, 12, 1, "", "BinOp"], [120, 12, 1, "", "BitAnd"], [120, 12, 1, "", "BitOr"], [120, 12, 1, "", "BitXor"], [120, 12, 1, "", "BoolOp"], [120, 12, 1, "", "Break"], [120, 12, 1, "", "Call"], [120, 12, 1, "", "ClassDef"], [120, 12, 1, "", "Compare"], [120, 12, 1, "", "Constant"], [120, 12, 1, "", "Continue"], [120, 12, 1, "", "Del"], [120, 12, 1, "", "Delete"], [120, 12, 1, "", "Dict"], [120, 12, 1, "", "DictComp"], [120, 12, 1, "", "Div"], [120, 12, 1, "", "Eq"], [120, 12, 1, "", "ExceptHandler"], [120, 12, 1, "", "Expr"], [120, 12, 1, "", "FloorDiv"], [120, 12, 1, "", "For"], [120, 12, 1, "", "FormattedValue"], [120, 12, 1, "", "FunctionDef"], [120, 12, 1, "", "GeneratorExp"], [120, 12, 1, "", "Global"], [120, 12, 1, "", "Gt"], [120, 12, 1, "", "GtE"], [120, 12, 1, "", "If"], [120, 12, 1, "", "IfExp"], [120, 12, 1, "", "Import"], [120, 12, 1, "", "ImportFrom"], [120, 12, 1, "", "In"], [120, 12, 1, "", "Invert"], [120, 12, 1, "", "Is"], [120, 12, 1, "", "IsNot"], [120, 12, 1, "", "JoinedStr"], [120, 12, 1, "", "LShift"], [120, 12, 1, "", "Lambda"], [120, 12, 1, "", "List"], [120, 12, 1, "", "ListComp"], [120, 12, 1, "", "Load"], [120, 12, 1, "", "Lt"], [120, 12, 1, "", "LtE"], [120, 12, 1, "", "MatMult"], [120, 12, 1, "", "Match"], [120, 12, 1, "", "MatchAs"], [120, 12, 1, "", "MatchClass"], [120, 12, 1, "", "MatchMapping"], [120, 12, 1, "", "MatchOr"], [120, 12, 1, "", "MatchSequence"], [120, 12, 1, "", "MatchSingleton"], [120, 12, 1, "", "MatchStar"], [120, 12, 1, "", "MatchValue"], [120, 12, 1, "", "Mod"], [120, 12, 1, "", "Mult"], [120, 12, 1, "", "Name"], [120, 12, 1, "", "NamedExpr"], [120, 12, 1, "", "NodeTransformer"], [120, 12, 1, "", "NodeVisitor"], [120, 12, 1, "", "Nonlocal"], [120, 12, 1, "", "Not"], [120, 12, 1, "", "NotEq"], [120, 12, 1, "", "NotIn"], [120, 12, 1, "", "Or"], [120, 12, 1, "", "Pass"], [120, 12, 1, "", "Pow"], [120, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [120, 9, 1, "", "PyCF_ONLY_AST"], [120, 9, 1, "", "PyCF_TYPE_COMMENTS"], [120, 12, 1, "", "RShift"], [120, 12, 1, "", "Raise"], [120, 12, 1, "", "Return"], [120, 12, 1, "", "Set"], [120, 12, 1, "", "SetComp"], [120, 12, 1, "", "Slice"], [120, 12, 1, "", "Starred"], [120, 12, 1, "", "Store"], [120, 12, 1, "", "Sub"], [120, 12, 1, "", "Subscript"], [120, 12, 1, "", "Try"], [120, 12, 1, "", "TryStar"], [120, 12, 1, "", "Tuple"], [120, 12, 1, "", "UAdd"], [120, 12, 1, "", "USub"], [120, 12, 1, "", "UnaryOp"], [120, 12, 1, "", "While"], [120, 12, 1, "", "With"], [120, 12, 1, "", "Yield"], [120, 12, 1, "", "YieldFrom"], [120, 12, 1, "", "alias"], [120, 12, 1, "", "arg"], [120, 12, 1, "", "arguments"], [120, 12, 1, "", "comprehension"], [120, 11, 1, "", "copy_location"], [120, 11, 1, "", "dump"], [120, 11, 1, "", "fix_missing_locations"], [120, 11, 1, "", "get_docstring"], [120, 11, 1, "", "get_source_segment"], [120, 11, 1, "", "increment_lineno"], [120, 11, 1, "", "iter_child_nodes"], [120, 11, 1, "", "iter_fields"], [120, 12, 1, "", "keyword"], [120, 11, 1, "", "literal_eval"], [120, 12, 1, "", "match_case"], [120, 11, 1, "", "parse"], [120, 11, 1, "", "unparse"], [120, 11, 1, "", "walk"], [120, 12, 1, "", "withitem"], [120, 14, 1, "cmdoption-ast-h", "--help"], [120, 14, 1, "cmdoption-ast-a", "--include-attributes"], [120, 14, 1, "cmdoption-ast-indent", "--indent"], [120, 14, 1, "cmdoption-ast-mode", "--mode"], [120, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [120, 14, 1, "cmdoption-ast-a", "-a"], [120, 14, 1, "cmdoption-ast-h", "-h"], [120, 14, 1, "cmdoption-ast-i", "-i"], [120, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[120, 7, 1, "", "_fields"], [120, 7, 1, "", "col_offset"], [120, 7, 1, "", "end_col_offset"], [120, 7, 1, "", "end_lineno"], [120, 7, 1, "", "lineno"]], "ast.Assign": [[120, 7, 1, "", "type_comment"]], "ast.For": [[120, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[120, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[120, 8, 1, "", "generic_visit"], [120, 8, 1, "", "visit"]], "ast.With": [[120, 7, 1, "", "type_comment"]], "ast.arg": [[120, 7, 1, "", "type_comment"]], "asynchat": [[121, 12, 1, "", "async_chat"]], "asynchat.async_chat": [[121, 9, 1, "", "ac_in_buffer_size"], [121, 9, 1, "", "ac_out_buffer_size"], [121, 8, 1, "", "close_when_done"], [121, 8, 1, "", "collect_incoming_data"], [121, 8, 1, "", "discard_buffers"], [121, 8, 1, "", "found_terminator"], [121, 8, 1, "", "get_terminator"], [121, 8, 1, "", "push"], [121, 8, 1, "", "push_with_producer"], [121, 8, 1, "", "set_terminator"]], "asyncio": [[131, 12, 1, "", "AbstractChildWatcher"], [125, 12, 1, "", "AbstractEventLoop"], [131, 12, 1, "", "AbstractEventLoopPolicy"], [137, 12, 1, "", "Barrier"], [132, 12, 1, "", "BaseProtocol"], [132, 12, 1, "", "BaseTransport"], [137, 12, 1, "", "BoundedSemaphore"], [137, 6, 1, "", "BrokenBarrierError"], [132, 12, 1, "", "BufferedProtocol"], [126, 6, 1, "", "CancelledError"], [137, 12, 1, "", "Condition"], [132, 12, 1, "", "DatagramProtocol"], [132, 12, 1, "", "DatagramTransport"], [131, 12, 1, "", "DefaultEventLoopPolicy"], [137, 12, 1, "", "Event"], [131, 12, 1, "", "FastChildWatcher"], [128, 12, 1, "", "Future"], [125, 12, 1, "", "Handle"], [126, 6, 1, "", "IncompleteReadError"], [126, 6, 1, "", "InvalidStateError"], [133, 12, 1, "", "LifoQueue"], [126, 6, 1, "", "LimitOverrunError"], [137, 12, 1, "", "Lock"], [131, 12, 1, "", "MultiLoopChildWatcher"], [131, 12, 1, "", "PidfdChildWatcher"], [133, 12, 1, "", "PriorityQueue"], [125, 12, 1, "", "ProactorEventLoop"], [132, 12, 1, "", "Protocol"], [133, 12, 1, "", "Queue"], [133, 6, 1, "", "QueueEmpty"], [133, 6, 1, "", "QueueFull"], [132, 12, 1, "", "ReadTransport"], [134, 12, 1, "", "Runner"], [131, 12, 1, "", "SafeChildWatcher"], [125, 12, 1, "", "SelectorEventLoop"], [137, 12, 1, "", "Semaphore"], [126, 6, 1, "", "SendfileNotAvailableError"], [125, 12, 1, "", "Server"], [135, 12, 1, "", "StreamReader"], [135, 12, 1, "", "StreamWriter"], [132, 12, 1, "", "SubprocessProtocol"], [132, 12, 1, "", "SubprocessTransport"], [138, 12, 1, "", "Task"], [138, 12, 1, "", "TaskGroup"], [131, 12, 1, "", "ThreadedChildWatcher"], [138, 12, 1, "", "Timeout"], [126, 6, 1, "", "TimeoutError"], [125, 12, 1, "", "TimerHandle"], [132, 12, 1, "", "Transport"], [131, 12, 1, "", "WindowsProactorEventLoopPolicy"], [131, 12, 1, "", "WindowsSelectorEventLoopPolicy"], [132, 12, 1, "", "WriteTransport"], [127, 11, 1, "", "_enter_task"], [127, 11, 1, "", "_leave_task"], [127, 11, 1, "", "_register_task"], [127, 11, 1, "", "_unregister_task"], [138, 11, 1, "", "all_tasks"], [138, 11, 1, "", "as_completed"], [136, 11, 1, "", "create_subprocess_exec"], [136, 11, 1, "", "create_subprocess_shell"], [138, 11, 1, "", "create_task"], [138, 11, 1, "", "current_task"], [128, 11, 1, "", "ensure_future"], [138, 11, 1, "", "gather"], [131, 11, 1, "", "get_child_watcher"], [125, 11, 1, "", "get_event_loop"], [131, 11, 1, "", "get_event_loop_policy"], [125, 11, 1, "", "get_running_loop"], [128, 11, 1, "", "isfuture"], [125, 11, 1, "", "new_event_loop"], [135, 11, 1, "", "open_connection"], [135, 11, 1, "", "open_unix_connection"], [134, 11, 1, "", "run"], [138, 11, 1, "", "run_coroutine_threadsafe"], [131, 11, 1, "", "set_child_watcher"], [125, 11, 1, "", "set_event_loop"], [131, 11, 1, "", "set_event_loop_policy"], [138, 11, 1, "", "shield"], [138, 11, 1, "", "sleep"], [135, 11, 1, "", "start_server"], [135, 11, 1, "", "start_unix_server"], [138, 11, 1, "", "timeout"], [138, 11, 1, "", "timeout_at"], [138, 11, 1, "", "to_thread"], [138, 11, 1, "", "wait"], [138, 11, 1, "", "wait_for"], [128, 11, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[131, 8, 1, "", "add_child_handler"], [131, 8, 1, "", "attach_loop"], [131, 8, 1, "", "close"], [131, 8, 1, "", "is_active"], [131, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[131, 8, 1, "", "get_child_watcher"], [131, 8, 1, "", "get_event_loop"], [131, 8, 1, "", "new_event_loop"], [131, 8, 1, "", "set_child_watcher"], [131, 8, 1, "", "set_event_loop"]], "asyncio.Barrier": [[137, 8, 1, "", "abort"], [137, 7, 1, "", "broken"], [137, 7, 1, "", "n_waiting"], [137, 7, 1, "", "parties"], [137, 8, 1, "", "reset"], [137, 8, 1, "", "wait"]], "asyncio.BaseProtocol": [[132, 8, 1, "", "connection_lost"], [132, 8, 1, "", "connection_made"], [132, 8, 1, "", "pause_writing"], [132, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[132, 8, 1, "", "close"], [132, 8, 1, "", "get_extra_info"], [132, 8, 1, "", "get_protocol"], [132, 8, 1, "", "is_closing"], [132, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[132, 8, 1, "", "buffer_updated"], [132, 8, 1, "", "eof_received"], [132, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[137, 8, 1, "", "acquire"], [137, 8, 1, "", "locked"], [137, 8, 1, "", "notify"], [137, 8, 1, "", "notify_all"], [137, 8, 1, "", "release"], [137, 8, 1, "", "wait"], [137, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[132, 8, 1, "", "datagram_received"], [132, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[132, 8, 1, "", "abort"], [132, 8, 1, "", "sendto"]], "asyncio.Event": [[137, 8, 1, "", "clear"], [137, 8, 1, "", "is_set"], [137, 8, 1, "", "set"], [137, 8, 1, "", "wait"]], "asyncio.Future": [[127, 8, 1, "", "__init__"], [128, 8, 1, "", "add_done_callback"], [128, 8, 1, "", "cancel"], [128, 8, 1, "", "cancelled"], [128, 8, 1, "", "done"], [128, 8, 1, "", "exception"], [128, 8, 1, "", "get_loop"], [128, 8, 1, "", "remove_done_callback"], [128, 8, 1, "", "result"], [128, 8, 1, "", "set_exception"], [128, 8, 1, "", "set_result"]], "asyncio.Handle": [[125, 8, 1, "", "cancel"], [125, 8, 1, "", "cancelled"], [125, 8, 1, "", "get_context"]], "asyncio.IncompleteReadError": [[126, 7, 1, "", "expected"], [126, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[126, 7, 1, "", "consumed"]], "asyncio.Lock": [[137, 8, 1, "", "acquire"], [137, 8, 1, "", "locked"], [137, 8, 1, "", "release"]], "asyncio.Protocol": [[132, 8, 1, "", "data_received"], [132, 8, 1, "", "eof_received"]], "asyncio.Queue": [[133, 8, 1, "", "empty"], [133, 8, 1, "", "full"], [133, 8, 1, "", "get"], [133, 8, 1, "", "get_nowait"], [133, 8, 1, "", "join"], [133, 7, 1, "", "maxsize"], [133, 8, 1, "", "put"], [133, 8, 1, "", "put_nowait"], [133, 8, 1, "", "qsize"], [133, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[132, 8, 1, "", "is_reading"], [132, 8, 1, "", "pause_reading"], [132, 8, 1, "", "resume_reading"]], "asyncio.Runner": [[134, 8, 1, "", "close"], [134, 8, 1, "", "get_loop"], [134, 8, 1, "", "run"]], "asyncio.Semaphore": [[137, 8, 1, "", "acquire"], [137, 8, 1, "", "locked"], [137, 8, 1, "", "release"]], "asyncio.Server": [[125, 8, 1, "", "close"], [125, 8, 1, "", "get_loop"], [125, 8, 1, "", "is_serving"], [125, 8, 1, "", "serve_forever"], [125, 7, 1, "", "sockets"], [125, 8, 1, "", "start_serving"], [125, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[135, 8, 1, "", "at_eof"], [135, 8, 1, "", "read"], [135, 8, 1, "", "readexactly"], [135, 8, 1, "", "readline"], [135, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[135, 8, 1, "", "can_write_eof"], [135, 8, 1, "", "close"], [135, 8, 1, "", "drain"], [135, 8, 1, "", "get_extra_info"], [135, 8, 1, "", "is_closing"], [135, 8, 1, "", "start_tls"], [135, 7, 1, "", "transport"], [135, 8, 1, "", "wait_closed"], [135, 8, 1, "", "write"], [135, 8, 1, "", "write_eof"], [135, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[132, 8, 1, "", "pipe_connection_lost"], [132, 8, 1, "", "pipe_data_received"], [132, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[132, 8, 1, "", "close"], [132, 8, 1, "", "get_pid"], [132, 8, 1, "", "get_pipe_transport"], [132, 8, 1, "", "get_returncode"], [132, 8, 1, "", "kill"], [132, 8, 1, "", "send_signal"], [132, 8, 1, "", "terminate"]], "asyncio.Task": [[127, 8, 1, "", "__init__"], [138, 8, 1, "", "add_done_callback"], [138, 8, 1, "", "cancel"], [138, 8, 1, "", "cancelled"], [138, 8, 1, "", "cancelling"], [138, 8, 1, "", "done"], [138, 8, 1, "", "exception"], [138, 8, 1, "", "get_context"], [138, 8, 1, "", "get_coro"], [138, 8, 1, "", "get_name"], [138, 8, 1, "", "get_stack"], [138, 8, 1, "", "print_stack"], [138, 8, 1, "", "remove_done_callback"], [138, 8, 1, "", "result"], [138, 8, 1, "", "set_name"], [138, 8, 1, "", "uncancel"]], "asyncio.TaskGroup": [[138, 8, 1, "", "create_task"]], "asyncio.Timeout": [[138, 8, 1, "", "expired"], [138, 8, 1, "", "reschedule"], [138, 8, 1, "", "when"]], "asyncio.TimerHandle": [[125, 8, 1, "", "when"]], "asyncio.WriteTransport": [[132, 8, 1, "", "abort"], [132, 8, 1, "", "can_write_eof"], [132, 8, 1, "", "get_write_buffer_limits"], [132, 8, 1, "", "get_write_buffer_size"], [132, 8, 1, "", "set_write_buffer_limits"], [132, 8, 1, "", "write"], [132, 8, 1, "", "write_eof"], [132, 8, 1, "", "writelines"]], "asyncio.loop": [[125, 8, 1, "", "add_reader"], [125, 8, 1, "", "add_signal_handler"], [125, 8, 1, "", "add_writer"], [125, 8, 1, "", "call_at"], [125, 8, 1, "", "call_exception_handler"], [125, 8, 1, "", "call_later"], [125, 8, 1, "", "call_soon"], [125, 8, 1, "", "call_soon_threadsafe"], [125, 8, 1, "", "close"], [125, 8, 1, "", "connect_accepted_socket"], [125, 8, 1, "", "connect_read_pipe"], [125, 8, 1, "", "connect_write_pipe"], [125, 8, 1, "", "create_connection"], [125, 8, 1, "", "create_datagram_endpoint"], [125, 8, 1, "", "create_future"], [125, 8, 1, "", "create_server"], [125, 8, 1, "", "create_task"], [125, 8, 1, "", "create_unix_connection"], [125, 8, 1, "", "create_unix_server"], [125, 8, 1, "", "default_exception_handler"], [125, 8, 1, "", "get_debug"], [125, 8, 1, "", "get_exception_handler"], [125, 8, 1, "", "get_task_factory"], [125, 8, 1, "", "getaddrinfo"], [125, 8, 1, "", "getnameinfo"], [125, 8, 1, "", "is_closed"], [125, 8, 1, "", "is_running"], [125, 8, 1, "", "remove_reader"], [125, 8, 1, "", "remove_signal_handler"], [125, 8, 1, "", "remove_writer"], [125, 8, 1, "", "run_forever"], [125, 8, 1, "", "run_in_executor"], [125, 8, 1, "", "run_until_complete"], [125, 8, 1, "", "sendfile"], [125, 8, 1, "", "set_debug"], [125, 8, 1, "", "set_default_executor"], [125, 8, 1, "", "set_exception_handler"], [125, 8, 1, "", "set_task_factory"], [125, 8, 1, "", "shutdown_asyncgens"], [125, 8, 1, "", "shutdown_default_executor"], [125, 8, 1, "", "sock_accept"], [125, 8, 1, "", "sock_connect"], [125, 8, 1, "", "sock_recv"], [125, 8, 1, "", "sock_recv_into"], [125, 8, 1, "", "sock_recvfrom"], [125, 8, 1, "", "sock_recvfrom_into"], [125, 8, 1, "", "sock_sendall"], [125, 8, 1, "", "sock_sendfile"], [125, 8, 1, "", "sock_sendto"], [125, 8, 1, "", "start_tls"], [125, 8, 1, "", "stop"], [125, 8, 1, "", "subprocess_exec"], [125, 8, 1, "", "subprocess_shell"], [125, 8, 1, "", "time"]], "asyncio.subprocess": [[136, 9, 1, "", "DEVNULL"], [136, 9, 1, "", "PIPE"], [136, 12, 1, "", "Process"], [136, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[136, 8, 1, "", "communicate"], [136, 8, 1, "", "kill"], [136, 7, 1, "", "pid"], [136, 7, 1, "", "returncode"], [136, 8, 1, "", "send_signal"], [136, 7, 1, "", "stderr"], [136, 7, 1, "", "stdin"], [136, 7, 1, "", "stdout"], [136, 8, 1, "", "terminate"], [136, 8, 1, "", "wait"]], "asyncore": [[139, 12, 1, "", "dispatcher"], [139, 12, 1, "", "dispatcher_with_send"], [139, 12, 1, "", "file_dispatcher"], [139, 12, 1, "", "file_wrapper"], [139, 11, 1, "", "loop"]], "asyncore.dispatcher": [[139, 8, 1, "", "accept"], [139, 8, 1, "", "bind"], [139, 8, 1, "", "close"], [139, 8, 1, "", "connect"], [139, 8, 1, "", "create_socket"], [139, 8, 1, "", "handle_accept"], [139, 8, 1, "", "handle_accepted"], [139, 8, 1, "", "handle_close"], [139, 8, 1, "", "handle_connect"], [139, 8, 1, "", "handle_error"], [139, 8, 1, "", "handle_expt"], [139, 8, 1, "", "handle_read"], [139, 8, 1, "", "handle_write"], [139, 8, 1, "", "listen"], [139, 8, 1, "", "readable"], [139, 8, 1, "", "recv"], [139, 8, 1, "", "send"], [139, 8, 1, "", "writable"]], "atexit": [[140, 11, 1, "", "register"], [140, 11, 1, "", "unregister"]], "audioop": [[141, 11, 1, "", "add"], [141, 11, 1, "", "adpcm2lin"], [141, 11, 1, "", "alaw2lin"], [141, 11, 1, "", "avg"], [141, 11, 1, "", "avgpp"], [141, 11, 1, "", "bias"], [141, 11, 1, "", "byteswap"], [141, 11, 1, "", "cross"], [141, 6, 1, "", "error"], [141, 11, 1, "", "findfactor"], [141, 11, 1, "", "findfit"], [141, 11, 1, "", "findmax"], [141, 11, 1, "", "getsample"], [141, 11, 1, "", "lin2adpcm"], [141, 11, 1, "", "lin2alaw"], [141, 11, 1, "", "lin2lin"], [141, 11, 1, "", "lin2ulaw"], [141, 11, 1, "", "max"], [141, 11, 1, "", "maxpp"], [141, 11, 1, "", "minmax"], [141, 11, 1, "", "mul"], [141, 11, 1, "", "ratecv"], [141, 11, 1, "", "reverse"], [141, 11, 1, "", "rms"], [141, 11, 1, "", "tomono"], [141, 11, 1, "", "tostereo"], [141, 11, 1, "", "ulaw2lin"]], "base64": [[143, 11, 1, "", "a85decode"], [143, 11, 1, "", "a85encode"], [143, 11, 1, "", "b16decode"], [143, 11, 1, "", "b16encode"], [143, 11, 1, "", "b32decode"], [143, 11, 1, "", "b32encode"], [143, 11, 1, "", "b32hexdecode"], [143, 11, 1, "", "b32hexencode"], [143, 11, 1, "", "b64decode"], [143, 11, 1, "", "b64encode"], [143, 11, 1, "", "b85decode"], [143, 11, 1, "", "b85encode"], [143, 11, 1, "", "decode"], [143, 11, 1, "", "decodebytes"], [143, 11, 1, "", "encode"], [143, 11, 1, "", "encodebytes"], [143, 11, 1, "", "standard_b64decode"], [143, 11, 1, "", "standard_b64encode"], [143, 11, 1, "", "urlsafe_b64decode"], [143, 11, 1, "", "urlsafe_b64encode"]], "bdb": [[144, 12, 1, "", "Bdb"], [144, 6, 1, "", "BdbQuit"], [144, 12, 1, "", "Breakpoint"], [144, 11, 1, "", "checkfuncname"], [144, 11, 1, "", "effective"], [144, 11, 1, "", "set_trace"]], "bdb.Bdb": [[144, 8, 1, "", "break_anywhere"], [144, 8, 1, "", "break_here"], [144, 8, 1, "", "canonic"], [144, 8, 1, "", "clear_all_breaks"], [144, 8, 1, "", "clear_all_file_breaks"], [144, 8, 1, "", "clear_bpbynumber"], [144, 8, 1, "", "clear_break"], [144, 8, 1, "", "dispatch_call"], [144, 8, 1, "", "dispatch_exception"], [144, 8, 1, "", "dispatch_line"], [144, 8, 1, "", "dispatch_return"], [144, 8, 1, "", "do_clear"], [144, 8, 1, "", "format_stack_entry"], [144, 8, 1, "", "get_all_breaks"], [144, 8, 1, "", "get_bpbynumber"], [144, 8, 1, "", "get_break"], [144, 8, 1, "", "get_breaks"], [144, 8, 1, "", "get_file_breaks"], [144, 8, 1, "", "get_stack"], [144, 8, 1, "", "is_skipped_line"], [144, 8, 1, "", "reset"], [144, 8, 1, "", "run"], [144, 8, 1, "", "runcall"], [144, 8, 1, "", "runctx"], [144, 8, 1, "", "runeval"], [144, 8, 1, "", "set_break"], [144, 8, 1, "", "set_continue"], [144, 8, 1, "", "set_next"], [144, 8, 1, "", "set_quit"], [144, 8, 1, "", "set_return"], [144, 8, 1, "", "set_step"], [144, 8, 1, "", "set_trace"], [144, 8, 1, "", "set_until"], [144, 8, 1, "", "stop_here"], [144, 8, 1, "", "trace_dispatch"], [144, 8, 1, "", "user_call"], [144, 8, 1, "", "user_exception"], [144, 8, 1, "", "user_line"], [144, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[144, 7, 1, "", "bpbynumber"], [144, 8, 1, "", "bpformat"], [144, 7, 1, "", "bplist"], [144, 8, 1, "", "bpprint"], [144, 7, 1, "", "cond"], [144, 8, 1, "", "deleteMe"], [144, 8, 1, "", "disable"], [144, 8, 1, "", "enable"], [144, 7, 1, "", "enabled"], [144, 7, 1, "", "file"], [144, 7, 1, "", "funcname"], [144, 7, 1, "", "hits"], [144, 7, 1, "", "ignore"], [144, 7, 1, "", "line"], [144, 7, 1, "", "temporary"]], "binascii": [[146, 6, 1, "", "Error"], [146, 6, 1, "", "Incomplete"], [146, 11, 1, "", "a2b_base64"], [146, 11, 1, "", "a2b_hex"], [146, 11, 1, "", "a2b_qp"], [146, 11, 1, "", "a2b_uu"], [146, 11, 1, "", "b2a_base64"], [146, 11, 1, "", "b2a_hex"], [146, 11, 1, "", "b2a_qp"], [146, 11, 1, "", "b2a_uu"], [146, 11, 1, "", "crc32"], [146, 11, 1, "", "crc_hqx"], [146, 11, 1, "", "hexlify"], [146, 11, 1, "", "unhexlify"]], "bisect": [[147, 11, 1, "", "bisect"], [147, 11, 1, "", "bisect_left"], [147, 11, 1, "", "bisect_right"], [147, 11, 1, "", "insort"], [147, 11, 1, "", "insort_left"], [147, 11, 1, "", "insort_right"]], "bytearray": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "decode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "bytes": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "decode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "bz2": [[149, 12, 1, "", "BZ2Compressor"], [149, 12, 1, "", "BZ2Decompressor"], [149, 12, 1, "", "BZ2File"], [149, 11, 1, "", "compress"], [149, 11, 1, "", "decompress"], [149, 11, 1, "", "open"]], "bz2.BZ2Compressor": [[149, 8, 1, "", "compress"], [149, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[149, 8, 1, "", "decompress"], [149, 7, 1, "", "eof"], [149, 7, 1, "", "needs_input"], [149, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[149, 8, 1, "", "peek"]], "calendar": [[150, 12, 1, "", "Calendar"], [150, 9, 1, "", "FRIDAY"], [150, 12, 1, "", "HTMLCalendar"], [150, 12, 1, "", "LocaleHTMLCalendar"], [150, 12, 1, "", "LocaleTextCalendar"], [150, 9, 1, "", "MONDAY"], [150, 9, 1, "", "SATURDAY"], [150, 9, 1, "", "SUNDAY"], [150, 9, 1, "", "THURSDAY"], [150, 9, 1, "", "TUESDAY"], [150, 12, 1, "", "TextCalendar"], [150, 9, 1, "", "WEDNESDAY"], [150, 11, 1, "", "calendar"], [150, 9, 1, "", "day_abbr"], [150, 9, 1, "", "day_name"], [150, 11, 1, "", "firstweekday"], [150, 11, 1, "", "isleap"], [150, 11, 1, "", "leapdays"], [150, 11, 1, "", "month"], [150, 9, 1, "", "month_abbr"], [150, 9, 1, "", "month_name"], [150, 11, 1, "", "monthcalendar"], [150, 11, 1, "", "monthrange"], [150, 11, 1, "", "prcal"], [150, 11, 1, "", "prmonth"], [150, 11, 1, "", "setfirstweekday"], [150, 11, 1, "", "timegm"], [150, 11, 1, "", "weekday"], [150, 11, 1, "", "weekheader"]], "calendar.Calendar": [[150, 8, 1, "", "itermonthdates"], [150, 8, 1, "", "itermonthdays"], [150, 8, 1, "", "itermonthdays2"], [150, 8, 1, "", "itermonthdays3"], [150, 8, 1, "", "itermonthdays4"], [150, 8, 1, "", "iterweekdays"], [150, 8, 1, "", "monthdatescalendar"], [150, 8, 1, "", "monthdays2calendar"], [150, 8, 1, "", "monthdayscalendar"], [150, 8, 1, "", "yeardatescalendar"], [150, 8, 1, "", "yeardays2calendar"], [150, 8, 1, "", "yeardayscalendar"]], "calendar.HTMLCalendar": [[150, 7, 1, "", "cssclass_month"], [150, 7, 1, "", "cssclass_month_head"], [150, 7, 1, "", "cssclass_noday"], [150, 7, 1, "", "cssclass_year"], [150, 7, 1, "", "cssclass_year_head"], [150, 7, 1, "", "cssclasses"], [150, 7, 1, "", "cssclasses_weekday_head"], [150, 8, 1, "", "formatmonth"], [150, 8, 1, "", "formatyear"], [150, 8, 1, "", "formatyearpage"]], "calendar.TextCalendar": [[150, 8, 1, "", "formatmonth"], [150, 8, 1, "", "formatyear"], [150, 8, 1, "", "prmonth"], [150, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[151, 8, 1, "", "getfirst"], [151, 8, 1, "", "getlist"]], "cgi": [[151, 11, 1, "", "parse"], [151, 11, 1, "", "parse_header"], [151, 11, 1, "", "parse_multipart"], [151, 11, 1, "", "print_directory"], [151, 11, 1, "", "print_environ"], [151, 11, 1, "", "print_environ_usage"], [151, 11, 1, "", "print_form"], [151, 11, 1, "", "test"]], "cgitb": [[152, 11, 1, "", "enable"], [152, 11, 1, "", "handler"], [152, 11, 1, "", "html"], [152, 11, 1, "", "text"]], "chunk": [[153, 12, 1, "", "Chunk"]], "chunk.Chunk": [[153, 8, 1, "", "close"], [153, 8, 1, "", "getname"], [153, 8, 1, "", "getsize"], [153, 8, 1, "", "isatty"], [153, 8, 1, "", "read"], [153, 8, 1, "", "seek"], [153, 8, 1, "", "skip"], [153, 8, 1, "", "tell"]], "class": [[344, 7, 1, "", "__bases__"], [427, 8, 1, "", "__instancecheck__"], [344, 7, 1, "", "__mro__"], [427, 8, 1, "", "__subclasscheck__"], [344, 8, 1, "", "__subclasses__"], [344, 8, 1, "", "mro"]], "cmath": [[154, 11, 1, "", "acos"], [154, 11, 1, "", "acosh"], [154, 11, 1, "", "asin"], [154, 11, 1, "", "asinh"], [154, 11, 1, "", "atan"], [154, 11, 1, "", "atanh"], [154, 11, 1, "", "cos"], [154, 11, 1, "", "cosh"], [154, 9, 1, "", "e"], [154, 11, 1, "", "exp"], [154, 9, 1, "", "inf"], [154, 9, 1, "", "infj"], [154, 11, 1, "", "isclose"], [154, 11, 1, "", "isfinite"], [154, 11, 1, "", "isinf"], [154, 11, 1, "", "isnan"], [154, 11, 1, "", "log"], [154, 11, 1, "", "log10"], [154, 9, 1, "", "nan"], [154, 9, 1, "", "nanj"], [154, 11, 1, "", "phase"], [154, 9, 1, "", "pi"], [154, 11, 1, "", "polar"], [154, 11, 1, "", "rect"], [154, 11, 1, "", "sin"], [154, 11, 1, "", "sinh"], [154, 11, 1, "", "sqrt"], [154, 11, 1, "", "tan"], [154, 11, 1, "", "tanh"], [154, 9, 1, "", "tau"]], "cmd": [[155, 12, 1, "", "Cmd"]], "cmd.Cmd": [[155, 8, 1, "", "cmdloop"], [155, 7, 1, "", "cmdqueue"], [155, 8, 1, "", "columnize"], [155, 8, 1, "", "completedefault"], [155, 8, 1, "", "default"], [155, 7, 1, "", "doc_header"], [155, 8, 1, "", "emptyline"], [155, 7, 1, "", "identchars"], [155, 7, 1, "", "intro"], [155, 7, 1, "", "lastcmd"], [155, 7, 1, "", "misc_header"], [155, 8, 1, "", "onecmd"], [155, 8, 1, "", "postcmd"], [155, 8, 1, "", "postloop"], [155, 8, 1, "", "precmd"], [155, 8, 1, "", "preloop"], [155, 7, 1, "", "prompt"], [155, 7, 1, "", "ruler"], [155, 7, 1, "", "undoc_header"], [155, 7, 1, "", "use_rawinput"]], "code": [[156, 12, 1, "", "InteractiveConsole"], [156, 12, 1, "", "InteractiveInterpreter"], [156, 11, 1, "", "compile_command"], [156, 11, 1, "", "interact"]], "code.InteractiveConsole": [[156, 8, 1, "", "interact"], [156, 8, 1, "", "push"], [156, 8, 1, "", "raw_input"], [156, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[156, 8, 1, "", "runcode"], [156, 8, 1, "", "runsource"], [156, 8, 1, "", "showsyntaxerror"], [156, 8, 1, "", "showtraceback"], [156, 8, 1, "", "write"]], "codecs": [[157, 9, 1, "", "BOM"], [157, 9, 1, "", "BOM_BE"], [157, 9, 1, "", "BOM_LE"], [157, 9, 1, "", "BOM_UTF16"], [157, 9, 1, "", "BOM_UTF16_BE"], [157, 9, 1, "", "BOM_UTF16_LE"], [157, 9, 1, "", "BOM_UTF32"], [157, 9, 1, "", "BOM_UTF32_BE"], [157, 9, 1, "", "BOM_UTF32_LE"], [157, 9, 1, "", "BOM_UTF8"], [157, 12, 1, "", "CodecInfo"], [157, 11, 1, "", "EncodedFile"], [157, 12, 1, "", "IncrementalDecoder"], [157, 12, 1, "", "IncrementalEncoder"], [157, 12, 1, "", "StreamReader"], [157, 12, 1, "", "StreamReaderWriter"], [157, 12, 1, "", "StreamRecoder"], [157, 12, 1, "", "StreamWriter"], [157, 11, 1, "", "backslashreplace_errors"], [157, 11, 1, "", "decode"], [157, 11, 1, "", "encode"], [157, 11, 1, "", "getdecoder"], [157, 11, 1, "", "getencoder"], [157, 11, 1, "", "getincrementaldecoder"], [157, 11, 1, "", "getincrementalencoder"], [157, 11, 1, "", "getreader"], [157, 11, 1, "", "getwriter"], [157, 11, 1, "", "ignore_errors"], [157, 11, 1, "", "iterdecode"], [157, 11, 1, "", "iterencode"], [157, 11, 1, "", "lookup"], [157, 11, 1, "", "lookup_error"], [157, 11, 1, "", "namereplace_errors"], [157, 11, 1, "", "open"], [157, 11, 1, "", "register"], [157, 11, 1, "", "register_error"], [157, 11, 1, "", "replace_errors"], [157, 11, 1, "", "strict_errors"], [157, 11, 1, "", "unregister"], [157, 11, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[157, 8, 1, "", "decode"], [157, 8, 1, "", "encode"]], "codecs.CodecInfo": [[157, 7, 1, "", "decode"], [157, 7, 1, "", "encode"], [157, 7, 1, "", "incrementaldecoder"], [157, 7, 1, "", "incrementalencoder"], [157, 7, 1, "", "name"], [157, 7, 1, "", "streamreader"], [157, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[157, 8, 1, "", "decode"], [157, 8, 1, "", "getstate"], [157, 8, 1, "", "reset"], [157, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[157, 8, 1, "", "encode"], [157, 8, 1, "", "getstate"], [157, 8, 1, "", "reset"], [157, 8, 1, "", "setstate"]], "codecs.StreamReader": [[157, 8, 1, "", "read"], [157, 8, 1, "", "readline"], [157, 8, 1, "", "readlines"], [157, 8, 1, "", "reset"]], "codecs.StreamWriter": [[157, 8, 1, "", "reset"], [157, 8, 1, "", "write"], [157, 8, 1, "", "writelines"]], "codeobject": [[427, 8, 1, "", "co_positions"]], "codeop": [[158, 12, 1, "", "CommandCompiler"], [158, 12, 1, "", "Compile"], [158, 11, 1, "", "compile_command"]], "collections": [[159, 12, 1, "", "ChainMap"], [159, 12, 1, "", "Counter"], [159, 12, 1, "", "OrderedDict"], [159, 12, 1, "", "UserDict"], [159, 12, 1, "", "UserList"], [159, 12, 1, "", "UserString"], [160, 10, 0, "-", "abc"], [159, 12, 1, "", "defaultdict"], [159, 12, 1, "", "deque"], [159, 11, 1, "", "namedtuple"]], "collections.ChainMap": [[159, 7, 1, "", "maps"], [159, 8, 1, "", "new_child"], [159, 7, 1, "", "parents"]], "collections.Counter": [[159, 8, 1, "", "elements"], [159, 8, 1, "", "fromkeys"], [159, 8, 1, "", "most_common"], [159, 8, 1, "", "subtract"], [159, 8, 1, "", "total"], [159, 8, 1, "", "update"]], "collections.OrderedDict": [[159, 8, 1, "", "move_to_end"], [159, 8, 1, "", "popitem"]], "collections.UserDict": [[159, 7, 1, "", "data"]], "collections.UserList": [[159, 7, 1, "", "data"]], "collections.UserString": [[159, 7, 1, "", "data"]], "collections.abc": [[160, 12, 1, "", "AsyncGenerator"], [160, 12, 1, "", "AsyncIterable"], [160, 12, 1, "", "AsyncIterator"], [160, 12, 1, "", "Awaitable"], [160, 12, 1, "", "ByteString"], [160, 12, 1, "", "Callable"], [160, 12, 1, "", "Collection"], [160, 12, 1, "", "Container"], [160, 12, 1, "", "Coroutine"], [160, 12, 1, "", "Generator"], [160, 12, 1, "", "Hashable"], [160, 12, 1, "", "ItemsView"], [160, 12, 1, "", "Iterable"], [160, 12, 1, "", "Iterator"], [160, 12, 1, "", "KeysView"], [160, 12, 1, "", "Mapping"], [160, 12, 1, "", "MappingView"], [160, 12, 1, "", "MutableMapping"], [160, 12, 1, "", "MutableSequence"], [160, 12, 1, "", "MutableSet"], [160, 12, 1, "", "Reversible"], [160, 12, 1, "", "Sequence"], [160, 12, 1, "", "Set"], [160, 12, 1, "", "Sized"], [160, 12, 1, "", "ValuesView"]], "collections.defaultdict": [[159, 8, 1, "", "__missing__"], [159, 7, 1, "", "default_factory"]], "collections.deque": [[159, 8, 1, "", "append"], [159, 8, 1, "", "appendleft"], [159, 8, 1, "", "clear"], [159, 8, 1, "", "copy"], [159, 8, 1, "", "count"], [159, 8, 1, "", "extend"], [159, 8, 1, "", "extendleft"], [159, 8, 1, "", "index"], [159, 8, 1, "", "insert"], [159, 7, 1, "", "maxlen"], [159, 8, 1, "", "pop"], [159, 8, 1, "", "popleft"], [159, 8, 1, "", "remove"], [159, 8, 1, "", "reverse"], [159, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[159, 8, 1, "", "_asdict"], [159, 7, 1, "", "_field_defaults"], [159, 7, 1, "", "_fields"], [159, 8, 1, "", "_make"], [159, 8, 1, "", "_replace"]], "colorsys": [[161, 11, 1, "", "hls_to_rgb"], [161, 11, 1, "", "hsv_to_rgb"], [161, 11, 1, "", "rgb_to_hls"], [161, 11, 1, "", "rgb_to_hsv"], [161, 11, 1, "", "rgb_to_yiq"], [161, 11, 1, "", "yiq_to_rgb"]], "compileall": [[162, 11, 1, "", "compile_dir"], [162, 11, 1, "", "compile_file"], [162, 11, 1, "", "compile_path"], [162, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [162, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [162, 14, 1, "cmdoption-compileall-b", "-b"], [162, 14, 1, "cmdoption-compileall-d", "-d"], [162, 14, 1, "cmdoption-compileall-e", "-e"], [162, 14, 1, "cmdoption-compileall-f", "-f"], [162, 14, 1, "cmdoption-compileall-i", "-i"], [162, 14, 1, "cmdoption-compileall-j", "-j"], [162, 14, 1, "cmdoption-compileall-l", "-l"], [162, 14, 1, "cmdoption-compileall-o", "-o"], [162, 14, 1, "cmdoption-compileall-p", "-p"], [162, 14, 1, "cmdoption-compileall-q", "-q"], [162, 14, 1, "cmdoption-compileall-r", "-r"], [162, 14, 1, "cmdoption-compileall-s", "-s"], [162, 14, 1, "cmdoption-compileall-x", "-x"], [162, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [162, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[165, 10, 0, "-", "futures"]], "concurrent.futures": [[165, 6, 1, "", "BrokenExecutor"], [165, 6, 1, "", "CancelledError"], [165, 12, 1, "", "Executor"], [165, 12, 1, "", "Future"], [165, 6, 1, "", "InvalidStateError"], [165, 12, 1, "", "ProcessPoolExecutor"], [165, 12, 1, "", "ThreadPoolExecutor"], [165, 6, 1, "", "TimeoutError"], [165, 11, 1, "", "as_completed"], [165, 11, 1, "", "wait"]], "concurrent.futures.Executor": [[165, 8, 1, "", "map"], [165, 8, 1, "", "shutdown"], [165, 8, 1, "", "submit"]], "concurrent.futures.Future": [[165, 8, 1, "", "add_done_callback"], [165, 8, 1, "", "cancel"], [165, 8, 1, "", "cancelled"], [165, 8, 1, "", "done"], [165, 8, 1, "", "exception"], [165, 8, 1, "", "result"], [165, 8, 1, "", "running"], [165, 8, 1, "", "set_exception"], [165, 8, 1, "", "set_result"], [165, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[165, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[165, 6, 1, "", "BrokenThreadPool"]], "configparser": [[166, 12, 1, "", "BasicInterpolation"], [166, 12, 1, "", "ConfigParser"], [166, 6, 1, "", "DuplicateOptionError"], [166, 6, 1, "", "DuplicateSectionError"], [166, 6, 1, "", "Error"], [166, 12, 1, "", "ExtendedInterpolation"], [166, 6, 1, "", "InterpolationDepthError"], [166, 6, 1, "", "InterpolationError"], [166, 6, 1, "", "InterpolationMissingOptionError"], [166, 6, 1, "", "InterpolationSyntaxError"], [166, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [166, 6, 1, "", "MissingSectionHeaderError"], [166, 6, 1, "", "NoOptionError"], [166, 6, 1, "", "NoSectionError"], [166, 6, 1, "", "ParsingError"], [166, 12, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[166, 7, 1, "", "BOOLEAN_STATES"], [166, 7, 1, "", "SECTCRE"], [166, 8, 1, "", "add_section"], [166, 8, 1, "", "defaults"], [166, 8, 1, "", "get"], [166, 8, 1, "", "getboolean"], [166, 8, 1, "", "getfloat"], [166, 8, 1, "", "getint"], [166, 8, 1, "", "has_option"], [166, 8, 1, "", "has_section"], [166, 8, 1, "", "items"], [166, 8, 1, "", "options"], [166, 8, 1, "", "optionxform"], [166, 8, 1, "", "read"], [166, 8, 1, "", "read_dict"], [166, 8, 1, "", "read_file"], [166, 8, 1, "", "read_string"], [166, 8, 1, "", "remove_option"], [166, 8, 1, "", "remove_section"], [166, 8, 1, "", "sections"], [166, 8, 1, "", "set"], [166, 8, 1, "", "write"]], "configparser.RawConfigParser": [[166, 8, 1, "", "add_section"], [166, 8, 1, "", "set"]], "container": [[344, 8, 1, "", "__iter__"]], "contextlib": [[168, 12, 1, "", "AbstractAsyncContextManager"], [168, 12, 1, "", "AbstractContextManager"], [168, 12, 1, "", "AsyncContextDecorator"], [168, 12, 1, "", "AsyncExitStack"], [168, 12, 1, "", "ContextDecorator"], [168, 12, 1, "", "ExitStack"], [168, 11, 1, "", "aclosing"], [168, 11, 1, "", "asynccontextmanager"], [168, 11, 1, "", "chdir"], [168, 11, 1, "", "closing"], [168, 11, 1, "", "contextmanager"], [168, 11, 1, "", "nullcontext"], [168, 11, 1, "", "redirect_stderr"], [168, 11, 1, "", "redirect_stdout"], [168, 11, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[168, 8, 1, "", "aclose"], [168, 8, 1, "", "enter_async_context"], [168, 8, 1, "", "push_async_callback"], [168, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[168, 8, 1, "", "callback"], [168, 8, 1, "", "close"], [168, 8, 1, "", "enter_context"], [168, 8, 1, "", "pop_all"], [168, 8, 1, "", "push"]], "contextmanager": [[344, 8, 1, "", "__enter__"], [344, 8, 1, "", "__exit__"]], "contextvars": [[169, 12, 1, "", "Context"], [169, 12, 1, "", "ContextVar"], [169, 12, 1, "", "Token"], [169, 11, 1, "", "copy_context"]], "contextvars.Context": [[169, 8, 1, "", "copy"], [169, 8, 1, "", "get"], [169, 8, 1, "", "items"], [169, 8, 1, "", "keys"], [169, 8, 1, "", "run"], [169, 8, 1, "", "values"]], "contextvars.ContextVar": [[169, 8, 1, "", "get"], [169, 7, 1, "", "name"], [169, 8, 1, "", "reset"], [169, 8, 1, "", "set"]], "contextvars.Token": [[169, 7, 1, "", "MISSING"], [169, 7, 1, "", "old_value"], [169, 7, 1, "", "var"]], "copy": [[170, 6, 1, "", "Error"], [170, 11, 1, "", "copy"], [170, 11, 1, "", "deepcopy"]], "copyreg": [[171, 11, 1, "", "constructor"], [171, 11, 1, "", "pickle"]], "coroutine": [[427, 8, 1, "", "close"], [427, 8, 1, "", "send"], [427, 8, 1, "", "throw"]], "crypt": [[172, 9, 1, "", "METHOD_BLOWFISH"], [172, 9, 1, "", "METHOD_CRYPT"], [172, 9, 1, "", "METHOD_MD5"], [172, 9, 1, "", "METHOD_SHA256"], [172, 9, 1, "", "METHOD_SHA512"], [172, 11, 1, "", "crypt"], [172, 7, 1, "", "methods"], [172, 11, 1, "", "mksalt"]], "csv": [[174, 12, 1, "", "Dialect"], [174, 12, 1, "", "DictReader"], [174, 12, 1, "", "DictWriter"], [174, 6, 1, "", "Error"], [174, 9, 1, "", "QUOTE_ALL"], [174, 9, 1, "", "QUOTE_MINIMAL"], [174, 9, 1, "", "QUOTE_NONE"], [174, 9, 1, "", "QUOTE_NONNUMERIC"], [174, 12, 1, "", "Sniffer"], [174, 12, 1, "", "excel"], [174, 12, 1, "", "excel_tab"], [174, 11, 1, "", "field_size_limit"], [174, 11, 1, "", "get_dialect"], [174, 11, 1, "", "list_dialects"], [174, 11, 1, "", "reader"], [174, 11, 1, "", "register_dialect"], [174, 12, 1, "", "unix_dialect"], [174, 11, 1, "", "unregister_dialect"], [174, 11, 1, "", "writer"]], "csv.Dialect": [[174, 7, 1, "", "delimiter"], [174, 7, 1, "", "doublequote"], [174, 7, 1, "", "escapechar"], [174, 7, 1, "", "lineterminator"], [174, 7, 1, "", "quotechar"], [174, 7, 1, "", "quoting"], [174, 7, 1, "", "skipinitialspace"], [174, 7, 1, "", "strict"]], "csv.DictWriter": [[174, 8, 1, "", "writeheader"]], "csv.Sniffer": [[174, 8, 1, "", "has_header"], [174, 8, 1, "", "sniff"]], "csv.csvreader": [[174, 8, 1, "", "__next__"], [174, 7, 1, "", "dialect"], [174, 7, 1, "", "fieldnames"], [174, 7, 1, "", "line_num"]], "csv.csvwriter": [[174, 7, 1, "", "dialect"], [174, 8, 1, "", "writerow"], [174, 8, 1, "", "writerows"]], "ctypes": [[175, 6, 1, "", "ArgumentError"], [175, 12, 1, "", "Array"], [175, 12, 1, "", "BigEndianStructure"], [175, 12, 1, "", "BigEndianUnion"], [175, 12, 1, "", "CDLL"], [175, 11, 1, "", "CFUNCTYPE"], [175, 11, 1, "", "DllCanUnloadNow"], [175, 11, 1, "", "DllGetClassObject"], [175, 11, 1, "", "FormatError"], [175, 11, 1, "", "GetLastError"], [175, 12, 1, "", "HRESULT"], [175, 12, 1, "", "LibraryLoader"], [175, 12, 1, "", "LittleEndianStructure"], [175, 12, 1, "", "LittleEndianUnion"], [175, 12, 1, "", "OleDLL"], [175, 11, 1, "", "POINTER"], [175, 11, 1, "", "PYFUNCTYPE"], [175, 12, 1, "", "PyDLL"], [175, 12, 1, "", "Structure"], [175, 12, 1, "", "Union"], [175, 11, 1, "", "WINFUNCTYPE"], [175, 12, 1, "", "WinDLL"], [175, 11, 1, "", "WinError"], [175, 12, 1, "", "_CData"], [175, 12, 1, "", "_FuncPtr"], [175, 12, 1, "", "_Pointer"], [175, 12, 1, "", "_SimpleCData"], [175, 11, 1, "", "addressof"], [175, 11, 1, "", "alignment"], [175, 11, 1, "", "byref"], [175, 12, 1, "", "c_bool"], [175, 12, 1, "", "c_byte"], [175, 12, 1, "", "c_char"], [175, 12, 1, "", "c_char_p"], [175, 12, 1, "", "c_double"], [175, 12, 1, "", "c_float"], [175, 12, 1, "", "c_int"], [175, 12, 1, "", "c_int16"], [175, 12, 1, "", "c_int32"], [175, 12, 1, "", "c_int64"], [175, 12, 1, "", "c_int8"], [175, 12, 1, "", "c_long"], [175, 12, 1, "", "c_longdouble"], [175, 12, 1, "", "c_longlong"], [175, 12, 1, "", "c_short"], [175, 12, 1, "", "c_size_t"], [175, 12, 1, "", "c_ssize_t"], [175, 12, 1, "", "c_time_t"], [175, 12, 1, "", "c_ubyte"], [175, 12, 1, "", "c_uint"], [175, 12, 1, "", "c_uint16"], [175, 12, 1, "", "c_uint32"], [175, 12, 1, "", "c_uint64"], [175, 12, 1, "", "c_uint8"], [175, 12, 1, "", "c_ulong"], [175, 12, 1, "", "c_ulonglong"], [175, 12, 1, "", "c_ushort"], [175, 12, 1, "", "c_void_p"], [175, 12, 1, "", "c_wchar"], [175, 12, 1, "", "c_wchar_p"], [175, 11, 1, "", "cast"], [175, 11, 1, "", "create_string_buffer"], [175, 11, 1, "", "create_unicode_buffer"], [175, 11, 1, "", "get_errno"], [175, 11, 1, "", "get_last_error"], [175, 11, 1, "", "memmove"], [175, 11, 1, "", "memset"], [175, 11, 1, "", "pointer"], [175, 12, 1, "", "py_object"], [175, 11, 1, "", "resize"], [175, 11, 1, "", "set_errno"], [175, 11, 1, "", "set_last_error"], [175, 11, 1, "", "sizeof"], [175, 11, 1, "", "string_at"], [175, 11, 1, "", "wstring_at"]], "ctypes.Array": [[175, 7, 1, "", "_length_"], [175, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[175, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[175, 7, 1, "", "_handle"], [175, 7, 1, "", "_name"]], "ctypes.Structure": [[175, 7, 1, "", "_anonymous_"], [175, 7, 1, "", "_fields_"], [175, 7, 1, "", "_pack_"]], "ctypes._CData": [[175, 7, 1, "", "_b_base_"], [175, 7, 1, "", "_b_needsfree_"], [175, 7, 1, "", "_objects"], [175, 8, 1, "", "from_address"], [175, 8, 1, "", "from_buffer"], [175, 8, 1, "", "from_buffer_copy"], [175, 8, 1, "", "from_param"], [175, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[175, 7, 1, "", "argtypes"], [175, 7, 1, "", "errcheck"], [175, 7, 1, "", "restype"]], "ctypes._Pointer": [[175, 7, 1, "", "_type_"], [175, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[175, 7, 1, "", "value"]], "ctypes.util": [[175, 11, 1, "", "find_library"], [175, 11, 1, "", "find_msvcrt"]], "curses": [[176, 9, 1, "", "ERR"], [176, 9, 1, "", "OK"], [177, 10, 0, "-", "ascii"], [176, 11, 1, "", "baudrate"], [176, 11, 1, "", "beep"], [176, 11, 1, "", "can_change_color"], [176, 11, 1, "", "cbreak"], [176, 11, 1, "", "color_content"], [176, 11, 1, "", "color_pair"], [176, 11, 1, "", "curs_set"], [176, 11, 1, "", "def_prog_mode"], [176, 11, 1, "", "def_shell_mode"], [176, 11, 1, "", "delay_output"], [176, 11, 1, "", "doupdate"], [176, 11, 1, "", "echo"], [176, 11, 1, "", "endwin"], [176, 11, 1, "", "erasechar"], [176, 6, 1, "", "error"], [176, 11, 1, "", "filter"], [176, 11, 1, "", "flash"], [176, 11, 1, "", "flushinp"], [176, 11, 1, "", "get_escdelay"], [176, 11, 1, "", "get_tabsize"], [176, 11, 1, "", "getmouse"], [176, 11, 1, "", "getsyx"], [176, 11, 1, "", "getwin"], [176, 11, 1, "", "halfdelay"], [176, 11, 1, "", "has_colors"], [176, 11, 1, "", "has_extended_color_support"], [176, 11, 1, "", "has_ic"], [176, 11, 1, "", "has_il"], [176, 11, 1, "", "has_key"], [176, 11, 1, "", "init_color"], [176, 11, 1, "", "init_pair"], [176, 11, 1, "", "initscr"], [176, 11, 1, "", "is_term_resized"], [176, 11, 1, "", "isendwin"], [176, 11, 1, "", "keyname"], [176, 11, 1, "", "killchar"], [176, 11, 1, "", "longname"], [176, 11, 1, "", "meta"], [176, 11, 1, "", "mouseinterval"], [176, 11, 1, "", "mousemask"], [176, 11, 1, "", "napms"], [176, 9, 1, "", "ncurses_version"], [176, 11, 1, "", "newpad"], [176, 11, 1, "", "newwin"], [176, 11, 1, "", "nl"], [176, 11, 1, "", "nocbreak"], [176, 11, 1, "", "noecho"], [176, 11, 1, "", "nonl"], [176, 11, 1, "", "noqiflush"], [176, 11, 1, "", "noraw"], [176, 11, 1, "", "pair_content"], [176, 11, 1, "", "pair_number"], [178, 10, 0, "-", "panel"], [176, 11, 1, "", "putp"], [176, 11, 1, "", "qiflush"], [176, 11, 1, "", "raw"], [176, 11, 1, "", "reset_prog_mode"], [176, 11, 1, "", "reset_shell_mode"], [176, 11, 1, "", "resetty"], [176, 11, 1, "", "resize_term"], [176, 11, 1, "", "resizeterm"], [176, 11, 1, "", "savetty"], [176, 11, 1, "", "set_escdelay"], [176, 11, 1, "", "set_tabsize"], [176, 11, 1, "", "setsyx"], [176, 11, 1, "", "setupterm"], [176, 11, 1, "", "start_color"], [176, 11, 1, "", "termattrs"], [176, 11, 1, "", "termname"], [176, 10, 0, "-", "textpad"], [176, 11, 1, "", "tigetflag"], [176, 11, 1, "", "tigetnum"], [176, 11, 1, "", "tigetstr"], [176, 11, 1, "", "tparm"], [176, 11, 1, "", "typeahead"], [176, 11, 1, "", "unctrl"], [176, 11, 1, "", "unget_wch"], [176, 11, 1, "", "ungetch"], [176, 11, 1, "", "ungetmouse"], [176, 11, 1, "", "update_lines_cols"], [176, 11, 1, "", "use_default_colors"], [176, 11, 1, "", "use_env"], [176, 9, 1, "", "version"], [176, 11, 1, "", "wrapper"]], "curses.ascii": [[177, 11, 1, "", "alt"], [177, 11, 1, "", "ascii"], [177, 9, 1, "", "controlnames"], [177, 11, 1, "", "ctrl"], [177, 11, 1, "", "isalnum"], [177, 11, 1, "", "isalpha"], [177, 11, 1, "", "isascii"], [177, 11, 1, "", "isblank"], [177, 11, 1, "", "iscntrl"], [177, 11, 1, "", "isctrl"], [177, 11, 1, "", "isdigit"], [177, 11, 1, "", "isgraph"], [177, 11, 1, "", "islower"], [177, 11, 1, "", "ismeta"], [177, 11, 1, "", "isprint"], [177, 11, 1, "", "ispunct"], [177, 11, 1, "", "isspace"], [177, 11, 1, "", "isupper"], [177, 11, 1, "", "isxdigit"], [177, 11, 1, "", "unctrl"]], "curses.panel.Panel": [[178, 8, 1, "", "above"], [178, 8, 1, "", "below"], [178, 8, 1, "", "bottom"], [178, 8, 1, "", "hidden"], [178, 8, 1, "", "hide"], [178, 8, 1, "", "move"], [178, 8, 1, "", "replace"], [178, 8, 1, "", "set_userptr"], [178, 8, 1, "", "show"], [178, 8, 1, "", "top"], [178, 8, 1, "", "userptr"], [178, 8, 1, "", "window"]], "curses.panel": [[178, 11, 1, "", "bottom_panel"], [178, 11, 1, "", "new_panel"], [178, 11, 1, "", "top_panel"], [178, 11, 1, "", "update_panels"]], "curses.textpad": [[176, 12, 1, "", "Textbox"], [176, 11, 1, "", "rectangle"]], "curses.textpad.Textbox": [[176, 8, 1, "", "do_command"], [176, 8, 1, "", "edit"], [176, 8, 1, "", "gather"], [176, 7, 1, "", "stripspaces"]], "curses.window": [[176, 8, 1, "", "addch"], [176, 8, 1, "", "addnstr"], [176, 8, 1, "", "addstr"], [176, 8, 1, "", "attroff"], [176, 8, 1, "", "attron"], [176, 8, 1, "", "attrset"], [176, 8, 1, "", "bkgd"], [176, 8, 1, "", "bkgdset"], [176, 8, 1, "", "border"], [176, 8, 1, "", "box"], [176, 8, 1, "", "chgat"], [176, 8, 1, "", "clear"], [176, 8, 1, "", "clearok"], [176, 8, 1, "", "clrtobot"], [176, 8, 1, "", "clrtoeol"], [176, 8, 1, "", "cursyncup"], [176, 8, 1, "", "delch"], [176, 8, 1, "", "deleteln"], [176, 8, 1, "", "derwin"], [176, 8, 1, "", "echochar"], [176, 8, 1, "", "enclose"], [176, 7, 1, "", "encoding"], [176, 8, 1, "", "erase"], [176, 8, 1, "", "get_wch"], [176, 8, 1, "", "getbegyx"], [176, 8, 1, "", "getbkgd"], [176, 8, 1, "", "getch"], [176, 8, 1, "", "getkey"], [176, 8, 1, "", "getmaxyx"], [176, 8, 1, "", "getparyx"], [176, 8, 1, "", "getstr"], [176, 8, 1, "", "getyx"], [176, 8, 1, "", "hline"], [176, 8, 1, "", "idcok"], [176, 8, 1, "", "idlok"], [176, 8, 1, "", "immedok"], [176, 8, 1, "", "inch"], [176, 8, 1, "", "insch"], [176, 8, 1, "", "insdelln"], [176, 8, 1, "", "insertln"], [176, 8, 1, "", "insnstr"], [176, 8, 1, "", "insstr"], [176, 8, 1, "", "instr"], [176, 8, 1, "", "is_linetouched"], [176, 8, 1, "", "is_wintouched"], [176, 8, 1, "", "keypad"], [176, 8, 1, "", "leaveok"], [176, 8, 1, "", "move"], [176, 8, 1, "", "mvderwin"], [176, 8, 1, "", "mvwin"], [176, 8, 1, "", "nodelay"], [176, 8, 1, "", "notimeout"], [176, 8, 1, "", "noutrefresh"], [176, 8, 1, "", "overlay"], [176, 8, 1, "", "overwrite"], [176, 8, 1, "", "putwin"], [176, 8, 1, "", "redrawln"], [176, 8, 1, "", "redrawwin"], [176, 8, 1, "", "refresh"], [176, 8, 1, "", "resize"], [176, 8, 1, "", "scroll"], [176, 8, 1, "", "scrollok"], [176, 8, 1, "", "setscrreg"], [176, 8, 1, "", "standend"], [176, 8, 1, "", "standout"], [176, 8, 1, "", "subpad"], [176, 8, 1, "", "subwin"], [176, 8, 1, "", "syncdown"], [176, 8, 1, "", "syncok"], [176, 8, 1, "", "syncup"], [176, 8, 1, "", "timeout"], [176, 8, 1, "", "touchline"], [176, 8, 1, "", "touchwin"], [176, 8, 1, "", "untouchwin"], [176, 8, 1, "", "vline"]], "dataclasses": [[180, 12, 1, "", "Field"], [180, 6, 1, "", "FrozenInstanceError"], [180, 9, 1, "", "KW_ONLY"], [180, 9, 1, "", "MISSING"], [180, 11, 1, "", "asdict"], [180, 11, 1, "", "astuple"], [180, 11, 1, "", "dataclass"], [180, 11, 1, "", "field"], [180, 11, 1, "", "fields"], [180, 11, 1, "", "is_dataclass"], [180, 11, 1, "", "make_dataclass"], [180, 11, 1, "", "replace"]], "datetime": [[182, 9, 1, "", "MAXYEAR"], [182, 9, 1, "", "MINYEAR"], [182, 7, 1, "", "UTC"], [182, 12, 1, "", "date"], [182, 12, 1, "", "datetime"], [182, 12, 1, "", "time"], [182, 12, 1, "", "timedelta"], [182, 12, 1, "", "timezone"], [182, 12, 1, "", "tzinfo"]], "datetime.date": [[182, 8, 1, "", "__format__"], [182, 8, 1, "", "__str__"], [182, 8, 1, "", "ctime"], [182, 7, 1, "", "day"], [182, 8, 1, "", "fromisocalendar"], [182, 8, 1, "", "fromisoformat"], [182, 8, 1, "", "fromordinal"], [182, 8, 1, "", "fromtimestamp"], [182, 8, 1, "", "isocalendar"], [182, 8, 1, "", "isoformat"], [182, 8, 1, "", "isoweekday"], [182, 7, 1, "", "max"], [182, 7, 1, "", "min"], [182, 7, 1, "", "month"], [182, 8, 1, "", "replace"], [182, 7, 1, "", "resolution"], [182, 8, 1, "", "strftime"], [182, 8, 1, "", "timetuple"], [182, 8, 1, "", "today"], [182, 8, 1, "", "toordinal"], [182, 8, 1, "", "weekday"], [182, 7, 1, "", "year"]], "datetime.datetime": [[182, 8, 1, "", "__format__"], [182, 8, 1, "", "__str__"], [182, 8, 1, "", "astimezone"], [182, 8, 1, "", "combine"], [182, 8, 1, "", "ctime"], [182, 8, 1, "", "date"], [182, 7, 1, "", "day"], [182, 8, 1, "", "dst"], [182, 7, 1, "", "fold"], [182, 8, 1, "", "fromisocalendar"], [182, 8, 1, "", "fromisoformat"], [182, 8, 1, "", "fromordinal"], [182, 8, 1, "", "fromtimestamp"], [182, 7, 1, "", "hour"], [182, 8, 1, "", "isocalendar"], [182, 8, 1, "", "isoformat"], [182, 8, 1, "", "isoweekday"], [182, 7, 1, "", "max"], [182, 7, 1, "", "microsecond"], [182, 7, 1, "", "min"], [182, 7, 1, "", "minute"], [182, 7, 1, "", "month"], [182, 8, 1, "", "now"], [182, 8, 1, "", "replace"], [182, 7, 1, "", "resolution"], [182, 7, 1, "", "second"], [182, 8, 1, "", "strftime"], [182, 8, 1, "", "strptime"], [182, 8, 1, "", "time"], [182, 8, 1, "", "timestamp"], [182, 8, 1, "", "timetuple"], [182, 8, 1, "", "timetz"], [182, 8, 1, "", "today"], [182, 8, 1, "", "toordinal"], [182, 7, 1, "", "tzinfo"], [182, 8, 1, "", "tzname"], [182, 8, 1, "", "utcfromtimestamp"], [182, 8, 1, "", "utcnow"], [182, 8, 1, "", "utcoffset"], [182, 8, 1, "", "utctimetuple"], [182, 8, 1, "", "weekday"], [182, 7, 1, "", "year"]], "datetime.time": [[182, 8, 1, "", "__format__"], [182, 8, 1, "", "__str__"], [182, 8, 1, "", "dst"], [182, 7, 1, "", "fold"], [182, 8, 1, "", "fromisoformat"], [182, 7, 1, "", "hour"], [182, 8, 1, "", "isoformat"], [182, 7, 1, "", "max"], [182, 7, 1, "", "microsecond"], [182, 7, 1, "", "min"], [182, 7, 1, "", "minute"], [182, 8, 1, "", "replace"], [182, 7, 1, "", "resolution"], [182, 7, 1, "", "second"], [182, 8, 1, "", "strftime"], [182, 7, 1, "", "tzinfo"], [182, 8, 1, "", "tzname"], [182, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[182, 7, 1, "", "max"], [182, 7, 1, "", "min"], [182, 7, 1, "", "resolution"], [182, 8, 1, "", "total_seconds"]], "datetime.timezone": [[182, 8, 1, "", "dst"], [182, 8, 1, "", "fromutc"], [182, 8, 1, "", "tzname"], [182, 7, 1, "", "utc"], [182, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[182, 8, 1, "", "dst"], [182, 8, 1, "", "fromutc"], [182, 8, 1, "", "tzname"], [182, 8, 1, "", "utcoffset"]], "dbm": [[183, 10, 0, "-", "dumb"], [183, 6, 1, "", "error"], [183, 10, 0, "-", "gnu"], [183, 10, 0, "-", "ndbm"], [183, 11, 1, "", "open"], [183, 11, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[183, 8, 1, "", "close"], [183, 8, 1, "", "sync"]], "dbm.dumb": [[183, 6, 1, "", "error"], [183, 11, 1, "", "open"]], "dbm.gnu": [[183, 6, 1, "", "error"], [183, 11, 1, "", "open"]], "dbm.gnu.gdbm": [[183, 8, 1, "", "close"], [183, 8, 1, "", "firstkey"], [183, 8, 1, "", "nextkey"], [183, 8, 1, "", "reorganize"], [183, 8, 1, "", "sync"]], "dbm.ndbm": [[183, 6, 1, "", "error"], [183, 9, 1, "", "library"], [183, 11, 1, "", "open"]], "dbm.ndbm.ndbm": [[183, 8, 1, "", "close"]], "decimal": [[185, 12, 1, "", "BasicContext"], [185, 12, 1, "", "Clamped"], [185, 12, 1, "", "Context"], [185, 12, 1, "", "Decimal"], [185, 12, 1, "", "DecimalException"], [185, 12, 1, "", "DefaultContext"], [185, 12, 1, "", "DivisionByZero"], [185, 12, 1, "", "ExtendedContext"], [185, 12, 1, "", "FloatOperation"], [185, 9, 1, "", "HAVE_CONTEXTVAR"], [185, 9, 1, "", "HAVE_THREADS"], [185, 12, 1, "", "Inexact"], [185, 12, 1, "", "InvalidOperation"], [185, 9, 1, "", "MAX_EMAX"], [185, 9, 1, "", "MAX_PREC"], [185, 9, 1, "", "MIN_EMIN"], [185, 9, 1, "", "MIN_ETINY"], [185, 12, 1, "", "Overflow"], [185, 9, 1, "", "ROUND_05UP"], [185, 9, 1, "", "ROUND_CEILING"], [185, 9, 1, "", "ROUND_DOWN"], [185, 9, 1, "", "ROUND_FLOOR"], [185, 9, 1, "", "ROUND_HALF_DOWN"], [185, 9, 1, "", "ROUND_HALF_EVEN"], [185, 9, 1, "", "ROUND_HALF_UP"], [185, 9, 1, "", "ROUND_UP"], [185, 12, 1, "", "Rounded"], [185, 12, 1, "", "Subnormal"], [185, 12, 1, "", "Underflow"], [185, 11, 1, "", "getcontext"], [185, 11, 1, "", "localcontext"], [185, 11, 1, "", "setcontext"]], "decimal.Context": [[185, 8, 1, "", "Etiny"], [185, 8, 1, "", "Etop"], [185, 8, 1, "", "abs"], [185, 8, 1, "", "add"], [185, 8, 1, "", "canonical"], [185, 8, 1, "", "clear_flags"], [185, 8, 1, "", "clear_traps"], [185, 8, 1, "", "compare"], [185, 8, 1, "", "compare_signal"], [185, 8, 1, "", "compare_total"], [185, 8, 1, "", "compare_total_mag"], [185, 8, 1, "", "copy"], [185, 8, 1, "", "copy_abs"], [185, 8, 1, "", "copy_decimal"], [185, 8, 1, "", "copy_negate"], [185, 8, 1, "", "copy_sign"], [185, 8, 1, "", "create_decimal"], [185, 8, 1, "", "create_decimal_from_float"], [185, 8, 1, "", "divide"], [185, 8, 1, "", "divide_int"], [185, 8, 1, "", "divmod"], [185, 8, 1, "", "exp"], [185, 8, 1, "", "fma"], [185, 8, 1, "", "is_canonical"], [185, 8, 1, "", "is_finite"], [185, 8, 1, "", "is_infinite"], [185, 8, 1, "", "is_nan"], [185, 8, 1, "", "is_normal"], [185, 8, 1, "", "is_qnan"], [185, 8, 1, "", "is_signed"], [185, 8, 1, "", "is_snan"], [185, 8, 1, "", "is_subnormal"], [185, 8, 1, "", "is_zero"], [185, 8, 1, "", "ln"], [185, 8, 1, "", "log10"], [185, 8, 1, "", "logb"], [185, 8, 1, "", "logical_and"], [185, 8, 1, "", "logical_invert"], [185, 8, 1, "", "logical_or"], [185, 8, 1, "", "logical_xor"], [185, 8, 1, "", "max"], [185, 8, 1, "", "max_mag"], [185, 8, 1, "", "min"], [185, 8, 1, "", "min_mag"], [185, 8, 1, "", "minus"], [185, 8, 1, "", "multiply"], [185, 8, 1, "", "next_minus"], [185, 8, 1, "", "next_plus"], [185, 8, 1, "", "next_toward"], [185, 8, 1, "", "normalize"], [185, 8, 1, "", "number_class"], [185, 8, 1, "", "plus"], [185, 8, 1, "", "power"], [185, 8, 1, "", "quantize"], [185, 8, 1, "", "radix"], [185, 8, 1, "", "remainder"], [185, 8, 1, "", "remainder_near"], [185, 8, 1, "", "rotate"], [185, 8, 1, "", "same_quantum"], [185, 8, 1, "", "scaleb"], [185, 8, 1, "", "shift"], [185, 8, 1, "", "sqrt"], [185, 8, 1, "", "subtract"], [185, 8, 1, "", "to_eng_string"], [185, 8, 1, "", "to_integral_exact"], [185, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[185, 8, 1, "", "adjusted"], [185, 8, 1, "", "as_integer_ratio"], [185, 8, 1, "", "as_tuple"], [185, 8, 1, "", "canonical"], [185, 8, 1, "", "compare"], [185, 8, 1, "", "compare_signal"], [185, 8, 1, "", "compare_total"], [185, 8, 1, "", "compare_total_mag"], [185, 8, 1, "", "conjugate"], [185, 8, 1, "", "copy_abs"], [185, 8, 1, "", "copy_negate"], [185, 8, 1, "", "copy_sign"], [185, 8, 1, "", "exp"], [185, 8, 1, "", "fma"], [185, 8, 1, "", "from_float"], [185, 8, 1, "", "is_canonical"], [185, 8, 1, "", "is_finite"], [185, 8, 1, "", "is_infinite"], [185, 8, 1, "", "is_nan"], [185, 8, 1, "", "is_normal"], [185, 8, 1, "", "is_qnan"], [185, 8, 1, "", "is_signed"], [185, 8, 1, "", "is_snan"], [185, 8, 1, "", "is_subnormal"], [185, 8, 1, "", "is_zero"], [185, 8, 1, "", "ln"], [185, 8, 1, "", "log10"], [185, 8, 1, "", "logb"], [185, 8, 1, "", "logical_and"], [185, 8, 1, "", "logical_invert"], [185, 8, 1, "", "logical_or"], [185, 8, 1, "", "logical_xor"], [185, 8, 1, "", "max"], [185, 8, 1, "", "max_mag"], [185, 8, 1, "", "min"], [185, 8, 1, "", "min_mag"], [185, 8, 1, "", "next_minus"], [185, 8, 1, "", "next_plus"], [185, 8, 1, "", "next_toward"], [185, 8, 1, "", "normalize"], [185, 8, 1, "", "number_class"], [185, 8, 1, "", "quantize"], [185, 8, 1, "", "radix"], [185, 8, 1, "", "remainder_near"], [185, 8, 1, "", "rotate"], [185, 8, 1, "", "same_quantum"], [185, 8, 1, "", "scaleb"], [185, 8, 1, "", "shift"], [185, 8, 1, "", "sqrt"], [185, 8, 1, "", "to_eng_string"], [185, 8, 1, "", "to_integral"], [185, 8, 1, "", "to_integral_exact"], [185, 8, 1, "", "to_integral_value"]], "definition": [[344, 7, 1, "", "__name__"], [344, 7, 1, "", "__qualname__"]], "dict": [[344, 8, 1, "", "clear"], [344, 8, 1, "", "copy"], [344, 8, 1, "", "fromkeys"], [344, 8, 1, "", "get"], [344, 8, 1, "", "items"], [344, 8, 1, "", "keys"], [344, 8, 1, "", "pop"], [344, 8, 1, "", "popitem"], [344, 8, 1, "", "setdefault"], [344, 8, 1, "", "update"], [344, 8, 1, "", "values"]], "difflib": [[189, 12, 1, "", "Differ"], [189, 12, 1, "", "HtmlDiff"], [189, 11, 1, "", "IS_CHARACTER_JUNK"], [189, 11, 1, "", "IS_LINE_JUNK"], [189, 12, 1, "", "SequenceMatcher"], [189, 11, 1, "", "context_diff"], [189, 11, 1, "", "diff_bytes"], [189, 11, 1, "", "get_close_matches"], [189, 11, 1, "", "ndiff"], [189, 11, 1, "", "restore"], [189, 11, 1, "", "unified_diff"]], "difflib.Differ": [[189, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[189, 8, 1, "", "__init__"], [189, 8, 1, "", "make_file"], [189, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[189, 8, 1, "", "find_longest_match"], [189, 8, 1, "", "get_grouped_opcodes"], [189, 8, 1, "", "get_matching_blocks"], [189, 8, 1, "", "get_opcodes"], [189, 8, 1, "", "quick_ratio"], [189, 8, 1, "", "ratio"], [189, 8, 1, "", "real_quick_ratio"], [189, 8, 1, "", "set_seq1"], [189, 8, 1, "", "set_seq2"], [189, 8, 1, "", "set_seqs"]], "dis": [[190, 12, 1, "", "Bytecode"], [190, 12, 1, "", "Instruction"], [190, 12, 1, "", "Positions"], [190, 9, 1, "", "cmp_op"], [190, 11, 1, "", "code_info"], [190, 11, 1, "", "dis"], [190, 11, 1, "", "disassemble"], [190, 11, 1, "", "disco"], [190, 11, 1, "", "distb"], [190, 11, 1, "", "findlabels"], [190, 11, 1, "", "findlinestarts"], [190, 11, 1, "", "get_instructions"], [190, 9, 1, "", "hasarg"], [190, 9, 1, "", "hascompare"], [190, 9, 1, "", "hasconst"], [190, 9, 1, "", "hasexc"], [190, 9, 1, "", "hasfree"], [190, 9, 1, "", "hasjabs"], [190, 9, 1, "", "hasjrel"], [190, 9, 1, "", "haslocal"], [190, 9, 1, "", "hasname"], [190, 9, 1, "", "opmap"], [190, 9, 1, "", "opname"], [190, 11, 1, "", "show_code"], [190, 11, 1, "", "stack_effect"]], "dis.Bytecode": [[190, 9, 1, "", "codeobj"], [190, 8, 1, "", "dis"], [190, 9, 1, "", "first_line"], [190, 8, 1, "", "from_traceback"], [190, 8, 1, "", "info"]], "dis.Instruction": [[190, 9, 1, "", "arg"], [190, 9, 1, "", "argrepr"], [190, 9, 1, "", "argval"], [190, 9, 1, "", "is_jump_target"], [190, 9, 1, "", "offset"], [190, 9, 1, "", "opcode"], [190, 9, 1, "", "opname"], [190, 9, 1, "", "positions"], [190, 9, 1, "", "starts_line"]], "dis.Positions": [[190, 9, 1, "", "col_offset"], [190, 9, 1, "", "end_col_offset"], [190, 9, 1, "", "end_lineno"], [190, 9, 1, "", "lineno"]], "doctest": [[192, 9, 1, "", "COMPARISON_FLAGS"], [192, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [192, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [192, 12, 1, "", "DebugRunner"], [192, 11, 1, "", "DocFileSuite"], [192, 12, 1, "", "DocTest"], [192, 6, 1, "", "DocTestFailure"], [192, 12, 1, "", "DocTestFinder"], [192, 12, 1, "", "DocTestParser"], [192, 12, 1, "", "DocTestRunner"], [192, 11, 1, "", "DocTestSuite"], [192, 9, 1, "", "ELLIPSIS"], [192, 12, 1, "", "Example"], [192, 9, 1, "", "FAIL_FAST"], [192, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [192, 9, 1, "", "NORMALIZE_WHITESPACE"], [192, 12, 1, "", "OutputChecker"], [192, 9, 1, "", "REPORTING_FLAGS"], [192, 9, 1, "", "REPORT_CDIFF"], [192, 9, 1, "", "REPORT_NDIFF"], [192, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [192, 9, 1, "", "REPORT_UDIFF"], [192, 9, 1, "", "SKIP"], [192, 6, 1, "", "UnexpectedException"], [192, 11, 1, "", "debug"], [192, 11, 1, "", "debug_src"], [192, 11, 1, "", "register_optionflag"], [192, 11, 1, "", "run_docstring_examples"], [192, 11, 1, "", "script_from_examples"], [192, 11, 1, "", "set_unittest_reportflags"], [192, 11, 1, "", "testfile"], [192, 11, 1, "", "testmod"], [192, 11, 1, "", "testsource"]], "doctest.DocTest": [[192, 7, 1, "", "docstring"], [192, 7, 1, "", "examples"], [192, 7, 1, "", "filename"], [192, 7, 1, "", "globs"], [192, 7, 1, "", "lineno"], [192, 7, 1, "", "name"]], "doctest.DocTestFailure": [[192, 7, 1, "", "example"], [192, 7, 1, "", "got"], [192, 7, 1, "", "test"]], "doctest.DocTestFinder": [[192, 8, 1, "", "find"]], "doctest.DocTestParser": [[192, 8, 1, "", "get_doctest"], [192, 8, 1, "", "get_examples"], [192, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[192, 8, 1, "", "report_failure"], [192, 8, 1, "", "report_start"], [192, 8, 1, "", "report_success"], [192, 8, 1, "", "report_unexpected_exception"], [192, 8, 1, "", "run"], [192, 8, 1, "", "summarize"]], "doctest.Example": [[192, 7, 1, "", "exc_msg"], [192, 7, 1, "", "indent"], [192, 7, 1, "", "lineno"], [192, 7, 1, "", "options"], [192, 7, 1, "", "source"], [192, 7, 1, "", "want"]], "doctest.OutputChecker": [[192, 8, 1, "", "check_output"], [192, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[192, 7, 1, "", "example"], [192, 7, 1, "", "exc_info"], [192, 7, 1, "", "test"]], "email": [[194, 10, 0, "-", "charset"], [196, 10, 0, "-", "contentmanager"], [197, 10, 0, "-", "encoders"], [198, 10, 0, "-", "errors"], [200, 10, 0, "-", "generator"], [201, 10, 0, "-", "header"], [202, 10, 0, "-", "headerregistry"], [203, 10, 0, "-", "iterators"], [204, 10, 0, "-", "message"], [206, 11, 1, "", "message_from_binary_file"], [206, 11, 1, "", "message_from_bytes"], [206, 11, 1, "", "message_from_file"], [206, 11, 1, "", "message_from_string"], [205, 10, 0, "-", "mime"], [206, 10, 0, "-", "parser"], [207, 10, 0, "-", "policy"], [208, 10, 0, "-", "utils"]], "email.charset": [[194, 12, 1, "", "Charset"], [194, 11, 1, "", "add_alias"], [194, 11, 1, "", "add_charset"], [194, 11, 1, "", "add_codec"]], "email.charset.Charset": [[194, 8, 1, "", "__eq__"], [194, 8, 1, "", "__ne__"], [194, 8, 1, "", "__str__"], [194, 8, 1, "", "body_encode"], [194, 7, 1, "", "body_encoding"], [194, 8, 1, "", "get_body_encoding"], [194, 8, 1, "", "get_output_charset"], [194, 8, 1, "", "header_encode"], [194, 8, 1, "", "header_encode_lines"], [194, 7, 1, "", "header_encoding"], [194, 7, 1, "", "input_charset"], [194, 7, 1, "", "input_codec"], [194, 7, 1, "", "output_charset"], [194, 7, 1, "", "output_codec"]], "email.contentmanager": [[196, 12, 1, "", "ContentManager"], [196, 8, 1, "", "get_content"], [196, 9, 1, "", "raw_data_manager"], [196, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[196, 8, 1, "", "add_get_handler"], [196, 8, 1, "", "add_set_handler"], [196, 8, 1, "", "get_content"], [196, 8, 1, "", "set_content"]], "email.encoders": [[197, 11, 1, "", "encode_7or8bit"], [197, 11, 1, "", "encode_base64"], [197, 11, 1, "", "encode_noop"], [197, 11, 1, "", "encode_quopri"]], "email.errors": [[198, 6, 1, "", "BoundaryError"], [198, 6, 1, "", "HeaderParseError"], [198, 6, 1, "", "MessageError"], [198, 6, 1, "", "MessageParseError"], [198, 6, 1, "", "MultipartConversionError"]], "email.generator": [[200, 12, 1, "", "BytesGenerator"], [200, 12, 1, "", "DecodedGenerator"], [200, 12, 1, "", "Generator"]], "email.generator.BytesGenerator": [[200, 8, 1, "", "clone"], [200, 8, 1, "", "flatten"], [200, 8, 1, "", "write"]], "email.generator.Generator": [[200, 8, 1, "", "clone"], [200, 8, 1, "", "flatten"], [200, 8, 1, "", "write"]], "email.header": [[201, 12, 1, "", "Header"], [201, 11, 1, "", "decode_header"], [201, 11, 1, "", "make_header"]], "email.header.Header": [[201, 8, 1, "", "__eq__"], [201, 8, 1, "", "__ne__"], [201, 8, 1, "", "__str__"], [201, 8, 1, "", "append"], [201, 8, 1, "", "encode"]], "email.headerregistry": [[202, 12, 1, "", "Address"], [202, 12, 1, "", "AddressHeader"], [202, 12, 1, "", "BaseHeader"], [202, 12, 1, "", "ContentDispositionHeader"], [202, 12, 1, "", "ContentTransferEncoding"], [202, 12, 1, "", "ContentTypeHeader"], [202, 12, 1, "", "DateHeader"], [202, 12, 1, "", "Group"], [202, 12, 1, "", "HeaderRegistry"], [202, 12, 1, "", "MIMEVersionHeader"], [202, 12, 1, "", "ParameterizedMIMEHeader"], [202, 12, 1, "", "SingleAddressHeader"], [202, 12, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[202, 8, 1, "", "__str__"], [202, 7, 1, "", "addr_spec"], [202, 7, 1, "", "display_name"], [202, 7, 1, "", "domain"], [202, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[202, 7, 1, "", "addresses"], [202, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[202, 7, 1, "", "defects"], [202, 8, 1, "", "fold"], [202, 7, 1, "", "max_count"], [202, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[202, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[202, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[202, 7, 1, "", "content_type"], [202, 7, 1, "", "maintype"], [202, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[202, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[202, 8, 1, "", "__str__"], [202, 7, 1, "", "addresses"], [202, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[202, 8, 1, "", "__call__"], [202, 8, 1, "", "__getitem__"], [202, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[202, 7, 1, "", "major"], [202, 7, 1, "", "minor"], [202, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[202, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[202, 7, 1, "", "address"]], "email.iterators": [[203, 11, 1, "", "_structure"], [203, 11, 1, "", "body_line_iterator"], [203, 11, 1, "", "typed_subpart_iterator"]], "email.message": [[204, 12, 1, "", "EmailMessage"], [204, 12, 1, "", "MIMEPart"], [195, 12, 1, "", "Message"]], "email.message.EmailMessage": [[204, 8, 1, "", "__bytes__"], [204, 8, 1, "", "__contains__"], [204, 8, 1, "", "__delitem__"], [204, 8, 1, "", "__getitem__"], [204, 8, 1, "", "__len__"], [204, 8, 1, "", "__setitem__"], [204, 8, 1, "", "__str__"], [204, 8, 1, "", "add_alternative"], [204, 8, 1, "", "add_attachment"], [204, 8, 1, "", "add_header"], [204, 8, 1, "", "add_related"], [204, 8, 1, "", "as_bytes"], [204, 8, 1, "", "as_string"], [204, 8, 1, "", "clear"], [204, 8, 1, "", "clear_content"], [204, 7, 1, "", "defects"], [204, 8, 1, "", "del_param"], [204, 7, 1, "", "epilogue"], [204, 8, 1, "", "get"], [204, 8, 1, "", "get_all"], [204, 8, 1, "", "get_body"], [204, 8, 1, "", "get_boundary"], [204, 8, 1, "", "get_charsets"], [204, 8, 1, "", "get_content"], [204, 8, 1, "", "get_content_charset"], [204, 8, 1, "", "get_content_disposition"], [204, 8, 1, "", "get_content_maintype"], [204, 8, 1, "", "get_content_subtype"], [204, 8, 1, "", "get_content_type"], [204, 8, 1, "", "get_default_type"], [204, 8, 1, "", "get_filename"], [204, 8, 1, "", "get_unixfrom"], [204, 8, 1, "", "is_attachment"], [204, 8, 1, "", "is_multipart"], [204, 8, 1, "", "items"], [204, 8, 1, "", "iter_attachments"], [204, 8, 1, "", "iter_parts"], [204, 8, 1, "", "keys"], [204, 8, 1, "", "make_alternative"], [204, 8, 1, "", "make_mixed"], [204, 8, 1, "", "make_related"], [204, 7, 1, "", "preamble"], [204, 8, 1, "", "replace_header"], [204, 8, 1, "", "set_boundary"], [204, 8, 1, "", "set_content"], [204, 8, 1, "", "set_default_type"], [204, 8, 1, "", "set_param"], [204, 8, 1, "", "set_unixfrom"], [204, 8, 1, "", "values"], [204, 8, 1, "", "walk"]], "email.message.Message": [[195, 8, 1, "", "__bytes__"], [195, 8, 1, "", "__contains__"], [195, 8, 1, "", "__delitem__"], [195, 8, 1, "", "__getitem__"], [195, 8, 1, "", "__len__"], [195, 8, 1, "", "__setitem__"], [195, 8, 1, "", "__str__"], [195, 8, 1, "", "add_header"], [195, 8, 1, "", "as_bytes"], [195, 8, 1, "", "as_string"], [195, 8, 1, "", "attach"], [195, 7, 1, "", "defects"], [195, 8, 1, "", "del_param"], [195, 7, 1, "", "epilogue"], [195, 8, 1, "", "get"], [195, 8, 1, "", "get_all"], [195, 8, 1, "", "get_boundary"], [195, 8, 1, "", "get_charset"], [195, 8, 1, "", "get_charsets"], [195, 8, 1, "", "get_content_charset"], [195, 8, 1, "", "get_content_disposition"], [195, 8, 1, "", "get_content_maintype"], [195, 8, 1, "", "get_content_subtype"], [195, 8, 1, "", "get_content_type"], [195, 8, 1, "", "get_default_type"], [195, 8, 1, "", "get_filename"], [195, 8, 1, "", "get_param"], [195, 8, 1, "", "get_params"], [195, 8, 1, "", "get_payload"], [195, 8, 1, "", "get_unixfrom"], [195, 8, 1, "", "is_multipart"], [195, 8, 1, "", "items"], [195, 8, 1, "", "keys"], [195, 7, 1, "", "preamble"], [195, 8, 1, "", "replace_header"], [195, 8, 1, "", "set_boundary"], [195, 8, 1, "", "set_charset"], [195, 8, 1, "", "set_default_type"], [195, 8, 1, "", "set_param"], [195, 8, 1, "", "set_payload"], [195, 8, 1, "", "set_type"], [195, 8, 1, "", "set_unixfrom"], [195, 8, 1, "", "values"], [195, 8, 1, "", "walk"]], "email.mime.application": [[205, 12, 1, "", "MIMEApplication"]], "email.mime.audio": [[205, 12, 1, "", "MIMEAudio"]], "email.mime.base": [[205, 12, 1, "", "MIMEBase"]], "email.mime.image": [[205, 12, 1, "", "MIMEImage"]], "email.mime.message": [[205, 12, 1, "", "MIMEMessage"]], "email.mime.multipart": [[205, 12, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[205, 12, 1, "", "MIMENonMultipart"]], "email.mime.text": [[205, 12, 1, "", "MIMEText"]], "email.parser": [[206, 12, 1, "", "BytesFeedParser"], [206, 12, 1, "", "BytesHeaderParser"], [206, 12, 1, "", "BytesParser"], [206, 12, 1, "", "FeedParser"], [206, 12, 1, "", "HeaderParser"], [206, 12, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[206, 8, 1, "", "close"], [206, 8, 1, "", "feed"]], "email.parser.BytesParser": [[206, 8, 1, "", "parse"], [206, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[206, 8, 1, "", "parse"], [206, 8, 1, "", "parsestr"]], "email.policy": [[207, 12, 1, "", "Compat32"], [207, 12, 1, "", "EmailPolicy"], [207, 9, 1, "", "HTTP"], [207, 12, 1, "", "Policy"], [207, 9, 1, "", "SMTP"], [207, 9, 1, "", "SMTPUTF8"], [207, 9, 1, "", "compat32"], [207, 9, 1, "", "default"], [207, 9, 1, "", "strict"]], "email.policy.Compat32": [[207, 8, 1, "", "fold"], [207, 8, 1, "", "fold_binary"], [207, 8, 1, "", "header_fetch_parse"], [207, 8, 1, "", "header_source_parse"], [207, 8, 1, "", "header_store_parse"], [207, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[207, 7, 1, "", "content_manager"], [207, 8, 1, "", "fold"], [207, 8, 1, "", "fold_binary"], [207, 7, 1, "", "header_factory"], [207, 8, 1, "", "header_fetch_parse"], [207, 8, 1, "", "header_max_count"], [207, 8, 1, "", "header_source_parse"], [207, 8, 1, "", "header_store_parse"], [207, 7, 1, "", "refold_source"], [207, 7, 1, "", "utf8"]], "email.policy.Policy": [[207, 8, 1, "", "clone"], [207, 7, 1, "", "cte_type"], [207, 8, 1, "", "fold"], [207, 8, 1, "", "fold_binary"], [207, 8, 1, "", "handle_defect"], [207, 8, 1, "", "header_fetch_parse"], [207, 8, 1, "", "header_max_count"], [207, 8, 1, "", "header_source_parse"], [207, 8, 1, "", "header_store_parse"], [207, 7, 1, "", "linesep"], [207, 7, 1, "", "mangle_from_"], [207, 7, 1, "", "max_line_length"], [207, 7, 1, "", "message_factory"], [207, 7, 1, "", "raise_on_defect"], [207, 8, 1, "", "register_defect"]], "email.utils": [[208, 11, 1, "", "collapse_rfc2231_value"], [208, 11, 1, "", "decode_params"], [208, 11, 1, "", "decode_rfc2231"], [208, 11, 1, "", "encode_rfc2231"], [208, 11, 1, "", "format_datetime"], [208, 11, 1, "", "formataddr"], [208, 11, 1, "", "formatdate"], [208, 11, 1, "", "getaddresses"], [208, 11, 1, "", "localtime"], [208, 11, 1, "", "make_msgid"], [208, 11, 1, "", "mktime_tz"], [208, 11, 1, "", "parseaddr"], [208, 11, 1, "", "parsedate"], [208, 11, 1, "", "parsedate_to_datetime"], [208, 11, 1, "", "parsedate_tz"], [208, 11, 1, "", "quote"], [208, 11, 1, "", "unquote"]], "encodings": [[157, 10, 0, "-", "idna"], [157, 10, 0, "-", "mbcs"], [157, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[157, 11, 1, "", "ToASCII"], [157, 11, 1, "", "ToUnicode"], [157, 11, 1, "", "nameprep"]], "ensurepip": [[209, 11, 1, "", "bootstrap"], [209, 11, 1, "", "version"]], "enum": [[210, 12, 1, "", "Enum"], [210, 12, 1, "", "EnumCheck"], [210, 12, 1, "", "EnumType"], [210, 12, 1, "", "Flag"], [210, 12, 1, "", "FlagBoundary"], [210, 12, 1, "", "IntEnum"], [210, 12, 1, "", "IntFlag"], [210, 12, 1, "", "StrEnum"], [210, 12, 1, "", "auto"], [210, 11, 1, "", "member"], [210, 11, 1, "", "nonmember"], [210, 11, 1, "", "property"], [210, 11, 1, "", "unique"], [210, 11, 1, "", "verify"]], "enum.Enum": [[210, 8, 1, "", "__call__"], [210, 8, 1, "", "__dir__"], [210, 8, 1, "", "__format__"], [210, 8, 1, "", "__init_subclass__"], [210, 8, 1, "", "__repr__"], [210, 8, 1, "", "__str__"], [210, 8, 1, "", "_generate_next_value_"], [210, 7, 1, "", "_ignore_"], [210, 8, 1, "", "_missing_"], [210, 7, 1, "", "name"], [210, 7, 1, "", "value"]], "enum.EnumCheck": [[210, 7, 1, "", "CONTINUOUS"], [210, 7, 1, "", "NAMED_FLAGS"], [210, 7, 1, "", "UNIQUE"]], "enum.EnumType": [[210, 8, 1, "", "__contains__"], [210, 8, 1, "", "__dir__"], [210, 8, 1, "", "__getitem__"], [210, 8, 1, "", "__iter__"], [210, 8, 1, "", "__len__"], [210, 8, 1, "", "__reversed__"]], "enum.Flag": [[210, 8, 1, "", "__and__"], [210, 8, 1, "", "__contains__"], [210, 8, 1, "", "__or__"], [210, 8, 1, "", "__xor__"], [210, 8, 1, "", "_numeric_repr_"]], "enum.FlagBoundary": [[210, 7, 1, "", "CONFORM"], [210, 7, 1, "", "EJECT"], [210, 7, 1, "", "KEEP"], [210, 7, 1, "", "STRICT"]], "errno": [[211, 9, 1, "", "E2BIG"], [211, 9, 1, "", "EACCES"], [211, 9, 1, "", "EADDRINUSE"], [211, 9, 1, "", "EADDRNOTAVAIL"], [211, 9, 1, "", "EADV"], [211, 9, 1, "", "EAFNOSUPPORT"], [211, 9, 1, "", "EAGAIN"], [211, 9, 1, "", "EALREADY"], [211, 9, 1, "", "EBADE"], [211, 9, 1, "", "EBADF"], [211, 9, 1, "", "EBADFD"], [211, 9, 1, "", "EBADMSG"], [211, 9, 1, "", "EBADR"], [211, 9, 1, "", "EBADRQC"], [211, 9, 1, "", "EBADSLT"], [211, 9, 1, "", "EBFONT"], [211, 9, 1, "", "EBUSY"], [211, 9, 1, "", "ECHILD"], [211, 9, 1, "", "ECHRNG"], [211, 9, 1, "", "ECOMM"], [211, 9, 1, "", "ECONNABORTED"], [211, 9, 1, "", "ECONNREFUSED"], [211, 9, 1, "", "ECONNRESET"], [211, 9, 1, "", "EDEADLK"], [211, 9, 1, "", "EDEADLOCK"], [211, 9, 1, "", "EDESTADDRREQ"], [211, 9, 1, "", "EDOM"], [211, 9, 1, "", "EDOTDOT"], [211, 9, 1, "", "EDQUOT"], [211, 9, 1, "", "EEXIST"], [211, 9, 1, "", "EFAULT"], [211, 9, 1, "", "EFBIG"], [211, 9, 1, "", "EHOSTDOWN"], [211, 9, 1, "", "EHOSTUNREACH"], [211, 9, 1, "", "EIDRM"], [211, 9, 1, "", "EILSEQ"], [211, 9, 1, "", "EINPROGRESS"], [211, 9, 1, "", "EINTR"], [211, 9, 1, "", "EINVAL"], [211, 9, 1, "", "EIO"], [211, 9, 1, "", "EISCONN"], [211, 9, 1, "", "EISDIR"], [211, 9, 1, "", "EISNAM"], [211, 9, 1, "", "EL2HLT"], [211, 9, 1, "", "EL2NSYNC"], [211, 9, 1, "", "EL3HLT"], [211, 9, 1, "", "EL3RST"], [211, 9, 1, "", "ELIBACC"], [211, 9, 1, "", "ELIBBAD"], [211, 9, 1, "", "ELIBEXEC"], [211, 9, 1, "", "ELIBMAX"], [211, 9, 1, "", "ELIBSCN"], [211, 9, 1, "", "ELNRNG"], [211, 9, 1, "", "ELOOP"], [211, 9, 1, "", "EMFILE"], [211, 9, 1, "", "EMLINK"], [211, 9, 1, "", "EMSGSIZE"], [211, 9, 1, "", "EMULTIHOP"], [211, 9, 1, "", "ENAMETOOLONG"], [211, 9, 1, "", "ENAVAIL"], [211, 9, 1, "", "ENETDOWN"], [211, 9, 1, "", "ENETRESET"], [211, 9, 1, "", "ENETUNREACH"], [211, 9, 1, "", "ENFILE"], [211, 9, 1, "", "ENOANO"], [211, 9, 1, "", "ENOBUFS"], [211, 9, 1, "", "ENOCSI"], [211, 9, 1, "", "ENODATA"], [211, 9, 1, "", "ENODEV"], [211, 9, 1, "", "ENOENT"], [211, 9, 1, "", "ENOEXEC"], [211, 9, 1, "", "ENOLCK"], [211, 9, 1, "", "ENOLINK"], [211, 9, 1, "", "ENOMEM"], [211, 9, 1, "", "ENOMSG"], [211, 9, 1, "", "ENONET"], [211, 9, 1, "", "ENOPKG"], [211, 9, 1, "", "ENOPROTOOPT"], [211, 9, 1, "", "ENOSPC"], [211, 9, 1, "", "ENOSR"], [211, 9, 1, "", "ENOSTR"], [211, 9, 1, "", "ENOSYS"], [211, 9, 1, "", "ENOTBLK"], [211, 9, 1, "", "ENOTCAPABLE"], [211, 9, 1, "", "ENOTCONN"], [211, 9, 1, "", "ENOTDIR"], [211, 9, 1, "", "ENOTEMPTY"], [211, 9, 1, "", "ENOTNAM"], [211, 9, 1, "", "ENOTSOCK"], [211, 9, 1, "", "ENOTTY"], [211, 9, 1, "", "ENOTUNIQ"], [211, 9, 1, "", "ENXIO"], [211, 9, 1, "", "EOPNOTSUPP"], [211, 9, 1, "", "EOVERFLOW"], [211, 9, 1, "", "EPERM"], [211, 9, 1, "", "EPFNOSUPPORT"], [211, 9, 1, "", "EPIPE"], [211, 9, 1, "", "EPROTO"], [211, 9, 1, "", "EPROTONOSUPPORT"], [211, 9, 1, "", "EPROTOTYPE"], [211, 9, 1, "", "EQFULL"], [211, 9, 1, "", "ERANGE"], [211, 9, 1, "", "EREMCHG"], [211, 9, 1, "", "EREMOTE"], [211, 9, 1, "", "EREMOTEIO"], [211, 9, 1, "", "ERESTART"], [211, 9, 1, "", "EROFS"], [211, 9, 1, "", "ESHUTDOWN"], [211, 9, 1, "", "ESOCKTNOSUPPORT"], [211, 9, 1, "", "ESPIPE"], [211, 9, 1, "", "ESRCH"], [211, 9, 1, "", "ESRMNT"], [211, 9, 1, "", "ESTALE"], [211, 9, 1, "", "ESTRPIPE"], [211, 9, 1, "", "ETIME"], [211, 9, 1, "", "ETIMEDOUT"], [211, 9, 1, "", "ETOOMANYREFS"], [211, 9, 1, "", "ETXTBSY"], [211, 9, 1, "", "EUCLEAN"], [211, 9, 1, "", "EUNATCH"], [211, 9, 1, "", "EUSERS"], [211, 9, 1, "", "EWOULDBLOCK"], [211, 9, 1, "", "EXDEV"], [211, 9, 1, "", "EXFULL"], [211, 9, 1, "", "errorcode"]], "faulthandler": [[213, 11, 1, "", "cancel_dump_traceback_later"], [213, 11, 1, "", "disable"], [213, 11, 1, "", "dump_traceback"], [213, 11, 1, "", "dump_traceback_later"], [213, 11, 1, "", "enable"], [213, 11, 1, "", "is_enabled"], [213, 11, 1, "", "register"], [213, 11, 1, "", "unregister"]], "fcntl": [[214, 11, 1, "", "fcntl"], [214, 11, 1, "", "flock"], [214, 11, 1, "", "ioctl"], [214, 11, 1, "", "lockf"]], "filecmp": [[215, 7, 1, "", "DEFAULT_IGNORES"], [215, 11, 1, "", "clear_cache"], [215, 11, 1, "", "cmp"], [215, 11, 1, "", "cmpfiles"], [215, 12, 1, "", "dircmp"]], "filecmp.dircmp": [[215, 7, 1, "", "common"], [215, 7, 1, "", "common_dirs"], [215, 7, 1, "", "common_files"], [215, 7, 1, "", "common_funny"], [215, 7, 1, "", "diff_files"], [215, 7, 1, "", "funny_files"], [215, 7, 1, "", "left"], [215, 7, 1, "", "left_list"], [215, 7, 1, "", "left_only"], [215, 8, 1, "", "report"], [215, 8, 1, "", "report_full_closure"], [215, 8, 1, "", "report_partial_closure"], [215, 7, 1, "", "right"], [215, 7, 1, "", "right_list"], [215, 7, 1, "", "right_only"], [215, 7, 1, "", "same_files"], [215, 7, 1, "", "subdirs"]], "fileinput": [[217, 12, 1, "", "FileInput"], [217, 11, 1, "", "close"], [217, 11, 1, "", "filelineno"], [217, 11, 1, "", "filename"], [217, 11, 1, "", "fileno"], [217, 11, 1, "", "hook_compressed"], [217, 11, 1, "", "hook_encoded"], [217, 11, 1, "", "input"], [217, 11, 1, "", "isfirstline"], [217, 11, 1, "", "isstdin"], [217, 11, 1, "", "lineno"], [217, 11, 1, "", "nextfile"]], "float": [[344, 8, 1, "", "as_integer_ratio"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "is_integer"]], "fnmatch": [[219, 11, 1, "", "filter"], [219, 11, 1, "", "fnmatch"], [219, 11, 1, "", "fnmatchcase"], [219, 11, 1, "", "translate"]], "fractions": [[220, 12, 1, "", "Fraction"]], "fractions.Fraction": [[220, 8, 1, "", "__ceil__"], [220, 8, 1, "", "__floor__"], [220, 8, 1, "", "__round__"], [220, 8, 1, "", "as_integer_ratio"], [220, 7, 1, "", "denominator"], [220, 8, 1, "", "from_decimal"], [220, 8, 1, "", "from_float"], [220, 8, 1, "", "limit_denominator"], [220, 7, 1, "", "numerator"]], "frame": [[427, 8, 1, "", "clear"]], "frozenset": [[344, 8, 1, "", "add"], [344, 8, 1, "", "clear"], [344, 8, 1, "", "copy"], [344, 8, 1, "", "difference"], [344, 8, 1, "", "difference_update"], [344, 8, 1, "", "discard"], [344, 8, 1, "", "intersection"], [344, 8, 1, "", "intersection_update"], [344, 8, 1, "", "isdisjoint"], [344, 8, 1, "", "issubset"], [344, 8, 1, "", "issuperset"], [344, 8, 1, "", "pop"], [344, 8, 1, "", "remove"], [344, 8, 1, "", "symmetric_difference"], [344, 8, 1, "", "symmetric_difference_update"], [344, 8, 1, "", "union"], [344, 8, 1, "", "update"]], "ftplib": [[222, 12, 1, "", "FTP"], [222, 12, 1, "", "FTP_TLS"], [222, 9, 1, "", "all_errors"], [222, 6, 1, "", "error_perm"], [222, 6, 1, "", "error_proto"], [222, 6, 1, "", "error_reply"], [222, 6, 1, "", "error_temp"]], "ftplib.FTP": [[222, 8, 1, "", "abort"], [222, 8, 1, "", "close"], [222, 8, 1, "", "connect"], [222, 8, 1, "", "cwd"], [222, 8, 1, "", "delete"], [222, 8, 1, "", "dir"], [222, 8, 1, "", "getwelcome"], [222, 8, 1, "", "login"], [222, 8, 1, "", "mkd"], [222, 8, 1, "", "mlsd"], [222, 8, 1, "", "nlst"], [222, 8, 1, "", "ntransfercmd"], [222, 8, 1, "", "pwd"], [222, 8, 1, "", "quit"], [222, 8, 1, "", "rename"], [222, 8, 1, "", "retrbinary"], [222, 8, 1, "", "retrlines"], [222, 8, 1, "", "rmd"], [222, 8, 1, "", "sendcmd"], [222, 8, 1, "", "set_debuglevel"], [222, 8, 1, "", "set_pasv"], [222, 8, 1, "", "size"], [222, 8, 1, "", "storbinary"], [222, 8, 1, "", "storlines"], [222, 8, 1, "", "transfercmd"], [222, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[222, 8, 1, "", "auth"], [222, 8, 1, "", "ccc"], [222, 8, 1, "", "prot_c"], [222, 8, 1, "", "prot_p"], [222, 7, 1, "", "ssl_version"]], "functools": [[225, 11, 1, "", "cache"], [225, 11, 1, "", "cached_property"], [225, 11, 1, "", "cmp_to_key"], [225, 11, 1, "", "lru_cache"], [225, 11, 1, "", "partial"], [225, 12, 1, "", "partialmethod"], [225, 11, 1, "", "reduce"], [225, 11, 1, "", "singledispatch"], [225, 12, 1, "", "singledispatchmethod"], [225, 11, 1, "", "total_ordering"], [225, 11, 1, "", "update_wrapper"], [225, 11, 1, "", "wraps"]], "functools.partial": [[225, 7, 1, "", "args"], [225, 7, 1, "", "func"], [225, 7, 1, "", "keywords"]], "gc": [[226, 9, 1, "", "DEBUG_COLLECTABLE"], [226, 9, 1, "", "DEBUG_LEAK"], [226, 9, 1, "", "DEBUG_SAVEALL"], [226, 9, 1, "", "DEBUG_STATS"], [226, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [226, 9, 1, "", "callbacks"], [226, 11, 1, "", "collect"], [226, 11, 1, "", "disable"], [226, 11, 1, "", "enable"], [226, 11, 1, "", "freeze"], [226, 9, 1, "", "garbage"], [226, 11, 1, "", "get_count"], [226, 11, 1, "", "get_debug"], [226, 11, 1, "", "get_freeze_count"], [226, 11, 1, "", "get_objects"], [226, 11, 1, "", "get_referents"], [226, 11, 1, "", "get_referrers"], [226, 11, 1, "", "get_stats"], [226, 11, 1, "", "get_threshold"], [226, 11, 1, "", "is_finalized"], [226, 11, 1, "", "is_tracked"], [226, 11, 1, "", "isenabled"], [226, 11, 1, "", "set_debug"], [226, 11, 1, "", "set_threshold"], [226, 11, 1, "", "unfreeze"]], "generator": [[429, 8, 1, "", "__next__"], [429, 8, 1, "", "close"], [429, 8, 1, "", "send"], [429, 8, 1, "", "throw"]], "genericalias": [[344, 7, 1, "", "__args__"], [344, 7, 1, "", "__origin__"], [344, 7, 1, "", "__parameters__"], [344, 7, 1, "", "__unpacked__"]], "getopt": [[227, 6, 1, "", "GetoptError"], [227, 6, 1, "", "error"], [227, 11, 1, "", "getopt"], [227, 11, 1, "", "gnu_getopt"]], "getpass": [[228, 6, 1, "", "GetPassWarning"], [228, 11, 1, "", "getpass"], [228, 11, 1, "", "getuser"]], "gettext": [[229, 12, 1, "", "GNUTranslations"], [229, 12, 1, "", "NullTranslations"], [229, 11, 1, "", "bindtextdomain"], [229, 11, 1, "", "dgettext"], [229, 11, 1, "", "dngettext"], [229, 11, 1, "", "dnpgettext"], [229, 11, 1, "", "dpgettext"], [229, 11, 1, "", "find"], [229, 11, 1, "", "gettext"], [229, 11, 1, "", "install"], [229, 11, 1, "", "ngettext"], [229, 11, 1, "", "npgettext"], [229, 11, 1, "", "pgettext"], [229, 11, 1, "", "textdomain"], [229, 11, 1, "", "translation"]], "gettext.GNUTranslations": [[229, 8, 1, "", "gettext"], [229, 8, 1, "", "ngettext"], [229, 8, 1, "", "npgettext"], [229, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[229, 8, 1, "", "_parse"], [229, 8, 1, "", "add_fallback"], [229, 8, 1, "", "charset"], [229, 8, 1, "", "gettext"], [229, 8, 1, "", "info"], [229, 8, 1, "", "install"], [229, 8, 1, "", "ngettext"], [229, 8, 1, "", "npgettext"], [229, 8, 1, "", "pgettext"]], "glob": [[230, 11, 1, "", "escape"], [230, 11, 1, "", "glob"], [230, 11, 1, "", "iglob"]], "graphlib": [[231, 6, 1, "", "CycleError"], [231, 12, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[231, 8, 1, "", "add"], [231, 8, 1, "", "done"], [231, 8, 1, "", "get_ready"], [231, 8, 1, "", "is_active"], [231, 8, 1, "", "prepare"], [231, 8, 1, "", "static_order"]], "grp": [[232, 11, 1, "", "getgrall"], [232, 11, 1, "", "getgrgid"], [232, 11, 1, "", "getgrnam"]], "gzip": [[233, 6, 1, "", "BadGzipFile"], [233, 12, 1, "", "GzipFile"], [233, 11, 1, "", "compress"], [233, 11, 1, "", "decompress"], [233, 11, 1, "", "open"], [233, 14, 1, "cmdoption-gzip-best", "--best"], [233, 14, 1, "cmdoption-gzip-d", "--decompress"], [233, 14, 1, "cmdoption-gzip-fast", "--fast"], [233, 14, 1, "cmdoption-gzip-h", "--help"], [233, 14, 1, "cmdoption-gzip-d", "-d"], [233, 14, 1, "cmdoption-gzip-h", "-h"], [233, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[233, 7, 1, "", "mtime"], [233, 8, 1, "", "peek"]], "hashlib": [[234, 9, 1, "", "algorithms_available"], [234, 9, 1, "", "algorithms_guaranteed"], [234, 11, 1, "", "blake2b"], [234, 11, 1, "", "blake2s"], [234, 11, 1, "", "file_digest"], [234, 11, 1, "", "new"], [234, 11, 1, "", "pbkdf2_hmac"], [234, 11, 1, "", "scrypt"]], "hashlib.blake2b": [[234, 9, 1, "", "MAX_DIGEST_SIZE"], [234, 9, 1, "", "MAX_KEY_SIZE"], [234, 9, 1, "", "PERSON_SIZE"], [234, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[234, 9, 1, "", "MAX_DIGEST_SIZE"], [234, 9, 1, "", "MAX_KEY_SIZE"], [234, 9, 1, "", "PERSON_SIZE"], [234, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[234, 9, 1, "", "block_size"], [234, 8, 1, "", "copy"], [234, 8, 1, "", "digest"], [234, 9, 1, "", "digest_size"], [234, 8, 1, "", "hexdigest"], [234, 7, 1, "", "name"], [234, 8, 1, "", "update"]], "hashlib.shake": [[234, 8, 1, "", "digest"], [234, 8, 1, "", "hexdigest"]], "heapq": [[235, 11, 1, "", "heapify"], [235, 11, 1, "", "heappop"], [235, 11, 1, "", "heappush"], [235, 11, 1, "", "heappushpop"], [235, 11, 1, "", "heapreplace"], [235, 11, 1, "", "merge"], [235, 11, 1, "", "nlargest"], [235, 11, 1, "", "nsmallest"]], "hmac.HMAC": [[236, 7, 1, "", "block_size"], [236, 8, 1, "", "copy"], [236, 8, 1, "", "digest"], [236, 7, 1, "", "digest_size"], [236, 8, 1, "", "hexdigest"], [236, 7, 1, "", "name"], [236, 8, 1, "", "update"]], "hmac": [[236, 11, 1, "", "compare_digest"], [236, 11, 1, "", "digest"], [236, 11, 1, "", "new"]], "html": [[238, 10, 0, "-", "entities"], [237, 11, 1, "", "escape"], [239, 10, 0, "-", "parser"], [237, 11, 1, "", "unescape"]], "html.entities": [[238, 9, 1, "", "codepoint2name"], [238, 9, 1, "", "entitydefs"], [238, 9, 1, "", "html5"], [238, 9, 1, "", "name2codepoint"]], "html.parser": [[239, 12, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[239, 8, 1, "", "close"], [239, 8, 1, "", "feed"], [239, 8, 1, "", "get_starttag_text"], [239, 8, 1, "", "getpos"], [239, 8, 1, "", "handle_charref"], [239, 8, 1, "", "handle_comment"], [239, 8, 1, "", "handle_data"], [239, 8, 1, "", "handle_decl"], [239, 8, 1, "", "handle_endtag"], [239, 8, 1, "", "handle_entityref"], [239, 8, 1, "", "handle_pi"], [239, 8, 1, "", "handle_startendtag"], [239, 8, 1, "", "handle_starttag"], [239, 8, 1, "", "reset"], [239, 8, 1, "", "unknown_decl"]], "http": [[240, 12, 1, "", "HTTPMethod"], [240, 12, 1, "", "HTTPStatus"], [241, 10, 0, "-", "client"], [242, 10, 0, "-", "cookiejar"], [243, 10, 0, "-", "cookies"], [244, 10, 0, "-", "server"]], "http.client": [[241, 6, 1, "", "BadStatusLine"], [241, 6, 1, "", "CannotSendHeader"], [241, 6, 1, "", "CannotSendRequest"], [241, 12, 1, "", "HTTPConnection"], [241, 6, 1, "", "HTTPException"], [241, 12, 1, "", "HTTPResponse"], [241, 12, 1, "", "HTTPSConnection"], [241, 9, 1, "", "HTTPS_PORT"], [241, 9, 1, "", "HTTP_PORT"], [241, 6, 1, "", "ImproperConnectionState"], [241, 6, 1, "", "IncompleteRead"], [241, 6, 1, "", "InvalidURL"], [241, 6, 1, "", "LineTooLong"], [241, 6, 1, "", "NotConnected"], [241, 6, 1, "", "RemoteDisconnected"], [241, 6, 1, "", "ResponseNotReady"], [241, 6, 1, "", "UnimplementedFileMode"], [241, 6, 1, "", "UnknownProtocol"], [241, 6, 1, "", "UnknownTransferEncoding"], [241, 11, 1, "", "parse_headers"], [241, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[241, 7, 1, "", "blocksize"], [241, 8, 1, "", "close"], [241, 8, 1, "", "connect"], [241, 8, 1, "", "endheaders"], [241, 8, 1, "", "getresponse"], [241, 8, 1, "", "putheader"], [241, 8, 1, "", "putrequest"], [241, 8, 1, "", "request"], [241, 8, 1, "", "send"], [241, 8, 1, "", "set_debuglevel"], [241, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[241, 7, 1, "", "closed"], [241, 7, 1, "", "debuglevel"], [241, 8, 1, "", "fileno"], [241, 8, 1, "", "getheader"], [241, 8, 1, "", "getheaders"], [241, 8, 1, "", "getstatus"], [241, 8, 1, "", "geturl"], [241, 7, 1, "", "headers"], [241, 8, 1, "", "info"], [241, 7, 1, "", "msg"], [241, 8, 1, "", "read"], [241, 8, 1, "", "readinto"], [241, 7, 1, "", "reason"], [241, 7, 1, "", "status"], [241, 7, 1, "", "url"], [241, 7, 1, "", "version"]], "http.cookiejar": [[242, 12, 1, "", "Cookie"], [242, 12, 1, "", "CookieJar"], [242, 12, 1, "", "CookiePolicy"], [242, 12, 1, "", "DefaultCookiePolicy"], [242, 12, 1, "", "FileCookieJar"], [242, 12, 1, "", "LWPCookieJar"], [242, 6, 1, "", "LoadError"], [242, 12, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[242, 7, 1, "", "comment"], [242, 7, 1, "", "comment_url"], [242, 7, 1, "", "discard"], [242, 7, 1, "", "domain_initial_dot"], [242, 7, 1, "", "domain_specified"], [242, 7, 1, "", "expires"], [242, 8, 1, "", "get_nonstandard_attr"], [242, 8, 1, "", "has_nonstandard_attr"], [242, 8, 1, "", "is_expired"], [242, 7, 1, "", "name"], [242, 7, 1, "", "path"], [242, 7, 1, "", "port"], [242, 7, 1, "", "port_specified"], [242, 7, 1, "", "rfc2109"], [242, 7, 1, "", "secure"], [242, 8, 1, "", "set_nonstandard_attr"], [242, 7, 1, "", "value"], [242, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[242, 8, 1, "", "add_cookie_header"], [242, 8, 1, "", "clear"], [242, 8, 1, "", "clear_session_cookies"], [242, 8, 1, "", "extract_cookies"], [242, 8, 1, "", "make_cookies"], [242, 8, 1, "", "set_cookie"], [242, 8, 1, "", "set_cookie_if_ok"], [242, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[242, 8, 1, "", "domain_return_ok"], [242, 7, 1, "", "hide_cookie2"], [242, 7, 1, "", "netscape"], [242, 8, 1, "", "path_return_ok"], [242, 8, 1, "", "return_ok"], [242, 7, 1, "", "rfc2965"], [242, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[242, 7, 1, "", "DomainLiberal"], [242, 7, 1, "", "DomainRFC2965Match"], [242, 7, 1, "", "DomainStrict"], [242, 7, 1, "", "DomainStrictNoDots"], [242, 7, 1, "", "DomainStrictNonDomain"], [242, 8, 1, "", "allowed_domains"], [242, 8, 1, "", "blocked_domains"], [242, 8, 1, "", "is_blocked"], [242, 8, 1, "", "is_not_allowed"], [242, 7, 1, "", "rfc2109_as_netscape"], [242, 8, 1, "", "set_allowed_domains"], [242, 8, 1, "", "set_blocked_domains"], [242, 7, 1, "", "strict_domain"], [242, 7, 1, "", "strict_ns_domain"], [242, 7, 1, "", "strict_ns_set_initial_dollar"], [242, 7, 1, "", "strict_ns_set_path"], [242, 7, 1, "", "strict_ns_unverifiable"], [242, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[242, 7, 1, "", "delayload"], [242, 7, 1, "", "filename"], [242, 8, 1, "", "load"], [242, 8, 1, "", "revert"], [242, 8, 1, "", "save"]], "http.cookies": [[243, 12, 1, "", "BaseCookie"], [243, 6, 1, "", "CookieError"], [243, 12, 1, "", "Morsel"], [243, 12, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[243, 8, 1, "", "js_output"], [243, 8, 1, "", "load"], [243, 8, 1, "", "output"], [243, 8, 1, "", "value_decode"], [243, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[243, 8, 1, "", "OutputString"], [243, 7, 1, "", "coded_value"], [243, 8, 1, "", "copy"], [243, 8, 1, "", "isReservedKey"], [243, 8, 1, "", "js_output"], [243, 7, 1, "", "key"], [243, 8, 1, "", "output"], [243, 8, 1, "", "set"], [243, 8, 1, "", "setdefault"], [243, 8, 1, "", "update"], [243, 7, 1, "", "value"]], "http.server": [[244, 12, 1, "", "BaseHTTPRequestHandler"], [244, 12, 1, "", "CGIHTTPRequestHandler"], [244, 12, 1, "", "HTTPServer"], [244, 12, 1, "", "SimpleHTTPRequestHandler"], [244, 12, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[244, 7, 1, "", "MessageClass"], [244, 8, 1, "", "address_string"], [244, 7, 1, "", "client_address"], [244, 7, 1, "", "close_connection"], [244, 7, 1, "", "command"], [244, 8, 1, "", "date_time_string"], [244, 8, 1, "", "end_headers"], [244, 7, 1, "", "error_content_type"], [244, 7, 1, "", "error_message_format"], [244, 8, 1, "", "flush_headers"], [244, 8, 1, "", "handle"], [244, 8, 1, "", "handle_expect_100"], [244, 8, 1, "", "handle_one_request"], [244, 7, 1, "", "headers"], [244, 8, 1, "", "log_date_time_string"], [244, 8, 1, "", "log_error"], [244, 8, 1, "", "log_message"], [244, 8, 1, "", "log_request"], [244, 7, 1, "", "path"], [244, 7, 1, "", "protocol_version"], [244, 7, 1, "", "request_version"], [244, 7, 1, "", "requestline"], [244, 7, 1, "", "responses"], [244, 7, 1, "", "rfile"], [244, 8, 1, "", "send_error"], [244, 8, 1, "", "send_header"], [244, 8, 1, "", "send_response"], [244, 8, 1, "", "send_response_only"], [244, 7, 1, "", "server"], [244, 7, 1, "", "server_version"], [244, 7, 1, "", "sys_version"], [244, 8, 1, "", "version_string"], [244, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[244, 7, 1, "", "cgi_directories"], [244, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[244, 8, 1, "", "do_GET"], [244, 8, 1, "", "do_HEAD"], [244, 7, 1, "", "extensions_map"], [244, 7, 1, "", "server_version"]], "imaplib": [[247, 12, 1, "", "IMAP4"], [247, 12, 1, "", "IMAP4_SSL"], [247, 12, 1, "", "IMAP4_stream"], [247, 11, 1, "", "Int2AP"], [247, 11, 1, "", "Internaldate2tuple"], [247, 11, 1, "", "ParseFlags"], [247, 11, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[247, 7, 1, "", "PROTOCOL_VERSION"], [247, 6, 1, "", "abort"], [247, 8, 1, "", "append"], [247, 8, 1, "", "authenticate"], [247, 8, 1, "", "check"], [247, 8, 1, "", "close"], [247, 8, 1, "", "copy"], [247, 8, 1, "", "create"], [247, 7, 1, "", "debug"], [247, 8, 1, "", "delete"], [247, 8, 1, "", "deleteacl"], [247, 8, 1, "", "enable"], [247, 6, 1, "", "error"], [247, 8, 1, "", "expunge"], [247, 8, 1, "", "fetch"], [247, 8, 1, "", "getacl"], [247, 8, 1, "", "getannotation"], [247, 8, 1, "", "getquota"], [247, 8, 1, "", "getquotaroot"], [247, 8, 1, "", "list"], [247, 8, 1, "", "login"], [247, 8, 1, "", "login_cram_md5"], [247, 8, 1, "", "logout"], [247, 8, 1, "", "lsub"], [247, 8, 1, "", "myrights"], [247, 8, 1, "", "namespace"], [247, 8, 1, "", "noop"], [247, 8, 1, "", "open"], [247, 8, 1, "", "partial"], [247, 8, 1, "", "proxyauth"], [247, 8, 1, "", "read"], [247, 8, 1, "", "readline"], [247, 6, 1, "", "readonly"], [247, 8, 1, "", "recent"], [247, 8, 1, "", "rename"], [247, 8, 1, "", "response"], [247, 8, 1, "", "search"], [247, 8, 1, "", "select"], [247, 8, 1, "", "send"], [247, 8, 1, "", "setacl"], [247, 8, 1, "", "setannotation"], [247, 8, 1, "", "setquota"], [247, 8, 1, "", "shutdown"], [247, 8, 1, "", "socket"], [247, 8, 1, "", "sort"], [247, 8, 1, "", "starttls"], [247, 8, 1, "", "status"], [247, 8, 1, "", "store"], [247, 8, 1, "", "subscribe"], [247, 8, 1, "", "thread"], [247, 8, 1, "", "uid"], [247, 8, 1, "", "unselect"], [247, 8, 1, "", "unsubscribe"], [247, 7, 1, "", "utf8_enabled"], [247, 8, 1, "", "xatom"]], "imghdr": [[248, 9, 1, "", "tests"], [248, 11, 1, "", "what"]], "imp": [[249, 9, 1, "", "C_BUILTIN"], [249, 9, 1, "", "C_EXTENSION"], [249, 12, 1, "", "NullImporter"], [249, 9, 1, "", "PKG_DIRECTORY"], [249, 9, 1, "", "PY_COMPILED"], [249, 9, 1, "", "PY_FROZEN"], [249, 9, 1, "", "PY_SOURCE"], [249, 11, 1, "", "acquire_lock"], [249, 11, 1, "", "cache_from_source"], [249, 11, 1, "", "find_module"], [249, 11, 1, "", "get_magic"], [249, 11, 1, "", "get_suffixes"], [249, 11, 1, "", "get_tag"], [249, 11, 1, "", "load_module"], [249, 11, 1, "", "lock_held"], [249, 11, 1, "", "new_module"], [249, 11, 1, "", "release_lock"], [249, 11, 1, "", "reload"], [249, 11, 1, "", "source_from_cache"]], "imp.NullImporter": [[249, 8, 1, "", "find_module"]], "importlib": [[250, 11, 1, "", "__import__"], [250, 10, 0, "-", "abc"], [250, 11, 1, "", "find_loader"], [250, 11, 1, "", "import_module"], [250, 11, 1, "", "invalidate_caches"], [250, 10, 0, "-", "machinery"], [251, 10, 0, "-", "metadata"], [250, 11, 1, "", "reload"], [252, 10, 0, "-", "resources"], [250, 10, 0, "-", "util"]], "importlib.abc": [[250, 12, 1, "", "ExecutionLoader"], [250, 12, 1, "", "FileLoader"], [250, 12, 1, "", "Finder"], [250, 12, 1, "", "InspectLoader"], [250, 12, 1, "", "Loader"], [250, 12, 1, "", "MetaPathFinder"], [250, 12, 1, "", "PathEntryFinder"], [250, 12, 1, "", "ResourceLoader"], [250, 12, 1, "", "SourceLoader"]], "importlib.abc.ExecutionLoader": [[250, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[250, 8, 1, "", "get_data"], [250, 8, 1, "", "get_filename"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.abc.Finder": [[250, 8, 1, "", "find_module"]], "importlib.abc.InspectLoader": [[250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[250, 8, 1, "", "create_module"], [250, 8, 1, "", "exec_module"], [250, 8, 1, "", "load_module"]], "importlib.abc.MetaPathFinder": [[250, 8, 1, "", "find_module"], [250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[250, 8, 1, "", "find_loader"], [250, 8, 1, "", "find_module"], [250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[250, 8, 1, "", "get_data"]], "importlib.abc.SourceLoader": [[250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 8, 1, "", "path_mtime"], [250, 8, 1, "", "path_stats"], [250, 8, 1, "", "set_data"]], "importlib.machinery": [[250, 7, 1, "", "BYTECODE_SUFFIXES"], [250, 12, 1, "", "BuiltinImporter"], [250, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [250, 7, 1, "", "EXTENSION_SUFFIXES"], [250, 12, 1, "", "ExtensionFileLoader"], [250, 12, 1, "", "FileFinder"], [250, 12, 1, "", "FrozenImporter"], [250, 12, 1, "", "ModuleSpec"], [250, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [250, 12, 1, "", "PathFinder"], [250, 7, 1, "", "SOURCE_SUFFIXES"], [250, 12, 1, "", "SourceFileLoader"], [250, 12, 1, "", "SourcelessFileLoader"], [250, 12, 1, "", "WindowsRegistryFinder"], [250, 11, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[250, 8, 1, "", "create_module"], [250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_filename"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[250, 8, 1, "", "find_loader"], [250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"], [250, 7, 1, "", "path"], [250, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[250, 7, 1, "", "cached"], [250, 7, 1, "", "has_location"], [250, 7, 1, "", "loader"], [250, 7, 1, "", "loader_state"], [250, 7, 1, "", "name"], [250, 7, 1, "", "origin"], [250, 7, 1, "", "parent"], [250, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[250, 8, 1, "", "find_module"], [250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"], [250, 8, 1, "", "path_stats"], [250, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.resources": [[252, 9, 1, "", "Package"], [252, 9, 1, "", "Resource"], [253, 10, 0, "-", "abc"], [252, 11, 1, "", "as_file"], [252, 11, 1, "", "contents"], [252, 11, 1, "", "files"], [252, 11, 1, "", "is_resource"], [252, 11, 1, "", "open_binary"], [252, 11, 1, "", "open_text"], [252, 11, 1, "", "path"], [252, 11, 1, "", "read_binary"], [252, 11, 1, "", "read_text"]], "importlib.resources.abc": [[253, 12, 1, "", "ResourceReader"], [253, 12, 1, "", "Traversable"], [253, 12, 1, "", "TraversableResources"]], "importlib.resources.abc.ResourceReader": [[253, 8, 1, "", "contents"], [253, 8, 1, "", "is_resource"], [253, 8, 1, "", "open_resource"], [253, 8, 1, "", "resource_path"]], "importlib.resources.abc.Traversable": [[253, 8, 1, "", "__truediv__"], [253, 8, 1, "", "is_dir"], [253, 8, 1, "", "is_file"], [253, 8, 1, "", "iterdir"], [253, 8, 1, "", "joinpath"], [253, 7, 1, "", "name"], [253, 8, 1, "", "open"], [253, 8, 1, "", "read_bytes"], [253, 8, 1, "", "read_text"]], "importlib.resources.abc.TraversableResources": [[253, 8, 1, "", "files"]], "importlib.util": [[250, 12, 1, "", "LazyLoader"], [250, 7, 1, "", "MAGIC_NUMBER"], [250, 11, 1, "", "cache_from_source"], [250, 11, 1, "", "decode_source"], [250, 11, 1, "", "find_spec"], [250, 11, 1, "", "module_from_spec"], [250, 11, 1, "", "resolve_name"], [250, 11, 1, "", "source_from_cache"], [250, 11, 1, "", "source_hash"], [250, 11, 1, "", "spec_from_file_location"], [250, 11, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[250, 8, 1, "", "factory"]], "inspect": [[255, 12, 1, "", "BoundArguments"], [255, 9, 1, "", "CO_ASYNC_GENERATOR"], [255, 9, 1, "", "CO_COROUTINE"], [255, 9, 1, "", "CO_GENERATOR"], [255, 9, 1, "", "CO_ITERABLE_COROUTINE"], [255, 9, 1, "", "CO_NESTED"], [255, 9, 1, "", "CO_NEWLOCALS"], [255, 9, 1, "", "CO_OPTIMIZED"], [255, 9, 1, "", "CO_VARARGS"], [255, 9, 1, "", "CO_VARKEYWORDS"], [255, 12, 1, "", "FrameInfo"], [255, 12, 1, "", "Parameter"], [255, 12, 1, "", "Signature"], [255, 12, 1, "", "Traceback"], [255, 11, 1, "", "cleandoc"], [255, 11, 1, "", "currentframe"], [255, 11, 1, "", "formatargvalues"], [255, 11, 1, "", "get_annotations"], [255, 11, 1, "", "getargvalues"], [255, 11, 1, "", "getattr_static"], [255, 11, 1, "", "getcallargs"], [255, 11, 1, "", "getclasstree"], [255, 11, 1, "", "getclosurevars"], [255, 11, 1, "", "getcomments"], [255, 11, 1, "", "getcoroutinelocals"], [255, 11, 1, "", "getcoroutinestate"], [255, 11, 1, "", "getdoc"], [255, 11, 1, "", "getfile"], [255, 11, 1, "", "getframeinfo"], [255, 11, 1, "", "getfullargspec"], [255, 11, 1, "", "getgeneratorlocals"], [255, 11, 1, "", "getgeneratorstate"], [255, 11, 1, "", "getinnerframes"], [255, 11, 1, "", "getmembers"], [255, 11, 1, "", "getmembers_static"], [255, 11, 1, "", "getmodule"], [255, 11, 1, "", "getmodulename"], [255, 11, 1, "", "getmro"], [255, 11, 1, "", "getouterframes"], [255, 11, 1, "", "getsource"], [255, 11, 1, "", "getsourcefile"], [255, 11, 1, "", "getsourcelines"], [255, 11, 1, "", "isabstract"], [255, 11, 1, "", "isasyncgen"], [255, 11, 1, "", "isasyncgenfunction"], [255, 11, 1, "", "isawaitable"], [255, 11, 1, "", "isbuiltin"], [255, 11, 1, "", "isclass"], [255, 11, 1, "", "iscode"], [255, 11, 1, "", "iscoroutine"], [255, 11, 1, "", "iscoroutinefunction"], [255, 11, 1, "", "isdatadescriptor"], [255, 11, 1, "", "isframe"], [255, 11, 1, "", "isfunction"], [255, 11, 1, "", "isgenerator"], [255, 11, 1, "", "isgeneratorfunction"], [255, 11, 1, "", "isgetsetdescriptor"], [255, 11, 1, "", "ismemberdescriptor"], [255, 11, 1, "", "ismethod"], [255, 11, 1, "", "ismethoddescriptor"], [255, 11, 1, "", "ismethodwrapper"], [255, 11, 1, "", "ismodule"], [255, 11, 1, "", "isroutine"], [255, 11, 1, "", "istraceback"], [255, 11, 1, "", "signature"], [255, 11, 1, "", "stack"], [255, 11, 1, "", "trace"], [255, 11, 1, "", "unwrap"], [255, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[255, 8, 1, "", "apply_defaults"], [255, 7, 1, "", "args"], [255, 7, 1, "", "arguments"], [255, 7, 1, "", "kwargs"], [255, 7, 1, "", "signature"]], "inspect.FrameInfo": [[255, 7, 1, "", "code_context"], [255, 7, 1, "", "filename"], [255, 7, 1, "", "frame"], [255, 7, 1, "", "function"], [255, 7, 1, "", "index"], [255, 7, 1, "", "lineno"], [255, 7, 1, "", "positions"]], "inspect.Parameter": [[255, 7, 1, "", "annotation"], [255, 7, 1, "", "default"], [255, 7, 1, "", "empty"], [255, 7, 1, "", "kind"], [255, 7, 1, "", "name"], [255, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[255, 7, 1, "", "description"]], "inspect.Signature": [[255, 8, 1, "", "bind"], [255, 8, 1, "", "bind_partial"], [255, 7, 1, "", "empty"], [255, 8, 1, "", "from_callable"], [255, 7, 1, "", "parameters"], [255, 8, 1, "", "replace"], [255, 7, 1, "", "return_annotation"]], "inspect.Traceback": [[255, 7, 1, "", "code_context"], [255, 7, 1, "", "filename"], [255, 7, 1, "", "function"], [255, 7, 1, "", "index"], [255, 7, 1, "", "lineno"], [255, 7, 1, "", "positions"]], "instance": [[344, 7, 1, "", "__class__"]], "int": [[344, 8, 1, "", "as_integer_ratio"], [344, 8, 1, "", "bit_count"], [344, 8, 1, "", "bit_length"], [344, 8, 1, "", "from_bytes"], [344, 8, 1, "", "to_bytes"]], "io": [[258, 6, 1, "", "BlockingIOError"], [258, 12, 1, "", "BufferedIOBase"], [258, 12, 1, "", "BufferedRWPair"], [258, 12, 1, "", "BufferedRandom"], [258, 12, 1, "", "BufferedReader"], [258, 12, 1, "", "BufferedWriter"], [258, 12, 1, "", "BytesIO"], [258, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [258, 12, 1, "", "FileIO"], [258, 12, 1, "", "IOBase"], [258, 12, 1, "", "IncrementalNewlineDecoder"], [258, 12, 1, "", "RawIOBase"], [258, 12, 1, "", "StringIO"], [258, 12, 1, "", "TextIOBase"], [258, 12, 1, "", "TextIOWrapper"], [258, 6, 1, "", "UnsupportedOperation"], [258, 11, 1, "", "open"], [258, 11, 1, "", "open_code"], [258, 11, 1, "", "text_encoding"]], "io.BufferedIOBase": [[258, 8, 1, "", "detach"], [258, 7, 1, "", "raw"], [258, 8, 1, "", "read"], [258, 8, 1, "", "read1"], [258, 8, 1, "", "readinto"], [258, 8, 1, "", "readinto1"], [258, 8, 1, "", "write"]], "io.BufferedReader": [[258, 8, 1, "", "peek"], [258, 8, 1, "", "read"], [258, 8, 1, "", "read1"]], "io.BufferedWriter": [[258, 8, 1, "", "flush"], [258, 8, 1, "", "write"]], "io.BytesIO": [[258, 8, 1, "", "getbuffer"], [258, 8, 1, "", "getvalue"], [258, 8, 1, "", "read1"], [258, 8, 1, "", "readinto1"]], "io.FileIO": [[258, 7, 1, "", "mode"], [258, 7, 1, "", "name"]], "io.IOBase": [[258, 8, 1, "", "__del__"], [258, 8, 1, "", "close"], [258, 7, 1, "", "closed"], [258, 8, 1, "", "fileno"], [258, 8, 1, "", "flush"], [258, 8, 1, "", "isatty"], [258, 8, 1, "", "readable"], [258, 8, 1, "", "readline"], [258, 8, 1, "", "readlines"], [258, 8, 1, "", "seek"], [258, 8, 1, "", "seekable"], [258, 8, 1, "", "tell"], [258, 8, 1, "", "truncate"], [258, 8, 1, "", "writable"], [258, 8, 1, "", "writelines"]], "io.RawIOBase": [[258, 8, 1, "", "read"], [258, 8, 1, "", "readall"], [258, 8, 1, "", "readinto"], [258, 8, 1, "", "write"]], "io.StringIO": [[258, 8, 1, "", "getvalue"]], "io.TextIOBase": [[258, 7, 1, "", "buffer"], [258, 8, 1, "", "detach"], [258, 7, 1, "", "encoding"], [258, 7, 1, "", "errors"], [258, 7, 1, "", "newlines"], [258, 8, 1, "", "read"], [258, 8, 1, "", "readline"], [258, 8, 1, "", "seek"], [258, 8, 1, "", "tell"], [258, 8, 1, "", "write"]], "io.TextIOWrapper": [[258, 7, 1, "", "line_buffering"], [258, 8, 1, "", "reconfigure"], [258, 7, 1, "", "write_through"]], "ipaddress": [[259, 6, 1, "", "AddressValueError"], [259, 12, 1, "", "IPv4Address"], [259, 12, 1, "", "IPv4Interface"], [259, 12, 1, "", "IPv4Network"], [259, 12, 1, "", "IPv6Address"], [259, 12, 1, "", "IPv6Interface"], [259, 12, 1, "", "IPv6Network"], [259, 6, 1, "", "NetmaskValueError"], [259, 11, 1, "", "collapse_addresses"], [259, 11, 1, "", "get_mixed_type_key"], [259, 11, 1, "", "ip_address"], [259, 11, 1, "", "ip_interface"], [259, 11, 1, "", "ip_network"], [259, 11, 1, "", "summarize_address_range"], [259, 11, 1, "", "v4_int_to_packed"], [259, 11, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[259, 8, 1, "", "__format__"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "is_global"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "packed"], [259, 7, 1, "", "reverse_pointer"], [259, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[259, 7, 1, "", "ip"], [259, 7, 1, "", "network"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[259, 8, 1, "", "address_exclude"], [259, 7, 1, "", "broadcast_address"], [259, 8, 1, "", "compare_networks"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "hostmask"], [259, 8, 1, "", "hosts"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "netmask"], [259, 7, 1, "", "network_address"], [259, 7, 1, "", "num_addresses"], [259, 8, 1, "", "overlaps"], [259, 7, 1, "", "prefixlen"], [259, 8, 1, "", "subnet_of"], [259, 8, 1, "", "subnets"], [259, 8, 1, "", "supernet"], [259, 8, 1, "", "supernet_of"], [259, 7, 1, "", "version"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[259, 8, 1, "", "__format__"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "ipv4_mapped"], [259, 7, 1, "", "is_global"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_site_local"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "packed"], [259, 7, 1, "", "reverse_pointer"], [259, 7, 1, "", "scope_id"], [259, 7, 1, "", "sixtofour"], [259, 7, 1, "", "teredo"], [259, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[259, 7, 1, "", "ip"], [259, 7, 1, "", "network"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[259, 8, 1, "", "address_exclude"], [259, 7, 1, "", "broadcast_address"], [259, 8, 1, "", "compare_networks"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "hostmask"], [259, 8, 1, "", "hosts"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_site_local"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "netmask"], [259, 7, 1, "", "network_address"], [259, 7, 1, "", "num_addresses"], [259, 8, 1, "", "overlaps"], [259, 7, 1, "", "prefixlen"], [259, 8, 1, "", "subnet_of"], [259, 8, 1, "", "subnets"], [259, 8, 1, "", "supernet"], [259, 8, 1, "", "supernet_of"], [259, 7, 1, "", "version"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "iterator": [[344, 8, 1, "", "__iter__"], [344, 8, 1, "", "__next__"]], "itertools": [[261, 11, 1, "", "accumulate"], [261, 11, 1, "", "batched"], [261, 11, 1, "", "chain"], [261, 11, 1, "", "combinations"], [261, 11, 1, "", "combinations_with_replacement"], [261, 11, 1, "", "compress"], [261, 11, 1, "", "count"], [261, 11, 1, "", "cycle"], [261, 11, 1, "", "dropwhile"], [261, 11, 1, "", "filterfalse"], [261, 11, 1, "", "groupby"], [261, 11, 1, "", "islice"], [261, 11, 1, "", "pairwise"], [261, 11, 1, "", "permutations"], [261, 11, 1, "", "product"], [261, 11, 1, "", "repeat"], [261, 11, 1, "", "starmap"], [261, 11, 1, "", "takewhile"], [261, 11, 1, "", "tee"], [261, 11, 1, "", "zip_longest"]], "itertools.chain": [[261, 8, 1, "", "from_iterable"]], "json": [[262, 12, 1, "", "AttrDict"], [262, 6, 1, "", "JSONDecodeError"], [262, 12, 1, "", "JSONDecoder"], [262, 12, 1, "", "JSONEncoder"], [262, 11, 1, "", "dump"], [262, 11, 1, "", "dumps"], [262, 11, 1, "", "load"], [262, 11, 1, "", "loads"], [262, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[262, 7, 1, "", "colno"], [262, 7, 1, "", "doc"], [262, 7, 1, "", "lineno"], [262, 7, 1, "", "msg"], [262, 7, 1, "", "pos"]], "json.JSONDecoder": [[262, 8, 1, "", "decode"], [262, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[262, 8, 1, "", "default"], [262, 8, 1, "", "encode"], [262, 8, 1, "", "iterencode"]], "keyword": [[263, 11, 1, "", "iskeyword"], [263, 11, 1, "", "issoftkeyword"], [263, 9, 1, "", "kwlist"], [263, 9, 1, "", "softkwlist"]], "linecache": [[265, 11, 1, "", "checkcache"], [265, 11, 1, "", "clearcache"], [265, 11, 1, "", "getline"], [265, 11, 1, "", "lazycache"]], "list": [[344, 8, 1, "", "sort"]], "locale": [[266, 9, 1, "", "ALT_DIGITS"], [266, 9, 1, "", "CHAR_MAX"], [266, 9, 1, "", "CODESET"], [266, 9, 1, "", "CRNCYSTR"], [266, 9, 1, "", "D_FMT"], [266, 9, 1, "", "D_T_FMT"], [266, 9, 1, "", "ERA"], [266, 9, 1, "", "ERA_D_FMT"], [266, 9, 1, "", "ERA_D_T_FMT"], [266, 9, 1, "", "ERA_T_FMT"], [266, 6, 1, "", "Error"], [266, 9, 1, "", "LC_ALL"], [266, 9, 1, "", "LC_COLLATE"], [266, 9, 1, "", "LC_CTYPE"], [266, 9, 1, "", "LC_MESSAGES"], [266, 9, 1, "", "LC_MONETARY"], [266, 9, 1, "", "LC_NUMERIC"], [266, 9, 1, "", "LC_TIME"], [266, 9, 1, "", "NOEXPR"], [266, 9, 1, "", "RADIXCHAR"], [266, 9, 1, "", "THOUSEP"], [266, 9, 1, "", "T_FMT"], [266, 9, 1, "", "T_FMT_AMPM"], [266, 9, 1, "", "YESEXPR"], [266, 11, 1, "", "atof"], [266, 11, 1, "", "atoi"], [266, 11, 1, "", "bindtextdomain"], [266, 11, 1, "", "currency"], [266, 11, 1, "", "dcgettext"], [266, 11, 1, "", "delocalize"], [266, 11, 1, "", "dgettext"], [266, 11, 1, "", "format_string"], [266, 11, 1, "", "getdefaultlocale"], [266, 11, 1, "", "getencoding"], [266, 11, 1, "", "getlocale"], [266, 11, 1, "", "getpreferredencoding"], [266, 11, 1, "", "gettext"], [266, 11, 1, "", "localeconv"], [266, 11, 1, "", "localize"], [266, 11, 1, "", "nl_langinfo"], [266, 11, 1, "", "normalize"], [266, 11, 1, "", "resetlocale"], [266, 11, 1, "", "setlocale"], [266, 11, 1, "", "str"], [266, 11, 1, "", "strcoll"], [266, 11, 1, "", "strxfrm"], [266, 11, 1, "", "textdomain"]], "logging": [[267, 12, 1, "", "BufferingFormatter"], [269, 12, 1, "", "FileHandler"], [267, 12, 1, "", "Filter"], [267, 12, 1, "", "Formatter"], [267, 12, 1, "", "Handler"], [267, 12, 1, "", "LogRecord"], [267, 12, 1, "", "Logger"], [267, 12, 1, "", "LoggerAdapter"], [269, 12, 1, "", "NullHandler"], [269, 12, 1, "", "StreamHandler"], [267, 11, 1, "", "addLevelName"], [267, 11, 1, "", "basicConfig"], [267, 11, 1, "", "captureWarnings"], [268, 10, 0, "-", "config"], [267, 11, 1, "", "critical"], [267, 11, 1, "", "debug"], [267, 11, 1, "", "disable"], [267, 11, 1, "", "error"], [267, 11, 1, "", "exception"], [267, 11, 1, "", "getHandlerByName"], [267, 11, 1, "", "getHandlerNames"], [267, 11, 1, "", "getLevelName"], [267, 11, 1, "", "getLevelNamesMapping"], [267, 11, 1, "", "getLogRecordFactory"], [267, 11, 1, "", "getLogger"], [267, 11, 1, "", "getLoggerClass"], [269, 10, 0, "-", "handlers"], [267, 11, 1, "", "info"], [267, 7, 1, "", "lastResort"], [267, 11, 1, "", "log"], [267, 11, 1, "", "makeLogRecord"], [267, 11, 1, "", "setLogRecordFactory"], [267, 11, 1, "", "setLoggerClass"], [267, 11, 1, "", "shutdown"], [267, 11, 1, "", "warning"]], "logging.BufferingFormatter": [[267, 8, 1, "", "format"], [267, 8, 1, "", "formatFooter"], [267, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "emit"]], "logging.Filter": [[267, 8, 1, "", "filter"]], "logging.Formatter": [[267, 8, 1, "", "format"], [267, 8, 1, "", "formatException"], [267, 8, 1, "", "formatStack"], [267, 8, 1, "", "formatTime"]], "logging.Handler": [[267, 8, 1, "", "__init__"], [267, 8, 1, "", "acquire"], [267, 8, 1, "", "addFilter"], [267, 8, 1, "", "close"], [267, 8, 1, "", "createLock"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "filter"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "format"], [267, 8, 1, "", "handle"], [267, 8, 1, "", "handleError"], [267, 8, 1, "", "release"], [267, 8, 1, "", "removeFilter"], [267, 8, 1, "", "setFormatter"], [267, 8, 1, "", "setLevel"]], "logging.LogRecord": [[267, 8, 1, "", "getMessage"]], "logging.Logger": [[267, 8, 1, "", "addFilter"], [267, 8, 1, "", "addHandler"], [267, 8, 1, "", "critical"], [267, 8, 1, "", "debug"], [267, 8, 1, "", "error"], [267, 8, 1, "", "exception"], [267, 8, 1, "", "filter"], [267, 8, 1, "", "findCaller"], [267, 8, 1, "", "getChild"], [267, 8, 1, "", "getChildren"], [267, 8, 1, "", "getEffectiveLevel"], [267, 8, 1, "", "handle"], [267, 8, 1, "", "hasHandlers"], [267, 8, 1, "", "info"], [267, 8, 1, "", "isEnabledFor"], [267, 8, 1, "", "log"], [267, 8, 1, "", "makeRecord"], [267, 7, 1, "", "propagate"], [267, 8, 1, "", "removeFilter"], [267, 8, 1, "", "removeHandler"], [267, 8, 1, "", "setLevel"], [267, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[267, 8, 1, "", "process"]], "logging.NullHandler": [[269, 8, 1, "", "createLock"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "handle"]], "logging.StreamHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "setStream"], [269, 7, 1, "", "terminator"]], "logging.config": [[268, 11, 1, "", "dictConfig"], [268, 11, 1, "", "fileConfig"], [268, 11, 1, "", "listen"], [268, 11, 1, "", "stopListening"]], "logging.handlers": [[269, 12, 1, "", "BaseRotatingHandler"], [269, 12, 1, "", "BufferingHandler"], [269, 12, 1, "", "DatagramHandler"], [269, 12, 1, "", "HTTPHandler"], [269, 12, 1, "", "MemoryHandler"], [269, 12, 1, "", "NTEventLogHandler"], [269, 12, 1, "", "QueueHandler"], [269, 12, 1, "", "QueueListener"], [269, 12, 1, "", "RotatingFileHandler"], [269, 12, 1, "", "SMTPHandler"], [269, 12, 1, "", "SocketHandler"], [269, 12, 1, "", "SysLogHandler"], [269, 12, 1, "", "TimedRotatingFileHandler"], [269, 12, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[269, 7, 1, "", "namer"], [269, 8, 1, "", "rotate"], [269, 8, 1, "", "rotation_filename"], [269, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "makeSocket"], [269, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "setTarget"], [269, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "getEventCategory"], [269, 8, 1, "", "getEventType"], [269, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "enqueue"], [269, 7, 1, "", "listener"], [269, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[269, 8, 1, "", "dequeue"], [269, 8, 1, "", "enqueue_sentinel"], [269, 8, 1, "", "handle"], [269, 8, 1, "", "prepare"], [269, 8, 1, "", "start"], [269, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[269, 8, 1, "", "doRollover"], [269, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "createSocket"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "handleError"], [269, 8, 1, "", "makePickle"], [269, 8, 1, "", "makeSocket"], [269, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "createSocket"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "encodePriority"], [269, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[269, 8, 1, "", "doRollover"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[98, 8, 1, "", "__init__"]], "lzma": [[270, 12, 1, "", "LZMACompressor"], [270, 12, 1, "", "LZMADecompressor"], [270, 6, 1, "", "LZMAError"], [270, 12, 1, "", "LZMAFile"], [270, 11, 1, "", "compress"], [270, 11, 1, "", "decompress"], [270, 11, 1, "", "is_check_supported"], [270, 11, 1, "", "open"]], "lzma.LZMACompressor": [[270, 8, 1, "", "compress"], [270, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[270, 7, 1, "", "check"], [270, 8, 1, "", "decompress"], [270, 7, 1, "", "eof"], [270, 7, 1, "", "needs_input"], [270, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[270, 8, 1, "", "peek"]], "mailbox": [[271, 12, 1, "", "Babyl"], [271, 12, 1, "", "BabylMessage"], [271, 6, 1, "", "Error"], [271, 6, 1, "", "ExternalClashError"], [271, 6, 1, "", "FormatError"], [271, 12, 1, "", "MH"], [271, 12, 1, "", "MHMessage"], [271, 12, 1, "", "MMDF"], [271, 12, 1, "", "MMDFMessage"], [271, 12, 1, "", "Mailbox"], [271, 12, 1, "", "Maildir"], [271, 12, 1, "", "MaildirMessage"], [271, 12, 1, "", "Message"], [271, 6, 1, "", "NoSuchMailboxError"], [271, 6, 1, "", "NotEmptyError"], [271, 12, 1, "", "mbox"], [271, 12, 1, "", "mboxMessage"]], "mailbox.Babyl": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_labels"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[271, 8, 1, "", "add_label"], [271, 8, 1, "", "get_labels"], [271, 8, 1, "", "get_visible"], [271, 8, 1, "", "remove_label"], [271, 8, 1, "", "set_labels"], [271, 8, 1, "", "set_visible"], [271, 8, 1, "", "update_visible"]], "mailbox.MH": [[271, 8, 1, "", "__delitem__"], [271, 8, 1, "", "add_folder"], [271, 8, 1, "", "close"], [271, 8, 1, "", "discard"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_folder"], [271, 8, 1, "", "get_sequences"], [271, 8, 1, "", "list_folders"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "pack"], [271, 8, 1, "", "remove"], [271, 8, 1, "", "remove_folder"], [271, 8, 1, "", "set_sequences"], [271, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[271, 8, 1, "", "add_sequence"], [271, 8, 1, "", "get_sequences"], [271, 8, 1, "", "remove_sequence"], [271, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_from"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[271, 8, 1, "", "__contains__"], [271, 8, 1, "", "__delitem__"], [271, 8, 1, "", "__getitem__"], [271, 8, 1, "", "__iter__"], [271, 8, 1, "", "__len__"], [271, 8, 1, "", "__setitem__"], [271, 8, 1, "", "add"], [271, 8, 1, "", "clear"], [271, 8, 1, "", "close"], [271, 8, 1, "", "discard"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get"], [271, 8, 1, "", "get_bytes"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_message"], [271, 8, 1, "", "get_string"], [271, 8, 1, "", "items"], [271, 8, 1, "", "iteritems"], [271, 8, 1, "", "iterkeys"], [271, 8, 1, "", "itervalues"], [271, 8, 1, "", "keys"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "pop"], [271, 8, 1, "", "popitem"], [271, 8, 1, "", "remove"], [271, 8, 1, "", "unlock"], [271, 8, 1, "", "update"], [271, 8, 1, "", "values"]], "mailbox.Maildir": [[271, 8, 1, "", "__setitem__"], [271, 8, 1, "", "add"], [271, 8, 1, "", "add_folder"], [271, 8, 1, "", "clean"], [271, 8, 1, "", "close"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_folder"], [271, 8, 1, "", "list_folders"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "remove_folder"], [271, 8, 1, "", "unlock"], [271, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_date"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_info"], [271, 8, 1, "", "get_subdir"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_date"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_info"], [271, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_from"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_from"]], "mailcap": [[272, 11, 1, "", "findmatch"], [272, 11, 1, "", "getcaps"]], "marshal": [[274, 11, 1, "", "dump"], [274, 11, 1, "", "dumps"], [274, 11, 1, "", "load"], [274, 11, 1, "", "loads"], [274, 9, 1, "", "version"]], "math": [[275, 11, 1, "", "acos"], [275, 11, 1, "", "acosh"], [275, 11, 1, "", "asin"], [275, 11, 1, "", "asinh"], [275, 11, 1, "", "atan"], [275, 11, 1, "", "atan2"], [275, 11, 1, "", "atanh"], [275, 11, 1, "", "cbrt"], [275, 11, 1, "", "ceil"], [275, 11, 1, "", "comb"], [275, 11, 1, "", "copysign"], [275, 11, 1, "", "cos"], [275, 11, 1, "", "cosh"], [275, 11, 1, "", "degrees"], [275, 11, 1, "", "dist"], [275, 9, 1, "", "e"], [275, 11, 1, "", "erf"], [275, 11, 1, "", "erfc"], [275, 11, 1, "", "exp"], [275, 11, 1, "", "exp2"], [275, 11, 1, "", "expm1"], [275, 11, 1, "", "fabs"], [275, 11, 1, "", "factorial"], [275, 11, 1, "", "floor"], [275, 11, 1, "", "fmod"], [275, 11, 1, "", "frexp"], [275, 11, 1, "", "fsum"], [275, 11, 1, "", "gamma"], [275, 11, 1, "", "gcd"], [275, 11, 1, "", "hypot"], [275, 9, 1, "", "inf"], [275, 11, 1, "", "isclose"], [275, 11, 1, "", "isfinite"], [275, 11, 1, "", "isinf"], [275, 11, 1, "", "isnan"], [275, 11, 1, "", "isqrt"], [275, 11, 1, "", "lcm"], [275, 11, 1, "", "ldexp"], [275, 11, 1, "", "lgamma"], [275, 11, 1, "", "log"], [275, 11, 1, "", "log10"], [275, 11, 1, "", "log1p"], [275, 11, 1, "", "log2"], [275, 11, 1, "", "modf"], [275, 9, 1, "", "nan"], [275, 11, 1, "", "nextafter"], [275, 11, 1, "", "perm"], [275, 9, 1, "", "pi"], [275, 11, 1, "", "pow"], [275, 11, 1, "", "prod"], [275, 11, 1, "", "radians"], [275, 11, 1, "", "remainder"], [275, 11, 1, "", "sin"], [275, 11, 1, "", "sinh"], [275, 11, 1, "", "sqrt"], [275, 11, 1, "", "tan"], [275, 11, 1, "", "tanh"], [275, 9, 1, "", "tau"], [275, 11, 1, "", "trunc"], [275, 11, 1, "", "ulp"]], "memoryview": [[344, 8, 1, "", "__eq__"], [344, 7, 1, "", "c_contiguous"], [344, 8, 1, "", "cast"], [344, 7, 1, "", "contiguous"], [344, 7, 1, "", "f_contiguous"], [344, 7, 1, "", "format"], [344, 8, 1, "", "hex"], [344, 7, 1, "", "itemsize"], [344, 7, 1, "", "nbytes"], [344, 7, 1, "", "ndim"], [344, 7, 1, "", "obj"], [344, 7, 1, "", "readonly"], [344, 8, 1, "", "release"], [344, 7, 1, "", "shape"], [344, 7, 1, "", "strides"], [344, 7, 1, "", "suboffsets"], [344, 8, 1, "", "tobytes"], [344, 8, 1, "", "tolist"], [344, 8, 1, "", "toreadonly"]], "mimetypes": [[276, 12, 1, "", "MimeTypes"], [276, 11, 1, "", "add_type"], [276, 9, 1, "", "common_types"], [276, 9, 1, "", "encodings_map"], [276, 11, 1, "", "guess_all_extensions"], [276, 11, 1, "", "guess_extension"], [276, 11, 1, "", "guess_type"], [276, 11, 1, "", "init"], [276, 9, 1, "", "inited"], [276, 9, 1, "", "knownfiles"], [276, 11, 1, "", "read_mime_types"], [276, 9, 1, "", "suffix_map"], [276, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[276, 7, 1, "", "encodings_map"], [276, 8, 1, "", "guess_all_extensions"], [276, 8, 1, "", "guess_extension"], [276, 8, 1, "", "guess_type"], [276, 8, 1, "", "read"], [276, 8, 1, "", "read_windows_registry"], [276, 8, 1, "", "readfp"], [276, 7, 1, "", "suffix_map"], [276, 7, 1, "", "types_map"], [276, 7, 1, "", "types_map_inv"]], "mmap": [[278, 9, 1, "", "MADV_AUTOSYNC"], [278, 9, 1, "", "MADV_CORE"], [278, 9, 1, "", "MADV_DODUMP"], [278, 9, 1, "", "MADV_DOFORK"], [278, 9, 1, "", "MADV_DONTDUMP"], [278, 9, 1, "", "MADV_DONTFORK"], [278, 9, 1, "", "MADV_DONTNEED"], [278, 9, 1, "", "MADV_FREE"], [278, 9, 1, "", "MADV_FREE_REUSABLE"], [278, 9, 1, "", "MADV_FREE_REUSE"], [278, 9, 1, "", "MADV_HUGEPAGE"], [278, 9, 1, "", "MADV_HWPOISON"], [278, 9, 1, "", "MADV_MERGEABLE"], [278, 9, 1, "", "MADV_NOCORE"], [278, 9, 1, "", "MADV_NOHUGEPAGE"], [278, 9, 1, "", "MADV_NORMAL"], [278, 9, 1, "", "MADV_NOSYNC"], [278, 9, 1, "", "MADV_PROTECT"], [278, 9, 1, "", "MADV_RANDOM"], [278, 9, 1, "", "MADV_REMOVE"], [278, 9, 1, "", "MADV_SEQUENTIAL"], [278, 9, 1, "", "MADV_SOFT_OFFLINE"], [278, 9, 1, "", "MADV_UNMERGEABLE"], [278, 9, 1, "", "MADV_WILLNEED"], [278, 9, 1, "", "MAP_ANON"], [278, 9, 1, "", "MAP_ANONYMOUS"], [278, 9, 1, "", "MAP_DENYWRITE"], [278, 9, 1, "", "MAP_EXECUTABLE"], [278, 9, 1, "", "MAP_POPULATE"], [278, 9, 1, "", "MAP_PRIVATE"], [278, 9, 1, "", "MAP_SHARED"], [278, 9, 1, "", "MAP_STACK"], [278, 12, 1, "", "mmap"]], "mmap.mmap": [[278, 8, 1, "", "close"], [278, 7, 1, "", "closed"], [278, 8, 1, "", "find"], [278, 8, 1, "", "flush"], [278, 8, 1, "", "madvise"], [278, 8, 1, "", "move"], [278, 8, 1, "", "read"], [278, 8, 1, "", "read_byte"], [278, 8, 1, "", "readline"], [278, 8, 1, "", "resize"], [278, 8, 1, "", "rfind"], [278, 8, 1, "", "seek"], [278, 8, 1, "", "size"], [278, 8, 1, "", "tell"], [278, 8, 1, "", "write"], [278, 8, 1, "", "write_byte"]], "modulefinder": [[279, 11, 1, "", "AddPackagePath"], [279, 12, 1, "", "ModuleFinder"], [279, 11, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[279, 7, 1, "", "modules"], [279, 8, 1, "", "report"], [279, 8, 1, "", "run_script"]], "msilib": [[281, 12, 1, "", "Binary"], [281, 12, 1, "", "CAB"], [281, 12, 1, "", "Control"], [281, 11, 1, "", "CreateRecord"], [281, 12, 1, "", "Dialog"], [281, 12, 1, "", "Directory"], [281, 11, 1, "", "FCICreate"], [281, 12, 1, "", "Feature"], [281, 11, 1, "", "OpenDatabase"], [281, 12, 1, "", "RadioButtonGroup"], [281, 11, 1, "", "UuidCreate"], [281, 11, 1, "", "add_data"], [281, 11, 1, "", "add_stream"], [281, 11, 1, "", "add_tables"], [281, 11, 1, "", "gen_uuid"], [281, 11, 1, "", "init_database"], [281, 9, 1, "", "schema"], [281, 9, 1, "", "sequence"], [281, 9, 1, "", "text"]], "msilib.CAB": [[281, 8, 1, "", "append"], [281, 8, 1, "", "commit"]], "msilib.Control": [[281, 8, 1, "", "condition"], [281, 8, 1, "", "event"], [281, 8, 1, "", "mapping"]], "msilib.Database": [[281, 8, 1, "", "Close"], [281, 8, 1, "", "Commit"], [281, 8, 1, "", "GetSummaryInformation"], [281, 8, 1, "", "OpenView"]], "msilib.Dialog": [[281, 8, 1, "", "bitmap"], [281, 8, 1, "", "checkbox"], [281, 8, 1, "", "control"], [281, 8, 1, "", "line"], [281, 8, 1, "", "pushbutton"], [281, 8, 1, "", "radiogroup"], [281, 8, 1, "", "text"]], "msilib.Directory": [[281, 8, 1, "", "add_file"], [281, 8, 1, "", "glob"], [281, 8, 1, "", "remove_pyc"], [281, 8, 1, "", "start_component"]], "msilib.Feature": [[281, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[281, 8, 1, "", "add"]], "msilib.Record": [[281, 8, 1, "", "ClearData"], [281, 8, 1, "", "GetFieldCount"], [281, 8, 1, "", "GetInteger"], [281, 8, 1, "", "GetString"], [281, 8, 1, "", "SetInteger"], [281, 8, 1, "", "SetStream"], [281, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[281, 8, 1, "", "GetProperty"], [281, 8, 1, "", "GetPropertyCount"], [281, 8, 1, "", "Persist"], [281, 8, 1, "", "SetProperty"]], "msilib.View": [[281, 8, 1, "", "Close"], [281, 8, 1, "", "Execute"], [281, 8, 1, "", "Fetch"], [281, 8, 1, "", "GetColumnInfo"], [281, 8, 1, "", "Modify"]], "msvcrt": [[282, 9, 1, "", "LK_LOCK"], [282, 9, 1, "", "LK_NBLCK"], [282, 9, 1, "", "LK_NBRLCK"], [282, 9, 1, "", "LK_RLCK"], [282, 9, 1, "", "LK_UNLCK"], [282, 11, 1, "", "get_osfhandle"], [282, 11, 1, "", "getch"], [282, 11, 1, "", "getche"], [282, 11, 1, "", "getwch"], [282, 11, 1, "", "getwche"], [282, 11, 1, "", "heapmin"], [282, 11, 1, "", "kbhit"], [282, 11, 1, "", "locking"], [282, 11, 1, "", "open_osfhandle"], [282, 11, 1, "", "putch"], [282, 11, 1, "", "putwch"], [282, 11, 1, "", "setmode"], [282, 11, 1, "", "ungetch"], [282, 11, 1, "", "ungetwch"]], "multiprocessing": [[283, 11, 1, "", "Array"], [283, 6, 1, "", "AuthenticationError"], [283, 12, 1, "", "Barrier"], [283, 12, 1, "", "BoundedSemaphore"], [283, 6, 1, "", "BufferTooShort"], [283, 12, 1, "", "Condition"], [283, 12, 1, "", "Event"], [283, 12, 1, "", "JoinableQueue"], [283, 12, 1, "", "Lock"], [283, 11, 1, "", "Manager"], [283, 11, 1, "", "Pipe"], [283, 12, 1, "", "Process"], [283, 6, 1, "", "ProcessError"], [283, 12, 1, "", "Queue"], [283, 12, 1, "", "RLock"], [283, 12, 1, "", "Semaphore"], [283, 12, 1, "", "SimpleQueue"], [283, 6, 1, "", "TimeoutError"], [283, 11, 1, "", "Value"], [283, 11, 1, "", "active_children"], [283, 10, 0, "-", "connection"], [283, 11, 1, "", "cpu_count"], [283, 11, 1, "", "current_process"], [283, 10, 0, "-", "dummy"], [283, 11, 1, "", "freeze_support"], [283, 11, 1, "", "get_all_start_methods"], [283, 11, 1, "", "get_context"], [283, 11, 1, "", "get_logger"], [283, 11, 1, "", "get_start_method"], [283, 11, 1, "", "log_to_stderr"], [283, 10, 0, "-", "managers"], [283, 11, 1, "", "parent_process"], [283, 10, 0, "-", "pool"], [283, 11, 1, "", "set_executable"], [283, 11, 1, "", "set_start_method"], [284, 10, 0, "-", "shared_memory"], [283, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[283, 8, 1, "", "join"], [283, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[283, 8, 1, "", "acquire"], [283, 8, 1, "", "release"]], "multiprocessing.Process": [[283, 7, 1, "", "authkey"], [283, 8, 1, "", "close"], [283, 7, 1, "", "daemon"], [283, 7, 1, "", "exitcode"], [283, 8, 1, "", "is_alive"], [283, 8, 1, "", "join"], [283, 8, 1, "", "kill"], [283, 7, 1, "", "name"], [283, 7, 1, "", "pid"], [283, 8, 1, "", "run"], [283, 7, 1, "", "sentinel"], [283, 8, 1, "", "start"], [283, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[283, 8, 1, "", "cancel_join_thread"], [283, 8, 1, "", "close"], [283, 8, 1, "", "empty"], [283, 8, 1, "", "full"], [283, 8, 1, "", "get"], [283, 8, 1, "", "get_nowait"], [283, 8, 1, "", "join_thread"], [283, 8, 1, "", "put"], [283, 8, 1, "", "put_nowait"], [283, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[283, 8, 1, "", "acquire"], [283, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[283, 8, 1, "", "close"], [283, 8, 1, "", "empty"], [283, 8, 1, "", "get"], [283, 8, 1, "", "put"]], "multiprocessing.connection": [[283, 11, 1, "", "Client"], [283, 12, 1, "", "Connection"], [283, 12, 1, "", "Listener"], [283, 11, 1, "", "answer_challenge"], [283, 11, 1, "", "deliver_challenge"], [283, 11, 1, "", "wait"]], "multiprocessing.connection.Connection": [[283, 8, 1, "", "close"], [283, 8, 1, "", "fileno"], [283, 8, 1, "", "poll"], [283, 8, 1, "", "recv"], [283, 8, 1, "", "recv_bytes"], [283, 8, 1, "", "recv_bytes_into"], [283, 8, 1, "", "send"], [283, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[283, 8, 1, "", "accept"], [283, 7, 1, "", "address"], [283, 8, 1, "", "close"], [283, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[283, 12, 1, "", "BaseManager"], [283, 12, 1, "", "BaseProxy"], [283, 12, 1, "", "Namespace"], [284, 12, 1, "", "SharedMemoryManager"], [283, 12, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[283, 7, 1, "", "address"], [283, 8, 1, "", "connect"], [283, 8, 1, "", "get_server"], [283, 8, 1, "", "register"], [283, 8, 1, "", "shutdown"], [283, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[283, 8, 1, "", "__repr__"], [283, 8, 1, "", "__str__"], [283, 8, 1, "", "_callmethod"], [283, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[284, 8, 1, "", "ShareableList"], [284, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[283, 8, 1, "", "Array"], [283, 8, 1, "", "Barrier"], [283, 8, 1, "", "BoundedSemaphore"], [283, 8, 1, "", "Condition"], [283, 8, 1, "", "Event"], [283, 8, 1, "", "Lock"], [283, 8, 1, "", "Namespace"], [283, 8, 1, "", "Queue"], [283, 8, 1, "", "RLock"], [283, 8, 1, "", "Semaphore"], [283, 8, 1, "", "Value"], [283, 8, 1, "", "dict"], [283, 8, 1, "", "list"]], "multiprocessing.pool": [[283, 12, 1, "", "AsyncResult"], [283, 12, 1, "", "Pool"], [283, 12, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[283, 8, 1, "", "get"], [283, 8, 1, "", "ready"], [283, 8, 1, "", "successful"], [283, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[283, 8, 1, "", "apply"], [283, 8, 1, "", "apply_async"], [283, 8, 1, "", "close"], [283, 8, 1, "", "imap"], [283, 8, 1, "", "imap_unordered"], [283, 8, 1, "", "join"], [283, 8, 1, "", "map"], [283, 8, 1, "", "map_async"], [283, 8, 1, "", "starmap"], [283, 8, 1, "", "starmap_async"], [283, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[284, 12, 1, "", "ShareableList"], [284, 12, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[284, 8, 1, "", "count"], [284, 7, 1, "", "format"], [284, 8, 1, "", "index"], [284, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[284, 7, 1, "", "buf"], [284, 8, 1, "", "close"], [284, 7, 1, "", "name"], [284, 7, 1, "", "size"], [284, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[283, 11, 1, "", "Array"], [283, 11, 1, "", "RawArray"], [283, 11, 1, "", "RawValue"], [283, 11, 1, "", "Value"], [283, 11, 1, "", "copy"], [283, 11, 1, "", "synchronized"]], "netrc": [[286, 6, 1, "", "NetrcParseError"], [286, 12, 1, "", "netrc"]], "netrc.netrc": [[286, 8, 1, "", "__repr__"], [286, 8, 1, "", "authenticators"], [286, 7, 1, "", "hosts"], [286, 7, 1, "", "macros"]], "nis": [[287, 11, 1, "", "cat"], [287, 6, 1, "", "error"], [287, 11, 1, "", "get_default_domain"], [287, 11, 1, "", "maps"], [287, 11, 1, "", "match"]], "nntplib": [[288, 12, 1, "", "NNTP"], [288, 6, 1, "", "NNTPDataError"], [288, 6, 1, "", "NNTPError"], [288, 6, 1, "", "NNTPPermanentError"], [288, 6, 1, "", "NNTPProtocolError"], [288, 6, 1, "", "NNTPReplyError"], [288, 6, 1, "", "NNTPTemporaryError"], [288, 12, 1, "", "NNTP_SSL"], [288, 11, 1, "", "decode_header"]], "nntplib.NNTP": [[288, 8, 1, "", "article"], [288, 8, 1, "", "body"], [288, 8, 1, "", "date"], [288, 8, 1, "", "description"], [288, 8, 1, "", "descriptions"], [288, 8, 1, "", "getcapabilities"], [288, 8, 1, "", "getwelcome"], [288, 8, 1, "", "group"], [288, 8, 1, "", "head"], [288, 8, 1, "", "help"], [288, 8, 1, "", "ihave"], [288, 8, 1, "", "last"], [288, 8, 1, "", "list"], [288, 8, 1, "", "login"], [288, 8, 1, "", "newgroups"], [288, 8, 1, "", "newnews"], [288, 8, 1, "", "next"], [288, 7, 1, "", "nntp_implementation"], [288, 7, 1, "", "nntp_version"], [288, 8, 1, "", "over"], [288, 8, 1, "", "post"], [288, 8, 1, "", "quit"], [288, 8, 1, "", "set_debuglevel"], [288, 8, 1, "", "slave"], [288, 8, 1, "", "starttls"], [288, 8, 1, "", "stat"], [288, 8, 1, "", "xhdr"], [288, 8, 1, "", "xover"]], "nntplib.NNTPError": [[288, 7, 1, "", "response"]], "numbers": [[289, 12, 1, "", "Complex"], [289, 12, 1, "", "Integral"], [289, 12, 1, "", "Number"], [289, 12, 1, "", "Rational"], [289, 12, 1, "", "Real"]], "numbers.Complex": [[289, 8, 1, "", "conjugate"], [289, 7, 1, "", "imag"], [289, 7, 1, "", "real"]], "numbers.Rational": [[289, 7, 1, "", "denominator"], [289, 7, 1, "", "numerator"]], "object": [[427, 8, 1, "", "__abs__"], [427, 8, 1, "", "__add__"], [427, 8, 1, "", "__aenter__"], [427, 8, 1, "", "__aexit__"], [427, 8, 1, "", "__aiter__"], [427, 8, 1, "", "__and__"], [427, 8, 1, "", "__anext__"], [427, 8, 1, "", "__await__"], [427, 8, 1, "", "__bool__"], [427, 8, 1, "", "__bytes__"], [427, 8, 1, "", "__call__"], [427, 8, 1, "", "__ceil__"], [427, 8, 1, "", "__class_getitem__"], [427, 8, 1, "", "__complex__"], [427, 8, 1, "", "__contains__"], [427, 8, 1, "", "__del__"], [427, 8, 1, "", "__delattr__"], [427, 8, 1, "", "__delete__"], [427, 8, 1, "", "__delitem__"], [344, 7, 1, "", "__dict__"], [427, 8, 1, "", "__dir__"], [427, 8, 1, "", "__divmod__"], [427, 8, 1, "", "__enter__"], [427, 8, 1, "", "__eq__"], [427, 8, 1, "", "__exit__"], [427, 8, 1, "", "__float__"], [427, 8, 1, "", "__floor__"], [427, 8, 1, "", "__floordiv__"], [427, 8, 1, "", "__format__"], [427, 8, 1, "", "__ge__"], [427, 8, 1, "", "__get__"], [427, 8, 1, "", "__getattr__"], [427, 8, 1, "", "__getattribute__"], [427, 8, 1, "", "__getitem__"], [299, 8, 1, "", "__getnewargs__"], [299, 8, 1, "", "__getnewargs_ex__"], [299, 8, 1, "", "__getstate__"], [427, 8, 1, "", "__gt__"], [427, 8, 1, "", "__hash__"], [427, 8, 1, "", "__iadd__"], [427, 8, 1, "", "__iand__"], [427, 8, 1, "", "__ifloordiv__"], [427, 8, 1, "", "__ilshift__"], [427, 8, 1, "", "__imatmul__"], [427, 8, 1, "", "__imod__"], [427, 8, 1, "", "__imul__"], [427, 8, 1, "", "__index__"], [427, 8, 1, "", "__init__"], [427, 8, 1, "", "__init_subclass__"], [427, 8, 1, "", "__int__"], [427, 8, 1, "", "__invert__"], [427, 8, 1, "", "__ior__"], [427, 8, 1, "", "__ipow__"], [427, 8, 1, "", "__irshift__"], [427, 8, 1, "", "__isub__"], [427, 8, 1, "", "__iter__"], [427, 8, 1, "", "__itruediv__"], [427, 8, 1, "", "__ixor__"], [427, 8, 1, "", "__le__"], [427, 8, 1, "", "__len__"], [427, 8, 1, "", "__length_hint__"], [427, 8, 1, "", "__lshift__"], [427, 8, 1, "", "__lt__"], [427, 9, 1, "", "__match_args__"], [427, 8, 1, "", "__matmul__"], [427, 8, 1, "", "__missing__"], [427, 8, 1, "", "__mod__"], [427, 8, 1, "", "__mul__"], [427, 8, 1, "", "__ne__"], [427, 8, 1, "", "__neg__"], [427, 8, 1, "", "__new__"], [427, 8, 1, "", "__or__"], [427, 8, 1, "", "__pos__"], [427, 8, 1, "", "__pow__"], [427, 8, 1, "", "__radd__"], [427, 8, 1, "", "__rand__"], [427, 8, 1, "", "__rdivmod__"], [299, 8, 1, "", "__reduce__"], [299, 8, 1, "", "__reduce_ex__"], [427, 8, 1, "", "__repr__"], [427, 8, 1, "", "__reversed__"], [427, 8, 1, "", "__rfloordiv__"], [427, 8, 1, "", "__rlshift__"], [427, 8, 1, "", "__rmatmul__"], [427, 8, 1, "", "__rmod__"], [427, 8, 1, "", "__rmul__"], [427, 8, 1, "", "__ror__"], [427, 8, 1, "", "__round__"], [427, 8, 1, "", "__rpow__"], [427, 8, 1, "", "__rrshift__"], [427, 8, 1, "", "__rshift__"], [427, 8, 1, "", "__rsub__"], [427, 8, 1, "", "__rtruediv__"], [427, 8, 1, "", "__rxor__"], [427, 8, 1, "", "__set__"], [427, 8, 1, "", "__set_name__"], [427, 8, 1, "", "__setattr__"], [427, 8, 1, "", "__setitem__"], [299, 8, 1, "", "__setstate__"], [427, 9, 1, "", "__slots__"], [427, 8, 1, "", "__str__"], [427, 8, 1, "", "__sub__"], [427, 8, 1, "", "__truediv__"], [427, 8, 1, "", "__trunc__"], [427, 8, 1, "", "__xor__"]], "operator": [[291, 11, 1, "", "__abs__"], [291, 11, 1, "", "__add__"], [291, 11, 1, "", "__and__"], [291, 11, 1, "", "__call__"], [291, 11, 1, "", "__concat__"], [291, 11, 1, "", "__contains__"], [291, 11, 1, "", "__delitem__"], [291, 11, 1, "", "__eq__"], [291, 11, 1, "", "__floordiv__"], [291, 11, 1, "", "__ge__"], [291, 11, 1, "", "__getitem__"], [291, 11, 1, "", "__gt__"], [291, 11, 1, "", "__iadd__"], [291, 11, 1, "", "__iand__"], [291, 11, 1, "", "__iconcat__"], [291, 11, 1, "", "__ifloordiv__"], [291, 11, 1, "", "__ilshift__"], [291, 11, 1, "", "__imatmul__"], [291, 11, 1, "", "__imod__"], [291, 11, 1, "", "__imul__"], [291, 11, 1, "", "__index__"], [291, 11, 1, "", "__inv__"], [291, 11, 1, "", "__invert__"], [291, 11, 1, "", "__ior__"], [291, 11, 1, "", "__ipow__"], [291, 11, 1, "", "__irshift__"], [291, 11, 1, "", "__isub__"], [291, 11, 1, "", "__itruediv__"], [291, 11, 1, "", "__ixor__"], [291, 11, 1, "", "__le__"], [291, 11, 1, "", "__lshift__"], [291, 11, 1, "", "__lt__"], [291, 11, 1, "", "__matmul__"], [291, 11, 1, "", "__mod__"], [291, 11, 1, "", "__mul__"], [291, 11, 1, "", "__ne__"], [291, 11, 1, "", "__neg__"], [291, 11, 1, "", "__not__"], [291, 11, 1, "", "__or__"], [291, 11, 1, "", "__pos__"], [291, 11, 1, "", "__pow__"], [291, 11, 1, "", "__rshift__"], [291, 11, 1, "", "__setitem__"], [291, 11, 1, "", "__sub__"], [291, 11, 1, "", "__truediv__"], [291, 11, 1, "", "__xor__"], [291, 11, 1, "", "abs"], [291, 11, 1, "", "add"], [291, 11, 1, "", "and_"], [291, 11, 1, "", "attrgetter"], [291, 11, 1, "", "call"], [291, 11, 1, "", "concat"], [291, 11, 1, "", "contains"], [291, 11, 1, "", "countOf"], [291, 11, 1, "", "delitem"], [291, 11, 1, "", "eq"], [291, 11, 1, "", "floordiv"], [291, 11, 1, "", "ge"], [291, 11, 1, "", "getitem"], [291, 11, 1, "", "gt"], [291, 11, 1, "", "iadd"], [291, 11, 1, "", "iand"], [291, 11, 1, "", "iconcat"], [291, 11, 1, "", "ifloordiv"], [291, 11, 1, "", "ilshift"], [291, 11, 1, "", "imatmul"], [291, 11, 1, "", "imod"], [291, 11, 1, "", "imul"], [291, 11, 1, "", "index"], [291, 11, 1, "", "indexOf"], [291, 11, 1, "", "inv"], [291, 11, 1, "", "invert"], [291, 11, 1, "", "ior"], [291, 11, 1, "", "ipow"], [291, 11, 1, "", "irshift"], [291, 11, 1, "", "is_"], [291, 11, 1, "", "is_not"], [291, 11, 1, "", "isub"], [291, 11, 1, "", "itemgetter"], [291, 11, 1, "", "itruediv"], [291, 11, 1, "", "ixor"], [291, 11, 1, "", "le"], [291, 11, 1, "", "length_hint"], [291, 11, 1, "", "lshift"], [291, 11, 1, "", "lt"], [291, 11, 1, "", "matmul"], [291, 11, 1, "", "methodcaller"], [291, 11, 1, "", "mod"], [291, 11, 1, "", "mul"], [291, 11, 1, "", "ne"], [291, 11, 1, "", "neg"], [291, 11, 1, "", "not_"], [291, 11, 1, "", "or_"], [291, 11, 1, "", "pos"], [291, 11, 1, "", "pow"], [291, 11, 1, "", "rshift"], [291, 11, 1, "", "setitem"], [291, 11, 1, "", "sub"], [291, 11, 1, "", "truediv"], [291, 11, 1, "", "truth"], [291, 11, 1, "", "xor"]], "optparse.Option": [[292, 7, 1, "", "ACTIONS"], [292, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [292, 7, 1, "", "STORE_ACTIONS"], [292, 7, 1, "", "TYPED_ACTIONS"], [292, 7, 1, "", "TYPES"], [292, 7, 1, "", "TYPE_CHECKER"], [292, 7, 1, "", "action"], [292, 7, 1, "", "callback"], [292, 7, 1, "", "callback_args"], [292, 7, 1, "", "callback_kwargs"], [292, 7, 1, "", "choices"], [292, 7, 1, "", "const"], [292, 7, 1, "", "default"], [292, 7, 1, "", "dest"], [292, 7, 1, "", "help"], [292, 7, 1, "", "metavar"], [292, 7, 1, "", "nargs"], [292, 7, 1, "", "type"]], "optparse": [[292, 12, 1, "", "OptionGroup"], [292, 12, 1, "", "OptionParser"]], "optparse.OptionParser": [[292, 8, 1, "", "add_option"], [292, 8, 1, "", "disable_interspersed_args"], [292, 8, 1, "", "enable_interspersed_args"], [292, 8, 1, "", "get_option"], [292, 8, 1, "", "get_option_group"], [292, 8, 1, "", "get_usage"], [292, 8, 1, "", "get_version"], [292, 8, 1, "", "has_option"], [292, 8, 1, "", "print_usage"], [292, 8, 1, "", "print_version"], [292, 8, 1, "", "remove_option"], [292, 8, 1, "", "set_defaults"], [292, 8, 1, "", "set_usage"]], "os": [[293, 9, 1, "", "CLD_CONTINUED"], [293, 9, 1, "", "CLD_DUMPED"], [293, 9, 1, "", "CLD_EXITED"], [293, 9, 1, "", "CLD_KILLED"], [293, 9, 1, "", "CLD_STOPPED"], [293, 9, 1, "", "CLD_TRAPPED"], [293, 9, 1, "", "CLONE_FILES"], [293, 9, 1, "", "CLONE_FS"], [293, 9, 1, "", "CLONE_NEWCGROUP"], [293, 9, 1, "", "CLONE_NEWIPC"], [293, 9, 1, "", "CLONE_NEWNET"], [293, 9, 1, "", "CLONE_NEWNS"], [293, 9, 1, "", "CLONE_NEWPID"], [293, 9, 1, "", "CLONE_NEWTIME"], [293, 9, 1, "", "CLONE_NEWUSER"], [293, 9, 1, "", "CLONE_NEWUTS"], [293, 9, 1, "", "CLONE_SIGHAND"], [293, 9, 1, "", "CLONE_SYSVSEM"], [293, 9, 1, "", "CLONE_THREAD"], [293, 9, 1, "", "CLONE_VM"], [293, 12, 1, "", "DirEntry"], [293, 9, 1, "", "EFD_CLOEXEC"], [293, 9, 1, "", "EFD_NONBLOCK"], [293, 9, 1, "", "EFD_SEMAPHORE"], [293, 9, 1, "", "EX_CANTCREAT"], [293, 9, 1, "", "EX_CONFIG"], [293, 9, 1, "", "EX_DATAERR"], [293, 9, 1, "", "EX_IOERR"], [293, 9, 1, "", "EX_NOHOST"], [293, 9, 1, "", "EX_NOINPUT"], [293, 9, 1, "", "EX_NOPERM"], [293, 9, 1, "", "EX_NOTFOUND"], [293, 9, 1, "", "EX_NOUSER"], [293, 9, 1, "", "EX_OK"], [293, 9, 1, "", "EX_OSERR"], [293, 9, 1, "", "EX_OSFILE"], [293, 9, 1, "", "EX_PROTOCOL"], [293, 9, 1, "", "EX_SOFTWARE"], [293, 9, 1, "", "EX_TEMPFAIL"], [293, 9, 1, "", "EX_UNAVAILABLE"], [293, 9, 1, "", "EX_USAGE"], [293, 9, 1, "", "F_LOCK"], [293, 9, 1, "", "F_OK"], [293, 9, 1, "", "F_TEST"], [293, 9, 1, "", "F_TLOCK"], [293, 9, 1, "", "F_ULOCK"], [293, 9, 1, "", "GRND_NONBLOCK"], [293, 9, 1, "", "GRND_RANDOM"], [293, 9, 1, "", "MFD_ALLOW_SEALING"], [293, 9, 1, "", "MFD_CLOEXEC"], [293, 9, 1, "", "MFD_HUGETLB"], [293, 9, 1, "", "MFD_HUGE_16GB"], [293, 9, 1, "", "MFD_HUGE_16MB"], [293, 9, 1, "", "MFD_HUGE_1GB"], [293, 9, 1, "", "MFD_HUGE_1MB"], [293, 9, 1, "", "MFD_HUGE_256MB"], [293, 9, 1, "", "MFD_HUGE_2GB"], [293, 9, 1, "", "MFD_HUGE_2MB"], [293, 9, 1, "", "MFD_HUGE_32MB"], [293, 9, 1, "", "MFD_HUGE_512KB"], [293, 9, 1, "", "MFD_HUGE_512MB"], [293, 9, 1, "", "MFD_HUGE_64KB"], [293, 9, 1, "", "MFD_HUGE_8MB"], [293, 9, 1, "", "MFD_HUGE_MASK"], [293, 9, 1, "", "MFD_HUGE_SHIFT"], [293, 9, 1, "", "O_APPEND"], [293, 9, 1, "", "O_ASYNC"], [293, 9, 1, "", "O_BINARY"], [293, 9, 1, "", "O_CLOEXEC"], [293, 9, 1, "", "O_CREAT"], [293, 9, 1, "", "O_DIRECT"], [293, 9, 1, "", "O_DIRECTORY"], [293, 9, 1, "", "O_DSYNC"], [293, 9, 1, "", "O_EVTONLY"], [293, 9, 1, "", "O_EXCL"], [293, 9, 1, "", "O_EXLOCK"], [293, 9, 1, "", "O_FSYNC"], [293, 9, 1, "", "O_NDELAY"], [293, 9, 1, "", "O_NOATIME"], [293, 9, 1, "", "O_NOCTTY"], [293, 9, 1, "", "O_NOFOLLOW"], [293, 9, 1, "", "O_NOFOLLOW_ANY"], [293, 9, 1, "", "O_NOINHERIT"], [293, 9, 1, "", "O_NONBLOCK"], [293, 9, 1, "", "O_PATH"], [293, 9, 1, "", "O_RANDOM"], [293, 9, 1, "", "O_RDONLY"], [293, 9, 1, "", "O_RDWR"], [293, 9, 1, "", "O_RSYNC"], [293, 9, 1, "", "O_SEQUENTIAL"], [293, 9, 1, "", "O_SHLOCK"], [293, 9, 1, "", "O_SHORT_LIVED"], [293, 9, 1, "", "O_SYMLINK"], [293, 9, 1, "", "O_SYNC"], [293, 9, 1, "", "O_TEMPORARY"], [293, 9, 1, "", "O_TEXT"], [293, 9, 1, "", "O_TMPFILE"], [293, 9, 1, "", "O_TRUNC"], [293, 9, 1, "", "O_WRONLY"], [293, 9, 1, "", "PIDFD_NONBLOCK"], [293, 9, 1, "", "POSIX_FADV_DONTNEED"], [293, 9, 1, "", "POSIX_FADV_NOREUSE"], [293, 9, 1, "", "POSIX_FADV_NORMAL"], [293, 9, 1, "", "POSIX_FADV_RANDOM"], [293, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [293, 9, 1, "", "POSIX_FADV_WILLNEED"], [293, 9, 1, "", "POSIX_SPAWN_CLOSE"], [293, 9, 1, "", "POSIX_SPAWN_DUP2"], [293, 9, 1, "", "POSIX_SPAWN_OPEN"], [293, 9, 1, "", "PRIO_PGRP"], [293, 9, 1, "", "PRIO_PROCESS"], [293, 9, 1, "", "PRIO_USER"], [293, 9, 1, "", "P_ALL"], [293, 9, 1, "", "P_DETACH"], [293, 9, 1, "", "P_NOWAIT"], [293, 9, 1, "", "P_NOWAITO"], [293, 9, 1, "", "P_OVERLAY"], [293, 9, 1, "", "P_PGID"], [293, 9, 1, "", "P_PID"], [293, 9, 1, "", "P_PIDFD"], [293, 9, 1, "", "P_WAIT"], [293, 12, 1, "", "PathLike"], [293, 9, 1, "", "RTLD_DEEPBIND"], [293, 9, 1, "", "RTLD_GLOBAL"], [293, 9, 1, "", "RTLD_LAZY"], [293, 9, 1, "", "RTLD_LOCAL"], [293, 9, 1, "", "RTLD_NODELETE"], [293, 9, 1, "", "RTLD_NOLOAD"], [293, 9, 1, "", "RTLD_NOW"], [293, 9, 1, "", "RWF_APPEND"], [293, 9, 1, "", "RWF_DSYNC"], [293, 9, 1, "", "RWF_HIPRI"], [293, 9, 1, "", "RWF_NOWAIT"], [293, 9, 1, "", "RWF_SYNC"], [293, 9, 1, "", "R_OK"], [293, 9, 1, "", "SCHED_BATCH"], [293, 9, 1, "", "SCHED_FIFO"], [293, 9, 1, "", "SCHED_IDLE"], [293, 9, 1, "", "SCHED_OTHER"], [293, 9, 1, "", "SCHED_RESET_ON_FORK"], [293, 9, 1, "", "SCHED_RR"], [293, 9, 1, "", "SCHED_SPORADIC"], [293, 9, 1, "", "SEEK_CUR"], [293, 9, 1, "", "SEEK_END"], [293, 9, 1, "", "SEEK_SET"], [293, 9, 1, "", "SF_MNOWAIT"], [293, 9, 1, "", "SF_NOCACHE"], [293, 9, 1, "", "SF_NODISKIO"], [293, 9, 1, "", "SF_SYNC"], [293, 9, 1, "", "SPLICE_F_MORE"], [293, 9, 1, "", "SPLICE_F_MOVE"], [293, 9, 1, "", "SPLICE_F_NONBLOCK"], [293, 9, 1, "", "WCONTINUED"], [293, 11, 1, "", "WCOREDUMP"], [293, 9, 1, "", "WEXITED"], [293, 11, 1, "", "WEXITSTATUS"], [293, 11, 1, "", "WIFCONTINUED"], [293, 11, 1, "", "WIFEXITED"], [293, 11, 1, "", "WIFSIGNALED"], [293, 11, 1, "", "WIFSTOPPED"], [293, 9, 1, "", "WNOHANG"], [293, 9, 1, "", "WNOWAIT"], [293, 9, 1, "", "WSTOPPED"], [293, 11, 1, "", "WSTOPSIG"], [293, 11, 1, "", "WTERMSIG"], [293, 9, 1, "", "WUNTRACED"], [293, 9, 1, "", "W_OK"], [293, 9, 1, "", "XATTR_CREATE"], [293, 9, 1, "", "XATTR_REPLACE"], [293, 9, 1, "", "XATTR_SIZE_MAX"], [293, 9, 1, "", "X_OK"], [293, 11, 1, "", "_exit"], [293, 11, 1, "", "abort"], [293, 11, 1, "", "access"], [293, 11, 1, "", "add_dll_directory"], [293, 9, 1, "", "altsep"], [293, 11, 1, "", "chdir"], [293, 11, 1, "", "chflags"], [293, 11, 1, "", "chmod"], [293, 11, 1, "", "chown"], [293, 11, 1, "", "chroot"], [293, 11, 1, "", "close"], [293, 11, 1, "", "closerange"], [293, 11, 1, "", "confstr"], [293, 9, 1, "", "confstr_names"], [293, 11, 1, "", "copy_file_range"], [293, 11, 1, "", "cpu_count"], [293, 11, 1, "", "ctermid"], [293, 9, 1, "", "curdir"], [293, 9, 1, "", "defpath"], [293, 11, 1, "", "device_encoding"], [293, 9, 1, "", "devnull"], [293, 11, 1, "", "dup"], [293, 11, 1, "", "dup2"], [293, 9, 1, "", "environ"], [293, 9, 1, "", "environb"], [293, 6, 1, "", "error"], [293, 11, 1, "", "eventfd"], [293, 11, 1, "", "eventfd_read"], [293, 11, 1, "", "eventfd_write"], [293, 11, 1, "", "execl"], [293, 11, 1, "", "execle"], [293, 11, 1, "", "execlp"], [293, 11, 1, "", "execlpe"], [293, 11, 1, "", "execv"], [293, 11, 1, "", "execve"], [293, 11, 1, "", "execvp"], [293, 11, 1, "", "execvpe"], [293, 9, 1, "", "extsep"], [293, 11, 1, "", "fchdir"], [293, 11, 1, "", "fchmod"], [293, 11, 1, "", "fchown"], [293, 11, 1, "", "fdatasync"], [293, 11, 1, "", "fdopen"], [293, 11, 1, "", "fork"], [293, 11, 1, "", "forkpty"], [293, 11, 1, "", "fpathconf"], [293, 11, 1, "", "fsdecode"], [293, 11, 1, "", "fsencode"], [293, 11, 1, "", "fspath"], [293, 11, 1, "", "fstat"], [293, 11, 1, "", "fstatvfs"], [293, 11, 1, "", "fsync"], [293, 11, 1, "", "ftruncate"], [293, 11, 1, "", "fwalk"], [293, 11, 1, "", "get_blocking"], [293, 11, 1, "", "get_exec_path"], [293, 11, 1, "", "get_handle_inheritable"], [293, 11, 1, "", "get_inheritable"], [293, 11, 1, "", "get_terminal_size"], [293, 11, 1, "", "getcwd"], [293, 11, 1, "", "getcwdb"], [293, 11, 1, "", "getegid"], [293, 11, 1, "", "getenv"], [293, 11, 1, "", "getenvb"], [293, 11, 1, "", "geteuid"], [293, 11, 1, "", "getgid"], [293, 11, 1, "", "getgrouplist"], [293, 11, 1, "", "getgroups"], [293, 11, 1, "", "getloadavg"], [293, 11, 1, "", "getlogin"], [293, 11, 1, "", "getpgid"], [293, 11, 1, "", "getpgrp"], [293, 11, 1, "", "getpid"], [293, 11, 1, "", "getppid"], [293, 11, 1, "", "getpriority"], [293, 11, 1, "", "getrandom"], [293, 11, 1, "", "getresgid"], [293, 11, 1, "", "getresuid"], [293, 11, 1, "", "getsid"], [293, 11, 1, "", "getuid"], [293, 11, 1, "", "getxattr"], [293, 11, 1, "", "initgroups"], [293, 11, 1, "", "isatty"], [293, 11, 1, "", "kill"], [293, 11, 1, "", "killpg"], [293, 11, 1, "", "lchflags"], [293, 11, 1, "", "lchmod"], [293, 11, 1, "", "lchown"], [293, 9, 1, "", "linesep"], [293, 11, 1, "", "link"], [293, 11, 1, "", "listdir"], [293, 11, 1, "", "listxattr"], [293, 11, 1, "", "lockf"], [293, 11, 1, "", "login_tty"], [293, 11, 1, "", "lseek"], [293, 11, 1, "", "lstat"], [293, 11, 1, "", "major"], [293, 11, 1, "", "makedev"], [293, 11, 1, "", "makedirs"], [293, 11, 1, "", "memfd_create"], [293, 11, 1, "", "minor"], [293, 11, 1, "", "mkdir"], [293, 11, 1, "", "mkfifo"], [293, 11, 1, "", "mknod"], [293, 9, 1, "", "name"], [293, 11, 1, "", "nice"], [293, 11, 1, "", "open"], [293, 11, 1, "", "openpty"], [293, 9, 1, "", "pardir"], [294, 10, 0, "-", "path"], [293, 11, 1, "", "pathconf"], [293, 9, 1, "", "pathconf_names"], [293, 9, 1, "", "pathsep"], [293, 11, 1, "", "pidfd_open"], [293, 11, 1, "", "pipe"], [293, 11, 1, "", "pipe2"], [293, 11, 1, "", "plock"], [293, 11, 1, "", "popen"], [293, 11, 1, "", "posix_fadvise"], [293, 11, 1, "", "posix_fallocate"], [293, 11, 1, "", "posix_spawn"], [293, 11, 1, "", "posix_spawnp"], [293, 11, 1, "", "pread"], [293, 11, 1, "", "preadv"], [293, 11, 1, "", "putenv"], [293, 11, 1, "", "pwrite"], [293, 11, 1, "", "pwritev"], [293, 11, 1, "", "read"], [293, 11, 1, "", "readlink"], [293, 11, 1, "", "readv"], [293, 11, 1, "", "register_at_fork"], [293, 11, 1, "", "remove"], [293, 11, 1, "", "removedirs"], [293, 11, 1, "", "removexattr"], [293, 11, 1, "", "rename"], [293, 11, 1, "", "renames"], [293, 11, 1, "", "replace"], [293, 11, 1, "", "rmdir"], [293, 11, 1, "", "scandir"], [293, 11, 1, "", "sched_get_priority_max"], [293, 11, 1, "", "sched_get_priority_min"], [293, 11, 1, "", "sched_getaffinity"], [293, 11, 1, "", "sched_getparam"], [293, 11, 1, "", "sched_getscheduler"], [293, 12, 1, "", "sched_param"], [293, 11, 1, "", "sched_rr_get_interval"], [293, 11, 1, "", "sched_setaffinity"], [293, 11, 1, "", "sched_setparam"], [293, 11, 1, "", "sched_setscheduler"], [293, 11, 1, "", "sched_yield"], [293, 11, 1, "", "sendfile"], [293, 9, 1, "", "sep"], [293, 11, 1, "", "set_blocking"], [293, 11, 1, "", "set_handle_inheritable"], [293, 11, 1, "", "set_inheritable"], [293, 11, 1, "", "setegid"], [293, 11, 1, "", "seteuid"], [293, 11, 1, "", "setgid"], [293, 11, 1, "", "setgroups"], [293, 11, 1, "", "setns"], [293, 11, 1, "", "setpgid"], [293, 11, 1, "", "setpgrp"], [293, 11, 1, "", "setpriority"], [293, 11, 1, "", "setregid"], [293, 11, 1, "", "setresgid"], [293, 11, 1, "", "setresuid"], [293, 11, 1, "", "setreuid"], [293, 11, 1, "", "setsid"], [293, 11, 1, "", "setuid"], [293, 11, 1, "", "setxattr"], [293, 11, 1, "", "spawnl"], [293, 11, 1, "", "spawnle"], [293, 11, 1, "", "spawnlp"], [293, 11, 1, "", "spawnlpe"], [293, 11, 1, "", "spawnv"], [293, 11, 1, "", "spawnve"], [293, 11, 1, "", "spawnvp"], [293, 11, 1, "", "spawnvpe"], [293, 11, 1, "", "splice"], [293, 11, 1, "", "startfile"], [293, 11, 1, "", "stat"], [293, 12, 1, "", "stat_result"], [293, 11, 1, "", "statvfs"], [293, 11, 1, "", "strerror"], [293, 9, 1, "", "supports_bytes_environ"], [293, 9, 1, "", "supports_dir_fd"], [293, 9, 1, "", "supports_effective_ids"], [293, 9, 1, "", "supports_fd"], [293, 9, 1, "", "supports_follow_symlinks"], [293, 11, 1, "", "symlink"], [293, 11, 1, "", "sync"], [293, 11, 1, "", "sysconf"], [293, 9, 1, "", "sysconf_names"], [293, 11, 1, "", "system"], [293, 11, 1, "", "tcgetpgrp"], [293, 11, 1, "", "tcsetpgrp"], [293, 12, 1, "", "terminal_size"], [293, 11, 1, "", "times"], [293, 11, 1, "", "truncate"], [293, 11, 1, "", "ttyname"], [293, 11, 1, "", "umask"], [293, 11, 1, "", "uname"], [293, 11, 1, "", "unlink"], [293, 11, 1, "", "unsetenv"], [293, 11, 1, "", "unshare"], [293, 11, 1, "", "urandom"], [293, 11, 1, "", "utime"], [293, 11, 1, "", "wait"], [293, 11, 1, "", "wait3"], [293, 11, 1, "", "wait4"], [293, 11, 1, "", "waitid"], [293, 11, 1, "", "waitpid"], [293, 11, 1, "", "waitstatus_to_exitcode"], [293, 11, 1, "", "walk"], [293, 11, 1, "", "write"], [293, 11, 1, "", "writev"]], "os.DirEntry": [[293, 8, 1, "", "inode"], [293, 8, 1, "", "is_dir"], [293, 8, 1, "", "is_file"], [293, 8, 1, "", "is_symlink"], [293, 7, 1, "", "name"], [293, 7, 1, "", "path"], [293, 8, 1, "", "stat"]], "os.PathLike": [[293, 8, 1, "", "__fspath__"]], "os.path": [[294, 11, 1, "", "abspath"], [294, 11, 1, "", "basename"], [294, 11, 1, "", "commonpath"], [294, 11, 1, "", "commonprefix"], [294, 11, 1, "", "dirname"], [294, 11, 1, "", "exists"], [294, 11, 1, "", "expanduser"], [294, 11, 1, "", "expandvars"], [294, 11, 1, "", "getatime"], [294, 11, 1, "", "getctime"], [294, 11, 1, "", "getmtime"], [294, 11, 1, "", "getsize"], [294, 11, 1, "", "isabs"], [294, 11, 1, "", "isdir"], [294, 11, 1, "", "isfile"], [294, 11, 1, "", "islink"], [294, 11, 1, "", "ismount"], [294, 11, 1, "", "join"], [294, 11, 1, "", "lexists"], [294, 11, 1, "", "normcase"], [294, 11, 1, "", "normpath"], [294, 11, 1, "", "realpath"], [294, 11, 1, "", "relpath"], [294, 11, 1, "", "samefile"], [294, 11, 1, "", "sameopenfile"], [294, 11, 1, "", "samestat"], [294, 11, 1, "", "split"], [294, 11, 1, "", "splitdrive"], [294, 11, 1, "", "splitext"], [294, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[293, 8, 1, "", "close"]], "os.sched_param": [[293, 7, 1, "", "sched_priority"]], "os.stat_result": [[293, 7, 1, "", "st_atime"], [293, 7, 1, "", "st_atime_ns"], [293, 7, 1, "", "st_birthtime"], [293, 7, 1, "", "st_blksize"], [293, 7, 1, "", "st_blocks"], [293, 7, 1, "", "st_creator"], [293, 7, 1, "", "st_ctime"], [293, 7, 1, "", "st_ctime_ns"], [293, 7, 1, "", "st_dev"], [293, 7, 1, "", "st_file_attributes"], [293, 7, 1, "", "st_flags"], [293, 7, 1, "", "st_fstype"], [293, 7, 1, "", "st_gen"], [293, 7, 1, "", "st_gid"], [293, 7, 1, "", "st_ino"], [293, 7, 1, "", "st_mode"], [293, 7, 1, "", "st_mtime"], [293, 7, 1, "", "st_mtime_ns"], [293, 7, 1, "", "st_nlink"], [293, 7, 1, "", "st_rdev"], [293, 7, 1, "", "st_reparse_tag"], [293, 7, 1, "", "st_rsize"], [293, 7, 1, "", "st_size"], [293, 7, 1, "", "st_type"], [293, 7, 1, "", "st_uid"]], "os.terminal_size": [[293, 7, 1, "", "columns"], [293, 7, 1, "", "lines"]], "ossaudiodev": [[295, 6, 1, "", "OSSAudioError"], [295, 11, 1, "", "open"], [295, 11, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[295, 8, 1, "", "bufsize"], [295, 8, 1, "", "channels"], [295, 8, 1, "", "close"], [295, 7, 1, "", "closed"], [295, 8, 1, "", "fileno"], [295, 8, 1, "", "getfmts"], [295, 7, 1, "", "mode"], [295, 7, 1, "", "name"], [295, 8, 1, "", "nonblock"], [295, 8, 1, "", "obufcount"], [295, 8, 1, "", "obuffree"], [295, 8, 1, "", "post"], [295, 8, 1, "", "read"], [295, 8, 1, "", "reset"], [295, 8, 1, "", "setfmt"], [295, 8, 1, "", "setparameters"], [295, 8, 1, "", "speed"], [295, 8, 1, "", "sync"], [295, 8, 1, "", "write"], [295, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[295, 8, 1, "", "close"], [295, 8, 1, "", "controls"], [295, 8, 1, "", "fileno"], [295, 8, 1, "", "get"], [295, 8, 1, "", "get_recsrc"], [295, 8, 1, "", "reccontrols"], [295, 8, 1, "", "set"], [295, 8, 1, "", "set_recsrc"], [295, 8, 1, "", "stereocontrols"]], "pathlib": [[296, 12, 1, "", "Path"], [296, 12, 1, "", "PosixPath"], [296, 12, 1, "", "PurePath"], [296, 12, 1, "", "PurePosixPath"], [296, 12, 1, "", "PureWindowsPath"], [296, 12, 1, "", "WindowsPath"]], "pathlib.Path": [[296, 8, 1, "", "absolute"], [296, 8, 1, "", "chmod"], [296, 8, 1, "", "cwd"], [296, 8, 1, "", "exists"], [296, 8, 1, "", "expanduser"], [296, 8, 1, "", "glob"], [296, 8, 1, "", "group"], [296, 8, 1, "", "hardlink_to"], [296, 8, 1, "", "home"], [296, 8, 1, "", "is_block_device"], [296, 8, 1, "", "is_char_device"], [296, 8, 1, "", "is_dir"], [296, 8, 1, "", "is_fifo"], [296, 8, 1, "", "is_file"], [296, 8, 1, "", "is_mount"], [296, 8, 1, "", "is_socket"], [296, 8, 1, "", "is_symlink"], [296, 8, 1, "", "iterdir"], [296, 8, 1, "", "lchmod"], [296, 8, 1, "", "lstat"], [296, 8, 1, "", "mkdir"], [296, 8, 1, "", "open"], [296, 8, 1, "", "owner"], [296, 8, 1, "", "read_bytes"], [296, 8, 1, "", "read_text"], [296, 8, 1, "", "readlink"], [296, 8, 1, "", "rename"], [296, 8, 1, "", "replace"], [296, 8, 1, "", "resolve"], [296, 8, 1, "", "rglob"], [296, 8, 1, "", "rmdir"], [296, 8, 1, "", "samefile"], [296, 8, 1, "", "stat"], [296, 8, 1, "", "symlink_to"], [296, 8, 1, "", "touch"], [296, 8, 1, "", "unlink"], [296, 8, 1, "", "walk"], [296, 8, 1, "", "write_bytes"], [296, 8, 1, "", "write_text"]], "pathlib.PurePath": [[296, 9, 1, "", "anchor"], [296, 8, 1, "", "as_posix"], [296, 8, 1, "", "as_uri"], [296, 9, 1, "", "drive"], [296, 8, 1, "", "is_absolute"], [296, 8, 1, "", "is_relative_to"], [296, 8, 1, "", "is_reserved"], [296, 8, 1, "", "joinpath"], [296, 8, 1, "", "match"], [296, 9, 1, "", "name"], [296, 9, 1, "", "parent"], [296, 9, 1, "", "parents"], [296, 9, 1, "", "parts"], [296, 8, 1, "", "relative_to"], [296, 9, 1, "", "root"], [296, 9, 1, "", "stem"], [296, 9, 1, "", "suffix"], [296, 9, 1, "", "suffixes"], [296, 8, 1, "", "with_name"], [296, 8, 1, "", "with_stem"], [296, 8, 1, "", "with_suffix"]], "pdb": [[297, 12, 1, "", "Pdb"], [297, 11, 1, "", "pm"], [297, 11, 1, "", "post_mortem"], [297, 11, 1, "", "run"], [297, 11, 1, "", "runcall"], [297, 11, 1, "", "runeval"], [297, 11, 1, "", "set_trace"]], "pdb.Pdb": [[297, 8, 1, "", "run"], [297, 8, 1, "", "runcall"], [297, 8, 1, "", "runeval"], [297, 8, 1, "", "set_trace"]], "pickle": [[299, 9, 1, "", "DEFAULT_PROTOCOL"], [299, 9, 1, "", "HIGHEST_PROTOCOL"], [299, 12, 1, "", "PickleBuffer"], [299, 6, 1, "", "PickleError"], [299, 12, 1, "", "Pickler"], [299, 6, 1, "", "PicklingError"], [299, 12, 1, "", "Unpickler"], [299, 6, 1, "", "UnpicklingError"], [299, 11, 1, "", "dump"], [299, 11, 1, "", "dumps"], [299, 11, 1, "", "load"], [299, 11, 1, "", "loads"]], "pickle.PickleBuffer": [[299, 8, 1, "", "raw"], [299, 8, 1, "", "release"]], "pickle.Pickler": [[299, 7, 1, "", "dispatch_table"], [299, 8, 1, "", "dump"], [299, 7, 1, "", "fast"], [299, 8, 1, "", "persistent_id"], [299, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[299, 8, 1, "", "find_class"], [299, 8, 1, "", "load"], [299, 8, 1, "", "persistent_load"]], "pickletools": [[300, 11, 1, "", "dis"], [300, 11, 1, "", "genops"], [300, 11, 1, "", "optimize"], [300, 14, 1, "cmdoption-pickletools-a", "--annotate"], [300, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [300, 14, 1, "cmdoption-pickletools-m", "--memo"], [300, 14, 1, "cmdoption-pickletools-o", "--output"], [300, 14, 1, "cmdoption-pickletools-p", "--preamble"], [300, 14, 1, "cmdoption-pickletools-a", "-a"], [300, 14, 1, "cmdoption-pickletools-l", "-l"], [300, 14, 1, "cmdoption-pickletools-m", "-m"], [300, 14, 1, "cmdoption-pickletools-o", "-o"], [300, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[301, 12, 1, "", "Template"]], "pipes.Template": [[301, 8, 1, "", "append"], [301, 8, 1, "", "clone"], [301, 8, 1, "", "copy"], [301, 8, 1, "", "debug"], [301, 8, 1, "", "open"], [301, 8, 1, "", "prepend"], [301, 8, 1, "", "reset"]], "pkgutil": [[302, 12, 1, "", "ImpImporter"], [302, 12, 1, "", "ImpLoader"], [302, 12, 1, "", "ModuleInfo"], [302, 11, 1, "", "extend_path"], [302, 11, 1, "", "find_loader"], [302, 11, 1, "", "get_data"], [302, 11, 1, "", "get_importer"], [302, 11, 1, "", "get_loader"], [302, 11, 1, "", "iter_importers"], [302, 11, 1, "", "iter_modules"], [302, 11, 1, "", "resolve_name"], [302, 11, 1, "", "walk_packages"]], "platform": [[303, 11, 1, "", "architecture"], [303, 11, 1, "", "freedesktop_os_release"], [303, 11, 1, "", "java_ver"], [303, 11, 1, "", "libc_ver"], [303, 11, 1, "", "mac_ver"], [303, 11, 1, "", "machine"], [303, 11, 1, "", "node"], [303, 11, 1, "", "platform"], [303, 11, 1, "", "processor"], [303, 11, 1, "", "python_branch"], [303, 11, 1, "", "python_build"], [303, 11, 1, "", "python_compiler"], [303, 11, 1, "", "python_implementation"], [303, 11, 1, "", "python_revision"], [303, 11, 1, "", "python_version"], [303, 11, 1, "", "python_version_tuple"], [303, 11, 1, "", "release"], [303, 11, 1, "", "system"], [303, 11, 1, "", "system_alias"], [303, 11, 1, "", "uname"], [303, 11, 1, "", "version"], [303, 11, 1, "", "win32_edition"], [303, 11, 1, "", "win32_is_iot"], [303, 11, 1, "", "win32_ver"]], "plistlib": [[304, 9, 1, "", "FMT_BINARY"], [304, 9, 1, "", "FMT_XML"], [304, 12, 1, "", "UID"], [304, 11, 1, "", "dump"], [304, 11, 1, "", "dumps"], [304, 11, 1, "", "load"], [304, 11, 1, "", "loads"]], "poplib": [[305, 12, 1, "", "POP3"], [305, 12, 1, "", "POP3_SSL"], [305, 6, 1, "", "error_proto"]], "poplib.POP3": [[305, 8, 1, "", "apop"], [305, 8, 1, "", "capa"], [305, 8, 1, "", "dele"], [305, 8, 1, "", "getwelcome"], [305, 8, 1, "", "list"], [305, 8, 1, "", "noop"], [305, 8, 1, "", "pass_"], [305, 8, 1, "", "quit"], [305, 8, 1, "", "retr"], [305, 8, 1, "", "rpop"], [305, 8, 1, "", "rset"], [305, 8, 1, "", "set_debuglevel"], [305, 8, 1, "", "stat"], [305, 8, 1, "", "stls"], [305, 8, 1, "", "top"], [305, 8, 1, "", "uidl"], [305, 8, 1, "", "user"], [305, 8, 1, "", "utf8"]], "posix": [[306, 9, 1, "", "environ"]], "pprint": [[307, 12, 1, "", "PrettyPrinter"], [307, 11, 1, "", "isreadable"], [307, 11, 1, "", "isrecursive"], [307, 11, 1, "", "pformat"], [307, 11, 1, "", "pp"], [307, 11, 1, "", "pprint"], [307, 11, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[307, 8, 1, "", "format"], [307, 8, 1, "", "isreadable"], [307, 8, 1, "", "isrecursive"], [307, 8, 1, "", "pformat"], [307, 8, 1, "", "pprint"]], "profile": [[308, 12, 1, "", "Profile"], [308, 11, 1, "", "run"], [308, 11, 1, "", "runctx"]], "profile.Profile": [[308, 8, 1, "", "create_stats"], [308, 8, 1, "", "disable"], [308, 8, 1, "", "dump_stats"], [308, 8, 1, "", "enable"], [308, 8, 1, "", "print_stats"], [308, 8, 1, "", "run"], [308, 8, 1, "", "runcall"], [308, 8, 1, "", "runctx"]], "pstats": [[308, 12, 1, "", "Stats"]], "pstats.Stats": [[308, 8, 1, "", "add"], [308, 8, 1, "", "dump_stats"], [308, 8, 1, "", "get_stats_profile"], [308, 8, 1, "", "print_callees"], [308, 8, 1, "", "print_callers"], [308, 8, 1, "", "print_stats"], [308, 8, 1, "", "reverse_order"], [308, 8, 1, "", "sort_stats"], [308, 8, 1, "", "strip_dirs"]], "pty": [[309, 11, 1, "", "fork"], [309, 11, 1, "", "openpty"], [309, 11, 1, "", "spawn"]], "pwd": [[310, 11, 1, "", "getpwall"], [310, 11, 1, "", "getpwnam"], [310, 11, 1, "", "getpwuid"]], "py_compile": [[311, 6, 1, "", "PyCompileError"], [311, 12, 1, "", "PycInvalidationMode"], [311, 11, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[311, 7, 1, "", "CHECKED_HASH"], [311, 7, 1, "", "TIMESTAMP"], [311, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr.Class": [[312, 7, 1, "", "children"], [312, 7, 1, "", "file"], [312, 7, 1, "", "lineno"], [312, 7, 1, "", "methods"], [312, 7, 1, "", "module"], [312, 7, 1, "", "name"], [312, 7, 1, "", "parent"], [312, 7, 1, "", "super"]], "pyclbr.Function": [[312, 7, 1, "", "children"], [312, 7, 1, "", "file"], [312, 7, 1, "", "is_async"], [312, 7, 1, "", "lineno"], [312, 7, 1, "", "module"], [312, 7, 1, "", "name"], [312, 7, 1, "", "parent"]], "pyclbr": [[312, 11, 1, "", "readmodule"], [312, 11, 1, "", "readmodule_ex"]], "queue": [[316, 6, 1, "", "Empty"], [316, 6, 1, "", "Full"], [316, 12, 1, "", "LifoQueue"], [316, 12, 1, "", "PriorityQueue"], [316, 12, 1, "", "Queue"], [316, 12, 1, "", "SimpleQueue"]], "queue.Queue": [[316, 8, 1, "", "empty"], [316, 8, 1, "", "full"], [316, 8, 1, "", "get"], [316, 8, 1, "", "get_nowait"], [316, 8, 1, "", "join"], [316, 8, 1, "", "put"], [316, 8, 1, "", "put_nowait"], [316, 8, 1, "", "qsize"], [316, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[316, 8, 1, "", "empty"], [316, 8, 1, "", "get"], [316, 8, 1, "", "get_nowait"], [316, 8, 1, "", "put"], [316, 8, 1, "", "put_nowait"], [316, 8, 1, "", "qsize"]], "quopri": [[317, 11, 1, "", "decode"], [317, 11, 1, "", "decodestring"], [317, 11, 1, "", "encode"], [317, 11, 1, "", "encodestring"]], "random": [[318, 12, 1, "", "Random"], [318, 12, 1, "", "SystemRandom"], [318, 11, 1, "", "betavariate"], [318, 11, 1, "", "binomialvariate"], [318, 11, 1, "", "choice"], [318, 11, 1, "", "choices"], [318, 11, 1, "", "expovariate"], [318, 11, 1, "", "gammavariate"], [318, 11, 1, "", "gauss"], [318, 11, 1, "", "getrandbits"], [318, 11, 1, "", "getstate"], [318, 11, 1, "", "lognormvariate"], [318, 11, 1, "", "normalvariate"], [318, 11, 1, "", "paretovariate"], [318, 11, 1, "", "randbytes"], [318, 11, 1, "", "randint"], [318, 11, 1, "", "random"], [318, 11, 1, "", "randrange"], [318, 11, 1, "", "sample"], [318, 11, 1, "", "seed"], [318, 11, 1, "", "setstate"], [318, 11, 1, "", "shuffle"], [318, 11, 1, "", "triangular"], [318, 11, 1, "", "uniform"], [318, 11, 1, "", "vonmisesvariate"], [318, 11, 1, "", "weibullvariate"]], "range": [[344, 7, 1, "", "start"], [344, 7, 1, "", "step"], [344, 7, 1, "", "stop"]], "re": [[319, 9, 1, "", "A"], [319, 9, 1, "", "ASCII"], [319, 9, 1, "", "DEBUG"], [319, 9, 1, "", "DOTALL"], [319, 9, 1, "", "I"], [319, 9, 1, "", "IGNORECASE"], [319, 9, 1, "", "L"], [319, 9, 1, "", "LOCALE"], [319, 9, 1, "", "M"], [319, 9, 1, "", "MULTILINE"], [319, 9, 1, "", "NOFLAG"], [319, 12, 1, "", "RegexFlag"], [319, 9, 1, "", "S"], [319, 9, 1, "", "VERBOSE"], [319, 9, 1, "", "X"], [319, 11, 1, "", "compile"], [319, 6, 1, "", "error"], [319, 11, 1, "", "escape"], [319, 11, 1, "", "findall"], [319, 11, 1, "", "finditer"], [319, 11, 1, "", "fullmatch"], [319, 11, 1, "", "match"], [319, 11, 1, "", "purge"], [319, 11, 1, "", "search"], [319, 11, 1, "", "split"], [319, 11, 1, "", "sub"], [319, 11, 1, "", "subn"]], "re.Match": [[319, 8, 1, "", "__getitem__"], [319, 8, 1, "", "end"], [319, 7, 1, "", "endpos"], [319, 8, 1, "", "expand"], [319, 8, 1, "", "group"], [319, 8, 1, "", "groupdict"], [319, 8, 1, "", "groups"], [319, 7, 1, "", "lastgroup"], [319, 7, 1, "", "lastindex"], [319, 7, 1, "", "pos"], [319, 7, 1, "", "re"], [319, 8, 1, "", "span"], [319, 8, 1, "", "start"], [319, 7, 1, "", "string"]], "re.Pattern": [[319, 8, 1, "", "findall"], [319, 8, 1, "", "finditer"], [319, 7, 1, "", "flags"], [319, 8, 1, "", "fullmatch"], [319, 7, 1, "", "groupindex"], [319, 7, 1, "", "groups"], [319, 8, 1, "", "match"], [319, 7, 1, "", "pattern"], [319, 8, 1, "", "search"], [319, 8, 1, "", "split"], [319, 8, 1, "", "sub"], [319, 8, 1, "", "subn"]], "re.error": [[319, 7, 1, "", "colno"], [319, 7, 1, "", "lineno"], [319, 7, 1, "", "msg"], [319, 7, 1, "", "pattern"], [319, 7, 1, "", "pos"]], "readline": [[320, 11, 1, "", "add_history"], [320, 11, 1, "", "append_history_file"], [320, 11, 1, "", "clear_history"], [320, 11, 1, "", "get_begidx"], [320, 11, 1, "", "get_completer"], [320, 11, 1, "", "get_completer_delims"], [320, 11, 1, "", "get_completion_type"], [320, 11, 1, "", "get_current_history_length"], [320, 11, 1, "", "get_endidx"], [320, 11, 1, "", "get_history_item"], [320, 11, 1, "", "get_history_length"], [320, 11, 1, "", "get_line_buffer"], [320, 11, 1, "", "insert_text"], [320, 11, 1, "", "parse_and_bind"], [320, 11, 1, "", "read_history_file"], [320, 11, 1, "", "read_init_file"], [320, 11, 1, "", "redisplay"], [320, 11, 1, "", "remove_history_item"], [320, 11, 1, "", "replace_history_item"], [320, 11, 1, "", "set_auto_history"], [320, 11, 1, "", "set_completer"], [320, 11, 1, "", "set_completer_delims"], [320, 11, 1, "", "set_completion_display_matches_hook"], [320, 11, 1, "", "set_history_length"], [320, 11, 1, "", "set_pre_input_hook"], [320, 11, 1, "", "set_startup_hook"], [320, 11, 1, "", "write_history_file"]], "reprlib": [[321, 12, 1, "", "Repr"], [321, 9, 1, "", "aRepr"], [321, 11, 1, "", "recursive_repr"], [321, 11, 1, "", "repr"]], "reprlib.Repr": [[321, 7, 1, "", "fillvalue"], [321, 7, 1, "", "indent"], [321, 7, 1, "", "maxarray"], [321, 7, 1, "", "maxdeque"], [321, 7, 1, "", "maxdict"], [321, 7, 1, "", "maxfrozenset"], [321, 7, 1, "", "maxlevel"], [321, 7, 1, "", "maxlist"], [321, 7, 1, "", "maxlong"], [321, 7, 1, "", "maxother"], [321, 7, 1, "", "maxset"], [321, 7, 1, "", "maxstring"], [321, 7, 1, "", "maxtuple"], [321, 8, 1, "", "repr"], [321, 8, 1, "", "repr1"]], "resource": [[322, 9, 1, "", "RLIMIT_AS"], [322, 9, 1, "", "RLIMIT_CORE"], [322, 9, 1, "", "RLIMIT_CPU"], [322, 9, 1, "", "RLIMIT_DATA"], [322, 9, 1, "", "RLIMIT_FSIZE"], [322, 9, 1, "", "RLIMIT_KQUEUES"], [322, 9, 1, "", "RLIMIT_MEMLOCK"], [322, 9, 1, "", "RLIMIT_MSGQUEUE"], [322, 9, 1, "", "RLIMIT_NICE"], [322, 9, 1, "", "RLIMIT_NOFILE"], [322, 9, 1, "", "RLIMIT_NPROC"], [322, 9, 1, "", "RLIMIT_NPTS"], [322, 9, 1, "", "RLIMIT_OFILE"], [322, 9, 1, "", "RLIMIT_RSS"], [322, 9, 1, "", "RLIMIT_RTPRIO"], [322, 9, 1, "", "RLIMIT_RTTIME"], [322, 9, 1, "", "RLIMIT_SBSIZE"], [322, 9, 1, "", "RLIMIT_SIGPENDING"], [322, 9, 1, "", "RLIMIT_STACK"], [322, 9, 1, "", "RLIMIT_SWAP"], [322, 9, 1, "", "RLIMIT_VMEM"], [322, 9, 1, "", "RLIM_INFINITY"], [322, 9, 1, "", "RUSAGE_BOTH"], [322, 9, 1, "", "RUSAGE_CHILDREN"], [322, 9, 1, "", "RUSAGE_SELF"], [322, 9, 1, "", "RUSAGE_THREAD"], [322, 6, 1, "", "error"], [322, 11, 1, "", "getpagesize"], [322, 11, 1, "", "getrlimit"], [322, 11, 1, "", "getrusage"], [322, 11, 1, "", "prlimit"], [322, 11, 1, "", "setrlimit"]], "rlcompleter.Completer": [[323, 8, 1, "", "complete"]], "runpy": [[324, 11, 1, "", "run_module"], [324, 11, 1, "", "run_path"]], "sched": [[325, 12, 1, "", "scheduler"]], "sched.scheduler": [[325, 8, 1, "", "cancel"], [325, 8, 1, "", "empty"], [325, 8, 1, "", "enter"], [325, 8, 1, "", "enterabs"], [325, 7, 1, "", "queue"], [325, 8, 1, "", "run"]], "secrets": [[326, 12, 1, "", "SystemRandom"], [326, 11, 1, "", "choice"], [326, 11, 1, "", "compare_digest"], [326, 11, 1, "", "randbelow"], [326, 11, 1, "", "randbits"], [326, 11, 1, "", "token_bytes"], [326, 11, 1, "", "token_hex"], [326, 11, 1, "", "token_urlsafe"]], "select": [[328, 7, 1, "", "PIPE_BUF"], [328, 11, 1, "", "devpoll"], [328, 11, 1, "", "epoll"], [328, 6, 1, "", "error"], [328, 11, 1, "", "kevent"], [328, 11, 1, "", "kqueue"], [328, 11, 1, "", "poll"], [328, 11, 1, "", "select"]], "select.devpoll": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "select.epoll": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "fromfd"], [328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "select.kevent": [[328, 7, 1, "", "data"], [328, 7, 1, "", "fflags"], [328, 7, 1, "", "filter"], [328, 7, 1, "", "flags"], [328, 7, 1, "", "ident"], [328, 7, 1, "", "udata"]], "select.kqueue": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "control"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "fromfd"]], "select.poll": [[328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "selectors": [[329, 12, 1, "", "BaseSelector"], [329, 12, 1, "", "DefaultSelector"], [329, 12, 1, "", "DevpollSelector"], [329, 12, 1, "", "EpollSelector"], [329, 12, 1, "", "KqueueSelector"], [329, 12, 1, "", "PollSelector"], [329, 12, 1, "", "SelectSelector"], [329, 12, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[329, 8, 1, "", "close"], [329, 8, 1, "", "get_key"], [329, 8, 1, "", "get_map"], [329, 8, 1, "", "modify"], [329, 8, 1, "", "register"], [329, 8, 1, "", "select"], [329, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[329, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[329, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[329, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[329, 7, 1, "", "data"], [329, 7, 1, "", "events"], [329, 7, 1, "", "fd"], [329, 7, 1, "", "fileobj"]], "shelve": [[330, 12, 1, "", "BsdDbShelf"], [330, 12, 1, "", "DbfilenameShelf"], [330, 12, 1, "", "Shelf"], [330, 11, 1, "", "open"]], "shelve.Shelf": [[330, 8, 1, "", "close"], [330, 8, 1, "", "sync"]], "shlex": [[331, 11, 1, "", "join"], [331, 11, 1, "", "quote"], [331, 12, 1, "", "shlex"], [331, 11, 1, "", "split"]], "shlex.shlex": [[331, 7, 1, "", "commenters"], [331, 7, 1, "", "debug"], [331, 7, 1, "", "eof"], [331, 8, 1, "", "error_leader"], [331, 7, 1, "", "escape"], [331, 7, 1, "", "escapedquotes"], [331, 8, 1, "", "get_token"], [331, 7, 1, "", "infile"], [331, 7, 1, "", "instream"], [331, 7, 1, "", "lineno"], [331, 8, 1, "", "pop_source"], [331, 7, 1, "", "punctuation_chars"], [331, 8, 1, "", "push_source"], [331, 8, 1, "", "push_token"], [331, 7, 1, "", "quotes"], [331, 8, 1, "", "read_token"], [331, 7, 1, "", "source"], [331, 8, 1, "", "sourcehook"], [331, 7, 1, "", "token"], [331, 7, 1, "", "whitespace"], [331, 7, 1, "", "whitespace_split"], [331, 7, 1, "", "wordchars"]], "shutil": [[332, 6, 1, "", "Error"], [332, 6, 1, "", "SameFileError"], [332, 11, 1, "", "chown"], [332, 11, 1, "", "copy"], [332, 11, 1, "", "copy2"], [332, 11, 1, "", "copyfile"], [332, 11, 1, "", "copyfileobj"], [332, 11, 1, "", "copymode"], [332, 11, 1, "", "copystat"], [332, 11, 1, "", "copytree"], [332, 11, 1, "", "disk_usage"], [332, 11, 1, "", "get_archive_formats"], [332, 11, 1, "", "get_terminal_size"], [332, 11, 1, "", "get_unpack_formats"], [332, 11, 1, "", "ignore_patterns"], [332, 11, 1, "", "make_archive"], [332, 11, 1, "", "move"], [332, 11, 1, "", "register_archive_format"], [332, 11, 1, "", "register_unpack_format"], [332, 11, 1, "", "rmtree"], [332, 11, 1, "", "unpack_archive"], [332, 11, 1, "", "unregister_archive_format"], [332, 11, 1, "", "unregister_unpack_format"], [332, 11, 1, "", "which"]], "shutil.rmtree": [[332, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[333, 9, 1, "", "CTRL_BREAK_EVENT"], [333, 9, 1, "", "CTRL_C_EVENT"], [333, 12, 1, "", "Handlers"], [333, 9, 1, "", "ITIMER_PROF"], [333, 9, 1, "", "ITIMER_REAL"], [333, 9, 1, "", "ITIMER_VIRTUAL"], [333, 6, 1, "", "ItimerError"], [333, 9, 1, "", "NSIG"], [333, 9, 1, "", "SIGABRT"], [333, 9, 1, "", "SIGALRM"], [333, 9, 1, "", "SIGBREAK"], [333, 9, 1, "", "SIGBUS"], [333, 9, 1, "", "SIGCHLD"], [333, 9, 1, "", "SIGCLD"], [333, 9, 1, "", "SIGCONT"], [333, 9, 1, "", "SIGFPE"], [333, 9, 1, "", "SIGHUP"], [333, 9, 1, "", "SIGILL"], [333, 9, 1, "", "SIGINT"], [333, 9, 1, "", "SIGKILL"], [333, 9, 1, "", "SIGPIPE"], [333, 9, 1, "", "SIGSEGV"], [333, 9, 1, "", "SIGSTKFLT"], [333, 9, 1, "", "SIGTERM"], [333, 9, 1, "", "SIGUSR1"], [333, 9, 1, "", "SIGUSR2"], [333, 9, 1, "", "SIGWINCH"], [333, 9, 1, "", "SIG_BLOCK"], [333, 9, 1, "", "SIG_DFL"], [333, 9, 1, "", "SIG_IGN"], [333, 9, 1, "", "SIG_SETMASK"], [333, 9, 1, "", "SIG_UNBLOCK"], [333, 12, 1, "", "Sigmasks"], [333, 12, 1, "", "Signals"], [333, 11, 1, "", "alarm"], [333, 11, 1, "", "getitimer"], [333, 11, 1, "", "getsignal"], [333, 11, 1, "", "pause"], [333, 11, 1, "", "pidfd_send_signal"], [333, 11, 1, "", "pthread_kill"], [333, 11, 1, "", "pthread_sigmask"], [333, 11, 1, "", "raise_signal"], [333, 11, 1, "", "set_wakeup_fd"], [333, 11, 1, "", "setitimer"], [333, 11, 1, "", "siginterrupt"], [333, 11, 1, "", "signal"], [333, 11, 1, "", "sigpending"], [333, 11, 1, "", "sigtimedwait"], [333, 11, 1, "", "sigwait"], [333, 11, 1, "", "sigwaitinfo"], [333, 11, 1, "", "strsignal"], [333, 11, 1, "", "valid_signals"]], "site": [[334, 9, 1, "", "ENABLE_USER_SITE"], [334, 9, 1, "", "PREFIXES"], [334, 9, 1, "", "USER_BASE"], [334, 9, 1, "", "USER_SITE"], [334, 11, 1, "", "addsitedir"], [334, 11, 1, "", "getsitepackages"], [334, 11, 1, "", "getuserbase"], [334, 11, 1, "", "getusersitepackages"], [334, 11, 1, "", "main"], [334, 14, 1, "cmdoption-site-user-base", "--user-base"], [334, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[427, 8, 1, "", "indices"]], "smtplib": [[335, 12, 1, "", "LMTP"], [335, 12, 1, "", "SMTP"], [335, 6, 1, "", "SMTPAuthenticationError"], [335, 6, 1, "", "SMTPConnectError"], [335, 6, 1, "", "SMTPDataError"], [335, 6, 1, "", "SMTPException"], [335, 6, 1, "", "SMTPHeloError"], [335, 6, 1, "", "SMTPNotSupportedError"], [335, 6, 1, "", "SMTPRecipientsRefused"], [335, 6, 1, "", "SMTPResponseException"], [335, 6, 1, "", "SMTPSenderRefused"], [335, 6, 1, "", "SMTPServerDisconnected"], [335, 12, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[335, 8, 1, "", "auth"], [335, 8, 1, "", "connect"], [335, 8, 1, "", "docmd"], [335, 8, 1, "", "ehlo"], [335, 8, 1, "", "ehlo_or_helo_if_needed"], [335, 8, 1, "", "has_extn"], [335, 8, 1, "", "helo"], [335, 8, 1, "", "login"], [335, 8, 1, "", "quit"], [335, 8, 1, "", "send_message"], [335, 8, 1, "", "sendmail"], [335, 8, 1, "", "set_debuglevel"], [335, 8, 1, "", "starttls"], [335, 8, 1, "", "verify"]], "sndhdr": [[336, 9, 1, "", "tests"], [336, 11, 1, "", "what"], [336, 11, 1, "", "whathdr"]], "socket": [[337, 9, 1, "", "AF_ALG"], [337, 9, 1, "", "AF_CAN"], [337, 9, 1, "", "AF_HYPERV"], [337, 9, 1, "", "AF_INET"], [337, 9, 1, "", "AF_INET6"], [337, 9, 1, "", "AF_LINK"], [337, 9, 1, "", "AF_PACKET"], [337, 9, 1, "", "AF_QIPCRTR"], [337, 9, 1, "", "AF_RDS"], [337, 9, 1, "", "AF_UNIX"], [337, 9, 1, "", "AF_VSOCK"], [337, 9, 1, "", "BDADDR_ANY"], [337, 9, 1, "", "BDADDR_LOCAL"], [337, 9, 1, "", "CAN_BCM"], [337, 9, 1, "", "CAN_ISOTP"], [337, 9, 1, "", "CAN_J1939"], [337, 9, 1, "", "CAN_RAW_FD_FRAMES"], [337, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [337, 11, 1, "", "CMSG_LEN"], [337, 11, 1, "", "CMSG_SPACE"], [337, 9, 1, "", "HCI_DATA_DIR"], [337, 9, 1, "", "HCI_FILTER"], [337, 9, 1, "", "HCI_TIME_STAMP"], [337, 9, 1, "", "HVSOCKET_ADDRESS_FLAG_PASSTHRU"], [337, 9, 1, "", "HVSOCKET_CONNECTED_SUSPEND"], [337, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT"], [337, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT_MAX"], [337, 9, 1, "", "HV_GUID_BROADCAST"], [337, 9, 1, "", "HV_GUID_CHILDREN"], [337, 9, 1, "", "HV_GUID_LOOPBACK"], [337, 9, 1, "", "HV_GUID_WILDCARD"], [337, 9, 1, "", "HV_GUID_ZERO"], [337, 9, 1, "", "HV_PROTOCOL_RAW"], [337, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [337, 9, 1, "", "LOCAL_CREDS"], [337, 9, 1, "", "LOCAL_CREDS_PERSISTENT"], [337, 9, 1, "", "PF_CAN"], [337, 9, 1, "", "PF_PACKET"], [337, 9, 1, "", "PF_RDS"], [337, 9, 1, "", "SCM_CREDS2"], [337, 9, 1, "", "SIO_KEEPALIVE_VALS"], [337, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [337, 9, 1, "", "SIO_RCVALL"], [337, 9, 1, "", "SOCK_CLOEXEC"], [337, 9, 1, "", "SOCK_DGRAM"], [337, 9, 1, "", "SOCK_NONBLOCK"], [337, 9, 1, "", "SOCK_RAW"], [337, 9, 1, "", "SOCK_RDM"], [337, 9, 1, "", "SOCK_SEQPACKET"], [337, 9, 1, "", "SOCK_STREAM"], [337, 9, 1, "", "SOL_ALG"], [337, 9, 1, "", "SOL_RDS"], [337, 9, 1, "", "SOMAXCONN"], [337, 9, 1, "", "SO_INCOMING_CPU"], [337, 9, 1, "", "SocketType"], [337, 11, 1, "", "close"], [337, 11, 1, "", "create_connection"], [337, 11, 1, "", "create_server"], [337, 6, 1, "", "error"], [337, 11, 1, "", "fromfd"], [337, 11, 1, "", "fromshare"], [337, 6, 1, "", "gaierror"], [337, 11, 1, "", "getaddrinfo"], [337, 11, 1, "", "getdefaulttimeout"], [337, 11, 1, "", "getfqdn"], [337, 11, 1, "", "gethostbyaddr"], [337, 11, 1, "", "gethostbyname"], [337, 11, 1, "", "gethostbyname_ex"], [337, 11, 1, "", "gethostname"], [337, 11, 1, "", "getnameinfo"], [337, 11, 1, "", "getprotobyname"], [337, 11, 1, "", "getservbyname"], [337, 11, 1, "", "getservbyport"], [337, 11, 1, "", "has_dualstack_ipv6"], [337, 9, 1, "", "has_ipv6"], [337, 6, 1, "", "herror"], [337, 11, 1, "", "htonl"], [337, 11, 1, "", "htons"], [337, 11, 1, "", "if_indextoname"], [337, 11, 1, "", "if_nameindex"], [337, 11, 1, "", "if_nametoindex"], [337, 11, 1, "", "inet_aton"], [337, 11, 1, "", "inet_ntoa"], [337, 11, 1, "", "inet_ntop"], [337, 11, 1, "", "inet_pton"], [337, 11, 1, "", "ntohl"], [337, 11, 1, "", "ntohs"], [337, 11, 1, "", "recv_fds"], [337, 11, 1, "", "send_fds"], [337, 11, 1, "", "setdefaulttimeout"], [337, 11, 1, "", "sethostname"], [337, 12, 1, "", "socket"], [337, 11, 1, "", "socketpair"], [337, 6, 1, "", "timeout"]], "socket.socket": [[337, 8, 1, "", "accept"], [337, 8, 1, "", "bind"], [337, 8, 1, "", "close"], [337, 8, 1, "", "connect"], [337, 8, 1, "", "connect_ex"], [337, 8, 1, "", "detach"], [337, 8, 1, "", "dup"], [337, 7, 1, "", "family"], [337, 8, 1, "", "fileno"], [337, 8, 1, "", "get_inheritable"], [337, 8, 1, "", "getblocking"], [337, 8, 1, "", "getpeername"], [337, 8, 1, "", "getsockname"], [337, 8, 1, "", "getsockopt"], [337, 8, 1, "", "gettimeout"], [337, 8, 1, "", "ioctl"], [337, 8, 1, "", "listen"], [337, 8, 1, "", "makefile"], [337, 7, 1, "", "proto"], [337, 8, 1, "", "recv"], [337, 8, 1, "", "recv_into"], [337, 8, 1, "", "recvfrom"], [337, 8, 1, "", "recvfrom_into"], [337, 8, 1, "", "recvmsg"], [337, 8, 1, "", "recvmsg_into"], [337, 8, 1, "", "send"], [337, 8, 1, "", "sendall"], [337, 8, 1, "", "sendfile"], [337, 8, 1, "", "sendmsg"], [337, 8, 1, "", "sendmsg_afalg"], [337, 8, 1, "", "sendto"], [337, 8, 1, "", "set_inheritable"], [337, 8, 1, "", "setblocking"], [337, 8, 1, "", "setsockopt"], [337, 8, 1, "", "settimeout"], [337, 8, 1, "", "share"], [337, 8, 1, "", "shutdown"], [337, 7, 1, "", "type"]], "socketserver": [[338, 12, 1, "", "BaseRequestHandler"], [338, 12, 1, "", "BaseServer"], [338, 12, 1, "", "DatagramRequestHandler"], [338, 12, 1, "", "ForkingMixIn"], [338, 12, 1, "", "ForkingTCPServer"], [338, 12, 1, "", "ForkingUDPServer"], [338, 12, 1, "", "StreamRequestHandler"], [338, 12, 1, "", "TCPServer"], [338, 12, 1, "", "ThreadingMixIn"], [338, 12, 1, "", "ThreadingTCPServer"], [338, 12, 1, "", "ThreadingUDPServer"], [338, 12, 1, "", "UDPServer"], [338, 12, 1, "", "UnixDatagramServer"], [338, 12, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[338, 8, 1, "", "finish"], [338, 8, 1, "", "handle"], [338, 8, 1, "", "setup"]], "socketserver.BaseServer": [[338, 7, 1, "", "RequestHandlerClass"], [338, 7, 1, "", "address_family"], [338, 7, 1, "", "allow_reuse_address"], [338, 8, 1, "", "fileno"], [338, 8, 1, "", "finish_request"], [338, 8, 1, "", "get_request"], [338, 8, 1, "", "handle_error"], [338, 8, 1, "", "handle_request"], [338, 8, 1, "", "handle_timeout"], [338, 8, 1, "", "process_request"], [338, 7, 1, "", "request_queue_size"], [338, 8, 1, "", "serve_forever"], [338, 8, 1, "", "server_activate"], [338, 7, 1, "", "server_address"], [338, 8, 1, "", "server_bind"], [338, 8, 1, "", "server_close"], [338, 8, 1, "", "service_actions"], [338, 8, 1, "", "shutdown"], [338, 7, 1, "", "socket"], [338, 7, 1, "", "socket_type"], [338, 7, 1, "", "timeout"], [338, 8, 1, "", "verify_request"]], "spwd": [[339, 11, 1, "", "getspall"], [339, 11, 1, "", "getspnam"]], "sqlite3": [[340, 12, 1, "", "Blob"], [340, 12, 1, "", "Connection"], [340, 12, 1, "", "Cursor"], [340, 6, 1, "", "DataError"], [340, 6, 1, "", "DatabaseError"], [340, 6, 1, "", "Error"], [340, 6, 1, "", "IntegrityError"], [340, 6, 1, "", "InterfaceError"], [340, 6, 1, "", "InternalError"], [340, 6, 1, "", "NotSupportedError"], [340, 6, 1, "", "OperationalError"], [340, 9, 1, "", "PARSE_COLNAMES"], [340, 9, 1, "", "PARSE_DECLTYPES"], [340, 12, 1, "", "PrepareProtocol"], [340, 6, 1, "", "ProgrammingError"], [340, 12, 1, "", "Row"], [340, 9, 1, "", "SQLITE_DENY"], [340, 9, 1, "", "SQLITE_IGNORE"], [340, 9, 1, "", "SQLITE_OK"], [340, 6, 1, "", "Warning"], [340, 9, 1, "", "apilevel"], [340, 11, 1, "", "complete_statement"], [340, 11, 1, "", "connect"], [340, 11, 1, "", "enable_callback_tracebacks"], [340, 9, 1, "", "paramstyle"], [340, 11, 1, "", "register_adapter"], [340, 11, 1, "", "register_converter"], [340, 9, 1, "", "sqlite_version"], [340, 9, 1, "", "sqlite_version_info"], [340, 9, 1, "", "threadsafety"], [340, 9, 1, "", "version"], [340, 9, 1, "", "version_info"]], "sqlite3.Blob": [[340, 8, 1, "", "close"], [340, 8, 1, "", "read"], [340, 8, 1, "", "seek"], [340, 8, 1, "", "tell"], [340, 8, 1, "", "write"]], "sqlite3.Connection": [[340, 8, 1, "", "backup"], [340, 8, 1, "", "blobopen"], [340, 8, 1, "", "close"], [340, 8, 1, "", "commit"], [340, 8, 1, "", "create_aggregate"], [340, 8, 1, "", "create_collation"], [340, 8, 1, "", "create_function"], [340, 8, 1, "", "create_window_function"], [340, 8, 1, "", "cursor"], [340, 8, 1, "", "deserialize"], [340, 8, 1, "", "enable_load_extension"], [340, 8, 1, "", "execute"], [340, 8, 1, "", "executemany"], [340, 8, 1, "", "executescript"], [340, 8, 1, "", "getlimit"], [340, 7, 1, "", "in_transaction"], [340, 8, 1, "", "interrupt"], [340, 7, 1, "", "isolation_level"], [340, 8, 1, "", "iterdump"], [340, 8, 1, "", "load_extension"], [340, 8, 1, "", "rollback"], [340, 7, 1, "", "row_factory"], [340, 8, 1, "", "serialize"], [340, 8, 1, "", "set_authorizer"], [340, 8, 1, "", "set_progress_handler"], [340, 8, 1, "", "set_trace_callback"], [340, 8, 1, "", "setlimit"], [340, 7, 1, "", "text_factory"], [340, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[340, 7, 1, "", "arraysize"], [340, 8, 1, "", "close"], [340, 7, 1, "", "connection"], [340, 7, 1, "", "description"], [340, 8, 1, "", "execute"], [340, 8, 1, "", "executemany"], [340, 8, 1, "", "executescript"], [340, 8, 1, "", "fetchall"], [340, 8, 1, "", "fetchmany"], [340, 8, 1, "", "fetchone"], [340, 7, 1, "", "lastrowid"], [340, 7, 1, "", "rowcount"], [340, 8, 1, "", "setinputsizes"], [340, 8, 1, "", "setoutputsize"]], "sqlite3.Error": [[340, 7, 1, "", "sqlite_errorcode"], [340, 7, 1, "", "sqlite_errorname"]], "sqlite3.Row": [[340, 8, 1, "", "keys"]], "ssl": [[341, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [341, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [341, 12, 1, "", "AlertDescription"], [341, 9, 1, "", "CERT_NONE"], [341, 9, 1, "", "CERT_OPTIONAL"], [341, 9, 1, "", "CERT_REQUIRED"], [341, 9, 1, "", "CHANNEL_BINDING_TYPES"], [341, 6, 1, "", "CertificateError"], [341, 11, 1, "", "DER_cert_to_PEM_cert"], [341, 9, 1, "", "HAS_ALPN"], [341, 9, 1, "", "HAS_ECDH"], [341, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [341, 9, 1, "", "HAS_NPN"], [341, 9, 1, "", "HAS_SNI"], [341, 9, 1, "", "HAS_SSLv2"], [341, 9, 1, "", "HAS_SSLv3"], [341, 9, 1, "", "HAS_TLSv1"], [341, 9, 1, "", "HAS_TLSv1_1"], [341, 9, 1, "", "HAS_TLSv1_2"], [341, 9, 1, "", "HAS_TLSv1_3"], [341, 12, 1, "", "MemoryBIO"], [341, 9, 1, "", "OPENSSL_VERSION"], [341, 9, 1, "", "OPENSSL_VERSION_INFO"], [341, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [341, 9, 1, "", "OP_ALL"], [341, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [341, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [341, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [341, 9, 1, "", "OP_NO_COMPRESSION"], [341, 9, 1, "", "OP_NO_RENEGOTIATION"], [341, 9, 1, "", "OP_NO_SSLv2"], [341, 9, 1, "", "OP_NO_SSLv3"], [341, 9, 1, "", "OP_NO_TICKET"], [341, 9, 1, "", "OP_NO_TLSv1"], [341, 9, 1, "", "OP_NO_TLSv1_1"], [341, 9, 1, "", "OP_NO_TLSv1_2"], [341, 9, 1, "", "OP_NO_TLSv1_3"], [341, 9, 1, "", "OP_SINGLE_DH_USE"], [341, 9, 1, "", "OP_SINGLE_ECDH_USE"], [341, 12, 1, "", "Options"], [341, 11, 1, "", "PEM_cert_to_DER_cert"], [341, 9, 1, "", "PROTOCOL_SSLv23"], [341, 9, 1, "", "PROTOCOL_SSLv3"], [341, 9, 1, "", "PROTOCOL_TLS"], [341, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [341, 9, 1, "", "PROTOCOL_TLS_SERVER"], [341, 9, 1, "", "PROTOCOL_TLSv1"], [341, 9, 1, "", "PROTOCOL_TLSv1_1"], [341, 9, 1, "", "PROTOCOL_TLSv1_2"], [341, 11, 1, "", "RAND_add"], [341, 11, 1, "", "RAND_bytes"], [341, 11, 1, "", "RAND_status"], [341, 6, 1, "", "SSLCertVerificationError"], [341, 12, 1, "", "SSLContext"], [341, 6, 1, "", "SSLEOFError"], [341, 6, 1, "", "SSLError"], [341, 12, 1, "", "SSLErrorNumber"], [341, 12, 1, "", "SSLObject"], [341, 12, 1, "", "SSLSession"], [341, 12, 1, "", "SSLSocket"], [341, 6, 1, "", "SSLSyscallError"], [341, 6, 1, "", "SSLWantReadError"], [341, 6, 1, "", "SSLWantWriteError"], [341, 6, 1, "", "SSLZeroReturnError"], [341, 12, 1, "", "TLSVersion"], [341, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [341, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [341, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [341, 9, 1, "", "VERIFY_DEFAULT"], [341, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [341, 9, 1, "", "VERIFY_X509_STRICT"], [341, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [341, 12, 1, "", "VerifyFlags"], [341, 12, 1, "", "VerifyMode"], [341, 11, 1, "", "cert_time_to_seconds"], [341, 11, 1, "", "create_default_context"], [341, 11, 1, "", "enum_certificates"], [341, 11, 1, "", "enum_crls"], [341, 11, 1, "", "get_default_verify_paths"], [341, 11, 1, "", "get_server_certificate"], [341, 11, 1, "", "wrap_socket"]], "ssl.MemoryBIO": [[341, 7, 1, "", "eof"], [341, 7, 1, "", "pending"], [341, 8, 1, "", "read"], [341, 8, 1, "", "write"], [341, 8, 1, "", "write_eof"]], "ssl.Purpose": [[341, 9, 1, "", "CLIENT_AUTH"], [341, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[341, 7, 1, "", "verify_code"], [341, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[341, 8, 1, "", "cert_store_stats"], [341, 7, 1, "", "check_hostname"], [341, 8, 1, "", "get_ca_certs"], [341, 8, 1, "", "get_ciphers"], [341, 7, 1, "", "hostname_checks_common_name"], [341, 7, 1, "", "keylog_filename"], [341, 8, 1, "", "load_cert_chain"], [341, 8, 1, "", "load_default_certs"], [341, 8, 1, "", "load_dh_params"], [341, 8, 1, "", "load_verify_locations"], [341, 7, 1, "", "maximum_version"], [341, 7, 1, "", "minimum_version"], [341, 7, 1, "", "num_tickets"], [341, 7, 1, "", "options"], [341, 7, 1, "", "post_handshake_auth"], [341, 7, 1, "", "protocol"], [341, 7, 1, "", "security_level"], [341, 8, 1, "", "session_stats"], [341, 8, 1, "", "set_alpn_protocols"], [341, 8, 1, "", "set_ciphers"], [341, 8, 1, "", "set_default_verify_paths"], [341, 8, 1, "", "set_ecdh_curve"], [341, 8, 1, "", "set_npn_protocols"], [341, 7, 1, "", "set_servername_callback"], [341, 7, 1, "", "sni_callback"], [341, 7, 1, "", "sslobject_class"], [341, 7, 1, "", "sslsocket_class"], [341, 7, 1, "", "verify_flags"], [341, 7, 1, "", "verify_mode"], [341, 8, 1, "", "wrap_bio"], [341, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[341, 7, 1, "", "library"], [341, 7, 1, "", "reason"]], "ssl.SSLSession": [[341, 7, 1, "", "has_ticket"], [341, 7, 1, "", "id"], [341, 7, 1, "", "ticket_lifetime_hint"], [341, 7, 1, "", "time"], [341, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[341, 8, 1, "", "cipher"], [341, 8, 1, "", "compression"], [341, 7, 1, "", "context"], [341, 8, 1, "", "do_handshake"], [341, 8, 1, "", "get_channel_binding"], [341, 8, 1, "", "getpeercert"], [341, 8, 1, "", "pending"], [341, 8, 1, "", "read"], [341, 8, 1, "", "selected_alpn_protocol"], [341, 8, 1, "", "selected_npn_protocol"], [341, 7, 1, "", "server_hostname"], [341, 7, 1, "", "server_side"], [341, 7, 1, "", "session"], [341, 7, 1, "", "session_reused"], [341, 8, 1, "", "shared_ciphers"], [341, 8, 1, "", "unwrap"], [341, 8, 1, "", "verify_client_post_handshake"], [341, 8, 1, "", "version"], [341, 8, 1, "", "write"]], "ssl.TLSVersion": [[341, 7, 1, "", "MAXIMUM_SUPPORTED"], [341, 7, 1, "", "MINIMUM_SUPPORTED"], [341, 7, 1, "", "SSLv3"], [341, 7, 1, "", "TLSv1"], [341, 7, 1, "", "TLSv1_1"], [341, 7, 1, "", "TLSv1_2"], [341, 7, 1, "", "TLSv1_3"]], "stat": [[342, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [342, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [342, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [342, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [342, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [342, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [342, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [342, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [342, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [342, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [342, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [342, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [342, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [342, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [342, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [342, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [342, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [342, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [342, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [342, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [342, 9, 1, "", "SF_APPEND"], [342, 9, 1, "", "SF_ARCHIVED"], [342, 9, 1, "", "SF_IMMUTABLE"], [342, 9, 1, "", "SF_NOUNLINK"], [342, 9, 1, "", "SF_SNAPSHOT"], [342, 9, 1, "", "ST_ATIME"], [342, 9, 1, "", "ST_CTIME"], [342, 9, 1, "", "ST_DEV"], [342, 9, 1, "", "ST_GID"], [342, 9, 1, "", "ST_INO"], [342, 9, 1, "", "ST_MODE"], [342, 9, 1, "", "ST_MTIME"], [342, 9, 1, "", "ST_NLINK"], [342, 9, 1, "", "ST_SIZE"], [342, 9, 1, "", "ST_UID"], [342, 9, 1, "", "S_ENFMT"], [342, 9, 1, "", "S_IEXEC"], [342, 9, 1, "", "S_IFBLK"], [342, 9, 1, "", "S_IFCHR"], [342, 9, 1, "", "S_IFDIR"], [342, 9, 1, "", "S_IFDOOR"], [342, 9, 1, "", "S_IFIFO"], [342, 9, 1, "", "S_IFLNK"], [342, 11, 1, "", "S_IFMT"], [342, 9, 1, "", "S_IFPORT"], [342, 9, 1, "", "S_IFREG"], [342, 9, 1, "", "S_IFSOCK"], [342, 9, 1, "", "S_IFWHT"], [342, 11, 1, "", "S_IMODE"], [342, 9, 1, "", "S_IREAD"], [342, 9, 1, "", "S_IRGRP"], [342, 9, 1, "", "S_IROTH"], [342, 9, 1, "", "S_IRUSR"], [342, 9, 1, "", "S_IRWXG"], [342, 9, 1, "", "S_IRWXO"], [342, 9, 1, "", "S_IRWXU"], [342, 11, 1, "", "S_ISBLK"], [342, 11, 1, "", "S_ISCHR"], [342, 11, 1, "", "S_ISDIR"], [342, 11, 1, "", "S_ISDOOR"], [342, 11, 1, "", "S_ISFIFO"], [342, 9, 1, "", "S_ISGID"], [342, 11, 1, "", "S_ISLNK"], [342, 11, 1, "", "S_ISPORT"], [342, 11, 1, "", "S_ISREG"], [342, 11, 1, "", "S_ISSOCK"], [342, 9, 1, "", "S_ISUID"], [342, 9, 1, "", "S_ISVTX"], [342, 11, 1, "", "S_ISWHT"], [342, 9, 1, "", "S_IWGRP"], [342, 9, 1, "", "S_IWOTH"], [342, 9, 1, "", "S_IWRITE"], [342, 9, 1, "", "S_IWUSR"], [342, 9, 1, "", "S_IXGRP"], [342, 9, 1, "", "S_IXOTH"], [342, 9, 1, "", "S_IXUSR"], [342, 9, 1, "", "UF_APPEND"], [342, 9, 1, "", "UF_COMPRESSED"], [342, 9, 1, "", "UF_HIDDEN"], [342, 9, 1, "", "UF_IMMUTABLE"], [342, 9, 1, "", "UF_NODUMP"], [342, 9, 1, "", "UF_NOUNLINK"], [342, 9, 1, "", "UF_OPAQUE"], [342, 11, 1, "", "filemode"]], "statistics": [[343, 12, 1, "", "NormalDist"], [343, 6, 1, "", "StatisticsError"], [343, 11, 1, "", "correlation"], [343, 11, 1, "", "covariance"], [343, 11, 1, "", "fmean"], [343, 11, 1, "", "geometric_mean"], [343, 11, 1, "", "harmonic_mean"], [343, 11, 1, "", "linear_regression"], [343, 11, 1, "", "mean"], [343, 11, 1, "", "median"], [343, 11, 1, "", "median_grouped"], [343, 11, 1, "", "median_high"], [343, 11, 1, "", "median_low"], [343, 11, 1, "", "mode"], [343, 11, 1, "", "multimode"], [343, 11, 1, "", "pstdev"], [343, 11, 1, "", "pvariance"], [343, 11, 1, "", "quantiles"], [343, 11, 1, "", "stdev"], [343, 11, 1, "", "variance"]], "statistics.NormalDist": [[343, 8, 1, "", "cdf"], [343, 8, 1, "", "from_samples"], [343, 8, 1, "", "inv_cdf"], [343, 7, 1, "", "mean"], [343, 7, 1, "", "median"], [343, 7, 1, "", "mode"], [343, 8, 1, "", "overlap"], [343, 8, 1, "", "pdf"], [343, 8, 1, "", "quantiles"], [343, 8, 1, "", "samples"], [343, 7, 1, "", "stdev"], [343, 7, 1, "", "variance"], [343, 8, 1, "", "zscore"]], "str": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "casefold"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "encode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "format"], [344, 8, 1, "", "format_map"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdecimal"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "isidentifier"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isnumeric"], [344, 8, 1, "", "isprintable"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "string": [[345, 12, 1, "", "Formatter"], [345, 12, 1, "", "Template"], [345, 9, 1, "", "ascii_letters"], [345, 9, 1, "", "ascii_lowercase"], [345, 9, 1, "", "ascii_uppercase"], [345, 11, 1, "", "capwords"], [345, 9, 1, "", "digits"], [345, 9, 1, "", "hexdigits"], [345, 9, 1, "", "octdigits"], [345, 9, 1, "", "printable"], [345, 9, 1, "", "punctuation"], [345, 9, 1, "", "whitespace"]], "string.Formatter": [[345, 8, 1, "", "check_unused_args"], [345, 8, 1, "", "convert_field"], [345, 8, 1, "", "format"], [345, 8, 1, "", "format_field"], [345, 8, 1, "", "get_field"], [345, 8, 1, "", "get_value"], [345, 8, 1, "", "parse"], [345, 8, 1, "", "vformat"]], "string.Template": [[345, 8, 1, "", "get_identifiers"], [345, 8, 1, "", "is_valid"], [345, 8, 1, "", "safe_substitute"], [345, 8, 1, "", "substitute"], [345, 7, 1, "", "template"]], "stringprep": [[346, 11, 1, "", "in_table_a1"], [346, 11, 1, "", "in_table_b1"], [346, 11, 1, "", "in_table_c11"], [346, 11, 1, "", "in_table_c11_c12"], [346, 11, 1, "", "in_table_c12"], [346, 11, 1, "", "in_table_c21"], [346, 11, 1, "", "in_table_c21_c22"], [346, 11, 1, "", "in_table_c22"], [346, 11, 1, "", "in_table_c3"], [346, 11, 1, "", "in_table_c4"], [346, 11, 1, "", "in_table_c5"], [346, 11, 1, "", "in_table_c6"], [346, 11, 1, "", "in_table_c7"], [346, 11, 1, "", "in_table_c8"], [346, 11, 1, "", "in_table_c9"], [346, 11, 1, "", "in_table_d1"], [346, 11, 1, "", "in_table_d2"], [346, 11, 1, "", "map_table_b2"], [346, 11, 1, "", "map_table_b3"]], "struct": [[347, 12, 1, "", "Struct"], [347, 11, 1, "", "calcsize"], [347, 6, 1, "", "error"], [347, 11, 1, "", "iter_unpack"], [347, 11, 1, "", "pack"], [347, 11, 1, "", "pack_into"], [347, 11, 1, "", "unpack"], [347, 11, 1, "", "unpack_from"]], "struct.Struct": [[347, 7, 1, "", "format"], [347, 8, 1, "", "iter_unpack"], [347, 8, 1, "", "pack"], [347, 8, 1, "", "pack_into"], [347, 7, 1, "", "size"], [347, 8, 1, "", "unpack"], [347, 8, 1, "", "unpack_from"]], "subprocess": [[348, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [348, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [348, 9, 1, "", "CREATE_NEW_CONSOLE"], [348, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [348, 9, 1, "", "CREATE_NO_WINDOW"], [348, 6, 1, "", "CalledProcessError"], [348, 12, 1, "", "CompletedProcess"], [348, 9, 1, "", "DETACHED_PROCESS"], [348, 9, 1, "", "DEVNULL"], [348, 9, 1, "", "HIGH_PRIORITY_CLASS"], [348, 9, 1, "", "IDLE_PRIORITY_CLASS"], [348, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "PIPE"], [348, 12, 1, "", "Popen"], [348, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [348, 9, 1, "", "STARTF_USESHOWWINDOW"], [348, 9, 1, "", "STARTF_USESTDHANDLES"], [348, 12, 1, "", "STARTUPINFO"], [348, 9, 1, "", "STDOUT"], [348, 9, 1, "", "STD_ERROR_HANDLE"], [348, 9, 1, "", "STD_INPUT_HANDLE"], [348, 9, 1, "", "STD_OUTPUT_HANDLE"], [348, 9, 1, "", "SW_HIDE"], [348, 6, 1, "", "SubprocessError"], [348, 6, 1, "", "TimeoutExpired"], [348, 11, 1, "", "call"], [348, 11, 1, "", "check_call"], [348, 11, 1, "", "check_output"], [348, 11, 1, "", "getoutput"], [348, 11, 1, "", "getstatusoutput"], [348, 11, 1, "", "run"]], "subprocess.CalledProcessError": [[348, 7, 1, "", "cmd"], [348, 7, 1, "", "output"], [348, 7, 1, "", "returncode"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[348, 7, 1, "", "args"], [348, 8, 1, "", "check_returncode"], [348, 7, 1, "", "returncode"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"]], "subprocess.Popen": [[348, 7, 1, "", "args"], [348, 8, 1, "", "communicate"], [348, 8, 1, "", "kill"], [348, 7, 1, "", "pid"], [348, 8, 1, "", "poll"], [348, 7, 1, "", "returncode"], [348, 8, 1, "", "send_signal"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdin"], [348, 7, 1, "", "stdout"], [348, 8, 1, "", "terminate"], [348, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[348, 7, 1, "", "dwFlags"], [348, 7, 1, "", "hStdError"], [348, 7, 1, "", "hStdInput"], [348, 7, 1, "", "hStdOutput"], [348, 7, 1, "", "lpAttributeList"], [348, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[348, 7, 1, "", "cmd"], [348, 7, 1, "", "output"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"], [348, 7, 1, "", "timeout"]], "sunau": [[349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [349, 9, 1, "", "AUDIO_FILE_MAGIC"], [349, 6, 1, "", "Error"], [349, 11, 1, "", "open"]], "sunau.AU_read": [[349, 8, 1, "", "close"], [349, 8, 1, "", "getcompname"], [349, 8, 1, "", "getcomptype"], [349, 8, 1, "", "getframerate"], [349, 8, 1, "", "getmark"], [349, 8, 1, "", "getmarkers"], [349, 8, 1, "", "getnchannels"], [349, 8, 1, "", "getnframes"], [349, 8, 1, "", "getparams"], [349, 8, 1, "", "getsampwidth"], [349, 8, 1, "", "readframes"], [349, 8, 1, "", "rewind"], [349, 8, 1, "", "setpos"], [349, 8, 1, "", "tell"]], "sunau.AU_write": [[349, 8, 1, "", "close"], [349, 8, 1, "", "setcomptype"], [349, 8, 1, "", "setframerate"], [349, 8, 1, "", "setnchannels"], [349, 8, 1, "", "setnframes"], [349, 8, 1, "", "setparams"], [349, 8, 1, "", "setsampwidth"], [349, 8, 1, "", "tell"], [349, 8, 1, "", "writeframes"], [349, 8, 1, "", "writeframesraw"]], "symtable": [[351, 12, 1, "", "Class"], [351, 12, 1, "", "Function"], [351, 12, 1, "", "Symbol"], [351, 12, 1, "", "SymbolTable"], [351, 11, 1, "", "symtable"]], "symtable.Class": [[351, 8, 1, "", "get_methods"]], "symtable.Function": [[351, 8, 1, "", "get_frees"], [351, 8, 1, "", "get_globals"], [351, 8, 1, "", "get_locals"], [351, 8, 1, "", "get_nonlocals"], [351, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[351, 8, 1, "", "get_name"], [351, 8, 1, "", "get_namespace"], [351, 8, 1, "", "get_namespaces"], [351, 8, 1, "", "is_annotated"], [351, 8, 1, "", "is_assigned"], [351, 8, 1, "", "is_declared_global"], [351, 8, 1, "", "is_free"], [351, 8, 1, "", "is_global"], [351, 8, 1, "", "is_imported"], [351, 8, 1, "", "is_local"], [351, 8, 1, "", "is_namespace"], [351, 8, 1, "", "is_nonlocal"], [351, 8, 1, "", "is_parameter"], [351, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[351, 8, 1, "", "get_children"], [351, 8, 1, "", "get_id"], [351, 8, 1, "", "get_identifiers"], [351, 8, 1, "", "get_lineno"], [351, 8, 1, "", "get_name"], [351, 8, 1, "", "get_symbols"], [351, 8, 1, "", "get_type"], [351, 8, 1, "", "has_children"], [351, 8, 1, "", "is_nested"], [351, 8, 1, "", "is_optimized"], [351, 8, 1, "", "lookup"]], "sys": [[352, 9, 1, "", "__breakpointhook__"], [352, 9, 1, "", "__displayhook__"], [352, 9, 1, "", "__excepthook__"], [352, 9, 1, "", "__interactivehook__"], [352, 9, 1, "", "__stderr__"], [352, 9, 1, "", "__stdin__"], [352, 9, 1, "", "__stdout__"], [352, 9, 1, "", "__unraisablehook__"], [352, 11, 1, "", "_clear_type_cache"], [352, 11, 1, "", "_current_exceptions"], [352, 11, 1, "", "_current_frames"], [352, 11, 1, "", "_debugmallocstats"], [352, 9, 1, "", "_emscripten_info"], [352, 11, 1, "", "_enablelegacywindowsfsencoding"], [352, 11, 1, "", "_getframe"], [352, 9, 1, "", "_xoptions"], [352, 9, 1, "", "abiflags"], [352, 11, 1, "", "addaudithook"], [352, 9, 1, "", "api_version"], [352, 9, 1, "", "argv"], [352, 11, 1, "", "audit"], [352, 9, 1, "", "base_exec_prefix"], [352, 9, 1, "", "base_prefix"], [352, 11, 1, "", "breakpointhook"], [352, 9, 1, "", "builtin_module_names"], [352, 9, 1, "", "byteorder"], [352, 11, 1, "", "call_tracing"], [352, 9, 1, "", "copyright"], [352, 11, 1, "", "displayhook"], [352, 9, 1, "", "dllhandle"], [352, 9, 1, "", "dont_write_bytecode"], [352, 11, 1, "", "exc_info"], [352, 11, 1, "", "excepthook"], [352, 11, 1, "", "exception"], [352, 9, 1, "", "exec_prefix"], [352, 9, 1, "", "executable"], [352, 11, 1, "", "exit"], [352, 9, 1, "", "flags"], [352, 9, 1, "", "float_info"], [352, 9, 1, "", "float_repr_style"], [352, 11, 1, "", "get_asyncgen_hooks"], [352, 11, 1, "", "get_coroutine_origin_tracking_depth"], [352, 11, 1, "", "get_int_max_str_digits"], [352, 11, 1, "", "getallocatedblocks"], [352, 11, 1, "", "getandroidapilevel"], [352, 11, 1, "", "getdefaultencoding"], [352, 11, 1, "", "getdlopenflags"], [352, 11, 1, "", "getfilesystemencodeerrors"], [352, 11, 1, "", "getfilesystemencoding"], [352, 11, 1, "", "getprofile"], [352, 11, 1, "", "getrecursionlimit"], [352, 11, 1, "", "getrefcount"], [352, 11, 1, "", "getsizeof"], [352, 11, 1, "", "getswitchinterval"], [352, 11, 1, "", "gettrace"], [352, 11, 1, "", "getwindowsversion"], [352, 9, 1, "", "hash_info"], [352, 9, 1, "", "hexversion"], [352, 9, 1, "", "implementation"], [352, 9, 1, "", "int_info"], [352, 11, 1, "", "intern"], [352, 11, 1, "", "is_finalizing"], [352, 9, 1, "", "last_traceback"], [352, 9, 1, "", "last_type"], [352, 9, 1, "", "last_value"], [352, 9, 1, "", "maxsize"], [352, 9, 1, "", "maxunicode"], [352, 9, 1, "", "meta_path"], [352, 9, 1, "", "modules"], [352, 9, 1, "", "orig_argv"], [352, 9, 1, "", "path"], [352, 9, 1, "", "path_hooks"], [352, 9, 1, "", "path_importer_cache"], [352, 9, 1, "", "platform"], [352, 9, 1, "", "platlibdir"], [352, 9, 1, "", "prefix"], [352, 9, 1, "", "ps1"], [352, 9, 1, "", "ps2"], [352, 9, 1, "", "pycache_prefix"], [352, 11, 1, "", "set_asyncgen_hooks"], [352, 11, 1, "", "set_coroutine_origin_tracking_depth"], [352, 11, 1, "", "set_int_max_str_digits"], [352, 11, 1, "", "setdlopenflags"], [352, 11, 1, "", "setprofile"], [352, 11, 1, "", "setrecursionlimit"], [352, 11, 1, "", "setswitchinterval"], [352, 11, 1, "", "settrace"], [352, 9, 1, "", "stderr"], [352, 9, 1, "", "stdin"], [352, 9, 1, "", "stdlib_module_names"], [352, 9, 1, "", "stdout"], [352, 9, 1, "", "thread_info"], [352, 9, 1, "", "tracebacklimit"], [352, 11, 1, "", "unraisablehook"], [352, 9, 1, "", "version"], [352, 9, 1, "", "version_info"], [352, 9, 1, "", "warnoptions"], [352, 9, 1, "", "winver"]], "sysconfig": [[354, 11, 1, "", "_get_preferred_schemes"], [354, 11, 1, "", "get_config_h_filename"], [354, 11, 1, "", "get_config_var"], [354, 11, 1, "", "get_config_vars"], [354, 11, 1, "", "get_default_scheme"], [354, 11, 1, "", "get_makefile_filename"], [354, 11, 1, "", "get_path"], [354, 11, 1, "", "get_path_names"], [354, 11, 1, "", "get_paths"], [354, 11, 1, "", "get_platform"], [354, 11, 1, "", "get_preferred_scheme"], [354, 11, 1, "", "get_python_version"], [354, 11, 1, "", "get_scheme_names"], [354, 11, 1, "", "is_python_build"], [354, 11, 1, "", "parse_config_h"]], "syslog": [[355, 11, 1, "", "closelog"], [355, 11, 1, "", "openlog"], [355, 11, 1, "", "setlogmask"], [355, 11, 1, "", "syslog"]], "tabnanny": [[356, 6, 1, "", "NannyNag"], [356, 11, 1, "", "check"], [356, 9, 1, "", "filename_only"], [356, 11, 1, "", "process_tokens"], [356, 9, 1, "", "verbose"]], "tarfile": [[357, 6, 1, "", "CompressionError"], [357, 9, 1, "", "DEFAULT_FORMAT"], [357, 9, 1, "", "ENCODING"], [357, 6, 1, "", "ExtractError"], [357, 9, 1, "", "GNU_FORMAT"], [357, 6, 1, "", "HeaderError"], [357, 9, 1, "", "PAX_FORMAT"], [357, 6, 1, "", "ReadError"], [357, 6, 1, "", "StreamError"], [357, 6, 1, "", "TarError"], [357, 12, 1, "", "TarFile"], [357, 12, 1, "", "TarInfo"], [357, 9, 1, "", "USTAR_FORMAT"], [357, 11, 1, "", "is_tarfile"], [357, 11, 1, "", "open"], [357, 14, 1, "cmdoption-tarfile-create", "--create"], [357, 14, 1, "cmdoption-tarfile-extract", "--extract"], [357, 14, 1, "cmdoption-tarfile-list", "--list"], [357, 14, 1, "cmdoption-tarfile-test", "--test"], [357, 14, 1, "cmdoption-tarfile-v", "--verbose"], [357, 14, 1, "cmdoption-tarfile-c", "-c"], [357, 14, 1, "cmdoption-tarfile-e", "-e"], [357, 14, 1, "cmdoption-tarfile-l", "-l"], [357, 14, 1, "cmdoption-tarfile-t", "-t"], [357, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.TarFile": [[357, 8, 1, "", "add"], [357, 8, 1, "", "addfile"], [357, 8, 1, "", "close"], [357, 8, 1, "", "extract"], [357, 8, 1, "", "extractall"], [357, 8, 1, "", "extractfile"], [357, 8, 1, "", "getmember"], [357, 8, 1, "", "getmembers"], [357, 8, 1, "", "getnames"], [357, 8, 1, "", "gettarinfo"], [357, 8, 1, "", "list"], [357, 8, 1, "", "next"], [357, 8, 1, "", "open"], [357, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[357, 8, 1, "", "frombuf"], [357, 8, 1, "", "fromtarfile"], [357, 7, 1, "", "gid"], [357, 7, 1, "", "gname"], [357, 8, 1, "", "isblk"], [357, 8, 1, "", "ischr"], [357, 8, 1, "", "isdev"], [357, 8, 1, "", "isdir"], [357, 8, 1, "", "isfifo"], [357, 8, 1, "", "isfile"], [357, 8, 1, "", "islnk"], [357, 8, 1, "", "isreg"], [357, 8, 1, "", "issym"], [357, 7, 1, "", "linkname"], [357, 7, 1, "", "mode"], [357, 7, 1, "", "mtime"], [357, 7, 1, "", "name"], [357, 7, 1, "", "pax_headers"], [357, 7, 1, "", "size"], [357, 8, 1, "", "tobuf"], [357, 7, 1, "", "type"], [357, 7, 1, "", "uid"], [357, 7, 1, "", "uname"]], "telnetlib": [[358, 12, 1, "", "Telnet"]], "telnetlib.Telnet": [[358, 8, 1, "", "close"], [358, 8, 1, "", "expect"], [358, 8, 1, "", "fileno"], [358, 8, 1, "", "get_socket"], [358, 8, 1, "", "interact"], [358, 8, 1, "", "msg"], [358, 8, 1, "", "mt_interact"], [358, 8, 1, "", "open"], [358, 8, 1, "", "read_all"], [358, 8, 1, "", "read_eager"], [358, 8, 1, "", "read_lazy"], [358, 8, 1, "", "read_sb_data"], [358, 8, 1, "", "read_some"], [358, 8, 1, "", "read_until"], [358, 8, 1, "", "read_very_eager"], [358, 8, 1, "", "read_very_lazy"], [358, 8, 1, "", "set_debuglevel"], [358, 8, 1, "", "set_option_negotiation_callback"], [358, 8, 1, "", "write"]], "tempfile": [[359, 11, 1, "", "NamedTemporaryFile"], [359, 12, 1, "", "SpooledTemporaryFile"], [359, 12, 1, "", "TemporaryDirectory"], [359, 11, 1, "", "TemporaryFile"], [359, 11, 1, "", "gettempdir"], [359, 11, 1, "", "gettempdirb"], [359, 11, 1, "", "gettempprefix"], [359, 11, 1, "", "gettempprefixb"], [359, 11, 1, "", "mkdtemp"], [359, 11, 1, "", "mkstemp"], [359, 11, 1, "", "mktemp"], [359, 9, 1, "", "tempdir"]], "termios": [[360, 11, 1, "", "tcdrain"], [360, 11, 1, "", "tcflow"], [360, 11, 1, "", "tcflush"], [360, 11, 1, "", "tcgetattr"], [360, 11, 1, "", "tcgetwinsize"], [360, 11, 1, "", "tcsendbreak"], [360, 11, 1, "", "tcsetattr"], [360, 11, 1, "", "tcsetwinsize"]], "test": [[361, 10, 0, "-", "support"]], "test.support": [[361, 9, 1, "", "ALWAYS_EQ"], [361, 9, 1, "", "HAVE_DOCSTRINGS"], [361, 9, 1, "", "INTERNET_TIMEOUT"], [361, 9, 1, "", "LARGEST"], [361, 9, 1, "", "LONG_TIMEOUT"], [361, 9, 1, "", "LOOPBACK_TIMEOUT"], [361, 9, 1, "", "MAX_Py_ssize_t"], [361, 9, 1, "", "MISSING_C_DOCSTRINGS"], [361, 12, 1, "", "Matcher"], [361, 9, 1, "", "NEVER_EQ"], [361, 9, 1, "", "PGO"], [361, 9, 1, "", "PIPE_MAX_SIZE"], [361, 9, 1, "", "Py_DEBUG"], [361, 6, 1, "", "ResourceDenied"], [361, 9, 1, "", "SHORT_TIMEOUT"], [361, 9, 1, "", "SMALLEST"], [361, 9, 1, "", "SOCK_MAX_SIZE"], [361, 12, 1, "", "SaveSignals"], [361, 12, 1, "", "SuppressCrashReport"], [361, 9, 1, "", "TEST_DATA_DIR"], [361, 9, 1, "", "TEST_HOME_DIR"], [361, 9, 1, "", "TEST_HTTP_URL"], [361, 9, 1, "", "TEST_SUPPORT_DIR"], [361, 6, 1, "", "TestFailed"], [361, 11, 1, "", "adjust_int_max_str_digits"], [361, 11, 1, "", "anticipate_failure"], [361, 11, 1, "", "args_from_interpreter_flags"], [361, 11, 1, "", "bigaddrspacetest"], [361, 11, 1, "", "bigmemtest"], [361, 11, 1, "", "busy_retry"], [361, 10, 0, "-", "bytecode_helper"], [361, 11, 1, "", "calcobjsize"], [361, 11, 1, "", "calcvobjsize"], [361, 11, 1, "", "captured_stderr"], [361, 11, 1, "", "captured_stdin"], [361, 11, 1, "", "captured_stdout"], [361, 11, 1, "", "catch_unraisable_exception"], [361, 11, 1, "", "check__all__"], [361, 11, 1, "", "check_disallow_instantiation"], [361, 11, 1, "", "check_free_after_iterating"], [361, 11, 1, "", "check_impl_detail"], [361, 11, 1, "", "check_syntax_error"], [361, 11, 1, "", "checksizeof"], [361, 11, 1, "", "cpython_only"], [361, 11, 1, "", "detect_api_mismatch"], [361, 11, 1, "", "disable_faulthandler"], [361, 11, 1, "", "disable_gc"], [361, 11, 1, "", "findfile"], [361, 11, 1, "", "flush_std_streams"], [361, 11, 1, "", "gc_collect"], [361, 11, 1, "", "get_attribute"], [361, 11, 1, "", "get_original_stdout"], [361, 11, 1, "", "impl_detail"], [361, 10, 0, "-", "import_helper"], [361, 9, 1, "", "is_android"], [361, 9, 1, "", "is_jython"], [361, 11, 1, "", "is_resource_enabled"], [361, 11, 1, "", "load_package_tests"], [361, 11, 1, "", "match_test"], [361, 9, 1, "", "max_memuse"], [361, 11, 1, "", "missing_compiler_executable"], [361, 11, 1, "", "no_tracing"], [361, 11, 1, "", "open_urlresource"], [361, 11, 1, "", "optim_args_from_interpreter_flags"], [361, 10, 0, "-", "os_helper"], [361, 11, 1, "", "patch"], [361, 11, 1, "", "print_warning"], [361, 11, 1, "", "python_is_optimized"], [361, 9, 1, "", "real_max_memuse"], [361, 11, 1, "", "reap_children"], [361, 11, 1, "", "record_original_stdout"], [361, 11, 1, "", "refcount_test"], [361, 11, 1, "", "requires"], [361, 11, 1, "", "requires_IEEE_754"], [361, 11, 1, "", "requires_bz2"], [361, 11, 1, "", "requires_docstrings"], [361, 11, 1, "", "requires_freebsd_version"], [361, 11, 1, "", "requires_gzip"], [361, 11, 1, "", "requires_limited_api"], [361, 11, 1, "", "requires_linux_version"], [361, 11, 1, "", "requires_lzma"], [361, 11, 1, "", "requires_mac_version"], [361, 11, 1, "", "requires_resource"], [361, 11, 1, "", "requires_zlib"], [361, 11, 1, "", "run_doctest"], [361, 11, 1, "", "run_in_subinterp"], [361, 11, 1, "", "run_unittest"], [361, 11, 1, "", "run_with_locale"], [361, 11, 1, "", "run_with_tz"], [361, 10, 0, "-", "script_helper"], [361, 11, 1, "", "set_match_tests"], [361, 11, 1, "", "set_memlimit"], [361, 11, 1, "", "setswitchinterval"], [361, 11, 1, "", "skip_if_broken_multiprocessing_synchronize"], [361, 11, 1, "", "sleeping_retry"], [361, 10, 0, "-", "socket_helper"], [361, 11, 1, "", "sortdict"], [361, 11, 1, "", "swap_attr"], [361, 11, 1, "", "swap_item"], [361, 11, 1, "", "system_must_validate_cert"], [361, 10, 0, "-", "threading_helper"], [361, 9, 1, "", "unix_shell"], [361, 9, 1, "", "verbose"], [361, 11, 1, "", "wait_process"], [361, 10, 0, "-", "warnings_helper"], [361, 11, 1, "", "with_pymalloc"]], "test.support.Matcher": [[361, 8, 1, "", "match_value"], [361, 8, 1, "", "matches"]], "test.support.SaveSignals": [[361, 8, 1, "", "restore"], [361, 8, 1, "", "save"]], "test.support.bytecode_helper": [[361, 12, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[361, 8, 1, "", "assertInBytecode"], [361, 8, 1, "", "assertNotInBytecode"], [361, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[361, 12, 1, "", "CleanImport"], [361, 12, 1, "", "DirsOnSysPath"], [361, 11, 1, "", "forget"], [361, 11, 1, "", "import_fresh_module"], [361, 11, 1, "", "import_module"], [361, 11, 1, "", "make_legacy_pyc"], [361, 11, 1, "", "modules_cleanup"], [361, 11, 1, "", "modules_setup"], [361, 11, 1, "", "unload"]], "test.support.os_helper": [[361, 12, 1, "", "EnvironmentVarGuard"], [361, 9, 1, "", "FS_NONASCII"], [361, 12, 1, "", "FakePath"], [361, 9, 1, "", "SAVEDCWD"], [361, 9, 1, "", "TESTFN"], [361, 9, 1, "", "TESTFN_NONASCII"], [361, 9, 1, "", "TESTFN_UNDECODABLE"], [361, 9, 1, "", "TESTFN_UNENCODABLE"], [361, 9, 1, "", "TESTFN_UNICODE"], [361, 11, 1, "", "can_symlink"], [361, 11, 1, "", "can_xattr"], [361, 11, 1, "", "change_cwd"], [361, 11, 1, "", "create_empty_file"], [361, 11, 1, "", "fd_count"], [361, 11, 1, "", "fs_is_case_insensitive"], [361, 11, 1, "", "make_bad_fd"], [361, 11, 1, "", "rmdir"], [361, 11, 1, "", "rmtree"], [361, 11, 1, "", "skip_unless_symlink"], [361, 11, 1, "", "skip_unless_xattr"], [361, 11, 1, "", "temp_cwd"], [361, 11, 1, "", "temp_dir"], [361, 11, 1, "", "temp_umask"], [361, 11, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[361, 8, 1, "", "set"], [361, 8, 1, "", "unset"]], "test.support.script_helper": [[361, 11, 1, "", "assert_python_failure"], [361, 11, 1, "", "assert_python_ok"], [361, 11, 1, "", "interpreter_requires_environment"], [361, 11, 1, "", "kill_python"], [361, 11, 1, "", "make_pkg"], [361, 11, 1, "", "make_script"], [361, 11, 1, "", "make_zip_pkg"], [361, 11, 1, "", "make_zip_script"], [361, 11, 1, "", "run_python_until_end"], [361, 11, 1, "", "spawn_python"]], "test.support.socket_helper": [[361, 9, 1, "", "IPV6_ENABLED"], [361, 11, 1, "", "bind_port"], [361, 11, 1, "", "bind_unix_socket"], [361, 11, 1, "", "find_unused_port"], [361, 11, 1, "", "skip_unless_bind_unix_socket"], [361, 11, 1, "", "transient_internet"]], "test.support.threading_helper": [[361, 11, 1, "", "catch_threading_exception"], [361, 11, 1, "", "join_thread"], [361, 11, 1, "", "reap_threads"], [361, 11, 1, "", "start_threads"], [361, 11, 1, "", "threading_cleanup"], [361, 11, 1, "", "threading_setup"], [361, 11, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[361, 12, 1, "", "WarningsRecorder"], [361, 11, 1, "", "check_no_resource_warning"], [361, 11, 1, "", "check_syntax_warning"], [361, 11, 1, "", "check_warnings"]], "textwrap": [[363, 12, 1, "", "TextWrapper"], [363, 11, 1, "", "dedent"], [363, 11, 1, "", "fill"], [363, 11, 1, "", "indent"], [363, 11, 1, "", "shorten"], [363, 11, 1, "", "wrap"]], "textwrap.TextWrapper": [[363, 7, 1, "", "break_long_words"], [363, 7, 1, "", "break_on_hyphens"], [363, 7, 1, "", "drop_whitespace"], [363, 7, 1, "", "expand_tabs"], [363, 8, 1, "", "fill"], [363, 7, 1, "", "fix_sentence_endings"], [363, 7, 1, "", "initial_indent"], [363, 7, 1, "", "max_lines"], [363, 7, 1, "", "placeholder"], [363, 7, 1, "", "replace_whitespace"], [363, 7, 1, "", "subsequent_indent"], [363, 7, 1, "", "tabsize"], [363, 7, 1, "", "width"], [363, 8, 1, "", "wrap"]], "threading": [[364, 12, 1, "", "Barrier"], [364, 12, 1, "", "BoundedSemaphore"], [364, 6, 1, "", "BrokenBarrierError"], [364, 12, 1, "", "Condition"], [364, 12, 1, "", "Event"], [364, 12, 1, "", "Lock"], [364, 12, 1, "", "RLock"], [364, 12, 1, "", "Semaphore"], [364, 9, 1, "", "TIMEOUT_MAX"], [364, 12, 1, "", "Thread"], [364, 12, 1, "", "Timer"], [364, 9, 1, "", "__excepthook__"], [364, 11, 1, "", "active_count"], [364, 11, 1, "", "current_thread"], [364, 11, 1, "", "enumerate"], [364, 11, 1, "", "excepthook"], [364, 11, 1, "", "get_ident"], [364, 11, 1, "", "get_native_id"], [364, 11, 1, "", "getprofile"], [364, 11, 1, "", "gettrace"], [364, 12, 1, "", "local"], [364, 11, 1, "", "main_thread"], [364, 11, 1, "", "setprofile"], [364, 11, 1, "", "setprofile_all_threads"], [364, 11, 1, "", "settrace"], [364, 11, 1, "", "settrace_all_threads"], [364, 11, 1, "", "stack_size"]], "threading.Barrier": [[364, 8, 1, "", "abort"], [364, 7, 1, "", "broken"], [364, 7, 1, "", "n_waiting"], [364, 7, 1, "", "parties"], [364, 8, 1, "", "reset"], [364, 8, 1, "", "wait"]], "threading.Condition": [[364, 8, 1, "", "acquire"], [364, 8, 1, "", "notify"], [364, 8, 1, "", "notify_all"], [364, 8, 1, "", "release"], [364, 8, 1, "", "wait"], [364, 8, 1, "", "wait_for"]], "threading.Event": [[364, 8, 1, "", "clear"], [364, 8, 1, "", "is_set"], [364, 8, 1, "", "set"], [364, 8, 1, "", "wait"]], "threading.Lock": [[364, 8, 1, "", "acquire"], [364, 8, 1, "", "locked"], [364, 8, 1, "", "release"]], "threading.RLock": [[364, 8, 1, "", "acquire"], [364, 8, 1, "", "release"]], "threading.Semaphore": [[364, 8, 1, "", "acquire"], [364, 8, 1, "", "release"]], "threading.Thread": [[364, 7, 1, "", "daemon"], [364, 8, 1, "", "getName"], [364, 7, 1, "", "ident"], [364, 8, 1, "", "isDaemon"], [364, 8, 1, "", "is_alive"], [364, 8, 1, "", "join"], [364, 7, 1, "", "name"], [364, 7, 1, "", "native_id"], [364, 8, 1, "", "run"], [364, 8, 1, "", "setDaemon"], [364, 8, 1, "", "setName"], [364, 8, 1, "", "start"]], "threading.Timer": [[364, 8, 1, "", "cancel"]], "time": [[365, 9, 1, "", "CLOCK_BOOTTIME"], [365, 9, 1, "", "CLOCK_HIGHRES"], [365, 9, 1, "", "CLOCK_MONOTONIC"], [365, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [365, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [365, 9, 1, "", "CLOCK_PROF"], [365, 9, 1, "", "CLOCK_REALTIME"], [365, 9, 1, "", "CLOCK_TAI"], [365, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [365, 9, 1, "", "CLOCK_UPTIME"], [365, 9, 1, "", "CLOCK_UPTIME_RAW"], [365, 9, 1, "", "altzone"], [365, 11, 1, "", "asctime"], [365, 11, 1, "", "clock_getres"], [365, 11, 1, "", "clock_gettime"], [365, 11, 1, "", "clock_gettime_ns"], [365, 11, 1, "", "clock_settime"], [365, 11, 1, "", "clock_settime_ns"], [365, 11, 1, "", "ctime"], [365, 9, 1, "", "daylight"], [365, 11, 1, "", "get_clock_info"], [365, 11, 1, "", "gmtime"], [365, 11, 1, "", "localtime"], [365, 11, 1, "", "mktime"], [365, 11, 1, "", "monotonic"], [365, 11, 1, "", "monotonic_ns"], [365, 11, 1, "", "perf_counter"], [365, 11, 1, "", "perf_counter_ns"], [365, 11, 1, "", "process_time"], [365, 11, 1, "", "process_time_ns"], [365, 11, 1, "", "pthread_getcpuclockid"], [365, 11, 1, "", "sleep"], [365, 11, 1, "", "strftime"], [365, 11, 1, "", "strptime"], [365, 12, 1, "", "struct_time"], [365, 11, 1, "", "thread_time"], [365, 11, 1, "", "thread_time_ns"], [365, 11, 1, "", "time"], [365, 11, 1, "", "time_ns"], [365, 9, 1, "", "timezone"], [365, 9, 1, "", "tzname"], [365, 11, 1, "", "tzset"]], "timeit": [[366, 12, 1, "", "Timer"], [366, 11, 1, "", "default_timer"], [366, 11, 1, "", "repeat"], [366, 11, 1, "", "timeit"], [366, 14, 1, "cmdoption-timeit-h", "--help"], [366, 14, 1, "cmdoption-timeit-n", "--number"], [366, 14, 1, "cmdoption-timeit-p", "--process"], [366, 14, 1, "cmdoption-timeit-r", "--repeat"], [366, 14, 1, "cmdoption-timeit-s", "--setup"], [366, 14, 1, "cmdoption-timeit-u", "--unit"], [366, 14, 1, "cmdoption-timeit-v", "--verbose"], [366, 14, 1, "cmdoption-timeit-h", "-h"], [366, 14, 1, "cmdoption-timeit-n", "-n"], [366, 14, 1, "cmdoption-timeit-p", "-p"], [366, 14, 1, "cmdoption-timeit-r", "-r"], [366, 14, 1, "cmdoption-timeit-s", "-s"], [366, 14, 1, "cmdoption-timeit-u", "-u"], [366, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[366, 8, 1, "", "autorange"], [366, 8, 1, "", "print_exc"], [366, 8, 1, "", "repeat"], [366, 8, 1, "", "timeit"]], "tkinter": [[368, 9, 1, "", "EXCEPTION"], [368, 9, 1, "", "READABLE"], [368, 11, 1, "", "Tcl"], [368, 12, 1, "", "Tk"], [368, 9, 1, "", "WRITABLE"], [369, 10, 0, "-", "colorchooser"], [188, 10, 0, "-", "commondialog"], [370, 10, 0, "-", "dnd"], [188, 10, 0, "-", "filedialog"], [371, 10, 0, "-", "font"], [372, 10, 0, "-", "messagebox"], [373, 10, 0, "-", "scrolledtext"], [188, 10, 0, "-", "simpledialog"], [374, 10, 0, "-", "tix"], [375, 10, 0, "-", "ttk"]], "tkinter.Tk": [[368, 7, 1, "", "children"], [368, 7, 1, "", "master"], [368, 7, 1, "", "tk"]], "tkinter.Widget.tk": [[368, 8, 1, "", "createfilehandler"], [368, 8, 1, "", "deletefilehandler"]], "tkinter.colorchooser": [[369, 12, 1, "", "Chooser"], [369, 11, 1, "", "askcolor"]], "tkinter.commondialog": [[188, 12, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[188, 8, 1, "", "show"]], "tkinter.dnd": [[370, 12, 1, "", "DndHandler"], [370, 11, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[370, 8, 1, "", "cancel"], [370, 8, 1, "", "finish"], [370, 8, 1, "", "on_motion"], [370, 8, 1, "", "on_release"]], "tkinter.filedialog": [[188, 12, 1, "", "Directory"], [188, 12, 1, "", "FileDialog"], [188, 12, 1, "", "LoadFileDialog"], [188, 12, 1, "", "Open"], [188, 12, 1, "", "SaveAs"], [188, 12, 1, "", "SaveFileDialog"], [188, 11, 1, "", "askdirectory"], [188, 11, 1, "", "askopenfile"], [188, 11, 1, "", "askopenfilename"], [188, 11, 1, "", "askopenfilenames"], [188, 11, 1, "", "askopenfiles"], [188, 11, 1, "", "asksaveasfile"], [188, 11, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[188, 8, 1, "", "cancel_command"], [188, 8, 1, "", "dirs_double_event"], [188, 8, 1, "", "dirs_select_event"], [188, 8, 1, "", "files_double_event"], [188, 8, 1, "", "files_select_event"], [188, 8, 1, "", "filter_command"], [188, 8, 1, "", "get_filter"], [188, 8, 1, "", "get_selection"], [188, 8, 1, "", "go"], [188, 8, 1, "", "ok_event"], [188, 8, 1, "", "quit"], [188, 8, 1, "", "set_filter"], [188, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[188, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[188, 8, 1, "", "ok_command"]], "tkinter.font": [[371, 9, 1, "", "BOLD"], [371, 12, 1, "", "Font"], [371, 9, 1, "", "ITALIC"], [371, 9, 1, "", "NORMAL"], [371, 9, 1, "", "ROMAN"], [371, 11, 1, "", "families"], [371, 11, 1, "", "names"], [371, 11, 1, "", "nametofont"]], "tkinter.font.Font": [[371, 8, 1, "", "actual"], [371, 8, 1, "", "cget"], [371, 8, 1, "", "config"], [371, 8, 1, "", "copy"], [371, 8, 1, "", "measure"], [371, 8, 1, "", "metrics"]], "tkinter.messagebox": [[372, 12, 1, "", "Message"], [372, 8, 1, "", "askokcancel"], [372, 8, 1, "", "askquestion"], [372, 8, 1, "", "askretrycancel"], [372, 8, 1, "", "askyesno"], [372, 8, 1, "", "askyesnocancel"], [372, 8, 1, "", "showerror"], [372, 8, 1, "", "showinfo"], [372, 8, 1, "", "showwarning"]], "tkinter.scrolledtext": [[373, 12, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[373, 7, 1, "", "frame"], [373, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[188, 12, 1, "", "Dialog"], [188, 11, 1, "", "askfloat"], [188, 11, 1, "", "askinteger"], [188, 11, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[188, 8, 1, "", "body"], [188, 8, 1, "", "buttonbox"]], "tkinter.tix": [[374, 12, 1, "", "Balloon"], [374, 12, 1, "", "ButtonBox"], [374, 12, 1, "", "CheckList"], [374, 12, 1, "", "ComboBox"], [374, 12, 1, "", "Control"], [374, 12, 1, "", "DirList"], [374, 12, 1, "", "DirSelectBox"], [374, 12, 1, "", "DirSelectDialog"], [374, 12, 1, "", "DirTree"], [374, 12, 1, "", "ExFileSelectBox"], [374, 12, 1, "", "FileEntry"], [374, 12, 1, "", "FileSelectBox"], [374, 12, 1, "", "Form"], [374, 12, 1, "", "HList"], [374, 12, 1, "", "InputOnly"], [374, 12, 1, "", "LabelEntry"], [374, 12, 1, "", "LabelFrame"], [374, 12, 1, "", "ListNoteBook"], [374, 12, 1, "", "Meter"], [374, 12, 1, "", "NoteBook"], [374, 12, 1, "", "OptionMenu"], [374, 12, 1, "", "PanedWindow"], [374, 12, 1, "", "PopupMenu"], [374, 12, 1, "", "Select"], [374, 12, 1, "", "StdButtonBox"], [374, 12, 1, "", "TList"], [374, 12, 1, "", "Tk"], [374, 12, 1, "", "Tree"], [374, 12, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[374, 8, 1, "", "tix_addbitmapdir"], [374, 8, 1, "", "tix_cget"], [374, 8, 1, "", "tix_configure"], [374, 8, 1, "", "tix_filedialog"], [374, 8, 1, "", "tix_getbitmap"], [374, 8, 1, "", "tix_getimage"], [374, 8, 1, "", "tix_option_get"], [374, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[375, 12, 1, "", "Combobox"], [375, 12, 1, "", "Notebook"], [375, 12, 1, "", "Progressbar"], [375, 12, 1, "", "Spinbox"], [375, 12, 1, "", "Style"], [375, 12, 1, "", "Treeview"], [375, 12, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[375, 8, 1, "", "current"], [375, 8, 1, "", "get"], [375, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[375, 8, 1, "", "add"], [375, 8, 1, "", "enable_traversal"], [375, 8, 1, "", "forget"], [375, 8, 1, "", "hide"], [375, 8, 1, "", "identify"], [375, 8, 1, "", "index"], [375, 8, 1, "", "insert"], [375, 8, 1, "", "select"], [375, 8, 1, "", "tab"], [375, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[375, 8, 1, "", "start"], [375, 8, 1, "", "step"], [375, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[375, 8, 1, "", "get"], [375, 8, 1, "", "set"]], "tkinter.ttk.Style": [[375, 8, 1, "", "configure"], [375, 8, 1, "", "element_create"], [375, 8, 1, "", "element_names"], [375, 8, 1, "", "element_options"], [375, 8, 1, "", "layout"], [375, 8, 1, "", "lookup"], [375, 8, 1, "", "map"], [375, 8, 1, "", "theme_create"], [375, 8, 1, "", "theme_names"], [375, 8, 1, "", "theme_settings"], [375, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[375, 8, 1, "", "bbox"], [375, 8, 1, "", "column"], [375, 8, 1, "", "delete"], [375, 8, 1, "", "detach"], [375, 8, 1, "", "exists"], [375, 8, 1, "", "focus"], [375, 8, 1, "", "get_children"], [375, 8, 1, "", "heading"], [375, 8, 1, "", "identify"], [375, 8, 1, "", "identify_column"], [375, 8, 1, "", "identify_element"], [375, 8, 1, "", "identify_region"], [375, 8, 1, "", "identify_row"], [375, 8, 1, "", "index"], [375, 8, 1, "", "insert"], [375, 8, 1, "", "item"], [375, 8, 1, "", "move"], [375, 8, 1, "", "next"], [375, 8, 1, "", "parent"], [375, 8, 1, "", "prev"], [375, 8, 1, "", "reattach"], [375, 8, 1, "", "see"], [375, 8, 1, "", "selection"], [375, 8, 1, "", "selection_add"], [375, 8, 1, "", "selection_remove"], [375, 8, 1, "", "selection_set"], [375, 8, 1, "", "selection_toggle"], [375, 8, 1, "", "set"], [375, 8, 1, "", "set_children"], [375, 8, 1, "", "tag_bind"], [375, 8, 1, "", "tag_configure"], [375, 8, 1, "", "tag_has"], [375, 8, 1, "", "xview"], [375, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[375, 8, 1, "", "identify"], [375, 8, 1, "", "instate"], [375, 8, 1, "", "state"]], "token": [[376, 9, 1, "", "AMPER"], [376, 9, 1, "", "AMPEREQUAL"], [376, 9, 1, "", "ASYNC"], [376, 9, 1, "", "AT"], [376, 9, 1, "", "ATEQUAL"], [376, 9, 1, "", "AWAIT"], [376, 9, 1, "", "CIRCUMFLEX"], [376, 9, 1, "", "CIRCUMFLEXEQUAL"], [376, 9, 1, "", "COLON"], [376, 9, 1, "", "COLONEQUAL"], [376, 9, 1, "", "COMMA"], [376, 9, 1, "", "COMMENT"], [376, 9, 1, "", "DEDENT"], [376, 9, 1, "", "DOT"], [376, 9, 1, "", "DOUBLESLASH"], [376, 9, 1, "", "DOUBLESLASHEQUAL"], [376, 9, 1, "", "DOUBLESTAR"], [376, 9, 1, "", "DOUBLESTAREQUAL"], [376, 9, 1, "", "ELLIPSIS"], [376, 9, 1, "", "ENCODING"], [376, 9, 1, "", "ENDMARKER"], [376, 9, 1, "", "EQEQUAL"], [376, 9, 1, "", "EQUAL"], [376, 9, 1, "", "ERRORTOKEN"], [376, 9, 1, "", "GREATER"], [376, 9, 1, "", "GREATEREQUAL"], [376, 9, 1, "", "INDENT"], [376, 11, 1, "", "ISEOF"], [376, 11, 1, "", "ISNONTERMINAL"], [376, 11, 1, "", "ISTERMINAL"], [376, 9, 1, "", "LBRACE"], [376, 9, 1, "", "LEFTSHIFT"], [376, 9, 1, "", "LEFTSHIFTEQUAL"], [376, 9, 1, "", "LESS"], [376, 9, 1, "", "LESSEQUAL"], [376, 9, 1, "", "LPAR"], [376, 9, 1, "", "LSQB"], [376, 9, 1, "", "MINEQUAL"], [376, 9, 1, "", "MINUS"], [376, 9, 1, "", "NAME"], [376, 9, 1, "", "NEWLINE"], [376, 9, 1, "", "NL"], [376, 9, 1, "", "NOTEQUAL"], [376, 9, 1, "", "NT_OFFSET"], [376, 9, 1, "", "NUMBER"], [376, 9, 1, "", "N_TOKENS"], [376, 9, 1, "", "OP"], [376, 9, 1, "", "PERCENT"], [376, 9, 1, "", "PERCENTEQUAL"], [376, 9, 1, "", "PLUS"], [376, 9, 1, "", "PLUSEQUAL"], [376, 9, 1, "", "RARROW"], [376, 9, 1, "", "RBRACE"], [376, 9, 1, "", "RIGHTSHIFT"], [376, 9, 1, "", "RIGHTSHIFTEQUAL"], [376, 9, 1, "", "RPAR"], [376, 9, 1, "", "RSQB"], [376, 9, 1, "", "SEMI"], [376, 9, 1, "", "SLASH"], [376, 9, 1, "", "SLASHEQUAL"], [376, 9, 1, "", "SOFT_KEYWORD"], [376, 9, 1, "", "STAR"], [376, 9, 1, "", "STAREQUAL"], [376, 9, 1, "", "STRING"], [376, 9, 1, "", "TILDE"], [376, 9, 1, "", "TYPE_COMMENT"], [376, 9, 1, "", "TYPE_IGNORE"], [376, 9, 1, "", "VBAR"], [376, 9, 1, "", "VBAREQUAL"], [376, 9, 1, "", "tok_name"]], "tokenize": [[377, 6, 1, "", "TokenError"], [377, 11, 1, "", "detect_encoding"], [377, 11, 1, "", "generate_tokens"], [377, 11, 1, "", "open"], [377, 11, 1, "", "tokenize"], [377, 11, 1, "", "untokenize"], [377, 14, 1, "cmdoption-tokenize-e", "--exact"], [377, 14, 1, "cmdoption-tokenize-h", "--help"], [377, 14, 1, "cmdoption-tokenize-e", "-e"], [377, 14, 1, "cmdoption-tokenize-h", "-h"]], "tomllib": [[378, 6, 1, "", "TOMLDecodeError"], [378, 11, 1, "", "load"], [378, 11, 1, "", "loads"]], "trace": [[379, 12, 1, "", "CoverageResults"], [379, 12, 1, "", "Trace"], [379, 14, 1, "cmdoption-trace-c", "--count"], [379, 14, 1, "cmdoption-trace-C", "--coverdir"], [379, 14, 1, "cmdoption-trace-f", "--file"], [379, 14, 1, "cmdoption-trace-help", "--help"], [379, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [379, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [379, 14, 1, "cmdoption-trace-l", "--listfuncs"], [379, 14, 1, "cmdoption-trace-m", "--missing"], [379, 14, 1, "cmdoption-trace-R", "--no-report"], [379, 14, 1, "cmdoption-trace-r", "--report"], [379, 14, 1, "cmdoption-trace-s", "--summary"], [379, 14, 1, "cmdoption-trace-g", "--timing"], [379, 14, 1, "cmdoption-trace-t", "--trace"], [379, 14, 1, "cmdoption-trace-T", "--trackcalls"], [379, 14, 1, "cmdoption-trace-version", "--version"], [379, 14, 1, "cmdoption-trace-C", "-C"], [379, 14, 1, "cmdoption-trace-R", "-R"], [379, 14, 1, "cmdoption-trace-T", "-T"], [379, 14, 1, "cmdoption-trace-c", "-c"], [379, 14, 1, "cmdoption-trace-f", "-f"], [379, 14, 1, "cmdoption-trace-g", "-g"], [379, 14, 1, "cmdoption-trace-l", "-l"], [379, 14, 1, "cmdoption-trace-m", "-m"], [379, 14, 1, "cmdoption-trace-r", "-r"], [379, 14, 1, "cmdoption-trace-s", "-s"], [379, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[379, 8, 1, "", "update"], [379, 8, 1, "", "write_results"]], "trace.Trace": [[379, 8, 1, "", "results"], [379, 8, 1, "", "run"], [379, 8, 1, "", "runctx"], [379, 8, 1, "", "runfunc"]], "traceback": [[380, 12, 1, "", "FrameSummary"], [380, 12, 1, "", "StackSummary"], [380, 12, 1, "", "TracebackException"], [380, 11, 1, "", "clear_frames"], [380, 11, 1, "", "extract_stack"], [380, 11, 1, "", "extract_tb"], [380, 11, 1, "", "format_exc"], [380, 11, 1, "", "format_exception"], [380, 11, 1, "", "format_exception_only"], [380, 11, 1, "", "format_list"], [380, 11, 1, "", "format_stack"], [380, 11, 1, "", "format_tb"], [380, 11, 1, "", "print_exc"], [380, 11, 1, "", "print_exception"], [380, 11, 1, "", "print_last"], [380, 11, 1, "", "print_stack"], [380, 11, 1, "", "print_tb"], [380, 11, 1, "", "walk_stack"], [380, 11, 1, "", "walk_tb"]], "traceback.StackSummary": [[380, 8, 1, "", "extract"], [380, 8, 1, "", "format"], [380, 8, 1, "", "format_frame_summary"], [380, 8, 1, "", "from_list"]], "traceback.TracebackException": [[380, 7, 1, "", "__cause__"], [380, 7, 1, "", "__context__"], [380, 7, 1, "", "__notes__"], [380, 7, 1, "", "__suppress_context__"], [380, 7, 1, "", "exc_type"], [380, 7, 1, "", "filename"], [380, 8, 1, "", "format"], [380, 8, 1, "", "format_exception_only"], [380, 8, 1, "", "from_exception"], [380, 7, 1, "", "lineno"], [380, 7, 1, "", "msg"], [380, 7, 1, "", "offset"], [380, 8, 1, "", "print"], [380, 7, 1, "", "stack"], [380, 7, 1, "", "text"]], "tracemalloc": [[381, 12, 1, "", "DomainFilter"], [381, 12, 1, "", "Filter"], [381, 12, 1, "", "Frame"], [381, 12, 1, "", "Snapshot"], [381, 12, 1, "", "Statistic"], [381, 12, 1, "", "StatisticDiff"], [381, 12, 1, "", "Trace"], [381, 12, 1, "", "Traceback"], [381, 11, 1, "", "clear_traces"], [381, 11, 1, "", "get_object_traceback"], [381, 11, 1, "", "get_traceback_limit"], [381, 11, 1, "", "get_traced_memory"], [381, 11, 1, "", "get_tracemalloc_memory"], [381, 11, 1, "", "is_tracing"], [381, 11, 1, "", "reset_peak"], [381, 11, 1, "", "start"], [381, 11, 1, "", "stop"], [381, 11, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[381, 7, 1, "", "domain"], [381, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[381, 7, 1, "", "all_frames"], [381, 7, 1, "", "domain"], [381, 7, 1, "", "filename_pattern"], [381, 7, 1, "", "inclusive"], [381, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[381, 7, 1, "", "filename"], [381, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[381, 8, 1, "", "compare_to"], [381, 8, 1, "", "dump"], [381, 8, 1, "", "filter_traces"], [381, 8, 1, "", "load"], [381, 8, 1, "", "statistics"], [381, 7, 1, "", "traceback_limit"], [381, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[381, 7, 1, "", "count"], [381, 7, 1, "", "size"], [381, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[381, 7, 1, "", "count"], [381, 7, 1, "", "count_diff"], [381, 7, 1, "", "size"], [381, 7, 1, "", "size_diff"], [381, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[381, 7, 1, "", "domain"], [381, 7, 1, "", "size"], [381, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[381, 8, 1, "", "format"], [381, 7, 1, "", "total_nframe"]], "tty": [[382, 11, 1, "", "setcbreak"], [382, 11, 1, "", "setraw"]], "turtle": [[383, 12, 1, "", "RawPen"], [383, 12, 1, "", "RawTurtle"], [383, 12, 1, "", "Screen"], [383, 12, 1, "", "ScrolledCanvas"], [383, 12, 1, "", "Shape"], [383, 12, 1, "", "Turtle"], [383, 12, 1, "", "TurtleScreen"], [383, 12, 1, "", "Vec2D"], [383, 11, 1, "", "addshape"], [383, 11, 1, "", "back"], [383, 11, 1, "", "backward"], [383, 11, 1, "", "begin_fill"], [383, 11, 1, "", "begin_poly"], [383, 11, 1, "", "bgcolor"], [383, 11, 1, "", "bgpic"], [383, 11, 1, "", "bk"], [383, 11, 1, "", "bye"], [383, 11, 1, "", "circle"], [383, 11, 1, "", "clear"], [383, 11, 1, "", "clearscreen"], [383, 11, 1, "", "clearstamp"], [383, 11, 1, "", "clearstamps"], [383, 11, 1, "", "clone"], [383, 11, 1, "", "color"], [383, 11, 1, "", "colormode"], [383, 11, 1, "", "degrees"], [383, 11, 1, "", "delay"], [383, 11, 1, "", "distance"], [383, 11, 1, "", "done"], [383, 11, 1, "", "dot"], [383, 11, 1, "", "down"], [383, 11, 1, "", "end_fill"], [383, 11, 1, "", "end_poly"], [383, 11, 1, "", "exitonclick"], [383, 11, 1, "", "fd"], [383, 11, 1, "", "fillcolor"], [383, 11, 1, "", "filling"], [383, 11, 1, "", "forward"], [383, 11, 1, "", "get_poly"], [383, 11, 1, "", "get_shapepoly"], [383, 11, 1, "", "getcanvas"], [383, 11, 1, "", "getpen"], [383, 11, 1, "", "getscreen"], [383, 11, 1, "", "getshapes"], [383, 11, 1, "", "getturtle"], [383, 11, 1, "", "goto"], [383, 11, 1, "", "heading"], [383, 11, 1, "", "hideturtle"], [383, 11, 1, "", "home"], [383, 11, 1, "", "ht"], [383, 11, 1, "", "isdown"], [383, 11, 1, "", "isvisible"], [383, 11, 1, "", "left"], [383, 11, 1, "", "listen"], [383, 11, 1, "", "lt"], [383, 11, 1, "", "mainloop"], [383, 11, 1, "", "mode"], [383, 11, 1, "", "numinput"], [383, 11, 1, "", "onclick"], [383, 11, 1, "", "ondrag"], [383, 11, 1, "", "onkey"], [383, 11, 1, "", "onkeypress"], [383, 11, 1, "", "onkeyrelease"], [383, 11, 1, "", "onrelease"], [383, 11, 1, "", "onscreenclick"], [383, 11, 1, "", "ontimer"], [383, 11, 1, "", "pd"], [383, 11, 1, "", "pen"], [383, 11, 1, "", "pencolor"], [383, 11, 1, "", "pendown"], [383, 11, 1, "", "pensize"], [383, 11, 1, "", "penup"], [383, 11, 1, "", "pos"], [383, 11, 1, "", "position"], [383, 11, 1, "", "pu"], [383, 11, 1, "", "radians"], [383, 11, 1, "", "register_shape"], [383, 11, 1, "", "reset"], [383, 11, 1, "", "resetscreen"], [383, 11, 1, "", "resizemode"], [383, 11, 1, "", "right"], [383, 11, 1, "", "rt"], [383, 11, 1, "", "screensize"], [383, 11, 1, "", "seth"], [383, 11, 1, "", "setheading"], [383, 11, 1, "", "setpos"], [383, 11, 1, "", "setposition"], [383, 11, 1, "", "settiltangle"], [383, 11, 1, "", "setundobuffer"], [383, 11, 1, "", "setup"], [383, 11, 1, "", "setworldcoordinates"], [383, 11, 1, "", "setx"], [383, 11, 1, "", "sety"], [383, 11, 1, "", "shape"], [383, 11, 1, "", "shapesize"], [383, 11, 1, "", "shapetransform"], [383, 11, 1, "", "shearfactor"], [383, 11, 1, "", "showturtle"], [383, 11, 1, "", "speed"], [383, 11, 1, "", "st"], [383, 11, 1, "", "stamp"], [383, 11, 1, "", "textinput"], [383, 11, 1, "", "tilt"], [383, 11, 1, "", "tiltangle"], [383, 11, 1, "", "title"], [383, 11, 1, "", "towards"], [383, 11, 1, "", "tracer"], [383, 11, 1, "", "turtles"], [383, 11, 1, "", "turtlesize"], [383, 11, 1, "", "undo"], [383, 11, 1, "", "undobufferentries"], [383, 11, 1, "", "up"], [383, 11, 1, "", "update"], [383, 11, 1, "", "width"], [383, 11, 1, "", "window_height"], [383, 11, 1, "", "window_width"], [383, 11, 1, "", "write"], [383, 11, 1, "", "write_docstringdict"], [383, 11, 1, "", "xcor"], [383, 11, 1, "", "ycor"]], "turtle.Shape": [[383, 8, 1, "", "addcomponent"]], "types": [[384, 9, 1, "", "AsyncGeneratorType"], [384, 9, 1, "", "BuiltinFunctionType"], [384, 9, 1, "", "BuiltinMethodType"], [384, 9, 1, "", "CellType"], [384, 9, 1, "", "ClassMethodDescriptorType"], [384, 12, 1, "", "CodeType"], [384, 9, 1, "", "CoroutineType"], [384, 11, 1, "", "DynamicClassAttribute"], [384, 9, 1, "", "EllipsisType"], [384, 9, 1, "", "FrameType"], [384, 9, 1, "", "FunctionType"], [384, 9, 1, "", "GeneratorType"], [384, 12, 1, "", "GenericAlias"], [384, 9, 1, "", "GetSetDescriptorType"], [384, 9, 1, "", "LambdaType"], [384, 12, 1, "", "MappingProxyType"], [384, 9, 1, "", "MemberDescriptorType"], [384, 9, 1, "", "MethodDescriptorType"], [384, 9, 1, "", "MethodType"], [384, 9, 1, "", "MethodWrapperType"], [384, 12, 1, "", "ModuleType"], [384, 9, 1, "", "NoneType"], [384, 9, 1, "", "NotImplementedType"], [384, 12, 1, "", "SimpleNamespace"], [384, 12, 1, "", "TracebackType"], [384, 12, 1, "", "UnionType"], [384, 9, 1, "", "WrapperDescriptorType"], [384, 11, 1, "", "coroutine"], [384, 11, 1, "", "new_class"], [384, 11, 1, "", "prepare_class"], [384, 11, 1, "", "resolve_bases"]], "types.CodeType": [[384, 8, 1, "", "replace"]], "types.MappingProxyType": [[384, 8, 1, "", "copy"], [384, 8, 1, "", "get"], [384, 8, 1, "", "items"], [384, 8, 1, "", "keys"], [384, 8, 1, "", "values"]], "types.ModuleType": [[384, 7, 1, "", "__doc__"], [384, 7, 1, "", "__loader__"], [384, 7, 1, "", "__name__"], [384, 7, 1, "", "__package__"], [384, 7, 1, "", "__spec__"]], "typing": [[385, 12, 1, "", "AbstractSet"], [385, 9, 1, "", "Annotated"], [385, 9, 1, "", "Any"], [385, 9, 1, "", "AnyStr"], [385, 12, 1, "", "AsyncContextManager"], [385, 12, 1, "", "AsyncGenerator"], [385, 12, 1, "", "AsyncIterable"], [385, 12, 1, "", "AsyncIterator"], [385, 12, 1, "", "Awaitable"], [385, 12, 1, "", "BinaryIO"], [385, 12, 1, "", "ByteString"], [385, 9, 1, "", "Callable"], [385, 12, 1, "", "ChainMap"], [385, 9, 1, "", "ClassVar"], [385, 12, 1, "", "Collection"], [385, 9, 1, "", "Concatenate"], [385, 12, 1, "", "Container"], [385, 12, 1, "", "ContextManager"], [385, 12, 1, "", "Coroutine"], [385, 12, 1, "", "Counter"], [385, 12, 1, "", "DefaultDict"], [385, 12, 1, "", "Deque"], [385, 12, 1, "", "Dict"], [385, 9, 1, "", "Final"], [385, 12, 1, "", "ForwardRef"], [385, 12, 1, "", "FrozenSet"], [385, 12, 1, "", "Generator"], [385, 12, 1, "", "Generic"], [385, 12, 1, "", "Hashable"], [385, 12, 1, "", "IO"], [385, 12, 1, "", "ItemsView"], [385, 12, 1, "", "Iterable"], [385, 12, 1, "", "Iterator"], [385, 12, 1, "", "KeysView"], [385, 12, 1, "", "List"], [385, 9, 1, "", "Literal"], [385, 9, 1, "", "LiteralString"], [385, 12, 1, "", "Mapping"], [385, 12, 1, "", "MappingView"], [385, 12, 1, "", "Match"], [385, 12, 1, "", "MutableMapping"], [385, 12, 1, "", "MutableSequence"], [385, 12, 1, "", "MutableSet"], [385, 12, 1, "", "NamedTuple"], [385, 9, 1, "", "Never"], [385, 12, 1, "", "NewType"], [385, 9, 1, "", "NoReturn"], [385, 9, 1, "", "NotRequired"], [385, 9, 1, "", "Optional"], [385, 12, 1, "", "OrderedDict"], [385, 12, 1, "", "ParamSpec"], [385, 9, 1, "", "ParamSpecArgs"], [385, 9, 1, "", "ParamSpecKwargs"], [385, 12, 1, "", "Pattern"], [385, 12, 1, "", "Protocol"], [385, 9, 1, "", "Required"], [385, 12, 1, "", "Reversible"], [385, 9, 1, "", "Self"], [385, 12, 1, "", "Sequence"], [385, 12, 1, "", "Set"], [385, 12, 1, "", "Sized"], [385, 12, 1, "", "SupportsAbs"], [385, 12, 1, "", "SupportsBytes"], [385, 12, 1, "", "SupportsComplex"], [385, 12, 1, "", "SupportsFloat"], [385, 12, 1, "", "SupportsIndex"], [385, 12, 1, "", "SupportsInt"], [385, 12, 1, "", "SupportsRound"], [385, 9, 1, "", "TYPE_CHECKING"], [385, 12, 1, "", "Text"], [385, 12, 1, "", "TextIO"], [385, 9, 1, "", "Tuple"], [385, 12, 1, "", "Type"], [385, 9, 1, "", "TypeAlias"], [385, 9, 1, "", "TypeGuard"], [385, 12, 1, "", "TypeVar"], [385, 12, 1, "", "TypeVarTuple"], [385, 12, 1, "", "TypedDict"], [385, 9, 1, "", "Union"], [385, 9, 1, "", "Unpack"], [385, 12, 1, "", "ValuesView"], [385, 11, 1, "", "assert_never"], [385, 11, 1, "", "assert_type"], [385, 11, 1, "", "cast"], [385, 11, 1, "", "clear_overloads"], [385, 11, 1, "", "dataclass_transform"], [385, 11, 1, "", "final"], [385, 11, 1, "", "get_args"], [385, 11, 1, "", "get_origin"], [385, 11, 1, "", "get_overloads"], [385, 11, 1, "", "get_type_hints"], [385, 11, 1, "", "is_typeddict"], [385, 11, 1, "", "no_type_check"], [385, 11, 1, "", "no_type_check_decorator"], [385, 11, 1, "", "overload"], [385, 11, 1, "", "reveal_type"], [385, 11, 1, "", "runtime_checkable"], [385, 11, 1, "", "type_check_only"]], "typing.ParamSpec": [[385, 7, 1, "", "args"], [385, 7, 1, "", "kwargs"]], "typing.TypedDict": [[385, 7, 1, "", "__optional_keys__"], [385, 7, 1, "", "__required_keys__"], [385, 7, 1, "", "__total__"]], "unicodedata": [[386, 11, 1, "", "bidirectional"], [386, 11, 1, "", "category"], [386, 11, 1, "", "combining"], [386, 11, 1, "", "decimal"], [386, 11, 1, "", "decomposition"], [386, 11, 1, "", "digit"], [386, 11, 1, "", "east_asian_width"], [386, 11, 1, "", "is_normalized"], [386, 11, 1, "", "lookup"], [386, 11, 1, "", "mirrored"], [386, 11, 1, "", "name"], [386, 11, 1, "", "normalize"], [386, 11, 1, "", "numeric"], [386, 9, 1, "", "ucd_3_2_0"], [386, 9, 1, "", "unidata_version"]], "unittest": [[387, 12, 1, "", "FunctionTestCase"], [387, 12, 1, "", "IsolatedAsyncioTestCase"], [387, 6, 1, "", "SkipTest"], [387, 12, 1, "", "TestCase"], [387, 12, 1, "", "TestLoader"], [387, 12, 1, "", "TestResult"], [387, 12, 1, "", "TestSuite"], [387, 12, 1, "", "TextTestResult"], [387, 12, 1, "", "TextTestRunner"], [387, 11, 1, "", "addModuleCleanup"], [387, 9, 1, "", "defaultTestLoader"], [387, 11, 1, "", "doModuleCleanups"], [387, 8, 1, "", "enterModuleContext"], [387, 11, 1, "", "expectedFailure"], [387, 11, 1, "", "installHandler"], [387, 11, 1, "", "main"], [388, 10, 0, "-", "mock"], [387, 11, 1, "", "registerResult"], [387, 11, 1, "", "removeHandler"], [387, 11, 1, "", "removeResult"], [387, 11, 1, "", "skip"], [387, 11, 1, "", "skipIf"], [387, 11, 1, "", "skipUnless"], [387, 14, 1, "cmdoption-unittest-b", "--buffer"], [387, 14, 1, "cmdoption-unittest-c", "--catch"], [387, 14, 1, "cmdoption-unittest-f", "--failfast"], [387, 14, 1, "cmdoption-unittest-locals", "--locals"], [387, 14, 1, "cmdoption-unittest-b", "-b"], [387, 14, 1, "cmdoption-unittest-c", "-c"], [387, 14, 1, "cmdoption-unittest-f", "-f"], [387, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[387, 8, 1, "", "addAsyncCleanup"], [387, 8, 1, "", "asyncSetUp"], [387, 8, 1, "", "asyncTearDown"], [387, 8, 1, "", "enterAsyncContext"], [387, 8, 1, "", "run"]], "unittest.TestCase": [[387, 8, 1, "", "addClassCleanup"], [387, 8, 1, "", "addCleanup"], [387, 8, 1, "", "addTypeEqualityFunc"], [387, 8, 1, "", "assertAlmostEqual"], [387, 8, 1, "", "assertCountEqual"], [387, 8, 1, "", "assertDictEqual"], [387, 8, 1, "", "assertEqual"], [387, 8, 1, "", "assertFalse"], [387, 8, 1, "", "assertGreater"], [387, 8, 1, "", "assertGreaterEqual"], [387, 8, 1, "", "assertIn"], [387, 8, 1, "", "assertIs"], [387, 8, 1, "", "assertIsInstance"], [387, 8, 1, "", "assertIsNone"], [387, 8, 1, "", "assertIsNot"], [387, 8, 1, "", "assertIsNotNone"], [387, 8, 1, "", "assertLess"], [387, 8, 1, "", "assertLessEqual"], [387, 8, 1, "", "assertListEqual"], [387, 8, 1, "", "assertLogs"], [387, 8, 1, "", "assertMultiLineEqual"], [387, 8, 1, "", "assertNoLogs"], [387, 8, 1, "", "assertNotAlmostEqual"], [387, 8, 1, "", "assertNotEqual"], [387, 8, 1, "", "assertNotIn"], [387, 8, 1, "", "assertNotIsInstance"], [387, 8, 1, "", "assertNotRegex"], [387, 8, 1, "", "assertRaises"], [387, 8, 1, "", "assertRaisesRegex"], [387, 8, 1, "", "assertRegex"], [387, 8, 1, "", "assertSequenceEqual"], [387, 8, 1, "", "assertSetEqual"], [387, 8, 1, "", "assertTrue"], [387, 8, 1, "", "assertTupleEqual"], [387, 8, 1, "", "assertWarns"], [387, 8, 1, "", "assertWarnsRegex"], [387, 8, 1, "", "countTestCases"], [387, 8, 1, "", "debug"], [387, 8, 1, "", "defaultTestResult"], [387, 8, 1, "", "doClassCleanups"], [387, 8, 1, "", "doCleanups"], [387, 8, 1, "", "enterClassContext"], [387, 8, 1, "", "enterContext"], [387, 8, 1, "", "fail"], [387, 7, 1, "", "failureException"], [387, 8, 1, "", "id"], [387, 7, 1, "", "longMessage"], [387, 7, 1, "", "maxDiff"], [387, 7, 1, "", "output"], [387, 7, 1, "", "records"], [387, 8, 1, "", "run"], [387, 8, 1, "", "setUp"], [387, 8, 1, "", "setUpClass"], [387, 8, 1, "", "shortDescription"], [387, 8, 1, "", "skipTest"], [387, 8, 1, "", "subTest"], [387, 8, 1, "", "tearDown"], [387, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[387, 8, 1, "", "discover"], [387, 7, 1, "", "errors"], [387, 8, 1, "", "getTestCaseNames"], [387, 8, 1, "", "loadTestsFromModule"], [387, 8, 1, "", "loadTestsFromName"], [387, 8, 1, "", "loadTestsFromNames"], [387, 8, 1, "", "loadTestsFromTestCase"], [387, 7, 1, "", "sortTestMethodsUsing"], [387, 7, 1, "", "suiteClass"], [387, 7, 1, "", "testMethodPrefix"], [387, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[387, 8, 1, "", "addError"], [387, 8, 1, "", "addExpectedFailure"], [387, 8, 1, "", "addFailure"], [387, 8, 1, "", "addSkip"], [387, 8, 1, "", "addSubTest"], [387, 8, 1, "", "addSuccess"], [387, 8, 1, "", "addUnexpectedSuccess"], [387, 7, 1, "", "buffer"], [387, 7, 1, "", "errors"], [387, 7, 1, "", "expectedFailures"], [387, 7, 1, "", "failfast"], [387, 7, 1, "", "failures"], [387, 7, 1, "", "shouldStop"], [387, 7, 1, "", "skipped"], [387, 8, 1, "", "startTest"], [387, 8, 1, "", "startTestRun"], [387, 8, 1, "", "stop"], [387, 8, 1, "", "stopTest"], [387, 8, 1, "", "stopTestRun"], [387, 7, 1, "", "tb_locals"], [387, 7, 1, "", "testsRun"], [387, 7, 1, "", "unexpectedSuccesses"], [387, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[387, 8, 1, "", "__iter__"], [387, 8, 1, "", "addTest"], [387, 8, 1, "", "addTests"], [387, 8, 1, "", "countTestCases"], [387, 8, 1, "", "debug"], [387, 8, 1, "", "run"]], "unittest.TextTestRunner": [[387, 8, 1, "", "_makeResult"], [387, 8, 1, "", "run"]], "unittest.mock": [[388, 9, 1, "", "ANY"], [388, 12, 1, "", "AsyncMock"], [388, 9, 1, "", "DEFAULT"], [388, 9, 1, "", "FILTER_DIR"], [388, 12, 1, "", "MagicMock"], [388, 12, 1, "", "Mock"], [388, 12, 1, "", "NonCallableMagicMock"], [388, 12, 1, "", "NonCallableMock"], [388, 12, 1, "", "PropertyMock"], [388, 11, 1, "", "call"], [388, 11, 1, "", "create_autospec"], [388, 11, 1, "", "mock_open"], [388, 11, 1, "", "patch"], [388, 11, 1, "", "seal"], [388, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[388, 8, 1, "", "assert_any_await"], [388, 8, 1, "", "assert_awaited"], [388, 8, 1, "", "assert_awaited_once"], [388, 8, 1, "", "assert_awaited_once_with"], [388, 8, 1, "", "assert_awaited_with"], [388, 8, 1, "", "assert_has_awaits"], [388, 8, 1, "", "assert_not_awaited"], [388, 7, 1, "", "await_args"], [388, 7, 1, "", "await_args_list"], [388, 7, 1, "", "await_count"], [388, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[388, 7, 1, "", "__class__"], [388, 8, 1, "", "__dir__"], [388, 8, 1, "", "_get_child_mock"], [388, 8, 1, "", "assert_any_call"], [388, 8, 1, "", "assert_called"], [388, 8, 1, "", "assert_called_once"], [388, 8, 1, "", "assert_called_once_with"], [388, 8, 1, "", "assert_called_with"], [388, 8, 1, "", "assert_has_calls"], [388, 8, 1, "", "assert_not_called"], [388, 8, 1, "", "attach_mock"], [388, 7, 1, "", "call_args"], [388, 7, 1, "", "call_args_list"], [388, 7, 1, "", "call_count"], [388, 7, 1, "", "called"], [388, 8, 1, "", "configure_mock"], [388, 7, 1, "", "method_calls"], [388, 8, 1, "", "mock_add_spec"], [388, 7, 1, "", "mock_calls"], [388, 8, 1, "", "reset_mock"], [388, 7, 1, "", "return_value"], [388, 7, 1, "", "side_effect"]], "unittest.mock.call": [[388, 8, 1, "", "call_list"]], "unittest.mock.patch": [[388, 11, 1, "", "dict"], [388, 11, 1, "", "multiple"], [388, 11, 1, "", "object"], [388, 11, 1, "", "stopall"]], "urllib": [[392, 10, 0, "-", "error"], [393, 10, 0, "-", "parse"], [394, 10, 0, "-", "request"], [394, 10, 0, "-", "response"], [395, 10, 0, "-", "robotparser"]], "urllib.error": [[392, 6, 1, "", "ContentTooShortError"], [392, 6, 1, "", "HTTPError"], [392, 6, 1, "", "URLError"]], "urllib.error.HTTPError": [[392, 7, 1, "", "code"], [392, 7, 1, "", "headers"], [392, 7, 1, "", "reason"]], "urllib.error.URLError": [[392, 7, 1, "", "reason"]], "urllib.parse": [[393, 12, 1, "", "DefragResult"], [393, 12, 1, "", "DefragResultBytes"], [393, 12, 1, "", "ParseResult"], [393, 12, 1, "", "ParseResultBytes"], [393, 12, 1, "", "SplitResult"], [393, 12, 1, "", "SplitResultBytes"], [393, 11, 1, "", "parse_qs"], [393, 11, 1, "", "parse_qsl"], [393, 11, 1, "", "quote"], [393, 11, 1, "", "quote_from_bytes"], [393, 11, 1, "", "quote_plus"], [393, 11, 1, "", "unquote"], [393, 11, 1, "", "unquote_plus"], [393, 11, 1, "", "unquote_to_bytes"], [393, 11, 1, "", "unwrap"], [393, 11, 1, "", "urldefrag"], [393, 11, 1, "", "urlencode"], [393, 11, 1, "", "urljoin"], [393, 11, 1, "", "urlparse"], [393, 11, 1, "", "urlsplit"], [393, 11, 1, "", "urlunparse"], [393, 11, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[393, 8, 1, "", "geturl"]], "urllib.request": [[394, 12, 1, "", "AbstractBasicAuthHandler"], [394, 12, 1, "", "AbstractDigestAuthHandler"], [394, 12, 1, "", "BaseHandler"], [394, 12, 1, "", "CacheFTPHandler"], [394, 12, 1, "", "DataHandler"], [394, 12, 1, "", "FTPHandler"], [394, 12, 1, "", "FancyURLopener"], [394, 12, 1, "", "FileHandler"], [394, 12, 1, "", "HTTPBasicAuthHandler"], [394, 12, 1, "", "HTTPCookieProcessor"], [394, 12, 1, "", "HTTPDefaultErrorHandler"], [394, 12, 1, "", "HTTPDigestAuthHandler"], [394, 12, 1, "", "HTTPErrorProcessor"], [394, 12, 1, "", "HTTPHandler"], [394, 12, 1, "", "HTTPPasswordMgr"], [394, 12, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [394, 12, 1, "", "HTTPPasswordMgrWithPriorAuth"], [394, 12, 1, "", "HTTPRedirectHandler"], [394, 12, 1, "", "HTTPSHandler"], [394, 12, 1, "", "OpenerDirector"], [394, 12, 1, "", "ProxyBasicAuthHandler"], [394, 12, 1, "", "ProxyDigestAuthHandler"], [394, 12, 1, "", "ProxyHandler"], [394, 12, 1, "", "Request"], [394, 12, 1, "", "URLopener"], [394, 12, 1, "", "UnknownHandler"], [394, 11, 1, "", "build_opener"], [394, 11, 1, "", "getproxies"], [394, 11, 1, "", "install_opener"], [394, 11, 1, "", "pathname2url"], [394, 11, 1, "", "url2pathname"], [394, 11, 1, "", "urlcleanup"], [394, 11, 1, "", "urlopen"], [394, 11, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[394, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[394, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[394, 8, 1, "", "add_parent"], [394, 8, 1, "", "close"], [394, 8, 1, "", "default_open"], [394, 8, 1, "", "http_error_default"], [394, 7, 1, "", "parent"], [394, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[394, 8, 1, "", "setMaxConns"], [394, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[394, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[394, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[394, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[394, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[394, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[394, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[394, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[394, 8, 1, "", "http_response"], [394, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[394, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[394, 8, 1, "", "add_password"], [394, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[394, 8, 1, "", "add_password"], [394, 8, 1, "", "find_user_password"], [394, 8, 1, "", "is_authenticated"], [394, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[394, 8, 1, "", "http_error_301"], [394, 8, 1, "", "http_error_302"], [394, 8, 1, "", "http_error_303"], [394, 8, 1, "", "http_error_307"], [394, 8, 1, "", "http_error_308"], [394, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[394, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[394, 8, 1, "", "add_handler"], [394, 8, 1, "", "error"], [394, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[394, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[394, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[394, 8, 1, "", "add_header"], [394, 8, 1, "", "add_unredirected_header"], [394, 7, 1, "", "data"], [394, 7, 1, "", "full_url"], [394, 8, 1, "", "get_full_url"], [394, 8, 1, "", "get_header"], [394, 8, 1, "", "get_method"], [394, 8, 1, "", "has_header"], [394, 8, 1, "", "header_items"], [394, 7, 1, "", "host"], [394, 7, 1, "", "method"], [394, 7, 1, "", "origin_req_host"], [394, 8, 1, "", "remove_header"], [394, 7, 1, "", "selector"], [394, 8, 1, "", "set_proxy"], [394, 7, 1, "", "type"], [394, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[394, 8, 1, "", "open"], [394, 8, 1, "", "open_unknown"], [394, 8, 1, "", "retrieve"], [394, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[394, 8, 1, "", "unknown_open"]], "urllib.response": [[394, 12, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[394, 7, 1, "", "code"], [394, 8, 1, "", "getstatus"], [394, 8, 1, "", "geturl"], [394, 7, 1, "", "headers"], [394, 8, 1, "", "info"], [394, 7, 1, "", "status"], [394, 7, 1, "", "url"]], "urllib.robotparser": [[395, 12, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[395, 8, 1, "", "can_fetch"], [395, 8, 1, "", "crawl_delay"], [395, 8, 1, "", "modified"], [395, 8, 1, "", "mtime"], [395, 8, 1, "", "parse"], [395, 8, 1, "", "read"], [395, 8, 1, "", "request_rate"], [395, 8, 1, "", "set_url"], [395, 8, 1, "", "site_maps"]], "uu": [[396, 6, 1, "", "Error"], [396, 11, 1, "", "decode"], [396, 11, 1, "", "encode"]], "uuid": [[397, 9, 1, "", "NAMESPACE_DNS"], [397, 9, 1, "", "NAMESPACE_OID"], [397, 9, 1, "", "NAMESPACE_URL"], [397, 9, 1, "", "NAMESPACE_X500"], [397, 9, 1, "", "RESERVED_FUTURE"], [397, 9, 1, "", "RESERVED_MICROSOFT"], [397, 9, 1, "", "RESERVED_NCS"], [397, 9, 1, "", "RFC_4122"], [397, 12, 1, "", "SafeUUID"], [397, 12, 1, "", "UUID"], [397, 11, 1, "", "getnode"], [397, 11, 1, "", "uuid1"], [397, 11, 1, "", "uuid3"], [397, 11, 1, "", "uuid4"], [397, 11, 1, "", "uuid5"]], "uuid.SafeUUID": [[397, 7, 1, "", "safe"], [397, 7, 1, "", "unknown"], [397, 7, 1, "", "unsafe"]], "uuid.UUID": [[397, 7, 1, "", "bytes"], [397, 7, 1, "", "bytes_le"], [397, 7, 1, "", "fields"], [397, 7, 1, "", "hex"], [397, 7, 1, "", "int"], [397, 7, 1, "", "is_safe"], [397, 7, 1, "", "urn"], [397, 7, 1, "", "variant"], [397, 7, 1, "", "version"]], "venv": [[398, 12, 1, "", "EnvBuilder"], [398, 11, 1, "", "create"]], "venv.EnvBuilder": [[398, 8, 1, "", "create"], [398, 8, 1, "", "create_configuration"], [398, 8, 1, "", "ensure_directories"], [398, 8, 1, "", "install_scripts"], [398, 8, 1, "", "post_setup"], [398, 8, 1, "", "setup_python"], [398, 8, 1, "", "setup_scripts"], [398, 8, 1, "", "upgrade_dependencies"]], "warnings": [[399, 12, 1, "", "catch_warnings"], [399, 11, 1, "", "filterwarnings"], [399, 11, 1, "", "formatwarning"], [399, 11, 1, "", "resetwarnings"], [399, 11, 1, "", "showwarning"], [399, 11, 1, "", "simplefilter"], [399, 11, 1, "", "warn"], [399, 11, 1, "", "warn_explicit"]], "wave": [[400, 6, 1, "", "Error"], [400, 11, 1, "", "open"]], "wave.Wave_read": [[400, 8, 1, "", "close"], [400, 8, 1, "", "getcompname"], [400, 8, 1, "", "getcomptype"], [400, 8, 1, "", "getframerate"], [400, 8, 1, "", "getmark"], [400, 8, 1, "", "getmarkers"], [400, 8, 1, "", "getnchannels"], [400, 8, 1, "", "getnframes"], [400, 8, 1, "", "getparams"], [400, 8, 1, "", "getsampwidth"], [400, 8, 1, "", "readframes"], [400, 8, 1, "", "rewind"], [400, 8, 1, "", "setpos"], [400, 8, 1, "", "tell"]], "wave.Wave_write": [[400, 8, 1, "", "close"], [400, 8, 1, "", "setcomptype"], [400, 8, 1, "", "setframerate"], [400, 8, 1, "", "setnchannels"], [400, 8, 1, "", "setnframes"], [400, 8, 1, "", "setparams"], [400, 8, 1, "", "setsampwidth"], [400, 8, 1, "", "tell"], [400, 8, 1, "", "writeframes"], [400, 8, 1, "", "writeframesraw"]], "weakref": [[401, 9, 1, "", "CallableProxyType"], [401, 9, 1, "", "ProxyType"], [401, 9, 1, "", "ProxyTypes"], [401, 9, 1, "", "ReferenceType"], [401, 12, 1, "", "WeakKeyDictionary"], [401, 12, 1, "", "WeakMethod"], [401, 12, 1, "", "WeakSet"], [401, 12, 1, "", "WeakValueDictionary"], [401, 12, 1, "", "finalize"], [401, 11, 1, "", "getweakrefcount"], [401, 11, 1, "", "getweakrefs"], [401, 11, 1, "", "proxy"], [401, 12, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[401, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[401, 8, 1, "", "valuerefs"]], "weakref.finalize": [[401, 8, 1, "", "__call__"], [401, 7, 1, "", "alive"], [401, 7, 1, "", "atexit"], [401, 8, 1, "", "detach"], [401, 8, 1, "", "peek"]], "weakref.ref": [[401, 7, 1, "", "__callback__"]], "webbrowser": [[402, 6, 1, "", "Error"], [402, 11, 1, "", "get"], [402, 7, 1, "", "name"], [402, 11, 1, "", "open"], [402, 11, 1, "", "open_new"], [402, 11, 1, "", "open_new_tab"], [402, 11, 1, "", "register"]], "webbrowser.controller": [[402, 8, 1, "", "open"], [402, 8, 1, "", "open_new"], [402, 8, 1, "", "open_new_tab"]], "winreg": [[404, 11, 1, "", "CloseKey"], [404, 11, 1, "", "ConnectRegistry"], [404, 11, 1, "", "CreateKey"], [404, 11, 1, "", "CreateKeyEx"], [404, 11, 1, "", "DeleteKey"], [404, 11, 1, "", "DeleteKeyEx"], [404, 11, 1, "", "DeleteValue"], [404, 11, 1, "", "DisableReflectionKey"], [404, 11, 1, "", "EnableReflectionKey"], [404, 11, 1, "", "EnumKey"], [404, 11, 1, "", "EnumValue"], [404, 11, 1, "", "ExpandEnvironmentStrings"], [404, 11, 1, "", "FlushKey"], [404, 9, 1, "", "HKEY_CLASSES_ROOT"], [404, 9, 1, "", "HKEY_CURRENT_CONFIG"], [404, 9, 1, "", "HKEY_CURRENT_USER"], [404, 9, 1, "", "HKEY_DYN_DATA"], [404, 9, 1, "", "HKEY_LOCAL_MACHINE"], [404, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [404, 9, 1, "", "HKEY_USERS"], [404, 9, 1, "", "KEY_ALL_ACCESS"], [404, 9, 1, "", "KEY_CREATE_LINK"], [404, 9, 1, "", "KEY_CREATE_SUB_KEY"], [404, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [404, 9, 1, "", "KEY_EXECUTE"], [404, 9, 1, "", "KEY_NOTIFY"], [404, 9, 1, "", "KEY_QUERY_VALUE"], [404, 9, 1, "", "KEY_READ"], [404, 9, 1, "", "KEY_SET_VALUE"], [404, 9, 1, "", "KEY_WOW64_32KEY"], [404, 9, 1, "", "KEY_WOW64_64KEY"], [404, 9, 1, "", "KEY_WRITE"], [404, 11, 1, "", "LoadKey"], [404, 11, 1, "", "OpenKey"], [404, 11, 1, "", "OpenKeyEx"], [404, 11, 1, "", "QueryInfoKey"], [404, 11, 1, "", "QueryReflectionKey"], [404, 11, 1, "", "QueryValue"], [404, 11, 1, "", "QueryValueEx"], [404, 9, 1, "", "REG_BINARY"], [404, 9, 1, "", "REG_DWORD"], [404, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [404, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [404, 9, 1, "", "REG_EXPAND_SZ"], [404, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [404, 9, 1, "", "REG_LINK"], [404, 9, 1, "", "REG_MULTI_SZ"], [404, 9, 1, "", "REG_NONE"], [404, 9, 1, "", "REG_QWORD"], [404, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [404, 9, 1, "", "REG_RESOURCE_LIST"], [404, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [404, 9, 1, "", "REG_SZ"], [404, 11, 1, "", "SaveKey"], [404, 11, 1, "", "SetValue"], [404, 11, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[404, 8, 1, "", "Close"], [404, 8, 1, "", "Detach"], [404, 8, 1, "", "__enter__"], [404, 8, 1, "", "__exit__"]], "winsound": [[405, 11, 1, "", "Beep"], [405, 9, 1, "", "MB_ICONASTERISK"], [405, 9, 1, "", "MB_ICONEXCLAMATION"], [405, 9, 1, "", "MB_ICONHAND"], [405, 9, 1, "", "MB_ICONQUESTION"], [405, 9, 1, "", "MB_OK"], [405, 11, 1, "", "MessageBeep"], [405, 11, 1, "", "PlaySound"], [405, 9, 1, "", "SND_ALIAS"], [405, 9, 1, "", "SND_ASYNC"], [405, 9, 1, "", "SND_FILENAME"], [405, 9, 1, "", "SND_LOOP"], [405, 9, 1, "", "SND_MEMORY"], [405, 9, 1, "", "SND_NODEFAULT"], [405, 9, 1, "", "SND_NOSTOP"], [405, 9, 1, "", "SND_NOWAIT"], [405, 9, 1, "", "SND_PURGE"]], "wsgiref": [[406, 10, 0, "-", "handlers"], [406, 10, 0, "-", "headers"], [406, 10, 0, "-", "simple_server"], [406, 10, 0, "-", "types"], [406, 10, 0, "-", "util"], [406, 10, 0, "-", "validate"]], "wsgiref.handlers": [[406, 12, 1, "", "BaseCGIHandler"], [406, 12, 1, "", "BaseHandler"], [406, 12, 1, "", "CGIHandler"], [406, 12, 1, "", "IISCGIHandler"], [406, 12, 1, "", "SimpleHandler"], [406, 11, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[406, 8, 1, "", "_flush"], [406, 8, 1, "", "_write"], [406, 8, 1, "", "add_cgi_vars"], [406, 7, 1, "", "error_body"], [406, 7, 1, "", "error_headers"], [406, 8, 1, "", "error_output"], [406, 7, 1, "", "error_status"], [406, 8, 1, "", "get_scheme"], [406, 8, 1, "", "get_stderr"], [406, 8, 1, "", "get_stdin"], [406, 7, 1, "", "http_version"], [406, 8, 1, "", "log_exception"], [406, 7, 1, "", "origin_server"], [406, 7, 1, "", "os_environ"], [406, 8, 1, "", "run"], [406, 8, 1, "", "sendfile"], [406, 7, 1, "", "server_software"], [406, 8, 1, "", "setup_environ"], [406, 7, 1, "", "traceback_limit"], [406, 7, 1, "", "wsgi_file_wrapper"], [406, 7, 1, "", "wsgi_multiprocess"], [406, 7, 1, "", "wsgi_multithread"], [406, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[406, 12, 1, "", "Headers"]], "wsgiref.headers.Headers": [[406, 8, 1, "", "add_header"], [406, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[406, 12, 1, "", "WSGIRequestHandler"], [406, 12, 1, "", "WSGIServer"], [406, 11, 1, "", "demo_app"], [406, 11, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[406, 8, 1, "", "get_environ"], [406, 8, 1, "", "get_stderr"], [406, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[406, 8, 1, "", "get_app"], [406, 8, 1, "", "set_app"]], "wsgiref.types": [[406, 12, 1, "", "ErrorStream"], [406, 12, 1, "", "FileWrapper"], [406, 12, 1, "", "InputStream"], [406, 12, 1, "", "StartResponse"], [406, 9, 1, "", "WSGIApplication"], [406, 9, 1, "", "WSGIEnvironment"]], "wsgiref.util": [[406, 12, 1, "", "FileWrapper"], [406, 11, 1, "", "application_uri"], [406, 11, 1, "", "guess_scheme"], [406, 11, 1, "", "is_hop_by_hop"], [406, 11, 1, "", "request_uri"], [406, 11, 1, "", "setup_testing_defaults"], [406, 11, 1, "", "shift_path_info"]], "wsgiref.validate": [[406, 11, 1, "", "validator"]], "xdrlib": [[407, 6, 1, "", "ConversionError"], [407, 6, 1, "", "Error"], [407, 12, 1, "", "Packer"], [407, 12, 1, "", "Unpacker"]], "xdrlib.Packer": [[407, 8, 1, "", "get_buffer"], [407, 8, 1, "", "pack_array"], [407, 8, 1, "", "pack_bytes"], [407, 8, 1, "", "pack_double"], [407, 8, 1, "", "pack_farray"], [407, 8, 1, "", "pack_float"], [407, 8, 1, "", "pack_fopaque"], [407, 8, 1, "", "pack_fstring"], [407, 8, 1, "", "pack_list"], [407, 8, 1, "", "pack_opaque"], [407, 8, 1, "", "pack_string"], [407, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[407, 8, 1, "", "done"], [407, 8, 1, "", "get_buffer"], [407, 8, 1, "", "get_position"], [407, 8, 1, "", "reset"], [407, 8, 1, "", "set_position"], [407, 8, 1, "", "unpack_array"], [407, 8, 1, "", "unpack_bytes"], [407, 8, 1, "", "unpack_double"], [407, 8, 1, "", "unpack_farray"], [407, 8, 1, "", "unpack_float"], [407, 8, 1, "", "unpack_fopaque"], [407, 8, 1, "", "unpack_fstring"], [407, 8, 1, "", "unpack_list"], [407, 8, 1, "", "unpack_opaque"], [407, 8, 1, "", "unpack_string"]], "xml": [[409, 10, 0, "-", "dom"], [413, 10, 0, "-", "sax"]], "xml.dom.Attr": [[409, 7, 1, "", "localName"], [409, 7, 1, "", "name"], [409, 7, 1, "", "prefix"], [409, 7, 1, "", "value"]], "xml.dom.Comment": [[409, 7, 1, "", "data"]], "xml.dom": [[409, 6, 1, "", "DOMException"], [409, 6, 1, "", "DomstringSizeErr"], [409, 9, 1, "", "EMPTY_NAMESPACE"], [409, 6, 1, "", "HierarchyRequestErr"], [409, 6, 1, "", "IndexSizeErr"], [409, 6, 1, "", "InuseAttributeErr"], [409, 6, 1, "", "InvalidAccessErr"], [409, 6, 1, "", "InvalidCharacterErr"], [409, 6, 1, "", "InvalidModificationErr"], [409, 6, 1, "", "InvalidStateErr"], [409, 6, 1, "", "NamespaceErr"], [409, 6, 1, "", "NoDataAllowedErr"], [409, 6, 1, "", "NoModificationAllowedErr"], [409, 6, 1, "", "NotFoundErr"], [409, 6, 1, "", "NotSupportedErr"], [409, 6, 1, "", "SyntaxErr"], [409, 6, 1, "", "WrongDocumentErr"], [409, 9, 1, "", "XHTML_NAMESPACE"], [409, 9, 1, "", "XMLNS_NAMESPACE"], [409, 9, 1, "", "XML_NAMESPACE"], [409, 11, 1, "", "getDOMImplementation"], [410, 10, 0, "-", "minidom"], [411, 10, 0, "-", "pulldom"], [409, 11, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[409, 8, 1, "", "createDocument"], [409, 8, 1, "", "createDocumentType"], [409, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[409, 8, 1, "", "createAttribute"], [409, 8, 1, "", "createAttributeNS"], [409, 8, 1, "", "createComment"], [409, 8, 1, "", "createElement"], [409, 8, 1, "", "createElementNS"], [409, 8, 1, "", "createProcessingInstruction"], [409, 8, 1, "", "createTextNode"], [409, 7, 1, "", "documentElement"], [409, 8, 1, "", "getElementsByTagName"], [409, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[409, 7, 1, "", "entities"], [409, 7, 1, "", "internalSubset"], [409, 7, 1, "", "name"], [409, 7, 1, "", "notations"], [409, 7, 1, "", "publicId"], [409, 7, 1, "", "systemId"]], "xml.dom.Element": [[409, 8, 1, "", "getAttribute"], [409, 8, 1, "", "getAttributeNS"], [409, 8, 1, "", "getAttributeNode"], [409, 8, 1, "", "getAttributeNodeNS"], [409, 8, 1, "", "getElementsByTagName"], [409, 8, 1, "", "getElementsByTagNameNS"], [409, 8, 1, "", "hasAttribute"], [409, 8, 1, "", "hasAttributeNS"], [409, 8, 1, "", "removeAttribute"], [409, 8, 1, "", "removeAttributeNS"], [409, 8, 1, "", "removeAttributeNode"], [409, 8, 1, "", "setAttribute"], [409, 8, 1, "", "setAttributeNS"], [409, 8, 1, "", "setAttributeNode"], [409, 8, 1, "", "setAttributeNodeNS"], [409, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[409, 8, 1, "", "item"], [409, 7, 1, "", "length"]], "xml.dom.Node": [[409, 8, 1, "", "appendChild"], [409, 7, 1, "", "attributes"], [409, 7, 1, "", "childNodes"], [409, 8, 1, "", "cloneNode"], [409, 7, 1, "", "firstChild"], [409, 8, 1, "", "hasAttributes"], [409, 8, 1, "", "hasChildNodes"], [409, 8, 1, "", "insertBefore"], [409, 8, 1, "", "isSameNode"], [409, 7, 1, "", "lastChild"], [409, 7, 1, "", "localName"], [409, 7, 1, "", "namespaceURI"], [409, 7, 1, "", "nextSibling"], [409, 7, 1, "", "nodeName"], [409, 7, 1, "", "nodeType"], [409, 7, 1, "", "nodeValue"], [409, 8, 1, "", "normalize"], [409, 7, 1, "", "parentNode"], [409, 7, 1, "", "prefix"], [409, 7, 1, "", "previousSibling"], [409, 8, 1, "", "removeChild"], [409, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[409, 8, 1, "", "item"], [409, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[409, 7, 1, "", "data"], [409, 7, 1, "", "target"]], "xml.dom.Text": [[409, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[410, 8, 1, "", "toprettyxml"], [410, 8, 1, "", "toxml"], [410, 8, 1, "", "unlink"], [410, 8, 1, "", "writexml"]], "xml.dom.minidom": [[410, 11, 1, "", "parse"], [410, 11, 1, "", "parseString"]], "xml.dom.pulldom": [[411, 12, 1, "", "DOMEventStream"], [411, 12, 1, "", "PullDom"], [411, 12, 1, "", "SAX2DOM"], [411, 9, 1, "", "default_bufsize"], [411, 11, 1, "", "parse"], [411, 11, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[411, 8, 1, "", "expandNode"], [411, 8, 1, "", "getEvent"], [411, 8, 1, "", "reset"]], "xml.etree.ElementInclude": [[412, 11, 1, "", "default_loader"], [412, 11, 1, "", "include"]], "xml.etree": [[412, 10, 0, "-", "ElementTree"]], "xml.etree.ElementTree": [[412, 12, 1, "", "C14NWriterTarget"], [412, 11, 1, "", "Comment"], [412, 12, 1, "", "Element"], [412, 12, 1, "", "ElementTree"], [412, 12, 1, "", "ParseError"], [412, 11, 1, "", "ProcessingInstruction"], [412, 12, 1, "", "QName"], [412, 11, 1, "", "SubElement"], [412, 12, 1, "", "TreeBuilder"], [412, 11, 1, "", "XML"], [412, 11, 1, "", "XMLID"], [412, 12, 1, "", "XMLParser"], [412, 12, 1, "", "XMLPullParser"], [412, 11, 1, "", "canonicalize"], [412, 11, 1, "", "dump"], [412, 11, 1, "", "fromstring"], [412, 11, 1, "", "fromstringlist"], [412, 11, 1, "", "indent"], [412, 11, 1, "", "iselement"], [412, 11, 1, "", "iterparse"], [412, 11, 1, "", "parse"], [412, 11, 1, "", "register_namespace"], [412, 11, 1, "", "tostring"], [412, 11, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[412, 8, 1, "", "append"], [412, 7, 1, "", "attrib"], [412, 8, 1, "", "clear"], [412, 8, 1, "", "extend"], [412, 8, 1, "", "find"], [412, 8, 1, "", "findall"], [412, 8, 1, "", "findtext"], [412, 8, 1, "", "get"], [412, 8, 1, "", "insert"], [412, 8, 1, "", "items"], [412, 8, 1, "", "iter"], [412, 8, 1, "", "iterfind"], [412, 8, 1, "", "itertext"], [412, 8, 1, "", "keys"], [412, 8, 1, "", "makeelement"], [412, 8, 1, "", "remove"], [412, 8, 1, "", "set"], [412, 7, 1, "", "tag"], [412, 7, 1, "", "tail"], [412, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[412, 8, 1, "", "_setroot"], [412, 8, 1, "", "find"], [412, 8, 1, "", "findall"], [412, 8, 1, "", "findtext"], [412, 8, 1, "", "getroot"], [412, 8, 1, "", "iter"], [412, 8, 1, "", "iterfind"], [412, 8, 1, "", "parse"], [412, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[412, 7, 1, "", "code"], [412, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[412, 8, 1, "", "close"], [412, 8, 1, "", "comment"], [412, 8, 1, "", "data"], [412, 8, 1, "", "doctype"], [412, 8, 1, "", "end"], [412, 8, 1, "", "end_ns"], [412, 8, 1, "", "pi"], [412, 8, 1, "", "start"], [412, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[412, 8, 1, "", "close"], [412, 8, 1, "", "feed"]], "xml.etree.ElementTree.XMLPullParser": [[412, 8, 1, "", "close"], [412, 8, 1, "", "feed"], [412, 8, 1, "", "read_events"]], "xml.parsers": [[314, 10, 0, "-", "expat"]], "xml.parsers.expat": [[314, 11, 1, "", "ErrorString"], [314, 6, 1, "", "ExpatError"], [314, 11, 1, "", "ParserCreate"], [314, 9, 1, "", "XMLParserType"], [314, 6, 1, "", "error"], [314, 10, 0, "-", "errors"], [314, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[314, 7, 1, "", "code"], [314, 7, 1, "", "lineno"], [314, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[314, 9, 1, "", "XML_ERROR_ABORTED"], [314, 9, 1, "", "XML_ERROR_AMPLIFICATION_LIMIT_BREACH"], [314, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [314, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [314, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [314, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [314, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [314, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [314, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [314, 9, 1, "", "XML_ERROR_FINISHED"], [314, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [314, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [314, 9, 1, "", "XML_ERROR_INVALID_ARGUMENT"], [314, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [314, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [314, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [314, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [314, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [314, 9, 1, "", "XML_ERROR_NO_BUFFER"], [314, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [314, 9, 1, "", "XML_ERROR_NO_MEMORY"], [314, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [314, 9, 1, "", "XML_ERROR_PUBLICID"], [314, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_RESERVED_NAMESPACE_URI"], [314, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XML"], [314, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XMLNS"], [314, 9, 1, "", "XML_ERROR_SUSPENDED"], [314, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [314, 9, 1, "", "XML_ERROR_SYNTAX"], [314, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [314, 9, 1, "", "XML_ERROR_TEXT_DECL"], [314, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [314, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [314, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [314, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [314, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [314, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [314, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [314, 9, 1, "", "XML_ERROR_XML_DECL"], [314, 9, 1, "", "codes"], [314, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[314, 8, 1, "", "AttlistDeclHandler"], [314, 8, 1, "", "CharacterDataHandler"], [314, 8, 1, "", "CommentHandler"], [314, 7, 1, "", "CurrentByteIndex"], [314, 7, 1, "", "CurrentColumnNumber"], [314, 7, 1, "", "CurrentLineNumber"], [314, 8, 1, "", "DefaultHandler"], [314, 8, 1, "", "DefaultHandlerExpand"], [314, 8, 1, "", "ElementDeclHandler"], [314, 8, 1, "", "EndCdataSectionHandler"], [314, 8, 1, "", "EndDoctypeDeclHandler"], [314, 8, 1, "", "EndElementHandler"], [314, 8, 1, "", "EndNamespaceDeclHandler"], [314, 8, 1, "", "EntityDeclHandler"], [314, 7, 1, "", "ErrorByteIndex"], [314, 7, 1, "", "ErrorCode"], [314, 7, 1, "", "ErrorColumnNumber"], [314, 7, 1, "", "ErrorLineNumber"], [314, 8, 1, "", "ExternalEntityParserCreate"], [314, 8, 1, "", "ExternalEntityRefHandler"], [314, 8, 1, "", "GetBase"], [314, 8, 1, "", "GetInputContext"], [314, 8, 1, "", "NotStandaloneHandler"], [314, 8, 1, "", "NotationDeclHandler"], [314, 8, 1, "", "Parse"], [314, 8, 1, "", "ParseFile"], [314, 8, 1, "", "ProcessingInstructionHandler"], [314, 8, 1, "", "SetBase"], [314, 8, 1, "", "SetParamEntityParsing"], [314, 8, 1, "", "StartCdataSectionHandler"], [314, 8, 1, "", "StartDoctypeDeclHandler"], [314, 8, 1, "", "StartElementHandler"], [314, 8, 1, "", "StartNamespaceDeclHandler"], [314, 8, 1, "", "UnparsedEntityDeclHandler"], [314, 8, 1, "", "UseForeignDTD"], [314, 8, 1, "", "XmlDeclHandler"], [314, 7, 1, "", "buffer_size"], [314, 7, 1, "", "buffer_text"], [314, 7, 1, "", "buffer_used"], [314, 7, 1, "", "ordered_attributes"], [314, 7, 1, "", "specified_attributes"]], "xml.sax": [[413, 6, 1, "", "SAXException"], [413, 6, 1, "", "SAXNotRecognizedException"], [413, 6, 1, "", "SAXNotSupportedException"], [413, 6, 1, "", "SAXParseException"], [414, 10, 0, "-", "handler"], [413, 11, 1, "", "make_parser"], [413, 11, 1, "", "parse"], [413, 11, 1, "", "parseString"], [416, 10, 0, "-", "saxutils"], [415, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[413, 8, 1, "", "getException"], [413, 8, 1, "", "getMessage"]], "xml.sax.handler": [[414, 12, 1, "", "ContentHandler"], [414, 12, 1, "", "DTDHandler"], [414, 12, 1, "", "EntityResolver"], [414, 12, 1, "", "ErrorHandler"], [414, 12, 1, "", "LexicalHandler"], [414, 9, 1, "", "all_features"], [414, 9, 1, "", "all_properties"], [414, 9, 1, "", "feature_external_ges"], [414, 9, 1, "", "feature_external_pes"], [414, 9, 1, "", "feature_namespace_prefixes"], [414, 9, 1, "", "feature_namespaces"], [414, 9, 1, "", "feature_string_interning"], [414, 9, 1, "", "feature_validation"], [414, 9, 1, "", "property_declaration_handler"], [414, 9, 1, "", "property_dom_node"], [414, 9, 1, "", "property_lexical_handler"], [414, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[414, 8, 1, "", "characters"], [414, 8, 1, "", "endDocument"], [414, 8, 1, "", "endElement"], [414, 8, 1, "", "endElementNS"], [414, 8, 1, "", "endPrefixMapping"], [414, 8, 1, "", "ignorableWhitespace"], [414, 8, 1, "", "processingInstruction"], [414, 8, 1, "", "setDocumentLocator"], [414, 8, 1, "", "skippedEntity"], [414, 8, 1, "", "startDocument"], [414, 8, 1, "", "startElement"], [414, 8, 1, "", "startElementNS"], [414, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[414, 8, 1, "", "notationDecl"], [414, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[414, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[414, 8, 1, "", "error"], [414, 8, 1, "", "fatalError"], [414, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[414, 8, 1, "", "comment"], [414, 8, 1, "", "endCDATA"], [414, 8, 1, "", "endDTD"], [414, 8, 1, "", "startCDATA"], [414, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[416, 12, 1, "", "XMLFilterBase"], [416, 12, 1, "", "XMLGenerator"], [416, 11, 1, "", "escape"], [416, 11, 1, "", "prepare_input_source"], [416, 11, 1, "", "quoteattr"], [416, 11, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[415, 8, 1, "", "getLength"], [415, 8, 1, "", "getNames"], [415, 8, 1, "", "getType"], [415, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[415, 12, 1, "", "AttributesImpl"], [415, 12, 1, "", "AttributesNSImpl"], [415, 12, 1, "", "IncrementalParser"], [415, 12, 1, "", "InputSource"], [415, 12, 1, "", "Locator"], [415, 12, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[415, 8, 1, "", "getNameByQName"], [415, 8, 1, "", "getQNameByName"], [415, 8, 1, "", "getQNames"], [415, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[415, 8, 1, "", "close"], [415, 8, 1, "", "feed"], [415, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[415, 8, 1, "", "getByteStream"], [415, 8, 1, "", "getCharacterStream"], [415, 8, 1, "", "getEncoding"], [415, 8, 1, "", "getPublicId"], [415, 8, 1, "", "getSystemId"], [415, 8, 1, "", "setByteStream"], [415, 8, 1, "", "setCharacterStream"], [415, 8, 1, "", "setEncoding"], [415, 8, 1, "", "setPublicId"], [415, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[415, 8, 1, "", "getColumnNumber"], [415, 8, 1, "", "getLineNumber"], [415, 8, 1, "", "getPublicId"], [415, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[415, 8, 1, "", "getContentHandler"], [415, 8, 1, "", "getDTDHandler"], [415, 8, 1, "", "getEntityResolver"], [415, 8, 1, "", "getErrorHandler"], [415, 8, 1, "", "getFeature"], [415, 8, 1, "", "getProperty"], [415, 8, 1, "", "parse"], [415, 8, 1, "", "setContentHandler"], [415, 8, 1, "", "setDTDHandler"], [415, 8, 1, "", "setEntityResolver"], [415, 8, 1, "", "setErrorHandler"], [415, 8, 1, "", "setFeature"], [415, 8, 1, "", "setLocale"], [415, 8, 1, "", "setProperty"]], "xmlrpc": [[418, 10, 0, "-", "client"], [419, 10, 0, "-", "server"]], "xmlrpc.client": [[418, 12, 1, "", "Binary"], [418, 12, 1, "", "DateTime"], [418, 12, 1, "", "Fault"], [418, 12, 1, "", "MultiCall"], [418, 12, 1, "", "ProtocolError"], [418, 12, 1, "", "ServerProxy"], [418, 11, 1, "", "dumps"], [418, 11, 1, "", "loads"]], "xmlrpc.client.Binary": [[418, 7, 1, "", "data"], [418, 8, 1, "", "decode"], [418, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[418, 8, 1, "", "decode"], [418, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[418, 7, 1, "", "faultCode"], [418, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[418, 7, 1, "", "errcode"], [418, 7, 1, "", "errmsg"], [418, 7, 1, "", "headers"], [418, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[418, 8, 1, "", "listMethods"], [418, 8, 1, "", "methodHelp"], [418, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[419, 12, 1, "", "CGIXMLRPCRequestHandler"], [419, 12, 1, "", "DocCGIXMLRPCRequestHandler"], [419, 12, 1, "", "DocXMLRPCRequestHandler"], [419, 12, 1, "", "DocXMLRPCServer"], [419, 12, 1, "", "SimpleXMLRPCRequestHandler"], [419, 12, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[419, 8, 1, "", "handle_request"], [419, 8, 1, "", "register_function"], [419, 8, 1, "", "register_instance"], [419, 8, 1, "", "register_introspection_functions"], [419, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[419, 8, 1, "", "set_server_documentation"], [419, 8, 1, "", "set_server_name"], [419, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[419, 8, 1, "", "set_server_documentation"], [419, 8, 1, "", "set_server_name"], [419, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[419, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[419, 8, 1, "", "register_function"], [419, 8, 1, "", "register_instance"], [419, 8, 1, "", "register_introspection_functions"], [419, 8, 1, "", "register_multicall_functions"]], "zipapp": [[420, 11, 1, "", "create_archive"], [420, 11, 1, "", "get_interpreter"], [420, 14, 1, "cmdoption-zipapp-c", "--compress"], [420, 14, 1, "cmdoption-zipapp-h", "--help"], [420, 14, 1, "cmdoption-zipapp-info", "--info"], [420, 14, 1, "cmdoption-zipapp-m", "--main"], [420, 14, 1, "cmdoption-zipapp-o", "--output"], [420, 14, 1, "cmdoption-zipapp-p", "--python"], [420, 14, 1, "cmdoption-zipapp-c", "-c"], [420, 14, 1, "cmdoption-zipapp-h", "-h"], [420, 14, 1, "cmdoption-zipapp-m", "-m"], [420, 14, 1, "cmdoption-zipapp-o", "-o"], [420, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[421, 6, 1, "", "BadZipFile"], [421, 6, 1, "", "BadZipfile"], [421, 6, 1, "", "LargeZipFile"], [421, 12, 1, "", "Path"], [421, 12, 1, "", "PyZipFile"], [421, 9, 1, "", "ZIP_BZIP2"], [421, 9, 1, "", "ZIP_DEFLATED"], [421, 9, 1, "", "ZIP_LZMA"], [421, 9, 1, "", "ZIP_STORED"], [421, 12, 1, "", "ZipFile"], [421, 12, 1, "", "ZipInfo"], [421, 11, 1, "", "is_zipfile"], [421, 14, 1, "cmdoption-zipfile-create", "--create"], [421, 14, 1, "cmdoption-zipfile-extract", "--extract"], [421, 14, 1, "cmdoption-zipfile-list", "--list"], [421, 14, 1, "cmdoption-zipfile-metadata-encoding", "--metadata-encoding"], [421, 14, 1, "cmdoption-zipfile-test", "--test"], [421, 14, 1, "cmdoption-zipfile-c", "-c"], [421, 14, 1, "cmdoption-zipfile-e", "-e"], [421, 14, 1, "cmdoption-zipfile-l", "-l"], [421, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[421, 8, 1, "", "exists"], [421, 8, 1, "", "is_dir"], [421, 8, 1, "", "is_file"], [421, 8, 1, "", "iterdir"], [421, 8, 1, "", "joinpath"], [421, 7, 1, "", "name"], [421, 8, 1, "", "open"], [421, 8, 1, "", "read_bytes"], [421, 8, 1, "", "read_text"], [421, 9, 1, "", "stem"], [421, 9, 1, "", "suffix"], [421, 9, 1, "", "suffixes"]], "zipfile.PyZipFile": [[421, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[421, 8, 1, "", "close"], [421, 7, 1, "", "comment"], [421, 7, 1, "", "debug"], [421, 8, 1, "", "extract"], [421, 8, 1, "", "extractall"], [421, 7, 1, "", "filename"], [421, 8, 1, "", "getinfo"], [421, 8, 1, "", "infolist"], [421, 8, 1, "", "mkdir"], [421, 8, 1, "", "namelist"], [421, 8, 1, "", "open"], [421, 8, 1, "", "printdir"], [421, 8, 1, "", "read"], [421, 8, 1, "", "setpassword"], [421, 8, 1, "", "testzip"], [421, 8, 1, "", "write"], [421, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[421, 7, 1, "", "CRC"], [421, 7, 1, "", "comment"], [421, 7, 1, "", "compress_size"], [421, 7, 1, "", "compress_type"], [421, 7, 1, "", "create_system"], [421, 7, 1, "", "create_version"], [421, 7, 1, "", "date_time"], [421, 7, 1, "", "external_attr"], [421, 7, 1, "", "extra"], [421, 7, 1, "", "extract_version"], [421, 7, 1, "", "file_size"], [421, 7, 1, "", "filename"], [421, 7, 1, "", "flag_bits"], [421, 8, 1, "", "from_file"], [421, 7, 1, "", "header_offset"], [421, 7, 1, "", "internal_attr"], [421, 8, 1, "", "is_dir"], [421, 7, 1, "", "reserved"], [421, 7, 1, "", "volume"]], "zipimport": [[422, 6, 1, "", "ZipImportError"], [422, 12, 1, "", "zipimporter"]], "zipimport.zipimporter": [[422, 7, 1, "", "archive"], [422, 8, 1, "", "create_module"], [422, 8, 1, "", "exec_module"], [422, 8, 1, "", "find_loader"], [422, 8, 1, "", "find_module"], [422, 8, 1, "", "find_spec"], [422, 8, 1, "", "get_code"], [422, 8, 1, "", "get_data"], [422, 8, 1, "", "get_filename"], [422, 8, 1, "", "get_source"], [422, 8, 1, "", "invalidate_caches"], [422, 8, 1, "", "is_package"], [422, 8, 1, "", "load_module"], [422, 7, 1, "", "prefix"]], "zlib.Compress": [[423, 8, 1, "", "compress"], [423, 8, 1, "", "copy"], [423, 8, 1, "", "flush"]], "zlib.Decompress": [[423, 8, 1, "", "copy"], [423, 8, 1, "", "decompress"], [423, 7, 1, "", "eof"], [423, 8, 1, "", "flush"], [423, 7, 1, "", "unconsumed_tail"], [423, 7, 1, "", "unused_data"]], "zlib": [[423, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [423, 9, 1, "", "ZLIB_VERSION"], [423, 11, 1, "", "adler32"], [423, 11, 1, "", "compress"], [423, 11, 1, "", "compressobj"], [423, 11, 1, "", "crc32"], [423, 11, 1, "", "decompress"], [423, 11, 1, "", "decompressobj"], [423, 6, 1, "", "error"]], "zoneinfo": [[424, 6, 1, "", "InvalidTZPathWarning"], [424, 9, 1, "", "TZPATH"], [424, 12, 1, "", "ZoneInfo"], [424, 6, 1, "", "ZoneInfoNotFoundError"], [424, 11, 1, "", "available_timezones"], [424, 11, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[424, 8, 1, "", "clear_cache"], [424, 8, 1, "", "from_file"], [424, 7, 1, "", "key"], [424, 8, 1, "", "no_cache"]], "json.tool": [[262, 14, 1, "cmdoption-json.tool-indent", "--compact"], [262, 14, 1, "cmdoption-json.tool-h", "--help"], [262, 14, 1, "cmdoption-json.tool-indent", "--indent"], [262, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [262, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [262, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [262, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [262, 14, 1, "cmdoption-json.tool-indent", "--tab"], [262, 14, 1, "cmdoption-json.tool-h", "-h"], [262, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [262, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[311, 14, 1, "cmdoption-python-m-py_compile", "-"], [311, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [311, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [311, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql]": [[340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "--help"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "--version"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "-h"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "-v"]], "unittest-discover": [[387, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [387, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [387, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [387, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [387, 14, 1, "cmdoption-unittest-discover-p", "-p"], [387, 14, 1, "cmdoption-unittest-discover-s", "-s"], [387, 14, 1, "cmdoption-unittest-discover-t", "-t"], [387, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:function", "12": "py:class", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:opcode", "16": "std:envvar", "17": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "function", "Python \u51fd\u5f0f"], "12": ["py", "class", "Python \u985e\u5225"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "opcode", "opcode"], "16": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "17": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 31, 32, 33, 34, 41, 66, 68, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 100, 101, 105, 108, 109, 110, 112, 157, 158, 162, 175, 179, 187, 190, 192, 213, 254, 263, 264, 266, 267, 274, 293, 297, 299, 308, 311, 312, 315, 324, 330, 333, 340, 353, 354, 361, 366, 368, 376, 377, 379, 383, 420, 425, 432, 436, 437, 439, 444, 447, 448, 449, 450, 451, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "bug": [1, 32, 83, 375], "abstract": [2, 73, 97, 114, 120, 160, 250, 253, 289, 385, 467], "object": [2, 3, 8, 9, 13, 15, 16, 17, 23, 26, 34, 41, 43, 48, 49, 53, 54, 56, 58, 59, 60, 61, 62, 73, 77, 82, 83, 86, 91, 92, 96, 97, 98, 99, 118, 125, 131, 138, 156, 165, 174, 176, 178, 182, 185, 189, 202, 205, 207, 225, 234, 255, 259, 262, 267, 268, 281, 283, 293, 295, 296, 299, 301, 312, 319, 321, 323, 325, 328, 330, 337, 338, 340, 341, 344, 348, 358, 364, 388, 389, 394, 397, 401, 402, 404, 407, 409, 412, 415, 418, 421, 427, 464, 465, 467, 468, 472, 475, 476], "layer": [2, 16, 64, 106, 477], "alloc": [3, 32, 41, 59, 73, 381, 464, 476], "on": [3, 41, 75, 77, 82, 83, 93, 96, 108, 151, 183, 213, 225, 229, 246, 333, 337, 341, 344, 348, 389, 427, 462], "the": [3, 23, 28, 32, 41, 64, 71, 74, 77, 82, 83, 86, 88, 90, 93, 95, 97, 98, 99, 100, 101, 102, 105, 108, 112, 118, 125, 131, 151, 175, 187, 192, 195, 209, 213, 214, 215, 229, 232, 249, 250, 251, 255, 267, 270, 282, 283, 289, 292, 293, 296, 297, 306, 308, 310, 332, 337, 340, 344, 348, 351, 353, 361, 364, 368, 381, 388, 389, 399, 409, 410, 412, 415, 420, 424, 426, 427, 429, 431, 435, 455, 460, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "heap": [3, 59, 61, 97, 235], "api": [4, 5, 8, 10, 14, 31, 32, 33, 41, 55, 71, 84, 92, 113, 122, 123, 125, 129, 166, 192, 195, 206, 209, 229, 251, 299, 340, 344, 348, 381, 398, 409, 412, 420, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "abi": [4, 471, 474, 480], "pars": [5, 118, 206, 292, 304, 314, 331, 376, 393, 412, 468, 471, 474, 479, 481], "argument": [5, 83, 87, 88, 118, 175, 292, 293, 348, 389, 427, 440, 460, 476, 478], "and": [5, 7, 14, 23, 25, 32, 34, 55, 56, 62, 69, 70, 71, 73, 74, 75, 77, 82, 83, 86, 88, 90, 91, 92, 93, 95, 97, 99, 102, 104, 105, 106, 108, 118, 120, 124, 125, 127, 131, 132, 138, 146, 151, 154, 157, 160, 168, 174, 175, 182, 185, 193, 198, 205, 210, 214, 215, 225, 229, 234, 239, 242, 246, 250, 255, 256, 259, 260, 262, 266, 268, 270, 275, 283, 292, 293, 296, 299, 304, 308, 313, 317, 319, 324, 328, 332, 333, 337, 340, 341, 343, 344, 347, 352, 357, 363, 364, 365, 368, 370, 381, 383, 384, 387, 388, 389, 400, 406, 409, 410, 412, 418, 424, 427, 428, 429, 431, 434, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "build": [5, 34, 69, 71, 75, 108, 385, 411, 412, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "valu": [5, 71, 77, 82, 83, 88, 92, 93, 118, 166, 175, 180, 185, 262, 292, 340, 344, 389, 404, 426, 427, 429], "string": [5, 62, 76, 82, 83, 92, 102, 105, 259, 292, 319, 344, 345, 346, 347, 348, 424, 434, 440, 445, 448, 461, 464, 465, 467, 469, 472, 475, 478, 479, 480, 481], "buffer": [5, 7, 47, 61, 99, 132, 258, 299, 320, 475, 480], "boolean": [6, 92, 292, 344, 429, 464], "protocol": [7, 10, 35, 39, 46, 47, 48, 52, 73, 91, 97, 132, 166, 222, 241, 247, 256, 305, 335, 341, 385, 387, 431, 475, 477, 478, 480], "structur": [7, 15, 61, 99, 166, 175, 231, 273, 385, 393, 428, 434, 471], "request": [7, 338, 392, 394, 478], "type": [7, 8, 34, 56, 59, 60, 61, 62, 73, 74, 92, 93, 97, 101, 105, 118, 175, 180, 182, 210, 255, 276, 289, 292, 299, 340, 344, 368, 374, 384, 385, 404, 406, 409, 427, 463, 464, 465, 466, 467, 471, 472, 475, 476, 477, 478, 479, 480, 481], "independ": [7, 465], "field": [7, 175, 180, 471], "readon": 7, "format": [7, 98, 99, 174, 182, 246, 268, 271, 283, 299, 344, 345, 347, 357, 420, 434, 445, 451, 467, 468, 469, 470, 477, 478], "shape": [7, 383], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 383, 426], "complex": [7, 15, 104, 154, 344, 389, 471], "array": [7, 8, 83, 119, 147, 175, 262, 471, 475, 478], "numpi": 7, "style": [7, 83, 99, 227, 230, 344, 360, 375, 440, 466], "pil": 7, "relat": [7, 106, 150, 250, 343, 431, 463, 466, 467, 471, 472], "function": [7, 8, 14, 25, 27, 44, 56, 62, 71, 77, 83, 88, 91, 92, 93, 97, 102, 104, 118, 120, 150, 154, 162, 168, 171, 175, 180, 190, 225, 231, 251, 255, 259, 261, 267, 268, 275, 282, 288, 299, 318, 319, 323, 337, 340, 345, 348, 352, 383, 384, 387, 389, 399, 418, 426, 429, 440, 461, 462, 465, 466, 467, 469, 472, 475, 477, 478, 479], "byte": [8, 9, 105, 162, 175, 344, 347, 393, 434, 467, 477], "check": [8, 83, 101, 192, 250, 292, 319, 389, 406, 427, 481], "macro": [8, 34, 56], "direct": [8, 125, 192, 250, 284, 385, 462], "call": [10, 71, 77, 83, 88, 93, 175, 214, 292, 306, 388, 389, 429, 472, 477, 480], "tp_call": 10, "vectorcal": [10, 480], "capsul": [11, 468], "cell": [12, 176], "code": [13, 32, 34, 83, 88, 105, 106, 112, 118, 125, 156, 158, 182, 246, 250, 255, 344, 366, 387, 399, 440, 460, 464, 472, 474, 475, 476, 477, 481], "codec": [14, 62, 157, 464, 471, 474, 475, 476], "registri": [14, 157, 404, 460], "support": [14, 28, 32, 40, 44, 49, 62, 73, 74, 92, 93, 99, 100, 101, 105, 127, 149, 155, 166, 168, 169, 171, 210, 229, 233, 237, 256, 278, 306, 312, 341, 357, 361, 370, 385, 388, 411, 412, 413, 424, 461, 464, 467, 476, 477, 478, 479, 480, 481], "lookup": [14, 44, 91, 427], "for": [14, 60, 62, 71, 82, 83, 86, 90, 98, 99, 100, 105, 118, 125, 149, 154, 155, 160, 168, 175, 176, 177, 178, 189, 210, 227, 233, 242, 250, 253, 258, 261, 263, 266, 267, 284, 289, 292, 299, 300, 319, 323, 328, 333, 338, 340, 341, 343, 361, 377, 383, 384, 385, 389, 399, 405, 406, 411, 412, 413, 414, 415, 426, 427, 429, 431, 440, 460, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481], "unicod": [14, 23, 62, 105, 157, 357, 386, 461, 463, 464, 469, 474, 475], "encod": [14, 62, 105, 157, 197, 258, 262, 317, 393, 434, 447, 464, 471, 478], "error": [14, 23, 71, 83, 106, 125, 157, 185, 187, 198, 281, 292, 314, 392, 442, 443, 464, 471, 472], "handler": [14, 82, 98, 99, 106, 125, 140, 157, 213, 267, 269, 333, 338, 368, 406, 414], "number": [15, 46, 61, 82, 83, 106, 154, 168, 220, 262, 275, 289, 293, 448, 467, 471], "as": [15, 88, 96, 98, 99, 168, 259, 347, 354, 388, 426, 466, 467, 472, 475, 480], "concret": [16, 212, 296, 385], "context": [17, 99, 134, 168, 169, 185, 192, 212, 246, 283, 340, 341, 344, 385, 389, 399, 427, 465, 466, 467, 471, 475], "variabl": [17, 32, 83, 88, 98, 120, 168, 169, 175, 180, 234, 292, 293, 354, 368, 454, 460, 468, 471, 478], "coroutin": [19, 138, 255, 384, 426, 427, 477], "datetim": [20, 182, 472, 474, 475, 478, 479, 480, 481], "descriptor": [21, 91, 125, 180, 187, 213, 293, 388, 427, 463, 476, 478], "print": [23, 77, 118, 292, 380, 467, 469], "clear": 23, "rais": [23, 83, 98, 292, 389, 435], "except": [23, 71, 83, 98, 99, 106, 165, 168, 192, 198, 212, 259, 319, 333, 389, 424, 426, 442, 466, 467, 468, 469, 472, 475], "issu": [23, 97, 213, 357, 460, 467], "warn": [23, 192, 267, 361, 399, 424, 462, 468, 472, 478, 479], "queri": [23, 292, 293, 332, 340], "indic": 23, "signal": [23, 82, 125, 185, 213, 333, 387, 475, 477, 479, 481], "handl": [23, 99, 106, 125, 134, 176, 193, 242, 272, 285, 292, 299, 341, 387, 404, 464, 467, 468, 476, 477], "recurs": 23, "control": [23, 28, 74, 83, 120, 340, 360, 383, 399, 402], "standard": [23, 34, 83, 108, 157, 188, 211, 254, 262, 292, 344, 375, 384, 410, 427, 431, 464, 481], "categori": [23, 240, 399], "file": [24, 34, 62, 77, 82, 83, 88, 98, 99, 101, 105, 108, 118, 125, 149, 166, 174, 187, 188, 192, 213, 215, 233, 234, 246, 250, 251, 258, 268, 270, 272, 278, 282, 286, 293, 304, 306, 311, 320, 332, 353, 357, 368, 374, 400, 412, 421, 436, 450, 455, 460, 464, 474, 476, 477, 478, 479, 480], "float": [25, 185, 344, 434, 465], "point": [25, 92, 185, 251, 434], "pack": [25, 347], "unpack": [25, 407, 440, 477], "frame": [26, 381, 472, 478], "cyclic": [28, 74], "garbag": [28, 74, 97, 226, 461], "collect": [28, 74, 97, 159, 160, 190, 385, 461, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481], "collector": [28, 226], "state": [28, 32, 97, 213, 243, 255, 283, 299, 375, 383], "initi": [32, 33, 44, 71, 353, 477, 480], "final": [32, 73, 168, 401, 426, 466, 476, 482], "thread": [32, 82, 99, 113, 125, 138, 185, 258, 267, 333, 361, 364, 368, 451, 471, 472, 473, 474, 475, 476, 477, 479, 480], "befor": 32, "global": [32, 82, 83, 97, 299, 424, 435], "configur": [32, 33, 98, 99, 108, 166, 268, 334, 344, 354, 383, 424, 455, 468, 474, 480], "interpret": [32, 82, 97, 155, 156, 179, 255, 342, 347, 384, 420, 463, 466, 467, 468, 472], "process": [32, 57, 97, 99, 125, 131, 180, 273, 283, 284, 286, 293, 341, 362, 461, 467], "wide": 32, "paramet": [32, 71, 83, 88, 99, 174, 175, 180, 293, 352, 368, 440, 471, 480], "lock": [32, 82, 137, 364, 475], "releas": [32, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "gil": 32, "from": [32, 71, 77, 82, 83, 91, 97, 98, 99, 138, 154, 168, 175, 205, 217, 282, 348, 383, 389, 421, 422, 460, 464, 467], "extens": [32, 56, 69, 71, 73, 74, 75, 77, 97, 108, 109, 178, 246, 266, 302, 455, 475, 477], "non": [32, 102, 103, 108, 262, 341, 412, 476], "creat": [32, 59, 62, 77, 82, 83, 92, 93, 96, 99, 103, 118, 125, 138, 205, 234, 261, 292, 337, 389, 398, 420, 427, 476], "caution": 32, "about": [32, 83, 151, 192, 461, 472], "fork": 32, "high": [32, 64, 70, 258, 329, 332, 348], "level": [32, 44, 64, 70, 98, 99, 102, 112, 113, 151, 258, 259, 262, 267, 328, 329, 332, 337, 348, 436, 477], "low": [32, 44, 113, 337], "sub": [32, 61, 118], "caveat": [32, 55, 266, 420], "asynchron": [32, 333, 338, 385, 389, 427, 429, 478], "notif": [32, 91], "profil": [32, 100, 308], "trace": [32, 379, 381], "advanc": [32, 87, 88, 98, 192, 467], "debugg": [32, 144, 297], "local": [32, 62, 229, 266, 364, 460, 465, 471, 472, 477, 478, 479], "storag": [32, 479], "specif": [32, 73, 93, 157, 334, 345, 352, 375, 383, 404, 464, 465, 466, 467, 468, 471], "tss": 32, "dynam": [32, 91, 175, 384, 428], "method": [32, 43, 56, 62, 71, 74, 76, 77, 82, 83, 91, 92, 97, 102, 118, 125, 168, 172, 239, 283, 288, 292, 296, 337, 340, 344, 383, 388, 389, 401, 409, 427, 429, 439, 445, 461, 465, 466, 469, 475, 477, 478, 479, 481], "tls": [32, 125, 341], "pywidestringlist": 33, "pystatus": 33, "pypreconfig": 33, "preiniti": 33, "with": [33, 69, 76, 77, 82, 83, 90, 92, 95, 96, 97, 99, 125, 136, 157, 168, 175, 185, 213, 231, 242, 255, 258, 267, 299, 331, 332, 340, 348, 364, 376, 389, 401, 412, 420, 421, 423, 426, 427, 428, 466, 467, 471, 472, 475, 477, 479, 480], "pyconfig": 33, "isol": [33, 97], "path": [33, 108, 250, 294, 296, 353, 354, 421, 431, 460, 471, 478, 480], "py_runmain": 33, "py_getargcargv": 33, "multi": [33, 44, 258, 341, 451, 465, 474, 477], "phase": [33, 44, 477], "privat": [33, 127], "provision": [33, 475], "includ": 34, "use": [34, 75, 77, 82, 83, 88, 92, 96, 98, 99, 101, 102, 103, 108, 151, 162, 168, 195, 234, 251, 270, 279, 282, 283, 296, 308, 314, 340, 348, 354, 361, 364, 374, 375, 376, 383, 387, 389, 394, 424, 427, 454, 466, 467, 475, 480], "refer": [34, 61, 71, 73, 83, 93, 105, 175, 283, 292, 308, 340, 368, 401, 406, 412, 429, 431, 451, 462], "count": [34, 71], "detail": [34, 96, 160, 182, 266, 268], "debug": [34, 41, 77, 93, 125, 151, 192, 246, 454, 455, 468, 471, 480], "iter": [35, 36, 83, 92, 93, 203, 217, 259, 261, 344, 387, 389, 427, 429, 439, 463, 465, 469, 477], "list": [37, 76, 83, 93, 96, 147, 320, 344, 429, 440, 441, 448, 451, 461, 467, 469], "map": [39, 61, 62, 166, 251, 276, 278, 344, 409, 426], "data": [40, 74, 82, 83, 92, 93, 98, 101, 103, 105, 106, 145, 175, 180, 210, 270, 285, 298, 299, 307, 317, 347, 364, 368, 424, 427, 451, 460, 465, 469, 472, 480], "marshal": [40, 274, 299, 476], "domain": [41, 157], "raw": [41, 62, 258, 319], "memori": [41, 270, 278, 284, 341, 344, 381, 476, 477], "interfac": [41, 55, 76, 77, 82, 96, 151, 183, 189, 209, 226, 233, 255, 258, 259, 262, 293, 300, 311, 320, 334, 337, 340, 357, 361, 366, 368, 379, 387, 394, 405, 415, 421, 454, 474], "default": [41, 83, 88, 118, 180, 292, 340, 341, 388, 399, 421, 460, 468, 476], "custom": [41, 88, 91, 92, 98, 99, 108, 118, 127, 131, 166, 175, 179, 202, 259, 268, 270, 283, 299, 308, 340, 345, 427, 460, 476, 478, 479], "hook": [41, 250, 320, 334, 431, 462, 464, 480], "pymalloc": [41, 464], "arena": 41, "tracemalloc": [41, 381, 476, 478, 479, 481], "memoryview": [42, 344, 468, 475], "instanc": [43, 83, 91, 92, 96, 180, 196, 299, 344, 427], "modul": [44, 71, 77, 82, 83, 90, 93, 96, 97, 98, 99, 102, 104, 151, 167, 180, 229, 250, 258, 259, 267, 279, 283, 296, 299, 306, 308, 312, 324, 340, 348, 353, 368, 387, 422, 427, 431, 449, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "singl": [44, 82, 99, 168], "creation": [44, 96, 293, 338, 341, 384, 398, 427, 478], "none": [45, 82], "implement": [49, 56, 77, 82, 99, 125, 168, 183, 250, 262, 289, 321, 406, 410, 427, 433, 472, 475, 476, 478, 479], "reflect": 51, "sequenc": [52, 58, 61, 83, 344, 348, 426, 441], "set": [53, 125, 131, 194, 246, 250, 333, 341, 344, 368, 383, 389, 429, 441, 460, 464, 465], "ellipsi": [54, 344], "stabil": [55, 104], "stabl": [55, 471, 474], "applic": [55, 82, 90, 91, 99, 157, 229, 239, 246, 420, 460, 466, 477], "binari": [55, 82, 83, 101, 103, 109, 145, 146, 157, 258, 344, 347, 418, 429, 451], "limit": [55, 97, 262, 322, 344, 421, 460], "scope": [55, 97, 439, 462, 463], "perform": [55, 82, 83, 102, 258, 299, 455, 469, 475], "platform": [55, 108, 257, 303, 332, 375, 462, 471, 479], "consider": [55, 112, 143, 244, 268, 327, 341, 348, 431], "content": [55, 180, 196, 306, 314], "of": [55, 56, 77, 82, 83, 86, 88, 91, 92, 93, 96, 97, 98, 99, 101, 108, 149, 166, 168, 180, 182, 183, 187, 238, 250, 255, 259, 279, 283, 293, 299, 332, 333, 344, 348, 353, 356, 366, 381, 383, 385, 389, 398, 399, 418, 421, 427, 428, 434, 455, 460, 461, 468, 469, 475, 476, 477, 478, 479, 480], "base": [56, 83, 99, 108, 114, 132, 156, 157, 160, 183, 212, 229, 250, 253, 258, 283, 289, 364, 385, 406, 414, 431, 467, 468, 474, 479], "access": [56, 62, 77, 82, 86, 92, 97, 166, 175, 249, 265, 266, 268, 284, 296, 351, 354, 365, 404, 418, 427, 463, 479], "attribut": [56, 73, 74, 83, 90, 91, 92, 99, 255, 267, 292, 293, 344, 388, 389, 415, 427, 429, 431, 462, 463, 478, 479], "tupl": [58, 76, 77, 83, 159, 344, 441], "struct": [58, 347, 475, 476, 478], "hint": [60, 266, 385, 471, 472, 477, 481], "quick": [61, 118, 166, 185, 388], "tp": 61, "slot": [61, 62, 97], "typedef": 61, "pytypeobject": 61, "definit": [61, 91, 111, 120, 238, 259, 426, 439, 478], "pyobject": 61, "pyvarobject": 61, "static": [61, 83, 91, 95, 97, 101, 255, 406, 472], "async": [61, 120, 426, 477], "charact": [62, 102, 176, 177, 194, 262, 347], "properti": [62, 91, 105, 182, 296, 467], "system": [62, 70, 77, 151, 211, 214, 293, 306, 313, 348, 352, 421, 431, 455, 462, 475, 476, 477, 478], "wchar_t": 62, "built": [62, 93, 344, 384, 385, 461, 465, 479], "in": [62, 70, 71, 75, 77, 82, 83, 86, 88, 93, 98, 99, 101, 105, 112, 125, 138, 157, 168, 175, 180, 192, 246, 258, 270, 271, 291, 292, 296, 340, 344, 364, 384, 385, 409, 427, 460, 461, 462, 465, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481], "generic": [62, 73, 344, 385, 427, 454, 472, 479, 481], "utf": [62, 157, 293, 460, 478, 479], "32": 62, "16": 62, "escap": 62, "latin": 62, "ascii": [62, 146, 177, 393], "mbcs": [62, 157], "window": [62, 75, 84, 90, 108, 130, 157, 176, 188, 246, 303, 348, 368, 383, 403, 404, 405, 420, 460, 464, 467, 468, 472, 475, 478, 479, 482], "veri": [64, 70], "setuptool": 69, "app": 70, "embed": [70, 77, 353, 461], "beyond": [70, 118], "an": [70, 71, 77, 82, 83, 86, 91, 99, 105, 134, 168, 182, 193, 195, 204, 250, 262, 348, 389, 398, 412, 460, 468], "overview": [70, 91, 251, 383, 426, 469], "pure": [70, 91, 296], "extend": [70, 77, 83, 127, 251, 292, 293, 398, 461, 464], "compil": [70, 71, 77, 102, 108, 120, 158, 162, 311, 351, 424, 455, 480], "link": [70, 118, 175, 463], "under": 70, "unix": [70, 75, 82, 108, 125, 151, 172, 183, 219, 230, 303, 355, 390, 459], "like": [70, 99, 231], "intermezzo": 71, "tabl": [71, 281, 299, 351, 378], "linkag": 71, "extract": [71, 77, 421], "keyword": [71, 83, 180, 263, 434, 440, 471, 477, 478], "arbitrari": [71, 77, 98, 292, 440, 472], "ownership": 71, "rule": [71, 331, 333, 463], "thin": 71, "ice": 71, "null": [71, 88, 344], "pointer": [71, 175], "write": [71, 77, 82, 83, 88, 105, 127, 132, 174, 270, 319, 340, 357, 361, 400, 466, 467], "provid": [71, 74, 98, 299, 354], "cpython": [72, 76, 95, 471, 472, 473, 476, 478, 479, 480, 481], "runtim": [72, 84, 282, 315, 424, 472, 479, 480], "defin": [73, 74, 83, 88, 96, 97, 268, 292, 385, 471, 474], "assort": 73, "topic": [73, 88], "de": [73, 149], "present": [73, 469], "manag": [73, 91, 97, 99, 134, 168, 169, 196, 243, 283, 293, 340, 344, 348, 368, 374, 385, 389, 399, 420, 427, 466, 467, 471], "comparison": [73, 92, 96, 104, 215, 259, 299, 344, 429, 462, 469], "weak": [73, 401, 451, 462], "more": [73, 87, 90, 96, 99, 102, 289, 383, 389], "suggest": 73, "tutori": [74, 91, 98, 175, 185, 292, 340, 412], "basic": [74, 88, 106, 139, 192, 296, 374, 419, 427], "adding": [74, 99, 289, 292, 468, 475, 478], "to": [74, 77, 82, 83, 88, 92, 97, 98, 99, 100, 101, 105, 154, 183, 189, 231, 250, 251, 259, 265, 266, 268, 276, 293, 296, 299, 308, 340, 348, 351, 354, 368, 383, 385, 388, 389, 397, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "exampl": [74, 91, 99, 121, 139, 155, 160, 166, 168, 182, 187, 189, 192, 199, 239, 279, 292, 319, 332, 343, 345, 380, 389, 394, 398, 418], "finer": [74, 92, 475], "over": [74, 83, 217], "subclass": [74, 83, 92, 99, 242, 321, 389, 427], "other": [74, 77, 82, 83, 92, 96, 98, 99, 118, 138, 259, 282, 292, 299, 337, 344, 385, 434, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "cookbook": [75, 99], "approach": [75, 469, 471], "differ": [75, 83, 92, 189, 234, 381, 383], "between": [75, 83, 105, 146, 283, 292, 343, 434], "dlls": [75, 175], "practic": [75, 83, 86, 91, 326], "self": [76, 83, 88, 341, 472, 480], "express": [76, 77, 88, 93, 102, 105, 120, 319, 429, 435, 436, 465, 466, 480], "index": [76, 83, 368, 464, 466], "len": 76, "join": [76, 434], "switch": [76, 475], "case": [76, 97, 387, 426, 462], "lambda": [76, 83, 93, 429, 440], "dictionari": [76, 99, 268, 389, 429, 441, 468, 470, 474, 475, 481], "sort": [76, 83, 104], "spec": [76, 431], "goto": 76, "generat": [76, 82, 88, 93, 200, 255, 292, 304, 313, 341, 344, 351, 361, 389, 429, 439, 463, 464, 465, 466, 477, 478], "if": [76, 83, 98, 182, 250, 426, 440], "while": [76, 426], "def": 76, "class": [76, 77, 83, 88, 91, 92, 97, 99, 114, 118, 120, 156, 157, 160, 165, 180, 198, 212, 215, 229, 250, 253, 255, 258, 281, 283, 289, 299, 308, 312, 316, 329, 344, 347, 383, 384, 385, 387, 388, 389, 394, 406, 414, 424, 426, 427, 434, 439, 463, 466, 467, 471, 472, 475, 478], "faq": [77, 185, 472], "can": [77, 82, 83, 250, 299, 472], "my": [77, 82, 83], "own": [77, 175], "is": [77, 82, 83, 90, 98, 112, 182, 308, 465, 469], "hard": 77, "are": [77, 82, 83, 92, 192, 292, 476], "there": [77, 82, 83], "ani": [77, 82, 86, 168, 385, 388], "altern": [77, 99, 108, 321, 433, 460], "how": [77, 82, 83, 88, 92, 99, 100, 108, 192, 292, 340, 368, 383, 398], "execut": [77, 125, 163, 192, 246, 324, 333, 361, 366, 379, 420, 427, 428, 460, 466], "statement": [77, 111, 120, 168, 364, 379, 426, 427, 435, 466, 467], "evalu": [77, 429, 478, 479], "do": [77, 82, 83, 368], "py_buildvalu": 77, "length": [77, 234, 344], "catch": [77, 168], "output": [77, 82, 83, 88, 99, 246, 332, 451], "pyerr_print": 77, "or": [77, 82, 83, 99, 118, 125, 175, 182, 344, 348, 379, 380, 426, 440, 472], "anyth": 77, "that": [77, 83, 91, 92, 93, 99, 266], "stdout": [77, 82], "stderr": [77, 82], "written": 77, "added": [77, 468], "setup": [77, 101], "make": [77, 83, 97, 101, 319, 420, 461, 468, 477, 478], "fail": [77, 96, 477], "whi": [77, 82, 83, 465], "want": [77, 83], "linux": [77, 100, 109, 293, 303, 459], "but": [77, 83], "some": 77, "miss": 77, "tell": [77, 383], "incomplet": [77, 175], "input": [77, 82, 90, 176, 188, 217, 343, 377, 383, 436], "invalid": [77, 118, 431], "find": [77, 82, 83, 175, 279, 319, 412, 460], "undefin": 77, "symbol": [77, 88, 211, 351], "__builtin_new": 77, "__pure_virtu": 77, "through": 77, "inherit": [77, 180, 293, 383, 439, 463, 476], "beta": [78, 482], "www": [78, 82], "org": [78, 460], "monti": 78, "gui": [79, 99, 281, 367, 458], "tkinter": [79, 188, 246, 368, 369, 370, 371, 372, 373, 374, 375, 472, 477, 478, 479, 480], "tk": [79, 367, 368, 374, 375, 468], "key": [79, 104, 234, 246, 283, 341, 471, 475], "bind": [79, 246, 340, 368, 428], "task": [82, 123, 125, 127, 138], "math": [82, 275, 472, 474, 475, 477, 478, 479, 480, 481], "py": [82, 101, 112, 472], "socket": [82, 99, 103, 106, 121, 125, 132, 135, 139, 337, 341, 361, 425, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "regex": 82, "script": [82, 83, 151, 279, 354, 383, 460, 466], "curs": [82, 90, 176, 177, 178, 471, 475, 477, 480, 481], "termcap": 82, "packag": [82, 112, 193, 251, 302, 361, 431, 449, 460, 462, 464, 466, 467, 475], "equival": [82, 83, 91], "onexit": 82, "don": [82, 83], "work": [82, 83, 108, 125, 185, 192, 258, 340, 398, 421], "document": [82, 93, 200, 313, 409, 412, 419, 440, 467, 468, 475, 476, 480, 482], "doc": 82, "get": [82, 83, 87, 96, 131, 381, 389], "keypress": [82, 84], "at": 82, "time": [82, 98, 99, 182, 365, 366, 424, 464, 472, 474, 475, 477, 478, 479, 480, 481], "program": [82, 83, 90, 103, 105, 134, 176, 229, 266, 283, 368, 385, 428, 436], "seem": 82, "run": [82, 99, 125, 134, 138, 246, 361, 387, 460], "parcel": 82, "out": [82, 97, 299, 480], "among": 82, "bunch": 82, "worker": [82, 283], "what": [82, 83, 90, 98, 112, 192, 292, 299, 308, 368, 461, 473], "kind": [82, 91], "mutat": 82, "safe": [82, 97, 476], "we": 82, "rid": 82, "delet": [82, 83, 388, 461], "question": 82, "copi": [82, 83, 170, 332], "read": [82, 97, 105, 125, 132, 174, 270, 357, 400], "os": [82, 212, 293, 294, 296, 348, 361, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pipe": [82, 125, 283, 301], "popen": [82, 348, 474], "serial": [82, 299, 424], "rs232": 82, "port": [82, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "doesn": 82, "close": [82, 91], "sys": [82, 118, 352, 353, 471, 472, 475, 476, 477, 478, 479, 480, 481], "stdin": 82, "realli": 82, "it": [82, 83, 106, 192, 292], "network": [82, 96, 99, 125, 259, 260, 337, 338, 468], "internet": [82, 256, 285, 346], "tool": [82, 258, 273, 296, 300, 361, 406, 468, 471, 473, 480, 482], "mimic": 82, "cgi": [82, 151, 152, 477], "form": [82, 374, 385, 429], "submiss": 82, "post": [82, 180], "should": [82, 97, 481], "help": [82, 118, 246, 292, 313, 383], "html": [82, 237, 238, 239, 474, 475, 476], "send": [82, 99], "mail": 82, "avoid": [82, 99], "block": [82, 99, 101, 103, 341, 381, 412, 426, 469], "connect": [82, 125, 132, 268, 283, 337, 340], "databas": [82, 183, 232, 281, 310, 340, 386], "you": [82, 83, 101, 454, 481], "persist": [82, 298, 299, 330], "mathemat": [82, 154], "numer": [82, 289, 344, 427, 434, 478], "random": [82, 234, 265, 293, 318, 341, 474, 478, 481], "stand": 83, "alon": 83, "guid": [83, 292, 340, 388], "core": [83, 118, 258, 461, 479, 482], "languag": [83, 229, 237, 264, 345, 383, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "unboundlocalerror": 83, "loop": [83, 125, 127, 132, 261], "all": [83, 283, 292, 319, 381, 389, 468, 477, 478], "return": [83, 88, 91, 175, 389, 435, 460], "same": [83, 99, 389, 480], "result": [83, 100, 342, 393], "share": [83, 175, 283, 284, 475], "across": [83, 99, 284], "best": [83, 86, 100, 326, 341], "import": [83, 112, 120, 210, 249, 250, 251, 267, 268, 269, 361, 368, 389, 422, 431, 435, 449, 462, 464, 465, 466, 467, 472, 475, 476], "pass": [83, 93, 99, 175, 435, 440], "option": [83, 87, 88, 101, 118, 192, 227, 233, 246, 262, 292, 300, 357, 368, 375, 379, 421, 454, 455, 471, 478], "one": [83, 97, 149], "anoth": 83, "did": 83, "chang": [83, 88, 97, 98, 229, 383, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "also": 83, "by": [83, 88, 175, 279, 394, 468, 476], "higher": [83, 151, 225], "order": [83, 175, 180, 225, 292, 347, 389, 429, 468, 469, 470, 478], "discov": 83, "name": [83, 91, 92, 102, 108, 118, 157, 210, 262, 293, 384, 388, 389, 427, 428, 429, 464, 475], "up": [83, 106, 108, 168, 250], "comma": [83, 464], "oper": [83, 93, 104, 225, 231, 242, 259, 282, 289, 291, 293, 296, 319, 332, 341, 344, 345, 429, 434, 463, 469, 471, 472, 475, 476, 477, 481], "preced": [83, 429], "ternari": 83, "possibl": 83, "obfusc": 83, "liner": 83, "doe": [83, 368], "slash": 83, "mean": 83, "specifi": [83, 87, 88, 101, 175, 270, 420, 468, 470], "hexadecim": 83, "octal": 83, "integ": [83, 259, 344, 434, 463, 465, 467, 469], "22": 83, "10": [83, 86, 381, 471, 478, 479, 482], "int": [83, 344], "liter": [83, 105, 120, 426, 429, 434, 445, 467, 471, 472, 475, 478], "instead": [83, 88, 101, 469], "syntaxerror": [83, 471], "convert": [83, 88, 105, 146, 340, 348], "modifi": [83, 102, 108, 379, 412, 460], "place": [83, 291], "perl": 83, "chomp": 83, "remov": [83, 460, 466, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481], "trail": 83, "newlin": [83, 464], "scanf": [83, 319], "sscanf": 83, "unicodedecodeerror": 83, "unicodeencodeerror": 83, "too": 83, "slow": 83, "speed": 83, "most": [83, 306], "effici": [83, 261, 332], "way": 83, "concaten": [83, 434], "mani": 83, "togeth": [83, 292], "negat": 83, "revers": [83, 465], "duplic": [83, 92], "multipl": [83, 97, 98, 99, 217, 388, 389, 463, 477], "item": [83, 375, 472], "multidimension": 83, "appli": [83, 389], "a_tupl": 83, "when": [83, 92, 96, 103], "addit": [83, 206, 344, 384, 460, 477], "complic": 83, "schwartzian": 83, "transform": [83, 157, 472], "given": 83, "deleg": [83, 475], "deriv": [83, 92, 234], "organ": [83, 387], "easier": 83, "overload": 83, "constructor": [83, 127, 229, 348], "tri": [83, 168, 426, 466], "__spam": 83, "_someclassname__spam": 83, "__del__": [83, 401], "not": [83, 344, 383, 472], "id": [83, 365], "appear": [83, 383], "be": [83, 250, 299, 472], "uniqu": [83, 92], "reli": 83, "ident": [83, 429], "test": [83, 93, 151, 192, 263, 341, 361, 387, 389, 399, 429, 477, 482], "store": [83, 292, 460], "immut": [83, 344], "cach": [83, 431, 480], "pyc": [83, 474, 479], "current": [83, 125, 255, 381], "have": 83, "mutual": [83, 118], "each": 83, "__import__": 83, "edit": [83, 246, 446], "reimport": 83, "show": [83, 479], "this": [83, 97], "happen": [83, 98], "pyd": 84, "dll": 84, "tab": [84, 375, 446], "ms": [84, 282, 403], "win": 84, "crt": 84, "l1": 84, "annot": [86, 344, 435, 440, 478, 479], "dict": [86, 99, 344, 388, 389, 478], "newer": 86, "older": [86, 108, 348], "manual": [86, 169, 308, 341, 368], "un": 86, "stringiz": 86, "__annotations__": 86, "version": [86, 96, 101, 108, 251, 292, 341, 399, 460, 473, 474], "quirk": 86, "argpars": [87, 118, 468, 471, 474, 476, 477, 479], "short": 87, "littl": 87, "ambigu": [87, 356], "conflict": [87, 292], "clinic": [88, 476], "goal": 88, "concept": [88, 368], "usag": [88, 112, 118, 120, 182, 192, 246, 279, 300, 322, 377, 379, 418, 475], "your": [88, 99, 101, 151, 175, 229, 292, 389, 481], "first": 88, "renam": 88, "pyarg_unpacktupl": 88, "group": [88, 93, 102, 118, 138, 212, 232, 292, 387, 426, 472], "real": 88, "legaci": [88, 166, 348, 394, 479], "py_buff": 88, "clone": 88, "exist": [88, 132, 389], "meth_o": 88, "meth_noarg": 88, "tp_new": 88, "tp_init": 88, "redirect": [88, 460], "ifdef": 88, "trick": [88, 108], "start": [90, 166, 185, 283, 388, 389], "end": [90, 104], "pad": 90, "display": [90, 98, 125, 176, 381, 429, 462], "text": [90, 101, 157, 176, 192, 246, 258, 265, 319, 344, 362, 363, 373, 409, 469], "color": [90, 246, 369, 383], "user": [90, 108, 213, 246, 268, 308, 385, 467, 471], "inform": [90, 99, 281, 293, 322, 354], "howto": [91, 92, 93, 103, 105], "primer": 91, "simpl": [91, 102, 192, 234, 239, 331, 406, 435, 463, 464, 471], "constant": [91, 176, 278, 314, 340, 345, 348, 365, 376, 404], "thought": 91, "complet": [91, 246, 320, 323, 328, 436, 446], "valid": [91, 406], "technic": [91, 182], "introduct": [91, 105, 308], "invoc": [91, 348], "super": 91, "summari": [91, 281, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "logic": [91, 185, 259, 434], "automat": [91, 92, 246], "orm": 91, "member": [91, 92, 255], "__slots__": [91, 427, 471], "enum": [92, 210, 471, 472, 476, 477, 478, 479], "programmat": [92, 250, 300, 379], "enumer": [92, 210, 464], "their": [92, 319, 389], "ensur": 92, "allow": 92, "restrict": [92, 299, 330, 394, 428], "pickl": [92, 171, 299, 300, 424, 464, 475, 476, 477, 478, 480], "intenum": 92, "strenum": 92, "intflag": 92, "flag": [92, 102, 108, 118, 120, 168, 192, 255, 292, 319, 455], "__new__": 92, "vs": [92, 319, 385, 469], "__init__": [92, 180], "__dunder__": [92, 210], "_sunder_": [92, 210], "_private__nam": 92, "mix": 92, "combin": [92, 341], "minutia": 92, "aka": 92, "omit": 92, "auto": 92, "descript": [92, 160, 314], "orderedenum": 92, "duplicatefreeenum": 92, "planet": 92, "timeperiod": 92, "enumtyp": 92, "formal": 93, "provabl": 93, "modular": 93, "eas": 93, "compos": 93, "comprehens": [93, 120, 441, 461, 478], "into": [93, 99, 383, 393], "itertool": [93, 261, 471, 474, 475, 479, 480], "new": [93, 292, 399, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "element": [93, 409, 412], "select": [93, 99, 188, 328, 341, 425, 474, 475, 476], "combinator": 93, "functool": [93, 225, 472, 474, 475, 476, 477, 479, 480], "small": [93, 366], "revis": 93, "histori": [93, 103, 320, 446], "acknowledg": 93, "general": [93, 150, 238, 292, 296, 333, 455, 477], "instrument": 95, "dtrace": [95, 478], "systemtap": [95, 478], "enabl": [95, 100, 125, 468, 476], "marker": 95, "probe": [95, 478], "avail": [95, 182, 383, 399], "tapset": 95, "ipaddress": [96, 259, 475, 476, 477, 479, 481], "address": [96, 259, 283], "note": [96, 185, 206, 210, 289, 333, 337, 338, 341, 375, 427, 472], "ip": [96, 259], "host": [96, 259], "inspect": [96, 255, 471, 472, 474, 475, 476, 477, 478, 480, 481], "who": 97, "background": [97, 266, 292], "enter": 97, "per": [97, 467], "surpris": [97, 175], "edg": [97, 328], "opt": [97, 258], "regular": [97, 102, 105, 319, 431], "getter": 97, "setter": 97, "lifetim": [97, 127], "open": [97, 99, 106, 125], "lossless": 97, "convers": [97, 154, 175, 259, 275, 344, 365, 378, 429, 465], "log": [98, 99, 267, 268, 269, 283, 451, 464, 468, 472, 474, 475, 476, 477, 478, 479, 480], "messag": [98, 99, 195, 204, 206, 229, 234, 266, 271, 372, 471], "date": [98, 125, 182, 464], "next": [98, 482], "step": [98, 455], "flow": [98, 120], "logger": [98, 99, 267], "formatt": [98, 99, 267], "no": [98, 476], "librari": [98, 99, 110, 162, 175, 254, 259, 355, 388, 455, 467, 469, 482], "dure": 98, "optim": [98, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "resourc": [98, 99, 252, 253, 322, 421, 475, 476, 479], "destin": 99, "server": [99, 125, 132, 139, 244, 338, 341, 406, 418, 419, 474, 479], "deal": 99, "receiv": 99, "event": [99, 125, 127, 137, 325, 333, 364, 368, 375, 383], "listen": [99, 283], "product": 99, "contextu": 99, "loggeradapt": [99, 267], "impart": 99, "than": 99, "filter": [99, 267, 270, 379, 381, 399], "contextvar": [99, 169, 479], "concurr": [99, 124, 138, 163, 164, 165, 474, 477, 478, 479, 481], "futur": [99, 111, 125, 127, 128, 165, 435, 468, 472, 473, 474, 477, 478, 479, 481], "processpoolexecutor": [99, 165], "deploy": 99, "web": [99, 242, 402, 474], "gunicorn": 99, "uwsgi": 99, "rotat": 99, "logrecord": [99, 267], "queuehandl": [99, 268, 269], "zeromq": 99, "queuelisten": [99, 268, 269], "namer": 99, "elabor": 99, "multiprocess": [99, 283, 284, 467, 475, 476, 477, 478, 479, 480, 481], "insert": 99, "bom": [99, 157], "sent": 99, "sysloghandl": [99, 269], "dictconfig": 99, "particular": 99, "throughout": 99, "factori": [99, 180, 259], "speak": 99, "them": 99, "condit": [99, 137, 292, 364, 429, 441, 466], "email": [99, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 474, 475, 476, 477, 478], "utc": 99, "gmt": 99, "via": [99, 460], "cli": 99, "starter": 99, "templat": [99, 188, 301, 345, 451], "qt": 99, "syslog": [99, 355], "rfc5424": 99, "treat": 99, "stream": [99, 123, 132, 157, 217, 258, 299], "pattern": [99, 102, 120, 219, 230, 426, 427, 471], "nullhandl": [99, 269], "lot": 99, "perf": 100, "mode": [100, 125, 185, 187, 234, 293, 454, 460, 468, 479], "obtain": 100, "sure": 101, "proper": 101, "divis": [101, 463], "versus": [101, 102, 427], "featur": [101, 281, 385, 428, 466, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "detect": [101, 356], "prevent": 101, "compat": [101, 331, 375, 423], "regress": [101, 361], "which": [101, 192], "depend": [101, 332, 399], "transit": 101, "updat": [101, 399, 468, 481], "denot": 101, "continu": [101, 175, 435, 440], "integr": [101, 267], "stay": 101, "consid": 101, "match": [102, 118, 120, 219, 319, 389, 426, 427, 440, 471], "repeat": [102, 262], "thing": 102, "backslash": 102, "plagu": 102, "power": [102, 154, 275, 429], "metacharact": 102, "captur": [102, 426], "lookahead": 102, "assert": [102, 389, 435], "split": [102, 108], "search": [102, 108, 246, 251, 319, 353, 431], "replac": [102, 168, 246, 348, 431], "common": [102, 151, 182, 294, 306, 344, 345, 469], "problem": [102, 151], "greedi": 102, "re": [102, 180, 319, 387, 472, 475, 476, 477, 478, 479], "verbos": [102, 389], "feedback": 102, "ipc": 103, "disconnect": 103, "die": 103, "decor": [104, 168, 210, 388, 389, 465, 467], "undecor": 104, "odd": 104, "sourc": [105, 108, 246, 250, 255, 311, 377, 424, 464], "compar": [105, 401], "filenam": [105, 219, 276], "tip": [105, 108, 266], "awar": [105, 182, 477], "unknown": 105, "urllib": [106, 391, 392, 393, 394, 395, 471, 474, 475, 476, 477, 478, 479, 481], "articl": 106, "url": [106, 391, 393, 394], "header": [106, 201, 202, 406, 475], "urlerror": 106, "httperror": 106, "wrap": [106, 363, 368], "info": 106, "geturl": 106, "authent": [106, 283], "proxi": [106, 283, 388], "distutil": [108, 461, 464, 471, 477, 478, 479, 481], "distribut": [108, 251, 318], "instal": [108, 151, 209, 281, 354, 455, 460, 461, 476], "variat": 108, "job": 108, "scheme": 108, "home": 108, "prefix": [108, 118, 259, 481], "locat": [108, 324, 415, 472], "config": [108, 268], "syntax": [108, 118, 120, 319, 345, 412, 442, 467, 469, 471, 475, 477, 478], "tweak": 108, "linker": [108, 455], "microsoft": [108, 281, 460], "borland": 108, "codegear": 108, "gnu": [108, 183, 229, 320, 323], "cygwin": 108, "mingw": 108, "pip": [109, 209, 452, 468, 476], "2to3": 110, "fixer": 110, "lib2to3": 110, "__future__": [111, 462], "__main__": [112, 431, 479], "top": [112, 262, 381, 436], "environ": [112, 293, 353, 398, 406, 424, 454, 460, 468, 475, 477, 478], "__name__": 112, "idiomat": 112, "_thread": [113, 471], "abc": [114, 160, 250, 253, 289, 385, 471, 474, 475, 476, 477, 481], "aifc": [115, 476, 479], "aiff": 115, "parser": [118, 166, 206, 227, 239, 292, 314, 413, 415, 467, 481], "command": [118, 120, 155, 162, 189, 209, 227, 233, 246, 255, 262, 292, 293, 297, 300, 311, 334, 340, 348, 357, 361, 377, 379, 387, 421, 454, 460, 468, 474, 475, 476, 478], "line": [118, 120, 155, 162, 189, 209, 217, 227, 233, 246, 255, 262, 265, 292, 293, 300, 311, 320, 334, 340, 357, 361, 377, 379, 387, 421, 434, 454, 460, 465, 468, 471, 474, 475], "add_argu": 118, "argumentpars": 118, "prog": 118, "epilog": 118, "parent": 118, "formatter_class": 118, "prefix_char": 118, "fromfile_prefix_char": 118, "argument_default": 118, "allow_abbrev": 118, "conflict_handl": 118, "add_help": 118, "exit_on_error": 118, "action": [118, 292], "narg": 118, "const": 118, "choic": 118, "requir": [118, 175, 251, 472], "metavar": 118, "dest": 118, "parse_arg": 118, "contain": [118, 160, 259, 427], "abbrevi": 118, "argv": 118, "namespac": [118, 412, 427, 431, 439, 475], "util": [118, 168, 175, 177, 208, 210, 250, 288, 302, 309, 361, 384, 406, 416], "filetyp": 118, "exclus": 118, "partial": [118, 225, 389, 411, 466], "exit": [118, 140], "intermix": 118, "upgrad": [118, 125], "optpars": [118, 292, 464], "ast": [120, 467, 474, 478, 480, 481], "tree": [120, 234, 376, 411, 412], "grammar": 120, "node": [120, 409], "subscript": [120, 429], "await": [120, 124, 138, 427, 429, 477], "helper": [120, 189, 345, 348, 385, 388], "asynchat": [121, 471, 478], "asyncio": [122, 124, 134, 169, 471, 472, 473, 476, 477, 478, 479, 480, 481], "hello": [122, 125, 368], "world": [122, 125, 368], "queue": [123, 133, 235, 283, 316, 441, 479], "subprocess": [123, 125, 132, 136, 246, 348, 465, 475, 476, 477, 478, 479], "synchron": [123, 137, 283], "multithread": 124, "never": 124, "retriev": [124, 255, 380], "stop": [125, 388], "schedul": [125, 138, 293, 325], "callback": [125, 175, 292, 464], "delay": 125, "transfer": 125, "watch": 125, "dns": 125, "pool": [125, 283], "call_soon": 125, "call_lat": 125, "sigint": 125, "sigterm": 125, "polici": [129, 131, 207, 475], "maco": [130, 246, 303, 455, 481, 482], "watcher": 131, "transport": 132, "hierarchi": [132, 212, 258, 427, 467, 475], "onli": [132, 180, 246, 440, 471, 479, 480], "datagram": 132, "tcp": [132, 135], "echo": [132, 135, 139], "client": [132, 139, 222, 241, 242, 247, 283, 305, 335, 341, 418, 468, 474, 476, 477, 478, 479], "udp": 132, "subprocess_exec": 132, "subprocessprotocol": 132, "prioriti": [133, 235], "lifo": 133, "runner": 134, "keyboard": 134, "interrupt": [134, 421], "streamread": [135, 157], "streamwrit": [135, 157], "http": [135, 139, 240, 241, 242, 243, 244, 406, 468, 474, 475, 476, 477, 478, 479, 481], "interact": [136, 156, 192, 428, 436, 462, 466], "primit": [137, 138, 283, 385], "semaphor": [137, 364], "boundedsemaphor": 137, "barrier": [137, 364], "cancel": 138, "sleep": 138, "shield": 138, "timeout": [138, 213, 337], "wait": [138, 328], "introspect": [138, 255, 385], "asyncor": [139, 471, 474, 478], "atexit": 140, "audioop": [141, 476], "base64": [143, 471, 475, 476], "base16": 143, "base32": 143, "base85": 143, "secur": [143, 151, 234, 244, 268, 327, 341, 348, 455, 468, 476, 482], "bdb": [144, 471], "framework": [144, 338, 462, 475], "servic": [145, 229, 264, 266, 277, 315], "binascii": [146, 475, 478, 479], "bisect": [147, 471], "algorithm": [147, 234, 251, 270, 476], "builtin": [148, 388, 428, 469, 475, 480, 482], "bz2": [149, 475, 477], "bzip2": 149, "compress": [149, 270, 423], "increment": [149, 157, 268], "shot": 149, "calendar": [150, 479], "care": 151, "solut": 151, "cgitb": 152, "traceback": [152, 213, 380, 381, 471, 472, 476, 477, 478], "chunk": 153, "iff": 153, "cmath": [154, 477, 478], "polar": 154, "coordin": 154, "logarithm": [154, 275], "trigonometr": [154, 275], "hyperbol": [154, 275], "classif": 154, "cmd": 155, "orient": [155, 296], "consol": [156, 282, 478], "stateless": 157, "decod": [157, 262, 317], "incrementalencod": 157, "incrementaldecod": 157, "streamreaderwrit": 157, "streamrecod": 157, "idna": 157, "internation": [157, 201, 229, 266], "ansi": 157, "codepag": 157, "utf_8_sig": 157, "signatur": [157, 255, 475], "codeop": 158, "chainmap": 159, "counter": 159, "dequ": 159, "defaultdict": 159, "namedtupl": 159, "ordereddict": 159, "userdict": 159, "userlist": 159, "userstr": 159, "recip": [160, 168, 185, 261, 340, 343], "colorsi": [161, 476], "compileal": [162, 477, 479, 481], "public": [162, 383], "executor": 165, "threadpoolexecutor": 165, "configpars": [166, 474, 477], "datatyp": [166, 464], "fallback": 166, "ini": [166, 460], "interpol": 166, "behaviour": 166, "rawconfigpars": 166, "site": [167, 334, 467, 471, 474, 478], "contextlib": [168, 466, 467, 471, 472, 474, 475, 476, 477, 478, 479], "__enter__": 168, "clean": 168, "reusabl": 168, "reentrant": 168, "shallow": 170, "deep": 170, "copyreg": 171, "regist": [171, 340], "crypt": [172, 475, 479], "hash": [172, 234, 344, 476, 479], "csv": [174, 474, 477, 480], "dialect": 174, "reader": 174, "writer": [174, 266], "ctype": [175, 283, 466, 467, 474, 480], "foreign": 175, "load": [175, 188, 387, 431], "fundament": 175, "prototyp": 175, "union": [175, 344, 471], "align": [175, 347], "bit": [175, 255, 404, 469], "export": 175, "size": [175, 234, 293, 332, 347, 381], "termin": [176, 293, 309, 332], "textpad": 176, "widget": [176, 368, 373, 374, 375, 468], "textbox": 176, "panel": 178, "stack": [178, 255, 380, 441], "dataclass": [180, 471, 472, 479], "init": [180, 320], "frozen": [180, 472], "mutabl": [180, 344, 389], "naiv": 182, "determin": [182, 427], "timedelta": 182, "tzinfo": 182, "timezon": [182, 365], "strftime": 182, "strptime": 182, "dbm": [183, 474, 476, 477, 478, 479], "reinterpret": 183, "ndbm": 183, "dumb": 183, "portabl": 183, "decim": [185, 451, 465, 474, 475, 478, 479], "fix": [185, 292, 462, 463, 464, 468], "arithmet": [185, 259, 289, 429], "operand": 185, "round": 185, "mitig": 185, "off": 185, "increas": 185, "precis": [185, 471], "special": [185, 275, 344, 383, 385, 427, 431, 464, 469, 472], "develop": [187, 246, 300, 461, 467, 479], "effect": [187, 389], "resourcewarn": 187, "bad": 187, "dialog": [188, 369], "simpledialog": 188, "filedialog": 188, "nativ": 188, "save": 188, "commondialog": 188, "difflib": [189, 477], "comput": [189, 381], "delta": 189, "sequencematch": 189, "ndiff": 189, "dis": [190, 473, 474, 476, 479], "bytecod": [190, 361, 431, 471, 472, 473, 478, 479, 480, 481], "analysi": [190, 331, 434], "instruct": 190, "opcod": 190, "doctest": [192, 465, 471, 476, 477], "docstr": [192, 383], "examin": [192, 351], "recogn": 192, "unittest": [192, 387, 388, 389, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480], "doctestfind": 192, "doctestpars": 192, "doctestrunn": 192, "outputcheck": 192, "soapbox": 192, "mime": [193, 196, 200, 205, 276, 317], "charset": 194, "repres": [194, 195, 204], "compat32": 195, "contentmanag": 196, "defect": 198, "headerregistri": 202, "scratch": 205, "feedpars": 206, "miscellan": [208, 270, 283, 293, 374, 454, 469], "ensurepip": [209, 468, 476], "bootstrap": [209, 468, 476], "errno": 211, "faulthandl": [213, 471, 475, 477, 478], "dump": 213, "fault": [213, 418], "after": 213, "fcntl": [214, 472, 481], "ioctl": 214, "filecmp": [215, 476], "directori": [215, 281, 293, 332, 467, 474, 477], "dircmp": 215, "fileinput": [217, 471, 478], "fnmatch": 219, "fraction": [220, 467, 472, 474], "ration": 220, "ftplib": [222, 475, 481], "ftp": [222, 474], "ftp_tls": 222, "callabl": [225, 255, 340, 385, 427], "gc": [226, 471, 475, 476, 479, 480, 481], "getopt": 227, "getpass": 228, "gettext": [229, 479, 480], "multilingu": 229, "nulltransl": 229, "gnutransl": 229, "solari": 229, "catalog": [229, 266], "fli": 229, "defer": 229, "translat": [229, 383], "glob": [230, 471, 476, 477], "pathnam": [230, 294], "expans": 230, "graphlib": [231, 481], "graph": 231, "grp": [232, 478], "gzip": [233, 423, 474, 477, 480], "hashlib": [234, 466, 471, 472, 474, 476, 478, 481], "digest": 234, "shake": 234, "blake2": 234, "person": 234, "credit": 234, "heapq": [235, 477], "hmac": [236, 471, 475, 476, 479], "hypertext": 237, "markup": [237, 273], "entiti": 238, "xhtml": 239, "htmlparser": 239, "status": 240, "httpconnect": 241, "httprespons": 241, "httpmessag": 241, "cookiejar": 242, "cooki": [242, 243, 425], "filecookiejar": 242, "co": 242, "browser": [242, 312, 402], "cookiepolici": 242, "defaultcookiepolici": 242, "morsel": 243, "idl": [246, 461, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482], "menu": 246, "shell": [246, 301, 331, 348], "editor": [246, 456], "menus": 246, "navig": [246, 368], "indent": [246, 356, 434], "calltip": 246, "startup": [246, 320, 472], "failur": [246, 387], "without": [246, 471], "prefer": 246, "idlelib": [246, 471, 472, 476, 477, 478, 479, 480, 481], "imaplib": [247, 474, 475, 477, 481], "imap4": 247, "imghdr": [248, 477], "imp": 249, "intern": [249, 268, 344], "importlib": [250, 251, 252, 253, 431, 468, 471, 475, 476, 477, 478, 479, 481], "machineri": 250, "lazi": [250, 472], "approxim": [250, 477], "import_modul": 250, "metadata": [251, 462, 464, 466, 471], "entri": [251, 427, 431], "discoveri": [251, 387], "live": 255, "fetch": 255, "webassembl": [257, 455], "io": [258, 474, 475, 477, 479, 480], "encodingwarn": [258, 471], "reentranc": 258, "ipv4": 259, "ipv6": 259, "manipul": [259, 271, 292, 294], "conveni": [259, 402, 418], "net": 259, "mask": 259, "interprocess": 260, "communic": 260, "json": [262, 299, 445, 467, 477, 478, 480], "complianc": 262, "interoper": 262, "infinit": 262, "nan": 262, "within": 262, "linecach": [265, 471, 477], "emb": 266, "facil": 267, "safeti": 267, "schema": 268, "extern": [268, 299], "resolut": [268, 428, 479], "streamhandl": 269, "filehandl": [269, 394], "watchedfilehandl": 269, "baserotatinghandl": 269, "rotatingfilehandl": 269, "timedrotatingfilehandl": 269, "sockethandl": 269, "datagramhandl": 269, "nteventloghandl": 269, "smtphandler": 269, "memoryhandl": 269, "httphandler": [269, 394], "lzma": [270, 475, 477], "decompress": [270, 421], "chain": [270, 341, 389, 442], "mailbox": [271, 474], "various": 271, "maildir": 271, "mbox": 271, "mh": 271, "babyl": 271, "mmdf": 271, "maildirmessag": 271, "mboxmessag": 271, "mhmessag": 271, "babylmessag": 271, "mmdfmessag": 271, "mailcap": 272, "theoret": 275, "represent": [275, 424, 443, 475], "angular": 275, "mimetyp": [276, 479], "multimedia": 277, "mmap": [278, 475, 476, 480], "madv_": 278, "map_": 278, "modulefind": 279, "msilib": [281, 479], "view": [281, 344, 468, 469], "record": [281, 381, 451], "cab": 281, "precomput": 281, "msvcrt": 282, "routin": [282, 355], "vc": 282, "parallel": [283, 364, 480], "exchang": 283, "sharedctyp": 283, "remot": 283, "cleanup": [283, 292, 476], "dummi": 283, "guidelin": 283, "spawn": [283, 348], "forkserv": 283, "shared_memori": 284, "netrc": 286, "nis": 287, "sun": [287, 349], "yellow": 287, "page": 287, "nntplib": [288, 475, 481], "nntp": [288, 474], "tower": 289, "implementor": 289, "terminolog": 292, "posit": [292, 319, 427, 440, 471, 480], "understand": [292, 368], "put": 292, "popul": 292, "trivial": 292, "ossaudiodev": 295, "oss": 295, "audio": 295, "devic": 295, "mixer": 295, "pathlib": [296, 471, 472, 473, 476, 477, 478, 479, 480, 481], "filesystem": [296, 478, 480], "individu": [296, 472], "part": 296, "correspond": [296, 383, 385], "pdb": [297, 474, 475, 476, 478, 479, 481], "relationship": [299, 461], "unpickl": 299, "dispatch": 299, "reduct": 299, "band": [299, 480], "consum": 299, "pickletool": [300, 478], "pipelin": [301, 348], "pkgutil": 302, "java": 303, "plistlib": [304, 467, 476, 480], "appl": [304, 481], "plist": 304, "poplib": [305, 474, 476, 477, 481], "pop3": 305, "posix": [306, 360], "larg": 306, "notabl": [306, 477, 478, 479, 480, 481], "pprint": [307, 471, 476, 480, 481], "pretti": [307, 381], "printer": 307, "prettyprint": 307, "instant": 308, "cprofil": [308, 479, 480], "stat": [308, 342, 475, 476], "determinist": 308, "timer": [308, 364], "pti": [309, 476], "pseudo": 309, "pwd": 310, "password": 310, "py_compil": [311, 471, 479, 480], "pyclbr": [312, 471], "pydoc": [313, 474, 475, 476, 478, 479, 481], "onlin": 313, "xml": [314, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 425, 461, 471, 475, 476, 477, 479, 480, 481], "expat": [314, 425], "fast": [314, 480], "xmlparser": [314, 412], "expaterror": 314, "model": [314, 368, 409, 427, 428, 462], "simplequeu": 316, "quopri": 317, "quot": [317, 393], "printabl": 317, "bookkeep": 318, "discret": 318, "reproduc": 318, "pair": 319, "simul": 319, "phonebook": 319, "mung": 319, "adverb": 319, "notat": [319, 433, 467], "token": [319, 326, 376, 377, 434, 480], "readlin": [320, 323, 334, 477, 478], "reprlib": [321, 474], "repr": [321, 431], "rlcomplet": [323, 478], "runpi": 324, "sched": [325, 475], "secret": [326, 478], "dev": [328, 479], "poll": 328, "trigger": 328, "epol": 328, "kqueue": [328, 425], "kevent": 328, "selector": [329, 374, 476, 477], "multiplex": 329, "shelv": [330, 471, 476], "shlex": [331, 475, 478, 480], "lexic": [331, 434], "improv": [331, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "shutil": [332, 472, 473, 474, 475, 476, 477, 480], "copytre": 332, "rmtree": 332, "archiv": [332, 357, 420, 421, 422, 464], "base_dir": 332, "sigpip": 333, "smtplib": [335, 475, 476, 477, 481], "smtp": 335, "sndhdr": [336, 477], "famili": [337, 348], "accept": 337, "socketserv": [338, 475, 478, 479], "tcpserver": 338, "udpserv": 338, "mixin": 338, "spwd": 339, "shadow": 339, "sqlite3": [340, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479], "db": 340, "sqlite": 340, "cursor": 340, "row": 340, "blob": 340, "prepareprotocol": 340, "adapt": [340, 472], "deprec": [340, 385, 461, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "placehold": 340, "sql": 340, "shortcut": 340, "uri": 340, "transact": 340, "ssl": [341, 467, 471, 474, 475, 476, 477, 478, 479, 480], "wrapper": [341, 371], "certif": [341, 468, 474, 476], "ca": 341, "sign": 341, "side": [341, 389], "bio": [341, 477], "session": 341, "verifi": 341, "cipher": 341, "statist": [343, 381, 471, 476, 478, 480], "spread": 343, "two": [343, 468], "normaldist": 343, "bitwis": [344, 429], "rang": [344, 440], "str": 344, "printf": 344, "bytearray": [344, 477], "frozenset": 344, "alia": 344, "genericalia": 344, "notimpl": 344, "affect": 344, "recommend": 344, "mini": 345, "stringprep": 346, "prepar": [346, 427], "frequent": 348, "bin": 348, "sh": 348, "substitut": [348, 465], "popen2": 348, "popen3": 348, "disabl": 348, "vfork": 348, "posix_spawn": 348, "sunau": [349, 476, 479], "au": 349, "au_read": 349, "au_writ": 349, "symtabl": 351, "virtual": [353, 375, 398, 460, 475, 477], "_pth": 353, "sysconfig": [354, 468, 472, 474, 477], "tabnanni": 356, "tarfil": [357, 474, 475, 476, 477, 480], "tar": 357, "tarinfo": 357, "telnetlib": [358, 478], "telnet": 358, "tempfil": [359, 473, 474, 475], "termio": 360, "tti": [360, 382], "unit": 361, "suit": 361, "socket_help": 361, "script_help": 361, "bytecode_help": 361, "correct": 361, "threading_help": 361, "os_help": 361, "import_help": 361, "warnings_help": 361, "textwrap": [363, 475, 476], "fill": [363, 383], "rlock": 364, "clock": 365, "timeit": [366, 477, 478], "measur": [366, 383], "snippet": 366, "tcl": 368, "architectur": 368, "life": 368, "preserv": [368, 478], "handi": 368, "packer": [368, 407], "coupl": 368, "imag": [368, 374], "colorchoos": 369, "choos": 369, "dnd": 370, "drag": 370, "drop": 370, "font": 371, "messagebox": 372, "prompt": 372, "scrolledtext": 373, "scroll": 373, "tix": 374, "hierarch": 374, "listbox": 374, "tabular": 374, "geometri": 374, "ttk": [375, 468], "theme": [375, 468], "scrollabl": 375, "label": 375, "combobox": 375, "spinbox": 375, "notebook": 375, "identifi": [375, 429, 434], "progressbar": 375, "separ": [375, 464, 468, 470], "sizegrip": 375, "treeview": 375, "tag": [375, 474], "column": 375, "layout": [375, 451], "tomllib": 378, "toml": 378, "track": [379, 389], "main": [379, 455, 467], "tracebackexcept": 380, "stacksummari": 380, "framesummari": 380, "peak": 381, "domainfilt": 381, "snapshot": 381, "statisticdiff": 381, "turtl": 383, "star": 383, "screen": 383, "turtlescreen": 383, "rawturtl": 383, "motion": 383, "pen": 383, "draw": 383, "visibl": [383, 475], "anim": 383, "turtledemo": [383, 474], "demo": [383, 473, 480, 482], "sinc": 383, "relev": 385, "pep": [385, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "alias": 385, "newtyp": 385, "nomin": 385, "subtyp": 385, "timelin": 385, "major": 385, "unicodedata": [386, 472, 473, 477, 478, 479, 480, 481], "old": [387, 463], "skip": 387, "expect": 387, "distinguish": 387, "subtest": 387, "load_test": 387, "fixtur": 387, "setupclass": 387, "teardownclass": 387, "setupmodul": 387, "teardownmodul": 387, "mock": [388, 389, 477, 478, 479], "attach": 388, "patcher": 388, "patch": [388, 389], "test_prefix": 388, "nest": [388, 389, 462, 463, 471], "where": 388, "magicmock": [388, 389], "magic": 388, "sentinel": 388, "create_autospec": 388, "filter_dir": 388, "mock_open": 388, "autospecc": 388, "seal": 388, "further": 389, "everi": 389, "unbound": 389, "cope": 389, "less": 389, "compon": [393, 436], "openerdirector": 394, "basehandl": 394, "httpredirecthandl": 394, "httpcookieprocessor": 394, "proxyhandl": 394, "httppasswordmgr": 394, "httppasswordmgrwithpriorauth": 394, "abstractbasicauthhandl": 394, "httpbasicauthhandl": 394, "proxybasicauthhandl": 394, "abstractdigestauthhandl": 394, "httpdigestauthhandl": 394, "proxydigestauthhandl": 394, "httpshandler": 394, "datahandl": 394, "ftphandler": 394, "cacheftphandl": 394, "unknownhandl": 394, "httperrorprocessor": 394, "respons": [394, 406], "robotpars": [395, 478], "robot": 395, "txt": 395, "xdrlib": [396, 407], "uuencod": [396, 425], "uuid": [397, 479], "accord": 397, "rfc": 397, "4122": 397, "venv": [398, 472, 476, 478, 480, 481], "envbuild": 398, "describ": 399, "overrid": 399, "temporarili": 399, "suppress": [399, 475], "wave": [400, 476, 479], "wav": 400, "wave_read": 400, "wave_writ": 400, "weakref": [401, 476, 480], "webbrows": [402, 475], "winreg": [404, 478], "hkey_": 404, "right": 404, "64": 404, "winsound": [405, 478], "sound": 405, "play": 405, "wsgiref": [406, 466, 477], "wsgi": 406, "simple_serv": 406, "conform": [406, 409], "checker": 406, "gateway": [406, 474], "xdr": 407, "vulner": 408, "defusedxml": 408, "dom": [409, 410, 411, 461], "domimplement": 409, "nodelist": 409, "documenttyp": 409, "attr": 409, "namednodemap": 409, "comment": [409, 434], "cdatasect": 409, "processinginstruct": 409, "accessor": 409, "minidom": 410, "minim": 410, "pulldom": 411, "domeventstream": 411, "etre": [412, 475, 476, 479], "elementtre": [412, 466, 468, 474, 475], "pull": 412, "interest": 412, "xpath": 412, "xinclud": 412, "qname": 412, "treebuild": 412, "xmlpullpars": 412, "sax": [413, 414, 415, 416, 477], "sax2": [413, 461], "saxexcept": 413, "contenthandl": 414, "dtdhandler": 414, "entityresolv": 414, "errorhandl": 414, "lexicalhandl": 414, "xmlreader": 415, "incrementalpars": 415, "inputsourc": 415, "attributesn": 415, "saxutil": 416, "xmlrpc": [417, 418, 419, 477, 478, 479, 480], "rpc": [418, 419], "serverproxi": 418, "protocolerror": 418, "multical": 418, "simplexmlrpcserv": 419, "cgixmlrpcrequesthandl": 419, "docxmlrpcserv": 419, "doccgixmlrpcrequesthandl": 419, "zipapp": [420, 477, 479], "zip": [420, 421, 422, 464], "standalon": 420, "zipfil": [421, 472, 474, 476, 477, 478, 479], "pyzipfil": 421, "zipinfo": 421, "pitfal": 421, "itself": 421, "behavior": [421, 471, 476, 477, 478, 479, 480], "zipimport": [422, 471], "zlib": [423, 425, 475, 478], "zoneinfo": [424, 481], "iana": 424, "zone": 424, "12": [425, 472, 473, 480], "0a0": 425, "psf": 425, "beopen": 425, "com": 425, "cnri": 425, "cwi": 425, "zero": 425, "claus": [425, 426], "bsd": 425, "mersenn": 425, "twister": 425, "uudecod": 425, "test_epol": 425, "siphash24": 425, "strtod": 425, "dtoa": 425, "openssl": [425, 459], "libffi": 425, "cfuhash": 425, "libmpdec": 425, "w3c": 425, "c14n": 425, "els": [426, 440], "guard": [426, 471], "irrefut": 426, "wildcard": [426, 450, 471], "invok": 427, "metaclass": 427, "resolv": 427, "mro": 427, "appropri": 427, "bodi": 427, "emul": 427, "purpos": 427, "__class_getitem__": 427, "__getitem__": 427, "atom": 429, "parenthes": [429, 471], "yield": [429, 435], "primari": 429, "slice": [429, 464], "unari": 429, "shift": 429, "membership": 429, "assign": [429, 435, 461, 480], "finder": 431, "loader": 431, "meta": 431, "submodul": 431, "__path__": 431, "__spec__": 431, "physic": 434, "declar": [434, 471], "explicit": [434, 467, 475, 476], "implicit": [434, 475], "blank": 434, "whitespac": 434, "soft": 434, "reserv": 434, "imaginari": 434, "delimit": 434, "augment": [435, 461], "del": [435, 441], "break": [435, 440], "nonloc": 435, "dir": 449, "shouldn": 454, "cross": 455, "makefil": 455, "target": [455, 468, 477, 478], "preprocessor": 455, "ide": [456, 458], "mac": [458, 467, 468, 481], "macpython": 458, "freebsd": [459, 468], "openbsd": 459, "opensolari": 459, "full": 460, "max_path": 460, "known": 460, "temporari": 460, "nuget": 460, "embedd": 460, "bundl": 460, "excursus": 460, "launcher": [460, 472, 475, 477], "shebang": 460, "diagnost": 460, "dri": 460, "pywin32": 460, "cx_freez": 460, "cycl": 461, "minor": 461, "easi": 461, "pyxml": 461, "227": [462, 463], "236": 462, "207": 462, "rich": 462, "230": 462, "229": 462, "205": 462, "232": 462, "235": 462, "insensit": 462, "217": 462, "208": 462, "coercion": [462, 479], "241": 462, "252": 463, "253": 463, "diamond": 463, "234": 463, "255": [463, 464], "237": [463, 465], "unifi": [463, 465, 466], "long": [463, 465], "238": 463, "218": [464, 465], "263": 464, "273": 464, "277": 464, "nt": 464, "278": 464, "univers": 464, "279": 464, "282": 464, "285": 464, "293": 464, "301": 464, "302": 464, "305": 464, "307": 464, "enhanc": [464, 467, 468, 478], "289": 465, "292": 465, "simpler": [465, 478], "318": 465, "322": 465, "324": 465, "327": 465, "need": 465, "328": [465, 466], "331": 465, "cookielib": 465, "308": 466, "309": 466, "314": 466, "softwar": 466, "v1": [466, 474], "absolut": 466, "338": 466, "341": 466, "342": 466, "343": [466, 467], "352": 466, "353": 466, "ssize_t": 466, "357": 466, "__index__": 466, "tracker": 467, "roundup": 467, "restructuredtext": 467, "sphinx": 467, "366": 467, "370": 467, "371": 467, "3101": [467, 469], "3105": 467, "3110": 467, "3112": 467, "3116": 467, "3118": [467, 475], "3119": 467, "3127": 467, "3129": 467, "3141": 467, "future_builtin": 467, "javascript": 467, "irix": 467, "372": [468, 470], "378": [468, 470], "thousand": [468, 470], "389": [468, 474], "391": [468, 474], "3106": 468, "3137": 468, "mainten": 468, "434": 468, "branch": 468, "466": 468, "477": 468, "backport": 468, "453": [468, 476], "476": [468, 476], "verif": [468, 476], "stdlib": [468, 476], "493": 468, "https": 468, "migrat": 468, "regen": [468, 477, 478], "touch": [468, 477, 478], "stumbl": 469, "alreadi": 469, "highlight": [471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "better": [471, 477], "indentationerror": 471, "attributeerror": 471, "nameerror": 471, "626": 471, "634": 471, "604": 471, "612": 471, "613": 471, "typealia": 471, "647": 471, "smtpd": [471, 475, 476, 477], "652": 471, "maintain": 471, "11": [472, 481, 482], "657": 472, "fine": 472, "grain": [472, 475], "654": 472, "678": 472, "enrich": 472, "exe": 472, "646": 472, "variad": 472, "655": 472, "mark": 472, "typeddict": 472, "673": 472, "675": 472, "681": 472, "563": [472, 479], "may": 472, "faster": [472, 477], "cheaper": 472, "inlin": 472, "659": 472, "misc": 472, "pend": [472, 473], "13": [473, 478], "14": 473, "384": 474, "3148": 474, "3147": 474, "repositori": 474, "3149": 474, "so": 474, "3333": 474, "405": 475, "420": 475, "393": 475, "flexibl": 475, "397": 475, "3151": 475, "rework": 475, "380": 475, "subgener": 475, "409": 475, "414": 475, "3155": 475, "qualifi": 475, "412": 475, "362": 475, "421": 475, "simplenamespac": 475, "unsupport": [475, 477], "446": 476, "newli": 476, "451": 476, "modulespec": 476, "445": 476, "442": 476, "456": 476, "interchang": 476, "436": 476, "signific": 476, "longer": 476, "492": 477, "465": 477, "dedic": 477, "infix": 477, "matrix": 477, "448": 477, "461": 477, "percent": 477, "484": 477, "471": 477, "scandir": 477, "475": 477, "retri": 477, "eintr": 477, "479": 477, "stopiter": 477, "insid": 477, "485": 477, "equal": 477, "486": 477, "488": 477, "elimin": 477, "pyo": 477, "489": 477, "negoti": 477, "498": 478, "526": 478, "515": 478, "underscor": 478, "525": 478, "530": 478, "487": 478, "519": 478, "495": 478, "disambigu": 478, "529": 478, "528": 478, "520": 478, "468": 478, "523": 478, "pythonmalloc": 478, "postpon": 479, "538": 479, "540": 479, "forc": 479, "553": 479, "breakpoint": 479, "539": 479, "562": 479, "564": 479, "nanosecond": 479, "565": 479, "deprecationwarn": [479, 481], "560": 479, "552": 479, "545": 479, "uu": 479, "macpath": 479, "578": 480, "audit": 480, "587": 480, "590": 480, "merg": 481, "suffix": 481, "big": 481, "sur": 481, "silicon": 481, "changelog": 482, "alpha": 482, "candid": 482}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Pack and Unpack functions": [[25, "pack-and-unpack-functions"]], "Pack functions": [[25, "pack-functions"]], "Unpack functions": [[25, "unpack-functions"]], "Code Objects": [[13, "code-objects"], [344, "code-objects"]], "\u532f\u5165\u6a21\u7d44": [[30, "importing-modules"], [280, "importing-modules"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [387, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "Codec registry and support functions": [[14, "codec-registry-and-support-functions"]], "Codec lookup API": [[14, "codec-lookup-api"]], "Registry API for Unicode encoding error handlers": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "Context Variables Objects": [[17, "context-variables-objects"]], "Python Initialization Configuration": [[33, "python-initialization-configuration"]], "\u7bc4\u4f8b": [[33, "example"], [95, "examples"], [118, "example"], [125, "examples"], [133, "examples"], [135, "examples"], [132, "examples"], [61, "examples"], [41, "examples"], [412, "example"], [412, "id3"], [422, "examples"], [420, "examples"], [397, "example"], [406, "examples"], [377, "examples"], [381, "examples"], [378, "examples"], [401, "example"], [330, "example"], [318, "examples"], [314, "example"], [329, "examples"], [309, "example"], [320, "example"], [338, "examples"], [337, "example"], [333, "examples"], [307, "example"], [359, "examples"], [341, "examples"], [347, "examples"], [366, "examples"], [355, "examples"], [360, "example"], [357, "examples"], [304, "examples"], [283, "examples"], [299, "example"], [299, "examples"], [250, "examples"], [271, "examples"], [242, "examples"], [270, "examples"], [241, "examples"], [239, "examples"], [249, "examples"], [243, "example"], [234, "examples"], [213, "example"], [171, "example"], [174, "examples"], [172, "examples"], [147, "examples"], [136, "examples"]], "PyWideStringList": [[33, "pywidestringlist"]], "PyStatus": [[33, "pystatus"]], "PyPreConfig": [[33, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[33, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[33, "pyconfig"]], "Initialization with PyConfig": [[33, "initialization-with-pyconfig"]], "Isolated Configuration": [[33, "isolated-configuration"]], "Python Configuration": [[33, "python-configuration"]], "Python Path Configuration": [[33, "python-path-configuration"]], "Py_RunMain()": [[33, "py-runmain"]], "Py_GetArgcArgv()": [[33, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[33, "multi-phase-initialization-private-provisional-api"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "Frame Objects": [[26, "frame-objects"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "\u7522\u751f\u5668\u7269\u4ef6": [[29, "generator-objects"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "Python/C API \u53c3\u8003\u624b\u518a": [[31, "python-c-api-reference-manual"]], "Parsing arguments and building values": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [118, "parsing-arguments"], [292, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "\u5176\u4ed6\u7269\u4ef6": [[5, "other-objects"], [16, "other-objects"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "Initialization, Finalization, and Threads": [[32, "initialization-finalization-and-threads"]], "Before Python Initialization": [[32, "before-python-initialization"]], "Global configuration variables": [[32, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[32, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[32, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[32, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[32, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[32, "non-python-created-threads"]], "Cautions about fork()": [[32, "cautions-about-fork"]], "High-level API": [[32, "high-level-api"]], "Low-level API": [[32, "low-level-api"]], "Sub-interpreter support": [[32, "sub-interpreter-support"]], "Bugs and caveats": [[32, "bugs-and-caveats"]], "Asynchronous Notifications": [[32, "asynchronous-notifications"]], "Profiling and Tracing": [[32, "profiling-and-tracing"]], "Advanced Debugger Support": [[32, "advanced-debugger-support"]], "Thread Local Storage Support": [[32, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[32, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[32, "dynamic-allocation"]], "Methods": [[32, "methods"], [344, "methods"], [288, "methods"], [296, "methods"]], "Thread Local Storage (TLS) API": [[32, "thread-local-storage-tls-api"]], "\u6a94\u6848\uff08File\uff09\u7269\u4ef6": [[24, "file-objects"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "Capsules": [[11, "capsules"], [468, "capsules"]], "Bytes Objects": [[9, "bytes-objects"], [344, "bytes-objects"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "Supporting Cyclic Garbage Collection": [[28, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[28, "controlling-the-garbage-collector-state"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "Complex Number Objects": [[15, "complex-number-objects"]], "Complex Numbers as C Structures": [[15, "complex-numbers-as-c-structures"]], "Complex Numbers as Python Objects": [[15, "complex-numbers-as-python-objects"]], "Allocating Objects on the Heap": [[3, "allocating-objects-on-the-heap"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "\u51fd\u5f0f\uff08Function\uff09\u7269\u4ef6": [[27, "function-objects"]], "Byte Array Objects": [[8, "byte-array-objects"]], "Type check macros": [[8, "type-check-macros"]], "Direct API functions": [[8, "direct-api-functions"]], "Macros": [[8, "macros"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "Concrete Objects Layer": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [312, "function-objects"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[82, "library-and-extension-faq"]], "\u76ee\u9304": [[82, "id1"], [76, "id1"], [84, "id1"], [83, "id1"], [77, "id1"], [91, "id1"], [78, "id1"], [79, "id1"], [246, "menus"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[82, "general-library-questions"]], "How do I find a module or application to perform task X?": [[82, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u539f\u59cb\u6a94\u6848": [[82, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[82, "how-do-i-make-a-python-script-executable-on-unix"]], "Is there a curses/termcap package for Python?": [[82, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[82, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[82, "why-don-t-my-signal-handlers-work"]], "\u4e00\u822c\u6027\u7684\u5de5\u4f5c": [[82, "common-tasks"]], "\u6211\u5982\u4f55\u6e2c\u8a66Python\u7a0b\u5f0f": [[82, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[82, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[82, "how-do-i-get-a-single-keypress-at-a-time"]], "Threads": [[82, "threads"]], "How do I program using threads?": [[82, "how-do-i-program-using-threads"]], "None of my threads seem to run: why?": [[82, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[82, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[82, "what-kinds-of-global-value-mutation-are-thread-safe"]], "Can't we get rid of the Global Interpreter Lock?": [[82, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "Input and Output": [[82, "input-and-output"]], "How do I delete a file? (And other file questions...)": [[82, "how-do-i-delete-a-file-and-other-file-questions"]], "How do I copy a file?": [[82, "how-do-i-copy-a-file"]], "How do I read (or write) binary data?": [[82, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[82, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "How do I access the serial (RS232) port?": [[82, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[82, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "Network/Internet Programming": [[82, "network-internet-programming"]], "What WWW tools are there for Python?": [[82, "what-www-tools-are-there-for-python"]], "How can I mimic CGI form submission (METHOD=POST)?": [[82, "how-can-i-mimic-cgi-form-submission-method-post"]], "What module should I use to help with generating HTML?": [[82, "what-module-should-i-use-to-help-with-generating-html"]], "How do I send mail from a Python script?": [[82, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[82, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "Databases": [[82, "databases"]], "Are there any interfaces to database packages in Python?": [[82, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[82, "how-do-you-implement-persistent-objects-in-python"]], "Mathematics and Numerics": [[82, "mathematics-and-numerics"]], "How do I generate random numbers in Python?": [[82, "how-do-i-generate-random-numbers-in-python"]], "Argparse \u6559\u5b78": [[87, "argparse-tutorial"]], "\u6982\u5ff5": [[87, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[87, "the-basics"], [109, "basic-usage"], [262, "basic-usage"]], "\u4ecb\u7d39\u4f4d\u7f6e\u53c3\u6578": [[87, "introducing-positional-arguments"]], "\u4ecb\u7d39\u9078\u9805\u53c3\u6578": [[87, "introducing-optional-arguments"]], "Short options": [[87, "short-options"]], "\u73fe\u5728\u7d50\u5408\u4f4d\u7f6e\u8207\u9078\u9805\u53c3\u6578": [[87, "combining-positional-and-optional-arguments"]], "Getting a little more advanced": [[87, "getting-a-little-more-advanced"]], "Specifying ambiguous arguments": [[87, "specifying-ambiguous-arguments"]], "Conflicting options": [[87, "conflicting-options"]], "\u7d50\u8ad6": [[87, "conclusion"]], "Instrumenting CPython with DTrace and SystemTap": [[95, "instrumenting-cpython-with-dtrace-and-systemtap"]], "Enabling the static markers": [[95, "enabling-the-static-markers"]], "Static DTrace probes": [[95, "static-dtrace-probes"]], "Static SystemTap markers": [[95, "static-systemtap-markers"]], "Available static markers": [[95, "available-static-markers"]], "SystemTap Tapsets": [[95, "systemtap-tapsets"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[98, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[98, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[98, "when-to-use-logging"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[98, "a-simple-example"], [71, "a-simple-example"]], "Logging to a file": [[98, "logging-to-a-file"]], "Logging from multiple modules": [[98, "logging-from-multiple-modules"]], "Logging variable data": [[98, "logging-variable-data"]], "Changing the format of displayed messages": [[98, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[98, "displaying-the-date-time-in-messages"]], "Next Steps": [[98, "next-steps"]], "Advanced Logging Tutorial": [[98, "advanced-logging-tutorial"]], "Logging Flow": [[98, "logging-flow"]], "Loggers": [[98, "loggers"]], "Handlers": [[98, "handlers"]], "Formatters": [[98, "formatters"]], "Configuring Logging": [[98, "configuring-logging"]], "What happens if no configuration is provided": [[98, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[98, "configuring-logging-for-a-library"]], "Logging Levels": [[98, "logging-levels"], [267, "logging-levels"]], "Custom Levels": [[98, "custom-levels"]], "Useful Handlers": [[98, "useful-handlers"]], "Exceptions raised during logging": [[98, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[98, "using-arbitrary-objects-as-messages"]], "Optimization": [[98, "optimization"]], "Other resources": [[98, "other-resources"], [99, "other-resources"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[81, "why-is-python-installed-on-my-computer-faq"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[81, "what-is-python"], [78, "what-is-python"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[81, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[81, "can-i-delete-python"]], "\u8853\u8a9e\u8868": [[85, "glossary"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[96, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[96, null]], "Creating Address/Network/Interface objects": [[96, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[96, "a-note-on-ip-versions"]], "IP Host Addresses": [[96, "ip-host-addresses"]], "Defining Networks": [[96, "defining-networks"]], "Host Interfaces": [[96, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[96, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[96, "networks-as-lists-of-addresses"]], "Comparisons": [[96, "comparisons"], [92, "comparisons"], [429, "comparisons"], [344, "comparisons"]], "Using IP Addresses with other modules": [[96, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[96, "getting-more-detail-when-instance-creation-fails"]], "Annotations Best Practices": [[86, "annotations-best-practices"]], "\u6458\u8981": [[86, null], [88, null], [101, null], [91, "abstract"], [90, null], [102, null], [103, null]], "Accessing The Annotations Dict Of An Object In Python 3.10 And Newer": [[86, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "Accessing The Annotations Dict Of An Object In Python 3.9 And Older": [[86, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "Manually Un-Stringizing Stringized Annotations": [[86, "manually-un-stringizing-stringized-annotations"]], "Best Practices For __annotations__ In Any Python Version": [[86, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ Quirks": [[86, "annotations-quirks"]], "Argument Clinic How-To": [[88, "argument-clinic-how-to"]], "The Goals Of Argument Clinic": [[88, "the-goals-of-argument-clinic"]], "Basic Concepts And Usage": [[88, "basic-concepts-and-usage"]], "Converting Your First Function": [[88, "converting-your-first-function"]], "Advanced Topics": [[88, "advanced-topics"]], "Symbolic default values": [[88, "symbolic-default-values"]], "Renaming the C functions and variables generated by Argument Clinic": [[88, "renaming-the-c-functions-and-variables-generated-by-argument-clinic"]], "Converting functions using PyArg_UnpackTuple": [[88, "converting-functions-using-pyarg-unpacktuple"]], "Optional Groups": [[88, "optional-groups"]], "Using real Argument Clinic converters, instead of \"legacy converters\"": [[88, "using-real-argument-clinic-converters-instead-of-legacy-converters"]], "Py_buffer": [[88, "py-buffer"]], "Advanced converters": [[88, "advanced-converters"]], "Parameter default values": [[88, "parameter-default-values"]], "The NULL default value": [[88, "the-null-default-value"]], "Expressions specified as default values": [[88, "expressions-specified-as-default-values"]], "Using a return converter": [[88, "using-a-return-converter"]], "Cloning existing functions": [[88, "cloning-existing-functions"]], "Calling Python code": [[88, "calling-python-code"]], "Using a \"self converter\"": [[88, "using-a-self-converter"]], "Using a \"defining class\" converter": [[88, "using-a-defining-class-converter"]], "Writing a custom converter": [[88, "writing-a-custom-converter"]], "Writing a custom return converter": [[88, "writing-a-custom-return-converter"]], "METH_O and METH_NOARGS": [[88, "meth-o-and-meth-noargs"]], "tp_new and tp_init functions": [[88, "tp-new-and-tp-init-functions"]], "Changing and redirecting Clinic's output": [[88, "changing-and-redirecting-clinic-s-output"]], "The #ifdef trick": [[88, "the-ifdef-trick"]], "Using Argument Clinic in Python files": [[88, "using-argument-clinic-in-python-files"]], "Defining Extension Types: Assorted Topics": [[73, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[73, "finalization-and-de-allocation"]], "Object Presentation": [[73, "object-presentation"]], "Attribute Management": [[73, "attribute-management"]], "Generic Attribute Management": [[73, "generic-attribute-management"]], "Type-specific Attribute Management": [[73, "type-specific-attribute-management"]], "Object Comparison": [[73, "object-comparison"]], "Abstract Protocol Support": [[73, "abstract-protocol-support"]], "Weak Reference Support": [[73, "weak-reference-support"]], "More Suggestions": [[73, "more-suggestions"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[76, "design-and-history-faq"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[76, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[76, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[76, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[76, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[76, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[76, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[76, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[76, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[76, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[76, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[76, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[76, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[76, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[76, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[76, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[76, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[76, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[76, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[76, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[76, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[76, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[76, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[76, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[76, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[76, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[76, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[76, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[76, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[84, "python-on-windows-faq"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[84, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[84, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[84, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[84, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[84, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[84, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[84, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[84, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[84, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3": [[101, "porting-python-2-code-to-python-3"]], "\u7c21\u77ed\u7684\u8aaa\u660e": [[101, "the-short-explanation"]], "\u8a73\u7d30\u7684": [[101, "details"]], "\u5411\u4e0b\u652f\u63f4Python 2.6\u548c\u66f4\u820a\u7684\u7248\u672c": [[101, "drop-support-for-python-2-6-and-older"]], "Make sure you specify the proper version support in your setup.py file": [[101, "make-sure-you-specify-the-proper-version-support-in-your-setup-py-file"]], "\u6709\u597d\u7684\u6e2c\u8a66\u8986\u84cb\u7387": [[101, "have-good-test-coverage"]], "\u77ad\u89e3Python 2 & 3\u7684\u5dee\u7570": [[101, "learn-the-differences-between-python-2-3"]], "\u66f4\u65b0\u4f60\u7684\u7a0b\u5f0f\u78bc": [[101, "update-your-code"]], "Division": [[101, "division"]], "Text versus binary data": [[101, "text-versus-binary-data"]], "Use feature detection instead of version detection": [[101, "use-feature-detection-instead-of-version-detection"]], "Prevent compatibility regressions": [[101, "prevent-compatibility-regressions"]], "Check which dependencies block your transition": [[101, "check-which-dependencies-block-your-transition"]], "Update your setup.py file to denote Python 3 compatibility": [[101, "update-your-setup-py-file-to-denote-python-3-compatibility"]], "Use continuous integration to stay compatible": [[101, "use-continuous-integration-to-stay-compatible"]], "Consider using optional static type checking": [[101, "consider-using-optional-static-type-checking"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[94, "python-howtos"]], "Building C and C++ Extensions": [[69, "building-c-and-c-extensions"]], "Building C and C++ Extensions with setuptools": [[69, "building-c-and-c-extensions-with-setuptools"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[83, "programming-faq"]], "\u5e38\u898b\u554f\u984c": [[83, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[83, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[83, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "How can I create a stand-alone binary from a Python script?": [[83, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Are there coding standards or a style guide for Python programs?": [[83, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "Core Language": [[83, "core-language"]], "\u70ba\u4ec0\u9ebc\u7576\u8b8a\u6578\u6709\u503c\u6642\u6211\u5f97\u5230\u932f\u8aa4\u8a0a\u606f UnboundLocalError": [[83, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[83, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[83, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "How do I share global variables across modules?": [[83, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[83, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[83, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[83, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "What is the difference between arguments and parameters?": [[83, "what-is-the-difference-between-arguments-and-parameters"]], "Why did changing list 'y' also change list 'x'?": [[83, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[83, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[83, "how-do-you-make-a-higher-order-function-in-python"]], "How do I copy an object in Python?": [[83, "how-do-i-copy-an-object-in-python"]], "How can I find the methods or attributes of an object?": [[83, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "How can my code discover the name of an object?": [[83, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[83, "what-s-up-with-the-comma-operator-s-precedence"]], "Is there an equivalent of C's \"?:\" ternary operator?": [[83, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[83, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[83, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "Numbers and strings": [[83, "numbers-and-strings"]], "How do I specify hexadecimal and octal integers?": [[83, "how-do-i-specify-hexadecimal-and-octal-integers"]], "Why does -22 // 10 return -3?": [[83, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[83, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "How do I convert a string to a number?": [[83, "how-do-i-convert-a-string-to-a-number"]], "How do I convert a number to a string?": [[83, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[83, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[83, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[83, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[83, "is-there-a-scanf-or-sscanf-equivalent"]], "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?": [[83, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Performance": [[83, "performance"], [469, "performance"], [299, "performance"], [258, "performance"]], "My program is too slow. How do I speed it up?": [[83, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[83, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[83, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[83, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[83, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[83, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[83, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[83, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[83, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[83, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method to a sequence of objects?": [[83, "how-do-i-apply-a-method-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[83, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[83, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[83, "how-can-i-sort-one-list-by-values-from-another-list"]], "Objects": [[83, "objects"]], "What is a class?": [[83, "what-is-a-class"]], "What is a method?": [[83, "what-is-a-method"]], "What is self?": [[83, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[83, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[83, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[83, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[83, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[83, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[83, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[83, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[83, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[83, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[83, "why-does-the-result-of-id-appear-to-be-not-unique"]], "When can I rely on identity tests with the is operator?": [[83, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "How can a subclass control what data is stored in an immutable instance?": [[83, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[83, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[83, "modules"], [429, "examples"], [344, "modules"]], "How do I create a .pyc file?": [[83, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[83, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[83, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') returns <module 'x'>; how do I get z?": [[83, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "When I edit an imported module and reimport it, the changes don't show up.  Why does this happen?": [[83, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "Extending/Embedding FAQ": [[77, "extending-embedding-faq"]], "Can I create my own functions in C?": [[77, "can-i-create-my-own-functions-in-c"]], "Can I create my own functions in C++?": [[77, "id2"]], "Writing C is hard; are there any alternatives?": [[77, "writing-c-is-hard-are-there-any-alternatives"]], "How can I execute arbitrary Python statements from C?": [[77, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[77, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "How do I extract C values from a Python object?": [[77, "how-do-i-extract-c-values-from-a-python-object"]], "How do I use Py_BuildValue() to create a tuple of arbitrary length?": [[77, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "How do I call an object's method from C?": [[77, "how-do-i-call-an-object-s-method-from-c"]], "How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?": [[77, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "How do I access a module written in Python from C?": [[77, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[77, "how-do-i-interface-to-c-objects-from-python"]], "I added a module using the Setup file and the make fails; why?": [[77, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "How do I debug an extension?": [[77, "how-do-i-debug-an-extension"]], "I want to compile a Python module on my Linux system, but some files are missing. Why?": [[77, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "How do I tell \"incomplete input\" from \"invalid input\"?": [[77, "how-do-i-tell-incomplete-input-from-invalid-input"]], "How do I find undefined g++ symbols __builtin_new or __pure_virtual?": [[77, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[77, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[72, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[72, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[72, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[72, "embedding-the-cpython-runtime-in-a-larger-application"]], "Defining Extension Types: Tutorial": [[74, "defining-extension-types-tutorial"]], "The Basics": [[74, "the-basics"]], "Adding data and methods to the Basic example": [[74, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[74, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[74, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[74, "subclassing-other-types"]], "\u4fee\u98fe\u5668 HowTo \u6307\u5357": [[91, "descriptor-howto-guide"]], "Primer": [[91, "primer"]], "Simple example: A descriptor that returns a constant": [[91, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[91, "dynamic-lookups"]], "Managed attributes": [[91, "managed-attributes"]], "Customized names": [[91, "customized-names"]], "Closing thoughts": [[91, "closing-thoughts"]], "Complete Practical Example": [[91, "complete-practical-example"]], "Validator class": [[91, "validator-class"]], "Custom validators": [[91, "custom-validators"]], "Practical application": [[91, "practical-application"]], "Technical Tutorial": [[91, "technical-tutorial"]], "Definition and introduction": [[91, "definition-and-introduction"]], "Descriptor protocol": [[91, "descriptor-protocol"]], "Overview of descriptor invocation": [[91, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[91, "invocation-from-an-instance"]], "Invocation from a class": [[91, "invocation-from-a-class"]], "Invocation from super": [[91, "invocation-from-super"]], "Summary of invocation logic": [[91, "summary-of-invocation-logic"]], "Automatic name notification": [[91, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[91, "orm-example"]], "Pure Python Equivalents": [[91, "pure-python-equivalents"]], "Properties": [[91, "properties"]], "Functions and methods": [[91, "functions-and-methods"]], "Kinds of methods": [[91, "kinds-of-methods"]], "Static methods": [[91, "static-methods"]], "Class methods": [[91, "class-methods"]], "Member objects and __slots__": [[91, "member-objects-and-slots"]], "\u767c\u5e03 Python \u6a21\u7d44": [[68, "distributing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[68, "key-terms"], [109, "key-terms"]], "\u958b\u6e90\u6388\u6b0a\u8207\u5354\u540c\u5408\u4f5c": [[68, "open-source-licensing-and-collaboration"]], "\u5b89\u88dd\u5de5\u5177": [[68, "installing-the-tools"]], "\u95b1\u8b80 Python \u5c01\u88dd\u4f7f\u7528\u8005\u6307\u5357": [[68, "reading-the-python-packaging-user-guide"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[68, "how-do-i"], [109, "how-do-i"]], "...\u70ba\u6211\u7684\u5c08\u6848\u9078\u64c7\u4e00\u500b\u540d\u7a31\uff1f": [[68, "choose-a-name-for-my-project"]], "...\u5efa\u7acb\u548c\u767c\u5e03\u4e8c\u9032\u5236\u64f4\u5145\uff1f": [[68, "create-and-distribute-binary-extensions"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[78, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[78, "general-information"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[78, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[78, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[78, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[78, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[78, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[78, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[78, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[78, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[78, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[78, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[78, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[78, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[78, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[78, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[78, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[78, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[78, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[78, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[78, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[78, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[78, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[78, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[78, "is-python-a-good-language-for-beginning-programmers"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[79, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[79, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[79, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[79, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[79, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[79, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[79, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "Python support for the Linux perf profiler": [[100, "python-support-for-the-linux-perf-profiler"]], "Enabling perf profiling mode": [[100, "enabling-perf-profiling-mode"]], "How to obtain the best results": [[100, "how-to-obtain-the-best-results"]], "Building C and C++ Extensions on Windows": [[75, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[75, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[75, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[75, "using-dlls-in-practice"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[70, "embedding-python-in-another-application"]], "Very High Level Embedding": [[70, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[70, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[70, "pure-embedding"]], "Extending Embedded Python": [[70, "extending-embedded-python"]], "Embedding Python in C++": [[70, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[70, "compiling-and-linking-under-unix-like-systems"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[71, "extending-python-with-c-or-c"]], "Intermezzo: Errors and Exceptions": [[71, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[71, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[71, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[71, "compilation-and-linkage"]], "Calling Python Functions from C": [[71, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[71, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[71, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[71, "building-arbitrary-values"]], "Reference Counts": [[71, "reference-counts"], [34, "reference-counts"]], "Reference Counting in Python": [[71, "reference-counting-in-python"]], "Ownership Rules": [[71, "ownership-rules"]], "Thin Ice": [[71, "thin-ice"]], "NULL Pointers": [[71, "null-pointers"]], "Writing Extensions in C++": [[71, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[71, "providing-a-c-api-for-an-extension-module"]], "Python \u5e38\u898b\u554f\u984c": [[80, "python-frequently-asked-questions"]], "Logging Cookbook": [[99, "logging-cookbook"]], "Using logging in multiple modules": [[99, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[99, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[99, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[99, "logging-to-multiple-destinations"]], "Custom handling of levels": [[99, "custom-handling-of-levels"]], "Configuration server example": [[99, "configuration-server-example"]], "Dealing with handlers that block": [[99, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[99, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[99, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[99, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[99, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[99, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[99, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[99, "use-of-contextvars"]], "Imparting contextual information in handlers": [[99, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[99, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[99, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[99, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[99, "using-file-rotation"]], "Use of alternative formatting styles": [[99, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[99, "customizing-logrecord"]], "Subclassing QueueHandler - a ZeroMQ example": [[99, "subclassing-queuehandler-a-zeromq-example"]], "Subclassing QueueListener - a ZeroMQ example": [[99, "subclassing-queuelistener-a-zeromq-example"]], "An example dictionary-based configuration": [[99, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[99, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[99, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[99, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[99, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[99, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[99, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[99, "using-logrecord-factories"]], "Using custom message objects": [[99, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[99, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[99, "customized-exception-formatting"]], "Speaking logging messages": [[99, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[99, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[99, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[99, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[99, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[99, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[99, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[99, "logging-to-syslog-with-rfc5424-support"]], "How to treat a logger like an output stream": [[99, "how-to-treat-a-logger-like-an-output-stream"]], "Patterns to avoid": [[99, "patterns-to-avoid"]], "Opening the same log file multiple times": [[99, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[99, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[99, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[99, "creating-a-lot-of-loggers"]], "Enum HOWTO": [[92, "enum-howto"]], "Programmatic access to enumeration members and their attributes": [[92, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[92, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[92, "ensuring-unique-enumeration-values"]], "Using automatic values": [[92, "using-automatic-values"]], "Iteration": [[92, "iteration"], [259, "iteration"]], "Allowed members and attributes of enumerations": [[92, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[92, "restricted-enum-subclassing"]], "Pickling": [[92, "pickling"]], "Functional API": [[92, "functional-api"], [251, "functional-api"]], "Derived Enumerations": [[92, "derived-enumerations"]], "IntEnum": [[92, "intenum"]], "StrEnum": [[92, "strenum"]], "IntFlag": [[92, "intflag"]], "Flag": [[92, "flag"]], "Others": [[92, "others"]], "When to use __new__() vs. __init__()": [[92, "when-to-use-new-vs-init"]], "Finer Points": [[92, "finer-points"]], "Supported __dunder__ names": [[92, "supported-dunder-names"], [210, "supported-dunder-names"]], "Supported _sunder_ names": [[92, "supported-sunder-names"], [210, "supported-sunder-names"]], "_Private__names": [[92, "private-names"]], "Enum member type": [[92, "enum-member-type"]], "Creating members that are mixed with other data types": [[92, "creating-members-that-are-mixed-with-other-data-types"]], "Boolean value of Enum classes and members": [[92, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[92, "enum-classes-with-methods"]], "Combining members of Flag": [[92, "combining-members-of-flag"]], "Flag and IntFlag minutia": [[92, "flag-and-intflag-minutia"]], "How are Enums different?": [[92, "how-are-enums-different"]], "Enum Classes": [[92, "enum-classes"]], "Enum Members (aka instances)": [[92, "enum-members-aka-instances"]], "Omitting values": [[92, "omitting-values"]], "Using auto": [[92, "using-auto"]], "Using object": [[92, "using-object"]], "Using a descriptive string": [[92, "using-a-descriptive-string"]], "Using a custom __new__()": [[92, "using-a-custom-new"]], "OrderedEnum": [[92, "orderedenum"]], "DuplicateFreeEnum": [[92, "duplicatefreeenum"]], "Planet": [[92, "planet"]], "TimePeriod": [[92, "timeperiod"]], "Subclassing EnumType": [[92, "subclassing-enumtype"]], "Curses Programming with Python": [[90, "curses-programming-with-python"]], "What is curses?": [[90, "what-is-curses"]], "The Python curses module": [[90, "the-python-curses-module"]], "Starting and ending a curses application": [[90, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[90, "windows-and-pads"]], "Displaying Text": [[90, "displaying-text"]], "Attributes and Color": [[90, "attributes-and-color"]], "User Input": [[90, "user-input"]], "For More Information": [[90, "for-more-information"]], "\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[93, "functional-programming-howto"]], "\u7c21\u4ecb": [[93, "introduction"], [106, "introduction"], [108, "introduction"], [102, "introduction"], [34, "introduction"], [433, "introduction"], [463, "introduction"], [452, "introduction"], [462, "introduction"], [461, "introduction"], [329, "introduction"], [283, "introduction"], [250, "introduction"], [257, "introduction"], [151, "introduction"]], "Formal provability": [[93, "formal-provability"]], "Modularity": [[93, "modularity"]], "Ease of debugging and testing": [[93, "ease-of-debugging-and-testing"]], "Composability": [[93, "composability"]], "Iterators": [[93, "iterators"]], "Data Types That Support Iterators": [[93, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[93, "generator-expressions-and-list-comprehensions"]], "Generators": [[93, "generators"]], "Passing values into a generator": [[93, "passing-values-into-a-generator"]], "Built-in functions": [[93, "built-in-functions"]], "The itertools module": [[93, "the-itertools-module"]], "Creating new iterators": [[93, "creating-new-iterators"]], "Calling functions on elements": [[93, "calling-functions-on-elements"]], "Selecting elements": [[93, "selecting-elements"]], "Combinatoric functions": [[93, "combinatoric-functions"]], "Grouping elements": [[93, "grouping-elements"]], "The functools module": [[93, "the-functools-module"]], "The operator module": [[93, "the-operator-module"]], "Small functions and the lambda expression": [[93, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[93, "revision-history-and-acknowledgements"]], "References": [[93, "references"], [105, "references"], [105, "id2"], [105, "id3"], [431, "references"]], "General": [[93, "general"]], "Python-specific": [[93, "python-specific"]], "Python documentation": [[93, "python-documentation"]], "Isolating Extension Modules": [[97, "isolating-extension-modules"]], "Abstract": [[97, null]], "Who should read this": [[97, "who-should-read-this"]], "Background": [[97, "background"], [292, "background"]], "Enter Per-Module State": [[97, "enter-per-module-state"]], "Isolated Module Objects": [[97, "isolated-module-objects"]], "Surprising Edge Cases": [[97, "surprising-edge-cases"]], "Making Modules Safe with Multiple Interpreters": [[97, "making-modules-safe-with-multiple-interpreters"]], "Managing Global State": [[97, "managing-global-state"]], "Managing Per-Module State": [[97, "managing-per-module-state"]], "Opt-Out: Limiting to One Module Object per Process": [[97, "opt-out-limiting-to-one-module-object-per-process"]], "Module State Access from Functions": [[97, "module-state-access-from-functions"]], "Heap Types": [[97, "heap-types"], [61, "heap-types"]], "Changing Static Types to Heap Types": [[97, "changing-static-types-to-heap-types"]], "Defining Heap Types": [[97, "defining-heap-types"]], "Garbage-Collection Protocol": [[97, "garbage-collection-protocol"]], "Module State Access from Classes": [[97, "module-state-access-from-classes"]], "Module State Access from Regular Methods": [[97, "module-state-access-from-regular-methods"]], "Module State Access from Slot Methods, Getters and Setters": [[97, "module-state-access-from-slot-methods-getters-and-setters"]], "Lifetime of the Module State": [[97, "lifetime-of-the-module-state"]], "Open Issues": [[97, "open-issues"]], "Per-Class Scope": [[97, "per-class-scope"]], "Lossless Conversion to Heap Types": [[97, "lossless-conversion-to-heap-types"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[89, "porting-extension-modules-to-python-3"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[124, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[124, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[124, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[124, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[124, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[124, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[124, "detect-never-retrieved-exceptions"]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[106, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[106, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[106, "fetching-urls"]], "Data": [[106, "data"]], "Headers": [[106, "headers"]], "Handling Exceptions": [[106, "handling-exceptions"]], "URLError": [[106, "urlerror"]], "HTTPError": [[106, "httperror"]], "Error Codes": [[106, "error-codes"]], "Wrapping it Up": [[106, "wrapping-it-up"]], "Number 1": [[106, "number-1"]], "Number 2": [[106, "number-2"]], "info and geturl": [[106, "info-and-geturl"]], "Openers and Handlers": [[106, "openers-and-handlers"]], "Basic Authentication": [[106, "id5"]], "Proxies": [[106, "proxies"]], "Sockets and Layers": [[106, "sockets-and-layers"]], "\u8a3b\u89e3": [[106, "footnotes"], [348, "notes"]], "Unicode HOWTO": [[105, "unicode-howto"]], "Introduction to Unicode": [[105, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[105, "definitions"]], "Encodings": [[105, "encodings"]], "Python's Unicode Support": [[105, "python-s-unicode-support"]], "The String Type": [[105, "the-string-type"]], "Converting to Bytes": [[105, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[105, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[105, "unicode-properties"]], "Comparing Strings": [[105, "comparing-strings"]], "Unicode Regular Expressions": [[105, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[105, "reading-and-writing-unicode-data"]], "Unicode filenames": [[105, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[105, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[105, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[105, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[105, "acknowledgements"], [468, "acknowledgements"], [463, "acknowledgements"], [464, "acknowledgements"], [462, "acknowledgements"], [467, "acknowledgements"], [461, "acknowledgements"], [466, "acknowledgements"], [465, "acknowledgements"], [229, "acknowledgements"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[118, "module-argparse"]], "\u6559\u5b78": [[118, null]], "Core Functionality": [[118, "core-functionality"]], "Quick Links for add_argument()": [[118, "quick-links-for-add-argument"]], "Creating a parser": [[118, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[118, "adding-arguments"]], "ArgumentParser \u7269\u4ef6": [[118, "argumentparser-objects"]], "prog": [[118, "prog"]], "usage": [[118, "usage"]], "\u63cf\u8ff0": [[118, "description"]], "epilog": [[118, "epilog"]], "parents": [[118, "parents"]], "formatter_class": [[118, "formatter-class"]], "prefix_chars": [[118, "prefix-chars"]], "fromfile_prefix_chars": [[118, "fromfile-prefix-chars"]], "argument_default": [[118, "argument-default"]], "allow_abbrev": [[118, "allow-abbrev"]], "conflict_handler": [[118, "conflict-handler"]], "add_help": [[118, "add-help"]], "exit_on_error": [[118, "exit-on-error"]], "The add_argument() method": [[118, "the-add-argument-method"]], "name or flags": [[118, "name-or-flags"]], "action": [[118, "action"]], "nargs": [[118, "nargs"]], "const": [[118, "const"]], "default": [[118, "default"]], "type": [[118, "type"]], "choices": [[118, "choices"]], "required": [[118, "required"]], "help": [[118, "help"]], "metavar": [[118, "metavar"]], "dest": [[118, "dest"]], "Action classes": [[118, "action-classes"]], "The parse_args() method": [[118, "the-parse-args-method"]], "Option value syntax": [[118, "option-value-syntax"]], "Invalid arguments": [[118, "invalid-arguments"]], "Arguments containing -": [[118, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[118, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[118, "beyond-sys-argv"]], "The Namespace object": [[118, "the-namespace-object"]], "Other utilities": [[118, "other-utilities"]], "Sub-commands": [[118, "sub-commands"]], "FileType \u7269\u4ef6": [[118, "filetype-objects"]], "Argument groups": [[118, "argument-groups"]], "Mutual exclusion": [[118, "mutual-exclusion"]], "Parser defaults": [[118, "parser-defaults"]], "Printing help": [[118, "printing-help"]], "Partial parsing": [[118, "partial-parsing"]], "Customizing file parsing": [[118, "customizing-file-parsing"]], "Exiting methods": [[118, "exiting-methods"]], "Intermixed parsing": [[118, "intermixed-parsing"]], "Upgrading optparse code": [[118, "upgrading-optparse-code"]], "abc --- Abstract Base Classes": [[114, "module-abc"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[117, "data-compression-and-archiving"]], "asynchat --- \u975e\u540c\u6b65 socket \u6307\u4ee4/\u56de\u61c9\u8655\u7406\u51fd\u5f0f": [[121, "module-asynchat"]], "asynchat Example": [[121, "asynchat-example"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[110, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[110, "using-2to3"]], "Fixers": [[110, "fixers"]], "lib2to3 --- 2to3's library": [[110, "module-lib2to3"]], "__future__ --- Future statement definitions": [[111, "module-__future__"]], "Futures": [[128, "futures"]], "Future \u51fd\u6578": [[128, "future-functions"]], "Future \u7269\u4ef6": [[128, "future-object"]], "Event Loop": [[125, "event-loop"]], "Event Loop Methods": [[125, "event-loop-methods"]], "Running and stopping the loop": [[125, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[125, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[125, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[125, "creating-futures-and-tasks"]], "Opening network connections": [[125, "opening-network-connections"]], "Creating network servers": [[125, "creating-network-servers"]], "Transferring files": [[125, "transferring-files"]], "TLS Upgrade": [[125, "tls-upgrade"]], "Watching file descriptors": [[125, "watching-file-descriptors"]], "Working with socket objects directly": [[125, "working-with-socket-objects-directly"]], "DNS": [[125, "dns"]], "Working with pipes": [[125, "working-with-pipes"]], "Unix signals": [[125, "unix-signals"]], "Executing code in thread or process pools": [[125, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[125, "error-handling-api"]], "Enabling debug mode": [[125, "enabling-debug-mode"]], "Running Subprocesses": [[125, "running-subprocesses"]], "Callback Handles": [[125, "callback-handles"]], "Server Objects": [[125, "server-objects"], [338, "server-objects"]], "Event Loop Implementations": [[125, "event-loop-implementations"]], "Hello World with call_soon()": [[125, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[125, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[125, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[125, "set-signal-handlers-for-sigint-and-sigterm"]], "\u5b89\u88dd Python \u6a21\u7d44": [[109, "installing-python-modules"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[109, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[109, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[109, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[109, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[109, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[109, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[109, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[109, "installing-binary-extensions"]], "\u9ad8\u968e API \u7d22\u5f15": [[123, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[123, "tasks"]], "\u4f47\u5217 (Queues)": [[123, "queues"], [133, "queues"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[123, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[123, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[123, "synchronization"]], "\u4f8b\u5916": [[123, "exceptions"], [133, "exceptions"], [126, "exceptions"], [34, "exceptions"], [412, "exceptions"], [428, "exceptions"], [409, "exceptions"], [407, "exceptions"], [337, "exceptions"], [341, "exceptions"], [340, "exceptions"], [348, "exceptions"], [343, "exceptions"], [271, "exceptions"], [262, "exceptions"], [231, "exceptions"], [166, "exceptions"]], "_thread --- Low-level threading API": [[113, "module-_thread"]], "__main__ --- Top-level code environment": [[112, "module-__main__"]], "__name__ == '__main__'": [[112, "name-main"]], "What is the \"top-level code environment\"?": [[112, "what-is-the-top-level-code-environment"]], "Idiomatic Usage": [[112, "idiomatic-usage"], [112, "id1"]], "Packaging Considerations": [[112, "packaging-considerations"]], "__main__.py in Python Packages": [[112, "main-py-in-python-packages"]], "import __main__": [[112, "import-main"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[119, "module-array"]], "\u5e73\u81fa\u652f\u63f4": [[130, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[130, "all-platforms"]], "Windows": [[130, "windows"], [482, "windows"], [482, "id9"], [482, "id18"], [482, "id27"], [482, "id35"], [482, "id44"], [482, "id52"], [482, "id60"], [482, "id70"], [482, "id81"], [482, "id91"], [482, "id100"], [482, "id110"], [482, "id128"], [482, "id139"], [482, "id149"], [482, "id159"], [482, "id169"], [482, "id180"], [482, "id191"], [482, "id206"], [482, "id216"], [482, "id227"], [482, "id238"], [482, "id249"], [482, "id257"], [482, "id265"], [482, "id276"], [482, "id290"], [482, "id300"], [482, "id311"], [482, "id320"], [482, "id327"], [482, "id335"], [482, "id352"], [482, "id361"], [482, "id374"], [482, "id384"], [482, "id397"], [482, "id410"], [482, "id416"], [482, "id423"], [482, "id437"], [482, "id442"], [482, "id453"], [482, "id458"], [482, "id475"], [482, "id486"], [482, "id499"], [482, "id509"], [482, "id521"], [482, "id524"], [482, "id531"], [482, "id576"], [482, "id585"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[130, "subprocess-support-on-windows"]], "macOS": [[130, "macos"], [482, "macos"], [482, "id10"], [482, "id19"], [482, "id36"], [482, "id45"], [482, "id53"], [482, "id61"], [482, "id71"], [482, "id82"], [482, "id101"], [482, "id111"], [482, "id119"], [482, "id129"], [482, "id140"], [482, "id150"], [482, "id160"], [482, "id170"], [482, "id181"], [482, "id207"], [482, "id217"], [482, "id228"], [482, "id239"], [482, "id266"], [482, "id283"], [482, "id291"], [482, "id301"], [482, "id312"], [482, "id321"], [482, "id336"], [482, "id362"], [482, "id375"], [482, "id385"]], "Runners": [[134, "runners"]], "Running an asyncio Program": [[134, "running-an-asyncio-program"]], "Runner context manager": [[134, "runner-context-manager"]], "Handling Keyboard Interruption": [[134, "handling-keyboard-interruption"]], "Policies": [[131, "policies"]], "Getting and Setting the Policy": [[131, "getting-and-setting-the-policy"]], "Policy Objects": [[131, "policy-objects"]], "Process Watchers": [[131, "process-watchers"]], "Custom Policies": [[131, "custom-policies"]], "\u4f4e\u968e API \u7d22\u5f15": [[129, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[129, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[129, "event-loop-methods"]], "\u50b3\u8f38": [[129, "transports"]], "\u5354\u5b9a": [[129, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[129, "event-loop-policies"]], "ast --- Abstract Syntax Trees": [[120, "module-ast"]], "Abstract Grammar": [[120, "abstract-grammar"]], "Node classes": [[120, "node-classes"]], "Literals": [[120, "literals"], [434, "literals"], [429, "literals"]], "Variables": [[120, "variables"]], "Expressions": [[120, "expressions"], [429, "expressions"]], "Subscripting": [[120, "subscripting"]], "Comprehensions": [[120, "comprehensions"]], "Statements": [[120, "statements"]], "Imports": [[120, "imports"]], "Control flow": [[120, "control-flow"]], "Pattern matching": [[120, "pattern-matching"]], "Function and class definitions": [[120, "function-and-class-definitions"]], "Async and await": [[120, "async-and-await"]], "ast Helpers": [[120, "ast-helpers"]], "Compiler Flags": [[120, "compiler-flags"]], "Command-Line Usage": [[120, "command-line-usage"], [379, "command-line-usage"], [377, "command-line-usage"]], "Queue": [[133, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[133, "priority-queue"]], "LIFO Queue": [[133, "lifo-queue"]], "\u5982\u4f55\u6392\u5e8f": [[104, "sorting-how-to"]], "\u57fa\u790e\u6392\u5e8f": [[104, "sorting-basics"]], "Key Functions": [[104, "key-functions"]], "Operator Module Functions": [[104, "operator-module-functions"]], "\u5347\u51aa\u8207\u964d\u51aa": [[104, "ascending-and-descending"]], "Sort Stability and Complex Sorts": [[104, "sort-stability-and-complex-sorts"]], "Decorate-Sort-Undecorate": [[104, "decorate-sort-undecorate"]], "Comparison Functions": [[104, "comparison-functions"]], "Odds and Ends": [[104, "odds-and-ends"]], "\u4e32\u6d41": [[135, "streams"]], "StreamReader": [[135, "streamreader"]], "StreamWriter": [[135, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[135, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[135, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[135, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[135, "register-an-open-socket-to-wait-for-data-using-streams"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[116, "generic-operating-system-services"]], "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09": [[108, "installing-python-modules-legacy-version"]], "Distutils based source distributions": [[108, "distutils-based-source-distributions"]], "Standard Build and Install": [[108, "standard-build-and-install"]], "Platform variations": [[108, "platform-variations"]], "Splitting the job up": [[108, "splitting-the-job-up"]], "How building works": [[108, "how-building-works"]], "How installation works": [[108, "how-installation-works"]], "Alternate Installation": [[108, "alternate-installation"]], "Alternate installation: the user scheme": [[108, "alternate-installation-the-user-scheme"]], "Alternate installation: the home scheme": [[108, "alternate-installation-the-home-scheme"]], "Alternate installation: Unix (the prefix scheme)": [[108, "alternate-installation-unix-the-prefix-scheme"]], "Alternate installation: Windows (the prefix scheme)": [[108, "alternate-installation-windows-the-prefix-scheme"]], "Custom Installation": [[108, "custom-installation"]], "Modifying Python's Search Path": [[108, "modifying-python-s-search-path"]], "Distutils Configuration Files": [[108, "distutils-configuration-files"]], "Location and names of config files": [[108, "location-and-names-of-config-files"]], "Syntax of config files": [[108, "syntax-of-config-files"]], "Building Extensions: Tips and Tricks": [[108, "building-extensions-tips-and-tricks"]], "Tweaking compiler/linker flags": [[108, "tweaking-compiler-linker-flags"]], "Using non-Microsoft compilers on Windows": [[108, "using-non-microsoft-compilers-on-windows"]], "Borland/CodeGear C++": [[108, "borland-codegear-c"]], "GNU C / Cygwin / MinGW": [[108, "gnu-c-cygwin-mingw"]], "Older Versions of Python and MinGW": [[108, "older-versions-of-python-and-mingw"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[102, "regular-expression-howto"]], "Simple Patterns": [[102, "simple-patterns"]], "Matching Characters": [[102, "matching-characters"]], "Repeating Things": [[102, "repeating-things"]], "Using Regular Expressions": [[102, "using-regular-expressions"]], "Compiling Regular Expressions": [[102, "compiling-regular-expressions"]], "The Backslash Plague": [[102, "the-backslash-plague"]], "Performing Matches": [[102, "performing-matches"]], "Module-Level Functions": [[102, "module-level-functions"], [267, "module-level-functions"]], "Compilation Flags": [[102, "compilation-flags"]], "More Pattern Power": [[102, "more-pattern-power"]], "More Metacharacters": [[102, "more-metacharacters"]], "Grouping": [[102, "grouping"]], "Non-capturing and Named Groups": [[102, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[102, "lookahead-assertions"]], "Modifying Strings": [[102, "modifying-strings"]], "Splitting Strings": [[102, "splitting-strings"]], "Search and Replace": [[102, "search-and-replace"], [246, "search-and-replace"]], "Common Problems": [[102, "common-problems"]], "Use String Methods": [[102, "use-string-methods"]], "match() versus search()": [[102, "match-versus-search"]], "Greedy versus Non-Greedy": [[102, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[102, "using-re-verbose"]], "Feedback": [[102, "feedback"]], "Transports and Protocols": [[132, "transports-and-protocols"]], "Transports": [[132, "transports"]], "Transports Hierarchy": [[132, "transports-hierarchy"]], "Base Transport": [[132, "base-transport"]], "Read-only Transports": [[132, "read-only-transports"]], "Write-only Transports": [[132, "write-only-transports"]], "Datagram Transports": [[132, "datagram-transports"]], "Subprocess Transports": [[132, "subprocess-transports"]], "Protocols": [[132, "protocols"], [385, "protocols"]], "Base Protocols": [[132, "base-protocols"]], "Base Protocol": [[132, "base-protocol"]], "Streaming Protocols": [[132, "streaming-protocols"]], "Buffered Streaming Protocols": [[132, "buffered-streaming-protocols"]], "Datagram Protocols": [[132, "datagram-protocols"]], "Subprocess Protocols": [[132, "subprocess-protocols"]], "TCP Echo Server": [[132, "tcp-echo-server"]], "TCP Echo Client": [[132, "tcp-echo-client"]], "UDP Echo Server": [[132, "udp-echo-server"]], "UDP Echo Client": [[132, "udp-echo-client"]], "Connecting Existing Sockets": [[132, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[132, "loop-subprocess-exec-and-subprocessprotocol"]], "Extending": [[127, "extending"]], "Writing a Custom Event Loop": [[127, "writing-a-custom-event-loop"]], "Future and Task private constructors": [[127, "future-and-task-private-constructors"]], "Task lifetime support": [[127, "task-lifetime-support"]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[115, "module-aifc"]], "Socket Programming HOWTO": [[103, "socket-programming-howto"]], "Sockets": [[103, "sockets"], [425, "sockets"]], "History": [[103, "history"]], "Creating a Socket": [[103, "creating-a-socket"]], "IPC": [[103, "ipc"]], "Using a Socket": [[103, "using-a-socket"]], "Binary Data": [[103, "binary-data"]], "Disconnecting": [[103, "disconnecting"]], "When Sockets Die": [[103, "when-sockets-die"]], "Non-blocking Sockets": [[103, "non-blocking-sockets"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[122, "module-asyncio"]], "Hello World!": [[122, null]], "\u9ad8\u968e API": [[122, null]], "\u4f4e\u968e API": [[122, null]], "\u6307\u5357\u8207\u6559\u5b78": [[122, null]], "Unicode\u7269\u4ef6\u8207\u7de8\u78bc": [[62, "unicode-objects-and-codecs"]], "Unicode Objects": [[62, "unicode-objects"]], "Unicode Type": [[62, "unicode-type"]], "Unicode Character Properties": [[62, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[62, "creating-and-accessing-unicode-strings"]], "Locale Encoding": [[62, "locale-encoding"]], "File System Encoding": [[62, "file-system-encoding"]], "wchar_t Support": [[62, "wchar-t-support"]], "Built-in Codecs": [[62, "built-in-codecs"]], "Generic Codecs": [[62, "generic-codecs"]], "UTF-8 Codecs": [[62, "utf-8-codecs"]], "UTF-32 Codecs": [[62, "utf-32-codecs"]], "UTF-16 Codecs": [[62, "utf-16-codecs"]], "UTF-7 Codecs": [[62, "utf-7-codecs"]], "Unicode-Escape Codecs": [[62, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[62, "raw-unicode-escape-codecs"]], "Latin-1 Codecs": [[62, "latin-1-codecs"]], "ASCII Codecs": [[62, "ascii-codecs"]], "Character Map Codecs": [[62, "character-map-codecs"]], "MBCS codecs for Windows": [[62, "mbcs-codecs-for-windows"]], "Methods & Slots": [[62, "methods-slots"]], "Methods and Slot Functions": [[62, "methods-and-slot-functions"]], "Mapping Protocol": [[39, "mapping-protocol"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[47, "old-buffer-protocol"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[36, "iterator-objects"]], "\u5207\u7247\u7269\u4ef6": [[54, "slice-objects"]], "Ellipsis Object": [[54, "ellipsis-object"]], "Number Protocol": [[46, "number-protocol"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[56, "common-object-structures"]], "Base object types and macros": [[56, "base-object-types-and-macros"]], "Implementing functions and methods": [[56, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[56, "accessing-attributes-of-extension-types"]], "C API Stability": [[55, "c-api-stability"]], "Stable Application Binary Interface": [[55, "stable-application-binary-interface"]], "Limited API Scope and Performance": [[55, "limited-api-scope-and-performance"]], "Limited API Caveats": [[55, "limited-api-caveats"]], "Platform Considerations": [[55, "platform-considerations"]], "Contents of Limited API": [[55, "contents-of-limited-api"]], "Sequence Protocol": [[52, "sequence-protocol"]], "Type Objects": [[61, "type-objects"], [59, "type-objects"], [344, "type-objects"]], "Quick Reference": [[61, "quick-reference"]], "\"tp slots\"": [[61, "tp-slots"]], "sub-slots": [[61, "sub-slots"]], "slot typedefs": [[61, "slot-typedefs"]], "PyTypeObject Definition": [[61, "pytypeobject-definition"]], "PyObject Slots": [[61, "pyobject-slots"]], "PyVarObject Slots": [[61, "pyvarobject-slots"]], "PyTypeObject Slots": [[61, "pytypeobject-slots"]], "Static Types": [[61, "static-types"]], "Number Object Structures": [[61, "number-object-structures"]], "Mapping Object Structures": [[61, "mapping-object-structures"]], "Sequence Object Structures": [[61, "sequence-object-structures"]], "Buffer Object Structures": [[61, "buffer-object-structures"]], "Async Object Structures": [[61, "async-object-structures"]], "Slot Type typedefs": [[61, "slot-type-typedefs"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[65, "weak-reference-objects"]], "Set Objects": [[53, "set-objects"]], "Object Implementation Support": [[49, "object-implementation-support"]], "MemoryView \u7269\u4ef6": [[42, "index-0"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[66, "python-documentation-contents"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[44, "module-objects"]], "Initializing C modules": [[44, "initializing-c-modules"]], "Single-phase initialization": [[44, "single-phase-initialization"]], "Multi-phase initialization": [[44, "multi-phase-initialization"]], "Low-level module creation functions": [[44, "low-level-module-creation-functions"]], "Support functions": [[44, "support-functions"]], "Module lookup": [[44, "module-lookup"]], "\u53c3\u7167\u8a08\u6578": [[50, "reference-counting"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[41, "memory-management"]], "\u7e3d\u89bd": [[41, "overview"], [258, "overview"]], "Allocator Domains": [[41, "allocator-domains"]], "Raw Memory Interface": [[41, "raw-memory-interface"]], "Memory Interface": [[41, "memory-interface"]], "Object allocators": [[41, "object-allocators"]], "Default Memory Allocators": [[41, "default-memory-allocators"]], "Customize Memory Allocators": [[41, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[41, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[41, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[41, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[41, "tracemalloc-c-api"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[37, "list-objects"]], "\u5de5\u5177": [[63, "utilities"]], "\u7248\u6b0a\u5ba3\u544a": [[67, "copyright"]], "Object Protocol": [[48, "object-protocol"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[43, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[43, "method-objects"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[57, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[57, "system-functions"]], "\u884c\u7a0b\uff08Process\uff09\u63a7\u5236": [[57, "process-control"]], "\u5143\u7d44\uff08Tuple\uff09\u7269\u4ef6": [[58, "tuple-objects"]], "Struct Sequence Objects": [[58, "struct-sequence-objects"]], "None \u7269\u4ef6": [[45, "the-none-object"]], "Iterator Protocol": [[35, "iterator-protocol"]], "Coding standards": [[34, "coding-standards"]], "Include Files": [[34, "include-files"]], "Useful macros": [[34, "useful-macros"]], "Objects, Types and Reference Counts": [[34, "objects-types-and-reference-counts"]], "Reference Count Details": [[34, "reference-count-details"]], "Types": [[34, "types"]], "\u5d4c\u5165\u5f0fPython": [[34, "embedding-python"]], "Debugging Builds": [[34, "debugging-builds"]], "Reflection": [[51, "reflection"]], "\u6574\u6578\u7269\u4ef6": [[38, "integer-objects"]], "Data marshalling support": [[40, "data-marshalling-support"]], "Creating Heap-Allocated Types": [[59, "creating-heap-allocated-types"]], "The Very High Level Layer": [[64, "the-very-high-level-layer"]], "Objects for Type Hinting": [[60, "objects-for-type-hinting"]], "xmlrpc --- XMLRPC \u670d\u52d9\u7aef\u8207\u5ba2\u6236\u7aef\u6a21\u7d44": [[417, "xmlrpc-xmlrpc-server-and-client-modules"]], "Alternate Implementations": [[433, "alternate-implementations"]], "Notation": [[433, "notation"]], "XML \u8655\u7406\u6a21\u7d44": [[408, "module-xml"]], "XML vulnerabilities": [[408, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[408, "the-defusedxml-package"]], "Lexical analysis": [[434, "lexical-analysis"]], "Line structure": [[434, "line-structure"]], "Logical lines": [[434, "logical-lines"]], "Physical lines": [[434, "physical-lines"]], "Comments": [[434, "comments"]], "Encoding declarations": [[434, "encoding-declarations"]], "Explicit line joining": [[434, "explicit-line-joining"]], "Implicit line joining": [[434, "implicit-line-joining"]], "Blank lines": [[434, "blank-lines"]], "Indentation": [[434, "indentation"]], "Whitespace between tokens": [[434, "whitespace-between-tokens"]], "Other tokens": [[434, "other-tokens"]], "Identifiers and keywords": [[434, "identifiers"]], "Keywords": [[434, "keywords"]], "Soft Keywords": [[434, "soft-keywords"]], "Reserved classes of identifiers": [[434, "reserved-classes-of-identifiers"]], "String and Bytes literals": [[434, "string-and-bytes-literals"]], "String literal concatenation": [[434, "string-literal-concatenation"]], "Formatted string literals": [[434, "formatted-string-literals"]], "Numeric literals": [[434, "numeric-literals"]], "Integer literals": [[434, "integer-literals"]], "Floating point literals": [[434, "floating-point-literals"]], "Imaginary literals": [[434, "imaginary-literals"]], "Operators": [[434, "operators"], [296, "operators"], [259, "operators"], [259, "id1"], [259, "id2"]], "Delimiters": [[434, "delimiters"]], "Compound statements": [[426, "compound-statements"]], "The if statement": [[426, "the-if-statement"]], "The while statement": [[426, "the-while-statement"]], "The for statement": [[426, "the-for-statement"]], "The try statement": [[426, "the-try-statement"]], "except clause": [[426, "except-clause"]], "except* clause": [[426, "except-star"]], "else clause": [[426, "else-clause"]], "finally clause": [[426, "finally-clause"]], "The with statement": [[426, "the-with-statement"]], "The match statement": [[426, "the-match-statement"]], "Overview": [[426, "overview"], [251, "overview"]], "Guards": [[426, "guards"]], "Irrefutable Case Blocks": [[426, "irrefutable-case-blocks"]], "Patterns": [[426, "patterns"]], "OR Patterns": [[426, "or-patterns"]], "AS Patterns": [[426, "as-patterns"]], "Literal Patterns": [[426, "literal-patterns"]], "Capture Patterns": [[426, "capture-patterns"]], "Wildcard Patterns": [[426, "wildcard-patterns"]], "Value Patterns": [[426, "value-patterns"]], "Group Patterns": [[426, "group-patterns"]], "Sequence Patterns": [[426, "sequence-patterns"]], "Mapping Patterns": [[426, "mapping-patterns"]], "Class Patterns": [[426, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[426, "function-definitions"]], "Class definitions": [[426, "class-definitions"]], "\u5354\u7a0b": [[426, "coroutines"], [427, "coroutines"], [138, "coroutines"]], "Coroutine function definition": [[426, "coroutine-function-definition"]], "The async for statement": [[426, "the-async-for-statement"]], "The async with statement": [[426, "the-async-with-statement"]], "zoneinfo --- IANA time zone support": [[424, "module-zoneinfo"]], "Using ZoneInfo": [[424, "using-zoneinfo"]], "Data sources": [[424, "data-sources"]], "Configuring the data sources": [[424, "configuring-the-data-sources"]], "Compile-time configuration": [[424, "compile-time-configuration"]], "Environment configuration": [[424, "environment-configuration"]], "Runtime configuration": [[424, "runtime-configuration"]], "The ZoneInfo class": [[424, "the-zoneinfo-class"]], "String representations": [[424, "string-representations"]], "Pickle serialization": [[424, "pickle-serialization"]], "\u51fd\u5f0f": [[424, "functions"], [412, "functions"], [412, "elementinclude-functions"], [404, "functions"], [381, "functions"], [337, "functions"], [344, "functions"], [365, "functions"], [250, "functions"], [176, "functions"], [178, "functions"], [151, "functions"]], "Globals": [[424, "globals"]], "Exceptions and warnings": [[424, "exceptions-and-warnings"]], "Data model": [[427, "data-model"]], "Objects, values and types": [[427, "objects-values-and-types"]], "The standard type hierarchy": [[427, "the-standard-type-hierarchy"]], "Special method names": [[427, "special-method-names"]], "Basic customization": [[427, "basic-customization"]], "Customizing attribute access": [[427, "customizing-attribute-access"]], "Customizing module attribute access": [[427, "customizing-module-attribute-access"]], "Implementing Descriptors": [[427, "implementing-descriptors"]], "Invoking Descriptors": [[427, "invoking-descriptors"]], "__slots__": [[427, "slots"], [471, "slots"]], "Notes on using __slots__": [[427, "notes-on-using-slots"]], "Customizing class creation": [[427, "customizing-class-creation"]], "Metaclasses": [[427, "metaclasses"]], "Resolving MRO entries": [[427, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[427, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[427, "preparing-the-class-namespace"]], "Executing the class body": [[427, "executing-the-class-body"]], "Creating the class object": [[427, "creating-the-class-object"]], "Uses for metaclasses": [[427, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[427, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[427, "emulating-generic-types"]], "The purpose of __class_getitem__": [[427, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[427, "class-getitem-versus-getitem"]], "Emulating callable objects": [[427, "emulating-callable-objects"]], "Emulating container types": [[427, "emulating-container-types"]], "Emulating numeric types": [[427, "emulating-numeric-types"]], "With Statement Context Managers": [[427, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[427, "customizing-positional-arguments-in-class-pattern-matching"]], "Special method lookup": [[427, "special-method-lookup"]], "Awaitable Objects": [[427, "awaitable-objects"]], "Coroutine Objects": [[427, "coroutine-objects"]], "Asynchronous Iterators": [[427, "asynchronous-iterators"]], "Asynchronous Context Managers": [[427, "asynchronous-context-managers"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[425, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[425, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[425, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.12.0a0 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[425, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[425, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[425, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[425, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.12.0a0 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[425, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[425, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[425, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[425, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[425, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[425, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[425, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[425, "xml-remote-procedure-calls"]], "test_epoll": [[425, "test-epoll"]], "Select kqueue": [[425, "select-kqueue"]], "SipHash24": [[425, "siphash24"]], "strtod \u8207 dtoa": [[425, "strtod-and-dtoa"]], "OpenSSL": [[425, "openssl"]], "expat": [[425, "expat"]], "libffi": [[425, "libffi"]], "zlib": [[425, "zlib"], [475, "zlib"], [478, "zlib"]], "cfuhash": [[425, "cfuhash"]], "libmpdec": [[425, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[425, "w3c-c14n-test-suite"]], "xml.etree.ElementTree --- The ElementTree XML API": [[412, "module-xml.etree.ElementTree"]], "Tutorial": [[412, "tutorial"], [340, "tutorial"], [292, "tutorial"]], "XML tree and elements": [[412, "xml-tree-and-elements"]], "Parsing XML": [[412, "parsing-xml"]], "Pull API for non-blocking parsing": [[412, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[412, "finding-interesting-elements"]], "Modifying an XML File": [[412, "modifying-an-xml-file"]], "Building XML documents": [[412, "building-xml-documents"]], "Parsing XML with Namespaces": [[412, "parsing-xml-with-namespaces"]], "XPath support": [[412, "xpath-support"]], "Supported XPath syntax": [[412, "supported-xpath-syntax"]], "Reference": [[412, "reference"], [412, "id4"], [340, "reference"], [283, "reference"]], "XInclude support": [[412, "xinclude-support"]], "Element Objects": [[412, "element-objects"], [409, "element-objects"]], "ElementTree \u7269\u4ef6": [[412, "elementtree-objects"]], "QName \u7269\u4ef6": [[412, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[412, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[412, "xmlparser-objects"], [314, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[412, "xmlpullparser-objects"]], "xmlrpc.client --- XML-RPC client access": [[418, "module-xmlrpc.client"]], "ServerProxy \u7269\u4ef6": [[418, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[418, "datetime-objects"]], "Binary Objects": [[418, "binary-objects"]], "Fault Objects": [[418, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[418, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[418, "multicall-objects"]], "Convenience Functions": [[418, "convenience-functions"]], "Example of Client Usage": [[418, "example-of-client-usage"]], "Example of Client and Server Usage": [[418, "example-of-client-and-server-usage"]], "xml.sax.xmlreader --- Interface for XML parsers": [[415, "module-xml.sax.xmlreader"]], "XMLReader \u7269\u4ef6": [[415, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[415, "incrementalparser-objects"]], "Locator Objects": [[415, "locator-objects"]], "InputSource \u7269\u4ef6": [[415, "inputsource-objects"]], "The Attributes Interface": [[415, "the-attributes-interface"]], "The AttributesNS Interface": [[415, "the-attributesns-interface"]], "\u6dfa\u5617\u6ecb\u5473": [[438, "whetting-your-appetite"]], "Top-level components": [[436, "top-level-components"]], "Complete Python programs": [[436, "complete-python-programs"]], "File input": [[436, "file-input"]], "Interactive input": [[436, "interactive-input"]], "Expression input": [[436, "expression-input"]], "xml.sax.saxutils --- SAX Utilities": [[416, "module-xml.sax.saxutils"]], "Arithmetic conversions": [[429, "arithmetic-conversions"]], "Atoms": [[429, "atoms"]], "Identifiers (Names)": [[429, "atom-identifiers"]], "Parenthesized forms": [[429, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[429, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[429, "list-displays"]], "Set displays": [[429, "set-displays"]], "Dictionary displays": [[429, "dictionary-displays"]], "Generator expressions": [[429, "generator-expressions"]], "Yield expressions": [[429, "yield-expressions"]], "Generator-iterator methods": [[429, "generator-iterator-methods"]], "Asynchronous generator functions": [[429, "asynchronous-generator-functions"]], "Asynchronous generator-iterator methods": [[429, "asynchronous-generator-iterator-methods"]], "Primaries": [[429, "primaries"]], "Attribute references": [[429, "attribute-references"]], "Subscriptions": [[429, "subscriptions"]], "Slicings": [[429, "slicings"]], "Calls": [[429, "calls"]], "Await expression": [[429, "await-expression"]], "The power operator": [[429, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[429, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[429, "binary-arithmetic-operations"]], "Shifting operations": [[429, "shifting-operations"]], "Binary bitwise operations": [[429, "binary-bitwise-operations"]], "Value comparisons": [[429, "value-comparisons"]], "Membership test operations": [[429, "membership-test-operations"]], "Identity comparisons": [[429, "is-not"]], "Boolean operations": [[429, "boolean-operations"]], "Assignment expressions": [[429, "assignment-expressions"], [480, "assignment-expressions"]], "Conditional expressions": [[429, "conditional-expressions"]], "Lambdas": [[429, "lambda"]], "Expression lists": [[429, "expression-lists"]], "Evaluation order": [[429, "evaluation-order"]], "Operator precedence": [[429, "operator-precedence"]], "xmlrpc.server --- Basic XML-RPC servers": [[419, "module-xmlrpc.server"]], "SimpleXMLRPCServer \u7269\u4ef6": [[419, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[419, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[419, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[419, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[419, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[419, "doccgixmlrpcrequesthandler"]], "zlib --- Compression compatible with gzip": [[423, "module-zlib"]], "Class\uff08\u985e\u5225\uff09": [[439, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[439, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[439, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[439, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[439, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[439, "class-definition-syntax"]], "Class \u7269\u4ef6": [[439, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[439, "instance-objects"]], "Method \u7269\u4ef6": [[439, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[439, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[439, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[439, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[439, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[439, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[439, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[439, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[439, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[439, "generator-expressions"]], "xml.sax --- Support for SAX2 parsers": [[413, "module-xml.sax"]], "SAXException \u7269\u4ef6": [[413, "saxexception-objects"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[430, "full-grammar-specification"]], "zipimport --- Import modules from Zip archives": [[422, "module-zipimport"]], "zipimporter \u7269\u4ef6": [[422, "zipimporter-objects"]], "zipfile --- Work with ZIP archives": [[421, "module-zipfile"]], "ZipFile \u7269\u4ef6": [[421, "zipfile-objects"]], "Path Objects": [[421, "path-objects"]], "PyZipFile \u7269\u4ef6": [[421, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[421, "zipinfo-objects"]], "Command-Line Interface": [[421, "command-line-interface"], [311, "command-line-interface"], [357, "command-line-interface"]], "Command-line options": [[421, "command-line-options"], [357, "command-line-options"]], "Decompression pitfalls": [[421, "decompression-pitfalls"]], "From file itself": [[421, "from-file-itself"]], "File System limitations": [[421, "file-system-limitations"]], "Resources limitations": [[421, "resources-limitations"]], "Interruption": [[421, "interruption"]], "Default behaviors of extraction": [[421, "default-behaviors-of-extraction"]], "zipapp --- Manage executable Python zip archives": [[420, "module-zipapp"]], "\u57fa\u672c\u7bc4\u4f8b": [[420, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[420, "command-line-interface"], [366, "command-line-interface"]], "Python API": [[420, "python-api"]], "Specifying the Interpreter": [[420, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[420, "creating-standalone-applications-with-zipapp"]], "Making a Windows executable": [[420, "making-a-windows-executable"]], "Caveats": [[420, "caveats"]], "The Python Zip Application Archive Format": [[420, "the-python-zip-application-archive-format"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[432, "the-python-language-reference"]], "Execution model": [[428, "execution-model"]], "Structure of a program": [[428, "structure-of-a-program"]], "Naming and binding": [[428, "naming-and-binding"]], "Binding of names": [[428, "binding-of-names"]], "Resolution of names": [[428, "resolution-of-names"]], "Builtins and restricted execution": [[428, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[428, "interaction-with-dynamic-features"]], "\u8cc7\u6599\u7d50\u69cb": [[441, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[441, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[441, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[441, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[441, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[441, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[441, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[441, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[441, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[441, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[441, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[441, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[441, "comparing-sequences-and-other-types"]], "xml.sax.handler --- Base classes for SAX handlers": [[414, "module-xml.sax.handler"]], "ContentHandler \u7269\u4ef6": [[414, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[414, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[414, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[414, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[414, "lexicalhandler-objects"]], "\u9644\u9304": [[437, "appendix"]], "\u4e92\u52d5\u6a21\u5f0f": [[437, "interactive-mode"], [447, "interactive-mode"]], "\u932f\u8aa4\u8655\u7406": [[437, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[437, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[437, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[437, "the-customization-modules"]], "xml.dom.minidom --- Minimal DOM implementation": [[410, "module-xml.dom.minidom"]], "DOM \u7269\u4ef6": [[410, "dom-objects"]], "DOM \u7bc4\u4f8b": [[410, "dom-example"]], "minidom and the DOM standard": [[410, "minidom-and-the-dom-standard"]], "xml.dom --- The Document Object Model API": [[409, "module-xml.dom"]], "\u6a21\u7d44\u5167\u5bb9": [[409, "module-contents"], [385, "module-contents"], [334, "module-contents"], [319, "module-contents"], [337, "module-contents"], [333, "module-contents"], [210, "module-contents"], [174, "module-contents"]], "Objects in the DOM": [[409, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[409, "domimplementation-objects"]], "Node Objects": [[409, "node-objects"]], "NodeList \u7269\u4ef6": [[409, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[409, "documenttype-objects"]], "Document Objects": [[409, "document-objects"]], "Attr Objects": [[409, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[409, "namednodemap-objects"]], "Comment Objects": [[409, "comment-objects"]], "Text and CDATASection Objects": [[409, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[409, "processinginstruction-objects"]], "Conformance": [[409, "conformance"]], "Type Mapping": [[409, "type-mapping"]], "Accessor Methods": [[409, "accessor-methods"]], "The import system": [[431, "the-import-system"]], "importlib": [[431, "importlib"], [477, "importlib"], [478, "importlib"], [478, "id3"], [479, "importlib"], [479, "id6"], [476, "importlib"], [481, "importlib"]], "Packages": [[431, "packages"]], "Regular packages": [[431, "regular-packages"]], "Namespace packages": [[431, "namespace-packages"]], "Searching": [[431, "searching"]], "The module cache": [[431, "the-module-cache"]], "Finders and loaders": [[431, "finders-and-loaders"]], "Import hooks": [[431, "import-hooks"]], "The meta path": [[431, "the-meta-path"]], "Loading": [[431, "loading"]], "Loaders": [[431, "loaders"]], "Submodules": [[431, "submodules"]], "Module spec": [[431, "module-spec"]], "Import-related module attributes": [[431, "import-related-module-attributes"]], "module.__path__": [[431, "module-path"]], "Module reprs": [[431, "module-reprs"]], "Cached bytecode invalidation": [[431, "cached-bytecode-invalidation"]], "The Path Based Finder": [[431, "the-path-based-finder"]], "Path entry finders": [[431, "path-entry-finders"]], "Path entry finder protocol": [[431, "path-entry-finder-protocol"]], "Replacing the standard import system": [[431, "replacing-the-standard-import-system"]], "Package Relative Imports": [[431, "package-relative-imports"]], "Special considerations for __main__": [[431, "special-considerations-for-main"]], "__main__.__spec__": [[431, "main-spec"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[411, "module-xml.dom.pulldom"]], "DOMEventStream \u7269\u4ef6": [[411, "domeventstream-objects"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[440, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[440, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[440, "for-statements"]], "range() \u51fd\u5f0f": [[440, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[440, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[440, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[440, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[440, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[440, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[440, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[440, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[440, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[440, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[440, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[440, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[440, "function-examples"]], "\u56de\u9867": [[440, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[440, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[440, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[440, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[440, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[440, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[440, "intermezzo-coding-style"]], "Simple statements": [[435, "simple-statements"]], "Expression statements": [[435, "expression-statements"]], "Assignment statements": [[435, "assignment-statements"]], "Augmented assignment statements": [[435, "augmented-assignment-statements"]], "Annotated assignment statements": [[435, "annotated-assignment-statements"]], "The assert statement": [[435, "the-assert-statement"]], "The pass statement": [[435, "the-pass-statement"]], "The del statement": [[435, "the-del-statement"]], "The return statement": [[435, "the-return-statement"]], "The yield statement": [[435, "the-yield-statement"]], "The raise statement": [[435, "the-raise-statement"]], "The break statement": [[435, "the-break-statement"]], "The continue statement": [[435, "the-continue-statement"]], "The import statement": [[435, "the-import-statement"]], "Future statements": [[435, "future-statements"]], "The global statement": [[435, "the-global-statement"]], "The nonlocal statement": [[435, "the-nonlocal-statement"]], "uuid --- UUID objects according to RFC 4122": [[397, "module-uuid"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[374, "module-tkinter.tix"]], "Using Tix": [[374, "using-tix"]], "Tix Widgets": [[374, "tix-widgets"]], "Basic Widgets": [[374, "basic-widgets"]], "File Selectors": [[374, "file-selectors"]], "Hierarchical ListBox": [[374, "hierarchical-listbox"]], "Tabular ListBox": [[374, "tabular-listbox"]], "Manager Widgets": [[374, "manager-widgets"]], "Image Types": [[374, "image-types"]], "Miscellaneous Widgets": [[374, "miscellaneous-widgets"]], "Form Geometry Manager": [[374, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[374, "tix-commands"]], "venv --- Creation of virtual environments": [[398, "module-venv"]], "Creating virtual environments": [[398, "creating-virtual-environments"]], "How venvs work": [[398, "how-venvs-work"]], "API": [[398, "api"], [381, "api"]], "An example of extending EnvBuilder": [[398, "an-example-of-extending-envbuilder"]], "wsgiref --- WSGI Utilities and Reference Implementation": [[406, "module-wsgiref"]], "wsgiref.util -- WSGI environment utilities": [[406, "module-wsgiref.util"]], "wsgiref.headers -- WSGI response header tools": [[406, "module-wsgiref.headers"]], "wsgiref.simple_server -- a simple WSGI HTTP server": [[406, "module-wsgiref.simple_server"]], "wsgiref.validate --- WSGI conformance checker": [[406, "module-wsgiref.validate"]], "wsgiref.handlers -- server/gateway base classes": [[406, "module-wsgiref.handlers"]], "wsgiref.types -- WSGI types for static type checking": [[406, "module-wsgiref.types"]], "wave --- Read and write WAV files": [[400, "module-wave"]], "Wave_read \u7269\u4ef6": [[400, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[400, "wave-write-objects"]], "turtle --- \u9f9c\u5716\u5b78": [[383, "module-turtle"]], "\u4ecb\u7d39": [[383, "introduction"]], "Turtle star": [[383, null]], "Overview of available Turtle and Screen methods": [[383, "overview-of-available-turtle-and-screen-methods"]], "Turtle methods": [[383, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[383, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[383, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[383, "turtle-motion"]], "Tell Turtle's state": [[383, "tell-turtle-s-state"]], "Settings for measurement": [[383, "settings-for-measurement"]], "Pen control": [[383, "pen-control"]], "Drawing state": [[383, "drawing-state"]], "Color control": [[383, "color-control"]], "Filling": [[383, "filling"]], "More drawing control": [[383, "more-drawing-control"]], "Turtle state": [[383, "turtle-state"]], "Visibility": [[383, "visibility"]], "Appearance": [[383, "appearance"]], "Using events": [[383, "using-events"]], "Special Turtle methods": [[383, "special-turtle-methods"]], "Compound shapes": [[383, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[383, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[383, "window-control"]], "Animation control": [[383, "animation-control"]], "Using screen events": [[383, "using-screen-events"]], "Input methods": [[383, "input-methods"]], "Settings and special methods": [[383, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[383, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[383, "public-classes"]], "Help and configuration": [[383, "help-and-configuration"]], "How to use help": [[383, "how-to-use-help"]], "Translation of docstrings into different languages": [[383, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[383, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[383, "module-turtledemo"]], "Changes since Python 2.6": [[383, "changes-since-python-2-6"]], "Changes since Python 3.0": [[383, "changes-since-python-3-0"]], "MS Windows \u7279\u6709\u670d\u52d9": [[403, "ms-windows-specific-services"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[382, "module-tty"]], "urllib.parse --- Parse URLs into components": [[393, "module-urllib.parse"]], "URL Parsing": [[393, "url-parsing"]], "Parsing ASCII Encoded Bytes": [[393, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[393, "structured-parse-results"]], "URL Quoting": [[393, "url-quoting"]], "trace --- Trace or track Python statement execution": [[379, "module-trace"]], "Main options": [[379, "main-options"]], "Modifiers": [[379, "modifiers"]], "Filters": [[379, "filters"]], "Programmatic Interface": [[379, "programmatic-interface"], [300, "programmatic-interface"]], "unittest.mock --- getting started": [[389, "unittest-mock-getting-started"]], "Using Mock": [[389, "using-mock"]], "Mock Patching Methods": [[389, "mock-patching-methods"]], "Mock for Method Calls on an Object": [[389, "mock-for-method-calls-on-an-object"]], "Mocking Classes": [[389, "mocking-classes"]], "Naming your mocks": [[389, "naming-your-mocks"]], "Tracking all Calls": [[389, "tracking-all-calls"]], "Setting Return Values and Attributes": [[389, "setting-return-values-and-attributes"]], "Raising exceptions with mocks": [[389, "raising-exceptions-with-mocks"]], "Side effect functions and iterables": [[389, "side-effect-functions-and-iterables"]], "Mocking asynchronous iterators": [[389, "mocking-asynchronous-iterators"]], "Mocking asynchronous context manager": [[389, "mocking-asynchronous-context-manager"]], "Creating a Mock from an Existing Object": [[389, "creating-a-mock-from-an-existing-object"]], "Patch Decorators": [[389, "patch-decorators"]], "Further Examples": [[389, "further-examples"]], "Mocking chained calls": [[389, "mocking-chained-calls"]], "Partial mocking": [[389, "partial-mocking"]], "Mocking a Generator Method": [[389, "mocking-a-generator-method"]], "Applying the same patch to every test method": [[389, "applying-the-same-patch-to-every-test-method"]], "Mocking Unbound Methods": [[389, "mocking-unbound-methods"]], "Checking multiple calls with mock": [[389, "checking-multiple-calls-with-mock"]], "Coping with mutable arguments": [[389, "coping-with-mutable-arguments"]], "Nesting Patches": [[389, "nesting-patches"]], "Mocking a dictionary with MagicMock": [[389, "mocking-a-dictionary-with-magicmock"]], "Mock subclasses and their attributes": [[389, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[389, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[389, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[389, "more-complex-argument-matching"]], "tkinter.ttk --- Tk themed widgets": [[375, "module-tkinter.ttk"]], "Using Ttk": [[375, "using-ttk"]], "Ttk Widgets": [[375, "ttk-widgets"]], "Widget": [[375, "widget"]], "Standard Options": [[375, "standard-options"]], "Scrollable Widget Options": [[375, "scrollable-widget-options"]], "Label Options": [[375, "label-options"]], "Compatibility Options": [[375, "compatibility-options"]], "Widget States": [[375, "widget-states"]], "ttk.Widget": [[375, "ttk-widget"]], "Combobox": [[375, "combobox"]], "Options": [[375, "options"], [375, "id1"], [375, "id3"], [375, "id5"], [375, "id6"], [375, "id7"]], "Virtual events": [[375, "virtual-events"], [375, "id2"]], "ttk.Combobox": [[375, "ttk-combobox"]], "Spinbox": [[375, "spinbox"]], "ttk.Spinbox": [[375, "ttk-spinbox"]], "Notebook": [[375, "notebook"]], "Tab Options": [[375, "tab-options"]], "Tab Identifiers": [[375, "tab-identifiers"]], "Virtual Events": [[375, "id4"], [375, "id8"]], "ttk.Notebook": [[375, "ttk-notebook"]], "Progressbar": [[375, "progressbar"]], "ttk.Progressbar": [[375, "ttk-progressbar"]], "Separator": [[375, "separator"]], "Sizegrip": [[375, "sizegrip"]], "Platform-specific notes": [[375, "platform-specific-notes"]], "Bugs": [[375, "bugs"]], "Treeview": [[375, "treeview"]], "Item Options": [[375, "item-options"]], "Tag Options": [[375, "tag-options"]], "Column Identifiers": [[375, "column-identifiers"]], "ttk.Treeview": [[375, "ttk-treeview"]], "Ttk Styling": [[375, "ttk-styling"]], "Layouts": [[375, "layouts"]], "unicodedata --- Unicode Database": [[386, "module-unicodedata"]], "types --- Dynamic type creation and names for built-in types": [[384, "module-types"]], "Dynamic Type Creation": [[384, "dynamic-type-creation"]], "Standard Interpreter Types": [[384, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[384, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[384, "coroutine-utility-functions"]], "winreg --- Windows registry access": [[404, "module-winreg"]], "\u5e38\u6578": [[404, "constants"], [385, "constant"], [337, "constants"], [341, "constants"], [275, "constants"], [234, "constants"], [185, "constants"], [182, "constants"], [154, "constants"], [136, "constants"]], "HKEY_* Constants": [[404, "hkey-constants"]], "Access Rights": [[404, "access-rights"]], "64-bit Specific": [[404, "bit-specific"]], "Value Types": [[404, "value-types"]], "Registry Handle Objects": [[404, "registry-handle-objects"]], "typing --- Support for type hints": [[385, "module-typing"]], "Relevant PEPs": [[385, "relevant-peps"]], "Type aliases": [[385, "type-aliases"]], "NewType": [[385, "newtype"]], "Callable": [[385, "callable"]], "Generics": [[385, "generics"]], "User-defined generic types": [[385, "user-defined-generic-types"]], "Any \u578b\u5225": [[385, "the-any-type"]], "Nominal vs structural subtyping": [[385, "nominal-vs-structural-subtyping"]], "Special typing primitives": [[385, "special-typing-primitives"]], "Special types": [[385, "special-types"]], "Special forms": [[385, "special-forms"]], "Building generic types": [[385, "building-generic-types"]], "Other special directives": [[385, "other-special-directives"]], "Generic concrete collections": [[385, "generic-concrete-collections"]], "Corresponding to built-in types": [[385, "corresponding-to-built-in-types"]], "Corresponding to types in collections": [[385, "corresponding-to-types-in-collections"]], "Other concrete types": [[385, "other-concrete-types"]], "Abstract Base Classes": [[385, "abstract-base-classes"]], "Corresponding to collections in collections.abc": [[385, "corresponding-to-collections-in-collections-abc"]], "Corresponding to other types in collections.abc": [[385, "corresponding-to-other-types-in-collections-abc"]], "Asynchronous programming": [[385, "asynchronous-programming"]], "Context manager types": [[385, "context-manager-types"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[385, "functions-and-decorators"]], "Introspection helpers": [[385, "introspection-helpers"]], "Deprecation Timeline of Major Features": [[385, "deprecation-timeline-of-major-features"]], "token --- Constants used with Python parse trees": [[376, "module-token"]], "tokenize --- Tokenizer for Python source": [[377, "module-tokenize"]], "Tokenizing Input": [[377, "tokenizing-input"]], "unittest.mock --- mock object library": [[388, "module-unittest.mock"]], "Quick Guide": [[388, "quick-guide"]], "The Mock Class": [[388, "the-mock-class"]], "Calling": [[388, "calling"]], "Deleting Attributes": [[388, "deleting-attributes"]], "Mock names and the name attribute": [[388, "mock-names-and-the-name-attribute"]], "Attaching Mocks as Attributes": [[388, "attaching-mocks-as-attributes"]], "The patchers": [[388, "the-patchers"]], "patch": [[388, "patch"]], "patch.object": [[388, "patch-object"]], "patch.dict": [[388, "patch-dict"]], "patch.multiple": [[388, "patch-multiple"]], "patch methods: start and stop": [[388, "patch-methods-start-and-stop"]], "patch builtins": [[388, "patch-builtins"]], "TEST_PREFIX": [[388, "test-prefix"]], "Nesting Patch Decorators": [[388, "nesting-patch-decorators"]], "Where to patch": [[388, "where-to-patch"]], "Patching Descriptors and Proxy Objects": [[388, "patching-descriptors-and-proxy-objects"]], "MagicMock and magic method support": [[388, "magicmock-and-magic-method-support"]], "Mocking Magic Methods": [[388, "mocking-magic-methods"]], "Magic Mock": [[388, "magic-mock"]], "Helpers": [[388, "helpers"]], "sentinel": [[388, "sentinel"]], "DEFAULT": [[388, "default"]], "call": [[388, "call"]], "create_autospec": [[388, "create-autospec"]], "ANY": [[388, "any"]], "FILTER_DIR": [[388, "filter-dir"]], "mock_open": [[388, "mock-open"]], "Autospeccing": [[388, "autospeccing"]], "Sealing mocks": [[388, "sealing-mocks"]], "tracemalloc --- Trace memory allocations": [[381, "module-tracemalloc"]], "Display the top 10": [[381, "display-the-top-10"]], "Compute differences": [[381, "compute-differences"]], "Get the traceback of a memory block": [[381, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[381, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[381, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "DomainFilter": [[381, "domainfilter"]], "Filter": [[381, "filter"]], "Frame": [[381, "frame"]], "Snapshot": [[381, "snapshot"]], "Statistic": [[381, "statistic"]], "StatisticDiff": [[381, "statisticdiff"]], "Trace": [[381, "trace"]], "Traceback": [[381, "traceback"]], "traceback --- Print or retrieve a stack traceback": [[380, "module-traceback"]], "TracebackException \u7269\u4ef6": [[380, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[380, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[380, "framesummary-objects"]], "Traceback Examples": [[380, "traceback-examples"]], "warnings --- Warning control": [[399, "module-warnings"]], "Warning Categories": [[399, "warning-categories"]], "The Warnings Filter": [[399, "the-warnings-filter"]], "Describing Warning Filters": [[399, "describing-warning-filters"]], "Default Warning Filter": [[399, "default-warning-filter"]], "Overriding the default filter": [[399, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[399, "temporarily-suppressing-warnings"]], "Testing Warnings": [[399, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[399, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[399, "available-functions"]], "Available Context Managers": [[399, "available-context-managers"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[392, "module-urllib.error"]], "tomllib --- \u5256\u6790 TOML \u6a94\u6848": [[378, "module-tomllib"]], "Conversion Table": [[378, "conversion-table"]], "Unix \u7279\u6709\u670d\u52d9": [[390, "unix-specific-services"]], "winsound --- Sound-playing interface for Windows": [[405, "module-winsound"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[396, "module-uu"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[387, "module-unittest"]], "\u7c21\u55ae\u7bc4\u4f8b": [[387, "basic-example"], [355, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[387, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[387, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[387, "test-discovery"]], "Organizing test code": [[387, "organizing-test-code"]], "Re-using old test code": [[387, "re-using-old-test-code"]], "Skipping tests and expected failures": [[387, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[387, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[387, "classes-and-functions"], [255, "classes-and-functions"]], "Test cases": [[387, "test-cases"]], "Grouping tests": [[387, "grouping-tests"]], "Loading and running tests": [[387, "loading-and-running-tests"]], "load_tests Protocol": [[387, "load-tests-protocol"]], "Class and Module Fixtures": [[387, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[387, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[387, "setupmodule-and-teardownmodule"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[407, "module-xdrlib"]], "Packer Objects": [[407, "packer-objects"]], "Unpacker Objects": [[407, "unpacker-objects"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[394, "module-urllib.request"]], "Request Objects": [[394, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[394, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[394, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[394, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[394, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[394, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[394, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[394, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[394, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[394, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[394, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[394, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[394, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[394, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[394, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[394, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[394, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[394, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[394, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[394, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[394, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[394, "httperrorprocessor-objects"]], "Examples": [[394, "examples"]], "Legacy interface": [[394, "legacy-interface"]], "urllib.request Restrictions": [[394, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[394, "module-urllib.response"]], "webbrowser --- Convenient web-browser controller": [[402, "module-webbrowser"]], "Browser Controller Objects": [[402, "browser-controller-objects"]], "weakref --- Weak references": [[401, "module-weakref"]], "Weak Reference Objects": [[401, "weak-reference-objects"]], "Finalizer Objects": [[401, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[401, "comparing-finalizers-with-del-methods"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[395, "module-urllib.robotparser"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[391, "module-urllib"]], "Python \u6559\u5b78": [[444, "the-python-tutorial"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[447, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[447, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[447, "argument-passing"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[447, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[447, "source-code-encoding"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[446, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[446, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[446, "alternatives-to-the-interactive-interpreter"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[470, "pep-372-ordered-dictionaries"]], "PEP 378: Format Specifier for Thousands Separator": [[470, "pep-378-format-specifier-for-thousands-separator"], [468, "pep-378-format-specifier-for-thousands-separator"]], "Other Language Changes": [[470, "other-language-changes"], [468, "other-language-changes"], [472, "other-language-changes"], [464, "other-language-changes"], [471, "other-language-changes"], [475, "other-language-changes"], [467, "other-language-changes"], [466, "other-language-changes"], [473, "other-language-changes"], [474, "other-language-changes"], [465, "other-language-changes"], [477, "other-language-changes"], [478, "other-language-changes"], [479, "other-language-changes"], [476, "other-language-changes"], [480, "other-language-changes"], [481, "other-language-changes"]], "New, Improved, and Deprecated Modules": [[470, "new-improved-and-deprecated-modules"], [464, "new-improved-and-deprecated-modules"], [474, "new-improved-and-deprecated-modules"], [465, "new-improved-and-deprecated-modules"]], "Optimizations": [[470, "optimizations"], [468, "optimizations"], [472, "optimizations"], [464, "optimizations"], [471, "optimizations"], [475, "optimizations"], [467, "optimizations"], [466, "optimizations"], [473, "optimizations"], [474, "optimizations"], [465, "optimizations"], [477, "optimizations"], [478, "optimizations"], [479, "optimizations"], [480, "optimizations"], [481, "optimizations"]], "IDLE": [[470, "idle"], [474, "idle"], [482, "idle"], [482, "id28"], [482, "id37"], [482, "id62"], [482, "id72"], [482, "id83"], [482, "id92"], [482, "id102"], [482, "id112"], [482, "id130"], [482, "id141"], [482, "id151"], [482, "id171"], [482, "id182"], [482, "id192"], [482, "id198"], [482, "id208"], [482, "id218"], [482, "id229"], [482, "id240"], [482, "id250"], [482, "id258"], [482, "id267"], [482, "id277"], [482, "id284"], [482, "id292"], [482, "id302"], [482, "id313"], [482, "id337"], [482, "id344"], [482, "id353"], [482, "id363"], [482, "id376"], [482, "id386"], [482, "id398"], [482, "id404"], [482, "id415"], [482, "id448"], [482, "id456"], [482, "id463"], [482, "id472"], [482, "id482"], [482, "id504"], [482, "id513"], [482, "id517"], [482, "id527"], [482, "id542"], [482, "id557"], [482, "id579"], [246, "idle"]], "Build and C API Changes": [[470, "build-and-c-api-changes"], [468, "build-and-c-api-changes"], [464, "build-and-c-api-changes"], [469, "build-and-c-api-changes"], [475, "build-and-c-api-changes"], [467, "build-and-c-api-changes"], [466, "build-and-c-api-changes"], [474, "build-and-c-api-changes"], [465, "build-and-c-api-changes"], [477, "build-and-c-api-changes"], [478, "build-and-c-api-changes"], [480, "build-and-c-api-changes"]], "Porting to Python 3.1": [[470, "porting-to-python-3-1"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[448, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[448, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[448, "numbers"]], "\u5b57\u4e32 (String)": [[448, "strings"]], "List\uff08\u4e32\u5217\uff09": [[448, "lists"], [344, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[448, "first-steps-towards-programming"]], "Command line and environment": [[454, "command-line-and-environment"]], "Command line": [[454, "command-line"]], "Interface options": [[454, "interface-options"]], "Generic options": [[454, "generic-options"]], "Miscellaneous options": [[454, "miscellaneous-options"]], "Options you shouldn't use": [[454, "options-you-shouldn-t-use"]], "Environment variables": [[454, "environment-variables"]], "Debug-mode variables": [[454, "debug-mode-variables"]], "Configure Python": [[455, "configure-python"]], "Configure Options": [[455, "configure-options"]], "General Options": [[455, "general-options"]], "WebAssembly Options": [[455, "webassembly-options"]], "Install Options": [[455, "install-options"]], "Performance options": [[455, "performance-options"]], "Python Debug Build": [[455, "python-debug-build"]], "Debug options": [[455, "debug-options"]], "Linker options": [[455, "linker-options"]], "Libraries options": [[455, "libraries-options"]], "Security Options": [[455, "security-options"]], "macOS Options": [[455, "macos-options"]], "Cross Compiling Options": [[455, "cross-compiling-options"]], "Python Build System": [[455, "python-build-system"]], "Main files of the build system": [[455, "main-files-of-the-build-system"]], "Main build steps": [[455, "main-build-steps"]], "Main Makefile targets": [[455, "main-makefile-targets"]], "C extensions": [[455, "c-extensions"]], "Compiler and linker flags": [[455, "compiler-and-linker-flags"]], "Preprocessor flags": [[455, "preprocessor-flags"]], "Compiler flags": [[455, "compiler-flags"]], "Linker flags": [[455, "linker-flags"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[468, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[468, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[468, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[468, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 389: The argparse Module for Parsing Command Lines": [[468, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[468, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[468, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[468, "pep-3137-the-memoryview-object"]], "Interpreter Changes": [[468, "interpreter-changes"], [467, "interpreter-changes"]], "New and Improved Modules": [[468, "new-and-improved-modules"], [463, "new-and-improved-modules"], [462, "new-and-improved-modules"], [467, "new-and-improved-modules"]], "New module: importlib": [[468, "new-module-importlib"]], "New module: sysconfig": [[468, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[468, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[468, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[468, "updated-module-elementtree-1-3"]], "Port-Specific Changes: Windows": [[468, "port-specific-changes-windows"], [467, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[468, "port-specific-changes-mac-os-x"], [467, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: FreeBSD": [[468, "port-specific-changes-freebsd"]], "Other Changes and Fixes": [[468, "other-changes-and-fixes"], [463, "other-changes-and-fixes"], [464, "other-changes-and-fixes"], [462, "other-changes-and-fixes"]], "Porting to Python 2.7": [[468, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[468, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[468, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[468, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[468, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[468, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "Bootstrapping pip By Default": [[468, "bootstrapping-pip-by-default"], [476, "bootstrapping-pip-by-default"]], "Documentation Changes": [[468, "documentation-changes"], [476, "documentation-changes"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[468, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [476, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[468, "pep-493-https-verification-migration-tools-for-python-2-7"]], "New make regen-all build target": [[468, "new-make-regen-all-build-target"], [477, "new-make-regen-all-build-target"], [478, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[468, "removal-of-make-touch-build-target"], [477, "removal-of-make-touch-build-target"], [478, "removal-of-make-touch-build-target"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[460, "using-python-on-windows"]], "The full installer": [[460, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[460, "installation-steps"]], "Removing the MAX_PATH Limitation": [[460, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[460, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[460, "installing-without-downloading"]], "Modifying an install": [[460, "modifying-an-install"]], "The Microsoft Store package": [[460, "the-microsoft-store-package"]], "Known issues": [[460, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[460, "redirection-of-local-data-registry-and-temporary-paths"]], "The nuget.org packages": [[460, "the-nuget-org-packages"]], "The embeddable package": [[460, "the-embeddable-package"]], "Python Application": [[460, "python-application"]], "\u5d4c\u5165 Python": [[460, "embedding-python"]], "Alternative bundles": [[460, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[460, "configuring-python"]], "Excursus: Setting environment variables": [[460, "excursus-setting-environment-variables"]], "Finding the Python executable": [[460, "finding-the-python-executable"]], "UTF-8 mode": [[460, "utf-8-mode"]], "Python Launcher for Windows": [[460, "python-launcher-for-windows"]], "\u958b\u59cb": [[460, "getting-started"]], "From the command-line": [[460, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[460, "virtual-environments"]], "From a script": [[460, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[460, "from-file-associations"]], "Shebang Lines": [[460, "shebang-lines"]], "Arguments in shebang lines": [[460, "arguments-in-shebang-lines"]], "Customization": [[460, "customization"]], "Customization via INI files": [[460, "customization-via-ini-files"]], "Customizing default Python versions": [[460, "customizing-default-python-versions"]], "Diagnostics": [[460, "diagnostics"]], "Dry Run": [[460, "dry-run"]], "\u5b89\u88dd\u96a8\u9078": [[460, "install-on-demand"]], "Return codes": [[460, "return-codes"]], "Finding modules": [[460, "finding-modules"]], "Additional modules": [[460, "additional-modules"]], "PyWin32": [[460, "pywin32"]], "cx_Freeze": [[460, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[460, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[460, "other-platforms"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[457, "python-setup-and-usage"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[463, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[463, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[463, "old-and-new-classes"]], "Descriptors": [[463, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[463, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[463, "attribute-access"]], "Related Links": [[463, "related-links"]], "PEP 234: Iterators": [[463, "pep-234-iterators"]], "PEP 255: Simple Generators": [[463, "pep-255-simple-generators"], [464, "pep-255-simple-generators"]], "PEP 237: Unifying Long Integers and Integers": [[463, "pep-237-unifying-long-integers-and-integers"], [465, "pep-237-unifying-long-integers-and-integers"]], "PEP 238: Changing the Division Operator": [[463, "pep-238-changing-the-division-operator"]], "Unicode Changes": [[463, "unicode-changes"]], "PEP 227: Nested Scopes": [[463, "pep-227-nested-scopes"], [462, "pep-227-nested-scopes"]], "Interpreter Changes and Fixes": [[463, "interpreter-changes-and-fixes"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[453, "what-now"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[451, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[451, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[451, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[451, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[451, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[451, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[451, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[451, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[451, "decimal-floating-point-arithmetic"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[459, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[459, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[459, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[459, "on-freebsd-and-openbsd"]], "\u5728 OpenSolaris \u7cfb\u7d71\u4e0a": [[459, "on-opensolaris"]], "\u5efa\u7f6e Python": [[459, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[459, "python-related-paths-and-files"]], "\u96dc\u9805": [[459, "miscellaneous"]], "\u5ba2\u88fd\u5316 OpenSSL": [[459, "custom-openssl"]], "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-3-11"]], "Summary -- Release highlights": [[472, "summary-release-highlights"], [471, "summary-release-highlights"], [475, "summary-release-highlights"], [473, "summary-release-highlights"], [477, "summary-release-highlights"], [478, "summary-release-highlights"], [480, "summary-release-highlights"], [481, "summary-release-highlights"]], "New Features": [[472, "new-features"], [472, "whatsnew311-c-api-new-features"], [471, "new-features"], [471, "id1"], [473, "new-features"], [473, "id2"], [477, "new-features"], [478, "new-features"], [479, "new-features"], [476, "new-features"], [480, "new-features"], [481, "new-features"], [481, "id1"]], "PEP 657: Fine-grained error locations in tracebacks": [[472, "pep-657-fine-grained-error-locations-in-tracebacks"]], "PEP 654: Exception Groups and except*": [[472, "pep-654-exception-groups-and-except"]], "PEP 678: Exceptions can be enriched with notes": [[472, "pep-678-exceptions-can-be-enriched-with-notes"]], "Windows py.exe launcher improvements": [[472, "windows-py-exe-launcher-improvements"]], "New Features Related to Type Hints": [[472, "new-features-related-to-type-hints"], [471, "new-features-related-to-type-hints"]], "PEP 646: Variadic generics": [[472, "pep-646-variadic-generics"]], "PEP 655: Marking individual TypedDict items as required or not-required": [[472, "pep-655-marking-individual-typeddict-items-as-required-or-not-required"]], "PEP 673: Self type": [[472, "pep-673-self-type"]], "PEP 675: Arbitrary literal string type": [[472, "pep-675-arbitrary-literal-string-type"]], "PEP 681: Data class transforms": [[472, "pep-681-data-class-transforms"]], "PEP 563 may not be the future": [[472, "pep-563-may-not-be-the-future"]], "Other CPython Implementation Changes": [[472, "other-cpython-implementation-changes"], [479, "other-cpython-implementation-changes"]], "New Modules": [[472, "new-modules"], [471, "new-modules"], [473, "new-modules"], [477, "new-modules"], [480, "new-modules"]], "Improved Modules": [[472, "improved-modules"], [471, "improved-modules"], [475, "improved-modules"], [473, "improved-modules"], [477, "improved-modules"], [478, "improved-modules"], [479, "improved-modules"], [476, "improved-modules"], [480, "improved-modules"], [481, "improved-modules"]], "asyncio": [[472, "asyncio"], [471, "asyncio"], [473, "asyncio"], [477, "asyncio"], [478, "asyncio"], [479, "asyncio"], [479, "whatsnew37-asyncio-deprecated"], [476, "asyncio"], [480, "asyncio"], [481, "asyncio"]], "contextlib": [[472, "contextlib"], [471, "contextlib"], [475, "contextlib"], [474, "contextlib"], [477, "contextlib"], [478, "contextlib"], [479, "contextlib"], [476, "contextlib"]], "dataclasses": [[472, "dataclasses"], [471, "dataclasses"], [479, "dataclasses"]], "datetime": [[472, "datetime"], [475, "datetime"], [478, "datetime"], [479, "datetime"], [480, "datetime"], [481, "datetime"]], "enum": [[472, "enum"], [471, "enum"], [477, "enum"], [478, "enum"], [479, "enum"], [479, "id5"], [476, "enum"]], "fractions": [[472, "fractions"]], "functools": [[472, "functools"], [475, "functools"], [474, "functools"], [477, "functools"], [479, "functools"], [476, "functools"], [480, "functools"]], "hashlib": [[472, "hashlib"], [471, "hashlib"], [474, "hashlib"], [478, "hashlib"], [476, "hashlib"], [481, "hashlib"]], "IDLE and idlelib": [[472, "idle-and-idlelib"], [471, "idle-and-idlelib"], [480, "idle-and-idlelib"], [481, "idle-and-idlelib"]], "inspect": [[472, "inspect"], [471, "inspect"], [475, "inspect"], [474, "inspect"], [477, "inspect"], [478, "inspect"], [476, "inspect"], [480, "inspect"], [481, "inspect"]], "locale": [[472, "locale"], [477, "locale"], [479, "locale"], [479, "id7"]], "logging": [[472, "logging"], [475, "logging"], [474, "logging"], [477, "logging"], [478, "logging"], [479, "logging"], [476, "logging"], [480, "logging"]], "math": [[472, "math"], [475, "math"], [474, "math"], [477, "math"], [478, "math"], [479, "math"], [480, "math"], [481, "math"]], "operator": [[472, "operator"], [477, "operator"], [476, "operator"]], "os": [[472, "os"], [471, "os"], [475, "os"], [473, "os"], [474, "os"], [477, "os"], [478, "os"], [478, "id4"], [479, "os"], [476, "os"], [480, "os"], [481, "os"]], "pathlib": [[472, "pathlib"], [471, "pathlib"], [473, "pathlib"], [477, "pathlib"], [478, "pathlib"], [479, "pathlib"], [476, "pathlib"], [480, "pathlib"], [481, "pathlib"]], "re": [[472, "re"], [475, "re"], [477, "re"], [478, "re"], [478, "id5"], [479, "re"], [476, "re"]], "shutil": [[472, "shutil"], [475, "shutil"], [473, "shutil"], [474, "shutil"], [477, "shutil"], [476, "shutil"], [480, "shutil"]], "socket": [[472, "socket"], [471, "socket"], [475, "socket"], [474, "socket"], [477, "socket"], [478, "socket"], [479, "socket"], [479, "id8"], [476, "socket"], [480, "socket"], [481, "socket"]], "sqlite3": [[472, "sqlite3"], [471, "sqlite3"], [475, "sqlite3"], [473, "sqlite3"], [474, "sqlite3"], [477, "sqlite3"], [478, "sqlite3"], [479, "sqlite3"], [476, "sqlite3"]], "sys": [[472, "sys"], [471, "sys"], [475, "sys"], [477, "sys"], [478, "sys"], [479, "sys"], [479, "id10"], [476, "sys"], [480, "sys"], [481, "sys"]], "sysconfig": [[472, "sysconfig"], [474, "sysconfig"], [477, "sysconfig"]], "threading": [[472, "threading"], [471, "threading"], [475, "threading"], [473, "threading"], [474, "threading"], [477, "threading"], [479, "threading"], [476, "threading"], [480, "threading"]], "time": [[472, "time"], [475, "time"], [477, "time"], [478, "time"], [479, "time"], [480, "time"], [481, "time"]], "traceback": [[472, "traceback"], [471, "traceback"], [477, "traceback"], [478, "traceback"], [476, "traceback"]], "typing": [[472, "typing"], [471, "typing"], [477, "typing"], [478, "typing"], [480, "typing"], [481, "typing"], [481, "id4"]], "tkinter": [[472, "tkinter"], [477, "tkinter"], [478, "tkinter"], [478, "id7"], [479, "tkinter"], [480, "tkinter"]], "unicodedata": [[472, "unicodedata"], [473, "unicodedata"], [477, "unicodedata"], [478, "unicodedata"], [479, "unicodedata"], [480, "unicodedata"], [481, "unicodedata"]], "unittest": [[472, "unittest"], [471, "unittest"], [475, "unittest"], [474, "unittest"], [477, "unittest"], [479, "unittest"], [476, "unittest"], [480, "unittest"]], "venv": [[472, "venv"], [478, "venv"], [478, "id8"], [476, "venv"], [480, "venv"], [481, "venv"]], "warnings": [[472, "warnings"], [478, "warnings"], [479, "warnings"]], "zipfile": [[472, "zipfile"], [477, "zipfile"], [478, "zipfile"], [479, "zipfile"], [476, "zipfile"]], "fcntl": [[472, "fcntl"], [481, "fcntl"]], "Faster CPython": [[472, "faster-cpython"]], "Faster Startup": [[472, "faster-startup"]], "Frozen imports / Static code objects": [[472, "frozen-imports-static-code-objects"]], "Faster Runtime": [[472, "faster-runtime"]], "Cheaper, lazy Python frames": [[472, "cheaper-lazy-python-frames"]], "Inlined Python function calls": [[472, "inlined-python-function-calls"]], "PEP 659: Specializing Adaptive Interpreter": [[472, "pep-659-specializing-adaptive-interpreter"]], "Misc": [[472, "misc"]], "FAQ": [[472, "faq"]], "About": [[472, "about"]], "CPython bytecode changes": [[472, "cpython-bytecode-changes"], [471, "cpython-bytecode-changes"], [473, "cpython-bytecode-changes"], [478, "cpython-bytecode-changes"], [479, "cpython-bytecode-changes"], [480, "cpython-bytecode-changes"], [481, "cpython-bytecode-changes"]], "Deprecated": [[472, "deprecated"], [472, "whatsnew311-c-api-deprecated"], [471, "deprecated"], [471, "id3"], [475, "deprecated"], [473, "deprecated"], [473, "id4"], [477, "deprecated"], [478, "deprecated"], [476, "deprecated"], [480, "deprecated"], [481, "deprecated"]], "Pending Removal in Python 3.12": [[472, "pending-removal-in-python-3-12"], [472, "whatsnew311-c-api-pending-removal"]], "Removed": [[472, "removed"], [472, "whatsnew311-c-api-removed"], [471, "removed"], [471, "id4"], [473, "removed"], [473, "id5"], [477, "removed"], [478, "removed"], [476, "removed"], [481, "removed"], [481, "id3"]], "Porting to Python 3.11": [[472, "porting-to-python-3-11"], [472, "whatsnew311-c-api-porting"]], "Build Changes": [[472, "build-changes"], [471, "build-changes"], [473, "build-changes"], [479, "build-changes"], [481, "build-changes"]], "C API Changes": [[472, "c-api-changes"], [471, "c-api-changes"], [473, "c-api-changes"], [479, "c-api-changes"], [481, "c-api-changes"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[464, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[464, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[464, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[464, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[464, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[464, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[464, "pep-279-enumerate"]], "PEP 282: The logging Package": [[464, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[464, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[464, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[464, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[464, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[464, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[464, "pep-307-pickle-enhancements"]], "Extended Slices": [[464, "extended-slices"]], "String Changes": [[464, "string-changes"]], "Date/Time Type": [[464, "date-time-type"]], "The optparse Module": [[464, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[464, "pymalloc-a-specialized-object-allocator"]], "Port-Specific Changes": [[464, "port-specific-changes"], [466, "port-specific-changes"], [465, "port-specific-changes"]], "Porting to Python 2.3": [[464, "porting-to-python-2-3"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[452, "virtual-environments-and-packages"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[452, "creating-virtual-environments"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[452, "managing-packages-with-pip"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[469, "common-stumbling-blocks"]], "Print Is A Function": [[469, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[469, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[469, "ordering-comparisons"]], "Integers": [[469, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[469, "text-vs-data-instead-of-unicode-vs-8-bit"]], "Overview Of Syntax Changes": [[469, "overview-of-syntax-changes"]], "New Syntax": [[469, "new-syntax"]], "Changed Syntax": [[469, "changed-syntax"]], "Removed Syntax": [[469, "removed-syntax"]], "Changes Already Present In Python 2.6": [[469, "changes-already-present-in-python-2-6"]], "Library Changes": [[469, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[469, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[469, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[469, "miscellaneous-other-changes"]], "Operators And Special Methods": [[469, "operators-and-special-methods"]], "Builtins": [[469, "builtins"]], "Porting To Python 3.0": [[469, "porting-to-python-3-0"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[443, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[443, "representation-error"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[458, "using-python-on-a-mac"]], "\u53d6\u5f97\u548c\u5b89\u88dd MacPython": [[458, "getting-and-installing-macpython"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[458, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[458, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[458, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[458, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[458, "installing-additional-python-packages"]], "\u65bc Mac \u4e0a\u958b\u767c GUI \u7a0b\u5f0f": [[458, "gui-programming-on-the-mac"]], "\u65bc Mac \u4e0a\u767c\u884c Python \u61c9\u7528\u7a0b\u5f0f": [[458, "distributing-python-applications-on-the-mac"]], "\u5176\u4ed6\u8cc7\u6e90": [[458, "other-resources"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[442, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[442, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[442, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[442, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[442, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[442, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[442, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[442, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[442, "predefined-clean-up-actions"]], "\u5f15\u767c\u53ca\u8655\u7406\u591a\u500b\u7121\u95dc\u7684\u4f8b\u5916": [[442, "raising-and-handling-multiple-unrelated-exceptions"]], "\u7528\u8a3b\u89e3\u4f7f\u4f8b\u5916\u66f4\u8a73\u7d30": [[442, "enriching-exceptions-with-notes"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[462, "what-s-new-in-python-2-1"]], "PEP 236: __future__ Directives": [[462, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[462, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[462, "pep-230-warning-framework"]], "PEP 229: New Build System": [[462, "pep-229-new-build-system"]], "PEP 205: Weak References": [[462, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[462, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[462, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[462, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[462, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[462, "pep-241-metadata-in-python-packages"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[445, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[445, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[445, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[445, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[445, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[445, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[445, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[445, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[445, "saving-structured-data-with-json"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-3-10"]], "Parenthesized context managers": [[471, "parenthesized-context-managers"]], "Better error messages": [[471, "better-error-messages"]], "SyntaxErrors": [[471, "syntaxerrors"]], "IndentationErrors": [[471, "indentationerrors"]], "AttributeErrors": [[471, "attributeerrors"]], "NameErrors": [[471, "nameerrors"]], "PEP 626: Precise line numbers for debugging and other tools": [[471, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634: Structural Pattern Matching": [[471, "pep-634-structural-pattern-matching"]], "Syntax and operations": [[471, "syntax-and-operations"]], "Declarative approach": [[471, "declarative-approach"]], "Simple pattern: match to a literal": [[471, "simple-pattern-match-to-a-literal"]], "Behavior without the wildcard": [[471, "behavior-without-the-wildcard"]], "Patterns with a literal and variable": [[471, "patterns-with-a-literal-and-variable"]], "Patterns and classes": [[471, "patterns-and-classes"]], "Patterns with positional parameters": [[471, "patterns-with-positional-parameters"]], "Nested patterns": [[471, "nested-patterns"]], "Complex patterns and the wildcard": [[471, "complex-patterns-and-the-wildcard"]], "Guard": [[471, "guard"]], "Other Key Features": [[471, "other-key-features"]], "Optional EncodingWarning and encoding=\"locale\" option": [[471, "optional-encodingwarning-and-encoding-locale-option"]], "PEP 604: New Type Union Operator": [[471, "pep-604-new-type-union-operator"]], "PEP 612: Parameter Specification Variables": [[471, "pep-612-parameter-specification-variables"]], "PEP 613: TypeAlias": [[471, "pep-613-typealias"]], "PEP 647: User-Defined Type Guards": [[471, "pep-647-user-defined-type-guards"]], "argparse": [[471, "argparse"], [477, "argparse"], [479, "argparse"], [476, "argparse"]], "array": [[471, "array"], [475, "array"], [478, "array"]], "asynchat, asyncore, smtpd": [[471, "asynchat-asyncore-smtpd"]], "base64": [[471, "base64"], [475, "base64"], [476, "base64"]], "bdb": [[471, "bdb"]], "bisect": [[471, "bisect"]], "codecs": [[471, "codecs"], [475, "codecs"]], "collections.abc": [[471, "collections-abc"], [477, "collections-abc"], [481, "collections-abc"]], "curses": [[471, "curses"], [475, "curses"], [477, "curses"], [480, "curses"], [481, "curses"]], "Keyword-only fields": [[471, "keyword-only-fields"]], "distutils": [[471, "distutils"], [477, "distutils"], [478, "distutils"], [478, "id2"], [479, "distutils"], [481, "distutils"]], "doctest": [[471, "doctest"], [465, "doctest"], [477, "doctest"], [476, "doctest"]], "encodings": [[471, "encodings"], [478, "encodings"]], "fileinput": [[471, "fileinput"], [478, "fileinput"]], "faulthandler": [[471, "faulthandler"], [475, "faulthandler"], [477, "faulthandler"], [478, "faulthandler"]], "gc": [[471, "gc"], [475, "gc"], [479, "gc"], [476, "gc"], [480, "gc"], [481, "gc"]], "glob": [[471, "glob"], [477, "glob"], [476, "glob"]], "hmac": [[471, "hmac"], [475, "hmac"], [479, "hmac"], [476, "hmac"]], "importlib.metadata": [[471, "importlib-metadata"]], "itertools": [[471, "itertools"], [475, "itertools"], [474, "itertools"], [479, "itertools"], [480, "itertools"]], "linecache": [[471, "linecache"], [477, "linecache"]], "os.path": [[471, "os-path"], [480, "os-path"]], "platform": [[471, "platform"]], "pprint": [[471, "pprint"], [476, "pprint"], [480, "pprint"], [481, "pprint"]], "py_compile": [[471, "py-compile"], [479, "py-compile"], [480, "py-compile"]], "pyclbr": [[471, "pyclbr"]], "shelve": [[471, "shelve"], [476, "shelve"]], "statistics": [[471, "statistics"], [478, "statistics"], [476, "statistics"], [480, "statistics"]], "site": [[471, "site"], [474, "site"], [478, "site"]], "ssl": [[471, "ssl"], [475, "ssl"], [474, "ssl"], [477, "ssl"], [478, "ssl"], [478, "id6"], [479, "ssl"], [479, "id9"], [476, "ssl"], [480, "ssl"]], "_thread": [[471, "thread"]], "types": [[471, "types"], [475, "types"], [477, "types"], [479, "types"], [476, "types"]], "urllib.parse": [[471, "urllib-parse"], [474, "urllib-parse"], [479, "urllib-parse"], [481, "urllib-parse"]], "xml": [[471, "xml"], [480, "xml"], [481, "xml"]], "zipimport": [[471, "zipimport"]], "Porting to Python 3.10": [[471, "porting-to-python-3-10"], [471, "id2"]], "Changes in the Python syntax": [[471, "changes-in-the-python-syntax"]], "Changes in the Python API": [[471, "changes-in-the-python-api"], [473, "changes-in-the-python-api"], [477, "changes-in-the-python-api"], [478, "changes-in-the-python-api"], [479, "changes-in-the-python-api"], [476, "changes-in-the-python-api"], [480, "changes-in-the-python-api"], [481, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[471, "changes-in-the-c-api"], [477, "changes-in-the-c-api"], [478, "changes-in-the-c-api"], [479, "changes-in-the-c-api"], [476, "changes-in-the-c-api"], [480, "changes-in-the-c-api"], [481, "changes-in-the-c-api"]], "PEP 652: Maintaining the Stable ABI": [[471, "pep-652-maintaining-the-stable-abi"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[475, "what-s-new-in-python-3-3"]], "PEP 405: Virtual Environments": [[475, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[475, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[475, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "Features": [[475, "features"], [475, "id1"], [281, "features"]], "API changes": [[475, "api-changes"], [475, "id2"]], "PEP 393: Flexible String Representation": [[475, "pep-393-flexible-string-representation"]], "Functionality": [[475, "functionality"]], "Performance and resource usage": [[475, "performance-and-resource-usage"]], "PEP 397: Python Launcher for Windows": [[475, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[475, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[475, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[475, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[475, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[475, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[475, "pep-412-key-sharing-dictionary"]], "PEP 362: Function Signature Object": [[475, "pep-362-function-signature-object"]], "PEP 421: Adding sys.implementation": [[475, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[475, "simplenamespace"]], "Using importlib as the Implementation of Import": [[475, "using-importlib-as-the-implementation-of-import"]], "New APIs": [[475, "new-apis"]], "Visible Changes": [[475, "visible-changes"]], "A Finer-Grained Import Lock": [[475, "a-finer-grained-import-lock"]], "Builtin functions and types": [[475, "builtin-functions-and-types"]], "\u65b0\u6a21\u7d44": [[475, "new-modules"], [478, "new-modules"], [479, "new-modules"], [476, "new-modules"], [481, "new-modules"]], "ipaddress": [[475, "ipaddress"], [477, "ipaddress"], [479, "ipaddress"], [476, "ipaddress"], [481, "ipaddress"]], "lzma": [[475, "lzma"], [477, "lzma"]], "abc": [[475, "abc"], [474, "abc"], [476, "abc"]], "binascii": [[475, "binascii"], [478, "binascii"], [479, "binascii"]], "bz2": [[475, "bz2"], [477, "bz2"]], "collections": [[475, "collections"], [474, "collections"], [477, "collections"], [478, "collections"], [479, "collections"], [479, "id3"], [476, "collections"], [480, "collections"]], "crypt": [[475, "crypt"], [479, "crypt"]], "decimal": [[475, "decimal"], [478, "decimal"], [479, "decimal"]], "email": [[475, "email"], [474, "email"], [477, "email"], [478, "email"], [476, "email"]], "Policy Framework": [[475, "policy-framework"]], "Provisional Policy with New Header API": [[475, "provisional-policy-with-new-header-api"]], "Other API Changes": [[475, "other-api-changes"]], "ftplib": [[475, "ftplib"], [481, "ftplib"]], "http": [[475, "http"], [477, "http"], [476, "http"], [481, "http"]], "html": [[475, "html"], [474, "html"], [476, "html"]], "imaplib": [[475, "imaplib"], [474, "imaplib"], [477, "imaplib"], [481, "imaplib"]], "io": [[475, "io"], [474, "io"], [477, "io"], [479, "io"], [480, "io"]], "mmap": [[475, "mmap"], [476, "mmap"], [480, "mmap"]], "multiprocessing": [[475, "multiprocessing"], [477, "multiprocessing"], [478, "multiprocessing"], [479, "multiprocessing"], [476, "multiprocessing"], [480, "multiprocessing"], [481, "multiprocessing"]], "nntplib": [[475, "nntplib"], [481, "nntplib"]], "pdb": [[475, "pdb"], [474, "pdb"], [478, "pdb"], [479, "pdb"], [476, "pdb"], [481, "pdb"]], "pickle": [[475, "pickle"], [477, "pickle"], [478, "pickle"], [476, "pickle"], [480, "pickle"]], "pydoc": [[475, "pydoc"], [474, "pydoc"], [478, "pydoc"], [479, "pydoc"], [476, "pydoc"], [481, "pydoc"]], "sched": [[475, "sched"]], "select": [[475, "select"], [474, "select"], [476, "select"]], "shlex": [[475, "shlex"], [478, "shlex"], [480, "shlex"]], "signal": [[475, "signal"], [477, "signal"], [479, "signal"], [481, "signal"]], "smtpd": [[475, "smtpd"], [477, "smtpd"], [476, "smtpd"]], "smtplib": [[475, "smtplib"], [477, "smtplib"], [476, "smtplib"], [481, "smtplib"]], "socketserver": [[475, "socketserver"], [478, "socketserver"], [479, "socketserver"]], "stat": [[475, "stat"], [476, "stat"]], "struct": [[475, "struct"], [478, "struct"], [476, "struct"]], "subprocess": [[475, "subprocess"], [477, "subprocess"], [478, "subprocess"], [479, "subprocess"], [476, "subprocess"]], "tarfile": [[475, "tarfile"], [474, "tarfile"], [477, "tarfile"], [476, "tarfile"], [480, "tarfile"]], "tempfile": [[475, "tempfile"], [473, "tempfile"], [474, "tempfile"]], "textwrap": [[475, "textwrap"], [476, "textwrap"]], "urllib": [[475, "urllib"], [477, "urllib"], [476, "urllib"]], "webbrowser": [[475, "webbrowser"]], "xml.etree.ElementTree": [[475, "xml-etree-elementtree"]], "Unsupported Operating Systems": [[475, "unsupported-operating-systems"], [477, "unsupported-operating-systems"]], "Deprecated Python modules, functions and methods": [[475, "deprecated-python-modules-functions-and-methods"], [477, "deprecated-python-modules-functions-and-methods"], [478, "deprecated-python-modules-functions-and-methods"], [479, "deprecated-python-modules-functions-and-methods"]], "Deprecated functions and types of the C API": [[475, "deprecated-functions-and-types-of-the-c-api"], [478, "deprecated-functions-and-types-of-the-c-api"], [479, "deprecated-functions-and-types-of-the-c-api"]], "Deprecated features": [[475, "deprecated-features"]], "Porting to Python 3.3": [[475, "porting-to-python-3-3"]], "Porting Python code": [[475, "porting-python-code"]], "Porting C code": [[475, "porting-c-code"]], "Building C extensions": [[475, "building-c-extensions"]], "Command Line Switch Changes": [[475, "command-line-switch-changes"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-2-6"]], "Python 3.0": [[467, "python-3-0"]], "Changes to the Development Process": [[467, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[467, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[467, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 343: The 'with' statement": [[467, "pep-343-the-with-statement"], [466, "pep-343-the-with-statement"]], "Writing Context Managers": [[467, "writing-context-managers"], [466, "writing-context-managers"]], "The contextlib module": [[467, "the-contextlib-module"], [466, "the-contextlib-module"]], "PEP 366: Explicit Relative Imports From a Main Module": [[467, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[467, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[467, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[467, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[467, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[467, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[467, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[467, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[467, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[467, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[467, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[467, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[467, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[467, "the-fractions-module"]], "The ast module": [[467, "the-ast-module"]], "The future_builtins module": [[467, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[467, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[467, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[467, "ctypes-enhancements"]], "Improved SSL Support": [[467, "improved-ssl-support"]], "Deprecations and Removals": [[467, "deprecations-and-removals"]], "Port-Specific Changes: IRIX": [[467, "port-specific-changes-irix"]], "Porting to Python 2.6": [[467, "porting-to-python-2-6"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[461, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[461, "what-about-python-1-6"]], "New Development Process": [[461, "new-development-process"]], "Unicode": [[461, "unicode"], [474, "unicode"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[461, "list-comprehensions"]], "Augmented Assignment": [[461, "augmented-assignment"]], "String Methods": [[461, "string-methods"], [344, "string-methods"]], "Garbage Collection of Cycles": [[461, "garbage-collection-of-cycles"]], "Other Core Changes": [[461, "other-core-changes"]], "Minor Language Changes": [[461, "minor-language-changes"]], "Changes to Built-in Functions": [[461, "changes-to-built-in-functions"]], "Porting to 2.0": [[461, "porting-to-2-0"]], "Extending/Embedding Changes": [[461, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[461, "distutils-making-modules-easy-to-install"]], "XML Modules": [[461, "xml-modules"]], "SAX2 Support": [[461, "sax2-support"]], "DOM Support": [[461, "dom-support"]], "Relationship to PyXML": [[461, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[461, "module-changes"]], "New modules": [[461, "new-modules"]], "IDLE Improvements": [[461, "idle-improvements"]], "Deleted and Deprecated Modules": [[461, "deleted-and-deprecated-modules"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[466, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[466, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[466, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[466, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[466, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[466, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[466, "pep-342-new-generator-features"]], "PEP 352: Exceptions as New-Style Classes": [[466, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[466, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[466, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[466, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[466, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[466, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[466, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[466, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[466, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[466, "the-wsgiref-package"]], "Porting to Python 2.5": [[466, "porting-to-python-2-5"]], "Editors and IDEs": [[456, "editors-and-ides"]], "What's New In Python 3.12": [[473, "what-s-new-in-python-3-12"]], "dis": [[473, "dis"], [474, "dis"], [479, "dis"], [476, "dis"]], "Demos and Tools": [[473, "demos-and-tools"], [480, "demos-and-tools"]], "Pending Removal in Python 3.13": [[473, "pending-removal-in-python-3-13"]], "Pending Removal in Python 3.14": [[473, "pending-removal-in-python-3-14"]], "Pending Removal in Future Versions": [[473, "pending-removal-in-future-versions"]], "Porting to Python 3.12": [[473, "porting-to-python-3-12"], [473, "id3"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[450, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[450, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[450, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[450, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[450, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[450, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[450, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[450, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[450, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[450, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[450, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[450, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[450, "batteries-included"]], "\u6a21\u7d44 (Module)": [[449, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[449, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[449, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[449, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[449, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[449, "standard-modules"]], "dir() \u51fd\u5f0f": [[449, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[449, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[449, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[449, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[449, "packages-in-multiple-directories"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[474, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[474, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[474, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[474, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[474, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[474, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[474, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[474, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "elementtree": [[474, "elementtree"]], "datetime \u548c time": [[474, "datetime-and-time"]], "reprlib": [[474, "reprlib"]], "csv": [[474, "csv"], [477, "csv"], [480, "csv"]], "decimal and fractions": [[474, "decimal-and-fractions"]], "ftp": [[474, "ftp"]], "popen": [[474, "popen"]], "gzip \u548c zipfile": [[474, "gzip-and-zipfile"]], "ast": [[474, "ast"], [478, "ast"], [480, "ast"], [481, "ast"]], "nntp": [[474, "nntp"]], "certificates": [[474, "certificates"]], "http.client": [[474, "http-client"], [477, "http-client"], [478, "http-client"], [479, "http-client"]], "random": [[474, "random"], [478, "random"], [481, "random"]], "poplib": [[474, "poplib"], [477, "poplib"], [476, "poplib"], [481, "poplib"]], "asyncore": [[474, "asyncore"], [478, "asyncore"]], "dbm": [[474, "dbm"], [477, "dbm"], [478, "dbm"], [479, "dbm"], [479, "id4"], [476, "dbm"]], "ctypes": [[474, "ctypes"], [480, "ctypes"]], "configparser": [[474, "configparser"], [477, "configparser"]], "mailbox": [[474, "mailbox"]], "turtledemo": [[474, "turtledemo"]], "Multi-threading": [[474, "multi-threading"], [258, "multi-threading"]], "Codecs": [[474, "codecs"]], "\u6587\u4ef6": [[474, "documentation"]], "Code Repository": [[474, "code-repository"]], "Porting to Python 3.2": [[474, "porting-to-python-3-2"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[465, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[465, "pep-218-built-in-set-objects"]], "PEP 289: Generator Expressions": [[465, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[465, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[465, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[465, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[465, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[465, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[465, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[465, "the-decimal-type"]], "Context \u578b\u5225": [[465, "the-context-type"]], "PEP 328: Multi-line Imports": [[465, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[465, "pep-331-locale-independent-float-string-conversions"]], "cookielib": [[465, "cookielib"]], "Porting to Python 2.4": [[465, "porting-to-python-2-4"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-5"], [476, "what-s-new-in-python-3-4"]], "PEP 492 - Coroutines with async and await syntax": [[477, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[477, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[477, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[477, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[477, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[477, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[477, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[477, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[477, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[477, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[477, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[477, "pep-489-multi-phase-extension-module-initialization"]], "zipapp": [[477, "zipapp"], [479, "zipapp"]], "cgi": [[477, "cgi"]], "cmath": [[477, "cmath"], [478, "cmath"]], "code": [[477, "code"]], "compileall": [[477, "compileall"], [479, "compileall"], [481, "compileall"]], "concurrent.futures": [[477, "concurrent-futures"], [478, "concurrent-futures"], [479, "concurrent-futures"], [481, "concurrent-futures"]], "difflib": [[477, "difflib"]], "gzip": [[477, "gzip"], [480, "gzip"]], "heapq": [[477, "heapq"]], "idlelib and IDLE": [[477, "idlelib-and-idle"], [478, "idlelib-and-idle"], [479, "idlelib-and-idle"], [476, "idlelib-and-idle"]], "imghdr": [[477, "imghdr"]], "json": [[477, "json"], [478, "json"]], "readline": [[477, "readline"], [478, "readline"]], "selectors": [[477, "selectors"], [476, "selectors"]], "sndhdr": [[477, "sndhdr"]], "Memory BIO Support": [[477, "memory-bio-support"], [341, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[477, "application-layer-protocol-negotiation-support"]], "Other Changes": [[477, "other-changes"]], "timeit": [[477, "timeit"], [478, "timeit"]], "unittest.mock": [[477, "unittest-mock"], [478, "unittest-mock"], [479, "unittest-mock"]], "wsgiref": [[477, "wsgiref"]], "xmlrpc": [[477, "xmlrpc"], [480, "xmlrpc"]], "xml.sax": [[477, "xml-sax"]], "Other module-level changes": [[477, "other-module-level-changes"]], "New Keywords": [[477, "new-keywords"]], "Deprecated Python Behavior": [[477, "deprecated-python-behavior"], [479, "deprecated-python-behavior"]], "API and Feature Removals": [[477, "api-and-feature-removals"], [478, "api-and-feature-removals"], [479, "api-and-feature-removals"], [476, "api-and-feature-removals"], [480, "api-and-feature-removals"]], "Porting to Python 3.5": [[477, "porting-to-python-3-5"]], "Changes in Python behavior": [[477, "changes-in-python-behavior"], [480, "changes-in-python-behavior"]], "Notable changes in Python 3.5.4": [[477, "notable-changes-in-python-3-5-4"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[478, "what-s-new-in-python-3-6"]], "PEP 498: Formatted string literals": [[478, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[478, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[478, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[478, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[478, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[478, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[478, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[478, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[478, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[478, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[478, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[478, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[478, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[478, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[478, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[478, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[478, "dtrace-and-systemtap-probing-support"]], "secrets": [[478, "secrets"]], "pickletools": [[478, "pickletools"]], "rlcompleter": [[478, "rlcompleter"]], "telnetlib": [[478, "telnetlib"]], "tracemalloc": [[478, "tracemalloc"], [479, "tracemalloc"], [476, "tracemalloc"], [481, "tracemalloc"]], "urllib.request": [[478, "urllib-request"]], "urllib.robotparser": [[478, "urllib-robotparser"]], "winreg": [[478, "winreg"]], "winsound": [[478, "winsound"]], "xmlrpc.client": [[478, "xmlrpc-client"]], "Other Improvements": [[478, "other-improvements"], [476, "other-improvements"]], "\u65b0\u95dc\u9375\u5b57": [[478, "new-keywords"]], "Deprecated Python behavior": [[478, "deprecated-python-behavior"]], "asynchat": [[478, "asynchat"]], "grp": [[478, "grp"]], "Deprecated Build Options": [[478, "deprecated-build-options"]], "Porting to Python 3.6": [[478, "porting-to-python-3-6"]], "Changes in 'python' Command Behavior": [[478, "changes-in-python-command-behavior"], [476, "changes-in-python-command-behavior"]], "Notable changes in Python 3.6.2": [[478, "notable-changes-in-python-3-6-2"]], "Notable changes in Python 3.6.4": [[478, "notable-changes-in-python-3-6-4"]], "Notable changes in Python 3.6.5": [[478, "notable-changes-in-python-3-6-5"]], "Notable changes in Python 3.6.7": [[478, "notable-changes-in-python-3-6-7"]], "Notable changes in Python 3.6.10": [[478, "notable-changes-in-python-3-6-10"]], "Notable changes in Python 3.6.13": [[478, "notable-changes-in-python-3-6-13"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[479, "what-s-new-in-python-3-7"]], "Summary -- Release Highlights": [[479, "summary-release-highlights"], [476, "summary-release-highlights"]], "PEP 563: Postponed Evaluation of Annotations": [[479, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[479, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[479, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[479, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[479, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[479, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[479, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[479, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[479, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[479, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[479, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[479, "python-development-mode-x-dev"]], "contextvars": [[479, "contextvars"]], "importlib.resources": [[479, "importlib-resources"]], "calendar": [[479, "calendar"]], "cProfile": [[479, "cprofile"], [480, "cprofile"]], "http.server": [[479, "http-server"]], "mimetypes": [[479, "mimetypes"]], "msilib": [[479, "msilib"]], "queue": [[479, "queue"]], "string": [[479, "string"]], "uu": [[479, "uu"]], "uuid": [[479, "uuid"]], "xml.etree": [[479, "xml-etree"], [476, "xml-etree"]], "xmlrpc.server": [[479, "xmlrpc-server"]], "aifc": [[479, "aifc"], [476, "aifc"]], "gettext": [[479, "gettext"], [480, "gettext"]], "macpath": [[479, "macpath"]], "sunau": [[479, "sunau"], [476, "sunau"]], "wave": [[479, "wave"], [476, "wave"]], "Platform Support Removals": [[479, "platform-support-removals"]], "Module Removals": [[479, "module-removals"]], "Windows-only Changes": [[479, "windows-only-changes"], [479, "id12"]], "Porting to Python 3.7": [[479, "porting-to-python-3-7"]], "Changes in Python Behavior": [[479, "changes-in-python-behavior"]], "Other CPython implementation changes": [[479, "id13"]], "Notable changes in Python 3.7.1": [[479, "notable-changes-in-python-3-7-1"]], "Notable changes in Python 3.7.2": [[479, "notable-changes-in-python-3-7-2"]], "Notable changes in Python 3.7.6": [[479, "notable-changes-in-python-3-7-6"]], "Notable changes in Python 3.7.10": [[479, "notable-changes-in-python-3-7-10"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[476, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[476, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[476, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[476, "pep-451-a-modulespec-type-for-the-import-system"]], "ensurepip": [[476, "ensurepip"]], "audioop": [[476, "audioop"]], "colorsys": [[476, "colorsys"]], "filecmp": [[476, "filecmp"]], "marshal": [[476, "marshal"]], "plistlib": [[476, "plistlib"], [480, "plistlib"]], "pty": [[476, "pty"]], "resource": [[476, "resource"]], "weakref": [[476, "weakref"], [480, "weakref"]], "CPython Implementation Changes": [[476, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[476, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[476, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[476, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[476, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[476, "other-build-and-c-api-changes"]], "Significant Optimizations": [[476, "significant-optimizations"]], "Deprecations in the Python API": [[476, "deprecations-in-the-python-api"]], "Deprecated Features": [[476, "deprecated-features"]], "Operating Systems No Longer Supported": [[476, "operating-systems-no-longer-supported"]], "Code Cleanups": [[476, "code-cleanups"]], "Porting to Python 3.4": [[476, "porting-to-python-3-4"]], "Changed in 3.4.3": [[476, "changed-in-3-4-3"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[480, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[480, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[480, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[480, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[480, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[480, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[480, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[480, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[480, "pickle-protocol-5-with-out-of-band-data-buffers"]], "builtins": [[480, "builtins"]], "json.tool": [[480, "json-tool"]], "tokenize": [[480, "tokenize"]], "Porting to Python 3.8": [[480, "porting-to-python-3-8"]], "Notable changes in Python 3.8.1": [[480, "notable-changes-in-python-3-8-1"]], "Notable changes in Python 3.8.8": [[480, "notable-changes-in-python-3-8-8"]], "Notable changes in Python 3.8.12": [[480, "notable-changes-in-python-3-8-12"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[482, "changelog"]], "Python next": [[482, "python-next"]], "Security": [[482, "security"], [482, "id3"], [482, "id64"], [482, "id75"], [482, "id85"], [482, "id94"], [482, "id104"], [482, "id122"], [482, "id133"], [482, "id143"], [482, "id153"], [482, "id163"], [482, "id174"], [482, "id185"], [482, "id200"], [482, "id210"], [482, "id221"], [482, "id232"], [482, "id243"], [482, "id259"], [482, "id294"], [482, "id305"], [482, "id346"], [482, "id368"], [482, "id391"], [482, "id400"], [482, "id401"], [482, "id460"], [482, "id469"], [482, "id479"], [482, "id489"], [482, "id493"], [482, "id501"], [482, "id514"]], "Core and Builtins": [[482, "core-and-builtins"], [482, "id4"], [482, "id13"], [482, "id22"], [482, "id30"], [482, "id39"], [482, "id47"], [482, "id55"], [482, "id65"], [482, "id76"], [482, "id86"], [482, "id95"], [482, "id105"], [482, "id114"], [482, "id123"], [482, "id134"], [482, "id144"], [482, "id154"], [482, "id164"], [482, "id175"], [482, "id186"], [482, "id194"], [482, "id201"], [482, "id211"], [482, "id222"], [482, "id233"], [482, "id244"], [482, "id253"], [482, "id260"], [482, "id272"], [482, "id278"], [482, "id285"], [482, "id295"], [482, "id306"], [482, "id315"], [482, "id323"], [482, "id330"], [482, "id340"], [482, "id347"], [482, "id356"], [482, "id369"], [482, "id379"], [482, "id392"], [482, "id402"], [482, "id411"], [482, "id413"], [482, "id421"], [482, "id425"], [482, "id430"], [482, "id435"], [482, "id440"], [482, "id446"], [482, "id454"], [482, "id461"], [482, "id470"], [482, "id480"], [482, "id490"], [482, "id494"], [482, "id502"], [482, "id511"], [482, "id515"], [482, "id523"], [482, "id525"], [482, "id536"], [482, "id538"], [482, "id540"], [482, "id545"], [482, "id548"], [482, "id553"], [482, "id555"], [482, "id561"], [482, "id567"], [482, "id572"], [482, "id577"]], "Library": [[482, "library"], [482, "id5"], [482, "id14"], [482, "id23"], [482, "id31"], [482, "id40"], [482, "id48"], [482, "id56"], [482, "id66"], [482, "id77"], [482, "id87"], [482, "id96"], [482, "id106"], [482, "id115"], [482, "id124"], [482, "id135"], [482, "id145"], [482, "id155"], [482, "id165"], [482, "id176"], [482, "id187"], [482, "id195"], [482, "id202"], [482, "id212"], [482, "id223"], [482, "id234"], [482, "id245"], [482, "id254"], [482, "id261"], [482, "id270"], [482, "id273"], [482, "id279"], [482, "id286"], [482, "id296"], [482, "id307"], [482, "id316"], [482, "id324"], [482, "id331"], [482, "id341"], [482, "id348"], [482, "id357"], [482, "id370"], [482, "id380"], [482, "id389"], [482, "id393"], [482, "id403"], [482, "id414"], [482, "id426"], [482, "id431"], [482, "id436"], [482, "id441"], [482, "id447"], [482, "id455"], [482, "id462"], [482, "id471"], [482, "id481"], [482, "id491"], [482, "id492"], [482, "id495"], [482, "id503"], [482, "id516"], [482, "id526"], [482, "id534"], [482, "id537"], [482, "id539"], [482, "id541"], [482, "id546"], [482, "id549"], [482, "id554"], [482, "id556"], [482, "id562"], [482, "id568"], [482, "id573"], [482, "id578"]], "Documentation": [[482, "documentation"], [482, "id6"], [482, "id15"], [482, "id24"], [482, "id32"], [482, "id41"], [482, "id49"], [482, "id57"], [482, "id67"], [482, "id78"], [482, "id88"], [482, "id97"], [482, "id107"], [482, "id116"], [482, "id125"], [482, "id136"], [482, "id146"], [482, "id156"], [482, "id166"], [482, "id177"], [482, "id188"], [482, "id196"], [482, "id203"], [482, "id213"], [482, "id224"], [482, "id235"], [482, "id246"], [482, "id255"], [482, "id262"], [482, "id274"], [482, "id280"], [482, "id287"], [482, "id297"], [482, "id308"], [482, "id317"], [482, "id325"], [482, "id332"], [482, "id342"], [482, "id349"], [482, "id358"], [482, "id371"], [482, "id381"], [482, "id394"], [482, "id407"], [482, "id418"], [482, "id428"], [482, "id432"], [482, "id467"], [482, "id473"], [482, "id483"], [482, "id496"], [482, "id506"], [482, "id518"], [482, "id528"], [482, "id543"], [482, "id551"], [482, "id559"], [482, "id582"]], "Tests": [[482, "tests"], [482, "id7"], [482, "id16"], [482, "id25"], [482, "id33"], [482, "id42"], [482, "id50"], [482, "id58"], [482, "id68"], [482, "id79"], [482, "id89"], [482, "id98"], [482, "id108"], [482, "id117"], [482, "id126"], [482, "id137"], [482, "id147"], [482, "id157"], [482, "id167"], [482, "id178"], [482, "id189"], [482, "id204"], [482, "id214"], [482, "id225"], [482, "id236"], [482, "id247"], [482, "id256"], [482, "id263"], [482, "id281"], [482, "id288"], [482, "id298"], [482, "id309"], [482, "id318"], [482, "id326"], [482, "id333"], [482, "id350"], [482, "id359"], [482, "id366"], [482, "id372"], [482, "id382"], [482, "id395"], [482, "id409"], [482, "id419"], [482, "id433"], [482, "id439"], [482, "id445"], [482, "id450"], [482, "id457"], [482, "id468"], [482, "id474"], [482, "id484"], [482, "id497"], [482, "id507"], [482, "id512"], [482, "id519"], [482, "id529"], [482, "id544"], [482, "id550"], [482, "id558"], [482, "id564"], [482, "id570"], [482, "id583"]], "Build": [[482, "build"], [482, "id8"], [482, "id17"], [482, "id26"], [482, "id34"], [482, "id43"], [482, "id51"], [482, "id59"], [482, "id69"], [482, "id80"], [482, "id90"], [482, "id99"], [482, "id109"], [482, "id118"], [482, "id127"], [482, "id138"], [482, "id148"], [482, "id158"], [482, "id168"], [482, "id179"], [482, "id190"], [482, "id197"], [482, "id205"], [482, "id215"], [482, "id226"], [482, "id237"], [482, "id248"], [482, "id264"], [482, "id275"], [482, "id282"], [482, "id289"], [482, "id299"], [482, "id310"], [482, "id319"], [482, "id334"], [482, "id343"], [482, "id351"], [482, "id360"], [482, "id367"], [482, "id373"], [482, "id383"], [482, "id390"], [482, "id396"], [482, "id406"], [482, "id412"], [482, "id420"], [482, "id424"], [482, "id434"], [482, "id438"], [482, "id444"], [482, "id451"], [482, "id459"], [482, "id465"], [482, "id476"], [482, "id485"], [482, "id498"], [482, "id510"], [482, "id520"], [482, "id530"], [482, "id533"], [482, "id535"], [482, "id547"], [482, "id552"], [482, "id563"], [482, "id569"], [482, "id574"], [482, "id580"]], "Tools/Demos": [[482, "tools-demos"], [482, "id11"], [482, "id20"], [482, "id73"], [482, "id120"], [482, "id131"], [482, "id161"], [482, "id172"], [482, "id183"], [482, "id219"], [482, "id230"], [482, "id241"], [482, "id251"], [482, "id268"], [482, "id293"], [482, "id303"], [482, "id314"], [482, "id328"], [482, "id338"], [482, "id354"], [482, "id364"], [482, "id377"], [482, "id387"], [482, "id399"], [482, "id408"], [482, "id422"], [482, "id429"], [482, "id452"], [482, "id466"], [482, "id478"], [482, "id487"], [482, "id508"], [482, "id522"], [482, "id532"], [482, "id560"], [482, "id565"], [482, "id571"], [482, "id584"]], "C API": [[482, "c-api"], [482, "id12"], [482, "id21"], [482, "id29"], [482, "id38"], [482, "id46"], [482, "id54"], [482, "id63"], [482, "id74"], [482, "id84"], [482, "id93"], [482, "id103"], [482, "id113"], [482, "id121"], [482, "id132"], [482, "id142"], [482, "id152"], [482, "id162"], [482, "id173"], [482, "id184"], [482, "id193"], [482, "id199"], [482, "id209"], [482, "id220"], [482, "id231"], [482, "id242"], [482, "id252"], [482, "id269"], [482, "id271"], [482, "id304"], [482, "id322"], [482, "id329"], [482, "id339"], [482, "id345"], [482, "id355"], [482, "id365"], [482, "id378"], [482, "id388"], [482, "id405"], [482, "id417"], [482, "id427"], [482, "id443"], [482, "id449"], [482, "id464"], [482, "id477"], [482, "id488"], [482, "id500"], [482, "id505"], [482, "id566"], [482, "id575"], [482, "id581"]], "Python 3.11.0 beta 1": [[482, "python-3-11-0-beta-1"]], "Python 3.11.0 alpha 7": [[482, "python-3-11-0-alpha-7"]], "Python 3.11.0 alpha 6": [[482, "python-3-11-0-alpha-6"]], "Python 3.11.0 alpha 5": [[482, "python-3-11-0-alpha-5"]], "Python 3.11.0 alpha 4": [[482, "python-3-11-0-alpha-4"]], "Python 3.11.0 alpha 3": [[482, "python-3-11-0-alpha-3"]], "Python 3.11.0 alpha 2": [[482, "python-3-11-0-alpha-2"]], "Python 3.11.0 alpha 1": [[482, "python-3-11-0-alpha-1"]], "Python 3.10.0 beta 1": [[482, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[482, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[482, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[482, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[482, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[482, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[482, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[482, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[482, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[482, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[482, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[482, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[482, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[482, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[482, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[482, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[482, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[482, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[482, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[482, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[482, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[482, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[482, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[482, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[482, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[482, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[482, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[482, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[482, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[482, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[482, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[482, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[482, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[482, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[482, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[482, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[482, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[482, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[482, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[482, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[482, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[482, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[482, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[482, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[482, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[482, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[482, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[482, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[482, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[482, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[482, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[482, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[482, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[482, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[482, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[482, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[482, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[482, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[482, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[482, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[482, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[482, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[482, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[482, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[482, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[482, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[482, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[482, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[482, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[482, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[482, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[482, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[482, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[482, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[482, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[482, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[482, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[482, "python-3-5-0-alpha-1"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[483, "what-s-new-in-python"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[481, "what-s-new-in-python-3-9"]], "You should check for DeprecationWarning in your code": [[481, "you-should-check-for-deprecationwarning-in-your-code"]], "Dictionary Merge & Update Operators": [[481, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[481, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[481, "type-hinting-generics-in-standard-collections"]], "New Parser": [[481, "new-parser"]], "zoneinfo": [[481, "zoneinfo"]], "graphlib": [[481, "graphlib"]], "Porting to Python 3.9": [[481, "porting-to-python-3-9"], [481, "id2"]], "Notable changes in Python 3.9.1": [[481, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[481, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Notable changes in Python 3.9.2": [[481, "notable-changes-in-python-3-9-2"]], "sched --- Event scheduler": [[325, "module-sched"]], "Scheduler Objects": [[325, "scheduler-objects"]], "quopri --- Encode and decode MIME quoted-printable data": [[317, "module-quopri"]], "posix --- The most common POSIX system calls": [[306, "module-posix"]], "Large File Support": [[306, "large-file-support"]], "Notable Module Contents": [[306, "notable-module-contents"]], "reprlib --- Alternate repr() implementation": [[321, "module-reprlib"]], "Repr \u7269\u4ef6": [[321, "repr-objects"]], "Subclassing Repr Objects": [[321, "subclassing-repr-objects"]], "shelve --- Python object persistence": [[330, "module-shelve"]], "Restrictions": [[330, "restrictions"]], "shutil --- High-level file operations": [[332, "module-shutil"]], "Directory and files operations": [[332, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[332, "platform-dependent-efficient-copy-operations"]], "copytree example": [[332, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[332, "rmtree-example"]], "Archiving operations": [[332, "archiving-operations"]], "Archiving example": [[332, "archiving-example"]], "Archiving example with base_dir": [[332, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[332, "querying-the-size-of-the-output-terminal"]], "runpy --- Locating and executing Python modules": [[324, "module-runpy"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[318, "module-random"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[318, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[318, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[318, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[318, "functions-for-sequences"]], "Discrete distributions": [[318, "discrete-distributions"]], "\u5be6\u6578\u5206\u5e03": [[318, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[318, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[318, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[318, "recipes"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[314, "module-xml.parsers.expat"]], "ExpatError \u4f8b\u5916": [[314, "expaterror-exceptions"]], "Content Model Descriptions": [[314, "module-xml.parsers.expat.model"]], "Expat error constants": [[314, "module-xml.parsers.expat.errors"]], "shlex --- Simple lexical analysis": [[331, "module-shlex"]], "shlex \u7269\u4ef6": [[331, "shlex-objects"]], "Parsing Rules": [[331, "parsing-rules"]], "Improved Compatibility with Shells": [[331, "improved-compatibility-with-shells"]], "selectors --- High-level I/O multiplexing": [[329, "module-selectors"]], "Classes": [[329, "classes"], [347, "classes"]], "site --- Site-specific configuration hook": [[334, "module-site"]], "Readline configuration": [[334, "readline-configuration"]], "Command Line Interface": [[334, "command-line-interface"], [262, "module-json.tool"], [255, "command-line-interface"], [233, "command-line-interface"]], "pyclbr --- Python module browser support": [[312, "module-pyclbr"]], "Class Objects": [[312, "class-objects"]], "The Python Profilers": [[308, "the-python-profilers"]], "Introduction to the profilers": [[308, "introduction-to-the-profilers"]], "Instant User's Manual": [[308, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[308, "module-cProfile"]], "The Stats Class": [[308, "the-stats-class"]], "What Is Deterministic Profiling?": [[308, "what-is-deterministic-profiling"]], "\u9650\u5236": [[308, "limitations"]], "\u6821\u6b63": [[308, "calibration"]], "Using a custom timer": [[308, "using-a-custom-timer"]], "resource --- Resource usage information": [[322, "module-resource"]], "Resource Limits": [[322, "resource-limits"]], "Resource Usage": [[322, "resource-usage"]], "smtplib --- SMTP protocol client": [[335, "module-smtplib"]], "SMTP \u7269\u4ef6": [[335, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[335, "smtp-example"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[339, "module-spwd"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[336, "module-sndhdr"]], "select --- Waiting for I/O completion": [[328, "module-select"]], "/dev/poll Polling Objects": [[328, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[328, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[328, "polling-objects"]], "Kqueue Objects": [[328, "kqueue-objects"]], "Kevent Objects": [[328, "kevent-objects"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[326, "module-secrets"]], "\u4e82\u6578": [[326, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[326, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[326, "how-many-bytes-should-tokens-use"]], "\u5176\u4ed6\u51fd\u5f0f": [[326, "other-functions"], [354, "other-functions"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[326, "recipes-and-best-practices"]], "pty --- Pseudo-terminal utilities": [[309, "module-pty"]], "re --- Regular expression operations": [[319, "module-re"]], "Regular Expression Syntax": [[319, "regular-expression-syntax"]], "Flags": [[319, "flags"]], "Functions": [[319, "functions"]], "Exceptions": [[319, "exceptions"]], "Regular Expression Objects": [[319, "regular-expression-objects"]], "Match Objects": [[319, "match-objects"]], "Regular Expression Examples": [[319, "regular-expression-examples"]], "Checking for a Pair": [[319, "checking-for-a-pair"]], "Simulating scanf()": [[319, "simulating-scanf"]], "search() vs. match()": [[319, "search-vs-match"]], "Making a Phonebook": [[319, "making-a-phonebook"]], "Text Munging": [[319, "text-munging"]], "Finding all Adverbs": [[319, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[319, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[319, "raw-string-notation"]], "Writing a Tokenizer": [[319, "writing-a-tokenizer"]], "readline --- GNU readline interface": [[320, "module-readline"]], "Init file": [[320, "init-file"]], "Line buffer": [[320, "line-buffer"]], "History file": [[320, "history-file"]], "History list": [[320, "history-list"]], "Startup hooks": [[320, "startup-hooks"]], "Completion": [[320, "completion"]], "Python Runtime Services": [[315, "python-runtime-services"]], "socketserver --- A framework for network servers": [[338, "module-socketserver"]], "Server Creation Notes": [[338, "server-creation-notes"]], "Request Handler Objects": [[338, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[338, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[338, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[338, "asynchronous-mixins"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[316, "module-queue"]], "\u4f47\u5217\u7269\u4ef6": [[316, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[316, "simplequeue-objects"]], "pydoc --- Documentation generator and online help system": [[313, "module-pydoc"]], "socket --- Low-level networking interface": [[337, "module-socket"]], "Socket families": [[337, "socket-families"]], "Creating sockets": [[337, "creating-sockets"]], "Other functions": [[337, "other-functions"]], "Socket Objects": [[337, "socket-objects"]], "Notes on socket timeouts": [[337, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[337, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[337, "timeouts-and-the-accept-method"]], "rlcompleter --- Completion function for GNU readline": [[323, "module-rlcompleter"]], "Completer Objects": [[323, "completer-objects"]], "pwd --- The password database": [[310, "module-pwd"]], "signal --- Set handlers for asynchronous events": [[333, "module-signal"]], "General rules": [[333, "general-rules"]], "Execution of Python signal handlers": [[333, "execution-of-python-signal-handlers"]], "Signals and threads": [[333, "signals-and-threads"]], "Note on SIGPIPE": [[333, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[333, "note-on-signal-handlers-and-exceptions"]], "py_compile --- Compile Python source files": [[311, "module-py_compile"]], "pprint --- Data pretty printer": [[307, "module-pprint"]], "PrettyPrinter \u7269\u4ef6": [[307, "prettyprinter-objects"]], "Security Considerations": [[327, "security-considerations"], [348, "security-considerations"], [244, "security-considerations"], [143, "security-considerations"]], "textwrap --- Text wrapping and filling": [[363, "module-textwrap"]], "test --- Regression tests package for Python": [[361, "module-test"]], "Writing Unit Tests for the test package": [[361, "writing-unit-tests-for-the-test-package"]], "Running tests using the command-line interface": [[361, "running-tests-using-the-command-line-interface"]], "test.support --- Utilities for the Python test suite": [[361, "module-test.support"]], "test.support.socket_helper --- Utilities for socket tests": [[361, "module-test.support.socket_helper"]], "test.support.script_helper --- Utilities for the Python execution tests": [[361, "module-test.support.script_helper"]], "test.support.bytecode_helper --- Support tools for testing correct bytecode generation": [[361, "module-test.support.bytecode_helper"]], "test.support.threading_helper --- Utilities for threading tests": [[361, "module-test.support.threading_helper"]], "test.support.os_helper --- Utilities for os tests": [[361, "module-test.support.os_helper"]], "test.support.import_helper --- Utilities for import tests": [[361, "module-test.support.import_helper"]], "test.support.warnings_helper --- Utilities for warnings tests": [[361, "module-test.support.warnings_helper"]], "tkinter.messagebox --- Tkinter message prompts": [[372, "module-tkinter.messagebox"]], "tkinter.font --- Tkinter font wrapper": [[371, "module-tkinter.font"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[350, "superseded-modules"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[359, "module-tempfile"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[359, "deprecated-functions-and-variables"]], "\u5167\u5efa\u578b\u5225": [[344, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[344, "truth-value-testing"]], "Boolean Operations --- and, or, not": [[344, "boolean-operations-and-or-not"]], "Numeric Types --- int, float, complex": [[344, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[344, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[344, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[344, "additional-methods-on-float"]], "Hashing of numeric types": [[344, "hashing-of-numeric-types"]], "Iterator Types": [[344, "iterator-types"]], "Generator Types": [[344, "generator-types"]], "Sequence Types --- list, tuple, range": [[344, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[344, "common-sequence-operations"]], "Immutable Sequence Types": [[344, "immutable-sequence-types"]], "Mutable Sequence Types": [[344, "mutable-sequence-types"]], "Tuples": [[344, "tuples"]], "Ranges": [[344, "ranges"]], "Text Sequence Type --- str": [[344, "text-sequence-type-str"]], "printf-style String Formatting": [[344, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[344, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytearray Objects": [[344, "bytearray-objects"]], "Bytes and Bytearray Operations": [[344, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[344, "printf-style-bytes-formatting"]], "Memory Views": [[344, "memory-views"]], "Set Types --- set, frozenset": [[344, "set-types-set-frozenset"]], "Mapping Types --- dict": [[344, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[344, "dictionary-view-objects"]], "Context Manager Types": [[344, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[344, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[344, "generic-alias-type"]], "Standard Generic Classes": [[344, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[344, "special-attributes-of-genericalias-objects"]], "Union Type": [[344, "union-type"]], "Other Built-in Types": [[344, "other-built-in-types"]], "Classes and Class Instances": [[344, "classes-and-class-instances"]], "The Null Object": [[344, "the-null-object"]], "The Ellipsis Object": [[344, "the-ellipsis-object"]], "The NotImplemented Object": [[344, "the-notimplemented-object"]], "Boolean Values": [[344, "boolean-values"]], "Internal Objects": [[344, "internal-objects"]], "Special Attributes": [[344, "special-attributes"]], "Integer string conversion length limitation": [[344, "integer-string-conversion-length-limitation"]], "Affected APIs": [[344, "affected-apis"]], "Configuring the limit": [[344, "configuring-the-limit"]], "Recommended configuration": [[344, "recommended-configuration"]], "sys --- System-specific parameters and functions": [[352, "module-sys"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[362, "text-processing-services"]], "tkinter.colorchooser --- Color choosing dialog": [[369, "module-tkinter.colorchooser"]], "ssl --- TLS/SSL wrapper for socket objects": [[341, "module-ssl"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[341, "functions-constants-and-exceptions"]], "Socket creation": [[341, "socket-creation"]], "Context creation": [[341, "context-creation"]], "Random generation": [[341, "random-generation"]], "Certificate handling": [[341, "certificate-handling"]], "SSL Sockets": [[341, "ssl-sockets"]], "SSL Contexts": [[341, "ssl-contexts"]], "Certificates": [[341, "certificates"]], "Certificate chains": [[341, "certificate-chains"]], "CA certificates": [[341, "ca-certificates"]], "Combined key and certificate": [[341, "combined-key-and-certificate"]], "Self-signed certificates": [[341, "self-signed-certificates"]], "Testing for SSL support": [[341, "testing-for-ssl-support"]], "Client-side operation": [[341, "client-side-operation"]], "Server-side operation": [[341, "server-side-operation"]], "Notes on non-blocking sockets": [[341, "notes-on-non-blocking-sockets"]], "SSL session": [[341, "ssl-session"]], "Security considerations": [[341, "security-considerations"], [268, "security-considerations"]], "Best defaults": [[341, "best-defaults"]], "Manual settings": [[341, "manual-settings"]], "Verifying certificates": [[341, "verifying-certificates"]], "Protocol versions": [[341, "protocol-versions"]], "Cipher selection": [[341, "cipher-selection"]], "Multi-processing": [[341, "multi-processing"]], "TLS 1.3": [[341, "tls-1-3"]], "struct --- Interpret bytes as packed binary data": [[347, "module-struct"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[347, "functions-and-exceptions"]], "Format Strings": [[347, "format-strings"]], "Byte Order, Size, and Alignment": [[347, "byte-order-size-and-alignment"]], "Format Characters": [[347, "format-characters"]], "The initialization of the sys.path module search path": [[353, "the-initialization-of-the-sys-path-module-search-path"]], "Virtual environments": [[353, "virtual-environments"]], "_pth files": [[353, "pth-files"]], "Embedded Python": [[353, "embedded-python"]], "tkinter --- Python interface to Tcl/Tk": [[368, "module-tkinter"]], "Architecture": [[368, "architecture"]], "Tkinter Modules": [[368, "tkinter-modules"]], "Tkinter Life Preserver": [[368, "tkinter-life-preserver"]], "A Hello World Program": [[368, "a-hello-world-program"]], "Important Tk Concepts": [[368, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[368, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[368, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[368, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[368, "threading-model"]], "Handy Reference": [[368, "handy-reference"]], "Setting Options": [[368, "setting-options"]], "The Packer": [[368, "the-packer"]], "Packer Options": [[368, "packer-options"]], "Coupling Widget Variables": [[368, "coupling-widget-variables"]], "The Window Manager": [[368, "the-window-manager"]], "Tk Option Data Types": [[368, "tk-option-data-types"]], "Bindings and Events": [[368, "bindings-and-events"]], "The index Parameter": [[368, "the-index-parameter"]], "Images": [[368, "images"]], "File Handlers": [[368, "file-handlers"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[349, "module-sunau"]], "AU_read \u7269\u4ef6": [[349, "au-read-objects"]], "AU_write \u7269\u4ef6": [[349, "au-write-objects"]], "sqlite3 --- DB-API 2.0 interface for SQLite databases": [[340, "module-sqlite3"]], "Module functions": [[340, "module-functions"]], "Module constants": [[340, "module-constants"]], "Connection objects": [[340, "connection-objects"]], "Cursor objects": [[340, "cursor-objects"]], "Row objects": [[340, "row-objects"]], "Blob objects": [[340, "blob-objects"]], "PrepareProtocol objects": [[340, "prepareprotocol-objects"]], "SQLite and Python types": [[340, "sqlite-and-python-types"]], "Default adapters and converters (deprecated)": [[340, "default-adapters-and-converters-deprecated"]], "Command-line interface": [[340, "command-line-interface"]], "How-to guides": [[340, "how-to-guides"]], "How to use placeholders to bind values in SQL queries": [[340, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[340, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[340, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[340, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[340, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[340, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[340, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[340, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[340, "how-to-work-with-sqlite-uris"]], "\u89e3\u91cb": [[340, "explanation"]], "Transaction control": [[340, "transaction-control"]], "timeit --- Measure execution time of small code snippets": [[366, "module-timeit"]], "\u57fa\u790e\u7bc4\u4f8b": [[366, "basic-examples"], [235, "basic-examples"]], "Python Interface": [[366, "python-interface"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[358, "module-telnetlib"]], "Telnet Objects": [[358, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[358, "telnet-example"]], "subprocess --- Subprocess management": [[348, "module-subprocess"]], "Using the subprocess Module": [[348, "using-the-subprocess-module"]], "Frequently Used Arguments": [[348, "frequently-used-arguments"]], "Popen Constructor": [[348, "popen-constructor"]], "Popen Objects": [[348, "popen-objects"]], "Windows Popen Helpers": [[348, "windows-popen-helpers"]], "Windows Constants": [[348, "windows-constants"]], "Older high-level API": [[348, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[348, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[348, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[348, "replacing-shell-pipeline"]], "Replacing os.system()": [[348, "replacing-os-system"]], "Replacing the os.spawn family": [[348, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[348, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[348, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[348, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[348, "converting-an-argument-sequence-to-a-string-on-windows"]], "Disabling use of vfork() or posix_spawn()": [[348, "disabling-use-of-vfork-or-posix-spawn"]], "syslog --- Unix syslog library routines": [[355, "module-syslog"]], "\u4ee5 Tk \u6253\u9020 GUI": [[367, "graphical-user-interfaces-with-tk"]], "termios --- POSIX style tty control": [[360, "module-termios"]], "tkinter.dnd --- Drag and drop support": [[370, "module-tkinter.dnd"]], "tabnanny --- Detection of ambiguous indentation": [[356, "module-tabnanny"]], "sysconfig --- Provide access to Python's configuration information": [[354, "module-sysconfig"]], "Configuration variables": [[354, "configuration-variables"]], "Installation paths": [[354, "installation-paths"]], "Using sysconfig as a script": [[354, "using-sysconfig-as-a-script"]], "tarfile --- Read and write tar archive files": [[357, "module-tarfile"]], "TarFile \u7269\u4ef6": [[357, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[357, "tarinfo-objects"]], "Supported tar formats": [[357, "supported-tar-formats"]], "Unicode issues": [[357, "unicode-issues"]], "string --- Common string operations": [[345, "module-string"]], "String constants": [[345, "string-constants"]], "Custom String Formatting": [[345, "custom-string-formatting"]], "Format String Syntax": [[345, "format-string-syntax"]], "Format Specification Mini-Language": [[345, "format-specification-mini-language"]], "Format examples": [[345, "format-examples"]], "Template strings": [[345, "template-strings"]], "Helper functions": [[345, "helper-functions"]], "stat --- Interpreting stat() results": [[342, "module-stat"]], "threading --- Thread-based parallelism": [[364, "module-threading"]], "Thread-Local Data": [[364, "thread-local-data"]], "Thread Objects": [[364, "thread-objects"]], "Lock Objects": [[364, "lock-objects"]], "RLock \u7269\u4ef6": [[364, "rlock-objects"]], "Condition Objects": [[364, "condition-objects"]], "Semaphore Objects": [[364, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[364, "semaphore-example"]], "Event Objects": [[364, "event-objects"]], "Timer Objects": [[364, "timer-objects"]], "Barrier Objects": [[364, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[364, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "stringprep --- Internet String Preparation": [[346, "module-stringprep"]], "time --- Time access and conversions": [[365, "module-time"]], "Clock ID Constants": [[365, "clock-id-constants"]], "Timezone Constants": [[365, "timezone-constants"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[373, "module-tkinter.scrolledtext"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[343, "module-statistics"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[343, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[343, "measures-of-spread"]], "Statistics for relations between two inputs": [[343, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[343, "function-details"]], "NormalDist \u7269\u4ef6": [[343, "normaldist-objects"]], "NormalDist Examples and Recipes": [[343, "normaldist-examples-and-recipes"]], "symtable --- Access to the compiler's symbol tables": [[351, "module-symtable"]], "Generating Symbol Tables": [[351, "generating-symbol-tables"]], "Examining Symbol Tables": [[351, "examining-symbol-tables"]], "numbers --- Numeric abstract base classes": [[289, "module-numbers"]], "The numeric tower": [[289, "the-numeric-tower"]], "Notes for type implementors": [[289, "notes-for-type-implementors"]], "Adding More Numeric ABCs": [[289, "adding-more-numeric-abcs"]], "Implementing the arithmetic operations": [[289, "implementing-the-arithmetic-operations"]], "pdb --- The Python Debugger": [[297, "module-pdb"]], "Debugger Commands": [[297, "debugger-commands"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[288, "module-nntplib"]], "NNTP \u7269\u4ef6": [[288, "nntp-objects"]], "\u5c6c\u6027": [[288, "attributes"]], "Utility functions": [[288, "utility-functions"], [175, "utility-functions"]], "Structured Markup Processing Tools": [[273, "structured-markup-processing-tools"]], "pathlib --- Object-oriented filesystem paths": [[296, "module-pathlib"]], "Basic use": [[296, "basic-use"]], "Pure paths": [[296, "pure-paths"]], "General properties": [[296, "general-properties"]], "Accessing individual parts": [[296, "accessing-individual-parts"]], "Methods and properties": [[296, "methods-and-properties"]], "Concrete paths": [[296, "concrete-paths"]], "Correspondence to tools in the os module": [[296, "correspondence-to-tools-in-the-os-module"]], "pipes --- shell pipelines \u4ecb\u9762": [[301, "module-pipes"]], "Template Objects": [[301, "template-objects"]], "os.path --- Common pathname manipulations": [[294, "module-os.path"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[282, "module-msvcrt"]], "File Operations": [[282, "file-operations"]], "Console I/O": [[282, "console-i-o"]], "Other Functions": [[282, "other-functions"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[275, "module-math"]], "Number-theoretic and representation functions": [[275, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[275, "power-and-logarithmic-functions"], [154, "power-and-logarithmic-functions"]], "Trigonometric functions": [[275, "trigonometric-functions"], [154, "trigonometric-functions"]], "Angular conversion": [[275, "angular-conversion"]], "Hyperbolic functions": [[275, "hyperbolic-functions"], [154, "hyperbolic-functions"]], "Special functions": [[275, "special-functions"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[287, "module-nis"]], "mmap --- Memory-mapped file support": [[278, "module-mmap"]], "MADV_* Constants": [[278, "madv-constants"]], "MAP_* Constants": [[278, "map-constants"]], "plistlib --- Generate and parse Apple .plist files": [[304, "module-plistlib"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[291, "module-operator"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[291, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[291, "in-place-operators"]], "multiprocessing --- Process-based parallelism": [[283, "module-multiprocessing"]], "The Process class": [[283, "the-process-class"]], "Contexts and start methods": [[283, "contexts-and-start-methods"]], "Exchanging objects between processes": [[283, "exchanging-objects-between-processes"]], "Synchronization between processes": [[283, "synchronization-between-processes"]], "Sharing state between processes": [[283, "sharing-state-between-processes"]], "Using a pool of workers": [[283, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[283, "process-and-exceptions"]], "Pipes and Queues": [[283, "pipes-and-queues"]], "Miscellaneous": [[283, "miscellaneous"], [270, "miscellaneous"]], "Connection Objects": [[283, "connection-objects"]], "Synchronization primitives": [[283, "synchronization-primitives"]], "Shared ctypes Objects": [[283, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[283, "module-multiprocessing.sharedctypes"]], "Managers": [[283, "managers"]], "Customized managers": [[283, "customized-managers"]], "Using a remote manager": [[283, "using-a-remote-manager"]], "Proxy Objects": [[283, "proxy-objects"]], "Cleanup": [[283, "cleanup"], [292, "cleanup"]], "Process Pools": [[283, "module-multiprocessing.pool"]], "Listeners and Clients": [[283, "module-multiprocessing.connection"]], "Address Formats": [[283, "address-formats"]], "Authentication keys": [[283, "authentication-keys"]], "Logging": [[283, "logging"]], "The multiprocessing.dummy module": [[283, "module-multiprocessing.dummy"]], "Programming guidelines": [[283, "programming-guidelines"]], "All start methods": [[283, "all-start-methods"]], "The spawn and forkserver start methods": [[283, "the-spawn-and-forkserver-start-methods"]], "pkgutil --- Package extension utility": [[302, "module-pkgutil"]], "Data Persistence": [[298, "data-persistence"]], "os --- Miscellaneous operating system interfaces": [[293, "module-os"]], "File Names, Command Line Arguments, and Environment Variables": [[293, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[293, "python-utf-8-mode"]], "Process Parameters": [[293, "process-parameters"]], "File Object Creation": [[293, "file-object-creation"]], "File Descriptor Operations": [[293, "file-descriptor-operations"]], "Querying the size of a terminal": [[293, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[293, "inheritance-of-file-descriptors"]], "Files and Directories": [[293, "files-and-directories"]], "Linux extended attributes": [[293, "linux-extended-attributes"]], "Process Management": [[293, "process-management"]], "Interface to the scheduler": [[293, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[293, "miscellaneous-system-information"]], "Random numbers": [[293, "random-numbers"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[290, "numeric-and-mathematical-modules"]], "netrc --- netrc file processing": [[286, "module-netrc"]], "netrc \u7269\u4ef6": [[286, "netrc-objects"]], "Multimedia Services": [[277, "multimedia-services"]], "pickletools --- Tools for pickle developers": [[300, "module-pickletools"]], "Command line usage": [[300, "command-line-usage"], [246, "command-line-usage"]], "Command line options": [[300, "command-line-options"], [262, "command-line-options"], [233, "command-line-options"]], "multiprocessing.shared_memory --- Shared memory for direct access across processes": [[284, "module-multiprocessing.shared_memory"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[303, "module-platform"]], "\u8de8\u5e73\u53f0": [[303, "cross-platform"]], "Java \u5e73\u53f0": [[303, "java-platform"]], "Windows \u5e73\u53f0": [[303, "windows-platform"]], "macOS \u5e73\u53f0": [[303, "macos-platform"]], "Unix \u5e73\u53f0": [[303, "unix-platforms"]], "Linux \u5e73\u53f0": [[303, "linux-platforms"]], "poplib --- POP3 protocol client": [[305, "module-poplib"]], "POP3 \u7269\u4ef6": [[305, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[305, "pop3-example"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[274, "module-marshal"]], "mailcap --- Mailcap file handling": [[272, "module-mailcap"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[281, "module-msilib"]], "Database Objects": [[281, "database-objects"]], "View Objects": [[281, "view-objects"]], "Summary Information Objects": [[281, "summary-information-objects"]], "Record Objects": [[281, "record-objects"]], "Errors": [[281, "errors"]], "CAB \u7269\u4ef6": [[281, "cab-objects"]], "Directory Objects": [[281, "directory-objects"]], "GUI classes": [[281, "gui-classes"]], "Precomputed tables": [[281, "precomputed-tables"]], "Internet Data Handling": [[285, "internet-data-handling"]], "optparse --- Parser for command line options": [[292, "module-optparse"]], "Terminology": [[292, "terminology"]], "What are options for?": [[292, "what-are-options-for"]], "What are positional arguments for?": [[292, "what-are-positional-arguments-for"]], "Understanding option actions": [[292, "understanding-option-actions"]], "The store action": [[292, "the-store-action"]], "Handling boolean (flag) options": [[292, "handling-boolean-flag-options"]], "Other actions": [[292, "other-actions"]], "Default values": [[292, "default-values"]], "Generating help": [[292, "generating-help"]], "Grouping Options": [[292, "grouping-options"]], "Printing a version string": [[292, "printing-a-version-string"]], "How optparse handles errors": [[292, "how-optparse-handles-errors"]], "Putting it all together": [[292, "putting-it-all-together"]], "Reference Guide": [[292, "reference-guide"]], "Creating the parser": [[292, "creating-the-parser"]], "Populating the parser": [[292, "populating-the-parser"]], "Defining options": [[292, "defining-options"]], "Option attributes": [[292, "option-attributes"]], "Standard option actions": [[292, "standard-option-actions"]], "Standard option types": [[292, "standard-option-types"]], "Querying and manipulating your option parser": [[292, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[292, "conflicts-between-options"]], "Other methods": [[292, "other-methods"]], "Option Callbacks": [[292, "option-callbacks"]], "Defining a callback option": [[292, "defining-a-callback-option"]], "How callbacks are called": [[292, "how-callbacks-are-called"]], "Raising errors in a callback": [[292, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[292, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[292, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[292, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[292, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[292, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[292, "callback-example-6-variable-arguments"]], "Extending optparse": [[292, "extending-optparse"]], "Adding new types": [[292, "adding-new-types"]], "Adding new actions": [[292, "adding-new-actions"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[295, "module-ossaudiodev"]], "Audio Device Objects": [[295, "audio-device-objects"]], "Mixer Device Objects": [[295, "mixer-device-objects"]], "pickle --- Python object serialization": [[299, "module-pickle"]], "Relationship to other Python modules": [[299, "relationship-to-other-python-modules"]], "Comparison with marshal": [[299, "comparison-with-marshal"]], "Comparison with json": [[299, "comparison-with-json"]], "Data stream format": [[299, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[299, "module-interface"]], "What can be pickled and unpickled?": [[299, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[299, "pickling-class-instances"]], "Persistence of External Objects": [[299, "persistence-of-external-objects"]], "Dispatch Tables": [[299, "dispatch-tables"]], "Handling Stateful Objects": [[299, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[299, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[299, "out-of-band-buffers"]], "Provider API": [[299, "provider-api"]], "Consumer API": [[299, "consumer-api"]], "Restricting Globals": [[299, "restricting-globals"]], "modulefinder --- Find modules used by a script": [[279, "module-modulefinder"]], "Example usage of ModuleFinder": [[279, "example-usage-of-modulefinder"]], "mimetypes --- Map filenames to MIME types": [[276, "module-mimetypes"]], "MimeTypes \u7269\u4ef6": [[276, "mimetypes-objects"]], "\u570b\u969b\u5316": [[245, "internationalization"]], "importlib --- The implementation of import": [[250, "module-importlib"]], "importlib.abc -- Abstract base classes related to import": [[250, "module-importlib.abc"]], "importlib.machinery -- Importers and path hooks": [[250, "module-importlib.machinery"]], "importlib.util -- Utility code for importers": [[250, "module-importlib.util"]], "Importing programmatically": [[250, "importing-programmatically"]], "Checking if a module can be imported": [[250, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[250, "importing-a-source-file-directly"]], "Implementing lazy imports": [[250, "implementing-lazy-imports"]], "Setting up an importer": [[250, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[250, "approximating-importlib-import-module"]], "http.server --- HTTP servers": [[244, "module-http.server"]], "ipaddress --- IPv4/IPv6 manipulation library": [[259, "module-ipaddress"]], "Convenience factory functions": [[259, "convenience-factory-functions"]], "IP Addresses": [[259, "ip-addresses"]], "Address objects": [[259, "address-objects"]], "Conversion to Strings and Integers": [[259, "conversion-to-strings-and-integers"]], "Comparison operators": [[259, "comparison-operators"]], "Arithmetic operators": [[259, "arithmetic-operators"]], "IP Network definitions": [[259, "ip-network-definitions"]], "Prefix, net mask and host mask": [[259, "prefix-net-mask-and-host-mask"]], "Network objects": [[259, "network-objects"]], "Logical operators": [[259, "logical-operators"], [259, "id3"]], "Networks as containers of addresses": [[259, "networks-as-containers-of-addresses"]], "Interface objects": [[259, "interface-objects"]], "Other Module Level Functions": [[259, "other-module-level-functions"]], "Custom Exceptions": [[259, "custom-exceptions"]], "Internet Protocols and Support": [[256, "internet-protocols-and-support"]], "logging.handlers --- Logging handlers": [[269, "module-logging.handlers"]], "Important": [[269, null], [268, null], [267, "index-0"], [210, null]], "StreamHandler": [[269, "streamhandler"]], "FileHandler": [[269, "filehandler"]], "NullHandler": [[269, "nullhandler"]], "WatchedFileHandler": [[269, "watchedfilehandler"]], "BaseRotatingHandler": [[269, "baserotatinghandler"]], "RotatingFileHandler": [[269, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[269, "timedrotatingfilehandler"]], "SocketHandler": [[269, "sockethandler"]], "DatagramHandler": [[269, "datagramhandler"]], "SysLogHandler": [[269, "sysloghandler"]], "NTEventLogHandler": [[269, "nteventloghandler"]], "SMTPHandler": [[269, "smtphandler"]], "MemoryHandler": [[269, "memoryhandler"]], "HTTPHandler": [[269, "httphandler"]], "QueueHandler": [[269, "queuehandler"]], "QueueListener": [[269, "queuelistener"]], "importlib.resources.abc -- Abstract base classes for resources": [[253, "module-importlib.resources.abc"]], "mailbox --- Manipulate mailboxes in various formats": [[271, "module-mailbox"]], "Mailbox \u7269\u4ef6": [[271, "mailbox-objects"]], "Maildir": [[271, "maildir"]], "mbox": [[271, "mbox"]], "MH": [[271, "mh"]], "Babyl": [[271, "babyl"]], "MMDF": [[271, "mmdf"]], "Message \u7269\u4ef6": [[271, "message-objects"]], "MaildirMessage": [[271, "maildirmessage"]], "mboxMessage": [[271, "mboxmessage"]], "MHMessage": [[271, "mhmessage"]], "BabylMessage": [[271, "babylmessage"]], "MMDFMessage": [[271, "mmdfmessage"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[248, "module-imghdr"]], "Networking and Interprocess Communication": [[260, "networking-and-interprocess-communication"]], "linecache --- Random access to text lines": [[265, "module-linecache"]], "locale --- Internationalization services": [[266, "module-locale"]], "Background, details, hints, tips and caveats": [[266, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[266, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[266, "access-to-message-catalogs"]], "itertools --- Functions creating iterators for efficient looping": [[261, "module-itertools"]], "Itertool functions": [[261, "itertool-functions"]], "Itertools Recipes": [[261, "itertools-recipes"]], "keyword --- Testing for Python keywords": [[263, "module-keyword"]], "http.cookiejar --- Cookie handling for HTTP clients": [[242, "module-http.cookiejar"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[242, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[242, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[242, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[242, "defaultcookiepolicy-objects"]], "Cookie \u7269\u4ef6": [[242, "cookie-objects"], [243, "cookie-objects"]], "lzma --- Compression using the LZMA algorithm": [[270, "module-lzma"]], "Reading and writing compressed files": [[270, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[270, "compressing-and-decompressing-data-in-memory"]], "Specifying custom filter chains": [[270, "specifying-custom-filter-chains"]], "html.entities --- Definitions of HTML general entities": [[238, "module-html.entities"]], "Using importlib.metadata": [[251, "module-importlib.metadata"]], "Entry points": [[251, "entry-points"]], "Distribution metadata": [[251, "distribution-metadata"]], "Distribution versions": [[251, "distribution-versions"]], "Distribution files": [[251, "distribution-files"]], "Distribution requirements": [[251, "distribution-requirements"]], "Mapping import to distribution packages": [[251, "mapping-import-to-distribution-packages"]], "Distributions": [[251, "distributions"]], "Distribution Discovery": [[251, "distribution-discovery"]], "Extending the search algorithm": [[251, "extending-the-search-algorithm"]], "logging.config --- Logging configuration": [[268, "module-logging.config"]], "Configuration functions": [[268, "configuration-functions"]], "Configuration dictionary schema": [[268, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[268, "dictionary-schema-details"]], "Incremental Configuration": [[268, "incremental-configuration"]], "Object connections": [[268, "object-connections"]], "User-defined objects": [[268, "user-defined-objects"]], "Access to external objects": [[268, "access-to-external-objects"]], "Access to internal objects": [[268, "access-to-internal-objects"]], "Import resolution and custom importers": [[268, "import-resolution-and-custom-importers"]], "Configuring QueueHandler and QueueListener": [[268, "configuring-queuehandler-and-queuelistener"]], "Configuration file format": [[268, "configuration-file-format"]], "io --- Core tools for working with streams": [[258, "module-io"]], "Text I/O": [[258, "text-i-o"], [258, "id1"], [258, "id3"]], "Binary I/O": [[258, "binary-i-o"], [258, "id2"]], "Raw I/O": [[258, "raw-i-o"]], "Text Encoding": [[258, "text-encoding"]], "Opt-in EncodingWarning": [[258, "opt-in-encodingwarning"]], "High-level Module Interface": [[258, "high-level-module-interface"]], "Class hierarchy": [[258, "class-hierarchy"]], "I/O Base Classes": [[258, "i-o-base-classes"]], "Raw File I/O": [[258, "raw-file-i-o"]], "Buffered Streams": [[258, "buffered-streams"]], "Reentrancy": [[258, "reentrancy"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[257, "notes-on-availability"]], "WebAssembly platforms": [[257, "webassembly-platforms"]], "http.client --- HTTP protocol client": [[241, "module-http.client"]], "HTTPConnection \u7269\u4ef6": [[241, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[241, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[241, "httpmessage-objects"]], "json --- JSON encoder and decoder": [[262, "module-json"]], "Encoders and Decoders": [[262, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[262, "standard-compliance-and-interoperability"]], "Character Encodings": [[262, "character-encodings"]], "Infinite and NaN Number Values": [[262, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[262, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[262, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[262, "implementation-limitations"]], "File menu (Shell and Editor)": [[246, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[246, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[246, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[246, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[246, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[246, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[246, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[246, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[246, "help-menu-shell-and-editor"]], "Context menus": [[246, "context-menus"]], "Editing and Navigation": [[246, "editing-and-navigation"]], "Editor windows": [[246, "editor-windows"]], "Key bindings": [[246, "key-bindings"]], "Automatic indentation": [[246, "automatic-indentation"]], "Completions": [[246, "completions"]], "Calltips": [[246, "calltips"]], "Code Context": [[246, "code-context"]], "Shell window": [[246, "shell-window"]], "Text colors": [[246, "text-colors"]], "Startup and Code Execution": [[246, "startup-and-code-execution"]], "Startup failure": [[246, "startup-failure"]], "Running user code": [[246, "running-user-code"]], "User output in Shell": [[246, "user-output-in-shell"]], "Developing tkinter applications": [[246, "developing-tkinter-applications"]], "Running without a subprocess": [[246, "running-without-a-subprocess"]], "Help and Preferences": [[246, "help-and-preferences"]], "Help sources": [[246, "help-sources"]], "Setting preferences": [[246, "setting-preferences"]], "IDLE on macOS": [[246, "idle-on-macos"]], "Extensions": [[246, "extensions"]], "idlelib": [[246, "module-idlelib"]], "Python Language Services": [[264, "python-language-services"]], "logging --- Logging facility for Python": [[267, "module-logging"]], "Logger Objects": [[267, "logger-objects"]], "Handler Objects": [[267, "handler-objects"]], "Formatter Objects": [[267, "formatter-objects"]], "Filter Objects": [[267, "filter-objects"]], "LogRecord \u7269\u4ef6": [[267, "logrecord-objects"]], "LogRecord attributes": [[267, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[267, "loggeradapter-objects"]], "Thread Safety": [[267, "thread-safety"]], "Module-Level Attributes": [[267, "module-level-attributes"]], "Integration with the warnings module": [[267, "integration-with-the-warnings-module"]], "importlib.resources -- Resources": [[252, "module-importlib.resources"]], "\u5df2\u68c4\u7528\u51fd\u5f0f": [[252, "deprecated-functions"]], "html.parser --- Simple HTML and XHTML parser": [[239, "module-html.parser"]], "Example HTML Parser Application": [[239, "example-html-parser-application"]], "HTMLParser Methods": [[239, "htmlparser-methods"]], "imp --- Access the import internals": [[249, "module-imp"]], "http --- HTTP \u6a21\u7d44": [[240, "module-http"]], "HTTP \u72c0\u614b\u78bc": [[240, "http-status-codes"]], "HTTP status category": [[240, "http-status-category"]], "HTTP \u65b9\u6cd5": [[240, "http-methods"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[254, "the-python-standard-library"]], "imaplib --- IMAP4 protocol client": [[247, "module-imaplib"]], "IMAP4 \u7269\u4ef6": [[247, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[247, "imap4-example"]], "inspect --- Inspect live objects": [[255, "module-inspect"]], "Types and members": [[255, "types-and-members"]], "Retrieving source code": [[255, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[255, "introspecting-callables-with-the-signature-object"]], "The interpreter stack": [[255, "the-interpreter-stack"]], "Fetching attributes statically": [[255, "fetching-attributes-statically"]], "Current State of Generators and Coroutines": [[255, "current-state-of-generators-and-coroutines"]], "Code Objects Bit Flags": [[255, "code-objects-bit-flags"]], "http.cookies --- HTTP state management": [[243, "module-http.cookies"]], "Morsel \u7269\u4ef6": [[243, "morsel-objects"]], "getopt --- C-style parser for command line options": [[227, "module-getopt"]], "graphlib --- Functionality to operate with graph-like structures": [[231, "module-graphlib"]], "email.message: Representing an email message": [[204, "module-email.message"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[235, "module-heapq"]], "\u512a\u5148\u4f47\u5217  (Priority Queue) \u5be6\u4f5c\u7d30\u7bc0": [[235, "priority-queue-implementation-notes"]], "\u539f\u7406": [[235, "theory"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[212, "built-in-exceptions"]], "Exception context": [[212, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[212, "inheriting-from-built-in-exceptions"]], "Base classes": [[212, "base-classes"]], "Concrete exceptions": [[212, "concrete-exceptions"]], "OS exceptions": [[212, "os-exceptions"]], "\u8b66\u544a": [[212, "warnings"]], "Exception groups": [[212, "exception-groups"]], "Exception hierarchy": [[212, "exception-hierarchy"]], "email.mime: Creating email and MIME objects from scratch": [[205, "module-email.mime"]], "grp --- The group database": [[232, "module-grp"]], "email.utils: Miscellaneous utilities": [[208, "module-email.utils"]], "\u6a94\u6848\u683c\u5f0f": [[216, "file-formats"]], "\u7a0b\u5f0f\u6846\u67b6": [[221, "program-frameworks"]], "enum --- Support for enumerations": [[210, "module-enum"]], "Data Types": [[210, "data-types"]], "Utilities and Decorators": [[210, "utilities-and-decorators"]], "Notes": [[210, "notes"]], "gc --- Garbage Collector interface": [[226, "module-gc"]], "functools --- Higher-order functions and operations on callable objects": [[225, "module-functools"]], "partial \u7269\u4ef6": [[225, "partial-objects"]], "email.parser: Parsing email messages": [[206, "module-email.parser"]], "FeedParser API": [[206, "feedparser-api"]], "Parser API": [[206, "parser-api"]], "Additional notes": [[206, "additional-notes"]], "hashlib --- Secure hashes and message digests": [[234, "module-hashlib"]], "Hash algorithms": [[234, "hash-algorithms"]], "SHAKE variable length digests": [[234, "shake-variable-length-digests"]], "File hashing": [[234, "file-hashing"]], "Key derivation": [[234, "key-derivation"]], "BLAKE2": [[234, "blake2"]], "Creating hash objects": [[234, "creating-hash-objects"]], "Simple hashing": [[234, "simple-hashing"]], "Using different digest sizes": [[234, "using-different-digest-sizes"]], "Keyed hashing": [[234, "keyed-hashing"]], "Randomized hashing": [[234, "randomized-hashing"]], "Personalization": [[234, "personalization"]], "Tree mode": [[234, "tree-mode"]], "Credits": [[234, "credits"]], "fractions --- Rational numbers": [[220, "module-fractions"]], "gzip --- Support for gzip files": [[233, "module-gzip"]], "\u7528\u6cd5\u7bc4\u4f8b": [[233, "examples-of-usage"], [149, "examples-of-usage"]], "errno --- Standard errno system symbols": [[211, "module-errno"]], "faulthandler --- Dump the Python traceback": [[213, "module-faulthandler"]], "Dumping the traceback": [[213, "dumping-the-traceback"]], "Fault handler state": [[213, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[213, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[213, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[213, "issue-with-file-descriptors"]], "\u5167\u5efa\u51fd\u5f0f": [[224, "built-in-functions"]], "ensurepip --- Bootstrapping the pip installer": [[209, "module-ensurepip"]], "Command line interface": [[209, "command-line-interface"]], "\u6a21\u7d44 API": [[209, "module-api"]], "fnmatch --- Unix filename pattern matching": [[219, "module-fnmatch"]], "ftplib --- FTP protocol client": [[222, "module-ftplib"]], "FTP \u7269\u4ef6": [[222, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[222, "ftp-tls-objects"]], "gettext --- Multilingual internationalization services": [[229, "module-gettext"]], "GNU gettext API": [[229, "gnu-gettext-api"]], "Class-based API": [[229, "class-based-api"]], "The NullTranslations class": [[229, "the-nulltranslations-class"]], "The GNUTranslations class": [[229, "the-gnutranslations-class"]], "Solaris message catalog support": [[229, "solaris-message-catalog-support"]], "The Catalog constructor": [[229, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[229, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[229, "localizing-your-module"]], "Localizing your application": [[229, "localizing-your-application"]], "Changing languages on the fly": [[229, "changing-languages-on-the-fly"]], "Deferred translations": [[229, "deferred-translations"]], "email.policy: Policy Objects": [[207, "module-email.policy"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[223, "functional-programming-modules"]], "fileinput --- Iterate over lines from multiple input streams": [[217, "module-fileinput"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[228, "module-getpass"]], "html --- HyperText Markup Language support": [[237, "module-html"]], "filecmp --- File and Directory Comparisons": [[215, "module-filecmp"]], "The dircmp class": [[215, "the-dircmp-class"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[236, "module-hmac"]], "glob --- Unix style pathname pattern expansion": [[230, "module-glob"]], "fcntl --- The fcntl and ioctl system calls": [[214, "module-fcntl"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[218, "file-and-directory-access"]], "copyreg --- Register pickle support functions": [[171, "module-copyreg"]], "decimal --- Decimal fixed point and floating point arithmetic": [[185, "module-decimal"]], "Quick-start Tutorial": [[185, "quick-start-tutorial"]], "Decimal objects": [[185, "decimal-objects"]], "Logical operands": [[185, "logical-operands"]], "Context objects": [[185, "context-objects"]], "Rounding modes": [[185, "rounding-modes"]], "Signals": [[185, "signals"]], "Floating Point Notes": [[185, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[185, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[185, "special-values"]], "Working with threads": [[185, "working-with-threads"]], "Recipes": [[185, "recipes"]], "Decimal FAQ": [[185, "decimal-faq"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[191, "software-packaging-and-distribution"]], "dbm --- Interfaces to Unix \"databases\"": [[183, "module-dbm"]], "dbm.gnu --- GNU's reinterpretation of dbm": [[183, "module-dbm.gnu"]], "dbm.ndbm --- Interface based on ndbm": [[183, "module-dbm.ndbm"]], "dbm.dumb --- Portable DBM implementation": [[183, "module-dbm.dumb"]], "email.contentmanager: Managing MIME Content": [[196, "module-email.contentmanager"]], "Content Manager Instances": [[196, "content-manager-instances"]], "email.iterators: Iterators": [[203, "module-email.iterators"]], "\u8cc7\u6599\u578b\u5225": [[181, "data-types"]], "email --- An email and MIME handling package": [[193, "module-email"]], "curses.ascii --- Utilities for ASCII characters": [[177, "module-curses.ascii"]], "email.header: Internationalized headers": [[201, "module-email.header"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[184, "debugging-and-profiling"]], "ctypes --- A foreign function library for Python": [[175, "module-ctypes"]], "ctypes tutorial": [[175, "ctypes-tutorial"]], "Loading dynamic link libraries": [[175, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[175, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[175, "calling-functions"]], "Fundamental data types": [[175, "fundamental-data-types"], [175, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[175, "calling-functions-continued"]], "Calling functions with your own custom data types": [[175, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[175, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[175, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[175, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[175, "structures-and-unions"]], "Structure/union alignment and byte order": [[175, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[175, "bit-fields-in-structures-and-unions"]], "Arrays": [[175, "arrays"]], "Pointers": [[175, "pointers"]], "Type conversions": [[175, "type-conversions"]], "Incomplete Types": [[175, "incomplete-types"]], "Callback functions": [[175, "callback-functions"]], "Accessing values exported from dlls": [[175, "accessing-values-exported-from-dlls"]], "Surprises": [[175, "surprises"]], "Variable-sized data types": [[175, "variable-sized-data-types"]], "ctypes reference": [[175, "ctypes-reference"]], "Finding shared libraries": [[175, "finding-shared-libraries"]], "Loading shared libraries": [[175, "loading-shared-libraries"]], "Foreign functions": [[175, "foreign-functions"]], "Function prototypes": [[175, "function-prototypes"]], "Data types": [[175, "data-types"]], "Structured data types": [[175, "structured-data-types"]], "Arrays and pointers": [[175, "arrays-and-pointers"]], "curses --- Terminal handling for character-cell displays": [[176, "module-curses"]], "Window Objects": [[176, "window-objects"]], "Constants": [[176, "constants"]], "curses.textpad --- Text input widget for curses programs": [[176, "module-curses.textpad"]], "Textbox objects": [[176, "textbox-objects"]], "difflib --- Helpers for computing deltas": [[189, "module-difflib"]], "SequenceMatcher \u7269\u4ef6": [[189, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[189, "sequencematcher-examples"]], "Differ Objects": [[189, "differ-objects"]], "Differ Example": [[189, "differ-example"]], "A command-line interface to difflib": [[189, "a-command-line-interface-to-difflib"]], "ndiff example": [[189, "ndiff-example"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[170, "module-copy"]], "csv --- CSV File Reading and Writing": [[174, "module-csv"]], "Dialects and Formatting Parameters": [[174, "dialects-and-formatting-parameters"]], "Reader Objects": [[174, "reader-objects"]], "Writer Objects": [[174, "writer-objects"]], "email.charset: Representing character sets": [[194, "module-email.charset"]], "email.message.Message: Representing an email message using the compat32 API": [[195, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "email.headerregistry: Custom Header Objects": [[202, "module-email.headerregistry"]], "curses.panel --- A panel stack extension for curses": [[178, "module-curses.panel"]], "Panel Objects": [[178, "panel-objects"]], "\u958b\u767c\u5de5\u5177": [[186, "development-tools"]], "email.errors: Exception and Defect classes": [[198, "module-email.errors"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[190, "module-dis"]], "Bytecode analysis": [[190, "bytecode-analysis"]], "Analysis functions": [[190, "analysis-functions"]], "Python Bytecode Instructions": [[190, "python-bytecode-instructions"]], "Opcode collections": [[190, "opcode-collections"]], "Tkinter Dialogs": [[188, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[188, "module-tkinter.simpledialog"]], "tkinter.filedialog --- File selection dialogs": [[188, "module-tkinter.filedialog"]], "Native Load/Save Dialogs": [[188, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[188, "module-tkinter.commondialog"]], "Custom Python Interpreters": [[179, "custom-python-interpreters"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[172, "module-crypt"]], "Hashing Methods": [[172, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[172, "module-attributes"]], "\u6a21\u7d44\u51fd\u5f0f": [[172, "module-functions"], [165, "module-functions"]], "email: Examples": [[199, "email-examples"]], "Python Development Mode": [[187, "python-development-mode"]], "Effects of the Python Development Mode": [[187, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[187, "resourcewarning-example"]], "Bad file descriptor error example": [[187, "bad-file-descriptor-error-example"]], "\u52a0\u5bc6\u670d\u52d9": [[173, "cryptographic-services"]], "email.generator: Generating MIME documents": [[200, "module-email.generator"]], "email.encoders: Encoders": [[197, "module-email.encoders"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[182, "module-datetime"]], "Aware and Naive Objects": [[182, "aware-and-naive-objects"]], "Available Types": [[182, "available-types"]], "Common Properties": [[182, "common-properties"]], "Determining if an Object is Aware or Naive": [[182, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[182, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[182, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[182, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[182, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[182, "datetime-objects"]], "Examples of Usage: datetime": [[182, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[182, "time-objects"]], "Examples of Usage: time": [[182, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[182, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[182, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[182, "strftime-and-strptime-behavior"]], "strftime() and strptime() Format Codes": [[182, "strftime-and-strptime-format-codes"]], "Technical Detail": [[182, "technical-detail"]], "doctest --- Test interactive Python examples": [[192, "module-doctest"]], "Simple Usage: Checking Examples in Docstrings": [[192, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[192, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[192, "how-it-works"]], "Which Docstrings Are Examined?": [[192, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[192, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[192, "what-s-the-execution-context"]], "What About Exceptions?": [[192, "what-about-exceptions"]], "Option Flags": [[192, "option-flags"]], "Directives": [[192, "directives"]], "Warnings": [[192, "warnings"]], "Basic API": [[192, "basic-api"]], "Unittest API": [[192, "unittest-api"]], "Advanced API": [[192, "advanced-api"]], "DocTest \u7269\u4ef6": [[192, "doctest-objects"]], "Example \u7269\u4ef6": [[192, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[192, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[192, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[192, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[192, "outputchecker-objects"]], "Debugging": [[192, "debugging"]], "Soapbox": [[192, "soapbox"]], "dataclasses --- Data Classes": [[180, "module-dataclasses"]], "Module contents": [[180, "module-contents"]], "Post-init processing": [[180, "post-init-processing"]], "Class variables": [[180, "class-variables"]], "Init-only variables": [[180, "init-only-variables"]], "Frozen instances": [[180, "frozen-instances"]], "Inheritance": [[180, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[180, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[180, "default-factory-functions"]], "Mutable default values": [[180, "mutable-default-values"]], "Descriptor-typed fields": [[180, "descriptor-typed-fields"]], "cmd --- Support for line-oriented command interpreters": [[155, "module-cmd"]], "Cmd \u7269\u4ef6": [[155, "cmd-objects"]], "Cmd Example": [[155, "cmd-example"]], "code --- Interpreter base classes": [[156, "module-code"]], "Interactive Interpreter Objects": [[156, "interactive-interpreter-objects"]], "Interactive Console Objects": [[156, "interactive-console-objects"]], "asyncore --- \u975e\u540c\u6b65 socket \u8655\u7406\u51fd\u5f0f": [[139, "module-asyncore"]], "asyncore Example basic HTTP client": [[139, "asyncore-example-basic-http-client"]], "asyncore Example basic echo server": [[139, "asyncore-example-basic-echo-server"]], "bdb --- Debugger framework": [[144, "module-bdb"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[148, "module-builtins"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[143, "module-base64"]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[137, "synchronization-primitives"]], "Lock": [[137, "lock"]], "Event": [[137, "event"]], "Condition": [[137, "condition"]], "Semaphore": [[137, "semaphore"]], "BoundedSemaphore": [[137, "boundedsemaphore"]], "Barrier": [[137, "barrier"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[165, "module-concurrent.futures"]], "Executor Objects": [[165, "executor-objects"]], "ThreadPoolExecutor": [[165, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[165, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[165, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[165, "processpoolexecutor-example"]], "Future Objects": [[165, "future-objects"]], "Exception classes": [[165, "exception-classes"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[147, "module-bisect"]], "\u6548\u80fd\u8003\u91cf": [[147, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[147, "searching-sorted-lists"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[142, "audit-events-table"]], "concurrent \u5957\u4ef6": [[164, "the-concurrent-package"]], "atexit --- Exit handlers": [[140, "module-atexit"]], "atexit \u7bc4\u4f8b": [[140, "atexit-example"]], "cmath --- Mathematical functions for complex numbers": [[154, "module-cmath"]], "Conversions to and from polar coordinates": [[154, "conversions-to-and-from-polar-coordinates"]], "Classification functions": [[154, "classification-functions"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[161, "module-colorsys"]], "contextvars --- Context Variables": [[169, "module-contextvars"]], "Context Variables": [[169, "context-variables"]], "Manual Context Management": [[169, "manual-context-management"]], "asyncio support": [[169, "asyncio-support"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[153, "module-chunk"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[151, "module-cgi"]], "Using the cgi module": [[151, "using-the-cgi-module"]], "Higher Level Interface": [[151, "higher-level-interface"]], "Caring about security": [[151, "caring-about-security"]], "Installing your CGI script on a Unix system": [[151, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[151, "testing-your-cgi-script"]], "Debugging CGI scripts": [[151, "debugging-cgi-scripts"]], "Common problems and solutions": [[151, "common-problems-and-solutions"]], "\u5b50\u884c\u7a0b": [[136, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[136, "creating-subprocesses"]], "Interacting with Subprocesses": [[136, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[136, "subprocess-and-threads"]], "configparser --- Configuration file parser": [[166, "module-configparser"]], "Quick Start": [[166, "quick-start"]], "Supported Datatypes": [[166, "supported-datatypes"]], "Fallback Values": [[166, "fallback-values"]], "Supported INI File Structure": [[166, "supported-ini-file-structure"]], "Interpolation of values": [[166, "interpolation-of-values"]], "Mapping Protocol Access": [[166, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[166, "customizing-parser-behaviour"]], "Legacy API Examples": [[166, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[166, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[166, "rawconfigparser-objects"]], "Binary Data Services": [[145, "binary-data-services"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[152, "module-cgitb"]], "collections.abc --- Abstract Base Classes for Containers": [[160, "module-collections.abc"]], "Collections Abstract Base Classes": [[160, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[160, "collections-abstract-base-classes-detailed-descriptions"]], "Examples and Recipes": [[160, "examples-and-recipes"], [168, "examples-and-recipes"]], "binascii --- Convert between binary and ASCII": [[146, "module-binascii"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[163, "concurrent-execution"]], "compileall --- Byte-compile Python libraries": [[162, "module-compileall"]], "Command-line use": [[162, "command-line-use"]], "Public functions": [[162, "public-functions"]], "codeop --- Compile Python code": [[158, "module-codeop"]], "codecs --- Codec registry and base classes": [[157, "module-codecs"]], "Codec Base Classes": [[157, "codec-base-classes"]], "Error Handlers": [[157, "error-handlers"]], "Stateless Encoding and Decoding": [[157, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[157, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[157, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[157, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[157, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[157, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[157, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[157, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[157, "streamrecoder-objects"]], "Encodings and Unicode": [[157, "encodings-and-unicode"]], "Standard Encodings": [[157, "standard-encodings"]], "Python Specific Encodings": [[157, "python-specific-encodings"]], "Text Encodings": [[157, "text-encodings"]], "Binary Transforms": [[157, "binary-transforms"]], "Text Transforms": [[157, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[157, "module-encodings.idna"]], "encodings.mbcs --- Windows ANSI codepage": [[157, "module-encodings.mbcs"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[157, "module-encodings.utf_8_sig"]], "\u5167\u5efa\u5e38\u6578": [[167, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[167, "constants-added-by-the-site-module"]], "bz2 --- Support for bzip2 compression": [[149, "module-bz2"]], "(De)compression of files": [[149, "de-compression-of-files"]], "Incremental (de)compression": [[149, "incremental-de-compression"]], "One-shot (de)compression": [[149, "one-shot-de-compression"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[141, "module-audioop"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[159, "module-collections"]], "ChainMap \u7269\u4ef6": [[159, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[159, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[159, "counter-objects"]], "deque \u7269\u4ef6": [[159, "deque-objects"]], "deque \u7528\u6cd5": [[159, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[159, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[159, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[159, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[159, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[159, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[159, "userdict-objects"]], "UserList \u7269\u4ef6": [[159, "userlist-objects"]], "UserString \u7269\u4ef6": [[159, "userstring-objects"]], "contextlib --- Utilities for with-statement contexts": [[168, "module-contextlib"]], "Utilities": [[168, "utilities"]], "Supporting a variable number of context managers": [[168, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[168, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[168, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[168, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[168, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[168, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[168, "reentrant-context-managers"]], "Reusable context managers": [[168, "reusable-context-managers"]], "calendar --- General calendar-related functions": [[150, "module-calendar"]], "Coroutines and Tasks": [[138, "coroutines-and-tasks"]], "Awaitables": [[138, "awaitables"]], "Creating Tasks": [[138, "creating-tasks"]], "Task Cancellation": [[138, "task-cancellation"]], "Task Groups": [[138, "task-groups"]], "Sleeping": [[138, "sleeping"]], "Running Tasks Concurrently": [[138, "running-tasks-concurrently"]], "Shielding From Cancellation": [[138, "shielding-from-cancellation"]], "Timeouts": [[138, "timeouts"]], "Waiting Primitives": [[138, "waiting-primitives"]], "Running in Threads": [[138, "running-in-threads"]], "Scheduling From Other Threads": [[138, "scheduling-from-other-threads"]], "Introspection": [[138, "introspection"]], "Task Object": [[138, "task-object"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c function)": [[3, "c.PyObject_New"]], "pyobject_newvar (c function)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "py_version (c var)": [[4, "c.Py_Version"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(see buffer protocol)": [[7, "index-0"]], "c-contiguous": [[7, "index-2"], [85, "index-10"]], "fortran contiguous": [[7, "index-2"], [85, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs": [[7, "index-1"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_copydata (c function)": [[7, "c.PyObject_CopyData"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface": [[7, "index-0"]], "buffer object": [[7, "index-0"]], "buffer protocol": [[7, "index-0"], [344, "index-30"], [344, "index-38"]], "contiguous": [[7, "index-2"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray": [[8, "index-0"], [344, "index-22"], [344, "index-39"], [344, "index-41"], [344, "index-42"], [344, "index-44"], [427, "index-24"]], "\u7269\u4ef6": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [27, "index-0"], [34, "index-8"], [37, "index-0"], [38, "index-0"], [42, "index-0"], [43, "index-0"], [43, "index-1"], [44, "index-0"], [45, "index-0"], [53, "index-0"], [58, "index-0"], [59, "index-0"], [224, "index-11"], [337, "index-0"], [344, "index-11"], [344, "index-18"], [344, "index-21"], [344, "index-22"], [344, "index-24"], [344, "index-25"], [344, "index-26"], [344, "index-27"], [344, "index-28"], [344, "index-39"], [344, "index-40"], [344, "index-41"], [344, "index-50"], [344, "index-51"], [344, "index-55"], [344, "index-58"], [344, "index-60"], [352, "index-8"], [380, "index-0"], [426, "index-11"], [426, "index-28"], [426, "index-40"], [426, "index-6"], [427, "index-10"], [427, "index-11"], [427, "index-13"], [427, "index-14"], [427, "index-15"], [427, "index-17"], [427, "index-20"], [427, "index-22"], [427, "index-23"], [427, "index-26"], [427, "index-27"], [427, "index-28"], [427, "index-29"], [427, "index-30"], [427, "index-32"], [427, "index-33"], [427, "index-35"], [427, "index-40"], [427, "index-41"], [427, "index-42"], [427, "index-45"], [427, "index-49"], [427, "index-51"], [427, "index-57"], [427, "index-6"], [427, "index-60"], [427, "index-63"], [427, "index-7"], [427, "index-77"], [427, "index-8"], [427, "index-9"], [427, "index-96"], [429, "index-15"], [429, "index-16"], [429, "index-17"], [429, "index-22"], [429, "index-31"], [429, "index-35"], [429, "index-40"], [429, "index-42"], [429, "index-45"], [429, "index-47"], [429, "index-52"], [429, "index-53"], [429, "index-54"], [429, "index-55"], [429, "index-80"], [429, "index-92"], [435, "index-10"], [435, "index-11"], [435, "index-28"], [435, "index-3"], [435, "index-4"], [435, "index-9"], [439, "index-0"], [445, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes": [[9, "index-0"], [48, "index-3"], [344, "index-30"], [344, "index-39"], [344, "index-40"], [344, "index-42"], [344, "index-44"], [427, "index-21"], [427, "index-74"]], "pep 590": [[10, "index-2"], [471, "index-32"], [472, "index-40"], [480, "index-35"], [481, "index-18"], [481, "index-8"], [482, "index-100"], [482, "index-126"], [482, "index-133"], [482, "index-142"], [482, "index-143"], [482, "index-145"], [482, "index-172"], [482, "index-28"], [482, "index-38"], [482, "index-44"], [482, "index-50"], [482, "index-65"], [482, "index-66"], [482, "index-99"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [30, "index-3"], [32, "index-40"], [32, "index-41"], [32, "index-47"], [32, "index-50"], [32, "index-51"], [33, "index-0"], [33, "index-17"], [33, "index-33"], [33, "index-34"], [33, "index-37"], [33, "index-38"], [33, "index-7"], [34, "index-0"], [34, "index-15"], [34, "index-6"], [34, "index-7"], [44, "index-10"], [44, "index-7"], [44, "index-8"], [48, "index-4"], [48, "index-5"], [55, "index-0"], [57, "index-0"], [61, "index-3"], [61, "index-4"], [61, "index-5"], [62, "index-0"], [62, "index-1"], [62, "index-2"], [62, "index-3"], [62, "index-4"], [62, "index-5"], [64, "index-3"], [66, "index-23"], [68, "index-0"], [69, "index-1"], [71, "index-0"], [73, "index-2"], [76, "index-2"], [78, "index-6"], [78, "index-7"], [78, "index-8"], [83, "index-0"], [83, "index-2"], [83, "index-3"], [84, "index-2"], [85, "index-100"], [85, "index-101"], [85, "index-102"], [85, "index-103"], [85, "index-104"], [85, "index-105"], [85, "index-106"], [85, "index-107"], [85, "index-108"], [85, "index-109"], [85, "index-110"], [85, "index-111"], [85, "index-112"], [85, "index-77"], [85, "index-78"], [85, "index-79"], [85, "index-80"], [85, "index-81"], [85, "index-82"], [85, "index-83"], [85, "index-84"], [85, "index-85"], [85, "index-86"], [85, "index-87"], [85, "index-88"], [85, "index-89"], [85, "index-90"], [85, "index-91"], [85, "index-92"], [85, "index-93"], [85, "index-94"], [85, "index-95"], [85, "index-96"], [85, "index-97"], [85, "index-98"], [85, "index-99"], [86, "index-0"], [88, "index-0"], [88, "index-3"], [93, "index-0"], [93, "index-1"], [93, "index-2"], [105, "index-0"], [110, "index-0"], [110, "index-1"], [111, "index-0"], [111, "index-1"], [111, "index-10"], [111, "index-2"], [111, "index-3"], [111, "index-4"], [111, "index-5"], [111, "index-6"], [111, "index-7"], [111, "index-8"], [111, "index-9"], [114, "index-0"], [114, "index-1"], [115, "index-4"], [120, "index-2"], [120, "index-3"], [120, "index-4"], [120, "index-5"], [120, "index-6"], [125, "index-0"], [125, "index-1"], [125, "index-2"], [128, "index-2"], [141, "index-3"], [142, "index-3"], [151, "index-8"], [152, "index-4"], [153, "index-3"], [154, "index-0"], [157, "index-2"], [157, "index-5"], [159, "index-10"], [159, "index-11"], [159, "index-8"], [159, "index-9"], [160, "index-0"], [160, "index-1"], [160, "index-2"], [160, "index-3"], [160, "index-6"], [162, "index-0"], [162, "index-2"], [162, "index-3"], [165, "index-0"], [168, "index-2"], [169, "index-2"], [172, "index-1"], [174, "index-5"], [180, "index-0"], [180, "index-1"], [180, "index-2"], [190, "index-0"], [209, "index-0"], [212, "index-10"], [212, "index-11"], [212, "index-2"], [212, "index-5"], [212, "index-6"], [212, "index-7"], [212, "index-8"], [212, "index-9"], [220, "index-0"], [224, "index-13"], [224, "index-14"], [224, "index-17"], [224, "index-9"], [225, "index-0"], [226, "index-0"], [246, "index-7"], [248, "index-2"], [249, "index-2"], [249, "index-3"], [249, "index-4"], [249, "index-5"], [249, "index-6"], [249, "index-7"], [250, "index-0"], [250, "index-1"], [250, "index-10"], [250, "index-11"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-15"], [250, "index-17"], [250, "index-18"], [250, "index-19"], [250, "index-2"], [250, "index-20"], [250, "index-21"], [250, "index-22"], [250, "index-23"], [250, "index-24"], [250, "index-25"], [250, "index-3"], [250, "index-4"], [250, "index-5"], [250, "index-6"], [250, "index-7"], [250, "index-8"], [250, "index-9"], [251, "index-0"], [255, "index-0"], [255, "index-1"], [255, "index-2"], [255, "index-3"], [258, "index-1"], [258, "index-7"], [265, "index-1"], [267, "index-1"], [272, "index-0"], [275, "index-0"], [281, "index-3"], [287, "index-2"], [288, "index-12"], [289, "index-0"], [293, "index-22"], [293, "index-24"], [293, "index-25"], [293, "index-27"], [293, "index-44"], [293, "index-5"], [293, "index-53"], [293, "index-55"], [293, "index-6"], [293, "index-7"], [295, "index-4"], [296, "index-1"], [299, "index-2"], [299, "index-3"], [299, "index-4"], [299, "index-8"], [301, "index-2"], [302, "index-0"], [302, "index-1"], [302, "index-10"], [302, "index-11"], [302, "index-12"], [302, "index-15"], [302, "index-16"], [302, "index-2"], [302, "index-3"], [302, "index-4"], [302, "index-5"], [302, "index-7"], [302, "index-8"], [311, "index-1"], [311, "index-2"], [311, "index-4"], [311, "index-5"], [322, "index-0"], [324, "index-1"], [324, "index-2"], [324, "index-3"], [324, "index-5"], [324, "index-6"], [324, "index-7"], [324, "index-8"], [326, "index-0"], [328, "index-0"], [328, "index-3"], [328, "index-4"], [328, "index-5"], [328, "index-6"], [328, "index-7"], [329, "index-0"], [332, "index-2"], [333, "index-0"], [333, "index-1"], [334, "index-11"], [336, "index-3"], [337, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-13"], [337, "index-2"], [337, "index-4"], [337, "index-5"], [337, "index-7"], [337, "index-8"], [337, "index-9"], [339, "index-2"], [340, "index-0"], [340, "index-1"], [340, "index-4"], [340, "index-5"], [340, "index-6"], [341, "index-2"], [344, "index-48"], [344, "index-49"], [344, "index-56"], [344, "index-57"], [344, "index-59"], [344, "index-71"], [344, "index-72"], [345, "index-0"], [345, "index-1"], [345, "index-12"], [345, "index-17"], [345, "index-18"], [345, "index-19"], [348, "index-0"], [349, "index-2"], [352, "index-0"], [352, "index-1"], [352, "index-13"], [352, "index-14"], [352, "index-15"], [352, "index-16"], [352, "index-19"], [352, "index-20"], [352, "index-25"], [352, "index-26"], [352, "index-30"], [352, "index-31"], [352, "index-32"], [352, "index-41"], [352, "index-42"], [352, "index-9"], [358, "index-5"], [361, "index-3"], [361, "index-4"], [365, "index-8"], [377, "index-0"], [377, "index-1"], [384, "index-0"], [384, "index-1"], [384, "index-2"], [384, "index-4"], [385, "index-0"], [385, "index-1"], [385, "index-10"], [385, "index-100"], [385, "index-101"], [385, "index-102"], [385, "index-103"], [385, "index-11"], [385, "index-12"], [385, "index-13"], [385, "index-14"], [385, "index-15"], [385, "index-16"], [385, "index-17"], [385, "index-18"], [385, "index-19"], [385, "index-2"], [385, "index-21"], [385, "index-22"], [385, "index-23"], [385, "index-24"], [385, "index-25"], [385, "index-26"], [385, "index-29"], [385, "index-3"], [385, "index-30"], [385, "index-31"], [385, "index-32"], [385, "index-33"], [385, "index-34"], [385, "index-35"], [385, "index-36"], [385, "index-37"], [385, "index-38"], [385, "index-4"], [385, "index-40"], [385, "index-41"], [385, "index-42"], [385, "index-43"], [385, "index-44"], [385, "index-45"], [385, "index-46"], [385, "index-47"], [385, "index-48"], [385, "index-49"], [385, "index-5"], [385, "index-50"], [385, "index-51"], [385, "index-52"], [385, "index-53"], [385, "index-54"], [385, "index-55"], [385, "index-56"], [385, "index-57"], [385, "index-58"], [385, "index-59"], [385, "index-6"], [385, "index-60"], [385, "index-61"], [385, "index-62"], [385, "index-63"], [385, "index-64"], [385, "index-65"], [385, "index-66"], [385, "index-67"], [385, "index-68"], [385, "index-69"], [385, "index-7"], [385, "index-70"], [385, "index-71"], [385, "index-72"], [385, "index-73"], [385, "index-74"], [385, "index-75"], [385, "index-76"], [385, "index-77"], [385, "index-78"], [385, "index-79"], [385, "index-8"], [385, "index-80"], [385, "index-81"], [385, "index-82"], [385, "index-83"], [385, "index-85"], [385, "index-86"], [385, "index-87"], [385, "index-89"], [385, "index-9"], [385, "index-90"], [385, "index-91"], [385, "index-98"], [385, "index-99"], [396, "index-3"], [398, "index-1"], [401, "index-1"], [401, "index-2"], [401, "index-4"], [406, "index-0"], [406, "index-1"], [406, "index-11"], [406, "index-12"], [406, "index-13"], [406, "index-14"], [406, "index-15"], [406, "index-16"], [406, "index-17"], [406, "index-18"], [406, "index-2"], [406, "index-3"], [406, "index-4"], [406, "index-6"], [406, "index-7"], [406, "index-8"], [406, "index-9"], [407, "index-7"], [422, "index-0"], [422, "index-1"], [422, "index-2"], [424, "index-0"], [424, "index-1"], [426, "index-17"], [426, "index-19"], [426, "index-20"], [426, "index-24"], [426, "index-25"], [426, "index-26"], [426, "index-30"], [426, "index-33"], [426, "index-36"], [426, "index-37"], [426, "index-38"], [426, "index-39"], [426, "index-42"], [426, "index-43"], [426, "index-44"], [426, "index-45"], [426, "index-50"], [427, "index-104"], [427, "index-105"], [427, "index-107"], [427, "index-111"], [427, "index-82"], [427, "index-84"], [427, "index-87"], [427, "index-90"], [427, "index-91"], [427, "index-92"], [427, "index-93"], [429, "index-14"], [429, "index-19"], [429, "index-21"], [429, "index-26"], [429, "index-27"], [429, "index-28"], [429, "index-29"], [429, "index-30"], [429, "index-51"], [429, "index-79"], [429, "index-87"], [429, "index-89"], [429, "index-94"], [430, "index-0"], [431, "index-1"], [431, "index-11"], [431, "index-12"], [431, "index-13"], [431, "index-14"], [431, "index-15"], [431, "index-18"], [431, "index-19"], [431, "index-2"], [431, "index-20"], [431, "index-21"], [431, "index-22"], [431, "index-23"], [431, "index-24"], [431, "index-25"], [431, "index-26"], [431, "index-6"], [434, "index-1"], [434, "index-11"], [434, "index-12"], [434, "index-21"], [434, "index-26"], [435, "index-13"], [435, "index-16"], [435, "index-17"], [435, "index-41"], [435, "index-42"], [435, "index-46"], [440, "index-15"], [440, "index-16"], [440, "index-17"], [440, "index-18"], [449, "index-16"], [454, "index-1"], [454, "index-11"], [454, "index-13"], [454, "index-14"], [454, "index-15"], [454, "index-19"], [454, "index-38"], [454, "index-39"], [454, "index-51"], [454, "index-52"], [455, "index-31"], [456, "index-0"], [460, "index-0"], [460, "index-16"], [460, "index-17"], [460, "index-19"], [460, "index-37"], [461, "index-0"], [461, "index-1"], [461, "index-2"], [461, "index-3"], [462, "index-0"], [462, "index-1"], [462, "index-10"], [462, "index-12"], [462, "index-13"], [462, "index-14"], [462, "index-15"], [462, "index-16"], [462, "index-17"], [462, "index-2"], [462, "index-3"], [462, "index-4"], [462, "index-5"], [462, "index-6"], [462, "index-7"], [462, "index-8"], [462, "index-9"], [463, "index-0"], [463, "index-1"], [463, "index-10"], [463, "index-11"], [463, "index-12"], [463, "index-13"], [463, "index-14"], [463, "index-15"], [463, "index-16"], [463, "index-2"], [463, "index-22"], [463, "index-3"], [463, "index-4"], [463, "index-5"], [463, "index-6"], [463, "index-7"], [463, "index-8"], [463, "index-9"], [464, "index-0"], [464, "index-1"], [464, "index-10"], [464, "index-11"], [464, "index-12"], [464, "index-13"], [464, "index-14"], [464, "index-15"], [464, "index-16"], [464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-2"], [464, "index-20"], [464, "index-21"], [464, "index-22"], [464, "index-23"], [464, "index-3"], [464, "index-4"], [464, "index-5"], [464, "index-6"], [464, "index-7"], [464, "index-9"], [465, "index-0"], [465, "index-1"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-13"], [465, "index-14"], [465, "index-15"], [465, "index-16"], [465, "index-17"], [465, "index-2"], [465, "index-3"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-8"], [465, "index-9"], [466, "index-0"], [466, "index-1"], [466, "index-10"], [466, "index-11"], [466, "index-12"], [466, "index-13"], [466, "index-14"], [466, "index-15"], [466, "index-16"], [466, "index-17"], [466, "index-18"], [466, "index-19"], [466, "index-2"], [466, "index-21"], [466, "index-24"], [466, "index-25"], [466, "index-26"], [466, "index-27"], [466, "index-28"], [466, "index-29"], [466, "index-3"], [466, "index-30"], [466, "index-31"], [466, "index-4"], [466, "index-5"], [466, "index-6"], [466, "index-7"], [466, "index-8"], [466, "index-9"], [467, "index-0"], [467, "index-1"], [467, "index-10"], [467, "index-11"], [467, "index-12"], [467, "index-14"], [467, "index-15"], [467, "index-16"], [467, "index-17"], [467, "index-18"], [467, "index-19"], [467, "index-2"], [467, "index-25"], [467, "index-3"], [467, "index-7"], [467, "index-8"], [467, "index-9"], [468, "index-0"], [468, "index-16"], [468, "index-17"], [468, "index-18"], [468, "index-19"], [468, "index-2"], [468, "index-20"], [468, "index-21"], [468, "index-22"], [468, "index-23"], [468, "index-24"], [468, "index-25"], [468, "index-26"], [468, "index-3"], [468, "index-4"], [468, "index-5"], [468, "index-6"], [468, "index-7"], [469, "index-0"], [469, "index-1"], [469, "index-10"], [469, "index-11"], [469, "index-12"], [469, "index-13"], [469, "index-14"], [469, "index-15"], [469, "index-16"], [469, "index-17"], [469, "index-18"], [469, "index-19"], [469, "index-2"], [469, "index-20"], [469, "index-21"], [469, "index-22"], [469, "index-23"], [469, "index-24"], [469, "index-25"], [469, "index-26"], [469, "index-27"], [469, "index-28"], [469, "index-29"], [469, "index-3"], [469, "index-30"], [469, "index-31"], [469, "index-32"], [469, "index-33"], [469, "index-34"], [469, "index-35"], [469, "index-4"], [469, "index-5"], [469, "index-6"], [469, "index-7"], [469, "index-8"], [469, "index-9"], [470, "index-0"], [470, "index-1"], [470, "index-2"], [470, "index-3"], [471, "index-0"], [471, "index-1"], [471, "index-10"], [471, "index-11"], [471, "index-12"], [471, "index-13"], [471, "index-14"], [471, "index-15"], [471, "index-16"], [471, "index-18"], [471, "index-2"], [471, "index-20"], [471, "index-21"], [471, "index-22"], [471, "index-24"], [471, "index-25"], [471, "index-26"], [471, "index-27"], [471, "index-28"], [471, "index-29"], [471, "index-3"], [471, "index-30"], [471, "index-31"], [471, "index-32"], [471, "index-34"], [471, "index-35"], [471, "index-36"], [471, "index-37"], [471, "index-38"], [471, "index-4"], [471, "index-41"], [471, "index-42"], [471, "index-5"], [471, "index-6"], [471, "index-7"], [471, "index-8"], [471, "index-9"], [472, "index-0"], [472, "index-10"], [472, "index-11"], [472, "index-12"], [472, "index-13"], [472, "index-16"], [472, "index-2"], [472, "index-20"], [472, "index-22"], [472, "index-23"], [472, "index-24"], [472, "index-25"], [472, "index-26"], [472, "index-27"], [472, "index-28"], [472, "index-29"], [472, "index-3"], [472, "index-30"], [472, "index-31"], [472, "index-36"], [472, "index-37"], [472, "index-38"], [472, "index-39"], [472, "index-4"], [472, "index-40"], [472, "index-41"], [472, "index-42"], [472, "index-43"], [472, "index-5"], [472, "index-51"], [472, "index-52"], [472, "index-53"], [472, "index-54"], [472, "index-55"], [472, "index-56"], [472, "index-57"], [472, "index-7"], [473, "index-0"], [473, "index-1"], [473, "index-2"], [473, "index-3"], [473, "index-4"], [473, "index-5"], [473, "index-6"], [474, "index-0"], [474, "index-1"], [474, "index-14"], [474, "index-2"], [474, "index-3"], [474, "index-4"], [474, "index-5"], [474, "index-6"], [474, "index-9"], [475, "index-0"], [475, "index-1"], [475, "index-10"], [475, "index-12"], [475, "index-13"], [475, "index-14"], [475, "index-15"], [475, "index-16"], [475, "index-17"], [475, "index-18"], [475, "index-19"], [475, "index-2"], [475, "index-20"], [475, "index-21"], [475, "index-22"], [475, "index-25"], [475, "index-28"], [475, "index-29"], [475, "index-3"], [475, "index-30"], [475, "index-31"], [475, "index-32"], [475, "index-33"], [475, "index-34"], [475, "index-36"], [475, "index-37"], [475, "index-38"], [475, "index-4"], [475, "index-40"], [475, "index-6"], [475, "index-7"], [475, "index-8"], [475, "index-9"], [476, "index-0"], [476, "index-1"], [476, "index-10"], [476, "index-11"], [476, "index-12"], [476, "index-13"], [476, "index-14"], [476, "index-15"], [476, "index-16"], [476, "index-17"], [476, "index-18"], [476, "index-19"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-23"], [476, "index-24"], [476, "index-25"], [476, "index-26"], [476, "index-27"], [476, "index-28"], [476, "index-29"], [476, "index-3"], [476, "index-30"], [476, "index-31"], [476, "index-32"], [476, "index-33"], [476, "index-34"], [476, "index-35"], [476, "index-36"], [476, "index-37"], [476, "index-38"], [476, "index-39"], [476, "index-4"], [476, "index-42"], [476, "index-43"], [476, "index-44"], [476, "index-45"], [476, "index-46"], [476, "index-47"], [476, "index-48"], [476, "index-49"], [476, "index-5"], [476, "index-52"], [476, "index-53"], [476, "index-6"], [476, "index-7"], [476, "index-8"], [476, "index-9"], [477, "index-0"], [477, "index-1"], [477, "index-10"], [477, "index-11"], [477, "index-12"], [477, "index-13"], [477, "index-14"], [477, "index-15"], [477, "index-16"], [477, "index-17"], [477, "index-18"], [477, "index-19"], [477, "index-2"], [477, "index-20"], [477, "index-21"], [477, "index-22"], [477, "index-23"], [477, "index-24"], [477, "index-25"], [477, "index-26"], [477, "index-27"], [477, "index-28"], [477, "index-29"], [477, "index-3"], [477, "index-30"], [477, "index-4"], [477, "index-47"], [477, "index-48"], [477, "index-49"], [477, "index-5"], [477, "index-50"], [477, "index-51"], [477, "index-52"], [477, "index-54"], [477, "index-6"], [477, "index-7"], [477, "index-8"], [477, "index-9"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-11"], [478, "index-12"], [478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-16"], [478, "index-17"], [478, "index-18"], [478, "index-20"], [478, "index-22"], [478, "index-23"], [478, "index-24"], [478, "index-25"], [478, "index-26"], [478, "index-28"], [478, "index-29"], [478, "index-3"], [478, "index-30"], [478, "index-31"], [478, "index-32"], [478, "index-33"], [478, "index-34"], [478, "index-35"], [478, "index-36"], [478, "index-37"], [478, "index-4"], [478, "index-5"], [478, "index-6"], [478, "index-7"], [478, "index-8"], [478, "index-9"], [479, "index-0"], [479, "index-1"], [479, "index-10"], [479, "index-11"], [479, "index-13"], [479, "index-14"], [479, "index-15"], [479, "index-16"], [479, "index-17"], [479, "index-18"], [479, "index-19"], [479, "index-2"], [479, "index-20"], [479, "index-21"], [479, "index-22"], [479, "index-23"], [479, "index-24"], [479, "index-28"], [479, "index-29"], [479, "index-3"], [479, "index-30"], [479, "index-32"], [479, "index-33"], [479, "index-37"], [479, "index-38"], [479, "index-40"], [479, "index-5"], [479, "index-6"], [479, "index-7"], [479, "index-9"], [480, "index-10"], [480, "index-11"], [480, "index-12"], [480, "index-15"], [480, "index-16"], [480, "index-17"], [480, "index-18"], [480, "index-19"], [480, "index-23"], [480, "index-24"], [480, "index-31"], [480, "index-32"], [480, "index-33"], [480, "index-34"], [480, "index-35"], [480, "index-36"], [480, "index-5"], [480, "index-8"], [481, "index-0"], [481, "index-1"], [481, "index-10"], [481, "index-11"], [481, "index-12"], [481, "index-13"], [481, "index-14"], [481, "index-15"], [481, "index-16"], [481, "index-17"], [481, "index-18"], [481, "index-19"], [481, "index-2"], [481, "index-20"], [481, "index-23"], [481, "index-24"], [481, "index-25"], [481, "index-26"], [481, "index-27"], [481, "index-3"], [481, "index-4"], [481, "index-5"], [481, "index-6"], [481, "index-7"], [481, "index-8"], [481, "index-9"], [482, "index-1"], [482, "index-100"], [482, "index-101"], [482, "index-102"], [482, "index-103"], [482, "index-104"], [482, "index-105"], [482, "index-106"], [482, "index-107"], [482, "index-108"], [482, "index-109"], [482, "index-110"], [482, "index-111"], [482, "index-112"], [482, "index-113"], [482, "index-115"], [482, "index-116"], [482, "index-117"], [482, "index-118"], [482, "index-119"], [482, "index-12"], [482, "index-120"], [482, "index-121"], [482, "index-122"], [482, "index-123"], [482, "index-124"], [482, "index-125"], [482, "index-126"], [482, "index-127"], [482, "index-128"], [482, "index-129"], [482, "index-13"], [482, "index-130"], [482, "index-131"], [482, "index-132"], [482, "index-133"], [482, "index-134"], [482, "index-135"], [482, "index-136"], [482, "index-137"], [482, "index-139"], [482, "index-140"], [482, "index-141"], [482, "index-142"], [482, "index-143"], [482, "index-144"], [482, "index-145"], [482, "index-146"], [482, "index-147"], [482, "index-148"], [482, "index-149"], [482, "index-150"], [482, "index-151"], [482, "index-152"], [482, "index-154"], [482, "index-155"], [482, "index-156"], [482, "index-157"], [482, "index-158"], [482, "index-159"], [482, "index-16"], [482, "index-160"], [482, "index-164"], [482, "index-166"], [482, "index-167"], [482, "index-168"], [482, "index-17"], [482, "index-170"], [482, "index-171"], [482, "index-172"], [482, "index-175"], [482, "index-177"], [482, "index-18"], [482, "index-181"], [482, "index-182"], [482, "index-183"], [482, "index-184"], [482, "index-185"], [482, "index-188"], [482, "index-189"], [482, "index-19"], [482, "index-190"], [482, "index-193"], [482, "index-194"], [482, "index-195"], [482, "index-198"], [482, "index-199"], [482, "index-2"], [482, "index-20"], [482, "index-200"], [482, "index-201"], [482, "index-202"], [482, "index-203"], [482, "index-204"], [482, "index-206"], [482, "index-207"], [482, "index-208"], [482, "index-209"], [482, "index-21"], [482, "index-210"], [482, "index-211"], [482, "index-212"], [482, "index-213"], [482, "index-214"], [482, "index-215"], [482, "index-218"], [482, "index-219"], [482, "index-22"], [482, "index-220"], [482, "index-221"], [482, "index-222"], [482, "index-223"], [482, "index-224"], [482, "index-225"], [482, "index-226"], [482, "index-227"], [482, "index-228"], [482, "index-229"], [482, "index-23"], [482, "index-230"], [482, "index-231"], [482, "index-232"], [482, "index-233"], [482, "index-234"], [482, "index-235"], [482, "index-236"], [482, "index-237"], [482, "index-238"], [482, "index-239"], [482, "index-240"], [482, "index-241"], [482, "index-242"], [482, "index-243"], [482, "index-244"], [482, "index-245"], [482, "index-248"], [482, "index-249"], [482, "index-25"], [482, "index-250"], [482, "index-251"], [482, "index-252"], [482, "index-253"], [482, "index-254"], [482, "index-255"], [482, "index-256"], [482, "index-257"], [482, "index-258"], [482, "index-259"], [482, "index-26"], [482, "index-260"], [482, "index-261"], [482, "index-262"], [482, "index-263"], [482, "index-264"], [482, "index-265"], [482, "index-27"], [482, "index-28"], [482, "index-29"], [482, "index-30"], [482, "index-31"], [482, "index-32"], [482, "index-33"], [482, "index-34"], [482, "index-35"], [482, "index-37"], [482, "index-38"], [482, "index-40"], [482, "index-41"], [482, "index-42"], [482, "index-43"], [482, "index-44"], [482, "index-46"], [482, "index-49"], [482, "index-5"], [482, "index-50"], [482, "index-51"], [482, "index-53"], [482, "index-56"], [482, "index-57"], [482, "index-58"], [482, "index-59"], [482, "index-6"], [482, "index-60"], [482, "index-61"], [482, "index-62"], [482, "index-63"], [482, "index-64"], [482, "index-65"], [482, "index-66"], [482, "index-67"], [482, "index-69"], [482, "index-7"], [482, "index-70"], [482, "index-71"], [482, "index-72"], [482, "index-73"], [482, "index-74"], [482, "index-75"], [482, "index-76"], [482, "index-77"], [482, "index-78"], [482, "index-79"], [482, "index-8"], [482, "index-80"], [482, "index-81"], [482, "index-82"], [482, "index-83"], [482, "index-84"], [482, "index-85"], [482, "index-86"], [482, "index-87"], [482, "index-88"], [482, "index-89"], [482, "index-9"], [482, "index-90"], [482, "index-91"], [482, "index-92"], [482, "index-93"], [482, "index-94"], [482, "index-95"], [482, "index-96"], [482, "index-97"], [482, "index-99"], [483, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_addr2location (c function)": [[13, "c.PyCode_Addr2Location"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_getcellvars (c function)": [[13, "c.PyCode_GetCellvars"]], "pycode_getcode (c function)": [[13, "c.PyCode_GetCode"]], "pycode_getfreevars (c function)": [[13, "c.PyCode_GetFreevars"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_getvarnames (c function)": [[13, "c.PyCode_GetVarnames"]], "pycode_new (c function)": [[13, "c.PyCode_New"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs (c function)": [[13, "c.PyCode_NewWithPosOnlyArgs"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "code": [[13, "index-0"], [156, "module-code"], [274, "index-1"], [344, "index-61"], [427, "index-55"], [428, "index-0"]], "code object": [[13, "index-0"], [274, "index-1"], [344, "index-61"], [427, "index-55"]], "object": [[13, "index-0"], [73, "index-0"], [274, "index-1"], [344, "index-61"], [344, "index-8"], [427, "index-0"], [427, "index-55"], [429, "index-20"], [429, "index-7"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number": [[15, "index-0"], [344, "index-11"], [344, "index-12"]], "mapping": [[16, "index-2"], [344, "index-51"], [427, "index-29"], [427, "index-51"], [429, "index-42"], [435, "index-11"]], "numeric": [[16, "index-0"], [344, "index-11"], [344, "index-12"], [344, "index-14"], [344, "index-15"], [344, "index-8"], [427, "index-51"], [427, "index-9"]], "sequence": [[16, "index-1"], [344, "index-17"], [344, "index-18"], [344, "index-19"], [344, "index-21"], [344, "index-22"], [344, "index-23"], [426, "index-6"], [427, "index-15"], [427, "index-51"], [429, "index-42"], [429, "index-45"], [429, "index-80"], [435, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_addwatcher (c function)": [[22, "c.PyDict_AddWatcher"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_clearwatcher (c function)": [[22, "c.PyDict_ClearWatcher"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_unwatch (c function)": [[22, "c.PyDict_Unwatch"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pydict_watch (c function)": [[22, "c.PyDict_Watch"]], "pydict_watchcallback (c type)": [[22, "c.PyDict_WatchCallback"]], "pydict_watchevent (c type)": [[22, "c.PyDict_WatchEvent"]], "pyunicode_fromstring()": [[22, "index-1"]], "dictionary": [[22, "index-0"], [344, "index-51"], [427, "index-30"], [427, "index-45"], [427, "index-77"], [429, "index-17"], [429, "index-18"], [429, "index-42"], [435, "index-11"]], "len": [[22, "index-2"], [37, "index-1"], [39, "index-0"], [48, "index-8"], [52, "index-0"], [53, "index-1"], [344, "index-19"], [344, "index-51"], [427, "index-15"], [427, "index-26"], [427, "index-29"], [427, "index-95"]], "\u5167\u5efa\u51fd\u5f0f": [[22, "index-2"], [30, "index-1"], [30, "index-2"], [37, "index-1"], [37, "index-2"], [39, "index-0"], [46, "index-0"], [46, "index-1"], [46, "index-2"], [46, "index-3"], [46, "index-4"], [46, "index-5"], [48, "index-0"], [48, "index-1"], [48, "index-3"], [48, "index-6"], [48, "index-7"], [48, "index-8"], [52, "index-0"], [52, "index-1"], [53, "index-1"], [56, "index-0"], [56, "index-1"], [61, "index-1"], [61, "index-2"], [73, "index-3"], [190, "index-1"], [224, "abs"], [224, "aiter"], [224, "all"], [224, "anext"], [224, "any"], [224, "ascii"], [224, "bin"], [224, "breakpoint"], [224, "callable"], [224, "chr"], [224, "classmethod"], [224, "compile"], [224, "delattr"], [224, "dir"], [224, "divmod"], [224, "enumerate"], [224, "eval"], [224, "exec"], [224, "filter"], [224, "format"], [224, "getattr"], [224, "globals"], [224, "hasattr"], [224, "hash"], [224, "help"], [224, "hex"], [224, "id"], [224, "import__"], [224, "index-1"], [224, "input"], [224, "isinstance"], [224, "issubclass"], [224, "iter"], [224, "len"], [224, "locals"], [224, "map"], [224, "max"], [224, "min"], [224, "next"], [224, "oct"], [224, "open"], [224, "ord"], [224, "pow"], [224, "print"], [224, "repr"], [224, "reversed"], [224, "round"], [224, "setattr"], [224, "sorted"], [224, "staticmethod"], [224, "sum"], [224, "vars"], [224, "zip"], [283, "multiprocessing.Manager"], [307, "index-1"], [307, "index-2"], [344, "index-13"], [344, "index-19"], [344, "index-21"], [344, "index-51"], [344, "index-62"], [344, "index-63"], [344, "index-64"], [384, "index-3"], [412, "xml.etree.ElementInclude.default_loader"], [412, "xml.etree.ElementInclude.include"], [426, "index-8"], [427, "index-1"], [427, "index-100"], [427, "index-101"], [427, "index-102"], [427, "index-15"], [427, "index-19"], [427, "index-26"], [427, "index-29"], [427, "index-53"], [427, "index-66"], [427, "index-74"], [427, "index-75"], [427, "index-77"], [427, "index-83"], [427, "index-95"], [427, "index-97"], [427, "index-98"], [427, "index-99"], [435, "index-3"], [435, "index-44"], [436, "index-6"], [445, "index-0"], [450, "index-0"]], "keyboardinterrupt (built-in exception)": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [212, "index-8"], [322, "index-0"], [328, "index-0"], [337, "index-2"], [475, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_gethandledexception (c function)": [[23, "c.PyErr_GetHandledException"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_sethandledexception (c function)": [[23, "c.PyErr_SetHandledException"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror": [[23, "index-4"]], "pyexc_assertionerror": [[23, "index-4"]], "pyexc_attributeerror": [[23, "index-4"]], "pyexc_baseexception": [[23, "index-4"]], "pyexc_blockingioerror": [[23, "index-4"]], "pyexc_brokenpipeerror": [[23, "index-4"]], "pyexc_buffererror": [[23, "index-4"]], "pyexc_byteswarning": [[23, "index-7"]], "pyexc_childprocesserror": [[23, "index-4"]], "pyexc_connectionabortederror": [[23, "index-4"]], "pyexc_connectionerror": [[23, "index-4"]], "pyexc_connectionrefusederror": [[23, "index-4"]], "pyexc_connectionreseterror": [[23, "index-4"]], "pyexc_deprecationwarning": [[23, "index-7"]], "pyexc_eoferror": [[23, "index-4"]], "pyexc_environmenterror": [[23, "index-6"]], "pyexc_exception": [[23, "index-4"]], "pyexc_fileexistserror": [[23, "index-4"]], "pyexc_filenotfounderror": [[23, "index-4"]], "pyexc_floatingpointerror": [[23, "index-4"]], "pyexc_futurewarning": [[23, "index-7"]], "pyexc_generatorexit": [[23, "index-4"]], "pyexc_ioerror": [[23, "index-6"]], "pyexc_importerror": [[23, "index-4"]], "pyexc_importwarning": [[23, "index-7"]], "pyexc_indentationerror": [[23, "index-4"]], "pyexc_indexerror": [[23, "index-4"]], "pyexc_interruptederror": [[23, "index-4"]], "pyexc_isadirectoryerror": [[23, "index-4"]], "pyexc_keyerror": [[23, "index-4"]], "pyexc_keyboardinterrupt": [[23, "index-4"]], "pyexc_lookuperror": [[23, "index-4"]], "pyexc_memoryerror": [[23, "index-4"]], "pyexc_modulenotfounderror": [[23, "index-4"]], "pyexc_nameerror": [[23, "index-4"]], "pyexc_notadirectoryerror": [[23, "index-4"]], "pyexc_notimplementederror": [[23, "index-4"]], "pyexc_oserror": [[23, "index-4"]], "pyexc_overflowerror": [[23, "index-4"]], "pyexc_pendingdeprecationwarning": [[23, "index-7"]], "pyexc_permissionerror": [[23, "index-4"]], "pyexc_processlookuperror": [[23, "index-4"]], "pyexc_recursionerror": [[23, "index-4"]], "pyexc_referenceerror": [[23, "index-4"]], "pyexc_resourcewarning": [[23, "index-7"]], "pyexc_runtimeerror": [[23, "index-4"]], "pyexc_runtimewarning": [[23, "index-7"]], "pyexc_stopasynciteration": [[23, "index-4"]], "pyexc_stopiteration": [[23, "index-4"]], "pyexc_syntaxerror": [[23, "index-4"]], "pyexc_syntaxwarning": [[23, "index-7"]], "pyexc_systemerror": [[23, "index-4"]], "pyexc_systemexit": [[23, "index-4"]], "pyexc_taberror": [[23, "index-4"]], "pyexc_timeouterror": [[23, "index-4"]], "pyexc_typeerror": [[23, "index-4"]], "pyexc_unboundlocalerror": [[23, "index-4"]], "pyexc_unicodedecodeerror": [[23, "index-4"]], "pyexc_unicodeencodeerror": [[23, "index-4"]], "pyexc_unicodeerror": [[23, "index-4"]], "pyexc_unicodetranslateerror": [[23, "index-4"]], "pyexc_unicodewarning": [[23, "index-7"]], "pyexc_userwarning": [[23, "index-7"]], "pyexc_valueerror": [[23, "index-4"]], "pyexc_warning": [[23, "index-7"]], "pyexc_windowserror": [[23, "index-6"]], "pyexc_zerodivisionerror": [[23, "index-4"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint": [[23, "index-1"], [23, "index-2"]], "signal": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [113, "index-2"], [333, "module-signal"]], "strerror()": [[23, "index-0"]], "\u6a21\u7d44": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [32, "index-16"], [32, "index-39"], [32, "index-42"], [34, "index-23"], [110, "module-lib2to3"], [111, "module-__future__"], [112, "module-__main__"], [113, "index-2"], [113, "module-_thread"], [114, "module-abc"], [115, "module-aifc"], [118, "module-argparse"], [119, "module-array"], [120, "module-ast"], [121, "module-asynchat"], [122, "module-asyncio"], [139, "module-asyncore"], [140, "module-atexit"], [141, "module-audioop"], [143, "module-base64"], [144, "module-bdb"], [146, "index-0"], [146, "module-binascii"], [147, "module-bisect"], [148, "module-builtins"], [149, "module-bz2"], [150, "module-calendar"], [151, "module-cgi"], [152, "module-cgitb"], [153, "module-chunk"], [154, "index-1"], [154, "module-cmath"], [155, "module-cmd"], [156, "module-code"], [157, "module-codecs"], [157, "module-encodings.idna"], [157, "module-encodings.mbcs"], [157, "module-encodings.utf_8_sig"], [158, "module-codeop"], [159, "module-collections"], [160, "module-collections.abc"], [161, "module-colorsys"], [162, "module-compileall"], [165, "module-concurrent.futures"], [166, "module-configparser"], [168, "module-contextlib"], [169, "module-contextvars"], [170, "index-0"], [170, "module-copy"], [171, "index-0"], [171, "module-copyreg"], [172, "module-crypt"], [174, "module-csv"], [175, "module-ctypes"], [176, "module-curses"], [176, "module-curses.textpad"], [177, "module-curses.ascii"], [178, "module-curses.panel"], [180, "module-dataclasses"], [182, "module-datetime"], [183, "module-dbm"], [183, "module-dbm.dumb"], [183, "module-dbm.gnu"], [183, "module-dbm.ndbm"], [185, "module-decimal"], [188, "module-tkinter.commondialog"], [188, "module-tkinter.filedialog"], [188, "module-tkinter.simpledialog"], [189, "module-difflib"], [190, "module-dis"], [192, "module-doctest"], [193, "module-email"], [194, "module-email.charset"], [196, "module-email.contentmanager"], [197, "module-email.encoders"], [198, "module-email.errors"], [200, "module-email.generator"], [201, "module-email.header"], [202, "module-email.headerregistry"], [203, "module-email.iterators"], [204, "module-email.message"], [205, "module-email.mime"], [206, "module-email.parser"], [207, "module-email.policy"], [208, "module-email.utils"], [209, "module-ensurepip"], [210, "module-enum"], [211, "module-errno"], [212, "index-4"], [213, "module-faulthandler"], [214, "module-fcntl"], [215, "module-filecmp"], [217, "module-fileinput"], [219, "index-1"], [219, "index-3"], [219, "module-fnmatch"], [220, "module-fractions"], [222, "module-ftplib"], [224, "index-12"], [224, "index-7"], [225, "module-functools"], [226, "module-gc"], [227, "module-getopt"], [228, "module-getpass"], [229, "module-gettext"], [230, "module-glob"], [231, "module-graphlib"], [232, "module-grp"], [233, "module-gzip"], [234, "module-hashlib"], [235, "module-heapq"], [236, "module-hmac"], [237, "module-html"], [238, "module-html.entities"], [239, "module-html.parser"], [240, "module-http"], [241, "index-1"], [241, "module-http.client"], [242, "module-http.cookiejar"], [243, "module-http.cookies"], [244, "module-http.server"], [246, "module-idlelib"], [247, "module-imaplib"], [248, "module-imghdr"], [249, "module-imp"], [250, "module-importlib"], [250, "module-importlib.abc"], [250, "module-importlib.machinery"], [250, "module-importlib.util"], [251, "module-importlib.metadata"], [252, "module-importlib.resources"], [253, "module-importlib.resources.abc"], [255, "module-inspect"], [256, "index-1"], [258, "module-io"], [259, "module-ipaddress"], [261, "module-itertools"], [262, "module-json"], [262, "module-json.tool"], [263, "module-keyword"], [265, "module-linecache"], [266, "index-0"], [266, "index-6"], [266, "module-locale"], [267, "module-logging"], [268, "module-logging.config"], [269, "module-logging.handlers"], [270, "module-lzma"], [271, "module-mailbox"], [272, "module-mailcap"], [274, "index-0"], [274, "module-marshal"], [275, "module-math"], [276, "module-mimetypes"], [278, "module-mmap"], [279, "module-modulefinder"], [281, "module-msilib"], [282, "module-msvcrt"], [283, "module-multiprocessing"], [283, "module-multiprocessing.connection"], [283, "module-multiprocessing.dummy"], [283, "module-multiprocessing.managers"], [283, "module-multiprocessing.pool"], [283, "module-multiprocessing.sharedctypes"], [284, "module-multiprocessing.shared_memory"], [286, "module-netrc"], [287, "module-nis"], [288, "module-nntplib"], [289, "module-numbers"], [291, "module-operator"], [292, "module-optparse"], [293, "index-23"], [293, "index-30"], [293, "module-os"], [294, "index-2"], [294, "module-os.path"], [295, "module-ossaudiodev"], [296, "module-pathlib"], [297, "index-1"], [297, "module-pdb"], [299, "module-pickle"], [300, "module-pickletools"], [301, "module-pipes"], [302, "module-pkgutil"], [303, "module-platform"], [304, "module-plistlib"], [305, "module-poplib"], [306, "index-0"], [306, "module-posix"], [307, "module-pprint"], [308, "module-cProfile"], [308, "module-profile"], [308, "module-pstats"], [309, "module-pty"], [310, "index-0"], [310, "module-pwd"], [311, "module-py_compile"], [312, "module-pyclbr"], [313, "module-pydoc"], [314, "index-1"], [314, "module-xml.parsers.expat"], [314, "module-xml.parsers.expat.errors"], [314, "module-xml.parsers.expat.model"], [316, "module-queue"], [317, "module-quopri"], [318, "module-random"], [319, "module-re"], [320, "module-readline"], [321, "module-reprlib"], [322, "module-resource"], [323, "module-rlcompleter"], [324, "index-0"], [324, "index-4"], [324, "module-runpy"], [325, "module-sched"], [326, "module-secrets"], [328, "module-select"], [329, "module-selectors"], [330, "index-0"], [330, "index-1"], [330, "module-shelve"], [331, "module-shlex"], [332, "module-shutil"], [333, "module-signal"], [334, "index-5"], [334, "index-6"], [334, "module-site"], [335, "module-smtplib"], [336, "module-sndhdr"], [337, "index-14"], [337, "module-socket"], [338, "module-socketserver"], [339, "module-spwd"], [340, "module-sqlite3"], [341, "module-ssl"], [342, "module-stat"], [343, "module-statistics"], [344, "index-15"], [344, "index-32"], [344, "index-39"], [344, "index-64"], [345, "module-string"], [346, "module-stringprep"], [347, "module-struct"], [348, "module-subprocess"], [349, "module-sunau"], [351, "module-symtable"], [352, "module-sys"], [354, "module-sysconfig"], [355, "module-syslog"], [356, "module-tabnanny"], [357, "module-tarfile"], [358, "module-telnetlib"], [359, "module-tempfile"], [360, "module-termios"], [361, "module-test"], [361, "module-test.support"], [361, "module-test.support.bytecode_helper"], [361, "module-test.support.import_helper"], [361, "module-test.support.os_helper"], [361, "module-test.support.script_helper"], [361, "module-test.support.socket_helper"], [361, "module-test.support.threading_helper"], [361, "module-test.support.warnings_helper"], [363, "module-textwrap"], [364, "module-threading"], [365, "module-time"], [366, "module-timeit"], [368, "module-tkinter"], [369, "module-tkinter.colorchooser"], [370, "module-tkinter.dnd"], [371, "module-tkinter.font"], [372, "module-tkinter.messagebox"], [373, "module-tkinter.scrolledtext"], [374, "module-tkinter.tix"], [375, "module-tkinter.ttk"], [376, "module-token"], [377, "module-tokenize"], [378, "module-tomllib"], [379, "module-trace"], [380, "module-traceback"], [381, "module-tracemalloc"], [382, "module-tty"], [383, "module-turtle"], [383, "module-turtledemo"], [384, "module-types"], [385, "module-typing"], [386, "module-unicodedata"], [387, "module-unittest"], [388, "module-unittest.mock"], [391, "module-urllib"], [392, "module-urllib.error"], [393, "module-urllib.parse"], [394, "module-urllib.request"], [394, "module-urllib.response"], [395, "module-urllib.robotparser"], [396, "module-uu"], [397, "module-uuid"], [398, "module-venv"], [399, "module-warnings"], [400, "module-wave"], [401, "module-weakref"], [402, "module-webbrowser"], [404, "module-winreg"], [405, "module-winsound"], [406, "module-wsgiref"], [406, "module-wsgiref.handlers"], [406, "module-wsgiref.headers"], [406, "module-wsgiref.simple_server"], [406, "module-wsgiref.types"], [406, "module-wsgiref.util"], [406, "module-wsgiref.validate"], [407, "module-xdrlib"], [408, "module-xml"], [409, "module-xml.dom"], [410, "module-xml.dom.minidom"], [411, "module-xml.dom.pulldom"], [412, "module-xml.etree.ElementTree"], [413, "module-xml.sax"], [414, "module-xml.sax.handler"], [415, "module-xml.sax.xmlreader"], [416, "module-xml.sax.saxutils"], [418, "module-xmlrpc.client"], [419, "module-xmlrpc.server"], [420, "module-zipapp"], [421, "module-zipfile"], [422, "module-zipimport"], [423, "module-zlib"], [424, "module-zoneinfo"], [426, "index-11"], [427, "index-25"], [427, "index-31"], [427, "index-53"], [428, "index-10"], [436, "index-2"], [436, "index-3"], [445, "index-1"], [449, "index-4"], [449, "index-7"]], "eoferror (built-in exception)": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw": [[24, "index-2"]], "file": [[24, "index-0"], [162, "cmdoption-compileall-arg-file"], [166, "index-0"], [224, "index-5"], [233, "cmdoption-gzip-arg-file"], [249, "index-1"], [276, "index-2"], [297, "index-2"], [304, "index-0"], [306, "index-1"], [311, "index-0"], [332, "index-0"], [334, "index-4"], [359, "index-0"], [445, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_pack2 (c function)": [[25, "c.PyFloat_Pack2"]], "pyfloat_pack4 (c function)": [[25, "c.PyFloat_Pack4"]], "pyfloat_pack8 (c function)": [[25, "c.PyFloat_Pack8"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "pyfloat_unpack2 (c function)": [[25, "c.PyFloat_Unpack2"]], "pyfloat_unpack4 (c function)": [[25, "c.PyFloat_Unpack4"]], "pyfloat_unpack8 (c function)": [[25, "c.PyFloat_Unpack8"]], "floating point": [[25, "index-0"], [344, "index-11"], [344, "index-12"], [427, "index-13"]], "pyframeobject (c type)": [[26, "c.PyFrameObject"]], "pyframe_getback (c function)": [[26, "c.PyFrame_GetBack"]], "pyframe_getbuiltins (c function)": [[26, "c.PyFrame_GetBuiltins"]], "pyframe_getcode (c function)": [[26, "c.PyFrame_GetCode"]], "pyframe_getgenerator (c function)": [[26, "c.PyFrame_GetGenerator"]], "pyframe_getglobals (c function)": [[26, "c.PyFrame_GetGlobals"]], "pyframe_getlasti (c function)": [[26, "c.PyFrame_GetLasti"]], "pyframe_getlinenumber (c function)": [[26, "c.PyFrame_GetLineNumber"]], "pyframe_getlocals (c function)": [[26, "c.PyFrame_GetLocals"]], "methodtype (in module types)": [[27, "index-1"], [43, "index-2"]], "pyfunctionobject (c type)": [[27, "c.PyFunctionObject"]], "pyfunction_check (c function)": [[27, "c.PyFunction_Check"]], "pyfunction_getannotations (c function)": [[27, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[27, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[27, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[27, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[27, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[27, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[27, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[27, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[27, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[27, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[27, "c.PyFunction_SetDefaults"]], "pyfunction_setvectorcall (c function)": [[27, "c.PyFunction_SetVectorcall"]], "pyfunction_type (c var)": [[27, "c.PyFunction_Type"]], "function": [[27, "index-0"], [426, "index-28"], [426, "index-34"], [427, "index-32"], [427, "index-33"], [427, "index-37"], [427, "index-38"], [427, "index-39"], [427, "index-40"], [429, "index-23"], [429, "index-52"], [429, "index-53"], [429, "index-90"], [435, "index-24"], [435, "index-26"], [440, "index-6"]], "pygc_collect (c function)": [[28, "c.PyGC_Collect"]], "pygc_disable (c function)": [[28, "c.PyGC_Disable"]], "pygc_enable (c function)": [[28, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[28, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[28, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[28, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[28, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c function)": [[28, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c function)": [[28, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c function)": [[28, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[28, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[28, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[28, "c.PyObject_IS_GC"]], "py_visit (c function)": [[28, "c.Py_VISIT"]], "inquiry (c type)": [[28, "c.inquiry"]], "traverseproc (c type)": [[28, "c.traverseproc"]], "visitproc (c type)": [[28, "c.visitproc"]], "pygenobject (c type)": [[29, "c.PyGenObject"]], "pygen_check (c function)": [[29, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[29, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[29, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[29, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[29, "c.PyGen_Type"]], "pep 3147": [[30, "index-3"], [83, "index-3"], [162, "index-0"], [162, "index-2"], [162, "index-3"], [249, "index-2"], [249, "index-3"], [249, "index-4"], [249, "index-5"], [249, "index-6"], [250, "index-11"], [250, "index-21"], [250, "index-23"], [250, "index-24"], [311, "index-1"], [311, "index-4"], [324, "index-2"], [361, "index-3"], [431, "index-13"], [449, "index-16"], [474, "index-5"], [475, "index-18"]], "pyimport_addmodule (c function)": [[30, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[30, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[30, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[30, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[30, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[30, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[30, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[30, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[30, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[30, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[30, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[30, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[30, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[30, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[30, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[30, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[30, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[30, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[30, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[30, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[30, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[30, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[30, "c.PyImport_ReloadModule"]], "__all__": [[30, "index-0"], [449, "index-8"]], "__all__ (package variable)": [[30, "index-0"]], "__import__": [[30, "index-1"]], "_frozen (c struct)": [[30, "c._frozen"]], "_inittab (c struct)": [[30, "c._inittab"]], "compile": [[30, "index-2"], [344, "index-62"], [384, "index-3"], [435, "index-44"]], "freeze utility": [[30, "index-4"]], "modules (in module sys)": [[30, "index-0"], [32, "index-16"]], "package variable": [[30, "index-0"]], "pep 523": [[32, "index-40"], [32, "index-41"], [472, "index-39"], [478, "index-25"], [478, "index-26"], [481, "index-24"], [482, "index-214"], [482, "index-219"], [482, "index-227"]], "pep 528": [[32, "index-51"], [33, "index-17"], [460, "index-16"], [478, "index-22"]], "pep 529": [[32, "index-50"], [62, "index-5"], [293, "index-27"], [352, "index-42"], [352, "index-9"], [454, "index-51"], [460, "index-17"], [478, "index-20"], [480, "index-19"], [482, "index-168"], [482, "index-221"], [482, "index-23"]], "pep 539": [[32, "index-47"], [479, "index-14"], [479, "index-15"], [482, "index-208"]], "python*": [[32, "index-4"], [454, "index-0"], [454, "index-10"], [454, "index-2"], [454, "index-5"], [476, "index-50"], [482, "index-3"]], "pythondebug": [[32, "index-0"], [33, "index-22"], [454, "envvar-PYTHONDEBUG"], [454, "index-4"], [455, "index-4"]], "pythondontwritebytecode": [[32, "index-1"], [33, "index-32"], [83, "index-4"], [352, "index-6"], [454, "envvar-PYTHONDONTWRITEBYTECODE"], [454, "index-3"], [467, "index-20"], [467, "index-24"]], "pythonhashseed": [[32, "index-2"], [32, "index-3"], [33, "index-11"], [427, "index-110"], [454, "envvar-PYTHONHASHSEED"], [454, "index-17"], [454, "index-18"], [454, "index-36"], [475, "index-23"], [475, "index-35"], [482, "index-197"]], "pythonhome": [[32, "index-31"], [32, "index-32"], [32, "index-6"], [33, "index-12"], [34, "index-26"], [34, "index-29"], [108, "index-0"], [108, "index-1"], [353, "index-2"], [353, "index-4"], [361, "index-0"], [454, "envvar-PYTHONHOME"], [454, "index-29"], [454, "index-30"], [454, "index-33"], [454, "index-7"], [460, "index-32"], [460, "index-34"], [460, "index-36"], [478, "index-2"]], "pythoninspect": [[32, "index-7"], [33, "index-14"], [454, "envvar-PYTHONINSPECT"], [454, "index-9"], [464, "index-29"]], "pythonioencoding": [[32, "index-18"], [32, "index-19"], [33, "index-26"], [293, "index-1"], [352, "index-35"], [454, "envvar-PYTHONIOENCODING"], [454, "index-42"], [467, "index-21"], [476, "index-54"]], "pythonlegacywindowsfsencoding": [[32, "index-8"], [33, "index-1"], [352, "index-33"], [454, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [478, "index-19"]], "pythonlegacywindowsstdio": [[32, "index-10"], [33, "index-16"], [352, "index-37"], [454, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [454, "index-37"], [478, "index-21"]], "pythonnousersite": [[32, "index-12"], [33, "index-29"], [334, "index-8"], [454, "envvar-PYTHONNOUSERSITE"], [467, "index-6"]], "pythonoptimize": [[32, "index-13"], [33, "index-21"], [454, "envvar-PYTHONOPTIMIZE"], [454, "index-12"]], "pythonpath": [[32, "index-5"], [33, "index-20"], [34, "index-27"], [34, "index-30"], [69, "index-0"], [108, "index-2"], [108, "index-3"], [151, "index-4"], [352, "index-22"], [352, "index-23"], [353, "index-0"], [353, "index-1"], [361, "index-1"], [431, "index-17"], [449, "index-14"], [449, "index-17"], [449, "index-18"], [454, "envvar-PYTHONPATH"], [454, "index-32"], [454, "index-34"], [454, "index-35"], [454, "index-6"], [458, "index-2"], [460, "index-11"], [460, "index-31"], [460, "index-33"], [460, "index-35"], [476, "index-56"], [476, "index-57"]], "pythonunbuffered": [[32, "index-14"], [33, "index-5"], [352, "index-38"], [454, "envvar-PYTHONUNBUFFERED"], [454, "index-49"], [482, "index-165"]], "pythonverbose": [[32, "index-15"], [33, "index-30"], [454, "envvar-PYTHONVERBOSE"], [454, "index-50"]], "pyeval_acquirelock (c function)": [[32, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[32, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[32, "index-38"]], "pyeval_initthreads (c function)": [[32, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[32, "index-16"]], "pyeval_releaselock (c function)": [[32, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[32, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[32, "index-38"]], "pyeval_restorethread (c function)": [[32, "c.PyEval_RestoreThread"]], "pyeval_restorethread()": [[32, "index-37"], [32, "index-38"]], "pyeval_savethread (c function)": [[32, "c.PyEval_SaveThread"]], "pyeval_savethread()": [[32, "index-37"], [32, "index-38"]], "pyeval_setprofile (c function)": [[32, "c.PyEval_SetProfile"]], "pyeval_setprofileallthreads (c function)": [[32, "c.PyEval_SetProfileAllThreads"]], "pyeval_settrace (c function)": [[32, "c.PyEval_SetTrace"]], "pyeval_settraceallthreads (c function)": [[32, "c.PyEval_SetTraceAllThreads"]], "pyeval_threadsinitialized (c function)": [[32, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[32, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[32, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[32, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[32, "c.PyGILState_Release"]], "pyinterpreterstate (c type)": [[32, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[32, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[32, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[32, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[32, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[32, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[32, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[32, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[32, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[32, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[32, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[32, "c.PySys_SetArgv"]], "pysys_setargv()": [[32, "index-16"]], "pysys_setargvex (c function)": [[32, "c.PySys_SetArgvEx"]], "pysys_setargvex()": [[32, "index-16"]], "pythreadstate": [[32, "index-35"]], "pythreadstate (c type)": [[32, "c.PyThreadState"]], "pythreadstate_clear (c function)": [[32, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[32, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[32, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_entertracing (c function)": [[32, "c.PyThreadState_EnterTracing"]], "pythreadstate_get (c function)": [[32, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[32, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[32, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[32, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[32, "c.PyThreadState_GetInterpreter"]], "pythreadstate_leavetracing (c function)": [[32, "c.PyThreadState_LeaveTracing"]], "pythreadstate_new (c function)": [[32, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[32, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[32, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[32, "c.PyThreadState_Swap"]], "pythread_reinittls (c function)": [[32, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[32, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[32, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[32, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[32, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[32, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[32, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[32, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[32, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[32, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[32, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[32, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[32, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[32, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[32, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[32, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[32, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[32, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[32, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[32, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[32, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[32, "c.Py_AddPendingCall"]], "py_addpendingcall()": [[32, "index-46"]], "py_begin_allow_threads": [[32, "index-36"]], "py_begin_allow_threads (c macro)": [[32, "c.Py_BEGIN_ALLOW_THREADS"]], "py_block_threads (c macro)": [[32, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[32, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[32, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[32, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads": [[32, "index-36"]], "py_end_allow_threads (c macro)": [[32, "c.Py_END_ALLOW_THREADS"]], "py_endinterpreter (c function)": [[32, "c.Py_EndInterpreter"]], "py_fatalerror()": [[32, "index-30"]], "py_finalize (c function)": [[32, "c.Py_Finalize"]], "py_finalizeex (c function)": [[32, "c.Py_FinalizeEx"]], "py_finalizeex()": [[32, "index-16"], [32, "index-43"], [32, "index-45"], [57, "index-2"], [57, "index-3"]], "py_frozenflag (c var)": [[32, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[32, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[32, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[32, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[32, "c.Py_GetExecPrefix"]], "py_getpath (c function)": [[32, "c.Py_GetPath"]], "py_getpath()": [[32, "index-20"], [32, "index-24"], [34, "index-28"]], "py_getplatform (c function)": [[32, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[32, "c.Py_GetPrefix"]], "py_getprogramfullpath (c function)": [[32, "c.Py_GetProgramFullPath"]], "py_getprogramname (c function)": [[32, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[32, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[32, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[32, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[32, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[32, "c.Py_Initialize"]], "py_initialize()": [[32, "index-17"], [32, "index-20"], [32, "index-43"], [34, "index-23"]], "py_initializeex (c function)": [[32, "c.Py_InitializeEx"]], "py_inspectflag (c var)": [[32, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[32, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[32, "c.Py_IsInitialized"]], "py_isolatedflag (c var)": [[32, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[32, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[32, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[32, "c.Py_NewInterpreter"]], "py_nositeflag (c var)": [[32, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[32, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[32, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[32, "c.Py_QuietFlag"]], "py_setpath (c function)": [[32, "c.Py_SetPath"]], "py_setpath()": [[32, "index-23"]], "py_setprogramname (c function)": [[32, "c.Py_SetProgramName"]], "py_setprogramname()": [[32, "index-16"], [32, "index-21"], [32, "index-22"], [34, "index-28"]], "py_setpythonhome (c function)": [[32, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[32, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[32, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[32, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[32, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[32, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[32, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[32, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[32, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[32, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[32, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[32, "index-16"], [32, "index-42"], [34, "index-23"], [112, "module-__main__"], [324, "index-0"], [324, "index-4"], [428, "index-10"], [436, "index-2"], [436, "index-3"]], "_thread": [[32, "index-39"], [113, "module-_thread"]], "argv (in module sys)": [[32, "index-30"]], "builtins": [[32, "index-16"], [32, "index-42"], [34, "index-23"], [148, "module-builtins"], [436, "index-2"], [449, "index-7"]], "close() (in module os)": [[32, "index-44"]], "copyright (in module sys)": [[32, "index-27"]], "executable (in module sys)": [[32, "index-22"]], "global interpreter lock": [[32, "index-33"]], "interpreter lock": [[32, "index-33"]], "lock, interpreter": [[32, "index-33"]], "main()": [[32, "index-17"], [32, "index-20"], [32, "index-30"]], "module": [[32, "index-16"], [32, "index-23"], [32, "index-24"], [34, "index-23"], [44, "index-0"], [265, "index-0"], [334, "index-0"], [352, "index-21"], [427, "index-4"], [427, "index-42"], [427, "index-43"], [429, "index-40"], [435, "index-34"], [449, "index-0"]], "path": [[32, "index-16"], [32, "index-23"], [32, "index-24"], [34, "index-24"], [34, "index-25"], [34, "index-23"], [82, "index-0"], [82, "index-1"], [151, "index-3"], [151, "index-6"], [265, "index-0"], [293, "index-33"], [293, "index-34"], [293, "index-35"], [293, "index-36"], [293, "index-39"], [293, "index-40"], [293, "index-41"], [293, "index-42"], [293, "index-52"], [294, "index-0"], [296, "index-0"], [334, "index-3"], [334, "index-0"], [334, "index-4"], [348, "index-2"], [352, "index-21"], [402, "index-3"], [431, "index-9"], [437, "index-4"], [449, "index-15"], [449, "index-0"], [454, "index-31"], [459, "index-8"], [460, "index-10"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-18"], [460, "index-2"], [460, "index-20"], [460, "index-21"], [460, "index-22"], [460, "index-23"], [460, "index-3"], [460, "index-39"], [460, "index-5"], [460, "index-9"], [476, "index-55"], [476, "index-58"], [476, "index-59"], [480, "index-22"], [482, "index-14"], [482, "index-173"], [482, "index-174"], [482, "index-39"]], "path (in module sys)": [[32, "index-16"], [32, "index-23"], [32, "index-24"], [34, "index-23"]], "platform (in module sys)": [[32, "index-26"]], "sdterr": [[32, "index-17"]], "search": [[32, "index-16"], [32, "index-23"], [32, "index-24"], [34, "index-23"], [265, "index-0"], [334, "index-0"], [352, "index-21"], [449, "index-0"]], "setswitchinterval() (in module sys)": [[32, "index-34"]], "stderr (in module sys)": [[32, "index-42"], [427, "index-53"]], "stdin": [[32, "index-17"]], "stdin (in module sys)": [[32, "index-42"], [427, "index-53"]], "stdout": [[32, "index-17"]], "stdout (in module sys)": [[32, "index-42"], [427, "index-53"]], "sys": [[32, "index-16"], [32, "index-42"], [34, "index-23"], [224, "index-7"], [352, "module-sys"], [426, "index-11"], [436, "index-2"], [449, "index-4"]], "version (in module sys)": [[32, "index-25"], [32, "index-28"], [32, "index-29"]], "\u74b0\u5883\u8b8a\u6578": [[32, "index-0"], [32, "index-1"], [32, "index-10"], [32, "index-12"], [32, "index-13"], [32, "index-14"], [32, "index-15"], [32, "index-18"], [32, "index-19"], [32, "index-2"], [32, "index-3"], [32, "index-31"], [32, "index-32"], [32, "index-4"], [32, "index-5"], [32, "index-6"], [32, "index-7"], [32, "index-8"], [33, "index-1"], [33, "index-10"], [33, "index-11"], [33, "index-12"], [33, "index-13"], [33, "index-14"], [33, "index-15"], [33, "index-16"], [33, "index-18"], [33, "index-19"], [33, "index-2"], [33, "index-20"], [33, "index-21"], [33, "index-22"], [33, "index-23"], [33, "index-24"], [33, "index-25"], [33, "index-26"], [33, "index-27"], [33, "index-28"], [33, "index-29"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-32"], [33, "index-35"], [33, "index-36"], [33, "index-4"], [33, "index-5"], [33, "index-6"], [33, "index-8"], [33, "index-9"], [34, "index-1"], [34, "index-2"], [34, "index-24"], [34, "index-25"], [34, "index-26"], [34, "index-27"], [34, "index-29"], [34, "index-3"], [34, "index-30"], [34, "index-4"], [34, "index-5"], [41, "index-1"], [41, "index-2"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [61, "index-0"], [69, "index-0"], [79, "index-4"], [79, "index-5"], [82, "index-0"], [82, "index-1"], [83, "index-4"], [100, "index-0"], [106, "index-3"], [108, "index-0"], [108, "index-1"], [108, "index-10"], [108, "index-2"], [108, "index-3"], [108, "index-4"], [108, "index-5"], [108, "index-6"], [108, "index-7"], [108, "index-8"], [108, "index-9"], [124, "index-2"], [125, "index-5"], [151, "index-3"], [151, "index-4"], [151, "index-6"], [162, "index-1"], [176, "index-0"], [176, "index-1"], [176, "index-2"], [176, "index-3"], [176, "index-4"], [176, "index-5"], [176, "index-6"], [176, "index-7"], [176, "index-8"], [187, "index-0"], [187, "index-1"], [187, "index-2"], [187, "index-3"], [187, "index-4"], [187, "index-5"], [213, "index-0"], [224, "index-15"], [227, "index-0"], [228, "index-10"], [228, "index-11"], [228, "index-8"], [228, "index-9"], [229, "index-0"], [229, "index-1"], [229, "index-2"], [229, "index-3"], [229, "index-5"], [229, "index-6"], [229, "index-7"], [229, "index-8"], [246, "index-5"], [246, "index-6"], [258, "index-3"], [266, "index-1"], [266, "index-2"], [266, "index-3"], [293, "index-1"], [293, "index-10"], [293, "index-11"], [293, "index-2"], [293, "index-3"], [293, "index-33"], [293, "index-34"], [293, "index-35"], [293, "index-36"], [293, "index-39"], [293, "index-4"], [293, "index-40"], [293, "index-41"], [293, "index-42"], [293, "index-43"], [293, "index-52"], [294, "index-3"], [294, "index-4"], [294, "index-5"], [294, "index-6"], [294, "index-7"], [294, "index-8"], [295, "index-1"], [295, "index-2"], [311, "index-3"], [311, "index-6"], [311, "index-7"], [313, "index-1"], [313, "index-2"], [320, "index-0"], [327, "index-2"], [334, "index-10"], [334, "index-3"], [334, "index-7"], [334, "index-8"], [334, "index-9"], [341, "index-3"], [341, "index-4"], [344, "index-67"], [344, "index-68"], [348, "index-2"], [348, "index-3"], [348, "index-4"], [352, "index-17"], [352, "index-18"], [352, "index-22"], [352, "index-23"], [352, "index-24"], [352, "index-3"], [352, "index-33"], [352, "index-35"], [352, "index-36"], [352, "index-37"], [352, "index-38"], [352, "index-4"], [352, "index-5"], [352, "index-6"], [352, "index-7"], [353, "index-0"], [353, "index-1"], [353, "index-2"], [353, "index-3"], [353, "index-4"], [359, "index-7"], [359, "index-8"], [359, "index-9"], [361, "index-0"], [361, "index-1"], [361, "index-2"], [365, "index-13"], [365, "index-14"], [365, "index-15"], [365, "index-16"], [365, "index-17"], [365, "index-18"], [368, "index-0"], [368, "index-1"], [381, "index-0"], [381, "index-1"], [381, "index-2"], [394, "index-18"], [394, "index-4"], [394, "index-9"], [399, "index-1"], [399, "index-2"], [399, "index-3"], [399, "index-4"], [399, "index-5"], [402, "index-0"], [402, "index-1"], [402, "index-2"], [402, "index-3"], [409, "index-0"], [424, "envvar-PYTHONTZPATH"], [424, "index-2"], [427, "index-110"], [427, "index-59"], [437, "index-4"], [437, "index-5"], [449, "index-14"], [449, "index-15"], [449, "index-17"], [449, "index-18"], [454, "envvar-PYTHONASYNCIODEBUG"], [454, "envvar-PYTHONBREAKPOINT"], [454, "envvar-PYTHONCASEOK"], [454, "envvar-PYTHONCOERCECLOCALE"], [454, "envvar-PYTHONDEBUG"], [454, "envvar-PYTHONDEVMODE"], [454, "envvar-PYTHONDONTWRITEBYTECODE"], [454, "envvar-PYTHONDUMPREFS"], [454, "envvar-PYTHONDUMPREFSFILE-FILENAME"], [454, "envvar-PYTHONEXECUTABLE"], [454, "envvar-PYTHONFAULTHANDLER"], [454, "envvar-PYTHONHASHSEED"], [454, "envvar-PYTHONHOME"], [454, "envvar-PYTHONINSPECT"], [454, "envvar-PYTHONINTMAXSTRDIGITS"], [454, "envvar-PYTHONIOENCODING"], [454, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [454, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [454, "envvar-PYTHONMALLOC"], [454, "envvar-PYTHONMALLOCSTATS"], [454, "envvar-PYTHONNODEBUGRANGES"], [454, "envvar-PYTHONNOUSERSITE"], [454, "envvar-PYTHONOPTIMIZE"], [454, "envvar-PYTHONPATH"], [454, "envvar-PYTHONPERFSUPPORT"], [454, "envvar-PYTHONPLATLIBDIR"], [454, "envvar-PYTHONPROFILEIMPORTTIME"], [454, "envvar-PYTHONPYCACHEPREFIX"], [454, "envvar-PYTHONSAFEPATH"], [454, "envvar-PYTHONSTARTUP"], [454, "envvar-PYTHONTRACEMALLOC"], [454, "envvar-PYTHONUNBUFFERED"], [454, "envvar-PYTHONUSERBASE"], [454, "envvar-PYTHONUTF8"], [454, "envvar-PYTHONVERBOSE"], [454, "envvar-PYTHONWARNDEFAULTENCODING"], [454, "envvar-PYTHONWARNINGS"], [454, "index-0"], [454, "index-10"], [454, "index-12"], [454, "index-16"], [454, "index-17"], [454, "index-18"], [454, "index-2"], [454, "index-22"], [454, "index-23"], [454, "index-24"], [454, "index-25"], [454, "index-26"], [454, "index-27"], [454, "index-28"], [454, "index-29"], [454, "index-3"], [454, "index-30"], [454, "index-31"], [454, "index-32"], [454, "index-33"], [454, "index-34"], [454, "index-35"], [454, "index-36"], [454, "index-37"], [454, "index-4"], [454, "index-40"], [454, "index-42"], [454, "index-43"], [454, "index-49"], [454, "index-5"], [454, "index-50"], [454, "index-6"], [454, "index-7"], [454, "index-8"], [454, "index-9"], [455, "envvar-BASECFLAGS"], [455, "envvar-BASECPPFLAGS"], [455, "envvar-BLDSHARED"], [455, "envvar-CC"], [455, "envvar-CCSHARED"], [455, "envvar-CFLAGS"], [455, "envvar-CFLAGSFORSHARED"], [455, "envvar-CFLAGS_ALIASING"], [455, "envvar-CFLAGS_NODIST"], [455, "envvar-CONFIGURE_CFLAGS"], [455, "envvar-CONFIGURE_CFLAGS_NODIST"], [455, "envvar-CONFIGURE_CPPFLAGS"], [455, "envvar-CONFIGURE_LDFLAGS"], [455, "envvar-CONFIGURE_LDFLAGS_NODIST"], [455, "envvar-CPPFLAGS"], [455, "envvar-CXX"], [455, "envvar-EXTRA_CFLAGS"], [455, "envvar-LDFLAGS"], [455, "envvar-LDFLAGS_NODIST"], [455, "envvar-LDSHARED"], [455, "envvar-LIBS"], [455, "envvar-LINKCC"], [455, "envvar-OPT"], [455, "envvar-PROFILE_TASK"], [455, "envvar-PURIFY"], [455, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [455, "envvar-PY_CFLAGS"], [455, "envvar-PY_CFLAGS_NODIST"], [455, "envvar-PY_CORE_CFLAGS"], [455, "envvar-PY_CORE_LDFLAGS"], [455, "envvar-PY_CPPFLAGS"], [455, "envvar-PY_LDFLAGS"], [455, "envvar-PY_LDFLAGS_NODIST"], [455, "envvar-PY_STDMODULE_CFLAGS"], [455, "index-10"], [455, "index-11"], [455, "index-12"], [455, "index-13"], [455, "index-14"], [455, "index-15"], [455, "index-16"], [455, "index-17"], [455, "index-18"], [455, "index-19"], [455, "index-2"], [455, "index-20"], [455, "index-21"], [455, "index-22"], [455, "index-23"], [455, "index-24"], [455, "index-25"], [455, "index-26"], [455, "index-30"], [455, "index-32"], [455, "index-4"], [455, "index-5"], [455, "index-6"], [455, "index-7"], [455, "index-8"], [455, "index-9"], [458, "index-2"], [459, "index-6"], [459, "index-7"], [459, "index-8"], [460, "index-10"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-15"], [460, "index-18"], [460, "index-2"], [460, "index-20"], [460, "index-21"], [460, "index-22"], [460, "index-23"], [460, "index-24"], [460, "index-25"], [460, "index-26"], [460, "index-27"], [460, "index-28"], [460, "index-29"], [460, "index-3"], [460, "index-30"], [460, "index-31"], [460, "index-32"], [460, "index-33"], [460, "index-34"], [460, "index-35"], [460, "index-36"], [460, "index-39"], [460, "index-4"], [460, "index-5"], [460, "index-6"], [460, "index-7"], [460, "index-8"], [460, "index-9"], [462, "index-11"], [464, "index-24"], [464, "index-25"], [464, "index-26"], [464, "index-27"], [464, "index-28"], [464, "index-29"], [467, "index-20"], [467, "index-21"], [467, "index-24"], [467, "index-4"], [467, "index-5"], [467, "index-6"], [468, "index-1"], [468, "index-12"], [468, "index-14"], [468, "index-15"], [468, "index-8"], [468, "index-9"], [471, "index-17"], [471, "index-33"], [472, "index-1"], [472, "index-21"], [472, "index-32"], [472, "index-33"], [472, "index-34"], [472, "index-35"], [472, "index-6"], [474, "index-10"], [475, "index-23"], [475, "index-24"], [475, "index-35"], [476, "index-40"], [476, "index-41"], [476, "index-50"], [476, "index-51"], [476, "index-54"], [476, "index-55"], [476, "index-56"], [476, "index-57"], [476, "index-58"], [476, "index-59"], [477, "index-31"], [477, "index-32"], [478, "index-19"], [478, "index-2"], [478, "index-21"], [478, "index-27"], [478, "index-38"], [479, "index-12"], [479, "index-26"], [479, "index-27"], [479, "index-31"], [479, "index-36"], [479, "index-4"], [479, "index-8"], [480, "index-13"], [480, "index-14"], [480, "index-2"], [480, "index-20"], [480, "index-21"], [480, "index-22"], [480, "index-3"], [481, "index-21"], [482, "index-0"], [482, "index-10"], [482, "index-11"], [482, "index-114"], [482, "index-14"], [482, "index-15"], [482, "index-153"], [482, "index-161"], [482, "index-162"], [482, "index-163"], [482, "index-165"], [482, "index-169"], [482, "index-173"], [482, "index-174"], [482, "index-176"], [482, "index-178"], [482, "index-180"], [482, "index-186"], [482, "index-187"], [482, "index-191"], [482, "index-192"], [482, "index-196"], [482, "index-197"], [482, "index-205"], [482, "index-216"], [482, "index-217"], [482, "index-24"], [482, "index-246"], [482, "index-247"], [482, "index-3"], [482, "index-36"], [482, "index-39"], [482, "index-47"], [482, "index-48"], [482, "index-55"], [482, "index-68"], [482, "index-98"]], "pep 432": [[33, "index-37"], [33, "index-38"], [479, "index-38"], [482, "index-210"]], "pep 538": [[33, "index-33"], [454, "index-52"], [455, "index-31"], [479, "index-10"], [479, "index-3"], [479, "index-6"], [479, "index-7"], [482, "index-184"], [482, "index-188"], [482, "index-209"]], "pep 540": [[33, "index-34"], [293, "index-55"], [479, "index-11"], [479, "index-9"], [482, "index-198"]], "pep 552": [[33, "index-7"], [250, "index-9"], [311, "index-5"], [472, "index-23"], [479, "index-22"], [479, "index-23"], [482, "index-181"], [482, "index-201"]], "pep 587": [[33, "index-0"], [472, "index-41"], [480, "index-34"], [480, "index-5"], [482, "index-166"], [482, "index-171"], [482, "index-56"]], "pythoncoerceclocale": [[33, "index-36"], [293, "index-4"], [454, "envvar-PYTHONCOERCECLOCALE"], [455, "index-30"], [479, "index-4"]], "pythondevmode": [[33, "index-8"], [187, "index-0"], [454, "envvar-PYTHONDEVMODE"], [479, "index-26"]], "pythondumprefs": [[33, "index-9"], [61, "index-0"], [454, "envvar-PYTHONDUMPREFS"], [455, "index-5"], [480, "index-3"], [482, "index-176"]], "pythonexecutable": [[33, "index-23"], [454, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[33, "index-10"], [187, "index-4"], [213, "index-0"], [454, "envvar-PYTHONFAULTHANDLER"], [475, "index-24"]], "pythonintmaxstrdigits": [[33, "index-15"], [344, "index-67"], [344, "index-68"], [352, "index-17"], [454, "envvar-PYTHONINTMAXSTRDIGITS"], [454, "index-23"], [482, "index-0"]], "pythonmallocstats": [[33, "index-18"], [41, "index-2"], [454, "envvar-PYTHONMALLOCSTATS"], [482, "index-247"]], "pythonnodebugranges": [[33, "index-6"], [427, "index-59"], [454, "envvar-PYTHONNODEBUGRANGES"], [454, "index-27"], [472, "index-6"]], "pythonperfsupport": [[33, "index-28"], [100, "index-0"], [454, "envvar-PYTHONPERFSUPPORT"], [454, "index-28"]], "pythonplatlibdir": [[33, "index-19"], [353, "index-3"], [454, "envvar-PYTHONPLATLIBDIR"], [482, "index-114"]], "pythonprofileimporttime": [[33, "index-13"], [454, "envvar-PYTHONPROFILEIMPORTTIME"], [454, "index-24"], [479, "index-27"], [482, "index-205"]], "pythonpycacheprefix": [[33, "index-25"], [352, "index-7"], [454, "envvar-PYTHONPYCACHEPREFIX"], [454, "index-25"], [480, "index-2"], [482, "index-178"]], "pythonsafepath": [[33, "index-3"], [327, "index-2"], [352, "index-24"], [454, "envvar-PYTHONSAFEPATH"], [454, "index-16"], [472, "index-1"], [472, "index-21"], [482, "index-15"]], "pythontracemalloc": [[33, "index-27"], [381, "index-0"], [381, "index-1"], [381, "index-2"], [454, "envvar-PYTHONTRACEMALLOC"]], "pythonutf8": [[33, "index-2"], [33, "index-35"], [293, "index-2"], [293, "index-3"], [352, "index-36"], [454, "envvar-PYTHONUTF8"], [454, "index-43"], [460, "index-15"], [479, "index-8"]], "pythonwarnings": [[33, "index-31"], [187, "index-1"], [399, "index-1"], [399, "index-2"], [399, "index-3"], [399, "index-4"], [399, "index-5"], [454, "envvar-PYTHONWARNINGS"], [454, "index-22"], [468, "index-1"], [468, "index-8"], [474, "index-10"], [479, "index-36"], [482, "index-10"]], "pyconfig (c type)": [[33, "c.PyConfig"]], "pyconfig.pyconfig_clear (c function)": [[33, "c.PyConfig.PyConfig_Clear"]], "pyconfig.pyconfig_initisolatedconfig (c function)": [[33, "c.PyConfig.PyConfig_InitIsolatedConfig"]], "pyconfig.pyconfig_initpythonconfig (c function)": [[33, "c.PyConfig.PyConfig_InitPythonConfig"]], "pyconfig.pyconfig_read (c function)": [[33, "c.PyConfig.PyConfig_Read"]], "pyconfig.pyconfig_setargv (c function)": [[33, "c.PyConfig.PyConfig_SetArgv"]], "pyconfig.pyconfig_setbytesargv (c function)": [[33, "c.PyConfig.PyConfig_SetBytesArgv"]], "pyconfig.pyconfig_setbytesstring (c function)": [[33, "c.PyConfig.PyConfig_SetBytesString"]], "pyconfig.pyconfig_setstring (c function)": [[33, "c.PyConfig.PyConfig_SetString"]], "pyconfig.pyconfig_setwidestringlist (c function)": [[33, "c.PyConfig.PyConfig_SetWideStringList"]], "pyconfig.argv (c member)": [[33, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[33, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[33, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[33, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[33, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[33, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[33, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.code_debug_ranges (c member)": [[33, "c.PyConfig.code_debug_ranges"]], "pyconfig.configure_c_stdio (c member)": [[33, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[33, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[33, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[33, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[33, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[33, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[33, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[33, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[33, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[33, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[33, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[33, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[33, "c.PyConfig.install_signal_handlers"]], "pyconfig.int_max_str_digits (c member)": [[33, "c.PyConfig.int_max_str_digits"]], "pyconfig.interactive (c member)": [[33, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[33, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[33, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[33, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[33, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[33, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[33, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[33, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[33, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[33, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[33, "c.PyConfig.pathconfig_warnings"]], "pyconfig.perf_profiling (c member)": [[33, "c.PyConfig.perf_profiling"]], "pyconfig.platlibdir (c member)": [[33, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[33, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[33, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[33, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[33, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[33, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[33, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[33, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[33, "c.PyConfig.run_module"]], "pyconfig.safe_path (c member)": [[33, "c.PyConfig.safe_path"]], "pyconfig.show_ref_count (c member)": [[33, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[33, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[33, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[33, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[33, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[33, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[33, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[33, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[33, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[33, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[33, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[33, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[33, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[33, "c.PyConfig.xoptions"]], "pypreconfig (c type)": [[33, "c.PyPreConfig"]], "pypreconfig.pypreconfig_initisolatedconfig (c function)": [[33, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig"]], "pypreconfig.pypreconfig_initpythonconfig (c function)": [[33, "c.PyPreConfig.PyPreConfig_InitPythonConfig"]], "pypreconfig.allocator (c member)": [[33, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[33, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[33, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[33, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[33, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[33, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[33, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[33, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[33, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[33, "c.PyPreConfig.utf8_mode"]], "pystatus (c type)": [[33, "c.PyStatus"]], "pystatus.pystatus_error (c function)": [[33, "c.PyStatus.PyStatus_Error"]], "pystatus.pystatus_exception (c function)": [[33, "c.PyStatus.PyStatus_Exception"]], "pystatus.pystatus_exit (c function)": [[33, "c.PyStatus.PyStatus_Exit"]], "pystatus.pystatus_iserror (c function)": [[33, "c.PyStatus.PyStatus_IsError"]], "pystatus.pystatus_isexit (c function)": [[33, "c.PyStatus.PyStatus_IsExit"]], "pystatus.pystatus_nomemory (c function)": [[33, "c.PyStatus.PyStatus_NoMemory"]], "pystatus.pystatus_ok (c function)": [[33, "c.PyStatus.PyStatus_Ok"]], "pystatus.py_exitstatusexception (c function)": [[33, "c.PyStatus.Py_ExitStatusException"]], "pystatus.err_msg (c member)": [[33, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[33, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[33, "c.PyStatus.func"]], "pywidestringlist (c type)": [[33, "c.PyWideStringList"]], "pywidestringlist.pywidestringlist_append (c function)": [[33, "c.PyWideStringList.PyWideStringList_Append"]], "pywidestringlist.pywidestringlist_insert (c function)": [[33, "c.PyWideStringList.PyWideStringList_Insert"]], "pywidestringlist.items (c member)": [[33, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[33, "c.PyWideStringList.length"]], "py_getargcargv (c function)": [[33, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[33, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[33, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[33, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[33, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[33, "c.Py_RunMain"]], "_py_initializemain (c function)": [[33, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[33, "index-24"], [33, "index-4"]], "pep 353": [[34, "index-15"], [466, "index-16"], [466, "index-17"], [466, "index-29"], [471, "index-36"], [482, "index-119"]], "pep 7": [[34, "index-0"], [34, "index-6"], [34, "index-7"], [478, "index-34"]], "pydoc_str (c macro)": [[34, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[34, "c.PyDoc_STRVAR"]], "pyerr_clear()": [[34, "index-17"], [34, "index-22"]], "pyerr_exceptionmatches()": [[34, "index-22"]], "pyerr_occurred()": [[34, "index-16"]], "pyerr_setstring()": [[34, "index-17"]], "pylist_getitem()": [[34, "index-12"]], "pylist_setitem()": [[34, "index-10"]], "pysequence_getitem()": [[34, "index-12"]], "pytuple_setitem()": [[34, "index-10"]], "py_abs (c macro)": [[34, "c.Py_ABS"]], "py_always_inline (c macro)": [[34, "c.Py_ALWAYS_INLINE"]], "py_charmask (c macro)": [[34, "c.Py_CHARMASK"]], "py_decref()": [[34, "index-9"]], "py_deprecated (c macro)": [[34, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[34, "c.Py_GETENV"]], "py_getexecprefix()": [[34, "index-28"]], "py_getprefix()": [[34, "index-28"]], "py_getprogramfullpath()": [[34, "index-28"]], "py_incref()": [[34, "index-9"]], "py_isinitialized()": [[34, "index-31"]], "py_max (c macro)": [[34, "c.Py_MAX"]], "py_member_size (c macro)": [[34, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[34, "c.Py_MIN"]], "py_no_inline (c macro)": [[34, "c.Py_NO_INLINE"]], "py_stringify (c macro)": [[34, "c.Py_STRINGIFY"]], "py_unreachable (c macro)": [[34, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[34, "c.Py_UNUSED"]], "py_xdecref()": [[34, "index-22"]], "py_ssize_t (c type)": [[34, "c.Py_ssize_t"]], "exc_info() (in module sys)": [[34, "index-18"]], "exec_prefix": [[34, "index-2"], [34, "index-5"], [459, "index-7"]], "incr_item()": [[34, "index-20"], [34, "index-21"]], "prefix": [[34, "index-1"], [34, "index-3"], [34, "index-4"], [459, "index-6"]], "set_all()": [[34, "index-11"]], "sum_list()": [[34, "index-13"]], "sum_sequence()": [[34, "index-14"], [34, "index-19"]], "type": [[34, "index-8"], [48, "index-7"], [59, "index-0"], [224, "index-0"], [224, "index-11"], [344, "index-23"], [344, "index-51"], [344, "index-58"], [344, "index-64"], [427, "index-1"], [427, "index-4"], [427, "index-83"], [429, "index-7"]], "pyaiter_check (c function)": [[35, "c.PyAIter_Check"]], "pyiter_check (c function)": [[35, "c.PyIter_Check"]], "pyiter_next (c function)": [[35, "c.PyIter_Next"]], "pyiter_send (c function)": [[35, "c.PyIter_Send"]], "pysendresult (c type)": [[35, "c.PySendResult"]], "pycalliter_check (c function)": [[36, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[36, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[36, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[36, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[36, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[36, "c.PySeqIter_Type"]], "pylistobject (c type)": [[37, "c.PyListObject"]], "pylist_append (c function)": [[37, "c.PyList_Append"]], "pylist_astuple (c function)": [[37, "c.PyList_AsTuple"]], "pylist_check (c function)": [[37, "c.PyList_Check"]], "pylist_checkexact (c function)": [[37, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[37, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[37, "c.PyList_GET_SIZE"]], "pylist_getitem (c function)": [[37, "c.PyList_GetItem"]], "pylist_getslice (c function)": [[37, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[37, "c.PyList_Insert"]], "pylist_new (c function)": [[37, "c.PyList_New"]], "pylist_reverse (c function)": [[37, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[37, "c.PyList_SET_ITEM"]], "pylist_setitem (c function)": [[37, "c.PyList_SetItem"]], "pylist_setslice (c function)": [[37, "c.PyList_SetSlice"]], "pylist_size (c function)": [[37, "c.PyList_Size"]], "pylist_sort (c function)": [[37, "c.PyList_Sort"]], "pylist_type (c var)": [[37, "c.PyList_Type"]], "list": [[37, "index-0"], [344, "index-22"], [344, "index-23"], [344, "index-24"], [426, "index-6"], [427, "index-23"], [429, "index-15"], [429, "index-40"], [429, "index-42"], [429, "index-45"], [429, "index-91"], [435, "index-1"], [435, "index-10"], [435, "index-2"], [435, "index-21"], [435, "index-5"], [435, "index-6"]], "tuple": [[37, "index-2"], [52, "index-1"], [58, "index-0"], [344, "index-21"], [344, "index-25"], [427, "index-20"], [429, "index-42"], [429, "index-45"], [429, "index-9"], [429, "index-92"]], "long_max": [[38, "index-1"]], "overflowerror (built-in exception)": [[38, "index-1"], [38, "index-2"], [38, "index-3"], [38, "index-4"], [38, "index-5"], [38, "index-6"]], "py_ssize_t_max": [[38, "index-3"]], "pylongobject (c type)": [[38, "c.PyLongObject"]], "pylong_asdouble (c function)": [[38, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[38, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[38, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[38, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[38, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[38, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[38, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[38, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[38, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[38, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[38, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[38, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[38, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[38, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[38, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[38, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[38, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[38, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[38, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[38, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[38, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[38, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[38, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[38, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[38, "c.PyLong_Type"]], "size_max": [[38, "index-5"]], "ulong_max": [[38, "index-4"]], "integer": [[38, "index-0"], [344, "index-11"], [344, "index-12"], [344, "index-16"], [427, "index-10"], [427, "index-12"], [427, "index-19"]], "long integer": [[38, "index-0"]], "pymapping_check (c function)": [[39, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[39, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[39, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[39, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[39, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[39, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[39, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[39, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[39, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[39, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[39, "c.PyMapping_Size"]], "pymapping_values (c function)": [[39, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[40, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[40, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[40, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[40, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[40, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[40, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[40, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[40, "c.PyMarshal_WriteObjectToString"]], "pythonmalloc": [[41, "index-1"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [187, "index-2"], [187, "index-3"], [454, "envvar-PYTHONMALLOC"], [454, "index-40"], [455, "index-32"], [478, "index-27"], [478, "index-38"], [482, "index-246"]], "pymemallocatordomain (c type)": [[41, "c.PyMemAllocatorDomain"]], "pymemallocatordomain.pymem_domain_mem (c macro)": [[41, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_MEM"]], "pymemallocatordomain.pymem_domain_obj (c macro)": [[41, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_OBJ"]], "pymemallocatordomain.pymem_domain_raw (c macro)": [[41, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_RAW"]], "pymemallocatorex (c type)": [[41, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[41, "c.PyMem_Calloc"]], "pymem_del (c function)": [[41, "c.PyMem_Del"]], "pymem_free (c function)": [[41, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[41, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[41, "c.PyMem_Malloc"]], "pymem_new (c function)": [[41, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[41, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[41, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[41, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[41, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[41, "c.PyMem_Realloc"]], "pymem_resize (c function)": [[41, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[41, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[41, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[41, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[41, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[41, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[41, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[41, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[41, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[41, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[41, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[41, "c.PyTraceMalloc_Untrack"]], "calloc()": [[41, "index-0"]], "free()": [[41, "index-0"]], "malloc()": [[41, "index-0"]], "realloc()": [[41, "index-0"]], "pymemoryview_check (c function)": [[42, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[42, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[42, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[42, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[42, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[42, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[42, "c.PyMemoryView_GetContiguous"]], "memoryview": [[42, "index-0"], [344, "index-39"]], "pyinstancemethod_check (c function)": [[43, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[43, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[43, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[43, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[43, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[43, "c.PyMethod_Check"]], "pymethod_function (c function)": [[43, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[43, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[43, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[43, "c.PyMethod_New"]], "pymethod_self (c function)": [[43, "c.PyMethod_Self"]], "pymethod_type (c var)": [[43, "c.PyMethod_Type"]], "instancemethod": [[43, "index-0"]], "method": [[43, "index-1"], [85, "index-26"], [85, "index-34"], [344, "index-60"], [427, "index-35"], [427, "index-41"], [429, "index-53"], [439, "index-0"]], "moduletype (in module types)": [[44, "index-1"]], "pep 3121": [[44, "index-10"], [469, "index-34"], [482, "index-113"]], "pep 451": [[44, "index-7"], [85, "index-92"], [250, "index-6"], [302, "index-15"], [302, "index-16"], [324, "index-3"], [324, "index-5"], [324, "index-8"], [352, "index-20"], [431, "index-26"], [471, "index-31"], [473, "index-5"], [476, "index-23"], [476, "index-3"], [477, "index-27"], [482, "index-245"], [482, "index-5"]], "pep 489": [[44, "index-8"], [69, "index-1"], [71, "index-0"], [250, "index-18"], [250, "index-19"], [250, "index-20"], [250, "index-8"], [477, "index-26"], [477, "index-28"], [477, "index-47"], [482, "index-101"], [482, "index-102"], [482, "index-103"], [482, "index-104"], [482, "index-105"], [482, "index-106"], [482, "index-107"], [482, "index-108"], [482, "index-109"], [482, "index-110"], [482, "index-111"], [482, "index-115"], [482, "index-116"], [482, "index-117"], [482, "index-121"], [482, "index-122"], [482, "index-123"], [482, "index-127"], [482, "index-128"], [482, "index-129"], [482, "index-130"], [482, "index-131"], [482, "index-139"], [482, "index-140"], [482, "index-141"], [482, "index-144"], [482, "index-146"], [482, "index-148"], [482, "index-155"], [482, "index-156"], [482, "index-157"], [482, "index-158"], [482, "index-159"], [482, "index-164"], [482, "index-73"], [482, "index-74"], [482, "index-76"], [482, "index-79"], [482, "index-81"], [482, "index-82"], [482, "index-83"], [482, "index-84"], [482, "index-85"], [482, "index-86"], [482, "index-87"], [482, "index-88"], [482, "index-89"], [482, "index-90"], [482, "index-91"], [482, "index-92"], [482, "index-93"], [482, "index-94"], [482, "index-96"]], "pymoduledef (c type)": [[44, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[44, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[44, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[44, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[44, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[44, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[44, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[44, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[44, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[44, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[44, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[44, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[44, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[44, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[44, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[44, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[44, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c function)": [[44, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[44, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[44, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[44, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c function)": [[44, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[44, "c.PyModule_AddType"]], "pymodule_check (c function)": [[44, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[44, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[44, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[44, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[44, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[44, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[44, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[44, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[44, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[44, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[44, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[44, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[44, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[44, "c.PyModule_GetState"]], "pymodule_new (c function)": [[44, "c.PyModule_New"]], "pymodule_newobject (c function)": [[44, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[44, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[44, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[44, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[44, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[44, "c.PyState_RemoveModule"]], "py_mod_create (c macro)": [[44, "c.Py_mod_create"]], "py_mod_create.create_module (c function)": [[44, "c.Py_mod_create.create_module"]], "py_mod_exec (c macro)": [[44, "c.Py_mod_exec"]], "py_mod_exec.exec_module (c function)": [[44, "c.Py_mod_exec.exec_module"]], "systemerror (built-in exception)": [[44, "index-4"], [44, "index-5"]], "__dict__ (module attribute)": [[44, "index-3"], [427, "index-44"]], "__doc__ (module attribute)": [[44, "index-2"], [427, "index-43"]], "__file__ (module attribute)": [[44, "index-2"], [44, "index-5"], [427, "index-43"]], "__loader__ (module attribute)": [[44, "index-2"]], "__name__ (module attribute)": [[44, "index-2"], [44, "index-4"], [427, "index-43"]], "__package__ (module attribute)": [[44, "index-2"]], "none": [[45, "index-0"], [427, "index-6"], [435, "index-3"]], "py_none (c var)": [[45, "c.Py_None"]], "py_return_none (c macro)": [[45, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[46, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[46, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[46, "c.PyNumber_Add"]], "pynumber_and (c function)": [[46, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[46, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[46, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[46, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[46, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[46, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[46, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[46, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[46, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[46, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[46, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[46, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[46, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[46, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[46, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[46, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[46, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[46, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[46, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[46, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[46, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[46, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[46, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[46, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[46, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[46, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[46, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[46, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[46, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[46, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[46, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[46, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[46, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[46, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[46, "c.PyNumber_Xor"]], "abs": [[46, "index-2"], [427, "index-100"]], "divmod": [[46, "index-0"], [427, "index-97"], [427, "index-98"]], "float": [[46, "index-5"], [344, "index-13"], [427, "index-101"]], "int": [[46, "index-4"], [344, "index-13"], [427, "index-101"]], "pow": [[46, "index-1"], [46, "index-3"], [427, "index-97"], [427, "index-98"], [427, "index-99"]], "pyobject_ascharbuffer (c function)": [[47, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[47, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[47, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[47, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[48, "index-4"], [48, "index-5"], [114, "index-0"], [160, "index-6"], [427, "index-91"], [467, "index-16"]], "pyobject_ascii (c function)": [[48, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[48, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[48, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[48, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[48, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[48, "c.PyObject_Dir"]], "pyobject_genericgetattr (c function)": [[48, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[48, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[48, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[48, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[48, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[48, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[48, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[48, "c.PyObject_GetItem"]], "pyobject_getiter (c function)": [[48, "c.PyObject_GetIter"]], "pyobject_hasattr (c function)": [[48, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[48, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[48, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[48, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[48, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[48, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[48, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[48, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[48, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[48, "c.PyObject_Not"]], "pyobject_print (c function)": [[48, "c.PyObject_Print"]], "pyobject_repr (c function)": [[48, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[48, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[48, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[48, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[48, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[48, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[48, "c.PyObject_Size"]], "pyobject_str (c function)": [[48, "c.PyObject_Str"], [48, "index-2"]], "pyobject_type (c function)": [[48, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[48, "c.PyObject_TypeCheck"]], "py_notimplemented (c var)": [[48, "c.Py_NotImplemented"]], "py_return_notimplemented (c macro)": [[48, "c.Py_RETURN_NOTIMPLEMENTED"]], "_pyobject_getdictptr (c function)": [[48, "c._PyObject_GetDictPtr"]], "ascii": [[48, "index-1"], [433, "index-1"], [434, "index-17"]], "hash": [[48, "index-6"], [61, "index-2"], [344, "index-21"], [427, "index-77"]], "repr": [[48, "index-0"], [61, "index-1"], [73, "index-3"], [435, "index-3"]], "string": [[48, "index-2"], [73, "index-3"], [224, "index-10"], [224, "index-3"], [266, "index-6"], [344, "index-27"], [344, "index-29"], [344, "index-31"], [344, "index-34"], [345, "module-string"], [427, "index-18"], [427, "index-73"], [427, "index-75"], [429, "index-42"], [429, "index-43"], [429, "index-45"], [434, "index-25"], [435, "index-3"]], "py_clear (c function)": [[50, "c.Py_CLEAR"]], "py_decref (c function)": [[50, "c.Py_DECREF"], [50, "c.Py_DecRef"]], "py_incref (c function)": [[50, "c.Py_INCREF"], [50, "c.Py_IncRef"]], "py_newref (c function)": [[50, "c.Py_NewRef"]], "py_refcnt (c function)": [[50, "c.Py_REFCNT"]], "py_set_refcnt (c function)": [[50, "c.Py_SET_REFCNT"]], "py_xdecref (c function)": [[50, "c.Py_XDECREF"]], "py_xincref (c function)": [[50, "c.Py_XINCREF"]], "py_xnewref (c function)": [[50, "c.Py_XNewRef"]], "pyeval_getbuiltins (c function)": [[51, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[51, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[51, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[51, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[51, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[51, "c.PyEval_GetLocals"]], "pysequence_check (c function)": [[52, "c.PySequence_Check"]], "pysequence_concat (c function)": [[52, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[52, "c.PySequence_Contains"]], "pysequence_count (c function)": [[52, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[52, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[52, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[52, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[52, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[52, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[52, "c.PySequence_Fast_ITEMS"]], "pysequence_getitem (c function)": [[52, "c.PySequence_GetItem"]], "pysequence_getslice (c function)": [[52, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[52, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[52, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[52, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[52, "c.PySequence_Index"]], "pysequence_length (c function)": [[52, "c.PySequence_Length"]], "pysequence_list (c function)": [[52, "c.PySequence_List"]], "pysequence_repeat (c function)": [[52, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[52, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[52, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[52, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[52, "c.PySequence_Tuple"]], "pyanyset_check (c function)": [[53, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[53, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[53, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[53, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[53, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[53, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[53, "c.PySetObject"]], "pyset_add (c function)": [[53, "c.PySet_Add"]], "pyset_check (c function)": [[53, "c.PySet_Check"]], "pyset_checkexact (c function)": [[53, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[53, "c.PySet_Clear"]], "pyset_contains (c function)": [[53, "c.PySet_Contains"]], "pyset_discard (c function)": [[53, "c.PySet_Discard"]], "pyset_get_size (c function)": [[53, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[53, "c.PySet_New"]], "pyset_pop (c function)": [[53, "c.PySet_Pop"]], "pyset_size (c function)": [[53, "c.PySet_Size"]], "pyset_type (c var)": [[53, "c.PySet_Type"]], "frozenset": [[53, "index-0"], [427, "index-28"]], "set": [[53, "index-0"], [344, "index-50"], [427, "index-27"], [429, "index-16"]], "pyslice_adjustindices (c function)": [[54, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[54, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[54, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[54, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[54, "c.PySlice_New"]], "pyslice_type (c var)": [[54, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[54, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[54, "c.Py_Ellipsis"]], "pep 387": [[55, "index-0"], [212, "index-10"], [212, "index-11"]], "py_limited_api (c macro)": [[55, "c.Py_LIMITED_API"]], "meth_class (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_CLASS"]], "meth_coexist (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_COEXIST"]], "meth_fastcall (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_FASTCALL"]], "meth_noargs (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_NOARGS"]], "meth_o (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_O"]], "meth_static (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_STATIC"]], "meth_varargs (\u5167\u5efa\u8b8a\u6578)": [[56, "METH_VARARGS"]], "pycfunction (c type)": [[56, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[56, "c.PyCFunctionWithKeywords"]], "pycmethod (c type)": [[56, "c.PyCMethod"]], "pygetsetdef (c type)": [[56, "c.PyGetSetDef"]], "pymemberdef (c type)": [[56, "c.PyMemberDef"]], "pymember_getone (c function)": [[56, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[56, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[56, "c.PyMethodDef"]], "pyobject (c type)": [[56, "c.PyObject"]], "pyobject_head (c macro)": [[56, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[56, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[56, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[56, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[56, "c.PyVarObject_HEAD_INIT"]], "py_is_type (c function)": [[56, "c.Py_IS_TYPE"]], "py_is (c function)": [[56, "c.Py_Is"]], "py_isfalse (c function)": [[56, "c.Py_IsFalse"]], "py_isnone (c function)": [[56, "c.Py_IsNone"]], "py_istrue (c function)": [[56, "c.Py_IsTrue"]], "py_set_size (c function)": [[56, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[56, "c.Py_SET_TYPE"]], "py_size (c function)": [[56, "c.Py_SIZE"]], "py_type (c function)": [[56, "c.Py_TYPE"]], "_pycfunctionfast (c type)": [[56, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[56, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[56, "index-0"]], "staticmethod": [[56, "index-1"]], "pep 578": [[57, "index-0"], [142, "index-3"], [352, "index-1"], [480, "index-33"]], "pyos_afterfork (c function)": [[57, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[57, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[57, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[57, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[57, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[57, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[57, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[57, "c.PyOS_setsig"]], "pysys_addaudithook (c function)": [[57, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[57, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[57, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[57, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[57, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[57, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[57, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[57, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[57, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[57, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[57, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[57, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[57, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[57, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[57, "c.Py_AtExit"]], "py_decodelocale (c function)": [[57, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[57, "c.Py_EncodeLocale"]], "py_exit (c function)": [[57, "c.Py_Exit"]], "py_fatalerror (c function)": [[57, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[57, "c.Py_FdIsInteractive"]], "abort()": [[57, "index-1"]], "cleanup functions": [[57, "index-3"]], "exit()": [[57, "index-2"]], "pystructsequence_desc (c type)": [[58, "c.PyStructSequence_Desc"]], "pystructsequence_field (c type)": [[58, "c.PyStructSequence_Field"]], "pystructsequence_get_item (c function)": [[58, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[58, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[58, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[58, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[58, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[58, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[58, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[58, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[58, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[58, "c.PyTupleObject"]], "pytuple_check (c function)": [[58, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[58, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[58, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[58, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[58, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[58, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[58, "c.PyTuple_New"]], "pytuple_pack (c function)": [[58, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[58, "c.PyTuple_SET_ITEM"]], "pytuple_setitem (c function)": [[58, "c.PyTuple_SetItem"]], "pytuple_size (c function)": [[58, "c.PyTuple_Size"]], "pytuple_type (c var)": [[58, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[58, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[59, "c.PyTypeObject"]], "pytype_addwatcher (c function)": [[59, "c.PyType_AddWatcher"]], "pytype_check (c function)": [[59, "c.PyType_Check"]], "pytype_checkexact (c function)": [[59, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[59, "c.PyType_ClearCache"]], "pytype_clearwatcher (c function)": [[59, "c.PyType_ClearWatcher"]], "pytype_frommetaclass (c function)": [[59, "c.PyType_FromMetaclass"]], "pytype_frommoduleandspec (c function)": [[59, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[59, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[59, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[59, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[59, "c.PyType_GenericNew"]], "pytype_getflags (c function)": [[59, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[59, "c.PyType_GetModule"]], "pytype_getmodulebydef (c function)": [[59, "c.PyType_GetModuleByDef"]], "pytype_getmodulestate (c function)": [[59, "c.PyType_GetModuleState"]], "pytype_getname (c function)": [[59, "c.PyType_GetName"]], "pytype_getqualname (c function)": [[59, "c.PyType_GetQualName"]], "pytype_getslot (c function)": [[59, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[59, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[59, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[59, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[59, "c.PyType_Modified"]], "pytype_ready (c function)": [[59, "c.PyType_Ready"]], "pytype_slot (c type)": [[59, "c.PyType_Slot"]], "pytype_slot.pytype_slot.pfunc (c member)": [[59, "c.PyType_Slot.PyType_Slot.pfunc"]], "pytype_slot.pytype_slot.slot (c member)": [[59, "c.PyType_Slot.PyType_Slot.slot"]], "pytype_spec (c type)": [[59, "c.PyType_Spec"]], "pytype_spec.pytype_spec.basicsize (c member)": [[59, "c.PyType_Spec.PyType_Spec.basicsize"]], "pytype_spec.pytype_spec.flags (c member)": [[59, "c.PyType_Spec.PyType_Spec.flags"]], "pytype_spec.pytype_spec.itemsize (c member)": [[59, "c.PyType_Spec.PyType_Spec.itemsize"]], "pytype_spec.pytype_spec.name (c member)": [[59, "c.PyType_Spec.PyType_Spec.name"]], "pytype_spec.pytype_spec.slots (c member)": [[59, "c.PyType_Spec.PyType_Spec.slots"]], "pytype_type (c var)": [[59, "c.PyType_Type"]], "pytype_watch (c function)": [[59, "c.PyType_Watch"]], "pytype_watchcallback (c type)": [[59, "c.PyType_WatchCallback"]], "py_genericalias (c function)": [[60, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[60, "c.Py_GenericAliasType"]], "pep 442": [[61, "index-5"], [73, "index-2"], [226, "index-0"], [476, "index-15"], [476, "index-16"], [476, "index-45"], [476, "index-46"], [481, "index-20"], [482, "index-170"]], "pep 634": [[61, "index-3"], [61, "index-4"], [110, "index-1"], [426, "index-19"], [426, "index-25"], [427, "index-105"], [471, "index-0"], [471, "index-14"], [482, "index-16"], [482, "index-59"], [482, "index-71"]], "pyasyncmethods (c type)": [[61, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[61, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[61, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[61, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[61, "c.PyAsyncMethods.am_send"]], "pybufferprocs (c type)": [[61, "c.PyBufferProcs"]], "pybufferprocs.bf_getbuffer (c member)": [[61, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[61, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[61, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[61, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[61, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[61, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[61, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[61, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[61, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[61, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[61, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[61, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[61, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[61, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[61, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[61, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[61, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[61, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[61, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[61, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[61, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[61, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[61, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[61, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[61, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[61, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[61, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[61, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[61, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[61, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[61, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[61, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[61, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[61, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[61, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[61, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[61, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[61, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[61, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[61, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[61, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[61, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[61, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[61, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[61, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[61, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[61, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[61, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[61, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[61, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[61, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[61, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[61, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[61, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[61, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[61, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[61, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[61, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[61, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[61, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[61, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[61, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[61, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[61, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[61, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[61, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[61, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[61, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[61, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[61, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[61, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[61, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[61, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[61, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[61, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[61, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[61, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[61, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[61, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[61, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[61, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[61, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[61, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[61, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[61, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[61, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[61, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[61, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[61, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[61, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[61, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[61, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[61, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[61, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_richcompare.py_return_richcompare (c macro)": [[61, "c.PyTypeObject.tp_richcompare.Py_RETURN_RICHCOMPARE"]], "pytypeobject.tp_setattr (c member)": [[61, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[61, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[61, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[61, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[61, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[61, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[61, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[61, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_weaklist (c member)": [[61, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[61, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[61, "c.PyVarObject.ob_size"]], "py_tpflags_basetype (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_list_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_managed_dict (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_MANAGED_DICT"]], "py_tpflags_managed_weakref (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_MANAGED_WEAKREF"]], "py_tpflags_mapping (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_READY"]], "py_tpflags_readying (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_READYING"]], "py_tpflags_sequence (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (\u5167\u5efa\u8b8a\u6578)": [[61, "Py_TPFLAGS_UNICODE_SUBCLASS"]], "allocfunc (c type)": [[61, "c.allocfunc"]], "binaryfunc (c type)": [[61, "c.binaryfunc"]], "descrgetfunc (c type)": [[61, "c.descrgetfunc"]], "descrsetfunc (c type)": [[61, "c.descrsetfunc"]], "destructor (c type)": [[61, "c.destructor"]], "freefunc (c type)": [[61, "c.freefunc"]], "getattrfunc (c type)": [[61, "c.getattrfunc"]], "getattrofunc (c type)": [[61, "c.getattrofunc"]], "getbufferproc (c type)": [[61, "c.getbufferproc"]], "getiterfunc (c type)": [[61, "c.getiterfunc"]], "hashfunc (c type)": [[61, "c.hashfunc"]], "initproc (c type)": [[61, "c.initproc"]], "iternextfunc (c type)": [[61, "c.iternextfunc"]], "lenfunc (c type)": [[61, "c.lenfunc"]], "newfunc (c type)": [[61, "c.newfunc"]], "objobjargproc (c type)": [[61, "c.objobjargproc"]], "objobjproc (c type)": [[61, "c.objobjproc"]], "releasebufferproc (c type)": [[61, "c.releasebufferproc"]], "reprfunc (c type)": [[61, "c.reprfunc"]], "richcmpfunc (c type)": [[61, "c.richcmpfunc"]], "sendfunc (c type)": [[61, "c.sendfunc"]], "setattrfunc (c type)": [[61, "c.setattrfunc"]], "setattrofunc (c type)": [[61, "c.setattrofunc"]], "ssizeargfunc (c type)": [[61, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[61, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[61, "c.ternaryfunc"]], "unaryfunc (c type)": [[61, "c.unaryfunc"]], "pep 383": [[62, "index-2"], [62, "index-3"], [62, "index-4"], [157, "index-2"], [337, "index-1"], [482, "index-22"]], "pep 393": [[62, "index-0"], [157, "index-5"], [352, "index-19"], [471, "index-37"], [475, "index-30"], [475, "index-32"], [475, "index-33"], [475, "index-34"], [475, "index-38"], [475, "index-6"], [475, "index-7"], [475, "index-8"], [481, "index-25"], [481, "index-26"], [482, "index-57"]], "pep 623": [[62, "index-1"], [471, "index-10"], [473, "index-0"], [473, "index-1"], [473, "index-6"], [482, "index-25"], [482, "index-70"], [482, "index-72"]], "pyasciiobject (c type)": [[62, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[62, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[62, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[62, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[62, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[62, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[62, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[62, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[62, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_asasciistring (c function)": [[62, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[62, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[62, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[62, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[62, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[62, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[62, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[62, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[62, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[62, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[62, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[62, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[62, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicodeescapestring (c function)": [[62, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[62, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[62, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[62, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[62, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[62, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[62, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[62, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[62, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[62, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[62, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[62, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[62, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[62, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[62, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[62, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[62, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[62, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[62, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[62, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[62, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[62, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[62, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[62, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[62, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[62, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[62, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[62, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[62, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[62, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[62, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[62, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encodecodepage (c function)": [[62, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[62, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelocale (c function)": [[62, "c.PyUnicode_EncodeLocale"]], "pyunicode_fsconverter (c function)": [[62, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[62, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[62, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[62, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[62, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[62, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[62, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[62, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[62, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[62, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[62, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[62, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[62, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromwidechar (c function)": [[62, "c.PyUnicode_FromWideChar"]], "pyunicode_get_length (c function)": [[62, "c.PyUnicode_GET_LENGTH"]], "pyunicode_getlength (c function)": [[62, "c.PyUnicode_GetLength"]], "pyunicode_internfromstring (c function)": [[62, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[62, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[62, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[62, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[62, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c function)": [[62, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[62, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[62, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[62, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[62, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[62, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[62, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[62, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[62, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[62, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[62, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[62, "c.PyUnicode_Tailmatch"]], "pyunicode_translate (c function)": [[62, "c.PyUnicode_Translate"]], "pyunicode_type (c var)": [[62, "c.PyUnicode_Type"]], "pyunicode_write (c function)": [[62, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[62, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[62, "c.Py_UCS1"]], "py_ucs2 (c type)": [[62, "c.Py_UCS2"]], "py_ucs4 (c type)": [[62, "c.Py_UCS4"]], "py_unicode (c type)": [[62, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[62, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[62, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[62, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[62, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[62, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[62, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[62, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[62, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[62, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[62, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[62, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c function)": [[62, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c function)": [[62, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c function)": [[62, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c function)": [[62, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[62, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[62, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[62, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[62, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[62, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[62, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[64, "c.CO_FUTURE_DIVISION"]], "pep 238": [[64, "index-3"], [85, "index-93"], [111, "index-2"], [463, "index-11"], [463, "index-12"], [463, "index-13"], [469, "index-2"]], "pycompilerflags (c struct)": [[64, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[64, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[64, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[64, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[64, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[64, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[64, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[64, "c.PyEval_MergeCompilerFlags"]], "pyos_inputhook (c var)": [[64, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[64, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[64, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[64, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[64, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[64, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[64, "c.PyRun_File"]], "pyrun_fileex (c function)": [[64, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[64, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[64, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[64, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[64, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[64, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[64, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[64, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[64, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[64, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[64, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[64, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[64, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[64, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[64, "c.Py_BytesMain"]], "py_compilestring (c function)": [[64, "c.Py_CompileString"]], "py_compilestring()": [[64, "index-0"], [64, "index-1"], [64, "index-2"]], "py_compilestringexflags (c function)": [[64, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[64, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[64, "c.Py_CompileStringObject"]], "py_main (c function)": [[64, "c.Py_Main"]], "py_eval_input (c var)": [[64, "c.Py_eval_input"]], "py_file_input (c var)": [[64, "c.Py_file_input"]], "py_single_input (c var)": [[64, "c.Py_single_input"]], "pyweakref_check (c function)": [[65, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[65, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[65, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[65, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[65, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[65, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[65, "c.PyWeakref_NewRef"]], "pep 3101": [[66, "index-23"], [345, "index-0"], [345, "index-1"], [467, "index-9"], [469, "index-23"], [469, "index-24"], [483, "index-23"]], "rfc": [[66, "index-0"], [98, "index-0"], [99, "index-0"], [99, "index-1"], [99, "index-2"], [99, "index-3"], [99, "index-4"], [99, "index-5"], [106, "index-1"], [106, "index-2"], [106, "index-5"], [125, "index-3"], [125, "index-4"], [143, "index-10"], [143, "index-11"], [143, "index-12"], [143, "index-15"], [143, "index-16"], [143, "index-3"], [143, "index-4"], [143, "index-5"], [143, "index-6"], [143, "index-7"], [143, "index-8"], [143, "index-9"], [146, "index-1"], [146, "index-2"], [146, "index-3"], [157, "index-10"], [157, "index-11"], [157, "index-12"], [157, "index-13"], [157, "index-14"], [157, "index-6"], [157, "index-7"], [157, "index-8"], [157, "index-9"], [174, "index-1"], [193, "index-0"], [193, "index-1"], [193, "index-2"], [193, "index-3"], [193, "index-4"], [193, "index-5"], [193, "index-6"], [193, "index-7"], [195, "index-0"], [195, "index-1"], [195, "index-10"], [195, "index-11"], [195, "index-2"], [195, "index-3"], [195, "index-4"], [195, "index-5"], [195, "index-6"], [195, "index-7"], [195, "index-8"], [195, "index-9"], [196, "index-0"], [198, "index-0"], [199, "index-0"], [200, "index-0"], [200, "index-1"], [201, "index-0"], [201, "index-1"], [201, "index-10"], [201, "index-11"], [201, "index-12"], [201, "index-13"], [201, "index-2"], [201, "index-3"], [201, "index-4"], [201, "index-5"], [201, "index-6"], [201, "index-7"], [201, "index-8"], [201, "index-9"], [202, "index-0"], [202, "index-1"], [202, "index-10"], [202, "index-11"], [202, "index-12"], [202, "index-13"], [202, "index-14"], [202, "index-2"], [202, "index-3"], [202, "index-4"], [202, "index-5"], [202, "index-6"], [202, "index-7"], [202, "index-8"], [202, "index-9"], [204, "index-0"], [204, "index-1"], [204, "index-10"], [204, "index-2"], [204, "index-3"], [204, "index-4"], [204, "index-5"], [204, "index-6"], [204, "index-7"], [204, "index-8"], [204, "index-9"], [206, "index-0"], [206, "index-1"], [207, "index-0"], [207, "index-1"], [207, "index-2"], [207, "index-3"], [207, "index-4"], [207, "index-5"], [207, "index-6"], [207, "index-7"], [207, "index-8"], [207, "index-9"], [208, "index-0"], [208, "index-1"], [208, "index-10"], [208, "index-2"], [208, "index-3"], [208, "index-4"], [208, "index-5"], [208, "index-6"], [208, "index-7"], [208, "index-8"], [208, "index-9"], [222, "index-1"], [222, "index-2"], [222, "index-3"], [222, "index-4"], [222, "index-5"], [222, "index-6"], [229, "index-9"], [234, "index-1"], [234, "index-3"], [234, "index-5"], [236, "index-2"], [240, "index-147"], [240, "index-148"], [240, "index-149"], [240, "index-150"], [240, "index-151"], [240, "index-152"], [240, "index-153"], [240, "index-154"], [240, "index-155"], [240, "index-156"], [240, "index-157"], [240, "index-158"], [240, "index-159"], [240, "index-160"], [240, "index-161"], [240, "index-162"], [240, "index-163"], [240, "index-164"], [240, "index-165"], [240, "index-166"], [240, "index-167"], [240, "index-168"], [240, "index-169"], [240, "index-170"], [240, "index-171"], [240, "index-172"], [240, "index-173"], [240, "index-174"], [240, "index-175"], [240, "index-176"], [240, "index-177"], [240, "index-178"], [240, "index-179"], [240, "index-180"], [240, "index-181"], [240, "index-182"], [240, "index-183"], [240, "index-184"], [240, "index-185"], [240, "index-186"], [240, "index-187"], [240, "index-188"], [240, "index-189"], [240, "index-190"], [240, "index-191"], [240, "index-192"], [240, "index-193"], [240, "index-194"], [240, "index-195"], [240, "index-196"], [240, "index-197"], [240, "index-198"], [240, "index-199"], [240, "index-200"], [240, "index-201"], [240, "index-202"], [240, "index-203"], [240, "index-204"], [240, "index-205"], [240, "index-206"], [240, "index-207"], [240, "index-208"], [240, "index-209"], [240, "index-210"], [240, "index-211"], [240, "index-212"], [240, "index-213"], [240, "index-214"], [240, "index-215"], [240, "index-216"], [240, "index-63"], [240, "index-64"], [240, "index-65"], [240, "index-66"], [240, "index-67"], [240, "index-76"], [241, "index-2"], [241, "index-3"], [241, "index-4"], [242, "index-0"], [242, "index-1"], [242, "index-10"], [242, "index-11"], [242, "index-12"], [242, "index-13"], [242, "index-14"], [242, "index-15"], [242, "index-16"], [242, "index-17"], [242, "index-18"], [242, "index-19"], [242, "index-2"], [242, "index-20"], [242, "index-21"], [242, "index-22"], [242, "index-23"], [242, "index-24"], [242, "index-25"], [242, "index-3"], [242, "index-4"], [242, "index-5"], [242, "index-6"], [242, "index-7"], [242, "index-8"], [242, "index-9"], [243, "index-0"], [243, "index-1"], [243, "index-2"], [243, "index-3"], [243, "index-4"], [243, "index-5"], [243, "index-6"], [243, "index-7"], [244, "index-1"], [244, "index-2"], [247, "index-1"], [247, "index-2"], [247, "index-3"], [247, "index-4"], [247, "index-5"], [247, "index-6"], [247, "index-7"], [247, "index-8"], [254, "index-0"], [256, "index-0"], [259, "index-0"], [259, "index-1"], [259, "index-10"], [259, "index-11"], [259, "index-12"], [259, "index-13"], [259, "index-2"], [259, "index-3"], [259, "index-4"], [259, "index-5"], [259, "index-6"], [259, "index-7"], [259, "index-8"], [259, "index-9"], [262, "index-0"], [262, "index-1"], [262, "index-2"], [262, "index-3"], [262, "index-4"], [266, "index-4"], [266, "index-5"], [269, "index-0"], [271, "index-0"], [272, "index-1"], [272, "index-2"], [288, "index-10"], [288, "index-2"], [288, "index-3"], [288, "index-4"], [288, "index-5"], [288, "index-6"], [288, "index-7"], [288, "index-8"], [288, "index-9"], [305, "index-1"], [305, "index-2"], [305, "index-3"], [305, "index-4"], [305, "index-5"], [305, "index-6"], [317, "index-1"], [317, "index-2"], [317, "index-3"], [317, "index-4"], [327, "index-1"], [335, "index-1"], [335, "index-10"], [335, "index-11"], [335, "index-12"], [335, "index-2"], [335, "index-3"], [335, "index-4"], [335, "index-5"], [335, "index-6"], [335, "index-7"], [335, "index-8"], [335, "index-9"], [337, "index-15"], [337, "index-3"], [341, "index-10"], [341, "index-11"], [341, "index-12"], [341, "index-13"], [341, "index-16"], [341, "index-17"], [341, "index-18"], [341, "index-19"], [341, "index-20"], [341, "index-21"], [341, "index-22"], [341, "index-5"], [341, "index-6"], [341, "index-7"], [341, "index-8"], [341, "index-9"], [346, "index-0"], [346, "index-1"], [358, "index-2"], [358, "index-3"], [365, "index-10"], [365, "index-19"], [365, "index-20"], [365, "index-21"], [365, "index-22"], [392, "index-2"], [393, "index-1"], [393, "index-10"], [393, "index-11"], [393, "index-12"], [393, "index-2"], [393, "index-3"], [393, "index-4"], [393, "index-5"], [393, "index-6"], [393, "index-7"], [393, "index-8"], [393, "index-9"], [394, "index-10"], [394, "index-19"], [394, "index-20"], [394, "index-21"], [394, "index-5"], [394, "index-6"], [394, "index-7"], [394, "index-8"], [397, "index-0"], [397, "index-1"], [397, "index-10"], [397, "index-11"], [397, "index-2"], [397, "index-3"], [397, "index-4"], [406, "index-10"], [406, "index-5"], [407, "index-2"], [407, "index-3"], [407, "index-4"], [407, "index-5"], [418, "index-0"], [450, "index-3"], [463, "index-17"], [463, "index-18"], [463, "index-19"], [463, "index-20"], [463, "index-21"], [465, "index-18"], [466, "index-22"], [466, "index-23"], [467, "index-22"], [467, "index-23"], [468, "index-10"], [468, "index-11"], [468, "index-13"], [474, "index-11"], [474, "index-12"], [474, "index-13"], [474, "index-7"], [474, "index-8"], [475, "index-26"], [475, "index-27"], [477, "index-33"], [477, "index-34"], [477, "index-35"], [477, "index-36"], [477, "index-37"], [477, "index-38"], [477, "index-39"], [477, "index-40"], [477, "index-41"], [477, "index-42"], [477, "index-43"], [477, "index-44"], [477, "index-45"], [477, "index-46"], [477, "index-53"], [479, "index-34"], [479, "index-35"], [481, "index-22"], [482, "index-138"], [482, "index-179"], [482, "index-4"], [482, "index-45"], [482, "index-52"], [482, "index-54"]], "rfc 4122": [[66, "index-0"], [254, "index-0"], [256, "index-0"], [397, "index-0"], [397, "index-1"], [397, "index-10"], [397, "index-11"], [397, "index-2"], [397, "index-3"], [397, "index-4"], [466, "index-22"], [466, "index-23"]], "(see python package index (pypi))": [[68, "index-1"]], "pep 427": [[68, "index-0"]], "pypi": [[68, "index-1"]], "python package index (pypi)": [[68, "index-1"]], "pyinit_modulename (c function)": [[69, "c.PyInit_modulename"]], "philbrick, geoff": [[71, "index-4"]], "pyarg_parsetuple()": [[71, "index-2"]], "pyarg_parsetupleandkeywords()": [[71, "index-3"]], "pyobject_callobject()": [[71, "index-1"]], "py_audit_read": [[73, "index-4"]], "pyerr_fetch()": [[73, "index-1"]], "pyerr_restore()": [[73, "index-1"]], "readonly": [[73, "index-4"]], "read_restricted": [[73, "index-4"]], "restricted": [[73, "index-4"], [428, "index-11"]], "write_restricted": [[73, "index-4"]], "deallocation": [[73, "index-0"]], "deallocation, object": [[73, "index-0"]], "finalization": [[73, "index-0"]], "finalization, of objects": [[73, "index-0"]], "object representation": [[73, "index-3"]], "pep 572": [[76, "index-2"], [426, "index-24"], [429, "index-21"], [429, "index-87"], [480, "index-24"], [480, "index-31"], [482, "index-154"], [482, "index-167"], [482, "index-177"]], "pep 5": [[78, "index-8"], [462, "index-6"]], "pep 6": [[78, "index-6"]], "pep 602": [[78, "index-7"], [481, "index-10"]], "tcl_library": [[79, "index-4"]], "tk_library": [[79, "index-5"]], "pep 8": [[83, "index-0"], [83, "index-2"], [84, "index-2"], [88, "index-0"], [224, "index-9"], [429, "index-79"], [440, "index-18"], [456, "index-0"], [469, "index-21"], [482, "index-202"], [482, "index-264"]], "argument": [[83, "index-1"], [426, "index-31"], [427, "index-32"], [429, "index-47"]], "difference from argument": [[83, "index-1"]], "difference from parameter": [[83, "index-1"]], "parameter": [[83, "index-1"], [426, "index-27"], [426, "index-31"], [429, "index-48"]], "...": [[85, "term-..."], [167, "index-0"], [192, "index-0"], [192, "index-3"], [307, "index-0"], [321, "index-0"], [344, "index-65"], [352, "index-27"], [363, "index-0"], [427, "index-8"]], "2to3": [[85, "term-2to3"]], ">>>": [[85, "term-0"], [192, "index-0"], [352, "index-27"]], "bdfl": [[85, "term-BDFL"]], "cpython": [[85, "term-CPython"]], "eafp": [[85, "term-EAFP"]], "gil": [[85, "term-GIL"]], "idle": [[85, "term-IDLE"], [246, "index-0"]], "lbyl": [[85, "term-LBYL"]], "mro": [[85, "term-MRO"]], "pep": [[85, "term-PEP"]], "pep 1": [[85, "index-103"], [461, "index-0"], [461, "index-1"]], "pep 278": [[85, "index-109"], [464, "index-9"]], "pep 302": [[85, "index-90"], [85, "index-99"], [224, "index-13"], [249, "index-7"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-15"], [250, "index-17"], [250, "index-2"], [265, "index-1"], [302, "index-0"], [302, "index-1"], [302, "index-10"], [302, "index-11"], [302, "index-12"], [302, "index-2"], [302, "index-3"], [302, "index-4"], [302, "index-5"], [302, "index-7"], [302, "index-8"], [324, "index-1"], [352, "index-25"], [352, "index-26"], [422, "index-2"], [431, "index-1"], [431, "index-18"], [464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-6"], [466, "index-21"], [470, "index-2"], [475, "index-20"], [475, "index-21"], [475, "index-37"]], "pep 3116": [[85, "index-110"], [467, "index-14"], [470, "index-3"]], "pep 3155": [[85, "index-106"], [475, "index-15"]], "pep 343": [[85, "index-86"], [111, "index-4"], [168, "index-2"], [426, "index-17"], [427, "index-104"], [466, "index-10"], [466, "index-14"], [467, "index-3"]], "pep 362": [[85, "index-101"], [85, "index-79"], [255, "index-0"], [475, "index-17"]], "pep 411": [[85, "index-105"], [352, "index-13"], [352, "index-14"], [352, "index-31"], [352, "index-32"]], "pep 420": [[85, "index-100"], [85, "index-104"], [85, "index-91"], [250, "index-5"], [431, "index-14"], [431, "index-15"], [431, "index-19"], [431, "index-2"], [431, "index-20"], [431, "index-21"], [431, "index-6"], [475, "index-2"], [475, "index-3"], [482, "index-244"], [482, "index-251"]], "pep 443": [[85, "index-95"], [476, "index-11"], [476, "index-36"]], "pep 483": [[85, "index-96"], [385, "index-1"], [385, "index-3"], [477, "index-12"]], "pep 484": [[85, "index-107"], [85, "index-108"], [85, "index-111"], [85, "index-77"], [85, "index-94"], [85, "index-97"], [120, "index-2"], [120, "index-4"], [120, "index-5"], [344, "index-56"], [385, "index-0"], [385, "index-2"], [385, "index-23"], [385, "index-24"], [385, "index-34"], [385, "index-42"], [385, "index-85"], [385, "index-98"], [426, "index-37"], [427, "index-92"], [435, "index-17"], [440, "index-17"], [471, "index-18"], [471, "index-20"], [471, "index-22"], [472, "index-11"], [472, "index-12"], [477, "index-10"], [477, "index-11"], [478, "index-5"], [479, "index-20"], [480, "index-10"], [480, "index-12"]], "pep 492": [[85, "index-80"], [85, "index-81"], [85, "index-83"], [85, "index-84"], [85, "index-85"], [85, "index-87"], [85, "index-88"], [160, "index-3"], [255, "index-1"], [255, "index-2"], [426, "index-50"], [427, "index-107"], [429, "index-30"], [477, "index-1"], [477, "index-2"], [477, "index-49"], [477, "index-54"], [478, "index-35"], [478, "index-9"], [482, "index-207"], [482, "index-241"], [482, "index-252"], [482, "index-256"]], "pep 498": [[85, "index-89"], [434, "index-26"], [478, "index-3"], [478, "index-4"], [482, "index-248"]], "pep 519": [[85, "index-102"], [478, "index-16"], [482, "index-232"], [482, "index-237"], [482, "index-238"], [482, "index-239"], [482, "index-240"], [482, "index-243"]], "pep 525": [[85, "index-82"], [160, "index-2"], [255, "index-3"], [352, "index-30"], [352, "index-41"], [429, "index-29"], [478, "index-10"], [482, "index-225"]], "pep 526": [[85, "index-112"], [85, "index-78"], [120, "index-3"], [120, "index-6"], [180, "index-1"], [180, "index-2"], [385, "index-37"], [385, "index-4"], [385, "index-46"], [385, "index-47"], [426, "index-38"], [435, "index-16"], [471, "index-26"], [478, "index-33"], [478, "index-6"], [479, "index-1"], [480, "index-11"], [482, "index-226"]], "pep 585": [[85, "index-98"], [160, "index-0"], [344, "index-57"], [385, "index-26"], [385, "index-30"], [385, "index-31"], [385, "index-35"], [385, "index-50"], [385, "index-51"], [385, "index-52"], [385, "index-53"], [385, "index-54"], [385, "index-55"], [385, "index-56"], [385, "index-57"], [385, "index-58"], [385, "index-59"], [385, "index-6"], [385, "index-60"], [385, "index-61"], [385, "index-62"], [385, "index-63"], [385, "index-64"], [385, "index-65"], [385, "index-66"], [385, "index-67"], [385, "index-68"], [385, "index-69"], [385, "index-70"], [385, "index-71"], [385, "index-72"], [385, "index-73"], [385, "index-74"], [385, "index-75"], [385, "index-76"], [385, "index-77"], [385, "index-78"], [385, "index-79"], [385, "index-80"], [385, "index-81"], [385, "index-82"], [385, "index-83"], [385, "index-89"], [385, "index-91"], [481, "index-13"], [481, "index-2"], [482, "index-42"], [482, "index-46"]], "python 3000": [[85, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[85, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[85, "term-Zen-of-Python"]], "__future__": [[85, "term-__future__"], [111, "module-__future__"], [435, "index-40"]], "__slots__": [[85, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[85, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[85, "term-annotation"]], "argument\uff08\u5f15\u6578\uff09": [[85, "term-argument"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[85, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[85, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[85, "term-asynchronous-generator"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[85, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[85, "term-asynchronous-iterator"]], "attribute\uff08\u5c6c\u6027\uff09": [[85, "term-attribute"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[85, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u5236\u6a94\u6848\uff09": [[85, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[85, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[85, "term-bytecode"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[85, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[85, "term-callable"]], "callback\uff08\u56de\u547c\uff09": [[85, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[85, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[85, "term-class"]], "complex number\uff08\u8907\u6578\uff09": [[85, "term-complex-number"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[85, "term-context-manager"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[85, "term-context-variable"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[85, "term-contiguous"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[85, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[85, "term-coroutine"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[85, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[85, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[85, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[85, "term-dictionary-view"]], "dictionary\uff08\u5b57\u5178\uff09": [[85, "term-dictionary"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[85, "term-docstring"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[85, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[85, "term-expression"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[85, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[85, "term-f-string"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[85, "term-file-object"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[85, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[85, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[85, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[85, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[85, "term-function-annotation"]], "function\uff08\u51fd\u5f0f\uff09": [[85, "term-function"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[85, "term-garbage-collection"]], "generator": [[85, "index-19"], [427, "index-37"], [427, "index-57"], [429, "index-22"], [429, "index-23"], [429, "index-31"], [435, "index-26"]], "generator expression": [[85, "index-20"], [429, "index-22"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[85, "term-generator-expression"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[85, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[85, "term-generator"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[85, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[85, "term-generic-type"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[85, "term-global-interpreter-lock"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[85, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[85, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[85, "term-immutable"]], "import path\uff08\u532f\u5165\u8def\u5f91\uff09": [[85, "term-import-path"]], "importer\uff08\u532f\u5165\u5668\uff09": [[85, "term-importer"]], "importing\uff08\u532f\u5165\uff09": [[85, "term-importing"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[85, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[85, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[85, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[85, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[85, "term-iterator"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[85, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[85, "term-keyword-argument"]], "lambda": [[85, "term-lambda"], [426, "index-35"], [429, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[85, "term-list-comprehension"]], "list\uff08\u4e32\u5217\uff09": [[85, "term-list"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[85, "term-loader"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[85, "term-locale-encoding"]], "magic": [[85, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[85, "term-magic-method"]], "mapping\uff08\u5c0d\u6620\uff09": [[85, "term-mapping"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[85, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[85, "term-metaclass"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[85, "term-method-resolution-order"]], "method\uff08\u65b9\u6cd5\uff09": [[85, "term-method"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[85, "term-module-spec"]], "module\uff08\u6a21\u7d44\uff09": [[85, "term-module"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[85, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[85, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[85, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[85, "term-namespace"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[85, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[85, "term-new-style-class"]], "object\uff08\u7269\u4ef6\uff09": [[85, "term-object"]], "package\uff08\u5957\u4ef6\uff09": [[85, "term-package"]], "parameter\uff08\u53c3\u6578\uff09": [[85, "term-parameter"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[85, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[85, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[85, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[85, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[85, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[85, "term-portion"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[85, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[85, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[85, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[85, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[85, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[85, "term-regular-package"]], "sequence\uff08\u5e8f\u5217\uff09": [[85, "term-sequence"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[85, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[85, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[85, "term-slice"]], "special": [[85, "index-34"], [427, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[85, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[85, "term-statement"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[85, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[85, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[85, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[85, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[85, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[85, "term-type-hint"]], "type\uff08\u578b\u5225\uff09": [[85, "term-type"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[85, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[85, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[85, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[85, "term-virtual-machine"]], "pep 604": [[86, "index-0"], [344, "index-59"], [385, "index-11"], [471, "index-41"], [471, "index-5"], [482, "index-118"], [482, "index-77"]], "pep 573": [[88, "index-3"], [481, "index-23"], [481, "index-6"], [482, "index-120"], [482, "index-125"]], "pep 289": [[93, "index-1"], [465, "index-15"], [465, "index-2"]], "pep 342": [[93, "index-0"], [93, "index-2"], [160, "index-1"], [429, "index-27"], [466, "index-11"], [466, "index-31"], [466, "index-9"]], "rfc 3339": [[98, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[98, "logging.logging.Formatter.__init__"]], "rfc 3164": [[99, "index-5"]], "rfc 5424": [[99, "index-0"], [99, "index-2"], [99, "index-3"], [99, "index-4"], [269, "index-0"]], "rfc 5424#section-6": [[99, "index-1"]], "pep 263": [[105, "index-0"], [250, "index-1"], [377, "index-0"], [377, "index-1"], [464, "index-3"], [466, "index-19"], [482, "index-41"]], "rfc 2616": [[106, "index-1"], [106, "index-2"], [106, "index-5"], [392, "index-2"], [394, "index-10"], [394, "index-6"], [394, "index-7"], [406, "index-10"], [406, "index-5"], [474, "index-7"]], "http_proxy": [[106, "index-3"], [394, "index-18"], [394, "index-9"]], "cflags": [[108, "index-10"], [108, "index-9"], [455, "envvar-CFLAGS"], [455, "index-11"], [455, "index-12"], [455, "index-13"], [455, "index-14"], [455, "index-17"], [464, "index-25"]], "home": [[108, "index-4"], [108, "index-5"], [294, "index-3"], [294, "index-8"], [368, "index-1"], [480, "index-14"], [480, "index-21"], [482, "index-162"], [482, "index-163"]], "homedrive": [[108, "index-7"], [294, "index-6"]], "homepath": [[108, "index-8"], [294, "index-5"]], "userprofile": [[108, "index-6"], [294, "index-4"], [480, "index-13"], [480, "index-20"], [482, "index-161"]], "pep 617": [[110, "index-0"], [430, "index-0"], [471, "index-13"], [472, "index-30"], [481, "index-14"], [481, "index-19"], [481, "index-7"], [482, "index-134"], [482, "index-51"]], "apply (2to3 fixer)": [[110, "to3fixer-apply"]], "asserts (2to3 fixer)": [[110, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[110, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[110, "to3fixer-buffer"]], "dict (2to3 fixer)": [[110, "to3fixer-dict"]], "except (2to3 fixer)": [[110, "to3fixer-except"]], "exec (2to3 fixer)": [[110, "to3fixer-exec"]], "execfile (2to3 fixer)": [[110, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[110, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[110, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[110, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[110, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[110, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[110, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[110, "to3fixer-idioms"]], "import (2to3 fixer)": [[110, "to3fixer-import"]], "imports (2to3 fixer)": [[110, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[110, "to3fixer-imports2"]], "input (2to3 fixer)": [[110, "to3fixer-input"]], "intern (2to3 fixer)": [[110, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[110, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[110, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[110, "to3fixer-itertools_imports"]], "lib2to3": [[110, "module-lib2to3"]], "long (2to3 fixer)": [[110, "to3fixer-long"]], "map (2to3 fixer)": [[110, "to3fixer-map"]], "metaclass (2to3 fixer)": [[110, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[110, "to3fixer-methodattrs"]], "ne (2to3 fixer)": [[110, "to3fixer-ne"]], "next (2to3 fixer)": [[110, "to3fixer-next"]], "nonzero (2to3 fixer)": [[110, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[110, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[110, "to3fixer-operator"]], "paren (2to3 fixer)": [[110, "to3fixer-paren"]], "print (2to3 fixer)": [[110, "to3fixer-print"]], "raise (2to3 fixer)": [[110, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[110, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[110, "to3fixer-reduce"]], "reload (2to3 fixer)": [[110, "to3fixer-reload"]], "renames (2to3 fixer)": [[110, "to3fixer-renames"]], "repr (2to3 fixer)": [[110, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[110, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[110, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[110, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[110, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[110, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[110, "to3fixer-types"]], "unicode (2to3 fixer)": [[110, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[110, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[110, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[110, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[110, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[110, "to3fixer-zip"]], "pep 227": [[111, "index-0"], [462, "index-2"], [463, "index-16"]], "pep 255": [[111, "index-1"], [429, "index-26"], [463, "index-8"], [463, "index-9"], [464, "index-1"], [464, "index-2"]], "pep 3105": [[111, "index-5"], [467, "index-10"], [469, "index-0"]], "pep 3112": [[111, "index-6"], [467, "index-12"]], "pep 328": [[111, "index-3"], [224, "index-14"], [250, "index-3"], [431, "index-23"], [465, "index-10"], [465, "index-17"], [466, "index-5"], [466, "index-6"], [469, "index-16"], [475, "index-36"]], "pep 479": [[111, "index-7"], [212, "index-5"], [212, "index-6"], [477, "index-17"], [477, "index-18"], [479, "index-37"], [482, "index-182"], [482, "index-190"], [482, "index-193"], [482, "index-215"], [482, "index-236"], [482, "index-250"]], "pep 563": [[111, "index-8"], [111, "index-9"], [385, "index-87"], [385, "index-90"], [426, "index-39"], [435, "index-41"], [472, "index-20"], [479, "index-2"], [482, "index-62"], [482, "index-95"]], "pep 649": [[111, "index-10"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.LockType"]], "posix": [[113, "index-1"], [306, "module-posix"], [360, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.allocate_lock"]], "binary semaphores": [[113, "index-0"]], "error": [[113, "thread.error"], [141, "audioop.error"], [146, "binascii.Error"], [166, "configparser.Error"], [170, "copy.Error"], [174, "csv.Error"], [176, "curses.error"], [183, "dbm.dumb.error"], [183, "dbm.error"], [183, "dbm.gnu.error"], [183, "dbm.ndbm.error"], [227, "getopt.error"], [266, "locale.Error"], [271, "mailbox.Error"], [287, "nis.error"], [293, "os.error"], [314, "xml.parsers.expat.error"], [319, "re.error"], [322, "resource.error"], [328, "select.error"], [332, "shutil.Error"], [337, "socket.error"], [340, "sqlite3.Error"], [347, "struct.error"], [349, "sunau.Error"], [396, "uu.Error"], [400, "wave.Error"], [402, "webbrowser.Error"], [407, "xdrlib.Error"], [423, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.interrupt_main"]], "light-weight processes": [[113, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.locked"]], "processes, light-weight": [[113, "index-0"]], "pthreads": [[113, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.release"]], "semaphores, binary": [[113, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.start_new_thread"]], "threads": [[113, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABCMeta"]], "pep 3141": [[114, "index-1"], [289, "index-0"], [467, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.__subclasshook__"]], "abc": [[114, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.update_abstractmethods"]], "a-law": [[115, "index-2"], [141, "index-1"], [336, "index-0"]], "aiff": [[115, "index-0"], [153, "index-0"]], "aiff-c": [[115, "index-0"], [153, "index-0"]], "audio interchange file format": [[115, "index-0"], [153, "index-0"]], "g.722": [[115, "index-2"]], "pep 594#aifc": [[115, "index-4"]], "aifc": [[115, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[115, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.tell"]], "u-law": [[115, "index-2"], [141, "index-1"], [336, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframesraw"]], "* (asterisk)": [[118, "index-1"], [120, "index-1"], [219, "index-2"], [230, "index-1"], [319, "index-3"], [344, "index-13"], [344, "index-35"], [344, "index-45"], [426, "index-32"], [429, "index-49"], [429, "index-65"], [429, "index-93"], [435, "index-37"], [435, "index-6"], [440, "index-3"]], "+ (plus)": [[118, "index-2"], [192, "index-4"], [319, "index-4"], [344, "index-13"], [344, "index-36"], [344, "index-46"], [345, "index-4"], [429, "index-61"], [429, "index-69"]], "? (question mark)": [[118, "index-0"], [120, "index-0"], [155, "index-0"], [157, "index-1"], [219, "index-2"], [230, "index-1"], [319, "index-5"], [340, "index-2"], [347, "index-2"], [347, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentDefaultsHelpFormatter"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentParser"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[118, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.get_default"]], "in argparse module": [[118, "index-0"], [118, "index-1"], [118, "index-2"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.set_defaults"]], "append() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.append"]], "array": [[119, "module-array"], [344, "index-39"], [427, "index-25"]], "array (array \u4e2d\u7684\u985e\u5225)": [[119, "array.array"]], "arrays": [[119, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[119, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[119, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[119, "array.typecodes"]], "--help": [[120, "cmdoption-ast-h"], [233, "cmdoption-gzip-h"], [262, "cmdoption-json.tool-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [366, "cmdoption-timeit-h"], [377, "cmdoption-tokenize-h"], [379, "cmdoption-trace-help"], [420, "cmdoption-zipapp-h"], [454, "cmdoption-help"]], "--include-attributes": [[120, "cmdoption-ast-a"]], "--indent": [[120, "cmdoption-ast-indent"], [262, "cmdoption-json.tool-indent"]], "--mode": [[120, "cmdoption-ast-mode"]], "--no-type-comments": [[120, "cmdoption-ast-no-type-comments"]], "-a": [[120, "cmdoption-ast-a"], [300, "cmdoption-pickletools-a"]], "-h": [[120, "cmdoption-ast-h"], [233, "cmdoption-gzip-h"], [262, "cmdoption-json.tool-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [366, "cmdoption-timeit-h"], [377, "cmdoption-tokenize-h"], [420, "cmdoption-zipapp-h"], [454, "cmdoption-h"]], "-i": [[120, "cmdoption-ast-i"], [162, "cmdoption-compileall-i"], [454, "cmdoption-I"], [454, "cmdoption-i"]], "-m": [[120, "cmdoption-ast-m"], [300, "cmdoption-pickletools-m"], [379, "cmdoption-trace-m"], [420, "cmdoption-zipapp-m"], [454, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Expr"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FunctionDef"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.In"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mod"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Or"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Try"]], "trystar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TryStar"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Tuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arguments"]], "ast": [[120, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[120, "cmdoption-ast-a"], [120, "cmdoption-ast-h"], [120, "cmdoption-ast-i"], [120, "cmdoption-ast-indent"], [120, "cmdoption-ast-m"], [120, "cmdoption-ast-mode"], [120, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_source_segment"]], "in ast grammar": [[120, "index-0"], [120, "index-1"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[120, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[120, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[120, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[120, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[120, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.visit"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.withitem"]], "async_chat (asynchat \u4e2d\u7684\u985e\u5225)": [[121, "asynchat.async_chat"]], "async_chat.ac_in_buffer_size (\u65bc asynchat \u6a21\u7d44\u4e2d)": [[121, "asynchat.async_chat.ac_in_buffer_size"]], "async_chat.ac_out_buffer_size (\u65bc asynchat \u6a21\u7d44\u4e2d)": [[121, "asynchat.async_chat.ac_out_buffer_size"]], "asynchat": [[121, "module-asynchat"]], "close_when_done() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.close_when_done"]], "collect_incoming_data() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.collect_incoming_data"]], "discard_buffers() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.discard_buffers"]], "found_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.found_terminator"]], "get_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.get_terminator"]], "push() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.push"]], "push_with_producer() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.push_with_producer"]], "set_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[121, "asynchat.async_chat.set_terminator"]], "asyncio": [[122, "module-asyncio"]], "pythonasynciodebug": [[124, "index-2"], [125, "index-5"], [187, "index-5"], [454, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.Handle"]], "pep 567": [[125, "index-0"], [125, "index-1"], [125, "index-2"], [128, "index-2"], [169, "index-2"], [479, "index-28"], [479, "index-30"], [482, "index-185"], [482, "index-189"], [482, "index-194"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.ProactorEventLoop"]], "rfc 8305": [[125, "index-3"], [125, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[125, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[125, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[125, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.default_exception_handler"]], "get_context() (asyncio.handle \u7684\u65b9\u6cd5)": [[125, "asyncio.Handle.get_context"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.shutdown_default_executor"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_recv_into"]], "sock_recvfrom() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_recvfrom"]], "sock_recvfrom_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_recvfrom_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_sendfile"]], "sock_sendto() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.sock_sendto"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[125, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[125, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[125, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[125, "asyncio.TimerHandle.when"]], "cancellederror": [[126, "asyncio.CancelledError"], [165, "concurrent.futures.CancelledError"]], "incompletereaderror": [[126, "asyncio.IncompleteReadError"]], "invalidstateerror": [[126, "asyncio.InvalidStateError"], [165, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[126, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[126, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[126, "asyncio.TimeoutError"], [165, "concurrent.futures.TimeoutError"], [212, "TimeoutError"], [283, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[126, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[126, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[126, "asyncio.IncompleteReadError.partial"]], "__init__() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.__init__"]], "__init__() (asyncio.task \u7684\u65b9\u6cd5)": [[127, "asyncio.Task.__init__"]], "_enter_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio._enter_task"]], "_leave_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio._leave_task"]], "_register_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio._register_task"]], "_unregister_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio._unregister_task"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[128, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[131, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[131, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[131, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[131, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[131, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[132, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[132, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[132, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[132, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[132, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[132, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[132, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[132, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[132, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Queue"]], "queueempty": [[133, "asyncio.QueueEmpty"]], "queuefull": [[133, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[133, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[133, "asyncio.Queue.task_done"]], "runner (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.Runner"]], "close() (asyncio.runner \u7684\u65b9\u6cd5)": [[134, "asyncio.Runner.close"]], "get_loop() (asyncio.runner \u7684\u65b9\u6cd5)": [[134, "asyncio.Runner.get_loop"]], "run() (asyncio.runner \u7684\u65b9\u6cd5)": [[134, "asyncio.Runner.run"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.run"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.drain"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.start_server"]], "start_tls() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.start_tls"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[135, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[135, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[136, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[136, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[136, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[136, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[136, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[136, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[136, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[136, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[136, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[136, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[136, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[136, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[136, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[136, "asyncio.subprocess.Process.wait"]], "barrier (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Barrier"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.BoundedSemaphore"]], "brokenbarriererror": [[137, "asyncio.BrokenBarrierError"], [364, "threading.BrokenBarrierError"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Semaphore"]], "abort() (asyncio.barrier \u7684\u65b9\u6cd5)": [[137, "asyncio.Barrier.abort"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[137, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[137, "asyncio.Semaphore.acquire"]], "broken (asyncio.barrier \u7684\u5c6c\u6027)": [[137, "asyncio.Barrier.broken"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[137, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[137, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[137, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[137, "asyncio.Semaphore.locked"]], "n_waiting (asyncio.barrier \u7684\u5c6c\u6027)": [[137, "asyncio.Barrier.n_waiting"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.notify_all"]], "parties (asyncio.barrier \u7684\u5c6c\u6027)": [[137, "asyncio.Barrier.parties"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[137, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[137, "asyncio.Semaphore.release"]], "reset() (asyncio.barrier \u7684\u65b9\u6cd5)": [[137, "asyncio.Barrier.reset"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[137, "asyncio.Event.set"]], "wait() (asyncio.barrier \u7684\u65b9\u6cd5)": [[137, "asyncio.Barrier.wait"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[137, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[137, "asyncio.Condition.wait_for"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Task"]], "taskgroup (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.TaskGroup"]], "timeout (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Timeout"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.cancelled"]], "cancelling() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.cancelling"]], "create_task() (asyncio.taskgroup \u7684\u65b9\u6cd5)": [[138, "asyncio.TaskGroup.create_task"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.done"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.exception"]], "expired() (asyncio.timeout \u7684\u65b9\u6cd5)": [[138, "asyncio.Timeout.expired"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.gather"]], "get_context() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.get_context"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.get_stack"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.remove_done_callback"]], "reschedule() (asyncio.timeout \u7684\u65b9\u6cd5)": [[138, "asyncio.Timeout.reschedule"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.result"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.sleep"]], "timeout() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.timeout"]], "timeout_at() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.timeout_at"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.to_thread"]], "uncancel() (asyncio.task \u7684\u65b9\u6cd5)": [[138, "asyncio.Task.uncancel"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.wait_for"]], "when() (asyncio.timeout \u7684\u65b9\u6cd5)": [[138, "asyncio.Timeout.when"]], "accept() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.accept"]], "asyncore": [[139, "module-asyncore"]], "bind() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.bind"]], "close() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.close"]], "connect() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.connect"]], "create_socket() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.create_socket"]], "dispatcher (asyncore \u4e2d\u7684\u985e\u5225)": [[139, "asyncore.dispatcher"]], "dispatcher_with_send (asyncore \u4e2d\u7684\u985e\u5225)": [[139, "asyncore.dispatcher_with_send"]], "file_dispatcher (asyncore \u4e2d\u7684\u985e\u5225)": [[139, "asyncore.file_dispatcher"]], "file_wrapper (asyncore \u4e2d\u7684\u985e\u5225)": [[139, "asyncore.file_wrapper"]], "handle_accept() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_accept"]], "handle_accepted() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_accepted"]], "handle_close() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_close"]], "handle_connect() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_connect"]], "handle_error() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_error"]], "handle_expt() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_expt"]], "handle_read() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_read"]], "handle_write() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.handle_write"]], "listen() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.listen"]], "loop() (\u65bc asyncore \u6a21\u7d44\u4e2d)": [[139, "asyncore.loop"]], "readable() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.readable"]], "recv() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.recv"]], "send() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.send"]], "writable() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[139, "asyncore.dispatcher.writable"]], "atexit": [[140, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[140, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[140, "atexit.unregister"]], "adpcm, intel/dvi": [[141, "index-1"]], "intel/dvi adpcm": [[141, "index-1"]], "pep 594#audioop": [[141, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.alaw2lin"]], "audioop": [[141, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.ulaw2lin"]], "audit events": [[142, "index-0"]], "mime": [[143, "index-0"], [151, "index-0"], [276, "index-0"], [276, "index-1"], [317, "index-0"]], "rfc 1521": [[143, "index-12"], [317, "index-1"], [317, "index-3"]], "rfc 2045": [[143, "index-10"], [143, "index-4"], [143, "index-5"], [143, "index-9"], [193, "index-3"], [195, "index-4"], [195, "index-5"], [195, "index-6"], [195, "index-9"], [201, "index-4"], [202, "index-10"], [202, "index-9"], [204, "index-6"], [204, "index-7"], [204, "index-8"]], "rfc 4648": [[143, "index-11"], [143, "index-15"], [143, "index-16"], [143, "index-3"], [143, "index-6"], [143, "index-7"], [143, "index-8"], [327, "index-1"], [482, "index-54"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b85encode"]], "base64": [[143, "index-0"], [143, "module-base64"], [146, "index-0"]], "base64 encoding": [[143, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.encodebytes"]], "encoding": [[143, "index-0"], [317, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[144, "bdb.Bdb"]], "bdbquit": [[144, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[144, "bdb.Breakpoint"]], "bdb": [[144, "module-bdb"], [297, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.line"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_return"]], "incomplete": [[146, "binascii.Incomplete"]], "rfc 1522": [[146, "index-3"], [317, "index-2"], [317, "index-4"]], "rfc 3548": [[146, "index-1"], [146, "index-2"], [465, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_hex"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_hex"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_uu"]], "binascii": [[146, "module-binascii"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.hexlify"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.unhexlify"]], "uu": [[146, "index-0"], [396, "module-uu"]], "bisect": [[147, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort_right"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2File"]], "bz2": [[149, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.eof"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.peek"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.unused_data"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.Calendar"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.HTMLCalendar"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.LocaleTextCalendar"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.MONDAY"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.SATURDAY"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.SUNDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.THURSDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.TextCalendar"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.WEDNESDAY"]], "calendar": [[150, "module-calendar"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.formatmonth"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.leapdays"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.timegm"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.weekheader"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardayscalendar"]], "cgi": [[151, "index-0"], [151, "index-2"], [151, "index-5"], [151, "module-cgi"], [152, "index-0"]], "common gateway interface": [[151, "index-0"]], "http": [[151, "index-0"], [240, "index-0"], [240, "module-http"], [241, "index-0"], [244, "index-0"], [394, "index-11"], [394, "index-12"]], "pep 594#cgi": [[151, "index-8"]], "url": [[151, "index-0"], [244, "index-0"], [393, "index-0"], [395, "index-0"]], "www": [[151, "index-0"], [244, "index-0"], [256, "index-0"], [393, "index-0"], [395, "index-0"]], "debugging": [[151, "index-5"], [297, "index-0"], [435, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[151, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[151, "cgi.FieldStorage.getlist"]], "headers": [[151, "index-0"], [276, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_form"]], "protocol": [[151, "index-0"], [222, "index-0"], [240, "index-0"], [241, "index-0"], [244, "index-0"], [247, "index-0"], [288, "index-0"], [299, "index-5"], [305, "index-0"], [335, "index-0"], [344, "index-17"], [344, "index-53"], [358, "index-0"], [394, "index-11"], [394, "index-12"]], "security": [[151, "index-2"], [244, "index-3"]], "server": [[151, "index-0"], [244, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.test"]], "pep 594#cgitb": [[152, "index-4"]], "cgitb": [[152, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.enable"]], "excepthook() (in module sys)": [[152, "index-2"]], "exceptions": [[152, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.html"]], "in cgi scripts": [[152, "index-0"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.text"]], "tracebacks": [[152, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[153, "chunk.Chunk"]], "pep 594#chunk": [[153, "index-3"]], "rmff": [[153, "index-0"]], "real media file format": [[153, "index-0"]], "chunk": [[153, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.tell"]], "pep 485": [[154, "index-0"], [275, "index-0"], [477, "index-19"], [477, "index-20"], [482, "index-257"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.atanh"]], "cmath": [[154, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.log10"]], "math": [[154, "index-1"], [275, "module-math"], [344, "index-15"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tau"]], "! (exclamation)": [[155, "index-0"], [177, "index-0"], [219, "index-2"], [230, "index-1"], [345, "index-2"], [347, "index-1"], [434, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[155, "cmd.Cmd"]], "cmd": [[155, "module-cmd"], [297, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.cmdqueue"]], "columnize() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.columnize"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.default"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.identchars"]], "in a command interpreter": [[155, "index-0"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.use_rawinput"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[156, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[156, "code.InteractiveInterpreter"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[156, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[156, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[156, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[156, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[156, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[156, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[156, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[156, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[156, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[156, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[156, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.BOM_UTF8"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.CodecInfo"]], "codecs": [[157, "index-0"], [157, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.IncrementalEncoder"]], "rfc 3490": [[157, "index-13"], [157, "index-14"], [157, "index-6"], [157, "index-8"]], "rfc 3490#section-3.1": [[157, "index-12"]], "rfc 3492": [[157, "index-7"], [157, "index-9"]], "rfc 5891": [[157, "index-10"]], "rfc 5895": [[157, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[157, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[157, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[157, "encodings.idna.ToUnicode"]], "unicode": [[157, "index-0"], [386, "index-0"], [427, "index-19"]], "\\ (backslash)": [[157, "index-1"], [293, "index-48"], [319, "index-12"], [319, "index-25"], [319, "index-9"], [434, "index-23"]], "\\n": [[157, "index-3"], [319, "index-36"], [319, "index-36"], [434, "index-23"], [434, "index-23"]], "\\u": [[157, "index-1"], [157, "index-1"], [319, "index-36"], [319, "index-36"], [434, "index-23"], [434, "index-23"]], "\\x": [[157, "index-1"], [319, "index-36"], [434, "index-23"]], "backslashreplace": [[157, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.backslashreplace_errors"]], "decode": [[157, "index-0"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[157, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.decode"]], "encode": [[157, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[157, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.encode"]], "encodings.idna": [[157, "module-encodings.idna"]], "encodings.mbcs": [[157, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[157, "module-encodings.utf_8_sig"]], "error handler's name": [[157, "index-1"], [157, "index-3"], [157, "index-4"]], "escape sequence": [[157, "index-1"], [157, "index-3"], [434, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.getwriter"]], "ignore": [[157, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[157, "encodings.idna.nameprep"]], "namereplace": [[157, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[157, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[157, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[157, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.register_error"]], "replace": [[157, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.replace_errors"]], "replacement character": [[157, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[157, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[157, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[157, "codecs.IncrementalEncoder.setstate"]], "stackable": [[157, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.streamreader"]], "streams": [[157, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[157, "codecs.CodecInfo.streamwriter"]], "strict": [[157, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.strict_errors"]], "surrogateescape": [[157, "index-1"]], "surrogatepass": [[157, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[157, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[157, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[157, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[157, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[158, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[158, "codeop.Compile"]], "codeop": [[158, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[158, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.OrderedDict"]], "pep 468": [[159, "index-10"], [478, "index-24"], [482, "index-220"]], "pep 584": [[159, "index-11"], [159, "index-8"], [159, "index-9"], [293, "index-6"], [293, "index-7"], [384, "index-4"], [401, "index-1"], [401, "index-4"], [481, "index-1"], [481, "index-11"], [482, "index-135"], [482, "index-136"], [482, "index-137"], [482, "index-149"], [482, "index-150"], [482, "index-151"], [482, "index-152"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[159, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[159, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[159, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[159, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[159, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[159, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.clear"]], "collections": [[159, "module-collections"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[159, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[159, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[159, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[159, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[159, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[159, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[159, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[159, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[159, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[159, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[159, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[159, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[159, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[159, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Awaitable"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.MutableSet"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[160, "collections.abc.ValuesView"]], "collections.abc": [[160, "module-collections.abc"]], "colorsys": [[161, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[161, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[162, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[162, "cmdoption-compileall-invalidation-mode"]], "-b": [[162, "cmdoption-compileall-b"], [387, "cmdoption-unittest-b"], [454, "cmdoption-B"], [454, "cmdoption-b"]], "-d": [[162, "cmdoption-compileall-d"], [233, "cmdoption-gzip-d"], [454, "cmdoption-d"]], "-e": [[162, "cmdoption-compileall-e"], [357, "cmdoption-tarfile-e"], [377, "cmdoption-tokenize-e"], [421, "cmdoption-zipfile-e"], [454, "cmdoption-E"]], "-f": [[162, "cmdoption-compileall-f"], [379, "cmdoption-trace-f"], [387, "cmdoption-unittest-f"]], "-j": [[162, "cmdoption-compileall-j"], [454, "cmdoption-J"]], "-l": [[162, "cmdoption-compileall-l"], [300, "cmdoption-pickletools-l"], [357, "cmdoption-tarfile-l"], [379, "cmdoption-trace-l"], [421, "cmdoption-zipfile-l"]], "-o": [[162, "cmdoption-compileall-o"], [300, "cmdoption-pickletools-o"], [420, "cmdoption-zipapp-o"], [454, "cmdoption-O"]], "-p": [[162, "cmdoption-compileall-p"], [300, "cmdoption-pickletools-p"], [366, "cmdoption-timeit-p"], [387, "cmdoption-unittest-discover-p"], [420, "cmdoption-zipapp-p"], [454, "cmdoption-P"]], "-q": [[162, "cmdoption-compileall-q"], [311, "cmdoption-python-m-py_compile-q"], [454, "cmdoption-q"]], "-r": [[162, "cmdoption-compileall-r"], [366, "cmdoption-timeit-r"], [379, "cmdoption-trace-R"], [379, "cmdoption-trace-r"], [454, "cmdoption-R"]], "-s": [[162, "cmdoption-compileall-s"], [366, "cmdoption-timeit-s"], [379, "cmdoption-trace-s"], [387, "cmdoption-unittest-discover-s"], [454, "cmdoption-S"], [454, "cmdoption-s"]], "-x": [[162, "cmdoption-compileall-x"], [454, "cmdoption-X"], [454, "cmdoption-x"]], "source_date_epoch": [[162, "index-1"], [311, "index-3"], [311, "index-6"], [311, "index-7"], [479, "index-31"], [482, "index-180"], [482, "index-196"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[162, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[162, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[162, "compileall.compile_path"]], "compileall": [[162, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[162, "cmdoption-compileall-arg-directory"], [162, "cmdoption-compileall-arg-file"], [162, "cmdoption-compileall-b"], [162, "cmdoption-compileall-d"], [162, "cmdoption-compileall-e"], [162, "cmdoption-compileall-f"], [162, "cmdoption-compileall-hardlink-dupes"], [162, "cmdoption-compileall-i"], [162, "cmdoption-compileall-invalidation-mode"], [162, "cmdoption-compileall-j"], [162, "cmdoption-compileall-l"], [162, "cmdoption-compileall-o"], [162, "cmdoption-compileall-p"], [162, "cmdoption-compileall-q"], [162, "cmdoption-compileall-r"], [162, "cmdoption-compileall-s"], [162, "cmdoption-compileall-x"]], "directory": [[162, "cmdoption-compileall-arg-directory"], [293, "index-26"], [293, "index-28"], [293, "index-29"], [293, "index-31"], [293, "index-32"], [332, "index-1"], [334, "index-1"]], "brokenexecutor": [[165, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[165, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[165, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[165, "concurrent.futures.Executor"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[165, "concurrent.futures.Future"]], "pep 3148": [[165, "index-0"], [474, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[165, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[165, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[165, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[165, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[165, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[165, "concurrent.futures.wait"]], "$ (dollar)": [[166, "index-2"], [294, "index-9"], [319, "index-2"], [345, "index-13"]], "% (percent)": [[166, "index-1"], [182, "index-0"], [294, "index-9"], [344, "index-13"], [344, "index-34"], [344, "index-44"], [365, "index-11"], [365, "index-9"], [404, "index-0"], [429, "index-68"]], ".ini": [[166, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[166, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[166, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[166, "configparser.ConfigParser"]], "duplicateoptionerror": [[166, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[166, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[166, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[166, "configparser.InterpolationDepthError"]], "interpolationerror": [[166, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[166, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[166, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[166, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[166, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[166, "configparser.NoOptionError"]], "nosectionerror": [[166, "configparser.NoSectionError"]], "parsingerror": [[166, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[166, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[166, "configparser.ConfigParser.SECTCRE"]], "windows ini file": [[166, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[166, "configparser.RawConfigParser.add_section"]], "configparser": [[166, "module-configparser"]], "configuration": [[166, "index-0"], [297, "index-2"], [334, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.has_section"]], "ini file": [[166, "index-0"]], "interpolation in configuration files": [[166, "index-1"], [166, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.read_string"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[166, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[166, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[167, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[167, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[167, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[167, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[167, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[167, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[167, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[167, "credits"]], "ellipsis literal": [[167, "index-0"], [344, "index-65"], [427, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[167, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[167, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[167, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[168, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.ExitStack.callback"]], "chdir() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.chdir"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.closing"]], "contextlib": [[168, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[168, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[168, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[169, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[169, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[169, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[169, "contextvars.Token"]], "contextvars": [[169, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[169, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[169, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[169, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[169, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[169, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[169, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[169, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[169, "contextvars.Token.var"]], "__copy__() (copy protocol)": [[170, "index-1"]], "__deepcopy__() (copy protocol)": [[170, "index-1"]], "copy": [[170, "module-copy"], [171, "index-0"], [246, "index-4"], [299, "index-5"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[170, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[170, "copy.deepcopy"]], "pickle": [[170, "index-0"], [171, "index-0"], [274, "index-0"], [299, "module-pickle"], [330, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[171, "copyreg.constructor"]], "copyreg": [[171, "module-copyreg"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[171, "copyreg.pickle"]], "des": [[172, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[172, "index-1"]], "cipher": [[172, "index-0"]], "crypt": [[172, "module-crypt"], [310, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.crypt"]], "crypt(3)": [[172, "index-0"], [172, "index-2"], [172, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[172, "crypt.mksalt"]], "cryptography": [[173, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.DictWriter"]], "pep 305": [[174, "index-5"], [464, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.QUOTE_NONNUMERIC"]], "rfc 4180": [[174, "index-1"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[174, "csv.csvreader.__next__"]], "csv": [[174, "index-0"], [174, "module-csv"]], "csv.reader function": [[174, "index-3"]], "data": [[174, "index-0"], [347, "index-0"], [427, "index-0"], [427, "index-4"], [429, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[174, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[174, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.field_size_limit"]], "fieldnames (csv.csvreader \u7684\u5c6c\u6027)": [[174, "csv.csvreader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[174, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[174, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[174, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[174, "csv.Dialect.strict"]], "tabular": [[174, "index-0"]], "universal newlines": [[174, "index-3"], [224, "index-6"], [250, "index-16"], [258, "index-4"], [258, "index-5"], [344, "index-33"], [344, "index-43"], [348, "index-1"], [464, "index-8"], [465, "index-7"], [466, "index-20"], [467, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[174, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[174, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[174, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[174, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[174, "csv.csvwriter.writerows"]], "argumenterror": [[175, "ctypes.ArgumentError"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.BigEndianStructure"]], "bigendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.BigEndianUnion"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.LittleEndianStructure"]], "littleendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.LittleEndianUnion"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[175, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.POINTER"], [175, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[175, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[175, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[175, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[175, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[175, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[175, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[175, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[175, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[175, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[175, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[175, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[175, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_ssize_t"]], "c_time_t (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_time_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[175, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.create_unicode_buffer"]], "ctypes": [[175, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[175, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[175, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[175, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[175, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[175, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[175, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[175, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[175, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[175, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[175, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[175, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[175, "ctypes.wstring_at"]], "cols": [[176, "index-4"], [477, "index-32"]], "columns": [[176, "index-6"], [176, "index-8"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.ERR"]], "lines": [[176, "index-0"], [176, "index-3"], [176, "index-5"], [176, "index-7"], [477, "index-31"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.OK"]], "term": [[176, "index-1"], [176, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[176, "curses.textpad.Textbox"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.curs_set"]], "curses": [[176, "module-curses"]], "curses.textpad": [[176, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[176, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[176, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[176, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[176, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[176, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[176, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[176, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[176, "curses.wrapper"]], "^ (caret)": [[177, "index-0"], [192, "index-1"], [319, "index-1"], [319, "index-13"], [344, "index-16"], [345, "index-3"], [380, "index-1"], [429, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.ctrl"]], "curses.ascii": [[177, "module-curses.ascii"]], "in curses module": [[177, "index-0"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[177, "curses.ascii.unctrl"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[178, "curses.panel.bottom_panel"]], "curses.panel": [[178, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[178, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[178, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[178, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[178, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[180, "dataclasses.Field"]], "frozeninstanceerror": [[180, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.MISSING"]], "pep 557": [[180, "index-0"], [479, "index-29"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.dataclass"]], "dataclasses": [[180, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[180, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[182, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[182, "datetime.MINYEAR"]], "utc (\u65bc datetime \u6a21\u7d44\u4e2d)": [[182, "datetime.UTC"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.date"]], "datetime": [[182, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.datetime"]], "datetime format": [[182, "index-0"], [365, "index-11"], [365, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[182, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[182, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[182, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[182, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[182, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[182, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[182, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[182, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[182, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[182, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[182, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[182, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[182, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[182, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[182, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[182, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[182, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[182, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[182, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[182, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[183, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[183, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[183, "dbm.ndbm.ndbm.close"]], "databases": [[183, "index-0"]], "dbm": [[183, "module-dbm"]], "dbm.dumb": [[183, "module-dbm.dumb"]], "dbm.gnu": [[183, "module-dbm.gnu"], [330, "index-1"], [427, "index-31"]], "dbm.ndbm": [[183, "module-dbm.ndbm"], [330, "index-1"], [427, "index-31"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[183, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[183, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[183, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[183, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[183, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[183, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[183, "dbm.ndbm.open"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[183, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[183, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[183, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[183, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[185, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.create_decimal_from_float"]], "decimal": [[185, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[185, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[185, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[185, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[185, "decimal.Context.to_sci_string"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[188, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[188, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[188, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[188, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[188, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[188, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[188, "module-tkinter.commondialog"]], "tkinter.filedialog": [[188, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[188, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[189, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[189, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[189, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[189, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[189, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.diff_bytes"]], "difflib": [[189, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[189, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[189, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[189, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[189, "difflib.unified_diff"]], "async_gen_wrap (opcode)": [[190, "opcode-ASYNC_GEN_WRAP"]], "before_async_with (opcode)": [[190, "opcode-BEFORE_ASYNC_WITH"]], "before_with (opcode)": [[190, "opcode-BEFORE_WITH"]], "binary_op (opcode)": [[190, "opcode-BINARY_OP"]], "binary_slice (opcode)": [[190, "opcode-BINARY_SLICE"]], "binary_subscr (opcode)": [[190, "opcode-BINARY_SUBSCR"]], "build_const_key_map (opcode)": [[190, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[190, "opcode-BUILD_LIST"]], "build_map (opcode)": [[190, "opcode-BUILD_MAP"]], "build_set (opcode)": [[190, "opcode-BUILD_SET"]], "build_slice (opcode)": [[190, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[190, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[190, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[190, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Bytecode.first_line"]], "cache (opcode)": [[190, "opcode-CACHE"]], "call (opcode)": [[190, "opcode-CALL"]], "call_function_ex (opcode)": [[190, "opcode-CALL_FUNCTION_EX"]], "check_eg_match (opcode)": [[190, "opcode-CHECK_EG_MATCH"]], "check_exc_match (opcode)": [[190, "opcode-CHECK_EXC_MATCH"]], "cleanup_throw (opcode)": [[190, "opcode-CLEANUP_THROW"]], "compare_op (opcode)": [[190, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[190, "opcode-CONTAINS_OP"]], "copy (opcode)": [[190, "opcode-COPY"]], "copy_free_vars (opcode)": [[190, "opcode-COPY_FREE_VARS"]], "delete_attr (opcode)": [[190, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[190, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[190, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[190, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[190, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[190, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[190, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[190, "opcode-DICT_UPDATE"]], "end_async_for (opcode)": [[190, "opcode-END_ASYNC_FOR"]], "extended_arg (opcode)": [[190, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[190, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[190, "opcode-FOR_ITER"]], "get_aiter (opcode)": [[190, "opcode-GET_AITER"]], "get_anext (opcode)": [[190, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[190, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[190, "opcode-GET_ITER"]], "get_len (opcode)": [[190, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[190, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[190, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[190, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[190, "opcode-IMPORT_NAME"]], "import_star (opcode)": [[190, "opcode-IMPORT_STAR"]], "is_op (opcode)": [[190, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[190, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.opname"]], "instruction.positions (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.positions"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Instruction.starts_line"]], "jump (opcode)": [[190, "opcode-JUMP"]], "jump_backward (opcode)": [[190, "opcode-JUMP_BACKWARD"]], "jump_backward_no_interrupt (opcode)": [[190, "opcode-JUMP_BACKWARD_NO_INTERRUPT"]], "jump_forward (opcode)": [[190, "opcode-JUMP_FORWARD"]], "jump_if_false_or_pop (opcode)": [[190, "opcode-JUMP_IF_FALSE_OR_POP"]], "jump_if_true_or_pop (opcode)": [[190, "opcode-JUMP_IF_TRUE_OR_POP"]], "jump_no_interrupt (opcode)": [[190, "opcode-JUMP_NO_INTERRUPT"]], "kw_names (opcode)": [[190, "opcode-KW_NAMES"]], "list_append (opcode)": [[190, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[190, "opcode-LIST_EXTEND"]], "list_to_tuple (opcode)": [[190, "opcode-LIST_TO_TUPLE"]], "load_assertion_error (opcode)": [[190, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[190, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[190, "opcode-LOAD_BUILD_CLASS"]], "load_classderef (opcode)": [[190, "opcode-LOAD_CLASSDEREF"]], "load_closure (opcode)": [[190, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[190, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[190, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[190, "opcode-LOAD_FAST"]], "load_fast_check (opcode)": [[190, "opcode-LOAD_FAST_CHECK"]], "load_global (opcode)": [[190, "opcode-LOAD_GLOBAL"]], "load_method (opcode)": [[190, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[190, "opcode-LOAD_NAME"]], "make_cell (opcode)": [[190, "opcode-MAKE_CELL"]], "make_function (opcode)": [[190, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[190, "opcode-MAP_ADD"]], "match_class (opcode)": [[190, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[190, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[190, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[190, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[190, "opcode-NOP"]], "pep 626": [[190, "index-0"], [471, "index-4"], [482, "index-2"]], "pop_block (opcode)": [[190, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[190, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[190, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_none (opcode)": [[190, "opcode-POP_JUMP_IF_NONE"]], "pop_jump_if_not_none (opcode)": [[190, "opcode-POP_JUMP_IF_NOT_NONE"]], "pop_jump_if_true (opcode)": [[190, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[190, "opcode-POP_TOP"]], "prep_reraise_star (opcode)": [[190, "opcode-PREP_RERAISE_STAR"]], "print_expr (opcode)": [[190, "opcode-PRINT_EXPR"]], "push_exc_info (opcode)": [[190, "opcode-PUSH_EXC_INFO"]], "push_null (opcode)": [[190, "opcode-PUSH_NULL"]], "positions (dis \u4e2d\u7684\u985e\u5225)": [[190, "dis.Positions"]], "positions.col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Positions.col_offset"]], "positions.end_col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Positions.end_col_offset"]], "positions.end_lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Positions.end_lineno"]], "positions.lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.Positions.lineno"]], "raise_varargs (opcode)": [[190, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[190, "opcode-RERAISE"]], "resume (opcode)": [[190, "opcode-RESUME"]], "return_generator (opcode)": [[190, "opcode-RETURN_GENERATOR"]], "return_value (opcode)": [[190, "opcode-RETURN_VALUE"]], "send (opcode)": [[190, "opcode-SEND"]], "setup_annotations (opcode)": [[190, "opcode-SETUP_ANNOTATIONS"]], "setup_cleanup (opcode)": [[190, "opcode-SETUP_CLEANUP"]], "setup_finally (opcode)": [[190, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[190, "opcode-SETUP_WITH"]], "set_add (opcode)": [[190, "opcode-SET_ADD"]], "set_update (opcode)": [[190, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[190, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[190, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[190, "opcode-STORE_FAST"]], "store_global (opcode)": [[190, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[190, "opcode-STORE_NAME"]], "store_slice (opcode)": [[190, "opcode-STORE_SLICE"]], "store_subscr (opcode)": [[190, "opcode-STORE_SUBSCR"]], "swap (opcode)": [[190, "opcode-SWAP"]], "unary_invert (opcode)": [[190, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[190, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[190, "opcode-UNARY_NOT"]], "unary_positive (opcode)": [[190, "opcode-UNARY_POSITIVE"]], "unpack_ex (opcode)": [[190, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[190, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[190, "opcode-WITH_EXCEPT_START"]], "yield_value (opcode)": [[190, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.code_info"]], "dis": [[190, "module-dis"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[190, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[190, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.get_instructions"]], "hasarg (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasarg"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasconst"]], "hasexc (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasexc"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[190, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.show_code"]], "slice": [[190, "index-1"], [344, "index-19"], [344, "index-23"], [427, "index-66"], [427, "index-96"], [429, "index-44"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[190, "dis.stack_effect"]], "# (hash)": [[192, "index-4"], [319, "index-37"], [334, "index-2"], [344, "index-36"], [344, "index-46"], [345, "index-7"], [434, "index-4"], [434, "index-5"], [448, "index-0"]], "- (minus)": [[192, "index-4"], [219, "index-2"], [230, "index-1"], [319, "index-11"], [344, "index-13"], [344, "index-36"], [344, "index-46"], [345, "index-4"], [429, "index-60"], [429, "index-70"]], "<blankline>": [[192, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.DocTest"]], "doctestfailure": [[192, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[192, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.SKIP"]], "unexpectedexception": [[192, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[192, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.docstring"]], "doctest": [[192, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[192, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[192, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[192, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.exc_msg"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[192, "doctest.DocTestFailure.got"]], "in doctests": [[192, "index-3"], [192, "index-4"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.indent"]], "interpreter prompt": [[192, "index-0"], [352, "index-27"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.lineno"]], "marker": [[192, "index-1"], [380, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[192, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[192, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[192, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[192, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[192, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[192, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[192, "doctest.Example.want"]], "rfc 2046": [[193, "index-4"], [196, "index-0"], [201, "index-5"]], "rfc 2047": [[193, "index-5"], [201, "index-11"], [201, "index-13"], [201, "index-6"], [201, "index-8"], [202, "index-1"], [202, "index-4"], [202, "index-6"], [207, "index-3"], [207, "index-4"], [208, "index-1"], [474, "index-11"], [474, "index-8"]], "rfc 2183": [[193, "index-6"], [195, "index-11"], [204, "index-10"]], "rfc 2231": [[193, "index-7"], [195, "index-10"], [195, "index-2"], [195, "index-3"], [195, "index-7"], [195, "index-8"], [201, "index-7"], [204, "index-4"], [204, "index-5"], [204, "index-9"], [208, "index-5"], [208, "index-6"], [208, "index-7"], [208, "index-8"], [208, "index-9"]], "rfc 2821": [[193, "index-0"]], "rfc 5322": [[193, "index-1"], [195, "index-0"], [198, "index-0"], [200, "index-0"], [200, "index-1"], [202, "index-0"], [202, "index-11"], [202, "index-12"], [202, "index-14"], [202, "index-2"], [202, "index-3"], [202, "index-5"], [202, "index-7"], [202, "index-8"], [204, "index-0"], [204, "index-2"], [206, "index-0"], [207, "index-0"], [207, "index-1"], [207, "index-2"], [207, "index-5"], [207, "index-6"], [207, "index-9"], [335, "index-11"]], "rfc 6532": [[193, "index-2"], [204, "index-1"], [206, "index-1"], [207, "index-7"], [477, "index-33"]], "email": [[193, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[194, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[194, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[194, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[194, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.body_encoding"]], "email.charset": [[194, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[194, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[194, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[195, "email.message.Message"]], "rfc 2822": [[195, "index-1"], [201, "index-0"], [201, "index-10"], [201, "index-12"], [201, "index-2"], [201, "index-3"], [201, "index-9"], [208, "index-0"], [208, "index-10"], [208, "index-2"], [208, "index-3"], [208, "index-4"], [241, "index-2"], [244, "index-2"], [271, "index-0"], [365, "index-10"], [365, "index-22"], [450, "index-3"], [463, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[195, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[195, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[195, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[195, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[196, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[196, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[196, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[196, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[196, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[196, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[196, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[196, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[196, "email.contentmanager.set_content"]], "email.encoders": [[197, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[197, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[197, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[197, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[197, "email.encoders.encode_quopri"]], "boundaryerror": [[198, "email.errors.BoundaryError"]], "headerparseerror": [[198, "email.errors.HeaderParseError"]], "messageerror": [[198, "email.errors.MessageError"]], "messageparseerror": [[198, "email.errors.MessageParseError"]], "multipartconversionerror": [[198, "email.errors.MultipartConversionError"]], "email.errors": [[198, "module-email.errors"]], "rfc 822": [[199, "index-0"], [201, "index-1"], [229, "index-9"], [241, "index-3"], [335, "index-10"], [335, "index-12"], [335, "index-6"], [335, "index-9"], [365, "index-19"], [365, "index-20"], [463, "index-21"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[200, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[200, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[200, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[200, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[200, "email.generator.Generator.clone"]], "email.generator": [[200, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[200, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[200, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[200, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[200, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[201, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[201, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[201, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[201, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[201, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[201, "email.header.decode_header"]], "email.header": [[201, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[201, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[201, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[202, "index-13"], [475, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[202, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Address.domain"]], "email.headerregistry": [[202, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[202, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[202, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[202, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[203, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[203, "email.iterators.body_line_iterator"]], "email.iterators": [[203, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[203, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[204, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[204, "email.message.MIMEPart"]], "rfc 6531": [[204, "index-3"], [207, "index-8"], [335, "index-3"], [477, "index-34"], [477, "index-40"], [477, "index-41"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[204, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.del_param"]], "email.message": [[204, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[204, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[204, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[204, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[205, "email.mime.text.MIMEText"]], "email.mime": [[205, "module-email.mime"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[206, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[206, "email.parser.BytesFeedParser.close"]], "email.parser": [[206, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[206, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[206, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[206, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[206, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[206, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[206, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[206, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[206, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[206, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[207, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[207, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[207, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[207, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.default"]], "email.policy": [[207, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[207, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[207, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[207, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[207, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[207, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[207, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[207, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[207, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[207, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[207, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[207, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[207, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[207, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.decode_rfc2231"]], "email.utils": [[208, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[208, "email.utils.unquote"]], "pep 453": [[209, "index-0"], [468, "index-22"], [468, "index-23"], [468, "index-24"], [476, "index-1"], [476, "index-19"], [476, "index-20"], [476, "index-27"], [476, "index-42"], [476, "index-5"], [476, "index-53"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[209, "ensurepip.bootstrap"]], "ensurepip": [[209, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[209, "ensurepip.version"]], "conform (enum.flagboundary \u7684\u5c6c\u6027)": [[210, "enum.FlagBoundary.CONFORM"]], "continuous (enum.enumcheck \u7684\u5c6c\u6027)": [[210, "enum.EnumCheck.CONTINUOUS"]], "eject (enum.flagboundary \u7684\u5c6c\u6027)": [[210, "enum.FlagBoundary.EJECT"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.Enum"]], "enumcheck (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.EnumCheck"]], "enumtype (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.EnumType"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.Flag"]], "flagboundary (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.FlagBoundary"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.IntFlag"]], "keep (enum.flagboundary \u7684\u5c6c\u6027)": [[210, "enum.FlagBoundary.KEEP"]], "named_flags (enum.enumcheck \u7684\u5c6c\u6027)": [[210, "enum.EnumCheck.NAMED_FLAGS"]], "strict (enum.flagboundary \u7684\u5c6c\u6027)": [[210, "enum.FlagBoundary.STRICT"]], "strenum (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.StrEnum"]], "unique (enum.enumcheck \u7684\u5c6c\u6027)": [[210, "enum.EnumCheck.UNIQUE"]], "__and__() (enum.flag \u7684\u65b9\u6cd5)": [[210, "enum.Flag.__and__"]], "__call__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__call__"]], "__contains__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__contains__"]], "__contains__() (enum.flag \u7684\u65b9\u6cd5)": [[210, "enum.Flag.__contains__"]], "__dir__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__dir__"]], "__dir__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__dir__"]], "__format__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__format__"]], "__getitem__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__getitem__"]], "__init_subclass__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__init_subclass__"]], "__iter__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__iter__"]], "__len__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__len__"]], "__or__() (enum.flag \u7684\u65b9\u6cd5)": [[210, "enum.Flag.__or__"]], "__repr__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__repr__"]], "__reversed__() (enum.enumtype \u7684\u65b9\u6cd5)": [[210, "enum.EnumType.__reversed__"]], "__str__() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum.__str__"]], "__xor__() (enum.flag \u7684\u65b9\u6cd5)": [[210, "enum.Flag.__xor__"]], "_generate_next_value_() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum._generate_next_value_"]], "_ignore_ (enum.enum \u7684\u5c6c\u6027)": [[210, "enum.Enum._ignore_"]], "_missing_() (enum.enum \u7684\u65b9\u6cd5)": [[210, "enum.Enum._missing_"]], "_numeric_repr_() (enum.flag \u7684\u65b9\u6cd5)": [[210, "enum.Flag._numeric_repr_"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[210, "enum.auto"]], "enum": [[210, "module-enum"]], "member() (\u65bc enum \u6a21\u7d44\u4e2d)": [[210, "enum.member"]], "name (enum.enum \u7684\u5c6c\u6027)": [[210, "enum.Enum.name"]], "nonmember() (\u65bc enum \u6a21\u7d44\u4e2d)": [[210, "enum.nonmember"]], "property() (\u65bc enum \u6a21\u7d44\u4e2d)": [[210, "enum.property"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[210, "enum.unique"]], "value (enum.enum \u7684\u5c6c\u6027)": [[210, "enum.Enum.value"]], "verify() (\u65bc enum \u6a21\u7d44\u4e2d)": [[210, "enum.verify"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EBUSY"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTBLK"]], "enotcapable (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTCAPABLE"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTNAM"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTSOCK"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EOVERFLOW"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EPROTOTYPE"]], "eqfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EQFULL"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.EXFULL"]], "errno": [[211, "module-errno"], [212, "index-4"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[211, "errno.errorcode"]], "arithmeticerror": [[212, "ArithmeticError"]], "assertionerror": [[212, "AssertionError"], [435, "index-19"]], "attributeerror": [[212, "AttributeError"], [429, "index-40"]], "baseexception": [[212, "BaseException"]], "baseexceptiongroup": [[212, "BaseExceptionGroup"]], "blockingioerror": [[212, "BlockingIOError"], [258, "io.BlockingIOError"]], "brokenpipeerror": [[212, "BrokenPipeError"]], "buffererror": [[212, "BufferError"]], "byteswarning": [[212, "BytesWarning"]], "childprocesserror": [[212, "ChildProcessError"]], "connectionabortederror": [[212, "ConnectionAbortedError"]], "connectionerror": [[212, "ConnectionError"]], "connectionrefusederror": [[212, "ConnectionRefusedError"]], "connectionreseterror": [[212, "ConnectionResetError"]], "deprecationwarning": [[212, "DeprecationWarning"]], "eoferror": [[212, "EOFError"]], "encodingwarning": [[212, "EncodingWarning"]], "environmenterror": [[212, "EnvironmentError"]], "exception": [[212, "Exception"], [427, "index-63"], [428, "index-12"], [435, "index-27"], [435, "index-29"]], "exceptiongroup": [[212, "ExceptionGroup"]], "fileexistserror": [[212, "FileExistsError"]], "filenotfounderror": [[212, "FileNotFoundError"]], "floatingpointerror": [[212, "FloatingPointError"]], "futurewarning": [[212, "FutureWarning"]], "generatorexit": [[212, "GeneratorExit"], [429, "index-33"], [429, "index-37"]], "ioerror": [[212, "IOError"]], "importerror": [[212, "ImportError"], [435, "index-34"]], "importwarning": [[212, "ImportWarning"]], "indentationerror": [[212, "IndentationError"]], "indexerror": [[212, "IndexError"]], "interruptederror": [[212, "InterruptedError"]], "isadirectoryerror": [[212, "IsADirectoryError"]], "keyerror": [[212, "KeyError"]], "keyboardinterrupt": [[212, "KeyboardInterrupt"]], "lookuperror": [[212, "LookupError"]], "memoryerror": [[212, "MemoryError"]], "modulenotfounderror": [[212, "ModuleNotFoundError"]], "nameerror": [[212, "NameError"], [429, "index-4"]], "notadirectoryerror": [[212, "NotADirectoryError"]], "notimplementederror": [[212, "NotImplementedError"]], "oserror": [[212, "OSError"]], "overflowerror": [[212, "OverflowError"]], "pep 3134": [[212, "index-2"], [469, "index-12"], [469, "index-28"], [469, "index-29"], [482, "index-26"]], "pep 475": [[212, "index-7"], [224, "index-17"], [293, "index-22"], [293, "index-24"], [293, "index-25"], [293, "index-44"], [328, "index-3"], [328, "index-4"], [328, "index-5"], [328, "index-6"], [328, "index-7"], [329, "index-0"], [333, "index-0"], [333, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-13"], [337, "index-4"], [337, "index-5"], [337, "index-7"], [337, "index-8"], [337, "index-9"], [365, "index-8"], [477, "index-15"], [477, "index-16"], [477, "index-51"], [482, "index-203"], [482, "index-260"]], "pep 565": [[212, "index-9"], [479, "index-19"]], "pendingdeprecationwarning": [[212, "PendingDeprecationWarning"]], "permissionerror": [[212, "PermissionError"]], "processlookuperror": [[212, "ProcessLookupError"]], "recursionerror": [[212, "RecursionError"]], "referenceerror": [[212, "ReferenceError"]], "resourcewarning": [[212, "ResourceWarning"]], "runtimeerror": [[212, "RuntimeError"]], "runtimewarning": [[212, "RuntimeWarning"]], "stopasynciteration": [[212, "StopAsyncIteration"], [429, "index-36"]], "stopiteration": [[212, "StopIteration"], [429, "index-32"], [435, "index-26"]], "syntaxerror": [[212, "SyntaxError"]], "syntaxwarning": [[212, "SyntaxWarning"]], "systemerror": [[212, "SystemError"]], "systemexit": [[212, "SystemExit"]], "taberror": [[212, "TabError"]], "typeerror": [[212, "TypeError"], [429, "index-63"]], "unboundlocalerror": [[212, "UnboundLocalError"], [428, "index-9"]], "unicodedecodeerror": [[212, "UnicodeDecodeError"]], "unicodeencodeerror": [[212, "UnicodeEncodeError"]], "unicodeerror": [[212, "UnicodeError"]], "unicodetranslateerror": [[212, "UnicodeTranslateError"]], "unicodewarning": [[212, "UnicodeWarning"]], "userwarning": [[212, "UserWarning"]], "valueerror": [[212, "ValueError"], [429, "index-72"]], "warning": [[212, "Warning"], [340, "sqlite3.Warning"]], "windowserror": [[212, "WindowsError"]], "zerodivisionerror": [[212, "ZeroDivisionError"], [429, "index-67"]], "__notes__ (baseexception \u7684\u5c6c\u6027)": [[212, "BaseException.__notes__"]], "add_note() (baseexception \u7684\u65b9\u6cd5)": [[212, "BaseException.add_note"]], "args (baseexception \u7684\u5c6c\u6027)": [[212, "BaseException.args"]], "assert": [[212, "index-3"], [435, "index-18"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[212, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[212, "SystemExit.code"]], "derive() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[212, "BaseExceptionGroup.derive"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[212, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[212, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[212, "OSError.errno"]], "except": [[212, "index-0"], [426, "index-9"]], "exceptions (baseexceptiongroup \u7684\u5c6c\u6027)": [[212, "BaseExceptionGroup.exceptions"]], "filename (oserror \u7684\u5c6c\u6027)": [[212, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[212, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.lineno"]], "message (baseexceptiongroup \u7684\u5c6c\u6027)": [[212, "BaseExceptionGroup.message"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[212, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.offset"]], "raise": [[212, "index-1"], [435, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[212, "UnicodeError.reason"]], "split() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[212, "BaseExceptionGroup.split"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[212, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[212, "OSError.strerror"]], "subgroup() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[212, "BaseExceptionGroup.subgroup"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[212, "SyntaxError.text"]], "try": [[212, "index-0"], [426, "index-9"], [427, "index-64"]], "winerror (oserror \u7684\u5c6c\u6027)": [[212, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[212, "BaseException.with_traceback"]], "\u9673\u8ff0\u5f0f": [[212, "index-0"], [212, "index-1"], [212, "index-3"], [224, "index-12"], [249, "index-0"], [334, "index-2"], [344, "index-1"], [344, "index-23"], [344, "index-51"], [426, "index-13"], [426, "index-15"], [426, "index-16"], [426, "index-18"], [426, "index-28"], [426, "index-3"], [426, "index-4"], [426, "index-40"], [426, "index-46"], [426, "index-48"], [426, "index-49"], [426, "index-5"], [426, "index-6"], [426, "index-7"], [426, "index-9"], [427, "index-103"], [427, "index-42"], [427, "index-64"], [427, "index-71"], [435, "index-18"], [435, "index-20"], [435, "index-21"], [435, "index-22"], [435, "index-24"], [435, "index-26"], [435, "index-27"], [435, "index-30"], [435, "index-30"], [435, "index-33"], [435, "index-33"], [435, "index-34"], [435, "index-43"], [435, "index-45"], [440, "index-0"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.enable"]], "faulthandler": [[213, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[213, "faulthandler.unregister"]], "i/o control": [[214, "index-0"], [224, "index-7"], [337, "index-6"], [360, "index-0"]], "unix": [[214, "index-0"], [436, "index-4"]], "fcntl": [[214, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[214, "fcntl.fcntl"]], "file control": [[214, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[214, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[214, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[214, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[215, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[215, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[215, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[215, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[215, "filecmp.dircmp"]], "filecmp": [[215, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[215, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[215, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[215, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[215, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[217, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.close"]], "fileinput": [[217, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[217, "fileinput.nextfile"]], "[] (square brackets)": [[219, "index-2"], [230, "index-1"], [319, "index-10"], [345, "index-2"], [429, "index-15"], [429, "index-41"], [435, "index-6"]], "filenames": [[219, "index-0"], [230, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[219, "fnmatch.filter"]], "fnmatch": [[219, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[219, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[219, "fnmatch.fnmatchcase"]], "glob": [[219, "index-3"], [230, "module-glob"]], "in glob-style wildcards": [[219, "index-2"], [230, "index-1"], [230, "index-2"]], "re": [[219, "index-1"], [319, "module-re"], [344, "index-32"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[219, "fnmatch.translate"]], "wildcard expansion": [[219, "index-0"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[220, "fractions.Fraction"]], "pep 515": [[220, "index-0"], [345, "index-19"], [472, "index-26"], [478, "index-7"], [478, "index-8"], [482, "index-223"], [482, "index-224"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[220, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[220, "fractions.Fraction.__floor__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[220, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[220, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[220, "fractions.Fraction.denominator"]], "fractions": [[220, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[220, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[220, "fractions.Fraction.from_float"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[220, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[220, "fractions.Fraction.numerator"]], "ftp": [[222, "index-0"], [394, "index-11"], [394, "index-13"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[222, "ftplib.FTP"]], "ftp_tls (ftplib \u4e2d\u7684\u985e\u5225)": [[222, "ftplib.FTP_TLS"]], "rfc 2640": [[222, "index-2"], [222, "index-3"], [222, "index-5"], [481, "index-22"], [482, "index-138"]], "rfc 3659": [[222, "index-6"]], "rfc 4217": [[222, "index-4"]], "rfc 959": [[222, "index-1"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[222, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.dir"]], "error_perm": [[222, "ftplib.error_perm"]], "error_proto": [[222, "ftplib.error_proto"], [305, "poplib.error_proto"]], "error_reply": [[222, "ftplib.error_reply"]], "error_temp": [[222, "ftplib.error_temp"]], "ftplib": [[222, "module-ftplib"]], "ftplib (standard module)": [[222, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[222, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[222, "ftplib.FTP.voidcmd"]], "boolean": [[224, "index-0"], [344, "index-1"], [344, "index-11"], [344, "index-5"], [344, "index-66"], [427, "index-11"], [429, "index-82"]], "infinity": [[224, "index-2"]], "nan": [[224, "index-2"]], "pythoncaseok": [[224, "index-15"], [454, "envvar-PYTHONCASEOK"], [462, "index-11"], [481, "index-21"], [482, "index-153"]], "__format__": [[224, "index-3"]], "__import__()": [[224, "import__"]], "abs()": [[224, "abs"]], "aiter()": [[224, "aiter"]], "all()": [[224, "all"]], "anext()": [[224, "anext"]], "any()": [[224, "any"]], "ascii()": [[224, "ascii"]], "bin()": [[224, "bin"]], "binary mode": [[224, "index-7"]], "bool (\u5167\u5efa\u985e\u5225)": [[224, "bool"]], "breakpoint()": [[224, "breakpoint"]], "buffer size, i/o": [[224, "index-7"]], "buffering": [[224, "index-7"], [337, "index-6"]], "callable()": [[224, "callable"]], "chr()": [[224, "chr"]], "classmethod()": [[224, "classmethod"]], "compile()": [[224, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[224, "complex"]], "delattr()": [[224, "delattr"]], "dir()": [[224, "dir"]], "divmod()": [[224, "divmod"]], "enumerate()": [[224, "enumerate"]], "eval()": [[224, "eval"]], "exec": [[224, "index-1"], [344, "index-63"], [435, "index-44"]], "exec()": [[224, "exec"]], "file object": [[224, "index-4"], [258, "index-0"]], "filter()": [[224, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[224, "float"]], "format()": [[224, "format"]], "format() (built-in function)": [[224, "index-3"], [427, "index-73"]], "getattr()": [[224, "getattr"]], "globals()": [[224, "globals"]], "hasattr()": [[224, "hasattr"]], "hash()": [[224, "hash"]], "help()": [[224, "help"]], "hex()": [[224, "hex"]], "id()": [[224, "id"]], "imp": [[224, "index-12"], [249, "module-imp"]], "import": [[224, "index-12"], [249, "index-0"], [334, "index-2"], [427, "index-42"], [431, "index-9"], [435, "index-34"], [435, "index-39"]], "input()": [[224, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[224, "int"]], "isinstance()": [[224, "isinstance"]], "issubclass()": [[224, "issubclass"]], "iter()": [[224, "iter"]], "len()": [[224, "len"]], "line-buffered i/o": [[224, "index-7"]], "locals()": [[224, "locals"]], "map()": [[224, "map"]], "max()": [[224, "max"]], "min()": [[224, "min"]], "modes": [[224, "index-5"]], "next()": [[224, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[224, "object"]], "oct()": [[224, "oct"]], "open()": [[224, "open"]], "open() built-in function": [[224, "index-4"], [224, "index-6"]], "ord()": [[224, "ord"]], "pow()": [[224, "pow"]], "print()": [[224, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[224, "property"]], "repr()": [[224, "repr"]], "reversed()": [[224, "reversed"]], "round()": [[224, "round"]], "setattr()": [[224, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[224, "slice"]], "sorted()": [[224, "sorted"]], "staticmethod()": [[224, "staticmethod"]], "str() (built-in function)": [[224, "index-10"]], "sum()": [[224, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[224, "super"]], "text mode": [[224, "index-7"]], "type (\u5167\u5efa\u985e\u5225)": [[224, "type"]], "unbuffered i/o": [[224, "index-7"]], "vars()": [[224, "vars"]], "zip()": [[224, "zip"]], "pep 412": [[225, "index-0"], [475, "index-16"]], "args (functools.partial \u7684\u5c6c\u6027)": [[225, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[225, "functools.partial.func"]], "functools": [[225, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[225, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[225, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[225, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[225, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.garbage"]], "gc": [[226, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[226, "gc.unfreeze"]], "getopterror": [[227, "getopt.GetoptError"]], "posixly_correct": [[227, "index-0"]], "getopt": [[227, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[227, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[227, "getopt.gnu_getopt"]], "getpasswarning": [[228, "getpass.GetPassWarning"]], "lname": [[228, "index-10"]], "logname": [[228, "index-8"], [293, "index-10"]], "user": [[228, "index-9"], [293, "index-16"], [293, "index-19"], [293, "index-8"]], "username": [[228, "index-11"], [293, "index-11"], [294, "index-7"]], "getpass": [[228, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[228, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[228, "getpass.getuser"]], "gnome": [[229, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[229, "gettext.GNUTranslations"]], "lang": [[229, "index-3"], [229, "index-8"], [266, "index-1"], [266, "index-2"], [266, "index-3"]], "language": [[229, "index-0"], [229, "index-5"], [344, "index-11"], [344, "index-15"], [427, "index-13"], [427, "index-4"], [427, "index-40"], [429, "index-77"]], "lc_all": [[229, "index-1"], [229, "index-6"]], "lc_messages": [[229, "index-2"], [229, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[229, "gettext.NullTranslations"]], "_ (underscore)": [[229, "index-4"], [345, "index-10"], [434, "index-28"], [434, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.add_fallback"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.find"]], "gettext": [[229, "index-4"], [229, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[229, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.install"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[229, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[229, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.npgettext"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[229, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[229, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.pgettext"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[229, "gettext.translation"]], "**": [[230, "index-2"], [344, "index-13"], [426, "index-32"], [429, "index-18"], [429, "index-50"], [429, "index-58"], [440, "index-4"]], ". (dot)": [[230, "index-1"], [293, "index-45"], [293, "index-50"], [319, "index-0"], [344, "index-35"], [344, "index-45"], [345, "index-2"], [429, "index-39"], [434, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[230, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[230, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[230, "glob.iglob"]], "pathname expansion": [[230, "index-0"]], "cycleerror": [[231, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[231, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[231, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[231, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[232, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[232, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[232, "grp.getgrnam"]], "grp": [[232, "module-grp"]], "--best": [[233, "cmdoption-gzip-best"]], "--decompress": [[233, "cmdoption-gzip-d"]], "--fast": [[233, "cmdoption-gzip-fast"]], "badgzipfile": [[233, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[233, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[233, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[233, "gzip.decompress"]], "gzip": [[233, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[233, "cmdoption-gzip-arg-file"], [233, "cmdoption-gzip-best"], [233, "cmdoption-gzip-d"], [233, "cmdoption-gzip-fast"], [233, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[233, "gzip.GzipFile.mtime"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[233, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[233, "gzip.GzipFile.peek"]], "(use in module hashlib)": [[234, "index-2"]], "openssl": [[234, "index-2"], [341, "index-0"]], "rfc 1321": [[234, "index-1"]], "rfc 7693": [[234, "index-5"]], "rfc 7914": [[234, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2b"]], "blake2b, blake2s": [[234, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[234, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[234, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[234, "hashlib.shake.digest"]], "file_digest() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.file_digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.hash.digest_size"]], "hashlib": [[234, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[234, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[234, "hashlib.shake.hexdigest"]], "message digest, md5": [[234, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[234, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[234, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha224, sha256, sha384, sha512": [[234, "index-0"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[234, "hashlib.hash.update"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.heappushpop"]], "heapq": [[235, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[235, "heapq.nsmallest"]], "rfc 2014": [[236, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[236, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[236, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[236, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[236, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[236, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[236, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[236, "hmac.HMAC.hexdigest"]], "hmac": [[236, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[236, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[236, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[236, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[237, "html.escape"]], "html": [[237, "module-html"], [239, "index-0"], [394, "index-12"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[237, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[238, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[238, "html.entities.entitydefs"]], "html.entities": [[238, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[238, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[238, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[239, "html.parser.HTMLParser"]], "xhtml": [[239, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[239, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[239, "html.parser.HTMLParser.unknown_decl"]], "httpmethod (http \u4e2d\u7684\u985e\u5225)": [[240, "http.HTTPMethod"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[240, "http.HTTPStatus"]], "rfc 2295": [[240, "index-204"]], "rfc 2324": [[240, "index-187"]], "rfc 2518": [[240, "index-149"]], "rfc 2774": [[240, "index-207"]], "rfc 3229": [[240, "index-160"]], "rfc 4918": [[240, "index-158"], [240, "index-189"], [240, "index-190"], [240, "index-191"], [240, "index-205"]], "rfc 5789": [[240, "index-76"]], "rfc 5842": [[240, "index-159"], [240, "index-206"]], "rfc 6585": [[240, "index-194"], [240, "index-195"], [240, "index-196"], [240, "index-208"]], "rfc 7231": [[240, "index-147"], [240, "index-148"], [240, "index-151"], [240, "index-152"], [240, "index-153"], [240, "index-154"], [240, "index-155"], [240, "index-156"], [240, "index-161"], [240, "index-162"], [240, "index-163"], [240, "index-164"], [240, "index-166"], [240, "index-167"], [240, "index-169"], [240, "index-171"], [240, "index-172"], [240, "index-173"], [240, "index-174"], [240, "index-175"], [240, "index-177"], [240, "index-178"], [240, "index-179"], [240, "index-180"], [240, "index-182"], [240, "index-183"], [240, "index-184"], [240, "index-186"], [240, "index-193"], [240, "index-198"], [240, "index-199"], [240, "index-200"], [240, "index-201"], [240, "index-202"], [240, "index-203"], [240, "index-209"], [240, "index-210"], [240, "index-211"], [240, "index-212"], [240, "index-213"], [240, "index-214"], [240, "index-215"], [240, "index-216"], [240, "index-63"], [240, "index-64"], [240, "index-65"], [240, "index-66"], [240, "index-67"]], "rfc 7232": [[240, "index-165"], [240, "index-181"]], "rfc 7233": [[240, "index-157"], [240, "index-185"]], "rfc 7235": [[240, "index-170"], [240, "index-176"]], "rfc 7238": [[240, "index-168"]], "rfc 7540": [[240, "index-188"]], "rfc 7725": [[240, "index-197"]], "rfc 8297": [[240, "index-150"]], "rfc 8470": [[240, "index-192"]], "http (standard module)": [[240, "index-0"]], "badstatusline": [[241, "http.client.BadStatusLine"]], "cannotsendheader": [[241, "http.client.CannotSendHeader"]], "cannotsendrequest": [[241, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[241, "http.client.HTTPConnection"]], "httpexception": [[241, "http.client.HTTPException"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[241, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[241, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[241, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[241, "http.client.HTTP_PORT"]], "improperconnectionstate": [[241, "http.client.ImproperConnectionState"]], "incompleteread": [[241, "http.client.IncompleteRead"]], "invalidurl": [[241, "http.client.InvalidURL"]], "linetoolong": [[241, "http.client.LineTooLong"]], "notconnected": [[241, "http.client.NotConnected"]], "rfc 7230": [[241, "index-4"], [394, "index-19"]], "remotedisconnected": [[241, "http.client.RemoteDisconnected"]], "responsenotready": [[241, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[241, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[241, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[241, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[241, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.fileno"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.getresponse"]], "getstatus() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.getstatus"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.headers"]], "http.client": [[241, "module-http.client"]], "http.client (standard module)": [[241, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[241, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[241, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[241, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.url"]], "urllib.request": [[241, "index-1"], [394, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[241, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.LWPCookieJar"]], "loaderror": [[242, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[242, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[242, "index-1"], [242, "index-15"], [242, "index-21"], [242, "index-23"], [242, "index-24"], [242, "index-3"], [242, "index-4"], [242, "index-6"], [243, "index-0"], [243, "index-2"], [243, "index-3"], [243, "index-4"], [243, "index-5"], [243, "index-6"], [243, "index-7"]], "rfc 2964": [[242, "index-10"]], "rfc 2965": [[242, "index-0"], [242, "index-11"], [242, "index-12"], [242, "index-13"], [242, "index-14"], [242, "index-16"], [242, "index-17"], [242, "index-18"], [242, "index-19"], [242, "index-2"], [242, "index-20"], [242, "index-22"], [242, "index-25"], [242, "index-5"], [242, "index-7"], [242, "index-8"], [242, "index-9"], [394, "index-20"], [394, "index-21"], [394, "index-5"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[242, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.discard"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[242, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[242, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[242, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[242, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[242, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[243, "http.cookies.BaseCookie"]], "cookieerror": [[243, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[243, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[243, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[243, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[243, "http.cookies.Morsel.coded_value"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.copy"]], "http.cookies": [[243, "module-http.cookies"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[243, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[243, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[243, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[243, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.output"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[243, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[243, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[243, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[243, "http.cookies.BaseCookie.value_encode"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[244, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[244, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[244, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[244, "index-1"], [393, "index-2"], [393, "index-4"], [393, "index-6"], [393, "index-7"], [468, "index-10"], [468, "index-13"], [477, "index-44"], [479, "index-35"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[244, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[244, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[244, "index-3"], [244, "module-http.server"]], "httpd": [[244, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[244, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[244, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[246, "index-4"]], "cut": [[246, "index-4"]], "idlestartup": [[246, "index-5"], [482, "index-186"], [482, "index-191"], [482, "index-216"]], "integrated development environment": [[246, "index-0"]], "module browser": [[246, "index-1"]], "pep 434": [[246, "index-7"], [468, "index-16"]], "pythonstartup": [[246, "index-6"], [320, "index-0"], [334, "index-7"], [352, "index-18"], [437, "index-5"], [454, "envvar-PYTHONSTARTUP"], [454, "index-8"], [476, "index-40"], [476, "index-41"], [482, "index-187"], [482, "index-192"], [482, "index-217"]], "paste": [[246, "index-4"]], "path browser": [[246, "index-1"]], "python editor": [[246, "index-0"]], "run script": [[246, "index-2"]], "set breakpoint": [[246, "index-4"]], "breakpoints": [[246, "index-4"]], "debugger": [[246, "index-3"], [297, "index-2"], [352, "index-11"], [352, "index-29"], [364, "index-1"]], "idlelib": [[246, "module-idlelib"]], "stack viewer": [[246, "index-3"]], "imap4": [[247, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[247, "imaplib.IMAP4"]], "imap4.abort": [[247, "imaplib.IMAP4.abort"]], "imap4.error": [[247, "imaplib.IMAP4.error"]], "imap4.readonly": [[247, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[247, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[247, "imaplib.IMAP4_SSL"]], "imap4_stream": [[247, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[247, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[247, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[247, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[247, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[247, "imaplib.ParseFlags"]], "rfc 1730": [[247, "index-2"]], "rfc 2060": [[247, "index-1"], [247, "index-7"]], "rfc 2342": [[247, "index-6"], [463, "index-19"]], "rfc 3501": [[247, "index-8"]], "rfc 5161": [[247, "index-3"], [477, "index-35"]], "rfc 6855": [[247, "index-4"], [247, "index-5"], [477, "index-36"], [477, "index-37"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[247, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[247, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[247, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[247, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[247, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[248, "index-2"]], "imghdr": [[248, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[248, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[248, "imghdr.what"]], "c_builtin (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.C_BUILTIN"]], "c_extension (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.C_EXTENSION"]], "nullimporter (imp \u4e2d\u7684\u985e\u5225)": [[249, "imp.NullImporter"]], "pkg_directory (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.PKG_DIRECTORY"]], "py_compiled (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.PY_COMPILED"]], "py_frozen (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.PY_FROZEN"]], "py_source (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.PY_SOURCE"]], "acquire_lock() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.acquire_lock"]], "byte-code": [[249, "index-1"], [311, "index-0"]], "cache_from_source() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.cache_from_source"]], "find_module() (imp.nullimporter \u7684\u65b9\u6cd5)": [[249, "imp.NullImporter.find_module"]], "find_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.find_module"]], "get_magic() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.get_magic"]], "get_suffixes() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.get_suffixes"]], "get_tag() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.get_tag"]], "load_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.load_module"]], "lock_held() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.lock_held"]], "new_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.new_module"]], "release_lock() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.release_lock"]], "reload() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.reload"]], "source_from_cache() (\u65bc imp \u6a21\u7d44\u4e2d)": [[249, "imp.source_from_cache"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.FileLoader"]], "finder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.Finder"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[250, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.ModuleSpec"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[250, "index-0"]], "pep 3120": [[250, "index-10"], [434, "index-1"], [469, "index-4"]], "pep 366": [[250, "index-4"], [324, "index-7"], [431, "index-11"], [431, "index-12"], [431, "index-22"], [431, "index-24"], [475, "index-22"]], "pep 488": [[250, "index-22"], [250, "index-25"], [250, "index-7"], [311, "index-2"], [361, "index-4"], [454, "index-11"], [454, "index-13"], [454, "index-14"], [454, "index-15"], [477, "index-24"], [477, "index-25"], [477, "index-52"], [482, "index-259"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.PathFinder"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.ResourceLoader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.SourcelessFileLoader"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.__import__"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.all_suffixes"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.cached"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.util.LazyLoader.factory"]], "find_loader() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.find_loader"]], "find_loader() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.find_loader"]], "find_loader() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.find_loader"]], "find_module() (importlib.abc.finder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Finder.find_module"]], "find_module() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.MetaPathFinder.find_module"]], "find_module() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.find_module"]], "find_module() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.PathFinder.find_module"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.import_module"]], "importlib": [[250, "module-importlib"]], "importlib.abc": [[250, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source method": [[250, "index-16"]], "importlib.machinery": [[250, "module-importlib.machinery"]], "importlib.util": [[250, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.invalidate_caches"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.is_package"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.loader_state"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.module_from_spec"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[250, "importlib.abc.FileLoader.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourcelessFileLoader.name"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[250, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[250, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourcelessFileLoader.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.path_stats"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.resolve_name"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.set_data"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[251, "index-0"]], "importlib.metadata": [[251, "module-importlib.metadata"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.Package"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.Resource"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.as_file"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.contents"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.files"]], "importlib.resources": [[252, "module-importlib.resources"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.is_resource"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.open_binary"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.open_text"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.path"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.read_binary"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.read_text"]], "resourcereader (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.ResourceReader"]], "traversable (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.Traversable"]], "traversableresources (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.TraversableResources"]], "__truediv__() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.__truediv__"]], "contents() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.contents"]], "files() (importlib.resources.abc.traversableresources \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.TraversableResources.files"]], "importlib.resources.abc": [[253, "module-importlib.resources.abc"]], "is_dir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.is_dir"]], "is_file() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.is_file"]], "is_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.is_resource"]], "iterdir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.iterdir"]], "joinpath() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.joinpath"]], "name (importlib.resources.abc.traversable \u7684\u5c6c\u6027)": [[253, "importlib.resources.abc.Traversable.name"]], "open() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.open"]], "open_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.open_resource"]], "read_bytes() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.read_bytes"]], "read_text() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.read_text"]], "resource_path() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.resource_path"]], "--details": [[255, "cmdoption-inspect-details"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.BoundArguments"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_NEWLOCALS"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_VARKEYWORDS"]], "frameinfo (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.FrameInfo"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Parameter"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Signature"]], "traceback (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Traceback"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[255, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.cleandoc"]], "code_context (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.code_context"]], "code_context (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.code_context"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.empty"]], "filename (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.filename"]], "filename (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.filename"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.formatargvalues"]], "frame (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.frame"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[255, "inspect.Signature.from_callable"]], "function (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.function"]], "function (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.function"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.get_annotations"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getargvalues"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmembers"]], "getmembers_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmembers_static"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsourcelines"]], "index (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.index"]], "index (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.index"]], "inspect": [[255, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[255, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethoddescriptor"]], "ismethodwrapper() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethodwrapper"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.kwargs"]], "lineno (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.lineno"]], "lineno (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.lineno"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.parameters"]], "positions (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.positions"]], "positions (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.positions"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[255, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.unwrap"]], "internet": [[256, "index-0"]], "world wide web": [[256, "index-0"], [393, "index-0"], [395, "index-0"]], "socket": [[256, "index-1"], [337, "index-0"], [337, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[258, "io.IncrementalNewlineDecoder"]], "pep 597": [[258, "index-7"], [471, "index-12"], [482, "index-67"]], "pep 686": [[258, "index-1"], [293, "index-5"]], "pythonwarndefaultencoding": [[258, "index-3"], [454, "envvar-PYTHONWARNDEFAULTENCODING"], [454, "index-26"], [471, "index-17"], [482, "index-68"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[258, "io.TextIOWrapper"]], "unsupportedoperation": [[258, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[258, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[258, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[258, "io.StringIO.getvalue"]], "io": [[258, "module-io"], [427, "index-53"]], "io module": [[258, "index-0"]], "io.incrementalnewlinedecoder class": [[258, "index-5"]], "io.textiowrapper class": [[258, "index-4"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[258, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[258, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[258, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[258, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[258, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[258, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[258, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.writelines"]], "addressvalueerror": [[259, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[259, "ipaddress.NetmaskValueError"]], "rfc 2373": [[259, "index-1"], [259, "index-3"], [259, "index-5"]], "rfc 3056": [[259, "index-12"]], "rfc 3171": [[259, "index-0"]], "rfc 3330": [[259, "index-4"]], "rfc 3879": [[259, "index-9"]], "rfc 3927": [[259, "index-6"]], "rfc 4007": [[259, "index-11"], [259, "index-8"]], "rfc 4193": [[259, "index-10"]], "rfc 4291": [[259, "index-7"], [482, "index-52"]], "rfc 4380": [[259, "index-13"]], "rfc 5735": [[259, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_network"]], "ipaddress": [[259, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.accumulate"]], "batched() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.batched"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[261, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.islice"]], "itertools": [[261, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.zip_longest"]], "--compact": [[262, "cmdoption-json.tool-indent"]], "--json-lines": [[262, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[262, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[262, "cmdoption-json.tool-indent"]], "--sort-keys": [[262, "cmdoption-json.tool-sort-keys"]], "--tab": [[262, "cmdoption-json.tool-indent"]], "attrdict (json \u4e2d\u7684\u985e\u5225)": [[262, "json.AttrDict"]], "jsondecodeerror": [[262, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[262, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[262, "json.JSONEncoder"]], "rfc 4627": [[262, "index-1"], [262, "index-3"]], "rfc 7159": [[262, "index-0"], [262, "index-2"], [262, "index-4"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[262, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.encode"]], "infile": [[262, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.iterencode"]], "json": [[262, "module-json"], [445, "index-1"]], "json.tool": [[262, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[262, "cmdoption-json.tool-arg-infile"], [262, "cmdoption-json.tool-arg-outfile"], [262, "cmdoption-json.tool-h"], [262, "cmdoption-json.tool-indent"], [262, "cmdoption-json.tool-json-lines"], [262, "cmdoption-json.tool-no-ensure-ascii"], [262, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.msg"]], "outfile": [[262, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[262, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.issoftkeyword"]], "keyword": [[263, "module-keyword"], [434, "index-13"], [434, "index-14"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.lazycache"]], "linecache": [[265, "module-linecache"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CRNCYSTR"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_TIME"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.RADIXCHAR"]], "rfc 1766": [[266, "index-4"], [266, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.YESEXPR"]], "_locale": [[266, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.atoi"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.dgettext"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getdefaultlocale"]], "getencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getencoding"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.gettext"]], "locale": [[266, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.BufferingFormatter"]], "errors": [[267, "index-0"], [428, "index-13"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Handler"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.LoggerAdapter"]], "pep 282": [[267, "index-1"], [332, "index-2"], [464, "index-11"], [464, "index-12"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.__init__"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.disable"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[267, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getChild"]], "getchildren() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getChildren"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getEffectiveLevel"]], "gethandlerbyname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getHandlerByName"]], "gethandlernames() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getHandlerNames"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLevelName"]], "getlevelnamesmapping() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLevelNamesMapping"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[267, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.handleError"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.lastResort"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.log"]], "logging": [[267, "index-0"], [267, "module-logging"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.makeRecord"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[267, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.propagate"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.listen"]], "logging.config": [[268, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[269, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.createSocket"]], "createsocket() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[269, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[269, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[269, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMADecompressor"]], "lzmaerror": [[270, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.is_check_supported"]], "lzma": [[270, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[270, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.BabylMessage"]], "externalclasherror": [[271, "mailbox.ExternalClashError"]], "formaterror": [[271, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Message"]], "nosuchmailboxerror": [[271, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[271, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.close"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.lock"]], "mailbox": [[271, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[272, "index-0"]], "rfc 1524": [[272, "index-1"], [272, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[272, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[272, "mailcap.getcaps"]], "mailcap": [[272, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.loads"]], "marshal": [[274, "module-marshal"]], "shelve": [[274, "index-0"], [330, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atanh"]], "cbrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cbrt"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.exp"]], "exp2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.exp2"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log2"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sqrt"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[276, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.common_types"]], "content type": [[276, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.knownfiles"]], "mime.types": [[276, "index-2"]], "mimetypes": [[276, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_WILLNEED"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_ANONYMOUS"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_SHARED"]], "map_stack (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_STACK"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[278, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.madvise"]], "mmap": [[278, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[278, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[279, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[279, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[279, "modulefinder.ReplacePackage"]], "modulefinder": [[279, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[279, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[279, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[279, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.OpenView"]], "pep 594#msilib": [[281, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[281, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[281, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[281, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.mapping"]], "msi": [[281, "index-0"]], "msilib": [[281, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[281, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.text"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_UNLCK"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.locking"]], "msvcrt": [[282, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[283, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[283, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Process"]], "processerror": [[283, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[283, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[283, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[283, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[283, "module-multiprocessing"]], "multiprocessing.manager()": [[283, "multiprocessing.Manager"]], "multiprocessing.connection": [[283, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[283, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[283, "module-multiprocessing.managers"]], "multiprocessing.pool": [[283, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[283, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.set_executable"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.wait"]], "named shared memory": [[284, "index-0"]], "posix shared memory": [[284, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[284, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory": [[284, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[284, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[284, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[286, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[286, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[286, "netrc.netrc.authenticators"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[286, "netrc.netrc.hosts"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[286, "netrc.netrc.macros"]], "netrc": [[286, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[286, "netrc.netrc"]], "pep 594#nis": [[287, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.match"]], "nis": [[287, "module-nis"]], "nntp": [[288, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[288, "nntplib.NNTP"]], "nntpdataerror": [[288, "nntplib.NNTPDataError"]], "nntperror": [[288, "nntplib.NNTPError"]], "nntppermanenterror": [[288, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[288, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[288, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[288, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[288, "nntplib.NNTP_SSL"]], "network news transfer protocol": [[288, "index-0"]], "pep 594": [[288, "index-12"], [472, "index-2"], [472, "index-31"], [473, "index-2"], [473, "index-3"], [482, "index-18"], [482, "index-29"], [482, "index-30"], [482, "index-34"], [482, "index-8"]], "rfc 2980": [[288, "index-4"], [288, "index-9"]], "rfc 3977": [[288, "index-10"], [288, "index-2"], [288, "index-6"], [288, "index-7"], [288, "index-8"]], "rfc 4642": [[288, "index-5"]], "rfc 977": [[288, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[288, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[288, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[288, "nntplib.NNTP.nntp_version"]], "nntplib": [[288, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[288, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[289, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[289, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[289, "numbers.Complex.imag"]], "numbers": [[289, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[289, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[289, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__and__"]], "__call__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__call__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.attrgetter"]], "call() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.call"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.not_"]], "operator": [[291, "module-operator"], [344, "index-13"], [344, "index-7"], [427, "index-68"], [429, "index-60"], [429, "index-61"], [429, "index-69"], [429, "index-70"], [429, "index-88"], [429, "index-97"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.OptionParser"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPE_CHECKER"]], "action (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.nargs"]], "optparse": [[292, "module-optparse"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.type"]], "..": [[293, "index-46"]], "/ (slash)": [[293, "index-47"], [293, "index-49"], [344, "index-13"], [426, "index-32"], [429, "index-67"]], ": (colon)": [[293, "index-51"], [340, "index-3"], [345, "index-2"], [426, "index-16"], [426, "index-18"], [426, "index-28"], [426, "index-3"], [426, "index-34"], [426, "index-4"], [426, "index-40"], [426, "index-6"], [426, "index-9"], [429, "index-17"], [429, "index-44"], [429, "index-90"], [434, "index-25"], [435, "index-15"], [440, "index-6"]], "; (semicolon)": [[293, "index-51"], [426, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_TRAPPED"]], "clone_files (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_FILES"]], "clone_fs (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_FS"]], "clone_newcgroup (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWCGROUP"]], "clone_newipc (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWIPC"]], "clone_newnet (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWNET"]], "clone_newns (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWNS"]], "clone_newpid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWPID"]], "clone_newtime (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWTIME"]], "clone_newuser (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWUSER"]], "clone_newuts (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWUTS"]], "clone_sighand (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_SIGHAND"]], "clone_sysvsem (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_SYSVSEM"]], "clone_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_THREAD"]], "clone_vm (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_VM"]], "comspec": [[293, "index-43"], [348, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[293, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_WRONLY"]], "pep 524": [[293, "index-53"], [478, "index-1"], [478, "index-31"], [478, "index-32"], [482, "index-229"], [482, "index-230"]], "pidfd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PIDFD_NONBLOCK"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_OPEN"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[293, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_CUR"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_END"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_MNOWAIT"]], "sf_nocache (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_NOCACHE"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_NONBLOCK"]], "unc paths": [[293, "index-28"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[293, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.altsep"]], "and os.makedirs()": [[293, "index-28"]], "changing": [[293, "index-26"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[293, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[293, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.cpu_count"]], "creating": [[293, "index-28"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.defpath"]], "deleting": [[293, "index-21"], [293, "index-29"], [332, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.devnull"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.dup2"]], "effective id": [[293, "index-8"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.environb"]], "environment variables": [[293, "index-17"], [293, "index-21"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgroups"]], "gethostbyaddr() (in module socket)": [[293, "index-20"]], "gethostname() (in module socket)": [[293, "index-20"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getxattr"]], "group": [[293, "index-12"], [293, "index-9"]], "id": [[293, "index-13"], [293, "index-16"], [427, "index-1"]], "id of parent": [[293, "index-14"]], "id, setting": [[293, "index-19"]], "in pathnames": [[293, "index-45"], [293, "index-46"], [293, "index-47"], [293, "index-49"], [293, "index-50"]], "in pathnames (windows)": [[293, "index-48"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_file"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.kill"]], "killing": [[293, "index-37"], [293, "index-38"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[293, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listdir"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lockf"]], "login_tty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.login_tty"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[293, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.openpty"]], "os": [[293, "module-os"], [306, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[293, "os.DirEntry.path"]], "path separator (posix)": [[293, "index-51"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.preadv"]], "process": [[293, "index-12"], [293, "index-13"], [293, "index-14"], [293, "index-15"], [293, "index-18"], [293, "index-37"], [293, "index-38"], [293, "index-9"]], "pty": [[293, "index-23"], [309, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[293, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[293, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_yield"]], "scheduling priority": [[293, "index-15"], [293, "index-18"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setgroups"]], "setns() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setns"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setsid"]], "setting": [[293, "index-17"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setxattr"]], "signalling": [[293, "index-37"], [293, "index-38"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_birthtime"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.startfile"]], "stat": [[293, "index-30"], [342, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[293, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[293, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.times"]], "traversal": [[293, "index-31"], [293, "index-32"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unsetenv"]], "unshare() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unshare"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.urandom"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.walk"]], "walking": [[293, "index-31"], [293, "index-32"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.writev"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.dirname"]], "environment variables expansion": [[294, "index-9"]], "environment variables expansion (windows)": [[294, "index-9"], [404, "index-0"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getsize"]], "home directory expansion": [[294, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isabs"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isfile"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.normpath"]], "operations": [[294, "index-0"], [296, "index-0"], [344, "index-1"], [344, "index-16"], [344, "index-5"]], "os.path": [[294, "module-os.path"]], "pwd": [[294, "index-2"], [310, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.splitext"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.supports_unicode_filenames"]], "~ (tilde)": [[294, "index-1"], [344, "index-16"], [429, "index-62"]], "audiodev": [[295, "index-1"]], "mixerdev": [[295, "index-2"]], "ossaudioerror": [[295, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[295, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[295, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[295, "ossaudiodev.openmixer"]], "ossaudiodev": [[295, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[296, "index-1"], [476, "index-30"], [476, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PurePath"]], "purepath.anchor (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.anchor"]], "purepath.drive (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.drive"]], "purepath.name (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.name"]], "purepath.parent (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.parent"]], "purepath.parents (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.parents"]], "purepath.parts (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.parts"]], "purepath.root (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.root"]], "purepath.stem (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.stem"]], "purepath.suffix (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.suffix"]], "purepath.suffixes (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[296, "pathlib.PurePath.suffixes"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.WindowsPath"]], "absolute() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.absolute"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[296, "pathlib.Path.cwd"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[296, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_file"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.lchmod"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.mkdir"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.owner"]], "pathlib": [[296, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rmdir"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.stat"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.unlink"]], "walk() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.walk"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_name"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.write_text"]], "! (pdb command)": [[297, "pdbcommand-0"]], ".pdbrc": [[297, "index-2"]], "pdb (class in pdb)": [[297, "index-1"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[297, "pdb.Pdb"]], "alias (pdb command)": [[297, "pdbcommand-alias"]], "args (pdb command)": [[297, "pdbcommand-args"]], "break (pdb command)": [[297, "pdbcommand-break"]], "clear (pdb command)": [[297, "pdbcommand-clear"]], "commands (pdb command)": [[297, "pdbcommand-commands"]], "condition (pdb command)": [[297, "pdbcommand-condition"]], "continue (pdb command)": [[297, "pdbcommand-continue"]], "debug (pdb command)": [[297, "pdbcommand-debug"]], "disable (pdb command)": [[297, "pdbcommand-disable"]], "display (pdb command)": [[297, "pdbcommand-display"]], "down (pdb command)": [[297, "pdbcommand-down"]], "enable (pdb command)": [[297, "pdbcommand-enable"]], "help (pdb command)": [[297, "pdbcommand-help"]], "ignore (pdb command)": [[297, "pdbcommand-ignore"]], "interact (pdb command)": [[297, "pdbcommand-interact"]], "jump (pdb command)": [[297, "pdbcommand-jump"]], "list (pdb command)": [[297, "pdbcommand-list"]], "ll (pdb command)": [[297, "pdbcommand-ll"]], "next (pdb command)": [[297, "pdbcommand-next"]], "p (pdb command)": [[297, "pdbcommand-p"]], "pdb": [[297, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.post_mortem"]], "pp (pdb command)": [[297, "pdbcommand-pp"]], "quit (pdb command)": [[297, "pdbcommand-quit"]], "restart (pdb command)": [[297, "pdbcommand-restart"]], "return (pdb command)": [[297, "pdbcommand-return"]], "retval (pdb command)": [[297, "pdbcommand-retval"]], "run (pdb command)": [[297, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.set_trace"]], "source (pdb command)": [[297, "pdbcommand-source"]], "step (pdb command)": [[297, "pdbcommand-step"]], "tbreak (pdb command)": [[297, "pdbcommand-tbreak"]], "unalias (pdb command)": [[297, "pdbcommand-unalias"]], "undisplay (pdb command)": [[297, "pdbcommand-undisplay"]], "until (pdb command)": [[297, "pdbcommand-until"]], "up (pdb command)": [[297, "pdbcommand-up"]], "whatis (pdb command)": [[297, "pdbcommand-whatis"]], "where (pdb command)": [[297, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.DEFAULT_PROTOCOL"]], "external data representation": [[299, "index-1"], [407, "index-0"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[299, "index-2"], [464, "index-21"], [464, "index-22"], [464, "index-23"]], "pep 3154": [[299, "index-3"], [476, "index-12"], [476, "index-39"], [482, "index-183"]], "pep 574": [[299, "index-4"], [299, "index-8"], [480, "index-36"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.PickleBuffer"]], "pickleerror": [[299, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.Pickler"]], "picklingerror": [[299, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.Unpickler"]], "unpicklingerror": [[299, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getnewargs_ex__"]], "__getstate__() (copy protocol)": [[299, "index-7"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getstate__"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[299, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[299, "object.__reduce_ex__"]], "__setstate__() (copy protocol)": [[299, "index-7"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[299, "object.__setstate__"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[299, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[299, "pickle.Pickler.fast"]], "find_class() (pickle protocol)": [[299, "index-9"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.find_class"]], "flattening": [[299, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.loads"]], "marshalling": [[299, "index-0"]], "objects": [[299, "index-0"], [344, "index-8"]], "persistence": [[299, "index-0"]], "persistent": [[299, "index-0"]], "persistent_id (pickle protocol)": [[299, "index-6"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.persistent_id"]], "persistent_load (pickle protocol)": [[299, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.persistent_load"]], "pickling": [[299, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[299, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[299, "pickle.PickleBuffer.release"]], "serializing": [[299, "index-0"]], "--annotate": [[300, "cmdoption-pickletools-a"]], "--indentlevel": [[300, "cmdoption-pickletools-l"]], "--memo": [[300, "cmdoption-pickletools-m"]], "--output": [[300, "cmdoption-pickletools-o"], [420, "cmdoption-zipapp-o"]], "--preamble": [[300, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.optimize"]], "pickletools": [[300, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[300, "cmdoption-pickletools-a"], [300, "cmdoption-pickletools-l"], [300, "cmdoption-pickletools-m"], [300, "cmdoption-pickletools-o"], [300, "cmdoption-pickletools-p"]], "pep 594#pipes": [[301, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[301, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.open"]], "pipes": [[301, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.reset"]], "impimporter (pkgutil \u4e2d\u7684\u985e\u5225)": [[302, "pkgutil.ImpImporter"]], "imploader (pkgutil \u4e2d\u7684\u985e\u5225)": [[302, "pkgutil.ImpLoader"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[302, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.iter_modules"]], "pkgutil": [[302, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.node"]], "platform": [[303, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[304, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.loads"]], "plist": [[304, "index-0"]], "plistlib": [[304, "module-plistlib"]], "property list": [[304, "index-0"]], "pop3": [[305, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[305, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[305, "poplib.POP3_SSL"]], "rfc 1939": [[305, "index-1"], [305, "index-2"]], "rfc 2449": [[305, "index-4"]], "rfc 2595": [[305, "index-3"], [305, "index-6"]], "rfc 6856": [[305, "index-5"], [477, "index-38"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.pass_"]], "poplib": [[305, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[306, "posix.environ"]], "large files": [[306, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[307, "pprint.PrettyPrinter"]], "eval": [[307, "index-1"], [307, "index-2"], [344, "index-63"], [435, "index-44"], [436, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pformat"]], "placeholder": [[307, "index-0"], [321, "index-0"], [363, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pp"]], "pprint": [[307, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[308, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[308, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.add"]], "cprofile": [[308, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.create_stats"]], "deterministic profiling": [[308, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_stats"]], "profile": [[308, "module-profile"]], "profiling, deterministic": [[308, "index-0"]], "pstats": [[308, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[308, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[308, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwuid"]], "-": [[311, "cmdoption-python-m-py_compile"]], "--quiet": [[311, "cmdoption-python-m-py_compile-q"]], "<file>": [[311, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[311, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[311, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[311, "py_compile.compile"]], "py_compile": [[311, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[311, "cmdoption-python-m-py_compile"], [311, "cmdoption-python-m-py_compile-arg-file"], [311, "cmdoption-python-m-py_compile-q"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.parent"]], "pyclbr": [[312, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[312, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[312, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.super"]], "pager": [[313, "index-1"]], "pythondocs": [[313, "index-2"]], "documentation": [[313, "index-0"]], "generation": [[313, "index-0"]], "help": [[313, "index-0"], [450, "index-0"]], "online": [[313, "index-0"]], "pydoc": [[313, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.ErrorString"]], "expat": [[314, "index-0"]], "expaterror": [[314, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.GetInputContext"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_amplification_limit_breach (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_argument (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_buffer (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_BUFFER"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_reserved_namespace_uri (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI"]], "xml_error_reserved_prefix_xml (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML"]], "xml_error_reserved_prefix_xmlns (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[314, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[314, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[314, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[314, "module-xml.parsers.expat.model"]], "empty": [[316, "queue.Empty"], [427, "index-20"], [429, "index-15"], [429, "index-9"]], "full": [[316, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.qsize"]], "queue": [[316, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.encodestring"]], "quopri": [[317, "module-quopri"]], "quoted-printable": [[317, "index-0"]], "quoted-printable encoding": [[317, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[318, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[318, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.betavariate"]], "binomialvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.binomialvariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.gauss"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.getrandbits"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randint"]], "random": [[318, "module-random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.sample"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.seed"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.weibullvariate"]], "() (parentheses)": [[319, "index-15"], [344, "index-35"], [344, "index-45"], [426, "index-28"], [426, "index-40"], [429, "index-22"], [429, "index-47"], [429, "index-8"], [435, "index-6"]], "(?": [[319, "index-16"]], "(?!": [[319, "index-22"]], "(?#": [[319, "index-20"]], "(?:": [[319, "index-17"]], "(?<!": [[319, "index-24"]], "(?<=": [[319, "index-23"]], "(?=": [[319, "index-21"]], "(?p<": [[319, "index-18"]], "(?p=": [[319, "index-19"]], "*+": [[319, "index-7"]], "*?": [[319, "index-6"]], "++": [[319, "index-7"]], "+?": [[319, "index-6"]], "?+": [[319, "index-7"]], "??": [[319, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.MULTILINE"]], "noflag (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.NOFLAG"]], "regexflag (re \u4e2d\u7684\u985e\u5225)": [[319, "re.RegexFlag"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.S"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.X"]], "\\a": [[319, "index-26"], [319, "index-36"], [434, "index-23"]], "\\b": [[319, "index-28"], [319, "index-27"], [319, "index-36"], [434, "index-23"]], "\\d": [[319, "index-30"], [319, "index-29"]], "\\s": [[319, "index-32"], [319, "index-31"]], "\\w": [[319, "index-34"], [319, "index-33"]], "\\z": [[319, "index-35"]], "\\\\": [[319, "index-36"], [434, "index-23"]], "\\f": [[319, "index-36"], [434, "index-23"]], "\\g": [[319, "index-38"]], "\\r": [[319, "index-36"], [434, "index-23"]], "\\t": [[319, "index-36"], [434, "index-23"]], "\\v": [[319, "index-36"], [434, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[319, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.groups"]], "in regular expressions": [[319, "index-0"], [319, "index-1"], [319, "index-10"], [319, "index-11"], [319, "index-12"], [319, "index-13"], [319, "index-14"], [319, "index-15"], [319, "index-16"], [319, "index-17"], [319, "index-18"], [319, "index-19"], [319, "index-2"], [319, "index-20"], [319, "index-21"], [319, "index-22"], [319, "index-23"], [319, "index-24"], [319, "index-25"], [319, "index-26"], [319, "index-27"], [319, "index-28"], [319, "index-29"], [319, "index-3"], [319, "index-30"], [319, "index-31"], [319, "index-32"], [319, "index-33"], [319, "index-34"], [319, "index-35"], [319, "index-36"], [319, "index-37"], [319, "index-38"], [319, "index-4"], [319, "index-5"], [319, "index-6"], [319, "index-7"], [319, "index-8"], [319, "index-9"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[319, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[319, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[319, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[319, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.re"]], "scanf()": [[319, "index-39"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.subn"]], "{} (curly brackets)": [[319, "index-8"], [345, "index-2"], [429, "index-16"], [429, "index-17"], [434, "index-25"]], "| (vertical bar)": [[319, "index-14"], [344, "index-16"], [429, "index-76"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.read_init_file"]], "readline": [[320, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[321, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.aRepr"]], "fillvalue (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.fillvalue"]], "indent (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.indent"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[321, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[321, "reprlib.Repr.repr1"]], "reprlib": [[321, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.prlimit"]], "resource": [[322, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.setrlimit"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[323, "rlcompleter.Completer.complete"]], "rlcompleter": [[323, "module-rlcompleter"]], "pep 338": [[324, "index-6"], [431, "index-25"], [454, "index-1"], [466, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[324, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[324, "runpy.run_path"]], "runpy": [[324, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.enterabs"]], "event scheduling": [[325, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[325, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.run"]], "sched": [[325, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[325, "sched.scheduler"]], "pep 506": [[326, "index-0"], [478, "index-28"], [482, "index-249"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[326, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.randbits"]], "secrets": [[326, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_urlsafe"]], "security considerations": [[327, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.PIPE_BUF"]], "winsock": [[328, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[328, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[328, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[328, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.poll"]], "popen() (in module os)": [[328, "index-1"], [427, "index-53"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.register"]], "select": [[328, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.select"]], "socket() (in module socket)": [[328, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.DevpollSelector"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[329, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[329, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[329, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.select"]], "selectors": [[329, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[330, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[330, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[330, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.read_token"]], "shlex": [[331, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[331, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.wordchars"]], "samefileerror": [[332, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[332, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copyfileobj"]], "copying": [[332, "index-0"]], "copying files": [[332, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.rmtree"]], "shutil": [[332, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.CTRL_C_EVENT"]], "handlers (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Handlers"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_VIRTUAL"]], "itimererror": [[333, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGSEGV"]], "sigstkflt (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGSTKFLT"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_UNBLOCK"]], "sigmasks (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Sigmasks"]], "signals (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Signals"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.siginterrupt"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.valid_signals"]], "--user-base": [[334, "cmdoption-site-user-base"]], "--user-site": [[334, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.ENABLE_USER_SITE"]], "pep 370": [[334, "index-11"], [454, "index-19"], [454, "index-38"], [454, "index-39"], [467, "index-7"], [482, "index-7"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.PREFIXES"]], "pythonuserbase": [[334, "index-10"], [334, "index-9"], [454, "envvar-PYTHONUSERBASE"], [467, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.addsitedir"]], "comment": [[334, "index-2"], [434, "index-4"], [448, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.main"]], "package": [[334, "index-4"], [431, "index-3"], [431, "index-4"], [431, "index-5"]], "site": [[334, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[334, "cmdoption-site-user-base"], [334, "cmdoption-site-user-site"]], "site-packages": [[334, "index-1"]], "sitecustomize": [[334, "index-5"]], "usercustomize": [[334, "index-6"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.LMTP"]], "rfc 1869": [[335, "index-2"], [335, "index-5"]], "rfc 4954": [[335, "index-7"], [335, "index-8"]], "rfc 821": [[335, "index-1"], [335, "index-4"]], "smtp": [[335, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.SMTP"]], "smtpauthenticationerror": [[335, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[335, "smtplib.SMTPConnectError"]], "smtpdataerror": [[335, "smtplib.SMTPDataError"]], "smtpexception": [[335, "smtplib.SMTPException"]], "smtpheloerror": [[335, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[335, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[335, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[335, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[335, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[335, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.SMTP_SSL"]], "simple mail transfer protocol": [[335, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[335, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[336, "index-3"]], "sndhdr": [[336, "module-sndhdr"]], "tests (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.tests"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_CAN"]], "af_hyperv (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_HYPERV"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_UNIX"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CMSG_SPACE"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_TIME_STAMP"]], "hvsocket_address_flag_passthru (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU"]], "hvsocket_connected_suspend (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECTED_SUSPEND"]], "hvsocket_connect_timeout (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECT_TIMEOUT"]], "hvsocket_connect_timeout_max (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECT_TIMEOUT_MAX"]], "hv_guid_broadcast (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_BROADCAST"]], "hv_guid_children (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_CHILDREN"]], "hv_guid_loopback (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_LOOPBACK"]], "hv_guid_wildcard (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_WILDCARD"]], "hv_guid_zero (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_ZERO"]], "hv_protocol_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_PROTOCOL_RAW"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "local_creds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.LOCAL_CREDS"]], "local_creds_persistent (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.LOCAL_CREDS_PERSISTENT"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_CAN"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_RDS"]], "rfc 3493": [[337, "index-15"]], "rfc 3542": [[337, "index-3"], [482, "index-179"]], "scm_creds2 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SCM_CREDS2"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOMAXCONN"]], "so_incoming_cpu (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SO_INCOMING_CPU"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.fromshare"]], "gaierror": [[337, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.has_ipv6"]], "herror": [[337, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[337, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.socketpair"]], "struct": [[337, "index-14"], [347, "module-struct"]], "timeout": [[337, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingUDPServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingUDPServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.allow_reuse_address"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.process_request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.request_queue_size"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.serve_forever"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.socket_type"]], "socketserver": [[338, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.verify_request"]], "pep 594#spwd": [[339, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[339, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[339, "spwd.getspnam"]], "spwd": [[339, "module-spwd"]], "--version": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [379, "cmdoption-trace-version"], [454, "cmdoption-version"]], "-v": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [357, "cmdoption-tarfile-v"], [366, "cmdoption-timeit-v"], [387, "cmdoption-unittest-discover-v"], [454, "cmdoption-V"], [454, "cmdoption-1"]], "blob (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Blob"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Cursor"]], "dataerror": [[340, "sqlite3.DataError"]], "databaseerror": [[340, "sqlite3.DatabaseError"]], "integrityerror": [[340, "sqlite3.IntegrityError"]], "interfaceerror": [[340, "sqlite3.InterfaceError"]], "internalerror": [[340, "sqlite3.InternalError"]], "notsupportederror": [[340, "sqlite3.NotSupportedError"]], "operationalerror": [[340, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[340, "index-4"], [482, "index-9"]], "pep 249": [[340, "index-0"], [340, "index-1"], [340, "index-5"], [340, "index-6"], [466, "index-24"], [466, "index-25"], [482, "index-32"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.PrepareProtocol"]], "programmingerror": [[340, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Row"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.arraysize"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.backup"]], "blobopen() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.blobopen"]], "close() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.close"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_function"]], "create_window_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_window_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.description"]], "deserialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.deserialize"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchone"]], "getlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.getlimit"]], "in sql statements": [[340, "index-2"], [340, "index-3"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[340, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.paramstyle"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql] \u547d\u4ee4\u5217\u9078\u9805": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"]], "read() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.read"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.rowcount"]], "seek() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.seek"]], "serialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.serialize"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_trace_callback"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.setinputsizes"]], "setlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.setlimit"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[340, "module-sqlite3"]], "sqlite_errorcode (sqlite3.error \u7684\u5c6c\u6027)": [[340, "sqlite3.Error.sqlite_errorcode"]], "sqlite_errorname (sqlite3.error \u7684\u5c6c\u6027)": [[340, "sqlite3.Error.sqlite_errorname"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.sqlite_version_info"]], "tell() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.tell"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.version_info"]], "write() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.write"]], "(use in module ssl)": [[341, "index-0"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[341, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[341, "index-2"], [471, "index-28"], [471, "index-29"], [471, "index-34"], [471, "index-8"], [473, "index-4"], [482, "index-6"], [482, "index-63"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_status"]], "rfc 1422": [[341, "index-16"], [341, "index-17"]], "rfc 1750": [[341, "index-5"]], "rfc 3280": [[341, "index-10"]], "rfc 4086": [[341, "index-18"]], "rfc 5246": [[341, "index-20"], [341, "index-9"]], "rfc 5280": [[341, "index-19"], [341, "index-6"], [477, "index-43"], [477, "index-53"]], "rfc 5929": [[341, "index-11"]], "rfc 6066": [[341, "index-13"], [341, "index-21"], [341, "index-8"]], "rfc 7301": [[341, "index-12"], [341, "index-7"], [477, "index-42"]], "rfc 7525": [[341, "index-22"]], "ssl": [[341, "index-1"], [341, "module-ssl"]], "sslcertverificationerror": [[341, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLContext"]], "ssleoferror": [[341, "ssl.SSLEOFError"]], "sslerror": [[341, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[341, "index-3"], [341, "index-4"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLSocket"]], "sslsyscallerror": [[341, "ssl.SSLSyscallError"]], "sslwantreaderror": [[341, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[341, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[341, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.SSLv3"]], "secure sockets layer": [[341, "index-1"]], "tls": [[341, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_3"]], "transport layer security": [[341, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.VerifyMode"]], "x509 certificate": [[341, "index-15"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.cert_time_to_seconds"]], "certificates": [[341, "index-14"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[341, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_verify_locations"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[341, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.wrap_socket"]], "wrap_socket() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.write_eof"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[343, "statistics.NormalDist"]], "statisticserror": [[343, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[343, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.samples"]], "statistics": [[343, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.zscore"]], "!=": [[344, "index-7"], [429, "index-77"]], "& (ampersand)": [[344, "index-16"], [429, "index-74"]], "(see also string)": [[344, "index-27"]], "//": [[344, "index-13"], [429, "index-67"]], "< (less)": [[344, "index-7"], [345, "index-3"], [347, "index-1"], [429, "index-77"]], "<<": [[344, "index-16"], [429, "index-71"]], "<=": [[344, "index-7"], [429, "index-77"]], "==": [[344, "index-7"], [429, "index-77"]], "> (greater)": [[344, "index-7"], [345, "index-3"], [347, "index-1"], [429, "index-77"]], ">=": [[344, "index-7"], [429, "index-77"]], ">>": [[344, "index-16"], [429, "index-71"]], "alias": [[344, "index-55"]], "c": [[344, "index-11"], [344, "index-15"], [347, "index-0"], [427, "index-13"], [427, "index-4"], [427, "index-40"], [429, "index-77"], [434, "index-23"]], "false": [[344, "index-4"], [344, "index-66"], [344, "index-1"], [427, "index-11"]], "false (built-in object)": [[344, "index-3"]], "generic": [[344, "index-55"], [427, "index-5"]], "genericalias": [[344, "index-55"]], "none (built-in object)": [[344, "index-3"]], "pep 237": [[344, "index-71"], [344, "index-72"], [463, "index-10"], [465, "index-1"], [465, "index-16"], [469, "index-1"]], "pep 3118": [[344, "index-49"], [467, "index-15"], [469, "index-33"], [475, "index-31"], [475, "index-4"], [475, "index-40"], [480, "index-8"], [482, "index-211"], [482, "index-218"], [482, "index-263"]], "pep 461": [[344, "index-48"], [477, "index-7"], [477, "index-8"]], "true": [[344, "index-4"], [344, "index-66"], [344, "index-2"], [427, "index-11"]], "union": [[344, "index-58"], [344, "index-58"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[344, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[344, "instance.__class__"]], "__code__ (function object attribute)": [[344, "index-62"]], "__dict__ (object \u7684\u5c6c\u6027)": [[344, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[344, "contextmanager.__enter__"]], "__eq__() (instance method)": [[344, "index-9"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.__eq__"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[344, "contextmanager.__exit__"]], "__ge__() (instance method)": [[344, "index-9"]], "__gt__() (instance method)": [[344, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[344, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[344, "iterator.__iter__"]], "__le__() (instance method)": [[344, "index-9"]], "__lt__() (instance method)": [[344, "index-9"]], "__missing__()": [[344, "index-52"]], "__mro__ (class \u7684\u5c6c\u6027)": [[344, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[344, "definition.__name__"]], "__ne__() (instance method)": [[344, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[344, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[344, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[344, "class.__subclasses__"]], "__unpacked__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__unpacked__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.add"]], "and": [[344, "index-4"], [344, "index-6"], [429, "index-74"], [429, "index-84"]], "annotation": [[344, "index-54"]], "append() (sequence method)": [[344, "index-23"]], "arithmetic": [[344, "index-13"], [429, "index-1"], [429, "index-59"], [429, "index-64"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[344, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[344, "int.as_integer_ratio"]], "assignment": [[344, "index-23"], [427, "index-22"], [427, "index-46"], [427, "index-50"], [435, "index-12"], [435, "index-14"], [435, "index-15"], [435, "index-4"], [435, "index-6"], [435, "index-8"], [435, "index-9"]], "binary": [[344, "index-12"], [347, "index-0"], [429, "index-64"], [429, "index-73"]], "binary operator": [[344, "index-13"], [429, "index-69"], [429, "index-70"]], "binary sequence types": [[344, "index-38"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[344, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[344, "int.bit_length"]], "bitwise": [[344, "index-16"], [429, "index-59"], [429, "index-73"], [429, "index-74"], [429, "index-75"], [429, "index-76"]], "built-in": [[344, "index-0"], [427, "index-41"]], "bytearray (%)": [[344, "index-44"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[344, "bytearray"]], "bytearray.splitlines method": [[344, "index-43"]], "bytes (%)": [[344, "index-44"]], "bytes (\u5167\u5efa\u985e\u5225)": [[344, "bytes"]], "bytes.splitlines method": [[344, "index-43"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[344, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[344, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.cast"]], "ceil() (in module math)": [[344, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[344, "str.center"]], "chaining": [[344, "index-7"], [429, "index-78"], [435, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[344, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.clear"]], "clear() (sequence method)": [[344, "index-23"]], "comparing": [[344, "index-8"]], "comparison": [[344, "index-7"], [429, "index-77"]], "comparisons": [[344, "index-7"], [427, "index-76"], [429, "index-78"]], "complex": [[344, "index-13"], [427, "index-101"], [427, "index-14"]], "concatenation": [[344, "index-19"]], "conjugate() (complex number method)": [[344, "index-14"]], "container": [[344, "index-17"], [427, "index-3"], [427, "index-45"]], "context management": [[344, "index-53"]], "context management protocol": [[344, "index-53"]], "context manager": [[344, "index-53"], [427, "index-103"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.contiguous"]], "conversions": [[344, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[344, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.copy"]], "copy() (sequence method)": [[344, "index-23"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.count"]], "count() (sequence method)": [[344, "index-19"]], "count() (str \u7684\u65b9\u6cd5)": [[344, "str.count"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.decode"]], "del": [[344, "index-23"], [344, "index-51"], [427, "index-71"], [435, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[344, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[344, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[344, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[344, "str.expandtabs"]], "extend() (sequence method)": [[344, "index-23"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[344, "str.find"]], "floor() (in module math)": [[344, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[344, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[344, "str.format_map"]], "formatting": [[344, "index-44"]], "formatting, printf": [[344, "index-34"]], "formatting, string (%)": [[344, "index-34"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[344, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[344, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[344, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.hex"]], "hexadecimal": [[344, "index-12"]], "if": [[344, "index-1"], [426, "index-18"], [426, "index-3"], [429, "index-12"], [429, "index-88"]], "immutable": [[344, "index-21"], [427, "index-17"], [429, "index-20"], [429, "index-7"]], "in": [[344, "index-10"], [344, "index-19"], [426, "index-6"], [429, "index-80"]], "in printf-style formatting": [[344, "index-35"], [344, "index-36"], [344, "index-45"], [344, "index-46"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.index"]], "index() (sequence method)": [[344, "index-19"]], "index() (str \u7684\u65b9\u6cd5)": [[344, "str.index"]], "insert() (sequence method)": [[344, "index-23"]], "interpolation": [[344, "index-44"]], "interpolation, printf": [[344, "index-34"]], "interpolation, string (%)": [[344, "index-34"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.intersection_update"]], "io.stringio": [[344, "index-28"]], "is": [[344, "index-7"], [429, "index-81"]], "is not": [[344, "index-7"], [429, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[344, "float.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[344, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[344, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[344, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[344, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[344, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[344, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[344, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[344, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[344, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[344, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[344, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[344, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[344, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.itemsize"]], "iteration": [[344, "index-17"]], "iteration over": [[344, "index-17"]], "iterator": [[344, "index-17"], [427, "index-37"], [435, "index-26"]], "iterator protocol": [[344, "index-17"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[344, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[344, "dict.keys"]], "list (\u5167\u5efa\u985e\u5225)": [[344, "list"]], "literals": [[344, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[344, "str.ljust"]], "loop": [[344, "index-20"], [426, "index-4"], [426, "index-6"], [435, "index-30"], [435, "index-33"]], "loop over": [[344, "index-20"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[344, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[344, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "str.maketrans"]], "masking": [[344, "index-16"]], "max": [[344, "index-19"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[344, "memoryview"]], "methods": [[344, "index-31"], [344, "index-42"]], "min": [[344, "index-19"]], "mro() (class \u7684\u65b9\u6cd5)": [[344, "class.mro"]], "mutable": [[344, "index-22"], [427, "index-22"], [435, "index-4"], [435, "index-9"]], "mutable sequence": [[344, "index-20"], [427, "index-22"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.ndim"]], "not": [[344, "index-6"], [429, "index-83"]], "not in": [[344, "index-10"], [344, "index-19"], [429, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.obj"]], "octal": [[344, "index-12"]], "operation": [[344, "index-19"], [429, "index-58"], [429, "index-59"], [429, "index-64"], [429, "index-71"], [429, "index-73"], [429, "index-82"], [435, "index-20"]], "operations on": [[344, "index-14"], [344, "index-16"], [344, "index-19"], [344, "index-23"], [344, "index-51"]], "or": [[344, "index-4"], [344, "index-6"], [429, "index-75"], [429, "index-76"], [429, "index-85"]], "over mutable sequence": [[344, "index-20"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[344, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[344, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.pop"]], "pop() (sequence method)": [[344, "index-23"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[344, "dict.popitem"]], "printf-style formatting": [[344, "index-34"], [344, "index-44"]], "range": [[344, "index-26"], [426, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[344, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.remove"]], "remove() (sequence method)": [[344, "index-23"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[344, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[344, "str.removesuffix"]], "repetition": [[344, "index-19"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[344, "str.replace"]], "reverse() (sequence method)": [[344, "index-23"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[344, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[344, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[344, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[344, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[344, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[344, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[344, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[344, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.shape"]], "shifting": [[344, "index-16"], [429, "index-71"]], "sort() (list \u7684\u65b9\u6cd5)": [[344, "list.sort"]], "space": [[344, "index-36"], [344, "index-46"], [345, "index-4"], [434, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[344, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[344, "str.splitlines"]], "sprintf-style formatting": [[344, "index-34"], [344, "index-44"]], "start (range \u7684\u5c6c\u6027)": [[344, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[344, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[344, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[344, "range.stop"]], "str (built-in class)": [[344, "index-27"], [344, "index-29"], [344, "index-30"]], "str (\u5167\u5efa\u985e\u5225)": [[344, "str"]], "str.splitlines method": [[344, "index-33"]], "strides (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[344, "str.strip"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.suboffsets"]], "subscript": [[344, "index-19"], [344, "index-23"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[344, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.symmetric_difference_update"]], "text sequence type": [[344, "index-27"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[344, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[344, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[344, "str.translate"]], "trunc() (in module math)": [[344, "index-15"]], "truth": [[344, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[344, "tuple"]], "type annotation; type hint": [[344, "index-54"]], "types": [[344, "index-0"], [344, "index-14"], [344, "index-16"], [344, "index-19"], [344, "index-21"], [344, "index-22"], [344, "index-23"], [344, "index-51"], [344, "index-64"], [384, "module-types"]], "unary operator": [[344, "index-13"], [429, "index-60"], [429, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[344, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[344, "str.upper"]], "value": [[344, "index-1"], [426, "index-31"]], "values": [[344, "index-66"], [435, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[344, "dict.values"]], "while": [[344, "index-1"], [426, "index-4"], [435, "index-30"], [435, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[344, "str.zfill"]], "\u904b\u7b97\u5b50": [[344, "index-10"], [344, "index-13"], [344, "index-16"], [344, "index-19"], [344, "index-4"], [344, "index-6"], [344, "index-7"], [429, "index-58"], [429, "index-62"], [429, "index-65"], [429, "index-66"], [429, "index-67"], [429, "index-68"], [429, "index-71"], [429, "index-74"], [429, "index-75"], [429, "index-76"], [429, "index-77"], [429, "index-80"], [429, "index-81"], [429, "index-83"], [429, "index-84"], [429, "index-85"]], ", (comma)": [[345, "index-8"], [426, "index-16"], [426, "index-28"], [426, "index-40"], [429, "index-10"], [429, "index-15"], [429, "index-16"], [429, "index-17"], [429, "index-44"], [429, "index-47"], [429, "index-91"], [435, "index-18"], [435, "index-34"], [435, "index-43"], [435, "index-45"], [435, "index-6"]], "= (equals)": [[345, "index-3"], [347, "index-1"], [426, "index-31"], [427, "index-83"], [429, "index-47"], [434, "index-25"], [435, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[345, "string.Formatter"]], "pep 292": [[345, "index-12"], [465, "index-3"]], "pep 378": [[345, "index-18"], [468, "index-3"], [470, "index-1"]], "pep 682": [[345, "index-17"], [472, "index-22"]], "template (string \u4e2d\u7684\u985e\u5225)": [[345, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.get_field"]], "get_identifiers() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.get_identifiers"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.hexdigits"]], "in string formatting": [[345, "index-10"], [345, "index-2"], [345, "index-3"], [345, "index-4"], [345, "index-5"], [345, "index-7"], [345, "index-8"]], "in template strings": [[345, "index-13"]], "is_valid() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.is_valid"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.safe_substitute"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[345, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.whitespace"]], "z": [[345, "index-5"]], "rfc 3454": [[346, "index-0"], [346, "index-1"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.map_table_b3"]], "stringprep": [[346, "module-stringprep"]], "@ (at)": [[347, "index-1"], [426, "index-29"], [426, "index-41"], [429, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[347, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[347, "struct.Struct.format"]], "in struct format strings": [[347, "index-1"], [347, "index-2"], [347, "index-3"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.pack_into"]], "packing": [[347, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[347, "struct.Struct.size"]], "structures": [[347, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.unpack_from"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[348, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[348, "index-0"], [465, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.SW_HIDE"]], "subprocesserror": [[348, "subprocess.SubprocessError"]], "systemroot": [[348, "index-4"]], "timeoutexpired": [[348, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[348, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[348, "module-subprocess"]], "subprocess module": [[348, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[349, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setsampwidth"]], "sunau": [[349, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[351, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.lookup"]], "symtable": [[351, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[351, "symtable.symtable"]], "pep 3149": [[352, "index-0"], [474, "index-6"], [482, "index-258"]], "pep 421": [[352, "index-15"], [352, "index-16"], [475, "index-19"]], "pythonbreakpoint": [[352, "index-3"], [352, "index-4"], [352, "index-5"], [454, "envvar-PYTHONBREAKPOINT"], [479, "index-12"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._debugmallocstats"]], "_emscripten_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._emscripten_info"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._getframe"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.abiflags"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.addaudithook"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.audit"]], "auditing": [[352, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.base_prefix"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.byteorder"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.copyright"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.dllhandle"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.dont_write_bytecode"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.excepthook"]], "exception() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exception"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.gettrace"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getwindowsversion"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.hash_info"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.hexversion"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.implementation"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.int_info"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.intern"]], "interpreter prompts": [[352, "index-27"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.is_finalizing"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_value"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.meta_path"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.modules"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.prefix"]], "profile function": [[352, "index-10"], [352, "index-28"], [364, "index-2"], [364, "index-3"]], "profiler": [[352, "index-10"], [352, "index-28"]], "prompts, interpreter": [[352, "index-27"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.ps2"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.pycache_prefix"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.settrace"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdout"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.thread_info"]], "trace function": [[352, "index-11"], [352, "index-29"], [364, "index-0"], [364, "index-1"]], "traceback": [[352, "index-8"], [380, "index-0"], [380, "module-traceback"], [426, "index-11"], [427, "index-63"], [435, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.unraisablehook"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.version_info"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.warnoptions"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.winver"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig._get_preferred_schemes"]], "configuration information": [[354, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[354, "sysconfig.parse_config_h"]], "sysconfig": [[354, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[355, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[355, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[355, "syslog.setlogmask"]], "syslog": [[355, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[355, "syslog.syslog"]], "nannynag": [[356, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[356, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[356, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[356, "tabnanny.process_tokens"]], "tabnanny": [[356, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[356, "tabnanny.verbose"]], "--create": [[357, "cmdoption-tarfile-create"], [421, "cmdoption-zipfile-create"]], "--extract": [[357, "cmdoption-tarfile-extract"], [421, "cmdoption-zipfile-extract"]], "--list": [[357, "cmdoption-tarfile-list"], [421, "cmdoption-zipfile-list"]], "--test": [[357, "cmdoption-tarfile-test"], [421, "cmdoption-zipfile-test"]], "--verbose": [[357, "cmdoption-tarfile-v"], [366, "cmdoption-timeit-v"], [387, "cmdoption-unittest-discover-v"]], "-c": [[357, "cmdoption-tarfile-c"], [379, "cmdoption-trace-C"], [379, "cmdoption-trace-c"], [387, "cmdoption-unittest-c"], [420, "cmdoption-zipapp-c"], [421, "cmdoption-zipfile-c"], [454, "cmdoption-c"]], "-t": [[357, "cmdoption-tarfile-t"], [379, "cmdoption-trace-T"], [379, "cmdoption-trace-t"], [387, "cmdoption-unittest-discover-t"], [421, "cmdoption-zipfile-t"]], "compressionerror": [[357, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.DEFAULT_FORMAT"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.ENCODING"]], "extracterror": [[357, "tarfile.ExtractError"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.GNU_FORMAT"]], "headererror": [[357, "tarfile.HeaderError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.PAX_FORMAT"]], "readerror": [[357, "tarfile.ReadError"]], "streamerror": [[357, "tarfile.StreamError"]], "tarerror": [[357, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[357, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[357, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.addfile"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.close"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.extractfile"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[357, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[357, "tarfile.TarInfo.fromtarfile"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[357, "tarfile.TarFile.next"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[357, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[357, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[357, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.pax_headers"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.size"]], "tarfile": [[357, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[357, "cmdoption-tarfile-c"], [357, "cmdoption-tarfile-create"], [357, "cmdoption-tarfile-e"], [357, "cmdoption-tarfile-extract"], [357, "cmdoption-tarfile-l"], [357, "cmdoption-tarfile-list"], [357, "cmdoption-tarfile-t"], [357, "cmdoption-tarfile-test"], [357, "cmdoption-tarfile-v"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[357, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[357, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[358, "index-5"]], "rfc 854": [[358, "index-2"], [358, "index-3"]], "telnet": [[358, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[358, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[358, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[358, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[359, "tempfile.SpooledTemporaryFile"]], "temp": [[359, "index-8"], [460, "index-7"]], "tmp": [[359, "index-9"]], "tmpdir": [[359, "index-7"], [482, "index-11"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[359, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.TemporaryFile"]], "file name": [[359, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.mktemp"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[359, "tempfile.tempdir"]], "tempfile": [[359, "module-tempfile"]], "temporary": [[359, "index-0"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcgetattr"]], "tcgetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcgetwinsize"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcsetattr"]], "tcsetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[360, "termios.tcsetwinsize"]], "termios": [[360, "module-termios"]], "tty": [[360, "index-0"], [382, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.ALWAYS_EQ"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[361, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[361, "index-2"]], "py_debug (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.Py_DEBUG"]], "resourcedenied": [[361, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[361, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[361, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[361, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[361, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[361, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[361, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.bind_unix_socket"]], "busy_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.busy_retry"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.findfile"]], "flush_std_streams() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.flush_std_streams"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[361, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.get_original_stdout"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.make_zip_script"]], "match_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.match_test"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[361, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[361, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_gzip"]], "requires_limited_api() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_limited_api"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[361, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.rmtree"]], "run_doctest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.run_doctest"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.run_python_until_end"]], "run_unittest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.run_unittest"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[361, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[361, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_match_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.set_match_tests"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.skip_unless_xattr"]], "sleeping_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.sleeping_retry"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.temp_umask"]], "test": [[361, "module-test"], [429, "index-80"], [429, "index-81"]], "test.support": [[361, "module-test.support"]], "test.support.bytecode_helper": [[361, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[361, "module-test.support.import_helper"]], "test.support.os_helper": [[361, "module-test.support.os_helper"]], "test.support.script_helper": [[361, "module-test.support.script_helper"]], "test.support.socket_helper": [[361, "module-test.support.socket_helper"]], "test.support.threading_helper": [[361, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[361, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[361, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[361, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[361, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[363, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[363, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[363, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[363, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[363, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[363, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.tabsize"]], "textwrap": [[363, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[363, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[363, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[363, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.BoundedSemaphore"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[364, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[364, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[364, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[364, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[364, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[364, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[364, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[364, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[364, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[364, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[364, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[364, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[364, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[364, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[364, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[364, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[364, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[364, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[364, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[364, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[364, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.setprofile"]], "setprofile_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.setprofile_all_threads"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.settrace"]], "settrace_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.settrace_all_threads"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[364, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[364, "threading.Thread.start"]], "threading": [[364, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[364, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[364, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[364, "threading.Condition.wait_for"]], "2-digit years": [[365, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.CLOCK_UPTIME_RAW"]], "cpu time": [[365, "index-12"], [365, "index-7"]], "coordinated universal time": [[365, "index-4"]], "daylight saving time": [[365, "index-5"]], "greenwich mean time": [[365, "index-4"]], "rfc 1123": [[365, "index-21"]], "tz": [[365, "index-13"], [365, "index-14"], [365, "index-15"], [365, "index-16"], [365, "index-17"], [365, "index-18"]], "utc": [[365, "index-4"]], "year 2038": [[365, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.asctime"]], "benchmarking": [[365, "index-12"], [365, "index-6"], [365, "index-7"], [366, "index-0"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.daylight"]], "epoch": [[365, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.process_time_ns"]], "processor time": [[365, "index-12"], [365, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[365, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[365, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.thread_time_ns"]], "time": [[365, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.timezone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[365, "time.tzset"]], "--number": [[366, "cmdoption-timeit-n"]], "--process": [[366, "cmdoption-timeit-p"]], "--repeat": [[366, "cmdoption-timeit-r"]], "--setup": [[366, "cmdoption-timeit-s"]], "--unit": [[366, "cmdoption-timeit-u"]], "-n": [[366, "cmdoption-timeit-n"]], "-u": [[366, "cmdoption-timeit-u"], [454, "cmdoption-u"]], "performance": [[366, "index-0"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[366, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[366, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[366, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[366, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[366, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[366, "timeit.repeat"]], "timeit": [[366, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[366, "cmdoption-timeit-h"], [366, "cmdoption-timeit-n"], [366, "cmdoption-timeit-p"], [366, "cmdoption-timeit-r"], [366, "cmdoption-timeit-s"], [366, "cmdoption-timeit-u"], [366, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[366, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[366, "timeit.timeit"]], "gui": [[367, "index-0"]], "graphical user interface": [[367, "index-0"]], "tk": [[367, "index-0"]], "tkinter": [[367, "index-0"], [368, "module-tkinter"]], "display": [[368, "index-0"], [429, "index-15"], [429, "index-16"], [429, "index-17"]], "exception (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[368, "tkinter.EXCEPTION"]], "readable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[368, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[368, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[368, "tkinter.Tk"]], "tk option data types": [[368, "index-4"]], "writable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[368, "tkinter.WRITABLE"]], "bind (widgets)": [[368, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[368, "tkinter.Tk.children"]], "createfilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[368, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[368, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[368, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[368, "tkinter.Tk.master"]], "packing (widgets)": [[368, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[368, "tkinter.Tk.tk"]], "window manager (widgets)": [[368, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[369, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[369, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[369, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[370, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[370, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[370, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[370, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[370, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[370, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[371, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[371, "tkinter.font.nametofont"]], "tkinter.font": [[371, "module-tkinter.font"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.messagebox.Message"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.askyesnocancel"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[372, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[372, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[373, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[373, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[373, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.TList"]], "tix": [[374, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[374, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[374, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[375, "module-tkinter.ttk"]], "ttk": [[375, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[375, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ERRORTOKEN"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[376, "token.tok_name"]], "token": [[376, "module-token"], [434, "index-0"]], "--exact": [[377, "cmdoption-tokenize-e"]], "tokenerror": [[377, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[377, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[377, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[377, "tokenize.open"]], "tokenize": [[377, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[377, "cmdoption-tokenize-e"], [377, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[377, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[377, "tokenize.untokenize"]], "tomldecodeerror": [[378, "tomllib.TOMLDecodeError"]], "load() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[378, "tomllib.load"]], "loads() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[378, "tomllib.loads"]], "tomllib": [[378, "module-tomllib"]], "--count": [[379, "cmdoption-trace-c"]], "--coverdir": [[379, "cmdoption-trace-C"]], "--file": [[379, "cmdoption-trace-f"]], "--ignore-dir": [[379, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[379, "cmdoption-trace-ignore-module"]], "--listfuncs": [[379, "cmdoption-trace-l"]], "--missing": [[379, "cmdoption-trace-m"]], "--no-report": [[379, "cmdoption-trace-R"]], "--report": [[379, "cmdoption-trace-r"]], "--summary": [[379, "cmdoption-trace-s"]], "--timing": [[379, "cmdoption-trace-g"]], "--trace": [[379, "cmdoption-trace-t"]], "--trackcalls": [[379, "cmdoption-trace-T"]], "-g": [[379, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[379, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[379, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[379, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[379, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[379, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[379, "trace.Trace.runfunc"]], "trace": [[379, "module-trace"], [427, "index-63"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[379, "cmdoption-trace-C"], [379, "cmdoption-trace-R"], [379, "cmdoption-trace-T"], [379, "cmdoption-trace-c"], [379, "cmdoption-trace-f"], [379, "cmdoption-trace-g"], [379, "cmdoption-trace-help"], [379, "cmdoption-trace-ignore-dir"], [379, "cmdoption-trace-ignore-module"], [379, "cmdoption-trace-l"], [379, "cmdoption-trace-m"], [379, "cmdoption-trace-r"], [379, "cmdoption-trace-s"], [379, "cmdoption-trace-t"], [379, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[379, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[379, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[380, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[380, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[380, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.__context__"]], "__notes__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.__notes__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.clear_frames"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.exc_type"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[380, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.extract_tb"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[380, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[380, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[380, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_exception_only"]], "format_frame_summary() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[380, "traceback.StackSummary.format_frame_summary"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[380, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[380, "traceback.StackSummary.from_list"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.msg"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.offset"]], "print() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[380, "traceback.TracebackException.print"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[380, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[380, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[381, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[381, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[381, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[381, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[381, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[381, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[381, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[381, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[381, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[381, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[381, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[381, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[381, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[381, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[381, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[381, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[381, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[381, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[381, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[381, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[381, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[381, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[381, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[381, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[381, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[381, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[381, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[381, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[381, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[381, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[381, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[381, "tracemalloc.Snapshot.traces"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[382, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[382, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[383, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[383, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.stamp"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.tracer"]], "turtle": [[383, "module-turtle"]], "turtledemo": [[383, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[383, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[384, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[384, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[384, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[384, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.NotImplementedType"]], "pep 3115": [[384, "index-0"], [426, "index-43"], [427, "index-87"], [469, "index-14"], [475, "index-29"]], "pep 560": [[384, "index-1"], [384, "index-2"], [427, "index-84"], [427, "index-93"], [479, "index-21"], [479, "index-33"], [482, "index-199"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[384, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[384, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[384, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[384, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[384, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[384, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[384, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[384, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[384, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[384, "types.MappingProxyType.get"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[384, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[384, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.prepare_class"]], "replace() (types.codetype \u7684\u65b9\u6cd5)": [[384, "types.CodeType.replace"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[384, "types.resolve_bases"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[384, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Literal"]], "literalstring (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.LiteralString"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.NamedTuple"]], "never (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Never"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.NoReturn"]], "notrequired (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.NotRequired"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.OrderedDict"]], "pep 544": [[385, "index-25"], [385, "index-45"], [385, "index-5"], [480, "index-18"]], "pep 586": [[385, "index-36"], [385, "index-7"], [471, "index-30"], [480, "index-16"], [481, "index-27"]], "pep 589": [[385, "index-48"], [385, "index-8"], [480, "index-15"]], "pep 591": [[385, "index-38"], [385, "index-86"], [385, "index-9"], [480, "index-17"]], "pep 593": [[385, "index-10"], [385, "index-103"], [385, "index-40"], [481, "index-17"], [481, "index-5"], [482, "index-160"]], "pep 612": [[385, "index-12"], [385, "index-21"], [385, "index-22"], [385, "index-32"], [385, "index-33"], [385, "index-44"], [471, "index-21"], [471, "index-7"], [482, "index-53"], [482, "index-60"], [482, "index-75"], [482, "index-78"], [482, "index-80"]], "pep 613": [[385, "index-13"], [385, "index-29"], [471, "index-42"], [471, "index-6"], [482, "index-97"]], "pep 646": [[385, "index-14"], [385, "index-43"], [472, "index-13"], [472, "index-53"]], "pep 647": [[385, "index-15"], [385, "index-41"], [471, "index-24"], [482, "index-61"]], "pep 655": [[385, "index-101"], [385, "index-16"], [385, "index-49"], [472, "index-54"], [482, "index-21"]], "pep 673": [[385, "index-100"], [385, "index-17"], [472, "index-55"], [482, "index-37"]], "pep 675": [[385, "index-18"], [385, "index-99"], [472, "index-56"], [482, "index-27"]], "pep 681": [[385, "index-102"], [385, "index-19"], [472, "index-57"], [482, "index-19"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Protocol"]], "required (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Required"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Reversible"]], "self (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Self"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.TypeAlias"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.TypeVar"]], "typevartuple (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.TypeVarTuple"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Union"]], "unpack (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.Unpack"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[385, "typing.ValuesView"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[385, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[385, "typing.TypedDict.__required_keys__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[385, "typing.TypedDict.__total__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[385, "typing.ParamSpec.args"]], "assert_never() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.assert_never"]], "assert_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.assert_type"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.cast"]], "clear_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.clear_overloads"]], "dataclass_transform() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.dataclass_transform"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.get_origin"]], "get_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.get_overloads"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[385, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.overload"]], "reveal_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.reveal_type"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[385, "typing.type_check_only"]], "typing": [[385, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.category"]], "character": [[386, "index-0"], [427, "index-19"], [429, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.combining"]], "database": [[386, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.ucd_3_2_0"]], "unicodedata": [[386, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[386, "unicodedata.unidata_version"]], "--buffer": [[387, "cmdoption-unittest-b"]], "--catch": [[387, "cmdoption-unittest-c"]], "--failfast": [[387, "cmdoption-unittest-f"]], "--locals": [[387, "cmdoption-unittest-locals"]], "--pattern": [[387, "cmdoption-unittest-discover-p"]], "--start-directory": [[387, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[387, "cmdoption-unittest-discover-t"]], "-k": [[387, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[387, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[387, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[387, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[387, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[387, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.addCleanup"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[387, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[387, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.buffer"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[387, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.doModuleCleanups"]], "enterasynccontext() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[387, "unittest.IsolatedAsyncioTestCase.enterAsyncContext"]], "enterclasscontext() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[387, "unittest.TestCase.enterClassContext"]], "entercontext() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.enterContext"]], "entermodulecontext() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.enterModuleContext"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[387, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[387, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[387, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[387, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[387, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[387, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[387, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[387, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[387, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[387, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[387, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[387, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[387, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[387, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[387, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[387, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[387, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[387, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[387, "cmdoption-unittest-b"], [387, "cmdoption-unittest-c"], [387, "cmdoption-unittest-f"], [387, "cmdoption-unittest-k"], [387, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[387, "cmdoption-unittest-discover-p"], [387, "cmdoption-unittest-discover-s"], [387, "cmdoption-unittest-discover-t"], [387, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[387, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[388, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[388, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[388, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[388, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[388, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[388, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[388, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[388, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[388, "module-unittest.mock"]], "urllib": [[391, "module-urllib"]], "contenttooshorterror": [[392, "urllib.error.ContentTooShortError"]], "httperror": [[392, "urllib.error.HTTPError"]], "urlerror": [[392, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[392, "urllib.error.HTTPError.code"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[392, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[392, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[392, "urllib.error.URLError.reason"]], "urllib.error": [[392, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[393, "index-12"]], "rfc 1808": [[393, "index-1"], [393, "index-11"], [477, "index-45"]], "rfc 2368": [[393, "index-10"]], "rfc 2396": [[393, "index-3"], [393, "index-5"], [393, "index-9"], [477, "index-46"], [479, "index-34"]], "rfc 2732": [[393, "index-8"], [468, "index-11"], [474, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[393, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[393, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.parse_qsl"]], "parsing": [[393, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.quote_plus"]], "relative": [[393, "index-0"], [435, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urljoin"]], "urllib.parse": [[393, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[393, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.ProxyHandler"]], "rfc 2397": [[394, "index-8"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[394, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[394, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[394, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[394, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[394, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[394, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.get_method"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.getproxies"]], "getstatus() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[394, "urllib.response.addinfourl.getstatus"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[394, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[394, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_308() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.http_error_308"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[394, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.method"]], "no_proxy": [[394, "index-4"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[394, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[394, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[394, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[394, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[394, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[394, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[394, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[394, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[394, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[394, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[394, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[394, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.urlcleanup"]], "urllib.response": [[394, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[394, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[394, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[395, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[395, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[395, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[395, "module-urllib.robotparser"]], "ellinghouse, lance": [[396, "index-1"]], "jansen, jack": [[396, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[396, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[396, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[396, "uu.encode"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[397, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[397, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.bytes_le"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.fields"]], "getnode": [[397, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.is_safe"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[397, "uuid.SafeUUID.safe"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[397, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[397, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.urn"]], "uuid": [[397, "module-uuid"]], "uuid1": [[397, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.uuid1"]], "uuid3": [[397, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.uuid3"]], "uuid4": [[397, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.uuid4"]], "uuid5": [[397, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[397, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[397, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[398, "venv.EnvBuilder"]], "environments": [[398, "index-0"]], "pep 405": [[398, "index-1"], [475, "index-1"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[398, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[398, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[398, "module-venv"]], "virtual": [[398, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[399, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[399, "warnings.warn_explicit"]], "warnings": [[399, "index-0"], [399, "module-warnings"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[400, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[400, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.tell"]], "wave": [[400, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[400, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.CallableProxyType"]], "pep 205": [[401, "index-2"], [462, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[401, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[401, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[401, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[401, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[401, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[401, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[401, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[401, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[401, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[401, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[401, "module-weakref"]], "browser": [[402, "index-0"], [402, "index-1"]], "kdedir": [[402, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.get"]], "name (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.name"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[402, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[402, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[402, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[402, "webbrowser.register"]], "webbrowser": [[402, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[404, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[404, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[404, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[404, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[404, "winreg.PyHKEY.__exit__"]], "winreg": [[404, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[405, "winsound.SND_PURGE"]], "winsound": [[405, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.handlers.CGIHandler"]], "errorstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.types.ErrorStream"]], "filewrapper (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.types.FileWrapper"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.handlers.IISCGIHandler"]], "inputstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.types.InputStream"]], "pep 3333": [[406, "index-0"], [406, "index-1"], [406, "index-11"], [406, "index-12"], [406, "index-13"], [406, "index-14"], [406, "index-15"], [406, "index-16"], [406, "index-17"], [406, "index-18"], [406, "index-2"], [406, "index-3"], [406, "index-4"], [406, "index-6"], [406, "index-7"], [406, "index-8"], [406, "index-9"], [472, "index-25"], [474, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.handlers.SimpleHandler"]], "startresponse (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.types.StartResponse"]], "wsgiapplication (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[406, "wsgiref.types.WSGIApplication"]], "wsgienvironment (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[406, "wsgiref.types.WSGIEnvironment"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[406, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[406, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[406, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[406, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[406, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[406, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[406, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[406, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[406, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[406, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[406, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[406, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[406, "module-wsgiref"]], "wsgiref.handlers": [[406, "module-wsgiref.handlers"]], "wsgiref.headers": [[406, "module-wsgiref.headers"]], "wsgiref.simple_server": [[406, "module-wsgiref.simple_server"]], "wsgiref.types": [[406, "module-wsgiref.types"]], "wsgiref.util": [[406, "module-wsgiref.util"]], "wsgiref.validate": [[406, "module-wsgiref.validate"]], "conversionerror": [[407, "xdrlib.ConversionError"]], "pep 594#xdrlib": [[407, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[407, "xdrlib.Packer"]], "rfc 1014": [[407, "index-2"], [407, "index-3"]], "rfc 1832": [[407, "index-4"], [407, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[407, "xdrlib.Unpacker"]], "xdr": [[407, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[407, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[407, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[407, "module-xdrlib"]], "xml": [[408, "module-xml"]], "domexception": [[409, "xml.dom.DOMException"]], "domstringsizeerr": [[409, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[409, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[409, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[409, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[409, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[409, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[409, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[409, "xml.dom.InvalidStateErr"]], "namespaceerr": [[409, "xml.dom.NamespaceErr"]], "nodataallowederr": [[409, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[409, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[409, "xml.dom.NotFoundErr"]], "notsupportederr": [[409, "xml.dom.NotSupportedErr"]], "python_dom": [[409, "index-0"]], "syntaxerr": [[409, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[409, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[409, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[409, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[409, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[409, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[409, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[409, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[409, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[409, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[409, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[409, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[409, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[409, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[409, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[409, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[409, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[409, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[409, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[409, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[409, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[409, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[409, "xml.dom.Attr.value"]], "xml.dom": [[409, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[410, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[411, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[411, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[411, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[411, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[411, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[411, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[411, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[411, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[411, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[411, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[412, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.data"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.findtext"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.getroot"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[412, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[412, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[412, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude.default_loader()": [[412, "xml.etree.ElementInclude.default_loader"]], "xml.etree.elementinclude.include()": [[412, "xml.etree.ElementInclude.include"]], "xml.etree.elementtree": [[412, "module-xml.etree.ElementTree"]], "saxexception": [[413, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[413, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[413, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[413, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[413, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[413, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[413, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[413, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[413, "xml.sax.parseString"]], "xml.sax": [[413, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[414, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[414, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[414, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[415, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[415, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[416, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[416, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[416, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[416, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[416, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[418, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[418, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[418, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[418, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[418, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[418, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[419, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[419, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[419, "module-xmlrpc.server"]], "--compress": [[420, "cmdoption-zipapp-c"]], "--info": [[420, "cmdoption-zipapp-info"]], "--main": [[420, "cmdoption-zipapp-m"]], "--python": [[420, "cmdoption-zipapp-p"]], "executable zip files": [[420, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[420, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[420, "zipapp.get_interpreter"]], "zipapp": [[420, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[420, "cmdoption-zipapp-c"], [420, "cmdoption-zipapp-h"], [420, "cmdoption-zipapp-info"], [420, "cmdoption-zipapp-m"], [420, "cmdoption-zipapp-o"], [420, "cmdoption-zipapp-p"]], "--metadata-encoding": [[421, "cmdoption-zipfile-metadata-encoding"]], "badzipfile": [[421, "zipfile.BadZipFile"], [421, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.CRC"]], "largezipfile": [[421, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[421, "zipfile.Path"]], "path.stem (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.Path.stem"]], "path.suffix (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.Path.suffix"]], "path.suffixes (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.Path.suffixes"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[421, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[421, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[421, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[421, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[421, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[421, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[421, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[421, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.joinpath"]], "mkdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.mkdir"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[421, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[421, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[421, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[421, "zipfile.ZipFile.writestr"]], "zipfile": [[421, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[421, "cmdoption-zipfile-c"], [421, "cmdoption-zipfile-create"], [421, "cmdoption-zipfile-e"], [421, "cmdoption-zipfile-extract"], [421, "cmdoption-zipfile-l"], [421, "cmdoption-zipfile-list"], [421, "cmdoption-zipfile-metadata-encoding"], [421, "cmdoption-zipfile-t"], [421, "cmdoption-zipfile-test"]], "pep 273": [[422, "index-0"], [422, "index-1"], [464, "index-4"], [464, "index-5"]], "zipimporterror": [[422, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[422, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.exec_module"]], "find_loader() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.find_loader"]], "find_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.find_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[422, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[422, "zipimport.zipimporter.prefix"]], "zipimport": [[422, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[422, "zipimport.zipimporter"]], "cyclic redundancy check": [[423, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.adler32"]], "checksum": [[423, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[423, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[423, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[423, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[423, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[423, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[423, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[423, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[423, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[423, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[423, "zlib.Decompress.unused_data"]], "zlib": [[423, "module-zlib"]], "invalidtzpathwarning": [[424, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[424, "index-1"], [478, "index-17"], [478, "index-18"], [482, "index-234"]], "pep 615": [[424, "index-0"], [481, "index-16"], [481, "index-9"], [482, "index-124"]], "pythontzpath": [[424, "envvar-PYTHONTZPATH"], [424, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[424, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[424, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[424, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[424, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[424, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[424, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[424, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[424, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[424, "zoneinfo.reset_tzpath"]], "zoneinfo": [[424, "module-zoneinfo"]], "! patterns": [[426, "index-23"]], "->": [[426, "index-34"], [440, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[426, "index-23"]], "dedent token": [[426, "index-2"], [434, "index-9"]], "newline token": [[426, "index-2"], [434, "index-3"]], "pep 3107": [[426, "index-36"], [440, "index-16"], [469, "index-6"], [477, "index-9"], [479, "index-0"]], "pep 3129": [[426, "index-44"], [467, "index-18"]], "pep 318": [[426, "index-45"], [465, "index-12"], [465, "index-4"], [465, "index-5"]], "pep 570": [[426, "index-33"], [480, "index-23"], [480, "index-32"], [482, "index-175"]], "pep 614": [[426, "index-30"], [426, "index-42"], [481, "index-15"], [481, "index-3"], [482, "index-147"]], "pep 636": [[426, "index-20"], [426, "index-26"], [440, "index-15"], [471, "index-16"], [471, "index-2"]], "annotations": [[426, "index-34"], [440, "index-6"]], "as": [[426, "index-10"], [426, "index-16"], [426, "index-18"], [426, "index-9"], [435, "index-34"], [435, "index-35"]], "async": [[426, "index-47"]], "async def": [[426, "index-46"]], "async for": [[426, "index-48"], [429, "index-12"]], "async with": [[426, "index-49"]], "await": [[426, "index-47"], [429, "index-13"], [429, "index-57"]], "binding": [[426, "index-28"], [426, "index-40"], [428, "index-4"], [435, "index-34"], [435, "index-36"], [435, "index-4"], [435, "index-43"]], "break": [[426, "index-13"], [426, "index-15"], [426, "index-5"], [426, "index-7"], [435, "index-30"]], "case": [[426, "index-18"], [426, "index-18"]], "case block": [[426, "index-22"]], "class": [[426, "index-40"], [427, "index-45"], [427, "index-46"], [427, "index-49"], [427, "index-70"], [427, "index-88"], [429, "index-54"], [435, "index-24"]], "class definition": [[426, "index-40"], [426, "index-41"], [427, "index-83"]], "clause": [[426, "index-1"]], "compound": [[426, "index-0"]], "compound statement": [[426, "index-16"], [426, "index-18"], [426, "index-28"], [426, "index-3"], [426, "index-4"], [426, "index-40"], [426, "index-6"], [426, "index-9"]], "continue": [[426, "index-13"], [426, "index-15"], [426, "index-5"], [426, "index-7"], [435, "index-33"]], "dangling": [[426, "index-2"]], "def": [[426, "index-28"]], "default": [[426, "index-31"]], "definition": [[426, "index-28"], [426, "index-40"], [435, "index-24"]], "docstring": [[426, "index-40"]], "elif": [[426, "index-3"]], "else": [[426, "index-13"], [426, "index-2"], [426, "index-3"], [426, "index-4"], [426, "index-6"], [426, "index-9"], [429, "index-88"], [435, "index-31"]], "except clause": [[426, "index-10"]], "except_star": [[426, "index-12"]], "execution": [[426, "index-40"], [427, "index-63"], [428, "index-11"], [428, "index-2"]], "expression": [[426, "index-35"], [429, "index-0"], [429, "index-22"], [429, "index-23"], [429, "index-82"], [429, "index-88"], [429, "index-90"], [429, "index-91"], [435, "index-1"], [435, "index-2"]], "expression list": [[426, "index-40"], [429, "index-15"], [429, "index-16"], [429, "index-91"], [435, "index-18"]], "finally": [[426, "index-14"], [426, "index-9"], [435, "index-25"], [435, "index-32"], [435, "index-33"]], "for": [[426, "index-6"], [429, "index-12"], [435, "index-30"], [435, "index-33"], [440, "index-0"]], "frame": [[426, "index-40"], [427, "index-60"], [428, "index-2"]], "function annotations": [[426, "index-34"], [440, "index-6"]], "function definition": [[426, "index-27"], [426, "index-28"], [426, "index-29"], [426, "index-31"], [426, "index-32"]], "guard": [[426, "index-21"]], "inheritance": [[426, "index-40"]], "irrefutable case block": [[426, "index-22"]], "match": [[426, "index-18"], [426, "index-18"]], "name": [[426, "index-28"], [426, "index-40"], [428, "index-4"], [429, "index-3"], [429, "index-5"], [434, "index-10"], [435, "index-22"], [435, "index-34"], [435, "index-36"], [435, "index-4"], [435, "index-43"], [439, "index-1"]], "parameter list": [[426, "index-28"]], "pattern matching": [[426, "index-18"]], "return": [[426, "index-13"], [426, "index-15"], [435, "index-24"]], "statement": [[426, "index-0"], [426, "index-4"], [426, "index-6"], [427, "index-22"], [435, "index-0"], [435, "index-1"], [435, "index-14"], [435, "index-15"], [435, "index-30"], [435, "index-33"], [435, "index-4"], [435, "index-40"]], "suite": [[426, "index-1"]], "target": [[426, "index-6"], [435, "index-21"], [435, "index-31"], [435, "index-5"], [435, "index-6"]], "user-defined function": [[426, "index-28"], [427, "index-33"], [429, "index-52"]], "with": [[426, "index-16"], [427, "index-103"]], "with statement": [[426, "index-16"]], "\u95dc\u9375\u5b57": [[426, "index-12"], [426, "index-13"], [426, "index-14"], [426, "index-16"], [426, "index-18"], [426, "index-18"], [426, "index-3"], [426, "index-4"], [426, "index-47"], [426, "index-6"], [426, "index-9"], [429, "index-23"], [429, "index-57"], [435, "index-25"], [435, "index-31"], [435, "index-32"], [435, "index-33"], [435, "index-34"]], "ellipsis": [[427, "index-8"]], "java": [[427, "index-13"]], "notimplemented": [[427, "index-7"]], "pep 252": [[427, "index-82"], [463, "index-2"], [463, "index-4"]], "pep 3135": [[427, "index-90"], [469, "index-31"]], "pep 562": [[427, "index-111"], [479, "index-16"], [482, "index-195"], [482, "index-200"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[427, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[427, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[427, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[427, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[427, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[427, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[427, "object.__anext__"]], "__annotations__ (class attribute)": [[427, "index-48"]], "__annotations__ (function attribute)": [[427, "index-34"]], "__annotations__ (module attribute)": [[427, "index-43"]], "__await__() (object \u7684\u65b9\u6cd5)": [[427, "object.__await__"]], "__bases__ (class attribute)": [[427, "index-48"]], "__bool__() (object method)": [[427, "index-95"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[427, "object.__bool__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[427, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[427, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ceil__"]], "__class__ (instance attribute)": [[427, "index-52"]], "__class__ (method cell)": [[427, "index-89"]], "__class__ (module attribute)": [[427, "index-80"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[427, "object.__class_getitem__"]], "__classcell__ (class namespace entry)": [[427, "index-89"]], "__closure__ (function attribute)": [[427, "index-34"]], "__code__ (function attribute)": [[427, "index-34"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[427, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[427, "object.__contains__"]], "__defaults__ (function attribute)": [[427, "index-34"]], "__del__() (object \u7684\u65b9\u6cd5)": [[427, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[427, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[427, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[427, "object.__delitem__"]], "__dict__ (class attribute)": [[427, "index-48"]], "__dict__ (function attribute)": [[427, "index-34"]], "__dict__ (instance attribute)": [[427, "index-52"]], "__dir__ (module attribute)": [[427, "index-80"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[427, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[427, "object.__divmod__"]], "__doc__ (class attribute)": [[427, "index-48"]], "__doc__ (function attribute)": [[427, "index-34"]], "__doc__ (method attribute)": [[427, "index-36"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[427, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[427, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[427, "object.__exit__"]], "__float__() (object \u7684\u65b9\u6cd5)": [[427, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[427, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__floordiv__"]], "__format__() (object method)": [[427, "index-75"]], "__format__() (object \u7684\u65b9\u6cd5)": [[427, "object.__format__"]], "__func__ (method attribute)": [[427, "index-36"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[427, "object.__get__"]], "__getattr__ (module attribute)": [[427, "index-80"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[427, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[427, "object.__getattribute__"]], "__getitem__() (mapping object method)": [[427, "index-68"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[427, "object.__getitem__"]], "__globals__ (function attribute)": [[427, "index-34"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[427, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[427, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[427, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[427, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[427, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[427, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[427, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[427, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[427, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[427, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[427, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[427, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[427, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ixor__"]], "__kwdefaults__ (function attribute)": [[427, "index-34"]], "__le__() (object \u7684\u65b9\u6cd5)": [[427, "object.__le__"]], "__len__() (mapping object method)": [[427, "index-79"]], "__len__() (object \u7684\u65b9\u6cd5)": [[427, "object.__len__"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[427, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[427, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[427, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[427, "object.__mod__"]], "__module__ (class attribute)": [[427, "index-48"]], "__module__ (function attribute)": [[427, "index-34"]], "__module__ (method attribute)": [[427, "index-36"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__mul__"]], "__name__ (class attribute)": [[427, "index-48"]], "__name__ (function attribute)": [[427, "index-34"]], "__name__ (method attribute)": [[427, "index-36"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[427, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[427, "object.__new__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[427, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[427, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[427, "object.__pow__"]], "__prepare__ (metaclass method)": [[427, "index-86"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[427, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rdivmod__"]], "__repr__() (object method)": [[427, "index-72"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[427, "object.__repr__"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[427, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[427, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[427, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[427, "object.__rxor__"]], "__self__ (method attribute)": [[427, "index-36"]], "__set__() (object \u7684\u65b9\u6cd5)": [[427, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[427, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[427, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[427, "object.__setitem__"]], "__str__() (object method)": [[427, "index-73"]], "__str__() (object \u7684\u65b9\u6cd5)": [[427, "object.__str__"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[427, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[427, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[427, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[427, "object.__trunc__"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[427, "object.__xor__"]], "asynchronous generator": [[427, "index-39"]], "asynchronous iterator": [[427, "index-39"]], "attribute": [[427, "index-45"], [427, "index-46"], [427, "index-49"], [427, "index-5"], [427, "index-50"], [429, "index-39"], [435, "index-23"], [435, "index-4"], [435, "index-8"]], "body": [[427, "index-88"]], "built-in function": [[427, "index-40"], [429, "index-53"]], "built-in method": [[427, "index-41"], [429, "index-53"]], "byte": [[427, "index-21"]], "bytecode": [[427, "index-55"]], "call": [[427, "index-32"], [427, "index-45"], [427, "index-47"], [427, "index-94"], [429, "index-47"], [429, "index-52"], [429, "index-53"], [429, "index-54"], [429, "index-55"], [429, "index-56"], [435, "index-3"]], "callable": [[427, "index-32"], [429, "index-47"]], "chr": [[427, "index-19"]], "class instance": [[427, "index-45"], [427, "index-49"], [427, "index-50"], [429, "index-55"]], "class object": [[427, "index-45"], [427, "index-47"], [429, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[427, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[427, "coroutine.close"]], "co_argcount (code object attribute)": [[427, "index-56"]], "co_cellvars (code object attribute)": [[427, "index-56"]], "co_code (code object attribute)": [[427, "index-56"]], "co_consts (code object attribute)": [[427, "index-56"]], "co_filename (code object attribute)": [[427, "index-56"]], "co_firstlineno (code object attribute)": [[427, "index-56"]], "co_flags (code object attribute)": [[427, "index-56"]], "co_freevars (code object attribute)": [[427, "index-56"]], "co_kwonlyargcount (code object attribute)": [[427, "index-56"]], "co_lnotab (code object attribute)": [[427, "index-56"]], "co_name (code object attribute)": [[427, "index-56"]], "co_names (code object attribute)": [[427, "index-56"]], "co_nlocals (code object attribute)": [[427, "index-56"]], "co_positions() (codeobject \u7684\u65b9\u6cd5)": [[427, "codeobject.co_positions"]], "co_posonlyargcount (code object attribute)": [[427, "index-56"]], "co_qualname (code object attribute)": [[427, "index-56"]], "co_stacksize (code object attribute)": [[427, "index-56"]], "co_varnames (code object attribute)": [[427, "index-56"]], "constructor": [[427, "index-70"]], "conversion": [[427, "index-75"], [429, "index-1"], [435, "index-3"]], "coroutine": [[427, "index-106"], [427, "index-38"], [429, "index-24"]], "destructor": [[427, "index-71"], [435, "index-7"]], "documentation string": [[427, "index-58"]], "exc_info (in module sys)": [[427, "index-63"]], "extension": [[427, "index-4"]], "f_back (frame attribute)": [[427, "index-61"]], "f_builtins (frame attribute)": [[427, "index-61"]], "f_code (frame attribute)": [[427, "index-61"]], "f_globals (frame attribute)": [[427, "index-61"]], "f_lasti (frame attribute)": [[427, "index-61"]], "f_lineno (frame attribute)": [[427, "index-62"]], "f_locals (frame attribute)": [[427, "index-61"]], "f_trace (frame attribute)": [[427, "index-62"]], "f_trace_lines (frame attribute)": [[427, "index-62"]], "f_trace_opcodes (frame attribute)": [[427, "index-62"]], "finalizer": [[427, "index-71"]], "garbage collection": [[427, "index-2"]], "global": [[427, "index-34"], [435, "index-22"], [435, "index-43"], [435, "index-43"]], "handler": [[427, "index-63"]], "hierarchy": [[427, "index-4"]], "identity of an object": [[427, "index-1"]], "immutable object": [[427, "index-1"]], "immutable sequence": [[427, "index-17"]], "immutable sequences": [[427, "index-18"]], "immutable types": [[427, "index-69"]], "index operation": [[427, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[427, "slice.indices"]], "instance": [[427, "index-45"], [427, "index-49"], [427, "index-94"], [429, "index-55"], [429, "index-56"]], "internal type": [[427, "index-54"]], "invocation": [[427, "index-32"]], "item selection": [[427, "index-15"]], "last_traceback (in module sys)": [[427, "index-63"]], "makefile() (socket method)": [[427, "index-53"]], "metaclass": [[427, "index-83"]], "metaclass hint": [[427, "index-85"]], "mutable object": [[427, "index-1"]], "namespace": [[427, "index-34"], [427, "index-43"], [428, "index-3"], [431, "index-5"]], "number": [[427, "index-13"], [427, "index-14"], [434, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[427, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[427, "object.__slots__"]], "open": [[427, "index-53"], [445, "index-0"]], "ord": [[427, "index-19"]], "overloading": [[427, "index-68"]], "print": [[427, "index-75"]], "print() (built-in function)": [[427, "index-73"]], "reference counting": [[427, "index-2"]], "repr() (built-in function)": [[427, "index-72"]], "representation": [[427, "index-12"]], "round": [[427, "index-102"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[427, "coroutine.send"]], "set type": [[427, "index-26"]], "singleton": [[427, "index-20"]], "slicing": [[427, "index-16"], [427, "index-22"], [429, "index-44"], [435, "index-12"]], "stack": [[427, "index-63"]], "start (slice object attribute)": [[427, "index-67"], [429, "index-46"]], "stdio": [[427, "index-53"]], "step (slice object attribute)": [[427, "index-67"], [429, "index-46"]], "stop (slice object attribute)": [[427, "index-67"], [429, "index-46"]], "subclassing": [[427, "index-69"]], "subscription": [[427, "index-15"], [427, "index-22"], [427, "index-29"], [429, "index-41"], [435, "index-9"]], "sys.exc_info": [[427, "index-63"]], "sys.last_traceback": [[427, "index-63"]], "sys.stderr": [[427, "index-53"]], "sys.stdin": [[427, "index-53"]], "sys.stdout": [[427, "index-53"]], "tb_frame (traceback attribute)": [[427, "index-64"]], "tb_lasti (traceback attribute)": [[427, "index-64"]], "tb_lineno (traceback attribute)": [[427, "index-64"]], "tb_next (traceback attribute)": [[427, "index-65"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[427, "coroutine.throw"]], "type of an object": [[427, "index-1"]], "types, internal": [[427, "index-54"]], "unreachable object": [[427, "index-2"]], "user-defined": [[427, "index-33"], [427, "index-35"], [429, "index-52"]], "user-defined method": [[427, "index-35"]], "value of an object": [[427, "index-1"]], "nameerror (built-in exception)": [[428, "index-9"]], "systemexit (built-in exception)": [[428, "index-15"]], "block": [[428, "index-0"], [428, "index-1"]], "environment": [[428, "index-8"]], "error handling": [[428, "index-13"]], "exception handler": [[428, "index-13"]], "execution model": [[428, "index-0"]], "free": [[428, "index-6"]], "from": [[428, "index-5"], [429, "index-23"], [429, "index-25"], [435, "index-34"], [435, "index-36"]], "handle an exception": [[428, "index-13"]], "import statement": [[428, "index-5"], [435, "index-34"], [435, "index-35"], [435, "index-36"], [435, "index-37"]], "raise an exception": [[428, "index-13"]], "scope": [[428, "index-3"], [428, "index-7"]], "termination model": [[428, "index-14"]], "variable": [[428, "index-6"]], ":= (colon equals)": [[429, "index-86"]], "bnf": [[429, "index-0"], [433, "index-0"]], "conditional": [[429, "index-82"], [429, "index-88"]], "pep 308": [[429, "index-89"], [466, "index-1"], [466, "index-2"]], "pep 380": [[429, "index-28"], [475, "index-12"]], "pep 448": [[429, "index-19"], [429, "index-51"], [429, "index-94"], [477, "index-5"], [477, "index-6"], [482, "index-242"], [482, "index-253"], [482, "index-254"], [482, "index-255"]], "pep 530": [[429, "index-14"], [478, "index-11"], [478, "index-12"], [482, "index-228"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[429, "agen.__anext__"]], "__call__() (object method)": [[429, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[429, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[429, "agen.aclose"]], "addition": [[429, "index-69"]], "anonymous": [[429, "index-90"]], "argument list": [[429, "index-47"]], "asend() (agen \u7684\u65b9\u6cd5)": [[429, "agen.asend"]], "assignment expression": [[429, "index-86"]], "asynchronous-generator": [[429, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[429, "agen.athrow"]], "atom": [[429, "index-2"]], "attribute reference": [[429, "index-39"]], "call semantics": [[429, "index-47"], [429, "index-48"]], "close() (generator \u7684\u65b9\u6cd5)": [[429, "generator.close"]], "comma": [[429, "index-10"], [429, "index-95"]], "comprehensions": [[429, "index-11"], [429, "index-15"], [429, "index-16"], [429, "index-17"]], "conditional expression": [[429, "index-88"]], "datum": [[429, "index-17"]], "dictionary expression": [[429, "index-17"]], "division": [[429, "index-67"]], "evaluation": [[429, "index-96"]], "examples": [[429, "index-34"]], "exclusive": [[429, "index-75"]], "form": [[429, "index-90"]], "hashable": [[429, "index-20"]], "identifier": [[429, "index-3"], [434, "index-10"]], "identity": [[429, "index-81"]], "in comprehensions": [[429, "index-12"], [429, "index-13"]], "in dictionary displays": [[429, "index-17"], [429, "index-18"]], "in dictionary expressions": [[429, "index-17"]], "in expression lists": [[429, "index-93"]], "in function calls": [[429, "index-47"], [429, "index-49"], [429, "index-50"], [440, "index-3"], [440, "index-4"]], "inclusive": [[429, "index-76"]], "inversion": [[429, "index-62"]], "item": [[429, "index-42"], [429, "index-43"]], "iterable": [[429, "index-93"]], "key": [[429, "index-17"]], "key/datum pair": [[429, "index-17"]], "lambda expression": [[429, "index-90"]], "list expression": [[429, "index-15"]], "literal": [[429, "index-6"], [434, "index-16"]], "mangling": [[429, "index-5"], [439, "index-1"]], "matrix multiplication": [[429, "index-66"]], "membership": [[429, "index-80"]], "minus": [[429, "index-60"]], "modulo": [[429, "index-68"]], "multiplication": [[429, "index-65"]], "named expression": [[429, "index-86"]], "names": [[429, "index-5"]], "negation": [[429, "index-60"]], "order": [[429, "index-96"]], "parenthesized form": [[429, "index-8"]], "plus": [[429, "index-61"]], "power": [[429, "index-58"]], "precedence": [[429, "index-97"]], "primary": [[429, "index-38"]], "private": [[429, "index-5"]], "reference": [[429, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[429, "generator.send"]], "set expression": [[429, "index-16"]], "subtraction": [[429, "index-70"]], "ternary": [[429, "index-88"]], "throw() (generator \u7684\u65b9\u6cd5)": [[429, "generator.throw"]], "trailing": [[429, "index-95"]], "tuple display": [[429, "index-8"]], "unary": [[429, "index-59"]], "unpacking": [[429, "index-18"], [429, "index-49"], [429, "index-93"]], "walrus operator": [[429, "index-86"]], "xor": [[429, "index-75"]], "yield": [[429, "index-23"], [429, "index-34"], [435, "index-26"], [475, "index-11"]], "yield from expression": [[429, "index-25"]], "\u4f8b\u5916": [[429, "index-32"], [429, "index-33"], [429, "index-36"], [429, "index-37"], [429, "index-4"], [429, "index-40"], [429, "index-63"], [429, "index-67"], [429, "index-72"], [435, "index-19"], [435, "index-26"], [435, "index-34"]], "__cached__": [[431, "cached__"]], "__file__": [[431, "file__"]], "__loader__": [[431, "loader__"]], "__name__": [[431, "name__"]], "__package__": [[431, "package__"]], "__path__": [[431, "path__"]], "__spec__": [[431, "spec__"]], "find_spec": [[431, "index-10"]], "finder": [[431, "index-10"], [431, "index-8"]], "hooks": [[431, "index-9"]], "import hooks": [[431, "index-9"]], "import machinery": [[431, "index-0"]], "loader": [[431, "index-8"]], "meta": [[431, "index-9"]], "meta hooks": [[431, "index-9"]], "module spec": [[431, "index-8"]], "path based finder": [[431, "index-16"]], "path hooks": [[431, "index-9"]], "portion": [[431, "index-5"]], "regular": [[431, "index-4"]], "sys.meta_path": [[431, "index-10"]], "sys.modules": [[431, "index-7"]], "sys.path": [[431, "index-17"]], "sys.path_hooks": [[431, "index-17"]], "sys.path_importer_cache": [[431, "index-17"]], "grammar": [[433, "index-0"]], "lexical definitions": [[433, "index-1"]], "notation": [[433, "index-0"]], "syntax": [[433, "index-0"]], "\" (double quote)": [[434, "index-17"]], "\"\"\"": [[434, "index-18"]], "' (single quote)": [[434, "index-17"]], "'''": [[434, "index-18"]], "0b": [[434, "index-28"]], "0o": [[434, "index-28"]], "0x": [[434, "index-28"]], "indent token": [[434, "index-9"]], "pep 3131": [[434, "index-11"], [434, "index-12"], [469, "index-5"]], "pep 414": [[434, "index-21"], [475, "index-14"]], "standard c": [[434, "index-23"]], "unicode consortium": [[434, "index-18"]], "_, identifiers": [[434, "index-15"]], "__, identifiers": [[434, "index-15"]], "b\"": [[434, "index-19"]], "b'": [[434, "index-19"]], "backslash character": [[434, "index-6"]], "binary literal": [[434, "index-27"]], "blank line": [[434, "index-7"]], "bytes literal": [[434, "index-17"], [434, "index-19"]], "complex literal": [[434, "index-27"]], "constant": [[434, "index-16"]], "decimal literal": [[434, "index-27"]], "delimiters": [[434, "index-32"]], "e": [[434, "index-29"]], "encoding declarations (source file)": [[434, "index-5"]], "f\"": [[434, "index-22"]], "f'": [[434, "index-22"]], "f-string": [[434, "index-25"]], "floating point literal": [[434, "index-27"]], "for help in debugging using string literals": [[434, "index-25"]], "formatted literal": [[434, "index-25"]], "formatted string literal": [[434, "index-22"], [434, "index-25"]], "fstring": [[434, "index-25"]], "grouping": [[434, "index-8"]], "hash character": [[434, "index-4"]], "hexadecimal literal": [[434, "index-27"]], "imaginary literal": [[434, "index-27"]], "in formatted string literal": [[434, "index-25"]], "in numeric literal": [[434, "index-28"], [434, "index-29"], [434, "index-30"]], "indentation": [[434, "index-8"]], "integer literal": [[434, "index-27"], [434, "index-28"]], "interpolated literal": [[434, "index-25"]], "interpolated string literal": [[434, "index-25"]], "j": [[434, "index-30"]], "leading whitespace": [[434, "index-8"]], "lexical analysis": [[434, "index-0"]], "line continuation": [[434, "index-6"]], "line joining": [[434, "index-3"], [434, "index-6"]], "line structure": [[434, "index-2"]], "logical line": [[434, "index-3"]], "numeric literal": [[434, "index-27"]], "octal literal": [[434, "index-27"]], "operators": [[434, "index-31"]], "parser": [[434, "index-0"]], "physical line": [[434, "index-23"], [434, "index-3"], [434, "index-6"]], "r\"": [[434, "index-20"]], "r'": [[434, "index-20"]], "raw string": [[434, "index-18"]], "raw string literal": [[434, "index-20"]], "reserved word": [[434, "index-13"]], "soft keyword": [[434, "index-14"]], "source character set": [[434, "index-5"]], "source encoding declaration": [[434, "index-5"]], "statement grouping": [[434, "index-8"]], "string literal": [[434, "index-17"], [434, "index-18"]], "tab": [[434, "index-8"]], "triple-quoted string": [[434, "index-18"]], "u\"": [[434, "index-17"]], "u'": [[434, "index-17"]], "unrecognized escape sequence": [[434, "index-24"]], "%=": [[435, "index-14"]], "&=": [[435, "index-14"]], "**=": [[435, "index-14"]], "*=": [[435, "index-14"]], "+=": [[435, "index-14"]], "-=": [[435, "index-14"]], "//=": [[435, "index-14"]], "/=": [[435, "index-14"]], "<<=": [[435, "index-14"]], ">>=": [[435, "index-14"]], "pep 236": [[435, "index-42"], [462, "index-0"], [462, "index-1"], [462, "index-3"]], "pep 3104": [[435, "index-46"], [469, "index-8"]], "pep 3132": [[435, "index-13"], [469, "index-9"]], "^=": [[435, "index-14"]], "__all__ (optional module attribute)": [[435, "index-38"]], "__cause__ (exception attribute)": [[435, "index-29"]], "__context__ (exception attribute)": [[435, "index-29"]], "__debug__": [[435, "index-19"]], "__traceback__ (exception attribute)": [[435, "index-27"]], "annotated": [[435, "index-15"]], "annotated variable": [[435, "index-15"]], "assertions": [[435, "index-18"]], "assignment statement": [[435, "index-4"]], "assignment, annotated": [[435, "index-15"]], "assignment, augmented": [[435, "index-14"]], "augmented": [[435, "index-14"]], "augmented assignment": [[435, "index-14"]], "deletion": [[435, "index-21"], [435, "index-23"]], "future": [[435, "index-40"]], "future statement": [[435, "index-40"]], "identifier list": [[435, "index-43"], [435, "index-45"]], "importing": [[435, "index-34"]], "in assignment target list": [[435, "index-6"]], "in target list": [[435, "index-6"]], "loop control": [[435, "index-31"]], "nonlocal": [[435, "index-45"]], "null": [[435, "index-20"]], "output": [[435, "index-3"]], "pass": [[435, "index-20"]], "procedure": [[435, "index-3"]], "raising": [[435, "index-27"]], "rebinding": [[435, "index-4"]], "simple": [[435, "index-0"]], "standard": [[435, "index-3"]], "unbinding": [[435, "index-22"]], "writing": [[435, "index-3"]], "|=": [[435, "index-14"]], "windows": [[436, "index-4"]], "command line": [[436, "index-4"]], "input": [[436, "index-5"]], "interactive mode": [[436, "index-3"]], "interpreter": [[436, "index-0"]], "program": [[436, "index-1"]], "standard input": [[436, "index-4"]], "coding": [[440, "index-9"]], "docstrings": [[440, "index-2"], [440, "index-5"]], "documentation strings": [[440, "index-2"], [440, "index-5"]], "strings, documentation": [[440, "index-2"], [440, "index-5"]], "style": [[440, "index-9"]], "--check-hash-based-pycs": [[454, "cmdoption-check-hash-based-pycs"]], "--help-all": [[454, "cmdoption-help-all"]], "--help-env": [[454, "cmdoption-help-env"]], "--help-xoptions": [[454, "cmdoption-help-xoptions"]], "-?": [[454, "cmdoption-0"]], "-oo": [[454, "cmdoption-OO"]], "-w": [[454, "cmdoption-W"]], "pythondumprefsfile=filename": [[454, "envvar-PYTHONDUMPREFSFILE-FILENAME"]], "\u547d\u4ee4\u5217\u9078\u9805": [[454, "cmdoption-0"], [454, "cmdoption-1"], [454, "cmdoption-B"], [454, "cmdoption-E"], [454, "cmdoption-I"], [454, "cmdoption-J"], [454, "cmdoption-O"], [454, "cmdoption-OO"], [454, "cmdoption-P"], [454, "cmdoption-R"], [454, "cmdoption-S"], [454, "cmdoption-V"], [454, "cmdoption-W"], [454, "cmdoption-X"], [454, "cmdoption-b"], [454, "cmdoption-c"], [454, "cmdoption-check-hash-based-pycs"], [454, "cmdoption-d"], [454, "cmdoption-h"], [454, "cmdoption-help"], [454, "cmdoption-help-all"], [454, "cmdoption-help-env"], [454, "cmdoption-help-xoptions"], [454, "cmdoption-i"], [454, "cmdoption-m"], [454, "cmdoption-q"], [454, "cmdoption-s"], [454, "cmdoption-u"], [454, "cmdoption-version"], [454, "cmdoption-x"], [455, "cmdoption-0"], [455, "cmdoption-1"], [455, "cmdoption-arg-CONFIG_SITE"], [455, "cmdoption-build"], [455, "cmdoption-disable-ipv6"], [455, "cmdoption-disable-test-modules"], [455, "cmdoption-enable-big-digits"], [455, "cmdoption-enable-bolt"], [455, "cmdoption-enable-framework"], [455, "cmdoption-enable-loadable-sqlite-extensions"], [455, "cmdoption-enable-optimizations"], [455, "cmdoption-enable-profiling"], [455, "cmdoption-enable-pystats"], [455, "cmdoption-enable-shared"], [455, "cmdoption-enable-universalsdk"], [455, "cmdoption-enable-wasm-dynamic-linking"], [455, "cmdoption-enable-wasm-pthreads"], [455, "cmdoption-host"], [455, "cmdoption-with-address-sanitizer"], [455, "cmdoption-with-assertions"], [455, "cmdoption-with-build-python"], [455, "cmdoption-with-builtin-hashlib-hashes"], [455, "cmdoption-with-computed-gotos"], [455, "cmdoption-with-dbmliborder"], [455, "cmdoption-with-dtrace"], [455, "cmdoption-with-emscripten-target"], [455, "cmdoption-with-ensurepip"], [455, "cmdoption-with-framework-name"], [455, "cmdoption-with-hash-algorithm"], [455, "cmdoption-with-libc"], [455, "cmdoption-with-libm"], [455, "cmdoption-with-libs"], [455, "cmdoption-with-lto"], [455, "cmdoption-with-memory-sanitizer"], [455, "cmdoption-with-openssl"], [455, "cmdoption-with-openssl-rpath"], [455, "cmdoption-with-pkg-config"], [455, "cmdoption-with-platlibdir"], [455, "cmdoption-with-pydebug"], [455, "cmdoption-with-readline"], [455, "cmdoption-with-ssl-default-suites"], [455, "cmdoption-with-suffix"], [455, "cmdoption-with-system-expat"], [455, "cmdoption-with-system-ffi"], [455, "cmdoption-with-system-libmpdec"], [455, "cmdoption-with-trace-refs"], [455, "cmdoption-with-tzpath"], [455, "cmdoption-with-undefined-behavior-sanitizer"], [455, "cmdoption-with-universal-archs"], [455, "cmdoption-with-valgrind"], [455, "cmdoption-with-wheel-pkg-dir"], [455, "cmdoption-without-c-locale-coercion"], [455, "cmdoption-without-decimal-contextvar"], [455, "cmdoption-without-doc-strings"], [455, "cmdoption-without-pymalloc"], [455, "cmdoption-without-readline"], [455, "cmdoption-without-static-libpython"]], "--build": [[455, "cmdoption-build"]], "--disable-ipv6": [[455, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[455, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[455, "cmdoption-enable-big-digits"]], "--enable-bolt": [[455, "cmdoption-enable-bolt"]], "--enable-framework": [[455, "cmdoption-1"], [455, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[455, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[455, "cmdoption-enable-optimizations"]], "--enable-profiling": [[455, "cmdoption-enable-profiling"]], "--enable-pystats": [[455, "cmdoption-enable-pystats"]], "--enable-shared": [[455, "cmdoption-enable-shared"]], "--enable-universalsdk": [[455, "cmdoption-0"], [455, "cmdoption-enable-universalsdk"]], "--enable-wasm-dynamic-linking": [[455, "cmdoption-enable-wasm-dynamic-linking"]], "--enable-wasm-pthreads": [[455, "cmdoption-enable-wasm-pthreads"]], "--host": [[455, "cmdoption-host"]], "--with-address-sanitizer": [[455, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[455, "cmdoption-with-assertions"]], "--with-build-python": [[455, "cmdoption-with-build-python"]], "--with-builtin-hashlib-hashes": [[455, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[455, "cmdoption-with-computed-gotos"]], "--with-dbmliborder": [[455, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[455, "cmdoption-with-dtrace"]], "--with-emscripten-target": [[455, "cmdoption-with-emscripten-target"]], "--with-ensurepip": [[455, "cmdoption-with-ensurepip"]], "--with-framework-name": [[455, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[455, "cmdoption-with-hash-algorithm"]], "--with-libc": [[455, "cmdoption-with-libc"]], "--with-libm": [[455, "cmdoption-with-libm"]], "--with-libs": [[455, "cmdoption-with-libs"]], "--with-lto": [[455, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[455, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[455, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[455, "cmdoption-with-openssl-rpath"]], "--with-pkg-config": [[455, "cmdoption-with-pkg-config"]], "--with-platlibdir": [[455, "cmdoption-with-platlibdir"]], "--with-pydebug": [[455, "cmdoption-with-pydebug"]], "--with-readline": [[455, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[455, "cmdoption-with-ssl-default-suites"]], "--with-suffix": [[455, "cmdoption-with-suffix"]], "--with-system-expat": [[455, "cmdoption-with-system-expat"]], "--with-system-ffi": [[455, "cmdoption-with-system-ffi"]], "--with-system-libmpdec": [[455, "cmdoption-with-system-libmpdec"]], "--with-trace-refs": [[455, "cmdoption-with-trace-refs"]], "--with-tzpath": [[455, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[455, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[455, "cmdoption-with-universal-archs"]], "--with-valgrind": [[455, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[455, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[455, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[455, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[455, "cmdoption-without-doc-strings"]], "--without-pymalloc": [[455, "cmdoption-without-pymalloc"]], "--without-readline": [[455, "cmdoption-without-readline"]], "--without-static-libpython": [[455, "cmdoption-without-static-libpython"]], "basecflags": [[455, "envvar-BASECFLAGS"]], "basecppflags": [[455, "envvar-BASECPPFLAGS"]], "bldshared": [[455, "envvar-BLDSHARED"]], "cc": [[455, "envvar-CC"], [464, "index-24"]], "ccshared": [[455, "envvar-CCSHARED"]], "cflagsforshared": [[455, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[455, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[455, "envvar-CFLAGS_NODIST"], [455, "index-10"], [455, "index-15"], [455, "index-20"]], "configure_cflags": [[455, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[455, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[455, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[455, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[455, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "config_site": [[455, "cmdoption-arg-CONFIG_SITE"]], "cppflags": [[455, "envvar-CPPFLAGS"], [455, "index-25"], [455, "index-7"], [455, "index-8"], [464, "index-28"]], "cxx": [[455, "envvar-CXX"]], "extra_cflags": [[455, "envvar-EXTRA_CFLAGS"]], "ldflags": [[455, "envvar-LDFLAGS"], [455, "index-16"], [455, "index-18"], [455, "index-21"], [455, "index-22"], [455, "index-23"], [455, "index-26"], [455, "index-9"], [464, "index-27"]], "ldflags_nodist": [[455, "envvar-LDFLAGS_NODIST"], [455, "index-19"], [455, "index-24"]], "ldshared": [[455, "envvar-LDSHARED"]], "libs": [[455, "envvar-LIBS"]], "linkcc": [[455, "envvar-LINKCC"]], "opt": [[455, "envvar-OPT"], [455, "index-6"]], "profile_task": [[455, "envvar-PROFILE_TASK"], [455, "index-2"]], "purify": [[455, "envvar-PURIFY"]], "py_builtin_module_cflags": [[455, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[455, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[455, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[455, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[455, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[455, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[455, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[455, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[455, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[460, "index-8"]], "pathext": [[460, "index-4"], [460, "index-6"], [476, "index-51"], [482, "index-98"]], "pep 11": [[460, "index-0"], [460, "index-37"], [469, "index-19"], [472, "index-36"], [472, "index-37"], [477, "index-50"], [479, "index-5"], [482, "index-12"], [482, "index-13"], [482, "index-213"]], "pep 397": [[460, "index-19"], [475, "index-9"], [477, "index-22"]], "pylauncher_allow_install": [[460, "index-28"], [482, "index-36"]], "pylauncher_always_install": [[460, "index-29"]], "pylauncher_debug": [[460, "index-26"]], "pylauncher_dryrun": [[460, "index-27"], [460, "index-30"]], "pylauncher_no_search_path": [[460, "index-24"]], "py_python": [[460, "index-25"]], "pep 100": [[461, "index-3"]], "pep 201": [[461, "index-2"]], "pep 207": [[462, "index-4"], [462, "index-5"]], "pep 208": [[462, "index-13"]], "pep 217": [[462, "index-12"]], "pep 229": [[462, "index-8"]], "pep 230": [[462, "index-7"]], "pep 232": [[462, "index-10"]], "pep 241": [[462, "index-14"], [462, "index-15"], [462, "index-16"]], "pep 243": [[462, "index-17"]], "pep 234": [[463, "index-7"]], "pep 253": [[463, "index-0"], [463, "index-1"], [463, "index-3"], [463, "index-5"], [463, "index-6"]], "pep 261": [[463, "index-14"], [463, "index-15"]], "pep 264": [[463, "index-22"]], "rfc 2104": [[463, "index-17"]], "rfc 2487": [[463, "index-18"]], "cpp": [[464, "index-26"]], "pep 218": [[464, "index-0"], [465, "index-0"], [465, "index-13"]], "pep 277": [[464, "index-7"]], "pep 279": [[464, "index-10"]], "pep 285": [[464, "index-13"], [464, "index-14"]], "pep 293": [[464, "index-15"]], "pep 301": [[464, "index-16"]], "what's new": [[464, "index-8"], [465, "index-7"], [466, "index-20"], [467, "index-13"]], "pep 322": [[465, "index-14"], [465, "index-6"]], "pep 327": [[465, "index-9"]], "pep 331": [[465, "index-11"]], "pep 288": [[466, "index-12"]], "pep 309": [[466, "index-3"]], "pep 314": [[466, "index-4"]], "pep 325": [[466, "index-13"]], "pep 333": [[466, "index-26"], [466, "index-27"]], "pep 339": [[466, "index-30"]], "pep 341": [[466, "index-8"]], "pep 347": [[466, "index-28"]], "pep 352": [[466, "index-15"], [467, "index-25"], [469, "index-25"]], "pep 356": [[466, "index-0"]], "pep 357": [[466, "index-18"]], "appdata": [[467, "index-5"]], "pep 3000": [[467, "index-1"]], "pep 3100": [[467, "index-2"]], "pep 3110": [[467, "index-11"], [469, "index-13"], [469, "index-27"]], "pep 3127": [[467, "index-17"]], "pep 361": [[467, "index-0"]], "pep 371": [[467, "index-8"]], "rfc 2033": [[467, "index-22"]], "rfc 3207": [[467, "index-23"]], "ldcxxshared": [[468, "index-12"]], "pep 3106": [[468, "index-6"]], "pep 3137": [[468, "index-7"]], "pep 372": [[468, "index-2"], [470, "index-0"]], "pep 373": [[468, "index-0"]], "pep 389": [[468, "index-4"], [474, "index-2"]], "pep 391": [[468, "index-5"], [474, "index-3"]], "pep 466": [[468, "index-17"], [468, "index-18"], [468, "index-19"], [468, "index-20"]], "pep 476": [[468, "index-25"]], "pep 477": [[468, "index-21"]], "pep 493": [[468, "index-26"]], "pythonshowalloccount": [[468, "index-15"]], "pythonshowrefcount": [[468, "index-14"]], "user_base": [[468, "index-9"]], "pep 274": [[469, "index-10"]], "pep 3102": [[469, "index-7"]], "pep 3108": [[469, "index-17"], [469, "index-20"], [469, "index-22"]], "pep 3109": [[469, "index-11"], [469, "index-26"]], "pep 3111": [[469, "index-32"]], "pep 3113": [[469, "index-15"]], "pep 3114": [[469, "index-30"]], "pep 3123": [[469, "index-35"]], "pep 3138": [[469, "index-3"]], "pep 4": [[469, "index-18"]], "pep 384": [[471, "index-38"], [474, "index-1"], [482, "index-69"]], "pep 618": [[471, "index-25"], [471, "index-3"], [482, "index-112"]], "pep 624": [[471, "index-11"], [472, "index-3"], [472, "index-42"], [482, "index-58"]], "pep 632": [[471, "index-27"], [471, "index-9"]], "pep 635": [[471, "index-1"], [471, "index-15"]], "pep 652": [[471, "index-35"], [482, "index-64"]], "pythonthreaddebug": [[471, "index-33"], [472, "index-32"], [482, "index-48"]], "pep 484#annotating-instance-and-class-methods": [[472, "index-16"]], "pep 514": [[472, "index-10"], [482, "index-235"], [482, "index-35"]], "pep 624#alternative-apis": [[472, "index-43"]], "pep 654": [[472, "index-51"], [472, "index-7"], [482, "index-1"], [482, "index-40"], [482, "index-43"]], "pep 657": [[472, "index-27"], [472, "index-5"], [482, "index-20"], [482, "index-49"]], "pep 659": [[472, "index-28"], [472, "index-29"]], "pep 670": [[472, "index-38"], [472, "index-4"]], "pep 678": [[472, "index-52"], [482, "index-17"]], "pep 680": [[472, "index-0"], [472, "index-24"], [482, "index-31"]], "tcltk_cflags": [[472, "index-33"]], "tcltk_libs": [[472, "index-34"]], "tcltk_libs=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"": [[472, "index-35"]], "pep 385": [[474, "index-14"]], "pep 392": [[474, "index-0"]], "rfc 2818": [[474, "index-12"]], "pep 3144": [[475, "index-25"]], "pep 398": [[475, "index-0"]], "pep 409": [[475, "index-13"]], "pep 418": [[475, "index-28"]], "rfc 1870": [[475, "index-27"]], "yield from (in what's new)": [[475, "index-11"]], "pep 247": [[476, "index-37"]], "pep 3156": [[476, "index-25"], [476, "index-26"], [476, "index-31"], [476, "index-4"], [476, "index-8"]], "pep 424": [[476, "index-24"], [476, "index-38"]], "pep 429": [[476, "index-0"]], "pep 435": [[476, "index-28"], [476, "index-29"], [476, "index-6"]], "pep 436": [[476, "index-18"], [476, "index-48"], [476, "index-49"]], "pep 445": [[476, "index-17"], [476, "index-43"], [476, "index-44"], [476, "index-52"]], "pep 446": [[476, "index-14"], [476, "index-2"], [476, "index-21"], [476, "index-22"]], "pep 450": [[476, "index-32"], [476, "index-33"], [476, "index-9"]], "pep 454": [[476, "index-10"], [476, "index-34"], [476, "index-35"]], "pep 456": [[476, "index-13"], [476, "index-47"]], "pep 441": [[477, "index-29"], [477, "index-30"]], "pep 465": [[477, "index-3"], [477, "index-4"], [477, "index-48"], [482, "index-265"]], "pep 471": [[477, "index-13"], [477, "index-14"], [482, "index-261"]], "pep 478": [[477, "index-0"]], "pep 486": [[477, "index-21"], [477, "index-23"], [482, "index-262"]], "rfc 6152": [[477, "index-39"]], "pep 487": [[478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-37"], [482, "index-212"], [482, "index-222"], [482, "index-231"]], "pep 494": [[478, "index-0"]], "pep 511": [[478, "index-36"]], "pep 520": [[478, "index-23"]], "pep 628": [[478, "index-29"], [478, "index-30"], [482, "index-233"]], "pep 545": [[479, "index-24"], [479, "index-40"]], "pep 553": [[479, "index-13"], [482, "index-206"]], "pep 564": [[479, "index-17"], [479, "index-18"], [479, "index-32"], [482, "index-204"]], "pep 596": [[481, "index-0"]], "pep 616": [[481, "index-12"], [481, "index-4"], [482, "index-132"]], "enablecontrolflowguard": [[482, "index-55"]], "pep 676": [[482, "index-33"]], "pip_user": [[482, "index-169"]], "pythondumprefsfile": [[482, "index-47"]], "pythonregrtest_unicode_guard": [[482, "index-24"]], "rfc 7538": [[482, "index-45"]], "rfc 9239": [[482, "index-4"]]}})