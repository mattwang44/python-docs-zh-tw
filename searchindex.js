Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "distutils/_setuptools_disclaimer", "distutils/apiref", "distutils/builtdist", "distutils/commandref", "distutils/configfile", "distutils/examples", "distutils/extending", "distutils/index", "distutils/introduction", "distutils/packageindex", "distutils/setupscript", "distutils/sourcedist", "distutils/uploading", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/functional", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/logging", "howto/logging-cookbook", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "install/index", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asynchat", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/asyncore", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/binhex", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/distutils", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/imp", "library/importlib", "library/importlib.metadata", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtpd", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "distutils/_setuptools_disclaimer.rst", "distutils/apiref.rst", "distutils/builtdist.rst", "distutils/commandref.rst", "distutils/configfile.rst", "distutils/examples.rst", "distutils/extending.rst", "distutils/index.rst", "distutils/introduction.rst", "distutils/packageindex.rst", "distutils/setupscript.rst", "distutils/sourcedist.rst", "distutils/uploading.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/functional.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "install/index.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asynchat.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/asyncore.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/binhex.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/distutils.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/imp.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtpd.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "Allocating Objects on the Heap", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "Parsing arguments and building values", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Byte Array Objects", "Bytes Objects", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "Code Objects", "Codec registry and support functions", "Complex Number Objects", "Concrete Objects Layer", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\uff08File\uff09\u7269\u4ef6", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "\u51fd\u5f0f\uff08Function\uff09\u7269\u4ef6", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668\u7269\u4ef6", "\u532f\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "Iterator Protocol", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "Set Objects", "\u5207\u7247\u7269\u4ef6", "C API Stability", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "\u5143\u7d44\uff08Tuple\uff09\u7269\u4ef6", "Type Objects", "Objects for Type Hinting", "Type Objects", "Unicode\u7269\u4ef6\u8207\u7de8\u78bc", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>API \u53c3\u7167", "<span class=\"section-number\">5. </span>Creating Built Distributions", "<span class=\"section-number\">8. </span>\u6307\u4ee4\u53c3\u7167", "<span class=\"section-number\">3. </span>Writing the Setup Configuration File", "<span class=\"section-number\">6. </span>Distutils Examples", "<span class=\"section-number\">7. </span>Extending Distutils", "\u767c\u5e03 Python \u6a21\u7d44\uff08\u820a\u7248\uff09", "<span class=\"section-number\">1. </span>An Introduction to Distutils", "Python \u5957\u4ef6\u7d22\u5f15 (Python Package Index, PyPI)", "<span class=\"section-number\">2. </span>Writing the Setup Script", "<span class=\"section-number\">4. </span>Creating a Source Distribution", "\u4e0a\u50b3\u5957\u4ef6\u81f3\u5957\u4ef6\u7d22\u5f15 (Package Index)", "<span class=\"section-number\">4. </span>Building C and C++ Extensions", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "Extending/Embedding FAQ", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "Annotations Best Practices", "Argparse \u6559\u5b78", "Argument Clinic How-To", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u4fee\u98fe\u5668 HowTo \u6307\u5357", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "Instrumenting CPython with DTrace and SystemTap", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket Programming HOWTO", "\u5982\u4f55\u6392\u5e8f", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future statement definitions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- Top-level code environment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- Abstract Base Classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- Abstract Syntax Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asynchat</span></code> --- \u975e\u540c\u6b65 socket \u6307\u4ee4/\u56de\u61c9\u8655\u7406\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncore</span></code> --- \u975e\u540c\u6b65 socket \u8655\u7406\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- Debugger framework", "Binary Data Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binhex</span></code> --- Encode and decode binhex4 files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- General calendar-related functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- Mathematical functions for complex numbers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- Configuration file parser", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- Register <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> support functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV File Reading and Writing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- Utilities for ASCII characters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Interfaces to Unix &quot;databases&quot;", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">distutils</span></code> --- Building and installing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: Representing character sets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- Bootstrapping the <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> installer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- Support for enumerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP protocol client", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- Garbage Collector interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix style pathname pattern expansion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> --- Functionality to operate with graph-like structures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- Support for <strong class=\"program\">gzip</strong> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- HyperText Markup Language support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- Definitions of HTML general entities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- Simple HTML and XHTML parser", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> --- HTTP servers", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imp</span></code> --- Access the <span class=\"xref std std-ref\">import</span> internals", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- The implementation of <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code>", "Using <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code>", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- Inspect live objects", "Internet Protocols and Support", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> --- Core tools for working with streams", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- Functions creating iterators for efficient looping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON encoder and decoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- Testing for Python keywords", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> --- Internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Logging facility for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- Manipulate mailboxes in various formats", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "Multimedia Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u532f\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- Shared memory for direct access across processes", "Internet Data Handling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc file processing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- Numeric abstract base classes", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- Miscellaneous operating system interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- Common pathname manipulations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- Object-oriented filesystem paths", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python object serialization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- Tools for pickle developers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- The most common POSIX system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- The password database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> --- Compile Python source files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- Encode and decode MIME quoted-printable data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- Regular expression operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "Security Considerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> --- High-level file operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtpd</span></code> --- SMTP \u4f3a\u670d\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- DB-API 2.0 interface for SQLite databases", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- TLS/SSL wrapper for socket objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- Common string operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- Subprocess management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- Access to the compiler's symbol tables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- System-specific parameters and functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- Detection of ambiguous indentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Regression tests package for Python", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- Measure execution time of small code snippets", "\u4ee5 Tk \u6253\u9020 GUI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- Color choosing dialog", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter font wrapper", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter message prompts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- Support for type hints", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- mock object library", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- getting started", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- UUID objects according to <strong>RFC 4122</strong>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- Read and write WAV files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI Utilities and Reference Implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u670d\u52d9\u7aef\u8207\u5ba2\u6236\u7aef\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> --- Manage executable Python zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- Compression compatible with <strong class=\"program\">gzip</strong>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA time zone support", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>Data model", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>Top-level components", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>Command line and environment", "<span class=\"section-number\">3. </span>Configure Python", "<span class=\"section-number\">6. </span>Editors and IDEs", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 65, 90, 94, 109, 485], "restructuredtext": [0, 65, 73, 78, 90, 200, 485], "bug": [0, 33, 54, 56, 60, 65, 78, 82, 83, 88, 89, 90, 94, 99, 103, 104, 109, 110, 114, 132, 158, 183, 215, 232, 249, 250, 264, 277, 299, 302, 305, 314, 348, 355, 367, 370, 373, 393, 411, 448, 450, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "fred": [0, 109, 320, 374, 439, 466, 467, 468, 469, 471, 472, 481], "drake": [0, 466, 467, 468, 469, 471, 472], "jr": [0, 94, 467, 468, 469, 471, 472], "docutil": [0, 73, 78, 472, 485], "fredrik": [0, 95, 104, 430, 466, 467, 468, 470, 471, 473, 475, 477], "lundh": [0, 95, 104, 430, 466, 467, 468, 470, 471, 473, 477], "altern": [0, 18, 23, 43, 60, 65, 69, 70, 75, 83, 94, 95, 100, 103, 104, 111, 114, 115, 118, 122, 126, 128, 133, 138, 142, 144, 149, 153, 154, 161, 164, 167, 173, 179, 181, 182, 183, 184, 187, 188, 192, 199, 200, 203, 206, 207, 212, 217, 218, 221, 222, 225, 228, 230, 232, 235, 237, 249, 255, 259, 260, 261, 267, 273, 274, 275, 278, 281, 289, 298, 299, 301, 303, 305, 311, 312, 320, 338, 342, 344, 345, 347, 348, 351, 352, 354, 355, 359, 363, 364, 370, 373, 374, 380, 381, 385, 388, 390, 392, 393, 394, 398, 403, 404, 406, 409, 411, 429, 430, 434, 435, 436, 437, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485], "refer": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 63, 64, 65, 69, 70, 73, 75, 76, 78, 79, 81, 82, 84, 86, 87, 88, 94, 97, 100, 103, 107, 108, 109, 111, 115, 116, 120, 121, 124, 126, 128, 133, 135, 139, 141, 142, 144, 145, 146, 147, 148, 150, 161, 164, 170, 173, 176, 183, 188, 189, 191, 197, 199, 212, 217, 219, 220, 222, 232, 233, 234, 235, 237, 240, 242, 245, 246, 247, 250, 252, 254, 257, 258, 260, 261, 262, 264, 265, 268, 273, 274, 275, 277, 279, 284, 290, 294, 295, 299, 300, 303, 304, 305, 308, 312, 313, 319, 320, 325, 330, 335, 338, 339, 340, 344, 348, 351, 352, 354, 357, 359, 361, 366, 367, 370, 371, 373, 380, 381, 382, 385, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 409, 413, 414, 415, 419, 421, 425, 426, 429, 431, 432, 433, 437, 438, 439, 440, 444, 445, 449, 459, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "misc": [0, 33, 90, 230, 351, 381, 460, 466, 469, 470, 471, 472, 473, 474, 477, 479, 485, 486], "ack": [0, 184, 472], "tracker": [1, 65, 289, 367, 471, 473, 485], "https": [1, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 85, 88, 89, 90, 91, 94, 95, 104, 108, 109, 110, 114, 115, 116, 133, 141, 166, 168, 175, 189, 233, 242, 246, 247, 249, 250, 255, 267, 275, 313, 319, 320, 324, 325, 332, 334, 347, 348, 351, 359, 390, 391, 392, 398, 399, 403, 407, 411, 415, 417, 423, 428, 430, 432, 439, 444, 448, 449, 455, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 480, 482, 483, 485], "github": [1, 67, 85, 90, 117, 255, 313, 430, 463, 481, 482, 485], "com": [1, 65, 66, 73, 83, 85, 90, 94, 95, 103, 108, 109, 110, 111, 115, 141, 168, 172, 173, 182, 189, 190, 207, 250, 255, 267, 294, 303, 313, 324, 325, 332, 347, 348, 351, 392, 399, 400, 409, 417, 423, 457, 458, 463, 465, 468, 470, 471, 472, 473, 477, 478, 479, 480, 483, 485], "doc": [1, 23, 55, 57, 65, 72, 81, 85, 86, 89, 90, 103, 110, 111, 182, 201, 212, 230, 232, 249, 254, 259, 261, 264, 268, 291, 299, 302, 319, 348, 359, 367, 372, 389, 398, 407, 409, 411, 416, 456, 458, 460, 464, 465, 466, 468, 469, 471, 472, 473, 476, 477, 481, 482, 483, 485], "zh": 1, "tw": [1, 164], "issu": [1, 7, 24, 30, 31, 32, 54, 58, 63, 65, 78, 86, 103, 108, 109, 110, 114, 120, 125, 126, 133, 145, 162, 164, 182, 183, 187, 191, 192, 194, 210, 218, 220, 228, 230, 232, 242, 249, 254, 255, 264, 268, 272, 273, 277, 278, 289, 298, 299, 302, 305, 317, 339, 342, 344, 348, 351, 367, 388, 390, 392, 393, 394, 403, 404, 406, 413, 416, 417, 425, 430, 459, 462, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "org": [1, 54, 65, 67, 70, 73, 75, 78, 81, 85, 88, 89, 94, 97, 104, 109, 112, 114, 115, 116, 117, 133, 145, 166, 173, 175, 190, 230, 233, 242, 246, 247, 249, 250, 254, 255, 267, 289, 294, 309, 313, 319, 320, 325, 334, 342, 344, 347, 348, 351, 359, 360, 391, 398, 399, 400, 402, 403, 407, 415, 417, 419, 423, 430, 432, 439, 444, 448, 449, 455, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 480, 482, 483, 484, 485], "list": [1, 2, 5, 7, 14, 16, 18, 23, 29, 31, 32, 33, 38, 40, 47, 49, 51, 52, 54, 55, 56, 57, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 83, 85, 86, 87, 89, 90, 94, 96, 97, 99, 100, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 125, 126, 127, 128, 133, 139, 141, 144, 145, 146, 150, 157, 158, 162, 164, 166, 167, 169, 170, 173, 175, 176, 177, 179, 181, 182, 183, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 200, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 223, 225, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 313, 314, 316, 317, 318, 320, 322, 324, 325, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 352, 353, 355, 357, 358, 359, 360, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 400, 404, 406, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 430, 431, 432, 433, 435, 436, 437, 439, 440, 444, 449, 450, 452, 454, 455, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "cpython": [1, 4, 10, 13, 31, 33, 51, 54, 56, 60, 65, 81, 83, 85, 86, 90, 95, 97, 99, 100, 105, 148, 164, 167, 192, 194, 197, 217, 220, 221, 232, 242, 244, 257, 258, 261, 281, 289, 299, 302, 309, 317, 322, 326, 330, 350, 351, 359, 367, 370, 389, 406, 411, 429, 431, 432, 433, 434, 435, 438, 440, 454, 459, 460, 464, 465, 467, 468, 469, 471, 472, 473, 477, 478, 480, 485, 486], "sign": [1, 18, 33, 47, 60, 65, 85, 95, 111, 127, 147, 161, 164, 173, 182, 183, 189, 192, 203, 208, 216, 228, 232, 235, 242, 272, 274, 275, 278, 281, 289, 298, 299, 301, 303, 305, 325, 351, 352, 354, 370, 371, 398, 417, 432, 434, 439, 465, 467, 468, 470, 471, 472, 473, 477, 479, 481, 483, 485], "up": [1, 7, 9, 14, 23, 31, 33, 34, 40, 43, 54, 60, 61, 65, 69, 70, 72, 75, 81, 83, 85, 86, 87, 94, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 122, 126, 128, 133, 138, 144, 146, 154, 157, 158, 164, 169, 172, 173, 183, 185, 189, 192, 196, 197, 200, 201, 204, 207, 215, 216, 218, 220, 228, 229, 230, 232, 233, 234, 237, 242, 247, 249, 250, 252, 254, 257, 261, 264, 267, 271, 272, 273, 274, 275, 276, 281, 282, 284, 286, 288, 289, 290, 298, 299, 300, 302, 303, 314, 315, 317, 321, 325, 326, 329, 334, 337, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 367, 369, 370, 374, 379, 380, 381, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 406, 411, 414, 417, 420, 421, 425, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 445, 454, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "new": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 70, 75, 78, 82, 83, 85, 86, 89, 94, 95, 97, 98, 99, 100, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 126, 128, 129, 133, 135, 138, 139, 144, 145, 149, 150, 156, 158, 160, 162, 163, 164, 166, 167, 172, 173, 175, 176, 180, 181, 182, 183, 184, 187, 189, 190, 192, 194, 197, 199, 200, 201, 202, 203, 205, 207, 208, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 228, 230, 232, 233, 234, 239, 241, 242, 243, 244, 249, 254, 255, 257, 258, 261, 264, 265, 267, 272, 273, 274, 275, 276, 277, 278, 282, 284, 286, 287, 289, 290, 294, 299, 301, 302, 303, 305, 306, 307, 310, 313, 314, 315, 318, 320, 321, 325, 326, 328, 331, 334, 335, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 357, 358, 359, 360, 363, 366, 367, 370, 371, 374, 377, 380, 381, 384, 386, 388, 389, 390, 392, 393, 394, 398, 399, 403, 407, 409, 411, 414, 415, 416, 417, 419, 420, 423, 424, 425, 426, 427, 429, 431, 432, 434, 436, 438, 440, 444, 445, 446, 453, 455, 456, 459, 465, 485, 486], "titl": [1, 61, 65, 70, 73, 94, 103, 104, 111, 114, 115, 126, 158, 166, 190, 195, 229, 247, 254, 268, 273, 287, 289, 298, 344, 347, 351, 352, 374, 378, 388, 390, 399, 415, 416, 417, 424, 466, 468, 470, 477, 483, 485], "comment": [1, 9, 61, 65, 69, 72, 79, 83, 100, 104, 109, 111, 114, 118, 125, 128, 173, 182, 200, 210, 229, 247, 250, 251, 254, 261, 262, 270, 279, 292, 299, 305, 306, 316, 319, 320, 325, 337, 367, 382, 383, 398, 416, 417, 419, 426, 427, 435, 440, 453, 466, 468, 469, 471, 473, 474, 477, 483, 485], "mozilla": [1, 115, 250, 348, 399, 407, 470, 485], "patch": [1, 54, 65, 78, 90, 94, 99, 102, 106, 111, 126, 183, 193, 249, 294, 351, 367, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 483, 484, 485], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 71, 72, 74, 78, 79, 80, 81, 85, 86, 87, 97, 99, 106, 108, 109, 111, 112, 113, 115, 119, 121, 122, 124, 126, 127, 128, 129, 130, 132, 133, 141, 144, 145, 146, 150, 151, 152, 155, 156, 158, 159, 160, 161, 163, 166, 172, 173, 174, 175, 177, 179, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 196, 198, 202, 203, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 226, 228, 229, 230, 232, 233, 234, 237, 238, 241, 242, 243, 244, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 271, 274, 275, 277, 279, 281, 284, 285, 286, 287, 289, 290, 294, 295, 297, 298, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 319, 320, 324, 325, 326, 327, 329, 334, 337, 338, 340, 341, 342, 344, 345, 348, 350, 351, 352, 354, 355, 358, 359, 361, 362, 363, 365, 368, 370, 371, 373, 381, 385, 386, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 406, 407, 409, 411, 413, 414, 415, 417, 418, 419, 420, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 443, 445, 446, 447, 448, 450, 451, 457, 458, 459, 461], "except": [2, 5, 7, 9, 11, 14, 17, 18, 22, 24, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 43, 45, 46, 47, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 71, 73, 75, 76, 78, 79, 81, 84, 85, 86, 88, 89, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 111, 112, 114, 116, 118, 119, 120, 121, 123, 124, 126, 128, 129, 132, 133, 134, 135, 139, 140, 142, 144, 145, 146, 147, 149, 150, 152, 153, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 173, 176, 177, 179, 181, 182, 183, 184, 187, 188, 189, 190, 192, 193, 194, 196, 197, 201, 202, 203, 207, 208, 212, 213, 214, 215, 217, 218, 219, 221, 222, 225, 230, 232, 233, 234, 235, 236, 237, 239, 241, 242, 247, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 264, 267, 268, 271, 272, 273, 274, 275, 276, 277, 281, 284, 285, 287, 289, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 314, 317, 320, 321, 322, 323, 326, 328, 329, 331, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 383, 385, 386, 390, 392, 393, 397, 398, 399, 401, 403, 404, 405, 406, 407, 409, 411, 412, 414, 415, 417, 418, 419, 420, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 449, 454, 456, 459, 460, 465, 466, 467, 468, 469, 470, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486], "pylist_new": [2, 33, 36, 54], "null": [2, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 82, 85, 86, 89, 103, 109, 110, 114, 116, 128, 181, 182, 197, 232, 234, 250, 268, 278, 287, 293, 299, 305, 324, 325, 344, 347, 348, 354, 355, 409, 412, 414, 415, 426, 435, 439, 440, 466, 470, 473, 475, 476, 479, 480, 481, 482, 483, 484, 485], "protocol": [2, 8, 9, 23, 27, 30, 52, 55, 58, 60, 63, 65, 84, 89, 94, 97, 100, 104, 107, 109, 112, 114, 115, 122, 127, 129, 130, 133, 136, 142, 145, 147, 148, 151, 152, 158, 164, 167, 175, 181, 182, 189, 190, 193, 201, 210, 216, 218, 219, 224, 232, 242, 248, 250, 252, 258, 259, 260, 261, 264, 266, 268, 273, 274, 275, 277, 289, 294, 299, 300, 301, 305, 306, 334, 335, 336, 344, 345, 347, 351, 353, 354, 363, 364, 367, 370, 374, 393, 394, 399, 409, 411, 416, 420, 423, 424, 427, 431, 432, 434, 439, 460, 466, 468, 469, 471, 472, 473, 475, 476, 477, 479, 482, 484, 485, 486], "call": [2, 3, 5, 7, 9, 11, 13, 14, 15, 17, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 73, 76, 78, 79, 81, 82, 84, 85, 86, 87, 94, 97, 98, 99, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 135, 138, 139, 141, 142, 144, 145, 146, 147, 150, 154, 156, 158, 160, 162, 163, 164, 166, 167, 169, 170, 172, 173, 175, 176, 179, 181, 183, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 225, 230, 232, 233, 234, 237, 238, 239, 241, 242, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 290, 294, 295, 299, 300, 301, 302, 303, 305, 308, 311, 313, 314, 315, 316, 320, 325, 326, 327, 328, 329, 331, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 376, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 439, 440, 444, 445, 446, 447, 450, 453, 455, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485], "tp_call": [2, 23, 60, 65, 85], "vectorcal": [2, 55, 60, 65, 476, 484, 485], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 27, 33, 36, 37, 43, 44, 46, 52, 55, 56, 58, 60, 62, 63, 65, 75, 78, 82, 84, 85, 86, 89, 94, 97, 98, 101, 102, 108, 109, 110, 112, 114, 115, 116, 118, 126, 132, 134, 135, 138, 139, 141, 142, 144, 146, 148, 165, 167, 170, 175, 176, 181, 182, 183, 188, 191, 193, 194, 197, 198, 199, 201, 202, 204, 205, 208, 209, 210, 212, 213, 215, 216, 224, 230, 235, 242, 243, 253, 258, 260, 261, 264, 265, 267, 268, 273, 274, 275, 277, 279, 286, 287, 288, 289, 291, 299, 300, 301, 304, 308, 310, 324, 325, 326, 341, 344, 348, 349, 352, 359, 362, 365, 367, 370, 374, 390, 392, 393, 394, 398, 404, 409, 410, 411, 413, 415, 418, 419, 423, 424, 433, 434, 436, 437, 439, 440, 444, 445, 449, 455, 465, 466, 467, 468, 486], "number": [2, 3, 5, 7, 9, 13, 16, 18, 20, 22, 23, 27, 29, 30, 31, 33, 37, 38, 39, 40, 48, 50, 51, 52, 55, 56, 57, 61, 63, 65, 72, 73, 74, 75, 76, 78, 81, 82, 83, 85, 86, 87, 89, 97, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 121, 122, 123, 124, 126, 128, 129, 133, 138, 139, 142, 144, 145, 147, 150, 152, 156, 157, 158, 159, 162, 164, 166, 169, 172, 173, 176, 179, 181, 182, 183, 189, 192, 194, 196, 197, 200, 202, 203, 206, 209, 210, 212, 215, 218, 219, 220, 221, 222, 223, 225, 230, 232, 233, 234, 237, 239, 241, 242, 243, 247, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 270, 272, 273, 275, 276, 277, 278, 280, 282, 284, 287, 289, 290, 291, 292, 294, 296, 298, 300, 301, 303, 305, 306, 310, 311, 313, 314, 318, 319, 320, 321, 324, 325, 326, 327, 328, 330, 331, 332, 334, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 374, 377, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 398, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 414, 417, 418, 420, 421, 423, 426, 429, 431, 432, 434, 435, 436, 438, 439, 440, 441, 445, 446, 447, 448, 449, 454, 455, 456, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "sequenc": [2, 5, 7, 14, 16, 22, 30, 31, 33, 35, 37, 40, 47, 48, 53, 56, 61, 63, 65, 69, 71, 78, 85, 89, 94, 97, 100, 102, 104, 109, 111, 114, 118, 128, 133, 144, 149, 151, 163, 164, 165, 167, 169, 170, 181, 182, 183, 188, 193, 195, 196, 197, 200, 203, 209, 212, 213, 216, 218, 219, 220, 225, 232, 237, 239, 243, 245, 250, 258, 259, 260, 261, 264, 265, 267, 268, 269, 272, 274, 276, 277, 281, 282, 287, 289, 290, 298, 299, 300, 302, 305, 306, 307, 308, 313, 318, 320, 324, 325, 327, 331, 332, 338, 344, 347, 348, 350, 352, 357, 363, 364, 367, 368, 371, 372, 374, 381, 383, 385, 386, 388, 390, 391, 392, 393, 394, 398, 399, 402, 404, 406, 409, 411, 414, 416, 417, 418, 423, 428, 429, 432, 434, 438, 439, 440, 444, 445, 449, 453, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "map": [2, 16, 22, 30, 31, 40, 47, 48, 56, 63, 65, 69, 78, 85, 88, 89, 94, 95, 97, 100, 103, 104, 109, 114, 115, 118, 122, 128, 129, 145, 149, 162, 164, 166, 167, 170, 172, 175, 176, 181, 183, 187, 188, 189, 190, 192, 193, 196, 197, 200, 202, 203, 210, 212, 218, 219, 220, 223, 224, 232, 233, 237, 243, 246, 249, 252, 254, 260, 261, 265, 266, 267, 273, 274, 275, 276, 277, 278, 279, 285, 287, 289, 291, 292, 293, 294, 297, 298, 299, 301, 302, 304, 305, 314, 318, 320, 325, 327, 328, 335, 341, 344, 347, 348, 350, 352, 353, 355, 357, 359, 367, 370, 371, 372, 373, 381, 382, 388, 389, 390, 391, 393, 398, 399, 406, 411, 415, 417, 419, 420, 432, 434, 435, 436, 440, 444, 445, 446, 454, 456, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485], "iter": [2, 13, 16, 22, 28, 30, 31, 47, 51, 52, 60, 61, 65, 85, 88, 97, 98, 103, 107, 111, 113, 118, 122, 127, 128, 133, 139, 141, 144, 150, 156, 157, 158, 164, 166, 167, 172, 173, 175, 176, 181, 182, 187, 188, 193, 197, 201, 202, 203, 204, 212, 220, 226, 227, 231, 232, 233, 237, 238, 239, 241, 242, 243, 249, 250, 258, 259, 260, 261, 262, 264, 268, 272, 273, 276, 277, 279, 281, 289, 291, 294, 299, 302, 303, 305, 306, 310, 314, 325, 334, 344, 347, 350, 352, 354, 359, 367, 383, 389, 390, 393, 398, 399, 406, 411, 414, 417, 418, 419, 423, 429, 431, 435, 436, 440, 445, 446, 449, 454, 466, 467, 469, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "buffer": [2, 8, 9, 18, 24, 30, 31, 32, 39, 40, 41, 48, 61, 62, 63, 65, 69, 70, 85, 97, 100, 102, 108, 112, 118, 124, 126, 127, 129, 133, 134, 136, 141, 142, 145, 148, 152, 156, 158, 163, 164, 182, 183, 193, 194, 219, 220, 221, 222, 232, 241, 242, 247, 249, 252, 275, 276, 284, 288, 289, 290, 299, 301, 302, 304, 320, 328, 334, 337, 338, 339, 344, 348, 351, 354, 355, 359, 363, 364, 365, 367, 368, 370, 392, 399, 411, 412, 417, 418, 426, 428, 459, 460, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 484, 485, 486], "structur": [2, 3, 5, 13, 16, 17, 20, 22, 26, 28, 29, 30, 31, 32, 33, 40, 41, 43, 45, 48, 49, 52, 54, 55, 56, 58, 63, 65, 81, 83, 85, 86, 89, 95, 100, 102, 103, 104, 108, 111, 116, 124, 128, 150, 160, 164, 183, 188, 193, 201, 203, 208, 210, 211, 212, 213, 214, 219, 222, 224, 229, 230, 237, 240, 243, 247, 252, 254, 255, 259, 260, 261, 262, 264, 267, 268, 277, 282, 287, 289, 299, 300, 302, 305, 311, 313, 316, 317, 325, 338, 339, 344, 346, 348, 351, 353, 354, 355, 367, 371, 374, 380, 388, 389, 392, 393, 406, 414, 417, 418, 423, 426, 427, 431, 432, 436, 437, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485], "request": [2, 23, 29, 31, 40, 43, 60, 65, 86, 94, 95, 98, 104, 107, 109, 112, 114, 115, 126, 129, 139, 144, 148, 158, 164, 166, 172, 175, 182, 183, 192, 204, 215, 217, 218, 219, 220, 222, 230, 233, 237, 241, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 262, 264, 277, 289, 290, 294, 298, 299, 300, 301, 305, 311, 313, 320, 322, 328, 334, 337, 339, 340, 341, 348, 351, 355, 359, 367, 371, 381, 388, 393, 396, 398, 400, 403, 409, 411, 414, 420, 421, 423, 424, 427, 432, 436, 440, 445, 455, 457, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 485], "type": [2, 3, 5, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 63, 64, 65, 69, 70, 75, 76, 83, 84, 87, 89, 90, 94, 95, 96, 97, 98, 99, 100, 102, 103, 107, 108, 109, 112, 115, 116, 118, 121, 122, 123, 124, 125, 127, 128, 129, 133, 144, 145, 148, 150, 151, 158, 159, 160, 162, 164, 166, 167, 173, 174, 175, 178, 179, 181, 183, 184, 188, 190, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 223, 228, 230, 232, 233, 234, 237, 242, 243, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 262, 264, 267, 268, 272, 273, 274, 275, 276, 278, 279, 281, 284, 285, 287, 289, 290, 291, 296, 299, 300, 303, 304, 310, 312, 313, 314, 319, 320, 321, 322, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 339, 343, 344, 345, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 363, 367, 368, 370, 371, 373, 381, 382, 383, 385, 386, 388, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 419, 420, 423, 424, 426, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 452, 453, 454, 455, 459, 460, 465, 466, 467, 473, 474, 475, 477, 485, 486], "independ": [2, 18, 22, 31, 32, 33, 43, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 83, 85, 94, 102, 104, 109, 116, 145, 166, 189, 200, 208, 217, 218, 232, 233, 253, 264, 267, 272, 273, 277, 350, 351, 354, 359, 371, 372, 373, 374, 381, 383, 392, 403, 414, 417, 426, 434, 466, 473, 476, 478, 484, 485, 486], "field": [2, 3, 5, 13, 20, 27, 29, 31, 32, 33, 40, 51, 52, 54, 55, 57, 58, 60, 63, 65, 69, 73, 78, 83, 85, 86, 94, 97, 100, 103, 108, 113, 116, 124, 128, 153, 154, 158, 160, 164, 166, 181, 183, 189, 192, 203, 206, 209, 210, 212, 215, 216, 220, 240, 241, 243, 249, 254, 262, 265, 267, 273, 278, 287, 299, 316, 320, 321, 322, 328, 331, 342, 344, 346, 347, 348, 349, 351, 352, 354, 355, 359, 361, 363, 366, 371, 372, 374, 381, 383, 385, 389, 390, 398, 402, 404, 409, 411, 415, 417, 426, 439, 444, 456, 459, 466, 467, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "readon": [2, 55, 65, 85, 255, 262, 338, 347, 351, 381, 414, 415, 472, 485], "format": [2, 5, 9, 10, 18, 23, 29, 33, 39, 46, 56, 60, 61, 65, 69, 70, 76, 78, 79, 83, 85, 89, 94, 95, 97, 99, 100, 102, 103, 110, 111, 112, 114, 115, 116, 118, 123, 124, 125, 126, 128, 139, 145, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 164, 170, 173, 175, 179, 182, 188, 190, 191, 192, 196, 197, 198, 200, 201, 203, 207, 208, 209, 210, 212, 214, 215, 216, 218, 219, 220, 224, 230, 232, 235, 237, 241, 242, 247, 250, 252, 253, 255, 256, 257, 258, 260, 261, 265, 267, 268, 271, 272, 273, 275, 276, 278, 282, 287, 290, 291, 292, 298, 299, 300, 301, 302, 304, 306, 308, 310, 311, 313, 314, 320, 321, 323, 325, 326, 327, 336, 337, 338, 341, 342, 344, 345, 347, 348, 355, 356, 359, 364, 367, 368, 371, 373, 374, 377, 380, 381, 383, 385, 386, 388, 389, 392, 398, 399, 401, 402, 404, 405, 409, 411, 417, 421, 426, 427, 428, 431, 432, 434, 438, 446, 447, 448, 449, 453, 454, 455, 459, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 482, 483, 485, 486], "shape": [2, 60, 65, 218, 229, 232, 290, 351, 472, 476, 478, 485], "stride": [2, 60, 65, 351, 432, 434, 469, 478], "suboffset": [2, 60, 65, 351, 478], "contigu": [2, 5, 41, 65, 97, 196, 255, 267, 277, 305, 351, 419, 472, 478, 485], "compound": [2, 33, 65, 229, 254, 352, 369, 374, 380, 381, 437, 439, 441, 472, 478, 485], "complex": [2, 5, 16, 33, 65, 70, 81, 82, 83, 85, 94, 95, 97, 109, 111, 112, 116, 126, 128, 129, 133, 138, 145, 167, 173, 176, 181, 190, 192, 193, 196, 201, 207, 210, 232, 233, 260, 267, 268, 274, 281, 295, 296, 298, 305, 313, 325, 339, 340, 352, 355, 359, 388, 390, 393, 423, 431, 432, 434, 439, 440, 444, 453, 454, 459, 468, 470, 471, 472, 473, 475, 477, 479, 481, 482, 483, 485], "array": [2, 3, 5, 9, 10, 16, 29, 37, 43, 51, 55, 57, 58, 60, 61, 63, 65, 82, 83, 85, 86, 88, 94, 97, 100, 103, 109, 123, 124, 148, 157, 164, 170, 184, 188, 222, 260, 285, 289, 290, 291, 293, 299, 305, 315, 344, 351, 354, 366, 389, 406, 412, 423, 431, 432, 446, 456, 469, 470, 471, 472, 473, 474, 477, 480, 482, 484, 485], "numpi": [2, 65, 76, 95, 127, 232, 290, 305, 350, 448, 454, 457, 465, 471, 472, 477, 478, 480, 485], "style": [2, 5, 9, 61, 65, 71, 75, 76, 83, 86, 88, 97, 104, 108, 111, 120, 122, 124, 126, 128, 139, 149, 150, 152, 157, 166, 173, 196, 203, 212, 214, 218, 226, 227, 231, 232, 233, 237, 247, 249, 252, 260, 267, 273, 274, 277, 281, 282, 290, 298, 299, 300, 302, 303, 305, 314, 319, 325, 336, 338, 339, 344, 347, 360, 367, 370, 373, 374, 377, 378, 380, 385, 392, 395, 411, 424, 430, 434, 435, 438, 439, 449, 450, 453, 456, 466, 467, 468, 469, 470, 472, 473, 474, 477, 478, 479, 482, 483, 485, 486], "and": [2, 3, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 79, 84, 88, 97, 99, 101, 105, 107, 108, 110, 112, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 135, 136, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 154, 156, 157, 159, 160, 162, 163, 165, 166, 169, 170, 172, 173, 176, 178, 179, 180, 183, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 238, 239, 240, 241, 243, 245, 246, 249, 251, 252, 253, 255, 256, 257, 259, 260, 264, 267, 270, 271, 273, 275, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 303, 304, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 349, 352, 353, 355, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 395, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 412, 413, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 430, 431, 435, 437, 438, 440, 441, 442, 445, 446, 447, 450, 452, 453, 455, 462, 486], "pil": [2, 65, 95, 351], "relat": [2, 31, 33, 40, 43, 60, 65, 69, 70, 75, 78, 89, 94, 95, 100, 103, 104, 108, 109, 111, 114, 116, 118, 119, 120, 128, 133, 139, 144, 151, 160, 161, 164, 173, 175, 183, 187, 188, 189, 196, 197, 200, 201, 203, 207, 212, 214, 215, 216, 217, 220, 222, 224, 230, 232, 235, 237, 238, 242, 243, 252, 257, 260, 262, 264, 265, 267, 271, 272, 273, 275, 276, 277, 281, 284, 286, 287, 289, 296, 299, 300, 302, 304, 305, 306, 308, 314, 320, 321, 323, 325, 326, 330, 331, 337, 338, 339, 344, 347, 348, 351, 352, 355, 359, 362, 367, 371, 374, 380, 381, 384, 389, 390, 392, 393, 398, 403, 404, 406, 409, 411, 416, 417, 419, 425, 426, 429, 430, 432, 434, 435, 437, 439, 440, 454, 459, 465, 466, 467, 469, 470, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "function": [2, 5, 9, 11, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 70, 73, 74, 75, 76, 78, 81, 82, 84, 85, 86, 87, 88, 90, 94, 97, 98, 99, 102, 106, 107, 108, 109, 110, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 129, 133, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 162, 163, 164, 165, 167, 170, 172, 173, 176, 179, 181, 183, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 242, 243, 245, 249, 250, 252, 254, 255, 256, 257, 258, 260, 262, 264, 268, 270, 271, 272, 275, 276, 278, 282, 284, 286, 287, 289, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 326, 327, 328, 330, 331, 334, 336, 337, 338, 339, 340, 345, 346, 348, 349, 350, 351, 353, 354, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 376, 382, 383, 384, 385, 386, 390, 391, 393, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 432, 433, 435, 436, 439, 440, 441, 443, 444, 446, 449, 455, 459, 460, 465, 468, 469, 473, 475, 476, 477, 479, 483, 484, 485, 486], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 81, 82, 83, 85, 86, 87, 89, 100, 106, 182, 325, 367, 468, 471, 472, 476, 482, 483, 485], "_pyobject_new": 3, "pytypeobject": [3, 8, 9, 12, 13, 15, 17, 19, 21, 22, 25, 26, 27, 28, 33, 35, 36, 37, 42, 43, 44, 47, 48, 52, 53, 54, 55, 57, 58, 59, 61, 65, 85, 86, 100, 467, 480, 483, 484, 485], "returnvalu": [3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 78, 82, 84, 85, 86, 88, 97, 98, 99, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 123, 124, 128, 129, 133, 135, 139, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 175, 176, 179, 181, 183, 184, 188, 189, 190, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 219, 220, 222, 223, 224, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 367, 369, 370, 371, 372, 374, 377, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 433, 435, 436, 437, 439, 440, 444, 445, 446, 450, 453, 455, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyvarobject": [3, 27, 48, 54, 55, 65, 367], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 18, 22, 23, 27, 32, 33, 36, 37, 38, 39, 41, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 83, 85, 100, 182, 359, 432, 471, 472, 483, 485], "size": [3, 5, 7, 8, 9, 18, 27, 29, 32, 33, 37, 39, 40, 41, 47, 51, 52, 55, 56, 57, 58, 60, 61, 65, 69, 83, 85, 86, 102, 103, 106, 108, 109, 112, 114, 121, 123, 124, 125, 126, 129, 139, 142, 147, 148, 150, 151, 160, 164, 167, 169, 170, 172, 179, 180, 181, 183, 188, 191, 192, 193, 196, 197, 218, 222, 223, 226, 230, 232, 233, 243, 249, 252, 254, 255, 258, 259, 262, 264, 268, 272, 275, 276, 284, 289, 290, 300, 301, 305, 311, 312, 314, 317, 320, 326, 327, 328, 341, 342, 344, 345, 347, 349, 350, 351, 352, 355, 356, 359, 363, 365, 367, 369, 370, 374, 377, 380, 381, 388, 390, 392, 399, 412, 414, 425, 426, 428, 432, 436, 450, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyobject_init": [3, 54, 483, 484, 485], "op": [3, 10, 15, 26, 27, 31, 35, 47, 60, 61, 65, 85, 95, 128, 129, 143, 183, 237, 270, 275, 289, 299, 325, 344, 347, 359, 370, 382, 383, 411, 469, 472, 476, 482, 485], "borrow": [3, 5, 12, 22, 23, 26, 29, 31, 33, 36, 42, 43, 49, 50, 51, 55, 56, 57, 60, 64, 83, 85, 97, 104, 219, 468, 469, 470, 485], "part": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 75, 78, 79, 82, 83, 85, 95, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 128, 129, 149, 158, 161, 163, 164, 165, 167, 173, 175, 182, 183, 189, 192, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 226, 232, 237, 242, 252, 254, 255, 257, 258, 259, 264, 265, 267, 272, 273, 274, 275, 276, 281, 282, 287, 288, 289, 299, 300, 305, 308, 313, 314, 320, 323, 325, 329, 337, 340, 344, 345, 347, 348, 351, 352, 353, 359, 367, 370, 371, 373, 374, 380, 385, 388, 389, 390, 392, 393, 394, 398, 403, 406, 407, 414, 415, 417, 423, 428, 430, 431, 432, 433, 434, 436, 439, 440, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "of": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 97, 99, 101, 102, 106, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 176, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 290, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 398, 399, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 444, 445, 446, 447, 448, 450, 452, 453, 455, 456, 459, 461, 462, 467, 468, 469, 470, 471, 472, 475, 476, 477, 484, 485, 486], "stabl": [3, 5, 6, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 113, 217, 232, 243, 258, 282, 298, 351, 359, 429, 469, 470, 473, 479, 480, 481, 483, 484, 485, 486], "abi": [3, 5, 6, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 106, 116, 359, 425, 460, 464, 473, 479, 480, 482, 484, 485, 486], "initi": [3, 5, 16, 18, 22, 23, 24, 27, 29, 30, 33, 40, 47, 55, 56, 57, 58, 60, 61, 63, 65, 66, 69, 78, 79, 81, 82, 84, 86, 89, 95, 96, 100, 102, 103, 104, 108, 109, 113, 114, 120, 121, 126, 127, 128, 129, 133, 145, 146, 147, 148, 152, 162, 164, 172, 173, 181, 182, 183, 187, 192, 195, 196, 200, 202, 209, 210, 213, 216, 218, 220, 230, 233, 234, 237, 239, 241, 242, 243, 250, 254, 255, 257, 258, 264, 267, 268, 272, 273, 274, 275, 276, 277, 282, 284, 287, 289, 290, 292, 294, 298, 299, 300, 305, 307, 311, 314, 320, 326, 337, 340, 341, 342, 344, 345, 347, 348, 351, 355, 359, 361, 364, 370, 371, 372, 374, 381, 388, 389, 390, 392, 399, 403, 404, 417, 423, 428, 429, 430, 431, 432, 435, 436, 440, 441, 454, 459, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485], "newli": [3, 5, 33, 40, 56, 65, 83, 95, 108, 163, 167, 187, 205, 239, 250, 264, 289, 299, 308, 338, 340, 344, 380, 381, 388, 414, 431, 432, 470, 472, 478, 481, 482, 485], "with": [3, 5, 7, 8, 9, 11, 13, 14, 15, 16, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 85, 86, 87, 97, 98, 99, 100, 101, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 169, 170, 172, 173, 176, 179, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 265, 267, 268, 270, 272, 274, 275, 276, 277, 278, 279, 281, 282, 284, 287, 288, 289, 290, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 427, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 450, 453, 455, 456, 459, 460, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 479, 481, 484, 485, 486], "its": [3, 5, 7, 8, 9, 11, 15, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37, 40, 41, 43, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 69, 73, 78, 79, 82, 83, 85, 86, 89, 94, 95, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 126, 128, 129, 133, 139, 141, 142, 144, 145, 149, 150, 156, 158, 159, 161, 162, 164, 169, 172, 173, 175, 176, 181, 182, 183, 184, 187, 189, 190, 192, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 225, 230, 232, 233, 235, 237, 239, 242, 247, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 268, 271, 273, 274, 275, 277, 281, 282, 284, 285, 289, 290, 298, 299, 301, 302, 303, 305, 307, 308, 310, 311, 313, 314, 315, 317, 319, 320, 321, 325, 326, 328, 329, 330, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 363, 367, 369, 370, 371, 372, 373, 374, 377, 380, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "if": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 449, 452, 454, 455, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "indic": [3, 5, 7, 30, 31, 33, 36, 39, 40, 47, 51, 53, 55, 56, 58, 60, 61, 65, 69, 78, 79, 83, 85, 86, 94, 95, 100, 106, 107, 108, 109, 111, 112, 113, 114, 115, 120, 122, 123, 126, 128, 129, 133, 142, 144, 145, 152, 162, 163, 164, 172, 173, 175, 179, 181, 182, 183, 189, 192, 195, 197, 203, 209, 210, 212, 215, 216, 217, 220, 230, 232, 233, 235, 241, 242, 248, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 267, 272, 273, 274, 276, 277, 282, 284, 289, 294, 298, 299, 301, 303, 306, 309, 311, 313, 314, 317, 320, 325, 334, 335, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 362, 366, 367, 370, 371, 374, 381, 382, 385, 390, 392, 393, 398, 399, 402, 403, 404, 409, 410, 411, 412, 414, 417, 423, 426, 428, 430, 431, 432, 434, 435, 436, 439, 440, 447, 453, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485], "that": [3, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 94, 98, 99, 100, 102, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 132, 133, 138, 139, 140, 142, 144, 145, 146, 147, 149, 150, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 450, 456, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "particip": [3, 60, 85, 86, 189, 243, 250, 258, 273, 305, 325, 466, 468, 471, 473, 475], "in": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 88, 90, 97, 99, 101, 102, 103, 106, 107, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 138, 139, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 172, 173, 174, 176, 179, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 450, 453, 455, 456, 459, 460, 462, 468, 469, 471, 472, 473, 475, 477, 478, 485, 486], "cyclic": [3, 30, 43, 48, 60, 65, 84, 95, 97, 239, 276, 298, 415, 428, 432, 477, 479, 485], "garbag": [3, 30, 40, 43, 48, 49, 60, 61, 64, 65, 83, 84, 85, 94, 95, 97, 104, 106, 109, 112, 132, 144, 145, 158, 165, 175, 176, 182, 185, 200, 220, 221, 260, 280, 289, 298, 299, 321, 344, 347, 359, 365, 367, 372, 392, 406, 415, 431, 432, 434, 456, 460, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "detector": [3, 58, 83, 261, 460, 473], "it": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 123, 126, 128, 129, 132, 133, 135, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 453, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "is": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 88, 98, 99, 100, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 132, 133, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 445, 446, 447, 450, 453, 455, 456, 459, 460, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "added": [3, 5, 22, 29, 32, 33, 40, 43, 55, 56, 58, 60, 61, 65, 69, 70, 74, 78, 79, 83, 85, 86, 95, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 113, 116, 118, 120, 121, 122, 123, 126, 133, 141, 144, 145, 147, 149, 156, 157, 158, 162, 164, 166, 167, 169, 172, 173, 175, 181, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 225, 230, 232, 234, 238, 239, 241, 247, 249, 250, 252, 254, 255, 257, 258, 259, 264, 265, 268, 272, 273, 274, 275, 276, 277, 281, 282, 287, 289, 292, 294, 298, 299, 302, 305, 308, 310, 311, 313, 314, 317, 325, 327, 330, 334, 336, 338, 340, 342, 344, 345, 347, 348, 351, 352, 354, 355, 359, 361, 363, 364, 367, 369, 370, 371, 374, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 403, 404, 405, 406, 407, 411, 414, 415, 417, 420, 423, 424, 425, 426, 428, 431, 432, 434, 436, 439, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "to": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 75, 78, 81, 82, 83, 84, 85, 87, 88, 90, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 279, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 304, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 391, 392, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 459, 460, 461, 465, 467, 468, 485, 486], "set": [3, 5, 7, 9, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 43, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 69, 70, 72, 74, 78, 79, 82, 83, 85, 86, 87, 89, 91, 94, 95, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 121, 123, 126, 128, 129, 135, 139, 142, 143, 144, 145, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 172, 173, 175, 176, 179, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 229, 230, 232, 233, 234, 235, 237, 239, 242, 243, 247, 249, 250, 251, 252, 255, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 305, 307, 311, 313, 314, 317, 319, 320, 324, 325, 326, 328, 329, 330, 334, 336, 337, 338, 340, 341, 342, 344, 345, 347, 349, 350, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 439, 440, 444, 449, 452, 454, 456, 459, 460, 462, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "observ": [3, 76, 95, 106, 109, 189, 215, 324, 355, 386, 388, 398, 440, 468, 478, 485], "other": [3, 5, 7, 9, 11, 15, 18, 23, 26, 27, 31, 32, 33, 37, 40, 41, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 70, 72, 73, 75, 76, 79, 82, 83, 84, 85, 87, 88, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 128, 133, 138, 139, 142, 145, 147, 150, 151, 152, 157, 158, 159, 160, 161, 164, 165, 167, 169, 173, 175, 176, 181, 182, 183, 185, 187, 188, 189, 190, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 216, 217, 220, 223, 230, 232, 233, 234, 237, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 281, 284, 286, 289, 290, 292, 293, 294, 295, 299, 300, 302, 303, 304, 308, 313, 314, 315, 316, 319, 320, 325, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 367, 370, 371, 372, 373, 374, 381, 383, 384, 386, 388, 389, 391, 392, 393, 394, 399, 402, 403, 404, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 450, 459, 460, 465, 485, 486], "are": [3, 5, 7, 9, 11, 12, 13, 15, 16, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 450, 455, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "not": [3, 5, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 40, 41, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 76, 78, 79, 82, 83, 85, 86, 87, 89, 90, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 132, 133, 135, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 374, 376, 378, 380, 381, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 452, 453, 455, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "affect": [3, 31, 33, 36, 43, 56, 57, 65, 69, 72, 73, 83, 94, 103, 104, 109, 111, 116, 122, 150, 173, 183, 187, 189, 192, 197, 200, 209, 212, 218, 232, 237, 250, 254, 257, 258, 264, 272, 275, 277, 284, 299, 312, 313, 325, 326, 327, 328, 344, 347, 348, 350, 352, 355, 363, 367, 371, 372, 380, 381, 388, 392, 393, 394, 398, 404, 406, 409, 411, 414, 431, 432, 434, 436, 440, 459, 460, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyobject_initvar": [3, 54, 485], "this": [3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 88, 89, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 445, 450, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "doe": [3, 5, 9, 22, 23, 27, 29, 31, 32, 33, 36, 38, 40, 43, 47, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 73, 79, 82, 83, 85, 86, 87, 94, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 121, 122, 126, 128, 129, 133, 139, 144, 146, 149, 156, 158, 160, 163, 164, 167, 169, 172, 173, 175, 181, 182, 183, 185, 187, 189, 190, 192, 194, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 217, 218, 220, 227, 228, 230, 232, 233, 234, 235, 237, 241, 247, 249, 250, 251, 252, 254, 257, 258, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 282, 284, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 312, 314, 315, 317, 320, 325, 328, 334, 336, 337, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 361, 363, 367, 369, 370, 371, 373, 381, 383, 384, 385, 386, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 439, 440, 441, 444, 446, 453, 456, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "everyth": [3, 54, 60, 69, 72, 79, 83, 86, 95, 98, 100, 102, 109, 110, 112, 115, 116, 126, 144, 200, 215, 227, 232, 254, 274, 298, 299, 300, 305, 325, 338, 339, 341, 344, 364, 374, 393, 404, 423, 438, 472, 474, 476, 478, 485], "also": [3, 5, 7, 11, 12, 23, 26, 27, 29, 31, 32, 33, 38, 40, 43, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 69, 70, 72, 73, 78, 81, 82, 83, 85, 86, 87, 89, 94, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 125, 126, 128, 133, 138, 139, 142, 144, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 172, 173, 175, 178, 179, 181, 182, 183, 187, 189, 190, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 220, 221, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 254, 255, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 284, 285, 287, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 308, 311, 312, 313, 314, 315, 317, 319, 320, 325, 327, 328, 330, 331, 334, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 363, 366, 367, 369, 370, 371, 372, 373, 374, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "length": [3, 5, 7, 8, 9, 22, 23, 24, 32, 33, 36, 46, 47, 51, 52, 53, 55, 56, 57, 60, 61, 65, 83, 85, 95, 100, 102, 103, 104, 106, 109, 112, 114, 115, 123, 126, 127, 128, 129, 147, 148, 149, 152, 157, 164, 180, 181, 182, 183, 190, 192, 196, 197, 202, 203, 208, 209, 212, 214, 215, 218, 222, 232, 249, 252, 255, 260, 264, 265, 267, 268, 274, 275, 276, 277, 279, 281, 284, 289, 290, 298, 299, 314, 320, 325, 326, 334, 338, 342, 344, 347, 348, 350, 352, 354, 359, 363, 366, 369, 370, 371, 381, 389, 390, 392, 393, 397, 399, 404, 409, 411, 412, 414, 419, 423, 426, 427, 428, 431, 432, 434, 439, 440, 459, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "inform": [3, 5, 7, 11, 14, 23, 25, 31, 32, 33, 40, 43, 55, 57, 60, 61, 63, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 87, 95, 96, 98, 99, 100, 103, 104, 106, 107, 108, 111, 114, 115, 116, 118, 121, 124, 126, 128, 133, 139, 144, 145, 146, 150, 158, 159, 161, 164, 169, 175, 178, 181, 182, 183, 187, 189, 192, 194, 196, 197, 199, 200, 202, 203, 204, 208, 210, 212, 214, 216, 218, 220, 222, 223, 230, 232, 233, 234, 235, 240, 242, 247, 249, 250, 252, 254, 255, 258, 259, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 282, 284, 289, 292, 294, 298, 302, 305, 308, 311, 313, 314, 317, 318, 319, 320, 321, 325, 326, 334, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 351, 354, 355, 357, 359, 363, 366, 367, 370, 371, 374, 378, 380, 381, 384, 385, 386, 388, 390, 392, 393, 395, 398, 399, 402, 403, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 426, 427, 428, 429, 431, 432, 433, 436, 438, 439, 440, 452, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "for": [3, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 96, 97, 99, 100, 101, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 172, 173, 176, 178, 179, 181, 187, 188, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 242, 243, 245, 247, 249, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 265, 266, 268, 270, 271, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 391, 392, 393, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 437, 438, 439, 440, 441, 444, 446, 447, 449, 450, 452, 454, 455, 456, 457, 459, 460, 461, 462, 466, 467, 468, 474, 485, 486], "variabl": [3, 5, 9, 12, 13, 16, 18, 20, 22, 23, 26, 29, 30, 32, 33, 40, 43, 49, 50, 52, 60, 61, 63, 65, 69, 78, 81, 82, 83, 85, 86, 89, 94, 97, 99, 102, 103, 104, 109, 111, 114, 115, 116, 118, 120, 124, 129, 133, 144, 147, 158, 159, 161, 162, 169, 170, 173, 180, 183, 194, 197, 200, 216, 218, 220, 221, 222, 230, 232, 234, 235, 237, 238, 252, 254, 255, 256, 257, 258, 260, 261, 264, 267, 270, 272, 273, 287, 289, 292, 300, 301, 303, 305, 307, 312, 317, 319, 321, 325, 326, 330, 337, 338, 339, 341, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 363, 367, 370, 371, 372, 373, 381, 385, 386, 388, 389, 390, 392, 393, 398, 399, 403, 404, 407, 409, 411, 412, 414, 415, 416, 424, 429, 431, 432, 433, 434, 435, 436, 439, 440, 444, 445, 452, 453, 456, 460, 462, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 480, 482, 483, 484, 485], "pyobject_new": [3, 27, 40, 60, 469, 483, 484, 485], "use": [3, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 98, 99, 101, 102, 103, 104, 106, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 132, 133, 135, 138, 139, 140, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 374, 377, 378, 379, 383, 384, 385, 386, 389, 390, 391, 393, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 444, 446, 447, 450, 453, 457, 460, 462, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486], "defin": [3, 5, 7, 11, 14, 15, 23, 24, 25, 27, 29, 31, 32, 33, 40, 41, 43, 48, 54, 55, 56, 58, 60, 61, 65, 69, 72, 73, 78, 81, 82, 83, 84, 87, 89, 94, 98, 102, 103, 104, 108, 109, 110, 111, 113, 114, 115, 116, 120, 121, 122, 124, 126, 128, 129, 132, 133, 138, 139, 146, 147, 149, 150, 152, 153, 157, 158, 160, 161, 162, 164, 167, 172, 173, 175, 178, 179, 181, 182, 183, 185, 187, 189, 190, 192, 193, 195, 197, 200, 201, 203, 206, 210, 212, 215, 218, 219, 220, 222, 223, 230, 232, 233, 234, 237, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 268, 269, 271, 272, 273, 275, 277, 281, 282, 289, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 313, 315, 316, 318, 320, 323, 325, 326, 328, 329, 330, 331, 334, 335, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 363, 366, 367, 370, 371, 372, 374, 377, 380, 381, 382, 384, 385, 388, 389, 391, 392, 393, 394, 398, 399, 401, 402, 404, 405, 406, 407, 409, 411, 412, 414, 415, 417, 418, 419, 423, 425, 426, 427, 429, 431, 432, 433, 434, 436, 438, 439, 440, 444, 445, 447, 453, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486], "by": [3, 5, 7, 12, 14, 15, 18, 20, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 43, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 69, 70, 72, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 179, 181, 183, 184, 185, 187, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 286, 287, 288, 289, 290, 292, 294, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 377, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 447, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "header": [3, 20, 25, 33, 60, 65, 72, 75, 78, 83, 85, 94, 108, 111, 116, 123, 129, 141, 148, 152, 157, 158, 160, 162, 173, 175, 181, 182, 190, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 222, 237, 241, 249, 250, 251, 252, 254, 255, 258, 262, 273, 275, 277, 282, 291, 294, 299, 303, 311, 317, 323, 342, 343, 344, 348, 356, 359, 360, 363, 367, 382, 385, 389, 397, 399, 401, 405, 415, 423, 426, 428, 431, 433, 456, 460, 465, 467, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485], "count": [3, 5, 7, 9, 12, 23, 30, 31, 32, 43, 44, 47, 49, 51, 53, 55, 56, 60, 61, 65, 84, 85, 86, 88, 90, 94, 95, 97, 99, 100, 103, 104, 109, 111, 126, 127, 133, 145, 150, 152, 155, 158, 166, 167, 170, 182, 183, 188, 189, 191, 194, 196, 197, 200, 203, 215, 218, 225, 231, 233, 234, 243, 254, 255, 257, 258, 261, 264, 267, 273, 277, 284, 287, 289, 290, 294, 298, 299, 303, 305, 311, 314, 324, 325, 334, 337, 344, 347, 348, 350, 351, 352, 354, 359, 367, 369, 370, 371, 372, 374, 384, 386, 392, 399, 417, 432, 434, 439, 440, 446, 450, 456, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 485], "will": [3, 5, 7, 9, 11, 12, 14, 15, 17, 18, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 133, 139, 140, 142, 144, 145, 146, 147, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 187, 189, 190, 192, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 447, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "be": [3, 5, 7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 450, 452, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "one": [3, 5, 7, 9, 11, 13, 15, 18, 23, 24, 25, 27, 29, 31, 32, 33, 35, 40, 41, 43, 45, 47, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 72, 73, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 121, 122, 123, 125, 126, 128, 129, 133, 139, 142, 144, 145, 147, 149, 150, 152, 157, 158, 160, 161, 162, 163, 164, 166, 167, 169, 172, 173, 175, 176, 179, 181, 182, 183, 187, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 239, 241, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 317, 320, 323, 324, 325, 326, 328, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 366, 367, 369, 370, 371, 372, 374, 380, 381, 383, 384, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 423, 426, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 455, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "memori": [3, 5, 7, 16, 18, 23, 27, 29, 30, 31, 32, 33, 39, 41, 43, 45, 46, 52, 55, 56, 58, 60, 61, 63, 65, 82, 83, 85, 86, 87, 95, 97, 103, 104, 108, 109, 111, 112, 114, 121, 125, 128, 129, 138, 142, 158, 164, 170, 182, 190, 191, 192, 194, 214, 219, 220, 221, 232, 241, 242, 243, 254, 258, 260, 261, 264, 266, 267, 268, 275, 277, 289, 299, 305, 320, 328, 336, 338, 339, 344, 345, 347, 354, 355, 359, 367, 370, 393, 406, 409, 410, 413, 415, 417, 425, 426, 428, 432, 439, 446, 459, 460, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 481, 482, 483, 484, 485], "determin": [3, 5, 7, 11, 18, 22, 23, 32, 33, 38, 43, 47, 51, 57, 60, 65, 69, 78, 83, 85, 86, 95, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 126, 133, 139, 145, 150, 158, 161, 163, 164, 165, 167, 181, 182, 183, 185, 187, 188, 190, 192, 195, 196, 200, 204, 210, 215, 218, 220, 222, 232, 237, 239, 249, 254, 255, 256, 258, 261, 265, 269, 271, 272, 273, 274, 275, 276, 277, 278, 281, 285, 289, 292, 298, 299, 300, 301, 302, 303, 305, 313, 314, 317, 320, 324, 325, 326, 327, 334, 336, 337, 338, 339, 340, 341, 344, 347, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 366, 367, 371, 372, 374, 381, 383, 388, 390, 392, 399, 402, 404, 409, 414, 419, 425, 428, 429, 431, 433, 434, 436, 438, 439, 440, 465, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 485], "from": [3, 5, 7, 8, 9, 11, 12, 15, 16, 20, 22, 23, 24, 25, 26, 27, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 139, 141, 142, 143, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 169, 170, 172, 173, 176, 179, 181, 183, 184, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 445, 446, 447, 448, 453, 454, 455, 456, 457, 459, 460, 462, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "tp_basics": [3, 58, 60, 85, 86, 484, 485], "pyobject_newvar": [3, 27, 40, 469, 483, 484, 485], "allow": [3, 5, 7, 9, 16, 22, 23, 26, 31, 32, 33, 39, 41, 43, 47, 54, 56, 60, 61, 65, 69, 70, 73, 74, 75, 78, 81, 82, 83, 85, 86, 89, 94, 95, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 126, 128, 129, 133, 138, 139, 142, 144, 149, 153, 157, 158, 160, 161, 163, 164, 166, 167, 169, 172, 173, 175, 179, 181, 182, 183, 186, 187, 188, 189, 192, 195, 196, 197, 200, 201, 202, 203, 209, 210, 212, 215, 217, 220, 221, 222, 225, 230, 232, 233, 234, 235, 237, 241, 242, 249, 250, 251, 252, 254, 255, 258, 261, 264, 267, 268, 269, 271, 272, 273, 274, 275, 277, 281, 282, 284, 285, 289, 292, 293, 294, 298, 299, 301, 302, 303, 305, 308, 311, 313, 314, 317, 319, 320, 325, 326, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 342, 344, 345, 347, 348, 351, 352, 353, 355, 359, 361, 363, 367, 369, 370, 371, 374, 379, 380, 381, 382, 384, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 417, 419, 420, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 445, 447, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "plus": [3, 56, 60, 65, 69, 85, 94, 116, 126, 182, 183, 184, 192, 196, 201, 215, 270, 289, 296, 298, 299, 308, 311, 337, 341, 349, 359, 367, 369, 370, 382, 393, 394, 398, 411, 415, 434, 438, 439, 465, 468, 469, 470, 471, 478, 479], "given": [3, 5, 7, 9, 14, 20, 23, 24, 29, 31, 33, 40, 41, 43, 47, 53, 55, 58, 60, 61, 63, 69, 70, 73, 74, 76, 78, 82, 83, 94, 99, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 115, 116, 118, 121, 122, 123, 126, 128, 133, 139, 144, 150, 156, 157, 160, 161, 162, 163, 164, 169, 172, 173, 175, 176, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 196, 197, 200, 202, 203, 207, 209, 210, 212, 213, 215, 216, 217, 218, 220, 223, 225, 228, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 249, 250, 251, 252, 254, 255, 257, 258, 261, 264, 265, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 289, 292, 294, 295, 298, 299, 301, 302, 303, 305, 306, 307, 308, 312, 314, 316, 318, 319, 320, 325, 328, 330, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 361, 363, 364, 367, 369, 370, 371, 372, 374, 377, 380, 381, 384, 385, 388, 389, 390, 391, 392, 393, 398, 399, 402, 403, 404, 406, 407, 411, 412, 414, 415, 416, 417, 418, 421, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 440, 445, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "tp_items": [3, 58, 60, 85, 86], "implement": [3, 5, 8, 9, 12, 13, 15, 20, 23, 27, 28, 29, 30, 31, 33, 37, 40, 43, 47, 51, 53, 54, 56, 58, 60, 61, 63, 64, 65, 69, 70, 74, 76, 78, 82, 83, 85, 86, 95, 97, 98, 100, 101, 102, 103, 104, 106, 108, 111, 113, 114, 115, 120, 122, 126, 128, 129, 138, 139, 142, 144, 145, 148, 149, 150, 158, 162, 163, 164, 167, 172, 173, 174, 176, 179, 181, 182, 187, 188, 189, 192, 197, 200, 203, 210, 212, 214, 215, 218, 219, 220, 221, 225, 227, 228, 230, 232, 233, 234, 237, 241, 242, 243, 244, 247, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 262, 264, 265, 267, 272, 273, 274, 275, 277, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 298, 299, 300, 302, 304, 305, 306, 308, 311, 312, 313, 314, 315, 318, 320, 321, 322, 325, 326, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 367, 370, 371, 373, 374, 375, 379, 381, 383, 385, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 409, 413, 414, 417, 418, 419, 420, 421, 423, 426, 427, 429, 430, 431, 433, 434, 436, 437, 439, 440, 445, 446, 454, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 483, 484, 485, 486], "like": [3, 5, 7, 12, 16, 18, 23, 27, 29, 31, 32, 33, 34, 40, 41, 43, 44, 47, 52, 53, 55, 57, 58, 60, 61, 63, 65, 69, 70, 73, 74, 78, 79, 81, 83, 84, 85, 86, 87, 89, 94, 95, 97, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 123, 126, 127, 128, 129, 133, 135, 139, 141, 144, 147, 149, 150, 152, 153, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 169, 173, 175, 178, 181, 182, 183, 187, 188, 189, 190, 192, 196, 197, 200, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 221, 222, 225, 230, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 289, 290, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 312, 313, 314, 315, 316, 317, 319, 320, 323, 325, 330, 334, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 370, 371, 374, 380, 381, 383, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 429, 431, 432, 434, 435, 436, 438, 439, 440, 446, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "tupl": [3, 5, 10, 14, 16, 20, 23, 26, 33, 36, 38, 40, 47, 51, 52, 55, 56, 58, 59, 60, 63, 65, 69, 78, 82, 83, 85, 86, 97, 100, 104, 106, 108, 109, 111, 113, 115, 118, 119, 121, 122, 123, 126, 127, 128, 133, 139, 140, 142, 145, 147, 150, 154, 157, 159, 162, 164, 172, 176, 178, 182, 183, 187, 188, 189, 190, 192, 193, 195, 196, 197, 200, 203, 210, 212, 215, 216, 218, 220, 228, 230, 232, 233, 234, 239, 240, 243, 249, 250, 251, 252, 255, 257, 258, 260, 261, 264, 265, 267, 268, 270, 272, 273, 275, 277, 278, 280, 282, 285, 287, 289, 292, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 309, 310, 311, 313, 314, 316, 320, 322, 324, 325, 328, 331, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 354, 355, 356, 358, 359, 360, 364, 365, 367, 370, 371, 374, 377, 381, 383, 385, 386, 388, 389, 390, 392, 393, 398, 399, 400, 402, 404, 405, 406, 409, 411, 416, 417, 419, 420, 423, 424, 426, 431, 432, 434, 435, 436, 440, 444, 445, 447, 449, 450, 454, 455, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "which": [3, 5, 7, 9, 12, 14, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 37, 38, 40, 41, 43, 46, 47, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 99, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 120, 121, 123, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 247, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 359, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "abl": [3, 7, 31, 60, 70, 73, 76, 78, 83, 85, 86, 87, 94, 100, 102, 108, 109, 110, 111, 112, 114, 128, 147, 158, 164, 165, 175, 182, 183, 189, 201, 218, 220, 242, 243, 247, 261, 273, 274, 275, 298, 299, 300, 301, 305, 315, 320, 325, 338, 344, 347, 348, 350, 355, 363, 367, 370, 388, 393, 398, 404, 410, 411, 417, 425, 431, 432, 438, 460, 465, 466, 467, 468, 471, 473, 477, 478, 479, 482, 483, 485], "their": [3, 5, 7, 14, 18, 24, 27, 31, 32, 33, 40, 43, 52, 54, 56, 58, 60, 61, 65, 69, 70, 72, 73, 76, 82, 83, 85, 86, 87, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 126, 128, 133, 138, 142, 145, 158, 164, 169, 173, 175, 176, 181, 182, 183, 187, 188, 189, 190, 192, 193, 197, 200, 201, 202, 203, 210, 212, 214, 215, 221, 222, 223, 225, 232, 233, 234, 237, 239, 242, 246, 250, 251, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 281, 285, 288, 289, 290, 294, 298, 299, 300, 302, 303, 305, 313, 314, 318, 319, 320, 330, 331, 332, 335, 338, 339, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 363, 366, 367, 368, 370, 371, 374, 377, 380, 381, 383, 385, 386, 388, 390, 391, 392, 393, 398, 399, 402, 403, 404, 406, 411, 414, 415, 416, 417, 419, 421, 423, 425, 426, 429, 430, 431, 432, 433, 434, 436, 439, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "at": [3, 5, 7, 9, 13, 14, 18, 23, 27, 29, 31, 32, 33, 36, 39, 40, 41, 43, 47, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 85, 86, 87, 89, 95, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 126, 128, 129, 132, 133, 135, 139, 144, 145, 146, 147, 149, 150, 152, 156, 158, 160, 161, 162, 164, 166, 169, 172, 173, 175, 176, 179, 181, 182, 183, 186, 187, 189, 192, 194, 196, 197, 198, 199, 200, 201, 203, 207, 208, 209, 210, 214, 215, 217, 218, 220, 221, 222, 225, 228, 230, 232, 233, 234, 237, 239, 241, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 267, 268, 270, 272, 273, 274, 275, 276, 277, 281, 283, 284, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 314, 315, 317, 319, 320, 323, 324, 325, 326, 328, 330, 334, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 363, 364, 367, 369, 370, 371, 372, 374, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 399, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 444, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "construct": [3, 23, 51, 55, 56, 59, 63, 78, 82, 83, 85, 95, 103, 104, 107, 108, 109, 113, 120, 126, 133, 139, 142, 156, 164, 167, 175, 182, 189, 192, 195, 197, 200, 201, 204, 208, 210, 215, 216, 218, 220, 223, 227, 228, 234, 241, 242, 250, 252, 257, 258, 265, 267, 273, 274, 276, 287, 289, 298, 299, 302, 305, 313, 314, 320, 325, 326, 337, 340, 342, 344, 347, 348, 351, 354, 370, 374, 385, 388, 390, 392, 393, 394, 398, 406, 413, 415, 416, 417, 418, 423, 424, 426, 429, 431, 432, 433, 434, 439, 440, 455, 459, 465, 466, 467, 468, 470, 471, 473, 477, 478, 480, 481, 482, 483, 484, 485], "time": [3, 4, 5, 13, 20, 23, 27, 29, 31, 32, 39, 40, 43, 51, 60, 61, 63, 65, 69, 70, 76, 78, 79, 82, 83, 85, 86, 87, 89, 95, 96, 97, 99, 100, 102, 103, 104, 106, 110, 111, 112, 115, 116, 121, 123, 124, 126, 128, 133, 138, 139, 140, 144, 145, 146, 147, 148, 150, 152, 154, 157, 158, 163, 166, 169, 172, 173, 175, 179, 181, 182, 183, 188, 191, 192, 196, 199, 200, 209, 210, 215, 216, 218, 219, 220, 221, 223, 225, 232, 233, 234, 237, 238, 239, 241, 242, 243, 247, 250, 252, 254, 255, 257, 258, 260, 261, 265, 267, 272, 273, 274, 275, 277, 282, 287, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 306, 310, 312, 314, 315, 320, 324, 325, 326, 328, 331, 332, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 348, 349, 350, 351, 355, 359, 362, 363, 364, 367, 369, 370, 374, 377, 380, 381, 384, 388, 390, 392, 393, 394, 399, 402, 403, 404, 406, 409, 411, 412, 413, 414, 419, 420, 423, 424, 426, 427, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 444, 447, 453, 455, 456, 459, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 479, 485], "embed": [3, 5, 7, 9, 31, 33, 43, 49, 54, 61, 65, 69, 70, 83, 84, 92, 100, 102, 103, 106, 111, 112, 114, 169, 181, 183, 206, 209, 265, 272, 287, 299, 314, 323, 325, 351, 355, 367, 371, 374, 380, 404, 419, 424, 425, 439, 455, 465, 467, 468, 471, 473, 476, 477, 479, 482, 483, 484, 485, 486], "into": [3, 5, 9, 13, 18, 20, 22, 23, 24, 25, 29, 31, 32, 33, 34, 36, 39, 47, 52, 56, 58, 60, 61, 65, 69, 70, 72, 73, 74, 76, 78, 79, 82, 83, 86, 89, 94, 95, 98, 100, 102, 103, 107, 108, 110, 111, 112, 113, 114, 116, 118, 119, 120, 126, 128, 133, 139, 140, 142, 144, 146, 147, 150, 152, 154, 158, 160, 163, 164, 166, 169, 172, 173, 175, 181, 182, 183, 187, 189, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 220, 221, 222, 229, 230, 232, 233, 234, 237, 242, 243, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 277, 278, 282, 284, 287, 288, 289, 290, 298, 299, 300, 301, 302, 303, 304, 305, 311, 313, 314, 315, 317, 318, 320, 325, 326, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 362, 363, 367, 369, 370, 371, 374, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 399, 401, 403, 404, 409, 411, 412, 413, 414, 415, 416, 417, 419, 421, 423, 425, 426, 428, 431, 432, 434, 436, 439, 440, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "same": [3, 5, 7, 8, 9, 15, 20, 22, 23, 25, 26, 31, 32, 33, 36, 37, 39, 40, 43, 44, 47, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 72, 73, 74, 76, 78, 82, 83, 85, 86, 89, 94, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 150, 152, 154, 157, 158, 161, 163, 164, 169, 172, 173, 175, 176, 179, 181, 182, 183, 184, 187, 189, 190, 192, 193, 196, 197, 200, 201, 202, 203, 208, 209, 210, 212, 214, 215, 216, 218, 220, 222, 223, 225, 227, 228, 230, 232, 233, 235, 237, 238, 239, 241, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 261, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 311, 313, 314, 315, 318, 319, 320, 325, 326, 327, 328, 331, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 363, 364, 366, 367, 369, 370, 371, 372, 374, 376, 379, 380, 381, 383, 385, 388, 389, 390, 391, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 409, 411, 414, 417, 419, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "decreas": [3, 7, 189, 197, 243, 265, 371, 466, 470, 473, 478, 481, 483, 485], "improv": [3, 23, 54, 65, 83, 95, 99, 103, 109, 111, 120, 126, 129, 139, 164, 172, 173, 229, 255, 258, 281, 305, 320, 348, 373, 381, 414, 430, 432, 434, 474, 485, 486], "manag": [3, 5, 17, 31, 40, 49, 65, 84, 86, 97, 98, 108, 112, 115, 116, 124, 126, 128, 133, 142, 144, 150, 154, 158, 164, 170, 182, 190, 192, 193, 194, 197, 198, 201, 210, 220, 225, 232, 250, 252, 254, 258, 260, 262, 264, 273, 277, 284, 290, 291, 301, 304, 305, 314, 321, 334, 335, 336, 341, 344, 345, 348, 359, 360, 363, 364, 365, 367, 370, 373, 379, 381, 392, 393, 399, 406, 407, 423, 426, 431, 435, 438, 464, 465, 466, 469, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "effici": [3, 13, 57, 60, 61, 65, 102, 104, 107, 112, 113, 114, 133, 139, 158, 164, 181, 189, 192, 220, 223, 226, 227, 231, 233, 242, 243, 259, 260, 289, 290, 299, 305, 306, 313, 325, 334, 335, 348, 350, 351, 354, 369, 370, 409, 411, 413, 417, 428, 432, 468, 470, 472, 474, 477, 478, 479, 480, 483, 484, 485], "void": [3, 5, 7, 9, 11, 12, 17, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 36, 37, 39, 40, 43, 46, 47, 49, 50, 55, 56, 57, 58, 60, 61, 63, 81, 82, 83, 85, 86, 87, 96, 106, 182, 325, 354, 415, 435, 460, 473, 476, 483, 484], "pyobject_del": [3, 40, 60, 469], "releas": [3, 5, 7, 12, 27, 32, 33, 34, 40, 46, 54, 55, 58, 60, 61, 65, 69, 70, 72, 76, 78, 82, 83, 85, 86, 87, 90, 94, 95, 103, 109, 110, 115, 116, 119, 121, 124, 128, 133, 143, 144, 154, 170, 172, 175, 182, 183, 197, 199, 217, 241, 242, 243, 257, 261, 264, 273, 277, 289, 290, 299, 304, 305, 309, 339, 344, 347, 350, 351, 359, 362, 367, 370, 374, 376, 386, 388, 390, 404, 426, 430, 432, 440, 444, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 486], "an": [3, 5, 7, 8, 9, 11, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 75, 78, 79, 81, 84, 85, 86, 87, 90, 99, 100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 138, 139, 142, 143, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 176, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 444, 445, 446, 447, 453, 455, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "or": [3, 5, 7, 8, 9, 11, 13, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 88, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 128, 129, 132, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 376, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 449, 452, 453, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "normal": [3, 5, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 43, 47, 53, 55, 60, 63, 65, 69, 70, 78, 79, 81, 82, 83, 85, 86, 94, 95, 97, 100, 102, 103, 108, 109, 111, 112, 114, 115, 116, 119, 122, 126, 128, 144, 145, 146, 149, 150, 152, 157, 162, 164, 173, 175, 182, 183, 187, 189, 192, 194, 196, 200, 202, 203, 205, 207, 209, 212, 215, 216, 218, 220, 221, 225, 227, 228, 232, 233, 237, 242, 247, 249, 253, 254, 255, 258, 264, 272, 273, 274, 275, 279, 281, 282, 288, 289, 294, 296, 298, 299, 300, 302, 303, 305, 308, 314, 317, 320, 325, 326, 327, 330, 337, 339, 341, 342, 344, 346, 348, 349, 350, 351, 352, 353, 355, 359, 367, 368, 369, 370, 371, 373, 374, 377, 379, 381, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 404, 406, 411, 414, 415, 418, 419, 420, 423, 425, 426, 429, 431, 432, 433, 434, 436, 438, 439, 440, 445, 459, 465, 467, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "tp_dealloc": [3, 27, 58, 60, 85, 86, 483, 485], "handler": [3, 23, 24, 27, 31, 32, 56, 58, 60, 61, 62, 63, 65, 83, 85, 86, 91, 97, 114, 121, 124, 128, 132, 136, 138, 145, 151, 158, 159, 172, 173, 183, 191, 194, 195, 197, 203, 204, 208, 209, 220, 232, 236, 247, 252, 260, 262, 264, 266, 272, 274, 279, 289, 298, 299, 303, 314, 320, 321, 334, 335, 338, 344, 347, 351, 357, 359, 361, 363, 367, 371, 373, 392, 397, 399, 407, 415, 416, 418, 420, 421, 424, 431, 432, 433, 459, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "specifi": [3, 5, 7, 9, 11, 13, 14, 17, 18, 20, 22, 23, 29, 31, 32, 33, 37, 40, 43, 47, 53, 54, 58, 60, 61, 63, 65, 69, 70, 72, 73, 74, 75, 76, 78, 81, 83, 85, 86, 87, 89, 98, 99, 102, 103, 104, 108, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 128, 133, 138, 139, 144, 145, 147, 149, 150, 152, 156, 157, 158, 161, 162, 163, 164, 167, 169, 172, 173, 175, 179, 181, 183, 187, 189, 190, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 230, 232, 233, 234, 235, 237, 238, 241, 242, 243, 249, 250, 251, 252, 254, 255, 258, 261, 264, 265, 267, 268, 272, 273, 274, 275, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 294, 298, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 313, 314, 317, 319, 320, 323, 325, 326, 328, 330, 334, 335, 336, 337, 338, 339, 341, 342, 344, 347, 348, 351, 352, 354, 355, 359, 360, 363, 364, 366, 367, 370, 371, 372, 374, 377, 380, 381, 383, 384, 385, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 409, 410, 411, 414, 415, 417, 419, 420, 426, 427, 428, 429, 431, 432, 433, 434, 436, 439, 440, 450, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "should": [3, 5, 7, 11, 14, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 40, 43, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 95, 98, 99, 100, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 133, 138, 139, 142, 144, 145, 147, 149, 150, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 186, 187, 189, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 313, 314, 315, 316, 317, 320, 325, 326, 327, 328, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 363, 364, 367, 369, 370, 371, 372, 374, 376, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 398, 399, 402, 403, 404, 405, 406, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "access": [3, 5, 7, 11, 12, 16, 20, 23, 24, 26, 29, 31, 33, 43, 45, 48, 49, 51, 52, 56, 57, 58, 60, 65, 69, 70, 76, 82, 83, 85, 86, 87, 95, 97, 100, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 124, 128, 141, 143, 144, 148, 152, 156, 158, 161, 164, 166, 167, 170, 175, 176, 181, 183, 187, 188, 189, 192, 197, 200, 201, 203, 207, 210, 212, 214, 217, 219, 220, 224, 225, 226, 228, 232, 233, 234, 237, 239, 240, 242, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 275, 277, 281, 282, 284, 287, 288, 289, 292, 298, 299, 300, 301, 303, 305, 308, 312, 316, 318, 320, 321, 325, 326, 328, 330, 334, 336, 338, 339, 342, 344, 345, 346, 347, 348, 349, 351, 352, 355, 357, 359, 363, 364, 367, 370, 372, 374, 380, 381, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 406, 408, 410, 411, 413, 414, 415, 416, 417, 419, 424, 426, 429, 430, 431, 433, 434, 436, 440, 453, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485], "after": [3, 5, 7, 8, 13, 18, 23, 27, 31, 32, 33, 37, 40, 43, 54, 55, 56, 58, 60, 61, 65, 69, 70, 72, 78, 79, 81, 82, 83, 86, 95, 98, 100, 102, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 133, 139, 144, 145, 146, 149, 150, 152, 154, 156, 157, 158, 159, 160, 162, 163, 172, 173, 175, 176, 181, 182, 183, 185, 187, 189, 191, 192, 196, 197, 200, 202, 203, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 225, 230, 232, 234, 235, 239, 241, 249, 252, 254, 255, 257, 258, 261, 264, 267, 272, 273, 275, 276, 277, 281, 284, 285, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 306, 308, 311, 314, 315, 320, 325, 326, 330, 331, 334, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 363, 366, 367, 369, 370, 371, 372, 374, 380, 381, 385, 386, 388, 390, 392, 393, 394, 399, 403, 404, 405, 406, 409, 411, 414, 417, 419, 420, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 444, 445, 448, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "as": [3, 5, 7, 8, 9, 11, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 70, 72, 73, 74, 75, 76, 78, 79, 82, 83, 85, 86, 87, 88, 89, 94, 95, 98, 99, 102, 103, 104, 106, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 139, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 445, 447, 450, 454, 455, 456, 459, 460, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486], "no": [3, 5, 7, 11, 12, 14, 17, 18, 22, 23, 24, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 43, 44, 47, 49, 50, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 73, 74, 76, 78, 79, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 126, 128, 129, 133, 138, 139, 142, 143, 144, 145, 147, 150, 157, 158, 160, 161, 162, 164, 167, 169, 172, 173, 175, 176, 179, 181, 182, 183, 187, 189, 190, 192, 196, 197, 200, 202, 203, 204, 206, 207, 208, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 230, 232, 233, 234, 235, 237, 238, 239, 241, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 289, 290, 292, 294, 295, 298, 299, 300, 301, 303, 305, 307, 308, 311, 312, 313, 314, 315, 317, 319, 320, 324, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 374, 376, 377, 378, 380, 381, 383, 384, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 445, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "longer": [3, 5, 7, 22, 23, 29, 33, 37, 43, 49, 56, 60, 61, 64, 65, 69, 78, 83, 95, 100, 102, 104, 108, 110, 115, 119, 123, 126, 133, 147, 164, 173, 182, 183, 190, 194, 196, 197, 206, 208, 215, 218, 232, 233, 242, 249, 252, 255, 257, 258, 259, 261, 265, 267, 271, 274, 275, 277, 289, 290, 298, 299, 300, 308, 315, 317, 325, 331, 334, 338, 341, 344, 347, 348, 351, 352, 354, 355, 359, 363, 367, 369, 370, 371, 381, 386, 388, 390, 392, 393, 394, 403, 404, 406, 413, 414, 415, 416, 417, 418, 426, 428, 434, 436, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "valid": [3, 5, 7, 11, 16, 18, 23, 27, 32, 40, 60, 61, 63, 65, 69, 70, 78, 82, 83, 95, 98, 100, 102, 107, 111, 114, 116, 118, 126, 128, 144, 149, 158, 163, 164, 165, 169, 173, 175, 178, 179, 181, 182, 183, 187, 189, 190, 192, 193, 195, 201, 202, 204, 210, 214, 216, 232, 239, 245, 249, 251, 252, 254, 258, 261, 262, 264, 265, 267, 268, 271, 272, 273, 274, 276, 284, 287, 289, 293, 294, 299, 300, 307, 308, 310, 314, 317, 320, 325, 328, 329, 330, 337, 339, 341, 342, 344, 348, 350, 351, 352, 354, 355, 359, 363, 367, 370, 371, 381, 388, 390, 391, 392, 393, 399, 405, 409, 415, 417, 419, 420, 424, 426, 427, 428, 429, 431, 432, 436, 439, 440, 447, 455, 459, 460, 466, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "_py_nonestruct": [3, 96], "visibl": [3, 33, 57, 65, 83, 95, 100, 102, 104, 109, 112, 133, 144, 164, 173, 183, 185, 196, 203, 212, 229, 254, 261, 267, 277, 344, 381, 393, 399, 404, 433, 467, 470, 471, 477, 482, 483, 485], "none": [3, 5, 16, 20, 23, 29, 31, 32, 43, 52, 53, 55, 60, 61, 64, 65, 69, 70, 78, 83, 90, 95, 97, 98, 99, 100, 103, 104, 108, 109, 111, 112, 113, 115, 118, 119, 120, 122, 123, 126, 128, 129, 133, 135, 138, 139, 141, 142, 143, 144, 145, 147, 149, 150, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 187, 189, 190, 192, 195, 196, 197, 200, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 223, 225, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287, 289, 290, 292, 293, 294, 295, 297, 298, 299, 302, 303, 305, 306, 308, 310, 311, 313, 314, 317, 318, 320, 322, 324, 325, 326, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 359, 360, 363, 364, 365, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 431, 432, 434, 435, 436, 439, 440, 441, 445, 446, 447, 450, 454, 457, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "onli": [3, 5, 7, 9, 13, 22, 23, 24, 27, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 46, 47, 49, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 69, 70, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 133, 138, 142, 144, 145, 146, 147, 149, 150, 152, 153, 156, 158, 160, 161, 162, 164, 166, 167, 169, 172, 173, 175, 176, 181, 182, 183, 185, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 249, 250, 251, 252, 255, 257, 258, 261, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 290, 293, 294, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 331, 333, 334, 336, 337, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 447, 449, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486], "py_non": [3, 23, 26, 31, 44, 45, 53, 64, 83, 96, 100, 435], "macro": [3, 4, 5, 6, 7, 9, 16, 17, 20, 23, 27, 30, 31, 32, 36, 40, 41, 42, 43, 48, 49, 52, 53, 54, 56, 57, 60, 61, 64, 65, 69, 72, 78, 83, 86, 100, 182, 224, 292, 359, 367, 460, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "evalu": [3, 22, 31, 53, 63, 65, 78, 83, 95, 98, 100, 104, 119, 128, 150, 218, 232, 237, 267, 273, 281, 289, 299, 303, 329, 330, 350, 351, 359, 370, 374, 390, 398, 406, 431, 432, 437, 439, 440, 450, 453, 460, 466, 469, 470, 471, 472, 473, 475, 476, 477, 479, 483, 484, 485], "pointer": [3, 5, 7, 8, 9, 11, 15, 17, 18, 20, 23, 24, 29, 31, 33, 37, 40, 41, 43, 46, 47, 51, 52, 55, 56, 57, 58, 60, 61, 65, 82, 85, 86, 88, 89, 95, 97, 100, 106, 123, 124, 148, 183, 185, 249, 284, 289, 305, 309, 314, 356, 359, 405, 425, 434, 444, 468, 470, 471, 472, 473, 477, 479, 481, 482, 485], "pymodule_cr": [3, 31, 43, 82, 83, 86], "creat": [3, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 20, 22, 23, 24, 25, 27, 28, 29, 32, 33, 37, 38, 40, 41, 43, 47, 49, 52, 55, 56, 57, 59, 60, 63, 64, 65, 72, 73, 74, 75, 76, 78, 81, 83, 85, 86, 87, 96, 98, 100, 102, 103, 108, 110, 111, 113, 114, 115, 116, 120, 121, 122, 123, 124, 128, 129, 132, 135, 138, 139, 140, 141, 142, 143, 145, 150, 156, 157, 158, 160, 163, 164, 166, 167, 169, 172, 173, 175, 176, 180, 181, 182, 183, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 220, 222, 225, 230, 231, 232, 233, 234, 237, 239, 241, 243, 247, 248, 249, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 273, 274, 275, 276, 277, 278, 284, 287, 288, 289, 290, 291, 294, 299, 302, 303, 305, 306, 308, 311, 313, 314, 318, 320, 325, 328, 329, 334, 336, 338, 340, 341, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 363, 365, 367, 369, 370, 372, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 399, 401, 402, 406, 407, 409, 411, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 433, 434, 436, 438, 439, 440, 444, 445, 446, 455, 456, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "extens": [3, 5, 7, 11, 23, 33, 40, 43, 48, 54, 59, 60, 61, 63, 65, 70, 72, 74, 75, 76, 82, 84, 94, 95, 97, 100, 101, 102, 110, 111, 120, 124, 144, 149, 159, 173, 179, 182, 183, 187, 189, 190, 195, 196, 199, 200, 201, 207, 210, 215, 218, 225, 227, 234, 242, 243, 248, 249, 252, 253, 255, 257, 258, 259, 260, 261, 264, 268, 275, 277, 279, 282, 286, 294, 295, 298, 299, 300, 302, 303, 305, 311, 314, 318, 320, 323, 325, 336, 337, 338, 339, 341, 342, 344, 347, 348, 351, 359, 360, 363, 367, 370, 373, 374, 380, 386, 388, 389, 392, 399, 406, 409, 414, 415, 418, 419, 423, 425, 426, 432, 434, 436, 444, 449, 455, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 483, 484, 485], "modul": [3, 5, 7, 11, 16, 17, 20, 23, 24, 26, 29, 31, 32, 33, 39, 40, 55, 56, 58, 60, 61, 62, 63, 65, 70, 72, 74, 75, 76, 79, 82, 84, 85, 86, 87, 91, 97, 98, 99, 100, 101, 106, 110, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 307, 308, 310, 311, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 452, 453, 455, 456, 459, 460, 462, 474, 485, 486], "built": [4, 7, 16, 23, 24, 29, 31, 32, 33, 35, 40, 45, 47, 54, 55, 56, 58, 59, 60, 65, 69, 72, 75, 76, 78, 81, 83, 85, 86, 87, 89, 90, 94, 95, 100, 103, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 126, 128, 138, 151, 158, 161, 164, 165, 167, 169, 174, 184, 187, 188, 192, 193, 196, 197, 202, 206, 209, 213, 220, 232, 234, 237, 254, 257, 258, 259, 260, 261, 264, 267, 272, 281, 282, 289, 290, 295, 298, 299, 300, 302, 303, 305, 308, 317, 319, 326, 327, 334, 335, 341, 344, 347, 348, 352, 354, 355, 359, 360, 367, 374, 381, 388, 392, 393, 404, 406, 409, 414, 415, 417, 419, 423, 427, 431, 432, 433, 434, 436, 438, 439, 440, 441, 446, 447, 459, 460, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486], "run": [4, 23, 27, 31, 32, 33, 40, 43, 54, 56, 60, 61, 65, 69, 70, 71, 72, 73, 74, 76, 78, 81, 82, 83, 86, 87, 89, 95, 96, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 112, 114, 116, 118, 119, 120, 121, 126, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 146, 150, 158, 159, 163, 169, 170, 172, 173, 175, 176, 179, 182, 183, 187, 191, 192, 193, 199, 200, 207, 210, 215, 220, 221, 233, 234, 235, 237, 242, 243, 249, 250, 251, 252, 258, 259, 261, 262, 264, 267, 272, 274, 275, 277, 285, 289, 292, 294, 298, 299, 300, 302, 303, 314, 319, 326, 328, 329, 330, 331, 337, 338, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 355, 359, 360, 369, 370, 371, 372, 373, 374, 381, 384, 386, 388, 393, 394, 402, 403, 404, 406, 407, 409, 411, 424, 425, 428, 431, 432, 433, 434, 435, 436, 439, 444, 447, 455, 456, 457, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "stabil": [4, 30, 65, 476, 485], "py_major_vers": [4, 119], "1a2": [4, 78], "py_minor_vers": [4, 63, 119, 483], "py_micro_vers": [4, 119], "py_release_level": [4, 119], "0xa": 4, "alpha": [4, 65, 69, 78, 90, 97, 119, 290, 294, 313, 324, 359, 360, 455, 466, 467, 472, 475, 486], "0xb": 4, "beta": [4, 65, 78, 119, 324, 359, 455, 466, 472, 480, 486], "0xc": 4, "0xf": 4, "py_release_seri": [4, 119], "py_version_hex": [4, 54, 476, 483, 484, 485], "32": [4, 5, 16, 39, 56, 65, 69, 70, 96, 104, 106, 107, 111, 112, 114, 121, 127, 144, 147, 152, 160, 164, 172, 182, 192, 222, 233, 242, 257, 258, 259, 265, 267, 268, 276, 289, 299, 309, 310, 312, 317, 324, 332, 339, 344, 350, 351, 356, 359, 370, 371, 392, 402, 409, 410, 425, 426, 427, 428, 432, 439, 450, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "big": [4, 33, 40, 61, 65, 78, 83, 88, 94, 100, 104, 109, 112, 114, 138, 139, 147, 160, 164, 173, 182, 183, 197, 237, 243, 265, 275, 301, 351, 354, 356, 359, 367, 393, 402, 409, 438, 456, 460, 468, 469, 470, 473, 475, 477, 479, 485], "endian": [4, 29, 40, 61, 94, 112, 114, 147, 160, 164, 182, 237, 265, 301, 354, 356, 359, 402, 409, 456, 479, 485], "order": [4, 7, 24, 27, 29, 31, 32, 41, 43, 56, 60, 61, 65, 69, 72, 74, 78, 79, 82, 83, 85, 86, 97, 99, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 122, 124, 126, 128, 133, 139, 144, 146, 151, 154, 156, 158, 160, 162, 164, 166, 172, 173, 175, 181, 183, 184, 185, 189, 190, 192, 193, 196, 197, 200, 203, 207, 209, 210, 212, 215, 218, 221, 225, 231, 232, 234, 235, 237, 238, 239, 240, 243, 252, 254, 255, 257, 258, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 277, 281, 287, 289, 290, 294, 299, 301, 302, 305, 308, 309, 310, 313, 314, 315, 316, 319, 320, 321, 322, 325, 331, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 350, 351, 352, 355, 357, 359, 363, 367, 369, 370, 371, 374, 381, 385, 386, 388, 389, 390, 392, 393, 398, 399, 402, 404, 406, 411, 414, 415, 417, 419, 425, 426, 428, 431, 432, 433, 435, 436, 437, 439, 446, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486], "0x03": [4, 197], "16": [4, 5, 16, 32, 39, 45, 65, 88, 95, 99, 104, 109, 112, 114, 123, 127, 147, 152, 164, 179, 182, 183, 189, 200, 228, 232, 233, 242, 243, 247, 265, 267, 268, 273, 289, 298, 299, 301, 320, 324, 325, 328, 332, 338, 344, 348, 350, 351, 352, 355, 359, 371, 374, 383, 388, 402, 428, 430, 439, 444, 446, 448, 450, 453, 455, 456, 457, 466, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "0x04": [4, 197, 432], "17": [4, 104, 109, 114, 116, 144, 189, 192, 196, 200, 215, 218, 230, 243, 298, 299, 325, 371, 383, 388, 448, 453, 467, 470, 472, 473, 475, 477, 479, 480, 483, 484, 485], "24": [4, 95, 104, 107, 111, 114, 144, 147, 189, 192, 200, 216, 218, 243, 265, 267, 301, 325, 338, 350, 351, 356, 371, 428, 439, 473, 478, 479, 483, 484, 485], "0x01": [4, 197, 344], "25": [4, 95, 104, 133, 189, 192, 196, 218, 228, 243, 265, 267, 289, 314, 324, 325, 328, 342, 344, 350, 351, 366, 383, 386, 388, 428, 446, 450, 452, 453, 455, 466, 468, 469, 470, 472, 473, 478, 480, 481, 482, 483, 484, 485], "28": [4, 31, 106, 109, 192, 233, 243, 265, 347, 371, 388, 470, 471, 472, 476, 477, 483, 484, 485], "29": [4, 106, 109, 111, 189, 192, 196, 243, 265, 267, 273, 324, 371, 469, 472, 476, 478, 483, 484, 485], "0x2": 4, "hexvers": [4, 65, 90, 321, 359, 454, 478], "0x030401a2": 4, "10": [4, 10, 14, 20, 22, 23, 27, 31, 32, 34, 37, 43, 45, 47, 49, 50, 52, 54, 55, 58, 60, 61, 65, 69, 83, 85, 89, 94, 97, 102, 103, 104, 106, 108, 109, 111, 112, 113, 114, 115, 118, 119, 121, 122, 126, 127, 128, 133, 135, 137, 140, 141, 142, 143, 144, 149, 154, 156, 158, 161, 162, 164, 166, 169, 175, 182, 183, 187, 189, 191, 192, 194, 197, 200, 216, 218, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 237, 238, 240, 242, 243, 244, 248, 249, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 278, 280, 281, 284, 288, 289, 290, 292, 294, 297, 298, 299, 300, 302, 309, 310, 313, 314, 317, 318, 324, 325, 328, 331, 332, 336, 338, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 365, 367, 369, 370, 371, 372, 374, 377, 383, 385, 388, 389, 390, 392, 394, 398, 399, 411, 417, 419, 424, 426, 427, 429, 431, 432, 433, 434, 435, 436, 439, 444, 445, 446, 447, 448, 450, 452, 453, 455, 456, 457, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 483, 484, 486], "0x030a00f0": 4, "includ": [4, 5, 7, 9, 18, 20, 27, 29, 30, 31, 43, 47, 50, 52, 53, 54, 55, 57, 58, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 91, 94, 95, 96, 99, 100, 102, 103, 104, 107, 108, 109, 111, 113, 114, 115, 116, 118, 120, 123, 126, 128, 139, 142, 145, 149, 152, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 173, 179, 182, 183, 184, 187, 189, 192, 196, 197, 199, 200, 203, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 282, 284, 287, 289, 292, 294, 295, 298, 299, 300, 302, 303, 305, 311, 312, 313, 314, 317, 318, 320, 325, 328, 329, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 367, 369, 370, 371, 373, 374, 377, 378, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 417, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 447, 453, 455, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "patchlevel": [4, 309], "these": [5, 7, 8, 9, 11, 12, 15, 20, 23, 24, 27, 29, 31, 32, 33, 39, 40, 43, 46, 54, 55, 56, 60, 61, 63, 69, 70, 76, 78, 81, 82, 83, 85, 86, 87, 94, 95, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 122, 126, 128, 133, 138, 139, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 169, 172, 173, 175, 181, 182, 183, 184, 187, 189, 190, 192, 195, 196, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 230, 232, 233, 234, 237, 242, 243, 247, 249, 250, 252, 254, 257, 258, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 308, 313, 314, 318, 320, 325, 326, 327, 328, 330, 337, 338, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 370, 371, 372, 374, 380, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 404, 406, 407, 409, 411, 412, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 429, 431, 432, 433, 434, 436, 438, 439, 440, 441, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "when": [5, 7, 9, 11, 12, 14, 15, 18, 23, 27, 29, 31, 32, 33, 34, 35, 37, 40, 43, 45, 46, 47, 48, 49, 51, 54, 55, 56, 58, 60, 61, 63, 64, 65, 69, 70, 73, 74, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 225, 230, 232, 233, 234, 235, 237, 239, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 269, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 289, 290, 292, 293, 294, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 314, 315, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 366, 367, 370, 371, 372, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 441, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "your": [5, 20, 31, 33, 54, 56, 60, 65, 69, 70, 72, 73, 74, 76, 78, 79, 82, 83, 84, 85, 86, 87, 89, 94, 95, 98, 102, 104, 108, 111, 112, 114, 115, 116, 118, 120, 124, 126, 128, 129, 139, 145, 147, 159, 165, 173, 183, 187, 189, 193, 200, 203, 205, 207, 208, 209, 212, 214, 218, 220, 229, 230, 233, 234, 241, 242, 249, 250, 251, 252, 253, 254, 258, 261, 264, 268, 272, 273, 274, 275, 277, 284, 289, 299, 302, 303, 305, 311, 312, 314, 319, 325, 326, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 364, 366, 367, 369, 370, 371, 372, 374, 376, 380, 386, 388, 390, 392, 393, 399, 403, 404, 406, 411, 414, 415, 417, 419, 424, 425, 426, 429, 438, 440, 445, 446, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "own": [5, 7, 9, 23, 24, 27, 31, 33, 43, 56, 60, 61, 65, 69, 70, 72, 76, 78, 79, 82, 83, 86, 87, 94, 95, 99, 100, 102, 103, 104, 108, 109, 110, 114, 115, 116, 118, 120, 124, 126, 129, 133, 139, 142, 144, 145, 158, 173, 175, 181, 187, 192, 200, 203, 207, 210, 212, 214, 217, 218, 232, 234, 237, 239, 250, 254, 258, 261, 264, 273, 274, 275, 277, 289, 290, 292, 298, 299, 302, 303, 305, 314, 325, 332, 337, 338, 339, 344, 347, 348, 351, 352, 355, 359, 367, 369, 370, 374, 388, 392, 398, 399, 403, 406, 407, 411, 414, 417, 419, 424, 428, 432, 434, 436, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 480, 482, 484, 485], "method": [5, 7, 10, 14, 15, 16, 21, 22, 23, 24, 25, 27, 32, 35, 37, 38, 40, 43, 44, 47, 48, 49, 50, 51, 52, 53, 58, 59, 60, 63, 65, 69, 73, 82, 84, 85, 90, 91, 96, 97, 98, 99, 100, 102, 104, 108, 109, 110, 113, 114, 115, 118, 119, 121, 122, 123, 124, 128, 129, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 148, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 172, 173, 174, 176, 181, 182, 183, 185, 187, 188, 189, 190, 192, 193, 196, 197, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 237, 239, 241, 242, 244, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 264, 265, 268, 270, 271, 273, 274, 275, 276, 277, 279, 282, 284, 285, 287, 290, 292, 295, 297, 299, 301, 303, 304, 305, 307, 308, 311, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 327, 329, 331, 334, 335, 336, 337, 341, 342, 345, 348, 350, 352, 354, 355, 356, 357, 358, 359, 363, 364, 365, 367, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 383, 385, 386, 389, 390, 391, 392, 398, 399, 401, 402, 403, 405, 407, 409, 411, 412, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 431, 433, 436, 437, 439, 440, 445, 446, 448, 449, 451, 453, 455, 456, 459, 460, 467, 468, 469, 472, 473, 475, 476, 477, 479, 483, 485, 486], "addit": [5, 7, 9, 23, 29, 31, 33, 39, 40, 43, 55, 60, 63, 65, 69, 70, 73, 74, 75, 79, 81, 83, 85, 86, 94, 100, 104, 106, 107, 108, 109, 111, 114, 116, 118, 121, 122, 123, 126, 128, 133, 144, 145, 147, 149, 151, 157, 158, 163, 164, 173, 175, 179, 181, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 206, 209, 210, 212, 213, 215, 217, 218, 220, 222, 225, 228, 230, 232, 233, 234, 237, 239, 241, 242, 247, 249, 250, 252, 254, 259, 261, 264, 265, 267, 268, 272, 273, 274, 276, 277, 281, 282, 284, 289, 291, 298, 299, 300, 302, 305, 311, 312, 313, 314, 319, 320, 325, 327, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 352, 354, 355, 359, 364, 367, 369, 370, 371, 372, 374, 377, 380, 381, 383, 388, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 423, 426, 431, 432, 433, 434, 436, 438, 439, 440, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "exampl": [5, 7, 16, 18, 22, 23, 31, 32, 33, 40, 43, 49, 54, 55, 58, 59, 60, 63, 65, 69, 70, 72, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 87, 89, 94, 95, 98, 99, 100, 102, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 126, 128, 132, 133, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 153, 154, 156, 157, 158, 161, 164, 165, 166, 169, 172, 176, 178, 179, 181, 182, 183, 187, 188, 190, 192, 193, 197, 198, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 286, 288, 289, 290, 291, 294, 295, 296, 299, 301, 302, 303, 305, 306, 311, 312, 313, 314, 317, 319, 320, 321, 324, 326, 327, 332, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 351, 353, 354, 355, 357, 359, 360, 361, 363, 364, 367, 368, 369, 370, 371, 372, 374, 380, 381, 383, 384, 386, 388, 389, 390, 391, 392, 393, 398, 402, 404, 406, 407, 411, 412, 413, 414, 415, 416, 417, 419, 424, 425, 426, 427, 429, 430, 431, 432, 434, 436, 438, 439, 440, 444, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "avail": [5, 7, 11, 15, 23, 24, 25, 31, 32, 33, 37, 40, 43, 52, 54, 56, 61, 63, 65, 69, 70, 72, 74, 75, 76, 79, 81, 82, 83, 85, 87, 94, 95, 100, 102, 108, 109, 110, 111, 112, 114, 115, 116, 118, 121, 122, 126, 128, 129, 133, 139, 142, 144, 145, 162, 164, 169, 172, 173, 175, 176, 179, 181, 182, 183, 188, 190, 192, 197, 199, 202, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 233, 237, 240, 242, 243, 249, 252, 254, 258, 259, 261, 264, 265, 268, 272, 273, 274, 275, 277, 281, 282, 283, 284, 288, 289, 290, 292, 293, 294, 298, 299, 301, 303, 305, 308, 310, 312, 314, 316, 319, 320, 321, 323, 324, 325, 327, 328, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 359, 361, 363, 364, 366, 367, 370, 371, 373, 374, 379, 380, 381, 383, 385, 386, 389, 390, 392, 393, 394, 399, 402, 403, 406, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "the": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 74, 75, 76, 81, 82, 84, 85, 87, 96, 99, 101, 103, 107, 112, 115, 118, 119, 121, 122, 123, 124, 125, 128, 129, 132, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 296, 300, 301, 304, 305, 306, 307, 308, 310, 311, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 348, 349, 350, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 395, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 418, 419, 421, 423, 424, 426, 427, 428, 430, 433, 435, 437, 438, 439, 441, 444, 445, 446, 447, 448, 450, 453, 454, 455, 456, 458, 459, 462, 466, 467, 470, 474, 475, 485, 486], "first": [5, 13, 14, 15, 16, 18, 22, 23, 25, 29, 31, 32, 33, 35, 37, 39, 40, 43, 45, 47, 51, 55, 56, 57, 60, 61, 64, 65, 69, 76, 78, 79, 82, 83, 85, 86, 87, 88, 89, 94, 95, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 126, 128, 133, 138, 144, 145, 146, 147, 150, 154, 157, 158, 160, 162, 163, 164, 166, 172, 173, 175, 181, 182, 183, 184, 189, 190, 192, 194, 196, 197, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 218, 220, 221, 222, 225, 228, 230, 232, 233, 235, 237, 239, 242, 243, 249, 250, 251, 254, 255, 257, 258, 261, 264, 265, 267, 271, 272, 273, 274, 275, 277, 278, 281, 282, 284, 287, 289, 290, 293, 294, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 313, 314, 319, 320, 325, 326, 330, 334, 336, 337, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 361, 363, 364, 366, 367, 369, 371, 372, 374, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 404, 405, 406, 409, 411, 412, 414, 417, 418, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 441, 446, 450, 453, 456, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "three": [5, 7, 23, 29, 33, 40, 55, 60, 70, 76, 78, 81, 83, 85, 86, 87, 94, 95, 98, 100, 103, 108, 109, 111, 112, 113, 114, 116, 119, 123, 126, 128, 129, 139, 140, 144, 164, 166, 167, 178, 181, 182, 183, 187, 189, 192, 195, 196, 197, 200, 201, 203, 207, 212, 214, 218, 220, 223, 232, 233, 234, 242, 243, 250, 252, 255, 264, 272, 273, 274, 275, 277, 284, 289, 292, 294, 298, 299, 301, 302, 305, 313, 314, 320, 324, 325, 334, 338, 340, 344, 347, 348, 350, 351, 352, 354, 355, 359, 363, 364, 371, 372, 374, 381, 388, 389, 390, 392, 393, 394, 399, 403, 407, 413, 414, 418, 419, 423, 429, 431, 432, 434, 435, 436, 438, 439, 440, 441, 445, 455, 456, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 482, 483, 485], "describ": [5, 7, 13, 16, 23, 24, 29, 33, 40, 43, 47, 48, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 73, 75, 79, 82, 83, 85, 86, 87, 95, 98, 102, 103, 104, 106, 107, 108, 109, 114, 115, 116, 118, 121, 123, 125, 126, 128, 129, 133, 142, 149, 150, 151, 157, 158, 159, 164, 169, 172, 173, 175, 181, 182, 183, 186, 187, 190, 192, 193, 194, 196, 197, 200, 201, 202, 203, 209, 210, 215, 218, 220, 223, 224, 229, 230, 231, 232, 237, 242, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 272, 273, 274, 275, 277, 282, 283, 286, 287, 290, 291, 294, 295, 296, 298, 299, 301, 304, 305, 312, 314, 318, 320, 321, 323, 325, 327, 328, 330, 334, 338, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 362, 370, 374, 380, 381, 388, 390, 392, 393, 398, 399, 401, 403, 409, 410, 411, 412, 414, 418, 419, 420, 423, 425, 426, 427, 428, 431, 432, 434, 436, 438, 439, 440, 441, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyarg_parsetupl": [5, 7, 46, 54, 55, 82, 83, 85, 87, 100, 434, 466, 468, 469, 471, 472, 476, 478, 483, 485], "pyarg_parsetupleandkeyword": [5, 54, 55, 83, 85, 86, 100, 470, 481, 485], "pyarg_pars": [5, 54, 100, 473, 477, 485], "all": [5, 7, 9, 14, 17, 22, 23, 27, 29, 31, 32, 33, 36, 37, 40, 43, 45, 49, 52, 54, 55, 56, 57, 58, 60, 61, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 94, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 126, 128, 129, 133, 139, 140, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 179, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 308, 311, 314, 315, 316, 317, 318, 319, 320, 322, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 380, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 444, 445, 446, 453, 454, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485], "tell": [5, 29, 31, 65, 69, 73, 78, 83, 85, 95, 99, 100, 102, 104, 109, 110, 111, 112, 116, 118, 123, 124, 126, 133, 145, 158, 160, 165, 200, 215, 229, 230, 242, 264, 273, 275, 283, 284, 289, 298, 301, 305, 338, 339, 344, 345, 347, 348, 351, 356, 357, 372, 374, 384, 390, 393, 399, 405, 411, 426, 450, 466, 468, 469, 470, 472, 480, 481, 482, 485], "about": [5, 7, 14, 23, 25, 33, 40, 54, 60, 61, 63, 65, 69, 73, 76, 78, 81, 82, 83, 85, 86, 87, 90, 94, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 126, 128, 133, 139, 147, 150, 161, 162, 163, 164, 175, 178, 181, 182, 184, 187, 189, 192, 193, 196, 197, 201, 202, 204, 208, 210, 214, 216, 218, 220, 223, 230, 232, 234, 242, 250, 252, 254, 258, 261, 264, 271, 273, 274, 275, 276, 277, 281, 284, 285, 289, 294, 295, 298, 299, 302, 303, 305, 306, 311, 313, 314, 318, 325, 326, 328, 334, 336, 338, 339, 341, 342, 344, 346, 347, 348, 349, 350, 351, 354, 355, 357, 359, 364, 367, 374, 381, 385, 388, 390, 392, 393, 394, 399, 402, 403, 404, 406, 409, 411, 412, 413, 414, 416, 418, 419, 420, 426, 427, 428, 429, 431, 432, 433, 434, 436, 438, 440, 459, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "expect": [5, 9, 23, 27, 33, 43, 54, 55, 60, 63, 65, 72, 73, 74, 76, 78, 83, 85, 86, 87, 94, 95, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 119, 120, 126, 128, 133, 134, 139, 140, 144, 145, 158, 160, 164, 173, 175, 182, 183, 187, 192, 193, 194, 196, 200, 204, 210, 218, 220, 228, 230, 232, 237, 242, 249, 250, 252, 258, 259, 261, 264, 267, 268, 272, 273, 275, 277, 284, 289, 298, 299, 305, 308, 315, 318, 334, 336, 337, 339, 344, 347, 348, 350, 351, 354, 355, 357, 359, 364, 367, 371, 381, 383, 388, 389, 390, 393, 394, 399, 401, 403, 411, 412, 417, 419, 420, 423, 428, 429, 432, 434, 435, 436, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "syntax": [5, 7, 65, 69, 72, 73, 83, 89, 90, 95, 100, 104, 107, 108, 109, 111, 114, 115, 118, 124, 133, 144, 158, 163, 165, 173, 174, 182, 187, 192, 200, 210, 218, 220, 232, 237, 254, 260, 261, 268, 270, 272, 274, 279, 289, 298, 301, 303, 320, 337, 341, 347, 351, 359, 367, 368, 374, 381, 385, 386, 390, 392, 398, 399, 421, 423, 431, 432, 434, 435, 436, 438, 439, 440, 441, 448, 449, 450, 453, 459, 461, 466, 467, 468, 469, 470, 471, 473, 475, 477, 479, 482, 483, 484, 485, 486], "each": [5, 7, 12, 13, 22, 23, 27, 29, 31, 32, 33, 35, 38, 40, 43, 54, 56, 58, 60, 61, 69, 70, 72, 76, 78, 79, 81, 83, 85, 86, 87, 89, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 126, 128, 129, 133, 138, 139, 144, 145, 147, 149, 156, 157, 158, 159, 160, 161, 164, 165, 169, 172, 173, 175, 181, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 202, 203, 204, 207, 209, 210, 211, 212, 215, 218, 219, 221, 223, 225, 230, 232, 233, 234, 235, 237, 239, 242, 243, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 287, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 306, 311, 313, 314, 315, 318, 319, 320, 324, 325, 326, 328, 331, 335, 337, 338, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 359, 360, 361, 363, 364, 366, 367, 369, 370, 372, 374, 377, 380, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 409, 411, 412, 413, 414, 415, 417, 419, 421, 423, 424, 426, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 446, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "consist": [5, 7, 9, 15, 18, 23, 31, 33, 49, 53, 60, 63, 69, 78, 83, 95, 100, 102, 104, 108, 109, 110, 116, 120, 123, 128, 147, 152, 157, 158, 160, 164, 173, 183, 184, 189, 196, 197, 199, 200, 203, 210, 212, 214, 215, 216, 218, 235, 239, 247, 249, 250, 254, 255, 258, 265, 268, 272, 274, 275, 276, 281, 289, 299, 307, 314, 325, 331, 337, 342, 345, 350, 351, 353, 355, 359, 369, 374, 380, 381, 388, 390, 392, 399, 414, 429, 431, 432, 434, 436, 439, 460, 465, 466, 467, 468, 469, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "zero": [5, 7, 15, 18, 23, 27, 29, 31, 32, 33, 34, 36, 37, 40, 43, 47, 49, 55, 56, 58, 60, 61, 65, 76, 83, 85, 86, 94, 95, 97, 100, 107, 108, 109, 111, 113, 114, 126, 128, 133, 139, 147, 149, 152, 157, 161, 162, 164, 166, 182, 183, 187, 189, 192, 196, 197, 200, 203, 216, 220, 230, 232, 233, 234, 238, 241, 242, 249, 255, 257, 258, 264, 265, 267, 273, 275, 277, 281, 284, 289, 294, 298, 299, 303, 305, 311, 320, 325, 326, 334, 339, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 359, 363, 366, 369, 370, 371, 381, 388, 392, 401, 409, 414, 417, 426, 428, 432, 433, 434, 438, 439, 440, 445, 447, 452, 459, 466, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485], "more": [5, 11, 18, 23, 24, 31, 32, 33, 40, 43, 53, 55, 57, 60, 61, 63, 65, 69, 70, 72, 73, 75, 76, 78, 81, 82, 83, 84, 86, 87, 89, 94, 95, 96, 98, 100, 103, 104, 106, 108, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 128, 129, 133, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 166, 167, 169, 172, 173, 175, 176, 178, 181, 182, 183, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 218, 220, 222, 225, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 266, 267, 268, 273, 274, 275, 276, 277, 281, 282, 287, 289, 290, 294, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 313, 314, 317, 318, 320, 323, 324, 325, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 363, 364, 366, 367, 369, 370, 371, 372, 374, 379, 380, 381, 382, 385, 386, 390, 392, 393, 398, 399, 403, 404, 406, 409, 410, 411, 413, 414, 415, 416, 417, 419, 426, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 445, 452, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "unit": [5, 61, 65, 76, 83, 95, 97, 100, 104, 107, 108, 109, 114, 120, 172, 184, 189, 193, 200, 218, 232, 233, 281, 314, 331, 344, 348, 351, 352, 371, 372, 374, 381, 388, 392, 393, 411, 430, 432, 433, 467, 472, 478, 480, 483, 484, 485], "object": [5, 7, 11, 12, 14, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 50, 51, 54, 56, 63, 64, 65, 69, 76, 78, 82, 83, 84, 86, 87, 88, 90, 97, 100, 102, 104, 106, 110, 111, 113, 114, 115, 116, 121, 122, 123, 124, 125, 127, 128, 129, 132, 135, 139, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 182, 186, 187, 188, 190, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 216, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 244, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 270, 275, 276, 277, 279, 280, 282, 284, 288, 290, 291, 294, 296, 297, 298, 300, 303, 304, 306, 308, 310, 311, 313, 314, 316, 319, 320, 321, 323, 328, 330, 335, 337, 338, 339, 341, 342, 346, 350, 352, 354, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 379, 383, 384, 385, 386, 388, 389, 390, 391, 392, 398, 401, 403, 404, 405, 408, 410, 411, 415, 416, 418, 419, 421, 424, 425, 427, 428, 429, 431, 433, 434, 436, 437, 440, 444, 445, 446, 450, 453, 454, 456, 459, 460, 463, 465, 466, 467, 468, 471, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486], "usual": [5, 7, 20, 23, 27, 31, 32, 33, 37, 43, 45, 49, 54, 58, 60, 61, 69, 70, 76, 78, 79, 83, 85, 94, 95, 100, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 128, 133, 139, 145, 152, 156, 158, 160, 179, 181, 182, 192, 196, 200, 201, 203, 205, 209, 212, 218, 220, 228, 230, 232, 233, 237, 243, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 273, 275, 278, 281, 289, 294, 298, 299, 301, 303, 305, 310, 312, 316, 325, 327, 334, 338, 339, 340, 344, 345, 346, 347, 348, 350, 351, 352, 355, 359, 363, 367, 371, 373, 374, 380, 381, 385, 390, 392, 393, 394, 399, 405, 406, 417, 425, 426, 427, 431, 432, 434, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 483, 485], "singl": [5, 7, 9, 14, 16, 23, 29, 31, 33, 37, 46, 55, 56, 58, 60, 61, 63, 64, 65, 71, 75, 76, 78, 81, 83, 86, 89, 95, 97, 100, 102, 104, 107, 110, 111, 113, 114, 115, 116, 126, 128, 133, 145, 150, 152, 157, 158, 163, 164, 165, 169, 172, 173, 181, 182, 183, 184, 187, 189, 192, 195, 196, 197, 200, 202, 203, 209, 210, 214, 215, 218, 220, 225, 227, 230, 232, 233, 237, 241, 242, 249, 250, 254, 255, 261, 264, 265, 267, 271, 273, 274, 275, 276, 277, 281, 284, 287, 289, 290, 294, 298, 299, 300, 302, 303, 305, 308, 311, 313, 314, 320, 321, 324, 325, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 363, 367, 369, 371, 374, 376, 377, 381, 383, 384, 385, 390, 392, 393, 394, 398, 399, 402, 404, 406, 411, 412, 414, 417, 419, 421, 423, 425, 426, 431, 432, 434, 435, 436, 438, 439, 440, 445, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "charact": [5, 9, 14, 16, 18, 31, 32, 33, 37, 40, 46, 47, 56, 65, 69, 71, 72, 78, 83, 94, 95, 97, 100, 102, 109, 112, 114, 124, 126, 127, 128, 129, 133, 137, 142, 149, 151, 152, 157, 158, 162, 164, 173, 179, 181, 182, 189, 190, 192, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 220, 221, 227, 232, 235, 238, 242, 245, 246, 247, 251, 254, 255, 258, 259, 260, 264, 271, 272, 274, 277, 278, 279, 288, 289, 291, 292, 294, 299, 300, 302, 305, 313, 320, 323, 325, 326, 327, 329, 337, 338, 342, 344, 345, 348, 349, 351, 352, 353, 355, 359, 363, 364, 366, 367, 369, 371, 374, 377, 380, 381, 391, 392, 398, 402, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 434, 438, 439, 440, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "parenthes": [5, 60, 65, 78, 83, 89, 95, 100, 104, 109, 111, 163, 197, 255, 257, 258, 272, 314, 325, 351, 403, 431, 432, 435, 438, 439, 440, 446, 453, 466, 470, 471, 472, 473, 480, 482, 483, 485], "few": [5, 31, 33, 54, 69, 70, 74, 83, 95, 100, 104, 108, 109, 111, 114, 116, 120, 126, 145, 147, 162, 164, 173, 176, 179, 182, 183, 189, 192, 196, 200, 205, 207, 230, 237, 243, 247, 254, 257, 275, 287, 289, 298, 305, 306, 323, 325, 340, 342, 344, 348, 351, 354, 367, 372, 374, 385, 392, 393, 398, 399, 428, 432, 438, 439, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 479, 480, 481, 483, 485], "correspond": [5, 9, 15, 18, 22, 23, 28, 29, 31, 33, 38, 43, 46, 47, 53, 54, 55, 60, 61, 65, 69, 70, 73, 78, 79, 81, 83, 85, 86, 89, 95, 102, 104, 107, 108, 109, 111, 112, 114, 115, 116, 119, 121, 123, 126, 128, 129, 133, 139, 142, 144, 152, 157, 162, 164, 169, 173, 176, 181, 182, 183, 184, 189, 190, 192, 193, 195, 197, 200, 206, 215, 216, 219, 220, 225, 226, 229, 230, 232, 233, 237, 240, 242, 245, 247, 250, 252, 254, 255, 257, 258, 261, 265, 267, 268, 272, 273, 274, 275, 277, 289, 298, 299, 301, 313, 314, 316, 320, 323, 325, 335, 337, 338, 339, 340, 342, 344, 346, 347, 348, 351, 352, 354, 355, 358, 359, 360, 369, 370, 371, 374, 380, 381, 385, 391, 392, 393, 398, 401, 403, 406, 407, 410, 414, 415, 419, 421, 423, 426, 427, 428, 431, 432, 433, 434, 436, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "address": [5, 9, 23, 40, 55, 60, 61, 65, 69, 76, 78, 83, 85, 95, 108, 109, 112, 118, 127, 133, 139, 145, 148, 170, 176, 182, 189, 197, 200, 201, 207, 210, 215, 216, 219, 222, 230, 232, 249, 250, 252, 262, 268, 273, 275, 276, 277, 290, 291, 325, 328, 341, 342, 344, 345, 347, 348, 367, 386, 390, 398, 402, 411, 424, 425, 432, 460, 466, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "follow": [5, 7, 9, 14, 18, 20, 23, 27, 31, 32, 33, 37, 39, 40, 43, 49, 52, 54, 55, 58, 60, 61, 63, 69, 70, 73, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 172, 173, 175, 176, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 281, 284, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 320, 325, 326, 328, 329, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 376, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "descript": [5, 23, 24, 33, 50, 55, 56, 60, 61, 65, 69, 70, 73, 78, 81, 83, 99, 103, 106, 108, 109, 116, 119, 123, 126, 128, 147, 166, 181, 182, 183, 188, 196, 197, 200, 203, 207, 208, 209, 212, 219, 222, 237, 248, 252, 257, 258, 259, 261, 265, 272, 273, 274, 276, 279, 284, 290, 294, 298, 299, 303, 304, 306, 313, 319, 321, 328, 338, 339, 344, 347, 348, 351, 354, 357, 361, 364, 366, 367, 371, 374, 380, 381, 392, 403, 405, 412, 418, 419, 423, 424, 431, 432, 433, 434, 438, 440, 455, 459, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 479, 480, 482, 484, 485], "quot": [5, 65, 69, 89, 94, 97, 98, 100, 111, 114, 133, 142, 152, 164, 181, 182, 201, 202, 203, 204, 205, 209, 210, 212, 215, 216, 224, 229, 242, 245, 247, 254, 255, 260, 262, 268, 291, 303, 325, 337, 351, 352, 355, 365, 369, 372, 383, 388, 390, 399, 417, 421, 430, 431, 438, 439, 450, 453, 455, 466, 469, 471, 476, 477, 478, 482, 485], "form": [5, 7, 9, 23, 29, 31, 32, 35, 36, 51, 52, 60, 61, 65, 69, 74, 78, 82, 83, 89, 95, 99, 100, 102, 104, 107, 108, 109, 111, 112, 114, 115, 116, 119, 126, 128, 133, 150, 158, 164, 167, 173, 175, 181, 182, 183, 184, 187, 189, 192, 193, 196, 197, 200, 203, 204, 205, 207, 210, 212, 213, 215, 216, 220, 228, 232, 233, 235, 237, 247, 249, 251, 252, 255, 257, 259, 261, 263, 265, 267, 272, 273, 274, 275, 277, 279, 282, 289, 294, 299, 300, 302, 304, 308, 310, 311, 313, 325, 340, 344, 347, 348, 349, 351, 352, 353, 354, 359, 363, 367, 369, 370, 371, 372, 373, 374, 381, 388, 391, 392, 393, 394, 398, 399, 402, 404, 409, 411, 412, 414, 417, 423, 425, 428, 429, 430, 431, 432, 433, 435, 436, 439, 440, 441, 443, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "entri": [5, 22, 29, 31, 33, 43, 47, 60, 65, 73, 75, 78, 83, 85, 97, 99, 103, 104, 106, 109, 114, 115, 116, 120, 126, 144, 150, 157, 164, 166, 173, 175, 182, 183, 187, 190, 192, 197, 199, 200, 202, 223, 232, 233, 237, 240, 243, 250, 254, 255, 258, 261, 267, 271, 274, 275, 276, 277, 278, 286, 287, 289, 290, 292, 298, 299, 300, 302, 305, 308, 312, 313, 314, 316, 320, 322, 325, 327, 330, 336, 337, 339, 342, 346, 347, 348, 351, 358, 359, 363, 367, 370, 374, 380, 381, 383, 385, 388, 389, 393, 394, 404, 406, 407, 409, 425, 426, 429, 434, 456, 459, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485], "round": [5, 60, 61, 65, 128, 156, 179, 189, 196, 200, 228, 232, 250, 260, 281, 295, 296, 299, 324, 350, 351, 352, 359, 383, 388, 390, 392, 405, 432, 434, 446, 448, 453, 454, 455, 456, 466, 468, 470, 471, 472, 473, 474, 475, 478, 479, 482, 483, 485], "match": [5, 11, 22, 23, 31, 40, 43, 60, 61, 65, 71, 78, 79, 83, 88, 95, 99, 102, 104, 108, 109, 112, 114, 115, 124, 129, 133, 144, 146, 147, 150, 157, 158, 162, 169, 173, 183, 189, 192, 193, 196, 197, 200, 203, 204, 210, 211, 212, 215, 218, 223, 226, 233, 235, 238, 247, 249, 250, 253, 254, 255, 257, 259, 260, 261, 267, 270, 273, 274, 276, 278, 289, 292, 293, 294, 299, 300, 302, 303, 308, 314, 317, 320, 326, 329, 337, 338, 339, 344, 347, 348, 351, 352, 354, 355, 357, 364, 367, 368, 371, 374, 380, 381, 383, 385, 386, 389, 390, 392, 393, 398, 399, 403, 404, 405, 407, 414, 415, 417, 419, 424, 429, 433, 434, 435, 437, 439, 449, 459, 466, 467, 468, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "squar": [5, 31, 60, 95, 97, 99, 104, 114, 147, 161, 183, 187, 192, 218, 281, 303, 314, 347, 350, 351, 388, 398, 417, 431, 432, 434, 438, 439, 440, 444, 446, 453, 468, 469, 472, 476, 483, 485], "bracket": [5, 31, 60, 104, 109, 111, 114, 150, 216, 227, 232, 238, 247, 277, 303, 347, 351, 391, 398, 414, 417, 431, 432, 434, 438, 439, 440, 471, 472, 473, 476, 485], "whose": [5, 23, 29, 31, 33, 40, 43, 57, 60, 69, 83, 95, 100, 103, 109, 126, 128, 129, 145, 175, 181, 182, 183, 187, 189, 192, 200, 205, 207, 210, 212, 215, 220, 222, 223, 228, 232, 233, 235, 240, 243, 249, 250, 251, 261, 264, 272, 273, 274, 275, 277, 289, 295, 298, 299, 303, 305, 314, 316, 318, 325, 328, 338, 339, 340, 344, 346, 350, 351, 352, 359, 367, 370, 371, 374, 381, 384, 385, 392, 394, 399, 404, 406, 409, 417, 419, 431, 432, 434, 436, 439, 466, 467, 468, 470, 471, 472, 473, 478, 479, 480, 482, 483, 485], "pass": [5, 7, 9, 11, 14, 16, 17, 20, 23, 24, 27, 31, 32, 33, 34, 40, 41, 43, 45, 49, 55, 56, 59, 60, 61, 63, 65, 69, 70, 78, 81, 82, 83, 85, 86, 87, 88, 89, 94, 97, 98, 100, 102, 103, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 126, 128, 133, 139, 142, 144, 145, 146, 147, 150, 152, 156, 157, 158, 161, 162, 163, 164, 166, 169, 172, 173, 175, 176, 178, 179, 181, 183, 184, 187, 189, 196, 197, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 225, 230, 232, 233, 237, 239, 241, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 281, 284, 285, 287, 289, 292, 294, 298, 299, 300, 301, 302, 303, 305, 311, 312, 313, 314, 315, 317, 320, 325, 326, 327, 328, 331, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 374, 380, 381, 383, 384, 385, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 441, 444, 447, 449, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "chunk": [5, 13, 41, 65, 88, 95, 100, 109, 112, 114, 129, 139, 156, 172, 186, 230, 232, 242, 247, 249, 260, 264, 267, 268, 276, 289, 290, 299, 309, 320, 338, 340, 344, 354, 357, 399, 411, 419, 420, 434, 466, 469, 471, 473, 481, 485], "you": [5, 13, 16, 22, 23, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 46, 49, 53, 54, 56, 57, 60, 61, 63, 64, 65, 69, 70, 72, 73, 76, 78, 79, 82, 83, 85, 86, 87, 89, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 133, 139, 145, 146, 147, 149, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 172, 173, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 196, 198, 200, 202, 203, 205, 207, 208, 209, 212, 213, 214, 215, 218, 220, 221, 222, 225, 228, 230, 232, 233, 234, 237, 238, 241, 242, 243, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 284, 289, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 311, 312, 313, 314, 319, 320, 325, 326, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 363, 364, 367, 369, 370, 372, 373, 374, 376, 380, 381, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 438, 440, 445, 446, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "don": [5, 8, 9, 18, 23, 27, 31, 32, 33, 46, 47, 54, 55, 56, 60, 69, 70, 72, 73, 76, 78, 79, 81, 83, 85, 86, 89, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 116, 126, 128, 133, 139, 142, 144, 150, 158, 159, 160, 161, 165, 166, 169, 173, 175, 182, 185, 187, 189, 196, 197, 200, 207, 216, 218, 223, 232, 233, 234, 237, 249, 250, 258, 264, 265, 268, 273, 274, 275, 281, 289, 294, 298, 299, 301, 302, 303, 305, 313, 314, 325, 334, 336, 338, 342, 344, 347, 348, 350, 351, 370, 372, 373, 374, 381, 390, 392, 393, 394, 399, 403, 405, 406, 409, 411, 417, 425, 428, 430, 431, 432, 434, 435, 436, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 483, 484, 485], "have": [5, 7, 11, 18, 22, 23, 24, 27, 29, 31, 32, 33, 40, 45, 47, 55, 56, 57, 60, 61, 69, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 142, 144, 145, 146, 147, 149, 150, 152, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 181, 182, 183, 184, 185, 187, 189, 190, 192, 195, 196, 197, 200, 201, 202, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 218, 220, 222, 225, 228, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 288, 289, 290, 292, 294, 298, 299, 300, 301, 302, 303, 305, 308, 311, 313, 314, 317, 318, 320, 325, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 376, 380, 381, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 445, 446, 447, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "provid": [5, 7, 11, 15, 18, 23, 24, 27, 29, 31, 32, 33, 34, 35, 38, 40, 41, 43, 45, 47, 51, 54, 55, 58, 59, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 78, 82, 84, 85, 89, 94, 95, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 116, 120, 121, 122, 123, 125, 126, 128, 129, 133, 139, 142, 144, 145, 147, 149, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 187, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 228, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 298, 299, 301, 302, 304, 306, 308, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 325, 326, 327, 328, 330, 332, 334, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 440, 441, 444, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "raw": [5, 7, 16, 30, 60, 65, 108, 111, 124, 126, 128, 158, 173, 182, 183, 197, 200, 203, 204, 212, 213, 214, 232, 237, 261, 276, 289, 294, 299, 302, 304, 305, 335, 337, 344, 345, 347, 348, 351, 368, 371, 372, 374, 385, 387, 399, 402, 406, 419, 428, 431, 439, 453, 467, 469, 471, 472, 474, 478, 480, 485], "storag": [5, 30, 33, 40, 52, 65, 97, 103, 109, 114, 164, 173, 183, 197, 258, 264, 267, 290, 299, 306, 336, 347, 351, 354, 417, 444, 468, 471, 472, 473, 478, 479, 485], "unicod": [5, 16, 26, 29, 30, 37, 43, 56, 60, 62, 65, 90, 95, 97, 100, 102, 105, 109, 110, 111, 118, 125, 127, 149, 151, 152, 157, 173, 181, 182, 183, 188, 189, 192, 200, 201, 202, 203, 204, 207, 208, 209, 210, 215, 216, 220, 228, 232, 237, 245, 246, 247, 254, 260, 264, 268, 272, 288, 299, 300, 302, 305, 308, 325, 341, 351, 352, 353, 359, 368, 383, 390, 398, 404, 409, 411, 415, 416, 417, 426, 429, 432, 434, 439, 446, 459, 460, 467, 471, 472, 473, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486], "byte": [5, 7, 12, 14, 16, 18, 23, 24, 29, 31, 32, 33, 39, 40, 41, 47, 55, 56, 58, 60, 61, 63, 65, 69, 70, 88, 89, 94, 95, 97, 100, 102, 103, 109, 110, 111, 112, 115, 119, 123, 124, 127, 128, 129, 133, 134, 139, 141, 142, 145, 147, 148, 149, 151, 152, 156, 158, 160, 164, 172, 173, 183, 184, 188, 190, 192, 194, 196, 197, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 218, 219, 220, 222, 230, 232, 237, 241, 242, 244, 249, 255, 256, 257, 258, 260, 262, 264, 265, 268, 270, 272, 274, 275, 276, 277, 280, 284, 288, 289, 290, 293, 294, 299, 300, 301, 302, 304, 305, 310, 311, 312, 315, 317, 320, 323, 324, 325, 328, 330, 334, 338, 339, 341, 342, 344, 345, 347, 348, 349, 355, 356, 359, 363, 364, 367, 374, 382, 383, 386, 390, 399, 402, 404, 405, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 423, 425, 426, 428, 429, 431, 432, 434, 435, 436, 444, 450, 454, 455, 459, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "area": [5, 7, 40, 43, 75, 102, 108, 109, 114, 183, 203, 212, 232, 254, 264, 284, 305, 328, 344, 348, 350, 376, 381, 438, 450, 466, 471, 472, 479, 482], "general": [5, 7, 23, 31, 33, 35, 38, 40, 51, 60, 65, 69, 75, 78, 82, 83, 86, 94, 95, 100, 101, 103, 108, 109, 111, 112, 114, 116, 122, 126, 128, 133, 139, 152, 158, 159, 164, 173, 175, 182, 183, 187, 188, 189, 190, 192, 197, 210, 215, 218, 220, 226, 230, 231, 232, 233, 234, 239, 242, 247, 249, 250, 251, 254, 257, 258, 259, 260, 264, 267, 272, 273, 275, 276, 277, 279, 281, 289, 294, 299, 305, 311, 313, 320, 325, 326, 331, 336, 342, 344, 348, 349, 351, 352, 355, 357, 359, 363, 369, 371, 374, 380, 385, 390, 391, 393, 394, 398, 399, 403, 409, 411, 412, 413, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 434, 438, 439, 440, 459, 462, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485], "share": [5, 7, 31, 33, 39, 40, 43, 54, 55, 60, 61, 65, 69, 74, 76, 78, 81, 83, 86, 87, 89, 94, 106, 109, 112, 116, 121, 124, 126, 128, 139, 143, 170, 187, 189, 192, 218, 219, 222, 233, 237, 242, 257, 260, 265, 267, 272, 273, 284, 295, 298, 299, 300, 302, 305, 317, 328, 332, 336, 344, 345, 347, 348, 349, 351, 352, 359, 370, 371, 374, 380, 392, 393, 411, 428, 431, 432, 434, 436, 439, 444, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 483, 485, 486], "lifetim": [5, 33, 40, 46, 83, 95, 164, 175, 299, 409, 434, 467, 478, 481, 482, 485], "won": [5, 31, 32, 39, 60, 72, 83, 85, 86, 95, 100, 102, 104, 107, 108, 109, 111, 114, 120, 122, 128, 139, 144, 158, 172, 173, 189, 190, 192, 200, 213, 218, 232, 237, 238, 250, 273, 275, 298, 305, 306, 335, 344, 359, 374, 393, 420, 425, 428, 459, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 480, 482, 485], "ani": [5, 7, 8, 9, 11, 12, 13, 18, 20, 22, 23, 24, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 41, 43, 44, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 85, 86, 87, 95, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 121, 122, 123, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 169, 172, 173, 176, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 225, 227, 228, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 308, 311, 314, 315, 319, 320, 321, 322, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 363, 364, 367, 369, 370, 371, 374, 377, 380, 381, 383, 384, 386, 388, 389, 392, 394, 398, 399, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 440, 445, 450, 454, 457, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "yourself": [5, 31, 33, 41, 60, 82, 95, 100, 102, 111, 112, 114, 116, 128, 162, 183, 185, 200, 208, 258, 268, 272, 273, 274, 275, 298, 303, 334, 342, 348, 359, 392, 393, 394, 414, 465, 471, 474, 477], "es": [5, 95, 100, 351, 468, 472, 473, 474, 476, 485], "et": [5, 89, 100, 109, 187, 344, 348, 381, 417, 468, 471, 473, 476, 485], "howev": [5, 23, 24, 31, 33, 40, 43, 47, 60, 69, 73, 74, 78, 81, 82, 83, 85, 86, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 120, 126, 133, 139, 144, 145, 158, 164, 167, 173, 175, 176, 182, 183, 187, 189, 192, 196, 200, 201, 203, 206, 208, 210, 212, 213, 215, 216, 218, 220, 230, 232, 234, 237, 242, 243, 246, 250, 252, 254, 255, 257, 258, 261, 264, 265, 267, 273, 274, 275, 277, 278, 287, 289, 292, 294, 298, 299, 300, 302, 305, 306, 316, 317, 325, 334, 337, 338, 339, 340, 344, 347, 348, 350, 351, 352, 355, 359, 362, 363, 367, 369, 370, 372, 374, 381, 383, 385, 389, 390, 391, 392, 393, 394, 401, 403, 406, 407, 409, 411, 414, 415, 419, 420, 423, 426, 430, 432, 434, 436, 459, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "py_buff": [5, 7, 41, 60, 65, 472, 478], "get": [5, 7, 14, 17, 22, 23, 29, 31, 32, 33, 37, 38, 40, 43, 46, 47, 50, 51, 55, 58, 60, 61, 63, 65, 69, 72, 73, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 98, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 126, 128, 133, 135, 139, 140, 141, 142, 144, 145, 147, 150, 157, 158, 164, 166, 167, 170, 173, 175, 176, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 207, 212, 213, 215, 216, 218, 220, 223, 224, 232, 234, 235, 237, 239, 240, 242, 243, 249, 250, 252, 254, 255, 259, 260, 261, 262, 264, 267, 268, 271, 272, 273, 274, 275, 277, 279, 285, 287, 289, 291, 294, 295, 298, 299, 301, 303, 305, 308, 311, 314, 315, 319, 322, 324, 326, 328, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 355, 356, 357, 359, 360, 363, 364, 367, 370, 371, 373, 374, 380, 381, 385, 388, 389, 390, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 411, 414, 415, 417, 418, 419, 420, 423, 424, 428, 429, 431, 432, 434, 436, 441, 442, 456, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "fill": [5, 7, 22, 31, 32, 36, 40, 43, 45, 52, 57, 60, 61, 65, 85, 86, 95, 102, 104, 109, 110, 112, 115, 123, 126, 128, 158, 181, 182, 183, 189, 192, 200, 203, 208, 212, 229, 232, 252, 254, 258, 260, 264, 267, 275, 299, 342, 344, 347, 348, 351, 352, 354, 355, 367, 368, 371, 374, 432, 434, 436, 444, 456, 460, 466, 468, 469, 470, 471, 472, 477, 478, 480, 481, 485], "under": [5, 7, 14, 18, 23, 31, 32, 33, 40, 41, 43, 51, 58, 63, 65, 69, 70, 71, 73, 75, 78, 79, 84, 94, 95, 102, 103, 104, 108, 109, 110, 111, 116, 119, 122, 126, 133, 138, 139, 151, 156, 158, 160, 162, 164, 167, 175, 181, 182, 183, 189, 196, 200, 203, 206, 210, 215, 218, 219, 220, 222, 223, 232, 233, 234, 237, 241, 242, 249, 254, 258, 261, 264, 267, 268, 273, 274, 275, 276, 277, 281, 284, 287, 289, 290, 298, 299, 300, 301, 302, 303, 305, 311, 314, 320, 326, 328, 334, 335, 336, 337, 338, 339, 344, 345, 347, 348, 349, 350, 351, 355, 359, 360, 367, 370, 371, 374, 376, 380, 381, 384, 385, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 407, 409, 410, 411, 414, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "lock": [5, 29, 30, 60, 65, 83, 86, 97, 109, 112, 121, 131, 148, 170, 172, 173, 175, 182, 219, 222, 248, 257, 264, 273, 275, 276, 277, 288, 289, 291, 299, 311, 322, 328, 330, 336, 339, 345, 347, 349, 359, 367, 374, 390, 406, 408, 432, 456, 466, 468, 470, 471, 472, 473, 474, 477, 480, 482, 483, 484, 485, 486], "so": [5, 7, 11, 15, 20, 22, 23, 25, 27, 29, 31, 33, 39, 40, 43, 51, 54, 56, 59, 60, 61, 63, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 126, 128, 133, 142, 144, 145, 146, 147, 149, 154, 157, 158, 160, 163, 164, 165, 173, 175, 176, 179, 181, 182, 183, 184, 185, 187, 189, 192, 196, 197, 200, 203, 206, 207, 208, 209, 210, 212, 214, 215, 216, 218, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 237, 239, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 257, 258, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 284, 289, 290, 295, 298, 299, 300, 302, 303, 305, 308, 314, 316, 318, 320, 325, 331, 334, 335, 337, 338, 339, 340, 341, 342, 344, 347, 348, 350, 351, 352, 354, 355, 359, 360, 364, 367, 369, 370, 371, 372, 374, 380, 381, 383, 388, 389, 390, 392, 393, 394, 399, 403, 405, 406, 409, 410, 411, 413, 414, 415, 417, 419, 420, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486], "caller": [5, 9, 18, 23, 29, 31, 32, 33, 34, 43, 56, 58, 61, 83, 95, 98, 103, 104, 144, 150, 163, 164, 175, 182, 195, 197, 220, 230, 232, 249, 257, 259, 261, 264, 273, 297, 299, 308, 314, 339, 342, 344, 348, 355, 359, 370, 375, 381, 384, 385, 392, 399, 401, 404, 405, 407, 409, 423, 425, 432, 433, 434, 444, 467, 468, 469, 470, 471, 472, 473, 481, 484, 485], "can": [5, 7, 11, 13, 14, 16, 18, 23, 24, 26, 27, 29, 31, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 132, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 261, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 314, 315, 317, 318, 319, 320, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 450, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "subsequ": [5, 23, 31, 43, 57, 61, 69, 95, 98, 103, 108, 111, 121, 126, 165, 183, 196, 197, 209, 213, 215, 230, 233, 250, 258, 261, 264, 267, 274, 275, 277, 284, 289, 298, 299, 300, 325, 338, 344, 348, 350, 351, 352, 361, 363, 370, 374, 380, 388, 393, 399, 428, 431, 434, 436, 438, 469, 470, 471, 472, 473, 475, 480, 483, 485], "even": [5, 9, 18, 23, 29, 31, 32, 33, 40, 54, 55, 56, 59, 60, 61, 69, 70, 73, 78, 83, 86, 89, 94, 95, 99, 100, 103, 104, 109, 110, 111, 112, 114, 116, 118, 122, 126, 128, 129, 133, 138, 144, 145, 152, 158, 161, 164, 167, 169, 172, 173, 175, 182, 183, 187, 189, 192, 194, 199, 200, 201, 203, 205, 206, 212, 213, 214, 215, 218, 220, 221, 222, 225, 228, 232, 233, 242, 243, 246, 250, 254, 257, 261, 264, 265, 267, 271, 272, 273, 274, 275, 276, 277, 281, 289, 298, 299, 300, 303, 305, 313, 314, 324, 325, 337, 338, 339, 340, 342, 344, 347, 348, 350, 351, 352, 354, 359, 363, 367, 369, 370, 371, 374, 381, 386, 390, 391, 392, 393, 394, 399, 403, 404, 405, 406, 407, 409, 411, 415, 419, 421, 423, 426, 429, 430, 431, 432, 434, 436, 438, 439, 440, 445, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485], "insid": [5, 7, 11, 31, 40, 60, 65, 69, 78, 86, 95, 100, 102, 104, 111, 112, 119, 120, 128, 150, 175, 181, 183, 192, 203, 206, 212, 217, 232, 234, 247, 258, 264, 268, 287, 289, 290, 302, 303, 305, 308, 325, 338, 339, 344, 348, 352, 374, 380, 381, 388, 390, 392, 393, 394, 403, 417, 424, 427, 431, 432, 434, 447, 453, 465, 467, 468, 469, 470, 471, 472, 474, 477, 479, 481, 482, 483, 485], "py_begin_allow_thread": [5, 31, 54, 83], "block": [5, 7, 11, 23, 31, 33, 40, 43, 52, 60, 65, 76, 83, 85, 87, 100, 102, 103, 111, 115, 118, 120, 121, 123, 128, 132, 133, 139, 140, 142, 143, 144, 145, 150, 152, 156, 175, 182, 183, 184, 191, 192, 194, 196, 197, 200, 206, 214, 215, 219, 220, 222, 230, 232, 233, 239, 242, 249, 250, 254, 255, 257, 261, 264, 267, 275, 279, 288, 289, 290, 294, 299, 301, 302, 311, 319, 322, 328, 331, 333, 334, 335, 336, 338, 339, 342, 344, 347, 349, 355, 358, 359, 363, 364, 367, 370, 374, 390, 392, 393, 399, 405, 407, 409, 410, 415, 420, 432, 433, 434, 435, 436, 440, 459, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "without": [5, 7, 9, 11, 12, 22, 23, 25, 31, 32, 33, 36, 40, 43, 51, 52, 54, 55, 56, 58, 60, 63, 65, 69, 74, 76, 78, 79, 82, 83, 85, 86, 89, 95, 99, 100, 102, 103, 104, 106, 108, 109, 111, 112, 113, 116, 120, 121, 122, 126, 128, 133, 139, 142, 144, 145, 146, 152, 156, 158, 162, 164, 172, 173, 175, 176, 179, 181, 182, 183, 187, 189, 190, 192, 194, 196, 197, 198, 200, 201, 203, 204, 209, 212, 215, 216, 218, 220, 221, 225, 230, 232, 233, 235, 237, 238, 239, 241, 242, 246, 247, 250, 251, 255, 257, 258, 261, 264, 265, 267, 271, 272, 273, 276, 277, 281, 284, 288, 289, 294, 295, 298, 299, 300, 301, 302, 303, 305, 311, 314, 315, 320, 324, 325, 328, 329, 330, 331, 334, 336, 338, 340, 344, 347, 348, 351, 354, 355, 359, 363, 364, 367, 369, 370, 371, 372, 373, 374, 386, 388, 390, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 411, 414, 415, 417, 420, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 445, 453, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485], "risk": [5, 40, 41, 83, 95, 104, 133, 220, 274, 277, 289, 298, 305, 367, 417, 425, 472, 477, 482, 483, 485], "mutabl": [5, 26, 27, 33, 60, 65, 95, 97, 104, 167, 177, 182, 193, 210, 222, 232, 233, 261, 289, 290, 297, 299, 305, 321, 336, 406, 417, 428, 431, 432, 434, 440, 444, 446, 453, 466, 469, 471, 472, 473, 474, 476, 481, 484, 485], "data": [5, 7, 9, 24, 30, 31, 33, 40, 46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 71, 73, 75, 79, 82, 83, 84, 85, 87, 89, 98, 100, 102, 103, 106, 109, 111, 113, 116, 120, 121, 123, 124, 125, 126, 127, 128, 129, 133, 139, 140, 141, 142, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 160, 163, 164, 166, 170, 172, 173, 175, 181, 183, 184, 185, 188, 189, 190, 192, 196, 202, 203, 204, 205, 208, 210, 213, 214, 215, 218, 219, 220, 222, 230, 232, 237, 241, 242, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 267, 268, 272, 273, 275, 277, 278, 279, 280, 282, 284, 287, 289, 290, 292, 294, 296, 298, 299, 301, 302, 306, 308, 310, 312, 314, 315, 320, 321, 322, 324, 325, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 356, 359, 360, 363, 364, 365, 366, 367, 368, 371, 373, 377, 380, 381, 384, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 401, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 434, 436, 437, 443, 444, 447, 449, 455, 462, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486], "being": [5, 7, 16, 27, 31, 33, 36, 57, 58, 60, 61, 63, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 83, 85, 86, 94, 95, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 126, 128, 129, 133, 139, 144, 156, 157, 158, 164, 165, 167, 169, 172, 173, 175, 176, 181, 182, 183, 187, 189, 190, 197, 200, 202, 203, 209, 212, 215, 218, 220, 223, 225, 232, 233, 234, 237, 239, 241, 254, 255, 257, 258, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 282, 284, 289, 298, 299, 301, 303, 305, 308, 313, 314, 315, 318, 320, 324, 325, 326, 330, 334, 335, 336, 338, 339, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 360, 362, 367, 369, 370, 371, 372, 374, 381, 385, 390, 392, 393, 394, 398, 403, 404, 406, 411, 414, 417, 418, 419, 421, 425, 426, 430, 431, 432, 434, 436, 438, 440, 447, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "resiz": [5, 8, 9, 27, 40, 51, 53, 57, 61, 65, 124, 182, 183, 264, 284, 339, 351, 374, 380, 381, 388, 392, 480, 482, 485], "destroy": [5, 11, 31, 57, 60, 64, 104, 112, 254, 264, 284, 289, 290, 298, 352, 370, 374, 392, 404, 406, 409, 432, 436, 466, 468, 469, 471, 477, 481, 482, 484, 485], "result": [5, 7, 8, 9, 13, 15, 20, 23, 29, 31, 32, 33, 34, 37, 40, 43, 45, 47, 50, 51, 56, 57, 58, 60, 61, 63, 65, 69, 76, 78, 81, 82, 83, 85, 86, 88, 94, 97, 100, 102, 103, 104, 107, 108, 109, 110, 111, 114, 116, 120, 123, 128, 132, 133, 135, 139, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 158, 159, 161, 164, 165, 166, 169, 170, 172, 173, 175, 176, 179, 182, 183, 184, 187, 189, 191, 192, 196, 197, 200, 203, 204, 206, 208, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 226, 230, 232, 233, 234, 237, 238, 241, 242, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 311, 313, 314, 315, 317, 323, 325, 327, 328, 330, 334, 337, 338, 339, 342, 344, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 374, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 399, 401, 402, 404, 406, 407, 409, 411, 413, 414, 415, 417, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 445, 447, 450, 454, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pybuffer_releas": [5, 7, 46, 60, 100, 472, 485], "finish": [5, 32, 58, 65, 70, 73, 82, 89, 94, 95, 100, 106, 108, 109, 128, 132, 133, 142, 143, 144, 150, 156, 162, 172, 175, 220, 234, 239, 249, 262, 264, 276, 289, 290, 320, 322, 339, 345, 347, 348, 351, 355, 363, 367, 373, 376, 392, 407, 415, 416, 417, 420, 423, 426, 428, 431, 432, 456, 459, 471, 472, 477, 478, 480, 481, 484, 485], "process": [5, 7, 23, 30, 32, 33, 43, 55, 60, 62, 63, 65, 70, 72, 73, 75, 78, 79, 82, 83, 85, 87, 88, 89, 94, 100, 102, 104, 106, 107, 108, 111, 112, 114, 115, 116, 118, 120, 121, 124, 126, 128, 129, 136, 139, 140, 142, 145, 151, 156, 157, 158, 162, 164, 170, 172, 175, 181, 182, 183, 189, 200, 207, 208, 210, 217, 219, 220, 221, 224, 225, 232, 233, 234, 235, 237, 239, 242, 247, 248, 252, 254, 255, 258, 260, 261, 266, 267, 272, 273, 274, 275, 276, 277, 284, 286, 298, 301, 302, 305, 314, 315, 320, 321, 322, 325, 328, 330, 334, 335, 337, 338, 339, 340, 342, 344, 345, 347, 349, 351, 353, 355, 359, 361, 362, 363, 364, 367, 369, 370, 371, 372, 374, 376, 383, 384, 385, 388, 389, 390, 398, 399, 402, 403, 404, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 431, 432, 434, 436, 439, 440, 459, 460, 465, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "earli": [5, 32, 33, 85, 175, 261, 275, 298, 339, 348, 350, 351, 370, 374, 386, 415, 434, 436, 466, 470, 472, 477, 485], "abort": [5, 33, 40, 56, 65, 69, 78, 83, 109, 124, 133, 136, 139, 170, 219, 220, 230, 255, 262, 299, 303, 339, 347, 348, 359, 364, 370, 392, 436, 469, 482, 485], "case": [5, 7, 14, 18, 22, 23, 24, 29, 31, 32, 33, 37, 43, 47, 49, 53, 54, 55, 56, 58, 60, 61, 63, 65, 69, 70, 72, 73, 76, 78, 79, 81, 82, 83, 85, 86, 94, 95, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 126, 128, 133, 139, 144, 145, 147, 150, 152, 153, 155, 156, 158, 161, 162, 164, 165, 169, 173, 175, 179, 181, 182, 183, 184, 187, 189, 192, 193, 194, 196, 197, 200, 202, 203, 208, 209, 210, 212, 214, 215, 216, 217, 218, 220, 221, 222, 227, 232, 234, 237, 239, 241, 242, 243, 246, 247, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 289, 294, 295, 298, 299, 300, 301, 302, 303, 305, 308, 311, 313, 314, 320, 325, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 351, 352, 353, 354, 355, 359, 363, 364, 367, 370, 371, 372, 374, 380, 381, 383, 386, 388, 390, 391, 393, 394, 398, 399, 403, 404, 405, 409, 411, 413, 414, 415, 417, 419, 420, 424, 425, 429, 430, 432, 433, 434, 435, 436, 439, 440, 441, 445, 459, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "unless": [5, 7, 9, 23, 24, 29, 31, 33, 40, 51, 53, 56, 60, 69, 83, 86, 95, 100, 104, 108, 110, 111, 112, 116, 118, 120, 122, 123, 126, 128, 133, 146, 147, 152, 153, 156, 157, 167, 173, 181, 187, 189, 192, 197, 200, 203, 207, 212, 213, 216, 218, 232, 233, 247, 249, 250, 251, 254, 257, 258, 261, 264, 265, 267, 273, 274, 276, 277, 281, 287, 289, 294, 298, 299, 300, 303, 315, 320, 325, 329, 334, 335, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 363, 364, 369, 370, 390, 392, 393, 398, 399, 403, 404, 406, 410, 411, 416, 419, 431, 432, 433, 434, 439, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 481, 482, 483, 484, 485], "otherwis": [5, 7, 11, 18, 22, 23, 27, 29, 31, 32, 33, 34, 37, 38, 40, 41, 43, 45, 46, 47, 49, 51, 55, 56, 60, 61, 63, 69, 78, 83, 86, 89, 100, 104, 108, 109, 110, 111, 112, 115, 118, 122, 123, 126, 128, 133, 135, 139, 144, 145, 147, 152, 156, 157, 161, 162, 163, 164, 169, 172, 173, 175, 176, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 202, 203, 204, 206, 207, 209, 212, 213, 215, 216, 217, 218, 221, 223, 225, 230, 232, 233, 234, 237, 239, 241, 249, 250, 251, 252, 254, 257, 258, 259, 261, 264, 265, 267, 268, 273, 274, 275, 277, 281, 282, 284, 289, 292, 298, 299, 300, 302, 303, 305, 307, 308, 310, 311, 313, 317, 318, 320, 325, 327, 330, 334, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 360, 363, 364, 367, 369, 370, 371, 374, 381, 383, 385, 386, 388, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 410, 411, 415, 417, 419, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 436, 439, 440, 441, 446, 459, 460, 465, 467, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485], "state": [5, 17, 23, 24, 29, 30, 33, 43, 48, 49, 50, 56, 58, 60, 61, 65, 83, 85, 86, 94, 95, 100, 102, 104, 106, 108, 110, 111, 115, 133, 139, 143, 145, 147, 150, 158, 161, 163, 164, 166, 170, 172, 173, 175, 176, 177, 183, 191, 197, 219, 220, 225, 229, 233, 234, 250, 255, 258, 260, 262, 264, 265, 274, 276, 277, 299, 301, 303, 304, 307, 314, 320, 321, 324, 326, 329, 331, 334, 339, 341, 344, 345, 347, 348, 351, 355, 359, 367, 370, 371, 373, 374, 380, 385, 389, 392, 393, 394, 398, 399, 404, 406, 409, 415, 416, 425, 428, 429, 430, 432, 434, 436, 445, 456, 466, 468, 469, 471, 476, 477, 478, 479, 482, 483, 484, 485], "nul": [5, 7, 60, 100, 182, 183, 184, 244, 275, 299, 302, 320, 359, 423, 477, 478, 485], "termin": [5, 7, 9, 16, 29, 31, 32, 35, 43, 57, 58, 60, 61, 63, 65, 69, 76, 78, 83, 94, 95, 102, 104, 108, 109, 114, 116, 121, 124, 126, 129, 136, 138, 139, 142, 144, 145, 146, 162, 170, 172, 181, 182, 184, 195, 196, 197, 200, 214, 215, 221, 226, 232, 236, 249, 252, 254, 260, 261, 264, 267, 271, 272, 275, 277, 289, 292, 294, 298, 303, 308, 314, 325, 328, 339, 341, 342, 345, 347, 348, 351, 352, 355, 359, 366, 370, 371, 374, 382, 395, 399, 404, 409, 411, 415, 417, 419, 430, 431, 433, 434, 436, 439, 440, 459, 466, 470, 471, 472, 474, 477, 478, 480, 482, 483, 485], "some": [5, 7, 23, 27, 31, 32, 33, 40, 54, 55, 56, 57, 58, 60, 61, 65, 69, 70, 72, 73, 76, 78, 81, 82, 83, 85, 86, 94, 95, 98, 99, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 128, 133, 138, 139, 142, 144, 147, 151, 156, 158, 161, 162, 163, 164, 167, 169, 172, 173, 175, 181, 182, 183, 186, 187, 189, 190, 192, 194, 196, 200, 201, 202, 203, 205, 206, 210, 211, 212, 213, 214, 215, 216, 218, 220, 222, 223, 225, 228, 232, 233, 234, 237, 241, 242, 243, 246, 247, 250, 251, 254, 255, 257, 258, 259, 261, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 288, 289, 290, 294, 298, 299, 300, 301, 302, 305, 306, 308, 312, 314, 317, 320, 325, 328, 334, 335, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 365, 367, 369, 370, 371, 374, 381, 382, 385, 386, 388, 389, 390, 392, 393, 394, 399, 402, 403, 404, 406, 407, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 445, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "requir": [5, 7, 12, 18, 23, 27, 31, 33, 40, 43, 55, 56, 60, 61, 65, 69, 70, 72, 73, 74, 78, 79, 81, 82, 83, 85, 86, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 114, 115, 116, 118, 121, 122, 124, 128, 133, 138, 144, 156, 157, 163, 164, 167, 173, 175, 176, 181, 183, 187, 189, 190, 192, 193, 195, 197, 200, 201, 202, 203, 207, 208, 209, 210, 214, 215, 217, 218, 219, 220, 228, 230, 233, 234, 235, 239, 241, 242, 247, 250, 252, 254, 255, 257, 258, 261, 262, 264, 267, 268, 271, 272, 273, 274, 275, 276, 277, 281, 286, 287, 289, 290, 294, 298, 299, 301, 302, 305, 306, 307, 311, 313, 314, 316, 320, 325, 328, 334, 336, 338, 339, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 361, 363, 367, 370, 371, 374, 380, 381, 383, 385, 389, 390, 391, 392, 393, 398, 399, 401, 403, 406, 409, 411, 413, 414, 417, 418, 419, 420, 421, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 445, 457, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "read": [5, 7, 22, 23, 24, 29, 31, 32, 39, 40, 41, 46, 55, 60, 61, 63, 65, 69, 75, 76, 78, 79, 82, 83, 85, 86, 88, 89, 95, 96, 97, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 115, 116, 118, 120, 122, 123, 124, 125, 126, 128, 129, 141, 142, 145, 146, 149, 151, 152, 153, 155, 156, 158, 160, 162, 163, 164, 165, 166, 167, 169, 172, 173, 176, 182, 183, 187, 189, 190, 194, 195, 196, 200, 201, 207, 210, 211, 214, 215, 218, 219, 220, 222, 223, 224, 225, 230, 232, 233, 234, 237, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 264, 268, 271, 273, 274, 277, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 314, 315, 318, 319, 320, 325, 326, 331, 334, 335, 336, 337, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 359, 360, 364, 365, 370, 371, 374, 381, 383, 384, 385, 386, 388, 389, 393, 394, 398, 399, 400, 401, 402, 403, 404, 406, 411, 414, 417, 418, 419, 420, 421, 423, 425, 426, 428, 429, 430, 431, 432, 434, 436, 439, 441, 442, 444, 450, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "instead": [5, 7, 12, 13, 16, 17, 22, 23, 24, 29, 31, 32, 38, 40, 43, 46, 47, 55, 56, 58, 60, 63, 65, 69, 78, 82, 83, 85, 86, 87, 89, 94, 99, 102, 103, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116, 120, 126, 128, 133, 139, 144, 145, 149, 152, 156, 158, 159, 163, 164, 165, 167, 172, 173, 175, 176, 181, 182, 183, 187, 189, 190, 192, 196, 197, 199, 200, 203, 204, 205, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 220, 230, 232, 233, 235, 237, 239, 249, 250, 251, 252, 254, 255, 257, 258, 261, 264, 267, 268, 272, 273, 275, 276, 277, 281, 289, 290, 294, 298, 299, 300, 302, 303, 305, 306, 311, 312, 313, 314, 317, 318, 319, 320, 325, 326, 327, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 359, 360, 363, 364, 367, 370, 372, 374, 380, 381, 383, 385, 386, 389, 390, 391, 392, 393, 394, 398, 399, 401, 403, 404, 406, 409, 411, 413, 414, 415, 416, 417, 419, 427, 429, 431, 432, 434, 435, 436, 439, 440, 453, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "they": [5, 7, 8, 18, 23, 24, 27, 28, 31, 32, 33, 40, 43, 46, 51, 52, 54, 55, 56, 60, 61, 63, 69, 70, 73, 74, 76, 78, 79, 81, 83, 85, 86, 94, 95, 98, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 126, 128, 133, 139, 144, 145, 146, 147, 150, 153, 154, 157, 158, 160, 161, 162, 164, 167, 169, 172, 173, 175, 176, 181, 182, 183, 184, 185, 187, 189, 190, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 209, 212, 214, 215, 216, 218, 220, 222, 223, 225, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 247, 250, 254, 255, 257, 258, 261, 262, 264, 265, 267, 268, 273, 274, 275, 276, 277, 281, 282, 283, 287, 288, 289, 290, 294, 298, 299, 300, 301, 302, 305, 308, 310, 311, 313, 314, 315, 318, 320, 325, 328, 331, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 363, 364, 367, 369, 370, 371, 372, 374, 380, 381, 382, 383, 384, 385, 388, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 446, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "work": [5, 15, 18, 23, 31, 32, 33, 34, 35, 39, 40, 43, 52, 54, 56, 60, 61, 65, 69, 70, 73, 78, 82, 83, 86, 87, 88, 89, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 124, 125, 126, 128, 138, 139, 140, 142, 143, 144, 145, 146, 151, 154, 157, 158, 162, 164, 167, 169, 172, 173, 175, 176, 182, 183, 187, 189, 190, 193, 196, 197, 198, 204, 212, 214, 215, 218, 222, 230, 232, 233, 235, 237, 239, 242, 247, 250, 252, 254, 255, 257, 258, 260, 261, 266, 267, 270, 272, 273, 275, 279, 281, 289, 290, 295, 296, 298, 299, 300, 302, 304, 305, 306, 308, 310, 311, 312, 314, 315, 322, 325, 330, 334, 336, 338, 344, 345, 348, 350, 351, 352, 354, 355, 359, 363, 366, 367, 369, 370, 374, 380, 381, 385, 388, 390, 392, 393, 394, 398, 399, 403, 404, 406, 407, 409, 411, 414, 415, 417, 418, 423, 425, 430, 431, 432, 434, 436, 438, 440, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "check": [5, 7, 9, 12, 16, 17, 20, 23, 25, 29, 31, 32, 33, 34, 36, 40, 41, 43, 47, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 70, 75, 82, 83, 85, 86, 94, 98, 99, 100, 102, 104, 106, 108, 109, 111, 112, 114, 116, 120, 122, 125, 126, 128, 133, 144, 149, 150, 156, 158, 162, 166, 167, 169, 173, 175, 179, 182, 183, 184, 187, 189, 192, 193, 194, 197, 204, 207, 212, 215, 218, 220, 221, 222, 230, 232, 233, 239, 240, 247, 249, 250, 252, 254, 255, 261, 262, 265, 268, 270, 271, 273, 274, 275, 276, 278, 281, 286, 289, 292, 293, 294, 295, 299, 300, 301, 302, 308, 309, 311, 326, 328, 333, 334, 337, 338, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 357, 359, 362, 367, 368, 370, 380, 381, 383, 386, 389, 390, 392, 393, 399, 403, 404, 406, 411, 413, 417, 420, 423, 426, 428, 431, 434, 435, 436, 440, 450, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "pybufferproc": [5, 58, 60, 85], "bf_releasebuff": [5, 58, 60], "disallow": [5, 32, 60, 126, 173, 218, 278, 299, 344, 347, 351, 427, 431, 465, 472, 476, 479, 482, 483, 485], "such": [5, 7, 12, 18, 20, 23, 24, 27, 29, 31, 33, 36, 40, 43, 49, 54, 55, 58, 60, 61, 69, 70, 72, 76, 78, 79, 82, 83, 85, 86, 87, 89, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 111, 114, 115, 116, 118, 119, 121, 126, 128, 133, 138, 139, 142, 144, 147, 150, 152, 157, 158, 162, 164, 165, 167, 173, 175, 178, 181, 182, 183, 187, 189, 190, 192, 196, 197, 200, 201, 203, 204, 209, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 230, 232, 233, 234, 237, 239, 241, 242, 243, 245, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 277, 278, 281, 284, 287, 289, 290, 293, 294, 298, 299, 300, 301, 302, 303, 305, 308, 310, 312, 313, 314, 319, 320, 323, 325, 330, 334, 335, 336, 337, 338, 339, 342, 344, 345, 347, 348, 350, 351, 352, 353, 355, 359, 360, 362, 363, 364, 366, 367, 370, 371, 374, 380, 381, 382, 384, 385, 388, 389, 390, 391, 392, 393, 398, 399, 401, 403, 404, 406, 410, 411, 413, 414, 415, 416, 417, 419, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 439, 440, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "bytearray": [5, 7, 8, 31, 32, 61, 65, 88, 95, 97, 100, 139, 151, 152, 188, 197, 220, 222, 232, 242, 244, 260, 264, 268, 280, 284, 290, 305, 310, 324, 344, 348, 354, 390, 398, 404, 423, 428, 431, 432, 434, 454, 459, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485], "variant": [5, 22, 29, 39, 45, 54, 60, 65, 83, 94, 103, 104, 109, 111, 114, 126, 133, 164, 166, 173, 183, 189, 190, 192, 210, 232, 233, 252, 255, 262, 267, 288, 289, 299, 300, 302, 309, 338, 344, 347, 348, 363, 392, 393, 394, 399, 402, 420, 432, 436, 471, 472, 473, 474, 479, 482, 483, 484, 485], "etc": [5, 32, 61, 69, 70, 78, 81, 89, 94, 95, 104, 108, 109, 112, 114, 115, 116, 126, 139, 147, 158, 162, 181, 213, 218, 232, 247, 250, 251, 254, 258, 261, 264, 265, 272, 273, 275, 278, 282, 287, 289, 290, 298, 299, 302, 308, 309, 313, 314, 316, 317, 325, 335, 339, 340, 344, 347, 348, 350, 363, 370, 371, 374, 380, 388, 390, 392, 398, 411, 414, 426, 430, 432, 435, 440, 441, 455, 460, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485], "py_ssize_t_clean": [5, 33, 56, 82, 83, 86, 471, 476, 483, 485], "must": [5, 7, 9, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 45, 46, 47, 49, 50, 53, 55, 56, 57, 58, 60, 61, 63, 69, 70, 73, 74, 78, 79, 81, 83, 85, 86, 87, 89, 94, 95, 100, 102, 103, 104, 106, 107, 110, 111, 112, 115, 116, 118, 121, 122, 123, 126, 128, 129, 133, 138, 139, 144, 145, 146, 149, 150, 152, 156, 157, 158, 161, 162, 164, 167, 172, 173, 175, 178, 179, 181, 182, 183, 187, 189, 190, 192, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 225, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 294, 297, 298, 299, 301, 302, 303, 305, 307, 308, 310, 314, 320, 323, 325, 326, 328, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 363, 364, 366, 367, 370, 371, 374, 376, 380, 381, 383, 384, 386, 388, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 446, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "befor": [5, 7, 13, 17, 20, 23, 24, 27, 29, 30, 32, 33, 36, 40, 43, 49, 52, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 69, 70, 72, 74, 78, 82, 83, 85, 86, 87, 89, 95, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 111, 112, 113, 114, 115, 116, 121, 123, 126, 133, 138, 142, 144, 146, 147, 149, 156, 157, 158, 160, 162, 163, 164, 165, 172, 173, 175, 176, 181, 182, 183, 189, 190, 192, 196, 197, 200, 202, 203, 208, 210, 212, 218, 220, 225, 230, 232, 233, 234, 238, 239, 241, 249, 250, 252, 254, 255, 257, 258, 261, 264, 265, 267, 272, 273, 274, 275, 276, 277, 282, 284, 289, 292, 294, 295, 298, 299, 301, 302, 303, 305, 306, 311, 313, 314, 315, 319, 320, 325, 326, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 363, 364, 367, 369, 370, 371, 380, 381, 386, 388, 392, 393, 394, 398, 399, 403, 404, 405, 406, 409, 411, 414, 415, 416, 417, 418, 419, 420, 424, 426, 429, 430, 431, 432, 433, 434, 436, 439, 440, 450, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "on": [5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 90, 96, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 126, 128, 129, 133, 138, 139, 141, 142, 144, 145, 146, 147, 150, 151, 152, 153, 154, 157, 160, 161, 162, 163, 164, 167, 169, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 227, 228, 230, 231, 232, 234, 235, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 346, 347, 349, 350, 352, 353, 354, 357, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 445, 446, 450, 452, 453, 455, 459, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "older": [5, 31, 54, 60, 65, 69, 83, 85, 102, 109, 110, 126, 170, 183, 192, 196, 209, 234, 237, 242, 254, 259, 274, 294, 299, 301, 303, 305, 320, 334, 347, 348, 359, 367, 374, 382, 390, 399, 419, 426, 434, 436, 466, 469, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 82, 83, 85, 86, 89, 94, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 118, 119, 120, 126, 127, 128, 129, 133, 134, 144, 146, 162, 166, 172, 173, 176, 182, 187, 189, 192, 196, 218, 220, 228, 232, 233, 243, 247, 255, 260, 261, 262, 264, 265, 268, 273, 281, 287, 290, 295, 297, 298, 299, 301, 305, 310, 312, 322, 324, 325, 332, 334, 344, 347, 350, 352, 354, 358, 371, 372, 383, 386, 389, 390, 392, 393, 402, 406, 409, 411, 414, 415, 416, 417, 423, 425, 431, 432, 434, 444, 445, 447, 450, 453, 454, 455, 459, 460, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485], "str": [5, 10, 18, 24, 25, 31, 32, 33, 37, 47, 56, 60, 61, 63, 65, 85, 86, 88, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 118, 120, 126, 128, 133, 141, 148, 152, 156, 162, 164, 166, 169, 173, 175, 181, 183, 187, 188, 189, 192, 194, 196, 197, 202, 203, 204, 208, 209, 210, 212, 215, 216, 218, 220, 232, 233, 241, 243, 244, 247, 249, 251, 253, 254, 258, 259, 260, 261, 264, 265, 267, 268, 272, 273, 274, 276, 289, 290, 294, 297, 298, 299, 302, 305, 312, 324, 325, 337, 342, 345, 347, 348, 352, 354, 359, 363, 367, 368, 369, 372, 383, 386, 389, 390, 392, 393, 398, 402, 404, 409, 414, 417, 418, 423, 425, 426, 429, 431, 432, 434, 439, 445, 446, 447, 448, 450, 453, 454, 455, 456, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "const": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 29, 31, 32, 37, 38, 39, 43, 46, 47, 50, 51, 55, 56, 57, 58, 60, 61, 63, 65, 83, 85, 89, 100, 106, 124, 298, 357, 415, 479, 482, 483, 485], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 29, 31, 32, 33, 37, 38, 39, 40, 41, 43, 46, 47, 50, 51, 55, 56, 57, 58, 60, 61, 63, 82, 83, 85, 86, 89, 100, 106, 127, 152, 164, 182, 183, 209, 247, 254, 268, 272, 288, 351, 352, 354, 372, 374, 390, 413, 417, 432, 444, 469, 471, 472, 473, 476, 479, 482, 483, 485], "convert": [5, 14, 15, 18, 25, 31, 33, 37, 45, 49, 52, 53, 55, 56, 61, 63, 65, 69, 78, 79, 82, 83, 85, 86, 94, 102, 103, 104, 108, 109, 111, 112, 113, 116, 118, 123, 126, 133, 144, 147, 150, 153, 155, 161, 162, 164, 166, 170, 173, 181, 182, 183, 184, 187, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 215, 216, 220, 222, 227, 230, 232, 233, 237, 245, 247, 251, 255, 260, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 289, 291, 295, 298, 299, 300, 304, 305, 307, 308, 313, 315, 325, 342, 344, 349, 350, 351, 352, 354, 359, 363, 367, 371, 381, 383, 390, 392, 398, 402, 404, 409, 411, 415, 417, 419, 423, 429, 431, 432, 434, 439, 440, 447, 450, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "exist": [5, 9, 22, 24, 29, 31, 32, 33, 37, 40, 46, 52, 54, 55, 56, 59, 60, 61, 63, 64, 65, 69, 70, 74, 76, 78, 79, 82, 83, 86, 89, 94, 95, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 123, 125, 126, 128, 129, 133, 145, 150, 156, 158, 162, 164, 166, 167, 169, 173, 175, 181, 182, 187, 189, 190, 193, 195, 200, 201, 203, 207, 212, 213, 215, 217, 218, 219, 220, 223, 225, 226, 232, 233, 237, 239, 241, 242, 243, 250, 251, 254, 255, 257, 258, 261, 264, 265, 267, 273, 274, 275, 276, 277, 278, 282, 284, 287, 289, 290, 293, 294, 298, 299, 300, 301, 302, 303, 305, 308, 314, 319, 325, 326, 330, 336, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 355, 359, 360, 363, 365, 367, 371, 373, 374, 377, 380, 381, 388, 390, 391, 392, 393, 398, 399, 401, 403, 404, 406, 407, 409, 411, 414, 417, 423, 425, 426, 427, 429, 431, 432, 433, 434, 436, 439, 440, 457, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "store": [5, 7, 11, 12, 18, 27, 31, 32, 39, 40, 47, 53, 55, 58, 60, 61, 65, 69, 83, 85, 86, 89, 94, 98, 99, 100, 103, 104, 108, 109, 111, 113, 114, 115, 116, 119, 123, 126, 128, 139, 140, 147, 161, 164, 166, 173, 176, 179, 181, 182, 183, 187, 189, 190, 192, 197, 200, 203, 204, 207, 208, 210, 212, 215, 230, 238, 250, 252, 254, 255, 258, 261, 262, 264, 267, 270, 273, 276, 277, 278, 282, 284, 289, 290, 294, 299, 304, 305, 306, 316, 320, 334, 335, 336, 341, 342, 344, 345, 347, 348, 349, 351, 354, 357, 359, 360, 363, 367, 370, 380, 381, 384, 385, 386, 388, 389, 390, 392, 393, 394, 399, 406, 409, 411, 414, 417, 423, 425, 426, 428, 429, 431, 432, 434, 435, 436, 439, 440, 447, 452, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "contain": [5, 7, 9, 12, 14, 22, 23, 25, 26, 27, 29, 31, 32, 33, 36, 38, 39, 40, 46, 47, 51, 52, 54, 55, 56, 57, 58, 60, 61, 65, 69, 70, 74, 76, 78, 81, 82, 83, 85, 86, 87, 88, 89, 94, 95, 98, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 123, 124, 128, 129, 133, 139, 144, 147, 149, 150, 152, 153, 156, 157, 158, 159, 163, 164, 165, 169, 172, 173, 175, 176, 178, 181, 182, 183, 184, 187, 188, 189, 190, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 230, 231, 232, 233, 234, 237, 238, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 313, 314, 316, 317, 318, 319, 320, 325, 328, 330, 334, 336, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 362, 363, 366, 367, 369, 370, 371, 372, 374, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 444, 445, 446, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "code": [5, 7, 9, 11, 12, 16, 18, 23, 24, 26, 29, 30, 32, 34, 36, 39, 40, 43, 46, 49, 50, 52, 53, 54, 56, 57, 60, 61, 63, 65, 69, 70, 76, 78, 82, 83, 85, 86, 87, 88, 89, 90, 94, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 124, 127, 128, 129, 136, 138, 139, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 158, 159, 164, 169, 173, 174, 175, 176, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 200, 203, 209, 210, 212, 213, 215, 218, 219, 220, 221, 222, 230, 232, 233, 235, 237, 242, 243, 246, 249, 250, 252, 255, 257, 260, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 279, 280, 284, 285, 286, 289, 290, 293, 294, 295, 298, 299, 301, 302, 303, 305, 308, 314, 315, 317, 318, 319, 320, 321, 325, 326, 330, 331, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 353, 354, 355, 358, 359, 362, 367, 369, 370, 371, 373, 374, 380, 381, 382, 383, 384, 385, 386, 389, 390, 393, 394, 397, 399, 401, 406, 411, 412, 413, 414, 415, 417, 418, 419, 423, 424, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 446, 449, 452, 458, 459, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 485, 486], "point": [5, 7, 16, 17, 18, 22, 23, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 45, 52, 55, 57, 60, 61, 63, 65, 75, 76, 83, 87, 89, 94, 95, 97, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 116, 120, 121, 122, 129, 133, 139, 142, 144, 145, 147, 150, 154, 160, 161, 164, 166, 168, 169, 173, 175, 176, 182, 183, 187, 188, 189, 195, 196, 197, 199, 200, 203, 207, 209, 210, 212, 213, 216, 220, 228, 230, 232, 239, 242, 246, 254, 255, 257, 258, 260, 267, 268, 272, 273, 275, 277, 280, 281, 284, 286, 287, 289, 296, 298, 299, 300, 302, 303, 305, 308, 311, 314, 325, 328, 334, 337, 338, 339, 342, 344, 347, 348, 350, 351, 352, 353, 354, 359, 360, 367, 370, 371, 374, 377, 381, 383, 385, 388, 392, 393, 394, 399, 403, 407, 412, 413, 415, 416, 417, 418, 425, 427, 428, 429, 431, 432, 433, 434, 436, 445, 446, 448, 453, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "valueerror": [5, 9, 18, 23, 37, 39, 61, 65, 69, 95, 103, 107, 108, 115, 120, 121, 126, 127, 128, 133, 140, 143, 150, 154, 163, 164, 165, 166, 169, 172, 173, 179, 181, 182, 187, 189, 192, 200, 203, 204, 210, 212, 215, 216, 217, 218, 220, 230, 232, 234, 239, 250, 255, 257, 258, 261, 264, 265, 267, 268, 273, 274, 280, 281, 284, 289, 290, 294, 298, 299, 300, 302, 308, 311, 320, 322, 324, 328, 331, 335, 336, 338, 339, 342, 344, 348, 350, 351, 352, 355, 358, 359, 370, 371, 391, 392, 393, 398, 399, 403, 412, 414, 426, 429, 431, 434, 445, 446, 447, 450, 454, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "rais": [5, 7, 9, 14, 18, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 37, 43, 45, 47, 51, 52, 55, 56, 57, 59, 60, 61, 63, 64, 65, 69, 70, 83, 85, 86, 88, 98, 102, 103, 104, 107, 109, 110, 112, 114, 115, 118, 120, 121, 126, 128, 129, 132, 133, 138, 139, 142, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 158, 160, 161, 163, 164, 165, 166, 169, 172, 173, 175, 176, 178, 179, 181, 182, 183, 187, 189, 190, 192, 193, 197, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 220, 222, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 249, 250, 251, 252, 254, 255, 257, 258, 261, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 284, 287, 288, 289, 290, 292, 293, 294, 297, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 315, 316, 317, 320, 325, 328, 329, 331, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 370, 371, 374, 383, 386, 388, 389, 390, 391, 392, 393, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 444, 445, 446, 447, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "utf": [5, 16, 23, 29, 31, 32, 43, 55, 56, 65, 108, 109, 114, 124, 126, 128, 151, 158, 173, 181, 189, 194, 196, 203, 204, 212, 213, 215, 216, 225, 230, 232, 242, 255, 258, 259, 264, 268, 271, 272, 292, 294, 305, 311, 313, 320, 336, 341, 344, 345, 347, 348, 351, 359, 363, 383, 398, 399, 403, 411, 415, 417, 423, 425, 426, 436, 439, 445, 450, 452, 459, 460, 462, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485], "encod": [5, 16, 23, 24, 29, 31, 32, 43, 56, 62, 63, 65, 69, 72, 78, 81, 87, 94, 97, 100, 102, 106, 108, 109, 110, 111, 115, 124, 125, 126, 127, 133, 139, 141, 147, 149, 151, 152, 156, 157, 158, 160, 173, 176, 181, 183, 184, 189, 190, 192, 194, 196, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 221, 225, 230, 232, 237, 241, 242, 249, 251, 255, 258, 259, 260, 261, 262, 270, 271, 272, 273, 274, 275, 276, 282, 291, 292, 299, 301, 302, 305, 310, 313, 315, 320, 336, 342, 344, 347, 348, 351, 354, 355, 356, 357, 359, 361, 363, 364, 365, 367, 374, 382, 383, 390, 399, 401, 411, 412, 415, 417, 419, 420, 421, 423, 424, 425, 426, 432, 436, 449, 450, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 482, 483, 484, 485, 486], "convers": [5, 9, 18, 31, 33, 60, 61, 65, 69, 82, 97, 100, 102, 103, 106, 112, 124, 126, 128, 139, 145, 149, 152, 153, 164, 173, 181, 189, 192, 202, 232, 260, 262, 264, 268, 272, 277, 282, 295, 296, 298, 299, 305, 344, 348, 352, 354, 355, 359, 363, 383, 389, 393, 398, 401, 430, 431, 437, 439, 454, 459, 465, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 485, 486], "fail": [5, 7, 9, 11, 18, 23, 24, 29, 31, 33, 40, 45, 53, 61, 65, 78, 82, 83, 86, 94, 95, 98, 99, 100, 109, 110, 111, 115, 119, 126, 128, 145, 158, 160, 161, 172, 175, 182, 189, 193, 194, 200, 216, 218, 220, 222, 251, 252, 254, 256, 257, 258, 261, 264, 267, 268, 272, 274, 276, 277, 278, 284, 289, 298, 299, 300, 301, 302, 303, 308, 325, 328, 334, 336, 338, 339, 340, 342, 344, 347, 348, 351, 352, 355, 359, 363, 367, 370, 374, 386, 390, 392, 393, 394, 399, 402, 409, 412, 417, 420, 423, 426, 429, 431, 432, 433, 436, 440, 447, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485], "unicodeerror": [5, 23, 65, 97, 164, 189, 209, 220, 299, 351, 454, 469, 474], "accept": [5, 15, 18, 23, 27, 29, 31, 54, 58, 61, 63, 64, 65, 69, 78, 79, 83, 85, 86, 89, 95, 99, 100, 102, 104, 107, 109, 110, 111, 112, 113, 114, 115, 119, 120, 123, 126, 128, 133, 139, 142, 144, 145, 147, 149, 152, 156, 158, 161, 162, 164, 169, 170, 173, 175, 179, 182, 183, 184, 187, 189, 192, 196, 200, 208, 212, 213, 215, 216, 220, 222, 228, 230, 233, 235, 241, 242, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 284, 288, 289, 295, 298, 299, 300, 301, 302, 303, 305, 320, 323, 325, 330, 334, 335, 336, 338, 339, 341, 342, 345, 347, 348, 351, 355, 357, 359, 363, 367, 369, 371, 380, 381, 383, 384, 386, 389, 390, 392, 398, 399, 401, 403, 405, 407, 409, 411, 415, 417, 420, 423, 425, 426, 428, 430, 431, 432, 434, 436, 439, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "want": [5, 7, 23, 31, 32, 33, 53, 60, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 94, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 121, 122, 126, 128, 133, 138, 141, 147, 149, 150, 158, 159, 162, 163, 165, 173, 175, 182, 183, 186, 189, 193, 196, 199, 200, 203, 207, 208, 209, 212, 215, 218, 222, 225, 232, 233, 235, 237, 238, 242, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 272, 273, 274, 275, 278, 281, 282, 284, 289, 295, 298, 299, 300, 302, 303, 305, 306, 308, 314, 319, 325, 334, 335, 338, 339, 342, 344, 345, 347, 348, 351, 352, 355, 359, 363, 369, 370, 374, 385, 388, 390, 392, 393, 394, 398, 399, 402, 404, 406, 411, 417, 425, 426, 429, 430, 432, 433, 436, 445, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 483, 484, 485], "filesystem": [5, 23, 31, 32, 56, 61, 63, 65, 69, 70, 76, 78, 79, 97, 114, 116, 133, 149, 173, 220, 223, 226, 258, 260, 272, 277, 289, 299, 300, 303, 308, 330, 338, 348, 359, 367, 392, 393, 404, 425, 426, 459, 465, 467, 473, 479, 482, 485], "path": [5, 23, 24, 29, 30, 31, 33, 56, 61, 65, 67, 69, 70, 73, 74, 76, 78, 82, 83, 86, 94, 95, 97, 98, 100, 103, 104, 106, 108, 109, 114, 117, 120, 124, 125, 126, 133, 141, 144, 145, 148, 150, 155, 156, 158, 169, 173, 182, 196, 200, 207, 217, 220, 222, 226, 227, 230, 232, 237, 238, 241, 250, 251, 252, 254, 256, 257, 259, 260, 261, 262, 264, 271, 272, 273, 274, 275, 276, 277, 282, 285, 286, 287, 289, 292, 294, 298, 299, 303, 308, 314, 317, 318, 319, 321, 326, 330, 337, 338, 340, 342, 344, 347, 348, 349, 355, 359, 361, 363, 365, 367, 371, 374, 388, 390, 392, 393, 398, 399, 403, 407, 409, 411, 417, 420, 423, 424, 425, 427, 429, 432, 437, 440, 442, 454, 456, 457, 459, 460, 462, 464, 466, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 482, 484, 485], "them": [5, 7, 15, 16, 22, 24, 31, 32, 33, 43, 54, 56, 60, 61, 63, 65, 69, 70, 73, 74, 76, 78, 79, 81, 83, 86, 87, 94, 95, 99, 100, 101, 102, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 120, 126, 128, 133, 140, 144, 145, 154, 158, 162, 164, 165, 167, 169, 172, 173, 175, 176, 181, 182, 183, 189, 190, 192, 194, 197, 199, 200, 202, 203, 208, 213, 215, 218, 221, 223, 232, 233, 234, 237, 238, 239, 242, 243, 247, 250, 251, 254, 255, 258, 261, 264, 272, 273, 274, 275, 277, 289, 290, 294, 295, 298, 299, 301, 302, 305, 313, 314, 323, 325, 328, 330, 334, 336, 341, 342, 344, 347, 348, 349, 350, 351, 353, 354, 355, 359, 364, 367, 369, 370, 372, 374, 380, 381, 386, 388, 390, 392, 393, 394, 404, 405, 409, 413, 414, 415, 416, 417, 425, 426, 431, 432, 434, 435, 436, 438, 440, 453, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "prefer": [5, 29, 32, 33, 41, 47, 54, 65, 78, 79, 95, 100, 104, 109, 115, 116, 120, 126, 133, 144, 145, 173, 181, 183, 189, 192, 209, 212, 218, 220, 232, 237, 242, 258, 264, 267, 272, 277, 281, 289, 298, 299, 305, 319, 348, 350, 355, 359, 360, 367, 369, 370, 371, 373, 381, 388, 389, 390, 402, 407, 409, 420, 425, 436, 460, 465, 471, 473, 476, 477, 478, 480, 481, 482, 483, 485], "pyunicode_fsconvert": [5, 54, 61, 481, 485], "previous": [5, 7, 9, 11, 16, 17, 23, 27, 31, 36, 38, 40, 45, 56, 58, 60, 61, 69, 78, 79, 82, 83, 85, 86, 89, 94, 95, 99, 100, 102, 104, 108, 109, 111, 114, 119, 126, 128, 138, 139, 144, 146, 150, 156, 157, 158, 164, 172, 173, 175, 176, 179, 182, 183, 187, 189, 192, 196, 197, 200, 214, 215, 220, 221, 223, 228, 232, 233, 237, 239, 249, 252, 254, 257, 258, 261, 267, 271, 273, 275, 276, 277, 282, 284, 288, 289, 290, 298, 299, 300, 302, 303, 305, 317, 320, 325, 335, 336, 337, 339, 342, 344, 347, 348, 350, 351, 354, 355, 359, 360, 361, 367, 369, 370, 371, 380, 381, 384, 386, 388, 389, 390, 392, 393, 394, 398, 399, 404, 405, 409, 414, 417, 424, 425, 426, 427, 430, 431, 432, 433, 436, 440, 450, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "typeerror": [5, 9, 22, 23, 37, 39, 45, 46, 47, 51, 52, 56, 58, 60, 61, 64, 65, 83, 85, 86, 95, 97, 99, 103, 104, 107, 114, 115, 126, 127, 128, 135, 173, 174, 178, 182, 187, 189, 190, 192, 200, 203, 204, 205, 206, 212, 213, 218, 220, 232, 240, 258, 261, 264, 265, 268, 274, 280, 281, 284, 297, 298, 299, 302, 310, 324, 351, 359, 371, 390, 392, 393, 398, 402, 406, 415, 417, 423, 431, 432, 434, 440, 445, 446, 447, 453, 454, 455, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485], "was": [5, 7, 9, 11, 17, 18, 22, 23, 29, 31, 33, 40, 43, 47, 51, 53, 56, 57, 58, 60, 61, 63, 69, 78, 83, 85, 86, 87, 95, 98, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 132, 133, 138, 139, 142, 144, 146, 147, 149, 150, 156, 158, 159, 162, 163, 164, 167, 169, 172, 173, 175, 176, 181, 183, 187, 189, 192, 194, 196, 197, 200, 203, 206, 208, 209, 212, 213, 214, 217, 218, 220, 221, 225, 230, 232, 234, 235, 237, 239, 241, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 272, 273, 274, 275, 276, 277, 278, 281, 284, 288, 289, 290, 292, 294, 295, 298, 299, 301, 303, 305, 308, 312, 313, 314, 317, 319, 320, 325, 326, 328, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 367, 369, 370, 371, 372, 374, 381, 382, 383, 384, 386, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 414, 417, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 436, 438, 439, 440, 445, 447, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "were": [5, 7, 9, 16, 17, 18, 31, 33, 46, 60, 61, 63, 69, 79, 83, 85, 86, 100, 103, 104, 108, 109, 111, 112, 116, 118, 119, 126, 128, 133, 139, 144, 146, 150, 156, 158, 164, 166, 172, 173, 175, 183, 187, 189, 192, 194, 196, 197, 200, 203, 206, 207, 208, 210, 212, 214, 215, 220, 223, 230, 232, 234, 235, 239, 242, 243, 247, 254, 258, 259, 261, 268, 273, 274, 281, 282, 284, 289, 295, 299, 301, 305, 314, 320, 325, 336, 339, 342, 344, 347, 350, 351, 352, 355, 359, 361, 363, 364, 367, 374, 381, 384, 385, 386, 388, 390, 392, 393, 394, 398, 399, 403, 404, 411, 416, 417, 427, 431, 432, 434, 436, 438, 439, 440, 445, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "encount": [5, 9, 14, 33, 52, 60, 111, 114, 126, 158, 160, 181, 192, 200, 206, 212, 215, 219, 220, 235, 247, 251, 261, 268, 273, 274, 278, 292, 298, 300, 302, 303, 305, 317, 320, 337, 338, 345, 347, 348, 350, 351, 364, 381, 390, 392, 404, 417, 419, 436, 466, 469, 470, 471, 472, 476, 477, 478, 483, 485], "well": [5, 32, 33, 47, 49, 61, 69, 76, 78, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 103, 104, 108, 109, 110, 111, 112, 114, 115, 116, 120, 126, 138, 139, 142, 147, 149, 150, 152, 158, 159, 163, 164, 172, 173, 175, 181, 182, 183, 190, 192, 200, 201, 202, 204, 207, 210, 211, 215, 218, 220, 222, 225, 230, 232, 233, 234, 235, 237, 241, 242, 250, 254, 257, 264, 265, 267, 269, 273, 274, 275, 276, 277, 282, 285, 290, 294, 295, 298, 299, 305, 313, 325, 327, 330, 335, 338, 342, 347, 348, 349, 350, 351, 352, 355, 359, 363, 366, 367, 369, 372, 374, 378, 380, 383, 385, 386, 388, 389, 390, 392, 393, 394, 398, 406, 414, 417, 418, 419, 420, 423, 429, 432, 434, 436, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "may": [5, 7, 9, 11, 12, 14, 20, 22, 23, 24, 27, 29, 31, 32, 33, 36, 40, 41, 43, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 69, 70, 72, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 133, 138, 139, 144, 145, 146, 147, 150, 152, 153, 154, 156, 158, 162, 163, 164, 165, 167, 169, 172, 173, 175, 178, 179, 181, 182, 183, 187, 189, 190, 192, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 317, 318, 319, 320, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 374, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 446, 447, 450, 457, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "doesn": [5, 7, 22, 23, 29, 31, 32, 33, 41, 46, 53, 60, 69, 70, 76, 78, 79, 82, 83, 86, 87, 89, 95, 100, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 126, 128, 138, 139, 150, 157, 158, 164, 175, 179, 181, 182, 189, 190, 200, 203, 205, 207, 212, 218, 220, 221, 232, 233, 242, 250, 251, 254, 261, 264, 265, 268, 272, 273, 275, 295, 298, 299, 300, 302, 303, 305, 308, 311, 320, 325, 328, 329, 334, 336, 338, 339, 340, 341, 342, 344, 346, 347, 348, 350, 351, 352, 355, 359, 367, 370, 372, 374, 388, 389, 391, 392, 393, 394, 404, 409, 411, 413, 423, 427, 428, 432, 434, 436, 445, 453, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "two": [5, 7, 9, 14, 15, 23, 27, 31, 32, 33, 34, 35, 39, 40, 43, 45, 55, 59, 60, 61, 64, 65, 69, 70, 73, 76, 78, 79, 82, 83, 85, 86, 87, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 126, 128, 129, 133, 138, 139, 144, 145, 147, 149, 150, 152, 157, 158, 161, 163, 164, 165, 166, 169, 173, 178, 179, 181, 182, 183, 184, 187, 189, 192, 195, 196, 197, 200, 201, 202, 203, 207, 209, 214, 215, 216, 217, 218, 220, 223, 225, 228, 230, 232, 233, 234, 235, 237, 242, 243, 250, 252, 254, 255, 256, 258, 261, 264, 265, 266, 267, 272, 273, 274, 277, 281, 282, 284, 287, 289, 290, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 307, 311, 314, 318, 320, 323, 324, 325, 328, 330, 331, 336, 338, 339, 340, 341, 344, 345, 347, 348, 349, 351, 352, 353, 354, 359, 363, 367, 369, 370, 371, 372, 377, 380, 381, 383, 386, 388, 390, 391, 392, 393, 394, 398, 402, 403, 404, 405, 406, 409, 411, 412, 414, 417, 420, 425, 426, 428, 429, 431, 432, 434, 435, 436, 438, 439, 440, 444, 445, 446, 453, 455, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "second": [5, 20, 22, 23, 31, 33, 35, 55, 61, 64, 65, 69, 78, 79, 83, 85, 86, 87, 94, 95, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 123, 133, 135, 140, 141, 143, 144, 145, 147, 158, 164, 172, 173, 175, 181, 182, 183, 188, 189, 192, 196, 197, 200, 202, 207, 210, 215, 216, 218, 220, 221, 222, 225, 228, 230, 232, 235, 237, 239, 242, 243, 249, 250, 254, 255, 257, 258, 261, 264, 267, 273, 274, 275, 277, 278, 281, 282, 288, 289, 290, 298, 299, 300, 301, 303, 307, 308, 311, 313, 314, 324, 325, 328, 334, 335, 337, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 360, 363, 364, 366, 367, 370, 371, 372, 381, 383, 388, 390, 392, 393, 398, 399, 400, 402, 411, 417, 423, 426, 432, 434, 436, 439, 440, 446, 450, 453, 460, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 485], "but": [5, 7, 8, 9, 12, 13, 15, 18, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 36, 37, 40, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 72, 73, 74, 76, 78, 79, 82, 83, 85, 86, 87, 88, 94, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 126, 128, 133, 138, 139, 142, 144, 145, 147, 149, 150, 152, 154, 157, 158, 159, 161, 162, 164, 165, 167, 172, 173, 175, 178, 181, 182, 183, 187, 189, 190, 192, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 225, 227, 228, 230, 232, 234, 235, 237, 238, 239, 242, 243, 247, 249, 250, 251, 252, 254, 255, 257, 258, 261, 264, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 307, 310, 312, 314, 315, 317, 318, 319, 320, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 363, 367, 369, 370, 371, 372, 373, 374, 378, 380, 381, 382, 383, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 404, 406, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "buf": [5, 7, 40, 65, 133, 170, 222, 242, 290, 348, 351, 363, 471], "member": [5, 29, 31, 32, 33, 43, 53, 55, 56, 57, 58, 60, 65, 79, 83, 85, 86, 98, 100, 118, 156, 169, 173, 182, 183, 187, 188, 220, 240, 251, 252, 255, 267, 268, 276, 299, 300, 305, 316, 317, 319, 321, 338, 344, 346, 347, 348, 349, 350, 351, 354, 359, 363, 367, 371, 383, 389, 392, 393, 426, 432, 434, 469, 470, 471, 472, 476, 477, 478, 480, 481, 482, 483, 484, 485], "recommend": [5, 31, 33, 40, 43, 46, 54, 60, 61, 65, 69, 75, 76, 78, 81, 82, 83, 85, 86, 95, 98, 100, 101, 104, 108, 110, 114, 116, 126, 128, 129, 132, 133, 138, 139, 144, 145, 149, 164, 172, 173, 179, 182, 187, 189, 192, 199, 200, 203, 218, 220, 232, 237, 242, 249, 252, 254, 255, 258, 261, 264, 268, 273, 281, 294, 301, 302, 305, 312, 314, 320, 325, 330, 337, 344, 345, 347, 348, 355, 359, 363, 371, 374, 390, 392, 402, 403, 411, 413, 414, 415, 419, 420, 428, 429, 432, 436, 439, 460, 465, 466, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "way": [5, 7, 9, 23, 29, 31, 32, 33, 40, 43, 54, 55, 56, 60, 61, 63, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 89, 94, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 119, 126, 128, 129, 133, 139, 144, 145, 147, 150, 158, 161, 163, 164, 165, 167, 169, 173, 175, 178, 179, 181, 182, 183, 187, 189, 192, 194, 196, 200, 201, 202, 203, 207, 208, 212, 214, 215, 216, 218, 230, 232, 235, 237, 242, 243, 250, 254, 255, 257, 258, 259, 261, 264, 265, 272, 273, 274, 275, 276, 277, 281, 284, 286, 289, 290, 292, 298, 299, 301, 302, 303, 305, 313, 314, 325, 330, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 351, 354, 355, 359, 362, 363, 367, 370, 372, 374, 380, 383, 385, 388, 390, 391, 392, 393, 394, 399, 402, 404, 406, 407, 411, 414, 417, 419, 423, 424, 425, 429, 430, 431, 432, 434, 436, 438, 439, 440, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "binari": [5, 7, 30, 32, 39, 40, 45, 60, 63, 65, 70, 73, 75, 76, 78, 81, 85, 88, 96, 97, 100, 106, 109, 114, 116, 121, 124, 128, 133, 147, 149, 153, 156, 174, 182, 192, 197, 201, 203, 204, 205, 207, 208, 210, 212, 214, 215, 218, 222, 228, 230, 232, 237, 241, 242, 243, 252, 257, 258, 260, 261, 262, 265, 267, 268, 272, 274, 275, 276, 277, 280, 281, 287, 288, 289, 291, 294, 298, 299, 302, 305, 308, 310, 323, 344, 352, 355, 357, 359, 360, 363, 368, 374, 390, 399, 401, 403, 406, 409, 417, 420, 424, 425, 426, 429, 430, 432, 437, 440, 443, 449, 450, 460, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pybytesobject": [5, 9, 61, 100, 472], "attempt": [5, 11, 23, 29, 31, 33, 45, 56, 60, 95, 98, 100, 102, 106, 107, 109, 111, 114, 115, 122, 126, 128, 133, 139, 156, 162, 172, 173, 175, 179, 181, 183, 189, 190, 192, 196, 200, 201, 203, 206, 210, 212, 214, 216, 218, 219, 220, 230, 232, 233, 249, 250, 254, 255, 258, 261, 264, 271, 272, 274, 275, 276, 277, 288, 289, 290, 299, 301, 305, 308, 311, 317, 319, 320, 325, 326, 328, 331, 334, 338, 339, 340, 342, 344, 345, 347, 348, 350, 351, 354, 359, 364, 367, 369, 370, 371, 392, 393, 398, 399, 402, 403, 405, 411, 414, 417, 419, 420, 421, 426, 427, 428, 431, 432, 434, 436, 440, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485], "declar": [5, 31, 33, 54, 55, 60, 65, 69, 78, 83, 85, 86, 88, 94, 95, 100, 104, 109, 114, 122, 144, 173, 175, 176, 178, 182, 199, 232, 233, 247, 258, 261, 264, 274, 298, 305, 320, 337, 345, 347, 351, 358, 390, 392, 406, 407, 413, 414, 415, 417, 419, 420, 429, 431, 432, 433, 434, 440, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pybytearrayobject": [5, 8, 100], "py_unicod": [5, 16, 23, 65, 100, 127, 476, 478, 484, 485], "pleas": [5, 23, 24, 31, 33, 61, 81, 98, 100, 108, 109, 110, 111, 112, 115, 126, 142, 158, 173, 182, 190, 230, 237, 249, 255, 258, 264, 272, 273, 274, 275, 294, 299, 311, 325, 328, 338, 341, 342, 344, 347, 348, 359, 363, 366, 388, 390, 393, 411, 430, 432, 434, 438, 445, 447, 461, 465, 466, 467, 469, 471, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485], "note": [5, 7, 15, 18, 20, 22, 27, 29, 31, 33, 38, 40, 43, 44, 46, 47, 51, 54, 56, 58, 60, 61, 63, 65, 69, 70, 72, 73, 76, 78, 82, 83, 85, 86, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 128, 129, 133, 138, 142, 144, 145, 146, 147, 149, 157, 158, 161, 163, 164, 167, 169, 172, 173, 175, 178, 181, 182, 183, 184, 187, 189, 190, 196, 197, 200, 201, 203, 205, 206, 207, 208, 211, 212, 215, 216, 218, 220, 221, 222, 223, 227, 228, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 258, 259, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 284, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 323, 325, 327, 328, 330, 334, 337, 338, 340, 341, 342, 347, 350, 351, 352, 354, 355, 358, 359, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 383, 385, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 417, 418, 419, 420, 423, 424, 425, 426, 427, 429, 431, 434, 435, 436, 438, 439, 440, 441, 446, 450, 453, 459, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485], "width": [5, 61, 65, 69, 85, 95, 102, 111, 123, 126, 147, 157, 164, 182, 183, 187, 189, 192, 229, 232, 254, 287, 298, 299, 313, 325, 350, 351, 352, 359, 368, 369, 371, 374, 377, 381, 388, 391, 405, 432, 439, 453, 456, 466, 469, 471, 472, 473, 477, 479, 481, 483, 485], "depend": [5, 14, 18, 31, 32, 33, 43, 50, 54, 60, 61, 65, 67, 70, 75, 78, 81, 82, 83, 85, 87, 89, 94, 95, 100, 102, 103, 104, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 128, 133, 139, 144, 145, 150, 157, 158, 162, 164, 173, 175, 179, 182, 183, 187, 189, 192, 196, 197, 199, 200, 202, 212, 215, 217, 218, 220, 222, 226, 228, 230, 232, 234, 237, 238, 239, 241, 242, 249, 250, 251, 254, 258, 261, 262, 264, 265, 267, 272, 273, 274, 275, 276, 277, 281, 285, 287, 289, 294, 299, 305, 314, 315, 316, 321, 325, 328, 334, 335, 336, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 363, 364, 366, 367, 369, 371, 372, 374, 381, 388, 390, 392, 393, 394, 399, 402, 403, 405, 406, 409, 410, 411, 417, 419, 423, 425, 428, 429, 431, 432, 433, 434, 436, 439, 440, 456, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "compil": [5, 29, 31, 32, 33, 40, 43, 54, 55, 56, 60, 63, 65, 72, 75, 76, 78, 81, 84, 86, 87, 94, 95, 96, 100, 104, 109, 114, 118, 119, 148, 163, 173, 182, 186, 188, 190, 197, 200, 220, 227, 232, 237, 242, 249, 254, 255, 257, 258, 260, 261, 270, 274, 276, 280, 312, 314, 320, 325, 326, 330, 337, 347, 348, 351, 352, 354, 359, 360, 364, 367, 368, 372, 381, 385, 389, 390, 391, 392, 404, 414, 425, 426, 432, 433, 436, 438, 439, 440, 444, 454, 459, 462, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "option": [5, 23, 31, 32, 33, 40, 45, 47, 54, 55, 56, 58, 60, 63, 65, 69, 70, 72, 73, 74, 75, 76, 82, 83, 85, 88, 98, 102, 103, 104, 106, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 124, 125, 128, 133, 142, 144, 145, 146, 147, 149, 152, 157, 158, 159, 160, 162, 163, 164, 166, 167, 169, 172, 173, 175, 176, 179, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 220, 221, 223, 224, 225, 228, 230, 232, 233, 234, 237, 239, 242, 245, 249, 252, 255, 256, 258, 259, 260, 261, 264, 265, 267, 270, 272, 273, 274, 275, 276, 277, 278, 282, 284, 287, 289, 290, 291, 294, 299, 300, 301, 302, 303, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 350, 351, 352, 353, 355, 357, 359, 360, 361, 362, 364, 367, 369, 370, 371, 372, 373, 375, 377, 378, 380, 383, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 407, 411, 415, 417, 418, 419, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 447, 453, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485], "either": [5, 7, 11, 14, 22, 23, 31, 33, 41, 43, 47, 52, 55, 56, 58, 60, 61, 64, 69, 70, 72, 73, 78, 79, 81, 82, 83, 85, 86, 94, 95, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 123, 126, 128, 133, 139, 142, 144, 145, 147, 149, 150, 151, 153, 156, 158, 161, 164, 175, 178, 179, 181, 182, 183, 184, 187, 189, 192, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 209, 212, 213, 214, 215, 216, 218, 220, 222, 228, 230, 232, 238, 239, 249, 250, 252, 254, 255, 258, 259, 261, 264, 265, 267, 268, 273, 274, 275, 276, 277, 278, 281, 284, 287, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 307, 308, 314, 315, 317, 320, 325, 328, 330, 331, 334, 335, 337, 338, 340, 341, 344, 347, 348, 351, 352, 354, 355, 359, 360, 363, 364, 367, 370, 371, 374, 380, 381, 383, 388, 390, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 436, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "bit": [5, 7, 33, 39, 40, 55, 58, 60, 61, 63, 65, 69, 70, 78, 83, 85, 86, 95, 96, 99, 100, 102, 103, 104, 107, 109, 111, 112, 114, 123, 124, 139, 147, 152, 159, 160, 161, 164, 173, 175, 183, 184, 192, 197, 200, 202, 207, 208, 209, 212, 215, 218, 222, 223, 232, 234, 237, 242, 250, 251, 265, 272, 276, 281, 293, 295, 298, 299, 301, 305, 309, 312, 321, 325, 328, 334, 338, 344, 348, 349, 351, 354, 355, 356, 359, 361, 363, 365, 371, 372, 374, 381, 394, 401, 402, 408, 414, 425, 426, 428, 431, 432, 434, 439, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "deprec": [5, 16, 23, 29, 31, 33, 40, 47, 51, 53, 54, 56, 60, 65, 69, 70, 75, 78, 79, 85, 116, 118, 122, 127, 128, 133, 144, 145, 156, 164, 179, 182, 192, 193, 199, 205, 206, 212, 214, 218, 220, 225, 230, 232, 237, 241, 242, 244, 249, 250, 255, 257, 258, 261, 265, 273, 278, 281, 298, 299, 302, 305, 310, 311, 320, 324, 328, 333, 334, 338, 341, 342, 344, 348, 351, 353, 367, 370, 371, 374, 376, 388, 390, 399, 401, 403, 404, 411, 416, 417, 432, 436, 459, 467, 468, 471, 474, 485, 486], "sinc": [5, 7, 10, 13, 14, 22, 23, 24, 27, 29, 31, 32, 33, 34, 38, 40, 41, 43, 44, 45, 47, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 69, 70, 72, 73, 76, 78, 79, 81, 82, 83, 85, 86, 89, 94, 95, 98, 100, 102, 103, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 120, 127, 133, 139, 144, 150, 152, 156, 158, 163, 167, 173, 175, 179, 181, 182, 183, 187, 189, 192, 196, 200, 201, 203, 205, 206, 208, 210, 212, 214, 215, 216, 218, 220, 225, 229, 232, 233, 234, 237, 241, 242, 244, 250, 251, 252, 254, 255, 257, 258, 259, 264, 268, 272, 274, 275, 277, 278, 281, 284, 289, 294, 298, 299, 300, 301, 302, 303, 313, 314, 320, 324, 325, 334, 336, 337, 338, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 359, 367, 369, 370, 371, 374, 381, 383, 384, 385, 386, 390, 393, 394, 399, 402, 404, 406, 409, 411, 413, 414, 415, 416, 418, 419, 423, 425, 426, 428, 431, 432, 433, 434, 436, 438, 439, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "version": [5, 8, 9, 10, 13, 14, 23, 27, 29, 31, 32, 33, 34, 39, 40, 41, 43, 45, 47, 49, 50, 53, 54, 55, 56, 58, 59, 60, 61, 63, 65, 70, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 87, 89, 90, 95, 99, 100, 101, 102, 103, 104, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 122, 123, 124, 126, 127, 128, 133, 139, 144, 145, 148, 149, 158, 164, 169, 173, 179, 182, 183, 189, 190, 192, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 228, 230, 232, 237, 240, 242, 244, 247, 249, 250, 251, 252, 254, 255, 257, 258, 261, 262, 265, 268, 271, 272, 273, 274, 275, 276, 277, 280, 281, 284, 286, 287, 289, 291, 294, 299, 300, 301, 302, 304, 305, 309, 312, 313, 314, 316, 318, 319, 320, 321, 324, 325, 326, 336, 337, 338, 340, 341, 344, 345, 346, 347, 351, 352, 354, 355, 357, 359, 360, 361, 363, 364, 366, 367, 369, 370, 372, 374, 380, 381, 382, 384, 385, 388, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 405, 406, 409, 411, 414, 415, 417, 421, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 454, 457, 459, 460, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486], "remov": [5, 22, 24, 27, 29, 31, 32, 33, 38, 43, 47, 52, 54, 60, 61, 63, 65, 69, 70, 75, 79, 83, 85, 86, 90, 94, 100, 103, 104, 108, 109, 111, 113, 115, 116, 118, 124, 126, 127, 128, 129, 133, 138, 142, 144, 146, 148, 149, 150, 156, 158, 162, 163, 164, 166, 167, 169, 172, 173, 175, 181, 183, 185, 188, 189, 192, 194, 197, 199, 200, 201, 203, 207, 210, 212, 214, 215, 217, 218, 219, 220, 230, 232, 237, 238, 243, 244, 247, 249, 250, 254, 255, 258, 259, 261, 265, 267, 268, 272, 273, 275, 277, 279, 281, 287, 289, 291, 292, 298, 299, 302, 303, 305, 310, 311, 314, 319, 320, 324, 325, 326, 331, 334, 335, 337, 338, 339, 340, 341, 347, 348, 351, 352, 359, 364, 365, 367, 369, 381, 382, 386, 388, 389, 390, 392, 393, 398, 399, 404, 406, 409, 414, 417, 425, 426, 429, 430, 432, 434, 436, 440, 444, 446, 453, 455, 456, 459, 460, 462, 466, 467, 468, 469, 470, 477, 478, 485, 486], "12": [5, 20, 31, 54, 61, 65, 75, 88, 90, 95, 99, 104, 108, 109, 111, 113, 114, 116, 126, 129, 145, 149, 152, 157, 179, 189, 192, 199, 200, 216, 232, 233, 243, 248, 265, 267, 275, 289, 310, 325, 328, 341, 344, 348, 350, 351, 352, 369, 371, 374, 383, 386, 388, 390, 426, 429, 436, 439, 445, 446, 448, 450, 453, 455, 459, 463, 468, 469, 470, 471, 472, 473, 475, 476, 477, 481, 482, 484, 485, 486], "old": [5, 9, 40, 43, 46, 56, 57, 61, 65, 83, 95, 100, 108, 111, 118, 122, 126, 128, 153, 158, 166, 183, 193, 203, 212, 220, 232, 233, 250, 255, 257, 258, 268, 274, 275, 277, 282, 289, 298, 299, 305, 310, 314, 336, 339, 348, 351, 352, 363, 366, 367, 374, 385, 386, 388, 393, 403, 411, 414, 419, 431, 432, 434, 439, 440, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "migrat": [5, 23, 61, 65, 101, 258, 261, 414, 440, 471, 472, 475, 476, 478, 479, 485], "pyunicode_aswidecharstr": [5, 54, 61, 476, 478, 482, 485], "write": [5, 7, 18, 23, 24, 27, 31, 32, 33, 34, 39, 40, 41, 55, 56, 60, 61, 65, 69, 70, 75, 76, 79, 82, 84, 85, 86, 88, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 116, 118, 120, 122, 123, 124, 125, 126, 129, 133, 136, 141, 142, 144, 145, 146, 148, 149, 151, 153, 154, 156, 158, 162, 163, 164, 167, 169, 173, 175, 176, 182, 183, 186, 190, 193, 195, 200, 201, 203, 207, 208, 212, 215, 218, 220, 222, 224, 225, 229, 230, 232, 233, 234, 235, 237, 241, 243, 250, 252, 253, 254, 255, 258, 260, 264, 265, 268, 273, 274, 275, 277, 279, 283, 284, 287, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 304, 305, 307, 310, 311, 313, 314, 315, 317, 323, 326, 334, 335, 336, 337, 338, 339, 344, 345, 348, 349, 351, 354, 355, 357, 359, 361, 364, 365, 368, 370, 373, 374, 376, 381, 383, 384, 386, 388, 390, 392, 393, 394, 401, 403, 404, 409, 411, 414, 415, 417, 419, 421, 423, 425, 426, 428, 431, 432, 435, 436, 440, 445, 450, 454, 455, 456, 459, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "interfac": [5, 7, 29, 30, 31, 33, 41, 46, 56, 60, 61, 63, 65, 69, 70, 73, 76, 78, 82, 83, 85, 90, 95, 102, 103, 104, 108, 110, 111, 114, 115, 116, 120, 122, 124, 125, 126, 133, 138, 139, 149, 153, 156, 157, 160, 162, 164, 167, 172, 173, 175, 176, 178, 179, 181, 182, 183, 186, 191, 193, 195, 198, 200, 201, 203, 204, 210, 211, 212, 213, 214, 222, 225, 229, 235, 237, 240, 242, 249, 250, 252, 254, 257, 258, 259, 260, 262, 266, 267, 270, 272, 273, 276, 277, 279, 282, 283, 287, 289, 291, 298, 300, 301, 302, 303, 304, 305, 308, 310, 311, 312, 314, 316, 318, 320, 321, 330, 331, 334, 336, 339, 342, 345, 346, 348, 351, 355, 357, 358, 359, 361, 366, 368, 370, 371, 373, 375, 380, 383, 385, 388, 398, 401, 402, 404, 405, 406, 407, 408, 411, 413, 414, 415, 417, 418, 419, 421, 430, 432, 436, 462, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 484, 485, 486], "done": [5, 7, 14, 29, 31, 32, 33, 34, 45, 47, 51, 52, 54, 55, 59, 60, 61, 63, 65, 69, 78, 79, 81, 82, 83, 85, 86, 94, 95, 100, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 126, 132, 133, 135, 139, 141, 144, 147, 158, 162, 164, 165, 170, 172, 173, 179, 181, 182, 183, 188, 189, 190, 192, 197, 200, 203, 207, 211, 212, 215, 216, 223, 229, 232, 238, 239, 241, 242, 252, 254, 257, 258, 261, 264, 272, 273, 274, 275, 284, 289, 294, 298, 299, 301, 302, 305, 308, 314, 315, 320, 322, 325, 340, 345, 347, 348, 351, 352, 355, 357, 359, 363, 364, 366, 367, 371, 372, 380, 381, 388, 389, 390, 393, 394, 399, 403, 404, 406, 412, 415, 416, 417, 418, 425, 432, 434, 436, 439, 440, 456, 465, 466, 467, 468, 469, 471, 472, 477, 478, 479, 480, 481, 483, 485], "input": [5, 9, 14, 15, 32, 33, 46, 60, 61, 63, 65, 69, 83, 85, 95, 100, 103, 104, 107, 108, 113, 114, 115, 116, 118, 120, 124, 126, 128, 129, 133, 139, 142, 147, 148, 149, 150, 152, 153, 156, 158, 162, 163, 164, 165, 166, 173, 175, 179, 181, 182, 189, 192, 196, 197, 200, 201, 202, 203, 204, 207, 208, 210, 214, 215, 216, 220, 226, 228, 229, 232, 236, 241, 242, 243, 247, 251, 252, 254, 260, 264, 267, 268, 270, 273, 275, 276, 277, 281, 289, 290, 296, 298, 299, 300, 301, 303, 307, 308, 313, 315, 317, 320, 323, 325, 326, 328, 334, 337, 342, 344, 347, 348, 351, 355, 359, 364, 366, 367, 369, 371, 373, 374, 380, 381, 382, 385, 393, 398, 399, 401, 405, 411, 412, 415, 416, 417, 418, 419, 420, 421, 425, 428, 431, 432, 433, 434, 436, 437, 438, 439, 445, 447, 454, 456, 459, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 26, 27, 28, 29, 31, 32, 33, 40, 43, 47, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 69, 70, 73, 74, 76, 79, 81, 82, 83, 85, 86, 87, 89, 94, 97, 99, 100, 102, 104, 106, 108, 109, 110, 113, 114, 115, 118, 119, 120, 123, 124, 125, 128, 133, 139, 140, 141, 144, 146, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 170, 172, 173, 175, 176, 180, 181, 182, 183, 184, 187, 188, 189, 190, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 207, 209, 210, 212, 215, 216, 219, 220, 221, 222, 223, 225, 226, 227, 230, 232, 233, 235, 237, 238, 240, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 300, 301, 302, 303, 305, 306, 308, 309, 311, 313, 314, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 450, 453, 454, 456, 457, 459, 460, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486], "known": [5, 9, 23, 24, 31, 33, 57, 60, 65, 76, 78, 85, 95, 104, 106, 111, 112, 115, 116, 126, 128, 158, 161, 164, 173, 175, 182, 189, 197, 203, 204, 216, 218, 242, 249, 254, 258, 259, 272, 274, 281, 282, 299, 305, 326, 333, 334, 344, 347, 348, 349, 350, 351, 355, 359, 371, 374, 380, 381, 383, 388, 390, 391, 393, 394, 404, 413, 414, 419, 420, 426, 428, 429, 430, 432, 434, 438, 439, 440, 462, 469, 471, 473, 474, 475, 476, 477, 479, 481, 482, 483, 485], "content": [5, 7, 8, 9, 12, 25, 30, 31, 36, 40, 43, 51, 55, 58, 61, 63, 65, 69, 72, 81, 82, 94, 95, 98, 100, 102, 104, 108, 109, 111, 114, 115, 116, 119, 120, 124, 128, 129, 149, 156, 158, 160, 163, 164, 166, 169, 172, 181, 182, 183, 185, 190, 193, 197, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 222, 223, 230, 232, 233, 234, 237, 241, 242, 247, 248, 249, 252, 254, 258, 259, 261, 264, 268, 274, 277, 279, 282, 284, 285, 286, 287, 290, 291, 299, 302, 305, 306, 308, 313, 317, 321, 323, 325, 326, 338, 340, 341, 344, 347, 348, 351, 352, 354, 359, 363, 365, 367, 369, 374, 383, 389, 395, 397, 398, 399, 403, 406, 411, 413, 414, 415, 417, 419, 420, 421, 423, 424, 425, 426, 428, 429, 433, 434, 436, 439, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 485], "text": [5, 51, 56, 61, 65, 69, 78, 82, 85, 94, 95, 97, 99, 100, 104, 108, 109, 111, 112, 114, 115, 124, 126, 128, 133, 151, 152, 156, 157, 158, 159, 162, 163, 165, 173, 174, 179, 181, 182, 184, 193, 194, 196, 197, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 225, 226, 230, 232, 233, 237, 241, 245, 246, 247, 249, 252, 255, 257, 258, 260, 261, 268, 272, 273, 274, 275, 276, 277, 279, 287, 288, 292, 294, 298, 299, 302, 305, 311, 313, 314, 319, 320, 321, 323, 326, 329, 337, 339, 347, 348, 352, 353, 355, 357, 359, 363, 365, 372, 373, 374, 377, 380, 381, 382, 385, 388, 390, 391, 392, 398, 399, 402, 403, 404, 407, 411, 413, 415, 416, 417, 419, 420, 426, 430, 432, 433, 434, 436, 438, 439, 450, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "alloc": [5, 7, 16, 23, 27, 29, 30, 32, 33, 43, 48, 53, 55, 56, 60, 61, 63, 65, 82, 83, 84, 86, 95, 103, 112, 121, 139, 175, 182, 191, 194, 221, 234, 260, 264, 265, 289, 290, 299, 305, 320, 328, 344, 359, 370, 381, 409, 420, 459, 460, 466, 467, 468, 471, 473, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486], "need": [5, 7, 11, 13, 18, 23, 27, 29, 31, 32, 33, 40, 43, 44, 47, 49, 53, 54, 55, 56, 60, 61, 63, 65, 69, 70, 72, 73, 74, 76, 78, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 126, 128, 129, 133, 138, 142, 144, 145, 146, 147, 150, 156, 158, 160, 161, 162, 163, 164, 167, 173, 175, 179, 182, 183, 185, 187, 189, 192, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 230, 232, 233, 237, 241, 242, 243, 245, 247, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 271, 272, 273, 274, 275, 276, 277, 284, 287, 289, 290, 294, 298, 299, 300, 301, 302, 305, 308, 311, 312, 313, 314, 317, 320, 326, 327, 328, 331, 332, 336, 337, 338, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 363, 366, 367, 369, 370, 371, 373, 374, 380, 382, 383, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 432, 434, 435, 436, 438, 439, 440, 441, 459, 460, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "copi": [5, 7, 9, 17, 31, 32, 40, 41, 49, 52, 60, 61, 65, 69, 70, 73, 74, 76, 78, 83, 87, 90, 100, 104, 109, 116, 118, 125, 126, 128, 133, 139, 144, 158, 164, 166, 170, 172, 173, 176, 178, 180, 182, 183, 187, 188, 189, 192, 200, 207, 208, 210, 215, 222, 226, 232, 233, 234, 237, 242, 244, 251, 254, 255, 260, 261, 262, 264, 267, 275, 277, 282, 284, 289, 290, 296, 298, 299, 305, 307, 308, 315, 325, 336, 347, 351, 352, 354, 355, 357, 359, 360, 367, 373, 377, 386, 388, 389, 392, 393, 394, 399, 403, 404, 411, 419, 420, 425, 428, 430, 432, 444, 445, 446, 465, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485], "adjust": [5, 12, 43, 51, 53, 61, 65, 78, 100, 110, 126, 166, 183, 189, 192, 208, 215, 296, 313, 330, 340, 348, 351, 371, 374, 380, 381, 417, 466, 473, 479, 481, 482, 483, 485], "respons": [5, 18, 23, 31, 32, 33, 43, 54, 58, 60, 61, 65, 76, 83, 86, 89, 100, 103, 104, 108, 109, 112, 114, 115, 116, 129, 133, 139, 142, 162, 175, 181, 183, 185, 189, 197, 203, 218, 230, 249, 250, 252, 255, 257, 258, 260, 262, 272, 273, 294, 311, 320, 331, 341, 342, 344, 345, 347, 348, 355, 357, 358, 390, 392, 394, 397, 405, 416, 423, 424, 425, 429, 432, 434, 436, 445, 455, 465, 466, 469, 472, 473, 477, 478, 479, 480, 482, 483, 485], "pymem_fre": [5, 18, 32, 40, 54, 56, 61, 469, 471, 485], "free": [5, 7, 11, 13, 18, 31, 32, 33, 40, 49, 56, 60, 61, 83, 85, 86, 88, 94, 95, 99, 104, 110, 112, 116, 128, 140, 164, 172, 182, 196, 197, 234, 236, 237, 255, 261, 289, 290, 298, 299, 305, 309, 322, 338, 351, 358, 359, 367, 386, 389, 392, 403, 406, 414, 423, 424, 429, 430, 431, 432, 433, 434, 436, 440, 465, 467, 468, 469, 471, 472, 474, 477, 478, 479, 484, 485], "through": [5, 7, 9, 11, 14, 15, 20, 22, 23, 24, 31, 40, 43, 52, 56, 57, 60, 61, 65, 70, 73, 78, 81, 83, 86, 87, 95, 101, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 122, 126, 133, 150, 158, 164, 172, 173, 181, 182, 183, 184, 187, 189, 192, 200, 201, 203, 204, 205, 209, 211, 212, 213, 215, 217, 223, 228, 232, 233, 237, 249, 251, 252, 254, 258, 259, 273, 274, 275, 277, 281, 284, 287, 289, 290, 298, 299, 300, 303, 307, 308, 312, 318, 320, 325, 342, 344, 347, 348, 349, 351, 352, 355, 359, 360, 367, 369, 370, 372, 374, 380, 381, 389, 390, 392, 393, 394, 398, 399, 402, 406, 410, 414, 415, 417, 419, 421, 423, 426, 428, 431, 432, 434, 436, 438, 439, 440, 445, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "recod": 5, "assum": [5, 7, 31, 32, 33, 39, 43, 51, 53, 56, 57, 60, 69, 78, 79, 82, 83, 86, 89, 94, 95, 98, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 122, 126, 133, 157, 158, 160, 161, 164, 167, 172, 173, 175, 181, 182, 189, 203, 206, 208, 209, 210, 216, 217, 230, 232, 237, 249, 250, 254, 255, 256, 258, 264, 272, 273, 274, 289, 294, 298, 299, 302, 303, 308, 317, 319, 340, 344, 347, 348, 350, 351, 352, 354, 355, 359, 363, 369, 371, 377, 381, 390, 392, 394, 399, 403, 412, 420, 425, 432, 434, 436, 440, 465, 466, 467, 468, 471, 472, 474, 478, 479, 480, 481, 482, 485], "paramet": [5, 7, 9, 11, 12, 14, 15, 17, 22, 23, 24, 26, 27, 30, 32, 33, 35, 43, 47, 53, 55, 58, 60, 61, 63, 64, 65, 69, 84, 85, 89, 94, 97, 103, 104, 108, 111, 114, 118, 121, 123, 124, 126, 128, 133, 141, 142, 144, 145, 147, 150, 153, 156, 157, 158, 164, 169, 173, 175, 176, 178, 183, 189, 192, 196, 197, 200, 203, 204, 205, 206, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 223, 224, 225, 227, 230, 232, 233, 234, 235, 237, 238, 241, 242, 247, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 277, 278, 281, 282, 284, 287, 288, 289, 290, 294, 298, 300, 301, 302, 303, 311, 313, 317, 318, 320, 321, 323, 325, 326, 328, 331, 334, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 355, 358, 361, 363, 364, 367, 370, 371, 372, 373, 380, 384, 385, 386, 388, 390, 392, 393, 394, 398, 399, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 421, 423, 424, 426, 428, 429, 431, 432, 433, 434, 435, 436, 440, 449, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485], "buffer_length": 5, "unlik": [5, 31, 33, 36, 39, 40, 43, 47, 52, 57, 76, 78, 83, 86, 94, 95, 103, 104, 108, 109, 114, 122, 128, 129, 133, 142, 144, 156, 169, 175, 181, 183, 189, 190, 192, 212, 218, 232, 235, 238, 250, 255, 264, 267, 268, 276, 277, 281, 289, 299, 300, 301, 303, 305, 311, 330, 344, 348, 351, 352, 355, 367, 371, 374, 386, 389, 390, 392, 393, 406, 409, 411, 417, 429, 432, 434, 436, 438, 439, 440, 465, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 484, 485], "third": [5, 7, 23, 24, 27, 29, 31, 33, 54, 55, 60, 69, 74, 75, 76, 83, 85, 86, 94, 95, 99, 100, 103, 104, 108, 109, 111, 114, 116, 118, 123, 133, 138, 139, 164, 173, 182, 183, 187, 189, 190, 192, 197, 232, 234, 235, 259, 267, 273, 274, 299, 305, 308, 313, 325, 336, 338, 344, 347, 348, 350, 351, 359, 360, 374, 384, 385, 390, 392, 394, 399, 403, 404, 406, 423, 430, 432, 436, 453, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485], "integ": [5, 7, 9, 14, 18, 23, 24, 33, 37, 39, 40, 43, 45, 47, 53, 60, 61, 63, 65, 69, 82, 83, 85, 86, 94, 100, 102, 104, 107, 109, 110, 111, 112, 114, 115, 120, 121, 123, 126, 128, 129, 133, 139, 145, 147, 156, 157, 161, 164, 172, 173, 179, 182, 183, 184, 189, 192, 200, 210, 218, 219, 220, 222, 225, 228, 230, 232, 234, 240, 241, 250, 252, 255, 257, 258, 260, 262, 264, 268, 272, 273, 274, 275, 276, 281, 284, 287, 289, 294, 295, 298, 299, 300, 305, 310, 311, 313, 314, 316, 320, 324, 325, 326, 327, 328, 334, 335, 338, 344, 345, 346, 347, 348, 352, 354, 355, 356, 359, 366, 367, 370, 371, 374, 381, 388, 391, 393, 398, 402, 404, 405, 409, 412, 414, 415, 417, 423, 426, 428, 431, 432, 434, 440, 445, 447, 455, 459, 460, 466, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "referenc": [5, 7, 12, 33, 57, 60, 64, 83, 85, 95, 108, 111, 120, 126, 144, 173, 185, 197, 233, 254, 261, 289, 299, 305, 325, 351, 358, 406, 414, 432, 465, 467, 468, 469, 472, 473, 474, 478, 485], "output": [5, 9, 15, 18, 31, 32, 40, 56, 60, 61, 63, 65, 69, 70, 83, 85, 86, 99, 102, 104, 106, 108, 111, 112, 114, 116, 118, 120, 123, 126, 129, 133, 139, 142, 144, 145, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 164, 169, 170, 173, 175, 181, 182, 183, 189, 193, 196, 197, 200, 202, 207, 208, 209, 211, 215, 216, 217, 225, 226, 230, 232, 235, 241, 242, 243, 247, 249, 251, 252, 253, 255, 261, 262, 264, 267, 268, 273, 275, 276, 281, 285, 289, 294, 298, 299, 301, 305, 306, 307, 308, 311, 313, 314, 315, 317, 319, 320, 323, 325, 328, 331, 334, 337, 339, 340, 342, 344, 345, 348, 351, 352, 355, 359, 360, 362, 363, 364, 366, 367, 369, 371, 372, 373, 383, 384, 385, 386, 390, 392, 399, 401, 402, 403, 404, 405, 406, 411, 415, 417, 421, 425, 426, 428, 432, 439, 440, 449, 453, 454, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "there": [5, 7, 9, 14, 18, 22, 23, 29, 31, 32, 33, 34, 36, 37, 39, 40, 43, 44, 47, 52, 55, 56, 57, 60, 61, 63, 64, 65, 69, 70, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 126, 128, 133, 138, 139, 142, 144, 145, 149, 150, 153, 158, 160, 161, 162, 163, 164, 165, 169, 172, 173, 175, 176, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 203, 204, 206, 207, 208, 210, 212, 214, 215, 216, 217, 218, 220, 222, 223, 225, 232, 233, 234, 235, 237, 239, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 271, 272, 273, 274, 275, 277, 281, 284, 287, 289, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 310, 311, 312, 313, 314, 319, 320, 323, 324, 325, 330, 331, 334, 336, 337, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 363, 364, 367, 369, 370, 371, 372, 373, 374, 380, 381, 383, 388, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 411, 412, 413, 414, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "mode": [5, 24, 31, 32, 33, 39, 40, 56, 61, 63, 65, 74, 75, 83, 94, 95, 102, 108, 109, 110, 111, 114, 116, 118, 123, 124, 125, 126, 128, 132, 144, 148, 150, 156, 158, 164, 169, 173, 180, 182, 183, 184, 190, 193, 195, 196, 197, 200, 207, 214, 220, 221, 225, 229, 230, 232, 235, 241, 245, 252, 254, 257, 258, 259, 260, 264, 272, 273, 275, 276, 277, 281, 288, 294, 295, 296, 298, 301, 302, 305, 307, 311, 312, 315, 317, 324, 325, 326, 328, 329, 337, 338, 340, 341, 342, 344, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 363, 365, 367, 381, 383, 386, 388, 390, 392, 401, 405, 407, 417, 419, 425, 426, 428, 429, 432, 440, 441, 450, 452, 460, 462, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 483, 484, 485], "oper": [5, 7, 16, 23, 24, 31, 33, 35, 39, 40, 45, 47, 51, 56, 60, 61, 63, 65, 70, 74, 75, 76, 78, 79, 82, 83, 85, 86, 87, 94, 97, 100, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 124, 125, 128, 133, 139, 144, 145, 147, 148, 150, 151, 154, 158, 161, 167, 172, 173, 174, 175, 179, 181, 182, 183, 188, 189, 190, 192, 194, 197, 201, 202, 203, 207, 208, 209, 212, 214, 215, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 231, 232, 234, 237, 249, 252, 254, 258, 260, 262, 264, 267, 272, 273, 275, 276, 277, 281, 282, 289, 296, 300, 301, 305, 312, 314, 315, 319, 320, 326, 328, 334, 336, 337, 339, 341, 342, 344, 347, 349, 350, 354, 355, 359, 363, 364, 366, 367, 368, 370, 374, 381, 383, 388, 389, 390, 394, 398, 399, 403, 404, 406, 407, 408, 409, 411, 413, 414, 415, 417, 420, 423, 426, 429, 431, 432, 433, 435, 436, 437, 438, 440, 446, 450, 453, 459, 465, 466, 467, 469, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486], "usag": [5, 31, 32, 60, 61, 64, 65, 69, 72, 78, 82, 83, 86, 94, 95, 99, 104, 108, 109, 110, 111, 114, 116, 118, 122, 124, 145, 146, 149, 156, 160, 175, 184, 188, 191, 193, 194, 201, 218, 220, 225, 235, 237, 241, 250, 252, 255, 257, 258, 259, 260, 262, 265, 270, 273, 275, 278, 286, 289, 298, 299, 303, 305, 311, 313, 321, 325, 338, 351, 352, 359, 367, 372, 373, 380, 386, 390, 392, 395, 399, 402, 403, 404, 407, 411, 414, 415, 425, 428, 429, 431, 432, 453, 459, 460, 465, 468, 469, 470, 471, 472, 473, 476, 477, 480, 481, 485], "non": [5, 7, 9, 11, 12, 18, 22, 23, 27, 29, 32, 33, 34, 36, 37, 40, 43, 47, 55, 56, 57, 58, 60, 61, 65, 69, 70, 72, 76, 78, 81, 83, 85, 86, 94, 95, 100, 102, 103, 104, 106, 108, 109, 114, 115, 121, 122, 126, 128, 132, 133, 138, 139, 144, 145, 149, 150, 153, 156, 158, 162, 164, 172, 173, 181, 182, 183, 184, 187, 189, 190, 192, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 230, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 249, 250, 252, 254, 255, 257, 258, 264, 265, 267, 271, 272, 273, 274, 275, 279, 281, 282, 284, 289, 291, 292, 294, 298, 299, 300, 301, 302, 303, 305, 308, 311, 312, 314, 317, 320, 322, 323, 325, 326, 328, 334, 337, 339, 340, 342, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 359, 360, 363, 364, 367, 369, 370, 371, 382, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 405, 407, 419, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 444, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "alreadi": [5, 7, 9, 23, 24, 27, 29, 31, 32, 36, 40, 47, 51, 57, 60, 61, 63, 65, 69, 70, 76, 83, 85, 86, 87, 94, 95, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 116, 118, 122, 126, 128, 133, 135, 139, 145, 152, 158, 169, 172, 173, 175, 182, 187, 189, 190, 195, 196, 203, 206, 207, 212, 215, 217, 218, 219, 220, 225, 230, 234, 239, 249, 250, 254, 255, 257, 258, 261, 264, 267, 273, 274, 276, 277, 282, 287, 288, 289, 290, 298, 299, 302, 305, 308, 311, 313, 314, 325, 326, 327, 334, 335, 338, 339, 341, 344, 347, 348, 350, 351, 355, 359, 361, 363, 364, 367, 370, 374, 381, 388, 392, 393, 394, 398, 401, 403, 404, 407, 409, 414, 415, 417, 421, 425, 431, 432, 434, 436, 440, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "locat": [5, 7, 31, 33, 46, 55, 61, 65, 69, 70, 78, 82, 87, 94, 95, 102, 103, 106, 108, 109, 111, 115, 118, 128, 147, 154, 164, 169, 173, 182, 183, 189, 190, 200, 217, 218, 220, 232, 234, 250, 254, 258, 259, 260, 264, 272, 274, 275, 279, 282, 286, 289, 292, 299, 300, 303, 305, 306, 308, 317, 318, 319, 320, 325, 326, 338, 347, 348, 350, 360, 367, 371, 380, 388, 392, 398, 399, 403, 404, 411, 413, 414, 417, 418, 419, 426, 429, 430, 431, 432, 436, 440, 457, 459, 465, 466, 468, 469, 470, 471, 472, 473, 476, 477, 479, 481, 483, 485], "interpret": [5, 7, 16, 23, 24, 27, 29, 30, 32, 33, 37, 40, 43, 45, 47, 49, 50, 55, 56, 60, 61, 63, 65, 69, 78, 82, 83, 85, 86, 89, 95, 97, 100, 103, 104, 106, 108, 109, 110, 111, 114, 116, 118, 120, 121, 126, 128, 133, 146, 151, 157, 158, 159, 169, 172, 173, 181, 182, 183, 188, 189, 190, 192, 196, 197, 198, 200, 204, 210, 214, 216, 217, 220, 226, 229, 232, 234, 242, 252, 254, 255, 257, 258, 260, 264, 265, 267, 268, 269, 273, 274, 284, 287, 289, 298, 299, 300, 302, 303, 305, 312, 313, 314, 315, 316, 317, 319, 320, 321, 325, 326, 330, 334, 336, 337, 339, 340, 342, 344, 347, 348, 351, 352, 355, 359, 360, 366, 367, 370, 371, 374, 377, 380, 381, 385, 390, 392, 393, 399, 403, 404, 406, 407, 410, 414, 417, 428, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 446, 459, 460, 465, 466, 467, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "then": [5, 7, 15, 18, 23, 25, 27, 29, 31, 32, 33, 40, 41, 45, 47, 49, 54, 56, 58, 60, 61, 63, 69, 70, 71, 72, 73, 76, 78, 79, 82, 83, 85, 86, 89, 94, 95, 98, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 126, 128, 129, 133, 138, 139, 144, 145, 150, 158, 161, 163, 164, 167, 169, 172, 175, 182, 183, 187, 189, 190, 192, 195, 196, 197, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 232, 233, 234, 235, 237, 238, 242, 243, 247, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 277, 278, 281, 282, 284, 287, 289, 290, 294, 295, 298, 299, 300, 302, 303, 304, 305, 308, 313, 314, 315, 319, 320, 325, 328, 330, 331, 334, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 362, 363, 367, 369, 370, 371, 372, 374, 376, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 409, 411, 412, 414, 417, 418, 419, 424, 425, 426, 428, 430, 431, 432, 434, 436, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "larg": [5, 7, 18, 33, 52, 55, 56, 60, 65, 69, 82, 94, 102, 103, 104, 107, 109, 110, 111, 112, 114, 115, 128, 142, 145, 164, 172, 182, 183, 189, 190, 192, 194, 196, 200, 219, 220, 229, 238, 254, 255, 264, 265, 268, 281, 289, 294, 298, 299, 301, 302, 305, 339, 350, 351, 352, 353, 355, 363, 386, 392, 395, 406, 413, 414, 415, 417, 426, 429, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 483, 485], "enough": [5, 40, 43, 56, 60, 61, 73, 78, 79, 94, 95, 100, 102, 103, 107, 108, 109, 110, 112, 164, 181, 182, 189, 196, 206, 208, 254, 258, 264, 271, 276, 298, 299, 305, 314, 344, 346, 348, 351, 352, 355, 367, 369, 372, 374, 389, 393, 406, 466, 467, 468, 469, 474, 478, 485], "both": [5, 7, 15, 18, 23, 24, 31, 33, 43, 47, 52, 60, 61, 69, 70, 76, 78, 82, 83, 85, 86, 87, 94, 95, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 126, 128, 133, 139, 142, 144, 145, 147, 149, 157, 158, 161, 164, 165, 167, 172, 173, 175, 181, 182, 183, 187, 189, 192, 196, 197, 199, 200, 201, 202, 203, 207, 208, 209, 210, 212, 213, 214, 217, 218, 222, 223, 227, 232, 233, 237, 239, 240, 242, 245, 250, 251, 252, 254, 257, 258, 261, 264, 265, 272, 273, 276, 281, 284, 287, 288, 289, 290, 293, 295, 298, 299, 300, 301, 302, 303, 305, 308, 310, 311, 314, 315, 325, 326, 328, 330, 335, 336, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 360, 366, 367, 369, 371, 372, 374, 381, 383, 384, 386, 388, 390, 392, 393, 394, 398, 399, 404, 406, 409, 411, 415, 417, 421, 423, 425, 429, 430, 431, 432, 433, 434, 436, 439, 440, 446, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "trail": [5, 18, 31, 32, 61, 69, 78, 88, 100, 102, 104, 111, 149, 152, 163, 164, 165, 173, 183, 192, 196, 203, 212, 215, 228, 230, 232, 235, 246, 247, 254, 277, 300, 320, 344, 348, 351, 352, 355, 361, 371, 374, 385, 393, 399, 411, 414, 428, 431, 432, 434, 435, 439, 440, 446, 455, 459, 466, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485], "unsign": [5, 7, 9, 29, 31, 32, 33, 37, 40, 55, 58, 60, 61, 85, 100, 127, 147, 152, 182, 299, 301, 305, 344, 351, 354, 356, 412, 414, 415, 428, 456, 468, 469, 471, 476, 478, 482, 485], "nonneg": [5, 156, 192, 276, 281, 344, 351, 388, 434, 440], "tini": [5, 94, 95, 187, 466, 472, 473, 485], "overflow": [5, 23, 33, 37, 40, 65, 147, 182, 189, 192, 194, 219, 221, 281, 289, 296, 359, 432, 460, 470, 472, 473, 481, 482, 485], "short": [5, 7, 39, 40, 55, 60, 65, 69, 73, 78, 83, 85, 94, 100, 104, 109, 111, 112, 120, 126, 127, 149, 165, 182, 183, 200, 218, 235, 252, 264, 265, 277, 289, 295, 298, 299, 306, 337, 351, 354, 355, 359, 367, 371, 372, 374, 388, 390, 392, 415, 417, 425, 438, 446, 459, 466, 468, 469, 471, 473, 476, 477, 478, 479, 481, 482, 484, 485], "long": [5, 6, 9, 22, 23, 29, 31, 32, 33, 37, 39, 43, 55, 56, 58, 60, 61, 63, 65, 69, 72, 73, 78, 83, 85, 94, 95, 99, 100, 104, 106, 108, 109, 110, 111, 112, 115, 118, 126, 127, 133, 144, 149, 152, 153, 172, 173, 175, 182, 183, 196, 200, 209, 215, 219, 222, 230, 232, 233, 234, 235, 249, 252, 254, 255, 264, 265, 267, 273, 274, 289, 298, 299, 305, 309, 311, 312, 313, 314, 325, 327, 334, 336, 339, 342, 344, 345, 347, 348, 351, 354, 359, 363, 367, 369, 370, 371, 372, 373, 374, 380, 381, 385, 399, 403, 404, 409, 411, 414, 415, 429, 430, 431, 432, 434, 439, 459, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "repres": [5, 7, 8, 9, 11, 13, 15, 17, 18, 20, 22, 25, 26, 31, 33, 34, 36, 37, 40, 43, 45, 52, 55, 57, 60, 61, 63, 65, 69, 74, 78, 83, 87, 94, 95, 98, 100, 102, 104, 107, 109, 110, 111, 114, 115, 116, 126, 128, 133, 139, 144, 150, 152, 157, 158, 160, 161, 164, 172, 173, 182, 183, 189, 192, 201, 204, 206, 208, 210, 213, 215, 216, 218, 220, 222, 228, 230, 232, 239, 249, 250, 251, 255, 258, 259, 261, 264, 265, 268, 272, 273, 274, 276, 277, 278, 281, 282, 287, 288, 289, 291, 292, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 320, 325, 327, 328, 331, 334, 338, 339, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 363, 364, 367, 370, 371, 374, 377, 380, 381, 382, 385, 388, 390, 392, 393, 394, 401, 402, 404, 406, 409, 414, 415, 416, 417, 419, 420, 423, 424, 425, 426, 428, 429, 431, 432, 434, 436, 439, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "float": [5, 16, 18, 39, 40, 45, 55, 60, 65, 86, 88, 94, 95, 97, 100, 103, 110, 118, 121, 126, 127, 133, 144, 147, 161, 166, 168, 172, 173, 181, 182, 187, 189, 196, 200, 216, 220, 228, 232, 233, 234, 240, 255, 258, 260, 261, 267, 268, 272, 277, 280, 281, 289, 290, 295, 296, 298, 299, 300, 305, 310, 314, 324, 325, 328, 334, 339, 344, 347, 348, 350, 352, 354, 359, 370, 371, 372, 381, 383, 388, 390, 391, 412, 423, 431, 432, 434, 444, 446, 448, 453, 454, 455, 456, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "doubl": [5, 15, 18, 25, 33, 37, 55, 60, 61, 69, 85, 86, 88, 95, 98, 100, 109, 111, 127, 164, 166, 181, 182, 188, 195, 200, 216, 242, 254, 255, 268, 275, 281, 289, 299, 302, 303, 325, 337, 351, 352, 354, 355, 364, 393, 403, 412, 421, 423, 431, 432, 434, 435, 439, 446, 448, 453, 465, 469, 470, 471, 472, 477, 478, 481, 482, 483, 485], "py_complex": [5, 15, 83, 100], "program": [5, 15, 16, 29, 31, 32, 40, 43, 63, 65, 69, 70, 78, 79, 82, 83, 87, 96, 99, 103, 104, 105, 108, 109, 110, 111, 115, 116, 118, 120, 124, 126, 128, 132, 133, 139, 142, 145, 146, 152, 157, 158, 162, 163, 164, 165, 166, 170, 172, 173, 174, 175, 181, 182, 189, 192, 193, 200, 207, 208, 210, 215, 218, 220, 223, 229, 230, 231, 232, 233, 234, 235, 241, 253, 254, 255, 258, 260, 261, 269, 275, 277, 278, 282, 288, 292, 298, 299, 300, 302, 303, 305, 312, 313, 314, 315, 317, 319, 320, 325, 328, 334, 336, 339, 344, 345, 347, 348, 351, 354, 355, 359, 367, 370, 372, 373, 380, 381, 384, 385, 388, 392, 398, 399, 402, 404, 406, 407, 409, 411, 414, 415, 423, 425, 426, 430, 431, 432, 434, 437, 438, 439, 440, 444, 456, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485], "thus": [5, 7, 31, 33, 36, 40, 51, 69, 70, 73, 76, 78, 83, 94, 95, 100, 108, 109, 110, 116, 123, 126, 128, 145, 146, 173, 175, 182, 183, 200, 208, 211, 212, 215, 218, 220, 232, 235, 242, 250, 258, 259, 265, 268, 272, 273, 274, 275, 281, 289, 298, 299, 305, 319, 325, 333, 337, 338, 340, 344, 347, 348, 351, 355, 359, 367, 371, 388, 390, 392, 398, 399, 403, 409, 411, 425, 429, 431, 434, 436, 439, 440, 459, 465, 466, 474, 477, 478, 479, 480, 481, 483, 485], "receiv": [5, 16, 23, 31, 33, 43, 47, 64, 65, 82, 83, 86, 94, 100, 104, 108, 110, 112, 115, 120, 121, 129, 133, 138, 139, 141, 145, 158, 162, 164, 173, 182, 196, 220, 230, 232, 242, 247, 249, 250, 251, 252, 254, 255, 265, 273, 274, 275, 281, 289, 294, 301, 305, 311, 315, 320, 328, 335, 338, 339, 341, 342, 344, 345, 348, 355, 364, 370, 381, 385, 390, 392, 399, 404, 406, 411, 414, 415, 417, 418, 419, 424, 431, 433, 434, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "actual": [5, 7, 15, 23, 31, 33, 37, 47, 52, 55, 58, 60, 63, 65, 69, 70, 73, 78, 83, 85, 86, 87, 94, 95, 99, 100, 102, 103, 107, 108, 109, 110, 111, 112, 114, 116, 123, 128, 133, 144, 145, 156, 158, 164, 166, 173, 175, 179, 182, 183, 184, 187, 200, 204, 205, 207, 210, 213, 214, 216, 218, 220, 230, 232, 234, 237, 238, 241, 252, 255, 258, 261, 264, 267, 271, 273, 274, 275, 276, 277, 284, 287, 289, 298, 299, 301, 302, 303, 311, 314, 326, 330, 331, 336, 339, 340, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 363, 370, 371, 373, 374, 377, 385, 390, 392, 393, 394, 399, 403, 405, 406, 409, 411, 414, 418, 426, 428, 430, 431, 432, 433, 436, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "increas": [5, 65, 86, 99, 100, 107, 108, 114, 126, 164, 196, 197, 218, 254, 261, 265, 273, 276, 296, 299, 334, 348, 351, 359, 372, 381, 386, 388, 392, 404, 416, 418, 428, 439, 466, 468, 469, 472, 473, 478, 481, 482, 483, 484, 485], "typeobject": [5, 103, 468, 485], "similar": [5, 7, 13, 22, 23, 27, 29, 31, 43, 47, 49, 54, 55, 56, 60, 61, 63, 64, 69, 70, 78, 82, 83, 85, 89, 94, 95, 98, 99, 100, 103, 104, 108, 109, 110, 111, 114, 115, 116, 118, 122, 126, 133, 139, 142, 144, 149, 152, 157, 158, 161, 163, 164, 169, 172, 173, 175, 181, 182, 183, 186, 187, 189, 190, 192, 194, 196, 200, 202, 203, 212, 214, 218, 220, 227, 232, 233, 235, 237, 240, 242, 243, 247, 249, 250, 252, 254, 258, 259, 261, 264, 265, 267, 272, 274, 276, 277, 282, 288, 289, 295, 298, 299, 302, 303, 305, 307, 308, 311, 314, 316, 319, 325, 327, 337, 338, 342, 344, 345, 346, 347, 348, 351, 352, 354, 355, 359, 360, 363, 369, 370, 371, 372, 374, 380, 385, 386, 390, 392, 394, 398, 406, 411, 412, 413, 414, 415, 417, 418, 421, 423, 426, 428, 429, 431, 432, 434, 436, 439, 440, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "take": [5, 9, 23, 31, 33, 47, 55, 57, 60, 61, 63, 69, 72, 73, 74, 76, 78, 79, 81, 83, 85, 86, 89, 94, 95, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 126, 128, 129, 133, 144, 145, 147, 150, 157, 158, 159, 164, 173, 175, 181, 182, 183, 184, 187, 192, 193, 196, 197, 200, 201, 205, 208, 209, 210, 213, 214, 215, 216, 222, 225, 230, 232, 233, 234, 237, 239, 242, 250, 251, 252, 254, 256, 258, 259, 264, 267, 268, 272, 273, 274, 276, 277, 281, 282, 289, 294, 298, 299, 302, 305, 306, 313, 314, 325, 330, 331, 333, 334, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 360, 363, 366, 367, 369, 372, 374, 380, 381, 386, 388, 389, 390, 392, 393, 394, 398, 399, 404, 411, 412, 414, 415, 416, 417, 419, 421, 423, 425, 426, 428, 431, 432, 434, 436, 440, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "anyth": [5, 33, 39, 60, 65, 69, 71, 72, 74, 78, 79, 82, 83, 86, 95, 102, 104, 108, 109, 111, 112, 114, 116, 120, 126, 142, 145, 158, 182, 183, 184, 187, 189, 192, 200, 203, 210, 218, 255, 258, 264, 273, 275, 289, 298, 303, 307, 316, 325, 329, 336, 340, 342, 348, 352, 355, 359, 367, 370, 374, 381, 390, 393, 405, 409, 411, 417, 425, 431, 432, 434, 436, 445, 465, 467, 468, 471, 472, 476, 478, 479, 483, 485], "arbitrari": [5, 23, 31, 33, 35, 37, 43, 46, 49, 52, 56, 60, 65, 76, 82, 84, 86, 94, 95, 98, 100, 104, 109, 111, 112, 114, 115, 116, 121, 126, 129, 139, 149, 158, 164, 165, 175, 181, 182, 185, 189, 192, 197, 210, 215, 218, 232, 237, 238, 240, 241, 247, 252, 255, 257, 258, 259, 261, 264, 265, 268, 273, 274, 277, 281, 289, 293, 296, 299, 300, 301, 302, 303, 305, 313, 316, 319, 325, 328, 334, 336, 339, 340, 341, 344, 345, 346, 350, 351, 352, 357, 367, 370, 371, 374, 388, 390, 392, 393, 394, 401, 414, 417, 423, 424, 425, 432, 449, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "turn": [5, 23, 31, 32, 33, 55, 60, 70, 79, 83, 95, 98, 99, 100, 102, 103, 104, 108, 110, 111, 114, 115, 116, 118, 120, 126, 128, 162, 164, 173, 182, 183, 196, 200, 201, 215, 216, 232, 250, 252, 254, 261, 272, 273, 289, 298, 302, 304, 307, 317, 322, 326, 334, 339, 342, 344, 359, 366, 367, 370, 372, 374, 388, 390, 392, 394, 399, 404, 424, 428, 431, 436, 438, 439, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 485], "status": [5, 31, 32, 47, 56, 60, 65, 69, 78, 83, 94, 102, 108, 109, 115, 120, 121, 122, 126, 150, 183, 203, 212, 214, 220, 221, 249, 252, 254, 255, 262, 277, 289, 294, 298, 299, 311, 313, 315, 317, 340, 345, 347, 348, 355, 359, 381, 399, 411, 445, 452, 466, 470, 471, 473, 474, 476, 477, 479, 480, 481, 482, 484, 485], "where": [5, 23, 24, 31, 32, 33, 36, 38, 40, 43, 45, 47, 51, 53, 54, 55, 56, 60, 61, 63, 65, 69, 72, 73, 76, 78, 79, 83, 85, 86, 87, 88, 89, 94, 95, 98, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 114, 115, 116, 118, 119, 120, 126, 128, 133, 139, 144, 145, 147, 150, 157, 158, 159, 160, 161, 164, 169, 173, 175, 181, 182, 183, 187, 189, 192, 193, 194, 196, 197, 200, 203, 206, 208, 209, 210, 212, 215, 217, 218, 220, 222, 228, 230, 232, 233, 237, 239, 242, 243, 247, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 308, 311, 312, 314, 316, 318, 319, 320, 323, 325, 330, 334, 337, 338, 341, 342, 344, 345, 347, 348, 350, 351, 352, 359, 364, 366, 367, 370, 371, 372, 374, 376, 381, 383, 384, 385, 386, 388, 389, 390, 392, 394, 398, 399, 402, 403, 404, 406, 411, 414, 415, 416, 417, 419, 420, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "success": [5, 7, 9, 11, 12, 14, 17, 18, 22, 23, 24, 29, 31, 32, 33, 36, 38, 40, 43, 45, 46, 47, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 65, 69, 81, 83, 85, 86, 87, 89, 90, 95, 98, 100, 102, 104, 106, 108, 111, 112, 115, 120, 121, 128, 133, 138, 139, 144, 145, 165, 169, 170, 172, 173, 175, 182, 183, 200, 216, 222, 230, 232, 234, 249, 252, 255, 257, 258, 267, 272, 275, 284, 289, 294, 298, 299, 301, 302, 305, 306, 311, 320, 325, 338, 342, 344, 347, 348, 350, 351, 354, 355, 359, 370, 380, 381, 392, 399, 411, 414, 427, 431, 432, 436, 440, 457, 466, 469, 470, 473, 476, 477, 479, 480, 481, 483, 485], "has": [5, 7, 8, 9, 11, 15, 16, 17, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 38, 40, 41, 43, 44, 45, 47, 49, 50, 53, 55, 56, 58, 60, 61, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 133, 135, 138, 139, 140, 142, 144, 145, 146, 147, 150, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 172, 173, 175, 176, 181, 182, 183, 184, 187, 189, 190, 192, 194, 196, 197, 200, 201, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 242, 243, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 287, 289, 290, 292, 294, 298, 299, 300, 301, 302, 303, 305, 310, 311, 314, 317, 318, 319, 320, 324, 325, 326, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 379, 380, 381, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 417, 419, 420, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 447, 450, 453, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "leav": [5, 23, 29, 33, 54, 57, 61, 63, 69, 85, 86, 100, 102, 104, 109, 114, 126, 133, 146, 173, 175, 183, 190, 192, 194, 197, 200, 203, 212, 220, 233, 242, 250, 254, 257, 258, 275, 277, 281, 289, 290, 298, 299, 323, 347, 348, 367, 370, 374, 388, 392, 409, 425, 431, 436, 438, 440, 446, 460, 466, 468, 469, 470, 471, 473, 478, 481, 485], "unmodifi": [5, 7, 100, 121, 215, 216, 313, 351, 370, 398, 421, 485], "py_cleanup_support": 5, "eventu": [5, 31, 33, 83, 86, 89, 94, 100, 111, 112, 139, 144, 200, 239, 249, 254, 289, 315, 372, 399, 415, 423, 436, 439, 467, 468, 470, 471, 472, 473, 474, 479, 481, 485], "give": [5, 7, 14, 23, 29, 33, 40, 46, 60, 61, 69, 70, 78, 82, 83, 85, 87, 89, 94, 95, 99, 100, 102, 103, 104, 110, 111, 112, 113, 114, 123, 126, 128, 147, 158, 160, 161, 162, 164, 182, 183, 187, 189, 192, 196, 197, 200, 215, 218, 220, 223, 230, 232, 235, 237, 258, 264, 274, 275, 281, 282, 284, 285, 289, 292, 293, 298, 299, 300, 302, 303, 305, 313, 320, 325, 338, 339, 345, 348, 350, 351, 352, 355, 359, 370, 371, 372, 374, 381, 388, 390, 392, 394, 398, 403, 407, 409, 411, 413, 414, 415, 419, 426, 431, 432, 438, 439, 441, 448, 459, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485], "chanc": [5, 33, 56, 85, 108, 109, 110, 112, 144, 146, 189, 295, 341, 370, 471, 483, 485], "had": [5, 22, 31, 40, 69, 70, 82, 86, 95, 99, 100, 104, 109, 112, 118, 126, 128, 146, 162, 164, 175, 176, 183, 189, 192, 197, 206, 220, 243, 250, 261, 289, 299, 303, 320, 334, 344, 348, 350, 352, 374, 384, 386, 390, 392, 393, 398, 414, 436, 440, 445, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "origin": [5, 7, 9, 14, 31, 32, 40, 41, 57, 59, 60, 64, 65, 69, 70, 83, 95, 100, 102, 108, 111, 113, 114, 118, 126, 128, 145, 147, 150, 156, 159, 161, 164, 172, 173, 175, 179, 181, 182, 183, 187, 192, 194, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 220, 232, 233, 237, 241, 250, 254, 257, 258, 261, 264, 267, 268, 272, 273, 275, 277, 281, 286, 289, 290, 298, 299, 302, 303, 305, 314, 318, 325, 330, 334, 337, 338, 341, 344, 348, 351, 352, 355, 359, 363, 367, 370, 371, 374, 385, 386, 388, 390, 392, 393, 394, 398, 399, 403, 404, 406, 411, 412, 417, 419, 420, 421, 425, 427, 428, 429, 430, 431, 432, 434, 436, 438, 440, 444, 445, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485], "bool": [5, 65, 100, 102, 126, 133, 173, 174, 182, 187, 189, 218, 232, 233, 260, 267, 268, 290, 295, 297, 347, 351, 354, 386, 392, 414, 423, 431, 432, 434, 444, 454, 469, 472, 476, 482, 483, 485], "test": [5, 23, 33, 44, 54, 55, 58, 65, 69, 76, 78, 79, 83, 88, 89, 94, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 120, 122, 126, 128, 132, 161, 162, 167, 172, 176, 182, 183, 184, 187, 192, 193, 195, 197, 201, 207, 218, 220, 227, 232, 233, 235, 243, 247, 252, 254, 255, 256, 257, 258, 259, 260, 261, 265, 268, 270, 272, 275, 278, 281, 289, 299, 303, 311, 315, 321, 325, 342, 347, 349, 350, 351, 357, 359, 363, 369, 370, 372, 380, 381, 386, 393, 399, 406, 411, 417, 423, 426, 429, 430, 431, 432, 438, 444, 446, 450, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484], "truth": [5, 65, 69, 99, 104, 112, 182, 231, 297, 351, 354, 432, 434, 469, 485], "boolean": [5, 16, 33, 65, 69, 78, 95, 100, 108, 113, 126, 128, 143, 173, 174, 182, 183, 188, 189, 197, 200, 232, 242, 243, 250, 252, 255, 258, 260, 268, 274, 280, 289, 297, 299, 301, 310, 325, 326, 344, 345, 348, 357, 370, 374, 381, 388, 390, 393, 399, 403, 406, 414, 415, 423, 428, 431, 432, 437, 467, 470, 471, 472, 473, 474, 477, 479, 480, 481, 483, 484, 485, 486], "redic": 5, "equival": [5, 7, 9, 18, 22, 23, 24, 31, 33, 36, 38, 40, 43, 45, 47, 51, 52, 55, 57, 59, 60, 61, 65, 69, 78, 83, 86, 88, 100, 104, 106, 110, 111, 116, 118, 121, 122, 123, 126, 128, 139, 142, 144, 156, 161, 164, 169, 172, 173, 175, 182, 183, 184, 187, 189, 192, 196, 203, 211, 212, 214, 218, 220, 232, 233, 235, 237, 239, 241, 242, 243, 246, 247, 250, 251, 252, 254, 258, 259, 261, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 289, 292, 298, 299, 300, 302, 305, 306, 307, 308, 312, 314, 325, 327, 330, 335, 344, 345, 350, 351, 352, 355, 359, 360, 363, 367, 370, 371, 374, 388, 389, 390, 391, 392, 398, 405, 407, 409, 414, 426, 428, 431, 432, 434, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "true": [5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 20, 22, 23, 25, 26, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 47, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 76, 78, 83, 86, 88, 94, 95, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 113, 114, 116, 118, 120, 121, 122, 126, 128, 129, 132, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 149, 150, 152, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 187, 189, 192, 194, 195, 196, 197, 200, 203, 205, 207, 208, 210, 211, 212, 214, 215, 216, 218, 220, 221, 222, 223, 225, 227, 230, 232, 233, 234, 235, 237, 238, 239, 242, 243, 245, 247, 248, 249, 250, 255, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 272, 273, 274, 275, 276, 277, 281, 282, 284, 288, 289, 290, 294, 297, 298, 299, 300, 301, 302, 303, 305, 307, 309, 310, 313, 314, 317, 318, 320, 322, 323, 325, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 355, 358, 359, 360, 362, 363, 365, 367, 369, 370, 371, 374, 377, 378, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 400, 401, 403, 404, 406, 407, 409, 411, 414, 415, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 431, 432, 434, 435, 439, 440, 444, 445, 446, 447, 448, 450, 452, 453, 454, 456, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "fals": [5, 6, 7, 11, 22, 31, 32, 33, 45, 47, 55, 60, 61, 63, 65, 69, 83, 94, 95, 97, 99, 100, 102, 104, 107, 108, 109, 110, 112, 113, 114, 115, 120, 121, 122, 126, 128, 129, 133, 135, 138, 139, 140, 141, 143, 144, 145, 149, 150, 152, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 169, 172, 173, 174, 175, 176, 181, 182, 183, 185, 187, 189, 192, 194, 196, 197, 200, 203, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 232, 233, 234, 235, 237, 238, 239, 242, 243, 249, 250, 252, 255, 257, 258, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 281, 282, 289, 290, 294, 297, 298, 299, 300, 301, 302, 303, 305, 310, 313, 317, 318, 320, 322, 323, 326, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 351, 354, 355, 359, 360, 363, 365, 367, 369, 370, 371, 374, 377, 378, 381, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 400, 401, 403, 404, 406, 407, 411, 417, 419, 421, 423, 424, 425, 426, 429, 431, 432, 434, 435, 439, 440, 444, 445, 446, 447, 448, 453, 454, 456, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "express": [5, 22, 38, 45, 47, 51, 57, 63, 65, 78, 83, 95, 97, 103, 109, 120, 126, 144, 150, 161, 165, 167, 169, 173, 189, 192, 196, 197, 200, 220, 227, 232, 237, 238, 254, 260, 261, 265, 267, 270, 272, 274, 281, 289, 299, 303, 314, 329, 339, 344, 348, 351, 352, 354, 359, 364, 367, 368, 371, 372, 374, 383, 384, 389, 390, 391, 392, 394, 402, 404, 406, 417, 423, 430, 431, 432, 433, 435, 436, 437, 439, 443, 446, 450, 451, 453, 455, 459, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486], "see": [5, 7, 11, 14, 18, 23, 29, 31, 32, 33, 38, 40, 43, 45, 54, 55, 56, 58, 59, 60, 61, 63, 65, 69, 70, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 125, 126, 132, 133, 138, 139, 142, 144, 147, 150, 151, 153, 157, 158, 162, 164, 167, 169, 173, 174, 175, 178, 179, 181, 182, 183, 187, 189, 192, 194, 196, 197, 199, 200, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 218, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 234, 237, 240, 241, 242, 243, 246, 249, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 278, 281, 284, 285, 287, 289, 294, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 314, 316, 317, 319, 320, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 380, 381, 384, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "how": [5, 7, 11, 31, 33, 40, 55, 59, 60, 61, 65, 69, 70, 73, 74, 78, 79, 82, 83, 85, 86, 87, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 123, 126, 128, 129, 133, 138, 139, 142, 144, 146, 147, 150, 154, 156, 158, 162, 164, 169, 173, 178, 181, 182, 183, 187, 188, 189, 190, 192, 193, 195, 196, 201, 202, 207, 208, 209, 214, 220, 225, 229, 230, 232, 234, 237, 238, 241, 242, 249, 250, 251, 254, 258, 261, 264, 265, 267, 268, 273, 274, 275, 278, 281, 284, 289, 290, 294, 299, 300, 302, 304, 305, 314, 317, 325, 326, 327, 328, 337, 338, 339, 344, 345, 348, 351, 352, 353, 355, 357, 359, 363, 369, 370, 371, 372, 373, 381, 384, 386, 390, 392, 393, 394, 398, 399, 403, 406, 411, 412, 414, 423, 425, 429, 431, 432, 433, 434, 436, 439, 440, 441, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "item": [5, 7, 14, 22, 23, 29, 31, 32, 33, 34, 35, 36, 38, 51, 54, 57, 60, 65, 83, 86, 89, 94, 97, 100, 104, 109, 110, 113, 118, 126, 128, 140, 145, 147, 154, 157, 158, 163, 164, 166, 167, 170, 173, 176, 177, 182, 187, 188, 190, 195, 196, 197, 200, 201, 203, 204, 207, 212, 216, 218, 220, 224, 230, 232, 233, 234, 239, 240, 241, 242, 243, 251, 254, 255, 257, 258, 267, 268, 273, 274, 275, 277, 279, 281, 282, 285, 289, 291, 294, 297, 299, 305, 308, 312, 313, 314, 316, 319, 322, 325, 326, 330, 338, 340, 344, 346, 347, 348, 351, 352, 354, 355, 359, 364, 366, 367, 370, 373, 374, 380, 383, 385, 388, 389, 390, 393, 398, 406, 409, 411, 412, 413, 414, 416, 417, 420, 423, 426, 427, 431, 432, 434, 435, 436, 438, 439, 440, 444, 445, 446, 450, 453, 454, 456, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485], "individu": [5, 40, 43, 55, 58, 60, 65, 70, 73, 75, 102, 107, 108, 109, 111, 116, 118, 123, 164, 181, 183, 190, 192, 196, 197, 200, 203, 205, 210, 213, 218, 226, 237, 255, 256, 261, 267, 273, 277, 287, 288, 289, 299, 300, 319, 325, 338, 351, 352, 361, 364, 367, 369, 371, 372, 374, 381, 388, 392, 393, 394, 398, 402, 404, 412, 417, 423, 424, 426, 430, 432, 436, 438, 440, 444, 459, 467, 470, 471, 473, 475, 476, 478, 479, 484, 485], "nest": [5, 65, 83, 95, 97, 104, 108, 111, 119, 144, 166, 175, 182, 187, 192, 193, 196, 197, 200, 206, 218, 233, 261, 267, 268, 273, 277, 289, 303, 308, 313, 318, 320, 325, 351, 352, 358, 370, 374, 381, 390, 392, 413, 417, 419, 431, 432, 434, 439, 440, 445, 446, 459, 466, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 485, 486], "possibl": [5, 7, 18, 23, 29, 31, 32, 33, 40, 45, 47, 54, 55, 58, 60, 61, 63, 69, 70, 72, 74, 76, 78, 81, 82, 83, 86, 89, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 116, 118, 120, 121, 122, 123, 126, 128, 129, 133, 138, 146, 147, 152, 154, 156, 158, 164, 165, 169, 172, 173, 175, 176, 179, 181, 182, 183, 186, 187, 189, 190, 192, 196, 197, 200, 201, 203, 204, 207, 208, 209, 210, 212, 213, 215, 217, 218, 220, 225, 232, 233, 237, 238, 239, 242, 243, 249, 252, 254, 258, 261, 264, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 288, 289, 294, 295, 298, 299, 300, 301, 302, 303, 305, 308, 310, 314, 315, 317, 318, 320, 325, 326, 334, 337, 338, 339, 344, 347, 348, 350, 351, 352, 353, 355, 358, 359, 361, 362, 363, 364, 367, 369, 370, 371, 372, 374, 380, 381, 386, 388, 389, 390, 392, 393, 394, 398, 399, 402, 404, 406, 407, 409, 410, 411, 417, 419, 420, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "exceed": [5, 56, 133, 144, 172, 173, 192, 219, 220, 232, 234, 264, 275, 290, 299, 305, 313, 328, 351, 369, 370, 414, 426, 428, 469, 470, 472, 473, 481, 482], "platform": [5, 9, 18, 30, 31, 32, 33, 56, 58, 61, 65, 69, 70, 71, 74, 76, 78, 79, 81, 82, 83, 85, 86, 94, 95, 100, 109, 112, 121, 124, 133, 139, 153, 157, 161, 164, 169, 179, 181, 182, 189, 192, 195, 200, 215, 219, 220, 226, 232, 242, 254, 257, 258, 259, 260, 262, 264, 272, 275, 277, 281, 288, 289, 290, 298, 299, 300, 302, 313, 314, 315, 321, 328, 329, 332, 334, 335, 339, 344, 345, 347, 348, 349, 354, 355, 359, 360, 367, 370, 371, 372, 373, 374, 383, 392, 402, 403, 407, 410, 411, 429, 434, 439, 454, 459, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486], "long_max": [5, 37, 485], "proper": [5, 23, 31, 32, 33, 43, 44, 47, 56, 60, 65, 82, 83, 85, 86, 95, 100, 109, 111, 112, 116, 120, 133, 142, 153, 161, 175, 176, 183, 196, 197, 209, 210, 214, 216, 220, 237, 242, 252, 254, 258, 272, 289, 290, 299, 314, 320, 338, 342, 344, 348, 351, 354, 355, 359, 363, 367, 370, 374, 381, 392, 393, 398, 399, 414, 417, 419, 428, 431, 432, 434, 465, 466, 467, 468, 469, 473, 474, 478, 479, 480, 481, 482, 483, 485], "rang": [5, 7, 20, 23, 33, 37, 56, 61, 65, 69, 71, 82, 83, 86, 94, 95, 97, 100, 102, 103, 104, 107, 109, 111, 114, 115, 118, 126, 133, 140, 144, 147, 150, 154, 156, 157, 161, 164, 172, 173, 175, 182, 183, 184, 189, 192, 196, 200, 218, 219, 220, 230, 232, 233, 238, 242, 243, 248, 251, 255, 260, 261, 265, 267, 268, 284, 289, 290, 294, 299, 301, 303, 305, 310, 311, 314, 321, 322, 324, 325, 328, 332, 339, 342, 344, 347, 348, 350, 352, 354, 359, 370, 371, 372, 374, 380, 383, 385, 386, 388, 390, 392, 398, 410, 414, 423, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 444, 446, 449, 450, 453, 454, 455, 456, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "most": [5, 7, 9, 15, 23, 24, 29, 31, 32, 33, 37, 40, 43, 54, 55, 56, 58, 60, 61, 63, 65, 69, 70, 74, 76, 78, 81, 82, 83, 85, 86, 87, 89, 94, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 126, 132, 133, 139, 144, 145, 147, 149, 150, 152, 156, 158, 160, 161, 164, 166, 172, 173, 175, 181, 182, 183, 189, 190, 192, 194, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 214, 217, 218, 220, 221, 222, 228, 230, 232, 233, 234, 237, 240, 241, 242, 243, 247, 250, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 272, 273, 274, 275, 276, 278, 281, 284, 289, 290, 295, 298, 299, 300, 301, 302, 303, 305, 308, 311, 313, 314, 316, 320, 325, 327, 334, 335, 336, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 363, 367, 369, 370, 371, 372, 374, 379, 380, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 399, 404, 405, 406, 407, 410, 411, 412, 414, 415, 417, 418, 419, 420, 425, 426, 428, 429, 431, 432, 434, 436, 438, 440, 444, 445, 446, 447, 450, 453, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "signific": [5, 33, 39, 65, 95, 104, 107, 109, 111, 112, 114, 133, 138, 139, 164, 172, 175, 184, 192, 200, 204, 264, 265, 267, 275, 281, 290, 299, 305, 314, 348, 351, 352, 359, 370, 392, 402, 415, 432, 436, 438, 439, 448, 459, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 480, 481, 482, 483, 484, 485], "silent": [5, 47, 53, 56, 63, 69, 108, 109, 114, 121, 139, 146, 175, 192, 220, 225, 234, 255, 257, 273, 275, 277, 299, 301, 302, 303, 314, 338, 340, 352, 355, 370, 393, 398, 429, 440, 459, 465, 466, 470, 471, 473, 474, 476, 477, 479, 480, 482, 483, 484, 485], "truncat": [5, 18, 56, 61, 65, 94, 95, 124, 147, 148, 156, 183, 189, 192, 220, 232, 241, 255, 264, 267, 276, 299, 326, 344, 347, 351, 354, 365, 367, 369, 386, 401, 426, 428, 432, 434, 450, 466, 468, 472, 473, 474, 477, 478, 479, 480, 482, 485], "too": [5, 18, 33, 60, 63, 73, 85, 94, 100, 102, 104, 108, 109, 111, 114, 115, 116, 122, 139, 144, 153, 158, 161, 164, 172, 173, 175, 182, 190, 192, 194, 197, 200, 201, 211, 218, 219, 220, 234, 237, 250, 264, 265, 289, 298, 311, 313, 338, 339, 344, 345, 347, 348, 351, 352, 354, 355, 359, 364, 367, 370, 374, 388, 392, 393, 394, 413, 417, 426, 427, 428, 432, 436, 438, 455, 459, 466, 467, 468, 469, 470, 472, 473, 474, 478, 480, 482, 483, 485], "small": [5, 31, 40, 52, 55, 60, 65, 76, 78, 83, 94, 95, 100, 102, 107, 109, 111, 112, 114, 128, 164, 175, 182, 191, 192, 196, 200, 250, 254, 260, 264, 267, 277, 281, 289, 294, 299, 314, 325, 336, 339, 344, 350, 351, 367, 370, 380, 386, 392, 411, 413, 417, 428, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 483, 484, 485], "semant": [5, 7, 11, 33, 54, 60, 61, 69, 100, 108, 109, 110, 139, 167, 192, 200, 203, 209, 212, 214, 215, 218, 232, 255, 257, 258, 273, 274, 275, 277, 289, 298, 299, 301, 302, 305, 317, 322, 325, 336, 337, 338, 344, 349, 350, 359, 370, 371, 390, 398, 409, 427, 428, 429, 431, 432, 433, 434, 436, 440, 459, 460, 466, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 485], "inherit": [5, 27, 32, 58, 60, 65, 74, 85, 86, 95, 98, 100, 103, 122, 124, 128, 133, 144, 162, 164, 167, 175, 182, 183, 189, 206, 218, 220, 228, 229, 230, 232, 241, 242, 254, 258, 261, 264, 265, 275, 277, 289, 290, 298, 302, 305, 321, 334, 341, 344, 345, 348, 349, 355, 358, 367, 370, 374, 375, 381, 383, 390, 414, 418, 419, 420, 431, 432, 434, 449, 465, 466, 469, 471, 472, 474, 476, 478, 480, 482, 483, 484, 485], "downcast": [5, 460], "mileag": [5, 342], "vari": [5, 7, 55, 69, 85, 94, 95, 104, 110, 111, 114, 116, 147, 158, 164, 181, 189, 197, 200, 232, 254, 257, 261, 264, 272, 277, 285, 311, 342, 345, 348, 349, 350, 351, 359, 367, 370, 371, 374, 389, 393, 394, 404, 431, 432, 438, 466, 467, 468, 470, 472, 473, 477, 478, 479], "mean": [5, 7, 18, 23, 29, 31, 33, 40, 43, 49, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 69, 70, 78, 79, 83, 85, 86, 94, 99, 100, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 133, 139, 144, 145, 147, 150, 158, 161, 162, 164, 169, 172, 173, 175, 181, 182, 183, 184, 187, 189, 190, 192, 196, 197, 200, 203, 209, 210, 212, 213, 214, 215, 216, 220, 221, 222, 223, 225, 227, 230, 232, 233, 235, 240, 241, 242, 243, 249, 250, 251, 254, 258, 259, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 282, 284, 287, 289, 294, 295, 296, 298, 299, 300, 302, 303, 305, 307, 314, 316, 317, 320, 324, 325, 327, 328, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 359, 366, 367, 370, 371, 372, 374, 381, 385, 388, 389, 390, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 409, 411, 414, 417, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 453, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "occur": [5, 7, 13, 17, 18, 22, 23, 29, 33, 34, 37, 38, 40, 43, 46, 47, 56, 60, 61, 63, 69, 78, 83, 85, 89, 95, 100, 103, 104, 107, 108, 109, 110, 114, 119, 126, 128, 133, 142, 144, 145, 150, 157, 158, 159, 161, 163, 164, 172, 173, 175, 176, 181, 183, 187, 189, 192, 196, 197, 200, 210, 219, 220, 225, 235, 237, 254, 257, 258, 261, 264, 273, 275, 276, 277, 281, 294, 298, 299, 303, 305, 308, 317, 320, 325, 334, 338, 339, 342, 344, 348, 350, 351, 352, 355, 359, 363, 367, 369, 370, 371, 374, 376, 381, 385, 388, 389, 392, 399, 404, 406, 407, 411, 413, 414, 416, 417, 419, 423, 426, 428, 431, 432, 433, 434, 436, 439, 440, 447, 456, 469, 471, 472, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485], "remain": [5, 31, 34, 40, 54, 60, 69, 73, 83, 86, 104, 109, 111, 126, 128, 133, 144, 152, 160, 167, 172, 175, 181, 182, 183, 189, 192, 196, 197, 199, 200, 201, 202, 205, 209, 210, 212, 215, 216, 218, 225, 232, 234, 254, 255, 257, 258, 274, 277, 281, 289, 298, 299, 301, 303, 305, 318, 328, 330, 339, 341, 344, 347, 350, 351, 352, 355, 359, 367, 369, 370, 381, 388, 389, 390, 392, 398, 406, 411, 428, 430, 431, 432, 436, 439, 440, 446, 459, 460, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "default": [5, 7, 14, 17, 23, 24, 26, 30, 31, 32, 33, 43, 47, 54, 55, 58, 60, 61, 63, 65, 69, 70, 72, 73, 74, 78, 79, 81, 85, 86, 87, 94, 99, 102, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 123, 124, 125, 128, 129, 132, 133, 138, 139, 141, 142, 144, 145, 147, 149, 150, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 176, 179, 181, 182, 183, 184, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 229, 230, 232, 233, 234, 235, 237, 238, 241, 242, 247, 249, 250, 251, 252, 254, 255, 258, 259, 261, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 313, 314, 315, 317, 319, 320, 321, 323, 325, 326, 327, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 350, 351, 352, 354, 355, 357, 359, 360, 361, 363, 364, 367, 369, 370, 371, 372, 374, 378, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 394, 398, 399, 401, 403, 405, 406, 407, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 452, 455, 457, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "touch": [5, 65, 95, 183, 226, 254, 302, 303, 433, 472, 483, 485], "keyword": [5, 55, 60, 61, 63, 65, 69, 76, 78, 81, 84, 85, 86, 94, 97, 99, 100, 104, 108, 109, 113, 121, 122, 126, 128, 133, 146, 156, 158, 164, 166, 173, 176, 181, 182, 183, 189, 195, 196, 197, 200, 203, 212, 213, 214, 215, 220, 225, 231, 232, 233, 242, 247, 250, 252, 254, 259, 260, 261, 264, 267, 268, 270, 272, 273, 274, 277, 284, 289, 294, 298, 299, 303, 305, 310, 313, 319, 321, 325, 329, 331, 333, 337, 338, 341, 342, 344, 351, 352, 355, 359, 361, 363, 367, 369, 370, 374, 377, 381, 388, 389, 390, 392, 393, 394, 399, 403, 407, 411, 415, 417, 424, 426, 428, 431, 432, 434, 435, 437, 446, 447, 449, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 482, 483, 484, 485], "current": [5, 11, 12, 17, 18, 23, 27, 29, 31, 32, 33, 37, 39, 41, 43, 47, 50, 54, 56, 58, 59, 60, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 83, 85, 86, 89, 94, 98, 99, 100, 102, 104, 107, 108, 109, 110, 111, 114, 115, 116, 121, 122, 123, 126, 128, 129, 135, 138, 139, 141, 142, 144, 150, 157, 158, 159, 160, 161, 162, 164, 166, 169, 172, 173, 175, 176, 179, 181, 182, 183, 185, 189, 191, 192, 195, 197, 199, 200, 203, 204, 207, 209, 210, 212, 215, 216, 217, 219, 220, 221, 222, 225, 227, 229, 230, 232, 234, 237, 238, 241, 242, 243, 247, 249, 251, 252, 254, 255, 257, 258, 262, 264, 265, 272, 273, 275, 277, 281, 282, 284, 287, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 308, 313, 314, 315, 317, 319, 320, 321, 325, 326, 328, 329, 330, 331, 335, 337, 338, 339, 341, 344, 347, 348, 350, 351, 352, 355, 359, 360, 361, 363, 367, 369, 370, 371, 372, 373, 374, 377, 380, 381, 384, 385, 388, 390, 392, 398, 399, 402, 403, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 423, 425, 426, 428, 431, 432, 433, 434, 436, 439, 440, 455, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "alway": [5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 23, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 69, 72, 76, 78, 79, 83, 85, 86, 89, 95, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 115, 116, 118, 121, 126, 128, 133, 139, 144, 147, 149, 150, 152, 156, 158, 161, 163, 164, 169, 172, 173, 181, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 202, 203, 210, 212, 213, 214, 215, 217, 218, 220, 221, 223, 228, 230, 233, 237, 241, 242, 243, 247, 249, 251, 252, 254, 255, 257, 258, 259, 261, 264, 265, 268, 272, 273, 275, 276, 277, 278, 281, 289, 298, 299, 300, 301, 302, 305, 312, 313, 315, 323, 325, 330, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 367, 369, 370, 371, 372, 374, 381, 382, 385, 390, 392, 393, 398, 399, 403, 404, 406, 409, 411, 413, 414, 417, 419, 421, 426, 428, 429, 431, 432, 433, 434, 436, 439, 440, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "end": [5, 7, 9, 13, 23, 24, 27, 29, 31, 33, 35, 36, 40, 53, 57, 60, 61, 63, 65, 69, 72, 76, 78, 81, 82, 83, 85, 88, 89, 90, 94, 95, 99, 100, 104, 106, 108, 109, 111, 112, 114, 116, 122, 123, 126, 128, 129, 133, 139, 144, 145, 149, 152, 153, 156, 157, 158, 160, 162, 164, 165, 166, 169, 173, 175, 181, 182, 183, 184, 188, 189, 192, 196, 200, 201, 203, 212, 214, 215, 216, 217, 218, 220, 222, 232, 233, 234, 241, 242, 247, 249, 250, 252, 254, 255, 258, 261, 264, 267, 268, 273, 274, 275, 276, 277, 279, 284, 285, 288, 289, 290, 294, 298, 299, 300, 301, 303, 307, 308, 311, 314, 315, 317, 320, 323, 325, 326, 334, 336, 337, 338, 341, 342, 344, 348, 351, 352, 354, 355, 359, 360, 363, 364, 367, 368, 369, 371, 376, 381, 382, 383, 384, 385, 392, 393, 394, 399, 404, 411, 412, 414, 415, 417, 419, 420, 421, 425, 426, 428, 429, 431, 432, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 450, 452, 453, 454, 459, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "here": [5, 7, 23, 27, 31, 32, 33, 40, 43, 59, 60, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 85, 86, 94, 95, 98, 99, 100, 102, 103, 104, 106, 108, 109, 111, 112, 113, 115, 116, 118, 120, 122, 126, 128, 135, 142, 144, 145, 147, 150, 158, 160, 162, 164, 173, 175, 176, 181, 182, 183, 187, 189, 192, 196, 197, 200, 203, 205, 206, 207, 209, 212, 213, 214, 215, 216, 218, 223, 228, 229, 230, 232, 233, 237, 241, 242, 249, 252, 254, 255, 259, 261, 262, 273, 274, 275, 276, 281, 283, 289, 294, 298, 299, 303, 305, 311, 313, 320, 321, 325, 328, 335, 337, 339, 340, 342, 344, 345, 347, 348, 349, 351, 352, 359, 363, 366, 367, 370, 371, 372, 374, 381, 388, 389, 390, 392, 393, 394, 399, 402, 404, 407, 411, 412, 414, 415, 417, 427, 431, 432, 434, 435, 436, 438, 439, 440, 453, 459, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485], "colon": [5, 65, 71, 100, 111, 189, 200, 203, 206, 212, 215, 235, 237, 249, 261, 265, 270, 273, 277, 300, 303, 308, 325, 342, 352, 382, 383, 399, 404, 411, 414, 431, 434, 435, 439, 459, 460, 465, 472, 473, 481, 485], "error": [5, 7, 9, 17, 18, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 43, 46, 47, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 70, 75, 78, 82, 84, 85, 86, 89, 94, 97, 99, 100, 104, 107, 108, 109, 110, 111, 112, 114, 120, 121, 124, 125, 126, 128, 139, 142, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 161, 162, 163, 165, 169, 170, 172, 173, 175, 177, 181, 182, 183, 187, 188, 189, 190, 193, 200, 201, 203, 204, 208, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 226, 230, 232, 233, 235, 236, 241, 251, 252, 253, 254, 255, 258, 260, 262, 264, 265, 268, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 289, 290, 291, 292, 293, 294, 296, 299, 301, 302, 304, 305, 308, 311, 312, 314, 317, 325, 328, 334, 337, 338, 339, 340, 342, 344, 345, 347, 348, 351, 352, 354, 355, 356, 357, 359, 361, 363, 364, 365, 367, 368, 370, 374, 381, 383, 385, 388, 390, 392, 393, 394, 395, 396, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 423, 424, 425, 426, 428, 431, 432, 433, 434, 435, 439, 440, 446, 449, 456, 459, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "messag": [5, 23, 31, 32, 51, 56, 63, 65, 69, 78, 82, 83, 85, 86, 89, 94, 95, 99, 102, 104, 107, 111, 112, 114, 115, 120, 126, 128, 129, 133, 139, 141, 148, 149, 150, 152, 162, 163, 164, 169, 180, 182, 183, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 230, 235, 241, 249, 250, 252, 253, 254, 255, 258, 260, 261, 265, 268, 273, 274, 275, 278, 279, 285, 289, 290, 291, 294, 298, 299, 303, 311, 317, 320, 323, 325, 328, 337, 339, 341, 342, 344, 345, 348, 349, 359, 361, 362, 363, 364, 367, 372, 373, 380, 383, 385, 390, 392, 393, 394, 399, 403, 404, 411, 417, 418, 419, 423, 425, 430, 433, 435, 440, 447, 453, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 484, 485], "associ": [5, 23, 24, 26, 31, 55, 58, 60, 63, 69, 76, 83, 85, 86, 94, 97, 100, 102, 107, 108, 109, 111, 112, 115, 121, 126, 129, 133, 150, 158, 164, 172, 181, 183, 185, 192, 197, 200, 201, 203, 208, 210, 220, 237, 249, 252, 254, 255, 257, 258, 261, 273, 282, 289, 292, 298, 299, 301, 303, 305, 320, 334, 335, 344, 351, 353, 355, 363, 367, 370, 372, 374, 380, 381, 390, 392, 406, 407, 409, 410, 411, 414, 417, 419, 420, 423, 424, 426, 427, 430, 431, 433, 435, 436, 440, 446, 458, 465, 473, 476, 477, 478, 479, 482, 483, 484, 485], "semicolon": [5, 31, 86, 111, 246, 303, 347, 431, 440, 459, 465], "mutual": [5, 60, 65, 110, 116, 124, 255, 268, 274, 277, 298, 325, 374, 384, 407, 485], "exclud": [5, 18, 56, 61, 71, 79, 111, 169, 187, 189, 200, 234, 242, 254, 267, 277, 281, 285, 287, 299, 302, 314, 320, 348, 350, 351, 359, 363, 370, 371, 372, 381, 386, 393, 417, 425, 426, 430, 431, 432, 434, 440, 446, 453, 459, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 485], "do": [5, 7, 14, 15, 16, 18, 22, 23, 27, 31, 32, 33, 34, 40, 41, 53, 56, 57, 58, 60, 61, 65, 69, 70, 72, 73, 76, 78, 79, 81, 82, 83, 85, 86, 87, 88, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 126, 128, 129, 133, 138, 142, 144, 145, 146, 147, 157, 158, 161, 164, 165, 167, 169, 173, 175, 182, 183, 184, 185, 187, 192, 195, 196, 197, 200, 201, 202, 203, 204, 208, 209, 212, 214, 215, 218, 221, 230, 232, 233, 234, 235, 237, 239, 243, 247, 250, 251, 254, 255, 258, 261, 264, 265, 272, 273, 274, 275, 277, 281, 289, 290, 295, 298, 299, 300, 301, 302, 303, 305, 311, 312, 314, 320, 325, 326, 328, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 355, 359, 360, 361, 363, 364, 367, 369, 370, 371, 372, 373, 379, 380, 381, 383, 384, 386, 388, 390, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 410, 411, 414, 415, 417, 418, 419, 423, 425, 426, 429, 430, 431, 432, 433, 434, 436, 439, 440, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "decrement": [5, 7, 9, 33, 43, 49, 60, 61, 83, 86, 95, 289, 299, 303, 339, 370, 381, 432, 485], "abov": [5, 7, 23, 31, 32, 33, 40, 55, 60, 61, 65, 70, 74, 76, 78, 79, 81, 82, 83, 85, 86, 95, 98, 100, 102, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 121, 122, 123, 124, 126, 128, 133, 142, 144, 154, 156, 157, 158, 161, 164, 169, 173, 175, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 195, 196, 200, 204, 207, 210, 212, 215, 218, 220, 222, 230, 232, 237, 241, 242, 243, 249, 250, 254, 257, 259, 264, 265, 272, 273, 274, 275, 276, 281, 284, 289, 294, 295, 298, 299, 303, 305, 314, 319, 325, 330, 338, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 355, 359, 367, 371, 374, 380, 381, 384, 388, 390, 392, 393, 394, 398, 399, 401, 403, 406, 409, 411, 412, 414, 417, 424, 425, 430, 431, 432, 435, 436, 438, 439, 440, 447, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "what": [5, 9, 23, 28, 29, 31, 32, 33, 38, 40, 47, 51, 55, 60, 61, 65, 69, 70, 72, 74, 75, 76, 78, 79, 82, 85, 86, 89, 99, 100, 103, 104, 106, 109, 110, 111, 112, 114, 115, 116, 118, 126, 128, 139, 144, 145, 158, 161, 164, 169, 173, 176, 181, 182, 183, 189, 191, 192, 193, 199, 206, 207, 208, 210, 214, 215, 218, 220, 222, 230, 232, 237, 242, 243, 250, 251, 254, 255, 256, 257, 258, 259, 267, 272, 273, 274, 275, 276, 278, 285, 295, 299, 301, 302, 304, 313, 317, 320, 321, 325, 326, 334, 338, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 357, 359, 366, 367, 371, 373, 380, 381, 384, 388, 390, 392, 393, 394, 398, 404, 414, 415, 417, 425, 428, 431, 433, 434, 436, 438, 439, 440, 446, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "succeed": [5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 25, 26, 28, 34, 35, 36, 37, 38, 41, 43, 45, 46, 47, 51, 52, 53, 57, 58, 59, 61, 64, 95, 111, 128, 145, 182, 200, 216, 239, 256, 294, 299, 302, 338, 344, 348, 367, 392, 393, 394, 399, 409, 414, 431, 459, 468, 469, 470, 485], "arg": [5, 10, 20, 27, 31, 32, 33, 34, 55, 56, 58, 59, 60, 61, 63, 65, 69, 82, 83, 85, 86, 88, 94, 95, 97, 99, 100, 103, 108, 109, 113, 116, 118, 121, 122, 126, 128, 132, 133, 138, 142, 144, 146, 148, 150, 162, 166, 170, 172, 175, 176, 181, 182, 183, 189, 193, 197, 204, 207, 210, 212, 218, 219, 220, 222, 231, 232, 233, 235, 239, 254, 255, 258, 261, 267, 270, 273, 274, 275, 277, 289, 290, 297, 298, 299, 303, 305, 306, 313, 314, 321, 322, 342, 351, 352, 355, 359, 360, 364, 367, 370, 381, 384, 388, 390, 392, 393, 394, 399, 403, 406, 431, 432, 435, 440, 445, 447, 452, 455, 459, 466, 469, 470, 471, 472, 473, 474, 477, 478, 480, 481, 483, 484, 485], "exhaust": [5, 60, 104, 128, 129, 164, 166, 197, 232, 249, 267, 299, 333, 349, 351, 367, 374, 393, 426, 431, 434, 468, 470, 471, 472, 474, 480, 481, 485], "appropri": [5, 9, 15, 18, 23, 24, 29, 39, 40, 47, 51, 58, 60, 61, 65, 69, 73, 76, 78, 81, 83, 85, 86, 98, 100, 102, 104, 108, 109, 110, 111, 112, 115, 116, 118, 122, 126, 133, 142, 145, 158, 163, 164, 183, 189, 190, 192, 200, 202, 203, 205, 208, 209, 212, 213, 214, 215, 218, 230, 232, 233, 237, 242, 249, 250, 252, 255, 258, 264, 265, 272, 273, 274, 275, 277, 281, 289, 295, 298, 299, 302, 305, 313, 314, 320, 325, 330, 334, 339, 341, 342, 344, 345, 348, 350, 351, 352, 354, 355, 359, 363, 370, 371, 380, 385, 388, 389, 390, 393, 398, 399, 403, 406, 407, 412, 414, 415, 417, 419, 425, 426, 433, 434, 436, 440, 459, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "due": [5, 23, 31, 43, 60, 61, 63, 85, 86, 94, 103, 108, 110, 115, 128, 133, 142, 144, 175, 181, 182, 183, 189, 190, 196, 215, 220, 228, 234, 239, 249, 254, 258, 264, 273, 274, 275, 277, 281, 289, 305, 320, 331, 333, 348, 351, 355, 367, 370, 376, 390, 392, 393, 413, 426, 431, 432, 434, 436, 439, 465, 466, 467, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485], "failur": [5, 7, 8, 9, 11, 15, 18, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 36, 37, 38, 40, 43, 45, 47, 51, 52, 55, 56, 57, 59, 61, 63, 65, 69, 78, 83, 100, 110, 111, 120, 128, 139, 182, 183, 189, 193, 200, 220, 250, 258, 275, 284, 288, 289, 299, 302, 308, 328, 338, 340, 344, 348, 351, 367, 371, 373, 393, 394, 427, 429, 431, 434, 440, 467, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485], "left": [5, 15, 31, 32, 45, 60, 61, 65, 69, 82, 83, 100, 102, 104, 109, 111, 112, 114, 116, 128, 133, 147, 152, 156, 161, 162, 163, 166, 173, 182, 183, 187, 189, 192, 196, 197, 200, 203, 219, 223, 226, 229, 232, 233, 235, 242, 254, 258, 273, 274, 275, 277, 287, 289, 298, 299, 300, 301, 303, 308, 320, 325, 330, 337, 344, 347, 348, 351, 352, 355, 369, 370, 374, 380, 381, 388, 390, 391, 392, 394, 399, 404, 415, 430, 431, 432, 434, 436, 439, 440, 460, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 480, 482, 483, 485], "untouch": [5, 61, 69, 187, 460], "posit": [5, 7, 13, 15, 23, 25, 33, 36, 45, 55, 57, 60, 61, 65, 83, 86, 94, 95, 97, 99, 100, 102, 104, 106, 109, 111, 112, 113, 114, 121, 123, 126, 128, 133, 139, 144, 146, 150, 156, 160, 161, 162, 164, 166, 169, 172, 181, 182, 183, 187, 189, 192, 196, 197, 200, 216, 220, 222, 228, 229, 232, 233, 241, 242, 243, 254, 257, 258, 261, 264, 267, 268, 272, 273, 276, 279, 281, 284, 288, 289, 290, 295, 299, 305, 306, 317, 320, 326, 331, 334, 338, 344, 348, 350, 351, 352, 354, 355, 356, 357, 359, 363, 367, 368, 370, 371, 374, 377, 381, 383, 385, 386, 388, 389, 390, 392, 393, 394, 402, 403, 405, 412, 414, 417, 419, 425, 426, 431, 434, 435, 446, 449, 453, 466, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 484, 485], "local": [5, 12, 16, 18, 29, 30, 32, 33, 47, 50, 56, 63, 65, 69, 78, 81, 83, 89, 94, 95, 97, 98, 100, 102, 104, 108, 109, 111, 113, 114, 116, 120, 133, 145, 146, 150, 157, 158, 159, 163, 166, 170, 173, 176, 181, 182, 183, 189, 192, 196, 197, 198, 200, 207, 216, 220, 232, 233, 249, 252, 253, 254, 255, 257, 258, 260, 261, 264, 265, 267, 273, 275, 278, 284, 289, 292, 294, 299, 300, 302, 303, 305, 314, 319, 320, 325, 326, 338, 340, 341, 342, 344, 348, 351, 352, 355, 358, 359, 360, 367, 368, 371, 384, 385, 390, 392, 394, 399, 402, 409, 413, 417, 418, 419, 420, 423, 429, 431, 432, 433, 434, 436, 440, 441, 442, 444, 445, 452, 454, 455, 456, 457, 459, 460, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 483, 485, 486], "pyarg_vapars": [5, 54, 485], "va_list": [5, 9, 18, 23, 61, 470, 480, 485], "varg": [5, 9, 23, 61], "ident": [5, 9, 18, 44, 47, 61, 65, 78, 83, 94, 103, 104, 107, 108, 109, 112, 128, 133, 145, 146, 148, 161, 165, 170, 187, 189, 192, 196, 200, 203, 208, 212, 214, 218, 222, 223, 232, 237, 252, 267, 273, 275, 277, 287, 289, 299, 311, 314, 325, 334, 338, 339, 344, 348, 350, 351, 354, 359, 361, 370, 371, 380, 383, 389, 393, 394, 403, 414, 417, 429, 432, 435, 441, 445, 468, 469, 471, 472, 476, 477, 481, 482, 483, 485], "rather": [5, 7, 15, 22, 23, 28, 29, 31, 39, 43, 52, 54, 55, 58, 61, 69, 73, 78, 82, 83, 85, 86, 94, 100, 108, 109, 116, 120, 126, 128, 133, 142, 156, 158, 161, 162, 164, 169, 172, 175, 182, 183, 187, 189, 192, 197, 199, 215, 216, 217, 220, 232, 233, 234, 242, 250, 254, 255, 261, 264, 267, 273, 274, 275, 276, 277, 281, 289, 298, 299, 301, 302, 306, 308, 318, 319, 320, 325, 330, 338, 340, 342, 344, 347, 348, 350, 351, 352, 355, 359, 367, 371, 372, 374, 377, 380, 381, 383, 390, 392, 393, 394, 398, 399, 403, 404, 406, 411, 414, 417, 423, 426, 427, 429, 431, 432, 434, 436, 438, 440, 459, 460, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "than": [5, 15, 18, 22, 23, 24, 28, 29, 31, 32, 33, 36, 37, 39, 40, 43, 52, 53, 54, 55, 58, 60, 61, 65, 69, 70, 73, 78, 82, 83, 85, 86, 94, 95, 97, 98, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 123, 126, 128, 133, 139, 142, 144, 145, 146, 150, 152, 154, 156, 158, 161, 164, 166, 167, 169, 172, 173, 175, 176, 181, 182, 183, 187, 189, 192, 194, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 210, 212, 214, 215, 216, 217, 220, 222, 225, 232, 233, 234, 237, 239, 241, 242, 243, 247, 249, 250, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 273, 274, 275, 276, 277, 278, 281, 282, 284, 289, 290, 292, 294, 298, 299, 300, 301, 302, 303, 305, 306, 308, 312, 313, 314, 318, 319, 320, 325, 326, 328, 330, 331, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 363, 364, 367, 369, 370, 371, 372, 374, 377, 379, 380, 381, 383, 385, 386, 388, 390, 392, 393, 394, 398, 399, 403, 404, 406, 409, 411, 413, 414, 415, 417, 419, 423, 426, 428, 429, 431, 432, 434, 436, 438, 439, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "kw": [5, 60, 182, 195, 204, 210, 212, 215, 268, 367, 377, 379, 380, 381, 393, 394, 445, 466, 469, 472, 477], "empti": [5, 13, 17, 22, 24, 29, 31, 32, 33, 36, 43, 47, 52, 56, 65, 69, 70, 73, 74, 78, 83, 86, 94, 95, 98, 100, 104, 111, 112, 116, 120, 126, 128, 129, 133, 139, 140, 144, 145, 149, 150, 156, 157, 158, 160, 162, 163, 164, 166, 170, 173, 176, 181, 187, 189, 190, 194, 196, 197, 200, 203, 204, 210, 212, 214, 215, 216, 219, 220, 225, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 247, 249, 252, 257, 258, 261, 264, 265, 267, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 289, 294, 298, 299, 300, 302, 305, 315, 320, 321, 322, 325, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 350, 351, 352, 354, 355, 359, 363, 364, 367, 369, 370, 374, 380, 381, 384, 386, 388, 389, 390, 391, 392, 393, 398, 399, 403, 404, 409, 411, 412, 414, 415, 417, 423, 424, 426, 427, 428, 431, 432, 434, 435, 436, 439, 440, 444, 446, 453, 459, 460, 465, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "denot": [5, 44, 58, 65, 95, 111, 173, 197, 251, 252, 261, 265, 299, 328, 348, 351, 374, 390, 399, 431, 432, 434, 436, 439, 466, 472, 482, 485], "support": [5, 7, 12, 16, 22, 23, 24, 30, 32, 33, 35, 36, 38, 41, 45, 46, 47, 51, 54, 55, 57, 58, 60, 62, 64, 65, 69, 70, 72, 74, 78, 79, 81, 83, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 108, 111, 113, 115, 116, 118, 121, 122, 123, 125, 126, 128, 133, 138, 139, 142, 144, 145, 147, 149, 152, 153, 154, 158, 160, 161, 164, 167, 169, 170, 179, 181, 182, 183, 186, 188, 189, 190, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 208, 209, 210, 211, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 249, 250, 251, 252, 253, 255, 258, 259, 260, 261, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 287, 289, 290, 291, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 313, 314, 320, 321, 325, 326, 327, 328, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 359, 360, 364, 366, 370, 371, 373, 374, 381, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 446, 453, 455, 459, 460, 461, 465, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 485, 486], "pyarg_vaparsetupleandkeyword": [5, 54, 470, 485], "pyarg_validatekeywordargu": [5, 54, 485], "ensur": [5, 18, 31, 32, 40, 43, 47, 54, 56, 60, 61, 63, 65, 69, 71, 72, 83, 86, 89, 94, 98, 100, 102, 107, 108, 109, 111, 116, 119, 126, 129, 133, 138, 139, 142, 149, 164, 172, 175, 182, 187, 188, 189, 192, 200, 203, 212, 217, 243, 257, 261, 268, 273, 275, 276, 284, 289, 290, 298, 299, 305, 330, 344, 348, 350, 351, 355, 359, 366, 367, 369, 374, 377, 381, 386, 390, 392, 393, 394, 402, 403, 404, 406, 409, 411, 423, 425, 426, 432, 434, 459, 460, 465, 466, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485], "key": [5, 22, 31, 33, 38, 47, 51, 52, 60, 65, 69, 78, 88, 94, 95, 97, 102, 103, 104, 108, 109, 110, 118, 128, 133, 148, 154, 158, 162, 163, 166, 167, 170, 173, 176, 180, 181, 183, 187, 188, 189, 190, 192, 195, 197, 200, 201, 203, 204, 208, 210, 212, 213, 218, 219, 220, 230, 232, 233, 234, 237, 239, 243, 244, 251, 252, 255, 258, 259, 261, 262, 265, 267, 268, 272, 273, 274, 276, 277, 278, 279, 285, 288, 291, 293, 294, 297, 299, 301, 303, 304, 305, 310, 311, 312, 313, 314, 318, 325, 326, 335, 336, 339, 340, 341, 342, 347, 351, 352, 353, 359, 360, 363, 367, 373, 374, 381, 388, 389, 390, 393, 394, 398, 399, 403, 406, 409, 411, 417, 420, 421, 423, 425, 429, 431, 432, 434, 435, 436, 440, 444, 445, 446, 450, 456, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486], "dictionari": [5, 16, 21, 22, 23, 26, 29, 31, 40, 43, 47, 50, 55, 56, 60, 61, 63, 65, 69, 78, 83, 85, 86, 94, 95, 97, 98, 103, 104, 108, 111, 113, 115, 118, 121, 124, 126, 128, 145, 150, 154, 158, 163, 164, 166, 173, 179, 181, 182, 187, 189, 190, 192, 193, 197, 200, 202, 203, 207, 208, 209, 210, 212, 213, 214, 218, 219, 220, 223, 230, 232, 233, 234, 237, 239, 243, 246, 249, 251, 252, 257, 258, 259, 261, 265, 268, 272, 273, 275, 276, 277, 278, 280, 282, 285, 289, 292, 293, 294, 297, 298, 299, 303, 305, 306, 310, 311, 312, 313, 314, 318, 320, 325, 330, 331, 332, 336, 341, 342, 347, 348, 351, 352, 353, 355, 359, 360, 363, 367, 370, 374, 380, 381, 382, 384, 385, 388, 390, 392, 393, 397, 398, 399, 404, 406, 411, 417, 420, 421, 428, 431, 432, 433, 435, 440, 444, 445, 449, 450, 456, 459, 466, 467, 468, 469, 470, 471, 472, 474, 476, 479, 480, 481, 482, 483, 485, 486], "latter": [5, 7, 23, 40, 70, 83, 95, 110, 111, 112, 115, 126, 139, 150, 173, 189, 190, 203, 208, 212, 216, 222, 254, 258, 261, 264, 265, 273, 274, 282, 298, 299, 302, 314, 338, 347, 351, 354, 374, 380, 381, 388, 390, 392, 402, 404, 405, 431, 432, 433, 434, 435, 436, 440, 441, 465, 469, 474, 476, 477, 478, 479, 482, 484, 485], "deconstruct": 5, "meth_oldarg": [5, 468, 474], "been": [5, 7, 13, 18, 22, 23, 24, 27, 29, 31, 32, 33, 40, 41, 43, 45, 55, 56, 57, 60, 61, 69, 70, 71, 74, 75, 78, 79, 81, 83, 85, 89, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 133, 139, 140, 144, 145, 146, 147, 150, 156, 158, 160, 162, 164, 166, 167, 172, 175, 182, 183, 185, 187, 189, 190, 192, 196, 200, 203, 206, 208, 209, 211, 214, 219, 220, 225, 230, 232, 233, 234, 237, 239, 242, 243, 247, 249, 250, 251, 254, 257, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 282, 287, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 308, 314, 315, 320, 325, 326, 328, 334, 335, 337, 339, 340, 342, 344, 345, 347, 348, 350, 351, 354, 355, 359, 361, 363, 365, 366, 367, 369, 370, 371, 373, 374, 380, 381, 385, 386, 388, 390, 391, 392, 393, 394, 398, 399, 403, 404, 405, 406, 407, 409, 412, 415, 416, 417, 420, 423, 424, 425, 426, 428, 431, 432, 433, 434, 436, 439, 440, 441, 446, 450, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "standard": [5, 7, 18, 24, 29, 30, 31, 32, 40, 56, 58, 60, 61, 63, 65, 70, 72, 75, 76, 78, 79, 83, 84, 85, 86, 87, 89, 90, 94, 98, 104, 108, 109, 110, 111, 113, 114, 115, 118, 120, 121, 122, 124, 126, 133, 139, 142, 147, 149, 150, 151, 152, 154, 157, 158, 160, 163, 169, 172, 173, 181, 182, 183, 184, 188, 189, 192, 200, 201, 202, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 225, 227, 230, 232, 237, 242, 245, 246, 250, 252, 254, 255, 257, 258, 261, 264, 267, 272, 273, 274, 275, 277, 278, 279, 281, 282, 284, 285, 287, 289, 291, 294, 299, 300, 301, 305, 307, 308, 311, 312, 314, 315, 317, 318, 320, 325, 330, 332, 334, 337, 338, 339, 340, 342, 344, 345, 350, 352, 354, 355, 357, 359, 360, 362, 363, 364, 367, 370, 371, 372, 373, 374, 375, 380, 385, 388, 390, 391, 392, 393, 394, 398, 399, 401, 402, 404, 406, 411, 412, 414, 417, 423, 425, 426, 429, 430, 431, 433, 434, 437, 438, 439, 440, 441, 445, 449, 456, 458, 459, 460, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "modifi": [5, 9, 22, 23, 31, 32, 60, 61, 63, 65, 69, 70, 74, 78, 79, 83, 85, 86, 87, 89, 98, 100, 104, 108, 109, 113, 114, 115, 118, 122, 126, 128, 129, 142, 144, 147, 164, 173, 179, 182, 183, 190, 191, 192, 197, 200, 203, 204, 205, 208, 210, 212, 215, 218, 222, 223, 232, 239, 252, 254, 261, 262, 264, 272, 273, 274, 275, 277, 279, 287, 289, 290, 298, 299, 305, 308, 312, 313, 314, 320, 325, 327, 330, 334, 335, 336, 337, 338, 342, 344, 345, 347, 351, 352, 355, 357, 359, 360, 363, 367, 370, 374, 377, 380, 381, 383, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 400, 401, 404, 409, 411, 413, 414, 420, 421, 424, 425, 427, 428, 429, 430, 431, 432, 433, 436, 438, 439, 440, 459, 462, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485], "purpos": [5, 7, 17, 18, 29, 31, 33, 35, 40, 54, 60, 65, 69, 78, 81, 82, 83, 85, 94, 100, 103, 108, 109, 111, 113, 115, 119, 120, 128, 133, 149, 161, 164, 173, 176, 179, 181, 182, 183, 187, 189, 192, 196, 200, 203, 209, 212, 213, 218, 220, 233, 234, 237, 242, 252, 258, 261, 274, 289, 290, 298, 299, 301, 305, 313, 314, 325, 329, 331, 333, 340, 344, 347, 348, 354, 359, 363, 370, 374, 381, 389, 392, 393, 398, 404, 411, 414, 417, 418, 425, 429, 430, 431, 433, 434, 436, 439, 444, 459, 460, 465, 466, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 485], "conveni": [5, 7, 20, 23, 24, 27, 29, 31, 40, 43, 60, 65, 70, 74, 83, 85, 94, 95, 100, 108, 109, 113, 114, 115, 116, 126, 133, 152, 157, 158, 163, 164, 173, 187, 189, 192, 195, 197, 202, 203, 205, 208, 209, 210, 212, 213, 214, 215, 216, 232, 233, 237, 239, 241, 242, 250, 254, 257, 259, 260, 261, 262, 264, 273, 274, 276, 277, 281, 282, 289, 290, 298, 301, 305, 314, 332, 337, 342, 344, 348, 350, 351, 355, 363, 366, 367, 369, 371, 372, 374, 378, 380, 390, 392, 393, 394, 403, 405, 411, 413, 414, 417, 418, 420, 425, 431, 432, 436, 439, 440, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 483, 485], "decompos": [5, 104, 391, 398, 485], "continu": [5, 23, 33, 34, 56, 61, 65, 72, 83, 88, 89, 95, 97, 103, 104, 108, 114, 115, 119, 121, 122, 124, 128, 129, 133, 144, 145, 161, 162, 164, 175, 183, 187, 200, 203, 206, 207, 209, 214, 248, 249, 252, 255, 257, 258, 259, 267, 270, 273, 277, 288, 298, 299, 300, 303, 320, 325, 338, 339, 344, 345, 348, 350, 351, 382, 392, 394, 399, 404, 419, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 449, 456, 459, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 485], "pyarg_unpacktupl": [5, 54, 55, 65, 468, 485], "min": [5, 65, 97, 104, 109, 111, 112, 166, 172, 188, 189, 192, 232, 233, 243, 260, 261, 267, 281, 296, 350, 351, 359, 372, 434, 444, 454, 471, 473, 479, 485], "max": [5, 65, 97, 104, 112, 126, 147, 161, 166, 188, 189, 192, 232, 233, 243, 250, 251, 260, 267, 281, 296, 324, 347, 348, 350, 351, 357, 359, 434, 444, 454, 471, 473, 477, 479, 483, 485], "simpler": [5, 60, 65, 70, 99, 100, 102, 109, 111, 113, 116, 126, 158, 232, 242, 289, 325, 351, 352, 374, 393, 406, 415, 417, 419, 436, 465, 466, 467, 468, 469, 471, 473, 478, 479, 482, 485, 486], "retriev": [5, 11, 23, 26, 31, 34, 37, 43, 47, 51, 53, 58, 65, 70, 82, 83, 85, 94, 95, 102, 103, 104, 111, 115, 144, 158, 172, 173, 177, 182, 183, 190, 195, 203, 210, 214, 215, 230, 232, 233, 241, 249, 250, 254, 255, 259, 260, 262, 264, 271, 272, 274, 277, 289, 295, 299, 305, 308, 310, 311, 321, 325, 328, 334, 336, 347, 348, 351, 352, 359, 370, 377, 386, 393, 399, 406, 409, 413, 417, 432, 434, 440, 459, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 481, 483, 484, 485], "meth_vararg": [5, 48, 55, 65, 82, 83, 468, 485], "tabl": [5, 7, 29, 31, 33, 40, 43, 55, 56, 61, 65, 69, 78, 84, 85, 87, 88, 100, 103, 104, 108, 110, 111, 114, 115, 154, 157, 164, 182, 183, 189, 192, 196, 202, 210, 219, 242, 254, 257, 258, 260, 264, 267, 268, 270, 272, 273, 282, 289, 302, 304, 325, 334, 345, 347, 348, 351, 353, 354, 357, 359, 363, 371, 374, 392, 407, 409, 413, 414, 426, 430, 434, 445, 450, 456, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 484, 485], "least": [5, 27, 32, 33, 39, 47, 58, 60, 63, 69, 73, 76, 82, 83, 86, 94, 95, 100, 103, 107, 109, 110, 111, 112, 114, 116, 119, 121, 126, 145, 149, 156, 160, 161, 164, 166, 172, 181, 182, 183, 189, 192, 196, 200, 201, 207, 210, 215, 217, 222, 228, 233, 239, 241, 249, 255, 264, 275, 276, 281, 298, 299, 312, 314, 315, 324, 334, 338, 339, 342, 344, 348, 350, 351, 352, 354, 359, 364, 367, 370, 371, 372, 383, 384, 386, 390, 392, 393, 402, 410, 413, 426, 428, 431, 432, 434, 438, 440, 465, 469, 472, 473, 474, 476, 478, 481, 482, 484, 485], "equal": [5, 7, 31, 32, 33, 35, 40, 51, 56, 60, 61, 63, 65, 85, 95, 99, 104, 109, 113, 118, 122, 126, 128, 138, 139, 146, 147, 154, 156, 161, 166, 172, 176, 182, 183, 187, 189, 192, 196, 200, 202, 203, 209, 215, 218, 223, 228, 232, 233, 234, 235, 250, 264, 265, 267, 268, 270, 272, 278, 281, 284, 290, 295, 299, 301, 303, 314, 325, 337, 340, 344, 347, 348, 350, 351, 353, 354, 359, 367, 369, 370, 381, 382, 383, 386, 388, 390, 391, 392, 393, 394, 404, 406, 412, 414, 416, 417, 427, 431, 432, 434, 435, 436, 439, 440, 445, 454, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 483, 484, 485], "wrong": [5, 16, 31, 40, 78, 83, 94, 95, 104, 110, 111, 115, 116, 126, 150, 182, 189, 200, 219, 220, 255, 281, 298, 299, 301, 302, 342, 347, 354, 359, 371, 392, 393, 399, 411, 432, 445, 453, 467, 469, 470, 471, 472, 476, 477, 479, 485], "element": [5, 7, 31, 33, 38, 40, 47, 51, 52, 56, 60, 61, 65, 94, 95, 109, 111, 113, 114, 123, 128, 129, 139, 145, 147, 154, 158, 162, 166, 167, 178, 181, 182, 184, 187, 188, 192, 196, 197, 200, 202, 203, 210, 212, 214, 216, 220, 227, 230, 232, 233, 235, 239, 243, 247, 249, 252, 257, 261, 267, 268, 273, 278, 279, 281, 289, 298, 299, 300, 302, 310, 320, 324, 325, 328, 338, 341, 342, 344, 350, 351, 352, 355, 359, 371, 374, 380, 381, 383, 385, 388, 389, 390, 392, 398, 406, 412, 415, 416, 419, 420, 421, 423, 424, 429, 431, 432, 434, 444, 446, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485], "taken": [5, 31, 40, 43, 52, 60, 63, 76, 83, 85, 104, 109, 126, 145, 147, 150, 169, 173, 189, 192, 197, 200, 203, 209, 212, 213, 218, 223, 232, 234, 237, 255, 267, 272, 274, 275, 282, 284, 289, 299, 300, 302, 314, 317, 320, 328, 337, 341, 348, 350, 351, 354, 359, 363, 367, 369, 370, 372, 385, 386, 401, 404, 431, 432, 436, 440, 466, 468, 469, 471, 477, 478, 479, 483, 485], "sourc": [5, 20, 23, 29, 31, 32, 33, 54, 63, 65, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 89, 94, 95, 100, 102, 103, 104, 109, 110, 118, 128, 144, 148, 153, 159, 163, 164, 165, 169, 173, 181, 182, 183, 187, 188, 193, 196, 197, 199, 200, 210, 214, 215, 216, 218, 220, 221, 229, 230, 232, 237, 242, 249, 255, 257, 259, 260, 263, 267, 268, 270, 271, 273, 274, 275, 276, 286, 287, 289, 292, 298, 299, 301, 302, 303, 305, 306, 314, 318, 319, 321, 323, 327, 330, 333, 336, 337, 338, 342, 344, 347, 348, 350, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 376, 382, 384, 385, 386, 392, 399, 403, 404, 409, 411, 414, 417, 418, 419, 420, 421, 425, 426, 427, 430, 431, 432, 436, 438, 439, 440, 441, 447, 457, 459, 460, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "_weakref": [5, 484, 485], "helper": [5, 31, 65, 96, 103, 122, 170, 175, 182, 193, 203, 212, 218, 225, 258, 260, 264, 270, 273, 295, 305, 325, 338, 348, 368, 372, 385, 388, 392, 394, 399, 417, 471, 472, 476, 478, 480, 481, 485], "weak": [5, 60, 64, 65, 83, 84, 95, 144, 188, 220, 233, 242, 260, 348, 351, 373, 392, 432, 449, 468, 471, 473, 476, 479, 485, 486], "static": [5, 20, 27, 31, 33, 40, 43, 48, 55, 59, 61, 65, 69, 73, 82, 83, 85, 86, 87, 89, 90, 97, 100, 109, 111, 119, 195, 197, 222, 232, 233, 258, 305, 321, 325, 351, 370, 374, 390, 393, 394, 432, 440, 444, 460, 467, 468, 469, 470, 473, 475, 476, 477, 480, 481, 482, 483, 484, 485], "weakref_ref": 5, "self": [5, 10, 22, 27, 42, 49, 55, 58, 60, 65, 69, 74, 82, 83, 85, 86, 89, 94, 97, 103, 104, 106, 109, 112, 113, 122, 126, 128, 129, 133, 138, 139, 145, 148, 150, 155, 162, 166, 167, 175, 178, 182, 187, 189, 192, 197, 210, 212, 218, 223, 228, 230, 232, 233, 234, 237, 239, 247, 249, 250, 255, 258, 261, 265, 267, 268, 280, 289, 294, 295, 298, 299, 302, 303, 305, 311, 324, 326, 327, 339, 342, 344, 345, 347, 351, 352, 364, 367, 374, 377, 380, 386, 388, 389, 390, 392, 393, 394, 399, 403, 406, 414, 417, 421, 423, 424, 425, 431, 432, 436, 444, 445, 450, 455, 456, 459, 466, 467, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 484, 485], "callback": [5, 11, 14, 27, 31, 60, 64, 65, 83, 91, 97, 103, 124, 126, 130, 132, 135, 136, 138, 139, 141, 144, 175, 230, 234, 261, 287, 289, 305, 314, 315, 320, 321, 322, 326, 335, 338, 347, 348, 349, 357, 364, 372, 374, 376, 381, 389, 390, 406, 416, 417, 419, 425, 432, 456, 471, 472, 476, 477, 478, 479, 481, 482, 483, 485, 486], "ref": [5, 32, 33, 60, 64, 65, 88, 183, 188, 406, 459, 460, 467, 473, 476, 479, 483, 485], "pyweakref_newref": [5, 54, 64, 485], "entir": [5, 33, 40, 60, 69, 72, 75, 78, 79, 83, 85, 94, 95, 100, 102, 103, 107, 110, 111, 112, 113, 114, 116, 118, 120, 157, 158, 172, 175, 183, 190, 203, 207, 212, 214, 220, 223, 237, 242, 247, 249, 254, 264, 265, 267, 272, 273, 275, 276, 277, 284, 294, 298, 299, 301, 325, 328, 337, 338, 347, 348, 350, 351, 352, 359, 363, 369, 370, 372, 374, 381, 388, 391, 392, 404, 409, 412, 414, 417, 420, 430, 431, 433, 436, 439, 440, 450, 459, 465, 467, 469, 470, 471, 472, 473, 475, 476, 478, 479, 482, 485], "py_buildvalu": [5, 10, 33, 54, 56, 57, 65, 83, 96, 471, 476, 483, 485], "base": [5, 14, 23, 25, 28, 29, 31, 32, 33, 37, 41, 43, 45, 46, 47, 48, 58, 60, 61, 65, 70, 73, 75, 76, 78, 79, 83, 85, 86, 88, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 115, 124, 126, 128, 130, 133, 138, 149, 150, 151, 152, 154, 157, 161, 169, 170, 173, 175, 179, 182, 186, 187, 188, 189, 192, 193, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 218, 228, 232, 233, 241, 242, 247, 249, 250, 252, 253, 254, 255, 259, 260, 261, 262, 267, 268, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 286, 287, 288, 290, 294, 296, 298, 299, 300, 302, 304, 305, 308, 311, 314, 318, 320, 321, 325, 326, 327, 330, 333, 335, 336, 338, 340, 341, 342, 344, 345, 347, 348, 351, 352, 354, 355, 359, 360, 363, 367, 371, 374, 378, 380, 381, 386, 389, 391, 392, 393, 394, 398, 399, 402, 403, 404, 406, 407, 412, 413, 414, 415, 417, 418, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 439, 444, 447, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486], "those": [5, 7, 23, 31, 33, 56, 60, 61, 63, 69, 73, 76, 78, 79, 82, 83, 86, 87, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 126, 128, 133, 139, 144, 158, 164, 167, 173, 175, 178, 181, 182, 183, 184, 189, 192, 196, 197, 200, 201, 203, 209, 210, 211, 212, 215, 217, 218, 220, 223, 227, 230, 232, 233, 234, 235, 239, 241, 249, 251, 254, 258, 259, 261, 264, 265, 267, 268, 272, 273, 274, 275, 277, 281, 282, 289, 295, 298, 299, 301, 302, 303, 305, 308, 314, 316, 317, 320, 325, 328, 330, 331, 335, 336, 337, 339, 342, 344, 348, 350, 351, 359, 360, 363, 366, 367, 370, 371, 374, 380, 381, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 406, 409, 414, 416, 417, 419, 420, 426, 428, 429, 431, 432, 433, 434, 436, 439, 440, 459, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "famili": [5, 16, 31, 40, 46, 51, 61, 65, 69, 70, 75, 104, 114, 133, 141, 145, 148, 170, 207, 219, 242, 277, 289, 299, 304, 345, 361, 367, 373, 374, 377, 414, 459, 465, 469, 470, 471, 473, 478, 481, 482, 483, 485], "exact": [5, 7, 9, 11, 18, 24, 27, 33, 45, 61, 63, 69, 70, 73, 78, 79, 83, 85, 86, 94, 95, 100, 102, 103, 104, 107, 109, 111, 112, 113, 114, 118, 126, 133, 139, 154, 156, 159, 175, 182, 183, 189, 192, 197, 200, 203, 205, 208, 210, 212, 214, 218, 220, 228, 232, 235, 243, 250, 252, 258, 261, 272, 273, 274, 275, 276, 277, 281, 289, 290, 296, 298, 299, 300, 301, 305, 320, 325, 328, 334, 342, 344, 345, 348, 350, 351, 352, 353, 354, 355, 359, 360, 366, 369, 370, 374, 383, 385, 390, 392, 393, 394, 402, 403, 406, 415, 417, 425, 426, 428, 431, 434, 436, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 485], "whatev": [5, 29, 69, 74, 78, 79, 83, 88, 94, 95, 98, 108, 109, 111, 116, 126, 158, 182, 202, 207, 215, 232, 258, 273, 274, 298, 299, 303, 317, 325, 341, 351, 359, 364, 367, 370, 390, 393, 394, 399, 411, 434, 436, 466, 467, 468, 469, 470, 473, 476, 485], "forc": [5, 31, 32, 60, 65, 69, 83, 94, 95, 104, 107, 110, 116, 133, 139, 159, 165, 169, 183, 187, 189, 190, 192, 200, 218, 242, 247, 255, 264, 273, 288, 294, 299, 314, 315, 317, 325, 339, 352, 354, 355, 359, 367, 371, 393, 406, 411, 432, 436, 459, 473, 478, 479, 480, 481, 483, 484, 485], "suppli": [5, 18, 20, 31, 60, 69, 70, 72, 73, 76, 78, 79, 85, 95, 100, 102, 103, 104, 111, 113, 114, 115, 116, 126, 128, 144, 152, 158, 159, 167, 182, 183, 184, 187, 189, 192, 197, 200, 218, 222, 230, 233, 242, 250, 254, 255, 258, 259, 261, 265, 267, 273, 275, 289, 290, 294, 298, 299, 301, 303, 308, 314, 320, 330, 334, 341, 344, 347, 348, 351, 355, 360, 367, 370, 381, 385, 388, 390, 392, 398, 399, 403, 404, 406, 411, 419, 423, 425, 429, 431, 432, 434, 436, 440, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 481, 485], "never": [5, 18, 23, 27, 31, 32, 33, 40, 56, 57, 60, 65, 74, 83, 85, 86, 95, 100, 102, 104, 108, 109, 110, 111, 115, 116, 126, 133, 138, 139, 144, 145, 147, 150, 158, 164, 169, 172, 173, 175, 176, 181, 182, 183, 187, 189, 192, 196, 203, 206, 212, 218, 220, 233, 237, 247, 249, 250, 252, 254, 258, 261, 264, 265, 268, 271, 272, 273, 275, 284, 289, 298, 299, 300, 302, 303, 305, 320, 325, 328, 330, 334, 338, 340, 345, 347, 348, 351, 354, 355, 363, 364, 367, 370, 374, 389, 390, 393, 398, 404, 406, 407, 411, 414, 417, 419, 426, 429, 431, 432, 434, 436, 439, 440, 459, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485], "word": [5, 11, 31, 60, 69, 70, 73, 78, 83, 95, 100, 102, 106, 109, 111, 112, 114, 126, 161, 164, 166, 173, 179, 182, 189, 192, 196, 200, 208, 210, 215, 218, 243, 254, 281, 298, 302, 303, 325, 326, 332, 337, 347, 350, 351, 352, 356, 369, 370, 374, 390, 403, 416, 417, 421, 430, 434, 436, 438, 439, 440, 444, 445, 446, 453, 466, 468, 470, 471, 472, 474, 480, 481, 482, 483, 485], "invok": [5, 20, 23, 29, 33, 49, 55, 56, 60, 61, 65, 69, 85, 94, 95, 103, 104, 106, 107, 109, 110, 111, 114, 116, 120, 126, 133, 150, 158, 162, 173, 175, 182, 187, 189, 200, 217, 232, 233, 234, 238, 250, 252, 254, 261, 272, 273, 274, 289, 298, 299, 300, 303, 305, 306, 308, 314, 317, 319, 325, 326, 330, 338, 341, 342, 345, 347, 348, 351, 355, 359, 364, 367, 370, 372, 374, 376, 381, 382, 384, 392, 398, 403, 406, 411, 417, 418, 419, 420, 423, 424, 426, 427, 429, 431, 433, 436, 439, 441, 455, 459, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 482, 484, 485], "malloc": [5, 7, 32, 40, 83, 88, 220, 288, 428, 459, 466, 467, 469, 471, 479, 480, 481, 485], "onc": [5, 7, 22, 23, 24, 27, 31, 32, 33, 53, 54, 56, 60, 61, 79, 82, 83, 85, 86, 94, 95, 100, 102, 104, 108, 109, 110, 111, 113, 114, 116, 122, 123, 126, 129, 133, 138, 139, 144, 145, 146, 156, 158, 162, 164, 165, 166, 169, 172, 173, 175, 192, 194, 196, 200, 203, 212, 218, 220, 225, 230, 233, 237, 239, 241, 247, 252, 254, 257, 258, 259, 261, 264, 267, 273, 274, 275, 276, 277, 289, 290, 294, 298, 299, 301, 305, 312, 314, 320, 325, 326, 334, 335, 338, 339, 340, 344, 345, 347, 348, 351, 354, 363, 367, 370, 372, 374, 386, 392, 393, 394, 399, 403, 404, 406, 407, 411, 414, 415, 417, 419, 420, 428, 431, 432, 434, 436, 440, 459, 460, 465, 466, 467, 469, 470, 471, 472, 473, 474, 477, 478, 480, 482, 483, 484, 485], "space": [5, 31, 37, 40, 56, 60, 61, 69, 82, 83, 95, 102, 103, 104, 108, 111, 112, 114, 121, 126, 128, 149, 152, 157, 164, 167, 168, 173, 181, 183, 184, 190, 192, 196, 200, 205, 206, 208, 209, 219, 220, 232, 233, 249, 254, 255, 261, 265, 267, 268, 272, 274, 289, 290, 298, 299, 303, 306, 309, 320, 323, 325, 328, 337, 338, 339, 340, 342, 344, 351, 352, 353, 355, 367, 369, 370, 371, 372, 374, 377, 380, 381, 383, 386, 388, 398, 399, 401, 403, 411, 414, 417, 428, 430, 432, 436, 438, 439, 466, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 484, 485], "tab": [5, 63, 65, 87, 128, 152, 162, 181, 183, 184, 196, 200, 205, 209, 220, 232, 249, 254, 261, 268, 303, 323, 325, 326, 329, 337, 340, 351, 352, 355, 369, 373, 380, 398, 407, 423, 439, 445, 449, 453, 459, 466, 471, 473, 476, 478, 479, 481, 482, 483, 484, 485], "comma": [5, 32, 65, 69, 74, 78, 88, 100, 118, 158, 181, 192, 200, 218, 249, 255, 270, 272, 273, 274, 277, 298, 325, 351, 352, 367, 382, 384, 399, 404, 431, 432, 434, 435, 440, 446, 459, 470, 471, 472, 473, 474, 476, 479, 482, 483, 485, 486], "ignor": [5, 14, 18, 23, 24, 31, 32, 33, 37, 45, 56, 60, 61, 63, 65, 69, 72, 83, 86, 87, 100, 108, 111, 114, 115, 116, 121, 128, 129, 139, 141, 142, 144, 145, 149, 150, 156, 158, 162, 164, 165, 169, 172, 173, 175, 178, 181, 182, 183, 187, 189, 191, 192, 194, 196, 197, 200, 203, 206, 207, 215, 220, 222, 223, 225, 230, 232, 233, 234, 237, 243, 249, 250, 254, 255, 256, 257, 258, 261, 264, 267, 268, 272, 273, 274, 275, 276, 277, 278, 282, 289, 290, 294, 299, 300, 302, 303, 305, 308, 310, 314, 320, 325, 326, 334, 337, 338, 339, 340, 342, 344, 345, 347, 348, 351, 352, 354, 355, 359, 361, 363, 367, 369, 370, 371, 377, 381, 383, 384, 385, 386, 390, 392, 393, 398, 399, 402, 403, 404, 409, 411, 414, 417, 419, 420, 425, 426, 427, 429, 431, 432, 435, 436, 439, 441, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "within": [5, 7, 22, 31, 40, 44, 47, 49, 51, 65, 69, 74, 83, 86, 95, 102, 104, 106, 107, 109, 110, 111, 112, 120, 122, 126, 128, 144, 150, 161, 163, 164, 169, 173, 182, 183, 189, 192, 196, 197, 200, 202, 210, 218, 223, 225, 232, 237, 254, 255, 258, 259, 261, 273, 276, 277, 281, 289, 290, 291, 300, 303, 308, 313, 314, 318, 319, 325, 327, 330, 337, 338, 344, 345, 350, 351, 352, 355, 358, 359, 367, 369, 372, 374, 376, 381, 388, 390, 392, 393, 399, 404, 414, 415, 417, 424, 426, 427, 431, 432, 433, 434, 436, 439, 440, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485], "make": [5, 11, 14, 23, 31, 33, 43, 54, 56, 59, 60, 61, 65, 69, 70, 75, 78, 82, 83, 85, 86, 94, 99, 100, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 126, 128, 129, 133, 139, 144, 145, 146, 147, 158, 162, 163, 164, 166, 167, 169, 173, 175, 176, 181, 182, 183, 185, 187, 189, 192, 194, 196, 197, 198, 200, 203, 204, 207, 212, 213, 216, 218, 219, 220, 225, 228, 232, 233, 234, 237, 239, 241, 242, 249, 252, 254, 258, 261, 264, 265, 267, 272, 273, 274, 275, 276, 277, 281, 285, 287, 289, 294, 295, 298, 299, 300, 301, 302, 305, 308, 314, 318, 328, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 354, 359, 360, 363, 367, 368, 369, 370, 372, 374, 375, 381, 383, 384, 385, 388, 389, 390, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 407, 411, 415, 416, 417, 420, 426, 428, 430, 431, 432, 434, 436, 438, 439, 440, 460, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486], "tad": 5, "readabl": [5, 46, 65, 72, 95, 100, 102, 108, 109, 111, 112, 123, 124, 126, 139, 145, 156, 158, 166, 173, 182, 196, 197, 205, 212, 218, 237, 250, 252, 264, 273, 274, 289, 294, 299, 305, 309, 310, 313, 316, 325, 339, 345, 348, 349, 351, 354, 355, 356, 357, 373, 374, 382, 393, 405, 418, 439, 459, 467, 468, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485], "wchar_t": [5, 16, 31, 32, 56, 63, 65, 82, 83, 127, 182, 425, 482, 484, 485], "ucs": [5, 61, 359, 468, 478], "increment": [5, 23, 31, 32, 33, 40, 44, 47, 49, 56, 60, 61, 65, 78, 83, 86, 95, 100, 104, 109, 116, 124, 125, 128, 151, 197, 214, 276, 289, 298, 299, 351, 362, 370, 371, 374, 381, 390, 415, 417, 466, 468, 469, 470, 471, 473, 476, 477, 478, 485], "caus": [5, 9, 16, 18, 23, 31, 33, 40, 45, 49, 54, 56, 60, 61, 63, 74, 78, 83, 85, 86, 87, 95, 100, 104, 108, 109, 111, 115, 118, 120, 121, 126, 128, 129, 133, 139, 144, 158, 159, 162, 164, 165, 169, 173, 175, 181, 182, 183, 190, 192, 194, 196, 197, 200, 212, 215, 216, 219, 220, 232, 234, 235, 247, 249, 252, 254, 255, 258, 261, 264, 268, 272, 273, 275, 277, 281, 282, 288, 289, 290, 299, 303, 305, 308, 314, 319, 320, 325, 333, 334, 336, 339, 340, 344, 347, 348, 350, 351, 352, 359, 361, 367, 369, 370, 371, 372, 381, 383, 390, 392, 393, 394, 399, 404, 406, 409, 411, 414, 415, 419, 423, 426, 430, 431, 432, 433, 434, 435, 436, 439, 440, 447, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "becaus": [5, 23, 31, 32, 33, 40, 43, 45, 49, 51, 54, 55, 57, 60, 61, 69, 70, 78, 79, 81, 82, 83, 85, 86, 94, 95, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 126, 128, 133, 135, 139, 141, 142, 144, 154, 156, 157, 158, 163, 164, 167, 169, 172, 173, 175, 182, 187, 189, 190, 192, 194, 196, 200, 203, 208, 210, 212, 215, 218, 219, 220, 221, 222, 232, 233, 234, 237, 242, 243, 250, 251, 252, 254, 258, 259, 261, 264, 267, 273, 274, 275, 276, 277, 281, 287, 289, 290, 293, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 325, 334, 336, 337, 338, 340, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 363, 364, 367, 370, 371, 372, 374, 380, 388, 390, 392, 393, 394, 399, 403, 404, 405, 406, 410, 411, 414, 417, 419, 423, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 453, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "produc": [5, 7, 22, 23, 24, 33, 37, 56, 60, 81, 86, 87, 94, 95, 98, 100, 102, 104, 108, 109, 111, 112, 114, 116, 126, 128, 129, 144, 156, 158, 164, 167, 169, 173, 181, 182, 183, 189, 192, 193, 196, 200, 201, 203, 204, 208, 209, 210, 212, 215, 218, 220, 221, 230, 232, 235, 237, 238, 241, 242, 243, 255, 264, 267, 268, 273, 276, 282, 289, 294, 299, 305, 308, 311, 314, 319, 324, 325, 327, 348, 350, 351, 352, 354, 355, 359, 363, 370, 382, 383, 384, 388, 398, 401, 410, 411, 415, 416, 418, 419, 420, 425, 428, 432, 434, 436, 439, 453, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485], "found": [5, 14, 17, 22, 29, 31, 33, 40, 43, 47, 52, 56, 60, 61, 69, 73, 76, 78, 81, 82, 83, 86, 87, 89, 95, 98, 100, 103, 104, 106, 108, 109, 111, 114, 115, 119, 120, 126, 128, 129, 144, 156, 158, 164, 169, 173, 176, 181, 182, 183, 197, 200, 203, 204, 206, 210, 212, 214, 215, 218, 220, 222, 223, 230, 232, 233, 234, 235, 237, 240, 243, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 267, 271, 272, 273, 274, 276, 277, 278, 282, 284, 285, 288, 289, 292, 299, 301, 302, 303, 308, 316, 320, 325, 328, 338, 339, 342, 344, 346, 347, 348, 350, 351, 355, 359, 360, 363, 364, 367, 374, 376, 381, 383, 389, 390, 391, 392, 393, 394, 399, 404, 410, 411, 414, 416, 417, 418, 419, 423, 424, 427, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 445, 455, 456, 457, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "therefor": [5, 23, 31, 33, 40, 46, 47, 60, 61, 76, 78, 83, 85, 86, 94, 95, 100, 102, 104, 108, 109, 110, 111, 114, 122, 126, 128, 144, 152, 158, 164, 179, 182, 189, 215, 220, 221, 222, 232, 234, 239, 250, 258, 264, 268, 272, 275, 287, 289, 299, 300, 305, 319, 325, 336, 338, 339, 341, 344, 348, 351, 359, 370, 380, 390, 393, 404, 417, 418, 425, 426, 428, 431, 432, 434, 438, 439, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 481, 482, 485], "yet": [5, 13, 14, 23, 27, 29, 31, 32, 43, 60, 61, 69, 83, 89, 94, 95, 99, 100, 102, 110, 111, 119, 133, 139, 142, 144, 158, 172, 175, 182, 183, 192, 203, 204, 212, 218, 220, 234, 239, 243, 258, 264, 289, 299, 301, 303, 314, 340, 342, 348, 355, 370, 385, 390, 393, 414, 417, 428, 433, 435, 440, 466, 468, 469, 471, 473, 476, 479, 481, 482, 484, 485], "systemerror": [5, 23, 26, 43, 47, 52, 57, 61, 65, 220, 454, 481, 485], "constructor": [5, 18, 23, 27, 50, 52, 60, 61, 65, 69, 78, 83, 85, 89, 97, 103, 104, 107, 108, 109, 110, 118, 126, 128, 133, 145, 156, 157, 163, 164, 166, 167, 170, 173, 178, 181, 182, 187, 189, 192, 196, 200, 205, 208, 209, 210, 213, 214, 215, 218, 220, 225, 228, 232, 233, 241, 242, 244, 249, 250, 253, 255, 264, 265, 267, 268, 273, 274, 276, 277, 284, 289, 298, 304, 305, 311, 313, 314, 322, 331, 333, 334, 336, 337, 341, 342, 344, 345, 348, 351, 352, 358, 363, 364, 367, 369, 370, 372, 374, 388, 389, 390, 392, 393, 394, 399, 406, 407, 411, 417, 424, 426, 427, 429, 432, 434, 445, 447, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "compat": [5, 23, 24, 31, 40, 46, 54, 60, 63, 65, 69, 78, 85, 86, 89, 94, 97, 100, 102, 106, 108, 109, 111, 114, 115, 116, 125, 126, 129, 133, 144, 145, 150, 151, 164, 167, 173, 182, 190, 192, 200, 201, 203, 208, 210, 212, 214, 215, 220, 221, 229, 235, 237, 250, 252, 254, 255, 257, 258, 259, 260, 261, 264, 265, 272, 273, 274, 277, 289, 294, 299, 301, 302, 305, 307, 308, 314, 318, 320, 325, 328, 331, 338, 344, 347, 348, 351, 355, 359, 362, 363, 367, 370, 371, 373, 385, 388, 390, 391, 392, 398, 399, 401, 402, 403, 405, 411, 415, 423, 425, 426, 427, 429, 431, 432, 434, 436, 439, 440, 460, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "dict": [5, 10, 22, 23, 29, 31, 33, 51, 55, 56, 60, 65, 83, 88, 89, 94, 95, 97, 100, 103, 104, 118, 126, 128, 133, 166, 170, 173, 177, 181, 187, 188, 190, 193, 196, 197, 200, 212, 232, 233, 234, 251, 258, 259, 260, 261, 267, 268, 270, 273, 274, 275, 289, 294, 297, 305, 310, 313, 332, 336, 347, 348, 352, 360, 367, 370, 374, 381, 389, 390, 392, 406, 417, 423, 431, 432, 434, 435, 445, 446, 450, 454, 456, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "pair": [5, 7, 22, 27, 31, 38, 61, 65, 69, 74, 78, 83, 85, 95, 102, 104, 107, 111, 114, 126, 133, 139, 141, 145, 147, 150, 158, 161, 166, 173, 183, 187, 190, 192, 196, 197, 200, 203, 204, 209, 216, 218, 228, 235, 237, 247, 251, 261, 265, 267, 268, 277, 281, 289, 294, 299, 300, 302, 303, 305, 315, 328, 338, 344, 345, 347, 348, 351, 355, 360, 363, 364, 368, 370, 374, 380, 381, 388, 389, 390, 393, 398, 399, 406, 411, 414, 417, 420, 421, 431, 432, 434, 439, 440, 445, 446, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 485], "consecut": [5, 22, 61, 69, 104, 128, 149, 164, 267, 281, 351, 352, 388, 439, 459, 470, 479, 485], "add": [5, 7, 27, 29, 31, 32, 33, 43, 52, 55, 56, 60, 65, 69, 70, 74, 78, 79, 83, 86, 87, 89, 94, 95, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 113, 114, 115, 116, 118, 123, 125, 126, 128, 129, 144, 145, 147, 149, 158, 159, 162, 163, 164, 166, 167, 169, 173, 175, 183, 187, 188, 189, 191, 192, 194, 195, 197, 200, 201, 202, 203, 204, 207, 210, 212, 213, 215, 218, 230, 231, 232, 233, 234, 237, 239, 241, 243, 250, 251, 252, 254, 258, 261, 264, 267, 268, 270, 273, 274, 277, 282, 287, 289, 291, 295, 296, 297, 298, 299, 302, 305, 307, 308, 312, 313, 314, 325, 327, 334, 338, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 357, 359, 360, 363, 367, 369, 371, 373, 374, 380, 381, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 406, 411, 414, 415, 417, 418, 423, 424, 425, 426, 427, 431, 432, 434, 435, 436, 438, 439, 440, 444, 450, 453, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "serv": [5, 83, 86, 108, 109, 119, 133, 139, 141, 154, 192, 200, 209, 210, 233, 247, 252, 258, 274, 289, 299, 305, 319, 339, 347, 348, 350, 374, 388, 390, 411, 417, 424, 436, 439, 470, 474, 477, 478, 480, 482, 485], "respect": [5, 7, 18, 22, 23, 29, 31, 32, 37, 44, 45, 47, 49, 53, 59, 61, 69, 78, 82, 83, 85, 86, 94, 95, 103, 108, 109, 111, 118, 126, 128, 138, 147, 156, 157, 158, 161, 164, 169, 173, 182, 183, 189, 192, 197, 200, 201, 203, 215, 216, 218, 220, 222, 230, 232, 237, 250, 252, 257, 258, 261, 264, 268, 273, 274, 275, 276, 281, 284, 289, 299, 300, 302, 305, 311, 314, 315, 328, 338, 340, 342, 344, 345, 347, 348, 351, 352, 354, 355, 359, 363, 370, 371, 380, 381, 388, 390, 392, 401, 415, 430, 432, 434, 436, 440, 459, 466, 468, 470, 472, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485], "py_vabuildvalu": [5, 54], "py_fals": [6, 60, 61, 85, 435], "py_tru": [6, 60, 61, 85, 435], "pybool_check": 6, "pybool_typ": [6, 54], "py_return_fals": [6, 470], "py_return_tru": [6, 470], "pybool_fromlong": [6, 54], "certain": [7, 16, 23, 39, 40, 47, 60, 63, 69, 72, 83, 87, 95, 98, 102, 104, 108, 109, 111, 112, 116, 126, 139, 145, 150, 164, 179, 182, 189, 196, 200, 202, 203, 206, 210, 212, 213, 215, 216, 218, 220, 254, 261, 272, 273, 274, 275, 276, 277, 278, 289, 298, 299, 301, 303, 312, 313, 314, 344, 348, 353, 355, 363, 370, 371, 372, 374, 390, 391, 392, 393, 398, 411, 414, 423, 425, 432, 434, 436, 439, 465, 466, 467, 468, 469, 470, 472, 473, 475, 478, 479, 482, 483, 485], "wrap": [7, 18, 21, 31, 41, 55, 60, 65, 69, 89, 98, 100, 103, 106, 113, 114, 118, 120, 126, 128, 133, 135, 142, 144, 145, 147, 154, 156, 162, 164, 175, 182, 183, 187, 196, 197, 200, 208, 209, 214, 215, 227, 231, 232, 233, 237, 238, 241, 249, 254, 258, 259, 260, 261, 264, 267, 273, 274, 276, 287, 289, 298, 299, 308, 310, 339, 347, 348, 351, 354, 359, 361, 367, 368, 373, 381, 389, 390, 392, 393, 394, 398, 399, 409, 411, 417, 421, 431, 432, 456, 465, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 483, 485], "parti": [7, 24, 29, 31, 33, 54, 65, 69, 74, 75, 76, 94, 95, 109, 116, 118, 133, 138, 139, 164, 170, 182, 187, 189, 190, 232, 242, 259, 273, 289, 299, 305, 308, 325, 336, 340, 348, 350, 359, 360, 370, 374, 384, 390, 403, 404, 406, 429, 430, 432, 465, 466, 467, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 483, 484, 485], "librari": [7, 18, 23, 24, 31, 32, 33, 40, 43, 54, 56, 60, 63, 65, 70, 72, 75, 76, 79, 81, 82, 83, 84, 86, 87, 89, 90, 94, 95, 98, 100, 101, 102, 104, 106, 110, 111, 112, 113, 114, 115, 116, 120, 124, 126, 130, 133, 139, 144, 145, 148, 151, 172, 173, 175, 183, 184, 189, 190, 192, 193, 198, 200, 201, 210, 215, 219, 235, 237, 242, 250, 254, 257, 259, 262, 264, 268, 270, 272, 273, 275, 281, 289, 293, 298, 299, 300, 302, 304, 305, 308, 314, 319, 320, 325, 326, 334, 336, 337, 339, 340, 344, 347, 348, 350, 351, 352, 355, 359, 360, 363, 367, 370, 371, 373, 374, 380, 383, 390, 392, 394, 395, 398, 403, 404, 411, 413, 414, 426, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 449, 458, 459, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486], "special": [7, 14, 23, 29, 31, 32, 33, 40, 47, 55, 57, 58, 60, 61, 65, 69, 70, 74, 78, 83, 85, 94, 95, 97, 100, 102, 104, 108, 109, 110, 111, 114, 116, 120, 122, 126, 128, 133, 142, 144, 149, 150, 158, 159, 161, 162, 173, 174, 175, 181, 182, 183, 186, 187, 189, 193, 197, 200, 203, 210, 212, 215, 218, 220, 227, 229, 235, 237, 238, 252, 254, 257, 260, 261, 265, 267, 268, 272, 273, 274, 277, 278, 287, 288, 289, 296, 298, 299, 302, 305, 308, 325, 327, 330, 335, 337, 338, 339, 344, 348, 349, 350, 354, 355, 359, 363, 366, 370, 374, 380, 392, 393, 398, 399, 403, 406, 411, 414, 417, 419, 423, 429, 430, 433, 434, 437, 439, 440, 460, 465, 466, 467, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "imag": [7, 15, 40, 65, 95, 97, 158, 161, 183, 205, 207, 213, 232, 233, 250, 256, 268, 295, 296, 328, 351, 352, 359, 373, 381, 388, 399, 406, 410, 423, 432, 435, 477, 482, 485], "numer": [7, 39, 45, 60, 61, 65, 78, 95, 100, 104, 108, 111, 112, 114, 115, 129, 150, 152, 154, 161, 164, 181, 183, 192, 197, 216, 219, 220, 228, 232, 240, 241, 245, 247, 249, 252, 260, 268, 272, 273, 281, 289, 296, 299, 308, 314, 316, 320, 325, 331, 337, 342, 344, 347, 348, 350, 352, 359, 368, 374, 381, 382, 388, 391, 392, 393, 399, 417, 423, 426, 428, 434, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 483, 485], "analysi": [7, 31, 65, 69, 111, 129, 159, 161, 196, 229, 260, 270, 285, 314, 390, 434, 437, 438, 440, 471, 478, 480, 485], "while": [7, 16, 22, 23, 27, 31, 33, 34, 38, 43, 46, 47, 49, 54, 60, 61, 65, 69, 70, 74, 76, 78, 82, 83, 85, 86, 94, 95, 97, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 116, 118, 121, 122, 126, 128, 133, 139, 140, 141, 144, 145, 154, 156, 158, 161, 164, 166, 173, 175, 176, 178, 181, 182, 183, 185, 189, 190, 192, 196, 197, 198, 200, 203, 206, 215, 216, 218, 220, 232, 233, 237, 239, 241, 242, 243, 249, 250, 254, 258, 259, 264, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 281, 289, 290, 298, 299, 302, 303, 305, 308, 312, 314, 317, 320, 322, 324, 325, 332, 334, 335, 337, 339, 341, 342, 344, 345, 348, 351, 352, 354, 355, 359, 367, 369, 370, 371, 374, 376, 384, 385, 388, 390, 392, 398, 399, 402, 403, 404, 405, 414, 417, 426, 428, 432, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 453, 454, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "common": [7, 23, 31, 32, 33, 55, 60, 65, 69, 74, 76, 81, 83, 86, 94, 95, 99, 102, 103, 104, 107, 108, 109, 112, 113, 114, 115, 120, 121, 126, 144, 154, 164, 166, 173, 175, 181, 182, 187, 188, 196, 200, 202, 207, 208, 210, 212, 214, 215, 218, 220, 223, 226, 230, 242, 243, 249, 250, 252, 254, 259, 260, 264, 265, 267, 268, 271, 273, 277, 278, 281, 282, 289, 290, 291, 298, 299, 301, 305, 337, 338, 339, 342, 345, 347, 348, 350, 353, 354, 355, 357, 363, 366, 367, 368, 369, 370, 371, 372, 374, 378, 380, 388, 390, 392, 393, 394, 395, 398, 399, 403, 404, 412, 421, 423, 425, 426, 428, 429, 431, 432, 434, 436, 439, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486], "characterist": [7, 95, 305, 353, 359, 471, 472], "back": [7, 10, 15, 22, 25, 27, 33, 37, 39, 40, 56, 60, 61, 65, 69, 73, 83, 86, 94, 95, 99, 100, 104, 106, 109, 110, 111, 112, 113, 114, 118, 126, 128, 139, 152, 158, 161, 162, 164, 167, 173, 175, 183, 187, 189, 192, 196, 197, 200, 201, 203, 212, 215, 222, 229, 230, 232, 234, 237, 239, 250, 252, 258, 264, 268, 274, 275, 284, 288, 289, 290, 295, 298, 299, 300, 301, 303, 305, 318, 320, 325, 336, 344, 345, 347, 348, 349, 351, 352, 359, 367, 371, 374, 382, 383, 388, 394, 398, 399, 417, 421, 423, 424, 426, 428, 429, 431, 432, 436, 440, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485], "desir": [7, 9, 23, 31, 33, 40, 58, 83, 95, 102, 103, 104, 108, 109, 111, 114, 116, 126, 142, 144, 164, 167, 173, 175, 182, 183, 195, 196, 197, 215, 218, 219, 230, 233, 242, 247, 252, 254, 257, 258, 264, 265, 272, 273, 277, 278, 282, 284, 298, 300, 303, 308, 313, 317, 325, 326, 341, 345, 347, 348, 350, 351, 352, 367, 369, 370, 374, 380, 381, 388, 403, 406, 409, 416, 417, 420, 432, 434, 436, 459, 465, 466, 468, 469, 470, 471, 472, 473, 479, 480, 481, 483, 485], "situat": [7, 33, 40, 60, 69, 73, 83, 85, 95, 98, 100, 104, 108, 109, 110, 112, 113, 115, 116, 120, 126, 158, 164, 175, 187, 214, 218, 220, 237, 242, 258, 264, 273, 277, 289, 298, 342, 367, 370, 394, 401, 404, 414, 432, 441, 468, 473, 474, 479, 480, 481, 485], "direct": [7, 13, 16, 24, 27, 29, 31, 32, 33, 40, 43, 44, 47, 51, 54, 55, 56, 60, 61, 64, 65, 69, 70, 74, 78, 82, 83, 85, 86, 94, 95, 98, 100, 103, 106, 107, 108, 109, 110, 113, 115, 116, 118, 120, 121, 122, 126, 128, 138, 139, 144, 152, 156, 157, 158, 164, 165, 166, 167, 169, 170, 172, 173, 175, 181, 182, 187, 189, 192, 193, 196, 197, 199, 201, 203, 208, 212, 213, 216, 217, 218, 219, 220, 225, 228, 232, 233, 234, 239, 242, 249, 250, 252, 254, 257, 259, 260, 261, 264, 265, 268, 272, 273, 274, 276, 277, 284, 286, 289, 298, 299, 300, 301, 305, 308, 312, 313, 314, 320, 325, 326, 330, 336, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 363, 367, 369, 370, 371, 372, 374, 379, 380, 381, 383, 384, 385, 388, 389, 392, 393, 394, 399, 404, 406, 411, 414, 417, 418, 421, 425, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 447, 459, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "intermedi": [7, 89, 94, 97, 104, 192, 197, 213, 233, 258, 267, 281, 298, 299, 338, 348, 393, 436, 471, 475, 477, 482, 485], "facil": [7, 31, 65, 100, 102, 108, 124, 148, 150, 162, 163, 183, 254, 260, 264, 270, 275, 277, 299, 305, 344, 348, 352, 361, 363, 374, 388, 432, 465, 469, 485], "level": [7, 13, 16, 22, 23, 24, 29, 30, 32, 33, 40, 41, 54, 56, 60, 65, 69, 76, 83, 84, 85, 89, 94, 95, 99, 100, 103, 104, 106, 109, 110, 112, 113, 114, 115, 116, 124, 126, 128, 132, 133, 135, 139, 141, 142, 144, 145, 146, 152, 156, 157, 159, 161, 164, 166, 169, 170, 172, 173, 175, 176, 183, 186, 187, 189, 196, 197, 200, 201, 209, 211, 214, 217, 218, 219, 220, 226, 230, 232, 233, 234, 237, 238, 239, 241, 243, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 266, 267, 274, 275, 276, 277, 285, 287, 288, 289, 290, 291, 294, 299, 300, 301, 302, 303, 305, 306, 308, 310, 311, 313, 314, 317, 318, 319, 320, 321, 325, 327, 328, 330, 336, 337, 339, 340, 342, 347, 348, 350, 354, 357, 359, 360, 361, 363, 364, 365, 367, 369, 370, 374, 380, 381, 389, 392, 393, 399, 403, 404, 406, 407, 411, 413, 414, 415, 417, 419, 423, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 444, 454, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "side": [7, 14, 29, 31, 57, 65, 83, 85, 94, 95, 100, 104, 109, 111, 112, 114, 115, 128, 133, 139, 158, 161, 166, 172, 175, 183, 187, 193, 196, 203, 217, 230, 233, 249, 250, 258, 272, 275, 289, 294, 299, 305, 308, 317, 324, 329, 330, 336, 344, 345, 351, 355, 359, 367, 374, 381, 392, 393, 411, 417, 429, 431, 434, 436, 440, 446, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "export": [7, 23, 33, 40, 41, 43, 46, 60, 65, 69, 78, 81, 82, 83, 87, 95, 115, 116, 124, 128, 157, 181, 189, 305, 312, 344, 347, 351, 359, 383, 440, 460, 469, 473, 477, 478, 480, 481, 482, 483, 484, 485], "expos": [7, 15, 26, 36, 41, 42, 43, 44, 46, 52, 54, 55, 59, 60, 61, 69, 82, 83, 86, 99, 108, 115, 144, 182, 183, 187, 192, 217, 222, 257, 258, 261, 265, 268, 272, 273, 287, 289, 299, 305, 313, 336, 337, 342, 351, 352, 353, 355, 359, 384, 389, 391, 406, 409, 411, 424, 426, 429, 432, 436, 469, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "section": [7, 16, 17, 32, 33, 40, 49, 52, 55, 60, 61, 65, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 95, 98, 100, 102, 103, 104, 106, 107, 108, 109, 111, 114, 115, 116, 120, 126, 128, 133, 138, 139, 142, 144, 149, 151, 154, 158, 162, 164, 166, 173, 175, 181, 182, 187, 190, 192, 200, 201, 202, 205, 209, 210, 218, 219, 224, 237, 242, 248, 249, 250, 254, 255, 257, 264, 267, 268, 273, 274, 277, 298, 299, 305, 311, 313, 314, 320, 325, 334, 338, 344, 347, 348, 351, 352, 354, 355, 359, 363, 370, 372, 374, 388, 392, 393, 394, 398, 399, 411, 413, 414, 415, 417, 419, 420, 423, 426, 431, 432, 433, 434, 436, 439, 440, 441, 447, 455, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "consum": [7, 56, 60, 61, 65, 94, 95, 104, 111, 112, 120, 126, 129, 132, 134, 140, 141, 158, 164, 175, 181, 197, 201, 214, 238, 249, 264, 267, 268, 289, 294, 298, 299, 302, 304, 314, 322, 325, 328, 336, 354, 367, 370, 386, 390, 393, 398, 413, 417, 428, 432, 435, 459, 466, 470, 471, 472, 473, 477, 478, 479, 481, 483, 485], "sever": [7, 24, 27, 31, 33, 40, 63, 69, 70, 72, 78, 79, 82, 83, 85, 87, 94, 95, 100, 103, 104, 108, 109, 111, 112, 114, 115, 116, 118, 126, 128, 133, 142, 157, 163, 164, 167, 172, 173, 182, 183, 189, 190, 192, 194, 197, 200, 202, 206, 218, 219, 220, 230, 232, 243, 258, 261, 265, 273, 274, 275, 277, 279, 287, 289, 293, 298, 299, 300, 301, 302, 305, 312, 313, 314, 317, 325, 327, 335, 341, 342, 344, 345, 347, 348, 349, 351, 354, 355, 363, 370, 373, 374, 380, 381, 383, 384, 385, 388, 390, 391, 392, 393, 394, 399, 404, 406, 409, 410, 413, 419, 423, 428, 429, 431, 432, 436, 438, 440, 453, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "obtain": [7, 29, 33, 61, 102, 107, 108, 111, 133, 142, 156, 158, 159, 160, 183, 189, 192, 196, 203, 204, 210, 212, 215, 222, 232, 239, 242, 255, 264, 265, 267, 272, 273, 274, 275, 276, 284, 289, 298, 299, 300, 314, 317, 319, 325, 344, 348, 351, 355, 358, 371, 399, 402, 403, 406, 411, 417, 418, 419, 430, 431, 434, 440, 466, 468, 469, 471, 472, 477, 478, 479, 480, 481, 482, 485], "simpl": [7, 31, 33, 41, 60, 61, 64, 65, 70, 72, 73, 75, 76, 78, 79, 81, 83, 85, 94, 95, 100, 102, 104, 107, 108, 109, 113, 114, 115, 116, 119, 121, 126, 128, 145, 146, 147, 157, 158, 162, 164, 167, 173, 175, 176, 179, 180, 182, 187, 189, 190, 193, 195, 196, 201, 203, 207, 212, 214, 215, 216, 218, 229, 230, 233, 234, 237, 241, 249, 251, 255, 260, 262, 268, 274, 275, 277, 279, 284, 289, 295, 298, 299, 301, 303, 305, 310, 313, 314, 325, 330, 335, 339, 342, 344, 350, 351, 352, 363, 364, 367, 370, 372, 374, 383, 384, 385, 388, 389, 390, 392, 394, 398, 399, 403, 404, 406, 410, 412, 413, 414, 415, 417, 418, 423, 424, 425, 426, 431, 434, 435, 437, 444, 450, 459, 465, 466, 467, 470, 471, 472, 473, 475, 477, 478, 479, 480, 483, 484, 485, 486], "orient": [7, 40, 65, 86, 95, 97, 103, 104, 114, 139, 157, 208, 226, 229, 260, 289, 314, 344, 351, 370, 371, 373, 374, 381, 388, 444, 467, 472, 477, 479], "multi": [7, 16, 30, 31, 33, 65, 81, 83, 94, 95, 96, 97, 104, 109, 111, 114, 119, 124, 128, 145, 156, 157, 192, 196, 197, 200, 254, 258, 267, 273, 274, 276, 289, 322, 325, 328, 331, 337, 338, 350, 351, 370, 372, 411, 424, 426, 431, 439, 449, 459, 465, 466, 471, 473, 476, 478, 479, 483, 485, 486], "file": [7, 16, 20, 23, 25, 29, 30, 31, 32, 39, 43, 47, 54, 56, 60, 63, 65, 70, 71, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 91, 96, 97, 99, 103, 104, 106, 111, 112, 115, 118, 120, 121, 123, 124, 125, 127, 128, 132, 136, 137, 138, 139, 142, 144, 145, 146, 147, 149, 150, 151, 152, 155, 158, 159, 160, 162, 163, 164, 166, 169, 175, 182, 183, 184, 189, 190, 191, 192, 193, 196, 197, 199, 203, 207, 208, 211, 213, 214, 215, 218, 219, 220, 222, 224, 225, 226, 227, 230, 232, 235, 236, 237, 238, 242, 247, 249, 250, 252, 255, 256, 257, 260, 261, 265, 266, 268, 270, 271, 272, 273, 275, 277, 279, 280, 282, 283, 285, 286, 287, 289, 291, 294, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 323, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 339, 340, 342, 344, 345, 347, 348, 349, 351, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 399, 401, 403, 404, 406, 407, 408, 409, 410, 411, 413, 415, 416, 418, 420, 421, 423, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 439, 440, 444, 445, 446, 447, 449, 450, 452, 453, 454, 456, 459, 462, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 484, 485, 486], "seri": [7, 31, 104, 111, 113, 118, 126, 128, 162, 181, 182, 192, 197, 232, 298, 320, 344, 351, 360, 370, 380, 390, 393, 394, 398, 411, 434, 445, 453, 454, 468, 470, 471, 472, 473, 476, 479, 482], "written": [7, 9, 18, 23, 24, 32, 33, 40, 43, 47, 56, 61, 65, 69, 70, 73, 74, 76, 78, 79, 82, 83, 86, 94, 95, 100, 101, 102, 103, 104, 109, 110, 111, 112, 114, 116, 118, 120, 123, 133, 139, 142, 144, 145, 152, 153, 158, 159, 163, 164, 167, 169, 173, 175, 181, 182, 183, 190, 197, 199, 200, 203, 209, 212, 220, 221, 232, 234, 237, 241, 242, 252, 254, 261, 264, 275, 277, 284, 287, 289, 294, 298, 299, 301, 305, 306, 307, 310, 313, 314, 317, 319, 326, 330, 334, 336, 338, 339, 344, 345, 347, 348, 350, 351, 359, 362, 363, 366, 367, 384, 386, 388, 389, 390, 392, 394, 404, 405, 406, 409, 411, 412, 414, 417, 423, 424, 425, 426, 427, 430, 432, 435, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "intern": [7, 8, 9, 11, 22, 23, 24, 29, 31, 32, 33, 39, 40, 43, 52, 56, 58, 60, 61, 65, 69, 83, 85, 86, 94, 100, 102, 103, 104, 108, 109, 110, 111, 114, 115, 118, 124, 126, 128, 133, 146, 156, 161, 162, 163, 164, 167, 173, 181, 182, 187, 189, 190, 192, 200, 206, 211, 214, 215, 217, 220, 242, 250, 252, 254, 258, 260, 261, 264, 267, 271, 272, 273, 275, 276, 280, 281, 282, 284, 289, 299, 303, 305, 308, 313, 314, 320, 321, 328, 334, 337, 338, 339, 341, 344, 347, 348, 353, 355, 357, 359, 363, 364, 367, 370, 371, 374, 380, 381, 385, 388, 390, 392, 399, 402, 403, 404, 406, 414, 415, 417, 419, 423, 426, 427, 428, 432, 434, 454, 460, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "readinto": [7, 65, 124, 156, 249, 262, 264, 305, 472, 478, 480, 485], "argument": [7, 9, 11, 13, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 40, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 70, 76, 78, 81, 82, 83, 85, 86, 88, 89, 94, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 128, 133, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 179, 181, 183, 184, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 281, 282, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 319, 320, 321, 323, 325, 326, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 357, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 376, 381, 383, 384, 385, 388, 389, 390, 392, 393, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 415, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 440, 441, 444, 446, 447, 449, 450, 454, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485], "select": [7, 54, 56, 61, 63, 65, 69, 70, 78, 94, 103, 108, 111, 112, 114, 126, 128, 129, 133, 145, 147, 161, 166, 175, 182, 183, 217, 218, 220, 230, 232, 237, 249, 253, 254, 255, 258, 259, 260, 262, 264, 266, 267, 268, 272, 274, 276, 287, 289, 294, 299, 305, 311, 314, 317, 319, 335, 339, 342, 344, 345, 347, 351, 352, 354, 355, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 388, 394, 407, 411, 417, 421, 428, 431, 432, 433, 434, 436, 460, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 481, 482, 483, 484, 485], "reject": [7, 107, 111, 173, 250, 255, 281, 324, 390, 439, 440, 466, 473, 479, 481, 485], "acquir": [7, 31, 46, 65, 83, 99, 121, 124, 143, 170, 175, 215, 222, 257, 273, 277, 289, 299, 339, 348, 363, 370, 379, 432, 471, 472, 473, 474, 477, 478, 480, 482, 485], "over": [7, 13, 22, 23, 24, 28, 31, 33, 34, 40, 46, 47, 55, 61, 65, 69, 73, 83, 84, 85, 94, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 114, 126, 128, 129, 133, 139, 147, 150, 158, 159, 166, 167, 172, 173, 176, 181, 182, 183, 189, 190, 192, 196, 197, 200, 203, 208, 209, 211, 212, 218, 226, 230, 232, 233, 237, 239, 243, 250, 254, 255, 258, 260, 264, 265, 267, 273, 274, 275, 277, 282, 289, 294, 299, 305, 306, 311, 312, 314, 325, 328, 334, 335, 338, 342, 344, 347, 348, 350, 351, 352, 355, 357, 359, 363, 367, 372, 374, 380, 381, 382, 383, 384, 389, 390, 392, 393, 394, 401, 402, 404, 411, 413, 414, 416, 417, 423, 428, 431, 432, 434, 436, 439, 444, 445, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485], "target": [7, 31, 33, 61, 65, 69, 70, 72, 78, 94, 103, 106, 108, 109, 110, 116, 126, 128, 133, 139, 175, 189, 192, 197, 249, 254, 258, 259, 261, 274, 275, 279, 289, 290, 298, 299, 302, 320, 322, 325, 338, 339, 344, 345, 347, 358, 363, 367, 370, 374, 376, 390, 393, 403, 411, 414, 417, 419, 423, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 440, 446, 459, 462, 465, 469, 471, 472, 474, 476, 477, 478, 479, 482, 483, 485], "pyobject_getbuff": [7, 46, 60, 472, 485], "right": [7, 15, 16, 40, 45, 61, 65, 69, 70, 72, 73, 78, 81, 82, 83, 95, 100, 102, 104, 109, 111, 112, 114, 116, 118, 128, 129, 147, 150, 152, 158, 161, 162, 164, 166, 175, 182, 183, 189, 192, 196, 197, 200, 203, 220, 223, 226, 229, 232, 233, 242, 254, 255, 261, 273, 281, 294, 295, 298, 299, 301, 302, 305, 308, 314, 325, 336, 344, 348, 351, 352, 360, 369, 374, 379, 380, 381, 388, 392, 393, 394, 404, 407, 408, 415, 428, 429, 430, 431, 432, 434, 439, 440, 456, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 479, 481, 482, 483, 485], "sibl": [7, 95, 118, 126, 232, 381, 414], "isn": [7, 22, 23, 29, 31, 49, 60, 69, 70, 76, 83, 86, 89, 94, 95, 98, 99, 100, 102, 103, 107, 109, 110, 111, 112, 114, 116, 120, 121, 126, 128, 139, 144, 154, 163, 164, 172, 175, 181, 189, 197, 200, 203, 209, 211, 212, 218, 234, 241, 250, 255, 261, 264, 275, 299, 302, 308, 320, 325, 344, 345, 348, 349, 350, 359, 360, 374, 383, 392, 393, 394, 398, 407, 409, 410, 411, 413, 423, 432, 440, 453, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 485], "anymor": [7, 29, 31, 46, 60, 61, 95, 100, 112, 139, 234, 268, 289, 299, 344, 359, 388, 473, 474, 477, 478, 483, 485], "could": [7, 23, 29, 31, 33, 40, 45, 53, 60, 69, 70, 73, 74, 81, 83, 86, 87, 95, 98, 100, 102, 103, 104, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 122, 126, 128, 133, 135, 138, 139, 147, 158, 162, 173, 182, 183, 189, 200, 207, 208, 213, 215, 220, 223, 230, 232, 234, 235, 237, 243, 254, 257, 261, 264, 265, 267, 268, 273, 274, 275, 277, 289, 298, 299, 301, 302, 303, 305, 314, 317, 320, 325, 327, 335, 337, 339, 344, 347, 355, 359, 363, 367, 370, 373, 374, 386, 390, 392, 393, 394, 398, 399, 401, 402, 406, 411, 414, 429, 432, 434, 436, 438, 439, 440, 447, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "lead": [7, 18, 37, 60, 61, 69, 83, 85, 95, 107, 108, 109, 110, 111, 122, 128, 144, 157, 158, 162, 169, 173, 189, 192, 194, 196, 200, 203, 206, 212, 215, 218, 220, 228, 232, 235, 238, 250, 252, 254, 257, 258, 261, 264, 265, 267, 273, 275, 277, 281, 282, 289, 299, 300, 302, 303, 305, 314, 320, 324, 344, 348, 350, 351, 352, 354, 359, 361, 364, 367, 369, 371, 372, 385, 392, 393, 398, 399, 404, 414, 417, 426, 431, 432, 433, 434, 436, 439, 440, 441, 459, 465, 466, 469, 470, 471, 472, 474, 478, 479, 481, 482, 483, 484, 485], "various": [7, 20, 24, 33, 40, 55, 59, 60, 65, 69, 70, 74, 78, 83, 85, 89, 95, 100, 101, 102, 103, 104, 110, 111, 112, 114, 116, 118, 123, 126, 139, 152, 158, 164, 175, 182, 184, 187, 192, 196, 200, 201, 204, 210, 215, 218, 220, 223, 224, 234, 237, 243, 249, 250, 257, 258, 260, 264, 265, 270, 274, 279, 283, 284, 287, 291, 296, 298, 299, 302, 304, 306, 314, 320, 337, 342, 344, 345, 346, 347, 348, 351, 352, 354, 359, 367, 371, 374, 389, 391, 392, 394, 399, 401, 411, 413, 417, 432, 434, 436, 439, 440, 441, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "resourc": [7, 23, 31, 46, 60, 65, 69, 76, 78, 94, 95, 101, 112, 113, 115, 125, 126, 128, 138, 139, 143, 148, 172, 175, 194, 200, 219, 220, 233, 249, 255, 259, 260, 268, 273, 286, 289, 290, 299, 305, 308, 335, 338, 344, 348, 351, 359, 367, 370, 374, 381, 386, 392, 395, 398, 399, 402, 404, 409, 411, 413, 417, 420, 423, 432, 436, 459, 469, 471, 472, 473, 476, 477, 481, 484, 485], "leak": [7, 31, 36, 43, 56, 57, 83, 109, 232, 234, 289, 299, 355, 359, 386, 434, 466, 467, 473, 474, 477, 479, 480, 484, 485], "simpli": [7, 33, 60, 69, 72, 73, 74, 78, 82, 83, 85, 86, 89, 94, 95, 98, 100, 104, 107, 109, 110, 111, 114, 116, 122, 126, 144, 145, 157, 159, 162, 164, 173, 182, 183, 189, 192, 200, 230, 232, 237, 239, 247, 258, 261, 268, 274, 275, 278, 289, 298, 299, 302, 303, 305, 310, 320, 325, 330, 331, 339, 342, 345, 347, 349, 352, 355, 359, 370, 389, 390, 392, 393, 394, 399, 404, 406, 407, 411, 413, 414, 415, 423, 425, 430, 436, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 480, 485], "anoth": [7, 23, 29, 31, 33, 40, 54, 55, 60, 61, 69, 72, 73, 78, 82, 83, 85, 86, 87, 94, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 126, 132, 133, 138, 139, 144, 145, 150, 158, 162, 164, 169, 172, 173, 175, 179, 182, 183, 189, 192, 200, 201, 203, 210, 218, 220, 228, 230, 232, 233, 237, 239, 242, 243, 250, 252, 254, 257, 258, 261, 264, 267, 268, 273, 274, 276, 277, 289, 293, 294, 298, 299, 302, 303, 305, 307, 314, 315, 317, 320, 325, 334, 338, 339, 345, 347, 348, 350, 351, 352, 355, 359, 370, 372, 374, 380, 381, 383, 384, 388, 390, 392, 393, 394, 398, 399, 406, 409, 411, 412, 413, 414, 415, 417, 418, 426, 429, 430, 431, 432, 434, 436, 440, 447, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485], "programm": [7, 26, 33, 60, 78, 83, 87, 90, 95, 102, 103, 108, 112, 113, 122, 129, 181, 183, 187, 189, 192, 200, 201, 220, 272, 277, 281, 289, 298, 299, 301, 344, 347, 351, 359, 373, 374, 380, 388, 394, 404, 406, 409, 431, 440, 467, 468, 470, 471, 472, 477, 485], "slice": [7, 36, 38, 40, 51, 53, 57, 65, 95, 97, 104, 110, 127, 128, 147, 174, 177, 182, 197, 213, 220, 232, 235, 260, 267, 270, 284, 289, 290, 297, 299, 302, 305, 325, 347, 351, 419, 432, 435, 440, 446, 450, 453, 454, 466, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482, 484, 485, 486], "mechan": [7, 11, 14, 31, 33, 43, 58, 60, 83, 85, 89, 94, 95, 102, 103, 108, 109, 111, 112, 116, 119, 120, 122, 133, 144, 149, 175, 182, 187, 199, 200, 204, 210, 233, 250, 251, 252, 253, 255, 257, 259, 265, 266, 272, 273, 274, 275, 277, 278, 290, 298, 305, 308, 323, 325, 328, 330, 339, 342, 344, 345, 348, 351, 354, 370, 374, 380, 381, 392, 399, 403, 404, 427, 432, 436, 439, 440, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 483, 484, 485], "abil": [7, 72, 82, 83, 95, 99, 102, 104, 108, 109, 111, 116, 123, 128, 199, 220, 234, 258, 274, 289, 298, 330, 338, 351, 352, 390, 392, 414, 425, 426, 427, 430, 431, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 485], "quit": [7, 65, 76, 78, 82, 83, 86, 94, 95, 99, 100, 102, 104, 108, 109, 111, 112, 126, 150, 174, 175, 182, 183, 190, 195, 207, 230, 243, 254, 262, 264, 275, 281, 289, 294, 298, 303, 311, 315, 341, 342, 348, 357, 373, 374, 402, 434, 436, 438, 445, 452, 454, 455, 466, 467, 468, 469, 471, 478, 479, 485], "easili": [7, 23, 40, 70, 72, 73, 82, 83, 86, 94, 95, 100, 107, 108, 109, 110, 111, 120, 158, 164, 173, 175, 181, 182, 207, 218, 232, 237, 239, 243, 261, 303, 325, 337, 351, 367, 392, 406, 432, 439, 455, 465, 466, 469, 471, 475, 477, 478, 480, 481, 484, 485], "constant": [7, 31, 43, 55, 60, 61, 65, 85, 86, 94, 95, 100, 102, 109, 121, 124, 126, 128, 133, 144, 161, 164, 167, 170, 172, 179, 181, 184, 189, 190, 192, 197, 200, 218, 222, 232, 233, 234, 242, 243, 249, 251, 257, 260, 261, 264, 267, 270, 272, 273, 276, 279, 281, 287, 288, 289, 298, 299, 301, 304, 305, 306, 310, 314, 325, 328, 332, 334, 335, 339, 344, 348, 349, 350, 351, 359, 361, 363, 364, 366, 367, 368, 370, 374, 380, 383, 386, 390, 391, 402, 408, 410, 414, 416, 417, 419, 423, 426, 428, 432, 434, 439, 445, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "manipul": [7, 31, 32, 33, 40, 43, 52, 65, 69, 83, 86, 104, 107, 109, 116, 150, 151, 175, 181, 182, 183, 189, 192, 201, 202, 212, 214, 226, 237, 245, 260, 262, 264, 275, 289, 291, 299, 302, 314, 330, 337, 338, 340, 344, 349, 350, 351, 357, 359, 374, 380, 381, 398, 411, 414, 417, 424, 429, 436, 459, 466, 469, 472, 476, 478, 479, 481, 483, 484, 485], "system": [7, 16, 23, 24, 31, 32, 33, 40, 56, 60, 65, 70, 72, 74, 75, 76, 78, 79, 81, 83, 84, 87, 94, 95, 96, 102, 104, 106, 108, 109, 110, 111, 114, 115, 116, 120, 121, 124, 125, 127, 133, 139, 142, 145, 148, 150, 157, 161, 162, 169, 170, 173, 175, 179, 181, 182, 183, 189, 192, 193, 199, 214, 215, 216, 217, 218, 220, 221, 227, 230, 232, 235, 237, 238, 249, 252, 254, 255, 257, 258, 259, 260, 262, 264, 272, 273, 274, 275, 276, 277, 278, 282, 284, 288, 289, 290, 292, 293, 300, 301, 302, 305, 307, 308, 309, 311, 314, 315, 316, 317, 320, 321, 328, 330, 332, 334, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 351, 354, 357, 360, 361, 363, 366, 367, 370, 371, 374, 380, 386, 388, 389, 390, 392, 393, 394, 395, 399, 403, 407, 409, 410, 411, 413, 414, 417, 418, 419, 420, 423, 424, 425, 429, 430, 432, 437, 439, 440, 441, 455, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 486], "around": [7, 23, 25, 29, 31, 41, 46, 56, 75, 82, 83, 86, 89, 104, 106, 109, 110, 112, 120, 144, 145, 147, 155, 159, 162, 173, 183, 189, 192, 197, 200, 213, 222, 225, 233, 243, 254, 257, 258, 261, 271, 275, 281, 287, 289, 293, 298, 303, 308, 325, 344, 348, 350, 359, 363, 367, 374, 381, 385, 388, 390, 392, 406, 431, 432, 435, 446, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485], "nativ": [7, 31, 39, 61, 65, 69, 100, 114, 121, 161, 164, 175, 176, 182, 189, 190, 215, 220, 242, 264, 299, 302, 336, 344, 347, 351, 354, 359, 370, 373, 375, 388, 426, 436, 465, 468, 473, 474, 477, 478, 479, 481, 482, 483, 484, 485], "contrari": [7, 58, 196], "veri": [7, 30, 31, 33, 56, 60, 65, 72, 78, 83, 84, 85, 94, 95, 99, 100, 102, 103, 104, 108, 109, 111, 112, 113, 114, 115, 116, 145, 156, 158, 164, 172, 173, 175, 183, 189, 192, 196, 200, 203, 209, 210, 213, 214, 218, 237, 243, 249, 252, 257, 258, 261, 272, 276, 277, 289, 290, 294, 295, 298, 299, 305, 314, 325, 334, 336, 341, 342, 344, 345, 348, 350, 353, 355, 364, 372, 374, 380, 390, 392, 393, 394, 430, 432, 434, 436, 440, 445, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 483, 485], "generic": [7, 14, 16, 33, 47, 58, 59, 60, 65, 86, 95, 97, 100, 107, 108, 118, 139, 150, 158, 164, 167, 173, 190, 193, 200, 201, 207, 210, 233, 242, 258, 260, 264, 274, 275, 287, 302, 315, 331, 336, 341, 344, 348, 367, 370, 383, 389, 398, 417, 434, 462, 472, 476, 477, 478, 479, 480, 481, 483, 485], "wrapper": [7, 18, 21, 23, 24, 25, 29, 40, 42, 46, 55, 56, 65, 75, 96, 97, 102, 109, 113, 120, 124, 133, 142, 145, 152, 155, 166, 173, 182, 183, 197, 200, 222, 233, 243, 258, 260, 261, 266, 273, 281, 287, 289, 293, 299, 305, 308, 334, 344, 352, 367, 369, 373, 374, 385, 404, 411, 414, 417, 423, 426, 429, 431, 432, 444, 463, 466, 467, 468, 470, 471, 472, 473, 477, 479, 480, 483, 485], "memoryview": [7, 16, 65, 97, 118, 151, 232, 260, 290, 305, 338, 344, 359, 390, 431, 454, 474, 477, 479, 480, 483, 485, 486], "instruct": [7, 13, 65, 69, 78, 79, 87, 94, 104, 106, 116, 158, 181, 192, 200, 247, 261, 270, 298, 299, 314, 320, 339, 347, 348, 392, 414, 417, 419, 432, 434, 466, 471, 473, 476, 477, 479, 483, 484, 485], "start": [7, 9, 11, 22, 23, 31, 32, 33, 40, 53, 54, 60, 61, 63, 65, 69, 70, 73, 76, 78, 79, 82, 85, 86, 89, 90, 94, 95, 100, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 123, 124, 126, 127, 128, 129, 133, 138, 139, 142, 144, 147, 148, 150, 152, 157, 158, 160, 163, 164, 166, 167, 170, 172, 175, 182, 183, 184, 187, 189, 190, 191, 193, 195, 196, 197, 200, 201, 206, 208, 210, 212, 215, 218, 220, 222, 224, 227, 230, 232, 234, 237, 238, 240, 243, 247, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 277, 278, 279, 281, 284, 287, 290, 294, 296, 298, 299, 300, 302, 303, 305, 306, 308, 311, 312, 314, 315, 318, 319, 320, 322, 324, 325, 326, 338, 340, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 361, 363, 367, 368, 370, 371, 373, 374, 376, 381, 383, 384, 385, 386, 388, 390, 392, 398, 399, 403, 404, 406, 407, 414, 415, 417, 419, 421, 425, 426, 428, 431, 432, 434, 435, 436, 439, 440, 445, 446, 455, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "logic": [7, 65, 69, 78, 94, 95, 98, 104, 109, 120, 167, 175, 183, 187, 200, 214, 228, 239, 262, 273, 275, 276, 277, 287, 296, 302, 308, 325, 351, 352, 361, 367, 374, 382, 390, 392, 431, 440, 466, 469, 470, 472, 473, 478, 482, 483, 485], "physic": [7, 65, 69, 102, 183, 200, 254, 258, 284, 287, 300, 344, 351, 382, 383, 409, 436, 471, 482], "negat": [7, 15, 18, 23, 29, 36, 37, 40, 43, 45, 51, 55, 57, 60, 61, 63, 69, 100, 103, 104, 111, 113, 121, 126, 128, 139, 142, 152, 156, 157, 160, 161, 164, 166, 181, 182, 183, 184, 189, 192, 216, 228, 232, 233, 264, 265, 267, 268, 272, 276, 281, 284, 289, 299, 302, 305, 314, 325, 326, 334, 337, 338, 339, 344, 348, 350, 351, 352, 355, 370, 371, 374, 377, 385, 388, 414, 417, 431, 432, 434, 435, 440, 445, 446, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "begin": [7, 18, 23, 33, 55, 69, 74, 83, 85, 86, 88, 89, 94, 95, 100, 104, 109, 110, 111, 112, 116, 123, 126, 157, 158, 162, 173, 183, 184, 189, 192, 196, 200, 203, 208, 216, 222, 230, 238, 254, 257, 258, 261, 268, 276, 277, 284, 289, 294, 299, 300, 302, 303, 307, 308, 320, 325, 326, 330, 340, 342, 347, 348, 351, 352, 354, 363, 364, 367, 369, 372, 374, 381, 383, 392, 405, 417, 419, 420, 429, 431, 432, 433, 434, 436, 438, 439, 440, 453, 459, 460, 465, 468, 471, 472, 473, 476, 481, 482, 485], "obj": [7, 9, 10, 23, 24, 27, 31, 34, 37, 41, 43, 46, 49, 60, 61, 65, 85, 87, 88, 94, 95, 97, 100, 103, 104, 109, 113, 118, 135, 144, 148, 164, 167, 182, 185, 187, 200, 204, 215, 218, 220, 232, 234, 261, 265, 268, 284, 289, 297, 305, 327, 351, 352, 367, 386, 390, 392, 393, 406, 425, 432, 444, 445, 466, 467, 468, 469, 470, 471, 472, 476, 480, 482, 483, 485], "automat": [7, 12, 23, 27, 31, 33, 43, 52, 56, 58, 59, 60, 65, 70, 72, 73, 78, 79, 81, 83, 85, 86, 94, 95, 100, 102, 104, 107, 110, 111, 112, 114, 116, 118, 126, 133, 138, 139, 144, 145, 146, 158, 162, 164, 167, 173, 175, 181, 182, 183, 187, 188, 190, 192, 193, 196, 197, 199, 200, 203, 208, 212, 213, 215, 216, 220, 232, 233, 234, 239, 241, 247, 249, 250, 255, 258, 261, 273, 274, 276, 277, 278, 284, 287, 289, 294, 298, 299, 300, 303, 305, 312, 314, 319, 326, 329, 334, 336, 338, 340, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 361, 363, 367, 370, 371, 372, 373, 374, 381, 388, 390, 392, 393, 394, 398, 399, 403, 405, 406, 409, 411, 415, 419, 423, 427, 428, 430, 432, 433, 434, 436, 440, 447, 450, 455, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "temporari": [7, 22, 38, 47, 49, 52, 60, 65, 69, 70, 72, 109, 115, 116, 118, 150, 182, 191, 200, 230, 254, 258, 264, 267, 272, 277, 278, 289, 299, 303, 330, 347, 351, 359, 365, 367, 386, 392, 399, 406, 439, 462, 468, 470, 472, 477, 478, 479, 484, 485], "pymemoryview_frombuff": [7, 41], "pybuffer_fillinfo": [7, 60, 485], "scheme": [7, 29, 60, 85, 88, 104, 109, 112, 115, 129, 141, 147, 164, 182, 189, 217, 254, 257, 275, 277, 323, 340, 347, 348, 351, 359, 360, 363, 380, 398, 399, 411, 432, 459, 466, 467, 469, 472, 473, 477, 478, 479, 480, 485], "len": [7, 8, 9, 22, 36, 38, 39, 47, 51, 52, 57, 61, 65, 86, 95, 97, 103, 109, 111, 112, 114, 120, 145, 147, 148, 154, 156, 158, 166, 167, 172, 176, 182, 194, 196, 197, 200, 218, 222, 232, 233, 237, 242, 243, 249, 254, 260, 267, 275, 284, 289, 290, 294, 297, 298, 299, 311, 324, 326, 342, 344, 347, 348, 351, 354, 367, 386, 389, 393, 404, 411, 412, 414, 417, 431, 432, 439, 444, 445, 446, 447, 453, 454, 455, 466, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 483, 485], "product": [7, 15, 65, 72, 90, 94, 104, 108, 128, 132, 149, 192, 200, 231, 243, 252, 254, 267, 275, 281, 333, 350, 351, 359, 388, 392, 393, 425, 430, 434, 439, 444, 454, 463, 466, 467, 471, 472, 473, 475, 478, 481, 483, 485], "items": [7, 58, 65, 127, 188, 289, 344, 351], "would": [7, 18, 29, 31, 32, 33, 45, 55, 56, 58, 61, 69, 70, 72, 73, 74, 76, 78, 82, 83, 85, 86, 87, 89, 94, 95, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 116, 118, 120, 122, 126, 128, 133, 144, 158, 161, 164, 167, 172, 173, 175, 176, 178, 182, 183, 187, 189, 190, 192, 194, 196, 200, 203, 206, 207, 209, 210, 212, 214, 215, 218, 219, 220, 232, 233, 235, 237, 239, 241, 242, 247, 249, 250, 252, 254, 257, 258, 261, 264, 267, 268, 273, 274, 275, 278, 281, 282, 289, 295, 298, 299, 302, 311, 313, 314, 319, 325, 326, 328, 336, 337, 338, 339, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 367, 370, 374, 377, 381, 385, 386, 388, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 407, 409, 412, 414, 416, 417, 425, 426, 427, 429, 430, 431, 432, 434, 436, 438, 439, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "represent": [7, 9, 15, 18, 25, 37, 39, 47, 55, 56, 60, 61, 65, 69, 78, 79, 85, 86, 95, 100, 108, 110, 112, 114, 126, 127, 128, 152, 153, 161, 164, 166, 173, 182, 183, 184, 188, 189, 192, 203, 204, 208, 211, 212, 214, 218, 219, 220, 232, 243, 249, 251, 252, 255, 258, 265, 268, 272, 273, 277, 278, 287, 289, 296, 299, 302, 305, 313, 320, 327, 336, 344, 347, 351, 352, 353, 354, 359, 367, 371, 377, 382, 385, 388, 390, 392, 393, 412, 414, 417, 430, 432, 436, 449, 466, 470, 471, 472, 473, 475, 477, 479, 480, 481, 483, 484, 485, 486], "guarante": [7, 9, 11, 18, 24, 31, 33, 40, 51, 54, 55, 56, 58, 60, 61, 64, 69, 82, 83, 86, 95, 98, 100, 102, 104, 106, 110, 113, 121, 128, 133, 144, 182, 189, 192, 197, 200, 203, 212, 230, 232, 239, 242, 250, 258, 261, 264, 268, 281, 282, 284, 289, 294, 298, 299, 305, 314, 330, 334, 337, 351, 355, 359, 367, 369, 370, 383, 402, 404, 406, 409, 411, 412, 417, 419, 429, 431, 432, 436, 465, 470, 471, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485], "pybuf_simpl": 7, "pybuf_writ": [7, 41, 472], "whether": [7, 9, 11, 14, 17, 23, 33, 55, 56, 60, 61, 69, 70, 72, 83, 89, 95, 100, 102, 103, 104, 107, 108, 110, 111, 112, 114, 116, 120, 121, 122, 126, 139, 144, 145, 149, 150, 158, 159, 161, 162, 163, 164, 165, 167, 173, 175, 182, 183, 187, 189, 192, 195, 197, 200, 203, 209, 214, 215, 216, 217, 227, 232, 237, 238, 241, 242, 250, 251, 254, 258, 261, 264, 265, 272, 274, 275, 277, 278, 281, 282, 289, 290, 298, 299, 300, 301, 302, 303, 305, 308, 313, 314, 316, 317, 320, 323, 325, 330, 334, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 353, 355, 359, 362, 363, 367, 370, 371, 374, 381, 384, 388, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 406, 409, 411, 413, 414, 419, 424, 425, 426, 428, 430, 431, 432, 433, 434, 436, 440, 459, 460, 465, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485], "control": [7, 30, 31, 32, 33, 40, 46, 48, 55, 56, 65, 69, 70, 72, 73, 83, 84, 85, 87, 89, 93, 94, 102, 103, 108, 109, 111, 113, 116, 121, 126, 133, 136, 138, 139, 142, 144, 145, 149, 150, 156, 158, 159, 162, 164, 169, 172, 181, 182, 183, 184, 189, 190, 192, 196, 199, 200, 201, 203, 204, 208, 209, 212, 214, 215, 217, 220, 222, 225, 229, 230, 232, 234, 236, 241, 254, 255, 258, 260, 261, 262, 264, 265, 268, 270, 273, 274, 275, 277, 282, 287, 288, 289, 290, 294, 298, 299, 301, 303, 304, 305, 311, 313, 314, 315, 317, 320, 321, 323, 327, 328, 334, 335, 337, 339, 344, 345, 348, 351, 353, 354, 355, 357, 359, 363, 369, 370, 372, 373, 374, 379, 380, 381, 384, 385, 389, 392, 393, 394, 395, 398, 399, 406, 409, 410, 411, 417, 419, 421, 423, 424, 426, 428, 431, 432, 433, 434, 436, 438, 440, 442, 447, 452, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "flag": [7, 9, 13, 18, 24, 27, 31, 32, 41, 47, 55, 56, 58, 60, 61, 63, 65, 69, 82, 83, 85, 86, 99, 107, 108, 110, 113, 114, 118, 119, 120, 124, 129, 133, 141, 143, 148, 149, 150, 162, 164, 182, 183, 187, 188, 189, 190, 192, 193, 194, 197, 203, 214, 215, 216, 222, 232, 234, 245, 250, 255, 264, 270, 272, 273, 274, 277, 282, 284, 287, 288, 289, 294, 299, 302, 307, 311, 312, 313, 319, 320, 321, 323, 334, 336, 338, 339, 340, 344, 345, 347, 348, 349, 351, 352, 355, 357, 359, 362, 366, 367, 368, 370, 371, 381, 389, 390, 392, 398, 399, 404, 410, 411, 412, 423, 424, 426, 429, 431, 432, 436, 454, 462, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "struct": [7, 15, 16, 21, 29, 31, 37, 43, 54, 55, 58, 60, 63, 65, 83, 85, 86, 88, 94, 96, 100, 109, 127, 147, 151, 182, 222, 232, 260, 274, 275, 290, 344, 351, 371, 423, 444, 456, 468, 471, 472, 473, 476, 477, 482, 483, 484, 485], "calcsiz": [7, 65, 151, 232, 344, 351, 354, 485], "import": [7, 11, 23, 24, 29, 31, 32, 33, 40, 43, 56, 60, 63, 65, 69, 73, 74, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 126, 127, 129, 130, 132, 133, 137, 139, 140, 141, 142, 144, 145, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 162, 166, 168, 169, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 202, 203, 207, 209, 212, 214, 215, 216, 218, 220, 221, 222, 223, 225, 227, 228, 230, 232, 233, 235, 237, 238, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 263, 264, 268, 270, 271, 272, 276, 277, 278, 281, 282, 284, 285, 286, 289, 290, 294, 298, 299, 300, 302, 303, 305, 307, 308, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 372, 373, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 398, 399, 400, 402, 403, 404, 406, 410, 411, 412, 413, 414, 415, 416, 417, 419, 423, 424, 425, 429, 431, 432, 433, 434, 435, 437, 439, 442, 444, 445, 446, 447, 448, 449, 450, 452, 455, 456, 457, 459, 460, 465, 466, 468, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486], "pybuf_format": 7, "still": [7, 9, 23, 27, 29, 31, 32, 33, 46, 60, 69, 73, 74, 78, 82, 83, 85, 86, 87, 94, 95, 100, 102, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 122, 126, 128, 139, 144, 149, 153, 158, 164, 169, 173, 175, 176, 181, 182, 183, 187, 192, 200, 201, 209, 213, 215, 218, 220, 233, 234, 237, 239, 250, 254, 258, 261, 274, 275, 277, 281, 284, 289, 290, 298, 299, 301, 305, 314, 320, 325, 328, 329, 330, 334, 336, 339, 340, 344, 345, 347, 348, 351, 352, 355, 359, 367, 369, 370, 374, 381, 386, 389, 390, 392, 393, 394, 399, 406, 411, 413, 414, 417, 420, 430, 431, 432, 434, 436, 439, 440, 456, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "present": [7, 22, 29, 37, 43, 47, 54, 60, 65, 72, 78, 83, 84, 87, 89, 95, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 126, 128, 129, 149, 152, 158, 159, 160, 162, 164, 167, 173, 182, 183, 187, 190, 192, 196, 200, 203, 204, 212, 217, 220, 222, 228, 232, 233, 234, 242, 243, 246, 250, 252, 254, 259, 261, 265, 268, 273, 274, 275, 277, 282, 284, 290, 292, 294, 298, 299, 303, 305, 313, 314, 319, 320, 323, 325, 328, 337, 341, 342, 344, 348, 351, 352, 359, 363, 364, 367, 369, 370, 371, 372, 374, 376, 380, 381, 383, 388, 390, 392, 398, 399, 406, 411, 414, 417, 419, 423, 425, 427, 428, 431, 432, 434, 436, 439, 440, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "hold": [7, 9, 14, 23, 31, 33, 43, 52, 55, 60, 61, 63, 73, 76, 83, 95, 103, 108, 109, 112, 116, 126, 128, 129, 173, 175, 176, 182, 189, 192, 197, 210, 222, 243, 249, 252, 257, 261, 274, 275, 277, 289, 290, 299, 308, 314, 325, 328, 331, 336, 341, 344, 348, 351, 355, 359, 367, 370, 374, 392, 406, 409, 415, 417, 419, 425, 428, 432, 436, 440, 466, 467, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485], "navig": [7, 65, 102, 183, 302, 319, 373, 380, 485], "disregard": [7, 31, 351], "string": [7, 8, 9, 11, 14, 16, 18, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37, 38, 39, 40, 43, 45, 47, 50, 55, 56, 60, 62, 63, 65, 69, 70, 72, 73, 74, 78, 82, 83, 85, 86, 89, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 123, 126, 127, 128, 129, 133, 139, 142, 144, 147, 149, 150, 151, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 170, 173, 175, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 192, 194, 196, 197, 200, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 227, 228, 230, 232, 233, 235, 237, 238, 240, 241, 242, 245, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 268, 269, 270, 272, 273, 274, 275, 277, 278, 280, 282, 284, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 326, 327, 332, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 431, 432, 433, 434, 435, 436, 438, 440, 441, 446, 448, 449, 451, 454, 456, 459, 460, 465, 467, 468, 471, 473, 475, 476, 477, 479, 480, 485, 486], "ndim": [7, 65, 351], "dimens": [7, 182, 183, 281, 338, 351, 472, 478, 483, 485], "dimension": [7, 97, 210, 281, 305, 324, 351, 380, 388, 478, 480, 485], "scalar": [7, 147, 203, 206, 233, 388, 390, 485], "pybuf_max_ndim": 7, "limit": [7, 23, 30, 31, 33, 37, 55, 56, 58, 60, 61, 63, 65, 76, 85, 95, 100, 102, 104, 106, 109, 111, 118, 125, 126, 128, 133, 138, 139, 141, 142, 144, 148, 156, 164, 169, 172, 175, 179, 181, 190, 192, 197, 208, 214, 215, 221, 222, 230, 232, 233, 242, 254, 255, 260, 267, 274, 276, 282, 288, 289, 290, 291, 292, 298, 299, 300, 301, 305, 313, 314, 318, 320, 325, 327, 330, 336, 339, 340, 341, 344, 347, 348, 350, 352, 355, 359, 363, 367, 370, 378, 380, 385, 386, 393, 395, 409, 411, 414, 417, 425, 428, 430, 432, 433, 434, 436, 438, 439, 459, 462, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "maximum": [7, 25, 33, 56, 61, 95, 103, 104, 108, 109, 111, 121, 133, 144, 145, 147, 161, 164, 169, 172, 173, 181, 182, 183, 192, 196, 202, 209, 210, 215, 220, 230, 242, 254, 267, 268, 275, 276, 281, 284, 287, 289, 294, 299, 305, 311, 313, 325, 326, 327, 328, 335, 341, 344, 346, 348, 350, 352, 355, 359, 363, 369, 370, 381, 383, 386, 388, 392, 398, 399, 411, 417, 439, 459, 466, 468, 469, 471, 472, 473, 477, 478, 480, 481, 482, 485], "64": [7, 61, 65, 69, 95, 103, 107, 112, 141, 149, 152, 182, 183, 189, 192, 232, 242, 265, 267, 276, 289, 299, 309, 310, 312, 338, 344, 348, 351, 354, 359, 388, 408, 423, 425, 432, 446, 450, 453, 460, 465, 466, 468, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "handl": [7, 14, 29, 30, 31, 32, 33, 40, 44, 47, 53, 55, 58, 60, 61, 63, 65, 69, 70, 76, 78, 83, 85, 86, 89, 94, 95, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 121, 124, 126, 128, 129, 132, 138, 145, 146, 148, 150, 152, 153, 156, 159, 161, 163, 164, 172, 173, 175, 176, 181, 182, 187, 189, 192, 193, 195, 196, 197, 200, 203, 207, 208, 209, 210, 214, 215, 218, 219, 220, 222, 230, 232, 233, 237, 241, 247, 249, 251, 252, 254, 255, 257, 258, 260, 261, 262, 264, 265, 268, 273, 274, 275, 276, 277, 281, 284, 288, 289, 295, 299, 300, 301, 302, 303, 304, 314, 315, 317, 325, 327, 334, 336, 337, 338, 339, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 357, 359, 362, 363, 367, 370, 371, 376, 380, 383, 390, 393, 394, 399, 404, 406, 407, 408, 411, 413, 417, 419, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 436, 439, 440, 447, 456, 459, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486], "restrict": [7, 65, 83, 85, 86, 99, 100, 103, 109, 111, 121, 126, 128, 157, 164, 182, 183, 188, 189, 192, 196, 212, 230, 232, 237, 242, 254, 262, 268, 289, 299, 304, 314, 318, 325, 333, 344, 348, 351, 352, 353, 355, 370, 371, 390, 393, 414, 417, 423, 424, 430, 431, 434, 435, 439, 440, 459, 465, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "attent": [7, 111, 183, 388, 469, 477, 479], "further": [7, 31, 39, 60, 65, 83, 85, 86, 89, 95, 98, 100, 104, 107, 108, 109, 112, 114, 115, 122, 128, 129, 145, 150, 156, 158, 160, 164, 175, 179, 182, 187, 193, 197, 200, 220, 225, 232, 235, 237, 239, 247, 254, 272, 273, 275, 276, 281, 288, 298, 299, 301, 303, 305, 325, 338, 339, 344, 345, 347, 348, 351, 352, 359, 371, 374, 385, 390, 413, 414, 417, 419, 425, 428, 429, 431, 432, 434, 436, 439, 459, 465, 466, 467, 468, 469, 470, 472, 473, 478, 482, 483, 485], "skip": [7, 14, 31, 32, 33, 55, 65, 69, 94, 100, 104, 110, 111, 112, 114, 150, 160, 164, 169, 173, 175, 189, 193, 200, 211, 212, 217, 225, 230, 257, 258, 261, 267, 268, 273, 277, 278, 303, 310, 325, 337, 340, 349, 351, 354, 357, 359, 363, 367, 381, 390, 403, 417, 419, 430, 431, 440, 456, 459, 465, 466, 468, 469, 470, 471, 472, 473, 475, 477, 479, 484, 485], "regular": [7, 11, 31, 32, 40, 60, 65, 69, 71, 76, 79, 86, 94, 95, 97, 103, 104, 109, 110, 116, 122, 126, 128, 133, 139, 166, 167, 169, 173, 175, 181, 187, 192, 200, 207, 217, 220, 227, 232, 233, 241, 250, 254, 260, 261, 267, 272, 274, 299, 300, 302, 305, 314, 317, 334, 339, 342, 344, 348, 349, 351, 352, 359, 363, 364, 367, 368, 388, 390, 392, 399, 404, 406, 432, 434, 439, 440, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "along": [7, 33, 34, 69, 78, 100, 104, 108, 109, 116, 126, 133, 145, 146, 147, 156, 161, 169, 175, 182, 192, 200, 210, 212, 225, 237, 241, 242, 251, 255, 258, 259, 273, 275, 284, 299, 302, 305, 314, 335, 342, 344, 348, 351, 352, 355, 362, 374, 381, 384, 390, 392, 393, 411, 418, 425, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 479, 480, 485], "nth": [7, 267, 381], "dictat": [7, 97, 173, 229, 232, 305, 344, 465, 466, 472], "mani": [7, 16, 18, 31, 33, 54, 55, 60, 61, 69, 70, 74, 76, 79, 81, 82, 83, 85, 86, 89, 94, 100, 102, 104, 107, 108, 109, 111, 112, 113, 114, 115, 116, 123, 126, 128, 139, 142, 144, 145, 149, 161, 164, 169, 172, 173, 175, 181, 182, 183, 184, 187, 189, 192, 196, 197, 200, 201, 210, 215, 218, 219, 230, 232, 234, 237, 239, 242, 243, 249, 250, 251, 254, 257, 258, 264, 265, 267, 268, 271, 273, 281, 284, 289, 290, 294, 298, 299, 301, 302, 304, 305, 311, 312, 313, 314, 320, 323, 325, 331, 334, 336, 338, 339, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 363, 364, 367, 369, 370, 371, 372, 373, 374, 380, 384, 385, 388, 389, 390, 392, 393, 394, 399, 406, 407, 409, 410, 411, 414, 419, 428, 431, 432, 436, 438, 440, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "de": [7, 12, 39, 65, 81, 84, 90, 125, 183, 237, 250, 267, 294, 305, 351, 363, 390, 398, 423, 476, 479, 481, 482, 484, 485], "might": [7, 23, 31, 33, 49, 55, 60, 61, 69, 70, 73, 78, 79, 83, 85, 86, 95, 98, 100, 102, 104, 108, 109, 110, 111, 112, 114, 115, 116, 120, 128, 129, 138, 142, 145, 147, 150, 152, 164, 182, 185, 187, 189, 200, 203, 212, 214, 216, 220, 228, 230, 241, 242, 243, 245, 247, 250, 254, 264, 265, 272, 273, 274, 275, 277, 278, 284, 289, 290, 294, 298, 299, 301, 305, 308, 311, 312, 314, 325, 342, 344, 347, 348, 351, 359, 367, 370, 372, 374, 390, 393, 394, 399, 404, 406, 412, 417, 426, 432, 436, 438, 459, 465, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 485], "re": [7, 31, 33, 40, 43, 54, 60, 65, 69, 70, 73, 76, 79, 82, 83, 85, 86, 87, 89, 94, 95, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 114, 116, 119, 120, 128, 144, 145, 146, 150, 151, 162, 166, 169, 173, 175, 182, 183, 189, 192, 193, 196, 197, 200, 203, 208, 212, 214, 227, 243, 247, 250, 254, 255, 257, 258, 260, 264, 265, 272, 273, 274, 275, 277, 284, 285, 289, 294, 298, 299, 301, 302, 303, 314, 321, 345, 348, 350, 351, 352, 355, 359, 368, 369, 370, 372, 374, 382, 383, 388, 390, 394, 398, 399, 403, 404, 411, 417, 419, 423, 431, 432, 433, 436, 438, 439, 440, 445, 455, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 485], "cast": [7, 31, 33, 40, 43, 55, 58, 61, 65, 83, 86, 100, 124, 182, 192, 193, 267, 351, 385, 390, 478, 482, 483, 485], "freed": [7, 31, 40, 43, 83, 85, 109, 172, 234, 239, 243, 289, 335, 432, 467, 469, 471, 481, 485], "alter": [7, 22, 40, 69, 95, 133, 160, 192, 215, 250, 254, 255, 268, 274, 278, 305, 330, 351, 352, 388, 430, 432, 436, 466, 470, 476, 477, 479, 483, 485], "send": [7, 34, 65, 89, 102, 104, 108, 110, 111, 112, 115, 124, 129, 133, 139, 141, 142, 145, 147, 148, 158, 159, 164, 167, 170, 175, 183, 201, 207, 208, 219, 230, 237, 249, 251, 252, 254, 255, 262, 273, 274, 275, 284, 289, 290, 294, 299, 305, 311, 322, 323, 335, 339, 341, 342, 344, 345, 348, 355, 357, 361, 366, 367, 374, 390, 399, 411, 423, 432, 434, 456, 466, 469, 470, 471, 473, 476, 477, 478, 480, 481, 482, 484, 485], "via": [7, 34, 40, 43, 60, 61, 65, 69, 83, 86, 94, 95, 99, 104, 106, 108, 115, 118, 119, 121, 122, 126, 128, 129, 146, 150, 158, 173, 176, 189, 196, 200, 203, 207, 208, 209, 212, 213, 214, 215, 220, 223, 225, 232, 235, 239, 240, 249, 254, 257, 259, 261, 267, 268, 271, 272, 273, 274, 275, 284, 289, 290, 298, 299, 303, 305, 308, 311, 314, 320, 323, 325, 326, 329, 341, 342, 344, 345, 347, 348, 351, 352, 355, 359, 360, 367, 388, 390, 392, 393, 399, 404, 409, 411, 414, 417, 423, 429, 431, 432, 434, 459, 462, 466, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485], "drastic": [7, 118], "unambigu": [7, 126, 128, 189, 274, 314, 342, 432, 440, 472, 477], "influenc": [7, 69, 305, 344, 459, 472], "correct": [7, 31, 43, 55, 60, 61, 63, 65, 70, 81, 83, 86, 87, 95, 100, 103, 104, 107, 109, 114, 115, 118, 120, 122, 123, 126, 139, 158, 164, 175, 181, 182, 189, 192, 193, 194, 197, 200, 203, 204, 206, 210, 215, 216, 218, 223, 232, 238, 247, 250, 254, 255, 258, 260, 261, 265, 272, 281, 284, 289, 295, 298, 299, 301, 305, 320, 330, 337, 338, 344, 347, 348, 350, 351, 352, 355, 359, 363, 371, 374, 388, 390, 392, 393, 394, 403, 405, 409, 411, 419, 425, 428, 429, 432, 434, 436, 439, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "writabl": [7, 41, 46, 55, 65, 85, 94, 112, 124, 126, 139, 145, 156, 158, 255, 264, 284, 289, 299, 301, 310, 338, 344, 345, 348, 351, 354, 357, 373, 374, 406, 426, 432, 436, 440, 470, 472, 478, 480, 481, 482, 485], "els": [7, 22, 33, 34, 39, 40, 50, 60, 61, 65, 69, 78, 82, 83, 85, 86, 88, 89, 94, 95, 98, 99, 100, 104, 109, 110, 111, 112, 115, 116, 119, 120, 128, 129, 133, 141, 144, 158, 166, 172, 175, 179, 182, 189, 192, 196, 197, 200, 203, 207, 214, 233, 235, 237, 243, 247, 249, 254, 255, 257, 258, 267, 268, 273, 275, 277, 282, 289, 295, 297, 298, 299, 305, 315, 325, 335, 344, 347, 348, 349, 350, 351, 355, 359, 363, 367, 370, 377, 383, 388, 389, 390, 393, 403, 404, 406, 411, 414, 425, 426, 431, 432, 434, 435, 436, 438, 439, 440, 447, 449, 459, 465, 466, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 484, 485], "report": [7, 22, 24, 31, 33, 38, 43, 46, 47, 65, 69, 82, 83, 95, 106, 107, 108, 111, 114, 126, 128, 139, 145, 158, 159, 172, 181, 182, 183, 197, 200, 203, 210, 212, 220, 223, 226, 232, 239, 240, 261, 265, 267, 285, 286, 289, 298, 299, 312, 314, 316, 320, 325, 334, 335, 339, 341, 346, 348, 349, 351, 359, 367, 372, 374, 384, 390, 392, 399, 404, 417, 419, 459, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 483, 485], "choic": [7, 65, 69, 83, 94, 95, 99, 109, 110, 112, 115, 124, 158, 161, 180, 200, 232, 237, 239, 254, 261, 267, 273, 274, 277, 289, 296, 298, 314, 320, 324, 330, 332, 335, 336, 348, 350, 351, 354, 357, 380, 435, 438, 445, 455, 468, 471, 477, 480, 481, 482, 485], "next": [7, 23, 31, 34, 35, 40, 50, 60, 65, 78, 82, 83, 85, 86, 95, 97, 100, 102, 103, 104, 107, 109, 110, 111, 114, 116, 118, 120, 123, 125, 129, 133, 144, 147, 150, 156, 158, 160, 162, 163, 165, 166, 167, 173, 181, 182, 183, 192, 196, 197, 200, 201, 202, 203, 204, 212, 218, 220, 225, 228, 232, 233, 234, 237, 239, 243, 249, 250, 254, 258, 260, 261, 267, 273, 275, 276, 277, 281, 284, 288, 289, 294, 298, 299, 303, 313, 314, 320, 325, 326, 331, 336, 337, 339, 344, 345, 347, 348, 350, 351, 352, 355, 357, 363, 373, 374, 380, 381, 393, 394, 399, 402, 404, 417, 429, 431, 432, 433, 434, 436, 438, 440, 441, 444, 446, 453, 454, 456, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 486], "stand": [7, 73, 78, 91, 96, 114, 116, 175, 192, 217, 281, 298, 308, 325, 424, 425, 439, 466, 471, 472, 473, 477, 479, 482, 483, 485], "alon": [7, 61, 85, 91, 96, 109, 111, 116, 128, 258, 303, 325, 330, 337, 424, 430, 431, 438, 468, 471, 476, 479, 485], "impli": [7, 29, 33, 40, 55, 60, 69, 78, 79, 99, 109, 114, 116, 118, 145, 169, 187, 218, 230, 243, 264, 298, 320, 326, 348, 351, 390, 419, 426, 430, 432, 434, 440, 459, 460, 472, 479, 482, 483, 485], "below": [7, 23, 24, 29, 31, 33, 43, 52, 54, 56, 57, 60, 61, 63, 65, 78, 81, 83, 86, 95, 98, 100, 103, 104, 108, 109, 115, 116, 120, 121, 123, 124, 126, 129, 139, 150, 154, 156, 161, 164, 173, 178, 181, 183, 185, 187, 189, 192, 194, 195, 197, 200, 202, 210, 215, 218, 220, 228, 230, 234, 237, 240, 242, 243, 247, 249, 250, 252, 254, 255, 256, 257, 258, 264, 272, 273, 274, 275, 282, 288, 289, 294, 298, 299, 301, 302, 303, 316, 320, 325, 326, 327, 328, 330, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 350, 351, 352, 353, 355, 359, 361, 362, 363, 364, 367, 369, 370, 371, 374, 376, 381, 384, 388, 390, 392, 393, 394, 399, 410, 417, 418, 423, 424, 426, 428, 430, 431, 432, 434, 435, 436, 439, 445, 465, 466, 467, 469, 471, 472, 473, 474, 476, 479, 480, 485], "pybuf_indirect": 7, "yes": [7, 69, 83, 89, 94, 95, 99, 106, 173, 192, 200, 272, 273, 320, 325, 348, 374, 378, 409, 411, 415, 417, 445, 450, 453, 465, 468, 477], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 88, 97, 305, 347, 351, 448, 467, 470, 472], "explicit": [7, 23, 27, 28, 29, 31, 32, 33, 43, 47, 54, 60, 63, 65, 69, 70, 72, 73, 78, 79, 83, 86, 95, 98, 100, 102, 104, 106, 108, 109, 110, 111, 112, 116, 118, 120, 126, 128, 133, 138, 139, 144, 146, 158, 163, 172, 173, 175, 176, 182, 185, 187, 189, 192, 194, 196, 203, 205, 209, 212, 213, 215, 217, 218, 220, 221, 225, 230, 232, 233, 237, 240, 250, 252, 257, 258, 261, 264, 265, 268, 272, 273, 274, 275, 276, 277, 281, 287, 289, 290, 298, 299, 300, 301, 303, 305, 313, 317, 320, 330, 334, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 361, 367, 370, 388, 389, 390, 392, 393, 399, 403, 404, 406, 409, 411, 414, 415, 416, 417, 418, 425, 427, 431, 432, 433, 434, 436, 440, 444, 459, 460, 465, 466, 467, 468, 469, 471, 473, 474, 476, 477, 480, 481, 482, 483, 484, 485, 486], "contig": 7, "pybuf_c_contigu": [7, 472], "pybuf_f_contigu": [7, 472], "pybuf_any_contigu": 7, "fulli": [7, 31, 32, 43, 60, 72, 79, 81, 97, 109, 110, 114, 118, 126, 140, 192, 200, 204, 210, 214, 215, 258, 267, 274, 275, 289, 305, 308, 339, 341, 342, 344, 351, 355, 359, 363, 390, 392, 402, 404, 411, 414, 417, 421, 425, 427, 436, 459, 465, 468, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485], "combin": [7, 23, 31, 47, 53, 60, 61, 65, 69, 78, 82, 85, 86, 95, 100, 102, 104, 109, 111, 112, 114, 115, 122, 123, 126, 144, 164, 166, 169, 175, 182, 183, 187, 188, 189, 192, 195, 200, 210, 212, 215, 231, 234, 250, 251, 252, 254, 257, 258, 267, 272, 273, 289, 298, 299, 300, 301, 302, 314, 324, 325, 328, 334, 335, 337, 340, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 361, 363, 368, 374, 381, 390, 391, 392, 398, 409, 410, 427, 432, 434, 436, 439, 440, 466, 470, 471, 472, 473, 476, 479, 480, 481, 482, 483, 485], "frequent": [7, 33, 65, 83, 85, 94, 95, 106, 111, 112, 114, 115, 170, 189, 196, 254, 272, 275, 289, 294, 298, 311, 350, 390, 392, 428, 469, 470, 472, 473, 483], "undefin": [7, 18, 31, 40, 60, 61, 65, 69, 72, 78, 95, 100, 133, 164, 172, 203, 212, 214, 220, 232, 239, 264, 281, 298, 334, 350, 351, 359, 371, 386, 404, 417, 420, 432, 434, 439, 453, 460, 480, 482, 485], "pybuffer_iscontigu": [7, 485], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 32, 40, 265, 470, 480], "typeof": 7, "def": [7, 17, 22, 33, 43, 63, 65, 81, 82, 83, 86, 89, 94, 95, 97, 98, 100, 102, 103, 104, 108, 109, 111, 112, 113, 114, 116, 118, 120, 122, 126, 128, 129, 130, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 162, 166, 167, 172, 173, 175, 176, 178, 179, 182, 187, 189, 192, 194, 196, 197, 200, 207, 210, 218, 223, 232, 233, 234, 235, 237, 239, 242, 243, 247, 250, 252, 254, 257, 258, 259, 261, 264, 265, 267, 268, 273, 274, 281, 289, 295, 297, 298, 305, 309, 315, 318, 320, 322, 324, 325, 326, 327, 331, 335, 337, 338, 339, 342, 344, 345, 347, 348, 349, 350, 351, 352, 358, 359, 363, 366, 367, 369, 370, 372, 374, 383, 385, 386, 388, 389, 390, 392, 393, 394, 403, 404, 406, 411, 415, 417, 423, 424, 425, 426, 431, 432, 433, 434, 435, 439, 440, 444, 445, 447, 454, 455, 456, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 14, 20, 22, 23, 55, 60, 65, 85, 86, 94, 103, 106, 128, 133, 147, 148, 160, 182, 189, 192, 197, 210, 216, 220, 222, 230, 242, 247, 264, 270, 277, 279, 284, 289, 299, 312, 320, 321, 344, 347, 354, 367, 371, 385, 419, 426, 429, 432, 450, 466, 471, 472, 476, 477, 478, 482, 485], "verifi": [7, 65, 69, 73, 85, 95, 103, 104, 106, 110, 167, 193, 200, 242, 250, 258, 262, 274, 275, 277, 299, 342, 347, 350, 367, 392, 404, 411, 465, 472, 473, 476, 477, 478, 479, 483, 485], "bound": [7, 10, 13, 36, 40, 42, 51, 53, 57, 60, 61, 95, 103, 108, 109, 111, 112, 128, 133, 136, 143, 144, 145, 164, 172, 175, 192, 196, 218, 220, 232, 233, 255, 257, 258, 261, 274, 275, 289, 324, 325, 328, 337, 344, 348, 351, 358, 367, 370, 372, 374, 380, 381, 389, 390, 393, 394, 399, 406, 424, 430, 431, 432, 433, 434, 436, 440, 466, 468, 469, 471, 472, 473, 478, 479, 482, 484, 485], "mem": [7, 40, 41], "imin": 7, "sum": [7, 15, 33, 65, 97, 103, 104, 126, 128, 133, 147, 166, 189, 192, 200, 215, 232, 233, 260, 267, 276, 281, 290, 299, 314, 324, 328, 332, 344, 350, 351, 371, 381, 386, 390, 434, 435, 444, 445, 448, 453, 454, 455, 456, 469, 470, 472, 475, 478, 483, 484, 485], "imax": 7, "view": [7, 15, 22, 41, 46, 60, 65, 75, 94, 97, 102, 103, 106, 110, 126, 128, 139, 144, 166, 167, 189, 192, 197, 203, 207, 212, 215, 232, 254, 264, 273, 278, 305, 314, 319, 347, 349, 354, 357, 358, 359, 374, 380, 381, 388, 389, 409, 414, 466, 471, 472, 476, 477, 478, 480, 485, 486], "anywher": [7, 71, 79, 95, 158, 192, 196, 254, 259, 267, 274, 298, 302, 325, 359, 383, 419, 429, 433, 434, 436, 474, 484, 485], "index": [7, 32, 33, 36, 45, 51, 56, 57, 60, 61, 65, 67, 70, 75, 89, 90, 94, 97, 104, 107, 109, 110, 111, 113, 117, 121, 122, 127, 128, 147, 148, 150, 154, 158, 162, 166, 167, 170, 182, 188, 197, 198, 203, 212, 216, 218, 220, 231, 232, 237, 240, 243, 249, 252, 260, 261, 267, 268, 274, 284, 287, 289, 290, 297, 299, 302, 305, 316, 319, 320, 325, 326, 328, 344, 346, 347, 349, 351, 352, 359, 364, 366, 370, 371, 373, 381, 385, 386, 398, 409, 411, 414, 417, 426, 431, 432, 434, 440, 444, 446, 453, 457, 458, 463, 466, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486], "get_item_point": 7, "pyobject_checkbuff": [7, 484, 485], "cannot": [7, 9, 24, 27, 31, 32, 33, 36, 37, 47, 50, 51, 56, 58, 60, 61, 63, 64, 70, 78, 82, 83, 86, 95, 99, 100, 102, 104, 107, 108, 109, 110, 113, 115, 118, 121, 122, 128, 138, 144, 150, 158, 164, 166, 167, 169, 172, 173, 175, 182, 183, 187, 189, 192, 200, 204, 208, 209, 210, 215, 218, 219, 220, 221, 222, 225, 230, 232, 233, 234, 237, 239, 240, 243, 252, 254, 258, 261, 264, 272, 273, 274, 275, 276, 277, 281, 282, 284, 288, 289, 299, 301, 302, 303, 305, 308, 310, 313, 314, 316, 320, 325, 328, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 350, 351, 352, 355, 359, 363, 367, 370, 371, 374, 390, 399, 403, 406, 409, 410, 414, 417, 419, 420, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 447, 459, 460, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "pyexc_buffererror": [7, 23, 54, 60], "chain": [7, 60, 65, 95, 103, 104, 109, 115, 125, 163, 166, 173, 182, 193, 220, 221, 230, 231, 232, 243, 255, 261, 267, 273, 299, 311, 342, 351, 359, 385, 393, 399, 432, 434, 440, 449, 472, 474, 478, 479, 480, 484, 485], "redirect": [7, 60, 65, 70, 96, 108, 115, 139, 142, 175, 249, 250, 252, 258, 273, 339, 355, 359, 399, 459, 462, 466, 479, 480, 481, 482, 485], "pybuffer_sizefromformat": [7, 485], "pybuffer_getpoint": 7, "pybuffer_fromcontigu": 7, "fort": 7, "pybuffer_tocontigu": [7, 485], "src": [7, 69, 73, 78, 99, 148, 182, 200, 207, 238, 247, 284, 287, 299, 338, 347, 425, 469, 471], "pybuffer_fillcontiguousstrid": 7, "per": [7, 23, 29, 31, 33, 43, 60, 61, 65, 69, 79, 83, 94, 95, 98, 100, 109, 116, 123, 126, 128, 133, 138, 139, 147, 149, 150, 152, 157, 164, 183, 187, 189, 192, 197, 203, 204, 210, 212, 215, 216, 230, 234, 257, 259, 268, 273, 277, 287, 289, 294, 299, 301, 311, 313, 314, 323, 325, 335, 340, 341, 344, 345, 347, 348, 351, 359, 367, 370, 371, 372, 374, 381, 384, 386, 392, 423, 431, 432, 436, 440, 459, 465, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 485, 486], "accord": [7, 18, 31, 34, 37, 61, 63, 65, 69, 78, 86, 102, 103, 104, 107, 109, 114, 128, 133, 158, 161, 164, 175, 181, 187, 189, 192, 203, 208, 210, 212, 215, 216, 218, 223, 225, 232, 233, 238, 240, 242, 250, 254, 255, 258, 260, 262, 264, 267, 272, 273, 274, 281, 287, 289, 298, 299, 300, 314, 348, 349, 351, 353, 354, 371, 380, 381, 383, 388, 392, 398, 399, 403, 405, 414, 430, 432, 434, 436, 439, 459, 465, 468, 469, 470, 471, 472, 477, 478, 479, 480, 481, 482], "design": [7, 32, 33, 60, 69, 70, 86, 94, 95, 98, 100, 103, 104, 108, 109, 110, 112, 114, 115, 116, 128, 142, 144, 152, 159, 164, 173, 175, 183, 189, 192, 197, 198, 200, 201, 208, 217, 218, 232, 233, 235, 237, 239, 242, 254, 257, 258, 277, 289, 298, 299, 305, 314, 323, 329, 337, 344, 348, 359, 363, 367, 370, 374, 380, 388, 390, 393, 398, 411, 421, 428, 429, 436, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 482, 484, 485], "getbufferproc": [7, 60, 478], "subtyp": [8, 9, 11, 15, 20, 25, 36, 37, 43, 47, 52, 57, 58, 60, 61, 65, 193, 201, 203, 204, 207, 208, 210, 211, 212, 213, 254, 282, 291, 295, 298, 339, 348, 351, 420, 432, 434, 468, 476, 485], "pybytearray_typ": [8, 54], "instanc": [8, 9, 13, 14, 15, 16, 20, 23, 25, 26, 27, 29, 31, 33, 36, 37, 41, 43, 45, 47, 49, 50, 52, 55, 57, 58, 60, 61, 65, 69, 70, 78, 81, 83, 85, 86, 88, 99, 100, 102, 104, 108, 109, 110, 111, 113, 115, 119, 122, 123, 126, 128, 129, 133, 138, 139, 142, 144, 145, 146, 150, 156, 157, 158, 160, 162, 163, 164, 165, 167, 172, 173, 175, 178, 181, 182, 183, 188, 189, 192, 196, 197, 200, 201, 202, 203, 206, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 223, 225, 228, 230, 232, 233, 234, 237, 239, 241, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 267, 268, 273, 274, 275, 276, 277, 287, 289, 290, 291, 292, 294, 295, 298, 299, 302, 303, 304, 306, 311, 313, 314, 318, 320, 321, 324, 325, 327, 329, 331, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 350, 352, 354, 355, 358, 359, 360, 363, 364, 367, 369, 370, 372, 374, 377, 384, 386, 388, 389, 390, 392, 393, 394, 398, 399, 402, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 429, 431, 433, 434, 436, 439, 440, 444, 447, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "layer": [8, 9, 15, 24, 25, 30, 36, 37, 53, 57, 58, 65, 85, 94, 109, 112, 311, 342, 344, 348, 373, 423, 459, 466, 469, 472, 483, 484, 485], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 54, 472], "pybytearray_fromstringands": [8, 54, 472], "pybytearray_concat": [8, 54], "concat": [8, 61, 65, 104, 231, 297, 390, 445], "pybytearray_s": [8, 54], "pybytearray_asstr": [8, 54], "extra": [8, 9, 13, 18, 33, 60, 61, 65, 69, 86, 95, 98, 100, 102, 109, 115, 116, 118, 125, 126, 128, 138, 167, 176, 181, 192, 200, 203, 209, 210, 212, 215, 218, 249, 254, 258, 259, 273, 274, 277, 289, 298, 299, 338, 347, 348, 351, 363, 364, 367, 372, 381, 390, 393, 417, 426, 432, 435, 456, 460, 466, 469, 472, 473, 476, 477, 478, 481, 482, 483, 485], "append": [8, 9, 32, 36, 56, 61, 65, 69, 86, 88, 89, 90, 94, 95, 100, 108, 109, 112, 116, 118, 126, 127, 129, 140, 156, 158, 163, 164, 166, 167, 169, 182, 187, 188, 189, 190, 192, 195, 197, 201, 203, 207, 209, 210, 212, 215, 232, 233, 234, 241, 255, 256, 257, 258, 261, 262, 264, 267, 273, 275, 276, 277, 279, 287, 289, 290, 291, 294, 298, 299, 300, 302, 305, 307, 308, 315, 322, 324, 326, 327, 336, 340, 344, 347, 348, 349, 351, 357, 359, 363, 367, 383, 392, 399, 404, 411, 412, 415, 417, 425, 426, 431, 432, 439, 444, 445, 446, 453, 454, 456, 459, 460, 466, 467, 469, 470, 471, 472, 473, 474, 477, 478, 480, 481, 485], "pybytearray_res": [8, 54], "trade": [8, 223, 298, 351, 430], "safeti": [8, 12, 65, 83, 98, 124, 207, 257, 261, 289, 298, 330, 347, 402, 473, 475, 477, 485], "speed": [8, 40, 61, 65, 83, 100, 103, 108, 111, 116, 152, 167, 183, 190, 192, 196, 223, 229, 233, 234, 243, 258, 264, 267, 301, 303, 305, 336, 348, 350, 357, 359, 366, 372, 388, 428, 432, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "pybytes_typ": [9, 54], "pybytes_check": [9, 89, 472], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 40, 54], "pybytes_fromstringands": [9, 54, 472], "uniniti": [9, 31, 33, 40, 83, 95, 100, 305, 460, 485], "pybytes_fromformat": [9, 54, 485], "printf": [9, 61, 65, 82, 83, 106, 182, 252, 273, 434, 450, 453, 464, 471, 485], "calcul": [9, 29, 31, 32, 33, 56, 60, 61, 83, 95, 99, 100, 103, 104, 126, 157, 183, 187, 189, 192, 213, 233, 242, 258, 275, 281, 289, 301, 328, 339, 344, 350, 351, 352, 354, 358, 361, 371, 372, 383, 385, 388, 389, 394, 399, 405, 432, 434, 436, 439, 468, 471, 472, 475, 479, 483, 485], "liter": [9, 37, 61, 65, 88, 100, 110, 111, 118, 119, 126, 163, 164, 165, 189, 192, 193, 197, 200, 218, 227, 232, 237, 238, 255, 263, 268, 270, 273, 274, 276, 308, 313, 325, 337, 347, 351, 352, 355, 371, 372, 374, 381, 383, 390, 392, 398, 404, 407, 417, 419, 432, 435, 436, 437, 438, 445, 449, 453, 466, 468, 469, 471, 473, 474, 477, 479, 482, 483, 484, 485, 486], "ld": [9, 61, 82, 87, 182, 351, 460], "lu": [9, 61, 351, 391, 439, 466, 479, 481, 482, 485], "zd": [9, 61], "zu": [9, 61], "size_t": [9, 10, 18, 32, 33, 37, 40, 56, 61, 100, 182, 354, 478], "hex": [9, 61, 65, 95, 111, 112, 114, 149, 152, 164, 182, 232, 242, 260, 262, 348, 351, 352, 359, 374, 402, 432, 439, 448, 454, 456, 466, 467, 469, 471, 472, 474, 475, 476, 479, 480, 485], "0x": [9, 45, 61, 95, 97, 111, 182, 200, 232, 251, 289, 298, 351, 352, 388, 393, 394, 439, 470, 477, 485], "regardless": [9, 24, 31, 32, 33, 39, 56, 61, 69, 70, 78, 110, 116, 120, 126, 144, 172, 175, 181, 183, 189, 192, 215, 227, 254, 258, 264, 267, 268, 302, 308, 320, 339, 340, 342, 344, 347, 348, 351, 352, 354, 355, 359, 381, 388, 392, 393, 394, 403, 404, 406, 407, 416, 429, 434, 436, 439, 459, 465, 477, 478, 479, 480, 482, 485], "yield": [9, 28, 34, 54, 61, 65, 85, 95, 97, 104, 119, 122, 128, 139, 143, 144, 156, 158, 166, 172, 173, 175, 189, 196, 197, 204, 214, 230, 232, 233, 238, 239, 242, 249, 257, 258, 261, 264, 267, 268, 270, 277, 289, 299, 302, 305, 308, 325, 337, 347, 351, 354, 363, 367, 383, 385, 390, 393, 394, 398, 402, 411, 414, 417, 423, 431, 432, 435, 437, 439, 444, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "unrecogn": [9, 61, 99, 126, 235, 247, 418, 426, 439, 480, 481], "rest": [9, 18, 61, 87, 95, 99, 100, 104, 108, 109, 111, 112, 118, 126, 128, 167, 183, 192, 200, 230, 233, 254, 257, 273, 282, 298, 299, 308, 325, 329, 351, 367, 381, 383, 393, 423, 431, 432, 435, 439, 440, 445, 466, 468, 469, 471, 472, 473, 474, 476, 478, 479, 482, 484, 485], "discard": [9, 33, 36, 47, 52, 57, 61, 63, 65, 83, 100, 104, 112, 129, 133, 144, 149, 154, 158, 163, 164, 167, 189, 192, 250, 262, 264, 273, 274, 277, 289, 291, 292, 298, 302, 341, 344, 351, 366, 381, 404, 406, 415, 417, 420, 431, 432, 453, 459, 468, 471, 472, 473, 479, 481, 483, 485], "effect": [9, 14, 23, 29, 31, 32, 43, 49, 56, 60, 61, 65, 73, 83, 85, 94, 95, 98, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 119, 121, 126, 128, 133, 138, 150, 154, 165, 172, 173, 175, 182, 183, 187, 189, 191, 192, 193, 197, 200, 210, 215, 216, 217, 220, 222, 225, 232, 233, 238, 243, 250, 254, 260, 264, 267, 269, 272, 273, 274, 275, 278, 289, 298, 299, 301, 302, 303, 308, 314, 317, 320, 325, 328, 329, 330, 331, 334, 336, 337, 338, 340, 348, 349, 350, 351, 352, 354, 359, 363, 367, 369, 371, 381, 386, 388, 389, 390, 392, 393, 404, 409, 416, 424, 425, 426, 429, 431, 432, 434, 436, 439, 440, 446, 454, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "precis": [9, 13, 18, 25, 43, 61, 65, 82, 108, 181, 189, 220, 232, 237, 265, 268, 274, 275, 281, 289, 296, 299, 314, 319, 334, 335, 344, 347, 351, 352, 354, 359, 371, 372, 381, 390, 399, 403, 412, 431, 432, 434, 438, 439, 448, 456, 466, 470, 471, 472, 473, 477, 478, 479, 481, 482, 483, 484, 485], "pybytes_fromformatv": [9, 54], "pybytes_fromobject": [9, 54], "pybytes_s": [9, 54, 89], "pybytes_get_s": 9, "pybytes_asstr": [9, 54, 476], "last": [9, 22, 23, 31, 32, 33, 43, 56, 60, 64, 65, 69, 70, 73, 83, 86, 88, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 111, 112, 114, 120, 122, 126, 128, 132, 145, 146, 150, 152, 157, 158, 162, 164, 166, 167, 173, 175, 182, 183, 189, 190, 192, 194, 196, 197, 200, 203, 207, 210, 212, 216, 218, 220, 221, 222, 225, 228, 230, 232, 234, 239, 241, 242, 243, 252, 254, 255, 257, 261, 265, 267, 268, 272, 273, 275, 276, 277, 281, 289, 290, 294, 297, 298, 299, 300, 302, 303, 305, 307, 314, 320, 325, 326, 329, 334, 336, 337, 338, 344, 346, 347, 348, 349, 351, 352, 355, 357, 363, 370, 371, 374, 381, 383, 385, 386, 388, 390, 391, 392, 393, 394, 398, 399, 402, 406, 409, 410, 414, 417, 419, 426, 428, 431, 432, 434, 436, 439, 440, 444, 445, 446, 447, 450, 453, 456, 459, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "just": [9, 13, 27, 33, 37, 44, 49, 53, 60, 61, 63, 69, 70, 73, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 128, 135, 144, 145, 156, 157, 158, 162, 163, 164, 165, 167, 173, 175, 182, 183, 185, 187, 189, 192, 196, 200, 201, 207, 208, 218, 220, 225, 230, 232, 233, 237, 239, 241, 242, 250, 254, 257, 258, 267, 272, 273, 274, 275, 277, 287, 289, 290, 295, 298, 299, 302, 303, 305, 314, 319, 320, 325, 326, 334, 336, 337, 339, 344, 345, 347, 348, 351, 352, 355, 358, 359, 360, 367, 369, 370, 374, 380, 381, 385, 388, 390, 392, 393, 394, 399, 403, 406, 411, 413, 414, 417, 418, 419, 424, 425, 426, 427, 430, 431, 432, 434, 436, 438, 440, 445, 456, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "dealloc": [9, 27, 31, 33, 40, 43, 49, 60, 61, 83, 85, 86, 97, 234, 367, 406, 440, 467, 468, 473, 477, 483, 485], "pybytes_as_str": [9, 435], "pybytes_asstringands": [9, 54, 89], "pybytes_concat": [9, 54, 485], "newpart": 9, "stolen": [9, 28, 33, 82, 485], "pybytes_concatanddel": [9, 54], "_pybytes_res": [9, 485], "newsiz": [9, 27, 57, 284], "though": [9, 11, 29, 31, 33, 54, 55, 60, 61, 70, 72, 73, 76, 78, 83, 85, 86, 94, 95, 100, 102, 104, 109, 110, 111, 114, 115, 120, 121, 122, 126, 133, 138, 139, 145, 162, 164, 167, 179, 183, 192, 200, 203, 206, 207, 212, 213, 215, 218, 220, 232, 237, 242, 250, 254, 257, 258, 261, 264, 268, 273, 275, 277, 281, 289, 290, 294, 298, 299, 311, 317, 320, 325, 334, 337, 348, 351, 354, 367, 370, 371, 374, 386, 390, 392, 393, 394, 399, 411, 414, 415, 419, 429, 430, 432, 433, 434, 436, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 485], "immut": [9, 27, 33, 57, 60, 61, 65, 97, 103, 128, 167, 181, 182, 187, 189, 192, 215, 228, 232, 233, 261, 297, 299, 302, 402, 432, 434, 446, 453, 466, 469, 470, 471, 472, 473, 474, 476, 483, 484, 485], "build": [9, 30, 31, 32, 40, 43, 54, 55, 61, 62, 65, 70, 71, 72, 73, 75, 76, 78, 79, 84, 85, 86, 89, 94, 95, 100, 103, 106, 109, 112, 113, 115, 128, 129, 145, 147, 154, 162, 163, 164, 182, 190, 192, 193, 194, 196, 197, 198, 210, 213, 215, 232, 242, 243, 252, 260, 264, 267, 279, 281, 288, 298, 302, 313, 317, 320, 334, 340, 344, 345, 348, 351, 359, 360, 367, 374, 386, 392, 394, 398, 399, 403, 404, 413, 414, 428, 429, 432, 455, 459, 462, 465, 466, 468, 486], "brand": [9, 52, 57, 83, 311, 485], "refcount": [9, 31, 60, 61, 367, 471, 485], "lvalu": [9, 298, 351], "differ": [9, 15, 24, 31, 32, 33, 34, 40, 43, 55, 56, 60, 61, 63, 65, 69, 70, 74, 76, 78, 81, 82, 83, 84, 85, 86, 89, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 126, 128, 129, 133, 138, 139, 142, 144, 145, 147, 158, 161, 162, 163, 164, 165, 167, 169, 172, 173, 175, 179, 180, 181, 182, 183, 188, 189, 191, 192, 200, 202, 203, 209, 210, 212, 215, 221, 223, 229, 230, 232, 233, 237, 243, 249, 250, 252, 254, 257, 258, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 289, 290, 295, 298, 299, 300, 301, 302, 303, 305, 308, 314, 319, 320, 324, 325, 326, 327, 328, 334, 336, 337, 339, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 360, 363, 367, 368, 369, 370, 371, 372, 374, 377, 380, 381, 385, 389, 390, 392, 393, 394, 398, 399, 405, 409, 411, 414, 415, 424, 426, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "realloc": [9, 40, 51, 83, 183, 470, 481, 485], "memoryerror": [9, 23, 52, 57, 61, 65, 128, 192, 220, 399, 454, 479, 485], "slot": [10, 16, 30, 43, 45, 47, 48, 55, 58, 65, 85, 86, 100, 103, 109, 140, 187, 197, 219, 233, 234, 258, 261, 287, 289, 322, 351, 432, 434, 466, 467, 468, 470, 471, 472, 474, 476, 478, 479, 480, 483, 484, 485], "callabl": [10, 31, 35, 55, 56, 60, 64, 65, 82, 83, 95, 97, 98, 102, 104, 109, 113, 118, 122, 126, 133, 138, 141, 143, 167, 172, 173, 176, 178, 182, 183, 187, 188, 193, 196, 197, 213, 214, 215, 218, 230, 231, 232, 255, 258, 259, 260, 264, 273, 274, 275, 277, 289, 297, 298, 299, 304, 305, 319, 320, 321, 331, 338, 339, 342, 351, 355, 359, 370, 372, 376, 381, 383, 392, 393, 394, 399, 403, 404, 406, 411, 417, 425, 431, 434, 436, 454, 459, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485], "kwarg": [10, 55, 60, 65, 95, 97, 100, 103, 108, 109, 118, 121, 126, 128, 133, 144, 146, 164, 166, 172, 173, 176, 183, 193, 232, 258, 261, 268, 273, 274, 289, 297, 298, 299, 305, 313, 314, 321, 331, 341, 351, 352, 363, 367, 369, 370, 389, 390, 392, 393, 394, 403, 406, 432, 435, 445, 472, 478, 480, 481, 483, 485], "tp_new": [10, 58, 60, 65, 85, 86, 485], "tp_init": [10, 60, 65, 85, 86, 485], "pyobject_cal": [10, 54, 60, 83, 484, 485], "pep": [10, 13, 23, 29, 31, 32, 33, 43, 47, 54, 56, 59, 60, 61, 63, 65, 67, 75, 79, 81, 83, 85, 88, 90, 95, 96, 97, 98, 100, 104, 114, 118, 119, 122, 123, 128, 129, 133, 135, 145, 147, 148, 158, 159, 160, 161, 164, 166, 167, 169, 172, 175, 176, 179, 181, 187, 193, 197, 207, 217, 220, 232, 233, 234, 254, 256, 257, 258, 259, 261, 264, 271, 273, 278, 281, 287, 293, 294, 295, 299, 301, 302, 305, 307, 308, 317, 328, 330, 332, 334, 335, 338, 339, 340, 341, 343, 344, 346, 347, 348, 351, 352, 355, 356, 359, 364, 367, 371, 383, 389, 401, 403, 406, 411, 412, 427, 429, 431, 432, 434, 435, 436, 439, 440, 445, 454, 459, 460, 461, 465, 466, 484, 485, 486], "590": [10, 65, 476, 484, 485], "pyvectorcall_cal": [10, 60], "py_tpflags_have_vectorcal": [10, 48, 60, 65, 485], "tp_vectorcall_offset": [10, 55, 58, 60, 85, 485], "vectorcallfunc": [10, 60, 85], "typedef": [10, 11, 15, 27, 30, 31, 48, 55, 56, 61, 65, 85, 86, 100, 485], "nargsf": 10, "kwname": [10, 55], "py_vectorcall_arguments_offset": 10, "pyvectorcall_narg": 10, "pyobject_vectorcallmethod": [10, 485], "pyobject_vectorcal": [10, 485], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 485], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 485], "_pyobject_callmethodnoarg": [10, 485], "_pyobject_callmethodonearg": [10, 485], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 54, 484, 485], "py_leaverecursivecal": [10, 23, 54, 484, 485], "pyvectorcall_funct": [10, 485], "fall": [10, 15, 22, 25, 40, 60, 61, 76, 94, 104, 108, 113, 167, 183, 187, 189, 192, 203, 212, 220, 232, 274, 295, 299, 301, 331, 348, 350, 351, 352, 398, 399, 429, 432, 436, 439, 452, 466, 468, 469, 471, 472, 473, 474, 476, 477, 479, 481, 482, 484, 485], "pyobject_callnoarg": [10, 54, 85, 484, 485], "pyobject_callonearg": [10, 484, 485], "pyobject_callobject": [10, 54, 82, 83, 89], "pyobject_callfunct": [10, 23, 54, 471, 483], "pyobject_callmethod": [10, 52, 54, 89, 476], "pyobject_callfunctionobjarg": [10, 54, 485], "pyobject_callmethodobjarg": [10, 54, 485], "pyobject_callmethodnoarg": [10, 485], "pyobject_callmethodonearg": [10, 485], "arg1": [10, 85, 95, 104, 106, 122, 232, 298, 299, 432, 468, 469, 471], "arg2": [10, 85, 95, 104, 106, 122, 232, 298, 393, 432, 468, 469, 471], "kwdict": [10, 83], "py_tpflags_method_descriptor": [10, 48, 60, 65, 485], "unbound": [10, 60, 65, 109, 121, 192, 193, 197, 232, 233, 261, 367, 370, 388, 389, 432, 433, 436, 440, 468, 470, 474, 476, 480, 482, 485], "pycallable_check": [10, 54, 82, 83], "pycapsul": [11, 83, 473, 475, 476, 477, 485], "opaqu": [11, 31, 33, 37, 58, 60, 63, 72, 122, 177, 264, 320, 335, 349, 412, 417, 467, 476, 477, 479, 482, 483, 484, 485], "who": [11, 70, 78, 83, 107, 108, 109, 113, 114, 133, 169, 235, 237, 255, 273, 299, 306, 328, 348, 352, 363, 388, 415, 425, 427, 429, 450, 465, 466, 468, 469, 470, 471, 473, 478, 481, 483, 484, 485], "often": [11, 13, 31, 33, 55, 61, 72, 74, 76, 78, 83, 85, 86, 94, 95, 100, 102, 103, 104, 107, 109, 111, 113, 114, 115, 116, 120, 126, 128, 145, 152, 158, 162, 172, 181, 182, 189, 190, 192, 196, 200, 201, 205, 220, 232, 234, 237, 240, 243, 261, 267, 287, 298, 305, 314, 315, 317, 337, 344, 347, 348, 350, 351, 353, 355, 367, 370, 371, 374, 390, 393, 394, 399, 418, 425, 428, 432, 438, 439, 440, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 480, 483, 485], "dynam": [11, 22, 29, 40, 43, 49, 60, 63, 65, 69, 76, 78, 82, 83, 87, 89, 90, 94, 95, 108, 109, 112, 119, 122, 124, 147, 188, 196, 210, 232, 233, 254, 257, 258, 260, 261, 290, 299, 327, 342, 344, 351, 352, 359, 374, 381, 388, 390, 393, 394, 411, 427, 432, 434, 436, 440, 444, 460, 466, 468, 469, 471, 472, 477, 478, 479, 482, 483, 485], "load": [11, 14, 29, 31, 32, 33, 39, 43, 54, 55, 56, 65, 69, 73, 78, 82, 83, 87, 89, 94, 95, 96, 100, 103, 106, 108, 109, 112, 115, 124, 128, 148, 158, 162, 172, 173, 190, 191, 193, 197, 200, 218, 220, 224, 230, 250, 251, 254, 257, 258, 259, 262, 267, 268, 270, 273, 274, 280, 282, 285, 290, 291, 299, 303, 304, 305, 308, 310, 313, 314, 317, 320, 326, 336, 340, 347, 348, 351, 359, 367, 371, 373, 374, 386, 388, 389, 409, 414, 417, 418, 423, 424, 425, 427, 428, 429, 431, 432, 435, 437, 440, 450, 459, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pycapsule_destructor": [11, 54], "destructor": [11, 31, 54, 60, 85, 86, 88, 94, 97, 121, 194, 299, 322, 355, 359, 432, 440, 459, 475, 477, 481, 483, 485], "pycapsule_new": [11, 54, 83], "pycapsule_checkexact": 11, "encapsul": [11, 94, 95, 98, 103, 118, 120, 162, 172, 209, 215, 255, 264, 292, 311, 342, 359, 414, 418, 420, 423, 431, 436, 440, 470, 471, 472, 473, 479], "outliv": [11, 290, 431], "permit": [11, 56, 83, 98, 100, 107, 128, 192, 217, 219, 232, 252, 261, 265, 268, 271, 277, 289, 290, 299, 305, 314, 325, 351, 355, 393, 414, 423, 430, 434, 435, 440, 459, 465, 471, 472, 478, 479, 480, 483, 485], "attribut": [11, 22, 23, 26, 29, 31, 33, 43, 47, 48, 53, 57, 58, 59, 60, 65, 69, 84, 89, 97, 98, 100, 104, 108, 111, 113, 115, 118, 119, 120, 121, 122, 124, 126, 128, 129, 133, 139, 142, 148, 150, 156, 157, 158, 162, 164, 165, 166, 173, 178, 181, 182, 183, 187, 188, 189, 192, 193, 194, 196, 197, 200, 202, 203, 204, 207, 210, 212, 214, 215, 220, 222, 223, 230, 232, 233, 235, 239, 240, 241, 242, 245, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 264, 265, 268, 270, 274, 275, 276, 277, 279, 287, 289, 290, 292, 294, 297, 301, 305, 308, 310, 311, 316, 318, 319, 320, 321, 325, 327, 331, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 352, 354, 355, 357, 359, 363, 366, 367, 369, 370, 371, 372, 374, 376, 377, 379, 385, 386, 388, 389, 390, 392, 398, 399, 402, 403, 404, 406, 409, 411, 412, 414, 415, 417, 418, 419, 421, 423, 424, 426, 427, 428, 429, 430, 431, 433, 439, 440, 444, 446, 460, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486], "modulenam": [11, 81, 83, 89, 95, 106, 454, 485], "attributenam": [11, 83], "enabl": [11, 27, 32, 33, 47, 54, 60, 65, 70, 85, 86, 102, 111, 115, 116, 118, 119, 126, 128, 139, 144, 148, 150, 158, 159, 162, 173, 175, 182, 183, 191, 192, 194, 200, 204, 218, 220, 221, 230, 232, 233, 234, 237, 249, 252, 254, 255, 258, 261, 262, 264, 272, 274, 275, 289, 294, 299, 302, 303, 305, 311, 312, 314, 317, 320, 321, 325, 326, 339, 340, 341, 344, 347, 348, 351, 352, 355, 357, 359, 363, 367, 372, 374, 376, 381, 384, 388, 390, 392, 394, 403, 404, 411, 416, 418, 419, 424, 426, 431, 432, 440, 459, 460, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "pycapsule_import": [11, 54, 83], "pycapsule_getpoint": [11, 54, 473], "compar": [11, 23, 31, 32, 47, 60, 61, 65, 79, 85, 94, 99, 102, 107, 108, 109, 110, 111, 112, 113, 116, 128, 133, 172, 182, 187, 188, 189, 192, 196, 197, 200, 202, 203, 204, 209, 218, 221, 223, 232, 233, 243, 265, 268, 270, 272, 273, 275, 277, 289, 290, 296, 298, 302, 314, 317, 320, 322, 332, 334, 347, 348, 349, 351, 353, 359, 367, 368, 372, 374, 386, 390, 391, 392, 393, 394, 402, 409, 417, 429, 431, 432, 434, 436, 439, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "strcmp": [11, 18, 85, 485], "pycapsule_getdestructor": [11, 54], "legal": [11, 87, 100, 102, 114, 197, 232, 248, 254, 257, 264, 303, 367, 371, 374, 381, 390, 424, 434, 439, 467, 468, 469, 471, 472, 473, 485], "somewhat": [11, 23, 69, 100, 182, 189, 211, 233, 254, 272, 298, 299, 344, 374, 429, 466, 471, 474, 476, 482, 483, 485], "ambigu": [11, 33, 65, 100, 104, 111, 126, 189, 260, 265, 270, 298, 303, 325, 351, 429, 431, 434, 438, 439, 466, 472, 476, 479, 481, 482, 483, 484, 485], "pycapsule_isvalid": [11, 54, 473], "pyerr_occur": [11, 22, 23, 25, 33, 34, 37, 47, 54, 61, 82, 83, 100, 485], "disambigu": [11, 37, 65, 189, 434, 439, 485], "pycapsule_getcontext": [11, 54], "context": [11, 16, 23, 31, 40, 43, 47, 51, 61, 63, 65, 70, 76, 83, 88, 89, 95, 97, 100, 104, 112, 114, 126, 128, 129, 133, 135, 138, 144, 158, 159, 166, 170, 172, 173, 189, 190, 193, 194, 196, 197, 225, 230, 232, 237, 242, 243, 249, 258, 259, 260, 261, 264, 268, 273, 274, 275, 276, 277, 284, 294, 296, 299, 301, 303, 304, 305, 311, 313, 314, 320, 321, 322, 325, 327, 328, 334, 335, 336, 342, 344, 345, 350, 352, 355, 359, 363, 364, 365, 367, 370, 373, 380, 382, 392, 393, 399, 403, 406, 409, 414, 416, 417, 418, 419, 423, 426, 431, 433, 434, 435, 439, 440, 460, 466, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486], "pycapsule_getnam": [11, 54], "no_block": 11, "full": [11, 27, 31, 32, 33, 54, 60, 61, 65, 69, 70, 78, 83, 86, 94, 100, 103, 104, 108, 109, 110, 111, 112, 115, 140, 144, 145, 154, 157, 163, 164, 167, 169, 170, 173, 174, 179, 181, 182, 186, 189, 192, 196, 200, 204, 207, 208, 219, 220, 229, 234, 250, 254, 257, 259, 265, 267, 273, 275, 281, 284, 286, 287, 289, 290, 298, 299, 301, 303, 308, 320, 322, 325, 337, 338, 339, 342, 344, 345, 348, 350, 351, 354, 355, 359, 363, 367, 371, 374, 388, 389, 390, 392, 393, 398, 399, 403, 406, 407, 411, 415, 417, 423, 426, 432, 433, 435, 436, 440, 450, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyimport_importmodulenoblock": [11, 29, 54, 472, 474, 478], "convent": [11, 33, 55, 60, 69, 73, 76, 78, 83, 95, 100, 102, 103, 108, 109, 114, 116, 120, 153, 157, 173, 182, 183, 184, 187, 189, 216, 235, 237, 250, 253, 272, 277, 290, 298, 299, 300, 301, 351, 352, 359, 367, 369, 371, 399, 425, 432, 434, 438, 439, 456, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 482, 485], "pyimport_importmodul": [11, 29, 54, 83, 89, 467, 472, 474, 476], "accessor": [11, 65, 95, 113, 232, 279, 415, 471, 483, 485], "pycapsule_get": 11, "nonzero": [11, 23, 31, 56, 61, 83, 111, 118, 121, 192, 232, 273, 275, 281, 284, 289, 306, 317, 325, 351, 359, 366, 370, 371, 432, 439, 472, 483], "pycapsule_setcontext": [11, 54], "pycapsule_setdestructor": [11, 54], "pycapsule_setnam": [11, 54], "made": [11, 12, 29, 31, 33, 41, 56, 60, 63, 69, 74, 78, 82, 95, 100, 106, 108, 109, 110, 111, 116, 118, 119, 126, 139, 145, 164, 166, 172, 173, 175, 182, 183, 189, 192, 197, 200, 203, 206, 207, 212, 215, 218, 220, 230, 237, 239, 249, 250, 254, 257, 258, 261, 264, 267, 273, 274, 275, 281, 284, 287, 289, 299, 303, 305, 313, 314, 320, 326, 327, 328, 330, 334, 337, 338, 339, 340, 342, 344, 348, 350, 351, 355, 363, 367, 370, 374, 386, 390, 393, 394, 398, 402, 404, 406, 411, 414, 417, 423, 424, 425, 429, 430, 431, 432, 440, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pycapsule_setpoint": [11, 54], "multipl": [12, 29, 31, 32, 43, 45, 54, 60, 61, 65, 69, 70, 72, 73, 74, 76, 78, 81, 83, 85, 86, 94, 97, 99, 100, 102, 104, 110, 111, 112, 113, 114, 115, 116, 121, 122, 126, 127, 128, 133, 142, 145, 149, 156, 158, 164, 166, 169, 173, 175, 181, 183, 187, 189, 192, 193, 195, 200, 206, 212, 216, 218, 220, 226, 228, 230, 232, 235, 237, 239, 242, 252, 254, 258, 260, 261, 264, 267, 268, 273, 274, 276, 277, 281, 282, 284, 288, 289, 290, 298, 299, 303, 305, 306, 308, 313, 320, 325, 326, 335, 336, 337, 342, 344, 345, 347, 348, 349, 350, 351, 354, 358, 359, 367, 370, 372, 374, 380, 381, 382, 384, 388, 390, 392, 402, 403, 404, 406, 411, 413, 417, 419, 423, 431, 432, 433, 434, 435, 436, 439, 440, 445, 459, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "scope": [12, 33, 49, 65, 86, 88, 95, 97, 100, 107, 108, 109, 119, 120, 128, 150, 166, 197, 218, 261, 265, 303, 313, 320, 326, 337, 344, 348, 358, 359, 374, 390, 393, 394, 403, 415, 417, 419, 431, 432, 433, 434, 436, 440, 449, 454, 466, 472, 474, 477, 478, 481, 482, 483, 484, 485, 486], "stack": [12, 23, 31, 33, 56, 65, 83, 85, 88, 100, 108, 121, 124, 128, 133, 144, 146, 150, 163, 166, 175, 177, 183, 190, 191, 197, 200, 218, 220, 221, 232, 233, 254, 260, 263, 273, 275, 303, 321, 322, 328, 337, 339, 344, 348, 349, 351, 359, 370, 380, 392, 393, 394, 431, 432, 433, 434, 439, 440, 447, 449, 459, 466, 467, 470, 471, 472, 473, 477, 478, 479, 480, 482, 483, 484, 485], "frame": [12, 13, 19, 23, 28, 31, 33, 47, 50, 63, 65, 88, 94, 106, 123, 144, 147, 149, 150, 177, 183, 191, 197, 218, 220, 221, 254, 261, 268, 273, 303, 339, 343, 344, 348, 351, 356, 359, 373, 374, 379, 380, 381, 385, 389, 405, 411, 431, 432, 433, 459, 467, 469, 470, 471, 473, 476, 478, 479, 480, 482, 484, 485], "outer": [12, 50, 95, 175, 192, 197, 214, 233, 244, 247, 261, 359, 431, 432, 433, 439, 440, 474, 477, 478, 484, 485], "itself": [12, 31, 40, 43, 47, 58, 60, 61, 64, 65, 69, 70, 74, 78, 81, 82, 83, 85, 86, 95, 98, 100, 103, 104, 108, 109, 111, 115, 116, 120, 121, 122, 125, 126, 128, 133, 139, 144, 150, 157, 158, 162, 169, 182, 183, 184, 187, 189, 194, 199, 200, 202, 204, 210, 212, 218, 220, 222, 232, 233, 250, 252, 254, 255, 257, 258, 261, 265, 267, 268, 274, 275, 277, 287, 288, 289, 290, 294, 298, 299, 302, 305, 314, 320, 325, 337, 338, 341, 344, 347, 348, 351, 352, 353, 355, 359, 360, 363, 364, 366, 367, 370, 381, 385, 388, 389, 390, 392, 393, 398, 399, 401, 403, 404, 418, 419, 420, 423, 427, 432, 433, 434, 436, 438, 439, 440, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485], "generat": [12, 28, 29, 31, 47, 55, 61, 63, 65, 69, 70, 72, 73, 78, 79, 81, 82, 83, 85, 87, 89, 95, 97, 106, 108, 109, 114, 116, 118, 119, 126, 128, 129, 133, 136, 140, 142, 147, 148, 149, 150, 152, 157, 158, 162, 164, 167, 169, 172, 173, 175, 179, 181, 183, 187, 188, 189, 193, 196, 197, 199, 200, 201, 203, 210, 212, 215, 216, 220, 224, 230, 232, 234, 237, 242, 247, 251, 252, 255, 260, 267, 270, 273, 275, 277, 281, 287, 289, 290, 291, 295, 299, 305, 313, 317, 320, 321, 324, 325, 327, 329, 332, 337, 342, 347, 350, 353, 355, 357, 359, 362, 363, 371, 374, 381, 382, 383, 384, 385, 388, 389, 390, 392, 398, 399, 402, 406, 411, 413, 414, 417, 421, 423, 424, 425, 428, 431, 432, 433, 435, 436, 438, 439, 440, 449, 459, 460, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486], "elsewher": [12, 69, 111, 120, 144, 163, 173, 278, 289, 330, 390, 414, 436, 439, 476, 479, 485], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 28, 53, 64, 406], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 476, 485], "low": [13, 16, 24, 33, 36, 57, 60, 61, 65, 69, 76, 85, 94, 106, 108, 111, 112, 114, 133, 135, 136, 139, 141, 142, 144, 145, 152, 157, 170, 173, 175, 183, 184, 197, 220, 230, 232, 260, 264, 266, 287, 290, 299, 302, 314, 324, 325, 334, 335, 336, 339, 342, 347, 348, 350, 351, 359, 361, 374, 404, 406, 417, 419, 428, 460, 468, 469, 471, 472, 473, 476, 478, 480, 481, 483, 485], "detail": [13, 17, 18, 32, 40, 43, 51, 52, 54, 56, 60, 61, 63, 65, 69, 70, 74, 78, 81, 82, 83, 86, 87, 89, 94, 95, 97, 98, 102, 103, 104, 106, 108, 109, 110, 111, 114, 115, 116, 118, 120, 124, 126, 128, 133, 139, 142, 144, 147, 148, 150, 153, 158, 159, 164, 175, 178, 179, 181, 182, 183, 187, 188, 192, 196, 197, 199, 200, 201, 203, 208, 212, 214, 218, 220, 222, 232, 237, 241, 242, 252, 253, 254, 257, 258, 259, 261, 264, 265, 268, 271, 273, 275, 276, 277, 278, 281, 287, 289, 298, 299, 305, 306, 322, 325, 326, 328, 330, 337, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 367, 369, 370, 374, 385, 389, 390, 392, 393, 398, 399, 403, 404, 406, 409, 411, 414, 417, 419, 423, 425, 426, 431, 432, 433, 434, 435, 436, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "execut": [13, 23, 24, 31, 32, 33, 43, 47, 49, 50, 56, 63, 65, 69, 70, 76, 78, 81, 82, 83, 85, 86, 87, 94, 95, 99, 100, 103, 104, 106, 109, 110, 111, 114, 116, 119, 120, 121, 126, 128, 139, 142, 144, 146, 148, 150, 158, 162, 163, 164, 166, 169, 172, 175, 176, 182, 191, 193, 198, 199, 208, 220, 232, 233, 241, 243, 252, 255, 257, 258, 260, 261, 264, 272, 273, 274, 275, 278, 286, 287, 289, 290, 298, 299, 300, 303, 304, 305, 306, 307, 309, 314, 315, 319, 321, 326, 328, 331, 334, 336, 337, 338, 340, 344, 347, 349, 351, 353, 355, 357, 359, 370, 371, 373, 374, 376, 380, 383, 390, 392, 393, 394, 399, 403, 404, 407, 409, 411, 424, 431, 434, 436, 437, 440, 441, 447, 454, 455, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "hasn": [13, 33, 69, 89, 94, 95, 100, 116, 139, 172, 196, 239, 303, 320, 340, 348, 355, 361, 393, 394, 466, 467, 471, 472, 474, 480, 482, 485], "pycodeobject": [13, 50], "subject": [13, 43, 52, 60, 63, 85, 94, 104, 108, 109, 115, 128, 173, 189, 197, 200, 203, 207, 209, 210, 212, 250, 254, 268, 273, 274, 275, 277, 294, 314, 336, 344, 348, 367, 371, 430, 431, 432, 435, 439, 445, 471, 476, 479, 485], "chang": [13, 17, 22, 23, 31, 32, 33, 43, 51, 52, 54, 55, 56, 57, 60, 61, 63, 65, 69, 72, 73, 76, 78, 82, 83, 85, 86, 87, 89, 98, 99, 102, 103, 104, 106, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 126, 128, 156, 157, 158, 162, 169, 172, 173, 175, 176, 181, 182, 183, 185, 187, 189, 190, 192, 196, 197, 200, 201, 203, 204, 208, 212, 213, 214, 215, 218, 219, 220, 223, 225, 229, 230, 232, 233, 234, 238, 241, 242, 247, 250, 253, 254, 255, 257, 258, 259, 261, 264, 265, 267, 271, 272, 273, 274, 275, 276, 277, 284, 287, 289, 290, 299, 300, 302, 303, 305, 311, 312, 314, 317, 319, 320, 325, 326, 327, 334, 335, 337, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 362, 363, 366, 367, 369, 370, 371, 372, 374, 380, 381, 382, 383, 386, 389, 390, 392, 393, 394, 398, 399, 403, 404, 405, 409, 411, 414, 415, 416, 417, 420, 425, 429, 430, 431, 432, 433, 436, 438, 439, 440, 445, 455, 459, 460, 465, 485, 486], "pycode_typ": 13, "pycode_check": 13, "co": [13, 29, 55, 63, 65, 86, 126, 172, 183, 262, 344, 367, 470, 477, 482, 485], "pycode_getnumfre": 13, "pycode_new": [13, 473, 483, 485], "argcount": [13, 63, 148, 389, 483], "kwonlyargcount": [13, 148, 389, 485], "nlocal": [13, 148, 389], "stacksiz": [13, 148, 389, 485], "varnam": [13, 485], "freevar": [13, 485], "cellvar": [13, 485], "filenam": [13, 23, 31, 32, 43, 56, 63, 65, 69, 70, 71, 73, 74, 76, 79, 81, 87, 94, 95, 100, 104, 106, 108, 109, 111, 116, 118, 125, 126, 128, 148, 150, 153, 156, 158, 162, 163, 164, 165, 166, 169, 173, 175, 181, 182, 190, 191, 193, 195, 196, 200, 203, 204, 207, 208, 212, 220, 221, 225, 226, 230, 232, 237, 238, 241, 250, 254, 257, 258, 260, 261, 262, 271, 273, 274, 275, 276, 278, 285, 287, 289, 291, 292, 298, 299, 300, 301, 303, 305, 308, 310, 314, 315, 317, 321, 325, 326, 336, 337, 338, 343, 355, 358, 359, 362, 363, 367, 374, 380, 383, 385, 386, 388, 389, 392, 394, 399, 403, 404, 407, 409, 410, 411, 415, 416, 417, 418, 425, 426, 432, 440, 442, 450, 455, 456, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485], "firstlineno": 13, "lnotab": 13, "dummi": [13, 65, 83, 109, 120, 170, 182, 196, 237, 264, 299, 348, 363, 367, 370, 388, 411, 481, 485], "pycode_newempti": [13, 473], "bind": [13, 42, 55, 65, 95, 103, 109, 112, 133, 135, 145, 148, 175, 177, 183, 200, 230, 232, 237, 248, 252, 261, 272, 274, 300, 304, 321, 326, 335, 341, 342, 344, 345, 348, 357, 358, 359, 367, 373, 376, 380, 381, 388, 413, 431, 432, 434, 436, 437, 438, 440, 445, 463, 466, 467, 468, 470, 471, 472, 476, 478, 479, 480, 482, 485], "definit": [13, 29, 31, 33, 37, 43, 48, 54, 55, 56, 61, 65, 69, 71, 78, 83, 85, 86, 95, 97, 98, 100, 102, 107, 111, 114, 118, 122, 126, 149, 150, 157, 164, 167, 175, 182, 183, 187, 189, 218, 232, 233, 237, 239, 245, 254, 257, 258, 259, 260, 261, 262, 270, 273, 275, 279, 287, 289, 290, 295, 298, 305, 314, 318, 319, 321, 330, 342, 347, 351, 352, 359, 364, 369, 371, 382, 388, 389, 390, 391, 392, 399, 402, 406, 412, 413, 414, 415, 418, 432, 433, 434, 435, 436, 437, 438, 439, 440, 449, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 482, 483, 484, 485], "bytecod": [13, 29, 31, 33, 63, 65, 69, 94, 95, 97, 104, 106, 111, 169, 193, 232, 257, 258, 260, 261, 270, 306, 317, 330, 339, 358, 359, 386, 432, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 485, 486], "pycode_newwithposonlyarg": [13, 483, 485], "posonlyargcount": [13, 148, 389, 483, 485], "funcnam": [13, 65, 69, 82, 106, 150, 191, 273, 431, 444], "line": [13, 23, 24, 31, 32, 33, 50, 61, 63, 65, 69, 70, 72, 73, 74, 76, 78, 79, 81, 82, 83, 86, 94, 95, 99, 100, 102, 104, 106, 108, 109, 110, 111, 114, 115, 116, 118, 119, 120, 122, 124, 125, 129, 132, 141, 142, 148, 149, 150, 152, 153, 156, 157, 158, 159, 161, 163, 164, 165, 166, 173, 175, 176, 181, 182, 183, 184, 189, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 211, 212, 214, 215, 218, 220, 221, 226, 229, 230, 232, 237, 247, 249, 252, 255, 258, 259, 260, 264, 265, 267, 270, 273, 274, 275, 276, 277, 278, 284, 287, 288, 289, 291, 292, 294, 302, 303, 305, 307, 308, 311, 313, 314, 318, 319, 320, 321, 323, 325, 330, 337, 338, 341, 342, 347, 348, 351, 352, 355, 357, 358, 359, 364, 368, 369, 372, 373, 374, 377, 380, 382, 385, 386, 388, 391, 393, 394, 400, 403, 404, 407, 411, 415, 417, 420, 424, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 444, 445, 446, 447, 450, 452, 453, 455, 456, 457, 460, 462, 466, 467, 468, 469, 471, 472, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486], "illeg": [13, 23, 45, 104, 114, 164, 203, 212, 219, 220, 299, 320, 339, 348, 351, 371, 381, 411, 414, 426, 431, 432, 435, 439, 440, 467, 468, 470, 471, 473, 477, 482, 483], "exec": [13, 31, 65, 69, 83, 94, 116, 118, 128, 148, 150, 163, 165, 200, 219, 220, 232, 258, 260, 299, 303, 314, 351, 355, 358, 359, 367, 374, 383, 384, 385, 386, 432, 433, 440, 441, 442, 444, 454, 466, 467, 468, 470, 471, 474, 476, 479, 480, 485], "eval": [13, 60, 65, 95, 98, 118, 127, 128, 150, 163, 165, 220, 232, 260, 261, 274, 303, 305, 313, 333, 351, 380, 385, 433, 435, 439, 440, 441, 444, 448, 454, 466, 470, 472, 474, 475, 476, 477, 485], "pycode_addr2lin": [13, 469, 476, 481], "byte_offset": 13, "pyframe_getlinenumb": [13, 50, 54, 473, 476, 481, 484], "626": [13, 65, 197, 485], "pycodec_regist": [14, 54], "search_funct": [14, 164], "regist": [14, 31, 32, 56, 60, 65, 70, 75, 83, 86, 94, 95, 97, 100, 114, 115, 122, 126, 133, 138, 139, 141, 146, 151, 164, 167, 170, 173, 175, 181, 191, 200, 204, 210, 215, 221, 232, 233, 258, 260, 262, 264, 273, 282, 289, 295, 299, 304, 305, 308, 321, 326, 334, 335, 338, 339, 344, 348, 351, 359, 367, 374, 381, 388, 392, 399, 404, 406, 407, 410, 414, 417, 419, 424, 425, 431, 432, 434, 436, 466, 467, 469, 470, 472, 473, 476, 477, 478, 479, 480, 482, 483, 485], "search": [14, 23, 29, 31, 32, 33, 56, 61, 65, 69, 72, 74, 78, 85, 94, 95, 103, 108, 114, 120, 147, 154, 158, 164, 166, 169, 182, 200, 203, 218, 223, 232, 237, 238, 255, 257, 258, 262, 271, 272, 273, 274, 276, 284, 285, 286, 294, 299, 303, 305, 308, 314, 317, 318, 319, 337, 338, 340, 347, 351, 355, 359, 368, 373, 374, 376, 380, 388, 392, 399, 400, 407, 414, 416, 417, 419, 424, 426, 427, 429, 431, 432, 433, 434, 437, 440, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485], "tri": [14, 31, 32, 33, 40, 43, 46, 47, 55, 60, 61, 65, 69, 73, 78, 81, 83, 85, 86, 87, 88, 89, 94, 97, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 121, 126, 128, 133, 139, 143, 144, 146, 147, 152, 158, 165, 166, 172, 173, 181, 182, 183, 189, 192, 194, 196, 197, 200, 207, 210, 216, 218, 219, 220, 230, 232, 233, 235, 237, 243, 252, 254, 257, 258, 261, 264, 267, 268, 270, 272, 273, 274, 275, 277, 282, 285, 288, 289, 292, 295, 298, 299, 301, 303, 305, 308, 311, 314, 319, 320, 321, 325, 326, 328, 329, 337, 338, 339, 342, 344, 347, 348, 352, 355, 359, 363, 364, 366, 367, 370, 372, 374, 380, 385, 388, 390, 393, 394, 399, 403, 404, 406, 407, 411, 412, 417, 423, 424, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 447, 450, 453, 459, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "packag": [14, 29, 31, 32, 54, 60, 61, 65, 67, 72, 74, 75, 76, 79, 81, 84, 86, 87, 89, 90, 95, 97, 103, 108, 109, 116, 117, 118, 149, 166, 182, 189, 193, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 232, 237, 245, 249, 254, 257, 258, 260, 261, 267, 273, 274, 275, 282, 285, 286, 287, 289, 291, 313, 318, 319, 321, 330, 336, 340, 342, 348, 350, 352, 359, 360, 373, 374, 380, 384, 388, 389, 390, 392, 393, 394, 396, 403, 404, 413, 415, 418, 425, 426, 427, 429, 430, 437, 440, 442, 449, 457, 458, 459, 460, 462, 464, 466, 468, 470, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486], "sure": [14, 16, 23, 43, 49, 60, 61, 65, 76, 78, 82, 85, 86, 89, 94, 95, 100, 102, 104, 108, 109, 111, 116, 126, 158, 162, 164, 173, 182, 192, 220, 232, 234, 242, 258, 272, 289, 298, 299, 302, 335, 347, 348, 367, 370, 374, 401, 404, 405, 417, 425, 432, 465, 468, 469, 471, 472, 474, 477, 478, 485], "pycodec_unregist": [14, 54, 476, 485], "unregist": [14, 65, 133, 146, 151, 164, 191, 221, 299, 321, 334, 335, 338, 374, 406, 476, 484, 485], "clear": [14, 30, 31, 33, 43, 45, 56, 58, 60, 65, 79, 83, 85, 86, 90, 95, 100, 102, 104, 106, 109, 110, 111, 112, 114, 115, 124, 126, 133, 143, 162, 164, 166, 167, 170, 173, 175, 183, 188, 192, 200, 201, 212, 223, 229, 230, 233, 234, 239, 243, 250, 254, 258, 261, 262, 271, 273, 275, 277, 279, 282, 291, 298, 299, 303, 308, 325, 326, 338, 339, 344, 347, 350, 351, 359, 367, 370, 381, 385, 386, 388, 392, 393, 394, 403, 404, 417, 427, 431, 432, 434, 446, 453, 460, 465, 466, 468, 469, 471, 472, 473, 476, 477, 478, 479, 481, 482, 484, 485], "cach": [14, 29, 32, 40, 58, 60, 61, 65, 83, 85, 94, 97, 103, 108, 111, 115, 122, 154, 164, 166, 169, 182, 190, 196, 223, 231, 233, 237, 257, 258, 271, 273, 286, 289, 294, 299, 308, 317, 325, 330, 336, 347, 348, 354, 359, 365, 367, 386, 390, 392, 399, 406, 427, 429, 431, 454, 456, 457, 459, 465, 467, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 484, 485], "noth": [14, 23, 31, 32, 33, 40, 55, 69, 78, 82, 83, 85, 100, 108, 109, 111, 112, 115, 116, 121, 122, 128, 129, 138, 144, 146, 161, 164, 175, 183, 187, 189, 196, 197, 200, 205, 217, 220, 230, 233, 247, 254, 255, 257, 258, 264, 272, 273, 274, 275, 277, 288, 289, 298, 305, 311, 338, 339, 341, 345, 347, 348, 351, 353, 355, 364, 370, 374, 386, 392, 403, 411, 421, 430, 432, 434, 439, 440, 445, 459, 468, 469, 472, 473, 479, 480, 483, 484, 485], "pycodec_knownencod": [14, 54], "pycodec_encod": [14, 54], "lookuperror": [14, 23, 61, 65, 164, 176, 220, 351, 454, 479], "pycodec_decod": [14, 54], "decod": [14, 23, 31, 32, 56, 61, 63, 65, 82, 83, 97, 109, 110, 114, 127, 133, 139, 141, 142, 147, 149, 151, 152, 181, 182, 194, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 220, 232, 242, 251, 258, 260, 262, 264, 276, 291, 294, 299, 302, 305, 306, 341, 344, 347, 348, 351, 355, 357, 359, 363, 364, 367, 382, 383, 398, 399, 401, 403, 411, 423, 432, 436, 439, 455, 459, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 484, 485], "look": [14, 18, 27, 31, 33, 34, 40, 43, 47, 54, 60, 61, 69, 73, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, 126, 128, 133, 147, 149, 154, 158, 164, 173, 175, 182, 183, 186, 187, 189, 192, 195, 196, 200, 203, 204, 206, 210, 212, 218, 220, 232, 233, 237, 241, 250, 252, 254, 257, 258, 259, 265, 271, 273, 274, 275, 277, 298, 299, 300, 301, 302, 308, 314, 319, 325, 330, 338, 345, 347, 348, 351, 352, 355, 359, 360, 367, 371, 372, 373, 374, 381, 383, 385, 386, 389, 391, 392, 393, 394, 399, 406, 411, 414, 417, 427, 429, 431, 432, 433, 434, 436, 439, 440, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 483, 485], "lower": [14, 31, 54, 61, 65, 69, 82, 94, 95, 97, 102, 106, 109, 110, 111, 113, 128, 133, 139, 146, 152, 162, 164, 166, 169, 173, 183, 184, 186, 192, 202, 203, 207, 209, 210, 212, 232, 233, 243, 247, 252, 255, 267, 277, 289, 294, 299, 311, 314, 325, 328, 331, 344, 347, 348, 351, 352, 359, 370, 371, 372, 380, 382, 388, 398, 399, 432, 434, 440, 467, 469, 470, 471, 472, 473, 475, 477, 479, 484, 485], "insensit": [14, 18, 65, 111, 113, 114, 164, 173, 203, 212, 251, 252, 258, 282, 325, 340, 347, 352, 353, 367, 404, 411, 459, 465, 470, 472, 482, 485, 486], "keyerror": [14, 22, 23, 33, 52, 65, 88, 95, 166, 173, 176, 190, 203, 204, 212, 220, 240, 243, 250, 257, 258, 267, 277, 302, 316, 334, 335, 336, 346, 351, 352, 360, 363, 389, 390, 391, 393, 394, 426, 429, 432, 436, 454, 456, 469, 470, 473, 478, 481, 483, 485], "pycodec_incrementalencod": [14, 54], "incrementalencod": [14, 65, 151, 471], "pycodec_incrementaldecod": [14, 54], "incrementaldecod": [14, 65, 151, 264, 471], "pycodec_streamread": [14, 54], "stream": [14, 24, 31, 32, 39, 65, 94, 97, 104, 108, 109, 112, 114, 124, 129, 133, 141, 142, 144, 151, 152, 156, 163, 175, 183, 201, 207, 208, 213, 214, 219, 220, 226, 232, 236, 241, 249, 252, 254, 256, 258, 260, 267, 268, 273, 274, 275, 276, 282, 287, 299, 304, 306, 313, 314, 320, 334, 335, 337, 338, 339, 340, 344, 345, 355, 356, 359, 363, 367, 383, 390, 392, 399, 403, 405, 411, 412, 413, 416, 417, 420, 421, 423, 426, 428, 432, 434, 438, 439, 459, 466, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 485], "streamread": [14, 65, 131, 133, 142, 151, 470, 471, 476, 480, 481, 485], "factori": [14, 60, 65, 69, 97, 107, 126, 133, 136, 139, 144, 164, 175, 178, 182, 195, 200, 210, 214, 215, 233, 258, 262, 273, 274, 275, 277, 281, 286, 289, 296, 298, 321, 338, 347, 370, 374, 376, 390, 394, 406, 411, 414, 417, 423, 424, 432, 468, 471, 472, 475, 477, 478, 480, 482, 483, 484, 485], "pycodec_streamwrit": [14, 54], "streamwrit": [14, 65, 131, 133, 142, 151, 471, 482, 485], "pycodec_registererror": [14, 54], "unencod": [14, 43, 114, 164, 323, 469, 474, 477, 485], "undecod": [14, 56, 114, 164, 203, 299, 477, 485], "unicodeencodeerror": [14, 23, 43, 65, 81, 114, 164, 220, 359, 398, 454, 477, 483, 485], "unicodedecodeerror": [14, 23, 65, 114, 164, 220, 299, 398, 454, 471, 474, 477, 479, 483, 485], "unicodetranslateerror": [14, 23, 65, 164, 220, 454, 485], "problemat": [14, 58, 116, 173, 274, 289, 470, 475, 477, 482, 485], "extract": [14, 20, 33, 53, 65, 82, 84, 85, 104, 107, 125, 154, 183, 189, 196, 197, 200, 204, 205, 207, 232, 237, 243, 249, 250, 258, 259, 261, 267, 299, 318, 319, 321, 325, 336, 338, 342, 351, 359, 363, 385, 398, 432, 465, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 483, 485], "replac": [14, 22, 24, 31, 32, 33, 36, 40, 53, 54, 56, 57, 60, 61, 65, 69, 74, 78, 81, 83, 94, 95, 99, 100, 102, 103, 104, 109, 114, 116, 118, 124, 126, 128, 133, 138, 144, 157, 158, 163, 164, 170, 173, 179, 182, 183, 185, 187, 188, 189, 196, 197, 200, 203, 204, 209, 212, 213, 216, 218, 220, 221, 225, 226, 232, 236, 242, 243, 246, 247, 257, 258, 259, 261, 264, 272, 273, 274, 277, 278, 282, 285, 289, 298, 299, 300, 302, 303, 313, 314, 321, 324, 325, 326, 327, 337, 338, 339, 347, 348, 351, 352, 359, 363, 367, 369, 370, 371, 373, 374, 376, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 404, 406, 411, 413, 414, 417, 419, 421, 425, 426, 429, 432, 434, 437, 439, 440, 453, 455, 459, 460, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "resum": [14, 104, 139, 144, 175, 183, 184, 261, 289, 299, 303, 305, 320, 366, 370, 411, 431, 432, 434, 468, 469, 470, 471, 485], "pycodec_lookuperror": [14, 54], "strict": [14, 32, 60, 61, 65, 83, 104, 107, 109, 112, 113, 114, 116, 139, 164, 173, 181, 182, 187, 189, 192, 201, 209, 214, 215, 218, 224, 225, 232, 247, 249, 250, 251, 255, 258, 261, 264, 265, 267, 268, 282, 291, 299, 300, 301, 302, 305, 348, 351, 359, 367, 371, 398, 399, 414, 430, 431, 432, 433, 434, 436, 439, 460, 466, 467, 469, 471, 472, 473, 476, 477, 478, 479, 480, 482, 485], "pycodec_stricterror": [14, 54], "exc": [14, 23, 31, 45, 118, 128, 139, 144, 172, 175, 385, 392, 394, 432, 440, 447, 472, 474, 476, 478, 485], "pycodec_ignoreerror": [14, 54], "faulti": 14, "pycodec_replaceerror": [14, 54], "fffd": [14, 114, 164, 466], "pycodec_xmlcharrefreplaceerror": [14, 54], "xml": [14, 65, 78, 90, 104, 111, 114, 164, 232, 260, 262, 264, 279, 310, 333, 399, 422, 455, 456, 465, 467, 468, 469, 470, 471, 472, 473, 477, 481, 485, 486], "pycodec_backslashreplaceerror": [14, 54], "backslash": [14, 65, 69, 71, 116, 164, 165, 200, 216, 232, 254, 264, 289, 299, 302, 325, 355, 439, 450, 469, 470, 474, 481, 482, 485], "escap": [14, 16, 40, 47, 56, 65, 69, 83, 88, 102, 109, 111, 114, 126, 133, 142, 164, 173, 181, 183, 184, 196, 215, 226, 229, 232, 238, 245, 254, 258, 264, 268, 279, 294, 325, 327, 337, 351, 352, 355, 368, 371, 388, 390, 398, 421, 423, 432, 439, 453, 466, 467, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pycodec_namereplaceerror": [14, 54, 480], "distinct": [15, 31, 33, 40, 43, 69, 95, 102, 110, 111, 112, 114, 147, 175, 187, 189, 192, 200, 233, 267, 274, 276, 281, 290, 298, 305, 314, 340, 348, 351, 359, 374, 390, 411, 436, 439, 466, 468, 472, 477, 478, 481, 482, 484, 485], "dereferenc": [15, 182, 234, 406, 478, 485], "throughout": [15, 65, 83, 103, 108, 118, 192, 258, 273, 393, 438, 466, 468, 469, 471, 472, 473, 477, 480, 485], "portion": [15, 69, 78, 97, 100, 102, 104, 107, 111, 147, 152, 185, 189, 192, 210, 216, 233, 242, 258, 273, 274, 275, 341, 344, 349, 350, 381, 392, 398, 411, 414, 420, 423, 424, 430, 436, 466, 477, 478, 480, 485], "deal": [15, 16, 33, 40, 60, 61, 65, 78, 82, 110, 111, 112, 114, 126, 132, 163, 164, 201, 203, 204, 212, 232, 247, 264, 272, 288, 289, 298, 305, 324, 331, 333, 344, 371, 388, 390, 394, 398, 417, 430, 435, 466, 468, 469, 470, 471, 474, 476, 478, 480, 485], "real": [15, 33, 36, 45, 56, 60, 65, 69, 82, 86, 95, 97, 103, 109, 115, 116, 119, 150, 160, 161, 163, 175, 182, 200, 207, 212, 220, 232, 233, 243, 255, 258, 268, 294, 295, 296, 299, 314, 325, 328, 330, 337, 339, 340, 347, 348, 350, 351, 352, 359, 371, 374, 392, 393, 394, 417, 431, 432, 435, 439, 444, 465, 471, 472, 473, 477, 478, 481, 485], "_py_c_sum": 15, "_py_c_diff": 15, "between": [15, 31, 32, 33, 36, 37, 40, 43, 51, 53, 57, 60, 61, 65, 69, 70, 72, 75, 82, 83, 84, 85, 86, 89, 94, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 126, 128, 133, 139, 147, 156, 157, 161, 164, 167, 170, 173, 179, 183, 189, 192, 197, 200, 202, 203, 204, 208, 212, 216, 218, 220, 223, 225, 232, 237, 239, 242, 247, 254, 258, 260, 261, 264, 265, 267, 268, 272, 273, 274, 275, 276, 281, 282, 284, 290, 291, 295, 296, 299, 300, 301, 302, 303, 305, 306, 314, 324, 325, 326, 340, 341, 344, 345, 346, 347, 348, 351, 354, 355, 357, 359, 364, 367, 369, 370, 371, 372, 374, 376, 377, 380, 381, 382, 383, 386, 388, 389, 392, 393, 394, 398, 399, 404, 405, 409, 411, 414, 415, 417, 421, 423, 428, 429, 430, 432, 434, 436, 438, 440, 459, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "_py_c_neg": 15, "num": [15, 109, 128, 164, 183, 192, 233, 237, 247, 255, 289, 298, 306, 348, 352, 390, 445, 446, 472, 473, 483, 485], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 192], "divisor": [15, 192, 281, 453], "quotient": [15, 189, 192, 281, 314, 351, 434, 453], "errno": [15, 23, 33, 65, 83, 94, 124, 139, 148, 182, 194, 220, 222, 258, 260, 299, 320, 334, 339, 344, 348, 359, 367, 447, 472, 478, 480, 482, 485], "edom": [15, 65, 124, 219], "_py_c_pow": 15, "exp": [15, 65, 161, 192, 232, 281, 296, 324, 352, 472, 473, 478, 485], "exponenti": [15, 95, 192, 275, 351, 413, 434, 469, 470, 472, 485], "pycomplexobject": 15, "pycomplex_typ": [15, 54], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 54], "pycomplex_realasdoubl": [15, 54], "pycomplex_imagasdoubl": [15, 54], "imaginari": [15, 65, 161, 189, 295, 351, 352, 359, 431, 432, 434, 472, 473, 477], "pycomplex_asccomplex": [15, 472], "__complex__": [15, 65, 161, 232, 268, 390, 393, 432, 472, 479, 482, 483, 485], "__float__": [15, 25, 60, 65, 161, 232, 390, 393, 432, 476, 482, 483, 485], "__index__": [15, 25, 37, 60, 65, 231, 232, 297, 351, 354, 390, 393, 432, 472, 473, 474, 476, 479, 482, 483, 485, 486], "upon": [15, 18, 25, 31, 33, 39, 61, 63, 82, 83, 95, 103, 108, 146, 150, 158, 162, 164, 165, 175, 179, 181, 183, 192, 194, 195, 200, 242, 249, 251, 254, 255, 258, 277, 290, 299, 303, 305, 334, 335, 337, 339, 340, 341, 347, 348, 359, 360, 367, 384, 404, 405, 414, 430, 432, 434, 436, 467, 472, 478, 479, 481, 483, 485], "chapter": [16, 23, 33, 40, 48, 63, 73, 76, 82, 83, 85, 86, 87, 94, 101, 104, 125, 151, 186, 193, 224, 229, 231, 253, 254, 262, 266, 283, 286, 291, 296, 304, 321, 359, 372, 434, 438, 439, 441, 485], "specif": [16, 23, 32, 33, 34, 40, 43, 54, 55, 57, 60, 63, 64, 65, 69, 70, 71, 74, 75, 78, 81, 83, 86, 87, 95, 98, 100, 103, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 126, 128, 133, 138, 139, 151, 154, 158, 160, 161, 162, 167, 173, 175, 178, 181, 182, 183, 187, 189, 190, 192, 200, 201, 202, 203, 207, 209, 210, 212, 213, 215, 217, 218, 219, 220, 222, 229, 230, 232, 233, 234, 235, 237, 238, 239, 242, 247, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 264, 265, 268, 272, 273, 274, 275, 277, 281, 287, 289, 292, 294, 299, 300, 301, 302, 303, 305, 314, 320, 321, 327, 328, 333, 334, 335, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 360, 364, 367, 368, 369, 370, 371, 373, 374, 377, 379, 382, 389, 390, 391, 392, 393, 394, 398, 399, 402, 403, 404, 405, 406, 408, 411, 414, 415, 417, 421, 423, 426, 427, 428, 429, 430, 431, 432, 436, 438, 439, 440, 441, 450, 459, 465, 466, 467, 468, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485], "good": [16, 33, 49, 60, 73, 76, 85, 88, 89, 94, 95, 99, 103, 108, 109, 110, 111, 112, 114, 115, 116, 126, 128, 144, 158, 161, 162, 173, 176, 182, 183, 189, 196, 200, 205, 214, 218, 232, 242, 243, 289, 298, 299, 301, 305, 313, 325, 341, 348, 367, 369, 372, 373, 388, 390, 392, 394, 415, 423, 430, 432, 466, 467, 469, 470, 472, 473, 485], "idea": [16, 33, 49, 69, 72, 76, 78, 89, 94, 95, 99, 100, 102, 103, 108, 109, 112, 116, 126, 145, 189, 196, 200, 218, 272, 301, 313, 381, 388, 432, 466, 468, 469, 470, 473, 474, 475, 476, 477, 481, 485], "perform": [16, 20, 23, 27, 31, 33, 40, 56, 57, 60, 61, 65, 74, 75, 81, 82, 85, 99, 100, 102, 104, 108, 109, 112, 114, 116, 118, 124, 126, 128, 129, 133, 139, 144, 145, 152, 154, 164, 167, 169, 172, 173, 175, 181, 183, 187, 189, 192, 194, 197, 200, 206, 213, 216, 220, 222, 227, 230, 232, 233, 239, 242, 249, 250, 252, 254, 255, 256, 258, 265, 267, 268, 272, 273, 274, 275, 278, 289, 290, 294, 299, 304, 306, 311, 312, 314, 320, 323, 325, 327, 337, 338, 339, 340, 344, 345, 347, 348, 351, 352, 354, 355, 359, 370, 371, 372, 376, 383, 388, 390, 392, 393, 398, 399, 403, 409, 419, 423, 424, 430, 432, 434, 436, 439, 440, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486], "pydict_check": [16, 22], "tree": [16, 31, 60, 65, 70, 71, 73, 75, 76, 78, 79, 88, 94, 95, 100, 104, 116, 118, 158, 169, 180, 196, 201, 203, 211, 212, 214, 223, 238, 243, 254, 260, 270, 279, 299, 302, 317, 318, 338, 349, 351, 359, 362, 373, 374, 380, 381, 388, 403, 413, 414, 415, 432, 456, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 480, 481, 483, 484, 485], "care": [16, 23, 31, 33, 49, 60, 63, 65, 69, 76, 78, 79, 83, 85, 86, 94, 95, 100, 103, 108, 109, 110, 111, 114, 115, 120, 126, 128, 144, 150, 175, 182, 187, 189, 192, 200, 203, 215, 218, 234, 237, 258, 264, 273, 274, 275, 277, 289, 295, 298, 305, 314, 320, 325, 336, 339, 341, 355, 357, 359, 363, 392, 393, 394, 404, 412, 415, 417, 425, 432, 434, 452, 459, 465, 466, 470, 471, 472, 473, 474, 476, 477, 479, 484, 485], "violat": [16, 23, 40, 60, 182, 189, 194, 210, 215, 218, 222, 255, 305, 311, 348, 351, 390, 405, 432, 481, 485], "immedi": [16, 23, 24, 27, 29, 31, 33, 43, 60, 63, 83, 89, 94, 95, 100, 102, 103, 104, 110, 111, 121, 133, 139, 144, 147, 160, 162, 172, 175, 181, 182, 183, 190, 192, 200, 212, 220, 221, 223, 225, 233, 239, 243, 249, 254, 261, 264, 272, 277, 288, 289, 290, 299, 301, 303, 318, 325, 337, 339, 344, 347, 348, 351, 352, 355, 359, 364, 366, 370, 371, 374, 381, 390, 392, 393, 394, 399, 410, 414, 417, 419, 420, 423, 424, 431, 432, 434, 436, 459, 465, 468, 469, 470, 472, 473, 476, 478, 479, 481, 482, 483, 484, 485], "singleton": [16, 20, 43, 44, 47, 53, 55, 60, 83, 95, 97, 109, 128, 218, 280, 305, 351, 388, 393, 423, 431, 432, 434, 445, 446, 467, 476, 481, 482, 485], "heap": [16, 30, 33, 40, 48, 55, 65, 83, 85, 86, 100, 188, 221, 260, 288, 328, 388, 456, 469, 470, 472, 473, 476, 483, 484, 485], "discuss": [16, 31, 33, 82, 83, 95, 104, 109, 111, 114, 115, 116, 187, 196, 210, 215, 237, 264, 273, 274, 281, 294, 299, 325, 336, 339, 348, 350, 359, 381, 394, 399, 414, 423, 428, 431, 434, 436, 439, 466, 467, 468, 471, 472, 473, 475, 476, 479, 481, 484, 485], "kind": [16, 32, 33, 60, 61, 65, 83, 86, 89, 95, 97, 100, 107, 109, 110, 112, 114, 116, 126, 128, 139, 158, 182, 189, 197, 200, 220, 257, 258, 259, 261, 264, 287, 289, 295, 299, 302, 305, 307, 321, 325, 334, 347, 348, 351, 353, 359, 370, 374, 390, 392, 399, 404, 413, 417, 418, 419, 430, 431, 432, 434, 435, 436, 444, 445, 460, 465, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "intrins": [16, 173, 305, 432, 475], "languag": [16, 33, 54, 61, 65, 69, 76, 78, 79, 82, 83, 84, 90, 94, 97, 103, 104, 106, 109, 110, 111, 113, 114, 115, 116, 118, 119, 128, 164, 173, 182, 186, 203, 209, 212, 216, 224, 229, 232, 247, 253, 254, 258, 260, 272, 279, 287, 305, 313, 325, 347, 351, 359, 360, 368, 369, 374, 382, 389, 406, 414, 415, 423, 432, 434, 438, 439, 440, 441, 449, 450, 461, 465, 467, 468, 474, 485, 486], "properti": [16, 55, 60, 65, 95, 97, 104, 107, 108, 111, 113, 122, 128, 157, 164, 166, 176, 181, 182, 183, 187, 188, 192, 200, 202, 203, 210, 212, 215, 218, 226, 228, 232, 233, 237, 242, 259, 260, 261, 264, 265, 268, 272, 277, 287, 289, 295, 310, 337, 342, 348, 350, 351, 353, 359, 370, 383, 386, 388, 389, 390, 391, 392, 393, 399, 406, 409, 414, 415, 418, 419, 420, 430, 431, 432, 439, 440, 454, 465, 466, 468, 469, 470, 471, 473, 477, 478, 479, 480, 481, 482, 483, 485], "codec": [16, 30, 32, 62, 65, 97, 110, 114, 151, 202, 208, 209, 220, 232, 260, 264, 299, 342, 351, 368, 452, 455, 465, 466, 468, 470, 471, 474, 480, 481, 483, 484, 485, 486], "latin": [16, 65, 111, 114, 126, 141, 164, 202, 230, 246, 325, 337, 363, 391, 434, 468, 469, 472, 475, 477, 480, 481, 482, 484, 485], "ascii": [16, 23, 29, 32, 40, 47, 65, 81, 102, 108, 109, 111, 112, 114, 115, 124, 126, 128, 139, 142, 145, 149, 151, 153, 158, 164, 182, 183, 197, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 221, 232, 237, 244, 255, 260, 262, 264, 268, 272, 278, 288, 291, 292, 294, 299, 305, 320, 323, 325, 337, 342, 345, 348, 351, 352, 353, 356, 363, 364, 367, 368, 399, 401, 417, 423, 430, 438, 439, 445, 450, 452, 454, 459, 466, 468, 469, 470, 471, 472, 474, 476, 477, 478, 480, 481, 482, 484, 485], "mbcs": [16, 31, 32, 65, 151, 359, 459, 465, 468, 469, 477, 478, 481, 485], "window": [16, 23, 31, 32, 33, 40, 54, 56, 60, 63, 65, 67, 69, 71, 75, 76, 78, 79, 81, 83, 84, 88, 90, 91, 92, 93, 94, 95, 97, 100, 108, 109, 110, 112, 114, 115, 117, 121, 124, 133, 138, 139, 142, 151, 158, 162, 170, 172, 173, 182, 185, 198, 199, 220, 221, 229, 232, 236, 238, 250, 257, 258, 260, 264, 267, 275, 278, 281, 282, 284, 287, 288, 289, 298, 299, 300, 302, 312, 322, 334, 335, 337, 338, 339, 340, 342, 344, 348, 349, 359, 360, 363, 365, 367, 370, 371, 373, 375, 376, 377, 380, 381, 383, 392, 399, 401, 403, 407, 411, 426, 428, 429, 430, 432, 439, 442, 443, 445, 450, 452, 454, 457, 459, 460, 462, 466, 467, 468, 470, 471, 474, 475, 476, 477, 479, 480, 483, 484, 486], "cell": [16, 26, 63, 65, 95, 102, 103, 124, 182, 197, 233, 243, 260, 261, 381, 389, 432, 472, 485], "phase": [16, 30, 31, 65, 81, 83, 161, 234, 258, 296, 348, 381, 436, 440, 472, 476, 477, 478, 485], "creation": [16, 31, 56, 60, 65, 81, 83, 86, 95, 103, 104, 108, 109, 124, 125, 126, 139, 142, 145, 156, 187, 188, 192, 198, 204, 218, 230, 232, 233, 237, 242, 255, 258, 260, 261, 262, 264, 273, 276, 277, 287, 289, 290, 294, 298, 300, 311, 317, 327, 328, 337, 338, 342, 349, 351, 352, 355, 363, 367, 374, 380, 393, 406, 414, 417, 425, 430, 431, 436, 469, 478, 479, 480, 482, 484, 485], "lookup": [16, 17, 22, 29, 58, 60, 62, 65, 87, 95, 128, 151, 154, 164, 166, 187, 197, 202, 210, 218, 220, 232, 233, 237, 252, 261, 265, 270, 275, 293, 299, 351, 352, 358, 359, 368, 373, 374, 381, 385, 391, 393, 429, 431, 436, 466, 468, 470, 471, 472, 476, 477, 478, 479, 481, 483, 484, 485], "descriptor": [16, 23, 24, 29, 31, 47, 60, 65, 85, 88, 91, 94, 97, 106, 122, 124, 132, 136, 137, 138, 139, 145, 182, 183, 191, 193, 218, 219, 222, 225, 232, 233, 238, 255, 260, 261, 264, 274, 284, 288, 289, 300, 301, 315, 318, 321, 328, 334, 335, 339, 344, 345, 348, 351, 355, 363, 364, 366, 367, 374, 389, 431, 434, 440, 470, 471, 472, 473, 476, 477, 478, 480, 482, 484, 485], "ellipsi": [16, 60, 65, 97, 128, 174, 193, 200, 260, 270, 280, 313, 382, 383, 389, 390, 432, 435, 439, 454, 470, 474, 483, 485], "capsul": [16, 65, 83, 104, 474, 485], "coroutin": [16, 65, 97, 104, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 167, 175, 188, 192, 193, 194, 197, 220, 321, 351, 359, 390, 392, 393, 434, 460, 471, 476, 481, 482, 483, 484, 485], "datetim": [16, 65, 95, 109, 133, 139, 142, 144, 157, 188, 196, 201, 210, 216, 218, 255, 260, 262, 275, 291, 294, 305, 310, 347, 348, 352, 371, 389, 394, 423, 424, 429, 439, 455, 469, 470, 471, 472, 473, 476, 480, 485], "hint": [16, 40, 65, 89, 95, 97, 98, 100, 110, 112, 164, 173, 193, 209, 237, 248, 250, 253, 254, 260, 264, 268, 306, 351, 388, 431, 432, 440, 481, 482, 485, 486], "signatur": [17, 43, 55, 60, 65, 81, 95, 100, 103, 108, 109, 128, 133, 151, 165, 166, 167, 175, 187, 189, 218, 223, 232, 233, 242, 254, 258, 264, 273, 274, 298, 305, 319, 321, 338, 341, 348, 355, 359, 385, 388, 389, 390, 393, 394, 398, 417, 419, 423, 428, 434, 444, 472, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486], "pycontext": 17, "pycontextvar": [17, 485], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 189, 194, 233, 273, 275, 289, 299, 308, 338, 460, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "34762": [17, 482, 485], "public": [17, 27, 31, 32, 52, 65, 94, 103, 112, 115, 162, 181, 182, 196, 211, 229, 230, 242, 247, 250, 259, 261, 265, 270, 289, 292, 298, 320, 337, 344, 348, 351, 352, 358, 359, 363, 367, 369, 372, 390, 391, 392, 399, 412, 414, 417, 420, 430, 439, 440, 444, 466, 467, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "contextvar": [17, 65, 97, 133, 135, 144, 170, 192, 260, 460, 485], "token": [17, 63, 65, 94, 122, 128, 170, 176, 180, 229, 258, 260, 270, 271, 287, 292, 310, 320, 324, 337, 355, 362, 368, 399, 431, 435, 437, 438, 447, 451, 473, 474, 477, 481, 482, 485], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 40, 109, 128, 176, 192, 289, 348, 472], "shallow": [17, 31, 65, 166, 176, 187, 188, 200, 223, 251, 260, 261, 305, 351, 389, 446, 485], "pycontext_copycurr": 17, "thread": [17, 23, 29, 30, 32, 33, 40, 50, 56, 60, 65, 83, 86, 89, 95, 97, 108, 112, 124, 131, 132, 135, 136, 138, 139, 140, 142, 143, 145, 156, 157, 166, 170, 172, 175, 176, 182, 193, 196, 221, 239, 242, 252, 254, 255, 257, 260, 262, 272, 274, 275, 276, 277, 289, 296, 299, 322, 327, 328, 330, 331, 338, 345, 347, 348, 350, 351, 355, 359, 371, 373, 390, 399, 403, 404, 406, 432, 449, 459, 460, 466, 468, 469, 470, 471, 472, 473, 474, 481, 484, 485, 486], "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 100, 374, 403, 465, 476, 485], "restor": [17, 23, 31, 33, 60, 65, 85, 100, 102, 109, 138, 164, 176, 177, 183, 192, 193, 196, 197, 250, 254, 261, 272, 298, 305, 307, 325, 326, 330, 347, 355, 359, 363, 366, 367, 368, 370, 381, 388, 392, 393, 394, 404, 409, 431, 432, 466, 468, 469, 471, 472, 479, 482, 484, 485], "pycontextvar_new": 17, "introspect": [17, 65, 85, 95, 97, 100, 103, 176, 193, 197, 220, 233, 305, 321, 374, 393, 423, 424, 432, 436, 474, 476, 477, 478, 479, 480, 485], "debug": [17, 30, 31, 32, 47, 60, 63, 65, 75, 85, 86, 95, 102, 106, 108, 109, 110, 111, 124, 125, 128, 132, 144, 150, 159, 172, 176, 182, 192, 193, 194, 203, 211, 212, 220, 229, 230, 234, 249, 255, 262, 273, 274, 275, 285, 294, 298, 299, 303, 307, 311, 325, 337, 341, 342, 347, 348, 351, 357, 359, 363, 364, 368, 373, 374, 380, 386, 392, 393, 404, 417, 423, 426, 432, 433, 439, 440, 450, 456, 461, 462, 465, 466, 467, 468, 469, 471, 472, 475, 477, 478, 479, 480, 481, 482, 484, 485], "pycontextvar_get": 17, "var": [17, 65, 88, 95, 97, 98, 103, 109, 126, 128, 166, 170, 173, 176, 218, 232, 260, 275, 348, 351, 360, 365, 390, 393, 445, 450, 454, 470, 471, 472, 473, 474, 476, 477, 485], "default_valu": [17, 100], "dure": [17, 18, 22, 23, 24, 27, 31, 32, 43, 49, 60, 61, 65, 69, 87, 95, 100, 103, 109, 110, 128, 139, 144, 145, 146, 154, 158, 164, 173, 182, 183, 187, 189, 192, 200, 205, 208, 209, 210, 215, 218, 220, 225, 233, 234, 238, 242, 258, 259, 264, 268, 273, 274, 275, 276, 277, 287, 294, 299, 305, 314, 319, 320, 325, 326, 329, 338, 339, 340, 341, 342, 347, 348, 351, 359, 366, 367, 371, 372, 381, 384, 386, 389, 390, 392, 393, 394, 404, 406, 417, 418, 419, 420, 426, 429, 431, 432, 434, 436, 439, 440, 447, 459, 465, 466, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 31, 56, 65, 95, 104, 115, 150, 151, 162, 163, 164, 166, 170, 176, 183, 191, 192, 196, 205, 213, 219, 220, 221, 225, 229, 247, 252, 254, 258, 273, 279, 289, 299, 300, 301, 307, 332, 334, 339, 341, 344, 348, 351, 357, 361, 363, 367, 370, 371, 380, 384, 388, 392, 393, 404, 412, 416, 417, 420, 429, 439, 468, 472, 476, 477, 478, 479, 480, 485], "pyos_snprintf": [18, 54, 468], "unix": [18, 23, 31, 32, 33, 56, 63, 65, 70, 71, 72, 75, 76, 78, 79, 81, 83, 84, 90, 91, 93, 97, 102, 104, 108, 112, 114, 124, 126, 131, 136, 137, 138, 139, 141, 142, 145, 152, 157, 166, 173, 180, 181, 182, 183, 203, 206, 208, 215, 222, 226, 232, 235, 236, 237, 240, 250, 254, 260, 263, 264, 267, 275, 277, 278, 284, 289, 292, 293, 294, 298, 299, 300, 301, 302, 304, 307, 311, 312, 315, 316, 319, 328, 329, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 357, 359, 363, 365, 366, 367, 371, 374, 380, 387, 392, 407, 411, 425, 426, 439, 442, 443, 450, 452, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "man": [18, 102, 133, 179, 277, 299, 319, 328, 334, 339, 344, 349, 371, 374, 380, 473, 485], "page": [18, 61, 65, 69, 78, 94, 95, 97, 102, 104, 109, 112, 115, 116, 121, 126, 133, 139, 141, 157, 164, 172, 175, 179, 183, 196, 222, 234, 254, 259, 260, 264, 273, 274, 275, 277, 284, 290, 299, 310, 319, 320, 328, 334, 339, 344, 347, 349, 354, 357, 361, 366, 370, 371, 374, 380, 399, 407, 411, 417, 424, 428, 430, 438, 444, 455, 457, 459, 465, 466, 468, 470, 471, 472, 473, 477, 478, 481, 482, 483, 485], "snprintf": [18, 468, 476, 485], "pyos_vsnprintf": [18, 54, 468], "va": [18, 430], "vsnprintf": [18, 468, 476, 485], "behavior": [18, 22, 23, 24, 31, 32, 33, 40, 54, 58, 60, 65, 83, 89, 95, 100, 102, 103, 108, 109, 112, 120, 122, 125, 126, 133, 138, 144, 156, 163, 172, 173, 179, 181, 182, 183, 187, 189, 192, 196, 200, 201, 203, 208, 210, 212, 213, 215, 218, 220, 225, 232, 241, 243, 247, 249, 254, 261, 264, 267, 268, 272, 273, 275, 276, 277, 281, 282, 289, 290, 292, 294, 298, 299, 302, 305, 308, 315, 320, 334, 337, 338, 339, 340, 342, 344, 345, 348, 350, 351, 352, 354, 355, 359, 367, 370, 371, 372, 374, 379, 381, 385, 390, 392, 398, 399, 404, 411, 414, 417, 429, 431, 432, 434, 436, 439, 440, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 477, 478, 484, 485, 486], "corner": [18, 60, 102, 183, 388, 411, 468, 471, 472, 485], "int_max": [18, 485], "c99": [18, 33, 60, 86, 182, 281, 351, 354, 359, 448, 472, 476, 477, 481, 485], "necessari": [18, 31, 33, 47, 54, 60, 61, 69, 78, 82, 83, 86, 87, 89, 94, 95, 104, 107, 108, 109, 110, 111, 113, 116, 118, 121, 126, 139, 145, 149, 161, 164, 167, 173, 175, 183, 190, 192, 200, 201, 202, 203, 212, 213, 214, 215, 216, 218, 220, 232, 234, 249, 250, 254, 255, 258, 264, 267, 272, 273, 276, 277, 278, 281, 284, 289, 294, 298, 299, 300, 305, 308, 312, 314, 338, 342, 344, 347, 348, 351, 353, 354, 355, 360, 361, 367, 369, 370, 372, 377, 379, 381, 388, 390, 392, 403, 406, 409, 411, 412, 414, 416, 419, 423, 426, 432, 434, 435, 440, 465, 468, 469, 471, 472, 473, 475, 478, 479, 480, 481, 483, 485], "rv": [18, 33, 222], "someth": [18, 22, 31, 34, 69, 73, 76, 83, 85, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 116, 128, 138, 144, 150, 153, 158, 175, 181, 182, 208, 218, 220, 232, 235, 243, 254, 258, 259, 261, 267, 268, 273, 289, 298, 299, 305, 312, 314, 320, 328, 341, 345, 347, 348, 363, 367, 370, 374, 390, 392, 393, 394, 399, 405, 406, 411, 414, 417, 423, 429, 432, 436, 440, 445, 453, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 484, 485], "bad": [18, 40, 65, 69, 72, 82, 83, 108, 110, 112, 115, 126, 181, 193, 196, 200, 208, 219, 220, 242, 254, 260, 272, 274, 277, 289, 298, 314, 339, 388, 390, 401, 426, 440, 445, 468, 472, 474, 476, 479, 481, 485], "happen": [18, 23, 31, 33, 56, 61, 65, 83, 86, 94, 100, 102, 103, 104, 109, 110, 112, 115, 121, 133, 144, 145, 163, 175, 182, 183, 187, 189, 196, 214, 220, 230, 232, 233, 243, 254, 258, 261, 264, 272, 274, 275, 290, 298, 299, 301, 305, 320, 325, 334, 340, 344, 348, 351, 352, 359, 364, 366, 367, 370, 374, 385, 392, 393, 394, 399, 411, 431, 432, 433, 434, 436, 439, 440, 466, 468, 470, 471, 472, 473, 474, 476, 479, 480, 483, 484, 485], "pyos_string_to_doubl": [18, 54, 473, 475], "endptr": 18, "overflow_except": 18, "whitespac": [18, 61, 65, 69, 72, 78, 95, 104, 111, 114, 118, 126, 133, 142, 149, 152, 162, 173, 181, 184, 192, 196, 200, 206, 209, 210, 215, 218, 228, 229, 247, 252, 254, 261, 268, 272, 292, 303, 320, 323, 325, 337, 351, 352, 354, 355, 362, 367, 368, 369, 371, 385, 404, 414, 417, 419, 441, 459, 466, 469, 472, 473, 475, 477, 478, 479, 482, 485], "whole": [18, 40, 69, 73, 75, 89, 100, 106, 107, 111, 112, 147, 157, 164, 173, 175, 183, 189, 214, 215, 242, 249, 265, 267, 272, 273, 284, 298, 299, 302, 311, 313, 325, 334, 344, 347, 350, 351, 369, 380, 392, 414, 417, 428, 431, 439, 459, 466, 473, 479, 483, 485], "much": [18, 23, 33, 52, 60, 64, 70, 78, 83, 85, 86, 94, 95, 98, 100, 102, 104, 109, 110, 111, 112, 114, 115, 126, 133, 142, 158, 161, 164, 173, 182, 192, 197, 200, 201, 210, 214, 232, 237, 242, 243, 261, 264, 267, 275, 276, 277, 281, 289, 298, 299, 301, 305, 314, 325, 336, 344, 360, 374, 381, 386, 390, 392, 393, 394, 414, 415, 423, 428, 431, 436, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485], "unconvert": 18, "segment": [18, 40, 46, 128, 161, 182, 200, 221, 222, 227, 289, 299, 302, 339, 348, 371, 398, 403, 411, 471, 473, 477, 478, 485], "1e500": 18, "py_huge_v": 18, "out": [18, 23, 29, 32, 33, 36, 37, 40, 53, 54, 56, 57, 61, 65, 69, 70, 72, 73, 76, 78, 79, 82, 83, 86, 95, 100, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 128, 129, 139, 140, 145, 146, 147, 150, 156, 164, 167, 169, 173, 181, 182, 183, 184, 189, 190, 192, 196, 200, 202, 203, 207, 210, 212, 218, 219, 220, 222, 233, 237, 242, 247, 250, 254, 257, 258, 259, 264, 265, 268, 272, 273, 281, 289, 298, 299, 301, 303, 304, 306, 310, 314, 317, 319, 320, 325, 328, 334, 337, 339, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 367, 370, 371, 374, 385, 390, 392, 393, 394, 398, 403, 404, 411, 413, 414, 417, 421, 423, 427, 428, 429, 430, 431, 432, 433, 440, 445, 446, 453, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485], "pyos_double_to_str": [18, 54], "val": [18, 22, 23, 69, 83, 104, 122, 154, 173, 203, 212, 230, 251, 272, 347, 351, 390, 394, 399, 432, 471, 485], "format_cod": 18, "ptype": [18, 23, 309, 485], "repr": [18, 23, 24, 47, 60, 61, 65, 85, 109, 113, 114, 118, 128, 144, 145, 182, 187, 188, 189, 197, 200, 218, 232, 249, 254, 258, 260, 289, 320, 335, 344, 351, 352, 359, 367, 369, 383, 385, 389, 390, 393, 394, 429, 432, 439, 440, 448, 450, 454, 456, 466, 467, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "ed": [18, 40, 60, 79, 83, 102, 145, 173, 183, 200, 276, 299, 325, 338, 370, 476, 477, 479, 484, 485], "togeth": [18, 33, 60, 65, 69, 70, 76, 82, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 126, 133, 139, 164, 166, 181, 182, 200, 209, 214, 215, 225, 232, 242, 250, 251, 254, 265, 267, 273, 277, 299, 338, 348, 351, 357, 374, 379, 388, 390, 392, 393, 394, 399, 403, 416, 418, 430, 432, 434, 453, 470, 476, 477, 478, 484, 485], "preced": [18, 65, 69, 103, 108, 109, 111, 112, 113, 160, 173, 181, 184, 189, 196, 200, 201, 209, 214, 233, 254, 261, 272, 273, 274, 282, 309, 314, 325, 340, 344, 347, 351, 352, 354, 355, 359, 371, 374, 381, 388, 404, 414, 417, 423, 424, 428, 431, 432, 433, 435, 437, 438, 439, 440, 459, 460, 465, 467, 468, 478, 482, 485], "appli": [18, 32, 33, 49, 60, 61, 65, 69, 70, 76, 78, 79, 83, 85, 98, 104, 108, 109, 116, 118, 122, 126, 128, 147, 161, 164, 170, 175, 181, 182, 183, 184, 187, 189, 192, 193, 196, 197, 200, 205, 212, 215, 216, 218, 220, 227, 230, 232, 233, 237, 242, 250, 251, 252, 254, 257, 261, 265, 267, 273, 274, 276, 277, 278, 282, 289, 298, 299, 303, 305, 314, 320, 325, 327, 328, 330, 334, 338, 344, 348, 350, 351, 352, 355, 359, 370, 371, 372, 374, 381, 383, 386, 390, 391, 392, 393, 398, 404, 413, 415, 417, 423, 426, 430, 431, 432, 434, 436, 440, 446, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485], "rule": [18, 23, 27, 31, 33, 60, 65, 69, 73, 95, 100, 103, 104, 109, 110, 111, 112, 114, 126, 128, 158, 161, 167, 182, 184, 187, 189, 192, 196, 201, 203, 209, 210, 212, 214, 215, 216, 218, 229, 232, 234, 238, 243, 245, 247, 250, 251, 254, 265, 272, 281, 298, 325, 348, 351, 352, 354, 355, 370, 371, 380, 390, 393, 394, 398, 404, 415, 419, 431, 432, 433, 434, 435, 436, 438, 439, 440, 466, 467, 469, 471, 472, 473, 474, 476, 477, 478, 485], "document": [18, 20, 23, 24, 27, 33, 40, 43, 52, 54, 55, 56, 60, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 87, 89, 95, 98, 99, 100, 102, 103, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 126, 128, 133, 139, 142, 144, 145, 150, 151, 158, 162, 173, 175, 182, 183, 187, 189, 193, 196, 199, 200, 201, 202, 203, 205, 209, 210, 212, 214, 215, 220, 227, 228, 232, 233, 237, 242, 248, 250, 254, 255, 257, 258, 260, 261, 262, 264, 265, 268, 272, 273, 274, 275, 277, 278, 279, 287, 288, 289, 291, 296, 298, 299, 301, 303, 310, 312, 320, 328, 336, 337, 342, 344, 345, 347, 348, 349, 351, 355, 358, 359, 363, 366, 367, 369, 370, 371, 373, 374, 380, 381, 388, 390, 398, 399, 404, 406, 407, 409, 413, 415, 416, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 434, 436, 438, 439, 440, 449, 450, 460, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 480, 481, 482, 484, 486], "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "signifi": [18, 110, 187, 218, 230, 252, 258, 347, 348, 351, 390, 432, 439], "finit": [18, 25, 33, 94, 102, 104, 111, 161, 192, 228, 267, 281, 351, 359, 432, 485], "infinit": [18, 43, 65, 95, 104, 111, 164, 192, 255, 267, 281, 289, 291, 299, 302, 305, 325, 326, 351, 359, 392, 432, 466, 470, 472, 478, 485], "pyos_stricmp": [18, 472], "s1": [18, 114, 167, 196, 272, 344, 469], "s2": [18, 114, 167, 196, 272, 344, 469], "comparison": [18, 23, 47, 60, 61, 65, 78, 84, 104, 110, 113, 114, 118, 128, 146, 161, 166, 167, 179, 182, 187, 188, 189, 192, 196, 197, 200, 226, 227, 232, 233, 243, 260, 262, 272, 281, 289, 297, 300, 304, 350, 352, 353, 359, 367, 390, 392, 393, 394, 402, 409, 417, 423, 432, 435, 437, 439, 446, 453, 459, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "almost": [18, 31, 33, 61, 72, 76, 82, 85, 86, 94, 95, 100, 102, 109, 111, 112, 114, 116, 118, 126, 145, 161, 163, 183, 192, 243, 259, 264, 272, 278, 281, 289, 294, 298, 325, 347, 348, 351, 355, 374, 390, 392, 393, 411, 428, 432, 438, 460, 465, 467, 469, 472, 474, 478, 484, 485], "pyos_strnicmp": [18, 472], "strncmp": 18, "async": [19, 23, 30, 48, 65, 97, 109, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 175, 176, 197, 232, 261, 270, 318, 348, 382, 389, 390, 392, 393, 394, 432, 434, 435, 439, 476, 481, 482, 483, 484, 485], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 28, 31, 50, 54, 63, 479, 485], "qualnam": [19, 26, 28, 108, 204, 218, 274, 485], "__name__": [19, 26, 28, 43, 60, 65, 94, 95, 97, 103, 108, 109, 150, 162, 163, 172, 188, 189, 194, 196, 200, 204, 207, 218, 232, 233, 235, 257, 258, 261, 273, 289, 295, 298, 302, 303, 305, 308, 319, 321, 327, 329, 330, 339, 345, 349, 351, 367, 370, 372, 389, 390, 392, 403, 404, 406, 411, 424, 425, 432, 436, 454, 468, 469, 472, 474, 476, 478, 479, 480, 481, 483, 484, 485], "__qualname__": [19, 26, 28, 65, 97, 103, 204, 218, 232, 233, 261, 351, 432, 476, 478, 480, 485], "date": [20, 31, 65, 69, 75, 82, 95, 109, 116, 139, 142, 144, 157, 169, 188, 200, 206, 210, 215, 216, 250, 252, 272, 273, 275, 277, 294, 297, 299, 305, 317, 346, 347, 348, 350, 351, 357, 363, 371, 374, 394, 423, 424, 426, 427, 436, 439, 455, 456, 465, 466, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pydatetime_import": 20, "initialis": [20, 109, 250, 275, 330, 393, 432, 459, 479, 481], "put": [20, 32, 33, 47, 65, 69, 70, 72, 73, 76, 78, 79, 83, 85, 86, 89, 94, 95, 98, 100, 102, 103, 104, 109, 111, 112, 116, 120, 128, 140, 164, 170, 172, 173, 181, 182, 197, 200, 208, 210, 215, 218, 222, 234, 237, 239, 249, 254, 258, 274, 287, 289, 301, 305, 306, 322, 339, 340, 342, 344, 348, 351, 357, 360, 369, 370, 374, 390, 393, 394, 399, 429, 430, 436, 445, 453, 465, 467, 468, 469, 470, 471, 472, 473, 477, 480, 485], "pydatetimeapi": 20, "utc": [20, 65, 188, 189, 196, 210, 216, 275, 347, 348, 371, 429, 455, 472, 477, 480, 481, 482, 485], "pydatetime_timezone_utc": [20, 482], "zone": [20, 65, 188, 189, 216, 260, 265, 344, 371, 430, 460, 469, 471, 473, 484, 485], "timezon": [20, 65, 109, 124, 188, 196, 210, 216, 347, 348, 367, 429, 455, 477, 478, 480, 481, 482, 485], "pydate_check": 20, "pydatetime_datetyp": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_datetimetyp": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pydatetime_timetyp": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydatetime_deltatyp": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pydatetime_tzinfotyp": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 65, 95, 103, 111, 116, 157, 181, 188, 189, 200, 268, 347, 350, 371, 390, 417, 426, 439, 450, 465, 467, 469, 471, 472, 473, 474, 475, 477, 478, 483, 484, 485], "month": [20, 65, 95, 157, 188, 189, 272, 371, 426, 439, 466, 467, 469, 473, 485], "day": [20, 65, 83, 94, 95, 111, 112, 133, 157, 173, 188, 189, 218, 233, 251, 268, 272, 275, 281, 294, 299, 346, 348, 371, 389, 426, 429, 436, 439, 455, 466, 469, 471, 472, 473, 479, 481, 483, 484, 485], "pydatetime_fromdateandtim": 20, "hour": [20, 65, 95, 111, 133, 139, 144, 188, 189, 216, 275, 277, 371, 426, 429, 439, 469, 481], "minut": [20, 65, 112, 114, 188, 189, 275, 299, 367, 371, 426, 439, 460, 469, 482, 485], "usecond": 20, "microsecond": [20, 65, 106, 188, 189, 328, 347, 472, 485], "pydatetime_fromdateandtimeandfold": [20, 485], "fold": [20, 65, 188, 189, 201, 208, 209, 210, 215, 258, 291, 302, 353, 429, 430, 470, 471, 481, 482, 485], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "timedelta": [20, 65, 188, 218, 294, 389, 429, 469, 473, 477, 478, 482, 483, 484, 485], "lie": [20, 161, 189, 249, 275, 289, 351, 381, 432, 440, 468, 469, 476], "pytimezone_fromoffset": [20, 482], "unnam": [20, 57, 83, 182, 218, 388, 409, 434, 479], "fix": [20, 33, 40, 52, 54, 60, 65, 78, 87, 89, 94, 95, 99, 100, 102, 103, 104, 110, 111, 112, 116, 118, 120, 126, 128, 133, 144, 158, 165, 167, 182, 183, 188, 189, 194, 200, 208, 230, 232, 250, 254, 260, 267, 289, 294, 296, 299, 305, 325, 351, 352, 354, 355, 357, 370, 377, 390, 393, 411, 412, 431, 459, 466, 470, 471, 472, 474, 477, 478, 479, 480, 481, 482, 483, 485, 486], "pytimezone_fromoffsetandnam": [20, 482], "pyunicod": [20, 61], "tzname": [20, 65, 124, 188, 189, 371, 429, 481, 484, 485], "pydatetime_d": 20, "subclass": [20, 23, 27, 41, 45, 47, 51, 56, 58, 60, 65, 69, 74, 84, 85, 97, 100, 107, 108, 111, 115, 122, 126, 128, 129, 133, 138, 139, 145, 150, 157, 162, 163, 164, 167, 172, 173, 178, 181, 182, 187, 188, 189, 192, 193, 195, 200, 206, 210, 212, 213, 215, 220, 223, 225, 230, 232, 233, 239, 247, 249, 252, 255, 258, 259, 261, 262, 264, 265, 268, 273, 274, 275, 277, 289, 290, 292, 295, 298, 299, 302, 305, 311, 313, 324, 325, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 350, 351, 352, 355, 359, 367, 370, 374, 380, 381, 388, 389, 390, 392, 393, 398, 399, 401, 403, 404, 406, 411, 413, 414, 416, 417, 418, 419, 421, 423, 427, 429, 431, 433, 434, 440, 444, 447, 456, 459, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pydatetime_datetim": 20, "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 103, 111, 116, 157, 179, 182, 184, 189, 265, 268, 324, 325, 350, 351, 359, 371, 423, 426, 428, 429, 439, 455, 469, 471, 472, 477, 482, 483, 484, 485], "pydatetime_date_get_hour": 20, "23": [20, 106, 109, 114, 189, 192, 216, 218, 232, 233, 243, 265, 273, 289, 325, 338, 344, 351, 355, 364, 371, 372, 468, 469, 477, 479, 480, 481, 483, 484, 485], "pydatetime_date_get_minut": 20, "59": [20, 99, 109, 189, 325, 371, 386, 457, 477, 485], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 189, 192, 478], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 476, 485], "tzinfo": [20, 65, 188, 216, 429, 469, 476, 477, 478, 481, 482, 484, 485], "pydatetime_tim": 20, "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 476, 485], "delta": [20, 65, 114, 147, 189, 197, 260, 276, 368, 392, 468, 470, 473, 481, 483, 485], "pydatetime_delta": 20, "pydatetime_delta_get_day": 20, "999999999": [20, 189], "pydatetime_delta_get_second": 20, "86399": [20, 189], "pydatetime_delta_get_microsecond": 20, "db": [20, 65, 103, 181, 190, 232, 260, 267, 287, 304, 336, 455, 460, 471, 472, 474], "pydatetime_fromtimestamp": 20, "suitabl": [20, 31, 60, 61, 69, 83, 95, 100, 104, 108, 109, 114, 152, 164, 175, 179, 181, 182, 189, 196, 203, 211, 215, 216, 242, 251, 258, 265, 267, 272, 273, 274, 275, 277, 282, 289, 294, 299, 300, 305, 314, 329, 330, 333, 339, 341, 342, 344, 345, 348, 351, 363, 367, 370, 371, 372, 384, 392, 404, 411, 414, 417, 425, 426, 428, 431, 432, 459, 465, 468, 469, 470, 472, 473, 477, 481, 482, 483, 485], "fromtimestamp": [20, 65, 109, 188, 189, 196, 310, 347, 482, 485], "pydate_fromtimestamp": [20, 485], "pyproperty_typ": [21, 54, 103], "pydescr_newgetset": [21, 54], "pygetsetdef": [21, 54, 55, 60, 85, 86, 261, 389, 482, 485], "getset": [21, 60, 261], "pydescr_newmemb": [21, 54], "pymemberdef": [21, 54, 55, 58, 60, 85, 86, 103, 261, 389, 473, 482, 485], "meth": [21, 42, 60, 88, 95, 97, 118, 351, 390, 467, 470, 478], "pydescr_newmethod": [21, 54, 485], "pymethoddef": [21, 33, 43, 54, 55, 59, 60, 82, 83, 85, 86, 100, 469, 485], "pydescr_newwrapp": 21, "wrapperbas": [21, 482, 485], "pydescr_newclassmethod": [21, 54], "pydescr_isdata": [21, 485], "descr": [21, 103, 182], "pywrapper_new": [21, 54], "pydictobject": [22, 52], "pydict_typ": [22, 54], "pydict_checkexact": 22, "pydict_new": [22, 54], "pydictproxy_new": [22, 54], "mappingproxytyp": [22, 65, 187, 188, 232, 351, 389, 431, 476, 478, 485], "enforc": [22, 144, 192, 203, 212, 218, 232, 250, 299, 328, 349, 351, 352, 354, 388, 390, 414, 415, 417, 434, 440, 459, 467, 468, 471, 474, 477, 478, 485], "prevent": [22, 23, 31, 33, 40, 65, 83, 86, 94, 95, 102, 103, 108, 114, 115, 116, 133, 144, 164, 173, 175, 176, 182, 192, 194, 196, 200, 213, 220, 230, 232, 254, 257, 258, 265, 268, 274, 275, 277, 278, 282, 289, 294, 298, 299, 311, 317, 342, 344, 348, 359, 367, 374, 385, 388, 390, 392, 393, 394, 403, 404, 406, 413, 426, 428, 432, 434, 436, 459, 465, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485], "modif": [22, 58, 61, 63, 69, 74, 79, 83, 109, 118, 128, 175, 196, 218, 223, 241, 252, 255, 258, 272, 275, 277, 284, 289, 298, 299, 300, 302, 312, 330, 338, 340, 345, 349, 363, 367, 381, 414, 417, 426, 430, 465, 471, 473, 477, 478, 479, 480, 481, 483, 485], "class": [22, 23, 27, 31, 38, 42, 43, 47, 49, 50, 51, 55, 58, 59, 60, 61, 64, 65, 73, 74, 75, 76, 78, 83, 85, 86, 90, 94, 96, 97, 98, 102, 104, 107, 108, 110, 111, 112, 113, 114, 115, 118, 119, 124, 127, 129, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 154, 155, 156, 157, 158, 160, 162, 165, 166, 170, 173, 175, 176, 178, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 225, 226, 228, 229, 230, 231, 232, 233, 234, 239, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 279, 282, 284, 285, 286, 290, 291, 292, 294, 296, 298, 299, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 317, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 339, 341, 342, 344, 345, 347, 348, 350, 352, 355, 357, 358, 359, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 391, 398, 400, 402, 403, 404, 406, 407, 409, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 433, 434, 435, 436, 437, 438, 440, 443, 445, 447, 449, 450, 454, 455, 456, 459, 465, 466, 467, 469, 470, 473, 474, 475, 477, 479, 480, 482, 483, 484, 485, 486], "pydict_clear": [22, 54], "pydict_contain": [22, 54, 470], "pydict_copi": [22, 54], "pydict_setitem": [22, 54, 60, 83, 485], "insert": [22, 29, 31, 32, 33, 36, 57, 65, 69, 82, 83, 90, 100, 104, 114, 118, 120, 126, 127, 128, 149, 152, 154, 158, 166, 167, 173, 183, 187, 188, 196, 200, 215, 232, 233, 239, 243, 254, 257, 258, 264, 268, 273, 276, 279, 287, 290, 298, 303, 305, 313, 326, 341, 347, 351, 352, 359, 373, 381, 389, 404, 406, 411, 414, 417, 427, 432, 434, 436, 440, 444, 446, 459, 464, 466, 469, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 485], "hashabl": [22, 47, 60, 65, 95, 97, 122, 166, 167, 188, 189, 193, 196, 218, 228, 233, 239, 261, 265, 297, 302, 324, 351, 390, 406, 432, 434, 469, 470, 472, 473, 476, 478, 480, 484, 485], "steal": [22, 23, 31, 33, 36, 38, 43, 47, 51, 57, 476, 485], "pydict_setitemstr": [22, 54, 485], "pyunicode_fromstr": [22, 33, 54, 61, 82, 86], "pydict_delitem": [22, 54], "pydict_delitemstr": [22, 54], "pydict_getitem": [22, 54, 83, 476, 485], "__hash__": [22, 60, 65, 88, 90, 95, 97, 167, 187, 232, 295, 351, 393, 432, 459, 471, 472, 474, 478, 482, 485], "__eq__": [22, 60, 65, 88, 90, 95, 97, 113, 167, 174, 187, 201, 202, 209, 231, 233, 251, 291, 297, 351, 389, 393, 394, 423, 432, 467, 472, 473, 474, 477, 482, 485], "suppress": [22, 31, 32, 38, 46, 47, 65, 100, 102, 108, 116, 126, 144, 159, 163, 169, 175, 200, 234, 294, 298, 317, 321, 340, 342, 351, 355, 359, 367, 411, 431, 432, 440, 465, 467, 469, 471, 472, 473, 474, 475, 479, 480, 482, 483, 485, 486], "pydict_getitemwitherror": [22, 54, 485], "gil": [22, 23, 40, 43, 56, 60, 65, 86, 94, 97, 144, 172, 182, 194, 242, 472, 473, 476, 477, 479, 481, 484, 485], "held": [22, 29, 31, 40, 56, 94, 129, 173, 254, 257, 264, 274, 275, 289, 351, 359, 370, 392, 406, 430, 432, 466, 471, 472, 473, 476, 481, 485], "histor": [22, 39, 60, 83, 85, 104, 173, 183, 189, 220, 255, 277, 301, 350, 371, 392, 418, 440, 465, 473, 476, 479, 481, 485], "reason": [22, 23, 31, 33, 40, 44, 45, 47, 54, 60, 65, 74, 83, 86, 94, 95, 98, 99, 100, 102, 104, 108, 109, 110, 111, 112, 114, 115, 116, 121, 147, 158, 161, 162, 172, 183, 187, 189, 192, 200, 201, 203, 218, 220, 223, 230, 237, 243, 248, 249, 252, 254, 255, 258, 262, 264, 273, 274, 275, 276, 277, 281, 298, 302, 305, 311, 314, 320, 338, 340, 344, 348, 351, 359, 363, 364, 367, 369, 371, 374, 388, 390, 392, 393, 394, 397, 399, 403, 411, 429, 431, 432, 436, 468, 469, 471, 474, 476, 477, 478, 479, 480, 485], "wasn": [22, 29, 43, 69, 86, 109, 126, 275, 298, 361, 392, 427, 466, 468, 469, 471, 472, 481, 485], "pydict_getitemstr": [22, 54, 83], "pydict_setdefault": [22, 485], "defaultobj": 22, "setdefault": [22, 65, 88, 166, 167, 190, 251, 262, 351, 411, 432, 466, 469, 477, 478, 485], "hash": [22, 31, 32, 47, 60, 61, 65, 85, 88, 94, 95, 97, 152, 167, 169, 173, 180, 187, 190, 230, 232, 244, 258, 259, 260, 276, 295, 304, 317, 344, 357, 359, 393, 402, 406, 428, 430, 432, 434, 436, 439, 453, 454, 459, 460, 468, 469, 471, 472, 473, 476, 477, 478, 481, 484, 485], "pydict_item": [22, 54], "pylistobject": [22, 36, 51, 86], "pydict_key": [22, 54], "pydict_valu": [22, 54], "pydict_s": [22, 54], "pydict_next": [22, 54], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 82], "prior": [22, 31, 43, 56, 95, 103, 108, 109, 113, 119, 133, 149, 172, 181, 192, 232, 252, 259, 261, 273, 335, 338, 344, 348, 350, 351, 355, 359, 361, 363, 367, 370, 392, 417, 426, 430, 431, 432, 434, 436, 439, 479, 480, 481, 482, 483, 485], "spars": [22, 363, 485], "pos": [22, 57, 65, 123, 147, 160, 192, 229, 231, 261, 268, 284, 291, 297, 299, 306, 325, 326, 356, 368, 381, 388, 405, 469, 473, 480], "interest": [22, 60, 65, 70, 74, 78, 82, 83, 85, 87, 94, 95, 100, 103, 104, 106, 108, 109, 111, 112, 113, 114, 126, 145, 158, 160, 161, 173, 188, 189, 196, 200, 201, 207, 214, 222, 223, 254, 267, 273, 277, 279, 282, 292, 298, 303, 314, 320, 325, 334, 370, 372, 373, 390, 392, 393, 394, 404, 405, 419, 432, 438, 440, 466, 467, 468, 469, 471, 473, 485], "mutat": [22, 60, 95, 173, 187, 203, 233, 234, 258, 264, 289, 336, 351, 390, 394, 404, 468, 470, 479, 485], "safe": [22, 23, 24, 31, 32, 33, 34, 40, 43, 53, 56, 60, 61, 65, 69, 70, 82, 83, 85, 86, 95, 98, 109, 128, 132, 133, 135, 136, 138, 139, 140, 142, 143, 144, 149, 157, 158, 166, 175, 181, 182, 183, 187, 200, 221, 242, 245, 254, 258, 262, 264, 272, 273, 274, 276, 277, 289, 299, 305, 318, 330, 331, 334, 336, 337, 338, 340, 344, 348, 352, 355, 367, 370, 390, 393, 394, 398, 402, 404, 406, 413, 419, 465, 466, 467, 469, 472, 473, 476, 477, 478, 482, 483, 485], "pylong_aslong": [22, 33, 37, 54, 82, 483], "pylong_fromlong": [22, 33, 37, 43, 54, 82, 83, 85, 86, 485], "py_decref": [22, 23, 27, 33, 34, 43, 49, 54, 60, 82, 83, 85, 86, 89, 97, 476, 483, 485], "pydict_merg": [22, 54], "overrid": [22, 24, 31, 32, 33, 47, 60, 63, 65, 69, 72, 78, 95, 100, 103, 108, 109, 115, 116, 122, 126, 133, 138, 150, 157, 162, 163, 167, 173, 177, 181, 182, 187, 189, 195, 200, 203, 209, 210, 212, 215, 216, 220, 225, 232, 233, 237, 247, 250, 251, 252, 255, 257, 258, 261, 264, 268, 273, 275, 278, 289, 293, 298, 299, 305, 317, 320, 321, 325, 337, 340, 341, 344, 345, 351, 352, 355, 359, 367, 370, 381, 388, 390, 392, 393, 394, 399, 402, 406, 411, 417, 421, 426, 432, 433, 434, 436, 444, 459, 460, 465, 466, 469, 472, 473, 474, 475, 478, 479, 481, 482, 483, 485], "adding": [22, 31, 33, 45, 54, 58, 60, 65, 75, 83, 84, 87, 94, 95, 102, 103, 104, 110, 111, 115, 116, 122, 128, 147, 158, 187, 192, 202, 203, 204, 212, 213, 214, 250, 254, 268, 273, 277, 296, 299, 325, 347, 351, 357, 370, 381, 390, 392, 393, 399, 406, 411, 417, 426, 427, 432, 434, 436, 439, 459, 465, 466, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 482, 483, 484, 485, 486], "pymapping_key": [22, 38, 54, 482, 485], "pyobject_getitem": [22, 33, 38, 47, 54, 60], "pydict_upd": [22, 54], "updat": [22, 31, 40, 43, 49, 56, 60, 65, 69, 85, 86, 94, 95, 100, 102, 103, 104, 109, 114, 122, 123, 126, 133, 139, 144, 146, 166, 167, 169, 175, 180, 183, 185, 188, 189, 191, 195, 197, 200, 203, 212, 214, 229, 232, 233, 242, 243, 244, 251, 254, 255, 257, 258, 261, 262, 264, 271, 277, 284, 287, 289, 291, 294, 298, 299, 302, 305, 308, 312, 321, 330, 336, 344, 347, 348, 351, 355, 360, 371, 374, 381, 384, 388, 389, 393, 398, 399, 403, 405, 411, 417, 425, 432, 436, 440, 444, 459, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485], "pydict_mergefromseq2": [22, 54], "seq2": [22, 104, 297, 466], "merg": [22, 65, 69, 95, 97, 102, 103, 104, 108, 109, 183, 188, 189, 200, 220, 243, 273, 275, 288, 298, 299, 351, 384, 390, 430, 456, 465, 466, 469, 472, 473, 480, 485], "duplic": [22, 65, 69, 98, 104, 118, 145, 154, 169, 172, 173, 175, 188, 192, 196, 197, 203, 212, 215, 261, 265, 273, 277, 299, 308, 344, 351, 352, 367, 388, 390, 392, 411, 426, 431, 432, 434, 435, 445, 446, 468, 470, 471, 472, 476, 477, 480, 482, 484, 485], "win": [22, 31, 65, 70, 102, 109, 183, 185, 243, 298, 324, 360, 392, 465, 475, 477], "let": [23, 40, 63, 69, 72, 73, 78, 79, 82, 83, 86, 89, 94, 95, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 133, 144, 145, 162, 167, 173, 175, 182, 196, 207, 218, 230, 233, 237, 243, 249, 255, 257, 259, 268, 272, 273, 274, 275, 298, 303, 311, 313, 325, 336, 337, 342, 347, 348, 374, 381, 390, 393, 394, 417, 425, 434, 436, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 482, 485], "understand": [23, 40, 65, 83, 85, 86, 94, 100, 103, 108, 109, 110, 111, 112, 114, 126, 145, 161, 189, 199, 200, 214, 237, 249, 250, 268, 281, 294, 313, 314, 325, 347, 352, 355, 357, 373, 381, 394, 411, 420, 426, 431, 438, 466, 467, 468, 469, 471, 472, 473, 474, 481, 485], "basic": [23, 31, 33, 60, 61, 65, 69, 72, 73, 75, 76, 83, 84, 85, 87, 94, 95, 102, 103, 104, 107, 108, 109, 110, 116, 118, 126, 150, 151, 162, 164, 166, 173, 175, 183, 189, 190, 193, 195, 196, 226, 237, 241, 247, 252, 254, 258, 260, 261, 262, 264, 268, 273, 275, 289, 290, 298, 310, 313, 314, 328, 333, 344, 345, 347, 348, 351, 354, 355, 357, 363, 367, 370, 373, 374, 379, 381, 385, 390, 392, 393, 394, 399, 410, 416, 417, 418, 419, 423, 425, 428, 434, 440, 460, 466, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 483, 485], "posix": [23, 32, 65, 67, 69, 78, 109, 112, 116, 117, 121, 139, 142, 157, 182, 189, 216, 220, 234, 260, 272, 292, 298, 299, 300, 302, 307, 315, 322, 328, 334, 337, 338, 344, 345, 355, 359, 360, 363, 365, 370, 371, 395, 403, 425, 429, 430, 459, 460, 466, 469, 470, 471, 472, 473, 477, 478, 479, 480, 482, 483, 485], "global": [23, 26, 29, 30, 32, 33, 43, 49, 50, 56, 60, 63, 65, 71, 74, 83, 86, 89, 97, 98, 104, 106, 115, 116, 120, 121, 126, 128, 138, 145, 146, 150, 166, 172, 175, 182, 183, 188, 197, 200, 202, 217, 218, 220, 225, 230, 232, 234, 237, 249, 254, 255, 257, 258, 260, 261, 270, 271, 275, 282, 289, 298, 299, 302, 303, 304, 311, 314, 326, 330, 333, 340, 341, 342, 344, 351, 352, 358, 359, 360, 363, 364, 367, 370, 372, 374, 384, 388, 390, 392, 394, 399, 402, 404, 406, 417, 424, 431, 432, 433, 435, 436, 437, 439, 441, 444, 445, 454, 459, 465, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "suppos": [23, 57, 60, 61, 78, 83, 87, 95, 107, 109, 112, 116, 187, 192, 200, 203, 206, 255, 315, 325, 340, 344, 347, 348, 350, 352, 363, 381, 394, 406, 471, 472, 473, 477, 482, 483, 485], "pyarg_": 23, "concret": [23, 30, 31, 65, 69, 85, 86, 111, 122, 128, 172, 182, 189, 193, 204, 215, 218, 226, 237, 258, 260, 264, 274, 298, 335, 345, 351, 359, 370, 392, 398, 414, 421, 429, 436, 468, 469, 472, 478, 479, 482, 484, 485], "traceback": [23, 33, 40, 63, 65, 78, 83, 86, 89, 95, 99, 102, 103, 104, 107, 108, 109, 114, 120, 126, 132, 144, 145, 146, 148, 158, 163, 166, 169, 173, 175, 182, 183, 189, 191, 192, 194, 197, 200, 218, 220, 232, 254, 260, 261, 265, 271, 273, 274, 275, 289, 290, 302, 303, 305, 317, 321, 325, 345, 347, 348, 351, 352, 355, 357, 359, 370, 372, 388, 389, 391, 392, 393, 394, 411, 431, 432, 433, 434, 440, 444, 445, 446, 447, 450, 453, 456, 459, 460, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 482, 483, 484, 485], "although": [23, 33, 40, 60, 69, 73, 76, 78, 82, 95, 100, 108, 109, 129, 144, 145, 157, 164, 182, 187, 189, 196, 200, 203, 204, 207, 212, 213, 218, 238, 255, 261, 264, 267, 268, 273, 277, 287, 289, 298, 299, 300, 301, 302, 305, 313, 325, 350, 351, 352, 359, 360, 371, 373, 380, 392, 411, 416, 418, 419, 420, 425, 429, 431, 432, 434, 436, 438, 440, 459, 465, 466, 479, 480, 481, 485], "forbidden": [23, 40, 115, 218, 248, 305, 351, 370, 472, 476, 480, 485], "clean": [23, 31, 33, 65, 75, 83, 85, 106, 109, 111, 112, 126, 128, 138, 144, 146, 164, 172, 200, 208, 212, 215, 219, 220, 254, 258, 261, 277, 288, 289, 290, 291, 293, 321, 341, 345, 348, 350, 367, 399, 403, 406, 420, 432, 434, 460, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 483, 484, 485], "prepar": [23, 56, 63, 65, 114, 115, 124, 157, 163, 188, 189, 232, 237, 239, 242, 251, 260, 264, 275, 299, 305, 333, 344, 355, 359, 367, 368, 388, 389, 392, 399, 417, 418, 421, 425, 426, 430, 472, 474, 476, 479, 480, 482, 484, 485], "propag": [23, 31, 33, 34, 49, 65, 100, 104, 108, 109, 124, 132, 144, 163, 176, 220, 258, 273, 274, 289, 302, 303, 308, 331, 338, 339, 347, 351, 355, 359, 371, 392, 393, 394, 399, 406, 431, 432, 434, 436, 469, 471, 481, 485], "behav": [23, 31, 32, 43, 60, 61, 86, 95, 99, 100, 109, 111, 114, 169, 173, 175, 181, 182, 190, 192, 194, 218, 232, 233, 251, 264, 277, 284, 294, 299, 326, 342, 344, 345, 348, 351, 355, 359, 361, 369, 374, 390, 392, 393, 394, 415, 417, 432, 434, 439, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 482, 483, 485], "intend": [23, 29, 31, 32, 40, 43, 58, 61, 69, 74, 78, 82, 83, 85, 94, 100, 104, 108, 109, 111, 115, 116, 120, 121, 133, 144, 158, 164, 175, 189, 190, 197, 200, 208, 215, 220, 233, 247, 251, 252, 254, 259, 261, 264, 265, 273, 275, 276, 277, 281, 294, 295, 299, 305, 308, 313, 340, 344, 348, 350, 351, 352, 354, 355, 359, 362, 370, 381, 384, 388, 390, 392, 393, 398, 399, 404, 411, 415, 426, 429, 431, 432, 434, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 483, 485], "mysteri": [23, 83, 112, 158, 302, 340, 479], "sys": [23, 24, 27, 29, 31, 32, 33, 43, 56, 60, 61, 63, 65, 69, 70, 76, 78, 83, 89, 90, 95, 97, 98, 100, 106, 108, 109, 110, 114, 116, 118, 119, 120, 121, 124, 128, 139, 141, 142, 144, 146, 148, 150, 158, 159, 162, 163, 169, 175, 181, 182, 183, 192, 194, 196, 197, 200, 207, 217, 220, 221, 222, 223, 225, 230, 232, 234, 235, 236, 237, 241, 252, 254, 257, 258, 259, 260, 261, 264, 267, 268, 271, 273, 274, 275, 281, 285, 289, 298, 299, 301, 303, 305, 306, 308, 309, 313, 314, 315, 317, 318, 319, 321, 327, 330, 334, 337, 338, 339, 340, 344, 345, 347, 349, 351, 354, 355, 360, 361, 363, 364, 366, 367, 370, 372, 374, 384, 385, 386, 389, 392, 393, 394, 399, 403, 404, 406, 411, 417, 421, 424, 425, 426, 427, 431, 432, 434, 436, 440, 441, 442, 447, 450, 452, 454, 455, 456, 457, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 485, 486], "exc_info": [23, 31, 33, 65, 83, 108, 109, 118, 150, 159, 193, 197, 200, 220, 273, 275, 321, 338, 359, 385, 389, 392, 409, 411, 431, 432, 447, 454, 469, 471, 472, 474, 480, 485], "former": [23, 29, 60, 69, 70, 85, 95, 126, 150, 165, 167, 172, 182, 183, 189, 192, 232, 251, 257, 258, 261, 273, 281, 289, 294, 314, 328, 338, 347, 350, 354, 371, 374, 380, 381, 388, 390, 402, 432, 434, 436, 475, 476, 477, 478, 481, 482, 483, 484, 485], "caught": [23, 121, 126, 159, 163, 172, 220, 289, 299, 308, 311, 329, 338, 339, 344, 347, 359, 367, 371, 374, 392, 393, 418, 427, 432, 467, 472, 474, 479, 483, 485], "stop": [23, 32, 53, 65, 69, 95, 104, 106, 108, 109, 110, 124, 127, 136, 139, 142, 150, 162, 165, 166, 167, 189, 191, 193, 196, 200, 204, 214, 218, 220, 232, 234, 235, 242, 254, 261, 267, 273, 274, 275, 277, 289, 290, 298, 299, 301, 303, 306, 308, 314, 320, 324, 339, 345, 351, 355, 370, 373, 381, 386, 388, 389, 390, 392, 394, 410, 411, 431, 432, 434, 436, 445, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 480, 481, 482, 485], "pyerr_clear": [23, 33, 54, 83, 479], "pyerr_printex": [23, 54, 485], "set_sys_last_var": 23, "stderr": [23, 31, 32, 40, 56, 61, 65, 69, 70, 82, 83, 95, 108, 109, 120, 133, 136, 139, 142, 144, 158, 163, 170, 175, 200, 221, 234, 236, 252, 254, 264, 273, 274, 275, 289, 298, 299, 317, 321, 327, 339, 347, 351, 355, 359, 363, 367, 370, 372, 385, 392, 403, 404, 411, 432, 454, 455, 456, 459, 465, 466, 470, 472, 473, 474, 477, 479, 480, 481, 482, 484, 485], "systemexit": [23, 63, 65, 69, 108, 121, 146, 163, 174, 220, 254, 359, 370, 410, 433, 454, 471, 472, 474, 481, 485], "exit": [23, 31, 32, 33, 49, 56, 63, 65, 70, 82, 83, 94, 96, 99, 102, 104, 109, 120, 121, 124, 128, 133, 138, 139, 142, 158, 162, 163, 170, 172, 174, 175, 181, 183, 192, 194, 195, 200, 207, 220, 221, 225, 235, 254, 255, 257, 258, 260, 267, 273, 275, 289, 298, 299, 303, 314, 315, 317, 321, 334, 339, 340, 342, 344, 345, 351, 355, 359, 364, 367, 370, 372, 383, 384, 389, 392, 393, 394, 403, 404, 406, 407, 410, 411, 415, 424, 425, 426, 431, 432, 434, 452, 454, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 480, 481, 482, 483, 484, 485], "fatal": [23, 31, 40, 56, 82, 83, 146, 221, 348, 363, 392, 473, 474, 476, 478, 481, 485], "last_typ": [23, 65, 321, 359, 385, 454, 474], "last_valu": [23, 65, 218, 321, 359, 385, 454], "last_traceback": [23, 65, 303, 321, 359, 385, 432, 454], "pyerr_print": [23, 54, 65, 82, 83, 485], "pyerr_writeunrais": [23, 54, 85, 485], "unraisablehook": [23, 27, 65, 121, 148, 321, 359, 367, 454, 483, 485], "util": [23, 29, 31, 33, 56, 65, 70, 75, 78, 79, 103, 104, 109, 120, 124, 128, 139, 158, 162, 164, 165, 169, 172, 183, 188, 192, 193, 196, 200, 201, 203, 207, 210, 212, 214, 215, 218, 237, 245, 248, 255, 257, 259, 260, 262, 276, 279, 286, 291, 298, 317, 321, 328, 338, 349, 351, 353, 355, 357, 370, 374, 388, 392, 395, 403, 415, 465, 466, 468, 470, 471, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485], "imposs": [23, 38, 51, 60, 95, 164, 220, 274, 289, 299, 302, 318, 350, 367, 370, 390, 392, 405, 414, 426, 440, 466, 467, 468, 469, 470, 472, 473, 480, 485], "__del__": [23, 31, 49, 60, 65, 83, 94, 124, 188, 234, 264, 289, 322, 347, 367, 393, 432, 479, 485], "identifi": [23, 31, 40, 61, 65, 69, 78, 79, 83, 85, 86, 87, 95, 97, 100, 107, 114, 115, 116, 121, 122, 126, 128, 160, 166, 181, 182, 197, 200, 201, 203, 212, 219, 232, 234, 237, 254, 255, 261, 265, 274, 275, 277, 287, 289, 294, 299, 303, 308, 314, 320, 325, 326, 329, 334, 341, 342, 344, 348, 351, 352, 353, 358, 359, 360, 367, 370, 373, 374, 377, 390, 391, 392, 394, 398, 399, 402, 409, 411, 414, 417, 419, 420, 424, 430, 431, 432, 433, 436, 437, 440, 444, 447, 452, 465, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485], "unrais": [23, 148, 359, 367, 483, 485], "help": [23, 33, 43, 47, 55, 63, 65, 69, 72, 73, 76, 78, 85, 90, 95, 96, 97, 99, 100, 103, 108, 109, 110, 111, 112, 114, 115, 116, 124, 128, 158, 159, 162, 164, 175, 182, 183, 193, 196, 198, 200, 207, 218, 229, 230, 232, 233, 235, 237, 241, 242, 245, 251, 253, 257, 258, 260, 261, 264, 267, 268, 287, 294, 299, 302, 303, 314, 341, 342, 344, 348, 351, 357, 359, 367, 371, 372, 373, 374, 380, 383, 384, 390, 393, 394, 398, 399, 403, 409, 417, 425, 432, 436, 439, 441, 452, 454, 455, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "statement": [23, 33, 38, 45, 47, 51, 55, 60, 63, 65, 82, 83, 95, 97, 99, 100, 104, 109, 116, 118, 120, 121, 123, 126, 133, 144, 150, 156, 158, 165, 170, 172, 182, 190, 191, 192, 194, 197, 200, 208, 220, 225, 230, 232, 241, 249, 254, 255, 257, 258, 260, 264, 269, 270, 276, 277, 284, 287, 289, 290, 294, 297, 298, 299, 301, 303, 312, 318, 321, 325, 334, 342, 344, 345, 347, 348, 351, 355, 358, 359, 363, 364, 366, 367, 372, 383, 388, 390, 393, 394, 405, 409, 414, 415, 416, 426, 433, 434, 435, 436, 437, 439, 441, 443, 444, 447, 450, 459, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486], "pyerr_setstr": [23, 33, 54, 83, 85, 86, 473], "pyexc_runtimeerror": [23, 54, 85], "pyerr_setobject": [23, 54, 83, 485], "pyerr_format": [23, 54, 85, 100, 473, 480, 485], "pyunicode_fromformat": [23, 54, 61, 85, 86, 476, 478, 479, 480, 485], "pyerr_formatv": [23, 54, 480, 485], "pyerr_setnon": [23, 54], "shorthand": [23, 95, 107, 126, 149, 197, 200, 265, 308, 344, 369, 374, 385, 390, 404, 431, 447, 469, 470, 479], "pyerr_badargu": [23, 54], "pyexc_typeerror": [23, 54, 83, 85, 86], "pyerr_nomemori": [23, 40, 54, 83], "pyexc_memoryerror": [23, 54], "pyerr_setfromerrno": [23, 54, 83], "gotten": [23, 158, 189, 192, 289, 466, 485], "strerror": [23, 65, 124, 219, 220, 272, 299, 472, 485], "eintr": [23, 65, 124, 219, 220, 289, 473, 485], "interrupt": [23, 31, 65, 109, 121, 125, 133, 158, 183, 184, 192, 219, 220, 254, 277, 289, 299, 304, 334, 335, 339, 344, 345, 347, 355, 364, 370, 371, 392, 399, 410, 424, 430, 432, 445, 472, 473, 477, 480, 483, 484, 485], "pyerr_checksign": [23, 54, 485], "pyerr_setfromerrnowithfilenameobject": [23, 54], "filenameobject": 23, "oserror": [23, 65, 69, 70, 114, 136, 139, 160, 182, 189, 194, 220, 222, 225, 230, 232, 237, 241, 250, 252, 258, 261, 264, 288, 289, 294, 299, 300, 301, 302, 309, 312, 328, 334, 338, 339, 342, 344, 348, 355, 363, 364, 367, 371, 397, 399, 409, 427, 447, 454, 473, 476, 478, 479, 483, 485], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 54], "pyerr_setfromwindowserr": [23, 54], "ierr": 23, "windowserror": [23, 65, 182, 220, 409, 478], "getlasterror": [23, 65, 124, 182, 485], "win32": [23, 61, 70, 94, 96, 142, 182, 275, 289, 299, 344, 355, 359, 360, 409, 410, 465, 466, 472, 474, 477, 480, 485], "formatmessag": [23, 182, 220], "pyexc_windowserror": [23, 54], "pyerr_setexcfromwindowserr": [23, 54], "pyerr_setfromwindowserrwithfilenam": [23, 54], "pyerr_setfromwindowserrwithfilenameobject": 23, "os": [23, 24, 31, 32, 54, 56, 61, 65, 67, 69, 78, 83, 88, 95, 97, 100, 102, 103, 104, 106, 108, 109, 114, 116, 118, 121, 124, 126, 131, 132, 133, 138, 139, 142, 143, 144, 145, 146, 148, 158, 166, 169, 170, 172, 173, 175, 176, 189, 193, 194, 195, 196, 200, 207, 215, 217, 219, 221, 222, 223, 226, 227, 232, 236, 237, 238, 241, 242, 250, 252, 254, 258, 260, 264, 272, 275, 278, 284, 288, 289, 292, 298, 305, 307, 308, 309, 312, 314, 315, 324, 326, 334, 335, 338, 339, 340, 342, 344, 348, 349, 351, 359, 360, 363, 365, 370, 371, 374, 384, 386, 392, 393, 403, 404, 407, 411, 425, 426, 429, 432, 442, 447, 455, 456, 459, 460, 463, 465, 466, 468, 469, 470, 471, 474, 485, 486], "fsdecod": [23, 65, 97, 124, 299, 359, 477, 481, 485], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 54], "filename2": [23, 65, 220], "pyerr_setexcfromwindowserrwithfilenam": [23, 54], "pyerr_setimporterror": [23, 54, 479, 481], "msg": [23, 65, 69, 94, 109, 112, 128, 135, 144, 175, 182, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 235, 242, 244, 249, 258, 262, 268, 272, 273, 275, 277, 289, 291, 292, 321, 325, 342, 344, 351, 357, 364, 367, 368, 385, 392, 397, 399, 412, 418, 469, 470, 471, 477, 478, 479, 480, 481, 485], "importerror": [23, 65, 69, 109, 110, 220, 257, 258, 274, 285, 289, 305, 308, 340, 348, 359, 367, 392, 414, 427, 436, 440, 454, 460, 467, 469, 472, 478, 479, 481, 482, 484, 485], "pyerr_setimporterrorsubclass": [23, 54, 481], "pyerr_syntaxlocationobject": [23, 485], "lineno": [23, 65, 106, 128, 150, 173, 191, 193, 194, 197, 200, 220, 225, 226, 229, 261, 268, 270, 271, 273, 279, 291, 292, 303, 305, 314, 318, 320, 321, 325, 337, 367, 368, 385, 386, 392, 404, 435, 459, 476, 480, 481, 483, 485], "col_offset": [23, 65, 128, 270, 483, 485], "syntaxerror": [23, 63, 65, 89, 111, 128, 163, 165, 174, 200, 220, 232, 254, 325, 367, 383, 385, 390, 431, 433, 435, 439, 440, 446, 447, 450, 453, 454, 466, 467, 468, 477, 479, 480, 481, 482, 485], "subsystem": [23, 104, 109, 258, 355, 374, 465, 469, 471, 473, 483, 485], "think": [23, 57, 61, 69, 70, 78, 85, 95, 100, 104, 109, 111, 112, 114, 116, 200, 208, 232, 243, 258, 273, 298, 305, 393, 394, 432, 434, 436, 468, 471, 472], "pyerr_syntaxlocationex": [23, 54, 485], "pyerr_syntaxloc": [23, 54], "omit": [23, 55, 57, 65, 69, 85, 100, 109, 111, 123, 126, 128, 133, 145, 160, 173, 181, 182, 183, 188, 189, 196, 200, 208, 209, 211, 230, 232, 237, 241, 252, 254, 255, 257, 264, 265, 271, 272, 277, 282, 284, 289, 294, 298, 303, 305, 311, 320, 325, 326, 334, 337, 338, 340, 342, 344, 350, 351, 352, 354, 363, 370, 381, 385, 388, 390, 392, 393, 404, 405, 413, 415, 417, 418, 425, 430, 431, 432, 434, 435, 439, 440, 459, 465, 469, 470, 471, 473, 474, 476, 478, 479, 481, 482, 485], "pyerr_badinternalcal": [23, 54], "pyexc_systemerror": [23, 52, 54], "mirror": [23, 65, 115, 230, 273, 274, 275, 368, 374, 382, 391, 419, 459, 470, 485], "user": [23, 27, 31, 32, 33, 40, 54, 60, 61, 63, 65, 69, 70, 72, 75, 76, 78, 81, 82, 83, 84, 86, 89, 94, 95, 96, 100, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 120, 124, 126, 133, 139, 148, 150, 158, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 175, 179, 181, 183, 185, 187, 189, 191, 192, 193, 195, 199, 200, 207, 217, 218, 219, 220, 223, 230, 233, 234, 235, 236, 237, 240, 242, 247, 249, 250, 252, 255, 258, 259, 261, 262, 264, 268, 272, 273, 275, 277, 278, 281, 287, 289, 292, 294, 298, 299, 300, 301, 302, 303, 305, 306, 311, 316, 317, 318, 325, 326, 328, 334, 335, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 351, 355, 359, 360, 363, 364, 367, 370, 371, 373, 374, 375, 378, 380, 381, 384, 385, 388, 389, 392, 394, 398, 399, 400, 403, 404, 407, 409, 411, 415, 416, 417, 418, 419, 423, 425, 426, 429, 430, 431, 432, 433, 434, 436, 440, 442, 445, 457, 459, 460, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "problem": [23, 31, 33, 56, 60, 65, 78, 83, 86, 94, 95, 98, 100, 102, 103, 104, 108, 109, 110, 112, 114, 120, 133, 145, 147, 159, 164, 165, 173, 175, 181, 189, 192, 200, 203, 206, 210, 212, 214, 230, 237, 243, 252, 254, 257, 258, 268, 272, 273, 274, 289, 298, 299, 305, 314, 320, 339, 344, 347, 348, 350, 351, 357, 362, 363, 367, 369, 390, 393, 394, 406, 411, 414, 417, 431, 439, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 485], "machineri": [23, 43, 60, 65, 78, 83, 97, 103, 109, 122, 164, 216, 232, 257, 261, 286, 308, 348, 359, 389, 406, 410, 427, 428, 432, 436, 459, 465, 467, 468, 470, 473, 476, 477, 478, 479, 480, 481, 482, 485], "nor": [23, 31, 32, 60, 79, 85, 86, 94, 99, 107, 115, 122, 139, 149, 150, 164, 194, 218, 249, 250, 273, 276, 281, 289, 292, 298, 299, 303, 305, 308, 325, 336, 345, 347, 348, 351, 359, 381, 384, 392, 407, 429, 430, 432, 434, 459, 460, 476, 477, 479, 481, 482, 485], "intent": [23, 24, 29, 82, 83, 100, 109, 187, 189, 203, 212, 254, 264, 281, 294, 299, 359, 390, 392, 393, 411, 423, 431, 432, 469, 470, 472, 474, 478, 479, 485], "pyerr_warnex": [23, 54, 404, 471], "stack_level": 23, "forth": [23, 70, 76, 78, 95, 102, 111, 112, 166, 299, 325, 334, 351, 432, 466, 468, 469, 471], "pyexc_warn": [23, 54], "pyexc_except": [23, 54], "pyexc_runtimewarn": [23, 54], "enumer": [23, 65, 88, 103, 104, 113, 114, 170, 188, 232, 233, 260, 267, 289, 317, 351, 370, 386, 402, 409, 426, 445, 446, 454, 456, 465, 479, 481, 485, 486], "command": [23, 31, 32, 33, 63, 65, 70, 72, 73, 75, 76, 78, 79, 81, 82, 83, 87, 89, 95, 100, 108, 109, 110, 114, 116, 118, 120, 124, 125, 133, 142, 148, 158, 163, 170, 183, 191, 193, 194, 197, 198, 199, 200, 213, 221, 229, 230, 232, 237, 252, 255, 259, 260, 262, 264, 270, 274, 278, 287, 289, 291, 294, 301, 302, 307, 311, 312, 314, 315, 316, 319, 321, 330, 337, 338, 341, 342, 347, 348, 351, 357, 359, 364, 368, 372, 373, 374, 380, 381, 386, 388, 403, 404, 407, 411, 417, 424, 425, 432, 433, 440, 441, 452, 455, 460, 462, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 480, 482, 483, 484, 485, 486], "pyerr_warnexplicitobject": 23, "registri": [23, 30, 32, 61, 62, 65, 151, 173, 181, 202, 204, 210, 233, 257, 258, 260, 265, 275, 282, 305, 309, 348, 359, 399, 404, 408, 410, 417, 462, 466, 472, 473, 481, 484, 485], "straightforward": [23, 33, 83, 94, 95, 109, 114, 164, 173, 182, 265, 274, 298, 334, 344, 393, 394, 468, 469, 472, 477, 478], "warn_explicit": [23, 65, 321, 404, 481, 485], "pyerr_warnexplicit": [23, 54], "pyerr_warnformat": [23, 54], "pyerr_resourcewarn": [23, 54, 481, 485], "resourcewarn": [23, 65, 132, 193, 220, 234, 260, 299, 355, 367, 392, 404, 454, 477, 481, 485], "warningmessag": [23, 481, 485], "pyerr_set": 23, "pyerr_restor": [23, 54, 60, 85], "pyerr_exceptionmatch": [23, 33, 54], "shown": [23, 33, 40, 78, 79, 83, 87, 100, 102, 108, 109, 110, 113, 115, 116, 122, 154, 175, 187, 192, 194, 196, 200, 210, 220, 221, 254, 273, 274, 298, 303, 314, 319, 325, 331, 352, 355, 371, 380, 381, 385, 388, 392, 393, 394, 398, 404, 406, 432, 465, 472, 476, 480, 481, 482, 483, 484, 485], "pyerr_givenexceptionmatch": [23, 54], "subtupl": 23, "pyerr_fetch": [23, 54, 60, 85, 479], "ptraceback": 23, "catch": [23, 33, 40, 65, 78, 95, 102, 104, 109, 110, 114, 115, 126, 128, 144, 173, 181, 200, 220, 251, 261, 273, 298, 299, 321, 328, 337, 339, 347, 355, 367, 371, 390, 392, 399, 412, 432, 434, 466, 469, 471, 472, 473, 474, 477, 478, 479, 481, 484, 485], "save": [23, 31, 33, 40, 60, 61, 65, 82, 83, 85, 95, 100, 103, 104, 108, 109, 111, 116, 126, 144, 146, 154, 156, 158, 159, 162, 173, 175, 183, 189, 193, 207, 216, 233, 234, 250, 254, 262, 267, 272, 275, 276, 277, 298, 299, 305, 314, 319, 325, 326, 340, 347, 359, 367, 370, 371, 373, 374, 385, 388, 404, 409, 423, 428, 429, 431, 432, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 484, 485], "temporarili": [23, 33, 65, 70, 83, 100, 109, 115, 116, 157, 175, 192, 200, 234, 237, 272, 273, 321, 338, 351, 355, 367, 372, 381, 386, 392, 393, 394, 431, 465, 472, 481, 482, 485], "invalid": [23, 27, 32, 54, 56, 58, 61, 65, 83, 95, 97, 99, 103, 107, 108, 111, 114, 115, 121, 124, 133, 163, 165, 166, 169, 182, 189, 190, 192, 200, 203, 206, 208, 210, 212, 215, 216, 218, 219, 220, 223, 233, 234, 237, 241, 245, 247, 249, 251, 254, 257, 258, 261, 268, 274, 277, 281, 289, 298, 299, 300, 301, 305, 315, 317, 325, 328, 334, 335, 339, 344, 348, 350, 351, 352, 355, 363, 367, 370, 371, 381, 390, 392, 398, 404, 405, 406, 409, 414, 423, 429, 431, 432, 435, 440, 445, 447, 453, 459, 466, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485], "subtl": [23, 60, 83, 181, 200, 222, 295, 298, 301, 314, 432, 433, 479, 485], "later": [23, 24, 31, 32, 33, 40, 43, 58, 61, 69, 78, 79, 82, 83, 85, 86, 94, 100, 102, 104, 108, 109, 111, 112, 113, 115, 116, 120, 126, 132, 133, 143, 144, 146, 147, 156, 158, 159, 162, 164, 173, 175, 182, 183, 189, 197, 203, 209, 212, 237, 242, 250, 254, 258, 261, 264, 267, 271, 272, 276, 285, 289, 298, 305, 325, 328, 331, 334, 337, 339, 344, 347, 348, 359, 367, 371, 385, 390, 392, 393, 394, 399, 403, 404, 405, 406, 425, 428, 431, 432, 434, 436, 440, 459, 465, 466, 467, 468, 469, 472, 473, 474, 477, 479, 480, 482, 484, 485], "away": [23, 31, 33, 78, 86, 95, 100, 104, 108, 112, 126, 183, 189, 192, 200, 220, 254, 261, 281, 298, 299, 300, 314, 456, 468, 469, 474, 479, 480, 485], "pyerr_normalizeexcept": [23, 54, 485], "tb": [23, 109, 197, 220, 254, 385, 386, 389, 394, 432, 471, 472, 479], "circumst": [23, 40, 95, 102, 108, 109, 158, 173, 218, 220, 250, 273, 276, 298, 299, 328, 338, 350, 399, 403, 407, 432, 440, 470, 479, 483, 485], "unnorm": [23, 485], "instanti": [23, 69, 73, 86, 94, 108, 109, 115, 122, 128, 133, 138, 139, 144, 158, 160, 162, 166, 182, 183, 187, 189, 196, 201, 203, 205, 210, 218, 237, 247, 249, 252, 255, 257, 258, 273, 274, 275, 277, 289, 295, 298, 302, 303, 305, 334, 335, 337, 341, 342, 344, 345, 351, 367, 374, 381, 389, 390, 392, 393, 394, 403, 407, 412, 414, 415, 418, 420, 432, 440, 444, 447, 471, 472, 477, 480, 482, 483, 484, 485], "delay": [23, 65, 94, 102, 109, 119, 135, 144, 183, 229, 252, 254, 261, 275, 289, 294, 331, 339, 344, 348, 388, 394, 399, 400, 432, 454, 472, 476, 477, 481, 482, 483, 485], "implicit": [23, 32, 56, 60, 65, 78, 83, 95, 97, 100, 109, 118, 120, 126, 133, 139, 144, 149, 172, 173, 175, 187, 190, 194, 196, 197, 220, 230, 232, 247, 255, 258, 261, 264, 274, 287, 301, 303, 320, 325, 330, 339, 342, 344, 347, 351, 352, 354, 355, 390, 393, 394, 404, 406, 416, 432, 434, 436, 440, 444, 447, 459, 473, 474, 476, 477, 479, 480, 481, 482, 483, 485, 486], "__traceback__": [23, 432, 434, 440, 474, 485], "snippet": [23, 65, 72, 109, 144, 176, 191, 251, 260, 274, 337, 348, 370, 465, 468, 469, 471, 480, 485], "pyexception_settraceback": [23, 54, 485], "pyerr_getexcinfo": [23, 54], "info": [23, 60, 65, 69, 73, 78, 83, 94, 103, 108, 109, 124, 126, 132, 142, 159, 164, 175, 189, 197, 232, 234, 237, 249, 250, 253, 259, 261, 262, 270, 273, 274, 275, 277, 289, 294, 308, 309, 313, 338, 356, 374, 388, 390, 392, 399, 425, 426, 434, 456, 459, 463, 467, 469, 471, 472, 473, 476, 477, 479, 483, 485], "fresh": [23, 60, 95, 100, 104, 164, 175, 261, 289, 313, 330, 367, 389, 436, 465, 468, 469, 485], "pyerr_setexcinfo": [23, 54], "interact": [23, 31, 32, 33, 40, 56, 60, 63, 65, 69, 82, 89, 94, 95, 97, 103, 109, 111, 116, 120, 121, 126, 128, 133, 150, 162, 172, 183, 186, 192, 193, 197, 201, 214, 220, 225, 232, 250, 254, 257, 260, 261, 264, 289, 290, 298, 299, 300, 301, 303, 313, 314, 319, 321, 326, 329, 340, 341, 348, 355, 357, 359, 363, 364, 374, 380, 381, 385, 388, 392, 399, 404, 417, 424, 426, 432, 435, 436, 437, 438, 439, 440, 452, 459, 465, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "main": [23, 31, 32, 33, 40, 43, 56, 60, 63, 65, 69, 73, 78, 82, 83, 85, 86, 94, 95, 100, 102, 103, 108, 109, 120, 121, 126, 128, 130, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 146, 158, 162, 163, 172, 173, 175, 176, 183, 191, 193, 194, 196, 200, 201, 203, 206, 207, 208, 211, 212, 213, 215, 233, 235, 237, 247, 254, 258, 259, 261, 264, 273, 274, 277, 283, 289, 294, 298, 299, 302, 305, 315, 321, 328, 330, 339, 340, 345, 347, 351, 359, 360, 363, 367, 370, 372, 374, 377, 380, 381, 386, 388, 390, 392, 393, 394, 399, 403, 406, 411, 415, 417, 419, 423, 424, 425, 432, 433, 436, 454, 455, 456, 459, 462, 465, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "sent": [23, 65, 100, 102, 104, 108, 112, 114, 115, 128, 129, 133, 139, 142, 145, 175, 183, 207, 230, 242, 247, 249, 251, 252, 254, 255, 265, 273, 274, 275, 289, 294, 299, 303, 311, 328, 339, 341, 342, 344, 345, 347, 348, 355, 371, 372, 390, 399, 411, 423, 424, 465, 466, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 483, 485], "pend": [23, 31, 37, 65, 79, 85, 118, 133, 139, 144, 172, 264, 277, 287, 311, 334, 339, 347, 348, 428, 434, 477, 478, 479, 481, 484, 485], "invoc": [23, 53, 65, 69, 81, 83, 100, 106, 170, 175, 182, 217, 280, 289, 314, 370, 385, 392, 403, 411, 419, 431, 432, 444, 459, 470, 477, 479, 483, 485], "press": [23, 102, 109, 133, 161, 183, 254, 288, 303, 329, 374, 380, 381, 388, 392, 426, 473, 477, 485], "ctrl": [23, 65, 96, 102, 109, 124, 133, 174, 184, 289, 303, 339, 345, 445, 459, 466, 471, 477, 483, 485], "sigint": [23, 65, 121, 289, 303, 322, 339, 355, 392, 476, 477, 483, 485], "keyboardinterrupt": [23, 65, 108, 109, 121, 163, 220, 289, 322, 339, 392, 411, 424, 442, 447, 454, 471, 472, 473, 474, 481, 482, 483, 485], "pyerr_setinterrupt": [23, 54], "simul": [23, 65, 100, 102, 103, 109, 113, 121, 133, 139, 141, 183, 241, 243, 305, 324, 339, 350, 354, 368, 388, 406, 467, 468, 476, 479], "arriv": [23, 121, 200, 250, 252, 289, 324, 339, 345, 348, 371, 446, 466], "pyerr_setinterruptex": [23, 54, 476], "signum": [23, 94, 121, 133, 221, 299, 339, 485], "sig_dfl": [23, 65, 121, 339, 355, 485], "sig_ign": [23, 65, 121, 339, 355, 485], "outsid": [23, 56, 69, 72, 95, 100, 103, 104, 108, 109, 111, 112, 116, 133, 138, 157, 164, 169, 172, 176, 182, 183, 189, 192, 203, 206, 212, 215, 220, 252, 254, 268, 305, 319, 320, 325, 331, 338, 344, 348, 351, 352, 354, 363, 367, 370, 371, 372, 381, 388, 390, 403, 417, 419, 426, 431, 432, 439, 440, 444, 469, 470, 473, 477, 481, 482, 483, 484, 485], "pysignal_setwakeupfd": [23, 472], "fd": [23, 24, 65, 94, 133, 136, 139, 148, 183, 222, 229, 264, 288, 299, 315, 334, 335, 338, 339, 344, 366, 387, 388, 472, 485], "whenev": [23, 49, 60, 63, 83, 95, 103, 104, 108, 109, 116, 126, 139, 183, 192, 196, 214, 218, 232, 234, 254, 261, 264, 273, 275, 277, 289, 298, 305, 320, 334, 339, 347, 348, 351, 359, 367, 381, 388, 392, 393, 417, 429, 432, 436, 468, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 485], "disabl": [23, 27, 31, 32, 33, 40, 54, 65, 69, 70, 79, 83, 108, 109, 111, 116, 118, 124, 126, 133, 150, 158, 173, 181, 183, 191, 192, 196, 200, 208, 218, 221, 225, 230, 232, 233, 234, 249, 261, 264, 268, 273, 274, 275, 289, 294, 298, 299, 303, 305, 314, 321, 325, 326, 333, 334, 337, 339, 340, 342, 344, 346, 347, 348, 351, 355, 359, 367, 381, 388, 390, 392, 393, 399, 404, 406, 409, 417, 429, 432, 436, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "featur": [23, 31, 32, 47, 51, 58, 60, 63, 65, 69, 74, 78, 81, 85, 89, 94, 95, 97, 100, 102, 103, 104, 108, 109, 111, 114, 116, 119, 126, 149, 154, 158, 159, 161, 164, 172, 173, 178, 182, 183, 185, 186, 187, 189, 200, 201, 215, 217, 220, 232, 233, 243, 250, 254, 257, 258, 268, 273, 276, 289, 298, 299, 303, 305, 308, 325, 330, 341, 342, 347, 348, 350, 351, 354, 355, 357, 359, 363, 367, 370, 374, 384, 388, 390, 392, 393, 399, 404, 406, 411, 413, 414, 415, 418, 419, 420, 426, 430, 432, 434, 436, 438, 439, 440, 459, 465, 466, 467, 468, 469, 470, 472, 474, 475, 477, 485, 486], "set_wakeup_fd": [23, 65, 339, 472, 480, 482, 485], "now": [23, 31, 32, 33, 37, 40, 47, 54, 55, 56, 58, 60, 61, 63, 65, 69, 78, 79, 82, 83, 85, 86, 94, 95, 99, 100, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 126, 128, 133, 138, 139, 142, 144, 146, 147, 149, 152, 156, 158, 160, 164, 166, 167, 169, 172, 173, 175, 176, 178, 181, 182, 183, 188, 189, 190, 192, 194, 197, 200, 207, 209, 212, 219, 220, 221, 222, 223, 225, 228, 230, 232, 233, 241, 242, 247, 249, 250, 251, 252, 255, 258, 259, 261, 264, 265, 268, 272, 273, 274, 275, 276, 277, 284, 288, 289, 290, 294, 298, 299, 300, 301, 302, 303, 305, 308, 311, 314, 315, 317, 319, 325, 334, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 354, 355, 359, 364, 365, 370, 371, 372, 382, 385, 386, 388, 389, 390, 392, 393, 394, 398, 399, 403, 404, 405, 409, 415, 417, 423, 424, 425, 426, 428, 431, 432, 436, 439, 440, 445, 446, 453, 455, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "socket": [23, 65, 90, 97, 104, 105, 107, 108, 111, 114, 131, 134, 136, 137, 148, 164, 176, 177, 193, 214, 219, 220, 230, 249, 252, 254, 255, 260, 262, 264, 265, 266, 273, 274, 275, 289, 290, 294, 299, 302, 311, 313, 328, 334, 335, 339, 341, 342, 345, 349, 357, 363, 364, 374, 406, 411, 417, 432, 443, 456, 460, 466, 467, 468, 469, 470, 471, 472, 473, 485], "pyerr_newexcept": [23, 54, 83, 471, 473, 477], "classnam": [23, 95, 128, 167, 374, 380, 393, 394, 431, 444], "deriv": [23, 31, 47, 56, 58, 65, 70, 74, 86, 98, 116, 122, 126, 128, 150, 163, 164, 172, 180, 182, 183, 184, 187, 188, 189, 204, 206, 208, 209, 210, 220, 233, 237, 247, 251, 255, 257, 258, 259, 261, 264, 267, 268, 273, 274, 278, 294, 298, 299, 314, 316, 318, 319, 320, 334, 345, 348, 352, 359, 374, 388, 390, 392, 399, 402, 404, 411, 412, 415, 420, 423, 424, 430, 432, 435, 439, 444, 447, 466, 469, 470, 471, 472, 473, 474, 478, 479, 481, 482, 485], "__module__": [23, 26, 60, 98, 103, 166, 204, 218, 232, 233, 261, 285, 367, 432, 469, 476, 480, 481, 485], "dot": [23, 29, 43, 60, 65, 69, 86, 97, 100, 103, 106, 108, 109, 111, 116, 128, 200, 229, 232, 238, 250, 254, 257, 258, 265, 267, 270, 272, 273, 274, 277, 282, 294, 302, 308, 319, 325, 329, 338, 344, 351, 359, 363, 365, 374, 382, 388, 392, 393, 394, 424, 426, 427, 431, 432, 436, 438, 440, 444, 451, 459, 472, 475, 476, 480, 485], "pyerr_newexceptionwithdoc": [23, 54, 473, 477], "docstr": [23, 26, 32, 33, 43, 55, 57, 60, 63, 65, 85, 94, 97, 100, 109, 128, 162, 166, 193, 229, 232, 233, 254, 261, 303, 319, 367, 383, 389, 390, 392, 411, 431, 432, 439, 440, 444, 445, 455, 459, 466, 467, 468, 469, 470, 471, 472, 473, 477, 479, 480, 481, 482, 483, 484, 485], "pyexception_gettraceback": [23, 54], "ex": [23, 32, 40, 109, 326, 344, 351, 423, 435, 459, 471, 480, 481, 484, 485], "pyexception_getcontext": [23, 54], "__context__": [23, 65, 220, 321, 385, 440, 474, 478, 485], "pyexception_setcontext": [23, 54], "pyexception_getcaus": [23, 54], "__cause__": [23, 65, 197, 220, 321, 385, 440, 474, 485], "pyexception_setcaus": [23, 54], "__suppress_context__": [23, 65, 220, 321, 385, 440], "pyunicodedecodeerror_cr": [23, 54], "pyunicodeencodeerror_cr": 23, "11": [23, 31, 61, 65, 95, 97, 99, 102, 104, 108, 109, 111, 114, 116, 118, 119, 123, 144, 147, 158, 159, 160, 164, 166, 179, 189, 192, 200, 218, 222, 228, 233, 242, 243, 248, 249, 254, 256, 258, 265, 267, 278, 281, 287, 293, 294, 299, 301, 302, 303, 307, 324, 328, 341, 343, 346, 348, 350, 351, 352, 354, 356, 364, 365, 369, 371, 383, 388, 390, 399, 401, 412, 427, 429, 439, 446, 448, 450, 465, 468, 469, 470, 472, 474, 476, 477, 479, 480, 481, 482, 483, 485], "pyexc_unicodeencodeerror": [23, 54], "sonn": 23, "pyunicodetranslateerror_cr": 23, "pyexc_unicodetranslateerror": [23, 54], "onn": 23, "pyunicodedecodeerror_getencod": [23, 54], "pyunicodeencodeerror_getencod": [23, 54], "pyunicodedecodeerror_getobject": [23, 54], "pyunicodeencodeerror_getobject": [23, 54], "pyunicodetranslateerror_getobject": [23, 54], "pyunicodedecodeerror_getstart": [23, 54], "pyunicodeencodeerror_getstart": [23, 54], "pyunicodetranslateerror_getstart": [23, 54], "place": [23, 31, 32, 33, 36, 40, 43, 45, 49, 51, 55, 57, 60, 61, 65, 69, 70, 72, 83, 85, 86, 87, 89, 94, 97, 100, 103, 104, 106, 108, 109, 113, 115, 116, 118, 126, 128, 144, 145, 158, 159, 164, 166, 173, 174, 175, 182, 183, 187, 189, 192, 195, 196, 197, 200, 203, 212, 215, 218, 225, 231, 232, 233, 234, 237, 239, 242, 250, 254, 257, 258, 264, 268, 273, 274, 275, 277, 281, 284, 289, 299, 303, 305, 308, 314, 317, 320, 324, 325, 330, 345, 348, 351, 352, 355, 360, 369, 374, 380, 381, 384, 388, 389, 390, 392, 393, 394, 399, 401, 403, 411, 425, 431, 432, 434, 436, 440, 456, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485], "pyunicodedecodeerror_setstart": [23, 54], "pyunicodeencodeerror_setstart": [23, 54], "pyunicodetranslateerror_setstart": [23, 54], "pyunicodedecodeerror_getend": [23, 54], "pyunicodeencodeerror_getend": [23, 54], "pyunicodetranslateerror_getend": [23, 54], "pyunicodedecodeerror_setend": [23, 54], "pyunicodeencodeerror_setend": [23, 54], "pyunicodetranslateerror_setend": [23, 54], "pyunicodedecodeerror_getreason": [23, 54], "pyunicodeencodeerror_getreason": [23, 54], "pyunicodetranslateerror_getreason": [23, 54], "pyunicodedecodeerror_setreason": [23, 54], "pyunicodeencodeerror_setreason": [23, 54], "pyunicodetranslateerror_setreason": [23, 54], "core": [23, 27, 32, 49, 56, 65, 73, 74, 75, 76, 78, 81, 83, 86, 108, 110, 111, 124, 133, 169, 172, 173, 212, 242, 258, 260, 267, 272, 275, 298, 299, 306, 314, 319, 328, 339, 351, 367, 370, 374, 389, 393, 403, 414, 417, 429, 430, 432, 440, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 486], "necessarili": [23, 33, 54, 58, 60, 69, 70, 81, 82, 86, 95, 112, 116, 121, 128, 183, 192, 200, 203, 212, 277, 281, 289, 290, 299, 305, 325, 344, 347, 348, 350, 351, 359, 371, 389, 393, 411, 414, 419, 429, 440, 465, 469, 471, 472, 473, 485], "track": [23, 27, 33, 40, 60, 65, 69, 78, 95, 108, 110, 111, 133, 158, 164, 173, 175, 187, 191, 192, 193, 200, 234, 260, 275, 281, 289, 290, 298, 299, 305, 334, 359, 370, 371, 374, 376, 392, 393, 399, 414, 466, 467, 470, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485], "depth": [23, 101, 108, 128, 169, 173, 183, 185, 190, 197, 203, 212, 220, 242, 276, 305, 313, 327, 347, 351, 359, 363, 367, 380, 392, 416, 417, 466, 467, 468, 480, 481, 482, 485], "mark": [23, 32, 61, 85, 94, 100, 103, 106, 109, 110, 111, 114, 118, 122, 123, 126, 128, 136, 139, 144, 145, 150, 164, 172, 173, 183, 187, 196, 200, 212, 237, 239, 243, 247, 254, 261, 268, 275, 277, 303, 306, 311, 320, 334, 344, 347, 351, 355, 364, 367, 374, 384, 390, 392, 406, 414, 419, 430, 432, 434, 435, 439, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "use_stackcheck": [23, 56, 485], "pyos_checkstack": [23, 54, 56], "reach": [23, 24, 33, 49, 63, 83, 85, 94, 95, 104, 109, 111, 115, 133, 142, 150, 156, 160, 165, 232, 249, 264, 267, 273, 276, 299, 303, 319, 320, 334, 337, 344, 345, 351, 355, 385, 399, 417, 419, 428, 431, 432, 434, 436, 440, 465, 466, 467, 468, 469, 471, 472, 473, 477, 479, 480, 482, 483, 485], "recursionerror": [23, 65, 128, 220, 268, 305, 359, 480, 481, 485], "concaten": [23, 50, 51, 65, 69, 86, 111, 126, 127, 156, 158, 163, 164, 193, 197, 232, 242, 273, 276, 277, 299, 300, 302, 303, 320, 325, 337, 342, 344, 348, 351, 352, 363, 385, 390, 428, 432, 434, 447, 450, 453, 465, 469, 470, 476, 485], "tp_repr": [23, 60, 85], "protect": [23, 31, 83, 85, 86, 109, 144, 173, 182, 183, 187, 230, 237, 242, 243, 255, 264, 276, 284, 289, 313, 330, 337, 345, 348, 349, 393, 404, 425, 432, 459, 468, 471, 480, 485], "cycl": [23, 27, 58, 60, 65, 83, 86, 88, 95, 97, 104, 106, 109, 116, 120, 144, 217, 231, 234, 239, 254, 261, 267, 290, 359, 367, 370, 381, 406, 431, 432, 440, 467, 469, 471, 472, 473, 477, 479, 483, 484, 485, 486], "facilit": [23, 100, 254, 274, 325, 326, 342, 404, 479, 482, 485], "reprlib": [23, 65, 188, 260, 456, 474, 485], "recursive_repr": [23, 65, 188, 327, 477, 485], "py_reprent": [23, 54], "detect": [23, 27, 32, 33, 40, 56, 60, 65, 69, 73, 83, 85, 86, 95, 100, 103, 104, 111, 112, 115, 118, 122, 139, 145, 146, 164, 167, 181, 183, 187, 189, 192, 194, 197, 201, 210, 220, 239, 254, 258, 260, 270, 277, 281, 298, 299, 300, 301, 302, 305, 313, 320, 326, 327, 337, 339, 342, 344, 347, 351, 359, 363, 367, 369, 370, 383, 386, 392, 393, 399, 407, 411, 431, 432, 433, 434, 439, 441, 460, 465, 466, 467, 468, 469, 472, 473, 476, 477, 479, 480, 481, 482, 483, 485], "typic": [23, 31, 33, 43, 47, 54, 55, 58, 60, 61, 69, 70, 73, 76, 79, 81, 83, 87, 95, 100, 103, 108, 109, 110, 115, 116, 120, 126, 128, 129, 133, 144, 156, 158, 164, 173, 179, 192, 196, 200, 203, 210, 212, 218, 225, 230, 232, 233, 235, 237, 252, 258, 259, 261, 264, 272, 273, 274, 275, 277, 281, 282, 287, 289, 298, 299, 303, 305, 312, 313, 314, 326, 330, 338, 340, 348, 350, 351, 352, 354, 355, 359, 360, 363, 364, 370, 371, 372, 374, 376, 381, 389, 390, 392, 393, 399, 402, 403, 404, 409, 411, 414, 415, 417, 418, 419, 420, 425, 427, 432, 434, 436, 459, 465, 469, 470, 473, 474, 477, 479, 480, 482, 483, 485], "py_reprleav": [23, 54], "pyexc_": 23, "complet": [23, 31, 32, 33, 40, 54, 56, 61, 63, 65, 69, 79, 83, 85, 86, 87, 97, 100, 102, 104, 109, 111, 112, 116, 123, 126, 133, 139, 142, 144, 146, 152, 157, 158, 161, 162, 163, 164, 165, 169, 172, 173, 175, 183, 187, 189, 192, 196, 200, 201, 203, 209, 210, 212, 213, 214, 215, 218, 220, 222, 230, 237, 239, 240, 242, 243, 247, 252, 257, 260, 261, 265, 266, 267, 268, 274, 275, 277, 278, 282, 287, 289, 290, 298, 299, 301, 303, 305, 314, 322, 325, 328, 337, 338, 340, 344, 345, 347, 348, 349, 351, 355, 359, 363, 366, 367, 368, 370, 373, 374, 380, 381, 383, 384, 385, 388, 390, 392, 394, 398, 399, 405, 411, 412, 414, 415, 417, 420, 431, 432, 433, 434, 436, 437, 438, 449, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "pyexc_baseexcept": [23, 54], "baseexcept": [23, 65, 134, 172, 220, 273, 359, 436, 440, 447, 454, 471, 472, 474, 482, 483, 485], "pyexc_arithmeticerror": [23, 54], "arithmeticerror": [23, 65, 192, 220, 454], "pyexc_assertionerror": [23, 54], "assertionerror": [23, 65, 197, 220, 289, 367, 392, 393, 394, 411, 440, 454, 484, 485], "pyexc_attributeerror": [23, 54, 85, 86], "attributeerror": [23, 47, 55, 65, 98, 103, 109, 158, 182, 187, 220, 232, 233, 258, 261, 274, 289, 305, 308, 325, 339, 351, 367, 372, 389, 392, 393, 394, 414, 415, 431, 432, 434, 440, 454, 460, 466, 468, 473, 477, 478, 479, 480, 482, 485], "pyexc_blockingioerror": [23, 54], "blockingioerror": [23, 65, 124, 145, 219, 220, 264, 299, 348, 454, 478, 485], "pyexc_brokenpipeerror": [23, 54], "brokenpipeerror": [23, 65, 142, 219, 220, 339, 454, 478, 485], "buffererror": [23, 65, 220, 305, 454, 485], "pyexc_childprocesserror": [23, 54], "childprocesserror": [23, 65, 219, 220, 454, 478, 485], "pyexc_connectionabortederror": [23, 54], "connectionabortederror": [23, 65, 219, 220, 454, 478], "pyexc_connectionerror": [23, 54], "connectionerror": [23, 65, 220, 249, 447, 454, 478, 480], "pyexc_connectionrefusederror": [23, 54], "connectionrefusederror": [23, 65, 219, 220, 454, 478], "pyexc_connectionreseterror": [23, 54], "connectionreseterror": [23, 65, 142, 219, 220, 249, 454, 478, 485], "pyexc_eoferror": [23, 54], "eoferror": [23, 24, 39, 65, 127, 134, 156, 160, 163, 220, 230, 232, 241, 276, 280, 289, 305, 342, 364, 454, 474], "pyexc_fileexistserror": [23, 54], "fileexistserror": [23, 65, 207, 219, 220, 232, 264, 299, 302, 317, 338, 363, 426, 454, 478, 479, 485], "pyexc_filenotfounderror": [23, 54], "filenotfounderror": [23, 65, 146, 175, 219, 220, 258, 292, 299, 302, 326, 447, 454, 478, 480, 485], "pyexc_floatingpointerror": [23, 54], "floatingpointerror": [23, 65, 220, 454], "pyexc_generatorexit": [23, 54], "generatorexit": [23, 65, 104, 220, 432, 434, 454, 471, 472, 485], "pyexc_importerror": [23, 54], "pyexc_indentationerror": [23, 54], "indentationerror": [23, 65, 96, 220, 454, 466, 485], "pyexc_indexerror": [23, 54], "indexerror": [23, 35, 36, 45, 57, 65, 164, 166, 182, 203, 220, 243, 267, 289, 305, 324, 325, 351, 352, 385, 393, 432, 434, 440, 453, 454, 466, 477, 485], "pyexc_interruptederror": [23, 54], "interruptederror": [23, 65, 219, 220, 232, 299, 334, 339, 344, 454, 478, 480, 485], "pyexc_isadirectoryerror": [23, 54], "isadirectoryerror": [23, 65, 219, 220, 299, 454, 478, 485], "pyexc_keyerror": [23, 33, 54], "pyexc_keyboardinterrupt": [23, 54], "pyexc_lookuperror": [23, 54], "pyexc_modulenotfounderror": [23, 54], "modulenotfounderror": [23, 65, 220, 258, 436, 481, 482, 485], "pyexc_nameerror": [23, 54], "nameerror": [23, 65, 182, 220, 257, 258, 303, 433, 434, 440, 447, 453, 454, 466, 467, 468, 471, 485], "pyexc_notadirectoryerror": [23, 54], "notadirectoryerror": [23, 65, 219, 220, 299, 454, 478, 485], "pyexc_notimplementederror": [23, 54], "notimplementederror": [23, 65, 129, 139, 174, 189, 207, 220, 233, 250, 257, 258, 273, 289, 299, 302, 324, 341, 348, 390, 409, 426, 454, 479, 481, 485], "pyexc_oserror": [23, 54], "pyexc_overflowerror": [23, 54], "overflowerror": [23, 37, 45, 65, 121, 163, 165, 189, 192, 200, 220, 232, 281, 310, 344, 351, 370, 371, 432, 454, 468, 469, 472, 473, 475, 476, 478, 479, 485], "pyexc_permissionerror": [23, 54], "permissionerror": [23, 65, 219, 220, 258, 299, 328, 346, 365, 367, 454, 478, 481, 485], "pyexc_processlookuperror": [23, 54], "processlookuperror": [23, 65, 219, 220, 328, 454, 478], "pyexc_recursionerror": [23, 54, 480], "pyexc_referenceerror": [23, 54], "referenceerror": [23, 65, 220, 454, 467, 468], "runtimeerror": [23, 65, 69, 104, 112, 121, 127, 133, 134, 138, 142, 143, 144, 172, 175, 176, 220, 225, 232, 264, 267, 289, 299, 302, 325, 342, 351, 355, 359, 370, 390, 410, 426, 432, 434, 440, 447, 454, 469, 470, 471, 473, 478, 480, 481, 482, 483, 485], "pyexc_stopasynciter": [23, 54], "stopasynciter": [23, 65, 97, 197, 220, 232, 393, 431, 432, 434, 440, 485], "pyexc_stopiter": [23, 54], "stopiter": [23, 60, 65, 85, 97, 104, 119, 166, 220, 232, 267, 280, 289, 351, 393, 431, 432, 434, 440, 444, 454, 468, 469, 471, 472, 476, 481, 482, 485], "pyexc_syntaxerror": [23, 54, 435], "pyexc_systemexit": [23, 54], "pyexc_taberror": [23, 54], "taberror": [23, 65, 96, 220, 439, 454, 466], "pyexc_timeouterror": [23, 54], "timeouterror": [23, 65, 131, 134, 144, 170, 172, 219, 220, 289, 342, 344, 454, 476, 478, 485], "pyexc_unboundlocalerror": [23, 54], "unboundlocalerror": [23, 65, 220, 433, 454, 466, 485], "pyexc_unicodedecodeerror": [23, 54], "pyexc_unicodeerror": [23, 54], "pyexc_valueerror": [23, 54, 83, 473], "pyexc_zerodivisionerror": [23, 54, 83], "zerodivisionerror": [23, 65, 102, 109, 189, 192, 220, 228, 289, 339, 434, 440, 447, 454, 455, 469, 475, 477, 480, 484, 485], "3151": [23, 65, 220, 328, 334, 344, 469, 486], "alias": [23, 65, 69, 126, 157, 164, 193, 202, 218, 220, 237, 272, 303, 309, 344, 381, 388, 391, 439, 444, 460, 465, 467, 469, 472, 476, 477, 478, 479, 481, 484, 485], "pyexc_environmenterror": [23, 54], "pyexc_ioerror": [23, 54, 83], "separ": [23, 31, 32, 52, 54, 56, 60, 61, 65, 69, 70, 72, 74, 78, 79, 87, 89, 94, 95, 98, 100, 102, 108, 109, 110, 111, 113, 114, 116, 118, 122, 126, 132, 134, 138, 141, 144, 152, 157, 158, 161, 162, 164, 172, 173, 175, 181, 182, 183, 184, 189, 192, 196, 200, 203, 208, 209, 212, 215, 218, 220, 227, 232, 233, 237, 252, 254, 255, 258, 264, 265, 268, 272, 273, 274, 275, 276, 277, 282, 289, 294, 298, 299, 300, 303, 308, 309, 313, 319, 320, 325, 330, 337, 340, 342, 344, 345, 347, 348, 350, 351, 352, 355, 366, 367, 369, 370, 372, 373, 374, 377, 384, 392, 393, 394, 398, 399, 402, 404, 406, 407, 411, 426, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 445, 456, 459, 460, 465, 466, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "preprocessor": [23, 40, 54, 65, 69, 72, 81, 100, 116, 337, 425, 462, 466, 473, 485], "ms_window": [23, 32], "pyexc_byteswarn": [23, 54], "byteswarn": [23, 32, 65, 220, 404, 454, 482, 485], "pyexc_deprecationwarn": [23, 54], "deprecationwarn": [23, 65, 111, 118, 174, 194, 218, 220, 325, 354, 367, 392, 404, 432, 436, 439, 454, 459, 467, 469, 473, 476, 477, 479, 480, 481, 483, 485, 486], "pyexc_futurewarn": [23, 54], "futurewarn": [23, 65, 220, 325, 404, 454, 469, 470, 473, 482, 485], "pyexc_importwarn": [23, 54], "importwarn": [23, 65, 194, 220, 392, 404, 436, 454, 471, 476, 481, 485], "pyexc_pendingdeprecationwarn": [23, 54], "pendingdeprecationwarn": [23, 65, 118, 194, 220, 392, 404, 454, 469, 472, 473, 480, 481, 482, 483, 484, 485], "pyexc_resourcewarn": [23, 54], "runtimewarn": [23, 43, 65, 132, 220, 344, 359, 392, 404, 454, 477, 483], "pyexc_syntaxwarn": [23, 54], "syntaxwarn": [23, 65, 220, 367, 404, 439, 454, 469, 481, 483, 485], "pyexc_unicodewarn": [23, 54], "unicodewarn": [23, 65, 220, 404, 454, 471, 477], "pyexc_userwarn": [23, 54], "userwarn": [23, 65, 220, 236, 367, 404, 454, 485], "minim": [24, 43, 59, 65, 69, 73, 79, 83, 86, 94, 100, 102, 109, 120, 128, 147, 158, 192, 196, 200, 221, 242, 247, 255, 258, 260, 265, 279, 298, 305, 311, 325, 330, 339, 341, 344, 346, 355, 367, 369, 390, 399, 413, 441, 465, 466, 471, 481, 485], "emul": [24, 31, 65, 86, 89, 95, 103, 116, 145, 163, 165, 183, 187, 195, 200, 222, 257, 267, 272, 277, 289, 298, 300, 308, 315, 326, 338, 339, 355, 359, 364, 431, 468, 469, 472, 477, 478, 481, 483, 485], "reli": [24, 54, 83, 86, 98, 103, 109, 110, 112, 139, 146, 158, 167, 187, 189, 218, 232, 257, 258, 259, 261, 273, 282, 289, 298, 299, 305, 308, 336, 338, 359, 367, 369, 370, 371, 392, 394, 425, 431, 432, 433, 465, 466, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "io": [24, 31, 32, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 89, 95, 97, 110, 116, 124, 130, 131, 132, 133, 141, 144, 156, 164, 170, 175, 193, 194, 196, 203, 220, 222, 225, 226, 232, 241, 249, 252, 258, 260, 268, 276, 277, 294, 299, 305, 314, 315, 345, 348, 351, 355, 359, 363, 365, 367, 383, 390, 393, 403, 411, 415, 425, 426, 429, 432, 459, 463, 471, 472, 473, 474, 475, 476, 479, 481, 484, 485, 486], "unbuff": [24, 31, 264, 355, 359, 459, 485], "meant": [24, 33, 47, 58, 76, 108, 109, 110, 120, 128, 139, 144, 147, 164, 172, 220, 237, 243, 247, 258, 314, 344, 367, 374, 390, 399, 426, 435, 465, 471, 472, 473, 476, 477, 478, 479, 480, 482, 483, 485], "advis": [24, 108, 175, 234, 255, 289, 294, 299, 370, 404, 429, 430, 432, 434, 477, 483, 485], "pyfile_fromfd": [24, 54], "newlin": [24, 65, 69, 89, 97, 111, 124, 126, 128, 149, 152, 153, 156, 163, 165, 181, 183, 196, 200, 203, 214, 225, 232, 241, 254, 258, 264, 268, 270, 271, 273, 275, 276, 277, 284, 294, 302, 305, 313, 325, 337, 344, 345, 351, 355, 361, 365, 369, 371, 372, 382, 383, 385, 386, 398, 404, 415, 423, 425, 426, 431, 435, 439, 441, 453, 455, 456, 459, 467, 470, 471, 472, 473, 474, 476, 479, 481, 482, 483, 485, 486], "closefd": [24, 194, 232, 264, 289, 474, 485], "open": [24, 31, 32, 39, 63, 65, 69, 70, 73, 76, 83, 88, 94, 97, 100, 102, 104, 108, 110, 111, 114, 116, 118, 123, 124, 125, 126, 139, 141, 145, 146, 148, 151, 155, 156, 158, 162, 164, 166, 173, 175, 181, 183, 189, 190, 194, 195, 196, 207, 214, 215, 219, 220, 221, 222, 225, 226, 230, 232, 237, 241, 247, 249, 250, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 286, 287, 289, 294, 299, 300, 301, 302, 304, 305, 307, 308, 310, 311, 315, 319, 320, 326, 328, 332, 334, 336, 337, 339, 341, 342, 344, 347, 348, 349, 350, 351, 355, 356, 357, 359, 361, 363, 364, 365, 367, 370, 373, 374, 380, 381, 383, 385, 388, 390, 393, 394, 399, 401, 405, 407, 409, 411, 415, 417, 418, 420, 423, 425, 426, 429, 430, 432, 439, 442, 444, 447, 450, 454, 455, 456, 459, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "kept": [24, 43, 95, 100, 109, 120, 173, 182, 190, 192, 202, 206, 215, 220, 221, 232, 250, 251, 254, 257, 264, 267, 275, 277, 317, 318, 340, 345, 348, 350, 390, 393, 406, 428, 440, 466, 468, 473, 474, 476, 477, 478, 479, 484, 485], "backward": [24, 31, 54, 61, 63, 65, 78, 90, 97, 100, 108, 109, 126, 129, 145, 150, 173, 183, 189, 200, 201, 203, 212, 214, 215, 220, 229, 235, 243, 252, 254, 255, 258, 264, 273, 274, 277, 299, 300, 301, 305, 308, 314, 320, 325, 328, 338, 344, 348, 351, 355, 362, 367, 371, 385, 388, 390, 392, 398, 399, 401, 423, 434, 436, 439, 440, 444, 465, 466, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "comprehens": [24, 65, 94, 95, 97, 100, 118, 156, 197, 242, 261, 270, 305, 351, 374, 433, 434, 435, 439, 444, 449, 461, 470, 471, 473, 474, 476, 478, 479, 480, 482, 483, 484, 485, 486], "mix": [24, 31, 40, 99, 109, 110, 116, 122, 129, 145, 173, 189, 192, 211, 212, 213, 214, 218, 225, 232, 235, 265, 289, 295, 301, 325, 345, 348, 350, 351, 360, 367, 390, 398, 432, 439, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 485], "unexpect": [24, 27, 108, 109, 176, 200, 212, 215, 230, 237, 273, 281, 294, 325, 328, 339, 342, 344, 348, 350, 367, 392, 394, 399, 404, 426, 431, 432, 434, 439, 444, 447, 465, 468, 473, 476, 478, 480, 482, 483, 484, 485], "pyobject_asfiledescriptor": [24, 54], "fileno": [24, 56, 65, 94, 109, 124, 145, 148, 156, 170, 194, 222, 225, 226, 249, 262, 264, 284, 289, 299, 301, 334, 335, 339, 344, 345, 348, 357, 364, 365, 366, 374, 468, 471, 479, 485], "pyfile_getlin": [24, 54], "readlin": [24, 32, 63, 65, 69, 78, 89, 94, 104, 114, 124, 133, 141, 142, 146, 149, 151, 158, 162, 164, 173, 176, 194, 196, 211, 214, 220, 225, 230, 232, 255, 260, 262, 264, 274, 284, 299, 302, 303, 305, 321, 337, 345, 368, 374, 383, 386, 393, 399, 403, 425, 426, 432, 442, 444, 447, 450, 451, 452, 459, 460, 466, 467, 468, 469, 471, 472, 473, 476, 477, 479, 482, 485], "greater": [24, 31, 32, 36, 37, 43, 53, 60, 61, 65, 86, 102, 108, 109, 113, 114, 121, 139, 150, 152, 154, 161, 183, 189, 192, 196, 203, 215, 216, 233, 237, 249, 255, 265, 270, 273, 275, 281, 299, 303, 328, 340, 342, 350, 351, 359, 367, 370, 381, 382, 386, 388, 392, 411, 414, 428, 432, 439, 440, 466, 468, 469, 470, 471, 480, 481, 482, 484, 485], "partial": [24, 32, 65, 98, 100, 104, 114, 115, 120, 124, 129, 133, 134, 135, 141, 183, 187, 193, 204, 213, 214, 231, 232, 255, 258, 260, 261, 262, 267, 275, 276, 279, 281, 290, 328, 330, 344, 345, 348, 351, 355, 413, 417, 466, 469, 470, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 486], "less": [24, 33, 37, 53, 56, 60, 61, 65, 69, 83, 86, 95, 100, 109, 111, 113, 114, 116, 118, 119, 139, 154, 156, 158, 160, 164, 172, 183, 189, 192, 193, 197, 200, 203, 222, 233, 235, 239, 241, 242, 251, 254, 259, 264, 265, 270, 273, 276, 281, 284, 289, 290, 299, 303, 305, 306, 313, 314, 325, 338, 339, 344, 347, 348, 350, 351, 352, 355, 359, 367, 370, 371, 374, 380, 381, 382, 385, 392, 399, 404, 414, 431, 432, 434, 440, 467, 468, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 483, 484, 485], "pyfile_setopencodehook": [24, 264], "py_opencodehookfunct": 24, "open_cod": [24, 65, 124, 264, 485], "userdata": [24, 56], "pyunicodeobject": [24, 60, 61, 100, 476], "hook": [24, 29, 30, 32, 56, 63, 65, 97, 103, 106, 121, 148, 162, 182, 189, 194, 215, 223, 225, 232, 249, 257, 259, 260, 286, 308, 313, 314, 321, 337, 351, 359, 368, 370, 386, 389, 393, 403, 404, 427, 432, 434, 440, 442, 459, 460, 466, 468, 471, 473, 476, 478, 480, 481, 482, 484, 485, 486], "runtim": [24, 31, 33, 40, 49, 56, 63, 65, 69, 83, 85, 86, 87, 95, 97, 98, 100, 108, 114, 116, 119, 148, 169, 173, 182, 188, 194, 220, 232, 258, 260, 274, 275, 298, 300, 317, 347, 351, 355, 359, 374, 386, 390, 393, 404, 408, 415, 425, 428, 431, 432, 433, 436, 440, 444, 459, 460, 465, 467, 469, 473, 474, 476, 478, 479, 480, 481, 484, 485], "avoid": [24, 31, 32, 33, 40, 58, 60, 65, 78, 82, 83, 85, 86, 95, 98, 100, 102, 104, 108, 110, 111, 112, 113, 114, 119, 122, 126, 133, 138, 139, 142, 144, 154, 164, 166, 172, 173, 175, 182, 183, 189, 192, 217, 220, 222, 232, 234, 237, 243, 249, 252, 255, 261, 265, 268, 271, 274, 275, 277, 281, 284, 289, 290, 295, 298, 299, 305, 320, 325, 327, 338, 339, 341, 344, 347, 349, 350, 351, 355, 359, 363, 367, 369, 370, 371, 372, 374, 380, 389, 392, 394, 406, 410, 413, 414, 415, 417, 421, 431, 432, 434, 435, 436, 439, 440, 460, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "frozen": [24, 29, 32, 65, 182, 232, 257, 258, 289, 308, 321, 359, 386, 432, 436, 465, 469, 479, 482, 485], "py_initi": [24, 29, 31, 32, 33, 54, 56, 82, 83, 96, 465, 476, 477, 482, 484, 485], "audit": [24, 31, 56, 65, 85, 106, 127, 148, 182, 191, 217, 222, 230, 232, 234, 238, 249, 255, 264, 280, 284, 288, 294, 299, 302, 303, 305, 311, 315, 321, 328, 338, 339, 342, 344, 347, 351, 355, 359, 361, 364, 389, 399, 407, 409, 432, 440, 454, 459, 469, 476, 485], "event": [24, 29, 31, 40, 56, 63, 65, 69, 83, 85, 91, 102, 106, 108, 127, 129, 130, 131, 132, 135, 136, 138, 139, 141, 142, 144, 145, 148, 150, 170, 182, 183, 189, 191, 195, 217, 222, 229, 230, 232, 234, 238, 243, 249, 255, 260, 264, 266, 273, 275, 280, 284, 287, 288, 289, 294, 299, 302, 303, 305, 311, 314, 315, 320, 328, 334, 335, 338, 341, 342, 344, 347, 348, 349, 351, 355, 357, 359, 361, 363, 364, 367, 373, 376, 389, 392, 399, 406, 407, 409, 414, 415, 416, 417, 418, 419, 420, 421, 430, 432, 434, 440, 450, 456, 459, 465, 466, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "setopencodehook": [24, 148], "pyfile_writeobject": [24, 54], "py_print_raw": [24, 47], "pyfile_writestr": [24, 54], "pyfloatobject": [25, 86], "pyfloat_typ": [25, 54], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 54], "pyfloat_fromdoubl": [25, 54], "pyfloat_asdoubl": [25, 54, 483], "pyfloat": 25, "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 54, 472], "structseq": [25, 473, 485], "minimum": [25, 32, 33, 40, 54, 73, 86, 100, 103, 109, 110, 117, 121, 139, 147, 161, 182, 183, 192, 204, 267, 281, 299, 334, 340, 348, 350, 351, 352, 359, 367, 370, 377, 381, 388, 392, 393, 460, 468, 469, 472, 476, 477, 478, 479, 481, 482, 485], "thin": [25, 56, 65, 145, 233, 281, 293, 312, 339, 373, 374], "pyfloat_getmax": [25, 54, 472], "dbl_max": [25, 359], "pyfloat_getmin": [25, 54, 472], "dbl_min": [25, 359], "pyfunctionobject": [26, 485], "pyfunction_typ": 26, "functiontyp": [26, 65, 128, 188, 389, 476, 485], "pyfunction_check": 26, "pyfunction_new": 26, "annot": [26, 65, 95, 97, 100, 105, 119, 128, 187, 193, 197, 233, 255, 260, 261, 272, 306, 321, 358, 367, 384, 390, 406, 431, 432, 434, 435, 449, 474, 476, 477, 478, 480, 483, 484, 485], "closur": [26, 55, 63, 86, 133, 175, 176, 197, 258, 261, 298, 351, 432, 478, 481, 485], "pyfunction_newwithqualnam": 26, "pyfunction_getcod": 26, "pyfunction_getglob": 26, "pyfunction_getmodul": 26, "pyfunction_getdefault": 26, "pyfunction_setdefault": 26, "pyfunction_getclosur": 26, "pyfunction_setclosur": 26, "pyfunction_getannot": [26, 485], "pyfunction_setannot": 26, "involv": [27, 40, 43, 60, 69, 78, 83, 86, 100, 128, 161, 173, 175, 183, 192, 200, 220, 233, 234, 239, 250, 289, 295, 298, 305, 314, 338, 347, 348, 351, 354, 367, 394, 399, 416, 432, 434, 436, 440, 466, 473, 476, 479, 480, 482, 483, 485], "circular": [27, 31, 33, 83, 86, 95, 257, 268, 388, 394, 432, 467, 480, 482, 485], "atom": [27, 65, 94, 234, 289, 299, 322, 325, 344, 351, 370, 371, 435, 437, 473, 474, 478, 485], "tp_flag": [27, 58, 60, 85, 86, 197, 472, 484, 485], "py_tpflags_have_gc": [27, 48, 58, 60, 65, 86, 485], "tp_travers": [27, 58, 60, 85, 86, 234, 484, 485], "tp_clear": [27, 43, 60, 85, 86], "conform": [27, 54, 60, 65, 108, 133, 152, 158, 173, 189, 192, 208, 210, 215, 216, 254, 257, 258, 262, 273, 279, 302, 305, 320, 359, 390, 398, 415, 417, 423, 429, 430, 432, 460, 470, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485], "pyobject_gc_new": [27, 60, 468, 483], "pyobject_gc_newvar": [27, 60, 468, 483], "pyobject_gc_track": [27, 54, 468, 485], "pyobject_gc_untrack": [27, 54, 60, 85, 86, 468, 485], "pyobject_gc_del": [27, 54, 60, 468, 483, 485], "pytype_readi": [27, 43, 54, 58, 60, 85, 86, 485], "indirect": [27, 47, 55, 61, 69, 74, 83, 95, 103, 110, 182, 220, 258, 299, 313, 320, 355, 359, 406, 430, 432, 433, 434, 436, 474, 479, 482, 483, 485], "pytype_fromspecwithbas": [27, 54, 58, 60, 476, 485], "pytype_fromspec": [27, 43, 54, 55, 58, 60, 86, 483, 484, 485], "popul": [27, 33, 43, 65, 69, 108, 109, 120, 126, 128, 189, 214, 273, 290, 305, 324, 330, 350, 351, 357, 389, 404, 411, 415, 417, 432, 436, 465, 469, 476, 481, 485], "child": [27, 31, 56, 95, 108, 109, 126, 128, 138, 139, 142, 166, 219, 220, 234, 255, 258, 284, 289, 299, 302, 315, 320, 328, 334, 339, 344, 345, 355, 374, 381, 393, 394, 414, 415, 417, 426, 432, 466, 470, 471, 472, 473, 477, 478, 479, 481, 482, 483, 484, 485], "analog": [27, 36, 61, 69, 70, 85, 95, 109, 192, 261, 273, 274, 281, 289, 305, 369, 388, 432, 434, 436, 468, 470, 471, 473, 477, 479, 483, 485], "pyobject_gc_res": 27, "becom": [27, 31, 32, 33, 60, 61, 63, 69, 83, 94, 95, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 118, 119, 120, 133, 139, 145, 147, 164, 181, 183, 200, 203, 209, 212, 218, 232, 239, 243, 254, 261, 264, 267, 289, 298, 299, 300, 303, 305, 314, 317, 324, 325, 334, 335, 337, 339, 348, 351, 352, 355, 359, 370, 374, 381, 393, 394, 399, 406, 426, 431, 432, 433, 434, 440, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "near": [27, 100, 108, 110, 112, 145, 161, 173, 190, 192, 196, 254, 275, 281, 289, 299, 303, 350, 354, 388, 432, 440, 468, 469, 471, 472, 473, 474, 477, 480, 485], "pyobject_is_gc": [27, 60, 85, 484, 485], "pyobject_gc_istrack": [27, 54, 484, 485], "gc": [27, 43, 58, 60, 65, 83, 86, 88, 95, 97, 106, 148, 260, 261, 321, 359, 367, 372, 386, 406, 415, 432, 456, 460, 466, 469, 471, 473, 477, 485], "is_track": [27, 65, 234, 321, 473], "pyobject_gc_isfin": [27, 54, 484, 485], "final": [27, 30, 32, 33, 43, 47, 56, 58, 60, 65, 69, 78, 83, 84, 86, 94, 95, 100, 104, 108, 109, 110, 111, 112, 113, 116, 119, 121, 122, 128, 133, 139, 143, 144, 147, 150, 164, 182, 187, 188, 192, 193, 194, 196, 197, 200, 204, 210, 218, 220, 234, 242, 252, 257, 258, 261, 264, 267, 271, 273, 277, 289, 298, 299, 302, 303, 305, 314, 317, 320, 321, 325, 338, 340, 345, 347, 348, 350, 352, 359, 363, 366, 367, 369, 370, 372, 374, 381, 383, 385, 386, 388, 389, 390, 392, 393, 394, 403, 404, 410, 413, 418, 426, 431, 432, 433, 434, 435, 436, 439, 440, 447, 450, 460, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 486], "is_fin": [27, 31, 65, 234, 321, 359, 454, 480, 483, 484, 485], "again": [27, 31, 43, 60, 69, 70, 73, 78, 79, 83, 85, 86, 94, 95, 102, 104, 109, 111, 112, 113, 114, 115, 128, 133, 139, 152, 154, 158, 173, 176, 182, 183, 189, 194, 207, 218, 219, 221, 228, 233, 239, 250, 254, 257, 267, 273, 275, 281, 284, 288, 289, 298, 299, 301, 303, 305, 314, 319, 334, 337, 339, 342, 347, 348, 351, 355, 359, 367, 370, 374, 380, 381, 388, 391, 393, 394, 399, 404, 413, 417, 418, 428, 432, 434, 436, 439, 440, 445, 447, 465, 466, 468, 469, 472, 474, 476, 477, 478, 482, 483, 485], "_pyobject_gc_track": [27, 483, 485], "_pyobject_gc_untrack": [27, 483, 485], "visitproc": [27, 54, 60, 86, 484], "visitor": [27, 128], "travers": [27, 29, 43, 49, 60, 65, 86, 104, 118, 128, 169, 190, 203, 212, 220, 258, 273, 286, 299, 308, 351, 381, 392, 393, 411, 416, 417, 426, 436, 440, 466, 468, 469, 471, 472, 473, 480, 483, 484, 485], "traverseproc": [27, 43, 54, 60, 85, 86], "visit": [27, 60, 65, 86, 104, 128, 189, 234, 270, 299, 319, 338, 349, 419, 465, 466, 468, 469, 472, 478, 484, 485], "simplifi": [27, 29, 31, 40, 63, 103, 104, 111, 113, 115, 129, 164, 175, 189, 190, 204, 208, 223, 233, 258, 261, 289, 325, 344, 345, 380, 381, 383, 390, 406, 414, 431, 439, 465, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "py_visit": [27, 60, 86, 484], "my_travers": 27, "noddi": 27, "foo": [27, 69, 72, 73, 76, 78, 88, 89, 95, 96, 97, 98, 99, 100, 108, 109, 111, 115, 116, 122, 126, 128, 144, 158, 162, 173, 182, 200, 203, 207, 218, 235, 250, 254, 257, 258, 261, 268, 272, 273, 274, 278, 289, 294, 297, 298, 299, 300, 302, 305, 308, 314, 317, 325, 340, 347, 351, 363, 367, 390, 392, 393, 394, 409, 411, 415, 416, 417, 426, 427, 431, 434, 436, 439, 440, 445, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485], "bar": [27, 69, 72, 73, 78, 95, 97, 100, 108, 109, 111, 126, 128, 162, 173, 182, 183, 207, 218, 235, 250, 254, 257, 258, 268, 273, 274, 289, 294, 297, 298, 299, 300, 302, 303, 308, 314, 317, 319, 325, 340, 347, 351, 363, 367, 374, 379, 381, 390, 392, 393, 394, 411, 426, 427, 429, 431, 436, 438, 439, 440, 445, 466, 472, 485], "inquiri": [27, 43, 54, 60, 85, 86, 264, 392], "drop": [27, 60, 65, 69, 86, 94, 95, 103, 108, 110, 114, 119, 139, 166, 200, 219, 232, 257, 258, 260, 261, 267, 275, 289, 311, 327, 331, 348, 351, 359, 369, 373, 374, 381, 398, 466, 467, 468, 470, 471, 472, 474, 477, 479, 480, 485], "pygc_collect": [27, 54, 484, 485], "uncondit": [27, 121, 254, 258, 289, 294, 299, 302, 303, 340, 392, 394, 432, 439, 459, 473, 474, 477, 478, 479, 480, 482, 484, 485], "unreach": [27, 33, 219, 234, 432, 482, 484, 485], "pygc_en": [27, 54, 476, 485], "pygc_dis": [27, 54, 476, 485], "pygc_isen": [27, 54, 476, 485], "queri": [27, 30, 65, 73, 94, 100, 104, 109, 111, 114, 124, 139, 141, 158, 164, 175, 212, 226, 237, 252, 258, 259, 261, 287, 302, 304, 311, 334, 357, 363, 367, 374, 380, 381, 390, 398, 399, 409, 411, 414, 423, 436, 459, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "isen": [27, 65, 234, 321], "pygen_new": 28, "pygen_newwithqualnam": 28, "pygenobject": 28, "pygen_typ": 28, "pygen_check": 28, "pygen_checkexact": 28, "pyimport_importmoduleex": [29, 478], "submodul": [29, 60, 65, 97, 122, 164, 190, 200, 232, 245, 257, 258, 308, 330, 348, 384, 413, 426, 440, 459, 471, 474, 475, 476, 479, 482, 485], "fromlist": [29, 65, 127, 188, 197, 232, 257, 258, 485], "top": [29, 31, 33, 40, 65, 69, 76, 78, 83, 94, 95, 100, 102, 104, 106, 108, 109, 110, 111, 115, 116, 121, 124, 126, 128, 144, 148, 158, 159, 164, 173, 176, 182, 183, 185, 191, 195, 196, 197, 200, 214, 218, 232, 233, 237, 243, 250, 254, 255, 258, 259, 260, 261, 262, 264, 272, 282, 291, 299, 305, 308, 310, 311, 314, 318, 319, 320, 321, 330, 348, 349, 358, 359, 367, 370, 373, 374, 376, 380, 381, 388, 389, 392, 393, 417, 423, 424, 426, 431, 433, 436, 437, 439, 440, 444, 454, 455, 459, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485], "unfortun": [29, 94, 98, 102, 104, 109, 110, 111, 115, 158, 164, 289, 311, 314, 336, 344, 348, 363, 374, 394, 467, 470, 472, 475, 481, 484], "fact": [29, 31, 33, 61, 70, 72, 73, 76, 78, 83, 95, 104, 108, 111, 112, 115, 116, 133, 157, 173, 182, 192, 200, 213, 217, 230, 232, 239, 258, 273, 285, 298, 305, 314, 351, 363, 374, 388, 390, 399, 411, 425, 432, 434, 436, 438, 465, 466, 467, 472, 478, 479, 480, 485], "subpackag": [29, 60, 81, 97, 258, 287, 359, 392, 426, 436, 454, 466], "__all__": [29, 232, 254, 285, 367, 440, 454, 467, 481, 485], "absolut": [29, 31, 32, 45, 60, 65, 78, 82, 86, 94, 108, 116, 119, 128, 133, 147, 150, 158, 160, 161, 162, 192, 197, 200, 220, 232, 237, 238, 258, 259, 264, 274, 275, 276, 281, 284, 298, 299, 300, 302, 330, 337, 338, 342, 347, 351, 352, 359, 363, 371, 374, 377, 386, 388, 398, 403, 409, 419, 426, 428, 429, 434, 436, 440, 450, 454, 459, 460, 465, 466, 470, 472, 473, 474, 477, 478, 479, 480, 482, 484, 485, 486], "alia": [29, 38, 56, 65, 69, 78, 85, 95, 97, 109, 110, 128, 133, 139, 142, 160, 164, 167, 182, 184, 202, 204, 212, 218, 220, 225, 235, 237, 250, 260, 261, 264, 270, 289, 293, 298, 299, 303, 320, 328, 334, 335, 339, 344, 347, 348, 355, 364, 370, 381, 388, 390, 392, 407, 409, 410, 423, 426, 432, 433, 460, 474, 476, 479, 481, 482, 484, 485], "switch": [29, 31, 33, 61, 65, 85, 94, 100, 112, 114, 115, 116, 117, 118, 139, 142, 164, 200, 217, 232, 237, 243, 250, 252, 254, 298, 311, 325, 328, 330, 351, 352, 359, 388, 393, 416, 436, 445, 454, 459, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 484, 485], "behaviour": [29, 31, 33, 47, 60, 65, 78, 79, 94, 95, 104, 108, 109, 111, 116, 133, 172, 175, 195, 199, 220, 222, 224, 250, 261, 264, 272, 273, 274, 275, 289, 298, 299, 302, 305, 317, 325, 326, 334, 337, 339, 341, 344, 345, 347, 350, 351, 355, 359, 369, 388, 393, 394, 398, 399, 404, 417, 420, 423, 425, 432, 434, 436, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 481, 482, 485], "best": [29, 33, 52, 61, 65, 70, 78, 94, 97, 100, 102, 104, 105, 108, 109, 110, 116, 147, 180, 189, 192, 194, 196, 200, 201, 202, 212, 220, 230, 232, 233, 237, 241, 242, 243, 249, 254, 255, 257, 261, 273, 276, 289, 294, 298, 299, 311, 313, 314, 337, 342, 344, 347, 351, 359, 363, 372, 374, 380, 388, 390, 393, 407, 429, 432, 436, 460, 465, 466, 470, 471, 474, 476, 477, 479, 480, 481, 484, 485], "__import__": [29, 65, 197, 232, 257, 258, 260, 274, 286, 305, 432, 436, 454, 472, 475, 478, 481, 484, 485], "incomplet": [29, 61, 65, 124, 152, 163, 164, 186, 189, 247, 254, 257, 267, 274, 291, 320, 334, 426, 428, 469, 470, 473, 474, 478, 479, 485], "pyimport_importmodulelevelobject": [29, 54], "pyimport_importmodulelevel": [29, 54, 478], "pyimport_import": [29, 54, 82, 472], "higher": [29, 31, 53, 65, 94, 104, 106, 108, 109, 112, 121, 133, 145, 146, 152, 172, 175, 183, 192, 197, 209, 211, 230, 231, 237, 249, 260, 264, 267, 273, 274, 275, 276, 285, 287, 288, 289, 294, 299, 305, 311, 331, 338, 344, 347, 348, 351, 357, 359, 363, 364, 370, 372, 386, 390, 417, 428, 467, 468, 471, 472, 476, 477, 478, 479, 482, 485], "__builtins__": [29, 155, 232, 261, 433, 454, 474, 476, 485], "instal": [29, 31, 32, 33, 40, 54, 65, 67, 70, 72, 73, 74, 75, 76, 79, 81, 82, 86, 89, 94, 95, 102, 106, 110, 115, 117, 118, 120, 138, 150, 169, 190, 194, 198, 219, 221, 237, 253, 254, 258, 259, 260, 267, 273, 275, 282, 283, 317, 321, 326, 339, 340, 347, 348, 351, 355, 357, 359, 366, 374, 380, 381, 386, 388, 392, 399, 403, 404, 409, 411, 425, 430, 436, 457, 459, 462, 463, 464, 467, 468, 469, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486], "environ": [29, 31, 32, 33, 40, 60, 61, 63, 65, 67, 69, 70, 78, 94, 95, 97, 103, 108, 109, 110, 114, 115, 116, 117, 124, 133, 158, 164, 166, 169, 182, 183, 188, 192, 194, 198, 217, 221, 232, 235, 237, 242, 254, 257, 259, 260, 262, 264, 272, 274, 298, 300, 301, 303, 305, 312, 314, 315, 317, 319, 321, 330, 331, 338, 344, 345, 348, 351, 355, 359, 363, 367, 371, 374, 384, 386, 392, 393, 395, 399, 404, 407, 409, 414, 424, 432, 433, 436, 441, 442, 452, 457, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 482, 483, 484, 485, 486], "pyimport_reloadmodul": [29, 54, 485], "reload": [29, 65, 95, 118, 250, 254, 257, 258, 286, 357, 359, 367, 386, 436, 454, 469, 474, 479, 482, 485], "pyimport_addmoduleobject": [29, 54], "pyimport_addmodul": [29, 54, 83], "pyimport_execcodemodul": [29, 54], "danger": [29, 33, 56, 95, 289, 298, 299, 348, 393, 438, 467, 470, 471], "know": [29, 31, 33, 56, 60, 61, 69, 72, 78, 83, 85, 86, 87, 95, 100, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 123, 126, 138, 145, 158, 161, 167, 181, 182, 184, 187, 196, 200, 202, 207, 208, 215, 230, 243, 250, 258, 265, 272, 274, 275, 277, 278, 289, 298, 299, 336, 338, 341, 344, 348, 350, 351, 359, 374, 381, 386, 388, 393, 399, 404, 409, 411, 420, 423, 425, 426, 429, 436, 438, 440, 465, 466, 467, 468, 471, 472, 473, 478, 479, 481, 485], "unknown": [29, 31, 61, 65, 98, 111, 128, 147, 196, 200, 203, 206, 208, 209, 215, 218, 232, 252, 262, 282, 294, 298, 299, 310, 313, 325, 349, 350, 359, 370, 371, 386, 390, 399, 402, 420, 445, 468, 469, 473, 477, 481, 482, 485], "probabl": [29, 31, 33, 53, 69, 70, 72, 73, 76, 78, 83, 85, 89, 95, 100, 102, 107, 109, 110, 111, 112, 116, 145, 149, 164, 165, 182, 189, 200, 207, 220, 237, 243, 289, 299, 303, 306, 314, 324, 342, 344, 345, 347, 348, 350, 359, 372, 393, 399, 402, 409, 410, 411, 419, 438, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478], "damag": [29, 305, 363, 390, 430], "author": [29, 67, 69, 70, 73, 78, 81, 83, 87, 104, 108, 111, 115, 116, 117, 133, 164, 166, 199, 200, 220, 242, 259, 275, 295, 299, 313, 347, 348, 392, 399, 411, 423, 430, 457, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 479, 480, 485], "__spec__": [29, 65, 188, 258, 330, 389, 454, 476, 479, 481, 482, 485], "__loader__": [29, 43, 65, 188, 232, 257, 258, 271, 330, 389, 436, 454, 476, 478, 479, 482, 485], "spec": [29, 43, 58, 65, 70, 72, 97, 113, 243, 246, 251, 258, 261, 268, 330, 348, 359, 381, 393, 394, 398, 423, 427, 469, 479, 480, 481, 482, 483, 484, 485], "loader": [29, 65, 97, 175, 182, 200, 257, 258, 259, 271, 286, 308, 367, 386, 389, 392, 417, 425, 427, 469, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "sourcefileload": [29, 65, 258, 286, 478, 481, 485], "__file__": [29, 43, 65, 99, 109, 120, 194, 200, 232, 258, 261, 271, 308, 329, 330, 367, 386, 392, 427, 432, 436, 460, 469, 479, 481, 482, 484, 485], "co_filenam": [29, 261, 432, 473], "applic": [29, 30, 31, 32, 33, 60, 61, 65, 69, 82, 83, 85, 87, 95, 104, 108, 110, 111, 112, 114, 115, 116, 120, 126, 128, 133, 139, 142, 144, 145, 146, 149, 151, 158, 163, 173, 175, 181, 183, 189, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 215, 220, 221, 232, 233, 234, 242, 243, 249, 253, 264, 268, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 289, 298, 299, 300, 302, 305, 311, 314, 320, 325, 331, 337, 338, 339, 344, 347, 348, 350, 351, 353, 354, 355, 367, 369, 370, 371, 373, 374, 376, 377, 380, 381, 386, 388, 390, 391, 392, 398, 399, 404, 406, 409, 411, 414, 415, 417, 418, 419, 420, 421, 426, 427, 428, 429, 430, 431, 434, 438, 440, 459, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "__cached__": [29, 65, 232, 258, 330, 436, 476, 477, 479, 485], "pyimport_execcodemoduleex": [29, 54], "pyimport_execcodemodulewithpathnam": [29, 54], "pathnam": [29, 65, 69, 78, 94, 148, 158, 182, 226, 227, 230, 257, 260, 273, 275, 285, 287, 299, 302, 312, 337, 349, 359, 363, 374, 380, 401, 426, 427, 432, 459, 477, 480, 485], "pyimport_execcodemoduleobject": [29, 54, 485], "cpathnam": 29, "figur": [29, 69, 73, 83, 86, 102, 104, 110, 111, 114, 126, 192, 200, 207, 218, 298, 314, 344, 363, 466, 467, 468, 469, 470, 471, 472, 473, 478, 485], "imp": [29, 65, 260, 357, 359, 436, 474, 476, 477, 478, 479, 481, 485], "source_from_cach": [29, 65, 257, 258, 286, 357, 477, 479, 481], "pyimport_getmagicnumb": [29, 54, 478], "magic": [29, 65, 69, 95, 97, 99, 100, 113, 121, 173, 182, 193, 200, 207, 237, 257, 258, 314, 348, 356, 367, 370, 371, 390, 394, 426, 429, 466, 467, 469, 479, 480, 481, 482, 485], "pyc": [29, 31, 32, 65, 75, 76, 96, 97, 169, 257, 258, 280, 287, 305, 317, 338, 351, 359, 367, 386, 426, 427, 436, 454, 459, 465, 467, 469, 470, 472, 473, 479, 480, 484, 485, 486], "four": [29, 55, 61, 98, 99, 102, 103, 111, 114, 126, 138, 164, 183, 196, 197, 214, 218, 230, 246, 249, 254, 261, 265, 273, 274, 277, 284, 287, 298, 320, 324, 340, 344, 345, 347, 351, 352, 374, 381, 388, 393, 439, 445, 465, 472, 475, 477, 484, 485], "littl": [29, 61, 65, 76, 100, 104, 108, 109, 111, 112, 114, 147, 152, 160, 164, 182, 183, 184, 192, 196, 200, 237, 250, 274, 289, 298, 301, 325, 339, 344, 351, 354, 359, 372, 386, 394, 402, 409, 430, 445, 456, 466, 467, 468, 472, 476, 477, 478, 479, 485], "pyimport_getmagictag": [29, 54], "tag": [29, 54, 58, 60, 65, 69, 85, 106, 111, 128, 158, 196, 247, 255, 257, 258, 275, 279, 284, 299, 305, 320, 353, 359, 361, 373, 399, 414, 417, 421, 423, 466, 471, 473, 479, 480, 483, 485, 486], "3147": [29, 65, 69, 95, 169, 257, 258, 317, 330, 367, 436, 454, 478, 486], "keep": [29, 31, 33, 37, 60, 78, 83, 95, 100, 109, 110, 111, 114, 116, 126, 128, 144, 145, 150, 154, 158, 164, 166, 175, 182, 183, 185, 187, 192, 200, 203, 218, 221, 233, 234, 241, 243, 250, 254, 258, 261, 264, 267, 273, 277, 284, 298, 299, 305, 311, 313, 325, 345, 351, 355, 359, 367, 374, 388, 392, 393, 399, 406, 411, 414, 419, 431, 432, 436, 440, 467, 469, 470, 471, 472, 473, 477, 479, 482, 485], "mind": [29, 78, 95, 100, 102, 109, 110, 111, 126, 128, 154, 182, 192, 207, 258, 275, 289, 298, 350, 390, 399, 417, 436, 468, 470, 477], "cache_tag": [29, 257, 258, 359, 478, 485], "authorit": [29, 115, 428], "pyimport_getmoduledict": [29, 54, 485], "administr": [29, 31, 56, 72, 76, 78, 108, 116, 158, 162, 255, 293, 294, 299, 340, 344, 371, 411, 433, 465, 470, 478, 483, 484, 485], "pyimport_getmodul": [29, 54, 482, 485], "pyimport_getimport": [29, 54], "finder": [29, 65, 97, 200, 258, 259, 276, 285, 286, 308, 359, 437, 463, 465, 470, 472, 476, 478, 479, 485], "pkg": [29, 69, 72, 73, 78, 258, 308, 425, 440, 459, 460, 464, 466, 467, 471, 473, 476, 483, 485], "__path__": [29, 65, 97, 257, 258, 308, 318, 359, 454, 479, 481, 482, 485], "fetch": [29, 65, 100, 103, 104, 115, 120, 173, 181, 215, 255, 262, 267, 287, 289, 299, 305, 313, 321, 339, 344, 347, 348, 357, 393, 394, 399, 400, 418, 423, 456, 470, 477, 478, 485], "path_importer_cach": [29, 65, 257, 258, 308, 321, 359, 436, 454, 469, 478, 479, 480, 482, 485], "path_hook": [29, 65, 97, 148, 258, 286, 308, 321, 359, 436, 440, 454, 469, 478, 479, 485], "until": [29, 31, 32, 33, 56, 60, 63, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 86, 89, 94, 95, 98, 100, 102, 104, 108, 109, 111, 112, 116, 121, 126, 128, 133, 135, 139, 140, 142, 143, 144, 145, 149, 158, 160, 166, 172, 183, 189, 192, 214, 221, 225, 230, 232, 233, 237, 239, 242, 243, 247, 249, 250, 254, 257, 258, 264, 267, 271, 273, 275, 276, 289, 298, 299, 301, 303, 305, 311, 314, 322, 326, 331, 334, 335, 337, 339, 341, 344, 345, 346, 347, 348, 351, 354, 355, 359, 364, 366, 367, 370, 372, 374, 385, 393, 399, 404, 406, 407, 409, 411, 412, 416, 419, 420, 428, 431, 432, 440, 456, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485], "our": [29, 32, 33, 79, 83, 86, 95, 99, 100, 103, 109, 111, 112, 114, 115, 120, 140, 173, 175, 182, 203, 207, 212, 218, 265, 298, 305, 325, 342, 345, 348, 367, 393, 394, 406, 411, 417, 426, 468, 471, 472, 476, 485], "find": [29, 31, 60, 65, 69, 70, 72, 76, 78, 79, 82, 83, 85, 87, 100, 103, 104, 106, 107, 108, 109, 110, 111, 114, 116, 118, 119, 124, 126, 128, 147, 154, 158, 164, 166, 183, 187, 189, 193, 196, 197, 200, 202, 203, 204, 206, 207, 212, 214, 218, 220, 228, 232, 233, 237, 238, 242, 243, 253, 254, 257, 258, 259, 260, 261, 264, 272, 273, 279, 284, 286, 292, 298, 299, 305, 306, 308, 319, 329, 338, 344, 348, 350, 351, 355, 359, 367, 368, 370, 371, 372, 374, 392, 393, 394, 398, 399, 406, 414, 425, 433, 434, 436, 438, 440, 445, 446, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "pyimport_importfrozenmoduleobject": [29, 54, 485], "misnom": 29, "pyimport_importfrozenmodul": [29, 54], "_frozen": [29, 182], "freez": [29, 65, 91, 95, 172, 233, 234, 254, 294, 321, 457, 482, 485], "tool": [29, 31, 33, 54, 65, 69, 70, 75, 82, 89, 95, 97, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 116, 118, 119, 120, 124, 128, 133, 142, 162, 175, 182, 183, 193, 196, 199, 200, 201, 211, 226, 230, 232, 233, 237, 238, 259, 260, 261, 262, 267, 268, 270, 305, 313, 327, 337, 339, 350, 359, 373, 383, 384, 386, 388, 390, 392, 403, 417, 425, 426, 432, 440, 461, 465, 466, 467, 468, 469, 471, 472, 474, 475, 477, 478, 479, 480, 481, 484], "distribut": [29, 31, 33, 54, 63, 65, 72, 75, 76, 83, 84, 85, 94, 95, 111, 120, 133, 183, 192, 196, 199, 216, 237, 242, 277, 281, 286, 289, 290, 308, 324, 347, 350, 360, 363, 374, 382, 388, 392, 418, 425, 430, 460, 465, 466, 467, 469, 471, 472, 474, 476, 477, 480, 481, 482, 483, 484, 485], "pyimport_frozenmodul": [29, 32, 182], "record": [29, 58, 65, 85, 88, 102, 103, 104, 108, 109, 113, 114, 116, 119, 128, 154, 162, 166, 169, 181, 182, 183, 184, 190, 191, 192, 193, 204, 210, 218, 219, 259, 261, 265, 267, 273, 275, 277, 285, 298, 299, 301, 305, 314, 315, 347, 349, 351, 354, 357, 367, 388, 389, 392, 393, 394, 404, 426, 436, 444, 449, 466, 469, 470, 471, 472, 473, 477, 478, 479, 480, 483, 485], "play": [29, 33, 65, 86, 99, 112, 182, 192, 260, 301, 324, 348, 388, 392, 408, 432, 444, 474, 485], "trick": [29, 65, 95, 182, 232, 347, 359, 390, 394, 444, 468], "collect": [29, 30, 40, 43, 48, 49, 60, 61, 64, 65, 69, 73, 76, 83, 84, 85, 88, 94, 95, 97, 100, 102, 104, 106, 108, 109, 110, 111, 112, 118, 120, 122, 126, 128, 129, 132, 139, 144, 145, 154, 158, 164, 172, 173, 175, 176, 182, 185, 187, 188, 190, 193, 199, 200, 201, 220, 221, 232, 233, 234, 249, 250, 259, 260, 261, 267, 270, 289, 299, 305, 311, 314, 320, 321, 322, 336, 338, 343, 344, 345, 348, 350, 351, 354, 359, 364, 365, 367, 372, 381, 386, 388, 389, 392, 399, 405, 406, 409, 415, 417, 431, 432, 434, 440, 445, 446, 456, 457, 460, 465, 468, 469, 470, 471, 472, 474, 475, 485, 486], "pyimport_appendinittab": [29, 31, 32, 43, 54, 82, 83, 485], "initfunc": 29, "pyimport_extendinittab": [29, 31, 32, 485], "extend": [29, 31, 33, 40, 43, 60, 65, 73, 75, 81, 83, 84, 85, 86, 90, 92, 94, 102, 109, 111, 115, 124, 126, 127, 128, 139, 145, 149, 157, 161, 162, 164, 166, 167, 173, 174, 175, 182, 183, 188, 189, 196, 197, 198, 200, 203, 212, 214, 218, 232, 233, 237, 252, 254, 256, 257, 264, 267, 268, 277, 279, 281, 282, 284, 286, 288, 305, 308, 309, 314, 320, 326, 334, 338, 341, 342, 344, 348, 351, 357, 359, 363, 371, 381, 383, 388, 390, 392, 399, 406, 413, 414, 417, 424, 432, 433, 434, 436, 440, 445, 446, 465, 467, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486], "_inittab": 29, "emb": [29, 31, 32, 33, 63, 65, 82, 95, 169, 200, 253, 258, 372, 374, 413, 417, 468, 473, 482, 483, 485], "conjunct": [29, 196, 198, 200, 232, 257, 261, 337, 344, 348, 435, 439, 476, 479], "newtab": 29, "sentinel": [29, 35, 55, 65, 83, 85, 86, 95, 100, 109, 170, 187, 193, 232, 267, 275, 289, 394, 468, 478, 482, 485], "fault": [29, 65, 69, 108, 182, 191, 262, 298, 328, 339, 371, 471, 473, 478, 485], "insuffici": [29, 167, 192, 200, 258, 289, 299, 393, 481], "consider": [30, 33, 65, 83, 95, 108, 124, 133, 170, 183, 187, 200, 220, 230, 249, 255, 260, 262, 268, 277, 291, 294, 311, 321, 342, 347, 399, 414, 437, 466, 469, 470, 471, 473, 476, 478, 482, 485], "high": [30, 36, 40, 57, 61, 65, 83, 84, 89, 94, 95, 108, 109, 110, 112, 115, 124, 128, 133, 136, 139, 141, 142, 144, 145, 154, 156, 170, 172, 183, 189, 192, 197, 201, 208, 226, 238, 255, 260, 265, 266, 267, 272, 276, 289, 295, 299, 300, 301, 305, 314, 315, 324, 325, 334, 339, 344, 347, 348, 350, 359, 361, 371, 403, 407, 440, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 482, 484, 485], "print": [30, 31, 32, 33, 40, 47, 56, 60, 65, 69, 78, 82, 83, 85, 86, 88, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 111, 114, 115, 116, 118, 119, 120, 121, 124, 128, 130, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 146, 150, 152, 157, 158, 162, 163, 165, 166, 169, 172, 173, 175, 176, 178, 181, 182, 183, 187, 189, 190, 192, 194, 196, 197, 200, 203, 207, 208, 211, 212, 218, 220, 223, 227, 230, 232, 233, 234, 235, 237, 239, 242, 247, 249, 251, 252, 254, 255, 258, 259, 260, 261, 264, 268, 273, 275, 277, 284, 285, 288, 289, 294, 299, 303, 305, 306, 307, 310, 311, 313, 314, 315, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 355, 357, 359, 360, 362, 363, 364, 365, 367, 369, 370, 372, 374, 380, 381, 383, 384, 386, 388, 390, 392, 393, 399, 401, 403, 404, 406, 409, 411, 412, 415, 416, 417, 420, 421, 423, 424, 425, 426, 429, 431, 432, 433, 434, 439, 440, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 459, 465, 466, 467, 468, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "warn": [30, 31, 32, 33, 49, 56, 65, 69, 73, 78, 86, 95, 100, 106, 108, 109, 110, 112, 118, 124, 132, 133, 144, 187, 188, 193, 194, 220, 237, 258, 260, 264, 274, 275, 278, 279, 289, 304, 314, 317, 321, 325, 339, 346, 347, 348, 355, 359, 374, 378, 390, 392, 401, 411, 418, 419, 420, 432, 433, 436, 439, 454, 455, 456, 459, 460, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 483, 484, 485, 486], "signal": [30, 31, 32, 47, 56, 60, 65, 102, 104, 109, 111, 121, 136, 138, 139, 142, 146, 147, 148, 172, 182, 183, 191, 193, 194, 200, 220, 249, 260, 264, 266, 267, 273, 274, 281, 289, 296, 298, 299, 303, 305, 315, 325, 328, 334, 335, 337, 344, 347, 348, 352, 355, 359, 367, 370, 371, 376, 390, 399, 417, 419, 423, 434, 436, 459, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 481, 483, 485], "recurs": [30, 31, 65, 69, 71, 78, 79, 83, 95, 104, 118, 128, 148, 158, 169, 173, 176, 187, 196, 197, 200, 203, 207, 212, 220, 223, 233, 238, 257, 258, 268, 289, 299, 302, 303, 305, 308, 313, 314, 319, 327, 336, 338, 349, 359, 362, 363, 370, 388, 390, 392, 393, 399, 416, 417, 426, 432, 436, 440, 444, 466, 467, 468, 469, 470, 472, 477, 479, 480, 481, 482, 483, 485], "categori": [30, 65, 69, 76, 78, 94, 108, 111, 114, 139, 220, 264, 272, 275, 321, 325, 351, 367, 368, 391, 398, 439, 459, 466, 467, 471, 472, 474, 477, 482, 485], "marshal": [30, 62, 65, 95, 129, 148, 164, 260, 268, 275, 304, 423, 469, 470, 473, 480, 485], "pars": [30, 32, 33, 56, 61, 62, 63, 65, 69, 73, 83, 89, 94, 95, 100, 107, 109, 111, 115, 116, 118, 120, 124, 128, 129, 139, 141, 158, 162, 163, 165, 173, 181, 189, 193, 200, 201, 203, 206, 207, 208, 210, 212, 213, 215, 216, 224, 229, 232, 235, 237, 245, 247, 249, 250, 251, 252, 255, 258, 260, 262, 265, 268, 270, 274, 275, 277, 279, 282, 291, 292, 299, 347, 351, 352, 355, 357, 360, 368, 371, 386, 396, 399, 400, 403, 404, 411, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 434, 435, 439, 440, 441, 447, 450, 454, 459, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 485, 486], "reflect": [30, 62, 65, 69, 95, 99, 106, 109, 123, 126, 128, 181, 183, 189, 200, 217, 222, 232, 233, 254, 258, 261, 290, 298, 299, 314, 326, 344, 348, 351, 354, 359, 374, 388, 389, 405, 409, 415, 425, 431, 432, 459, 472, 477, 478, 480, 483, 484, 485], "abstract": [30, 36, 52, 65, 75, 84, 86, 88, 89, 94, 95, 97, 101, 102, 103, 113, 129, 133, 138, 139, 172, 175, 182, 188, 189, 192, 193, 215, 220, 228, 233, 251, 259, 260, 261, 264, 270, 275, 286, 296, 299, 307, 321, 335, 344, 348, 351, 359, 411, 429, 432, 434, 469, 471, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486], "configur": [30, 33, 40, 56, 60, 61, 65, 70, 74, 75, 76, 78, 82, 83, 95, 100, 102, 104, 106, 111, 121, 124, 133, 138, 176, 178, 182, 188, 190, 192, 195, 199, 224, 229, 230, 242, 252, 254, 255, 258, 260, 272, 273, 275, 277, 278, 298, 299, 311, 312, 313, 320, 321, 326, 329, 333, 337, 341, 342, 344, 347, 348, 359, 366, 367, 370, 373, 374, 377, 378, 379, 380, 381, 392, 393, 394, 399, 403, 404, 409, 411, 415, 416, 417, 421, 423, 459, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 484, 485, 486], "wide": [30, 32, 56, 61, 65, 69, 100, 102, 104, 108, 110, 114, 116, 121, 126, 138, 147, 157, 173, 182, 183, 189, 192, 200, 201, 250, 254, 261, 263, 272, 277, 288, 299, 301, 305, 308, 311, 321, 336, 348, 350, 351, 354, 355, 363, 370, 371, 380, 414, 429, 430, 460, 465, 468, 471, 472, 473, 477, 478, 479, 485], "sub": [30, 43, 48, 65, 70, 73, 75, 78, 79, 100, 104, 108, 109, 111, 124, 128, 131, 139, 181, 182, 183, 184, 189, 196, 197, 201, 203, 208, 212, 214, 221, 231, 238, 255, 258, 260, 267, 270, 274, 277, 284, 297, 300, 314, 320, 325, 336, 351, 359, 367, 368, 380, 390, 392, 394, 409, 417, 434, 435, 455, 465, 466, 468, 472, 473, 475, 477, 478, 479, 480, 481, 482, 485], "asynchron": [30, 60, 65, 94, 97, 128, 129, 132, 133, 136, 139, 142, 144, 145, 167, 172, 175, 176, 193, 197, 220, 232, 260, 261, 262, 266, 273, 289, 344, 348, 355, 359, 389, 393, 410, 431, 440, 473, 476, 477, 478, 479, 480, 482, 483, 485], "notif": [30, 64, 65, 335, 404, 409, 419, 466, 473, 483, 485], "profil": [30, 32, 33, 65, 95, 106, 164, 191, 260, 339, 348, 353, 359, 370, 374, 409, 442, 455, 460, 463, 467, 468, 470, 471, 472, 474, 476, 481, 483, 485], "trace": [30, 32, 33, 40, 60, 65, 79, 83, 106, 108, 121, 150, 163, 177, 182, 191, 233, 243, 255, 260, 261, 263, 299, 303, 321, 347, 359, 367, 370, 385, 388, 430, 432, 440, 459, 460, 467, 468, 469, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485], "advanc": [30, 65, 86, 89, 95, 102, 109, 111, 112, 116, 156, 173, 175, 181, 182, 183, 192, 193, 201, 232, 241, 243, 261, 264, 267, 273, 276, 284, 298, 344, 348, 352, 355, 359, 372, 384, 394, 406, 415, 416, 426, 431, 432, 438, 465, 469, 474, 477, 483, 485, 486], "debugg": [30, 40, 65, 83, 95, 191, 200, 220, 232, 254, 260, 327, 359, 392, 432, 444, 460, 465, 468, 469, 471, 472, 473, 477, 481, 482, 483, 485], "pywidestringlist": [30, 65, 483], "pystatus": [30, 65, 483], "pypreconfig": [30, 65, 483], "preiniti": [30, 40, 56, 65, 272], "pyconfig": [30, 56, 65, 69, 97, 299, 359, 360, 460, 473, 476, 483, 484, 485], "isol": [30, 31, 60, 63, 65, 97, 104, 120, 128, 200, 254, 359, 367, 392, 393, 403, 459, 465, 479, 481, 484, 485], "py_runmain": [30, 65, 483, 485], "py_getargcargv": [30, 65, 485], "privat": [30, 31, 40, 41, 54, 65, 95, 103, 104, 182, 187, 196, 218, 230, 232, 254, 255, 265, 284, 289, 305, 311, 342, 348, 353, 367, 390, 393, 434, 439, 440, 444, 465, 467, 468, 469, 472, 476, 477, 478, 479, 480, 481, 483, 485], "provision": [30, 65, 97, 204, 210, 212, 215, 259, 359, 479, 480, 481, 482, 483, 485], "domain": [30, 65, 76, 106, 108, 133, 151, 172, 191, 201, 210, 215, 216, 219, 237, 242, 250, 251, 255, 272, 274, 275, 289, 291, 293, 341, 342, 344, 345, 348, 353, 359, 386, 398, 402, 459, 469, 471, 478, 479, 480, 481, 482, 485], "custom": [30, 32, 33, 56, 60, 65, 69, 81, 83, 86, 89, 95, 115, 121, 122, 124, 125, 128, 133, 157, 162, 164, 167, 170, 187, 188, 189, 191, 195, 200, 201, 214, 215, 220, 224, 232, 249, 252, 254, 258, 259, 260, 261, 262, 264, 268, 273, 275, 277, 286, 291, 298, 304, 326, 329, 338, 339, 340, 341, 348, 351, 359, 367, 368, 370, 374, 381, 390, 392, 393, 399, 403, 404, 406, 411, 414, 416, 417, 423, 429, 431, 434, 436, 440, 460, 462, 464, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 483, 484, 485], "pymalloc": [30, 32, 65, 359, 459, 460, 467, 472, 473, 477, 479, 481, 483, 485, 486], "tracemalloc": [30, 32, 65, 191, 194, 260, 367, 430, 459, 485], "pyinitfrozenextens": 31, "pymem_setalloc": [31, 32, 40], "pymem_setupdebughook": [31, 40, 194, 481, 485], "pyobject_setarenaalloc": [31, 40], "py_setpath": [31, 54, 465, 483, 485], "py_setprogramnam": [31, 32, 33, 54, 82, 83, 465, 485], "py_setpythonhom": [31, 32, 54, 485], "py_setstandardstreamencod": [31, 32, 479, 485], "pysys_addwarnopt": [31, 54, 56, 482, 485], "pysys_addxopt": [31, 54, 56, 485], "pysys_resetwarnopt": [31, 54, 56, 485], "py_isiniti": [31, 33, 54], "pymem_getalloc": [31, 40], "pyobject_getarenaalloc": [31, 40], "py_getbuildinfo": [31, 54, 471], "py_getcompil": [31, 54], "py_getcopyright": [31, 54], "py_getplatform": [31, 54], "py_getvers": [31, 54], "py_decodelocal": [31, 32, 54, 56, 61, 82, 83, 480, 482, 485], "pymem_rawmalloc": [31, 32, 40, 63, 479, 485], "pymem_rawrealloc": [31, 40, 63, 479], "pymem_rawcalloc": [31, 40, 480, 485], "pymem_rawfre": [31, 40, 56, 82, 83], "py_encodelocal": [31, 54, 56, 61, 480, 482, 485], "py_getpath": [31, 33, 54, 476, 485], "py_getprefix": [31, 33, 54, 476, 485], "py_getexecprefix": [31, 33, 54, 476, 485], "py_getprogramfullpath": [31, 33, 54, 476, 483, 485], "py_getpythonhom": [31, 54, 476, 485], "py_getprogramnam": [31, 54, 476, 483, 485], "pyeval_initthread": [31, 54, 477, 484, 485], "py_byteswarningflag": [31, 482], "bb": [31, 104, 110, 166, 267, 273, 459, 482, 485], "py_debugflag": 31, "parser": [31, 32, 65, 69, 73, 78, 83, 89, 99, 104, 109, 111, 114, 118, 124, 128, 163, 165, 166, 181, 189, 196, 200, 201, 203, 206, 207, 208, 210, 212, 213, 215, 220, 224, 230, 245, 260, 268, 274, 279, 291, 303, 310, 315, 325, 337, 351, 357, 399, 403, 413, 414, 415, 416, 417, 419, 421, 435, 439, 440, 441, 445, 447, 451, 455, 459, 466, 467, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 485], "expert": [31, 32, 298, 459], "pythondebug": [31, 32, 459], "py_dontwritebytecodeflag": 31, "pythondontwritebytecod": [31, 32, 95, 359, 459, 472], "py_frozenflag": 31, "_freeze_importlib": [31, 485], "frozenmain": 31, "py_hashrandomizationflag": 31, "pythonhashse": [31, 32, 432, 459, 478, 485], "secret": [31, 65, 139, 180, 242, 260, 289, 298, 299, 311, 324, 333, 348, 430, 459, 466, 485], "seed": [31, 32, 65, 97, 296, 299, 324, 348, 350, 359, 430, 459, 473, 477, 484, 485], "py_ignoreenvironmentflag": [31, 33, 482], "pythonpath": [31, 32, 33, 81, 96, 116, 158, 359, 367, 436, 454, 459, 463, 465, 479, 485], "pythonhom": [31, 32, 33, 116, 367, 459, 465, 481], "py_inspectflag": [31, 63], "script": [31, 32, 33, 63, 65, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 85, 89, 96, 97, 99, 100, 106, 108, 109, 115, 116, 118, 120, 126, 128, 159, 169, 175, 190, 194, 196, 199, 200, 217, 220, 229, 235, 237, 247, 251, 252, 258, 259, 260, 286, 298, 303, 314, 315, 317, 319, 321, 330, 336, 340, 347, 357, 359, 362, 367, 374, 381, 383, 392, 399, 403, 407, 411, 424, 425, 433, 436, 438, 439, 440, 441, 454, 457, 459, 460, 462, 464, 466, 467, 468, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "enter": [31, 32, 33, 65, 89, 94, 95, 96, 100, 102, 104, 106, 111, 112, 114, 145, 150, 158, 162, 163, 165, 170, 175, 183, 195, 197, 232, 254, 264, 288, 298, 299, 303, 318, 331, 342, 347, 348, 351, 359, 364, 370, 374, 380, 388, 404, 431, 432, 433, 441, 445, 447, 456, 459, 468, 469, 471, 477, 478, 479, 482, 483, 485], "stdin": [31, 32, 56, 63, 65, 86, 95, 97, 104, 126, 128, 133, 136, 139, 142, 150, 158, 162, 163, 169, 170, 182, 189, 192, 200, 215, 218, 221, 222, 225, 236, 241, 254, 255, 264, 265, 268, 289, 299, 302, 303, 315, 321, 327, 334, 337, 348, 351, 355, 359, 363, 366, 367, 383, 391, 399, 411, 424, 432, 434, 436, 440, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 459, 460, 467, 468, 469, 470, 472, 473, 474, 476, 478, 479, 480, 481, 482, 484, 485], "appear": [31, 32, 43, 55, 56, 63, 65, 69, 85, 86, 94, 100, 102, 104, 107, 108, 109, 110, 111, 116, 118, 126, 128, 139, 158, 164, 169, 173, 181, 182, 183, 187, 192, 196, 200, 203, 206, 209, 210, 212, 218, 229, 232, 234, 237, 242, 254, 255, 258, 261, 265, 272, 274, 275, 277, 278, 287, 289, 303, 314, 320, 323, 325, 337, 339, 342, 344, 347, 351, 352, 363, 369, 374, 381, 392, 393, 394, 399, 404, 406, 411, 412, 414, 417, 420, 424, 430, 431, 432, 434, 436, 438, 439, 440, 459, 465, 467, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 485], "pythoninspect": [31, 32, 459, 469], "py_interactiveflag": [31, 56], "py_isolatedflag": 31, "neither": [31, 32, 69, 79, 86, 100, 104, 107, 111, 120, 139, 149, 150, 164, 187, 192, 200, 203, 212, 216, 232, 249, 268, 273, 276, 277, 281, 289, 292, 298, 299, 305, 325, 345, 347, 348, 351, 359, 381, 384, 390, 392, 407, 429, 430, 432, 434, 459, 479, 481, 482, 485], "directori": [31, 32, 33, 65, 70, 72, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 89, 94, 95, 96, 99, 100, 103, 104, 106, 109, 114, 116, 118, 120, 124, 142, 158, 159, 169, 173, 183, 190, 195, 196, 200, 207, 217, 219, 220, 226, 227, 230, 232, 237, 238, 252, 254, 255, 257, 258, 259, 260, 277, 285, 289, 292, 298, 300, 302, 303, 308, 312, 316, 317, 318, 319, 326, 330, 337, 340, 347, 348, 349, 355, 357, 359, 360, 362, 363, 365, 367, 373, 380, 384, 388, 392, 399, 403, 406, 407, 411, 425, 426, 427, 429, 430, 436, 447, 455, 459, 460, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486], "site": [31, 32, 65, 78, 95, 104, 114, 115, 116, 173, 217, 232, 250, 251, 258, 259, 260, 265, 273, 299, 308, 321, 342, 359, 360, 399, 403, 418, 434, 436, 442, 454, 457, 459, 465, 466, 471, 473, 474, 478, 479, 480, 485, 486], "py_legacywindowsfsencodingflag": [31, 56, 485], "surrogatepass": [31, 32, 164, 459, 479, 481, 485], "pythonlegacywindowsfsencod": [31, 32, 359, 459, 481], "529": [31, 61, 65, 299, 359, 459, 465, 483, 485], "py_legacywindowsstdioflag": 31, "fileio": [31, 32, 65, 124, 126, 232, 264, 473, 479, 485], "windowsconsoleio": [31, 32, 485], "pythonlegacywindowsstdio": [31, 32, 359, 459, 481], "528": [31, 32, 65, 465, 485], "py_nositeflag": 31, "entail": [31, 32, 459], "trigger": [31, 32, 40, 60, 65, 86, 100, 103, 104, 106, 110, 133, 175, 183, 192, 195, 203, 212, 217, 220, 233, 258, 261, 289, 290, 298, 299, 339, 340, 347, 351, 359, 374, 376, 392, 393, 398, 404, 413, 423, 432, 459, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 485], "py_nousersitedirectori": 31, "pythonnousersit": [31, 32, 340, 459, 472], "py_optimizeflag": [31, 182], "pythonoptim": [31, 32, 459], "py_quietflag": 31, "display": [31, 32, 40, 65, 70, 73, 97, 99, 106, 109, 111, 114, 124, 126, 128, 144, 158, 159, 162, 163, 166, 185, 191, 192, 194, 197, 200, 207, 210, 220, 221, 245, 254, 260, 261, 265, 272, 273, 277, 287, 294, 299, 303, 313, 317, 319, 325, 326, 349, 351, 352, 353, 355, 359, 363, 369, 372, 374, 377, 380, 381, 383, 384, 385, 388, 392, 399, 403, 404, 407, 425, 430, 432, 439, 440, 453, 459, 460, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "copyright": [31, 32, 65, 66, 83, 96, 116, 174, 242, 254, 321, 359, 417, 430, 452, 454, 459, 477, 483], "py_unbufferedstdioflag": 31, "stdout": [31, 32, 56, 61, 63, 65, 69, 70, 83, 97, 100, 108, 109, 126, 128, 133, 136, 139, 142, 158, 162, 170, 175, 182, 183, 196, 197, 200, 217, 223, 230, 232, 249, 254, 255, 264, 268, 274, 275, 289, 298, 299, 303, 306, 313, 314, 315, 321, 327, 339, 341, 351, 355, 359, 363, 364, 367, 383, 384, 385, 392, 393, 403, 404, 411, 417, 421, 426, 432, 450, 454, 455, 459, 465, 466, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 485], "pythonunbuff": [31, 32, 359, 459, 485], "py_verboseflag": 31, "showcleanup": [31, 32, 33, 56, 65, 100, 104, 109, 121, 146, 170, 175, 221, 290, 299, 345, 355, 357, 359, 365, 367, 392, 394, 406, 409, 415, 431, 433, 434, 459, 466, 468, 471, 473, 474, 477, 478, 483, 485], "pythonverbos": [31, 32, 459], "fundament": [31, 33, 60, 65, 76, 112, 124, 201, 265, 289, 298, 305, 313, 314, 347, 389, 390, 406, 436, 465, 466, 472, 481], "builtin": [31, 32, 33, 50, 65, 95, 97, 100, 103, 113, 128, 148, 164, 166, 193, 197, 200, 232, 237, 251, 254, 257, 258, 260, 261, 264, 265, 267, 274, 305, 314, 321, 329, 340, 351, 359, 389, 390, 394, 431, 434, 436, 439, 441, 444, 454, 460, 472, 475, 476, 477, 479, 480, 481, 482, 484, 486], "__main__": [31, 32, 33, 63, 65, 89, 94, 95, 97, 103, 108, 109, 150, 162, 172, 194, 196, 200, 207, 220, 235, 257, 258, 260, 285, 289, 298, 303, 305, 314, 319, 321, 329, 330, 339, 345, 349, 351, 367, 372, 386, 388, 390, 392, 393, 394, 403, 404, 406, 411, 425, 433, 437, 441, 444, 454, 459, 467, 470, 471, 472, 473, 475, 477, 478, 479, 480, 483, 484, 485], "argv": [31, 32, 33, 63, 65, 69, 70, 82, 83, 109, 120, 124, 133, 141, 148, 194, 200, 225, 235, 254, 298, 299, 303, 315, 321, 330, 345, 349, 359, 361, 374, 392, 411, 447, 452, 454, 455, 459, 469, 473, 474, 477, 482, 483, 485], "pysys_setargvex": [31, 33, 54, 473, 477, 485], "py_finalizeex": [31, 33, 54, 56, 82, 481, 485], "consol": [31, 32, 63, 65, 78, 95, 102, 108, 109, 120, 182, 184, 186, 200, 208, 254, 274, 299, 303, 319, 326, 355, 359, 408, 425, 459, 465, 468, 472, 477, 478, 482, 485], "o_text": [31, 65, 124, 288, 299], "o_binari": [31, 32, 65, 124, 288, 299], "py_initializeex": [31, 54, 485], "initsig": 31, "registr": [31, 56, 167, 175, 299, 305, 335, 399, 409, 424, 425, 472, 485], "undo": [31, 65, 162, 183, 229, 254, 273, 388, 393, 472, 485], "py_newinterpret": [31, 54], "ideal": [31, 60, 72, 104, 110, 114, 144, 157, 189, 359, 404, 411, 470, 477], "flush": [31, 65, 108, 109, 112, 121, 124, 125, 133, 136, 139, 141, 145, 156, 164, 166, 183, 221, 232, 252, 264, 273, 275, 276, 277, 284, 289, 291, 299, 320, 328, 339, 344, 355, 359, 403, 409, 411, 417, 428, 478, 479, 481, 483, 485], "restart": [31, 109, 183, 219, 230, 254, 274, 303, 339, 366, 472, 473, 480, 482, 483, 485], "loadabl": [31, 60, 76, 257, 258, 313, 347, 460, 465], "dll": [31, 54, 65, 76, 87, 94, 116, 182, 275, 299, 359, 374, 425, 465, 471, 472, 476, 479, 483, 485], "unload": [31, 65, 193, 367, 406, 485], "hunt": [31, 298, 485], "develop": [31, 32, 65, 70, 75, 76, 78, 85, 87, 88, 95, 97, 100, 102, 106, 108, 109, 110, 111, 114, 132, 133, 158, 167, 175, 182, 192, 193, 220, 221, 242, 260, 264, 270, 273, 274, 275, 298, 299, 313, 319, 347, 351, 355, 359, 367, 373, 374, 380, 388, 404, 423, 426, 429, 430, 459, 460, 461, 465, 467, 468, 469, 470, 471, 473, 474, 477, 478, 479, 480, 483, 484, 485, 486], "destruct": [31, 83, 85, 162, 183, 261, 264, 290, 351, 432, 467, 477, 485], "random": [31, 32, 65, 83, 95, 97, 102, 104, 109, 114, 124, 133, 140, 156, 164, 179, 180, 200, 225, 226, 233, 243, 254, 260, 263, 264, 267, 289, 296, 298, 314, 325, 332, 333, 334, 350, 363, 367, 388, 392, 402, 414, 428, 432, 455, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 483, 485], "amount": [31, 33, 43, 83, 86, 94, 95, 100, 104, 112, 129, 133, 139, 183, 192, 230, 238, 242, 243, 264, 265, 276, 289, 294, 298, 299, 301, 302, 305, 311, 313, 328, 336, 338, 339, 344, 349, 351, 369, 370, 371, 374, 377, 381, 388, 399, 413, 415, 428, 467, 470, 472, 476, 477, 479, 480, 481, 482, 484, 485], "tie": [31, 69, 192, 314, 348, 431, 483, 485], "routin": [31, 39, 60, 65, 82, 83, 85, 96, 103, 113, 114, 147, 152, 179, 183, 190, 202, 222, 260, 264, 272, 287, 299, 314, 348, 371, 395, 408, 411, 469, 470, 482, 485], "_pysys_clearaudithook": [31, 148], "py_fin": [31, 32, 54, 473, 485], "pythonioencod": [31, 32, 299, 359, 459, 472, 479, 485], "backslashreplac": [31, 32, 114, 164, 221, 232, 264, 273, 299, 351, 359, 459, 469, 480, 482, 485], "durat": [31, 33, 69, 109, 144, 189, 277, 289, 314, 344, 345, 348, 351, 359, 366, 367, 370, 371, 410, 473, 477, 478, 480, 483, 485], "wchar_": 31, "wchar": [31, 485], "prefix": [31, 32, 33, 45, 54, 58, 60, 61, 65, 69, 70, 78, 83, 100, 107, 110, 111, 112, 124, 162, 165, 169, 173, 179, 181, 182, 183, 192, 196, 197, 210, 220, 235, 237, 242, 250, 252, 254, 262, 274, 275, 279, 286, 299, 300, 303, 308, 318, 320, 321, 325, 338, 340, 351, 352, 359, 360, 365, 367, 369, 374, 380, 381, 384, 392, 393, 402, 403, 414, 417, 419, 423, 427, 428, 435, 439, 440, 444, 453, 454, 459, 464, 465, 469, 472, 473, 476, 477, 478, 480, 481, 483, 485], "complic": [31, 60, 78, 83, 98, 100, 102, 104, 110, 111, 112, 114, 115, 116, 147, 164, 175, 182, 187, 196, 200, 222, 233, 234, 250, 298, 305, 325, 371, 432, 434, 466, 468, 469, 470, 471, 472, 473, 475, 477, 485], "usr": [31, 33, 78, 81, 89, 94, 104, 106, 109, 114, 116, 158, 173, 182, 196, 207, 237, 238, 278, 298, 300, 302, 309, 325, 332, 340, 351, 355, 359, 360, 365, 371, 374, 386, 399, 411, 425, 442, 452, 457, 459, 460, 463, 464, 465, 467, 469, 471, 476, 477, 479, 480, 485], "bin": [31, 33, 65, 78, 82, 89, 94, 104, 109, 114, 115, 116, 158, 170, 173, 196, 207, 232, 252, 259, 260, 298, 299, 302, 307, 351, 352, 360, 399, 400, 403, 411, 425, 432, 442, 452, 454, 457, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 485], "makefil": [31, 65, 69, 82, 83, 89, 238, 264, 302, 344, 348, 360, 432, 462, 466, 467, 472, 473, 478, 479, 480, 481, 485], "exec_prefix": [31, 32, 33, 65, 69, 116, 289, 321, 340, 359, 384, 403, 454, 459, 464, 477], "background": [31, 65, 70, 87, 102, 106, 109, 112, 133, 144, 145, 173, 175, 183, 253, 254, 275, 289, 299, 347, 355, 357, 367, 370, 374, 380, 381, 388, 431, 432, 456, 470, 479, 485], "plat": [31, 69, 70, 116, 465, 481, 485], "subtre": [31, 417, 466], "speak": [31, 32, 65, 83, 95, 112, 116, 189, 351, 361], "hardwar": [31, 69, 114, 116, 147, 161, 183, 192, 299, 301, 328, 344, 355, 371, 402, 409, 473, 480, 485], "softwar": [31, 65, 66, 69, 70, 78, 87, 90, 95, 104, 108, 109, 114, 116, 158, 164, 183, 193, 198, 200, 201, 217, 219, 235, 242, 252, 253, 254, 272, 294, 299, 313, 348, 371, 403, 409, 411, 423, 430, 463, 465, 466, 467, 469, 470, 472, 473, 485, 486], "sparc": [31, 301], "machin": [31, 61, 65, 83, 94, 97, 106, 108, 109, 112, 124, 139, 164, 172, 183, 184, 189, 207, 219, 237, 250, 261, 264, 266, 274, 275, 276, 278, 289, 290, 294, 299, 302, 309, 314, 319, 339, 342, 344, 347, 348, 350, 351, 354, 370, 372, 402, 413, 424, 425, 432, 438, 465, 466, 467, 468, 471, 472, 473, 475, 477, 478, 482, 483, 485], "solari": [31, 65, 69, 70, 76, 253, 299, 309, 312, 334, 359, 360, 371, 466, 473, 477, 478, 480, 482, 485], "consid": [31, 32, 40, 47, 52, 53, 54, 60, 61, 65, 69, 70, 82, 83, 85, 86, 95, 98, 99, 100, 102, 103, 104, 107, 109, 111, 116, 118, 120, 122, 126, 133, 150, 154, 158, 161, 169, 173, 181, 182, 183, 187, 189, 190, 192, 196, 197, 200, 203, 211, 212, 215, 232, 233, 235, 237, 238, 242, 250, 257, 258, 264, 265, 268, 272, 273, 274, 275, 276, 277, 281, 289, 294, 295, 298, 300, 302, 303, 305, 314, 320, 325, 326, 334, 337, 339, 347, 348, 350, 351, 352, 359, 360, 363, 367, 369, 370, 371, 374, 389, 390, 392, 393, 399, 406, 411, 414, 415, 416, 424, 425, 431, 432, 433, 434, 436, 440, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485], "intel": [31, 69, 96, 147, 301, 314, 354, 460, 463, 471, 473, 480, 481, 483, 484, 485], "linux": [31, 65, 67, 69, 70, 76, 81, 90, 93, 94, 102, 103, 105, 106, 116, 121, 124, 138, 182, 183, 192, 219, 221, 222, 237, 254, 264, 275, 284, 301, 312, 315, 328, 332, 334, 338, 339, 344, 349, 355, 359, 360, 363, 365, 367, 370, 371, 374, 399, 452, 460, 462, 465, 466, 467, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "major": [31, 65, 73, 76, 78, 87, 100, 103, 110, 112, 114, 115, 116, 124, 128, 173, 183, 189, 201, 210, 213, 215, 218, 237, 242, 250, 291, 298, 299, 309, 311, 319, 351, 359, 360, 398, 425, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485], "revis": [31, 65, 114, 115, 354, 390, 412, 466, 471, 472, 475, 481, 482, 485], "stori": [31, 83, 154, 243, 450], "strategi": [31, 40, 60, 83, 86, 89, 126, 145, 164, 275, 341, 374, 392, 407, 428, 429, 436, 445, 469, 474, 477, 482, 485], "meaningless": [31, 114, 467, 468, 479, 485], "mount": [31, 299, 300, 302, 473, 479, 482, 485], "automount": 31, "comput": [31, 32, 33, 47, 60, 61, 65, 69, 81, 82, 85, 86, 95, 97, 100, 102, 103, 104, 106, 107, 108, 109, 111, 114, 116, 139, 144, 147, 152, 154, 157, 161, 166, 167, 172, 184, 187, 189, 191, 192, 197, 200, 223, 230, 232, 233, 242, 243, 260, 261, 265, 267, 273, 275, 281, 289, 299, 300, 302, 313, 314, 317, 324, 340, 344, 345, 348, 350, 351, 359, 368, 370, 374, 388, 392, 399, 402, 409, 428, 431, 432, 434, 439, 440, 444, 455, 459, 460, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 482, 483, 485], "delimit": [31, 56, 65, 69, 95, 97, 100, 111, 112, 173, 181, 200, 208, 224, 245, 254, 255, 277, 294, 298, 305, 325, 326, 351, 352, 355, 374, 383, 398, 429, 437, 456, 465, 469, 477, 485], "maco": [31, 32, 54, 65, 69, 78, 90, 91, 93, 94, 95, 106, 114, 116, 117, 121, 124, 139, 182, 222, 263, 275, 284, 289, 299, 310, 314, 315, 326, 334, 338, 340, 344, 347, 348, 349, 359, 360, 367, 370, 371, 373, 374, 381, 399, 407, 430, 443, 457, 459, 462, 463, 466, 467, 468, 469, 471, 472, 473, 476, 481, 482, 483], "startup": [31, 32, 61, 65, 120, 182, 194, 221, 258, 272, 274, 299, 340, 351, 359, 368, 373, 386, 430, 436, 459, 471, 472, 476, 478, 479, 480, 482, 484, 485], "knowledg": [31, 102, 189, 201, 272, 273, 295, 336, 472], "compon": [31, 33, 40, 43, 65, 69, 83, 95, 103, 108, 109, 111, 114, 115, 122, 164, 166, 183, 189, 192, 201, 215, 217, 237, 238, 250, 252, 258, 259, 260, 261, 262, 287, 295, 299, 300, 302, 325, 337, 351, 352, 359, 360, 361, 371, 372, 374, 381, 388, 389, 390, 399, 409, 414, 419, 424, 426, 429, 432, 436, 437, 439, 459, 465, 469, 470, 473, 474, 477, 479, 480, 481, 482, 485], "0a5": 31, "py3k": [31, 97, 110, 348, 359, 360, 474], "63103m": 31, "2008": [31, 70, 164, 189, 230, 338, 354, 417, 430, 472, 473, 474, 477, 485], "00": [31, 69, 99, 112, 114, 189, 192, 242, 273, 324, 325, 348, 371, 388, 429, 455, 456, 459, 471, 472, 473, 477, 481, 484, 485], "53": [31, 88, 109, 144, 189, 192, 281, 324, 350, 351, 371, 394, 448, 471], "55": [31, 103, 104, 108, 109, 144, 192, 233, 290, 324, 325, 388, 445, 446, 448, 453, 454, 459, 481], "gcc": [31, 33, 60, 69, 81, 116, 182, 309, 359, 452, 459, 460, 472, 473, 475, 476, 479, 481, 485], "minor": [31, 54, 60, 63, 65, 73, 78, 87, 89, 94, 102, 109, 110, 115, 124, 128, 183, 201, 210, 213, 291, 299, 309, 319, 359, 360, 419, 460, 465, 467, 468, 469, 470, 471, 473, 475, 476, 477, 479, 480, 481, 482, 483, 485], "period": [31, 54, 70, 95, 100, 108, 158, 183, 189, 192, 218, 227, 233, 273, 275, 289, 300, 308, 329, 344, 345, 348, 369, 381, 424, 434, 439, 465, 466, 469, 470, 471, 472, 473, 477], "offici": [31, 164, 202, 216, 282, 301, 348, 374, 415, 423, 432, 465, 466, 467, 468, 471, 473, 476, 477, 478, 480, 482, 484, 485], "suno": [31, 309, 363, 485], "sunos5": [31, 359], "darwin": [31, 309, 359, 371, 466, 472, 480, 485], "1991": [31, 66, 90, 347, 430], "1995": [31, 66, 216, 430, 466], "sticht": [31, 66, 430], "mathematisch": [31, 66, 430], "centrum": [31, 66, 430], "amsterdam": [31, 371, 430], "67": [31, 232, 344, 350, 386, 388, 450, 472], "aug": [31, 104, 116, 189, 427, 468, 469], "1997": [31, 154, 430, 473, 477], "22": [31, 87, 109, 111, 114, 166, 179, 182, 189, 243, 254, 265, 273, 290, 324, 344, 348, 352, 388, 427, 430, 469, 477, 483, 484, 485], "34": [31, 109, 144, 189, 192, 233, 344, 348, 350, 434, 445, 453, 454, 477, 485], "argc": [31, 32, 33, 63, 82, 83, 197, 485], "updatepath": [31, 33, 473], "host": [31, 65, 94, 109, 112, 133, 141, 145, 148, 164, 183, 184, 216, 219, 224, 230, 249, 250, 252, 254, 255, 262, 275, 277, 289, 292, 293, 294, 299, 300, 302, 311, 319, 325, 341, 342, 344, 345, 348, 351, 353, 354, 364, 367, 393, 398, 399, 402, 411, 423, 465, 466, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 485], "condit": [31, 33, 56, 60, 65, 83, 85, 88, 95, 97, 104, 115, 116, 120, 128, 129, 131, 139, 142, 144, 150, 170, 187, 192, 196, 206, 218, 220, 235, 238, 243, 247, 255, 258, 259, 264, 273, 274, 277, 278, 287, 289, 303, 315, 320, 325, 333, 334, 344, 348, 357, 359, 365, 367, 390, 392, 404, 406, 416, 418, 420, 423, 430, 431, 432, 433, 437, 449, 456, 459, 466, 467, 468, 470, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486], "py_fatalerror": [31, 33, 40, 54, 56, 61, 484, 485], "algorithm": [31, 40, 65, 94, 95, 97, 111, 113, 114, 125, 133, 139, 147, 152, 156, 158, 164, 179, 180, 188, 189, 192, 196, 200, 209, 215, 232, 237, 243, 255, 260, 264, 265, 272, 275, 281, 283, 286, 287, 308, 314, 316, 333, 344, 348, 350, 351, 359, 369, 372, 394, 399, 411, 426, 427, 428, 434, 460, 466, 468, 469, 471, 473, 475, 476, 477, 478, 481, 483, 485], "prepend": [31, 32, 61, 65, 69, 100, 103, 109, 164, 169, 184, 209, 233, 267, 275, 277, 294, 298, 307, 318, 337, 338, 357, 361, 369, 403, 417, 425, 485], "themselv": [31, 60, 78, 83, 85, 95, 100, 107, 108, 111, 147, 158, 161, 164, 173, 181, 182, 201, 215, 237, 267, 268, 281, 289, 303, 305, 325, 338, 347, 351, 367, 369, 390, 392, 393, 394, 415, 423, 432, 434, 436, 468, 471, 472, 473, 477, 479, 480, 482, 485], "cve": [31, 351, 473, 476, 485], "5983": [31, 473], "achiev": [31, 43, 60, 72, 73, 82, 95, 100, 104, 109, 126, 164, 173, 182, 233, 243, 252, 267, 273, 326, 348, 350, 359, 367, 370, 372, 374, 379, 393, 394, 399, 405, 417, 432, 439, 440, 466, 468, 469, 471, 479, 480], "manual": [31, 43, 58, 65, 69, 72, 82, 83, 87, 89, 94, 95, 102, 103, 104, 109, 110, 114, 116, 118, 126, 133, 138, 139, 144, 170, 182, 183, 191, 200, 204, 213, 222, 232, 264, 273, 277, 289, 290, 298, 299, 308, 310, 319, 326, 334, 344, 347, 351, 361, 363, 366, 371, 373, 380, 393, 414, 417, 425, 428, 432, 438, 455, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 478, 479, 480, 482, 483, 485], "pop": [31, 33, 65, 90, 94, 95, 100, 109, 127, 129, 166, 167, 188, 192, 197, 201, 210, 243, 267, 277, 291, 299, 311, 337, 348, 351, 380, 381, 388, 392, 403, 432, 439, 446, 456, 468, 469, 470, 471, 472, 477, 479, 480, 485], "pysys_setargv": [31, 54, 473], "pyrun_simplestr": [31, 32, 63, 82, 89, 96], "home": [31, 32, 65, 69, 78, 95, 96, 102, 111, 158, 162, 173, 183, 221, 226, 229, 241, 254, 259, 277, 278, 292, 299, 300, 302, 303, 312, 316, 320, 326, 337, 340, 348, 355, 360, 367, 374, 380, 388, 403, 428, 438, 442, 457, 465, 472, 477, 478, 480, 483, 485], "w_char": 31, "simplest": [31, 60, 73, 78, 79, 82, 83, 86, 100, 104, 107, 108, 111, 112, 115, 126, 145, 164, 175, 181, 192, 200, 207, 217, 243, 273, 305, 325, 348, 370, 390, 392, 393, 425, 432, 434, 459, 466, 468, 469, 476], "simultan": [31, 60, 109, 110, 142, 156, 192, 238, 254, 264, 267, 277, 287, 336, 345, 367, 370, 380, 440, 465, 472, 476, 480, 483, 485], "twice": [31, 32, 87, 98, 104, 109, 110, 113, 114, 116, 119, 152, 169, 173, 189, 194, 221, 239, 243, 261, 281, 325, 347, 383, 404, 426, 459, 466, 468, 469, 470, 472, 473, 481, 483, 485], "concurr": [31, 65, 94, 97, 120, 130, 131, 133, 135, 136, 139, 140, 142, 176, 260, 277, 289, 305, 317, 326, 336, 347, 348, 355, 359, 370, 417, 473, 483, 485, 486], "setswitchinterv": [31, 65, 94, 193, 321, 359, 367, 454, 477, 484, 485], "potenti": [31, 33, 60, 69, 95, 104, 109, 110, 133, 173, 179, 189, 230, 232, 255, 258, 261, 267, 273, 274, 275, 289, 290, 300, 305, 311, 345, 348, 351, 369, 389, 390, 392, 398, 413, 425, 432, 436, 465, 467, 468, 472, 476, 477, 478, 479, 480, 482, 485], "meantim": [31, 128, 485], "bookkeep": [31, 65, 183, 296], "pythreadst": [31, 54, 476, 479, 484, 485], "pythreadstate_get": [31, 54, 485], "reacquir": [31, 182, 370], "py_end_allow_thread": [31, 54, 83, 483, 485], "hidden": [31, 54, 65, 95, 124, 185, 254, 303, 314, 345, 381, 388, 478, 482, 483, 484, 485], "close": [31, 60, 63, 65, 69, 78, 86, 88, 89, 95, 100, 104, 108, 109, 112, 114, 123, 124, 125, 126, 129, 133, 136, 138, 139, 141, 144, 145, 153, 158, 160, 161, 162, 163, 164, 167, 170, 173, 175, 176, 183, 190, 194, 196, 201, 206, 214, 215, 220, 221, 225, 226, 230, 232, 241, 247, 249, 250, 254, 255, 257, 262, 264, 273, 275, 276, 277, 279, 281, 283, 284, 287, 289, 290, 291, 294, 298, 299, 301, 302, 304, 307, 314, 315, 320, 321, 326, 334, 335, 336, 337, 339, 341, 342, 344, 345, 347, 348, 350, 351, 355, 356, 357, 363, 364, 365, 367, 370, 371, 374, 380, 381, 383, 390, 392, 393, 394, 399, 403, 405, 408, 409, 411, 417, 420, 421, 423, 424, 425, 426, 432, 434, 435, 439, 447, 450, 456, 459, 466, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "expand": [31, 55, 60, 65, 85, 111, 114, 116, 128, 173, 189, 192, 200, 237, 254, 261, 265, 274, 289, 298, 300, 302, 320, 325, 351, 360, 368, 369, 371, 374, 381, 393, 398, 409, 413, 414, 416, 417, 419, 424, 434, 465, 468, 469, 472, 477, 478, 479, 480, 481, 482, 483, 484, 485], "_save": 31, "pyeval_savethread": [31, 54, 477], "pyeval_restorethread": [31, 54, 477, 483, 485], "compress": [31, 65, 69, 70, 79, 100, 104, 107, 109, 123, 125, 139, 152, 164, 173, 207, 225, 231, 241, 242, 260, 262, 265, 267, 282, 287, 301, 305, 338, 348, 349, 356, 363, 405, 413, 425, 426, 455, 468, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "cryptograph": [31, 242, 299, 348, 417, 428, 430, 478, 481], "zlib": [31, 65, 94, 100, 109, 111, 116, 125, 164, 241, 242, 260, 338, 367, 426, 455, 468, 469, 471, 476, 484, 485], "hashlib": [31, 65, 94, 179, 180, 244, 260, 333, 347, 430, 460, 472, 473, 474, 485], "dedic": [31, 65, 85, 109, 173, 200, 242, 348, 351, 367, 485], "aforement": [31, 85, 478], "pygilstate_ensur": [31, 54, 483, 485], "pygilstate_releas": [31, 54], "idiom": [31, 33, 83, 95, 110, 113, 118, 120, 126, 200, 232, 289, 337, 348, 359, 406, 447, 469, 474, 477, 478, 484, 485], "pygilstate_st": [31, 54], "gstate": 31, "action": [31, 40, 52, 65, 69, 83, 85, 86, 99, 102, 111, 121, 124, 128, 129, 150, 162, 166, 175, 181, 183, 196, 207, 222, 235, 249, 255, 287, 289, 299, 303, 307, 314, 315, 331, 334, 339, 341, 345, 351, 357, 359, 363, 364, 366, 370, 381, 388, 393, 399, 403, 404, 411, 428, 430, 432, 445, 459, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 479, 484, 485], "callsomefunct": 31, "beyond": [31, 65, 78, 84, 102, 107, 108, 111, 124, 192, 204, 210, 261, 268, 274, 277, 288, 299, 325, 344, 348, 351, 390, 409, 431, 438, 467, 478, 485], "pygilstate_": 31, "unsupport": [31, 65, 99, 100, 115, 121, 126, 133, 173, 189, 232, 237, 264, 289, 290, 301, 305, 310, 344, 348, 350, 370, 390, 393, 398, 399, 409, 426, 436, 447, 465, 466, 470, 472, 477, 481, 484, 485], "thing": [31, 33, 60, 65, 69, 78, 82, 83, 85, 86, 87, 94, 95, 100, 102, 104, 107, 108, 109, 110, 112, 114, 115, 116, 126, 139, 145, 163, 165, 173, 175, 182, 187, 200, 207, 213, 218, 222, 230, 232, 234, 251, 258, 264, 273, 274, 281, 289, 298, 305, 325, 340, 348, 353, 359, 370, 372, 374, 379, 381, 390, 391, 392, 393, 394, 399, 404, 407, 434, 438, 465, 466, 467, 468, 469, 470, 471, 474, 478, 479, 483, 485], "face": [31, 114, 156, 254, 275, 308, 429, 466, 472, 474, 476, 478, 479, 480, 485], "impact": [31, 85, 173, 299, 313, 340, 348, 354, 367, 485], "solv": [31, 94, 95, 100, 104, 111, 120, 145, 254, 289, 336, 350, 363, 390, 393, 394, 431, 468, 469, 471, 475, 477, 479, 483, 485], "afterward": [31, 82, 103, 182, 189, 192, 267, 334, 347, 359, 364, 394, 425, 432, 468, 469], "pthread_atfork": 31, "accomplish": [31, 33, 95, 100, 110, 126, 183, 255, 312, 336, 414, 476, 485], "deadlock": [31, 142, 172, 219, 221, 257, 273, 289, 322, 345, 355, 359, 370, 432, 472, 477, 478, 485], "defunct": 31, "pyos_afterfork_child": [31, 54, 56, 299, 482, 483, 485], "go": [31, 40, 65, 78, 83, 85, 86, 88, 89, 95, 99, 100, 102, 104, 108, 109, 110, 111, 112, 115, 116, 121, 139, 158, 183, 195, 200, 207, 218, 243, 254, 302, 319, 325, 347, 348, 355, 359, 364, 370, 371, 373, 384, 398, 399, 450, 461, 466, 467, 468, 469, 471, 473, 474, 478, 485], "belong": [31, 40, 55, 60, 73, 76, 83, 95, 116, 172, 200, 218, 250, 264, 265, 278, 287, 298, 299, 320, 345, 347, 351, 381, 389, 404, 414, 420, 431, 432, 473, 476, 478, 485], "pyinterpreterst": [31, 32, 54, 476, 483, 484, 485], "natur": [31, 33, 76, 95, 111, 114, 120, 133, 161, 164, 182, 192, 200, 201, 237, 281, 284, 300, 314, 336, 344, 350, 381, 406, 407, 417, 434, 439, 466, 470, 472, 473, 474, 475, 477, 481, 482, 485], "cooper": [31, 97, 122, 144, 210, 232, 348, 359, 374, 430, 482, 485], "interp": [31, 374, 485], "didn": [31, 86, 89, 95, 100, 110, 111, 114, 120, 145, 175, 298, 325, 342, 394, 432, 466, 467, 468, 470, 471, 472, 473, 479, 482, 484, 485], "pyeval_threadsiniti": [31, 54, 470, 484, 485], "tstate": [31, 484, 485], "ensu": [31, 477], "_py_isfin": [31, 483], "unwant": [31, 33, 95, 482, 485], "needn": [31, 325, 354, 482], "pythreadstate_swap": [31, 54], "swap": [31, 82, 112, 164, 166, 182, 197, 289, 328, 344, 354, 367, 432, 440, 482, 485], "readi": [31, 61, 65, 90, 102, 108, 110, 138, 139, 141, 145, 150, 157, 170, 176, 182, 192, 196, 239, 249, 252, 275, 289, 334, 335, 344, 348, 385, 393, 420, 421, 466, 469, 477, 478, 480, 485], "uniqu": [31, 65, 83, 85, 103, 104, 106, 110, 114, 121, 126, 166, 182, 188, 189, 190, 196, 210, 212, 216, 219, 232, 235, 243, 261, 265, 267, 268, 277, 287, 290, 299, 305, 311, 320, 347, 348, 350, 351, 360, 370, 377, 381, 390, 392, 393, 398, 402, 430, 431, 432, 436, 444, 446, 465, 470, 471, 473, 475, 477, 482, 484, 485], "henc": [31, 69, 72, 83, 99, 109, 120, 128, 175, 178, 200, 234, 254, 258, 275, 289, 298, 302, 307, 314, 328, 337, 350, 351, 354, 355, 370, 393, 404, 431, 432, 434, 470, 479, 482, 485], "gilstat": 31, "everi": [31, 33, 40, 47, 54, 55, 65, 69, 70, 72, 76, 78, 83, 85, 87, 95, 100, 103, 104, 108, 109, 111, 114, 115, 116, 118, 122, 128, 133, 138, 144, 146, 149, 152, 164, 173, 182, 183, 189, 190, 192, 193, 196, 197, 200, 201, 203, 212, 221, 230, 232, 237, 239, 250, 252, 254, 259, 261, 265, 267, 268, 273, 275, 284, 289, 298, 299, 301, 308, 320, 325, 338, 339, 340, 345, 347, 351, 352, 355, 358, 360, 361, 369, 370, 381, 388, 390, 392, 393, 399, 404, 411, 412, 414, 417, 423, 429, 431, 432, 436, 438, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 483, 485], "pygilstate_getthisthreadst": [31, 54], "auto": [31, 65, 72, 103, 115, 188, 189, 254, 326, 337, 344, 348, 388, 393, 394, 460, 464, 466, 473, 476, 477, 481, 482, 485], "diagnost": [31, 40, 65, 85, 108, 292, 362, 393, 411, 423, 425, 462, 477, 481], "pygilstate_check": 31, "sensit": [31, 154, 173, 227, 255, 275, 282, 302, 392, 404, 432, 459, 467, 469, 470, 471, 472, 479, 485], "brace": [31, 100, 164, 287, 351, 352, 402, 434, 439, 481, 482, 485], "earlier": [31, 60, 61, 69, 82, 94, 95, 100, 102, 104, 108, 109, 110, 111, 116, 120, 121, 133, 152, 182, 183, 189, 200, 217, 237, 254, 264, 273, 275, 281, 298, 299, 305, 325, 337, 348, 355, 359, 374, 384, 392, 393, 398, 403, 404, 406, 415, 419, 428, 432, 434, 436, 439, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485], "py_block_thread": [31, 54], "py_unblock_thread": [31, 54], "pyinterpreterstate_new": [31, 54, 148, 485], "serial": [31, 39, 40, 65, 109, 173, 188, 201, 203, 204, 208, 210, 212, 213, 214, 215, 260, 268, 273, 275, 290, 304, 310, 336, 339, 342, 347, 359, 417, 450, 466, 472, 473, 475, 477, 478, 479, 484, 485], "pyinterpreterstate_clear": [31, 54, 148], "pyinterpreterstate_delet": [31, 54], "pythreadstate_new": [31, 54, 485], "pythreadstate_clear": [31, 54, 485], "on_delet": [31, 485], "pythreadstate_delet": [31, 54, 485], "pythreadstate_deletecurr": [31, 484, 485], "pythreadstate_getfram": [31, 50, 54, 484, 485], "strong": [31, 49, 50, 60, 83, 85, 97, 108, 116, 144, 176, 189, 218, 232, 247, 348, 350, 359, 406, 419, 428, 432, 467, 468, 471, 472, 476, 478, 481, 485], "pyeval_getfram": [31, 50, 54], "uint64_t": 31, "pythreadstate_getid": [31, 54, 484, 485], "pythreadstate_getinterpret": [31, 54, 484, 485], "pyinterpreterstate_get": [31, 54, 484, 485], "int64_t": 31, "pyinterpreterstate_getid": [31, 54, 482], "id": [31, 43, 58, 65, 88, 97, 104, 106, 108, 109, 121, 123, 124, 128, 136, 139, 148, 160, 166, 183, 187, 193, 200, 203, 204, 207, 210, 212, 216, 232, 237, 240, 247, 260, 265, 267, 273, 274, 275, 276, 277, 278, 287, 289, 294, 299, 305, 309, 311, 313, 316, 320, 325, 328, 334, 335, 340, 344, 347, 348, 349, 355, 356, 361, 363, 370, 374, 381, 390, 392, 393, 394, 402, 405, 406, 417, 420, 432, 434, 435, 454, 467, 468, 470, 471, 472, 482, 483, 484, 485], "doing": [31, 34, 60, 69, 78, 89, 94, 95, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 128, 139, 145, 152, 158, 164, 165, 175, 182, 192, 201, 223, 232, 242, 250, 258, 264, 271, 275, 284, 285, 289, 298, 299, 301, 305, 311, 325, 334, 339, 345, 348, 349, 352, 355, 367, 370, 374, 388, 390, 392, 393, 394, 399, 417, 425, 432, 468, 471, 472, 473, 474, 477, 479, 480, 481, 482, 485], "pyinterpreterstate_getdict": [31, 54, 485], "pymodule_getst": [31, 43, 54, 58, 100, 484, 485], "_pyframeevalfunct": [31, 485], "throwflag": [31, 63, 485], "throw": [31, 63, 65, 87, 98, 100, 104, 108, 118, 144, 167, 183, 254, 299, 367, 398, 432, 434, 435, 471, 476, 478, 481, 484, 485], "_pyinterpreterstate_getevalframefunc": [31, 485], "523": [31, 65, 469, 484, 485], "_pyinterpreterstate_setevalframefunc": [31, 485], "eval_fram": [31, 484], "pythreadstate_getdict": [31, 54, 485], "okay": [31, 126, 173, 272, 411], "pythreadstate_setasyncexc": [31, 54, 482, 485], "naiv": [31, 65, 111, 188, 210, 216, 242, 347, 350, 478, 485], "misus": [31, 43, 110, 468, 485], "pyeval_acquirethread": [31, 54, 483, 485], "pyeval_releasethread": [31, 54], "pyeval_acquirelock": [31, 54, 477, 483, 485], "pyeval_releaselock": [31, 54, 477], "perhap": [31, 60, 82, 83, 86, 89, 94, 100, 108, 109, 111, 112, 115, 116, 126, 158, 161, 183, 187, 200, 225, 250, 264, 272, 274, 289, 299, 305, 340, 344, 415, 432, 434, 435, 466, 467, 468, 470, 471, 472, 476, 483], "activ": [31, 33, 47, 56, 60, 63, 78, 82, 95, 102, 110, 111, 112, 116, 133, 138, 144, 145, 150, 158, 159, 166, 175, 183, 192, 217, 220, 225, 230, 232, 250, 254, 259, 269, 278, 289, 294, 298, 301, 303, 311, 314, 320, 334, 340, 345, 347, 348, 351, 355, 359, 370, 371, 374, 381, 388, 389, 393, 394, 403, 415, 416, 419, 440, 445, 457, 459, 465, 466, 468, 469, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 484, 485], "pyinterpreterstate_main": [31, 485], "total": [31, 32, 33, 56, 65, 83, 88, 95, 99, 100, 104, 109, 123, 133, 139, 140, 144, 166, 188, 189, 192, 196, 197, 200, 203, 212, 232, 233, 234, 237, 243, 264, 265, 267, 278, 299, 314, 325, 338, 344, 347, 348, 351, 352, 371, 372, 381, 386, 390, 392, 399, 405, 432, 434, 439, 459, 473, 477, 478, 479, 480, 481, 483, 485], "particular": [31, 33, 43, 54, 56, 60, 61, 63, 65, 69, 72, 73, 74, 76, 82, 83, 85, 95, 103, 104, 107, 108, 111, 114, 115, 116, 120, 121, 122, 126, 128, 158, 164, 167, 173, 175, 181, 183, 189, 199, 200, 210, 215, 220, 234, 239, 247, 250, 254, 255, 257, 259, 261, 265, 268, 269, 273, 274, 275, 277, 281, 282, 289, 290, 294, 298, 299, 303, 305, 308, 314, 325, 328, 334, 338, 339, 340, 342, 344, 345, 348, 349, 351, 352, 354, 355, 359, 360, 367, 369, 370, 374, 380, 381, 385, 390, 392, 393, 394, 398, 399, 403, 404, 406, 414, 415, 417, 424, 428, 430, 431, 432, 434, 435, 436, 438, 440, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485], "unsuccess": [31, 36, 257], "pymodule_fromdefandspec": [31, 43, 480], "squirrel": [31, 314], "init": [31, 43, 60, 65, 69, 83, 96, 148, 182, 210, 257, 258, 282, 291, 299, 302, 314, 321, 341, 368, 380, 471, 472, 485], "across": [31, 40, 54, 58, 60, 65, 69, 72, 78, 79, 100, 106, 110, 116, 126, 170, 173, 175, 182, 189, 197, 199, 200, 216, 260, 261, 266, 267, 272, 273, 274, 275, 289, 305, 306, 326, 334, 336, 347, 351, 359, 370, 374, 381, 383, 388, 434, 439, 469, 470, 472, 473, 476, 477, 481, 482, 483, 485], "initmodul": [31, 78], "py_endinterpret": [31, 54, 485], "haven": [31, 79, 111, 114, 158, 192, 239, 350, 393, 472, 473, 485], "insul": 31, "perfect": [31, 69, 100, 104, 112, 158, 203, 250, 254, 298, 348, 434, 465, 476, 485], "accident": [31, 109, 110, 192, 196, 200, 220, 390, 440, 467, 469, 472, 480, 485], "malici": [31, 114, 268, 274, 305, 320, 333, 413, 415, 416, 417, 418, 423, 424, 459, 472, 485], "especi": [31, 60, 70, 73, 78, 82, 83, 86, 94, 95, 107, 110, 114, 116, 133, 145, 173, 175, 189, 192, 200, 205, 212, 243, 254, 264, 268, 274, 290, 294, 299, 303, 314, 317, 319, 320, 339, 348, 349, 355, 359, 367, 406, 414, 431, 436, 438, 466, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 485], "namespac": [31, 43, 65, 78, 83, 88, 89, 95, 97, 100, 103, 104, 108, 120, 124, 128, 163, 166, 170, 174, 187, 197, 200, 214, 232, 233, 237, 254, 255, 257, 258, 259, 261, 262, 273, 274, 279, 289, 303, 305, 308, 320, 330, 337, 344, 351, 352, 358, 371, 372, 386, 389, 390, 392, 393, 394, 402, 404, 414, 415, 416, 419, 420, 431, 433, 440, 441, 449, 454, 459, 466, 467, 468, 469, 471, 473, 474, 476, 477, 479, 480, 481, 482, 483, 485, 486], "reachabl": [31, 49, 112, 200, 234, 298, 299, 432, 484, 485], "delic": [31, 60], "biject": [31, 114], "assumpt": [31, 60, 83, 86, 146, 167, 189, 258, 468, 472, 476, 477, 481, 482, 485], "broken": [31, 65, 73, 78, 109, 112, 114, 118, 170, 172, 196, 214, 219, 238, 261, 272, 289, 299, 300, 302, 311, 339, 341, 348, 351, 359, 367, 369, 370, 374, 392, 393, 394, 398, 439, 459, 471, 475, 476, 478, 479, 483, 484, 485], "presenc": [31, 33, 60, 76, 83, 85, 118, 164, 167, 192, 225, 250, 257, 258, 262, 292, 298, 314, 348, 350, 355, 359, 383, 390, 392, 431, 432, 434, 468, 469, 474, 476, 481, 485], "furthermor": [31, 94, 116, 126, 164, 261, 274, 275, 277, 330, 351, 390, 425, 431, 465, 476, 479], "ctype": [31, 65, 83, 124, 148, 170, 203, 207, 212, 221, 260, 299, 308, 351, 390, 460, 473, 478, 481, 485], "py_addpendingcal": [31, 54, 473, 484, 485], "func": [31, 32, 33, 42, 50, 56, 60, 63, 65, 69, 88, 95, 97, 98, 103, 104, 126, 128, 133, 144, 146, 150, 166, 172, 182, 183, 219, 231, 233, 261, 267, 272, 273, 289, 298, 314, 320, 338, 347, 351, 359, 367, 370, 372, 374, 384, 390, 392, 406, 424, 431, 447, 470, 472, 474, 477, 478, 481, 483, 485], "schedul": [31, 65, 90, 94, 119, 121, 124, 132, 145, 170, 172, 243, 260, 261, 328, 339, 359, 371, 381, 434, 468, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485], "queu": [31, 133, 145, 162, 183, 275, 301, 344, 366, 472], "met": [31, 60, 85, 103, 104, 108, 196, 348, 430, 471, 483], "boundari": [31, 111, 160, 189, 200, 203, 206, 212, 213, 220, 289, 305, 325, 351, 354, 367, 419, 439, 472, 485], "subinterpret": [31, 60, 146, 299, 351, 355, 367, 483, 484, 485], "quick": [31, 48, 65, 75, 85, 94, 95, 104, 109, 110, 111, 112, 115, 116, 193, 196, 220, 223, 224, 225, 275, 296, 325, 339, 359, 374, 380, 392, 394, 428, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 485], "busi": [31, 78, 95, 112, 142, 219, 275, 345, 355, 374, 410, 419, 430, 445], "pygilst": 31, "attach": [31, 43, 65, 82, 108, 109, 133, 138, 172, 189, 193, 200, 201, 203, 204, 206, 210, 212, 213, 214, 219, 254, 273, 274, 290, 291, 334, 335, 347, 359, 374, 380, 392, 394, 411, 429, 431, 432, 440, 447, 467, 469, 473, 474, 478, 481, 483, 485], "coverag": [31, 95, 110, 359, 384, 474, 476, 479, 485], "overhead": [31, 33, 85, 109, 112, 138, 194, 258, 267, 276, 299, 314, 347, 349, 351, 359, 372, 386, 390, 406, 432, 436, 466, 467, 468, 469, 471, 475, 477, 478, 481, 482, 483, 484, 485], "essenti": [31, 83, 95, 103, 112, 139, 173, 222, 232, 258, 274, 275, 281, 294, 298, 299, 330, 336, 345, 351, 359, 388, 392, 415, 426, 437, 466, 468, 473, 474, 478, 479, 484, 485], "py_tracefunc": 31, "pyeval_setprofil": [31, 468, 485], "pyeval_settrac": [31, 468, 485], "pertain": [31, 33, 60, 83, 299, 359, 380, 430, 474, 485], "pytrace_cal": 31, "pytrace_except": 31, "pytrace_lin": 31, "pytrace_return": 31, "pytrace_c_cal": 31, "pytrace_c_except": 31, "pytrace_c_return": 31, "pytrace_opcod": 31, "transfer": [31, 33, 65, 82, 83, 102, 112, 115, 141, 149, 175, 202, 203, 204, 205, 208, 209, 210, 213, 214, 215, 230, 242, 248, 249, 251, 277, 282, 289, 294, 299, 305, 342, 399, 401, 423, 434, 436, 472, 473, 477, 478, 481, 483, 485], "unwind": [31, 85, 175, 261, 432], "f_trace_lin": [31, 359, 432, 482, 485], "opcod": [31, 65, 196, 270, 305, 306, 359, 432, 469, 470, 472, 473, 476, 479, 481, 482, 483, 484, 485], "emit": [31, 32, 43, 65, 69, 85, 86, 108, 109, 121, 124, 133, 144, 183, 189, 194, 197, 220, 234, 252, 264, 267, 273, 275, 299, 305, 355, 359, 367, 381, 385, 392, 404, 415, 417, 421, 432, 434, 440, 459, 469, 472, 475, 476, 477, 479, 481, 482, 483, 484, 485], "f_trace_opcod": [31, 359, 432, 482, 485], "maintain": [31, 33, 65, 69, 70, 73, 78, 81, 83, 86, 94, 100, 102, 109, 113, 116, 126, 154, 164, 173, 175, 182, 187, 192, 199, 203, 214, 215, 218, 220, 232, 234, 255, 257, 258, 259, 261, 272, 298, 313, 314, 331, 345, 354, 359, 371, 380, 392, 404, 406, 407, 411, 416, 429, 434, 436, 438, 465, 466, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 482, 483, 484, 485], "monitor": [31, 106, 108, 109, 133, 138, 142, 192, 275, 314, 335, 345, 403, 470, 472, 481, 482, 485], "pyinterpreterstate_head": [31, 468], "head": [31, 60, 65, 109, 111, 141, 157, 158, 162, 184, 207, 229, 247, 249, 252, 294, 300, 314, 324, 339, 340, 345, 348, 357, 373, 381, 388, 399, 417, 466, 468, 478, 485], "pyinterpreterstate_next": [31, 468], "pyinterpreterstate_threadhead": [31, 468], "pythreadstate_next": [31, 468], "offer": [31, 60, 75, 76, 83, 94, 101, 102, 103, 104, 107, 108, 109, 114, 116, 163, 167, 178, 192, 223, 230, 232, 238, 242, 264, 267, 273, 274, 275, 277, 289, 300, 302, 303, 325, 326, 330, 338, 341, 344, 351, 355, 370, 371, 393, 399, 409, 412, 420, 430, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 483, 484, 485], "pthread": [31, 359, 460, 477, 485], "pythread": 31, "behalf": [31, 339, 485], "introduc": [31, 32, 43, 54, 83, 95, 99, 100, 104, 108, 109, 110, 111, 119, 128, 133, 194, 220, 242, 250, 252, 258, 259, 275, 277, 281, 289, 298, 305, 311, 314, 348, 351, 352, 354, 358, 359, 374, 380, 381, 388, 389, 390, 398, 418, 429, 431, 432, 433, 434, 436, 438, 439, 440, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "supersed": [31, 56, 258, 294, 301, 348, 466, 473, 476, 478, 482, 485], "py_tss_t": [31, 482], "539": [31, 65, 485], "py_limited_api": [31, 53, 54, 56, 58, 425, 476, 477, 482, 484, 485], "py_tss_needs_init": 31, "pythread_tss_alloc": [31, 54], "pythread_tss_fre": [31, 54], "pythread_tss_delet": [31, 54], "unassign": [31, 103, 353], "dangl": [31, 60, 83, 87, 97, 299, 338, 351, 352, 367, 431, 485], "moreov": [31, 32, 33, 232, 243, 277, 388, 390, 473, 474, 476, 485], "pythread_tss_set": [31, 54], "pythread_tss_get": [31, 54], "pythread_tss_cr": [31, 54], "pythread_tss_is_cr": [31, 54], "repeat": [31, 51, 55, 60, 65, 89, 100, 104, 112, 115, 118, 126, 152, 154, 162, 167, 182, 183, 189, 191, 196, 204, 221, 231, 232, 242, 254, 267, 272, 282, 291, 298, 301, 303, 308, 314, 325, 344, 345, 348, 351, 352, 354, 370, 372, 384, 385, 388, 390, 392, 393, 399, 409, 410, 411, 413, 431, 432, 459, 468, 469, 470, 472, 473, 477, 478, 479, 480, 481, 485], "forget": [31, 33, 65, 69, 72, 82, 83, 100, 109, 144, 192, 193, 264, 367, 373, 381, 434, 435, 446, 470, 471, 472, 476, 477, 483, 485], "pythread_create_key": [31, 54, 485], "ops": [31, 108, 128, 348], "pythread_delete_key": [31, 54], "pythread_set_key_valu": [31, 54, 479], "pythread_get_key_valu": [31, 54], "pythread_delete_key_valu": [31, 54], "pythread_reinittl": [31, 54], "py_initializefromconfig": [32, 483], "py_preiniti": [32, 56, 483], "lc_ctype": [32, 56, 65, 97, 114, 253, 272, 299, 351, 459, 481, 482, 485], "unchang": [32, 40, 100, 103, 109, 111, 118, 150, 158, 162, 173, 182, 183, 192, 215, 237, 261, 267, 272, 275, 277, 299, 300, 308, 325, 344, 347, 351, 352, 374, 388, 389, 390, 398, 425, 431, 432, 434, 439, 465, 468, 470, 471, 472, 473, 474, 475, 477, 478, 481, 482, 485], "587": [32, 65, 109, 348, 485], "config": [32, 65, 72, 75, 78, 79, 82, 89, 95, 108, 109, 124, 173, 254, 260, 272, 273, 275, 298, 338, 359, 360, 373, 374, 377, 393, 394, 411, 456, 460, 464, 469, 473, 476, 477, 479, 481, 482, 483, 485], "pyconfig_initpythonconfig": [32, 483], "pyconfig_setbytesargv": [32, 483], "pystatus_except": [32, 483], "goto": [32, 33, 65, 162, 229, 388, 460, 475, 477, 485], "pyconfig_clear": [32, 483], "pystatus_isexit": [32, 483], "exitcod": [32, 65, 170, 289, 299, 355, 367, 485], "py_exitstatusexcept": [32, 483], "pywidestringlist_append": [32, 483], "pywidestringlist_insert": [32, 483], "err_msg": [32, 359], "pystatus_ok": [32, 483], "pystatus_error": [32, 483], "pystatus_nomemori": [32, 483], "pystatus_exit": [32, 483], "pystatus_iserror": [32, 483], "wherea": [32, 83, 95, 109, 133, 142, 173, 247, 268, 273, 289, 325, 335, 359, 374, 393, 403, 406, 436, 465, 474, 476, 484, 485], "preconfigur": [32, 393], "pypreconfig_initpythonconfig": [32, 483], "preconfig": [32, 483], "pypreconfig_initisolatedconfig": [32, 483], "pymem_allocator_not_set": 32, "pymem_allocator_default": 32, "pymem_allocator_debug": 32, "pymem_allocator_malloc": 32, "pymem_allocator_malloc_debug": 32, "pymem_allocator_pymalloc": 32, "pymem_allocator_pymalloc_debug": 32, "configure_local": 32, "coerce_c_local": 32, "coerce_c_locale_warn": 32, "coerc": [32, 61, 107, 173, 192, 202, 203, 212, 268, 350, 459, 466, 474, 482, 485], "decid": [32, 86, 95, 100, 104, 108, 110, 112, 119, 150, 163, 175, 183, 189, 200, 234, 250, 275, 344, 345, 359, 370, 390, 432, 436, 440, 471, 473, 476, 485], "dev_mod": [32, 194, 359, 485], "legacy_windows_fs_encod": 32, "utf8_mod": [32, 299, 359], "filesystem_encod": [32, 56, 97, 299, 359], "filesystem_error": [32, 56, 97, 299, 359], "ifdef": [32, 65, 83, 425, 460, 466, 485], "parse_argv": [32, 485], "py_preinitializefromarg": [32, 483], "py_preinitializefrombytesarg": [32, 483], "use_environ": [32, 484], "utf8": [32, 65, 128, 164, 201, 210, 212, 214, 215, 255, 262, 291, 299, 311, 320, 342, 359, 415, 417, 459, 465, 480, 482, 485], "pythonutf8": [32, 299, 359, 459, 465, 482, 485], "_pyruntim": [32, 484, 485], "pre": [32, 33, 69, 76, 78, 81, 83, 108, 109, 111, 117, 145, 192, 197, 210, 215, 233, 243, 252, 258, 264, 267, 273, 274, 298, 302, 330, 337, 345, 359, 385, 390, 391, 393, 399, 403, 431, 440, 459, 460, 465, 466, 469, 470, 471, 473, 477, 479, 480, 481, 482, 484, 485], "pyconfig_initisolatedconfig": [32, 483], "pyconfig_setstr": [32, 483], "config_str": 32, "pyconfig_setbytesstr": [32, 56, 483], "pyconfig_setargv": [32, 483], "pyconfig_setwidestringlist": [32, 485], "pyconfig_read": [32, 56, 97, 299, 359, 483, 485], "stripp": [32, 485], "tune": [32, 233, 234, 250, 298, 325, 328, 348, 428, 466, 469], "strip": [32, 65, 69, 95, 100, 104, 111, 126, 128, 164, 173, 176, 183, 184, 189, 192, 196, 200, 207, 215, 216, 230, 232, 235, 252, 254, 274, 275, 300, 314, 332, 337, 342, 345, 350, 351, 355, 361, 367, 385, 386, 398, 404, 411, 417, 426, 446, 447, 466, 469, 474, 475, 476, 477, 480, 485], "orig_argv": [32, 65, 321, 359, 476, 485], "base_exec_prefix": [32, 65, 321, 340, 359, 403, 425, 454], "base_execut": 32, "_base_execut": 32, "__pyvenv_launcher__": [32, 485], "base_prefix": [32, 65, 237, 321, 340, 359, 403, 454], "buffered_stdio": 32, "configure_c_stdio": 32, "bytes_warn": [32, 359, 477], "warn_default_encod": [32, 264, 459, 476, 485], "encodingwarn": [32, 65, 124, 220, 459, 485], "textiowrapp": [32, 65, 124, 126, 156, 194, 225, 232, 241, 258, 264, 276, 355, 365, 426, 472, 476, 478, 479, 481, 482, 485], "opt": [32, 54, 65, 72, 78, 82, 116, 124, 173, 220, 235, 258, 298, 305, 312, 345, 436, 454, 459, 460, 469, 472, 473, 477, 479, 480, 482, 485], "check_hash_pycs_mod": 32, "check_sourc": 32, "552": [32, 65, 258, 317, 485], "determinist": [32, 65, 111, 175, 191, 194, 258, 261, 344, 347, 364, 417, 477, 482, 484, 485], "dump_ref": 32, "dump": [32, 40, 65, 78, 83, 100, 108, 109, 128, 148, 158, 178, 181, 191, 194, 218, 224, 260, 262, 268, 270, 272, 275, 279, 280, 290, 291, 292, 299, 304, 305, 310, 314, 339, 347, 349, 386, 411, 417, 423, 450, 459, 466, 467, 468, 469, 472, 473, 475, 478, 479, 480, 481, 484, 485], "aliv": [32, 60, 65, 95, 182, 188, 233, 289, 290, 311, 351, 367, 370, 406, 431, 432, 456, 459, 467, 473, 474, 477, 479, 485], "pythondumpref": [32, 60, 459, 460, 483, 485], "py_trace_ref": [32, 33, 60, 460, 476, 483, 484, 485], "faulthandl": [32, 65, 182, 191, 194, 260, 339, 367, 459, 485], "pythonfaulthandl": [32, 194, 221, 459, 478], "getfilesystemencod": [32, 63, 65, 97, 114, 299, 321, 359, 363, 425, 454, 481, 485], "android": [32, 61, 69, 272, 309, 359, 367, 481, 482, 483, 485], "vxwork": [32, 61, 179, 299, 307, 328, 476, 485], "nl_langinfo": [32, 65, 183, 253, 272, 468, 485], "codeset": [32, 65, 164, 237, 253, 272, 468, 483, 485], "announc": [32, 69, 90, 114, 119, 299, 478], "mbstowc": 32, "latin1": [32, 141, 164, 305, 320, 471, 478, 481, 484, 485], "ansi_x3": 32, "1968": 32, "getfilesystemencodeerror": [32, 65, 97, 321, 359, 454, 481], "surrogateescap": [32, 56, 61, 114, 164, 208, 215, 225, 232, 299, 344, 359, 363, 459, 477, 480, 481, 482, 485], "hash_se": 32, "use_hash_se": 32, "chosen": [32, 43, 83, 100, 108, 111, 116, 172, 192, 218, 230, 232, 242, 274, 289, 290, 298, 305, 344, 348, 354, 359, 380, 402, 419, 432, 455, 459, 465, 469, 470, 474, 485], "import_tim": 32, "importtim": [32, 459, 482, 485], "pythonprofileimporttim": [32, 459, 482, 485], "inspect": [32, 65, 83, 86, 97, 98, 100, 106, 110, 119, 126, 128, 135, 144, 167, 181, 187, 200, 232, 234, 242, 258, 259, 260, 265, 273, 277, 303, 308, 313, 319, 321, 338, 339, 340, 348, 351, 359, 363, 367, 376, 386, 392, 393, 399, 426, 431, 432, 459, 466, 467, 468, 472, 473, 485], "install_signal_handl": [32, 476, 485], "repl": [32, 120, 325, 476, 483, 485], "prompt": [32, 63, 65, 76, 89, 95, 116, 118, 120, 126, 148, 162, 163, 172, 179, 182, 195, 197, 200, 207, 214, 229, 230, 232, 236, 254, 255, 260, 289, 303, 319, 325, 326, 342, 348, 351, 355, 359, 366, 370, 373, 385, 388, 399, 403, 436, 440, 445, 448, 453, 459, 465, 469, 472, 476, 477, 479, 481, 482, 483, 484, 485], "user_site_directori": 32, "legacy_windows_stdio": 32, "malloc_stat": 32, "statist": [32, 40, 65, 103, 191, 233, 234, 260, 281, 294, 296, 314, 324, 338, 348, 359, 372, 384, 455, 459, 466, 467, 471, 473, 477, 478, 485], "pythonmallocstat": [32, 40, 459, 485], "platlibdir": [32, 65, 321, 359, 459, 460, 484, 485], "pythonplatlibdir": [32, 459, 485], "lib": [32, 33, 69, 70, 72, 78, 81, 82, 87, 89, 94, 96, 99, 100, 104, 106, 116, 118, 119, 122, 123, 126, 128, 129, 130, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 177, 178, 179, 181, 182, 187, 189, 190, 192, 195, 196, 197, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 225, 227, 228, 230, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285, 287, 289, 290, 292, 294, 295, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 322, 323, 324, 325, 327, 329, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 430, 434, 442, 454, 456, 457, 459, 460, 464, 465, 466, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485], "pythonpath_env": 32, "delim": 32, "pathsep": [32, 65, 124, 299, 340, 384, 407, 429, 459, 460], "module_search_path": 32, "module_search_paths_set": 32, "optimization_level": 32, "optim": [32, 33, 40, 55, 60, 63, 65, 69, 86, 95, 100, 111, 128, 139, 144, 147, 164, 169, 183, 197, 232, 234, 242, 250, 257, 258, 261, 270, 271, 299, 305, 306, 314, 317, 347, 358, 359, 367, 370, 371, 426, 431, 432, 440, 460, 465, 466, 468, 485, 486], "peephol": [32, 470, 471, 477, 482, 485], "__debug__": [32, 63, 65, 174, 194, 232, 257, 258, 260, 440, 454, 459, 469, 476, 485], "assert": [32, 33, 47, 63, 65, 109, 113, 118, 122, 128, 144, 174, 187, 189, 190, 193, 194, 197, 200, 220, 232, 235, 261, 270, 289, 298, 303, 305, 325, 347, 351, 367, 390, 392, 393, 404, 406, 415, 429, 431, 434, 435, 437, 439, 454, 459, 460, 469, 470, 472, 475, 477, 479, 480, 483, 484, 485], "parser_debug": 32, "pathconfig_warn": 32, "log": [32, 56, 65, 75, 103, 104, 105, 114, 124, 129, 132, 133, 154, 158, 159, 161, 170, 172, 175, 194, 200, 221, 230, 237, 243, 252, 260, 264, 281, 294, 296, 299, 311, 333, 338, 342, 348, 351, 355, 359, 361, 390, 392, 404, 411, 424, 432, 449, 455, 459, 465, 466, 467, 468, 470, 471, 472, 475, 476, 484, 485, 486], "program_nam": 32, "pythonexecut": [32, 459], "with_next_framework": 32, "python3": [32, 54, 82, 99, 100, 106, 109, 114, 116, 117, 118, 120, 194, 196, 207, 215, 221, 259, 302, 303, 340, 351, 360, 372, 386, 403, 411, 425, 442, 452, 457, 459, 460, 464, 465, 473, 476, 477, 479, 481, 483, 484, 485], "pycache_prefix": [32, 65, 169, 321, 359, 454, 459, 483, 485], "pythonpycacheprefix": [32, 359, 459, 483, 485], "quiet": [32, 69, 99, 116, 169, 192, 281, 298, 317, 359, 367, 401, 465, 470, 473, 476, 477, 480, 485], "run_command": [32, 148, 459], "run_filenam": 32, "py": [32, 33, 65, 70, 72, 73, 74, 75, 76, 78, 79, 81, 83, 86, 89, 95, 96, 97, 99, 100, 104, 106, 108, 109, 111, 114, 116, 117, 118, 119, 122, 123, 126, 128, 129, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 177, 178, 179, 181, 182, 187, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 223, 225, 227, 228, 230, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285, 287, 290, 292, 294, 295, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 367, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 434, 436, 442, 452, 453, 454, 455, 456, 457, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "run_modul": [32, 65, 148, 286, 330, 459, 485], "show_ref_count": 32, "showrefcount": [32, 459, 460, 479], "py_ref_debug": [32, 460], "site_import": 32, "no_sit": [32, 359, 477], "invert": [32, 65, 103, 104, 128, 164, 192, 197, 231, 270, 297, 351, 432, 434, 435, 485], "skip_source_first_lin": 32, "cmd": [32, 65, 74, 75, 96, 109, 126, 133, 142, 148, 150, 170, 183, 222, 229, 230, 260, 299, 303, 307, 314, 338, 342, 355, 384, 403, 459, 477, 485], "dos": [32, 69, 88, 183, 294, 298, 459, 466, 468, 477, 479, 485], "hack": [32, 94, 104, 200, 337, 399, 459, 466, 467, 468, 485], "stdio_encod": [32, 359], "stdio_error": [32, 359], "pythontracemalloc": [32, 386, 459, 485], "verbos": [32, 60, 65, 69, 99, 107, 108, 109, 116, 126, 166, 183, 193, 194, 200, 217, 233, 235, 270, 274, 298, 307, 325, 337, 338, 352, 359, 362, 363, 367, 368, 372, 386, 392, 403, 423, 432, 465, 468, 469, 470, 472, 473, 477, 479, 481, 482, 485], "warnopt": [32, 56, 65, 321, 359, 367, 404, 454, 482, 485], "filter": [32, 56, 65, 95, 104, 106, 108, 118, 124, 125, 147, 166, 183, 191, 194, 195, 196, 220, 223, 225, 226, 227, 232, 260, 267, 274, 318, 321, 334, 344, 363, 367, 392, 393, 403, 425, 429, 434, 446, 454, 459, 460, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 481, 482, 483, 484, 485], "lowest": [32, 40, 54, 108, 128, 192, 197, 228, 243, 284, 295, 348, 350, 351, 355, 370, 372, 377, 434, 466, 471, 481], "highest": [32, 89, 103, 108, 128, 139, 173, 234, 273, 284, 305, 306, 334, 339, 347, 348, 350, 351, 359, 371, 377, 434, 472, 478, 485], "prioriti": [32, 65, 103, 131, 148, 173, 188, 258, 267, 268, 275, 299, 305, 322, 328, 331, 334, 348, 351, 355, 361, 370, 380, 432, 434, 468, 469, 472, 477, 478, 479, 481, 483, 485], "revers": [32, 36, 65, 83, 90, 102, 103, 104, 112, 113, 114, 127, 146, 147, 164, 166, 167, 175, 181, 183, 187, 188, 189, 192, 193, 197, 221, 232, 243, 260, 261, 265, 267, 289, 295, 299, 302, 314, 320, 325, 337, 347, 351, 357, 383, 386, 389, 390, 392, 398, 406, 432, 444, 446, 454, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486], "pythonwarn": [32, 194, 404, 459, 473, 477, 482, 485], "write_bytecod": 32, "dont_write_bytecod": [32, 65, 321, 359, 454, 472, 477], "xoption": [32, 485], "_xoption": [32, 56, 65, 321, 359, 454, 459], "show_alloc_count": [32, 481, 484, 485], "init_python": 32, "my_program": 32, "my_execut": 32, "coercion": [32, 65, 97, 232, 299, 352, 432, 459, 460, 471, 473, 485, 486], "538": [32, 65, 459, 460, 485], "540": [32, 65, 299, 485], "pythoncoerceclocal": [32, 299, 459, 460, 482, 485], "softwarepythonpythoncorex": 32, "ypythonpath": 32, "hkey_current_us": [32, 65, 408, 409, 465], "hkey_local_machin": [32, 65, 408, 409, 465], "unset": [32, 56, 60, 65, 193, 277, 299, 301, 351, 359, 367, 402, 436, 472, 473, 482, 485], "overridden": [32, 69, 74, 78, 95, 103, 109, 116, 122, 126, 129, 145, 150, 162, 167, 173, 189, 215, 218, 232, 237, 247, 250, 251, 252, 258, 261, 264, 273, 275, 298, 299, 303, 319, 330, 341, 345, 347, 348, 351, 355, 359, 363, 370, 381, 390, 392, 399, 403, 404, 411, 432, 434, 436, 447, 459, 472, 473, 476, 478, 479, 483, 484, 485], "py_main": [32, 54, 63, 425, 465, 482, 485], "pyvenv": [32, 340, 403, 465, 478, 479, 481, 483, 485], "cfg": [32, 70, 72, 78, 79, 95, 116, 173, 274, 340, 388, 403, 465, 472, 478, 480, 481, 485], "_pth": [32, 465, 481, 482, 485], "pybuilddir": [32, 485], "txt": [32, 33, 65, 72, 79, 88, 104, 109, 114, 116, 126, 166, 172, 175, 194, 200, 215, 225, 227, 232, 237, 238, 241, 242, 250, 254, 259, 260, 262, 264, 284, 294, 298, 299, 302, 305, 338, 351, 355, 359, 363, 374, 391, 396, 403, 417, 425, 426, 439, 444, 447, 455, 456, 457, 460, 465, 466, 472, 473, 475, 477, 478, 479, 480, 481, 483, 485], "432": [32, 482, 485], "bare": [32, 69, 78, 100, 108, 109, 128, 173, 210, 298, 342, 435, 463, 465, 471, 474, 483, 485], "importlib": [32, 65, 95, 97, 106, 109, 110, 118, 232, 254, 257, 260, 261, 274, 286, 308, 317, 330, 359, 367, 386, 389, 427, 432, 437, 440, 454, 465, 475, 477, 483, 485, 486], "_init_main": 32, "_isolated_interpret": 32, "subprocess": [32, 65, 109, 130, 136, 137, 138, 148, 170, 172, 175, 215, 217, 255, 260, 289, 299, 307, 333, 337, 344, 345, 367, 373, 386, 388, 403, 404, 425, 459, 464, 469, 472, 473, 476, 477, 483, 484, 485, 486], "fork": [32, 56, 65, 78, 83, 94, 109, 124, 148, 153, 220, 234, 284, 289, 299, 315, 334, 338, 345, 348, 395, 469, 473, 479, 482, 483, 485], "_py_initializemain": 32, "move": [32, 65, 69, 73, 86, 94, 95, 100, 101, 102, 103, 107, 109, 112, 115, 118, 124, 126, 128, 148, 162, 182, 183, 185, 187, 189, 197, 203, 212, 213, 225, 226, 234, 243, 254, 267, 275, 277, 284, 299, 303, 317, 338, 367, 371, 373, 376, 380, 381, 388, 392, 394, 398, 399, 403, 417, 455, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "mayb": [32, 60, 83, 100, 104, 112, 277, 344, 404, 435, 438, 476], "meta_path": [32, 65, 97, 148, 258, 259, 308, 321, 359, 436, 440, 454, 465, 469, 478, 481, 485], "calculatin": 32, "motiv": [32, 78, 100, 103, 432, 434, 467, 469, 470, 476, 478, 483, 485], "anytim": [32, 158, 348, 351, 374], "res": [32, 40, 43, 78, 89, 111, 144, 249, 289, 325, 344, 347, 485], "varieti": [33, 61, 83, 85, 104, 114, 126, 164, 192, 201, 230, 232, 237, 279, 298, 314, 351, 355, 374, 378, 390, 411, 436, 470, 471, 472, 473, 479], "usabl": [33, 37, 46, 51, 53, 54, 56, 60, 61, 86, 95, 107, 110, 112, 133, 145, 158, 164, 182, 183, 216, 232, 252, 258, 265, 274, 282, 289, 299, 300, 344, 348, 351, 352, 355, 414, 432, 434, 436, 468, 469, 470, 471, 477, 481, 482, 485], "breviti": [33, 85, 298], "larger": [33, 40, 53, 76, 86, 95, 102, 103, 113, 123, 139, 145, 161, 182, 183, 189, 192, 222, 232, 242, 264, 265, 281, 284, 290, 299, 312, 325, 328, 347, 348, 350, 351, 352, 367, 370, 372, 426, 428, 432, 434, 439, 460, 465, 466, 468, 469, 471, 473, 474, 477, 480, 481, 482, 483, 484, 485], "techniqu": [33, 95, 104, 109, 113, 114, 145, 158, 167, 200, 208, 233, 299, 314, 325, 366, 380, 390, 393, 394, 436, 477, 483, 485], "understood": [33, 78, 82, 112, 158, 181, 250, 274, 289, 299, 303, 337, 351, 372, 401, 425, 430, 432], "cookbook": [33, 65, 73, 84, 95, 105, 108, 115, 273, 274, 275, 281, 372, 458, 477], "approach": [33, 65, 74, 78, 83, 84, 86, 89, 95, 98, 99, 100, 104, 108, 109, 113, 114, 115, 121, 158, 164, 175, 192, 196, 200, 217, 232, 257, 281, 289, 299, 302, 339, 345, 347, 350, 351, 355, 370, 372, 374, 390, 392, 394, 399, 417, 423, 425, 432, 434, 436, 465, 466, 467, 471, 472, 473, 475, 477, 478, 480, 481, 482, 485, 486], "autom": [33, 86, 94, 100, 110, 128, 230, 294, 370, 467, 473, 479, 483, 485], "extent": [33, 139, 162, 242, 264, 284, 381, 388, 430, 475, 485], "peopl": [33, 100, 103, 104, 107, 110, 114, 183, 192, 196, 200, 237, 242, 298, 350, 417, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 481, 483, 485], "familiar": [33, 86, 102, 104, 107, 109, 111, 120, 163, 201, 235, 268, 347, 436, 467, 468, 469, 472, 485], "inclus": [33, 37, 40, 65, 69, 74, 100, 126, 166, 172, 189, 191, 219, 245, 265, 271, 273, 276, 299, 314, 324, 325, 337, 350, 386, 417, 434, 438, 440, 473, 477, 482, 485], "guidelin": [33, 65, 85, 98, 170, 254, 367, 466, 467, 471, 485], "contribut": [33, 76, 187, 237, 242, 258, 314, 325, 401, 436, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "stdio": [33, 82, 83, 299, 472, 485], "stdlib": [33, 65, 83, 109, 242, 254, 360, 413, 460, 471, 477, 478, 480, 485], "processor": [33, 54, 65, 69, 78, 83, 103, 112, 114, 124, 145, 172, 289, 294, 298, 301, 309, 320, 328, 344, 399, 413, 419, 432, 466, 470, 471, 483, 484, 485], "_pi": [33, 483, 485], "writer": [33, 40, 65, 83, 86, 114, 133, 141, 156, 164, 176, 200, 224, 253, 259, 264, 299, 325, 415, 417, 420, 459, 469, 476, 480, 482, 485], "reserv": [33, 65, 112, 125, 218, 261, 265, 302, 305, 325, 328, 339, 346, 351, 370, 402, 409, 414, 423, 426, 430, 432, 440, 447, 459, 467, 472, 474, 477, 482, 483, 485], "confus": [33, 60, 78, 82, 94, 95, 102, 109, 110, 111, 113, 115, 119, 122, 144, 163, 182, 192, 196, 200, 232, 265, 275, 298, 299, 305, 325, 339, 374, 393, 399, 432, 434, 439, 440, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 479, 481, 482, 483, 485], "reader": [33, 65, 101, 107, 111, 112, 114, 133, 141, 156, 164, 166, 176, 203, 207, 209, 212, 224, 232, 249, 258, 264, 277, 278, 289, 294, 298, 305, 339, 344, 348, 391, 403, 414, 417, 418, 419, 420, 421, 432, 438, 459, 469, 471, 474, 476, 480, 485], "jeopard": 33, "portabl": [33, 62, 65, 69, 78, 79, 83, 90, 91, 109, 112, 114, 137, 183, 222, 223, 226, 256, 258, 272, 281, 284, 299, 304, 305, 309, 312, 344, 349, 363, 371, 403, 407, 425, 452, 465, 466, 469, 475, 478, 482, 483, 485], "futur": [33, 54, 65, 69, 79, 87, 94, 97, 100, 108, 110, 111, 116, 118, 120, 128, 130, 132, 134, 136, 139, 144, 145, 162, 165, 170, 171, 173, 181, 189, 200, 204, 210, 212, 214, 215, 217, 220, 232, 234, 239, 241, 242, 243, 254, 258, 259, 260, 261, 264, 274, 289, 292, 298, 299, 314, 321, 325, 331, 334, 337, 339, 341, 344, 348, 350, 362, 367, 370, 371, 389, 390, 392, 399, 402, 404, 417, 428, 432, 439, 465, 466, 467, 468, 469, 470, 471, 472, 476, 478, 479, 483, 485, 486], "pythonvers": 33, "version_info": [33, 65, 90, 110, 119, 128, 304, 321, 347, 359, 360, 403, 454, 466, 473, 475, 477, 478], "parent": [33, 56, 58, 60, 65, 69, 95, 107, 108, 109, 120, 124, 128, 139, 166, 183, 188, 195, 226, 232, 234, 255, 258, 261, 262, 270, 273, 284, 286, 287, 289, 299, 300, 302, 308, 311, 315, 318, 320, 339, 345, 348, 355, 359, 373, 374, 376, 381, 389, 393, 394, 399, 403, 414, 417, 425, 432, 436, 444, 468, 469, 470, 471, 472, 476, 478, 479, 481, 482, 485], "pythonx": [33, 82, 116, 340, 351, 359, 403, 485], "break": [33, 54, 60, 61, 65, 72, 78, 85, 86, 88, 94, 100, 102, 104, 109, 110, 111, 112, 116, 128, 138, 141, 144, 150, 158, 164, 175, 176, 182, 183, 200, 207, 209, 215, 218, 254, 258, 261, 267, 270, 277, 289, 298, 303, 305, 313, 320, 325, 332, 339, 342, 344, 348, 351, 352, 355, 359, 364, 366, 367, 369, 370, 388, 392, 398, 403, 404, 411, 415, 431, 432, 433, 434, 435, 437, 439, 444, 447, 449, 466, 467, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 482, 483, 485], "extern": [33, 65, 69, 70, 78, 79, 83, 89, 94, 95, 100, 103, 109, 113, 124, 127, 128, 158, 164, 173, 182, 190, 204, 223, 254, 257, 258, 261, 273, 278, 299, 304, 317, 320, 345, 351, 355, 367, 370, 374, 392, 411, 412, 413, 414, 416, 417, 418, 419, 420, 426, 432, 434, 465, 472, 474, 475, 477, 480, 481, 482, 483, 484, 485], "closer": [33, 218, 337, 394, 404, 473, 474, 480, 485], "py_return_non": [33, 44, 83, 470], "py_unreach": [33, 482, 485], "claus": [33, 65, 104, 109, 121, 128, 144, 175, 197, 220, 261, 289, 303, 320, 351, 359, 367, 431, 432, 433, 434, 439, 440, 447, 466, 471, 472, 476, 477, 479, 482, 483, 484, 485], "cover": [33, 54, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 86, 89, 95, 102, 108, 109, 111, 112, 114, 116, 139, 175, 200, 201, 215, 218, 250, 274, 289, 298, 325, 342, 344, 351, 355, 374, 384, 392, 398, 414, 428, 430, 431, 438, 459, 466, 467, 468, 471, 474, 476, 478, 479, 485], "tempt": [33, 86, 109, 110, 111, 372], "__builtin_unreach": [33, 485], "_py_no_return": 33, "better": [33, 65, 70, 78, 81, 82, 83, 85, 86, 94, 95, 100, 103, 104, 109, 110, 111, 112, 120, 126, 133, 147, 165, 182, 196, 200, 222, 230, 233, 235, 237, 241, 242, 243, 254, 261, 267, 272, 277, 289, 298, 299, 311, 314, 334, 347, 350, 355, 370, 371, 374, 381, 388, 392, 393, 394, 401, 417, 428, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485], "py_ab": 33, "py_min": 33, "py_max": 33, "py_stringifi": 33, "123": [33, 83, 100, 109, 110, 111, 128, 192, 228, 232, 267, 274, 344, 351, 434, 444, 450, 466, 468, 472, 473, 475, 477], "py_member_s": 33, "py_charmask": 33, "128": [33, 61, 97, 107, 109, 114, 147, 166, 183, 192, 233, 242, 265, 290, 299, 348, 388, 402, 439, 453, 471, 480, 485], "127": [33, 61, 109, 112, 114, 133, 139, 141, 176, 252, 254, 265, 289, 299, 345, 348, 351, 355, 359, 367, 386, 471, 480, 485], "255": [33, 61, 65, 97, 102, 107, 114, 119, 164, 166, 183, 232, 242, 265, 351, 354, 388, 434, 478, 480, 482, 485, 486], "py_getenv": 33, "getenv": [33, 65, 124, 299, 312], "py_unus": [33, 86], "unus": [33, 60, 86, 99, 100, 133, 156, 183, 237, 264, 265, 288, 289, 306, 319, 338, 345, 347, 352, 367, 405, 439, 465, 468, 472, 479, 482, 484, 485], "silenc": [33, 56, 126, 232, 329, 338, 401, 473, 477, 479, 484, 485], "py_deprec": [33, 483, 485], "symbol": [33, 54, 63, 65, 69, 78, 81, 83, 87, 95, 102, 109, 114, 116, 124, 128, 163, 165, 182, 183, 192, 197, 200, 218, 238, 252, 260, 270, 272, 275, 278, 299, 300, 302, 306, 325, 328, 338, 339, 344, 347, 349, 351, 359, 362, 363, 364, 366, 367, 374, 381, 388, 391, 398, 409, 414, 419, 425, 432, 435, 438, 440, 445, 465, 466, 468, 470, 471, 473, 475, 476, 477, 481, 483, 484, 485], "pyapi_func": [33, 460, 469, 483, 485], "py_oldfunct": [33, 483], "msvc": [33, 60, 87, 96, 182, 425, 470, 483, 485], "pydoc_strvar": [33, 43, 100, 460, 485], "pop_doc": 33, "rightmost": [33, 154, 164, 166, 183, 192, 267, 299, 351, 434, 470], "deque_method": 33, "pycfunct": [33, 42, 54, 55, 59, 83, 85, 86, 100, 470, 485], "deque_pop": 33, "meth_noarg": [33, 48, 55, 65, 86, 468, 469, 485], "pydoc_str": [33, 60, 86, 485], "pysqlite_row_method": 33, "pysqlite_row_key": 33, "row": [33, 65, 83, 95, 98, 157, 181, 232, 304, 374, 381, 383, 388, 439, 446, 471, 475, 477, 480, 481, 485], "treat": [33, 44, 53, 55, 56, 60, 61, 63, 69, 94, 104, 107, 110, 111, 119, 126, 144, 145, 147, 164, 173, 183, 187, 189, 192, 194, 196, 200, 201, 210, 212, 218, 223, 228, 233, 250, 252, 264, 265, 267, 273, 274, 277, 281, 298, 300, 302, 325, 337, 341, 342, 347, 348, 350, 351, 352, 355, 363, 367, 369, 372, 374, 377, 381, 390, 392, 398, 399, 404, 405, 411, 416, 417, 431, 432, 433, 434, 439, 440, 465, 466, 468, 471, 472, 473, 474, 478, 481, 483, 484, 485], "assign": [33, 36, 51, 60, 65, 69, 83, 85, 86, 89, 95, 97, 98, 99, 100, 103, 104, 114, 118, 121, 126, 128, 133, 144, 164, 173, 182, 183, 187, 192, 197, 203, 209, 210, 212, 215, 218, 219, 220, 232, 233, 250, 258, 270, 273, 277, 284, 289, 290, 298, 299, 303, 305, 312, 320, 325, 336, 337, 344, 347, 348, 350, 351, 354, 358, 359, 367, 369, 370, 381, 390, 391, 392, 393, 404, 415, 417, 426, 429, 431, 432, 433, 435, 436, 437, 439, 444, 445, 446, 453, 460, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 480, 481, 482, 484, 485, 486], "fit": [33, 69, 78, 83, 107, 112, 126, 153, 182, 183, 184, 192, 197, 200, 202, 222, 230, 243, 258, 265, 275, 298, 313, 314, 344, 354, 369, 374, 388, 392, 399, 414, 425, 428, 430, 469, 470, 473, 476, 477, 478, 479, 484, 485], "live": [33, 60, 64, 65, 69, 73, 78, 83, 94, 100, 109, 116, 158, 189, 214, 230, 234, 254, 255, 258, 259, 260, 289, 295, 299, 305, 311, 321, 347, 348, 398, 406, 414, 429, 432, 450, 465, 466, 467, 468, 474, 477, 485], "sole": [33, 54, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 95, 100, 110, 116, 167, 192, 261, 289, 290, 347, 351, 369, 389, 406, 432, 434, 473, 476, 478, 479, 480, 482, 485], "explain": [33, 40, 43, 60, 78, 81, 83, 85, 86, 87, 89, 95, 99, 102, 104, 107, 108, 109, 110, 111, 114, 115, 116, 120, 158, 182, 200, 220, 232, 242, 250, 252, 254, 267, 298, 303, 350, 351, 374, 381, 392, 393, 428, 434, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "hierarchi": [33, 43, 65, 76, 78, 95, 106, 108, 109, 122, 124, 150, 192, 232, 258, 260, 261, 268, 273, 274, 295, 296, 305, 308, 335, 339, 347, 351, 359, 374, 380, 381, 390, 392, 414, 417, 431, 434, 436, 437, 440, 469, 471, 474, 485, 486], "pylist_check": [33, 36, 89], "today": [33, 65, 82, 110, 114, 173, 188, 189, 294, 301, 347, 394, 423, 439, 455, 467, 469, 470, 472, 483], "obvious": [33, 60, 69, 70, 78, 83, 100, 104, 108, 109, 111, 116, 173, 183, 192, 273, 298, 301, 305, 314, 329, 354, 355, 367, 393, 394, 417, 465, 466, 470, 471, 481, 485], "solut": [33, 65, 70, 83, 94, 95, 100, 103, 104, 109, 110, 111, 112, 114, 116, 138, 187, 192, 218, 243, 254, 305, 325, 339, 345, 347, 350, 357, 394, 430, 436, 465, 466, 468, 469, 470, 471, 472, 473, 475, 477, 483, 485], "py_incref": [33, 49, 54, 64, 83, 85, 86, 96, 97, 476, 483, 485], "incref": [33, 60, 485], "virtual": [33, 65, 67, 83, 95, 97, 110, 116, 117, 122, 167, 182, 183, 185, 198, 217, 232, 233, 249, 259, 260, 261, 339, 344, 347, 348, 359, 363, 373, 389, 399, 411, 431, 432, 433, 436, 444, 457, 462, 466, 472, 477, 479, 481, 482, 483, 485, 486], "sizeof": [33, 40, 60, 65, 86, 124, 182, 309, 354, 359, 393, 425, 460, 485], "theori": [33, 94, 325, 430, 479, 480], "goe": [33, 78, 87, 99, 100, 103, 110, 111, 128, 139, 173, 175, 183, 184, 200, 237, 250, 254, 274, 281, 289, 298, 320, 350, 359, 385, 431, 468, 476, 477, 478], "down": [33, 65, 72, 78, 82, 86, 95, 104, 108, 110, 112, 116, 133, 158, 166, 183, 185, 197, 200, 219, 229, 243, 252, 254, 273, 281, 289, 299, 303, 314, 315, 325, 334, 339, 344, 345, 348, 359, 376, 381, 388, 392, 398, 411, 456, 459, 466, 468, 469, 473, 480, 481, 482, 483, 484, 485], "cancel": [33, 65, 131, 132, 133, 135, 140, 147, 158, 170, 172, 175, 183, 184, 195, 221, 287, 320, 331, 339, 370, 373, 376, 380, 381, 388, 392, 431, 434, 477, 482, 483, 484, 485], "we": [33, 54, 61, 69, 70, 76, 78, 79, 82, 83, 85, 86, 95, 98, 99, 100, 101, 103, 104, 108, 109, 111, 112, 113, 114, 115, 116, 120, 126, 128, 129, 133, 135, 139, 140, 141, 144, 145, 150, 162, 163, 166, 172, 173, 175, 176, 182, 189, 196, 201, 203, 207, 209, 212, 215, 218, 220, 239, 242, 243, 249, 250, 254, 257, 259, 267, 272, 274, 275, 289, 290, 295, 298, 299, 302, 305, 325, 338, 339, 345, 347, 348, 350, 351, 352, 355, 367, 372, 374, 383, 386, 390, 392, 393, 394, 399, 402, 404, 406, 411, 415, 417, 423, 426, 428, 431, 432, 434, 435, 436, 445, 450, 466, 468, 469, 471, 472, 473, 474, 476, 477, 478, 481, 483, 484, 485], "aris": [33, 76, 113, 192, 264, 273, 274, 305, 350, 389, 430, 434, 468, 470, 477, 483, 485], "pitfal": [33, 65, 111, 125, 485], "conceiv": [33, 72, 305, 363], "innoc": 33, "flow": [33, 65, 83, 104, 136, 139, 183, 184, 192, 270, 355, 364, 390, 431, 433, 434, 466, 468, 469, 471, 472, 480, 485], "pyobject_": [33, 43, 60, 471], "pynumber_": 33, "pysequence_": 33, "pymapping_": 33, "soon": [33, 94, 100, 102, 110, 111, 112, 114, 144, 200, 235, 239, 289, 299, 303, 351, 367, 415, 431, 432, 469, 471, 479, 484, 485], "term": [33, 70, 76, 83, 100, 103, 104, 110, 116, 122, 129, 144, 183, 192, 216, 220, 228, 242, 250, 258, 264, 268, 273, 281, 295, 298, 305, 314, 350, 352, 367, 371, 374, 389, 403, 405, 406, 411, 418, 430, 431, 435, 436, 470, 472, 473, 475, 478, 479, 481, 483, 485], "ownership": [33, 65, 109, 133, 141, 289, 292, 370, 472, 478], "decref": [33, 60, 61, 485], "ing": [33, 61, 89, 111, 112, 200, 210, 250, 473, 478, 482, 485], "py_xdecref": [33, 43, 49, 60, 82, 83, 86, 483, 485], "said": [33, 95, 102, 103, 173, 220, 289, 431, 432, 439, 453, 467, 468, 481, 485], "notabl": [33, 65, 142, 197, 289, 290, 339, 347, 390, 395, 404, 429, 467, 468, 469, 470, 471, 472, 473, 475, 486], "pylist_setitem": [33, 36, 54, 83], "pytuple_setitem": [33, 52, 54, 57, 82, 83], "moment": [33, 95, 100, 110, 114, 189, 220, 264, 289, 299, 350, 405, 436, 481], "pytuple_new": [33, 54, 57, 82], "1l": [33, 468, 469, 472, 473, 485], "2l": [33, 466], "grab": [33, 70, 95, 108, 109, 370, 465, 485], "incident": [33, 95, 116, 220, 389, 430, 485], "pysequence_setitem": [33, 36, 51, 54, 60, 485], "pyobject_setitem": [33, 38, 47, 54, 60, 471, 485], "refus": [33, 112, 219, 220, 278, 294, 336, 342, 344, 348, 426, 476, 485], "practic": [33, 40, 60, 65, 70, 84, 86, 94, 97, 102, 104, 105, 107, 108, 109, 110, 115, 126, 129, 145, 180, 183, 184, 192, 200, 201, 206, 230, 232, 242, 249, 255, 259, 261, 289, 290, 294, 311, 342, 348, 351, 354, 371, 374, 390, 398, 415, 429, 432, 434, 467, 468, 469, 474, 476, 477, 479, 482, 485], "rare": [33, 60, 94, 133, 139, 145, 183, 187, 200, 206, 220, 230, 242, 250, 254, 264, 273, 298, 336, 339, 344, 351, 363, 390, 394, 411, 414, 467, 468, 471, 472, 476, 478, 485], "iis": [33, 411], "friend": [33, 60, 83, 102, 109, 116, 126, 201, 234, 298, 344, 351, 359, 392, 394, 417, 429, 466, 470, 474, 479, 482, 484, 485], "regard": [33, 100, 108, 122, 175, 212, 233, 242, 299, 347, 350, 351, 355, 414, 417, 430, 465, 476, 485], "saner": 33, "set_al": [33, 233], "pyobject_length": [33, 47, 54], "pylong_fromssize_t": [33, 37, 54], "slight": [33, 69, 78, 85, 89, 95, 99, 100, 104, 108, 109, 113, 115, 116, 175, 181, 192, 203, 222, 237, 250, 264, 298, 299, 300, 303, 313, 314, 348, 351, 388, 394, 398, 436, 440, 466, 468, 469, 470, 471, 472, 473, 477, 479, 480, 482, 484, 485], "fli": [33, 65, 85, 192, 232, 253, 431, 443], "pysequence_getitem": [33, 51, 54, 60, 89, 485], "owner": [33, 65, 79, 83, 103, 106, 109, 187, 226, 289, 299, 302, 338, 349, 363, 430, 432, 456, 481, 485], "realiz": [33, 89, 110, 112, 215, 471, 472], "plumag": [33, 83, 445], "pylist_getitem": [33, 36, 54, 83, 89, 485], "sum_list": 33, "pylist_s": [33, 36, 54, 471], "pylong_check": [33, 37, 60], "bail": 33, "sum_sequ": 33, "pysequence_length": [33, 51, 54, 89], "role": [33, 76, 164, 348, 417, 474, 477, 483, 485], "integr": [33, 63, 65, 75, 83, 95, 97, 106, 109, 112, 121, 124, 192, 199, 200, 228, 232, 254, 276, 281, 295, 296, 325, 345, 347, 351, 354, 370, 373, 374, 392, 393, 394, 405, 432, 434, 461, 465, 466, 469, 470, 472, 474, 477, 478, 482, 483, 484, 485], "353": [33, 65, 476, 485, 486], "py_ssize_t_max": [33, 45, 53, 100, 485], "largest": [33, 65, 104, 173, 189, 192, 193, 230, 243, 281, 328, 350, 351, 359, 367, 428, 466, 467, 468, 469, 470, 471, 472, 478, 485], "unhandl": [33, 63, 121, 158, 163, 175, 200, 235, 254, 359, 370, 385, 399, 432, 447, 474, 485], "accompani": [33, 277, 342, 344, 432, 467, 477, 485], "claim": [33, 83, 110, 196, 206, 348, 430, 485], "unthread": [33, 466], "loop": [33, 34, 43, 61, 63, 65, 83, 102, 104, 108, 109, 111, 112, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 154, 163, 165, 182, 183, 190, 192, 195, 197, 203, 212, 225, 231, 232, 239, 260, 275, 289, 300, 302, 303, 314, 315, 325, 338, 339, 341, 344, 345, 348, 351, 352, 355, 357, 359, 367, 370, 372, 374, 385, 388, 392, 393, 416, 417, 424, 431, 432, 433, 434, 435, 439, 440, 444, 445, 460, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "preserv": [33, 40, 65, 78, 83, 94, 100, 104, 109, 112, 113, 118, 126, 172, 173, 181, 189, 192, 196, 200, 203, 208, 210, 212, 215, 220, 238, 247, 261, 267, 268, 274, 275, 298, 299, 303, 305, 306, 337, 338, 347, 351, 363, 367, 373, 389, 390, 392, 393, 406, 415, 417, 428, 431, 432, 434, 439, 465, 466, 467, 468, 469, 471, 472, 473, 477, 478, 479, 480, 482, 483, 484, 485], "overwrit": [33, 65, 83, 100, 108, 109, 118, 124, 156, 169, 183, 187, 203, 207, 212, 273, 275, 276, 299, 326, 336, 351, 363, 399, 425, 426, 431, 432, 445, 465, 469, 472, 473, 475, 477, 478, 479, 485], "reduc": [33, 40, 53, 54, 65, 85, 95, 104, 118, 133, 139, 183, 192, 231, 233, 242, 254, 264, 267, 299, 305, 314, 334, 348, 351, 367, 370, 390, 393, 406, 413, 417, 425, 439, 460, 465, 466, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "principl": [33, 83, 95, 192, 393, 411, 478], "task": [33, 65, 76, 83, 95, 97, 104, 108, 111, 114, 116, 121, 130, 132, 134, 135, 136, 140, 141, 143, 145, 154, 172, 173, 175, 176, 208, 214, 239, 243, 254, 257, 265, 275, 277, 289, 299, 302, 305, 314, 322, 328, 345, 347, 355, 370, 392, 398, 424, 434, 456, 460, 466, 468, 472, 473, 475, 476, 477, 480, 481, 482, 483, 484, 485], "lose": [33, 40, 111, 173, 189, 192, 218, 220, 247, 250, 267, 275, 277, 324, 325, 347, 355, 466, 473, 477, 485], "remind": [33, 95, 351, 445, 474, 485], "whi": [33, 65, 83, 85, 100, 102, 103, 104, 107, 108, 110, 114, 116, 120, 122, 158, 173, 182, 200, 208, 242, 258, 267, 277, 281, 289, 298, 305, 352, 392, 393, 394, 411, 432, 465, 468, 471, 473, 482, 485], "incr_item": 33, "glori": 33, "const_on": 33, "incremented_item": 33, "0l": [33, 83], "pynumber_add": [33, 45, 54], "endors": [33, 430, 485], "illustr": [33, 95, 100, 108, 109, 115, 126, 144, 179, 189, 200, 215, 247, 250, 258, 274, 337, 339, 347, 351, 355, 364, 374, 392, 399, 403, 431, 434, 470, 478], "dispos": [33, 83, 392], "crash": [33, 41, 54, 60, 83, 85, 128, 158, 182, 190, 194, 221, 254, 277, 289, 298, 303, 305, 359, 367, 466, 471, 472, 478, 479, 481, 485], "confront": [33, 418, 469], "likewis": [33, 52, 95, 118, 126, 192, 196, 215, 216, 277, 345, 388, 419, 438, 439, 477, 478], "propos": [33, 90, 97, 160, 172, 181, 233, 273, 348, 351, 355, 406, 414, 431, 434, 436, 439, 440, 466, 467, 469, 470, 471, 472, 473, 477, 481, 483, 485], "embedd": [33, 65, 251, 289, 462, 483, 485], "oppos": [33, 69, 86, 100, 102, 111, 128, 133, 163, 208, 215, 230, 254, 344, 350, 399, 436, 472, 480, 485], "worri": [33, 73, 83, 85, 100, 102, 108, 110, 114, 116, 158, 189, 201, 298, 325, 354, 392, 468, 473, 478], "guess": [33, 94, 164, 173, 190, 200, 207, 213, 216, 252, 258, 261, 272, 282, 314, 399, 411, 438, 469, 477, 485], "shell": [33, 65, 69, 83, 86, 89, 90, 95, 96, 97, 102, 104, 109, 116, 117, 131, 133, 136, 142, 158, 162, 170, 173, 183, 200, 227, 229, 238, 260, 261, 268, 278, 290, 294, 298, 299, 300, 315, 319, 338, 347, 357, 359, 367, 373, 374, 392, 403, 404, 409, 442, 443, 451, 452, 454, 455, 457, 459, 460, 463, 464, 466, 468, 470, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "fallback": [33, 65, 133, 169, 174, 190, 224, 237, 305, 338, 359, 363, 367, 381, 410, 432, 436, 476, 477, 483, 485], "front": [33, 36, 69, 100, 111, 175, 196, 208, 215, 254, 267, 302, 308, 394, 404, 411, 427, 432, 434, 459, 466, 469, 471, 473, 485], "steer": [33, 119, 467, 470, 477, 485], "getpath": [33, 485], "sometim": [33, 76, 78, 79, 83, 89, 94, 95, 102, 103, 104, 107, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, 126, 129, 144, 158, 164, 175, 182, 183, 192, 194, 196, 200, 210, 218, 220, 230, 232, 233, 242, 247, 254, 261, 265, 267, 274, 277, 294, 298, 299, 305, 312, 314, 325, 348, 349, 371, 374, 388, 390, 393, 394, 399, 417, 432, 434, 438, 440, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485], "notic": [33, 54, 73, 78, 79, 83, 86, 99, 100, 108, 109, 111, 112, 113, 115, 116, 118, 129, 138, 139, 164, 173, 179, 190, 192, 209, 225, 234, 238, 258, 264, 275, 289, 338, 344, 347, 359, 360, 367, 374, 390, 430, 432, 434, 465, 467, 469, 473, 476, 477, 478, 482, 483, 485], "tend": [33, 95, 156, 196, 233, 311, 314, 475], "specialbuild": [33, 460], "remaind": [33, 45, 65, 85, 106, 111, 126, 162, 189, 192, 215, 267, 274, 281, 296, 298, 300, 302, 325, 351, 374, 434, 453, 472, 482, 485], "py_debug": [33, 460, 476, 483, 485], "pydebug": [33, 359, 460, 469, 476, 479, 485], "_debug": 33, "doubli": [33, 60, 95, 473], "link": [33, 54, 60, 63, 65, 69, 78, 81, 83, 84, 87, 88, 89, 94, 95, 96, 97, 109, 112, 116, 124, 128, 148, 167, 169, 184, 189, 207, 219, 238, 247, 250, 252, 265, 267, 272, 273, 299, 300, 302, 334, 338, 348, 349, 362, 363, 367, 374, 380, 381, 403, 406, 407, 409, 411, 417, 418, 432, 460, 466, 469, 470, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 485], "pyiter_check": [34, 54, 60, 485], "pyiter_next": [34, 54, 60], "pyaiter_check": [34, 54, 485], "asynciter": [34, 47, 65, 167, 188, 193, 351, 390, 480, 485], "pyobject_getit": [34, 47, 52, 54, 60], "pysendresult": [34, 60], "enum": [34, 40, 65, 126, 169, 188, 248, 260, 261, 268, 314, 317, 325, 339, 348, 389, 432, 445, 476, 478, 485], "pyiter_send": [34, 54, 60, 476, 485], "presult": 34, "pygen_return": 34, "pygen_next": 34, "pygen_error": 34, "__getitem__": [35, 38, 51, 60, 61, 65, 90, 97, 106, 109, 113, 122, 166, 167, 182, 201, 203, 210, 212, 225, 231, 232, 277, 289, 291, 297, 325, 351, 352, 368, 390, 393, 394, 411, 414, 417, 431, 434, 456, 468, 469, 470, 474, 477, 481, 483, 485], "pyseqiter_typ": [35, 54], "pyseqiter_new": [35, 54], "pyseqiter_check": 35, "seq": [35, 61, 95, 166, 227, 232, 267, 297, 324, 351, 466, 470, 477], "subscript": [35, 60, 65, 97, 182, 220, 254, 270, 351, 390, 432, 440, 453, 459, 469, 472, 476, 484, 485], "pycalliter_typ": [35, 54], "pycalliter_new": [35, 54], "pycalliter_check": 35, "pylist_typ": [36, 54, 86], "pylist_checkexact": 36, "pylist_get_s": 36, "pylist_get_item": [36, 54], "pylist_set_item": [36, 476, 485], "pylist_insert": [36, 54], "pylist_append": [36, 54], "pylist_getslic": [36, 54], "pylist_setslic": [36, 54], "itemlist": 36, "delet": [36, 47, 49, 51, 55, 56, 60, 61, 65, 83, 85, 86, 98, 100, 103, 106, 109, 111, 115, 119, 122, 128, 145, 150, 166, 173, 181, 183, 184, 185, 187, 190, 193, 196, 197, 203, 207, 212, 213, 220, 225, 230, 232, 233, 254, 255, 258, 262, 270, 275, 277, 289, 299, 303, 311, 336, 338, 340, 347, 349, 351, 359, 365, 367, 370, 373, 374, 381, 388, 399, 403, 404, 406, 409, 411, 425, 428, 431, 432, 436, 439, 440, 442, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 485, 486], "pylist_sort": [36, 54], "sort": [36, 65, 78, 86, 87, 90, 94, 97, 99, 104, 115, 118, 126, 154, 158, 166, 173, 179, 182, 190, 192, 196, 200, 215, 232, 233, 238, 239, 243, 255, 259, 260, 261, 262, 265, 267, 268, 272, 277, 289, 297, 298, 299, 302, 310, 313, 314, 322, 324, 325, 334, 342, 347, 350, 351, 363, 367, 386, 388, 392, 399, 411, 414, 417, 426, 432, 434, 444, 445, 446, 454, 456, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 482, 483, 484, 485], "pylist_revers": [36, 54], "pylist_astupl": [36, 54], "pylong_a": 37, "distinguish": [37, 60, 65, 69, 76, 78, 83, 128, 161, 167, 183, 193, 197, 200, 204, 232, 250, 261, 274, 281, 320, 348, 360, 381, 404, 428, 432, 434, 436, 465, 467, 468, 473, 476, 478, 479, 485], "pylongobject": [37, 54], "pylong_typ": [37, 54], "pylong_checkexact": 37, "256": [37, 40, 61, 97, 107, 164, 179, 183, 192, 232, 242, 276, 332, 348, 351, 363, 432, 453, 470, 471, 483, 484, 485], "pylong_fromunsignedlong": [37, 54, 485], "pylong_fromsize_t": [37, 54, 485], "pylong_fromlonglong": [37, 54], "pylong_fromunsignedlonglong": [37, 54, 485], "pylong_fromdoubl": [37, 54, 484, 485], "pylong_fromstr": [37, 54], "radix": [37, 65, 192, 272, 296, 359, 439, 485], "decim": [37, 56, 61, 65, 88, 95, 111, 114, 161, 164, 173, 184, 189, 228, 232, 233, 247, 260, 265, 267, 268, 272, 274, 281, 296, 298, 314, 325, 350, 351, 352, 359, 368, 370, 371, 383, 391, 392, 423, 432, 434, 439, 448, 449, 453, 459, 460, 466, 471, 472, 473, 475, 476, 483, 485, 486], "36": [37, 108, 114, 232, 267, 277, 289, 324, 328, 350, 352, 371, 446, 450, 453, 455, 456, 457, 476, 477, 479, 483, 484, 485], "underscor": [37, 54, 65, 69, 73, 81, 95, 100, 109, 152, 158, 164, 182, 192, 203, 212, 218, 232, 277, 313, 323, 325, 337, 351, 352, 359, 374, 393, 411, 426, 431, 432, 433, 434, 438, 439, 440, 465, 472, 474, 475, 485], "digit": [37, 56, 61, 65, 73, 95, 111, 112, 114, 123, 147, 149, 152, 161, 164, 166, 179, 184, 189, 192, 200, 228, 230, 242, 251, 265, 272, 274, 281, 294, 299, 325, 327, 332, 348, 351, 352, 359, 367, 368, 371, 372, 374, 383, 391, 392, 398, 399, 402, 417, 428, 430, 439, 448, 460, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 485], "pylong_fromunicodeobject": [37, 476], "pylong_fromvoidptr": [37, 54], "pylong_asvoidptr": [37, 54], "__int__": [37, 60, 65, 232, 390, 393, 432, 471, 473, 476, 482, 483, 485], "pylong_aslongandoverflow": [37, 54, 473, 477], "long_min": 37, "pylong_aslonglong": [37, 54], "pylong_aslonglongandoverflow": [37, 54, 473, 477], "llong_max": 37, "llong_min": 37, "pylong_asssize_t": [37, 54], "pylong": [37, 475, 485], "pylong_asunsignedlong": [37, 54], "pylong_assize_t": [37, 54], "pylong_asunsignedlonglong": [37, 54, 475], "pylong_asunsignedlongmask": [37, 54], "reduct": [37, 65, 178, 304, 351, 478, 485], "modulo": [37, 109, 192, 220, 232, 297, 339, 351, 381, 432, 434, 450, 469, 473, 477, 483, 485], "ulong_max": 37, "pylong_asunsignedlonglongmask": [37, 54, 485], "ullong_max": 37, "pylong_asdoubl": [37, 54, 485], "assur": [37, 86, 95, 161, 233, 281, 289, 383, 432, 473, 475, 477, 485], "pyobject_delitem": [38, 47, 54, 60, 469], "pymapping_check": [38, 54, 60], "pymapping_s": [38, 54, 60, 485], "pymapping_length": [38, 54], "pymapping_getitemstr": [38, 54], "pymapping_setitemstr": [38, 54, 485], "pymapping_delitem": 38, "del": [38, 47, 51, 55, 65, 83, 86, 95, 98, 103, 128, 150, 166, 184, 197, 203, 212, 232, 234, 237, 243, 254, 261, 270, 277, 289, 290, 297, 298, 299, 305, 336, 351, 393, 406, 431, 432, 433, 434, 435, 436, 437, 439, 444, 445, 449, 456, 466, 467, 469, 471, 472, 473, 477, 485], "pymapping_delitemstr": 38, "pymapping_haskey": [38, 54], "pymapping_haskeystr": [38, 54], "pymapping_valu": [38, 54, 482, 485], "pymapping_item": [38, 54, 482, 485], "unmarshal": [39, 423, 469, 471, 481, 485], "py_marshal_vers": 39, "pymarshal_writelongtofil": 39, "pymarshal_writeobjecttofil": 39, "pymarshal_writeobjecttostr": 39, "pymarshal_readlongfromfil": 39, "pymarshal_readshortfromfil": 39, "pymarshal_readobjectfromfil": 39, "pymarshal_readlastobjectfromfil": 39, "aggress": [39, 351, 393, 471, 485], "pymarshal_readobjectfromstr": 39, "aspect": [40, 82, 83, 100, 109, 111, 115, 187, 189, 200, 218, 274, 299, 342, 432, 477, 481], "prealloc": 40, "room": [40, 52, 350, 393, 438, 450, 474, 485], "polici": [40, 54, 65, 109, 130, 133, 137, 201, 203, 207, 208, 210, 212, 213, 214, 220, 232, 250, 291, 299, 342, 345, 348, 403, 460, 465, 467, 470, 473, 476, 479, 480, 481, 485], "adapt": [40, 65, 95, 109, 128, 147, 182, 192, 232, 237, 273, 303, 304, 338, 344, 348, 374, 388, 466, 467, 471, 473, 475, 476, 481, 485], "peculiar": [40, 72, 95, 261, 299], "tradeoff": [40, 485], "deleg": [40, 60, 65, 108, 109, 145, 197, 232, 233, 273, 274, 275, 281, 295, 305, 330, 389, 392, 394, 432, 434, 436, 474, 477, 481, 483, 484, 485, 486], "demand": [40, 61, 103, 173, 289, 298, 393, 465, 476, 480, 484, 485], "corrupt": [40, 56, 103, 114, 152, 183, 219, 222, 250, 276, 277, 289, 305, 347, 351, 465, 482, 483, 485], "calloc": [40, 480, 485], "consequ": [40, 60, 72, 83, 95, 154, 167, 173, 243, 261, 289, 299, 339, 344, 351, 432, 434, 438, 439, 447, 471, 473, 474, 477, 478, 479, 480, 482, 485], "bufsiz": [40, 65, 83, 126, 133, 301, 344, 355, 357, 363, 415, 416, 428, 470, 483, 485], "exclus": [40, 45, 60, 65, 76, 95, 111, 112, 116, 124, 156, 157, 183, 192, 222, 255, 264, 268, 275, 276, 277, 297, 298, 299, 325, 347, 350, 351, 363, 384, 386, 407, 426, 430, 432, 434, 472, 478, 479, 480, 483, 484, 485], "accur": [40, 100, 110, 182, 214, 252, 281, 298, 314, 359, 363, 371, 372, 374, 386, 405, 426, 470, 472, 473, 477, 479, 481, 482, 483, 485], "footprint": [40, 102, 234, 460, 478, 481, 483, 485], "compact": [40, 95, 111, 114, 128, 158, 196, 204, 205, 268, 305, 313, 323, 354, 385, 434, 469, 478, 479, 481, 485], "procedur": [40, 69, 82, 90, 104, 127, 158, 164, 182, 300, 314, 342, 353, 367, 388, 422, 423, 440, 445, 467, 468, 471, 477], "pythonmalloc": [40, 65, 194, 459, 460, 485], "shutdown": [40, 65, 97, 112, 124, 146, 170, 172, 219, 220, 234, 255, 262, 273, 275, 289, 290, 339, 344, 345, 348, 370, 406, 409, 432, 434, 459, 472, 477, 479, 480, 482, 484, 485], "pymemallocatordomain": 40, "hard": [40, 65, 69, 74, 82, 83, 86, 100, 102, 103, 104, 109, 110, 111, 112, 169, 173, 181, 182, 183, 189, 196, 200, 209, 232, 273, 274, 298, 299, 302, 303, 314, 325, 328, 347, 348, 355, 363, 367, 380, 394, 465, 466, 477, 479, 482, 483, 485], "pyobject_malloc": [40, 54, 469, 471, 479, 481, 485], "pymem_malloc": [40, 54, 61, 63, 469, 471, 479, 481, 485], "nelem": 40, "elsiz": 40, "model": [40, 57, 59, 65, 94, 95, 103, 133, 175, 189, 192, 201, 203, 212, 260, 267, 279, 289, 299, 312, 324, 342, 348, 350, 370, 373, 388, 399, 415, 416, 419, 437, 465, 466, 468, 469, 470, 471, 477, 479, 480, 481, 482, 483, 485, 486], "ansi": [40, 65, 97, 151, 182, 272, 299, 359, 371, 465, 466, 478, 481, 483, 485], "pymem_calloc": [40, 54, 480, 485], "pymem_realloc": [40, 54, 63, 469, 471, 479], "pymem_new": [40, 467], "pymem_res": 40, "reassign": [40, 86, 313, 483, 485], "pymem_del": [40, 467], "intercept": [40, 144, 350, 359, 481], "pyobject_calloc": [40, 54, 480, 485], "pyobject_realloc": [40, 54, 469, 471, 485], "pyobject_fre": [40, 54, 60, 469, 471, 481, 485], "pymalloc_debug": [40, 459, 485], "malloc_debug": [40, 459], "legend": 40, "pymemallocatorex": [40, 480], "new_siz": 40, "pymemalloc": [40, 480], "renam": [40, 60, 65, 69, 78, 86, 94, 109, 116, 118, 124, 148, 166, 173, 220, 226, 230, 254, 255, 262, 275, 277, 299, 302, 317, 334, 338, 349, 385, 392, 393, 425, 456, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 485], "pymem_domain_raw": [40, 459], "pymem_domain_mem": [40, 459, 481, 485], "pymem_domain_obj": [40, 459, 481], "reinstal": [40, 116, 465], "setup": [40, 65, 69, 70, 73, 74, 75, 76, 79, 81, 83, 86, 102, 109, 115, 116, 175, 193, 199, 200, 229, 254, 262, 302, 345, 348, 367, 372, 388, 392, 393, 394, 457, 459, 460, 463, 465, 466, 467, 468, 469, 471, 472, 473, 477, 478, 481, 483, 485], "recogniz": [40, 167, 192, 485], "pattern": [40, 60, 65, 71, 78, 86, 95, 103, 108, 113, 114, 148, 150, 169, 175, 184, 193, 195, 196, 197, 226, 233, 254, 255, 260, 267, 270, 273, 281, 287, 289, 290, 294, 298, 299, 302, 303, 314, 325, 338, 351, 352, 367, 368, 374, 376, 386, 388, 390, 392, 393, 394, 406, 433, 434, 435, 439, 445, 460, 467, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 485], "0xcd": [40, 485], "pymem_cleanbyt": 40, "0xdd": [40, 485], "pymem_deadbyt": 40, "surround": [40, 89, 104, 111, 173, 181, 196, 232, 251, 254, 272, 352, 355, 379, 403, 431, 433, 434, 435, 439, 454, 466, 471, 472, 473, 474, 475, 481, 485], "0xfd": [40, 485], "pymem_forbiddenbyt": 40, "underflow": [40, 65, 192, 194, 296, 460, 481, 485], "layout": [40, 60, 65, 73, 78, 86, 108, 109, 116, 164, 195, 220, 273, 277, 348, 354, 360, 373, 374, 378, 402, 432, 436, 449, 465, 472, 478, 479, 485], "treatment": [40, 47, 69, 109, 201, 289, 350, 398, 466, 474], "ask": [40, 69, 95, 97, 100, 102, 109, 145, 167, 201, 230, 240, 242, 250, 254, 264, 275, 298, 303, 316, 325, 338, 346, 348, 351, 399, 416, 417, 418, 426, 434, 436, 440, 465, 470, 471, 472, 473, 474, 485], "easier": [40, 70, 72, 73, 75, 78, 86, 94, 97, 100, 102, 104, 106, 110, 111, 113, 116, 121, 129, 145, 167, 172, 175, 181, 200, 213, 258, 265, 275, 299, 314, 319, 325, 351, 352, 367, 379, 392, 393, 394, 398, 411, 438, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 485], "excess": [40, 95, 116, 118, 128, 139, 182, 192, 249, 273, 327, 371, 431, 434, 476, 485], "overwritten": [40, 79, 100, 109, 116, 250, 277, 302, 314, 338, 359, 390, 431, 473, 478, 485], "smaller": [40, 61, 102, 103, 111, 112, 139, 182, 189, 192, 196, 197, 233, 265, 276, 281, 299, 305, 314, 350, 352, 354, 360, 374, 381, 386, 388, 398, 415, 428, 432, 434, 439, 467, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 483, 485], "pymem_debug_serialno": [40, 485], "excel": [40, 65, 95, 114, 181, 200, 207, 224, 469, 470, 474], "breakpoint": [40, 65, 89, 95, 129, 148, 150, 154, 191, 232, 254, 260, 303, 359, 459, 471, 476, 477, 485], "captur": [40, 65, 102, 104, 109, 128, 175, 182, 189, 200, 271, 273, 299, 325, 348, 352, 355, 359, 362, 367, 385, 390, 404, 433, 470, 476, 478, 479, 480, 482, 485], "instant": [40, 65, 102, 191, 299, 388], "bumpserialno": 40, "obmalloc": [40, 467, 469, 471, 479, 484, 485], "intact": [40, 109, 173, 189, 210, 212, 215, 225, 275, 352, 411, 470], "ve": [40, 86, 99, 100, 104, 106, 107, 109, 111, 112, 114, 116, 120, 159, 259, 277, 298, 302, 347, 374, 466, 467, 468, 469, 470, 472, 473, 475, 479, 485], "provok": 40, "0xcb": [40, 481, 485], "0xdb": [40, 481, 485], "0xfb": [40, 481, 485], "crt": [40, 65, 348, 473, 479, 485], "512": [40, 137, 179, 242, 299, 334, 363, 428, 450, 471, 477, 481, 483, 485], "kib": [40, 121, 141, 272, 276, 299, 338, 370, 386, 483, 485], "virtualalloc": [40, 479], "virtualfre": 40, "mmap": [40, 65, 148, 220, 260, 266, 466, 472, 477, 480, 481, 485], "munmap": 40, "pyobjectarenaalloc": 40, "pytracemalloc_track": [40, 482], "uintptr_t": 40, "pytracemalloc_untrack": [40, 482], "untrack": [40, 86, 475, 485], "rewritten": [40, 100, 200, 201, 242, 289, 440, 466, 467, 468, 469, 472, 473, 475, 477, 478, 479, 481, 482, 483, 485], "inde": [40, 86, 112, 142, 202, 348], "label": [40, 65, 88, 104, 164, 195, 197, 218, 254, 277, 287, 298, 324, 337, 348, 352, 373, 374, 380, 390, 432, 465, 468, 469, 477, 479, 482, 485], "buf1": 40, "buf2": 40, "buf3": 40, "aim": [40, 82, 85, 107, 110, 114, 276, 287, 350, 359, 390, 417, 465, 468, 470, 471, 479, 483], "pymemoryview_fromobject": [41, 54], "discret": [41, 283, 345, 350, 483], "pymemoryview_frommemori": [41, 54, 478], "pybuf_read": 41, "pymemoryview_getcontigu": [41, 54], "buffertyp": 41, "ortran": 41, "pymemoryview_check": 41, "pymemoryview_get_buff": 41, "mview": 41, "pymemoryview_get_bas": 41, "pymethod_new": 42, "pyinstancemethod_typ": 42, "pyinstancemethod_check": 42, "pyinstancemethod_new": 42, "pyinstancemethod_funct": 42, "im": [42, 95, 102, 351], "pyinstancemethod_get_funct": 42, "pymethod_typ": [42, 103], "methodtyp": [42, 65, 103, 188, 389], "pymethod_check": 42, "pymethod_funct": 42, "pymethod_get_funct": 42, "pymethod_self": 42, "pymethod_get_self": 42, "pymodule_typ": [43, 54], "moduletyp": [43, 65, 188, 258, 389, 432, 436, 469, 480, 485], "pymodule_check": 43, "pymodule_checkexact": 43, "pymodule_newobject": [43, 54], "__doc__": [43, 60, 65, 85, 90, 94, 97, 103, 163, 166, 188, 200, 218, 232, 233, 261, 295, 319, 326, 329, 389, 431, 432, 439, 444, 445, 454, 467, 468, 469, 474, 476, 477, 479, 480, 484, 485], "__package__": [43, 65, 188, 232, 258, 330, 389, 436, 454, 472, 476, 478, 479, 481, 485], "pymodule_new": [43, 54], "pymodule_getdict": [43, 54], "__dict__": [43, 47, 60, 65, 95, 98, 103, 109, 122, 150, 155, 200, 232, 233, 258, 261, 273, 275, 303, 305, 314, 351, 389, 423, 431, 432, 436, 444, 467, 468, 473, 474, 476, 480, 481, 485], "pymodule_": 43, "pymodule_getnameobject": [43, 54], "pymodule_getnam": [43, 54], "pymoduledef": [43, 54, 81, 82, 83, 86, 100, 484, 485], "m_size": [43, 86, 484, 485], "pymodule_getdef": [43, 54], "pymodule_getfilenameobject": [43, 54], "pymodule_getfilenam": [43, 54], "pymoduledef_bas": [43, 54], "m_base": 43, "pymoduledef_head_init": [43, 82, 83, 86], "m_name": [43, 86], "m_doc": [43, 86], "m_free": [43, 484, 485], "3121": [43, 474, 485], "m_method": [43, 485], "pymoduledef_slot": 43, "m_slot": 43, "m_reload": 43, "m_travers": [43, 484, 485], "py_mod_exec": [43, 484, 485], "m_clear": [43, 484, 485], "collector": [43, 48, 60, 65, 83, 86, 95, 97, 104, 221, 260, 289, 298, 321, 359, 367, 406, 415, 432, 460, 466, 468, 471, 472, 473, 475, 476, 478, 479, 482, 484, 485], "freefunc": [43, 60, 85], "pymodule_create2": [43, 54], "module_api_vers": 43, "python_api_vers": [43, 469], "pymodule_addobjectref": [43, 54, 476, 485], "split": [43, 61, 65, 69, 72, 78, 88, 94, 95, 113, 126, 147, 162, 164, 173, 192, 196, 203, 207, 209, 215, 226, 229, 235, 237, 255, 267, 287, 297, 298, 299, 300, 303, 309, 313, 324, 325, 327, 337, 342, 347, 348, 351, 352, 355, 368, 369, 383, 390, 392, 398, 403, 411, 419, 439, 444, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "__new__": [43, 60, 65, 86, 90, 95, 100, 103, 127, 148, 188, 210, 232, 280, 284, 302, 305, 344, 386, 389, 393, 432, 479, 481, 483, 485], "__init__": [43, 60, 65, 73, 76, 78, 86, 88, 89, 90, 95, 97, 100, 103, 108, 109, 112, 113, 120, 124, 126, 129, 139, 145, 155, 166, 167, 173, 175, 178, 181, 182, 188, 189, 190, 196, 201, 221, 232, 233, 245, 248, 252, 258, 259, 267, 268, 273, 274, 275, 287, 289, 305, 308, 314, 321, 326, 339, 347, 352, 367, 368, 370, 374, 386, 389, 390, 392, 393, 394, 403, 406, 411, 414, 418, 426, 432, 436, 444, 454, 456, 466, 467, 468, 469, 471, 472, 476, 478, 481, 483, 485], "pyinit_modulenam": [43, 81], "pymoduledef_init": [43, 54], "py_mod_cr": 43, "create_modul": [43, 65, 258, 286, 427, 436, 476, 480, 481, 485], "modulespec": [43, 65, 97, 258, 286, 308, 330, 359, 389, 436], "451": [43, 65, 97, 166, 248, 258, 308, 330, 359, 436, 476, 480, 485], "symlink": [43, 65, 69, 79, 124, 148, 169, 238, 298, 299, 300, 302, 317, 338, 403, 454, 463, 464, 470, 472, 476, 477, 478, 479, 483, 485], "exec_modul": [43, 65, 258, 286, 427, 436, 476, 479, 480, 481, 485], "489": [43, 65, 81, 83, 258, 484, 485], "hood": [43, 108, 109, 111, 367, 393, 394, 471, 472, 477], "pymodule_execdef": [43, 54, 480], "pymodule_fromdefandspec2": [43, 54, 480], "pymodule_setdocstr": [43, 54], "pymodule_addfunct": [43, 54], "lack": [43, 44, 95, 107, 181, 220, 223, 254, 258, 289, 299, 300, 342, 348, 426, 433, 434, 465, 466, 467, 472, 474, 478, 479, 480, 482, 485], "add_spam": 43, "spam": [43, 83, 87, 109, 111, 115, 126, 176, 181, 182, 225, 232, 233, 237, 249, 250, 252, 258, 261, 264, 274, 302, 303, 313, 319, 325, 336, 340, 347, 351, 355, 363, 385, 393, 394, 399, 417, 426, 432, 434, 436, 444, 445, 447, 450, 453, 454, 466, 472, 480], "pymodule_addobject": [43, 54, 83, 86, 466, 476, 485], "easi": [43, 60, 65, 70, 72, 83, 94, 95, 99, 100, 102, 107, 109, 111, 112, 113, 116, 126, 142, 158, 173, 175, 181, 189, 192, 197, 200, 201, 211, 215, 218, 233, 235, 274, 298, 299, 305, 324, 337, 344, 348, 350, 351, 369, 392, 393, 394, 411, 415, 425, 432, 434, 467, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 485, 486], "stole": 43, "pymodule_addintconst": [43, 54, 466], "pymodule_addstringconst": [43, 54, 466], "pymodule_addintmacro": [43, 472], "af_inet": [43, 65, 109, 112, 133, 145, 289, 344, 345, 348, 367, 472, 485], "pymodule_addstringmacro": [43, 472], "pymodule_addtyp": [43, 54, 484, 485], "tp_name": [43, 58, 60, 85, 86, 100, 485], "pystate_findmodul": [43, 54], "pystate_addmodul": [43, 54, 485], "beforehand": [43, 436], "unnecessari": [43, 83, 95, 108, 126, 139, 154, 277, 289, 290, 294, 351, 359, 386, 390, 394, 398, 414, 440, 467, 468, 470, 473, 480, 483, 485], "harmless": [43, 83, 100, 200, 381, 485], "pystate_removemodul": [43, 54], "suffici": [44, 60, 78, 83, 89, 106, 107, 108, 121, 128, 145, 164, 189, 190, 192, 200, 281, 299, 318, 348, 351, 370, 392, 394, 407, 419, 436, 440, 465, 477, 478, 481, 482, 485], "pynone_check": 44, "pynumber_check": [45, 54, 483], "o1": [45, 47, 51, 88, 187], "o2": [45, 47, 51, 88, 187, 312, 406], "pynumber_subtract": [45, 52, 54], "subtract": [45, 65, 147, 166, 188, 189, 192, 265, 276, 281, 296, 314, 350, 388, 423, 434, 466, 469, 472, 473, 477, 482, 485], "pynumber_multipli": [45, 54], "multipli": [45, 65, 82, 86, 147, 172, 182, 189, 192, 206, 275, 296, 314, 324, 351, 352, 359, 423, 434, 466, 469, 470, 472, 476, 477, 485], "pynumber_matrixmultipli": [45, 54, 480], "matrix": [45, 65, 95, 157, 232, 388, 406, 430, 434, 446, 467, 483, 485], "pynumber_floordivid": [45, 54], "floor": [45, 65, 95, 97, 110, 172, 189, 192, 200, 228, 232, 281, 295, 296, 351, 432, 434, 453, 468, 472, 483, 484, 485], "divid": [45, 65, 94, 102, 111, 147, 173, 189, 192, 197, 200, 201, 232, 254, 281, 290, 296, 302, 314, 350, 372, 380, 423, 439, 447, 472, 477, 478, 479, 483, 485], "pynumber_truedivid": [45, 54], "approxim": [45, 61, 65, 89, 95, 161, 164, 172, 183, 192, 196, 200, 209, 220, 228, 254, 281, 286, 289, 350, 351, 354, 355, 367, 385, 388, 392, 432, 434, 436, 450, 465, 472, 473, 482], "mathemat": [45, 65, 104, 111, 189, 192, 260, 281, 296, 350, 351, 432, 434, 470, 472, 480, 485], "pynumber_remaind": [45, 54], "pynumber_divmod": [45, 54], "divmod": [45, 65, 95, 189, 192, 232, 260, 295, 296, 351, 432, 434, 448, 454, 483, 485], "pynumber_pow": [45, 54], "o3": [45, 81, 82], "pow": [45, 65, 95, 99, 128, 172, 175, 231, 232, 260, 267, 270, 281, 289, 295, 296, 297, 351, 424, 432, 434, 435, 454, 468, 477, 483, 485], "pynumber_neg": [45, 54], "pynumber_posit": [45, 54], "pynumber_absolut": [45, 54], "abs": [45, 60, 65, 104, 161, 189, 192, 231, 232, 260, 281, 295, 296, 297, 351, 385, 386, 388, 432, 434, 444, 446, 454, 482, 485], "pynumber_invert": [45, 54], "bitwis": [45, 65, 85, 100, 102, 104, 111, 183, 184, 200, 218, 222, 288, 299, 325, 335, 344, 347, 410, 432, 437, 469, 472, 473, 481, 485], "pynumber_lshift": [45, 54], "shift": [45, 65, 183, 184, 189, 192, 254, 289, 296, 299, 351, 381, 411, 432, 437, 466, 468, 470, 472, 473, 478, 485], "pynumber_rshift": [45, 54], "pynumber_and": [45, 52, 54], "pynumber_xor": [45, 52, 54], "pynumber_or": [45, 52, 54], "pynumber_inplaceadd": [45, 54], "pynumber_inplacesubtract": [45, 52, 54], "pynumber_inplacemultipli": [45, 54], "pynumber_inplacematrixmultipli": [45, 54, 480], "pynumber_inplacefloordivid": [45, 54], "pynumber_inplacetruedivid": [45, 54], "pynumber_inplaceremaind": [45, 54], "pynumber_inplacepow": [45, 54], "pynumber_inplacelshift": [45, 54], "pynumber_inplacershift": [45, 54], "pynumber_inplaceand": [45, 52, 54], "pynumber_inplacexor": [45, 52, 54], "pynumber_inplaceor": [45, 52, 54], "pynumber_long": [45, 54, 475, 483], "pynumber_float": [45, 54, 483], "pynumber_index": [45, 54, 89, 471, 476, 485], "pynumber_tobas": [45, 54, 485], "marker": [45, 65, 114, 123, 156, 164, 176, 197, 200, 232, 261, 264, 276, 303, 305, 347, 348, 382, 390, 404, 460, 476, 478, 481, 482, 485], "0b": [45, 232, 298, 351, 352, 472, 477], "0o": [45, 95, 232, 351, 352, 472, 477], "pynumber_asssize_t": [45, 54], "clip": [45, 53, 100, 183, 440], "py_ssize_t_min": [45, 53], "pyindex_check": [45, 54, 484, 485], "nb_index": [45, 60, 471], "tp_as_numb": [45, 60, 85, 484, 485], "eas": [46, 60, 65, 336, 351, 370, 392, 440, 466, 478, 480, 482, 485], "port": [46, 61, 65, 69, 100, 101, 102, 109, 110, 112, 113, 115, 133, 141, 145, 148, 173, 230, 249, 250, 252, 254, 255, 262, 263, 274, 275, 289, 294, 299, 311, 319, 339, 341, 342, 344, 345, 347, 348, 349, 364, 367, 398, 399, 411, 423, 424, 436, 467, 468, 485, 486], "act": [46, 60, 64, 78, 85, 95, 104, 108, 110, 122, 128, 150, 182, 187, 189, 197, 203, 208, 212, 215, 232, 233, 251, 255, 258, 265, 273, 299, 315, 317, 347, 351, 359, 370, 380, 389, 390, 393, 432, 439, 465, 466, 467, 472, 476, 478, 479, 483, 484, 485], "pyobject_ascharbuff": [46, 54, 485], "buffer_len": 46, "pyobject_asreadbuff": [46, 54, 485], "pyobject_checkreadbuff": [46, 54, 485], "pyobject_aswritebuff": [46, 54, 485], "py_notimpl": [47, 60, 61, 85, 467], "notimpl": [47, 65, 122, 174, 189, 218, 220, 233, 258, 260, 295, 305, 389, 393, 432, 434, 454, 473, 474, 476, 479, 484, 485], "py_return_notimpl": 47, "pyobject_print": [47, 52, 83, 485], "fp": [47, 56, 63, 88, 104, 126, 158, 173, 192, 194, 203, 207, 208, 211, 214, 230, 237, 249, 257, 268, 282, 299, 310, 360, 365, 386, 399, 430, 470, 485], "pyobject_hasattr": [47, 54], "attr_nam": [47, 367, 468], "hasattr": [47, 65, 97, 103, 109, 115, 232, 233, 260, 261, 289, 326, 351, 359, 372, 392, 393, 403, 431, 432, 436, 454, 469, 472, 477, 479, 482, 485], "__getattr__": [47, 60, 65, 85, 95, 103, 148, 182, 223, 232, 261, 305, 329, 351, 389, 393, 432, 434, 451, 468, 472, 477, 478, 479, 482, 485], "__getattribute__": [47, 60, 65, 90, 97, 103, 232, 261, 305, 432, 468, 472, 477, 482, 485], "pyobject_getattr": [47, 54, 60], "pyobject_hasattrstr": [47, 54], "pyobject_getattrstr": [47, 54, 82, 83, 89], "pyobject_genericgetattr": [47, 54, 60, 103], "getter": [47, 54, 55, 86, 103, 122, 173, 232, 351, 370, 399, 472, 479, 480, 485], "tp_getattro": [47, 60, 85], "mro": [47, 65, 95, 97, 122, 187, 204, 351, 389, 444, 482, 485], "outlin": [47, 69, 108, 109, 122, 144, 173, 251, 348, 388, 432, 485], "pyobject_setattr": [47, 54, 60], "favour": [47, 51, 258, 261, 471, 478, 481, 482, 484, 485], "pyobject_delattr": 47, "plan": [47, 78, 100, 110, 112, 119, 139, 199, 264, 305, 407, 466, 470, 471, 472, 473, 474, 476, 477, 479, 485], "pyobject_setattrstr": [47, 54, 89], "pyobject_delattrstr": 47, "pyobject_genericsetattr": [47, 54, 60], "setter": [47, 54, 55, 86, 103, 122, 232, 233, 351, 370, 393, 399, 472, 479, 485], "tp_setattro": [47, 60, 85], "pyobject_genericgetdict": [47, 54, 485], "pyobject_genericsetdict": [47, 54], "pyobject_richcompar": [47, 54, 60, 85], "opid": 47, "py_lt": [47, 60, 61, 85], "py_l": [47, 60, 61, 85], "py_eq": [47, 60, 61, 85], "py_n": [47, 60, 61, 85], "py_gt": [47, 60, 61, 85], "py_g": [47, 60, 61, 85], "pyobject_richcomparebool": [47, 52, 54, 85, 485], "pyobject_repr": [47, 52, 54, 60, 61, 479, 480, 485], "pyobject_ascii": [47, 54], "pyobject_str": [47, 54, 60, 61, 479], "pyobject_byt": [47, 54], "pyobject_issubclass": [47, 54, 58, 480, 485], "cls": [47, 60, 95, 100, 103, 122, 128, 167, 187, 210, 218, 232, 233, 261, 268, 302, 305, 367, 386, 390, 392, 431, 432, 435, 440, 447, 468, 470, 477, 481, 482, 485], "against": [47, 54, 69, 78, 82, 83, 85, 86, 95, 109, 110, 111, 118, 126, 128, 133, 147, 179, 182, 187, 196, 197, 200, 218, 242, 259, 261, 284, 298, 299, 302, 311, 313, 314, 317, 320, 325, 330, 337, 339, 347, 348, 349, 351, 367, 370, 374, 380, 381, 388, 389, 390, 392, 393, 394, 404, 413, 415, 416, 417, 418, 423, 424, 425, 431, 432, 436, 459, 460, 466, 467, 468, 469, 470, 471, 476, 477, 479, 480, 482, 483, 485], "__subclasscheck__": [47, 58, 65, 122, 393, 432, 485], "3119": [47, 65, 122, 167, 432, 474, 486], "__mro__": [47, 60, 65, 95, 103, 122, 204, 232, 351, 390, 432], "__bases__": [47, 60, 65, 86, 210, 232, 305, 351, 432, 469, 485], "pyobject_isinst": [47, 54, 60, 480, 485], "inst": [47, 103, 440, 447], "__instancecheck__": [47, 65, 393, 432, 485], "__class__": [47, 65, 90, 95, 97, 103, 189, 193, 218, 232, 258, 305, 351, 393, 404, 432, 444, 468, 469, 472, 481, 485], "py_hash_t": [47, 60, 85, 477], "pyobject_hash": [47, 52, 54, 60], "pyobject_hashnotimpl": [47, 54, 60, 472], "tp_hash": [47, 60, 85, 472], "pyobject_istru": [47, 52, 54, 485], "pyobject_not": [47, 54, 485], "pyobject_typ": [47, 54], "realli": [47, 61, 74, 76, 81, 82, 85, 87, 95, 98, 100, 102, 104, 111, 112, 114, 116, 120, 145, 189, 197, 207, 210, 212, 277, 289, 294, 299, 334, 351, 359, 370, 371, 388, 391, 417, 432, 439, 440, 445, 466, 467, 468, 469, 470, 471, 474, 481, 485], "py_typ": [47, 55, 58, 60, 85, 86, 100, 472, 483, 484, 485], "pyobject_typecheck": [47, 85, 485], "pyobject_s": [47, 54, 60, 485], "pyobject_lengthhint": [47, 479], "defaultvalu": 47, "estim": [47, 181, 192, 294, 324, 350, 367, 432, 485], "__length_hint__": [47, 65, 297, 432, 479, 485], "length_hint": [47, 65, 231, 297, 432, 479], "pyobject_dir": [47, 54], "dir": [47, 65, 69, 70, 71, 72, 78, 88, 90, 95, 116, 118, 120, 169, 190, 195, 217, 218, 230, 232, 260, 262, 272, 298, 299, 300, 329, 351, 355, 363, 365, 374, 384, 393, 403, 426, 432, 449, 455, 460, 469, 472, 476, 477, 478, 485], "pyobject_getait": [47, 54, 485], "aiter": [47, 65, 232, 260, 432, 476, 481, 485], "meth_fastcal": [48, 55, 65, 482, 485], "meth_o": [48, 55, 59, 65, 468], "meth_class": [48, 55, 59, 65, 469], "meth_stat": [48, 55, 65, 469], "meth_coexist": [48, 55, 65, 470], "tp": [48, 65, 85, 344, 367, 388, 390, 485], "py_tpflags_heaptyp": [48, 58, 60, 65, 476, 484], "py_tpflags_basetyp": [48, 60, 65, 86], "py_tpflags_readi": [48, 60, 65], "py_tpflags_default": [48, 60, 65, 86], "py_tpflags_long_subclass": [48, 60, 65], "py_tpflags_list_subclass": [48, 60, 65], "py_tpflags_tuple_subclass": [48, 60, 65], "py_tpflags_bytes_subclass": [48, 60, 65], "py_tpflags_unicode_subclass": [48, 60, 65], "py_tpflags_dict_subclass": [48, 60, 65], "py_tpflags_base_exc_subclass": [48, 60, 65], "py_tpflags_type_subclass": [48, 60, 65], "py_tpflags_have_fin": [48, 60, 65, 483], "py_tpflags_immutabletyp": [48, 60, 65, 476, 485], "py_tpflags_disallow_instanti": [48, 60, 65, 476, 485], "py_tpflags_map": [48, 60, 65, 197, 431, 485], "py_tpflags_sequ": [48, 60, 65, 197, 431, 485], "py_newref": [49, 54, 97, 476, 485], "aren": [49, 86, 94, 95, 98, 102, 103, 104, 107, 111, 112, 114, 118, 144, 161, 173, 182, 208, 224, 232, 234, 261, 265, 274, 275, 298, 302, 345, 348, 359, 374, 382, 393, 394, 423, 425, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 485], "py_xincref": [49, 83, 483, 485], "py_xnewref": [49, 54, 476, 485], "attr": [49, 60, 65, 89, 100, 102, 128, 183, 247, 251, 259, 261, 279, 287, 297, 298, 305, 320, 367, 374, 389, 392, 393, 417, 419, 420, 421, 431, 432, 435, 440, 466, 467, 470, 478, 485], "py_clear": [49, 60, 83, 85, 86, 470, 485], "_py_dealloc": [49, 483], "_py_forgetrefer": [49, 484, 485], "_py_newrefer": [49, 484, 485], "_py_reftot": 49, "pyeval_getbuiltin": [50, 54], "pyeval_getloc": [50, 54], "pyeval_getglob": [50, 54], "pyframe_getback": [50, 484, 485], "pyframe_getcod": [50, 54, 484, 485], "pyeval_getfuncnam": [50, 54], "pyeval_getfuncdesc": [50, 54], "pysequence_check": [51, 54, 60], "pysequence_s": [51, 54, 60, 485], "pysequence_concat": [51, 54, 60], "pysequence_repeat": [51, 54, 60], "pysequence_inplaceconcat": [51, 54, 60], "pysequence_inplacerepeat": [51, 54, 60], "th": [51, 181, 203, 232, 243, 272, 281, 289, 329, 350, 351, 371, 388, 414, 466, 469, 471], "pysequence_getslic": [51, 54, 60], "i1": [51, 196, 284, 423, 470], "i2": [51, 196, 284, 423, 470], "pysequence_delitem": [51, 54, 485], "pysequence_setslic": [51, 54], "pysequence_delslic": [51, 54], "pysequence_count": [51, 54], "occurr": [51, 61, 69, 95, 111, 128, 146, 166, 173, 183, 192, 203, 212, 235, 277, 290, 298, 325, 334, 350, 351, 363, 377, 404, 417, 432, 433, 434, 438, 439, 440, 468, 470, 471, 474, 477], "pysequence_contain": [51, 54, 60], "pysequence_index": [51, 54], "pysequence_list": [51, 54], "pysequence_tupl": [51, 54, 485], "pysequence_fast": [51, 54], "pytupleobject": [51, 56, 57, 59], "pysequence_fast_get_s": 51, "faster": [51, 54, 60, 65, 94, 95, 100, 103, 111, 112, 113, 133, 144, 182, 183, 192, 214, 233, 242, 254, 267, 289, 299, 314, 348, 350, 351, 388, 393, 428, 430, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485], "pysequence_fast_get_item": 51, "pysequence_fast_item": 51, "reloc": [51, 472], "pysequence_item": 51, "frozenset": [52, 65, 97, 128, 188, 193, 232, 260, 280, 305, 359, 390, 392, 406, 431, 432, 434, 454, 470, 471, 472, 477, 484, 485], "pysetobject": 52, "medium": [52, 184, 192, 470, 471], "pyset_typ": [52, 54], "pyfrozenset_typ": [52, 54], "pyset_check": 52, "pyfrozenset_check": 52, "pyanyset_check": 52, "pyset_checkexact": [52, 476, 485], "pyanyset_checkexact": 52, "pyfrozenset_checkexact": 52, "pyset_new": [52, 54, 471], "pyfrozenset_new": [52, 54, 471], "pyset_s": [52, 54, 471], "anyset": 52, "pyset_get_s": 52, "pyset_contain": [52, 54, 471], "__contains__": [52, 55, 60, 65, 90, 95, 97, 106, 167, 201, 203, 212, 218, 231, 267, 277, 291, 297, 351, 393, 411, 420, 432, 434, 466, 469, 470, 472, 485], "unhash": [52, 88, 187, 351, 392, 432, 434, 476, 484, 485], "pyset_add": [52, 54, 471], "grow": [52, 57, 73, 95, 109, 112, 200, 233, 243, 275, 326, 381, 466, 470, 472, 473, 477, 485], "pyset_discard": [52, 54, 471], "miss": [52, 65, 69, 73, 110, 111, 128, 166, 170, 176, 181, 182, 187, 192, 203, 206, 212, 233, 242, 254, 258, 259, 261, 267, 273, 282, 285, 295, 298, 302, 321, 325, 348, 350, 352, 355, 367, 371, 372, 380, 384, 393, 398, 399, 429, 431, 432, 434, 435, 436, 445, 466, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485], "pyset_pop": [52, 54], "pyset_clear": [52, 54], "pyslice_typ": [53, 54], "pyslice_check": 53, "pyslice_new": [53, 54], "step": [53, 60, 65, 69, 70, 79, 82, 83, 87, 94, 95, 100, 103, 104, 110, 111, 112, 113, 115, 116, 118, 126, 128, 147, 150, 154, 158, 162, 164, 172, 175, 182, 191, 192, 200, 232, 237, 239, 249, 254, 258, 267, 273, 287, 289, 298, 299, 303, 324, 325, 345, 347, 351, 359, 373, 381, 388, 394, 403, 418, 425, 431, 432, 434, 440, 445, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 485], "pyslice_getindic": [53, 54], "pysliceobject": 53, "pyslice_getindicesex": [53, 54, 482, 485], "slicelength": 53, "manner": [53, 83, 95, 100, 102, 109, 173, 252, 274, 276, 298, 300, 302, 313, 317, 319, 325, 327, 355, 390, 392, 404, 419, 431, 432, 436, 460, 469, 471, 472, 476, 485], "pyslice_unpack": [53, 54, 482, 485], "pyslice_adjustindic": [53, 54, 482, 485], "0x03050400": [53, 482, 485], "0x03060000": [53, 482, 485], "0x03060100": [53, 482, 485], "boost": [53, 89, 233, 470, 485], "py_ellipsi": [53, 435], "387": [54, 220], "serious": [54, 108, 133, 200, 220, 242, 393], "forward": [54, 61, 65, 69, 95, 100, 104, 111, 128, 154, 160, 162, 182, 183, 189, 207, 229, 233, 237, 254, 264, 277, 295, 300, 302, 303, 347, 348, 351, 388, 390, 406, 411, 415, 431, 466, 467, 468, 470, 472, 475, 476, 477, 482, 485], "vice": [54, 70, 82, 94, 147, 182, 273, 299, 302, 325, 351, 381, 384, 417, 472, 479, 485], "versa": [54, 70, 82, 94, 147, 182, 273, 299, 302, 325, 351, 381, 384, 417, 472, 479, 485], "_py_internalst": 54, "subset": [54, 81, 104, 110, 112, 164, 173, 183, 242, 254, 255, 258, 268, 275, 277, 292, 301, 305, 312, 320, 334, 338, 344, 351, 363, 370, 378, 414, 417, 419, 426, 434, 469, 471, 473, 480, 482, 485], "simplic": [54, 61, 85, 268, 347, 351, 466, 468, 476], "talk": [54, 61, 95, 102, 109, 112, 114, 348, 350, 355, 432, 471, 480], "recompil": [54, 69, 82, 89, 169, 257, 258, 466, 469, 473, 477, 480, 481], "onward": [54, 104, 109, 192, 228, 261, 339, 351, 485], "hardcod": [54, 78, 182, 273, 275, 390, 464, 479, 485], "0x030a0000": 54, "0x03020000": 54, "python39": 54, "abi3": [54, 478], "mymodul": [54, 78, 89, 108, 237, 303, 393, 394, 404, 473, 477], "goal": [54, 60, 65, 78, 85, 104, 208, 218, 232, 242, 326, 367, 417, 438, 467, 469, 471, 472, 477, 479, 480, 481], "penalti": [54, 109, 187, 223, 312, 466, 477], "unsaf": [54, 65, 85, 95, 156, 173, 194, 262, 289, 337, 392, 393, 402, 469, 476, 480, 482, 485], "inlin": [54, 55, 97, 100, 173, 196, 203, 204, 210, 212, 242, 244, 314, 325, 392, 469, 471, 476, 477, 481, 483, 485], "prereleas": 54, "upcom": [54, 220, 233, 331, 485], "guard": [54, 60, 65, 109, 128, 259, 319, 367, 370, 389, 390, 435, 436, 445, 483, 485], "derefer": [54, 289, 363, 485], "review": [54, 115, 149, 175, 242, 347, 469, 474, 476, 477, 481, 483, 485], "technic": [54, 65, 104, 118, 173, 188, 197, 220, 268, 298, 325, 351, 404, 436, 465, 466, 473, 476, 482], "unintent": [54, 109, 120, 273, 355, 477, 485], "stay": [54, 61, 65, 350, 359, 430, 477, 478, 481, 485], "architectur": [54, 65, 69, 124, 220, 278, 285, 309, 354, 360, 373, 414, 425, 432, 464, 465, 469, 470, 472, 478, 480, 484, 485], "distributor": [54, 76, 348, 429, 481, 485], "pybaseobject_typ": [54, 60], "pybytearrayiter_typ": 54, "pybytesiter_typ": 54, "pybytes_decodeescap": [54, 485], "pybytes_repr": [54, 485], "pycfunctionwithkeyword": [54, 55], "pycfunction_cal": [54, 485], "pycfunction_getflag": 54, "pycfunction_getfunct": 54, "pycfunction_getself": 54, "pycfunction_new": [54, 485], "pycfunction_newex": [54, 485], "pycfunction_typ": 54, "pycmethod_new": [54, 485], "pycapsule_typ": 54, "pyclassmethoddescr_typ": 54, "pydictitems_typ": 54, "pydictiteritem_typ": 54, "pydictiterkey_typ": 54, "pydictitervalue_typ": 54, "pydictkeys_typ": 54, "pydictproxy_typ": 54, "pydictreviteritem_typ": 54, "pydictreviterkey_typ": 54, "pydictrevitervalue_typ": 54, "pydictvalues_typ": 54, "pyellipsis_typ": 54, "pyenum_typ": 54, "pyerr_display": [54, 476, 485], "pyerr_programtext": 54, "pyeval_callfunct": [54, 484, 485], "pyeval_callmethod": [54, 484, 485], "pyeval_callobjectwithkeyword": [54, 484, 485], "pyeval_evalcod": [54, 63, 476, 485], "pyeval_evalcodeex": [54, 63, 485], "pyeval_evalfram": [54, 63], "pyeval_evalframeex": [54, 63, 479, 485], "pyexc_encodingwarn": 54, "pyexceptionclass_nam": [54, 483, 485], "pyfilter_typ": 54, "pygetsetdescr_typ": 54, "pylistiter_typ": 54, "pylistreviter_typ": 54, "pylongrangeiter_typ": 54, "pylong_getinfo": 54, "pymap_typ": 54, "pymemberdescr_typ": 54, "pymemoryview_typ": 54, "pymethoddescr_typ": 54, "pymoduledef_typ": 54, "pyos_afterfork": [54, 56, 482, 485], "pyos_afterfork_par": [54, 56, 299, 482, 485], "pyos_beforefork": [54, 56, 299, 482, 485], "pyos_fspath": [54, 56, 481, 485], "pyos_inputhook": [54, 63, 485], "pyos_interruptoccur": [54, 485], "pyos_getsig": [54, 56, 466], "pyos_mystricmp": [54, 485], "pyos_mystrnicmp": [54, 485], "pyos_setsig": [54, 56, 466, 485], "pyos_sighandler_t": [54, 56], "pyos_strtol": 54, "pyos_strtoul": 54, "ob_refcnt": [54, 60, 476, 485], "ob_typ": [54, 60, 86, 485], "pyobject_clearweakref": [54, 60, 85], "pyobject_delitemstr": [54, 469], "pyobject_format": [54, 197], "pyobject_selfit": 54, "pyrangeiter_typ": 54, "pyrange_typ": [54, 471], "pyreversed_typ": 54, "pysequence_in": 54, "pysetiter_typ": 54, "pystructsequence_desc": [54, 57, 482, 485], "pystructsequence_field": [54, 57, 482, 485], "pystructsequence_getitem": [54, 57], "pystructsequence_new": [54, 57], "pystructsequence_newtyp": [54, 57, 485], "pystructsequence_setitem": [54, 57], "pysuper_typ": 54, "pysys_addwarnoptionunicod": [54, 56, 482], "pysys_formatstderr": [54, 56], "pysys_formatstdout": [54, 56], "pysys_getobject": [54, 56], "pysys_getxopt": [54, 56], "pysys_haswarnopt": 54, "pysys_setobject": [54, 56], "pysys_setpath": [54, 56], "pysys_writestderr": [54, 56], "pysys_writestdout": [54, 56], "pythread_getinfo": 54, "pythread_acquire_lock": [54, 485], "pythread_acquire_lock_tim": [54, 485], "pythread_allocate_lock": 54, "pythread_exit_thread": [54, 485], "pythread_free_lock": 54, "pythread_get_stacks": 54, "pythread_get_thread_id": [54, 482, 485], "pythread_get_thread_native_id": 54, "pythread_init_thread": 54, "pythread_release_lock": [54, 485], "pythread_set_stacks": 54, "pythread_start_new_thread": [54, 482, 485], "pytraceback_her": [54, 485], "pytraceback_print": [54, 481, 485], "pytraceback_typ": 54, "pytupleiter_typ": 54, "pytuple_getitem": [54, 57, 83, 89], "pytuple_getslic": [54, 57], "pytuple_pack": [54, 57, 89, 470], "pytuple_s": [54, 57, 89], "pytuple_typ": [54, 57], "pytype_clearcach": [54, 58], "pytype_frommoduleandspec": [54, 58, 60, 100, 476, 484, 485], "pytype_genericalloc": [54, 58, 60, 483], "pytype_genericnew": [54, 58, 60, 86], "pytype_getflag": [54, 58, 485], "pytype_getmodul": [54, 58, 484, 485], "pytype_getmodulest": [54, 58, 100, 484, 485], "pytype_getslot": [54, 58, 476, 479, 485], "pytype_issubtyp": [54, 58], "pytype_modifi": [54, 58], "pytype_slot": [54, 58], "pytype_spec": [54, 58, 60], "pytype_typ": [54, 58, 60, 485], "pyunicodeiter_typ": 54, "pyunicode_append": 54, "pyunicode_appendanddel": 54, "pyunicode_asasciistr": [54, 61, 478], "pyunicode_ascharmapstr": [54, 61], "pyunicode_asdecodedobject": [54, 481, 485], "pyunicode_asdecodedunicod": [54, 481, 485], "pyunicode_asencodedobject": [54, 478, 481, 485], "pyunicode_asencodedstr": [54, 61, 485], "pyunicode_asencodedunicod": [54, 481, 485], "pyunicode_aslatin1str": [54, 61, 478], "pyunicode_asmbcsstr": [54, 61, 478], "pyunicode_asrawunicodeescapestr": [54, 61, 478], "pyunicode_asucs4": [54, 61, 478], "pyunicode_asucs4copi": [54, 61, 476, 478], "pyunicode_asutf16str": [54, 61], "pyunicode_asutf32str": [54, 61], "pyunicode_asutf8ands": [54, 61, 476, 482, 485], "pyunicode_asutf8str": [54, 61, 478], "pyunicode_asunicodeescapestr": [54, 61, 478], "pyunicode_aswidechar": [54, 61, 485], "pyunicode_buildencodingmap": 54, "pyunicode_compar": [54, 61, 476, 478], "pyunicode_comparewithasciistr": [54, 61, 477, 485], "pyunicode_concat": [54, 61, 478], "pyunicode_contain": [54, 61], "pyunicode_count": [54, 61], "pyunicode_decod": [54, 61, 485], "pyunicode_decodeascii": [54, 61], "pyunicode_decodecharmap": [54, 61], "pyunicode_decodecodepagest": 54, "pyunicode_decodefsdefault": [54, 61, 82], "pyunicode_decodefsdefaultands": [54, 56, 61], "pyunicode_decodelatin1": [54, 61], "pyunicode_decodelocal": [54, 61], "pyunicode_decodelocaleands": [54, 56, 61, 482], "pyunicode_decodembc": [54, 61], "pyunicode_decodembcsst": [54, 61], "pyunicode_decoderawunicodeescap": [54, 61], "pyunicode_decodeutf16": [54, 61], "pyunicode_decodeutf16st": [54, 61], "pyunicode_decodeutf32": [54, 61], "pyunicode_decodeutf32st": [54, 61], "pyunicode_decodeutf7": [54, 61], "pyunicode_decodeutf7st": [54, 61], "pyunicode_decodeutf8": [54, 61], "pyunicode_decodeutf8st": [54, 61], "pyunicode_decodeunicodeescap": [54, 61], "pyunicode_encodecodepag": [54, 61, 478, 485], "pyunicode_encodefsdefault": [54, 56, 61, 485], "pyunicode_encodelocal": [54, 56, 61, 482, 485], "pyunicode_fsdecod": [54, 61, 481, 485], "pyunicode_find": [54, 61], "pyunicode_findchar": [54, 61, 476, 478, 482, 485], "pyunicode_format": [54, 61], "pyunicode_fromencodedobject": [54, 61], "pyunicode_fromformatv": [54, 56, 61], "pyunicode_fromobject": [54, 61], "pyunicode_fromordin": 54, "pyunicode_fromstringands": [54, 61, 476, 485], "pyunicode_fromwidechar": [54, 61, 478], "pyunicode_getdefaultencod": 54, "pyunicode_getlength": [54, 61, 476, 478], "pyunicode_gets": [54, 61, 478], "pyunicode_internfromstr": [54, 61], "pyunicode_internimmort": [54, 476, 485], "pyunicode_interninplac": [54, 61, 476, 485], "pyunicode_isidentifi": [54, 61, 485], "pyunicode_join": [54, 61, 478], "pyunicode_partit": 54, "pyunicode_rpartit": 54, "pyunicode_rsplit": 54, "pyunicode_readchar": [54, 61, 478], "pyunicode_replac": [54, 61], "pyunicode_res": 54, "pyunicode_richcompar": [54, 61], "pyunicode_split": [54, 61], "pyunicode_splitlin": [54, 61], "pyunicode_substr": [54, 61, 476, 478], "pyunicode_tailmatch": [54, 61, 476, 478, 484], "pyunicode_transl": [54, 61], "pyunicode_typ": [54, 60, 61, 100], "pyunicode_writechar": [54, 61, 478], "ob_bas": [54, 55, 86, 485], "ob_siz": [54, 55, 60, 485], "pyweakrefer": 54, "pyweakref_getobject": [54, 64], "pyweakref_newproxi": [54, 64], "pywrapperdescr_typ": 54, "pyzip_typ": 54, "py_atexit": [54, 56], "py_bytesmain": [54, 63, 483], "py_compilestr": [54, 63, 476], "py_exit": [54, 56, 481, 485], "py_filesystemdefaultencodeerror": [54, 61, 485], "py_filesystemdefaultencod": [54, 61], "py_genericalia": [54, 59, 485], "py_genericaliastyp": [54, 59, 485], "py_getrecursionlimit": 54, "py_hasfilesystemdefaultencod": 54, "py_i": [54, 55, 476, 485], "py_isfals": [54, 55, 476, 485], "py_isnon": [54, 55, 476, 485], "py_istru": [54, 55, 476, 485], "py_makependingcal": 54, "py_setrecursionlimit": 54, "py_ucs4": [54, 61, 478], "py_utf8mod": [54, 485], "py_intptr_t": 54, "py_uintptr_t": 54, "allocfunc": [54, 60, 85], "binaryfunc": [54, 60], "descrgetfunc": [54, 60, 85], "descrsetfunc": [54, 60, 85], "getattrfunc": [54, 60, 85], "getattrofunc": [54, 60, 85], "getiterfunc": [54, 60, 85], "hashfunc": [54, 60, 85], "initproc": [54, 60, 85, 86], "iternextfunc": [54, 60, 85], "lenfunc": [54, 60], "newfunc": [54, 60, 85, 233], "objobjargproc": [54, 60], "objobjproc": [54, 60], "reprfunc": [54, 60, 85], "richcmpfunc": [54, 60, 85], "setattrfunc": [54, 60, 85], "setattrofunc": [54, 60, 85], "ssizeargfunc": [54, 60], "ssizeobjargproc": [54, 60], "ssizessizeargfunc": 54, "ssizessizeobjargproc": 54, "symtabl": [54, 65, 260, 270, 473, 476, 484, 485], "ternaryfunc": [54, 60, 85], "unaryfunc": [54, 60], "ultim": [55, 76, 200, 232, 242, 298, 359, 390, 432, 434, 436, 440, 468, 470], "expans": [55, 65, 226, 227, 254, 260, 281, 300, 314, 320, 355, 369, 413, 426, 470, 476, 478, 479], "py_refcnt": [55, 86, 472, 476, 485], "notion": [55, 69, 116, 189, 192, 196, 200, 232, 305, 351, 381, 414, 418, 434, 438, 441, 477], "py_siz": [55, 472, 485], "pyobject_head": [55, 60, 85, 86, 474], "pyobject_var_head": [55, 60, 85], "py_set_typ": [55, 485], "py_is_typ": [55, 485], "py_set_refcnt": [55, 476, 485], "refcnt": [55, 476], "counter": [55, 60, 65, 83, 86, 95, 97, 104, 146, 188, 193, 196, 197, 207, 243, 289, 298, 299, 351, 370, 371, 390, 392, 434, 444, 468, 470, 471, 472, 473, 475, 477, 478, 483, 485], "py_set_s": [55, 485], "pyobject_head_init": [55, 60], "_pyobject_extra_init": 55, "pyvarobject_head_init": [55, 60, 85, 86, 485], "shall": [55, 300, 302, 305, 335, 419, 430, 465, 477], "meth_keyword": [55, 83], "_pycfunctionfast": 55, "narg": [55, 65, 109, 124, 298, 315, 347, 357, 403, 455, 473, 477, 485], "_pycfunctionfastwithkeyword": 55, "pycmethod": [55, 58, 484, 485], "meth_method": [55, 100, 484], "defining_class": [55, 100, 485], "ml_name": [55, 85], "ml_meth": [55, 85], "ml_flag": [55, 85], "ml_doc": [55, 85], "bitfield": [55, 119, 485], "fast": [55, 61, 65, 112, 113, 147, 154, 176, 190, 192, 218, 232, 241, 242, 257, 258, 260, 261, 264, 267, 275, 279, 304, 305, 314, 338, 350, 351, 372, 373, 374, 388, 390, 417, 432, 446, 466, 470, 471, 473, 477, 478, 479, 480, 481, 482, 484, 485], "fourth": [55, 100, 104, 119, 183, 197, 201, 273, 300, 313, 371, 423, 468, 476], "question": [55, 69, 83, 89, 95, 104, 108, 109, 111, 114, 119, 128, 147, 164, 200, 201, 242, 272, 273, 298, 347, 374, 378, 410, 411, 446, 466, 468, 469, 471, 482, 484, 485], "superclass": [55, 58, 60, 122, 162, 187, 232, 233, 268, 274, 318, 345, 390, 432, 468, 469, 471, 485], "classmethod": [55, 65, 97, 103, 122, 166, 167, 182, 189, 192, 197, 200, 210, 218, 228, 232, 233, 258, 260, 261, 267, 289, 302, 305, 350, 351, 363, 385, 386, 390, 392, 426, 429, 432, 454, 468, 470, 473, 476, 477, 478, 481, 482, 483, 485], "staticmethod": [55, 65, 95, 97, 103, 122, 200, 232, 233, 260, 274, 424, 432, 454, 468, 470, 473, 476, 477, 478, 483, 485], "sq_contain": [55, 60], "preclud": [55, 295, 351, 483], "t_": 55, "t_short": 55, "t_int": [55, 86], "t_long": 55, "t_float": 55, "t_doubl": 55, "t_string": 55, "t_object": 55, "t_object_ex": [55, 86], "t_char": 55, "t_byte": 55, "t_ubyt": 55, "t_uint": 55, "t_ushort": 55, "t_ulong": 55, "t_bool": 55, "t_longlong": 55, "t_ulonglong": 55, "t_pyssizet": 55, "__dictoffset__": 55, "__weaklistoffset__": 55, "__vectorcalloffset__": 55, "tp_dictoffset": [55, 58, 60, 85], "tp_weaklistoffset": [55, 58, 60, 85, 484, 485], "spam_type_memb": 55, "offsetof": [55, 60, 85, 86], "spam_object": 55, "pymember_geton": [55, 103], "obj_addr": 55, "pymember_seton": 55, "tp_getset": [55, 60, 85, 86], "pathlik": [56, 61, 65, 97, 124, 169, 232, 258, 299, 300, 302, 351, 393, 429, 481, 485], "__fspath__": [56, 65, 124, 299, 367, 393, 481, 485], "py_fdisinteract": 56, "deem": [56, 128, 214, 237, 273, 275, 351, 411, 430, 466, 467, 471, 473, 477, 478, 479, 485], "isatti": [56, 65, 124, 160, 232, 264, 299, 357, 359, 450, 485], "clone": [56, 65, 201, 208, 212, 215, 229, 237, 242, 244, 289, 291, 299, 307, 342, 357, 381, 388, 414, 438, 464, 478, 483], "register_at_fork": [56, 65, 124, 299, 482, 485], "reliabl": [56, 112, 133, 138, 139, 144, 164, 167, 192, 194, 289, 300, 339, 355, 407, 419, 428, 431, 436, 465, 469, 473, 476, 477, 478, 479, 480, 481, 482, 485], "microsoft": [56, 65, 70, 75, 78, 87, 96, 164, 173, 182, 260, 299, 357, 359, 402, 403, 411, 439, 452, 462, 468, 469, 471, 472, 480, 485], "visual": [56, 69, 70, 78, 87, 95, 102, 110, 116, 325, 348, 380, 388, 417, 465, 466, 469, 472, 480, 485], "sigact": [56, 485], "dc80": [56, 114, 164, 232], "dcff": [56, 114, 164, 232], "surrog": [56, 61, 164, 232, 268, 299, 353, 363, 414, 478, 479, 483, 485], "error_po": 56, "0x80": [56, 114, 184, 485], "0xff": [56, 164, 232], "1000": [56, 95, 106, 114, 156, 179, 183, 189, 228, 254, 265, 267, 281, 289, 290, 326, 335, 351, 352, 359, 374, 386, 388, 430, 444, 445, 448, 450, 453, 454, 466, 471, 472, 473, 477, 478, 483], "unrestrict": 56, "watch": [56, 65, 108, 110, 139, 142, 145, 192, 243, 273, 275, 334, 374, 455], "hundr": [56, 109, 200, 242], "pysys_audit": [56, 106, 148, 359, 485], "apart": [56, 69, 76, 86, 104, 108, 111, 128, 173, 196, 281, 289, 298, 308, 350, 434, 439, 469, 473, 475], "unavoid": [56, 104, 189, 470, 473, 475], "pysys_addaudithook": [56, 148, 359], "py_audithookfunct": 56, "notifi": [56, 65, 108, 110, 140, 143, 144, 170, 254, 255, 289, 370, 376, 406, 485], "578": [56, 65, 148, 359, 471, 472, 485], "addaudithook": [56, 65, 148, 321, 359, 454], "kill": [56, 65, 94, 112, 121, 124, 136, 139, 142, 146, 148, 170, 172, 183, 254, 289, 299, 339, 355, 367, 406, 411, 426, 472, 473, 474, 477, 482, 485], "120": [56, 82, 104, 162, 200, 233, 267, 359, 388, 473, 481, 483, 485], "pytuple_check": [57, 89], "pytuple_checkexact": 57, "oo": [57, 69, 182, 359, 367, 454, 459, 475, 480, 485], "pytuple_get_s": 57, "pytuple_get_item": 57, "pytuple_set_item": [57, 476, 485], "_pytuple_res": [57, 468], "shrink": [57, 190, 470, 485], "client": [57, 65, 83, 94, 103, 108, 109, 112, 115, 129, 133, 148, 150, 158, 164, 170, 173, 176, 201, 203, 248, 251, 252, 259, 260, 262, 264, 265, 273, 275, 292, 294, 299, 305, 334, 335, 341, 344, 345, 347, 357, 364, 367, 370, 388, 390, 399, 411, 414, 421, 422, 424, 430, 445, 455, 468, 470, 472, 478, 483, 485], "namedtupl": [57, 65, 97, 123, 154, 188, 193, 218, 294, 305, 308, 309, 325, 335, 343, 351, 354, 356, 359, 386, 389, 390, 405, 446, 472, 473, 475, 476, 479, 480, 481, 482, 483, 484, 485], "desc": [57, 73, 103, 287, 294, 347, 475], "pystructsequence_inittyp": [57, 479], "pystructsequence_inittype2": [57, 479], "meta": [57, 65, 73, 75, 81, 97, 100, 118, 124, 128, 158, 183, 184, 227, 238, 258, 259, 298, 359, 399, 432, 468, 478, 479, 481, 485], "n_in_sequ": 57, "pystructsequence_unnamedfield": [57, 484, 485], "pystructsequence_get_item": 57, "pystructsequence_set_item": 57, "pytype_check": [58, 83, 485], "pytype_checkexact": [58, 485], "primarili": [58, 95, 107, 108, 144, 147, 164, 189, 201, 213, 233, 261, 273, 305, 310, 351, 355, 390, 392, 404, 411, 415, 465, 467, 468, 470, 472, 473, 478, 480, 482, 484, 485], "pytype_hasfeatur": [58, 60, 485], "pytype_is_gc": 58, "issubclass": [58, 65, 88, 97, 122, 167, 232, 260, 351, 389, 390, 404, 432, 444, 454, 466, 472, 476, 482, 485], "nitem": [58, 60], "tp_alloc": [58, 60, 85, 86], "kwds": [58, 60, 85, 86, 103, 142, 150, 175, 181, 210, 232, 233, 261, 267, 289, 303, 352, 367, 384, 389, 392, 432, 435, 445, 471, 483, 485], "shortcut": [58, 65, 70, 79, 112, 200, 242, 254, 304, 313, 325, 351, 363, 389, 432, 465, 470, 472, 482, 485], "py_tp_bas": 58, "tp_doc": [58, 60, 85, 86, 476, 485], "basics": 58, "ids": [58, 95, 237, 265, 274, 276, 289, 294, 299, 305, 309, 370, 381, 406, 470, 478, 485], "pynumbermethod": [58, 60, 85, 468, 471], "pysequencemethod": [58, 60, 85], "pymappingmethod": [58, 60, 85], "pyasyncmethod": [58, 60, 85, 485], "py_": [58, 465], "py_tp_dealloc": 58, "py_nb_add": 58, "nb_add": [58, 60], "py_sq_length": 58, "sq_length": [58, 60, 485], "tp_dict": [58, 60, 85, 472], "tp_mro": [58, 60, 85], "tp_cach": [58, 60, 85], "tp_subclass": [58, 60, 85, 485], "tp_weaklist": [58, 60, 85], "tp_vectorcal": [58, 60, 85, 485], "bf_getbuff": [58, 60], "unlimit": [58, 142, 209, 210, 215, 242, 254, 289, 326, 328, 351, 355, 370, 432, 439, 485], "pfunc": [58, 82], "py_tp_doc": 58, "genericalia": [59, 65, 188, 389, 390, 432, 434, 476, 484, 485], "union": [59, 65, 98, 124, 166, 193, 232, 239, 258, 260, 339, 349, 353, 389, 390, 432, 469, 470, 472, 473, 480, 484, 485], "__origin__": [59, 65, 351], "__args__": [59, 65, 351, 476, 484, 485], "__parameters__": [59, 65, 351, 390, 485], "lazili": [59, 98, 172, 223, 250, 267, 351, 392, 393, 434, 476, 479, 485], "my_obj_method": 59, "__class_getitem__": [59, 65, 351, 390, 434, 482, 485], "585": [59, 97, 167, 351, 390, 484, 485], "pytype_": 60, "fair": [60, 72, 79, 94, 102, 109, 112, 114, 200, 211, 215, 287, 314, 336, 348, 374, 392, 398, 414, 415, 466, 468, 469, 471, 472, 481], "examin": [60, 65, 82, 95, 98, 108, 114, 116, 119, 187, 193, 234, 261, 270, 299, 303, 306, 314, 337, 338, 339, 342, 351, 359, 367, 414, 467, 469, 471, 472, 476, 478, 485], "glanc": [60, 109, 469], "insight": 60, "tp_getattr": [60, 85], "tp_setattr": [60, 85], "__setattr__": [60, 65, 85, 90, 95, 103, 148, 187, 305, 393, 432, 440, 468, 485], "__delattr__": [60, 65, 85, 90, 103, 148, 187, 432, 485], "tp_as_async": [60, 85, 480], "__repr__": [60, 65, 90, 103, 113, 166, 170, 187, 189, 202, 218, 224, 232, 289, 292, 327, 347, 389, 390, 393, 423, 429, 432, 456, 468, 469, 476, 477, 482, 483, 485], "tp_as_sequ": [60, 85], "tp_as_map": [60, 85], "__call__": [60, 65, 95, 97, 103, 126, 165, 166, 167, 188, 201, 210, 232, 289, 291, 393, 394, 406, 432, 434, 481, 485], "tp_str": [60, 85], "__str__": [60, 65, 90, 108, 109, 166, 170, 188, 189, 201, 202, 203, 208, 209, 210, 212, 218, 273, 289, 291, 351, 352, 389, 393, 429, 432, 447, 468, 483, 485], "tp_as_buff": [60, 85, 484, 485], "tp_richcompar": [60, 85, 485], "__lt__": [60, 65, 85, 90, 113, 167, 174, 187, 218, 231, 232, 233, 297, 351, 389, 393, 432, 434, 467, 473, 474, 477, 485], "__le__": [60, 65, 90, 113, 167, 187, 218, 231, 233, 297, 351, 393, 432, 467, 473, 477], "__ne__": [60, 65, 90, 113, 167, 201, 202, 209, 231, 291, 297, 393, 423, 432, 467, 485], "__gt__": [60, 65, 90, 113, 167, 187, 218, 231, 232, 233, 297, 351, 393, 432, 467, 473, 477], "__ge__": [60, 65, 90, 113, 167, 187, 218, 231, 233, 297, 351, 393, 432, 467, 473, 477], "tp_iter": [60, 85, 351, 468], "__iter__": [60, 65, 85, 90, 97, 109, 122, 167, 193, 218, 232, 264, 267, 277, 289, 291, 351, 390, 392, 393, 394, 411, 426, 432, 434, 444, 468, 469, 472, 479, 481, 484, 485], "tp_iternext": [60, 85, 351, 468, 485], "__next__": [60, 65, 85, 97, 104, 118, 167, 172, 181, 197, 220, 224, 232, 264, 267, 289, 351, 426, 432, 434, 444, 474, 485], "tp_method": [60, 85, 86], "tp_member": [60, 85, 86], "tp_base": [60, 85, 86, 485], "__base__": 60, "tp_descr_get": [60, 85], "__get__": [60, 65, 97, 103, 187, 233, 261, 393, 432, 468, 481, 485], "tp_descr_set": [60, 85, 485], "__set__": [60, 65, 97, 103, 187, 261, 393, 432, 468, 481, 485], "__delete__": [60, 65, 97, 103, 261, 393, 432, 468, 485], "tp_free": [60, 85, 86], "tp_is_gc": [60, 85], "__subclasses__": [60, 65, 351, 393, 485], "tp_del": [60, 85, 234], "tp_version_tag": [60, 85], "tp_final": [60, 85, 480, 483, 485], "angl": [60, 111, 150, 161, 164, 216, 232, 281, 388, 472, 473, 485], "column": [60, 65, 95, 100, 106, 114, 124, 128, 157, 158, 181, 183, 196, 197, 200, 220, 232, 254, 268, 287, 299, 306, 314, 320, 325, 338, 347, 351, 354, 369, 373, 374, 383, 392, 417, 420, 466, 473, 480, 485], "am_await": 60, "__await__": [60, 65, 97, 167, 197, 389, 432, 480, 485], "am_ait": 60, "__aiter__": [60, 65, 97, 167, 197, 232, 393, 394, 431, 432, 480, 481, 482, 485], "am_anext": 60, "__anext__": [60, 65, 97, 167, 197, 220, 232, 393, 431, 432, 434, 485], "am_send": 60, "sendfunc": 60, "__add__": [60, 65, 90, 166, 174, 218, 231, 261, 295, 297, 393, 432, 434, 485], "__radd__": [60, 65, 295, 432, 434], "nb_inplace_add": 60, "__iadd__": [60, 65, 90, 95, 167, 231, 297, 432, 466], "nb_subtract": 60, "__sub__": [60, 65, 167, 231, 297, 393, 432, 434], "__rsub__": [60, 65, 174, 432], "nb_inplace_subtract": 60, "__isub__": [60, 65, 167, 231, 297, 432, 466], "nb_multipli": 60, "__mul__": [60, 65, 90, 166, 231, 297, 393, 432, 434, 485], "__rmul__": [60, 65, 90, 432, 434, 485], "nb_inplace_multipli": 60, "__imul__": [60, 65, 90, 166, 174, 231, 297, 432, 485], "nb_remaind": 60, "__mod__": [60, 65, 110, 231, 297, 393, 432, 434, 476, 485], "__rmod__": [60, 65, 166, 432, 476, 480, 485], "nb_inplace_remaind": 60, "__imod__": [60, 65, 231, 297, 432], "nb_divmod": 60, "__divmod__": [60, 65, 393, 432, 476, 480, 485], "__rdivmod__": [60, 65, 432, 476, 485], "nb_power": 60, "__pow__": [60, 65, 231, 297, 393, 432, 434, 476, 485], "__rpow__": [60, 65, 432, 476, 485], "nb_inplace_pow": 60, "__ipow__": [60, 65, 231, 297, 432, 476, 485], "nb_negat": 60, "__neg__": [60, 65, 231, 297, 393, 432, 434], "nb_posit": 60, "__pos__": [60, 65, 231, 297, 393, 432, 434], "nb_absolut": 60, "__abs__": [60, 65, 231, 232, 297, 390, 432, 485], "nb_bool": [60, 474], "__bool__": [60, 65, 118, 218, 239, 297, 351, 372, 393, 409, 432, 434, 474, 485], "nb_invert": 60, "__invert__": [60, 65, 231, 297, 393, 432, 434], "nb_lshift": 60, "__lshift__": [60, 65, 231, 297, 393, 432, 434], "__rlshift__": [60, 65, 432], "nb_inplace_lshift": 60, "__ilshift__": [60, 65, 231, 297, 432], "nb_rshift": 60, "__rshift__": [60, 65, 231, 297, 393, 432, 434], "__rrshift__": [60, 65, 432], "nb_inplace_rshift": 60, "__irshift__": [60, 65, 231, 297, 432], "nb_and": 60, "__and__": [60, 65, 167, 231, 297, 393, 432, 434], "__rand__": [60, 65, 432, 434], "nb_inplace_and": 60, "__iand__": [60, 65, 167, 174, 231, 297, 432], "nb_xor": 60, "__xor__": [60, 65, 167, 231, 297, 393, 432, 434], "__rxor__": [60, 65, 432, 434], "nb_inplace_xor": 60, "__ixor__": [60, 65, 167, 231, 297, 432], "nb_or": 60, "__or__": [60, 65, 167, 231, 297, 351, 393, 432, 434], "__ror__": [60, 65, 432, 434, 485], "nb_inplace_or": 60, "__ior__": [60, 65, 167, 231, 297, 432], "nb_int": 60, "nb_reserv": 60, "nb_float": 60, "nb_floor_divid": 60, "__floordiv__": [60, 65, 110, 231, 297, 393, 432, 434, 468, 476, 485], "nb_inplace_floor_divid": 60, "__ifloordiv__": [60, 65, 231, 297, 432], "nb_true_divid": 60, "__truediv__": [60, 65, 110, 231, 258, 286, 297, 393, 432, 434, 468, 480], "nb_inplace_true_divid": 60, "__itruediv__": [60, 65, 231, 297, 432], "nb_matrix_multipli": 60, "__matmul__": [60, 65, 231, 297, 393, 432, 480], "__rmatmul__": [60, 65, 432, 480], "nb_inplace_matrix_multipli": 60, "__imatmul__": [60, 65, 231, 297, 432, 480], "mp_length": 60, "__len__": [60, 65, 90, 97, 122, 167, 201, 203, 212, 232, 277, 289, 291, 297, 351, 390, 393, 414, 417, 431, 432, 469, 470, 483, 485], "mp_subscript": [60, 485], "mp_ass_subscript": 60, "__setitem__": [60, 65, 90, 166, 167, 197, 201, 203, 212, 215, 231, 277, 289, 291, 297, 305, 393, 394, 411, 414, 417, 432, 440, 469, 474, 485], "__delitem__": [60, 65, 90, 166, 167, 201, 203, 212, 231, 277, 291, 297, 393, 411, 414, 417, 432, 469, 474], "sq_concat": 60, "sq_repeat": 60, "sq_item": [60, 485], "sq_ass_item": 60, "sq_inplace_concat": 60, "sq_inplace_repeat": 60, "releasebufferproc": 60, "_typeobject": [60, 85], "tp_compar": [60, 85], "tp_reserv": [60, 85, 480], "suit": [60, 65, 85, 94, 95, 97, 100, 104, 108, 109, 110, 167, 193, 200, 237, 260, 264, 289, 298, 348, 350, 386, 392, 393, 404, 426, 431, 460, 465, 471, 472, 473, 474, 476, 477, 479, 481, 482, 484, 485], "rich": [60, 61, 65, 85, 94, 113, 118, 166, 204, 232, 233, 297, 374, 380, 423, 432, 434, 436, 474, 477, 482, 484, 485, 486], "stuff": [60, 69, 85, 89, 100, 108, 109, 128, 175, 182, 200, 313, 393, 474], "resolut": [60, 65, 85, 86, 95, 97, 103, 122, 124, 133, 188, 189, 221, 223, 232, 233, 239, 252, 261, 299, 300, 301, 302, 305, 314, 344, 351, 371, 431, 432, 444, 469, 471, 478, 479, 480, 481, 483, 484, 485], "type_new": [60, 103, 485], "metatyp": [60, 261], "complain": [60, 86, 99, 100, 109, 175, 254, 467, 485], "foo_typ": 60, "_ob_next": 60, "_ob_prev": 60, "getobject": [60, 460, 483, 485], "pickl": [60, 65, 86, 94, 100, 108, 109, 148, 164, 166, 177, 182, 188, 189, 192, 233, 260, 268, 270, 273, 274, 275, 280, 289, 290, 304, 333, 336, 390, 393, 450, 470, 471, 472, 473, 474, 475, 476, 477, 482, 485, 486], "pydoc": [60, 65, 86, 94, 193, 232, 260, 424, 467, 468, 469, 470, 473, 475, 480, 485], "meaning": [60, 111, 129, 200, 205, 242, 261, 265, 274, 277, 299, 320, 325, 344, 348, 350, 359, 386, 389, 399, 402, 432, 438, 440, 474, 477, 479, 480, 485], "whichev": [60, 83, 85, 116, 120, 189, 218, 273, 354, 392, 465, 478, 480], "align": [60, 65, 124, 151, 160, 352, 367, 381, 388, 412, 472, 473, 485], "permiss": [60, 69, 78, 94, 95, 97, 108, 109, 115, 116, 169, 219, 220, 223, 230, 255, 292, 299, 300, 302, 317, 338, 339, 344, 349, 363, 365, 390, 399, 401, 409, 430, 465, 473, 482, 485], "pyobject_varnew": 60, "foo_dealloc": [60, 483], "foo_object": 60, "inconsist": [60, 196, 220, 299, 344, 393, 439, 467, 481, 485], "tp_print": [60, 484], "group": [60, 65, 69, 70, 79, 94, 99, 107, 108, 109, 114, 116, 124, 148, 158, 164, 175, 181, 184, 192, 193, 196, 200, 201, 210, 218, 226, 232, 255, 259, 260, 265, 267, 272, 277, 287, 289, 291, 294, 299, 302, 305, 316, 320, 325, 338, 340, 344, 346, 348, 349, 350, 351, 352, 355, 357, 363, 368, 370, 380, 381, 386, 395, 398, 404, 409, 413, 419, 423, 432, 434, 435, 438, 439, 456, 465, 466, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485], "relev": [60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 83, 85, 94, 95, 99, 100, 102, 104, 107, 108, 109, 116, 128, 129, 151, 173, 192, 193, 200, 201, 215, 222, 230, 249, 252, 259, 268, 273, 274, 275, 294, 298, 299, 306, 308, 312, 348, 351, 355, 360, 367, 392, 411, 418, 427, 429, 465, 466, 468, 470, 478, 479, 480, 481, 484, 485], "await": [60, 65, 97, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 167, 175, 176, 188, 193, 194, 197, 232, 261, 270, 351, 382, 389, 390, 392, 393, 431, 435, 437, 439, 466, 469, 476, 481, 482, 483, 484, 485], "feasibl": [60, 76, 83, 336, 476, 479], "deduc": [60, 181, 200, 289, 314, 465, 477], "isinst": [60, 65, 88, 95, 97, 98, 103, 108, 109, 118, 122, 158, 167, 175, 187, 189, 218, 232, 259, 260, 261, 268, 295, 297, 305, 351, 389, 390, 392, 393, 394, 431, 432, 444, 454, 466, 469, 470, 472, 474, 476, 477, 481, 482, 485], "among": [60, 113, 133, 147, 182, 187, 196, 200, 234, 239, 277, 289, 290, 306, 334, 354, 359, 371, 374, 380, 392, 432, 439, 465, 477, 483, 485], "mask": [60, 65, 182, 183, 262, 299, 328, 335, 338, 339, 344, 349, 361, 374, 381, 409, 432, 470, 472, 477, 478, 484, 485], "ore": [60, 184, 196, 200, 222, 299, 348, 374, 410], "java": [60, 65, 76, 88, 90, 94, 95, 104, 109, 111, 112, 122, 124, 232, 299, 351, 370, 414, 418, 419, 432, 438, 443, 445, 448, 466, 470, 471, 472, 474, 476, 477], "bitmask": [60, 133, 200, 301, 334, 335], "py_tpflags_have_stackless_extens": 60, "ins": [60, 104, 218, 466, 468, 469, 470], "abc": [60, 65, 83, 88, 90, 95, 97, 98, 100, 103, 104, 110, 111, 114, 118, 133, 139, 141, 166, 173, 176, 182, 188, 190, 193, 197, 233, 235, 249, 259, 260, 264, 265, 267, 273, 274, 286, 289, 296, 305, 321, 325, 327, 336, 337, 351, 352, 359, 367, 386, 389, 427, 430, 431, 432, 434, 436, 439, 444, 446, 466, 468, 469, 470, 471, 472, 473, 474, 481, 482, 483, 485], "634": [60, 65, 118, 431, 432, 485], "local_travers": 60, "_thread": [60, 65, 94, 170, 260, 370, 469, 478, 485], "localobject": [60, 100], "hand": [60, 78, 83, 85, 94, 95, 100, 104, 110, 111, 112, 116, 128, 135, 182, 183, 187, 192, 203, 208, 213, 218, 232, 237, 254, 264, 275, 305, 311, 325, 345, 371, 374, 388, 390, 393, 431, 434, 438, 440, 455, 466, 467, 468, 469, 471, 472, 474, 475, 478, 483, 485], "aid": [60, 347, 465, 469, 470, 473, 477, 478, 479, 485], "anyway": [60, 78, 86, 99, 182, 189, 232, 250, 254, 265, 392, 393, 467, 468, 485], "get_refer": [60, 65, 148, 234, 321, 469, 476, 485], "weakrefer": 60, "40217": [60, 484, 485], "doubt": [60, 94, 102, 173, 189, 471], "prove": [60, 104, 182, 348, 431, 469, 474, 475], "compos": [60, 65, 122, 179, 207, 208, 209, 210, 215, 278, 299, 342, 360, 361, 380, 386, 391, 439, 478], "local_clear": 60, "trash": [60, 277, 485], "reclam": 60, "weakref": [60, 65, 85, 95, 97, 188, 220, 260, 289, 322, 351, 367, 456, 467, 468, 470, 471, 473, 485], "py_return_richcompar": [60, 482, 485], "val_a": 60, "val_b": 60, "pyweakref_": 60, "__slots__": [60, 65, 97, 166, 187, 232, 233, 261, 406, 468, 473, 483, 485], "__weakref__": [60, 406, 432, 485], "unari": [60, 65, 128, 192, 197, 351, 393, 432, 437, 439, 478], "overload": [60, 65, 133, 193, 233, 390, 399, 423, 432, 434, 467, 468, 479, 485], "expens": [60, 76, 86, 95, 108, 154, 187, 194, 196, 233, 264, 272, 295, 314, 338, 345, 348, 359, 428, 436, 459, 470, 478, 479, 481, 482, 483], "account": [60, 69, 94, 111, 112, 164, 166, 169, 173, 189, 192, 196, 209, 216, 230, 232, 242, 251, 272, 273, 274, 292, 299, 302, 313, 316, 346, 354, 359, 364, 367, 471, 475, 476, 477, 479, 480, 481, 483, 484, 485], "dictoffset": 60, "_pyobject_getdictptr": 60, "reiniti": [60, 485], "unrel": [60, 83, 95, 122, 157, 218, 277, 344, 485], "thumb": [60, 110, 196, 381], "defer": [60, 65, 83, 108, 133, 166, 200, 239, 253, 264, 275, 284, 347, 348, 361, 467, 472, 485], "presum": [60, 108, 167, 181, 189, 216, 277, 289, 354, 398, 434, 468, 473, 474, 485], "mixtur": [60, 210, 435, 439, 480], "sane": [60, 183, 189, 325], "trivial": [60, 65, 70, 78, 82, 83, 85, 94, 104, 142, 158, 201, 207, 215, 241, 289, 305, 325, 355, 357, 394, 411, 469, 478, 479, 485], "local_fin": 60, "error_typ": 60, "error_valu": 60, "error_traceback": 60, "442": [60, 65, 85, 234, 484, 485], "tradit": [60, 69, 83, 86, 103, 116, 179, 272, 277, 281, 298, 299, 305, 314, 316, 364, 367, 431, 435, 436, 460, 465, 469, 472, 477, 482, 485], "ternari": [60, 432, 434], "operand": [60, 65, 99, 128, 164, 189, 197, 220, 232, 273, 296, 351, 432, 434, 440, 447, 453, 468, 473, 474, 477, 478, 485], "nb_long": 60, "pyobject_setslic": 60, "pyobject_delslic": 60, "augment": [60, 65, 69, 85, 95, 128, 200, 274, 282, 337, 380, 432, 435, 439, 459, 477, 485, 486], "root": [60, 65, 69, 70, 73, 76, 78, 79, 98, 103, 108, 109, 116, 117, 118, 120, 147, 148, 161, 166, 182, 192, 208, 212, 213, 214, 217, 226, 238, 242, 254, 255, 273, 274, 281, 289, 295, 299, 300, 302, 308, 310, 320, 338, 346, 348, 349, 350, 355, 359, 363, 367, 371, 374, 376, 377, 380, 381, 390, 392, 414, 417, 419, 425, 426, 427, 432, 456, 459, 460, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 483, 484, 485], "react": [60, 102, 278, 374, 466, 472], "adequ": [60, 86, 95, 220, 473, 478], "demonstr": [60, 76, 81, 83, 85, 99, 102, 109, 111, 112, 120, 122, 126, 146, 156, 182, 192, 218, 249, 251, 254, 284, 289, 290, 298, 313, 325, 326, 347, 374, 384, 385, 388, 392, 417, 429, 434, 446, 465, 467, 477, 485], "tricki": [60, 69, 95, 100, 154, 163, 218, 298, 374, 466, 467, 474], "tutori": [60, 65, 84, 99, 102, 109, 112, 115, 120, 124, 126, 168, 183, 200, 220, 232, 233, 254, 273, 274, 275, 279, 296, 304, 344, 351, 357, 373, 374, 411, 431, 438, 457, 468, 470, 471, 472, 476, 477, 485], "assort": [60, 65, 69, 84, 200, 380, 485], "topic": [60, 65, 78, 82, 84, 86, 89, 94, 102, 111, 162, 200, 273, 298, 313, 319, 344, 466, 469, 475, 485], "myobject": [60, 85], "myobject_typ": 60, "mymod": 60, "my": [60, 65, 70, 73, 83, 88, 100, 104, 109, 112, 115, 116, 158, 166, 200, 218, 237, 243, 255, 274, 302, 348, 351, 352, 374, 450, 466, 468, 469, 470, 471, 485], "myobj_new": 60, "myobj_dealloc": 60, "myobj_repr": 60, "inst_dict": 60, "weakreflist": [60, 85], "myobj_travers": 60, "myobj_clear": 60, "myobj_hash": 60, "mystr": 60, "mystr_typ": 60, "393": [61, 65, 164, 359, 476, 484, 486], "65536": [61, 453, 485], "1114112": [61, 164], "ineffici": [61, 95, 264, 299, 348, 386, 480, 485], "transit": [61, 65, 107, 115, 189, 218, 233, 267, 274, 336, 345, 399, 429, 434, 468, 470, 471, 473, 476, 478, 485], "canon": [61, 65, 69, 95, 97, 150, 173, 189, 191, 192, 202, 218, 242, 296, 298, 300, 302, 344, 353, 391, 417, 429, 434, 473, 480, 485], "legaci": [61, 65, 69, 116, 122, 144, 149, 169, 170, 178, 199, 201, 202, 203, 205, 209, 212, 213, 216, 224, 230, 242, 255, 258, 261, 262, 276, 294, 298, 299, 311, 338, 342, 348, 354, 359, 367, 392, 436, 439, 459, 465, 473, 477, 478, 479, 481, 483, 484, 485], "pyunicode_fromunicod": [61, 476, 478, 484, 485], "bear": [61, 116, 189, 250, 258, 289, 351, 359], "pyunicode_readi": [61, 478], "623": [61, 324, 476, 485], "py_ucs2": [61, 478], "py_ucs1": [61, 478], "narrow": [61, 325, 344, 350, 351, 390, 460, 468, 476, 477, 478, 485], "pyasciiobject": [61, 478], "pycompactunicodeobject": [61, 478], "shouldn": [61, 65, 86, 98, 100, 111, 139, 217, 273, 278, 308, 333, 348, 352, 359, 392, 399, 462, 467, 468, 470, 471, 472, 475, 481, 485], "pyunicode_check": [61, 86], "pyunicode_checkexact": 61, "pyunicode_get_length": [61, 476, 478], "pyunicode_1byte_data": [61, 478], "pyunicode_2byte_data": [61, 478], "pyunicode_4byte_data": [61, 478], "ucs1": [61, 485], "ucs2": [61, 485], "ucs4": [61, 468, 485], "pyunicode_kind": [61, 478], "pyunicode_wchar_kind": [61, 478], "pyunicode_1byte_kind": [61, 478], "pyunicode_2byte_kind": [61, 478], "pyunicode_4byte_kind": [61, 478], "pyunicode_data": [61, 478, 485], "pyunicode_writ": [61, 478], "saniti": [61, 460, 479, 485], "pyunicode_read": [61, 478], "pyunicode_read_char": [61, 478], "pyunicode_max_char_valu": [61, 478], "pyunicode_get_s": [61, 478], "pyunicode_get_data_s": [61, 478], "pyunicode_as_unicod": [61, 478], "pyunicode_as_data": [61, 478], "as_data": 61, "pyunicode_nbyte_data": 61, "py_unicode_isspac": [61, 485], "ch": [61, 100, 102, 108, 109, 164, 183, 196, 399, 464, 466, 485], "py_unicode_islow": 61, "lowercas": [61, 111, 114, 149, 162, 164, 173, 192, 203, 212, 242, 265, 300, 325, 351, 352, 359, 369, 402, 439, 474, 485], "py_unicode_isupp": 61, "uppercas": [61, 95, 100, 103, 114, 126, 155, 184, 218, 265, 298, 341, 351, 352, 439, 466, 473, 474, 479, 481, 485], "py_unicode_istitl": 61, "titlecas": [61, 351, 439, 485], "py_unicode_islinebreak": 61, "linebreak": 61, "py_unicode_isdecim": [61, 477], "py_unicode_isdigit": 61, "py_unicode_isnumer": 61, "py_unicode_isalpha": 61, "alphabet": [61, 95, 99, 149, 179, 184, 192, 203, 206, 268, 273, 277, 314, 332, 340, 351, 389, 469, 470, 471, 472, 473, 476, 479, 480, 481, 482, 483, 485], "py_unicode_isalnum": 61, "alphanumer": [61, 111, 158, 184, 200, 258, 274, 278, 305, 325, 337, 351, 352, 371, 469, 485], "py_unicode_isprint": 61, "printabl": [61, 65, 152, 164, 183, 184, 202, 203, 204, 205, 209, 210, 215, 232, 260, 288, 291, 292, 351, 352, 353, 368, 432, 467, 474, 477], "nonprint": [61, 323, 351], "databas": [61, 65, 82, 103, 111, 114, 148, 164, 181, 183, 187, 189, 216, 232, 250, 260, 267, 272, 282, 302, 304, 305, 314, 336, 346, 351, 353, 357, 368, 370, 371, 374, 380, 381, 395, 399, 429, 436, 439, 447, 467, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "0x20": [61, 149, 351, 432], "py_unicode_tolow": [61, 477], "py_unicode_toupp": 61, "upper": [61, 65, 69, 95, 102, 104, 108, 109, 111, 128, 129, 152, 155, 158, 166, 183, 196, 255, 287, 289, 325, 344, 345, 348, 351, 352, 380, 388, 392, 432, 434, 440, 469, 477, 483, 485], "py_unicode_totitl": 61, "py_unicode_todecim": 61, "py_unicode_todigit": 61, "py_unicode_tonumer": 61, "py_unicode_is_surrog": 61, "0xd800": 61, "0xdfff": 61, "py_unicode_is_high_surrog": 61, "0xdbff": 61, "py_unicode_is_low_surrog": 61, "0xdc00": 61, "py_unicode_join_surrog": 61, "join": [61, 65, 69, 78, 87, 89, 95, 104, 109, 112, 120, 126, 128, 129, 133, 140, 141, 158, 161, 164, 166, 170, 172, 181, 192, 196, 207, 209, 210, 215, 226, 229, 232, 249, 250, 251, 254, 265, 267, 274, 276, 285, 289, 290, 299, 300, 302, 308, 322, 325, 326, 327, 332, 337, 338, 342, 344, 345, 349, 351, 352, 367, 369, 370, 372, 389, 390, 398, 403, 411, 414, 415, 417, 425, 426, 429, 445, 453, 456, 466, 470, 471, 472, 477, 478, 479, 480, 481, 482, 483, 485], "pyunicode_new": [61, 476, 478], "maxchar": 61, "nearest": [61, 189, 192, 228, 232, 281, 295, 350, 405, 433, 440, 474, 475, 485], "65535": [61, 426, 468], "1114111": [61, 359, 478], "pyunicode_fromkindanddata": [61, 478], "favor": [61, 100, 167, 230, 232, 249, 255, 257, 294, 299, 302, 311, 342, 348, 351, 367, 390, 392, 399, 470, 472, 474, 476, 477, 479, 480, 481, 483, 485], "li": [61, 415, 480, 482, 485], "lld": [61, 460, 473], "lli": [61, 388], "llu": [61, 473], "zi": 61, "formatt": [61, 65, 124, 126, 274, 275, 298, 352, 368, 469, 473, 476, 477, 479, 480, 482, 485], "pyunicode_copycharact": [61, 476, 478, 485], "to_start": 61, "from_start": 61, "how_mani": 61, "memcpi": [61, 425, 485], "pyunicode_fil": [61, 478], "fill_char": 61, "bigger": [61, 103, 281, 338, 351, 363, 465, 483, 485], "contrast": [61, 113, 192, 233, 254, 314, 348, 351, 374, 390, 416, 432, 434, 436, 468, 478, 481, 482], "substr": [61, 100, 104, 111, 114, 173, 200, 242, 298, 300, 325, 351, 392, 434, 453, 466, 468, 469, 470, 471, 472, 476, 478, 480, 482, 485], "buflen": [61, 344], "copy_nul": 61, "awar": [61, 65, 87, 107, 111, 112, 113, 173, 185, 188, 201, 203, 207, 209, 210, 212, 213, 216, 233, 237, 255, 272, 278, 299, 347, 348, 352, 359, 371, 372, 374, 404, 417, 420, 459, 460, 465, 466, 468, 469, 470, 474, 475, 476, 477, 478, 481, 482, 485], "hit": [61, 65, 96, 102, 150, 160, 182, 191, 220, 233, 254, 303, 348, 364, 374, 384, 393, 405, 471, 476, 477, 485], "pyunicode_asunicod": [61, 478, 484, 485], "pyunicode_transformdecimaltoascii": [61, 478], "pyunicode_asunicodeands": [61, 478, 484, 485], "383": [61, 164, 344, 485], "strlen": [61, 89, 112, 114], "parsetupl": 61, "wcslen": 61, "pymem_alloc": 61, "setlocal": [61, 65, 97, 183, 253, 264, 272, 279, 420, 456, 480, 485], "deviat": [61, 110, 350, 355, 372, 398, 477, 478, 479, 485], "pyunicode_encod": [61, 478], "pyunicode_asutf8": [61, 478, 482, 485], "pyunicode_encodeutf8": [61, 478], "byteord": [61, 65, 321, 351, 354, 359, 454], "bom": [61, 65, 114, 151, 268, 383, 485], "divis": [61, 63, 65, 95, 97, 109, 119, 128, 152, 189, 192, 220, 308, 339, 350, 351, 432, 433, 434, 440, 447, 453, 469, 470, 472, 473, 477, 484, 485, 486], "pyunicode_encodeutf32": [61, 478], "feff": [61, 109, 114, 164], "py_unicode_wid": 61, "ufeff": 61, "ufff": 61, "odd": [61, 65, 102, 104, 160, 192, 242, 314, 350, 355, 439, 445, 466, 469, 470, 471, 473, 485], "pyunicode_encodeutf16": [61, 478], "pyunicode_encodeutf7": [61, 478], "base64seto": 61, "base64whitespac": 61, "punctuat": [61, 65, 111, 114, 292, 337, 352, 368, 439, 481], "pyunicode_encodeunicodeescap": [61, 478], "pyunicode_encoderawunicodeescap": [61, 478], "ordin": [61, 114, 164, 182, 183, 184, 189, 218, 350, 351, 478, 480], "pyunicode_encodelatin1": [61, 478], "pyunicode_encodeascii": [61, 478], "unmap": [61, 381], "0xfffe": [61, 164], "pyunicode_encodecharmap": [61, 478], "translat": [61, 65, 69, 83, 110, 111, 114, 118, 152, 164, 182, 183, 193, 219, 220, 226, 227, 229, 232, 245, 247, 252, 253, 258, 264, 268, 288, 299, 339, 341, 344, 350, 351, 352, 355, 391, 417, 423, 431, 432, 466, 469, 470, 472, 473, 474, 475, 477, 480, 482, 483, 485], "pyunicode_translatecharmap": [61, 478], "dbcs": [61, 164], "code_pag": [61, 478], "cp_acp": [61, 164, 478, 481], "pyunicode_encodembc": [61, 478, 485], "capabl": [61, 69, 70, 75, 86, 102, 103, 104, 109, 111, 128, 133, 145, 175, 183, 192, 200, 243, 255, 258, 259, 261, 264, 265, 278, 288, 289, 294, 298, 311, 312, 313, 326, 380, 394, 398, 417, 419, 426, 434, 459, 468, 469, 470, 471, 477, 478, 479, 480], "sep": [61, 65, 95, 104, 124, 152, 189, 192, 232, 238, 251, 254, 299, 348, 351, 352, 411, 431, 445, 468, 471, 472, 473, 474, 485], "maxsplit": [61, 111, 325, 351], "keepend": [61, 164, 196, 207, 351], "crlf": [61, 230, 251, 252, 482, 485], "tail": [61, 65, 158, 166, 196, 267, 279, 300, 340, 417, 471, 478, 481, 485], "suffix": [61, 65, 81, 100, 109, 116, 118, 182, 207, 226, 252, 255, 257, 258, 265, 273, 274, 275, 282, 299, 302, 325, 336, 342, 351, 365, 399, 434, 435, 460, 465, 466, 468, 477, 478, 483, 485], "overlap": [61, 65, 102, 111, 167, 172, 183, 196, 262, 265, 267, 288, 296, 298, 302, 325, 350, 351, 377, 388, 440, 467, 468, 485], "replstr": 61, "maxcount": 61, "uni": 61, "iso": [61, 157, 164, 189, 196, 202, 203, 209, 212, 246, 249, 272, 294, 320, 344, 347, 359, 371, 402, 411, 421, 423, 466, 470, 477, 480, 481, 483, 485], "8859": [61, 114, 164, 196, 202, 203, 209, 212, 249, 294, 320, 411, 421, 466, 477, 480], "clarif": [61, 436, 485], "lot": [61, 65, 69, 72, 83, 85, 87, 89, 94, 95, 100, 108, 111, 112, 114, 115, 116, 158, 175, 176, 182, 190, 200, 207, 241, 252, 265, 273, 289, 298, 310, 314, 336, 345, 355, 379, 386, 393, 413, 466, 467, 468, 469, 470, 472, 473, 474, 479, 484, 485], "neutral": [61, 78, 83, 107, 479], "grammar": [63, 65, 104, 118, 163, 270, 352, 382, 431, 435, 438, 439, 441, 466, 467, 471, 474, 476, 484, 485], "py_eval_input": [63, 89, 435], "py_file_input": [63, 435, 476], "py_single_input": [63, 435], "incompat": [63, 78, 90, 100, 110, 119, 182, 190, 220, 261, 265, 273, 277, 294, 305, 428, 440, 460, 466, 469, 471, 474, 477, 478, 480, 482, 483, 484, 485], "pyrun_anyfil": 63, "pyrun_anyfileexflag": 63, "closeit": 63, "pyrun_anyfileflag": 63, "pycompilerflag": [63, 483], "pyrun_anyfileex": 63, "devic": [63, 65, 69, 107, 137, 164, 183, 184, 219, 232, 243, 254, 264, 275, 299, 300, 302, 334, 335, 338, 339, 344, 349, 355, 357, 359, 363, 409, 417, 441, 459, 466, 472, 485], "pseudo": [63, 65, 100, 126, 187, 203, 260, 280, 292, 299, 308, 328, 332, 348, 351, 359, 395, 436, 468, 469, 472, 478, 481, 485], "pyrun_interactiveloop": [63, 89], "pyrun_simplefil": [63, 82], "pyrun_simplefileexflag": [63, 485], "pyrun_simplestringflag": 63, "pyrun_simplefileex": 63, "fopen": [63, 478], "rb": [63, 94, 97, 109, 110, 123, 133, 156, 166, 207, 215, 225, 232, 241, 257, 258, 264, 276, 294, 305, 308, 310, 351, 383, 390, 401, 405, 411, 423, 426, 439, 450, 456, 466, 469, 476, 478, 485], "lf": [63, 184, 215, 439, 485], "pyrun_interactiveon": [63, 485], "pyrun_interactiveoneflag": 63, "ps1": [63, 65, 163, 321, 344, 359, 403, 442, 454, 459, 483, 485], "ps2": [63, 65, 163, 321, 359, 442, 454, 459, 485], "errcod": [63, 65, 262, 423], "pyrun_interactiveloopflag": 63, "eof": [63, 65, 112, 125, 133, 136, 139, 141, 142, 156, 162, 163, 174, 200, 220, 229, 230, 232, 264, 276, 299, 315, 334, 337, 344, 348, 364, 428, 459, 471, 476, 478, 485], "prototyp": [63, 65, 81, 82, 100, 124, 162, 192, 347, 466, 471, 473, 485], "idl": [63, 65, 89, 90, 95, 97, 172, 181, 182, 184, 236, 260, 340, 355, 373, 374, 388, 414, 415, 417, 463, 465, 468, 469, 486], "wait": [63, 65, 74, 83, 95, 102, 109, 112, 115, 121, 124, 126, 128, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 170, 172, 183, 195, 214, 215, 252, 254, 260, 261, 266, 275, 288, 289, 290, 299, 301, 324, 328, 331, 335, 339, 342, 344, 345, 347, 348, 349, 355, 366, 367, 370, 375, 399, 403, 407, 445, 456, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485], "_tkinter": [63, 374, 469, 480, 484, 485], "pyos_readlinefunctionpoint": [63, 89, 476, 479, 485], "edit": [63, 65, 69, 72, 100, 102, 104, 109, 111, 114, 116, 124, 162, 173, 183, 196, 257, 258, 268, 277, 278, 299, 300, 325, 326, 350, 363, 372, 373, 374, 381, 449, 459, 465, 466, 467, 469, 470, 472, 474, 477, 478, 481, 482, 485], "pyrun_str": [63, 89, 485], "pyrun_stringflag": 63, "pyrun_fil": 63, "pyrun_fileexflag": 63, "pyrun_fileex": 63, "pyrun_fileflag": 63, "py_compilestringflag": 63, "py_compilestringexflag": 63, "py_compilestringobject": 63, "constrain": [63, 107, 128, 215, 290, 390, 417, 434, 436, 468, 471, 477, 483], "kws": [63, 232, 359], "kwcount": 63, "defcount": 63, "kwdef": 63, "precompil": [63, 330, 351, 459, 485], "unvarnish": 63, "thrown": [63, 100, 104, 144, 189, 192, 300, 468, 469, 478, 485], "pyeval_mergecompilerflag": 63, "cf": [63, 111, 344], "arbitrarili": [63, 76, 128, 173, 175, 197, 274, 351, 392, 399, 434, 470, 476, 483, 485], "__future__": [63, 65, 97, 98, 110, 118, 165, 220, 232, 260, 261, 269, 321, 390, 431, 432, 440, 468, 469, 471, 472, 474, 476, 479, 480, 482, 484, 485, 486], "cf_flag": [63, 483], "cf_feature_vers": [63, 483, 485], "pycf_only_ast": [63, 65, 128, 270, 471, 483, 485], "co_future_divis": [63, 484], "238": [63, 65, 97, 119, 474, 486], "proxi": [64, 65, 170, 173, 176, 188, 193, 220, 232, 233, 249, 255, 341, 348, 351, 389, 392, 399, 406, 414, 423, 430, 432, 467, 472, 477, 478, 480, 481, 483, 485], "pyweakref_check": 64, "pyweakref_checkref": 64, "pyweakref_checkproxi": 64, "pyweakref_get_object": 64, "summari": [65, 69, 70, 78, 94, 100, 200, 259, 298, 308, 313, 328, 357, 384, 385, 411, 430, 457, 465, 467, 468, 469, 470, 477, 485, 486], "highlight": [65, 90, 102, 183, 196, 254, 392, 398, 461, 466, 473, 477, 485, 486], "wildcard": [65, 128, 195, 227, 238, 294, 337, 348, 355, 392, 417, 439, 445, 449, 482, 483, 485], "604": [65, 98, 351, 390, 485], "612": [65, 108, 390, 472, 485], "613": [65, 390, 485], "typealia": [65, 193, 390, 485], "647": [65, 390, 485], "asyncio": [65, 94, 109, 120, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 167, 170, 175, 194, 260, 266, 289, 341, 348, 355, 359, 370, 393, 394, 432, 434, 459, 485], "argpars": [65, 105, 109, 124, 166, 196, 207, 235, 260, 298, 315, 403, 455, 485, 486], "asynchat": [65, 145, 260, 357, 430, 472, 479, 485], "asyncor": [65, 129, 260, 341, 345, 357, 430, 470, 472, 485], "smtpd": [65, 201, 260, 357, 481, 484, 485], "base64": [65, 152, 164, 202, 203, 204, 205, 206, 209, 210, 213, 215, 242, 255, 259, 260, 291, 323, 332, 333, 342, 348, 386, 399, 401, 423, 468, 470, 484, 485], "bdb": [65, 173, 191, 260, 303, 460, 473, 483, 485], "bisect": [65, 188, 260, 456, 470, 485], "contextlib": [65, 88, 260, 321, 351, 386, 390, 473, 474, 475, 483, 485], "curs": [65, 100, 105, 124, 260, 466, 467, 470, 472, 485], "dataclass": [65, 166, 243, 260, 313, 314, 321, 322, 351, 445, 485], "distutil": [65, 67, 70, 72, 75, 77, 78, 79, 84, 86, 87, 117, 198, 259, 260, 287, 340, 360, 403, 425, 459, 460, 463, 465, 467, 471, 472, 473, 477, 483, 485, 486], "doctest": [65, 88, 94, 118, 182, 193, 260, 367, 383, 385, 386, 392, 455, 467, 469, 471, 473, 475, 477, 478, 485], "fileinput": [65, 226, 232, 260, 299, 359, 471, 477, 483, 485], "glob": [65, 71, 78, 109, 148, 150, 193, 200, 226, 227, 260, 287, 300, 302, 303, 338, 355, 357, 455, 472, 473, 477, 481, 485], "hmac": [65, 179, 180, 242, 260, 275, 289, 305, 332, 344, 468, 473, 483, 485], "idlelib": [65, 373, 374, 469, 485], "metadata": [65, 67, 75, 76, 77, 78, 79, 94, 106, 115, 117, 187, 233, 237, 258, 260, 261, 286, 294, 299, 300, 317, 338, 349, 363, 390, 423, 425, 432, 436, 445, 457, 477, 479, 480, 481, 482, 483, 484, 485, 486], "itertool": [65, 97, 118, 166, 231, 232, 233, 243, 254, 258, 260, 285, 297, 324, 350, 469, 470, 471, 472, 473, 474, 475, 485], "linecach": [65, 226, 260, 386, 485], "pathlib": [65, 126, 148, 169, 226, 238, 258, 259, 260, 299, 300, 420, 425, 426, 485], "pprint": [65, 103, 154, 188, 196, 260, 303, 305, 348, 456, 467, 475, 477, 485], "py_compil": [65, 69, 95, 169, 257, 260, 270, 357, 473, 477, 479, 485], "pyclbr": [65, 260, 270, 485], "shelv": [65, 94, 190, 260, 280, 304, 305, 333, 351, 466, 469, 477, 485], "ssl": [65, 115, 133, 139, 141, 230, 249, 255, 260, 266, 275, 294, 299, 311, 333, 342, 344, 390, 399, 411, 423, 430, 460, 464, 466, 469, 470, 473, 484, 485], "sqlite3": [65, 94, 103, 148, 166, 260, 304, 305, 460, 472, 473, 483, 485], "unittest": [65, 88, 94, 118, 193, 260, 367, 386, 404, 455, 469, 475, 484, 485], "urllib": [65, 94, 105, 118, 141, 148, 158, 172, 175, 230, 233, 248, 249, 250, 260, 262, 275, 313, 386, 393, 403, 455, 466, 469, 471, 472, 474, 483, 485], "zipimport": [65, 260, 286, 308, 436, 469, 471, 475, 485], "652": [65, 485], "secur": [65, 75, 95, 109, 116, 124, 133, 170, 180, 182, 230, 249, 250, 251, 255, 260, 262, 275, 276, 278, 289, 291, 292, 294, 299, 305, 311, 320, 332, 337, 340, 342, 344, 351, 357, 399, 409, 411, 413, 415, 416, 417, 418, 423, 424, 428, 462, 466, 467, 468, 469, 471, 472, 477, 478, 480, 481, 482, 483, 484, 486], "zoneinfo": [65, 188, 189, 260, 371, 460, 485], "graphlib": [65, 188, 260, 485], "ast": [65, 190, 232, 260, 270, 358, 382, 471, 476, 478, 482, 485], "compileal": [65, 95, 260, 270, 317, 359, 454, 465, 477, 481, 485], "fcntl": [65, 148, 260, 344, 395, 468, 469, 470, 472, 485], "ftplib": [65, 148, 164, 260, 262, 399, 467, 469, 472, 473, 477, 479, 480, 481, 485], "http": [65, 73, 78, 90, 94, 108, 109, 112, 115, 129, 139, 148, 149, 158, 164, 172, 175, 189, 201, 207, 215, 216, 247, 260, 262, 275, 291, 319, 320, 333, 339, 344, 345, 348, 357, 367, 386, 397, 398, 399, 400, 413, 417, 419, 422, 423, 424, 428, 430, 432, 436, 455, 456, 457, 458, 459, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 483, 485], "imaplib": [65, 111, 148, 201, 260, 262, 311, 468, 469, 470, 473, 475, 481, 485], "ipaddress": [65, 105, 260, 262, 483, 485], "math": [65, 97, 100, 104, 116, 161, 172, 192, 200, 219, 228, 232, 260, 289, 295, 296, 324, 350, 351, 354, 359, 388, 390, 430, 432, 434, 446, 448, 450, 455, 460, 469, 470, 472, 473, 475, 485], "multiprocess": [65, 94, 108, 112, 132, 170, 172, 254, 260, 275, 322, 333, 348, 367, 370, 402, 411, 425, 473, 474, 485, 486], "nntplib": [65, 148, 201, 208, 260, 357, 466, 470, 473, 475, 477, 485], "pdb": [65, 95, 120, 148, 150, 191, 200, 232, 260, 359, 386, 459, 465, 469, 471, 472, 475, 485], "poplib": [65, 148, 201, 260, 262, 455, 470, 478, 481, 485], "smtplib": [65, 94, 109, 148, 201, 207, 208, 215, 260, 262, 275, 348, 455, 468, 472, 477, 481, 485], "unicodedata": [65, 111, 114, 260, 351, 368, 434, 439, 466, 471, 472, 473, 476, 477, 478, 485], "venv": [65, 97, 117, 120, 198, 259, 260, 457, 465, 478, 482, 485], "sur": [65, 485], "appl": [65, 103, 196, 218, 224, 254, 260, 275, 297, 446, 455, 463, 469, 472, 473, 481, 485], "silicon": [65, 485], "mac": [65, 67, 116, 232, 242, 309, 338, 348, 381, 402, 460, 462, 474, 476, 477, 479, 481, 482, 485], "parallel": [65, 69, 94, 97, 104, 131, 133, 135, 140, 142, 169, 170, 214, 232, 239, 242, 260, 267, 359, 388, 392, 405, 407, 417, 459, 466, 473, 477, 478, 479, 480, 484, 485], "band": [65, 145, 304, 334, 485], "cprofil": [65, 191, 471, 485], "csv": [65, 166, 224, 260, 367, 455, 469, 471, 475, 481, 485], "functool": [65, 95, 97, 98, 103, 113, 118, 133, 135, 154, 166, 231, 232, 259, 260, 261, 267, 351, 432, 471, 472, 473, 474, 475, 485], "gettext": [65, 109, 253, 260, 272, 415, 439, 455, 466, 470, 485], "gzip": [65, 69, 70, 79, 90, 97, 109, 125, 156, 164, 207, 225, 260, 282, 338, 363, 367, 413, 430, 455, 466, 469, 473, 475, 476, 479, 481, 485], "json": [65, 108, 109, 126, 173, 259, 260, 264, 274, 275, 291, 304, 313, 449, 455, 473, 475, 476, 477, 478, 479, 484, 485], "plistlib": [65, 224, 260, 481, 482, 484, 485], "shlex": [65, 120, 133, 142, 173, 229, 260, 303, 355, 484, 485], "shutil": [65, 94, 109, 115, 125, 148, 172, 226, 232, 241, 260, 299, 355, 363, 367, 406, 455, 469, 472, 473, 476, 482, 485], "tarfil": [65, 120, 125, 260, 338, 455, 469, 470, 471, 472, 473, 481, 482, 485], "tkinter": [65, 90, 111, 260, 373, 388, 463, 466, 469, 472, 474, 475, 485], "xmlrpc": [65, 260, 262, 305, 413, 430, 455, 468, 474, 479, 485], "demo": [65, 81, 99, 109, 111, 183, 229, 254, 411, 415, 424, 455, 469, 472, 477], "563": [65, 119, 294, 390, 431, 440, 485], "postpon": [65, 119, 183, 258, 390, 431, 432, 485], "553": [65, 485], "562": [65, 432, 485], "564": [65, 485], "nanosecond": [65, 299, 371, 409, 471, 478, 483, 484, 485], "565": [65, 220], "560": [65, 389, 432, 485], "545": 65, "dev": [65, 89, 90, 106, 109, 133, 194, 233, 236, 275, 277, 278, 299, 301, 313, 339, 355, 359, 360, 442, 459, 463, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 480, 485], "binascii": [65, 149, 153, 164, 260, 291, 401, 430, 473, 479, 484, 485], "calendar": [65, 188, 189, 260, 371, 455, 466, 469, 481, 485], "crypt": [65, 180, 260, 316, 357, 430, 481, 485], "dbm": [65, 94, 260, 304, 305, 336, 432, 460, 473, 474, 483, 485], "dis": [65, 97, 260, 270, 306, 359, 481, 485], "server": [65, 94, 95, 102, 104, 108, 112, 115, 116, 129, 141, 158, 173, 176, 182, 198, 201, 205, 207, 215, 230, 233, 242, 248, 249, 250, 251, 254, 255, 260, 262, 265, 273, 274, 275, 289, 294, 299, 302, 311, 319, 324, 333, 334, 335, 339, 341, 342, 344, 347, 357, 359, 361, 364, 367, 370, 374, 386, 390, 397, 399, 413, 422, 430, 455, 456, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 483, 484, 485, 486], "mimetyp": [65, 204, 207, 260, 278, 291, 386, 411, 468, 472, 481, 485], "msilib": [65, 260, 357, 471, 472, 485], "queue": [65, 94, 108, 109, 112, 129, 130, 133, 141, 166, 170, 183, 188, 239, 260, 267, 275, 299, 324, 328, 331, 334, 344, 345, 351, 364, 366, 370, 374, 417, 449, 456, 466, 469, 470, 471, 472, 474, 477, 480, 483, 484, 485], "socketserv": [65, 109, 248, 252, 260, 262, 344, 424, 472, 473, 474, 485], "mock": [65, 193, 260, 386, 392, 478, 479, 483, 484, 485], "uu": [65, 152, 164, 401, 430, 468, 485], "uuid": [65, 260, 262, 287, 344, 471, 483, 485], "etre": [65, 260, 279, 413, 415, 455, 471, 473, 477, 481, 483, 484, 485], "zipapp": [65, 120, 198, 260, 485], "zipfil": [65, 69, 70, 79, 125, 260, 330, 333, 338, 363, 404, 425, 436, 455, 456, 459, 466, 471, 472, 473, 475, 485], "aifc": [65, 260, 343, 356, 357, 405, 466, 484, 485], "macpath": [65, 483, 485], "sunau": [65, 260, 357, 484, 485], "wave": [65, 160, 260, 283, 356, 466, 481, 484, 485], "498": [65, 97, 439, 479, 485], "526": [65, 97, 109, 128, 187, 390, 431, 440, 476, 482, 483, 485], "515": [65, 352, 485], "525": [65, 97, 167, 261, 359, 434, 485], "530": [65, 434, 485], "487": [65, 485], "enhanc": [65, 90, 97, 102, 104, 109, 112, 181, 199, 233, 252, 274, 341, 348, 355, 367, 381, 388, 390, 434, 439, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 485, 486], "519": [65, 97, 386, 485], "495": [65, 429, 485], "520": 65, "468": [65, 166, 485], "dtrace": [65, 105, 460, 485], "systemtap": [65, 105, 460, 485], "probe": [65, 479, 485], "cmath": [65, 97, 260, 281, 296, 351, 470, 472, 479, 485], "email": [65, 69, 76, 78, 97, 108, 149, 152, 242, 249, 250, 252, 259, 260, 274, 275, 277, 278, 291, 299, 325, 341, 342, 348, 359, 371, 399, 430, 436, 455, 457, 468, 470, 471, 472, 473, 485], "pickletool": [65, 260, 270, 305, 386, 472, 485], "rlcomplet": [65, 120, 260, 326, 340, 368, 471, 472, 485], "telnetlib": [65, 148, 260, 357, 472, 485], "timeit": [65, 95, 175, 191, 260, 314, 455, 459, 469, 470, 472, 485], "robotpars": [65, 260, 262, 396, 466, 474, 485], "winreg": [65, 148, 260, 408, 454, 474, 485], "winsound": [65, 87, 260, 408, 485], "grp": [65, 260, 316, 346, 355, 395, 469, 484, 485], "regen": [65, 460, 485], "13": [65, 104, 106, 109, 114, 116, 118, 144, 147, 157, 164, 166, 179, 182, 189, 200, 233, 243, 248, 265, 267, 284, 300, 328, 338, 350, 351, 352, 365, 383, 388, 391, 439, 445, 450, 453, 454, 468, 469, 470, 471, 472, 473, 477, 479, 480, 482, 483, 484, 485, 486], "492": [65, 97, 167, 261, 431, 432, 434, 481, 485], "465": [65, 342, 485], "infix": 65, "448": [65, 434, 485], "unpack": [65, 70, 76, 83, 94, 100, 104, 109, 116, 118, 128, 151, 166, 197, 207, 222, 232, 289, 310, 338, 344, 352, 354, 357, 389, 393, 431, 434, 435, 440, 446, 447, 449, 456, 466, 470, 471, 472, 474, 476, 477, 479, 483, 485], "461": [65, 351], "percent": [65, 94, 270, 350, 352, 382, 398, 465, 472, 474, 477, 485], "484": [65, 97, 128, 351, 390, 431, 432, 440, 445, 476, 481, 482, 483, 485], "471": [65, 166, 485], "scandir": [65, 124, 148, 238, 299, 481, 482, 483, 485], "475": [65, 220, 232, 299, 334, 335, 339, 344, 371, 485], "retri": [65, 100, 111, 115, 220, 275, 299, 334, 335, 339, 344, 348, 355, 399, 433, 445, 468, 469, 473, 485], "479": [65, 119, 220, 481, 482, 485], "485": [65, 161, 281, 485], "486": [65, 221, 478, 485], "launcher": [65, 403, 425, 452, 462, 473, 479, 481, 482, 485, 486], "488": [65, 69, 258, 317, 367, 459, 485], "elimin": [65, 103, 108, 110, 113, 192, 196, 258, 259, 267, 268, 277, 300, 302, 306, 388, 470, 478, 483, 485], "pyo": [65, 169, 257, 258, 386, 469, 472, 473, 479, 485], "bz2": [65, 69, 70, 79, 125, 164, 182, 225, 260, 276, 302, 338, 363, 367, 426, 455, 469, 473, 475, 476, 479, 484, 485], "cgi": [65, 90, 115, 252, 260, 333, 334, 357, 399, 400, 411, 424, 458, 466, 472, 476, 477, 479, 481, 482, 483, 484, 485], "configpars": [65, 120, 224, 260, 274, 337, 466, 470, 473, 474, 475, 479, 482, 485], "difflib": [65, 151, 200, 223, 260, 368, 467, 468, 470, 471, 472, 473, 479, 485], "heapq": [65, 97, 188, 232, 233, 260, 322, 324, 456, 469, 470, 471, 472, 485], "imghdr": [65, 207, 213, 260, 357, 485], "lzma": [65, 125, 156, 260, 338, 363, 367, 413, 426, 455, 476, 479, 485], "selector": [65, 104, 132, 133, 137, 249, 260, 262, 266, 267, 334, 339, 345, 348, 366, 373, 399, 473, 475, 482, 485], "sndhdr": [65, 213, 260, 357, 485], "bio": [65, 294, 485], "negoti": [65, 145, 248, 348, 472, 478, 485], "sysconfig": [65, 75, 78, 82, 260, 299, 321, 386, 425, 429, 476, 479, 485], "wsgiref": [65, 260, 262, 477, 481, 483, 485], "sax": [65, 260, 279, 413, 414, 415, 416, 455, 466, 467, 476, 483, 485], "453": [65, 217], "bootstrap": [65, 117, 148, 198, 260, 324, 340, 403, 485], "pip": [65, 67, 110, 116, 120, 198, 199, 259, 260, 267, 403, 425, 449, 463, 465, 476, 485], "446": [65, 473], "ensurepip": [65, 117, 148, 198, 260, 403, 460, 476, 485], "audioop": [65, 260, 357, 471, 484, 485], "colorsi": [65, 260, 283], "filecmp": [65, 196, 226, 260, 466, 485], "html": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 88, 89, 90, 104, 108, 111, 115, 116, 133, 141, 157, 158, 159, 164, 168, 196, 207, 212, 249, 250, 252, 254, 260, 279, 299, 319, 348, 357, 374, 384, 398, 399, 400, 411, 415, 416, 417, 421, 423, 424, 428, 430, 432, 439, 456, 459, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 482, 483, 484, 485, 486], "pti": [65, 148, 260, 299, 348, 395, 485], "stat": [65, 69, 97, 114, 124, 191, 196, 223, 226, 241, 258, 260, 262, 264, 275, 294, 299, 300, 302, 311, 338, 348, 357, 363, 386, 390, 436, 468, 469, 471, 472, 476, 477, 480, 481, 482, 483, 485], "textwrap": [65, 126, 260, 368, 456, 469, 472, 485], "445": 65, "456": [65, 83, 109, 192], "interchang": [65, 109, 123, 149, 160, 189, 192, 220, 242, 268, 273, 351, 374, 390, 394, 432, 439, 466, 472, 477, 478], "436": [65, 325], "clinic": [65, 105, 481, 483, 485], "476": [65, 386, 485], "certif": [65, 133, 139, 230, 249, 255, 275, 311, 342, 367, 399, 423, 472, 482, 485], "verif": [65, 274, 347, 348, 351, 477], "405": [65, 115, 248, 403, 486], "420": [65, 97, 258, 436, 485, 486], "3118": [65, 351, 474, 483, 485, 486], "flexibl": [65, 78, 83, 94, 99, 100, 103, 107, 108, 109, 111, 118, 139, 158, 175, 182, 196, 200, 203, 212, 215, 237, 273, 274, 289, 298, 301, 305, 347, 351, 355, 363, 371, 390, 393, 404, 415, 417, 432, 466, 467, 469, 471, 473, 474, 477, 480, 484, 486], "397": [65, 338, 403, 465, 480, 485, 486], "rework": [65, 220, 294, 467, 468, 469, 471, 473, 477, 481, 485, 486], "380": [65, 434, 486], "subgener": [65, 434, 486], "409": [65, 115, 248, 486], "414": [65, 115, 192, 248, 386, 439, 469, 485, 486], "3155": [65, 97, 486], "qualifi": [65, 78, 97, 103, 111, 197, 200, 204, 257, 258, 261, 274, 275, 305, 325, 341, 342, 344, 351, 355, 390, 392, 402, 404, 417, 420, 427, 432, 436, 440, 459, 465, 471, 480, 483, 485, 486], "412": [65, 115, 233, 248, 486], "362": [65, 97, 106, 261, 486], "421": [65, 248, 359, 485, 486], "simplenamespac": [65, 166, 188, 313, 389, 484, 485], "finer": [65, 84, 108, 133, 188, 273, 299, 482, 483, 485, 486], "grain": [65, 94, 108, 109, 183, 200, 273, 299, 324, 359, 399, 432, 486], "framework": [65, 69, 94, 109, 122, 129, 130, 133, 139, 162, 173, 176, 182, 191, 193, 200, 201, 229, 254, 260, 262, 340, 342, 348, 351, 359, 373, 390, 392, 393, 399, 411, 424, 432, 460, 463, 468, 469, 472, 473, 474, 477, 479, 480, 482, 483, 484, 485, 486], "sched": [65, 170, 260, 472, 485], "tempfil": [65, 115, 148, 207, 226, 232, 260, 289, 299, 333, 367, 399, 406, 472, 474, 485], "webbrows": [65, 148, 207, 260, 262, 466, 471, 485], "elementtre": [65, 260, 279, 413, 415, 455, 479, 481, 483, 484, 485], "384": [65, 189, 471, 476, 484, 485, 486], "389": [65, 486], "391": [65, 486], "3148": [65, 172, 486], "repositori": [65, 258, 429, 464, 466, 467, 471, 473, 485, 486], "3149": [65, 359, 485, 486], "3333": [65, 411, 486], "web": [65, 78, 94, 95, 104, 110, 112, 114, 115, 116, 129, 158, 233, 242, 251, 252, 254, 260, 262, 263, 275, 278, 319, 347, 348, 399, 411, 414, 424, 430, 436, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 485, 486], "gateway": [65, 115, 158, 262, 471, 486], "v1": [65, 344, 354, 485, 486], "fraction": [65, 83, 114, 189, 192, 200, 232, 233, 260, 267, 272, 281, 295, 296, 314, 325, 347, 348, 350, 351, 370, 371, 388, 434, 439, 448, 453, 468, 469, 470, 471, 473, 474, 475, 476, 480, 481, 483, 484, 485], "ftp": [65, 90, 115, 260, 262, 275, 292, 398, 399, 464, 466, 467, 472, 473, 478, 484, 485], "popen": [65, 109, 124, 133, 139, 142, 148, 158, 170, 215, 255, 299, 307, 312, 334, 344, 365, 367, 403, 432, 470, 472, 478, 479, 481, 482, 483, 485], "nntp": [65, 201, 260, 357, 398, 470, 478, 484, 485], "mailbox": [65, 95, 201, 208, 255, 260, 291, 311, 471, 473, 481, 484, 485], "turtledemo": [65, 229, 254, 485], "372": [65, 486], "378": [65, 352, 386, 486], "thousand": [65, 114, 242, 272, 313, 314, 325, 352, 413, 445, 481, 482, 485, 486], "stumbl": [65, 112, 486], "vs": [65, 188, 193, 314, 368, 372, 431, 485], "overview": [65, 84, 107, 112, 114, 229, 262, 265, 283, 286, 294, 298, 313, 314, 321, 413, 465, 466, 467, 468, 469, 471, 472, 473, 477, 480, 482, 486], "3101": [65, 352, 486], "miscellan": [65, 75, 124, 125, 162, 170, 197, 201, 224, 260, 291, 373, 411, 462, 485, 486], "3106": [65, 486], "3137": [65, 486], "ttk": [65, 260, 373, 374, 380, 475, 481, 482, 483, 485], "theme": [65, 254, 260, 373, 374, 469, 472, 475, 481, 482, 485], "widget": [65, 91, 102, 103, 109, 116, 124, 175, 187, 195, 254, 260, 298, 373, 376, 388, 392, 466, 469, 470, 475, 477, 481, 485], "tk": [65, 116, 254, 260, 376, 377, 388, 443, 460, 463, 465, 466, 467, 472, 475, 476, 477, 478, 480, 481, 482, 484, 485], "freebsd": [65, 102, 121, 139, 299, 301, 315, 328, 334, 344, 359, 367, 370, 371, 462, 471, 479, 482, 484, 485], "mainten": [65, 217, 439, 465, 476, 477, 478, 479, 482, 483, 484, 485, 486], "434": [65, 254], "branch": [65, 144, 161, 197, 276, 325, 367, 380, 384, 466, 471, 472, 476, 484, 485], "466": 65, "network": [65, 108, 112, 114, 115, 116, 129, 132, 139, 141, 145, 147, 151, 190, 219, 254, 256, 260, 262, 275, 289, 294, 299, 305, 328, 334, 342, 348, 354, 363, 367, 398, 399, 402, 409, 413, 418, 424, 436, 467, 468, 469, 472, 478, 480, 482, 483, 485], "477": 65, "backport": [65, 110, 192, 254, 258, 259, 390, 393, 472, 476, 480, 481, 482, 483, 484, 485], "493": [65, 106], "roundup": [65, 90], "343": [65, 97, 119, 175, 431, 432, 450, 453, 474, 486], "366": [65, 106, 189, 218, 258, 330, 371, 436, 474, 478, 486], "370": [65, 340, 459, 474, 486], "371": [65, 474, 486], "3105": [65, 119, 474, 486], "3110": [65, 474, 486], "3112": [65, 119, 474, 486], "3116": [65, 97, 474, 475, 486], "3127": [65, 474, 486], "3129": [65, 431, 474, 486], "decor": [65, 97, 103, 109, 122, 128, 144, 146, 167, 182, 187, 193, 218, 232, 233, 258, 261, 321, 327, 351, 367, 390, 392, 424, 431, 432, 434, 435, 471, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485, 486], "3141": [65, 122, 295, 474, 486], "future_builtin": [65, 118], "javascript": [65, 173, 247, 251, 268, 305, 445, 450, 476, 485], "notat": [65, 88, 97, 104, 107, 109, 111, 114, 173, 192, 232, 265, 268, 279, 284, 299, 305, 320, 344, 351, 352, 355, 368, 374, 393, 414, 417, 419, 431, 432, 434, 435, 437, 439, 444, 450, 459, 469, 470, 471, 474, 477, 483, 484, 485], "irix": [65, 474, 485], "308": [65, 233, 248, 434, 486], "309": [65, 486], "314": [65, 69, 95, 486], "328": [65, 119, 232, 258, 436, 474, 478, 486], "338": [65, 330, 436, 459, 486], "341": [65, 109, 486], "unifi": [65, 113, 128, 164, 196, 200, 305, 391, 479, 485, 486], "342": [65, 104, 167, 372, 434, 486], "352": [65, 472, 474, 486], "ssize_t": [65, 100, 182, 354, 477, 478, 486], "357": [65, 486], "218": [65, 233, 486], "237": [65, 351, 474, 486], "289": [65, 104, 233, 486], "292": [65, 109, 273, 352, 486], "substitut": [65, 69, 95, 97, 108, 109, 111, 118, 138, 149, 164, 170, 173, 184, 189, 192, 200, 258, 267, 278, 298, 299, 314, 325, 326, 327, 347, 351, 352, 364, 368, 383, 390, 407, 430, 431, 434, 440, 451, 456, 465, 469, 471, 472, 473, 477, 479, 480, 485, 486], "318": [65, 431, 486], "322": [65, 486], "324": [65, 95, 355, 486], "327": [65, 486], "331": [65, 486], "cookielib": [65, 473, 474], "datatyp": [65, 85, 95, 182, 192, 224, 268, 305, 470, 472, 473, 475, 477, 486], "263": [65, 114, 258, 383, 471, 485, 486], "273": [65, 164, 276, 290, 331, 427, 486], "zip": [65, 69, 70, 76, 79, 95, 97, 104, 116, 118, 120, 125, 152, 164, 166, 172, 198, 232, 258, 259, 260, 267, 281, 286, 333, 338, 347, 351, 352, 363, 367, 413, 436, 444, 446, 454, 456, 457, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 485, 486], "archiv": [65, 70, 75, 76, 77, 79, 94, 110, 116, 120, 125, 198, 226, 242, 259, 260, 277, 286, 349, 367, 403, 430, 455, 466, 467, 471, 472, 473, 475, 477, 479, 482, 483, 485, 486], "277": [65, 486], "nt": [65, 69, 108, 115, 166, 275, 299, 309, 320, 359, 360, 365, 403, 415, 417, 466, 477, 483, 485, 486], "278": [65, 97, 486], "univers": [65, 69, 72, 97, 181, 189, 218, 232, 242, 255, 258, 264, 351, 363, 371, 392, 402, 426, 460, 463, 470, 471, 472, 479, 481, 482, 484, 485, 486], "279": [65, 233, 486], "282": [65, 75, 273, 338, 486], "285": [65, 97, 444, 486], "293": [65, 386, 486], "301": [65, 69, 109, 115, 248, 399, 485, 486], "302": [65, 97, 115, 232, 248, 249, 252, 257, 258, 271, 308, 330, 359, 399, 427, 436, 471, 472, 475, 478, 485, 486], "305": [65, 115, 181, 248, 486], "307": [65, 115, 248, 305, 399, 486], "optpars": [65, 99, 124, 260, 357, 470, 471, 473, 477, 481, 485], "252": [65, 107, 341, 432, 485, 486], "253": [65, 107, 486], "diamond": [65, 183, 218, 232, 432], "234": [65, 192, 352, 456, 475, 480, 486], "227": [65, 119, 486], "236": [65, 440, 486], "207": [65, 248, 486], "230": [65, 230, 477, 481, 486], "229": [65, 486], "205": [65, 115, 248, 252, 294, 406, 485, 486], "232": [65, 486], "235": [65, 258, 485, 486], "217": [65, 386, 486], "208": [65, 248, 486], "241": [65, 486], "sax2": [65, 260, 279, 413, 415, 419], "dom": [65, 260, 279, 413, 419, 455, 467, 469, 471, 483, 485], "relationship": [65, 75, 103, 139, 167, 189, 200, 304, 350, 351, 359, 374, 384, 406, 414, 430, 432, 471, 485], "pyxml": [65, 78, 467], "changelog": [65, 313, 473, 476, 478, 479, 480, 481, 482, 483, 484, 486], "candid": [65, 90, 103, 119, 212, 237, 359, 432, 471, 472, 473, 479, 486], "lambda": [65, 97, 109, 113, 128, 133, 139, 150, 154, 166, 173, 187, 196, 233, 261, 267, 270, 289, 305, 324, 347, 351, 369, 372, 389, 392, 393, 394, 403, 424, 431, 432, 435, 437, 439, 446, 449, 466, 467, 468, 470, 471, 472, 474, 479, 480, 484, 485], "templat": [65, 69, 71, 78, 79, 83, 95, 100, 108, 120, 166, 208, 273, 325, 351, 357, 368, 372, 373, 378, 388, 449, 450, 468, 470, 472, 473, 477, 478, 481, 482, 485], "histori": [65, 90, 109, 114, 146, 162, 189, 243, 254, 277, 303, 340, 368, 370, 428, 449, 459, 476, 479, 480, 481, 485], "openbsd": [65, 121, 230, 299, 370, 371, 462, 480, 482, 485], "opensolari": [65, 462], "openssl": [65, 242, 244, 348, 367, 460, 462, 466, 471, 472, 473, 476, 477, 479, 480, 481, 482, 484, 485], "linker": [65, 69, 78, 82, 87, 182, 462, 485], "max_path": [65, 462, 481, 485], "nuget": [65, 462, 482, 485], "bundl": [65, 70, 95, 175, 208, 214, 217, 230, 255, 311, 348, 373, 374, 425, 460, 462, 469, 473, 476, 477, 479, 480, 482, 485], "excursus": [65, 452, 462], "shebang": [65, 173, 403, 425, 452, 462, 464, 478, 481, 485], "ini": [65, 224, 337, 462, 477, 485], "pywin32": [65, 95, 462, 485], "cx_freez": [65, 95, 289, 462], "macpython": [65, 462, 468], "gui": [65, 70, 93, 95, 104, 114, 254, 260, 298, 347, 349, 357, 359, 374, 392, 425, 443, 462, 472, 478, 485], "ide": [65, 90, 95, 97, 362, 390, 440, 455, 462, 465, 466, 468], "editor": [65, 82, 100, 111, 114, 257, 258, 373, 439, 462, 466, 472, 476, 479, 480, 481, 482, 483, 485], "lexic": [65, 229, 247, 260, 261, 302, 362, 383, 419, 432, 434, 437, 438, 482, 485], "blank": [65, 69, 72, 94, 95, 100, 104, 126, 129, 158, 162, 173, 181, 183, 192, 196, 200, 203, 212, 214, 215, 249, 252, 254, 274, 303, 306, 340, 348, 351, 388, 398, 411, 417, 440, 441, 465, 470, 480, 482, 485], "indent": [65, 72, 100, 106, 111, 118, 126, 128, 173, 175, 193, 200, 211, 220, 260, 261, 268, 270, 279, 306, 313, 368, 369, 372, 373, 380, 382, 383, 393, 394, 415, 417, 431, 435, 451, 466, 476, 477, 478, 479, 484, 485], "soft": [65, 183, 254, 269, 328, 367, 431, 435, 476, 485], "__bytes__": [65, 201, 203, 208, 212, 291, 351, 390, 432, 479, 480, 485], "__format__": [65, 90, 188, 189, 218, 232, 262, 265, 352, 393, 432, 439, 472, 473, 478, 479, 482, 485], "__dir__": [65, 90, 193, 218, 232, 261, 393, 432, 472, 479, 482, 485], "__init_subclass__": [65, 232, 432, 481, 485], "__set_name__": [65, 103, 187, 432, 481, 485], "metaclass": [65, 97, 100, 103, 118, 122, 128, 182, 218, 232, 233, 261, 351, 389, 390, 431, 472, 474, 477, 479, 480, 481, 482, 483, 485], "resolv": [65, 85, 95, 108, 109, 126, 133, 144, 173, 182, 189, 197, 200, 226, 258, 259, 261, 265, 274, 298, 299, 300, 302, 308, 314, 320, 344, 348, 355, 359, 389, 390, 392, 393, 403, 415, 416, 417, 419, 420, 421, 433, 459, 465, 468, 476, 478, 479, 480, 481, 482, 483, 485], "bodi": [65, 69, 94, 95, 100, 115, 118, 128, 141, 149, 175, 189, 195, 197, 202, 203, 204, 206, 207, 208, 212, 214, 215, 232, 247, 249, 252, 255, 261, 277, 278, 294, 323, 339, 341, 342, 347, 351, 357, 367, 372, 373, 390, 392, 393, 394, 399, 406, 411, 417, 431, 433, 434, 435, 440, 470, 471, 472, 477, 478, 479, 480, 481, 482, 483, 485], "versus": [65, 189, 200, 258, 434, 477, 483, 485], "__missing__": [65, 166, 188, 351, 393, 431, 432, 471, 477], "__reversed__": [65, 90, 97, 166, 167, 232, 393, 432, 481], "__rtruediv__": [65, 432], "__rfloordiv__": [65, 432, 476, 485], "__round__": [65, 228, 232, 296, 390, 393, 432, 474, 485], "__trunc__": [65, 232, 281, 393, 432, 485], "__floor__": [65, 228, 281, 296, 393, 432, 485], "__ceil__": [65, 228, 281, 296, 393, 432, 485], "__enter__": [65, 97, 109, 197, 264, 289, 321, 339, 351, 393, 408, 409, 431, 432, 471, 472, 473, 478, 481, 485], "__exit__": [65, 97, 109, 175, 197, 264, 289, 339, 351, 367, 393, 408, 409, 431, 432, 471, 472, 473, 481, 485], "__match_args__": [65, 187, 431, 432, 445, 476, 485], "__aenter__": [65, 97, 175, 197, 393, 394, 431, 432, 485], "__aexit__": [65, 97, 175, 197, 393, 394, 431, 432, 485], "arithmet": [65, 174, 189, 220, 228, 232, 260, 262, 281, 296, 325, 350, 351, 359, 423, 429, 432, 437, 455, 469, 470, 471, 477, 478, 480, 483, 485], "agen": [65, 261, 434], "asend": [65, 167, 434, 484, 485], "athrow": [65, 167, 434, 484, 485], "aclos": [65, 133, 167, 175, 321, 434, 476, 484, 485], "primari": [65, 86, 95, 100, 103, 113, 120, 163, 175, 200, 201, 203, 212, 213, 225, 234, 273, 282, 287, 299, 305, 314, 340, 344, 347, 348, 352, 359, 383, 406, 423, 429, 435, 436, 437, 440, 456, 466, 467, 469, 470, 472, 473, 474, 476, 477, 478, 479, 485], "power": [65, 95, 99, 103, 147, 153, 173, 179, 182, 192, 218, 232, 242, 296, 298, 299, 303, 305, 325, 344, 351, 354, 393, 394, 417, 431, 435, 437, 453, 469, 470, 472, 473, 474, 476, 477, 478, 483, 485], "membership": [65, 102, 107, 158, 184, 218, 240, 351, 393, 432, 446, 470, 477, 485], "nonloc": [65, 95, 97, 128, 166, 232, 261, 270, 358, 431, 433, 435, 437, 439, 444, 445, 474, 481, 485], "irrefut": 65, "anext": [65, 232, 260, 476, 485], "chr": [65, 95, 114, 232, 247, 260, 320, 391, 432, 454, 471, 473], "delattr": [65, 232, 260, 444, 454], "getattr": [65, 88, 95, 97, 98, 103, 108, 109, 122, 133, 166, 182, 187, 197, 232, 260, 261, 289, 297, 298, 305, 352, 389, 431, 444, 454, 466, 477, 479, 482, 485], "oct": [65, 95, 104, 109, 116, 189, 230, 232, 260, 348, 351, 352, 359, 372, 432, 454, 468, 472, 474, 485], "ord": [65, 102, 114, 126, 128, 182, 184, 232, 260, 351, 393, 432, 434, 439, 454, 466, 472], "setattr": [65, 95, 97, 103, 126, 187, 232, 258, 260, 298, 406, 444, 454, 466, 485], "super": [65, 95, 97, 109, 111, 116, 122, 126, 138, 166, 175, 187, 210, 232, 258, 260, 270, 289, 305, 318, 328, 374, 386, 388, 394, 399, 403, 406, 432, 444, 454, 468, 472, 474, 476, 479, 481, 485], "credit": [65, 96, 116, 174, 180, 254, 267, 359, 431, 452, 454, 483, 485], "licens": [65, 69, 70, 78, 96, 116, 174, 254, 259, 277, 313, 359, 430, 452, 454, 457, 468, 483, 485], "bit_length": [65, 281, 324, 351, 473, 475], "bit_count": [65, 351, 476, 485], "to_byt": [65, 351], "from_byt": [65, 351, 485], "as_integer_ratio": [65, 192, 228, 296, 351, 448, 472, 481, 483, 485], "is_integ": [65, 351, 485], "fromhex": [65, 152, 351, 448, 472, 481, 482, 485], "capit": [65, 111, 114, 116, 192, 325, 351, 352, 390, 391, 434, 466, 482, 484, 485], "casefold": [65, 114, 126, 149, 166, 351, 478, 480, 483, 485], "center": [65, 157, 162, 183, 192, 254, 255, 261, 351, 352, 374, 381, 388, 430, 432, 450, 470, 472, 478, 485], "endswith": [65, 305, 351, 403, 466, 469, 471, 472, 480, 485], "expandtab": [65, 351, 369], "format_map": [65, 166, 351, 477, 480, 485], "isalnum": [65, 95, 124, 184, 351], "isalpha": [65, 124, 184, 351], "isascii": [65, 124, 184, 351, 482, 485], "isdecim": [65, 110, 351], "isdigit": [65, 124, 184, 332, 351], "isidentifi": [65, 351, 485], "islow": [65, 124, 184, 332, 351], "isnumer": [65, 110, 351], "isprint": [65, 124, 166, 184, 351, 480, 485], "isspac": [65, 124, 184, 351], "istitl": [65, 351], "isupp": [65, 103, 124, 184, 267, 332, 351, 392], "ljust": [65, 344, 351, 450, 470, 478], "lstrip": [65, 351, 469], "maketran": [65, 166, 351, 475, 477, 480, 485], "partit": [65, 267, 351, 471, 480, 483, 485], "removeprefix": [65, 351, 484, 485], "removesuffix": [65, 351, 484, 485], "rfind": [65, 109, 284, 351, 472, 477, 478, 480, 485], "rindex": [65, 351, 473, 477, 478], "rjust": [65, 351, 450, 470, 478], "rpartit": [65, 258, 351, 471, 473, 477, 485], "rsplit": [65, 351, 470, 473, 477], "rstrip": [65, 95, 139, 141, 142, 194, 254, 351, 455, 469, 485], "splitlin": [65, 97, 162, 196, 207, 215, 351, 369, 385, 472, 477, 479, 485], "startswith": [65, 247, 299, 351, 359, 392, 403, 426, 455, 466, 469, 471, 472, 475, 478, 480, 483, 485], "swapcas": [65, 351, 485], "zfill": [65, 351, 450, 469], "tobyt": [65, 127, 188, 351, 473, 477, 484, 485], "tolist": [65, 127, 188, 351, 468, 473, 477], "toreadon": [65, 351, 485], "nbyte": [65, 133, 139, 148, 288, 290, 320, 332, 344, 351], "c_contigu": [65, 351], "f_contigu": [65, 351], "isdisjoint": [65, 167, 351, 485], "issubset": [65, 351, 469], "issuperset": [65, 351, 469], "intersect": [65, 166, 351, 388, 432, 469, 470, 472, 473, 485], "symmetric_differ": [65, 351, 469], "intersection_upd": [65, 351, 469, 472], "difference_upd": [65, 351, 472, 484, 485], "symmetric_difference_upd": [65, 351, 469], "fromkey": [65, 103, 166, 188, 351, 389, 469, 477], "popitem": [65, 166, 167, 173, 188, 267, 277, 291, 294, 351, 432, 467, 469, 473], "contextmanag": [65, 175, 193, 321, 351, 390, 471, 472, 477, 481, 485], "with_traceback": [65, 118, 220, 440, 485], "winerror": [65, 124, 182, 220, 485], "end_lineno": [65, 128, 220, 270, 435, 476, 483, 485], "end_offset": [65, 220, 476, 485], "environmenterror": [65, 220, 454, 478], "ioerror": [65, 160, 220, 222, 225, 232, 237, 250, 261, 264, 288, 289, 301, 338, 339, 397, 427, 454, 472, 473, 474, 478], "characters_written": [65, 220, 485], "ascii_lett": [65, 251, 332, 352, 368, 468, 474], "ascii_lowercas": [65, 325, 352, 368, 468], "ascii_uppercas": [65, 352, 368, 468], "hexdigit": [65, 184, 287, 352, 368, 439], "octdigit": [65, 352, 368, 439], "vformat": [65, 352, 368], "get_field": [65, 352, 368], "get_valu": [65, 352, 368], "check_unused_arg": [65, 352, 368], "format_field": [65, 352, 368], "convert_field": [65, 352, 368], "mini": [65, 79, 173, 232, 351, 368, 432, 439, 450, 473, 475], "safe_substitut": [65, 352, 368, 456, 470], "capword": [65, 351, 352, 368], "ignorecas": [65, 111, 325, 352, 368, 485], "multilin": [65, 111, 164, 173, 254, 325, 342, 368, 392, 477, 484, 485], "dotal": [65, 111, 325, 368], "fullmatch": [65, 325, 368, 479, 485], "findal": [65, 111, 166, 279, 325, 368, 417, 455, 479, 485], "findit": [65, 111, 285, 325, 368, 468, 485], "subn": [65, 111, 325, 368, 473, 475, 480, 485], "purg": [65, 325, 368], "colno": [65, 268, 291, 325, 368, 480], "groupindex": [65, 325, 368, 485], "groupdict": [65, 111, 325, 368, 485], "span": [65, 69, 111, 128, 157, 173, 181, 200, 227, 247, 284, 325, 351, 352, 368, 431, 471, 472, 478, 480, 481, 485], "endpo": [65, 325, 368], "lastindex": [65, 325, 368], "lastgroup": [65, 325, 368], "scanf": [65, 368], "phonebook": [65, 368], "mung": [65, 368], "adverb": [65, 368], "htmldiff": [65, 196, 368, 470, 480, 485], "make_fil": [65, 196, 368, 480, 485], "make_t": [65, 196, 368], "context_diff": [65, 196, 368], "get_close_match": [65, 196, 368], "ndiff": [65, 196, 200, 368, 467, 468], "unified_diff": [65, 196, 368], "diff_byt": [65, 196, 368, 480, 485], "is_line_junk": [65, 196, 368], "is_character_junk": [65, 196, 368], "sequencematch": [65, 368, 467, 471, 472, 479, 485], "set_seq": [65, 196, 368], "set_seq1": [65, 196, 368], "set_seq2": [65, 196, 368], "find_longest_match": [65, 196, 368, 485], "get_matching_block": [65, 196, 368, 471, 485], "get_opcod": [65, 196, 368], "get_grouped_opcod": [65, 196, 368], "ratio": [65, 156, 196, 228, 281, 350, 351, 368, 388, 478, 485], "quick_ratio": [65, 196, 368], "real_quick_ratio": [65, 196, 368], "shorten": [65, 190, 327, 368, 369, 476, 477, 478, 479, 484, 485], "dedent": [65, 126, 254, 270, 368, 369, 382, 383, 431, 435, 439, 485], "textwrapp": [65, 368, 369, 469, 479, 485], "expand_tab": [65, 368, 369], "tabsiz": [65, 196, 351, 368, 369], "replace_whitespac": [65, 368, 369], "drop_whitespac": [65, 368, 369, 472], "initial_ind": [65, 368, 369], "subsequent_ind": [65, 368, 369], "fix_sentence_end": [65, 368, 369], "break_long_word": [65, 368, 369, 485], "break_on_hyphen": [65, 368, 369, 485], "max_lin": [65, 368, 369, 479], "placehold": [65, 103, 109, 116, 197, 237, 243, 273, 275, 304, 327, 352, 368, 369, 398, 403, 409, 440, 456, 471, 477, 479, 482, 485], "bidirect": [65, 114, 133, 139, 289, 351, 353, 368, 391, 466], "east_asian_width": [65, 368, 391], "decomposit": [65, 109, 368, 391], "is_norm": [65, 192, 296, 368, 391, 483, 485], "unidata_vers": [65, 368, 391], "ucd_3_2_0": [65, 368, 391, 471], "stringprep": [65, 164, 260, 368, 469], "internet": [65, 107, 110, 112, 115, 149, 201, 217, 230, 242, 247, 250, 254, 260, 278, 323, 342, 344, 345, 348, 367, 368, 371, 398, 399, 430, 445, 465, 466, 467, 469, 476, 477, 479, 485], "in_table_a1": [65, 353, 368], "in_table_b1": [65, 353, 368], "map_table_b2": [65, 353, 368], "map_table_b3": [65, 353, 368], "in_table_c11": [65, 353, 368], "in_table_c12": [65, 353, 368], "in_table_c11_c12": [65, 353, 368], "in_table_c21": [65, 353, 368], "in_table_c22": [65, 353, 368], "in_table_c21_c22": [65, 353, 368], "in_table_c3": [65, 353, 368], "in_table_c4": [65, 353, 368], "in_table_c5": [65, 353, 368], "in_table_c6": [65, 353, 368], "in_table_c7": [65, 353, 368], "in_table_c8": [65, 353, 368], "in_table_c9": [65, 353, 368], "in_table_d1": [65, 353, 368], "in_table_d2": [65, 353, 368], "gnu": [65, 69, 106, 235, 241, 253, 260, 272, 298, 299, 304, 336, 338, 363, 368, 430, 432, 439, 442, 451, 452, 459, 460, 464, 466, 469, 470, 472, 473, 480, 482, 483, 485], "parse_and_bind": [65, 326, 329, 368, 485], "read_init_fil": [65, 326, 329, 368, 485], "get_line_buff": [65, 326, 329, 368], "insert_text": [65, 326, 329, 368], "redisplay": [65, 183, 326, 368, 469], "read_history_fil": [65, 326, 368], "write_history_fil": [65, 326, 368], "append_history_fil": [65, 326, 368, 480, 485], "get_history_length": [65, 326, 368, 485], "set_history_length": [65, 326, 368], "clear_histori": [65, 326, 368], "get_current_history_length": [65, 326, 368, 469], "get_history_item": [65, 326, 368, 469], "remove_history_item": [65, 326, 368], "replace_history_item": [65, 326, 368], "add_histori": [65, 326, 368], "set_auto_histori": [65, 326, 368, 481, 485], "set_startup_hook": [65, 326, 368], "set_pre_input_hook": [65, 326, 368], "set_complet": [65, 326, 329, 368], "get_complet": [65, 326, 368], "get_completion_typ": [65, 326, 368], "get_begidx": [65, 326, 368, 485], "get_endidx": [65, 326, 368, 485], "set_completer_delim": [65, 326, 368, 485], "get_completer_delim": [65, 326, 368], "set_completion_display_matches_hook": [65, 326, 368], "servic": [65, 109, 112, 115, 128, 145, 232, 253, 260, 261, 268, 273, 275, 288, 289, 290, 299, 309, 327, 334, 342, 344, 345, 348, 351, 368, 371, 413, 423, 430, 432, 441, 459, 465, 466, 470, 473, 476, 478, 485], "pack": [65, 109, 147, 151, 182, 197, 222, 232, 241, 254, 260, 262, 265, 274, 275, 277, 290, 291, 309, 344, 351, 374, 379, 381, 412, 425, 432, 446, 456, 471, 473, 477, 485], "pack_into": [65, 151, 232, 354, 471, 485], "unpack_from": [65, 151, 232, 354, 471, 485], "iter_unpack": [65, 151, 354, 479], "codecinfo": [65, 151, 164, 471], "getencod": [65, 114, 151, 164, 279, 420], "getdecod": [65, 114, 151, 164], "getincrementalencod": [65, 151, 164, 478], "getincrementaldecod": [65, 151, 164], "getread": [65, 114, 151, 164], "getwrit": [65, 114, 151, 164], "encodedfil": [65, 151, 164], "iterencod": [65, 151, 164, 268, 291], "iterdecod": [65, 151, 164], "bom_b": [65, 151, 164], "bom_l": [65, 151, 164], "bom_utf8": [65, 151, 164], "bom_utf16": [65, 151, 164], "bom_utf16_b": [65, 151, 164], "bom_utf16_l": [65, 151, 164], "bom_utf32": [65, 151, 164], "bom_utf32_b": [65, 151, 164], "bom_utf32_l": [65, 151, 164], "register_error": [65, 151, 164, 232, 264, 351, 469], "lookup_error": [65, 151, 164, 469], "strict_error": [65, 151, 164], "ignore_error": [65, 151, 164, 338], "replace_error": [65, 151, 164], "backslashreplace_error": [65, 151, 164], "xmlcharrefreplace_error": [65, 151, 164], "namereplace_error": [65, 151, 164], "stateless": [65, 147, 151, 154], "getstat": [65, 151, 164, 296, 324], "setstat": [65, 151, 164, 296, 324, 485], "writelin": [65, 124, 136, 139, 141, 151, 164, 196, 264, 466, 485], "streamreaderwrit": [65, 151], "streamrecod": [65, 114, 151, 485], "transform": [65, 69, 97, 103, 104, 109, 110, 112, 113, 114, 118, 128, 151, 154, 173, 181, 189, 192, 200, 203, 204, 208, 212, 215, 218, 220, 232, 233, 261, 272, 273, 277, 305, 351, 383, 388, 389, 390, 417, 431, 432, 434, 466, 467, 472, 474, 479, 480, 482, 485], "idna": [65, 151, 210, 391, 398, 469, 485], "internation": [65, 114, 151, 201, 253, 260, 288, 291, 342, 348, 352, 353, 371, 439, 466, 469, 470, 480, 482, 485], "nameprep": [65, 151, 164, 353], "toascii": [65, 151, 164], "tounicod": [65, 95, 127, 151, 164, 188], "codepag": [65, 151, 359, 485], "utf_8_sig": [65, 151], "minyear": [65, 188, 189], "maxyear": [65, 188, 189, 485], "total_second": [65, 188, 189, 473], "fromordin": [65, 188, 189, 482], "fromisoformat": [65, 188, 189, 347, 482, 485], "fromisocalendar": [65, 188, 189, 483, 485], "timetupl": [65, 188, 189], "toordin": [65, 188, 189], "weekday": [65, 157, 188, 189, 275, 371, 483, 485], "isoweekday": [65, 188, 189], "isocalendar": [65, 188, 189, 483, 484, 485], "isoformat": [65, 109, 188, 189, 196, 347, 429, 469, 481, 482, 485], "ctime": [65, 82, 124, 188, 189, 299, 300, 349, 371, 469], "strftime": [65, 108, 109, 124, 144, 188, 272, 273, 275, 277, 371, 423, 455, 456, 469, 471, 472, 477, 478, 481, 485], "utcnow": [65, 188, 189, 485], "utcfromtimestamp": [65, 188, 189, 348, 485], "strptime": [65, 124, 188, 273, 348, 371, 423, 468, 469, 471, 477, 485], "timetz": [65, 188, 189], "astimezon": [65, 188, 189, 196, 429, 478, 481, 483, 485], "utcoffset": [65, 188, 189, 485], "dst": [65, 69, 148, 182, 188, 189, 299, 338, 347, 371, 478], "utctimetupl": [65, 188, 189, 485], "timestamp": [65, 69, 106, 109, 133, 157, 166, 169, 188, 189, 210, 216, 241, 252, 270, 273, 299, 317, 342, 347, 348, 363, 371, 384, 402, 426, 436, 459, 469, 473, 478, 480, 482, 485], "fromutc": [65, 188, 189, 485], "iana": [65, 188, 189, 248, 260, 265, 282, 320, 348, 415, 417, 484, 485], "from_fil": [65, 125, 188, 417, 426, 429, 481, 485], "no_cach": [65, 188, 429], "clear_cach": [65, 188, 223, 226, 429, 479], "available_timezon": [65, 188, 429, 485], "reset_tzpath": [65, 188, 429], "tzpath": [65, 188, 429, 460, 485], "zoneinfonotfounderror": [65, 188, 429], "invalidtzpathwarn": [65, 188, 429], "iterweekday": [65, 157, 188], "itermonthd": [65, 157, 188, 482, 485], "itermonthday": [65, 157, 188, 485], "itermonthdays2": [65, 157, 188, 485], "itermonthdays3": [65, 157, 188, 482, 485], "itermonthdays4": [65, 157, 188, 482, 485], "monthdatescalendar": [65, 157, 188], "monthdays2calendar": [65, 157, 188], "monthdayscalendar": [65, 157, 188], "yeardatescalendar": [65, 157, 188], "yeardays2calendar": [65, 157, 188], "yeardayscalendar": [65, 157, 188], "textcalendar": [65, 157, 188, 485], "formatmonth": [65, 157, 188], "prmonth": [65, 157, 188, 485], "formatyear": [65, 157, 188], "pryear": [65, 157, 188, 485], "htmlcalendar": [65, 157, 188, 482], "formatyearpag": [65, 157, 188], "cssclass": [65, 157, 188], "cssclass_noday": [65, 157, 188], "cssclasses_weekday_head": [65, 157, 188], "cssclass_month_head": [65, 157, 188], "cssclass_month": [65, 157, 188], "cssclass_year": [65, 157, 188], "cssclass_year_head": [65, 157, 188], "localetextcalendar": [65, 157, 188, 485], "localehtmlcalendar": [65, 157, 188, 485], "setfirstweekday": [65, 157, 188], "firstweekday": [65, 157, 188], "isleap": [65, 157, 188], "leapday": [65, 157, 188], "weekhead": [65, 157, 188], "monthrang": [65, 157, 188], "monthcalendar": [65, 157, 188], "prcal": [65, 157, 188], "timegm": [65, 157, 188, 371], "day_nam": [65, 157, 188], "day_abbr": [65, 157, 188], "month_nam": [65, 157, 188, 439], "month_abbr": [65, 157, 188], "monday": [65, 157, 188, 189, 272, 275, 371, 485], "tuesday": [65, 157, 188, 189, 275, 455], "wednesday": [65, 157, 188, 189], "thursday": [65, 157, 188, 189], "friday": [65, 157, 188], "saturday": [65, 157, 188, 189], "sunday": [65, 157, 188, 189, 272, 275, 371, 473, 485], "chainmap": [65, 188, 193, 351, 390, 478, 479, 482, 485], "new_child": [65, 166, 188, 479, 485], "most_common": [65, 166, 188, 473], "dequ": [65, 188, 193, 267, 322, 351, 390, 406, 431, 434, 446, 456, 470, 471, 472, 473, 477, 480, 481, 485], "appendleft": [65, 166, 188, 470], "extendleft": [65, 166, 188], "popleft": [65, 166, 188, 267, 322, 446, 456, 470], "rotat": [65, 108, 124, 166, 188, 192, 275, 296, 388, 470, 472, 473, 485], "maxlen": [65, 166, 188, 267, 390, 472, 473], "defaultdict": [65, 97, 188, 193, 351, 390, 471, 477, 485], "default_factori": [65, 166, 187, 188, 485], "somenamedtupl": [65, 166, 188], "_make": [65, 166, 188, 354, 485], "_asdict": [65, 166, 188, 472, 473, 475, 483, 485], "_replac": [65, 166, 188, 398, 472, 485], "_field": [65, 128, 166, 188, 270, 390, 472, 473, 485], "_field_default": [65, 166, 188, 390, 485], "ordereddict": [65, 97, 173, 181, 188, 193, 261, 351, 390, 473, 475, 477, 480, 481, 483, 484, 485], "move_to_end": [65, 166, 188, 477, 485], "userdict": [65, 188, 467, 469, 472, 485], "userlist": [65, 188, 468, 485], "userstr": [65, 188, 466, 480, 484, 485], "mutablesequ": [65, 167, 188, 193, 351, 390, 474, 478, 480, 485], "bytestr": [65, 102, 152, 167, 188, 193, 299, 344, 347, 351, 390, 411, 417, 428, 472, 485], "mutableset": [65, 167, 188, 193, 351, 390, 485], "mutablemap": [65, 88, 97, 167, 173, 188, 190, 193, 336, 351, 390, 432, 472, 474, 478], "mappingview": [65, 167, 188, 193, 351, 390, 485], "itemsview": [65, 167, 188, 193, 351, 390], "keysview": [65, 167, 188, 193, 351, 390], "valuesview": [65, 167, 188, 193, 351, 390, 485], "asyncgener": [65, 167, 188, 193, 351, 390, 481, 485], "recip": [65, 73, 95, 109, 115, 154, 166, 188, 196, 207, 218, 231, 257, 258, 281, 296, 299, 304, 321, 336, 351, 359, 417, 458, 477, 485], "heappush": [65, 188, 243, 456, 469, 472], "heappop": [65, 188, 243, 267, 456, 469, 472], "heappushpop": [65, 188, 243, 472], "heapifi": [65, 188, 243, 324, 456, 485], "heapreplac": [65, 188, 243, 324], "nlargest": [65, 97, 188, 232, 233, 243, 470, 471, 485], "nsmallest": [65, 97, 188, 232, 233, 243, 470, 471], "bisect_left": [65, 154, 188], "bisect_right": [65, 154, 188], "insort_left": [65, 154, 188, 485], "insort_right": [65, 154, 188], "insort": [65, 154, 188, 456, 485], "typecod": [65, 127, 148, 188, 289, 389, 474, 485], "buffer_info": [65, 127, 188], "byteswap": [65, 127, 147, 188, 357, 479], "frombyt": [65, 127, 188, 344, 477, 484, 485], "fromfil": [65, 127, 188, 196, 474], "fromunicod": [65, 127, 188], "tofil": [65, 127, 188, 196, 474], "__callback__": [65, 188, 406, 479], "getweakrefcount": [65, 188, 406], "getweakref": [65, 188, 406], "weakkeydictionari": [65, 188, 351, 406, 471, 485], "keyref": [65, 188, 406, 471], "weakvaluedictionari": [65, 188, 351, 406, 456, 471, 485], "valueref": [65, 188, 406, 471], "weakset": [65, 188, 351, 406, 473, 485], "weakmethod": [65, 188, 351, 406, 479], "detach": [65, 124, 138, 148, 156, 188, 264, 276, 299, 344, 348, 373, 381, 406, 408, 409, 434, 477, 478, 485], "peek": [65, 124, 125, 156, 166, 188, 241, 264, 276, 406, 477, 485], "atexit": [65, 88, 94, 118, 172, 188, 260, 273, 321, 326, 406, 466, 470, 476, 485], "referencetyp": [65, 188, 406, 485], "proxytyp": [65, 188, 289, 406, 485], "callableproxytyp": [65, 188, 406, 485], "new_class": [65, 188, 389, 478, 485], "prepare_class": [65, 188, 389, 478], "resolve_bas": [65, 188, 389, 482, 485], "nonetyp": [65, 99, 100, 174, 188, 233, 290, 324, 325, 389, 476, 485], "lambdatyp": [65, 188, 389], "generatortyp": [65, 188, 389], "coroutinetyp": [65, 188, 389, 480, 485], "asyncgeneratortyp": [65, 188, 389], "codetyp": [65, 188, 389, 483, 485], "celltyp": [65, 188, 389, 485], "builtinfunctiontyp": [65, 188, 389], "builtinmethodtyp": [65, 188, 389, 485], "wrapperdescriptortyp": [65, 188, 389, 482, 485], "methodwrappertyp": [65, 188, 389, 482, 485], "notimplementedtyp": [65, 174, 188, 389, 476, 485], "methoddescriptortyp": [65, 188, 389, 482, 485], "classmethoddescriptortyp": [65, 188, 389, 482, 485], "ellipsistyp": [65, 174, 188, 389, 476, 485], "uniontyp": [65, 188, 351, 389, 390, 485], "tracebacktyp": [65, 188, 273, 389, 432, 482, 485], "frametyp": [65, 188, 389, 485], "getsetdescriptortyp": [65, 188, 389], "memberdescriptortyp": [65, 188, 389, 485], "dynamicclassattribut": [65, 188, 389, 479], "deep": [65, 70, 78, 109, 188, 258, 260, 305, 313, 337, 359, 414, 485], "deepcopi": [65, 95, 166, 177, 187, 188, 325, 394, 428, 473, 481, 482, 485], "pretti": [65, 86, 99, 102, 114, 116, 128, 173, 188, 191, 196, 260, 261, 268, 275, 298, 303, 314, 383, 393, 415, 417, 423, 434, 466, 467, 468, 471, 472, 474, 476, 484, 485], "printer": [65, 111, 188, 254, 260, 374, 383, 409], "prettyprint": [65, 188, 479, 485], "pformat": [65, 188, 313, 479, 485], "pp": [65, 103, 188, 303, 313, 324, 483, 485], "isread": [65, 188, 313], "isrecurs": [65, 188, 313], "saferepr": [65, 188, 313], "arepr": [65, 188, 327], "maxlevel": [65, 169, 188, 313, 327], "maxdict": [65, 188, 327], "maxlist": [65, 188, 327], "maxtupl": [65, 188, 327], "maxset": [65, 188, 327], "maxfrozenset": [65, 188, 327], "maxdequ": [65, 188, 327], "maxarray": [65, 188, 327], "maxlong": [65, 188, 327], "maxstr": [65, 188, 327], "maxoth": [65, 188, 327], "repr1": [65, 188, 327], "intenum": [65, 188, 248, 344, 348, 481, 485], "intflag": [65, 188, 325, 348, 481, 485], "programmat": [65, 82, 119, 128, 173, 175, 188, 191, 215, 217, 270, 272, 274, 286, 298, 305, 315, 326, 359, 383, 399, 473, 478, 479, 485], "orderedenum": [65, 188], "duplicatefreeenum": [65, 188], "planet": [65, 188, 471], "timeperiod": [65, 188], "aka": [65, 128, 188, 200, 360, 413, 426, 432, 465, 482, 485], "__dunder__": [65, 188], "_sunder_": [65, 188], "_private__nam": [65, 188], "graph": [65, 188, 260, 274, 298, 305, 350, 388, 468, 479, 484, 485], "topologicalsort": [65, 188, 239, 484, 485], "is_act": [65, 138, 188, 239], "get_readi": [65, 188, 239], "static_ord": [65, 188, 239], "cycleerror": [65, 188, 239], "tower": [65, 228, 296, 350, 388, 472, 474, 485], "conjug": [65, 192, 295, 296, 351, 472], "ration": [65, 189, 192, 260, 295, 296, 351, 432, 472, 473, 474, 477, 485], "denomin": [65, 192, 228, 295, 296, 351, 472, 481, 483, 485], "implementor": [65, 296, 468, 473, 481], "theoret": [65, 98, 100, 104, 192, 296], "ceil": [65, 228, 281, 295, 296, 328, 351, 432, 472, 483, 485], "comb": [65, 281, 296, 350, 446, 483, 485], "copysign": [65, 281, 296, 472, 485], "fab": [65, 281, 296], "fmod": [65, 281, 296, 434], "frexp": [65, 281, 296], "fsum": [65, 232, 281, 296, 350, 448, 472, 485], "gcd": [65, 228, 281, 296, 480, 484, 485], "isclos": [65, 161, 281, 296, 480, 485], "isfinit": [65, 161, 281, 296, 477], "isinf": [65, 161, 281, 296, 351, 472], "isnan": [65, 161, 281, 296, 350, 351, 446, 472], "isqrt": [65, 281, 296, 483, 485], "lcm": [65, 281, 296, 484, 485], "ldexp": [65, 281, 296, 324, 485], "modf": [65, 281, 296], "nextaft": [65, 281, 296, 484, 485], "perm": [65, 218, 230, 281, 296, 439, 482, 483, 485], "prod": [65, 267, 281, 296, 483, 485], "trunc": [65, 281, 295, 296, 351, 432, 472, 485], "ulp": [65, 281, 296, 324, 359, 472, 484, 485], "logarithm": [65, 154, 192, 243, 296, 301, 351, 428, 469, 472, 475, 477, 478], "expm1": [65, 281, 296, 473, 477, 485], "log1p": [65, 281, 296, 472], "log2": [65, 281, 296, 477, 478], "log10": [65, 161, 192, 281, 296, 472], "sqrt": [65, 147, 161, 172, 192, 281, 296, 350, 470, 471, 472, 477, 483], "trigonometr": [65, 296, 470], "aco": [65, 161, 281, 296], "asin": [65, 161, 281, 296], "atan": [65, 161, 281, 296, 472], "atan2": [65, 161, 281, 296, 485], "cos": [65, 161, 192, 228, 281, 296, 305, 455, 469, 483], "dist": [65, 70, 73, 74, 75, 259, 276, 281, 296, 302, 388, 425, 471, 477, 480, 483, 485], "hypot": [65, 166, 281, 296, 483, 485], "sin": [65, 128, 161, 192, 281, 296, 432, 469], "tan": [65, 161, 281, 296, 485], "angular": [65, 296, 438], "degre": [65, 83, 162, 183, 229, 281, 296, 350, 351, 388, 432, 469, 483, 485], "radian": [65, 161, 192, 229, 281, 296, 388, 469, 483, 485], "hyperbol": [65, 196, 296, 472], "acosh": [65, 161, 281, 296, 472], "asinh": [65, 161, 281, 296, 472], "atanh": [65, 161, 281, 296, 472], "cosh": [65, 161, 281, 296], "sinh": [65, 161, 281, 296], "tanh": [65, 161, 281, 296], "erf": [65, 103, 281, 296, 473, 477, 482, 485], "erfc": [65, 281, 296, 473, 477, 482, 485], "gamma": [65, 281, 296, 324, 473, 477], "lgamma": [65, 281, 296, 473, 477], "pi": [65, 103, 161, 182, 183, 192, 228, 279, 281, 296, 303, 324, 388, 390, 417, 446, 448, 450, 455, 477, 478, 483], "tau": [65, 161, 281, 296, 481, 485], "inf": [65, 161, 192, 232, 268, 281, 296, 351, 352, 359, 472, 473, 477, 480, 481, 485], "nan": [65, 95, 161, 192, 232, 281, 291, 296, 350, 351, 352, 359, 434, 446, 470, 472, 473, 476, 477, 478, 480, 481, 485], "polar": [65, 296, 472, 485], "coordin": [65, 95, 100, 102, 109, 182, 183, 185, 189, 218, 277, 281, 287, 296, 347, 352, 371, 374, 381, 383, 388, 466, 472, 476, 485], "rect": [65, 161, 182, 296, 472], "classif": [65, 272, 296, 298, 439], "infj": [65, 161, 296, 481, 485], "nanj": [65, 161, 296, 481, 485], "as_tupl": [65, 192, 296, 472], "compare_sign": [65, 192, 296], "compare_tot": [65, 192, 296], "compare_total_mag": [65, 192, 296], "copy_ab": [65, 192, 296], "copy_neg": [65, 192, 296], "copy_sign": [65, 192, 296], "from_float": [65, 192, 228, 296, 448, 473, 475, 477, 485], "fma": [65, 192, 296], "is_canon": [65, 192, 296, 473], "is_finit": [65, 192, 296], "is_infinit": [65, 192, 296], "is_nan": [65, 192, 296], "is_qnan": [65, 192, 296], "is_sign": [65, 192, 296], "is_snan": [65, 192, 296], "is_subnorm": [65, 192, 296], "is_zero": [65, 192, 296], "ln": [65, 192, 254, 296, 472, 478, 485], "logb": [65, 192, 296], "logical_and": [65, 192, 296], "logical_invert": [65, 192, 296], "logical_or": [65, 192, 296], "logical_xor": [65, 192, 296], "max_mag": [65, 192, 296], "min_mag": [65, 192, 296], "next_minus": [65, 192, 296], "next_plus": [65, 192, 296], "next_toward": [65, 192, 296], "number_class": [65, 192, 296], "quantiz": [65, 192, 296, 478, 485], "remainder_near": [65, 192, 296], "same_quantum": [65, 192, 296], "scaleb": [65, 192, 296], "to_eng_str": [65, 192, 296, 470], "to_integr": [65, 192, 296], "to_integral_exact": [65, 192, 296], "to_integral_valu": [65, 192, 296], "getcontext": [65, 192, 296, 456, 470], "setcontext": [65, 192, 296], "localcontext": [65, 192, 296, 351, 471, 472], "basiccontext": [65, 192, 296, 478], "extendedcontext": [65, 192, 296, 478], "defaultcontext": [65, 192, 296, 478], "clear_flag": [65, 192, 296], "clear_trap": [65, 192, 296], "copy_decim": [65, 192, 296], "create_decim": [65, 192, 296, 472, 478], "create_decimal_from_float": [65, 192, 296], "etini": [65, 192, 296], "etop": [65, 192, 296], "divide_int": [65, 192, 296], "minus": [65, 69, 183, 192, 232, 234, 270, 281, 296, 338, 351, 352, 354, 370, 382, 434, 440, 482, 485], "to_sci_str": [65, 192, 296, 470], "max_prec": [65, 192, 296, 478], "max_emax": [65, 192, 296, 478], "min_emin": [65, 192, 296, 478], "min_etini": [65, 192, 296], "have_thread": [65, 192, 296, 478], "have_contextvar": [65, 192, 296, 460], "round_ceil": [65, 192, 296, 470], "round_down": [65, 192, 296, 470], "round_floor": [65, 192, 296, 485], "round_half_down": [65, 192, 296], "round_half_even": [65, 192, 296, 470, 485], "round_half_up": [65, 192, 296], "round_up": [65, 192, 296], "round_05up": [65, 192, 296], "clamp": [65, 192, 296, 477, 478], "decimalexcept": [65, 192, 296], "divisionbyzero": [65, 192, 296, 470], "inexact": [65, 192, 296, 299, 478], "invalidoper": [65, 192, 296, 470, 472, 473, 478], "subnorm": [65, 192, 296, 485], "floatoper": [65, 192, 296, 478], "mitig": [65, 251, 296, 351, 475, 476, 483, 485], "off": [65, 69, 94, 100, 102, 104, 108, 109, 110, 111, 115, 116, 118, 129, 162, 173, 182, 183, 189, 196, 197, 207, 215, 216, 223, 232, 239, 243, 250, 254, 267, 273, 274, 275, 281, 296, 298, 300, 307, 311, 314, 337, 342, 351, 359, 366, 367, 371, 372, 381, 388, 392, 393, 399, 424, 432, 436, 439, 440, 452, 466, 467, 468, 469, 470, 471, 472, 474, 477, 479, 480, 481, 483, 484, 485], "faq": [65, 69, 88, 92, 95, 96, 232, 242, 261, 296, 311, 351, 398, 458, 471, 473, 479, 485], "from_decim": [65, 228, 296, 477], "limit_denomin": [65, 228, 296], "randbyt": [65, 296, 324, 484, 485], "randrang": [65, 94, 296, 324, 455, 470, 476, 477, 485], "randint": [65, 296, 324, 477], "getrandbit": [65, 296, 324, 470, 479, 485], "shuffl": [65, 94, 296, 324, 325, 477, 484, 485], "sampl": [65, 69, 79, 83, 85, 94, 98, 100, 103, 104, 109, 111, 116, 123, 147, 162, 181, 182, 200, 218, 230, 254, 267, 285, 296, 301, 305, 313, 314, 324, 325, 350, 356, 363, 372, 381, 399, 405, 417, 431, 445, 455, 465, 467, 468, 469, 472, 473, 477, 479, 481, 482, 483, 485], "uniform": [65, 94, 115, 140, 196, 261, 296, 324, 398, 402, 423, 477, 485], "triangular": [65, 296, 324, 472], "betavari": [65, 296, 324], "expovari": [65, 296, 324, 485], "gammavari": [65, 296, 324, 485], "gauss": [65, 296, 324], "lognormvari": [65, 296, 324], "normalvari": [65, 94, 296, 324], "vonmisesvari": [65, 296, 324], "paretovari": [65, 296, 324, 485], "weibullvari": [65, 296, 324], "systemrandom": [65, 180, 296, 299, 324, 332], "reproduc": [65, 95, 115, 128, 208, 241, 296, 350, 367, 399, 421, 430, 477, 482, 483, 485], "spread": [65, 112, 296, 374, 472], "fmean": [65, 296, 324, 350, 483, 485], "geometric_mean": [65, 296, 350, 483, 485], "harmonic_mean": [65, 296, 350, 481, 485], "median": [65, 103, 296, 324, 350, 455, 479, 485], "median_low": [65, 296, 350], "median_high": [65, 296, 350], "median_group": [65, 296, 350], "multimod": [65, 296, 350, 483], "pstdev": [65, 296, 350], "pvarianc": [65, 296, 350, 485], "stdev": [65, 233, 296, 350, 483], "varianc": [65, 296, 350, 390, 455, 479, 481, 483, 485], "quantil": [65, 296, 324, 350, 483, 485], "covari": [65, 296, 350, 390, 476, 485], "correl": [65, 258, 296, 350, 476, 485], "linear_regress": [65, 296, 350, 476], "statisticserror": [65, 296, 350], "normaldist": [65, 296, 483, 485], "from_sampl": [65, 296, 350, 483], "pdf": [65, 90, 108, 114, 242, 296, 324, 350, 359, 483, 485], "cdf": [65, 296, 350, 483], "inv_cdf": [65, 296, 350, 485], "zscore": [65, 296, 350, 485], "accumul": [65, 95, 100, 102, 104, 126, 192, 231, 233, 267, 298, 305, 314, 324, 337, 384, 392, 467, 477, 478, 483, 485], "from_iter": [65, 231, 267, 472, 485], "combinations_with_replac": [65, 104, 166, 231, 267, 473, 475, 485], "dropwhil": [65, 104, 231, 267], "filterfals": [65, 104, 118, 231, 232, 267, 350], "groupbi": [65, 97, 104, 231, 233, 267, 297, 470, 475, 485], "islic": [65, 97, 104, 166, 231, 232, 267, 471, 482, 485], "pairwis": [65, 231, 267, 388, 476, 485], "permut": [65, 94, 104, 231, 267, 428, 439, 466, 472, 475, 483, 485], "starmap": [65, 104, 170, 231, 232, 267, 289, 478], "takewhil": [65, 104, 231, 267], "tee": [65, 104, 183, 231, 267, 470, 485], "zip_longest": [65, 231, 232, 267, 474, 485], "cached_properti": [65, 95, 103, 231, 233, 351, 483, 485], "cmp_to_key": [65, 113, 231, 232, 233, 351, 473, 477], "lru_cach": [65, 95, 166, 231, 233, 477, 478, 480, 483, 485], "total_ord": [65, 231, 233, 432, 434, 473, 477, 479, 485], "partialmethod": [65, 231, 233, 351, 479, 483, 485], "singledispatch": [65, 97, 231, 233, 479, 482, 485], "singledispatchmethod": [65, 231, 233, 483, 485], "update_wrapp": [65, 98, 231, 233, 261, 471, 479], "lt": [65, 104, 128, 229, 231, 270, 297, 351, 388, 421, 435, 439, 467, 477], "le": [65, 104, 114, 115, 164, 207, 231, 297, 467, 475, 478], "eq": [65, 104, 128, 187, 231, 270, 297, 435, 485], "ne": [65, 104, 118, 231, 297, 374], "ge": [65, 104, 231, 297], "gt": [65, 104, 128, 231, 245, 246, 247, 270, 297, 421, 435, 477, 478], "not_": [65, 104, 231, 297], "__not__": [65, 231, 297], "is_": [65, 104, 231, 297], "is_not": [65, 104, 231, 297], "and_": [65, 104, 231, 297], "floordiv": [65, 104, 128, 231, 270, 297, 435], "inv": [65, 231, 297, 480], "__inv__": [65, 231, 297], "lshift": [65, 128, 231, 270, 297, 435], "mod": [65, 95, 109, 128, 231, 232, 258, 270, 285, 297, 384, 425, 435, 440, 472, 483, 485], "mul": [65, 104, 118, 147, 192, 231, 267, 289, 297, 357, 424], "matmul": [65, 231, 297, 480, 485], "neg": [65, 192, 231, 233, 297], "or_": [65, 104, 231, 297], "rshift": [65, 128, 231, 270, 297, 435], "truediv": [65, 231, 297], "xor": [65, 192, 231, 297, 434], "__concat__": [65, 231, 297], "countof": [65, 231, 297, 484, 485], "delitem": [65, 231, 297], "getitem": [65, 231, 267, 297, 394, 468], "indexof": [65, 231, 297, 484, 485], "setitem": [65, 231, 297, 394], "attrgett": [65, 97, 104, 113, 154, 231, 297, 470, 471, 472, 477, 480, 485], "itemgett": [65, 97, 113, 154, 231, 267, 297, 470, 471, 480, 483, 485], "methodcal": [65, 97, 113, 231, 297, 472, 480, 485], "iadd": [65, 231, 297], "iand": [65, 231, 297], "iconcat": [65, 231, 297], "__iconcat__": [65, 231, 297], "ifloordiv": [65, 231, 297], "ilshift": [65, 231, 297], "imod": [65, 231, 297], "imul": [65, 118, 231, 297], "imatmul": [65, 231, 297, 480], "ior": [65, 231, 297], "ipow": [65, 231, 297], "irshift": [65, 231, 297], "isub": [65, 231, 297], "itruediv": [65, 231, 297], "ixor": [65, 231, 297], "pure": [65, 70, 72, 75, 76, 78, 84, 94, 95, 104, 106, 109, 110, 116, 128, 182, 189, 192, 199, 226, 230, 232, 237, 254, 267, 314, 339, 341, 359, 361, 367, 413, 431, 432, 446, 459, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 485], "purepath": [65, 226, 259, 299, 302, 476, 484, 485], "pureposixpath": [65, 226, 302], "purewindowspath": [65, 226, 302, 485], "drive": [65, 69, 112, 116, 226, 238, 243, 254, 298, 300, 302, 363, 367, 374, 392, 426, 430, 465, 478, 479, 480, 485], "anchor": [65, 226, 258, 302, 348, 374, 381, 473, 479], "stem": [65, 226, 302, 425, 473, 485], "as_posix": [65, 226, 302], "as_uri": [65, 226, 302], "is_absolut": [65, 226, 302], "is_relative_to": [65, 226, 302, 485], "is_reserv": [65, 226, 262, 265, 302, 485], "joinpath": [65, 125, 226, 258, 286, 302, 426, 485], "relative_to": [65, 226, 302, 485], "with_nam": [65, 226, 302, 485], "with_stem": [65, 226, 302, 485], "with_suffix": [65, 226, 302, 485], "posixpath": [65, 226, 259, 300, 302, 485], "windowspath": [65, 226, 302, 485], "cwd": [65, 148, 226, 230, 262, 299, 302, 355, 367, 403, 470, 483, 485], "chmod": [65, 94, 109, 124, 148, 158, 226, 299, 302, 338, 349, 442, 464, 476, 478, 485], "expandus": [65, 116, 173, 226, 238, 250, 292, 300, 302, 326, 338, 355, 480, 483, 485], "is_dir": [65, 124, 125, 226, 258, 286, 299, 302, 426, 481, 483, 485], "is_fil": [65, 124, 125, 226, 258, 286, 299, 302, 426, 480, 483, 485], "is_mount": [65, 226, 302, 482, 483, 485], "is_symlink": [65, 124, 226, 299, 302, 483, 485], "is_socket": [65, 226, 302, 483, 485], "is_fifo": [65, 226, 302, 483, 485], "is_block_devic": [65, 226, 302, 483, 485], "is_char_devic": [65, 226, 302, 483, 485], "iterdir": [65, 125, 226, 258, 286, 302, 426], "lchmod": [65, 124, 226, 299, 302, 472, 485], "lstat": [65, 124, 226, 299, 300, 302, 349, 367, 478, 483, 485], "mkdir": [65, 69, 94, 124, 148, 207, 226, 299, 302, 455, 478, 480, 485], "read_byt": [65, 125, 226, 258, 284, 286, 302, 426, 480, 485], "read_text": [65, 125, 226, 258, 259, 264, 286, 302, 426, 480, 485], "readlink": [65, 124, 226, 299, 302, 478, 483, 484, 485], "rglob": [65, 148, 226, 302, 485], "rmdir": [65, 94, 124, 148, 193, 226, 299, 302, 367, 478], "samefil": [65, 226, 300, 302, 479, 480, 485], "symlink_to": [65, 226, 302, 476, 485], "hardlink_to": [65, 226, 302, 476, 485], "link_to": [65, 226, 302, 476, 483, 485], "unlink": [65, 94, 124, 170, 193, 220, 226, 279, 289, 290, 299, 302, 334, 365, 367, 381, 403, 414, 415, 478, 485], "write_byt": [65, 226, 284, 302, 480, 485], "write_text": [65, 226, 302, 480, 485], "abspath": [65, 207, 226, 300, 302, 403, 473, 485], "basenam": [65, 69, 70, 100, 106, 109, 126, 190, 200, 226, 298, 300, 302, 374, 380, 403, 426, 485], "commonpath": [65, 226, 300, 480, 485], "commonprefix": [65, 226, 300, 480], "dirnam": [65, 100, 103, 226, 230, 277, 299, 300, 302, 308, 367, 392, 460, 482], "lexist": [65, 226, 300, 470, 483, 485], "expandvar": [65, 226, 238, 300, 355, 472, 485], "getatim": [65, 226, 300], "getmtim": [65, 226, 300], "getctim": [65, 226, 300], "getsiz": [65, 160, 226, 299, 300, 357, 485], "isab": [65, 226, 300, 302], "isfil": [65, 125, 207, 226, 300, 302, 363, 442, 477, 483, 485], "isdir": [65, 125, 226, 300, 302, 308, 363, 483, 485], "islink": [65, 226, 299, 300, 302, 483, 485], "ismount": [65, 226, 300, 479, 483, 485], "normcas": [65, 226, 227, 300, 485], "normpath": [65, 69, 226, 299, 300, 473], "realpath": [65, 226, 299, 300, 465, 476, 483, 485], "relpath": [65, 226, 300, 302, 472, 485], "sameopenfil": [65, 226, 300], "samestat": [65, 226, 300, 302, 479], "splitdriv": [65, 226, 300, 482], "splitext": [65, 100, 109, 207, 226, 300, 302, 363, 456, 472, 481, 485], "supports_unicode_filenam": [65, 226, 300, 469], "filelineno": [65, 225, 226], "isfirstlin": [65, 225, 226], "isstdin": [65, 225, 226], "nextfil": [65, 225, 226], "hook_compress": [65, 225, 226, 476], "hook_encod": [65, 225, 226, 481, 485], "s_isdir": [65, 226, 299, 349], "s_ischr": [65, 226, 349], "s_isblk": [65, 226, 349], "s_isreg": [65, 226, 349], "s_isfifo": [65, 226, 349], "s_islnk": [65, 226, 349], "s_issock": [65, 226, 349], "s_isdoor": [65, 226, 349, 485], "s_isport": [65, 226, 349, 485], "s_iswht": [65, 226, 349, 485], "s_imod": [65, 226, 349], "s_ifmt": [65, 226, 349], "filemod": [65, 108, 109, 226, 273, 349, 363, 478, 483, 485], "st_mode": [65, 124, 226, 299, 302, 349, 479, 483], "st_ino": [65, 124, 226, 275, 299, 349, 485], "st_dev": [65, 124, 226, 299, 349], "st_nlink": [65, 124, 226, 299, 349], "st_uid": [65, 124, 226, 299, 349], "st_gid": [65, 124, 226, 299, 349], "st_size": [65, 124, 226, 299, 302, 349, 468], "st_atim": [65, 124, 226, 299, 349], "st_mtime": [65, 124, 196, 226, 241, 299, 302, 349, 469], "st_ctime": [65, 124, 226, 299, 349], "s_ifsock": [65, 226, 349], "s_iflnk": [65, 226, 349, 483], "s_ifreg": [65, 226, 299, 349], "s_ifblk": [65, 226, 299, 349], "s_ifdir": [65, 226, 349], "s_ifchr": [65, 226, 299, 349, 485], "s_ififo": [65, 226, 299, 349], "s_ifdoor": [65, 226, 349, 479, 485], "s_ifport": [65, 226, 349, 479, 485], "s_ifwht": [65, 226, 349, 479, 485], "s_isuid": [65, 226, 299, 349], "s_isgid": [65, 226, 299, 349], "s_isvtx": [65, 226, 299, 349], "s_irwxu": [65, 226, 299, 349], "s_irusr": [65, 226, 299, 349], "s_iwusr": [65, 226, 299, 349], "s_ixusr": [65, 226, 299, 349], "s_irwxg": [65, 226, 299, 349], "s_irgrp": [65, 226, 299, 349], "s_iwgrp": [65, 226, 299, 349], "s_ixgrp": [65, 226, 299, 349], "s_irwxo": [65, 226, 299, 349], "s_iroth": [65, 226, 299, 349], "s_iwoth": [65, 226, 299, 349], "s_ixoth": [65, 226, 299, 349], "s_enfmt": [65, 226, 299, 349], "s_iread": [65, 226, 299, 349], "s_iwrit": [65, 226, 299, 338, 349], "s_iexec": [65, 226, 299, 349], "uf_nodump": [65, 226, 299, 349], "uf_immut": [65, 226, 299, 349, 472], "uf_append": [65, 226, 299, 349, 472], "uf_opaqu": [65, 226, 299, 349], "uf_nounlink": [65, 226, 299, 349], "uf_compress": [65, 226, 299, 349], "uf_hidden": [65, 226, 299, 349], "sf_archiv": [65, 226, 299, 349], "sf_immut": [65, 226, 299, 349], "sf_append": [65, 226, 299, 349], "sf_nounlink": [65, 226, 299, 349], "sf_snapshot": [65, 226, 299, 349], "file_attribute_arch": [65, 226, 349], "file_attribute_compress": [65, 226, 349], "file_attribute_devic": [65, 226, 349], "file_attribute_directori": [65, 226, 349], "file_attribute_encrypt": [65, 226, 349], "file_attribute_hidden": [65, 226, 349], "file_attribute_integrity_stream": [65, 226, 349], "file_attribute_norm": [65, 226, 349], "file_attribute_not_content_index": [65, 226, 349], "file_attribute_no_scrub_data": [65, 226, 349], "file_attribute_offlin": [65, 226, 349], "file_attribute_readon": [65, 226, 349], "file_attribute_reparse_point": [65, 226, 299, 349], "file_attribute_sparse_fil": [65, 226, 349], "file_attribute_system": [65, 226, 349], "file_attribute_temporari": [65, 226, 349], "file_attribute_virtu": [65, 226, 349], "io_reparse_tag_symlink": [65, 226, 349], "io_reparse_tag_mount_point": [65, 226, 349], "io_reparse_tag_appexeclink": [65, 226, 349, 485], "cmp": [65, 223, 226, 232, 351, 466, 467, 470, 474, 485], "cmpfile": [65, 223, 226], "dircmp": [65, 226, 466, 471, 479, 485], "report_partial_closur": [65, 223, 226], "report_full_closur": [65, 223, 226], "left_list": [65, 223, 226], "right_list": [65, 223, 226], "left_on": [65, 223, 226], "right_on": [65, 223, 226], "common_dir": [65, 223, 226], "common_fil": [65, 223, 226], "common_funni": [65, 223, 226], "same_fil": [65, 223, 226], "diff_fil": [65, 223, 226], "funny_fil": [65, 223, 226], "subdir": [65, 78, 126, 223, 226, 277, 367, 485], "default_ignor": [65, 223, 226, 479], "temporaryfil": [65, 226, 365, 485], "namedtemporaryfil": [65, 115, 207, 226, 365, 472, 485], "spooledtemporaryfil": [65, 226, 365, 472, 478, 485], "temporarydirectori": [65, 226, 365, 477, 485], "mkstemp": [65, 148, 226, 289, 365, 485], "mkdtemp": [65, 148, 226, 299, 365, 367, 406, 485], "gettempdir": [65, 226, 365, 485], "gettempdirb": [65, 226, 365, 485], "gettempprefix": [65, 226, 365], "gettempprefixb": [65, 226, 365], "tempdir": [65, 226, 365, 406, 485], "mktemp": [65, 226, 333, 365, 399, 485], "iglob": [65, 226, 238, 476, 480, 481, 485], "fnmatch": [65, 226, 238, 260, 302, 355, 386, 392, 485], "fnmatchcas": [65, 226, 227, 392], "getlin": [65, 226, 271, 386, 480, 485], "clearcach": [65, 226, 271], "checkcach": [65, 226, 271, 485], "lazycach": [65, 226, 271, 480, 485], "copyfileobj": [65, 115, 226, 241, 338, 483, 485], "copyfil": [65, 94, 148, 226, 338, 455, 473, 479, 483, 485], "samefileerror": [65, 226, 338, 479, 485], "copymod": [65, 148, 226, 338], "copystat": [65, 148, 226, 338, 478, 485], "copy2": [65, 94, 226, 338, 477, 478, 480, 483, 485], "ignore_pattern": [65, 226, 338, 367, 472], "copytre": [65, 94, 148, 226, 472, 473, 477, 483, 485], "rmtree": [65, 94, 148, 193, 226, 299, 367, 406, 478, 482, 483, 485], "avoids_symlink_attack": [65, 226, 338], "disk_usag": [65, 226, 338, 478, 485], "chown": [65, 109, 124, 148, 226, 299, 338, 478, 485], "make_arch": [65, 69, 148, 226, 338, 473, 477, 480, 483, 485], "get_archive_format": [65, 226, 338, 477], "register_archive_format": [65, 226, 338, 477], "unregister_archive_format": [65, 226, 338], "unpack_arch": [65, 148, 226, 338, 477, 485], "register_unpack_format": [65, 226, 338], "unregister_unpack_format": [65, 226, 338], "get_unpack_format": [65, 226, 338], "base_dir": [65, 69, 148, 226], "get_terminal_s": [65, 124, 226, 299, 338, 478, 485], "persist": [65, 190, 248, 252, 254, 260, 274, 275, 280, 287, 326, 357, 394, 430, 477, 479, 485], "highest_protocol": [65, 304, 305, 469], "default_protocol": [65, 304, 305, 336, 476, 485], "pickleerror": [65, 304, 305], "picklingerror": [65, 100, 304, 305], "unpicklingerror": [65, 304, 305, 485], "pickler": [65, 100, 178, 304, 305, 306, 475, 478, 483, 485], "persistent_id": [65, 304, 305, 485], "dispatch_t": [65, 178, 304, 305, 478, 485], "reducer_overrid": [65, 304, 305, 483, 485], "unpickl": [65, 86, 109, 189, 218, 273, 275, 289, 290, 304, 306, 429, 469, 472, 473, 475, 485], "persistent_load": [65, 304, 305, 485], "find_class": [65, 148, 304, 305], "picklebuff": [65, 304, 305, 485], "__getnewargs_ex__": [65, 304, 305, 485], "__getnewargs__": [65, 166, 218, 304, 305, 393, 469, 480, 485], "__getstate__": [65, 304, 305, 393, 469, 485], "__setstate__": [65, 304, 305, 393, 469, 483, 485], "__reduce__": [65, 90, 304, 305, 393, 471, 483, 485], "__reduce_ex__": [65, 90, 218, 304, 305, 393, 485], "dispatch": [65, 88, 94, 95, 97, 108, 109, 112, 129, 145, 150, 162, 183, 204, 233, 252, 304, 314, 327, 341, 357, 392, 423, 475, 477, 479, 483, 485], "copyreg": [65, 177, 260, 285, 304, 305, 474, 485], "shelf": [65, 304, 336, 351, 477, 479], "sync": [65, 124, 183, 190, 218, 289, 299, 301, 304, 336, 357, 374, 478, 483, 485], "bsddbshelf": [65, 304, 336, 351], "dbfilenameshelf": [65, 304, 336, 351], "whichdb": [65, 190, 304, 474], "reinterpret": [65, 304], "gdbm": [65, 78, 94, 190, 304, 460, 474, 485], "firstkey": [65, 190, 304], "nextkey": [65, 190, 304], "reorgan": [65, 190, 201, 304, 467, 472, 475, 481, 483, 485], "ndbm": [65, 304, 336, 432, 460, 483, 485], "dumb": [65, 70, 75, 112, 304, 364, 480, 481, 482, 483, 485], "dumbdbm": [65, 190, 304, 474], "sqlite": [65, 260, 304, 447, 455, 460, 471, 473, 476, 477, 478, 479, 482, 485], "connect": [65, 102, 103, 107, 109, 112, 115, 124, 129, 131, 141, 145, 148, 158, 166, 170, 175, 214, 219, 220, 230, 249, 250, 252, 254, 255, 262, 264, 273, 275, 290, 294, 298, 299, 304, 305, 311, 315, 333, 334, 338, 339, 341, 342, 345, 348, 354, 355, 357, 359, 364, 367, 370, 374, 380, 388, 390, 394, 399, 401, 409, 411, 413, 415, 418, 420, 423, 430, 434, 453, 459, 460, 465, 466, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485], "complete_stat": [65, 304, 347], "enable_callback_traceback": [65, 304, 347], "register_adapt": [65, 304, 347], "register_convert": [65, 304, 347], "parse_colnam": [65, 304, 347, 485], "parse_decltyp": [65, 304, 347], "sqlite_ok": [65, 304, 347], "sqlite_deni": [65, 304, 347], "sqlite_ignor": [65, 304, 347], "apilevel": [65, 304, 347], "paramstyl": [65, 304, 347], "sqlite_vers": [65, 304, 347], "sqlite_version_info": [65, 304, 347], "threadsafeti": [65, 304, 347], "cursor": [65, 102, 162, 166, 181, 183, 254, 299, 304, 305, 326, 374, 380, 381, 394, 471, 472, 475, 477, 481, 483, 484, 485], "commit": [65, 103, 126, 287, 294, 304, 311, 347, 355, 357, 376, 471, 472, 473, 479, 481, 485], "rollback": [65, 304, 347, 471, 472, 485], "executemani": [65, 304, 347, 485], "executescript": [65, 304, 347], "create_funct": [65, 304, 347, 485], "create_aggreg": [65, 304, 347, 485], "create_col": [65, 304, 347, 485], "set_author": [65, 304, 347, 485], "set_progress_handl": [65, 304, 347, 485], "set_trace_callback": [65, 304, 347, 478, 485], "enable_load_extens": [65, 148, 304, 347, 460, 473, 476, 477, 485], "load_extens": [65, 148, 304, 347, 473, 476, 477, 485], "iterdump": [65, 304, 347, 485], "backup": [65, 109, 118, 225, 275, 304, 347, 363, 472, 477, 482, 485], "in_transact": [65, 304, 347], "isolation_level": [65, 304, 347, 485], "row_factori": [65, 304, 347], "text_factori": [65, 304, 347], "total_chang": [65, 304, 347], "fetchon": [65, 103, 304, 305, 347, 471, 477], "fetchmani": [65, 304, 347], "fetchal": [65, 166, 304, 347, 471], "setinputs": [65, 304, 347], "setoutputs": [65, 304, 347], "arrays": [65, 304, 347], "lastrowid": [65, 304, 347, 481, 485], "rowcount": [65, 304, 347, 485], "prepareprotocol": [65, 304, 485], "interfaceerror": [65, 304, 347], "databaseerror": [65, 304, 347], "dataerror": [65, 304, 347], "operationalerror": [65, 304, 347], "integrityerror": [65, 304, 347], "internalerror": [65, 304, 347], "programmingerror": [65, 304, 347, 485], "notsupportederror": [65, 304, 347, 485], "guid": [65, 75, 84, 86, 101, 102, 103, 110, 114, 116, 120, 189, 192, 193, 196, 199, 217, 232, 301, 304, 357, 394, 403, 460, 464, 472, 473, 477, 479, 485], "sql": [65, 104, 114, 181, 267, 287, 298, 304, 455, 471, 475, 478, 485], "uri": [65, 109, 115, 250, 302, 304, 320, 348, 388, 398, 399, 411, 414, 417, 419, 420, 422, 423, 476, 478, 479, 485], "transact": [65, 104, 249, 250, 287, 304, 324, 341, 370, 469, 471, 472, 477, 480, 481, 485], "adler32": [65, 125, 242, 428], "compressobj": [65, 125, 428], "crc32": [65, 125, 152, 242, 291, 428, 455, 456, 485], "decompress": [65, 125, 152, 156, 164, 225, 241, 413, 428, 455, 471, 476, 477, 478, 480, 481, 485], "decompressobj": [65, 125, 428], "unused_data": [65, 125, 156, 276, 428], "unconsumed_tail": [65, 125, 428], "zlib_vers": [65, 125, 428], "zlib_runtime_vers": [65, 125, 428, 478], "badgzipfil": [65, 125, 241, 483, 485], "gzipfil": [65, 97, 125, 241, 363, 473, 475, 476, 477, 480, 484, 485], "mtime": [65, 125, 223, 241, 258, 262, 299, 363, 400, 483, 485], "bzip2": [65, 69, 79, 125, 225, 260, 338, 363, 426, 477, 478, 485], "bz2file": [65, 125, 156, 276, 473, 475, 476, 478, 479, 484, 485], "bz2compressor": [65, 125, 156], "bz2decompressor": [65, 125, 156, 480, 485], "needs_input": [65, 125, 156, 276], "shot": [65, 125, 175, 334, 482], "lzmaerror": [65, 125, 276], "lzmafil": [65, 125, 276, 479, 485], "lzmacompressor": [65, 125, 276], "lzmadecompressor": [65, 125, 276, 480, 485], "is_check_support": [65, 125, 276], "badzipfil": [65, 125, 426, 485], "largezipfil": [65, 125, 426], "zipinfo": [65, 125, 472, 481, 485], "is_zipfil": [65, 125, 426, 473, 485], "zip_stor": [65, 125, 426, 485], "zip_defl": [65, 125, 426, 456], "zip_bzip2": [65, 125, 426], "zip_lzma": [65, 125, 426], "getinfo": [65, 125, 426], "infolist": [65, 125, 426], "namelist": [65, 125, 426], "extractal": [65, 125, 363, 426, 471, 472, 480, 485], "printdir": [65, 125, 426], "setpassword": [65, 125, 426], "testzip": [65, 125, 426], "writestr": [65, 125, 426, 473], "pyzipfil": [65, 125, 479], "writepi": [65, 125, 426, 479], "date_tim": [65, 125, 255, 426], "compress_typ": [65, 125, 426, 473], "create_system": [65, 125, 426], "create_vers": [65, 125, 426], "extract_vers": [65, 125, 426], "flag_bit": [65, 125, 426], "volum": [65, 94, 125, 166, 267, 301, 333, 426, 470, 479], "internal_attr": [65, 125, 426], "external_attr": [65, 125, 426], "header_offset": [65, 125, 426], "crc": [65, 125, 152, 426, 428, 485], "compress_s": [65, 125, 426], "file_s": [65, 125, 426, 468], "tar": [65, 69, 70, 76, 79, 90, 116, 125, 260, 282, 298, 302, 338, 403, 457, 464, 466, 469, 470, 471, 472, 473, 477, 485], "is_tarfil": [65, 125, 363, 485], "tarerror": [65, 125, 363], "readerror": [65, 125, 363, 485], "compressionerror": [65, 125, 363], "streamerror": [65, 125, 363], "extracterror": [65, 125, 363], "headererror": [65, 125, 363], "ustar_format": [65, 125, 363], "gnu_format": [65, 125, 363], "pax_format": [65, 125, 363, 472], "default_format": [65, 125, 363, 481], "getmemb": [65, 125, 261, 321, 363, 480, 485], "getnam": [65, 125, 160, 170, 279, 357, 363, 370, 420, 476, 485], "extractfil": [65, 125, 363, 485], "addfil": [65, 125, 363], "gettarinfo": [65, 125, 363], "pax_head": [65, 125, 363], "tarinfo": [65, 125, 473, 477], "frombuf": [65, 125, 363], "fromtarfil": [65, 125, 363], "tobuf": [65, 125, 363], "linknam": [65, 125, 363], "uid": [65, 125, 133, 148, 158, 224, 252, 255, 262, 299, 302, 310, 311, 316, 328, 338, 349, 363, 472, 473, 478, 480, 483, 485], "gid": [65, 125, 148, 240, 299, 302, 316, 363, 472, 473, 478, 480, 485], "unam": [65, 69, 124, 125, 299, 309, 359, 360, 363, 477, 478, 485], "gname": [65, 125, 363], "isreg": [65, 125, 363], "issym": [65, 125, 363], "islnk": [65, 125, 363], "ischr": [65, 125, 363], "isblk": [65, 125, 363], "isfifo": [65, 125, 363], "isdev": [65, 125, 363], "register_dialect": [65, 181, 224], "unregister_dialect": [65, 181, 224], "get_dialect": [65, 181, 224], "list_dialect": [65, 181, 224], "field_size_limit": [65, 181, 224, 471], "dictread": [65, 181, 224, 481, 483, 485], "dictwrit": [65, 181, 224, 477, 485], "dialect": [65, 224, 347, 469, 471, 477, 485], "excel_tab": [65, 181, 224], "unix_dialect": [65, 181, 224, 477], "sniffer": [65, 181, 224, 344, 485], "sniff": [65, 181, 224, 485], "has_head": [65, 181, 224, 250, 262, 399, 485], "quote_al": [65, 181, 224], "quote_minim": [65, 181, 224], "quote_nonnumer": [65, 181, 224], "quote_non": [65, 181, 224], "doublequot": [65, 181, 224, 485], "escapechar": [65, 181, 224, 485], "linetermin": [65, 181, 224], "quotechar": [65, 181, 224], "skipinitialspac": [65, 181, 224, 485], "csvreader": [65, 181, 224], "line_num": [65, 181, 224, 325, 471], "fieldnam": [65, 128, 166, 181, 224, 472, 475], "csvwriter": [65, 181, 224], "writerow": [65, 181, 224, 477, 480, 485], "writehead": [65, 181, 224, 477, 485], "interpol": [65, 69, 224, 350, 351, 434, 450, 477, 480, 481, 485], "basicinterpol": [65, 173, 224], "extendedinterpol": [65, 173, 224, 477], "boolean_st": [65, 173, 224], "sectcr": [65, 173, 224], "add_sect": [65, 173, 224, 477], "has_sect": [65, 173, 224], "has_opt": [65, 173, 224, 298, 357], "read_fil": [65, 173, 224, 274], "read_str": [65, 173, 224, 477, 480], "read_dict": [65, 173, 224, 477, 482, 483, 484, 485], "getint": [65, 173, 224, 485], "getfloat": [65, 173, 224], "getboolean": [65, 173, 224, 485], "remove_opt": [65, 173, 224, 298, 357], "remove_sect": [65, 173, 224], "optionxform": [65, 173, 224], "readfp": [65, 173, 224, 282, 291, 473], "max_interpolation_depth": [65, 173, 224], "rawconfigpars": [65, 224, 274, 473, 479, 485], "nosectionerror": [65, 173, 224], "duplicatesectionerror": [65, 173, 224, 477], "duplicateoptionerror": [65, 173, 224, 477], "nooptionerror": [65, 173, 224, 473], "interpolationerror": [65, 173, 224], "interpolationdeptherror": [65, 173, 224], "interpolationmissingoptionerror": [65, 173, 224, 485], "interpolationsyntaxerror": [65, 173, 224], "missingsectionheadererror": [65, 173, 224], "parsingerror": [65, 173, 224], "netrc": [65, 224, 230, 260, 294, 468, 479, 480, 485], "netrcparseerror": [65, 224, 292], "authent": [65, 170, 224, 230, 242, 248, 255, 262, 273, 275, 292, 294, 311, 342, 348, 399, 423, 428, 468, 473, 477, 478, 479, 480, 481, 483, 484, 485], "plist": [65, 224, 260, 278, 463, 472, 479, 482, 483, 485], "fmt_xml": [65, 224, 310, 479], "fmt_binari": [65, 224, 310, 479], "digest": [65, 180, 203, 211, 212, 244, 260, 289, 311, 348, 399, 471, 473, 474, 477, 478, 479, 482, 483, 484, 485], "algorithms_guarante": [65, 180, 242, 473, 477], "algorithms_avail": [65, 180, 242, 473, 477, 485], "digest_s": [65, 180, 242, 244, 479], "block_siz": [65, 180, 242, 244, 479], "hexdigest": [65, 180, 242, 244, 347, 471, 485], "shake": [65, 180, 218, 460, 481, 484, 485], "pbkdf2_hmac": [65, 180, 242, 473, 476, 479], "scrypt": [65, 180, 242, 481, 485], "blake2": [65, 180, 460, 481, 484, 485], "blake2b": [65, 180, 242, 481, 484, 485], "salt_siz": [65, 180, 242], "person_s": [65, 180, 242], "max_key_s": [65, 180, 242], "max_digest_s": [65, 180, 242], "person": [65, 70, 103, 104, 116, 180, 254, 347, 348, 350, 430, 465, 466, 468, 472], "compare_digest": [65, 179, 180, 242, 244, 332, 473, 478, 485], "randbelow": [65, 180, 332, 485], "randbit": [65, 180, 332], "token_byt": [65, 180, 324, 332], "token_hex": [65, 180, 332], "token_urlsaf": [65, 180, 332], "ctermid": [65, 124, 299], "environb": [65, 124, 299, 477, 485], "fsencod": [65, 97, 124, 299, 302, 359, 367, 477, 481, 485], "fspath": [65, 97, 124, 299, 302, 481, 485], "getenvb": [65, 124, 299, 477], "get_exec_path": [65, 124, 299], "getegid": [65, 124, 299], "geteuid": [65, 124, 299], "getgid": [65, 124, 299], "getgrouplist": [65, 124, 299, 478, 485], "getgroup": [65, 124, 299, 485], "getlogin": [65, 124, 236, 299], "getpgid": [65, 124, 299, 469], "getpgrp": [65, 124, 222, 299], "getpid": [65, 108, 124, 133, 289, 299, 485], "getppid": [65, 124, 289, 299], "getprior": [65, 124, 299, 478], "prio_process": [65, 124, 299], "prio_pgrp": [65, 124, 299], "prio_us": [65, 124, 299], "getresuid": [65, 124, 299, 473], "getresgid": [65, 124, 299, 473], "getuid": [65, 124, 299], "initgroup": [65, 124, 299, 473], "putenv": [65, 124, 148, 299, 312, 484, 485], "setegid": [65, 124, 299], "seteuid": [65, 124, 299], "setgid": [65, 124, 299], "setgroup": [65, 124, 299, 355, 485], "setpgrp": [65, 124, 299], "setpgid": [65, 124, 299], "setprior": [65, 124, 299, 478], "setregid": [65, 124, 299, 355], "setresgid": [65, 124, 299, 473], "setresuid": [65, 124, 299, 473], "setreuid": [65, 124, 299, 355], "getsid": [65, 124, 299, 470], "setsid": [65, 124, 299, 355, 485], "setuid": [65, 124, 299], "supports_bytes_environ": [65, 124, 299, 477], "umask": [65, 124, 190, 299, 302, 355, 367, 482, 485], "unsetenv": [65, 124, 148, 299, 472, 484, 485], "fdopen": [65, 124, 288, 299, 344, 432], "closerang": [65, 124, 299, 472, 485], "copy_file_rang": [65, 124, 299, 485], "device_encod": [65, 124, 299, 485], "dup": [65, 124, 145, 166, 299, 344, 485], "dup2": [65, 124, 221, 299, 339, 480, 482, 485], "fchmod": [65, 124, 299, 472, 480], "fchown": [65, 124, 299, 472, 480], "fdatasync": [65, 124, 299, 480], "fpathconf": [65, 124, 299, 485], "fstat": [65, 124, 299, 300, 349, 468, 478, 480, 485], "fstatvf": [65, 124, 299, 468, 480], "fsync": [65, 124, 299, 480, 485], "ftruncat": [65, 94, 124, 299, 480, 485], "get_block": [65, 124, 299, 480, 485], "lockf": [65, 124, 148, 222, 277, 299, 395, 468, 472, 478, 485], "f_lock": [65, 124, 299, 485], "f_tlock": [65, 124, 299], "f_ulock": [65, 124, 299], "f_test": [65, 124, 299], "lseek": [65, 124, 299, 471, 478], "seek_set": [65, 124, 222, 264, 284, 299, 471, 475], "seek_cur": [65, 124, 222, 264, 284, 299, 471, 475], "seek_end": [65, 124, 222, 264, 284, 299, 471, 475], "o_rdon": [65, 124, 232, 288, 289, 299], "o_wron": [65, 124, 299, 339], "o_rdwr": [65, 124, 299, 339], "o_append": [65, 124, 288, 299], "o_creat": [65, 124, 299], "o_excl": [65, 124, 299, 365], "o_trunc": [65, 124, 299], "o_dsync": [65, 124, 299], "o_rsync": [65, 124, 299], "o_sync": [65, 124, 299], "o_ndelay": [65, 112, 124, 222, 299], "o_nonblock": [65, 112, 124, 299, 478, 480, 485], "o_noctti": [65, 124, 299], "o_cloexec": [65, 124, 299, 478], "o_noinherit": [65, 124, 299], "o_short_liv": [65, 124, 299], "o_temporari": [65, 124, 299], "o_random": [65, 124, 299], "o_sequenti": [65, 124, 299], "o_evton": [65, 124, 299, 476, 485], "o_fsync": [65, 124, 299, 476, 485], "o_symlink": [65, 124, 299, 476, 485], "o_nofollow_ani": [65, 124, 299, 476, 485], "o_async": [65, 124, 299], "o_direct": [65, 124, 299], "o_directori": [65, 124, 299], "o_nofollow": [65, 124, 299], "o_noatim": [65, 124, 299], "o_path": [65, 124, 299, 479, 485], "o_tmpfil": [65, 124, 299, 365, 479, 485], "o_shlock": [65, 124, 222, 299, 471, 485], "o_exlock": [65, 124, 222, 299, 471, 485], "openpti": [65, 124, 299, 315, 395, 485], "pipe": [65, 97, 109, 111, 112, 124, 132, 136, 137, 139, 142, 170, 215, 219, 220, 222, 260, 264, 299, 334, 335, 338, 339, 349, 355, 357, 359, 367, 403, 459, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 485], "pipe2": [65, 124, 299, 478], "posix_falloc": [65, 124, 299, 478, 480, 485], "posix_fadvis": [65, 124, 299, 478, 480, 485], "posix_fadv_norm": [65, 124, 299], "posix_fadv_sequenti": [65, 124, 299], "posix_fadv_random": [65, 124, 299], "posix_fadv_noreus": [65, 124, 299], "posix_fadv_willne": [65, 124, 299], "posix_fadv_dontne": [65, 124, 299], "pread": [65, 124, 299, 478, 480, 482, 485], "preadv": [65, 124, 299, 482, 485], "rwf_nowait": [65, 124, 299], "rwf_hipri": [65, 124, 299], "pwrite": [65, 124, 299, 478, 480, 482], "pwritev": [65, 124, 299, 482, 485], "rwf_dsync": [65, 124, 299], "rwf_sync": [65, 124, 299], "rwf_append": [65, 124, 299, 485], "sendfil": [65, 124, 133, 134, 136, 139, 262, 299, 338, 344, 348, 411, 478, 480, 482, 485], "set_block": [65, 124, 299, 480, 485], "sf_nodiskio": [65, 124, 299], "sf_mnowait": [65, 124, 299], "sf_sync": [65, 124, 299], "splice": [65, 124, 219, 299, 476, 485], "splice_f_mov": [65, 124, 299], "splice_f_nonblock": [65, 124, 299], "splice_f_mor": [65, 124, 299], "readv": [65, 124, 299, 478, 480, 482, 485], "tcgetpgrp": [65, 124, 299], "tcsetpgrp": [65, 124, 299], "ttynam": [65, 124, 299, 485], "writev": [65, 124, 299, 478, 480, 482, 485], "terminal_s": [65, 124, 299, 338], "get_inherit": [65, 124, 299, 344, 479], "set_inherit": [65, 124, 299, 334, 344, 479, 485], "get_handle_inherit": [65, 124, 299, 479], "set_handle_inherit": [65, 124, 299, 355, 479], "f_ok": [65, 124, 299, 338], "r_ok": [65, 124, 299], "w_ok": [65, 124, 299], "x_ok": [65, 124, 299, 338], "chdir": [65, 69, 124, 148, 299, 338, 359, 455, 477, 478, 484, 485], "chflag": [65, 124, 148, 299, 338, 349, 472, 478], "chroot": [65, 124, 299, 485], "fchdir": [65, 124, 299, 480], "getcwd": [65, 118, 124, 299, 300, 302, 367, 411, 455, 482, 485], "getcwdb": [65, 124, 299, 474, 483, 485], "lchflag": [65, 124, 299, 472], "lchown": [65, 124, 299, 469], "listdir": [65, 78, 88, 103, 114, 124, 148, 207, 220, 227, 237, 252, 299, 302, 338, 349, 403, 469, 470, 473, 474, 478, 482, 485], "makedir": [65, 94, 124, 299, 302, 480, 482, 485], "mkfifo": [65, 124, 299, 478, 480, 485], "mknod": [65, 124, 299, 469, 478, 480, 485], "makedev": [65, 124, 299, 469, 485], "pathconf": [65, 124, 299, 478], "pathconf_nam": [65, 124, 299], "removedir": [65, 94, 124, 299], "direntri": [65, 124, 299, 480, 481, 485], "inod": [65, 124, 275, 299, 349, 485], "stat_result": [65, 124, 299, 302, 469, 480, 483, 485], "st_atime_n": [65, 124, 299], "st_mtime_n": [65, 124, 299], "st_ctime_n": [65, 124, 299], "st_block": [65, 124, 299, 485], "st_blksize": [65, 124, 299], "st_rdev": [65, 124, 299], "st_flag": [65, 124, 299, 471], "st_gen": [65, 124, 299, 471], "st_birthtim": [65, 124, 299, 471], "st_fstype": [65, 124, 299, 482, 485], "st_rsize": [65, 124, 299], "st_creator": [65, 124, 299], "st_type": [65, 124, 299], "st_file_attribut": [65, 124, 299, 349, 480, 485], "st_reparse_tag": [65, 124, 299, 349, 483], "statvf": [65, 124, 299, 468, 472, 478, 485], "supports_dir_fd": [65, 124, 299, 478], "supports_effective_id": [65, 124, 299, 478], "supports_fd": [65, 124, 299, 478], "supports_follow_symlink": [65, 124, 299, 338], "utim": [65, 124, 148, 299, 338, 478, 485], "walk": [65, 69, 124, 126, 128, 148, 201, 203, 207, 211, 212, 214, 270, 291, 298, 299, 302, 355, 374, 385, 412, 468, 472, 474, 478, 480, 485], "fwalk": [65, 124, 148, 299, 478, 482, 485], "memfd_creat": [65, 124, 222, 299, 483, 485], "mfd_cloexec": [65, 124, 299], "mfd_allow_s": [65, 124, 299], "mfd_hugetlb": [65, 124, 299], "mfd_huge_shift": [65, 124, 299], "mfd_huge_mask": [65, 124, 299], "mfd_huge_64kb": [65, 124, 299], "mfd_huge_512kb": [65, 124, 299], "mfd_huge_1mb": [65, 124, 299], "mfd_huge_2mb": [65, 124, 299], "mfd_huge_8mb": [65, 124, 299], "mfd_huge_16mb": [65, 124, 299], "mfd_huge_32mb": [65, 124, 299], "mfd_huge_256mb": [65, 124, 299], "mfd_huge_512mb": [65, 124, 299], "mfd_huge_1gb": [65, 124, 299], "mfd_huge_2gb": [65, 124, 299], "mfd_huge_16gb": [65, 124, 299], "eventfd": [65, 124, 299, 476, 485], "eventfd_read": [65, 124, 299], "eventfd_writ": [65, 124, 299], "efd_cloexec": [65, 124, 299, 485], "efd_nonblock": [65, 124, 299, 485], "efd_semaphor": [65, 124, 299, 485], "getxattr": [65, 124, 148, 299, 478], "listxattr": [65, 124, 148, 299, 478], "removexattr": [65, 124, 148, 299, 478], "setxattr": [65, 124, 148, 299, 478, 485], "xattr_size_max": [65, 124, 299], "xattr_creat": [65, 124, 299], "xattr_replac": [65, 124, 299], "add_dll_directori": [65, 124, 148, 299, 483, 485], "execl": [65, 124, 298, 299], "execlp": [65, 124, 299], "execv": [65, 124, 298, 299, 312, 478, 485], "execvp": [65, 124, 299, 355], "_exit": [65, 124, 146, 220, 221, 299], "ex_ok": [65, 124, 299], "ex_usag": [65, 124, 299], "ex_dataerr": [65, 124, 299], "ex_noinput": [65, 124, 299], "ex_nous": [65, 124, 299], "ex_nohost": [65, 124, 299], "ex_unavail": [65, 124, 299], "ex_softwar": [65, 124, 299], "ex_oserr": [65, 124, 299], "ex_osfil": [65, 124, 299], "ex_cantcreat": [65, 124, 299], "ex_ioerr": [65, 124, 299], "ex_tempfail": [65, 124, 299], "ex_protocol": [65, 124, 299], "ex_noperm": [65, 124, 299], "ex_config": [65, 124, 299], "ex_notfound": [65, 124, 299], "forkpti": [65, 124, 148, 299], "killpg": [65, 124, 148, 299, 469, 485], "nice": [65, 100, 112, 124, 126, 146, 150, 158, 175, 182, 200, 232, 243, 276, 299, 328, 342, 345, 350, 351, 394, 407, 432, 466, 477, 478], "pidfd_open": [65, 124, 299, 484, 485], "plock": [65, 124, 299], "posix_spawn": [65, 124, 148, 299, 355, 483, 485], "posix_spawn_open": [65, 124, 299], "posix_spawn_clos": [65, 124, 299], "posix_spawn_dup2": [65, 124, 299], "posix_spawnp": [65, 124, 299, 485], "spawnl": [65, 124, 299], "spawnlp": [65, 124, 299, 355], "spawnv": [65, 124, 299, 485], "spawnvp": [65, 124, 299, 355], "p_nowait": [65, 124, 299, 355], "p_nowaito": [65, 124, 299], "p_wait": [65, 124, 299, 355], "p_detach": [65, 124, 299], "p_overlay": [65, 124, 299], "startfil": [65, 124, 148, 299, 485], "waitid": [65, 124, 299, 478, 480, 485], "p_pid": [65, 124, 299], "p_pgid": [65, 124, 299], "p_all": [65, 124, 299], "p_pidfd": [65, 124, 299, 484, 485], "wexit": [65, 124, 299], "wstop": [65, 124, 299], "wnowait": [65, 124, 299], "cld_exit": [65, 124, 299], "cld_kill": [65, 124, 299, 484, 485], "cld_dump": [65, 124, 299], "cld_trap": [65, 124, 299], "cld_stop": [65, 124, 299, 484, 485], "cld_continu": [65, 124, 299], "waitpid": [65, 124, 138, 299, 315, 471, 479, 480, 485], "wait3": [65, 124, 299, 471, 480, 485], "wait4": [65, 124, 299, 471, 480], "waitstatus_to_exitcod": [65, 124, 299, 315, 484, 485], "wnohang": [65, 124, 299], "wcontinu": [65, 124, 299], "wuntrac": [65, 124, 299], "wcoredump": [65, 124, 299], "wifcontinu": [65, 124, 299], "wifstop": [65, 124, 299], "wifsign": [65, 124, 299], "wifexit": [65, 124, 299], "wexitstatus": [65, 124, 299], "wstopsig": [65, 124, 299], "wtermsig": [65, 124, 299], "sched_oth": [65, 124, 299], "sched_batch": [65, 124, 299], "sched_idl": [65, 124, 299], "sched_sporad": [65, 124, 299], "sched_fifo": [65, 124, 299], "sched_rr": [65, 124, 299], "sched_reset_on_fork": [65, 124, 299], "sched_param": [65, 124, 299], "sched_prior": [65, 124, 299], "sched_get_priority_min": [65, 124, 299, 478], "sched_get_priority_max": [65, 124, 299, 478], "sched_setschedul": [65, 124, 299, 478], "sched_getschedul": [65, 124, 299, 478], "sched_setparam": [65, 124, 299, 478], "sched_getparam": [65, 124, 299, 478], "sched_rr_get_interv": [65, 124, 299, 478], "sched_yield": [65, 124, 299, 478, 485], "sched_setaffin": [65, 124, 299, 478, 485], "sched_getaffin": [65, 124, 289, 299, 478, 485], "confstr": [65, 124, 299, 485], "confstr_nam": [65, 124, 299], "cpu_count": [65, 124, 169, 170, 172, 289, 299, 476, 479, 485], "getloadavg": [65, 124, 299], "sysconf": [65, 124, 299, 344, 485], "sysconf_nam": [65, 124, 299], "curdir": [65, 124, 195, 223, 299, 300, 338, 374], "pardir": [65, 124, 223, 299], "altsep": [65, 124, 238, 254, 299], "extsep": [65, 124, 299], "defpath": [65, 124, 299, 338, 485], "linesep": [65, 124, 201, 208, 209, 210, 215, 232, 264, 291, 299, 342, 355, 478, 485], "devnul": [65, 124, 133, 142, 170, 289, 299, 339, 355, 478, 485], "rtld_lazi": [65, 124, 299, 359, 478], "rtld_now": [65, 124, 182, 299, 478], "rtld_global": [65, 124, 182, 299, 359, 478, 483, 485], "rtld_local": [65, 124, 182, 299, 478, 483, 485], "rtld_nodelet": [65, 124, 299, 478], "rtld_noload": [65, 124, 299, 478], "rtld_deepbind": [65, 124, 299, 478], "getrandom": [65, 124, 299, 480, 481, 485], "urandom": [65, 124, 133, 242, 289, 299, 324, 348, 470, 473, 479, 480, 481, 485], "grnd_nonblock": [65, 124, 299, 485], "grnd_random": [65, 124, 299], "default_buffer_s": [65, 124, 232, 264, 355, 485], "text_encod": [65, 124, 264], "unsupportedoper": [65, 124, 264, 485], "iobas": [65, 124, 194, 196, 220, 222, 264, 383, 459, 483, 485], "seek": [65, 89, 94, 95, 114, 123, 124, 160, 181, 199, 219, 222, 225, 243, 264, 284, 305, 357, 363, 365, 367, 426, 428, 450, 466, 472, 475, 485], "seekabl": [65, 123, 124, 156, 264, 405, 426, 472, 485], "rawiobas": [65, 124, 232, 264, 472, 478, 480, 485], "readal": [65, 124, 264, 476, 479, 485], "bufferediobas": [65, 124, 156, 232, 241, 249, 252, 264, 276, 305, 345, 374, 411, 472, 473, 477, 478, 480, 481, 485], "read1": [65, 124, 156, 241, 264, 485], "readinto1": [65, 124, 264, 480], "bytesio": [65, 97, 124, 203, 214, 241, 264, 277, 305, 351, 365, 383, 425, 429, 472, 474, 477, 480, 485], "getbuff": [65, 124, 264, 477], "getvalu": [65, 88, 89, 95, 124, 158, 175, 203, 241, 264, 268, 279, 305, 314, 367, 393, 420, 425, 477, 480], "bufferedread": [65, 124, 232, 264, 363, 472, 473, 477, 485], "bufferedwrit": [65, 124, 232, 264, 472, 477, 485], "bufferedrandom": [65, 124, 232, 264, 472], "bufferedrwpair": [65, 124, 264, 472, 485], "textiobas": [65, 89, 124, 232, 249, 264, 374, 432, 472, 473, 474], "line_buff": [65, 124, 264], "write_through": [65, 124, 232, 264, 478, 485], "reconfigur": [65, 100, 124, 232, 264, 482, 485], "stringio": [65, 89, 95, 97, 124, 175, 203, 214, 264, 268, 314, 351, 359, 367, 393, 411, 415, 472, 473, 474, 477, 479, 480], "incrementalnewlinedecod": [65, 124, 264, 485], "reentranc": [65, 124, 175, 322, 485], "asctim": [65, 108, 109, 124, 273, 274, 315, 371, 467, 473, 477], "pthread_getcpuclockid": [65, 124, 371, 482, 485], "clock_getr": [65, 124, 371, 478], "clock_gettim": [65, 124, 371, 478, 484, 485], "clock_gettime_n": [65, 124, 371, 482, 485], "clock_settim": [65, 124, 371, 478], "clock_settime_n": [65, 124, 371, 482, 485], "get_clock_info": [65, 124, 371, 478, 485], "gmtime": [65, 108, 109, 124, 157, 189, 216, 273, 277, 310, 371, 468, 477, 478, 485], "localtim": [65, 97, 108, 124, 189, 201, 210, 216, 255, 273, 291, 371, 467, 468, 478, 485], "mktime": [65, 124, 189, 216, 310, 371, 477, 485], "monoton": [65, 100, 124, 133, 137, 140, 175, 196, 331, 371, 444, 469, 478, 480, 485], "monotonic_n": [65, 124, 371, 482, 485], "perf_count": [65, 124, 314, 371, 372, 478, 483, 485], "perf_counter_n": [65, 124, 371, 482, 485], "process_tim": [65, 124, 314, 371, 372, 478, 483, 485], "process_time_n": [65, 124, 371, 482, 485], "sleep": [65, 94, 104, 109, 124, 130, 131, 132, 133, 135, 139, 140, 142, 143, 172, 173, 183, 289, 328, 331, 339, 347, 355, 371, 472, 476, 478, 480, 481, 482, 483, 485], "struct_tim": [65, 124, 189, 255, 277, 371, 481], "time_n": [65, 124, 371, 482, 485], "thread_tim": [65, 124, 371, 482, 484, 485], "thread_time_n": [65, 124, 371, 482, 485], "tzset": [65, 124, 371, 485], "clock": [65, 95, 124, 133, 137, 189, 314, 328, 388, 472, 478, 480, 481, 482, 483, 485], "clock_boottim": [65, 124, 371, 482, 485], "clock_highr": [65, 124, 371], "clock_monoton": [65, 124, 371, 482, 485], "clock_monotonic_raw": [65, 124, 371], "clock_process_cputime_id": [65, 124, 371], "clock_prof": [65, 124, 371, 482, 485], "clock_tai": [65, 124, 371, 485], "clock_thread_cputime_id": [65, 124, 371, 484, 485], "clock_uptim": [65, 124, 371, 482, 485], "clock_uptime_raw": [65, 124, 371, 483, 485], "clock_realtim": [65, 124, 371, 485], "altzon": [65, 124, 189, 371], "daylight": [65, 124, 189, 216, 371, 429, 484], "argumentpars": [65, 99, 109, 124, 166, 196, 207, 235, 315, 403, 455, 473, 477, 480, 482, 485], "prog": [65, 99, 109, 124, 298, 325, 403, 455, 477], "epilog": [65, 124, 212, 298, 471, 477], "formatter_class": [65, 109, 124], "rawdescriptionhelpformatt": [65, 124, 126], "rawtexthelpformatt": [65, 124, 126], "argumentdefaultshelpformatt": [65, 109, 124, 126, 485], "metavartypehelpformatt": [65, 124, 126], "prefix_char": [65, 124], "fromfile_prefix_char": [65, 124], "argument_default": [65, 124], "allow_abbrev": [65, 124, 480, 485], "conflict_handl": [65, 124, 298], "add_help": [65, 124], "exit_on_error": [65, 124, 485], "add_argu": [65, 99, 109, 124, 166, 196, 207, 235, 315, 403, 455, 473, 477, 485], "metavar": [65, 109, 124, 207, 298, 357, 403, 473, 477, 485], "dest": [65, 99, 109, 124, 207, 235, 275, 284, 298, 315, 357, 403, 469, 471, 472, 473, 485], "parse_arg": [65, 99, 109, 124, 166, 196, 207, 235, 298, 315, 403, 455, 469, 473, 477], "abbrevi": [65, 114, 124, 157, 183, 189, 192, 272, 298, 303, 314, 355, 371, 385, 417, 459, 479, 480, 481, 485], "add_subpars": [65, 109, 124, 126, 477, 482, 485], "filetyp": [65, 124, 195, 343, 473, 479, 485], "add_argument_group": [65, 124, 126], "add_mutually_exclusive_group": [65, 99, 124, 126], "set_default": [65, 124, 126, 298, 357, 485], "get_default": [65, 124, 126], "print_usag": [65, 124, 126, 298, 357], "print_help": [65, 124, 126, 298], "format_usag": [65, 124, 126, 485], "format_help": [65, 124, 126], "parse_known_arg": [65, 124, 126, 485], "convert_arg_line_to_arg": [65, 124, 126], "intermix": [65, 124, 235, 482, 485], "parse_intermixed_arg": [65, 124, 126, 482, 485], "parse_known_intermixed_arg": [65, 124, 126], "upgrad": [65, 73, 115, 116, 117, 124, 217, 254, 403, 457, 460, 465, 468, 469, 473, 477, 479, 481, 482, 483, 485], "getopt": [65, 75, 95, 99, 124, 260, 298, 469, 473, 485], "gnu_getopt": [65, 124, 235, 469], "getopterror": [65, 124, 235], "logger": [65, 124, 132, 175, 274, 275, 289, 338, 361, 390, 392, 469, 473, 475, 477, 478, 479, 480, 482, 483, 484, 485], "setlevel": [65, 108, 109, 124, 132, 273, 289, 469, 485], "isenabledfor": [65, 108, 109, 124, 273, 473, 485], "geteffectivelevel": [65, 124, 273], "getchild": [65, 124, 273, 473], "critic": [65, 85, 97, 108, 109, 124, 133, 257, 258, 273, 274, 275, 298, 410, 436, 455, 456, 469, 471, 472, 475, 477, 480, 485], "addfilt": [65, 108, 109, 124, 273], "removefilt": [65, 108, 124, 273], "addhandl": [65, 108, 109, 124, 273, 475], "removehandl": [65, 108, 109, 124, 193, 273, 392, 473], "findcal": [65, 124, 273], "makerecord": [65, 109, 124, 273], "hashandl": [65, 124, 273], "createlock": [65, 124, 273, 275], "setformatt": [65, 108, 109, 124, 273, 275], "handleerror": [65, 108, 124, 273, 275], "formattim": [65, 124, 273], "formatexcept": [65, 109, 124, 273], "formatstack": [65, 124, 273], "bufferingformatt": [65, 108, 124, 273], "formathead": [65, 124, 273], "formatfoot": [65, 124, 273], "logrecord": [65, 108, 124, 275, 392, 469, 479, 485], "getmessag": [65, 109, 124, 273, 279, 418], "loggeradapt": [65, 124, 473, 485], "getlogg": [65, 108, 109, 124, 132, 273, 392, 469, 473, 475, 484, 485], "getloggerclass": [65, 124, 273], "getlogrecordfactori": [65, 109, 124, 273], "addlevelnam": [65, 124, 273], "getlevelnam": [65, 109, 124, 273], "makelogrecord": [65, 109, 124, 273, 275], "basicconfig": [65, 103, 108, 109, 124, 132, 175, 273, 470, 477, 478, 483, 485], "setloggerclass": [65, 109, 124, 273], "setlogrecordfactori": [65, 109, 124, 273], "lastresort": [65, 108, 124, 273, 477], "capturewarn": [65, 124, 273, 404], "dictconfig": [65, 108, 124, 274, 275, 473, 477, 485], "fileconfig": [65, 108, 109, 124, 274, 473, 479, 482, 485], "listen": [65, 94, 112, 124, 133, 145, 170, 229, 252, 274, 275, 294, 319, 335, 342, 344, 345, 348, 350, 357, 367, 388, 411, 423, 469, 472, 473, 479, 480, 485], "stoplisten": [65, 109, 124, 274], "schema": [65, 103, 124, 287, 347, 357, 473, 485], "streamhandl": [65, 108, 109, 124, 273, 274, 477, 482, 485], "setstream": [65, 124, 275, 287, 357, 482, 485], "filehandl": [65, 108, 109, 115, 124, 262, 273, 274, 472, 485], "nullhandl": [65, 108, 124, 475], "watchedfilehandl": [65, 108, 124, 472, 481], "reopenifneed": [65, 124, 275, 481], "baserotatinghandl": [65, 108, 124, 470], "namer": [65, 124, 275, 485], "rotation_filenam": [65, 124, 275], "rotatingfilehandl": [65, 108, 109, 124, 274, 470, 472, 473], "dorollov": [65, 124, 275], "timedrotatingfilehandl": [65, 108, 124, 470, 472, 479, 485], "getfilestodelet": [65, 124, 275], "sockethandl": [65, 108, 109, 124, 274, 479], "makesocket": [65, 124, 275], "makepickl": [65, 109, 124, 275], "createsocket": [65, 124, 275], "datagramhandl": [65, 108, 124, 274, 479], "sysloghandl": [65, 108, 124, 274, 361, 473, 478, 485], "encodeprior": [65, 124, 275], "mapprior": [65, 124, 275], "nteventloghandl": [65, 108, 124, 274], "geteventcategori": [65, 124, 275], "geteventtyp": [65, 124, 275], "getmessageid": [65, 124, 275], "smtphandler": [65, 108, 109, 124, 274, 485], "getsubject": [65, 124, 275], "memoryhandl": [65, 108, 109, 124, 274, 485], "bufferinghandl": [65, 109, 124, 275], "shouldflush": [65, 124, 275], "settarget": [65, 124, 275, 485], "httphandler": [65, 108, 109, 115, 124, 262, 274, 480, 485], "maplogrecord": [65, 124, 275], "queuehandl": [65, 108, 124, 485], "enqueu": [65, 109, 124, 172, 275, 289, 485], "queuelisten": [65, 124, 480, 485], "dequeu": [65, 109, 124, 275, 485], "enqueue_sentinel": [65, 124, 275], "getpass": [65, 124, 179, 255, 260, 288, 299, 311, 364, 366, 472, 485], "getpasswarn": [65, 124, 236], "getus": [65, 124, 236, 255, 299, 311], "baudrat": [65, 124, 183], "beep": [65, 124, 183, 408, 410, 481], "can_change_color": [65, 102, 124, 183], "cbreak": [65, 102, 124, 183, 387], "color_cont": [65, 124, 183, 476], "color_pair": [65, 102, 124, 183, 485], "curs_set": [65, 102, 124, 183], "def_prog_mod": [65, 124, 183], "def_shell_mod": [65, 124, 183], "delay_output": [65, 124, 183], "doupdat": [65, 102, 124, 183, 185], "echo": [65, 99, 102, 120, 124, 133, 136, 142, 147, 176, 183, 236, 254, 268, 288, 299, 305, 335, 337, 344, 355, 357, 366, 392, 434, 454, 472, 485], "endwin": [65, 102, 124, 183], "erasechar": [65, 124, 183], "flash": [65, 102, 124, 183, 485], "flushinp": [65, 124, 183], "getmous": [65, 124, 183], "getsyx": [65, 124, 183], "getwin": [65, 124, 183], "has_color": [65, 102, 124, 183], "has_extended_color_support": [65, 124, 183, 476, 485], "has_ic": [65, 124, 183], "has_il": [65, 124, 183], "has_key": [65, 118, 124, 183, 466, 467, 468, 469, 474, 485], "halfdelay": [65, 102, 124, 183], "init_color": [65, 124, 183, 476], "init_pair": [65, 102, 124, 183, 476], "initscr": [65, 102, 124, 183], "is_term_res": [65, 124, 183], "isendwin": [65, 124, 183], "keynam": [65, 124, 183], "killchar": [65, 124, 183], "longnam": [65, 124, 183, 363, 485], "mouseinterv": [65, 124, 183], "mousemask": [65, 124, 183], "napm": [65, 124, 183], "newpad": [65, 102, 124, 183], "newwin": [65, 102, 124, 183], "nl": [65, 124, 183, 184, 247, 270, 344, 382, 383, 398, 430, 439, 472, 485], "nocbreak": [65, 102, 124, 183], "noecho": [65, 102, 124, 183], "nonl": [65, 124, 183], "noqiflush": [65, 124, 183], "noraw": [65, 124, 183], "pair_cont": [65, 124, 183, 476], "pair_numb": [65, 124, 183], "putp": [65, 124, 183], "qiflush": [65, 124, 183], "reset_prog_mod": [65, 124, 183], "reset_shell_mod": [65, 124, 183], "resetti": [65, 124, 183], "resize_term": [65, 124, 183], "resizeterm": [65, 124, 183], "savetti": [65, 124, 183], "get_escdelay": [65, 124, 183, 484, 485], "set_escdelay": [65, 124, 183, 484, 485], "get_tabs": [65, 124, 183, 484, 485], "set_tabs": [65, 124, 183, 484, 485], "setsyx": [65, 124, 183], "setupterm": [65, 124, 183], "start_color": [65, 102, 124, 183], "termattr": [65, 124, 183], "termnam": [65, 124, 183], "tigetflag": [65, 124, 183], "tigetnum": [65, 124, 183], "tigetstr": [65, 124, 183], "tparm": [65, 124, 183], "typeahead": [65, 124, 183], "unctrl": [65, 124, 183, 184], "ungetch": [65, 124, 183, 288, 408], "update_lines_col": [65, 124, 183, 480, 485], "unget_wch": [65, 124, 183, 478, 485], "ungetmous": [65, 124, 183, 485], "use_env": [65, 124, 183], "use_default_color": [65, 124, 183, 470], "addch": [65, 100, 102, 124, 183, 485], "addnstr": [65, 124, 183], "addstr": [65, 102, 124, 183, 485], "attroff": [65, 124, 183], "attron": [65, 124, 183], "attrset": [65, 124, 183], "bkgd": [65, 124, 183], "bkgdset": [65, 124, 183], "border": [65, 102, 124, 183, 374, 381, 398], "box": [65, 100, 102, 109, 124, 183, 254, 277, 374, 378, 380, 381, 434, 481, 482, 483, 485], "chgat": [65, 124, 183, 472], "clearok": [65, 124, 183], "clrtobot": [65, 124, 183], "clrtoeol": [65, 124, 183], "cursyncup": [65, 124, 183], "delch": [65, 124, 183], "deleteln": [65, 124, 183], "derwin": [65, 124, 183], "echochar": [65, 124, 183], "enclos": [65, 83, 97, 100, 111, 124, 166, 183, 232, 249, 255, 261, 268, 294, 303, 325, 337, 352, 367, 370, 372, 390, 392, 414, 431, 433, 434, 438, 439, 440, 444, 467, 468, 471, 476, 477, 483, 485], "eras": [65, 95, 102, 109, 124, 183, 351, 364], "getbegyx": [65, 124, 183], "getbkgd": [65, 124, 183], "getch": [65, 96, 102, 124, 183, 288, 408], "get_wch": [65, 124, 183, 478], "getkey": [65, 102, 124, 183, 485], "getmaxyx": [65, 124, 183], "getparyx": [65, 124, 183], "getstr": [65, 102, 124, 183, 287, 357, 472, 485], "getyx": [65, 124, 183], "hline": [65, 124, 183], "idcok": [65, 124, 183], "idlok": [65, 124, 183], "immedok": [65, 124, 183], "inch": [65, 124, 183, 374], "insch": [65, 124, 183], "insdelln": [65, 124, 183], "insertln": [65, 124, 183], "insnstr": [65, 124, 183], "insstr": [65, 124, 183], "instr": [65, 124, 183, 197, 367, 479, 485], "is_linetouch": [65, 124, 183], "is_wintouch": [65, 124, 183], "keypad": [65, 102, 124, 183], "leaveok": [65, 102, 124, 183], "mvderwin": [65, 124, 183], "mvwin": [65, 124, 183], "nodelay": [65, 102, 124, 183], "notimeout": [65, 124, 183], "noutrefresh": [65, 102, 124, 183], "overlay": [65, 124, 183], "putwin": [65, 124, 183], "redrawln": [65, 124, 183], "redrawwin": [65, 124, 183], "refresh": [65, 102, 124, 166, 183, 294, 374, 381, 471, 484, 485], "scroll": [65, 102, 124, 162, 183, 254, 260, 373, 374, 381, 485], "scrollok": [65, 124, 183], "setscrreg": [65, 124, 183], "standend": [65, 124, 183], "standout": [65, 124, 183], "subpad": [65, 124, 183], "subwin": [65, 124, 183], "syncdown": [65, 124, 183], "syncok": [65, 124, 183], "syncup": [65, 124, 183], "timeout": [65, 109, 112, 115, 121, 124, 131, 133, 135, 140, 142, 143, 145, 170, 172, 175, 183, 191, 230, 249, 255, 262, 274, 275, 289, 294, 311, 322, 334, 335, 339, 342, 345, 347, 348, 355, 364, 367, 370, 390, 399, 460, 469, 472, 473, 476, 477, 478, 480, 483, 484, 485], "touchlin": [65, 124, 183], "touchwin": [65, 124, 183], "untouchwin": [65, 124, 183], "vline": [65, 124, 183], "err": [65, 102, 124, 183, 220, 235, 275, 320, 355, 392, 423, 430, 447, 478], "ok": [65, 83, 115, 124, 183, 195, 200, 230, 248, 249, 250, 252, 255, 295, 298, 341, 342, 348, 378, 380, 390, 392, 411, 445, 470, 477, 485], "ncurses_vers": [65, 124, 183, 483, 485], "textpad": [65, 102, 124, 260, 472, 485], "rectangl": [65, 83, 102, 124, 183, 187], "textbox": [65, 102, 124, 472, 485], "do_command": [65, 124, 183], "gather": [65, 102, 106, 124, 126, 131, 140, 142, 144, 183, 218, 234, 299, 314, 344, 384, 392, 476, 480, 482, 483, 485], "stripspac": [65, 124, 183], "isblank": [65, 124, 184, 485], "iscntrl": [65, 124, 184, 485], "isgraph": [65, 124, 184], "ispunct": [65, 124, 184, 485], "isxdigit": [65, 124, 184], "isctrl": [65, 124, 184], "ismeta": [65, 124, 184], "alt": [65, 124, 183, 184, 247, 254, 381, 466, 485], "controlnam": [65, 124, 184], "panel": [65, 70, 93, 124, 183, 260, 410, 467, 485], "bottom_panel": [65, 124, 185], "new_panel": [65, 124, 185], "top_panel": [65, 124, 185], "update_panel": [65, 124, 185], "bottom": [65, 78, 83, 100, 104, 124, 182, 183, 185, 197, 264, 273, 299, 303, 348, 374, 381, 388, 393, 394, 432, 439, 465, 466, 468, 469, 476, 485], "hide": [65, 102, 106, 114, 124, 181, 185, 200, 201, 218, 223, 254, 264, 298, 355, 367, 372, 373, 381, 388, 390, 404, 431, 465, 469, 473, 477, 484, 485], "set_userptr": [65, 124, 185], "userptr": [65, 124, 185, 485], "node": [65, 124, 239, 242, 247, 265, 270, 279, 299, 300, 302, 309, 344, 348, 381, 382, 390, 402, 415, 416, 417, 419, 456, 466, 469, 471, 472, 473, 476, 477, 481, 482, 483, 484, 485], "python_build": [65, 124, 309, 485], "python_compil": [65, 124, 309], "python_branch": [65, 124, 309, 485], "python_implement": [65, 124, 309], "python_revis": [65, 124, 309, 485], "python_vers": [65, 124, 309], "python_version_tupl": [65, 124, 309], "system_alia": [65, 124, 309], "java_v": [65, 124, 309], "win32_ver": [65, 124, 309, 485], "win32_edit": [65, 124, 309, 485], "win32_is_iot": [65, 124, 309, 485], "mac_ver": [65, 124, 309, 485], "libc_ver": [65, 124, 309, 485], "freedesktop_os_releas": [65, 124, 309, 476, 485], "errorcod": [65, 124, 219, 279, 320], "eperm": [65, 124, 219, 220, 478, 485], "enoent": [65, 124, 219, 220, 334, 478, 485], "esrch": [65, 124, 219, 220], "eio": [65, 124, 219], "enxio": [65, 124, 219], "e2big": [65, 124, 219], "enoexec": [65, 124, 219], "ebadf": [65, 124, 219, 334, 481, 484, 485], "echild": [65, 124, 219, 220], "eagain": [65, 124, 219, 220, 222, 299], "enomem": [65, 124, 219, 485], "eacc": [65, 124, 219, 220, 222, 258, 478, 485], "efault": [65, 124, 219], "enotblk": [65, 124, 219], "ebusi": [65, 124, 219], "eexist": [65, 124, 219, 220, 299, 485], "exdev": [65, 124, 219, 299], "enodev": [65, 124, 219], "enotdir": [65, 124, 219, 220], "eisdir": [65, 124, 219, 220], "einval": [65, 124, 219, 299, 485], "enfil": [65, 124, 219], "emfil": [65, 124, 219, 485], "enotti": [65, 124, 219, 485], "etxtbsi": [65, 124, 219], "efbig": [65, 124, 219], "enospc": [65, 124, 219], "espip": [65, 124, 219], "erof": [65, 124, 219], "emlink": [65, 124, 219], "epip": [65, 124, 219, 220, 339], "erang": [65, 124, 219], "edeadlk": [65, 124, 219], "enametoolong": [65, 124, 219], "enolck": [65, 124, 219], "enosi": [65, 124, 219, 485], "enotempti": [65, 124, 219], "eloop": [65, 124, 219], "ewouldblock": [65, 124, 219, 220], "enomsg": [65, 124, 219], "eidrm": [65, 124, 219], "echrng": [65, 124, 219], "el2nsync": [65, 124, 219], "el3hlt": [65, 124, 219], "el3rst": [65, 124, 219], "elnrng": [65, 124, 219], "eunatch": [65, 124, 219], "enocsi": [65, 124, 219], "el2hlt": [65, 124, 219], "ebad": [65, 124, 219], "ebadr": [65, 124, 219], "exful": [65, 124, 219], "enoano": [65, 124, 219], "ebadrqc": [65, 124, 219], "ebadslt": [65, 124, 219], "edeadlock": [65, 124, 219], "ebfont": [65, 124, 219], "enostr": [65, 124, 219], "enodata": [65, 124, 219, 299], "etim": [65, 124, 219], "enosr": [65, 124, 219], "enonet": [65, 124, 219], "enopkg": [65, 124, 219], "eremot": [65, 124, 219], "enolink": [65, 124, 219], "eadv": [65, 124, 219], "esrmnt": [65, 124, 219], "ecomm": [65, 124, 219], "eproto": [65, 124, 219], "emultihop": [65, 124, 219], "edotdot": [65, 124, 219], "ebadmsg": [65, 124, 219], "eoverflow": [65, 124, 219], "enotuniq": [65, 124, 219], "ebadfd": [65, 124, 219], "eremchg": [65, 124, 219], "elibacc": [65, 124, 219], "elibbad": [65, 124, 219], "elibscn": [65, 124, 219], "elibmax": [65, 124, 219], "elibexec": [65, 124, 219], "eilseq": [65, 124, 219], "erestart": [65, 124, 219], "estrpip": [65, 124, 219], "euser": [65, 124, 219], "enotsock": [65, 124, 219], "edestaddrreq": [65, 124, 219], "emsgsiz": [65, 124, 219], "eprototyp": [65, 124, 219], "enoprotoopt": [65, 124, 219], "eprotonosupport": [65, 124, 219], "esocktnosupport": [65, 124, 219], "eopnotsupp": [65, 124, 219], "epfnosupport": [65, 124, 219], "eafnosupport": [65, 124, 219], "eaddrinus": [65, 124, 219], "eaddrnotavail": [65, 124, 219], "enetdown": [65, 124, 219], "enetunreach": [65, 124, 219, 485], "enetreset": [65, 124, 219], "econnabort": [65, 124, 219, 220], "econnreset": [65, 124, 219, 220, 485], "enobuf": [65, 124, 139, 219], "eisconn": [65, 94, 124, 219], "enotconn": [65, 124, 219, 479], "eshutdown": [65, 124, 219, 220], "etoomanyref": [65, 124, 219], "etimedout": [65, 124, 219, 220, 472], "econnrefus": [65, 124, 219, 220], "ehostdown": [65, 124, 219], "ehostunreach": [65, 124, 219], "ealreadi": [65, 124, 219, 220], "einprogress": [65, 94, 124, 219, 220], "estal": [65, 124, 219], "euclean": [65, 124, 219], "enotnam": [65, 124, 219], "enavail": [65, 124, 219], "eisnam": [65, 124, 219], "eremoteio": [65, 124, 219], "edquot": [65, 124, 219], "foreign": [65, 110, 124, 173, 260, 338, 347], "dlls": [65, 84, 124, 299, 466, 471, 483, 485], "surpris": [65, 94, 95, 98, 100, 109, 112, 124, 189, 192, 200, 232, 254, 273, 281, 289, 314, 350, 374, 429, 436, 467, 468, 471, 475, 480, 482], "cdll": [65, 124, 182, 471, 483, 485], "oledl": [65, 124, 182, 472], "windll": [65, 124, 182, 472], "pydll": [65, 124, 182], "_handl": [65, 124, 182], "_name": [65, 103, 124, 182, 187, 203, 212], "libraryload": [65, 124, 182], "loadlibrari": [65, 124, 182], "_funcptr": [65, 124, 182], "restyp": [65, 124, 182, 471], "argtyp": [65, 124, 128, 182, 485], "errcheck": [65, 124, 182], "argumenterror": [65, 124, 126, 182, 485], "cfunctyp": [65, 124, 182], "winfunctyp": [65, 124, 182], "pyfunctyp": [65, 124, 182], "addressof": [65, 124, 148, 182], "byref": [65, 124, 182, 472], "create_string_buff": [65, 124, 148, 182, 471], "create_unicode_buff": [65, 124, 148, 182, 485], "dllcanunloadnow": [65, 124, 182], "dllgetclassobject": [65, 124, 182], "find_librari": [65, 124, 182, 481, 485], "find_msvcrt": [65, 124, 182], "formaterror": [65, 124, 182, 277, 291], "get_errno": [65, 124, 148, 182, 472], "get_last_error": [65, 124, 148, 182, 472], "memmov": [65, 124, 182, 472], "memset": [65, 124, 182, 485], "set_errno": [65, 124, 148, 182, 472], "set_last_error": [65, 124, 148, 182, 472], "string_at": [65, 124, 148, 182, 221, 478], "wstring_at": [65, 124, 148, 182], "_cdata": [65, 124, 182, 485], "from_buff": [65, 124, 182, 472, 485], "from_buffer_copi": [65, 124, 182, 472, 485], "from_address": [65, 124, 182], "from_param": [65, 124, 182], "in_dll": [65, 124, 182], "_b_base_": [65, 124, 182], "_b_needsfree_": [65, 124, 182], "_object": [65, 124, 182], "_simplecdata": [65, 124, 182], "c_byte": [65, 124, 182], "c_char": [65, 124, 182, 289], "c_char_p": [65, 124, 182, 471], "c_doubl": [65, 124, 182, 289, 471, 485], "c_longdoubl": [65, 124, 182, 485], "c_float": [65, 124, 182, 471], "c_int": [65, 124, 182, 289, 471], "c_int8": [65, 124, 182], "c_int16": [65, 124, 182], "c_int32": [65, 124, 182], "c_int64": [65, 124, 182], "c_long": [65, 124, 182, 351], "c_longlong": [65, 124, 182], "c_short": [65, 124, 182, 289], "c_size_t": [65, 124, 182], "c_ssize_t": [65, 124, 182, 477], "c_ubyt": [65, 124, 182], "c_uint": [65, 124, 182], "c_uint8": [65, 124, 182], "c_uint16": [65, 124, 182], "c_uint32": [65, 124, 182], "c_uint64": [65, 124, 182], "c_ulong": [65, 124, 182], "c_ulonglong": [65, 124, 182], "c_ushort": [65, 124, 182], "c_void_p": [65, 124, 182], "c_wchar": [65, 124, 182], "c_wchar_p": [65, 124, 182, 485], "c_bool": [65, 124, 182, 472], "hresult": [65, 124, 182], "py_object": [65, 124, 182, 471], "bigendianstructur": [65, 124, 182, 351, 485], "littleendianstructur": [65, 124, 182, 485], "_fields_": [65, 124, 182, 289, 351, 485], "_pack_": [65, 124, 182], "_anonymous_": [65, 124, 182, 485], "_length_": [65, 124, 182, 485], "_type_": [65, 124, 182], "_pointer": [65, 124, 182], "active_count": [65, 170, 254, 289, 370, 472, 476, 485], "current_thread": [65, 94, 170, 289, 345, 370, 476, 485], "excepthook": [65, 148, 159, 170, 321, 359, 367, 370, 454, 467, 476, 483, 484, 485], "__excepthook__": [65, 170, 321, 359, 370, 454, 476, 485], "get_id": [65, 121, 170, 270, 339, 358, 370, 371, 478], "get_native_id": [65, 121, 170, 370, 483, 485], "main_thread": [65, 170, 370, 479], "settrac": [65, 148, 150, 170, 289, 321, 359, 370, 454, 468, 476, 485], "gettrac": [65, 170, 321, 359, 370, 454, 472, 476, 485], "setprofil": [65, 148, 170, 289, 321, 359, 370, 454, 468, 476, 485], "getprofil": [65, 170, 321, 359, 370, 454, 472, 476, 485], "stack_siz": [65, 121, 170, 370, 471, 485], "timeout_max": [65, 121, 170, 370], "setnam": [65, 170, 370, 476, 485], "native_id": [65, 170, 370, 483, 485], "is_al": [65, 170, 289, 370, 472, 484, 485], "daemon": [65, 108, 109, 170, 275, 289, 322, 342, 344, 345, 370, 371, 406, 469, 472, 476, 478, 482, 484, 485], "isdaemon": [65, 170, 370, 472, 476, 485], "setdaemon": [65, 170, 370, 472, 476, 485], "rlock": [65, 170, 175, 289, 472, 476, 477, 480, 485], "wait_for": [65, 131, 140, 142, 143, 144, 170, 289, 370, 483, 484, 485], "notify_al": [65, 143, 170, 370, 476, 485], "semaphor": [65, 94, 106, 121, 131, 170, 219, 289, 299, 359, 367, 456, 472, 477, 478, 483, 484, 485], "boundedsemaphor": [65, 131, 170, 289, 370, 478, 483, 485], "is_set": [65, 143, 170, 370, 476, 485], "timer": [65, 102, 106, 170, 191, 219, 221, 289, 334, 339, 371, 372, 374, 381, 388, 455, 468, 469, 472, 478, 480, 481, 482, 485], "barrier": [65, 170, 289, 477], "n_wait": [65, 170, 370], "brokenbarriererror": [65, 170, 370, 477], "exchang": [65, 82, 112, 170, 182, 219, 242, 243, 284, 299, 348, 363, 370, 472, 473, 477, 478, 485], "synchron": [65, 121, 130, 170, 175, 184, 190, 192, 219, 258, 264, 284, 299, 336, 339, 345, 348, 367, 370, 374, 393, 402, 432, 456, 472, 477, 480, 482, 485], "pool": [65, 83, 94, 131, 136, 170, 172, 230, 267, 290, 299, 467, 469, 472, 473, 477, 478, 479, 481, 485], "worker": [65, 69, 109, 140, 169, 170, 172, 239, 322, 370, 471, 472, 473, 480, 484, 485], "pid": [65, 106, 133, 138, 142, 148, 170, 173, 284, 289, 299, 305, 315, 328, 344, 355, 367, 471, 473, 484, 485], "authkey": [65, 170, 289, 290], "processerror": [65, 170, 289], "buffertooshort": [65, 170, 289], "authenticationerror": [65, 170, 289], "qsize": [65, 140, 170, 289, 322], "put_nowait": [65, 109, 140, 170, 275, 289, 322], "get_nowait": [65, 140, 170, 267, 289, 322], "join_thread": [65, 170, 193, 289, 367, 485], "cancel_join_thread": [65, 170, 289], "simplequeu": [65, 170, 275, 289, 351, 482, 484, 485], "joinablequeu": [65, 170, 289, 480, 485], "task_don": [65, 140, 170, 289, 322, 471, 480, 485], "active_children": [65, 170, 289], "current_process": [65, 109, 170, 289], "parent_process": [65, 170, 289, 485], "freeze_support": [65, 170, 289], "get_all_start_method": [65, 170, 289, 479, 485], "get_context": [65, 170, 289, 479], "get_start_method": [65, 170, 289, 479], "set_execut": [65, 69, 170, 289, 425], "set_start_method": [65, 170, 289, 479], "recv": [65, 109, 112, 133, 145, 170, 289, 333, 335, 339, 344, 345, 348, 357, 367, 374, 473, 480, 485], "poll": [65, 94, 129, 133, 138, 142, 145, 170, 289, 299, 335, 339, 345, 348, 349, 355, 470, 472, 477, 478, 480, 484, 485], "send_byt": [65, 170, 289], "recv_byt": [65, 170, 289], "recv_bytes_into": [65, 170, 289], "primit": [65, 85, 94, 95, 121, 130, 131, 141, 170, 182, 183, 193, 264, 305, 314, 325, 334, 335, 339, 348, 370, 388, 456, 476, 478, 479, 482, 485], "sharedctyp": [65, 170, 480, 485], "rawarray": [65, 170, 289], "rawvalu": [65, 170, 289], "basemanag": [65, 170, 289, 290, 485], "get_serv": [65, 170, 289], "syncmanag": [65, 170, 289, 485], "remot": [65, 108, 109, 116, 127, 129, 133, 139, 145, 170, 176, 219, 249, 255, 273, 274, 275, 294, 311, 341, 342, 344, 348, 364, 380, 399, 407, 409, 413, 418, 422, 423, 468, 477, 480, 485], "baseproxi": [65, 170, 289, 485], "_callmethod": [65, 170, 289], "_getvalu": [65, 170, 289], "apply_async": [65, 170, 289, 472], "map_async": [65, 170, 289, 472, 478], "imap": [65, 90, 118, 170, 201, 255, 289, 311, 348, 398, 469, 470, 483, 485], "imap_unord": [65, 170, 289, 485], "starmap_async": [65, 170, 289, 478], "asyncresult": [65, 170, 289], "deliver_challeng": [65, 170, 289], "answer_challeng": [65, 170, 289], "last_accept": [65, 170, 289], "get_logg": [65, 170, 289], "log_to_stderr": [65, 170, 289, 485], "threadpool": [65, 144, 170, 289, 485], "spawn": [65, 75, 109, 131, 136, 138, 142, 143, 148, 170, 299, 315, 341, 345, 367, 370, 395, 479, 483, 484, 485], "forkserv": [65, 170, 479, 485], "shared_memori": [65, 170, 260, 483, 485], "sharedmemori": [65, 170, 289, 290, 485], "sharedmemorymanag": [65, 170, 290, 485], "shareablelist": [65, 170, 290, 485], "shm": [65, 170, 290, 485], "executor": [65, 109, 132, 133, 170, 477, 480, 484, 485], "submit": [65, 102, 109, 115, 144, 158, 170, 172, 254, 289, 466, 473, 477, 478, 480, 481, 482, 483, 485], "threadpoolexecutor": [65, 94, 132, 133, 170, 289, 370, 477, 480, 481, 482, 483, 484, 485], "processpoolexecutor": [65, 94, 132, 133, 170, 289, 370, 477, 480, 482, 483, 484, 485], "add_done_callback": [65, 135, 144, 170, 172, 482, 485], "set_running_or_notify_cancel": [65, 170, 172], "set_result": [65, 135, 139, 144, 170, 172, 485], "set_except": [65, 132, 135, 144, 170, 172, 481, 485], "as_complet": [65, 131, 135, 144, 170, 172, 476, 483, 485], "cancellederror": [65, 131, 134, 135, 144, 170, 172, 483, 485], "brokenexecutor": [65, 170, 172], "invalidstateerror": [65, 134, 135, 144, 170, 172, 485], "brokenthreadpool": [65, 170, 172], "brokenprocesspool": [65, 170, 172], "completedprocess": [65, 170, 355, 480, 485], "returncod": [65, 138, 139, 142, 170, 355, 480, 483, 485], "check_returncod": [65, 170, 355], "subprocesserror": [65, 170, 355, 485], "timeoutexpir": [65, 170, 355], "calledprocesserror": [65, 170, 355, 473, 480, 485], "communic": [65, 78, 109, 112, 133, 139, 142, 145, 170, 200, 219, 249, 254, 260, 275, 289, 290, 299, 305, 311, 315, 339, 341, 344, 345, 348, 355, 370, 381, 411, 423, 466, 470, 471, 472, 480, 482, 483, 485], "send_sign": [65, 136, 139, 142, 170, 355, 472, 485], "startupinfo": [65, 170, 355, 470, 482, 485], "dwflag": [65, 170, 355], "hstdinput": [65, 170, 355], "hstdoutput": [65, 170, 355], "hstderror": [65, 170, 355], "wshowwindow": [65, 170, 355], "lpattributelist": [65, 170, 355, 482], "std_input_handl": [65, 170, 355], "std_output_handl": [65, 170, 355], "std_error_handl": [65, 170, 355], "sw_hide": [65, 170, 355], "startf_usestdhandl": [65, 170, 355], "startf_useshowwindow": [65, 170, 355], "create_new_consol": [65, 170, 355], "create_new_process_group": [65, 142, 170, 355], "above_normal_priority_class": [65, 170, 355], "below_normal_priority_class": [65, 170, 355], "high_priority_class": [65, 170, 355], "idle_priority_class": [65, 170, 355], "normal_priority_class": [65, 170, 355], "realtime_priority_class": [65, 170, 355], "create_no_window": [65, 170, 355], "detached_process": [65, 170, 355], "create_default_error_mod": [65, 170, 355], "create_breakaway_from_job": [65, 170, 355], "check_cal": [65, 170, 355], "check_output": [65, 170, 193, 200, 355, 473, 479, 485], "sh": [65, 94, 170, 307, 315, 337, 466, 485], "pipelin": [65, 170, 260, 357, 466, 485], "popen2": [65, 170, 470, 472], "popen3": [65, 170], "getstatusoutput": [65, 170, 355, 479], "getoutput": [65, 170, 355], "enterab": [65, 170, 331, 478], "lifoqueu": [65, 131, 140, 170, 322, 351, 472, 485], "priorityqueu": [65, 131, 140, 170, 322, 351, 472, 485], "old_valu": [65, 170, 176], "copy_context": [65, 170, 176], "locktyp": [65, 121, 170], "start_new_thread": [65, 121, 170, 485], "interrupt_main": [65, 121, 170, 476, 485], "allocate_lock": [65, 121, 170], "interprocess": [65, 139, 260, 289, 344], "create_task": [65, 131, 132, 133, 135, 136, 140, 143, 144, 480, 482, 483, 485], "shield": [65, 131, 476, 483, 485], "to_thread": [65, 131, 144, 484, 485], "run_coroutine_threadsaf": [65, 131, 132, 144, 476, 480, 481, 485], "current_task": [65, 131, 144, 482, 484, 485], "all_task": [65, 131, 144, 482, 484, 485], "remove_done_callback": [65, 135, 144, 485], "get_stack": [65, 144, 150, 191, 485], "print_stack": [65, 144, 273, 321, 385, 480, 485], "get_coro": [65, 144, 483, 485], "get_nam": [65, 144, 270, 358, 483, 485], "set_nam": [65, 103, 133, 144, 483, 485], "iscoroutin": [65, 135, 144, 261, 321, 480, 485], "iscoroutinefunct": [65, 144, 261, 321, 393, 480, 485], "open_connect": [65, 131, 133, 139, 141, 480, 482, 485], "start_serv": [65, 131, 133, 139, 141, 176, 370, 482, 485], "open_unix_connect": [65, 131, 141], "start_unix_serv": [65, 131, 133, 141], "readexact": [65, 141, 481, 485], "readuntil": [65, 141, 480, 481, 485], "at_eof": [65, 141], "can_write_eof": [65, 136, 139, 141], "write_eof": [65, 136, 139, 141, 348, 485], "transport": [65, 130, 133, 135, 136, 141, 142, 176, 201, 205, 208, 213, 219, 323, 342, 348, 422, 423, 468, 480, 481, 482, 485], "get_extra_info": [65, 136, 139, 141, 176, 483, 485], "drain": [65, 139, 141, 348, 477, 485], "is_clos": [65, 133, 136, 139, 141, 480, 481, 482, 485], "wait_clos": [65, 133, 141, 482, 485], "tcp": [65, 90, 94, 108, 109, 112, 131, 133, 136, 275, 289, 342, 344, 345, 348, 367, 472, 473, 481, 482, 485], "create_subprocess_exec": [65, 131, 133, 138, 142, 355, 483, 485], "create_subprocess_shel": [65, 131, 133, 142, 483, 485], "maxsiz": [65, 95, 100, 103, 118, 140, 166, 232, 233, 267, 289, 309, 321, 322, 351, 359, 367, 374, 432, 454, 474, 477, 483, 485], "lifo": [65, 131, 166, 322, 351, 392], "queueempti": [65, 140], "queueful": [65, 140], "sendfilenotavailableerror": [65, 133, 134], "incompletereaderror": [65, 134, 141, 485], "limitoverrunerror": [65, 134, 141, 485], "get_running_loop": [65, 133, 135, 136, 139, 141, 144, 476, 482, 485], "get_event_loop": [65, 133, 136, 138, 476, 480, 481, 482, 485], "set_event_loop": [65, 133, 136, 137, 138, 483], "new_event_loop": [65, 133, 136, 138, 483], "run_until_complet": [65, 133, 136, 480, 481, 483, 485], "run_forev": [65, 133, 136, 485], "is_run": [65, 133, 136], "shutdown_asyncgen": [65, 133, 136, 359, 434, 481, 485], "shutdown_default_executor": [65, 133, 144, 484, 485], "call_soon": [65, 132, 135, 136, 139, 141, 482, 485], "call_soon_threadsaf": [65, 132, 133, 136, 482, 485], "call_lat": [65, 136, 482, 485], "call_at": [65, 132, 133, 136, 482], "create_futur": [65, 133, 135, 136, 139, 480, 481, 485], "set_task_factori": [65, 133, 136, 480, 485], "get_task_factori": [65, 133, 136, 480, 485], "create_connect": [65, 133, 136, 139, 141, 344, 348, 472, 473, 477, 480, 482, 483, 485], "create_datagram_endpoint": [65, 133, 136, 139, 481, 482, 483, 484, 485], "create_unix_connect": [65, 133, 136, 137, 139, 141, 485], "create_serv": [65, 133, 136, 139, 141, 344, 480, 481, 482, 483, 485], "create_unix_serv": [65, 133, 136, 137, 139, 141, 482, 485], "connect_accepted_socket": [65, 133, 136, 139, 476, 481, 485], "tls": [65, 136, 230, 249, 260, 266, 275, 311, 333, 342, 344, 367, 460, 464, 468, 472, 473, 476, 477, 479, 480, 481, 482, 483, 485], "start_tl": [65, 133, 136, 482, 485], "add_read": [65, 133, 136, 137, 139, 141, 485], "remove_read": [65, 133, 136], "add_writ": [65, 133, 136, 137, 485], "remove_writ": [65, 133, 136], "sock_recv": [65, 133, 136, 482, 485], "sock_recv_into": [65, 133, 136, 482, 485], "sock_sendal": [65, 133, 136, 482, 485], "sock_connect": [65, 133, 136, 480, 485], "sock_accept": [65, 133, 136, 482, 485], "sock_sendfil": [65, 133, 136, 482, 485], "dns": [65, 109, 136, 164, 265, 275, 344, 348, 480], "getaddrinfo": [65, 115, 133, 136, 148, 344, 430, 480, 481, 482, 485], "getnameinfo": [65, 133, 136, 148, 344, 430, 482, 485], "connect_read_pip": [65, 133, 136, 137, 139, 142, 485], "connect_write_pip": [65, 133, 136, 137, 139, 142, 485], "add_signal_handl": [65, 133, 136, 137, 485], "remove_signal_handl": [65, 133, 136, 137], "run_in_executor": [65, 132, 133, 136, 144, 484, 485], "set_default_executor": [65, 133, 136, 483, 485], "set_exception_handl": [65, 133, 136], "get_exception_handl": [65, 133, 136, 480, 481, 485], "default_exception_handl": [65, 133, 136], "call_exception_handl": [65, 133, 136], "get_debug": [65, 133, 136, 234, 321, 480], "set_debug": [65, 132, 133, 136, 234, 321, 480], "subprocess_exec": [65, 133, 136, 137, 138, 142, 485], "subprocess_shel": [65, 133, 136, 137, 139, 142], "timerhandl": [65, 133, 485], "get_loop": [65, 133, 135, 482, 485], "serve_forev": [65, 133, 139, 141, 176, 252, 262, 289, 339, 345, 411, 423, 424, 471, 472, 478, 482, 485], "is_serv": [65, 133, 482, 485], "selectoreventloop": [65, 133, 137, 138, 142, 485], "proactoreventloop": [65, 133, 137, 138, 142, 483, 485], "abstracteventloop": [65, 133, 138, 484, 485], "hello": [65, 83, 85, 89, 95, 96, 109, 118, 120, 127, 135, 139, 141, 142, 144, 152, 158, 182, 190, 233, 237, 242, 247, 284, 289, 294, 297, 305, 307, 310, 344, 345, 348, 351, 365, 367, 369, 370, 373, 383, 390, 392, 393, 411, 439, 444, 446, 447, 450, 465, 477, 479, 480, 483, 484, 485], "world": [65, 69, 70, 83, 86, 89, 95, 102, 107, 109, 112, 120, 135, 139, 141, 144, 152, 158, 175, 182, 189, 233, 237, 242, 255, 263, 284, 289, 297, 298, 305, 307, 316, 331, 344, 345, 348, 351, 365, 367, 369, 370, 373, 383, 388, 392, 411, 414, 430, 439, 444, 447, 450, 474, 480, 481, 485], "sigterm": [65, 139, 142, 289, 339, 355, 472, 485], "isfutur": [65, 135, 485], "ensure_futur": [65, 135, 144, 476, 480, 481, 485], "wrap_futur": [65, 135, 476, 485], "basetransport": [65, 139, 141, 483], "writetransport": [65, 133, 139, 485], "readtransport": [65, 133, 139, 482, 485], "datagramtransport": [65, 139, 485], "subprocesstransport": [65, 133, 139], "set_protocol": [65, 136, 139, 485], "get_protocol": [65, 136, 139, 485], "is_read": [65, 136, 139, 482, 485], "pause_read": [65, 136, 139, 482, 485], "resume_read": [65, 136, 139, 482, 485], "get_write_buffer_s": [65, 136, 139], "get_write_buffer_limit": [65, 136, 139, 480, 485], "set_write_buffer_limit": [65, 136, 139], "datagram": [65, 133, 136, 345, 348, 456, 485], "sendto": [65, 136, 139, 148, 344, 345, 480, 485], "get_pid": [65, 136, 139], "get_pipe_transport": [65, 136, 139], "get_returncod": [65, 136, 139], "baseprotocol": [65, 139], "bufferedprotocol": [65, 139, 482, 483, 485], "datagramprotocol": [65, 139], "subprocessprotocol": [65, 133], "connection_mad": [65, 133, 136, 139, 485], "connection_lost": [65, 136, 139, 485], "pause_writ": [65, 136, 139], "resume_writ": [65, 136, 139], "data_receiv": [65, 136, 139, 485], "eof_receiv": [65, 136, 139], "get_buff": [65, 136, 139, 357, 412], "buffer_upd": [65, 136, 139], "datagram_receiv": [65, 136, 139], "error_receiv": [65, 136, 139], "pipe_data_receiv": [65, 136, 139, 485], "pipe_connection_lost": [65, 136, 139], "process_exit": [65, 136, 139, 485], "udp": [65, 108, 133, 136, 275, 344, 345, 367, 473, 481, 482, 483, 484, 485], "get_event_loop_polici": [65, 136, 138], "set_event_loop_polici": [65, 133, 136, 138], "abstracteventlooppolici": [65, 136, 138], "get_child_watch": [65, 138], "set_child_watch": [65, 137, 138], "defaulteventlooppolici": [65, 133, 138], "windowsselectoreventlooppolici": [65, 138, 482, 485], "windowsproactoreventlooppolici": [65, 138, 482, 485], "watcher": [65, 142, 484, 485], "abstractchildwatch": [65, 138], "add_child_handl": [65, 138], "remove_child_handl": [65, 138], "attach_loop": [65, 138], "threadedchildwatch": [65, 138, 142], "multiloopchildwatch": [65, 138], "safechildwatch": [65, 138], "fastchildwatch": [65, 138], "pidfdchildwatch": [65, 138, 484, 485], "multithread": [65, 133, 142, 144, 242, 272, 289, 355, 364, 411, 469, 484, 485], "herror": [65, 344], "gaierror": [65, 344], "af_unix": [65, 133, 137, 289, 344, 345, 485], "af_inet6": [65, 133, 344, 485], "sock_stream": [65, 109, 112, 133, 145, 275, 344, 345, 348, 367, 473, 482], "sock_dgram": [65, 133, 275, 344, 345, 473], "sock_raw": [65, 344], "sock_rdm": [65, 344], "sock_seqpacket": [65, 344], "sock_cloexec": [65, 344, 482, 485], "sock_nonblock": [65, 344, 482, 485], "somaxconn": [65, 344, 480], "af_can": [65, 344, 485], "pf_can": [65, 344, 478], "can_bcm": [65, 344, 479], "can_raw_fd_fram": [65, 344, 480, 485], "can_raw_join_filt": [65, 344, 484, 485], "can_isotp": [65, 344, 485], "can_j1939": [65, 344, 484, 485], "af_packet": [65, 344, 485], "pf_packet": [65, 344], "af_rd": [65, 344], "pf_rds": [65, 344, 478], "sol_rd": [65, 344], "sio_rcval": [65, 344], "sio_keepalive_v": [65, 344], "sio_loopback_fast_path": [65, 344, 481, 485], "af_alg": [65, 344, 481, 485], "sol_alg": [65, 344, 481], "af_vsock": [65, 344, 482, 485], "ioctl_vm_sockets_get_local_cid": [65, 344], "af_link": [65, 344, 479], "has_ipv6": [65, 344], "bdaddr_ani": [65, 344], "bdaddr_loc": [65, 344], "hci_filt": [65, 344], "hci_time_stamp": [65, 344], "hci_data_dir": [65, 344], "af_qipcrtr": [65, 344, 485], "socketpair": [65, 133, 139, 141, 339, 344, 470, 482, 485], "has_dualstack_ipv6": [65, 344, 483, 485], "fromfd": [65, 334, 344], "fromshar": [65, 344, 482], "sockettyp": [65, 344], "getfqdn": [65, 341, 342, 344], "gethostbynam": [65, 148, 344], "gethostbyname_ex": [65, 344, 485], "gethostnam": [65, 109, 112, 148, 299, 344], "gethostbyaddr": [65, 148, 299, 344, 485], "getprotobynam": [65, 344], "getservbynam": [65, 148, 344, 485], "getservbyport": [65, 148, 344, 470, 485], "ntohl": [65, 112, 344], "ntoh": [65, 112, 344, 476, 482, 485], "htonl": [65, 112, 344], "hton": [65, 112, 344, 476, 482, 485], "inet_aton": [65, 344, 483, 484, 485], "inet_ntoa": [65, 344], "inet_pton": [65, 133, 265, 344, 479, 483, 484, 485], "inet_ntop": [65, 344, 479], "cmsg_len": [65, 344, 485], "cmsg_space": [65, 344, 485], "getdefaulttimeout": [65, 344], "setdefaulttimeout": [65, 115, 344], "sethostnam": [65, 148, 344, 478], "if_nameindex": [65, 344, 483, 485], "if_nametoindex": [65, 344, 483, 485], "if_indextonam": [65, 344, 483, 485], "send_fd": [65, 344, 484, 485], "recv_fd": [65, 344, 484], "connect_ex": [65, 94, 344, 466], "getpeernam": [65, 139, 176, 341, 344, 348], "getsocknam": [65, 139, 141, 344, 348, 485], "getsockopt": [65, 139, 344, 348, 473, 481], "getblock": [65, 344, 482, 485], "gettimeout": [65, 344, 348], "ioctl": [65, 127, 148, 260, 301, 344, 395, 470, 472, 481, 485], "recvfrom": [65, 344, 374, 480, 485], "recvmsg": [65, 344, 478, 480], "recvmsg_into": [65, 344, 478], "recvfrom_into": [65, 344, 471, 473], "recv_into": [65, 133, 344, 348, 471, 473, 485], "sendal": [65, 133, 344, 345, 348, 480, 485], "sendmsg": [65, 148, 344, 478, 480], "sendmsg_afalg": [65, 344, 481], "setblock": [65, 112, 299, 335, 344, 348, 485], "settimeout": [65, 262, 344, 348, 399, 469, 485], "setsockopt": [65, 344, 348, 473, 481], "proto": [65, 133, 141, 306, 344, 390, 399], "create_default_context": [65, 133, 230, 249, 255, 311, 342, 348, 399, 473, 479, 485], "sslerror": [65, 348, 477], "sslzeroreturnerror": [65, 348], "sslwantreaderror": [65, 348, 480, 485], "sslwantwriteerror": [65, 348, 480, 485], "sslsyscallerror": [65, 348], "ssleoferror": [65, 348, 485], "sslcertverificationerror": [65, 348, 482, 485], "verify_cod": [65, 348], "verify_messag": [65, 348], "certificateerror": [65, 348], "rand_byt": [65, 348, 478], "rand_pseudo_byt": [65, 348, 476, 478], "rand_status": [65, 348, 485], "rand_add": [65, 348, 485], "match_hostnam": [65, 348, 476, 477, 479, 480, 482, 485], "cert_time_to_second": [65, 348, 480, 485], "get_server_certif": [65, 348, 476, 478, 485], "der_cert_to_pem_cert": [65, 348], "pem_cert_to_der_cert": [65, 348], "get_default_verify_path": [65, 348, 479], "enum_certif": [65, 348, 479, 485], "enum_crl": [65, 348, 479, 485], "wrap_socket": [65, 348, 472, 473, 476, 477, 482, 485], "cert_non": [65, 348, 485], "cert_opt": [65, 348, 485], "cert_requir": [65, 348, 485], "verifymod": [65, 348], "verify_default": [65, 348, 479], "verify_crl_check_leaf": [65, 348, 479], "verify_crl_check_chain": [65, 348, 479], "verify_x509_strict": [65, 348, 479], "verify_allow_proxy_cert": [65, 348, 485], "verify_x509_trusted_first": [65, 348], "verify_x509_partial_chain": [65, 348, 476], "verifyflag": [65, 348], "protocol_tl": [65, 348, 476, 485], "protocol_tls_cli": [65, 348, 476, 485], "protocol_tls_serv": [65, 348, 476, 485], "protocol_sslv23": [65, 230, 348, 476, 485], "protocol_sslv2": [65, 348, 476], "protocol_sslv3": [65, 348, 476, 485], "protocol_tlsv1": [65, 348, 476], "protocol_tlsv1_1": [65, 348, 476, 479], "protocol_tlsv1_2": [65, 348, 476, 479, 485], "op_al": [65, 348], "op_no_sslv2": [65, 348, 476, 477, 485], "op_no_sslv3": [65, 348, 476, 485], "op_no_tlsv1": [65, 348, 476], "op_no_tlsv1_1": [65, 348, 476], "op_no_tlsv1_2": [65, 348, 476], "op_no_tlsv1_3": [65, 348, 476, 485], "op_no_renegoti": [65, 348, 485], "op_cipher_server_prefer": [65, 348, 478, 485], "op_single_dh_us": [65, 348, 485], "op_single_ecdh_us": [65, 348, 485], "op_enable_middlebox_compat": [65, 348, 485], "op_no_compress": [65, 348, 478, 485], "op_no_ticket": [65, 348], "op_ignore_unexpected_eof": [65, 348, 476, 485], "has_alpn": [65, 348, 480], "has_never_check_common_nam": [65, 348], "has_ecdh": [65, 348], "has_sni": [65, 230, 249, 255, 294, 311, 342, 348, 399], "has_npn": [65, 348], "has_sslv2": [65, 348], "has_sslv3": [65, 348], "has_tlsv1": [65, 348], "has_tlsv1_1": [65, 348, 482], "has_tlsv1_2": [65, 348], "has_tlsv1_3": [65, 348], "channel_binding_typ": [65, 348], "openssl_vers": [65, 348, 473, 477], "openssl_version_info": [65, 348, 473, 477], "openssl_version_numb": [65, 348, 473, 477], "alert_description_handshake_failur": [65, 348], "alert_description_internal_error": [65, 348], "alertdescript": [65, 348], "server_auth": [65, 348, 479], "client_auth": [65, 348, 479], "sslerrornumb": [65, 348], "tlsversion": [65, 348, 485], "minimum_support": [65, 348], "maximum_support": [65, 348], "sslv3": [65, 348, 478, 480, 485], "tlsv1": [65, 348, 479, 485], "tlsv1_1": [65, 348], "tlsv1_2": [65, 348], "tlsv1_3": [65, 348], "sslsocket": [65, 139, 348, 473, 476, 479, 480, 482, 484, 485], "do_handshak": [65, 348, 479, 480], "getpeercert": [65, 139, 348, 472, 479, 485], "cipher": [65, 139, 173, 179, 242, 460, 473, 476, 477, 478, 480, 481, 482, 485], "shared_ciph": [65, 348, 480, 485], "get_channel_bind": [65, 348, 478], "selected_alpn_protocol": [65, 348, 480], "selected_npn_protocol": [65, 348, 476], "unwrap": [65, 98, 261, 262, 321, 348, 398, 479, 485], "verify_client_post_handshak": [65, 348, 483, 485], "server_sid": [65, 133, 348], "server_hostnam": [65, 133, 141, 348, 477, 482, 485], "session": [65, 95, 103, 108, 109, 129, 162, 175, 200, 220, 230, 249, 250, 289, 299, 311, 315, 326, 335, 342, 359, 399, 440, 454, 459, 465, 470, 478, 479, 481, 483, 485], "session_reus": [65, 348], "sslcontext": [65, 133, 139, 230, 249, 255, 275, 294, 311, 342, 348, 399, 423, 473, 476, 477, 478, 479, 480, 481, 482, 485], "cert_store_stat": [65, 348, 479], "load_cert_chain": [65, 230, 249, 255, 311, 342, 348, 399, 478], "load_default_cert": [65, 348, 479, 485], "load_verify_loc": [65, 348, 399, 479, 485], "get_ca_cert": [65, 348, 479], "get_ciph": [65, 348, 481, 485], "set_default_verify_path": [65, 348, 479, 485], "set_ciph": [65, 348], "set_alpn_protocol": [65, 249, 348, 399, 480], "set_npn_protocol": [65, 348, 476, 478], "sni_callback": [65, 348, 485], "set_servername_callback": [65, 348, 479], "load_dh_param": [65, 348, 478, 485], "set_ecdh_curv": [65, 348, 478], "sslsocket_class": [65, 348], "wrap_bio": [65, 348, 480, 482, 485], "sslobject_class": [65, 348], "session_stat": [65, 348], "check_hostnam": [65, 230, 249, 255, 294, 311, 342, 348, 399, 417, 481, 485], "keylog_filenam": [65, 348], "maximum_vers": [65, 348, 476, 482, 485], "minimum_vers": [65, 348, 476, 482, 485], "num_ticket": [65, 348, 485], "post_handshake_auth": [65, 249, 348, 483, 485], "hostname_checks_common_nam": [65, 348, 482, 485], "security_level": [65, 348, 485], "verify_flag": [65, 348, 479], "verify_mod": [65, 348, 485], "ca": [65, 102, 111, 168, 230, 249, 255, 267, 311, 342, 399, 430, 472, 473, 479, 485], "sslobject": [65, 139, 348, 390, 480, 482, 485], "memorybio": [65, 348, 480, 485], "sslsession": [65, 348, 481, 485], "ticket_lifetime_hint": [65, 348], "has_ticket": [65, 348], "devpol": [65, 334, 335, 478, 479, 480, 485], "epol": [65, 335, 472, 479, 480, 484, 485], "kqueue": [65, 328, 335, 472, 480, 485], "kevent": 65, "pipe_buf": [65, 334, 477, 485], "edg": [65, 110, 182, 183, 200, 208, 232, 239, 367, 369, 388, 478, 479, 485], "fflag": [65, 334], "udata": [65, 334], "multiplex": [65, 112, 260, 266, 334, 348, 479], "selectorkey": [65, 335], "fileobj": [65, 241, 335, 339, 363, 478, 485], "baseselector": [65, 335, 485], "get_key": [65, 335, 485], "get_map": [65, 335], "defaultselector": [65, 335, 339, 485], "selectselector": [65, 133, 137, 335], "pollselector": [65, 137, 335, 482], "epollselector": [65, 335, 482, 485], "devpollselector": [65, 335, 480, 482], "kqueueselector": [65, 137, 335, 485], "sigabrt": [65, 194, 221, 299, 339, 459, 478, 485], "sigalrm": [65, 339, 485], "sigbreak": [65, 339], "sigbus": [65, 194, 221, 339, 459, 478], "sigchld": [65, 138, 339], "sigcld": [65, 339], "sigcont": [65, 299, 339], "sigfp": [65, 194, 221, 339, 459, 478, 485], "sighup": [65, 339, 485], "sigil": [65, 194, 221, 339, 459, 478], "sigkil": [65, 139, 142, 289, 299, 339, 355, 470, 482, 485], "sigpip": [65, 355], "sigsegv": [65, 194, 221, 339, 459, 478, 485], "sigusr1": [65, 339], "sigusr2": [65, 339], "sigwinch": [65, 183, 339, 485], "ctrl_c_event": [65, 142, 299, 339, 355, 473], "ctrl_break_ev": [65, 142, 299, 339, 355, 473], "nsig": [65, 339], "itimer_r": [65, 339], "itimer_virtu": [65, 339], "itimer_prof": [65, 339], "sig_block": [65, 339], "sig_unblock": [65, 339], "sig_setmask": [65, 339], "itimererror": [65, 339], "alarm": [65, 314, 339, 479, 485], "getsign": [65, 339, 485], "strsignal": [65, 339, 485], "valid_sign": [65, 339, 485], "paus": [65, 102, 104, 139, 142, 183, 301, 303, 339, 434, 470, 471, 485], "raise_sign": [65, 121, 339, 485], "pidfd_send_sign": [65, 339, 484, 485], "pthread_kil": [65, 148, 299, 339, 478], "pthread_sigmask": [65, 339, 478], "setitim": [65, 339, 472, 485], "getitim": [65, 339, 472], "siginterrupt": [65, 339, 472, 478, 485], "sigpend": [65, 339, 478], "sigwait": [65, 339, 478], "sigwaitinfo": [65, 339, 478, 480, 485], "sigtimedwait": [65, 339, 478, 480, 485], "madvis": [65, 284, 483, 485], "madv_": 65, "madv_norm": [65, 284], "madv_random": [65, 284], "madv_sequenti": [65, 284], "madv_willne": [65, 284], "madv_dontne": [65, 284], "madv_remov": [65, 284], "madv_dontfork": [65, 284], "madv_dofork": [65, 284], "madv_hwpoison": [65, 284], "madv_merg": [65, 284], "madv_unmerg": [65, 284], "madv_soft_offlin": [65, 284], "madv_hugepag": [65, 284], "madv_nohugepag": [65, 284], "madv_dontdump": [65, 284], "madv_dodump": [65, 284], "madv_fre": [65, 284], "madv_nosync": [65, 284], "madv_autosync": [65, 284], "madv_nocor": [65, 284], "madv_cor": [65, 284], "madv_protect": [65, 284], "madv_free_reus": [65, 284], "map_": 65, "map_shar": [65, 284], "map_priv": [65, 284], "map_denywrit": [65, 284], "map_execut": [65, 284], "map_anon": [65, 284], "map_anonym": [65, 284], "map_popul": [65, 284, 485], "mime": [65, 97, 111, 149, 152, 158, 164, 203, 207, 209, 210, 211, 212, 214, 215, 252, 260, 278, 291, 359, 411, 436, 455, 468, 470, 473, 476, 477, 479, 480, 481, 482, 485], "emailmessag": [65, 201, 203, 204, 207, 208, 209, 212, 214, 215, 249, 291, 399, 479, 481, 485], "as_str": [65, 201, 203, 208, 209, 212, 291, 479, 485], "as_byt": [65, 201, 203, 207, 208, 212, 215, 259, 291, 479], "is_multipart": [65, 201, 203, 206, 212, 214, 291, 485], "set_unixfrom": [65, 201, 203, 212, 291], "get_unixfrom": [65, 201, 203, 212, 291], "get_al": [65, 201, 203, 212, 216, 262, 291, 411, 485], "add_head": [65, 201, 203, 212, 213, 262, 291, 393, 399, 411], "replace_head": [65, 201, 203, 212, 291], "get_content_typ": [65, 201, 203, 207, 212, 291], "get_content_maintyp": [65, 201, 203, 207, 212, 291], "get_content_subtyp": [65, 201, 203, 212, 291], "get_default_typ": [65, 201, 203, 212, 291], "set_default_typ": [65, 201, 203, 212, 291], "set_param": [65, 201, 203, 212, 291, 479], "del_param": [65, 201, 203, 212, 291], "get_filenam": [65, 201, 203, 207, 212, 258, 286, 291, 427, 479], "get_boundari": [65, 201, 203, 212, 291], "set_boundari": [65, 201, 203, 206, 212, 291], "get_content_charset": [65, 201, 203, 212, 291], "get_charset": [65, 201, 203, 212, 291], "is_attach": [65, 201, 212, 291, 485], "get_content_disposit": [65, 201, 203, 212, 291, 480], "get_bodi": [65, 201, 207, 212, 214, 291], "iter_attach": [65, 201, 207, 212, 291, 485], "iter_part": [65, 201, 203, 212, 214, 291], "get_cont": [65, 201, 203, 204, 207, 212, 215, 291], "set_cont": [65, 201, 203, 204, 205, 207, 212, 214, 215, 291, 485], "make_rel": [65, 201, 212, 291], "make_altern": [65, 201, 212, 291], "make_mix": [65, 201, 212, 291], "add_rel": [65, 201, 207, 212, 291], "add_altern": [65, 201, 207, 212, 291], "add_attach": [65, 201, 207, 212, 291], "clear_cont": [65, 201, 204, 212, 291], "preambl": [65, 70, 201, 203, 207, 212, 291, 306, 485], "epilogu": [65, 201, 203, 212, 291], "defect": [65, 201, 203, 210, 212, 214, 215, 291, 470, 478, 482, 485], "mimepart": [65, 201, 204, 212, 291, 479], "feedpars": [65, 201, 206, 291, 470, 485], "bytesfeedpars": [65, 201, 214, 291, 477], "feed": [65, 164, 183, 184, 201, 214, 215, 242, 247, 267, 279, 289, 291, 351, 393, 411, 417, 420, 428, 471, 477, 485], "bytespars": [65, 201, 207, 208, 214, 291, 477, 485], "parsebyt": [65, 201, 214, 291], "bytesheaderpars": [65, 201, 214, 291, 478], "parsestr": [65, 201, 207, 214, 279, 291, 415, 416, 418, 466, 480, 485], "headerpars": [65, 201, 214, 291, 478], "message_from_byt": [65, 201, 214, 291, 477], "message_from_binary_fil": [65, 201, 207, 214, 215, 291, 477], "message_from_str": [65, 201, 214, 291, 478], "message_from_fil": [65, 201, 211, 214, 291], "bytesgener": [65, 201, 203, 204, 208, 212, 215, 291, 342, 477], "flatten": [65, 166, 201, 203, 208, 209, 210, 212, 215, 267, 291, 305, 351, 390, 446, 476, 479, 480, 484, 485], "decodedgener": [65, 201, 208, 291, 481, 485], "max_line_length": [65, 201, 203, 212, 215, 291, 478, 485], "cte_typ": [65, 201, 208, 210, 215, 291, 478], "raise_on_defect": [65, 201, 215, 291, 478], "mangle_from_": [65, 201, 203, 208, 215, 291, 480], "message_factori": [65, 201, 214, 215, 291, 481], "handle_defect": [65, 201, 215, 291], "register_defect": [65, 201, 215, 291], "header_max_count": [65, 201, 215, 291], "header_source_pars": [65, 201, 215, 291], "header_store_pars": [65, 201, 215, 291], "header_fetch_pars": [65, 201, 215, 291], "fold_binari": [65, 201, 215, 291], "emailpolici": [65, 201, 204, 210, 215, 291, 478, 480], "refold_sourc": [65, 201, 208, 215, 291, 478], "header_factori": [65, 201, 210, 215, 291, 478], "content_manag": [65, 201, 204, 212, 215, 291, 479], "smtp": [65, 90, 94, 108, 109, 201, 207, 208, 210, 215, 260, 262, 275, 291, 348, 357, 455, 466, 468, 472, 477, 478, 479, 480, 484, 485], "smtputf8": [65, 201, 215, 291, 341, 342, 480, 485], "compat32": [65, 201, 202, 205, 208, 209, 212, 213, 214, 215, 216, 291, 478, 480, 481, 485], "messageerror": [65, 201, 206, 291], "messageparseerror": [65, 201, 206, 277, 291], "headerparseerror": [65, 201, 203, 206, 212, 291], "boundaryerror": [65, 201, 206, 291], "multipartconversionerror": [65, 201, 206, 213, 291], "headerregistri": [65, 201, 206, 207, 212, 215, 291, 485], "basehead": [65, 201, 210, 212, 291], "max_count": [65, 201, 210, 215, 291], "unstructuredhead": [65, 201, 210, 291], "datehead": [65, 201, 210, 291], "addresshead": [65, 201, 210, 291], "singleaddresshead": [65, 201, 210, 291], "mimeversionhead": [65, 201, 210, 291], "parameterizedmimehead": [65, 201, 210, 291], "param": [65, 109, 144, 201, 203, 204, 210, 212, 216, 249, 261, 274, 287, 291, 299, 311, 392, 398, 399, 403, 423, 424, 435, 473, 477, 484, 485], "contenttypehead": [65, 201, 210, 291], "content_typ": [65, 201, 207, 210, 291], "maintyp": [65, 201, 203, 204, 207, 208, 210, 211, 212, 291], "contentdispositionhead": [65, 201, 210, 291], "content_disposit": [65, 201, 210, 291], "contenttransferencod": [65, 201, 210, 291], "cte": [65, 201, 203, 204, 205, 210, 212, 215, 291, 347, 485], "map_to_typ": [65, 201, 210, 291], "display_nam": [65, 201, 207, 210, 291, 478], "usernam": [65, 109, 115, 158, 179, 201, 207, 210, 236, 255, 275, 291, 299, 300, 311, 342, 398, 399, 477, 478, 480, 485], "addr_spec": [65, 201, 210, 291, 478], "contentmanag": [65, 201, 213, 291, 479, 485], "add_get_handl": [65, 201, 204, 291], "add_set_handl": [65, 201, 204, 291], "raw_data_manag": [65, 201, 204, 215, 291], "get_payload": [65, 201, 203, 207, 211, 213, 291, 477], "set_payload": [65, 201, 203, 213, 291, 485], "set_charset": [65, 201, 203, 291], "get_param": [65, 201, 203, 216, 291, 485], "set_typ": [65, 201, 203, 291], "scratch": [65, 99, 195, 201, 205, 208, 214, 291, 348, 414, 478, 479, 485], "mimebas": [65, 201, 213, 291], "mimenonmultipart": [65, 201, 206, 213, 291, 485], "mimemultipart": [65, 201, 213, 291], "mimeappl": [65, 201, 213, 291], "mimeaudio": [65, 201, 205, 213, 291], "mimeimag": [65, 201, 205, 206, 213, 291], "mimemessag": [65, 201, 213, 291], "mimetext": [65, 201, 205, 213, 291, 480, 485], "decode_head": [65, 201, 209, 291, 294, 357, 478], "make_head": [65, 201, 209, 291, 478], "charset": [65, 189, 196, 201, 203, 204, 209, 212, 213, 215, 216, 237, 253, 255, 291, 348, 399, 411, 477, 480, 485], "input_charset": [65, 201, 202, 203, 291], "header_encod": [65, 201, 202, 291], "body_encod": [65, 201, 202, 291, 485], "output_charset": [65, 201, 202, 203, 237, 253, 291, 473, 483], "input_codec": [65, 201, 202, 291], "output_codec": [65, 201, 202, 291], "get_body_encod": [65, 201, 202, 291], "get_output_charset": [65, 201, 202, 291], "header_encode_lin": [65, 201, 202, 291], "add_charset": [65, 201, 202, 291], "add_alia": [65, 201, 202, 291], "add_codec": [65, 201, 202, 291], "encode_quopri": [65, 201, 205, 291], "encode_base64": [65, 201, 205, 213, 291], "encode_7or8bit": [65, 201, 205, 291], "encode_noop": [65, 201, 205, 291], "make_msgid": [65, 201, 207, 216, 291, 485], "unquot": [65, 181, 201, 203, 212, 216, 247, 262, 291, 309, 398, 399, 485], "parseaddr": [65, 201, 216, 291], "formataddr": [65, 201, 216, 291, 478], "getaddress": [65, 201, 216, 291, 485], "parsed": [65, 201, 216, 291], "parsedate_tz": [65, 201, 216, 291, 485], "parsedate_to_datetim": [65, 201, 216, 291, 478], "mktime_tz": [65, 201, 216, 291], "formatd": [65, 201, 216, 291, 470, 485], "format_datetim": [65, 201, 210, 216, 291, 478], "decode_rfc2231": [65, 201, 216, 291], "encode_rfc2231": [65, 201, 216, 291], "collapse_rfc2231_valu": [65, 201, 203, 216, 291], "decode_param": [65, 201, 216, 291], "body_line_iter": [65, 201, 211, 291], "typed_subpart_iter": [65, 201, 211, 291], "_structur": [65, 201, 203, 211, 212, 291], "jsondecod": [65, 268, 291, 473, 481, 485], "raw_decod": [65, 268, 291, 485], "jsonencod": [65, 109, 268, 291, 481, 485], "jsondecodeerror": [65, 126, 268, 291, 480, 485], "complianc": [65, 192, 201, 210, 215, 291, 294, 411, 414, 478, 479, 485], "interoper": [65, 109, 122, 133, 147, 215, 218, 252, 265, 291, 305, 324, 348, 351, 432, 450, 475, 477, 479, 485], "iterkey": [65, 118, 277, 291, 468, 469, 470, 472, 474, 485], "itervalu": [65, 118, 277, 291, 468, 469, 470, 474, 485], "iteritem": [65, 118, 277, 291, 468, 469, 470, 474, 485], "get_messag": [65, 277, 291], "get_byt": [65, 277, 291, 477], "get_str": [65, 277, 291, 477, 485], "get_fil": [65, 277, 291, 477], "unlock": [65, 121, 143, 222, 277, 288, 289, 291, 311, 367, 370, 432, 471, 485], "maildir": [65, 291, 471, 473, 485], "list_fold": [65, 277, 291], "get_fold": [65, 277, 291], "add_fold": [65, 277, 291], "remove_fold": [65, 277, 291], "mbox": [65, 203, 208, 291, 471, 485], "mh": [65, 291, 471], "get_sequ": [65, 277, 291], "set_sequ": [65, 277, 291], "babyl": [65, 291], "get_label": [65, 277, 291], "mmdf": [65, 291], "maildirmessag": [65, 291], "get_subdir": [65, 277, 291], "set_subdir": [65, 277, 291], "get_flag": [65, 277, 291], "set_flag": [65, 277, 291], "add_flag": [65, 277, 291], "remove_flag": [65, 277, 291], "get_dat": [65, 139, 142, 277, 291], "set_dat": [65, 277, 291], "get_info": [65, 277, 291], "set_info": [65, 277, 291], "mboxmessag": [65, 212, 291], "get_from": [65, 277, 291], "set_from": [65, 277, 291], "mhmessag": [65, 291], "add_sequ": [65, 277, 291], "remove_sequ": [65, 277, 291], "babylmessag": [65, 291], "set_label": [65, 277, 291], "add_label": [65, 277, 291], "remove_label": [65, 277, 291], "get_vis": [65, 277, 291], "set_vis": [65, 277, 291], "update_vis": [65, 277, 291], "mmdfmessag": [65, 291], "nosuchmailboxerror": [65, 277, 291], "notemptyerror": [65, 277, 291], "externalclasherror": [65, 277, 291], "guess_typ": [65, 207, 252, 282, 291, 411, 485], "guess_all_extens": [65, 282, 291, 485], "guess_extens": [65, 207, 282, 291], "read_mime_typ": [65, 282, 291, 485], "add_typ": [65, 282, 291], "knownfil": [65, 282, 291], "suffix_map": [65, 282, 291], "encodings_map": [65, 282, 291, 485], "types_map": [65, 282, 291, 472, 485], "common_typ": [65, 282, 291], "types_map_inv": [65, 282, 291], "read_windows_registri": [65, 282, 291], "base16": [65, 260, 291, 470], "base32": [65, 260, 291, 470, 476, 485], "base85": [65, 260, 291, 479, 485], "b64encod": [65, 149, 242, 291, 485], "b64decod": [65, 149, 242, 291, 478, 485], "standard_b64encod": [65, 149, 291], "standard_b64decod": [65, 149, 291], "urlsafe_b64encod": [65, 149, 291], "urlsafe_b64decod": [65, 149, 291], "b32encod": [65, 149, 291], "b32decod": [65, 149, 291, 479, 485], "b32hexencod": [65, 149, 291, 476, 485], "b32hexdecod": [65, 149, 291, 476, 485], "b16encod": [65, 149, 291], "b16decod": [65, 149, 291], "a85encod": [65, 149, 291, 479, 485], "a85decod": [65, 149, 291, 479, 485], "b85encod": [65, 149, 291, 479, 485], "b85decod": [65, 149, 291, 479], "decodebyt": [65, 149, 164, 291, 484, 485], "encodebyt": [65, 149, 164, 291, 484, 485], "binhex": [65, 152, 260, 291, 484, 485], "binhex4": [65, 152, 260, 291, 484, 485], "hexbin": [65, 153, 291], "a2b_uu": [65, 152, 291], "b2a_uu": [65, 152, 291, 482, 485], "a2b_base64": [65, 152, 291, 485], "b2a_base64": [65, 152, 291, 481, 485], "a2b_qp": [65, 152, 291, 485], "b2a_qp": [65, 152, 291, 485], "a2b_hqx": [65, 152, 291, 484, 485], "rledecode_hqx": [65, 152, 291, 484, 485], "rlecode_hqx": [65, 152, 291, 484, 485], "b2a_hqx": [65, 152, 291, 484, 485], "crc_hqx": [65, 152, 291, 485], "b2a_hex": [65, 152, 164, 291, 485], "hexlifi": [65, 152, 291, 485], "a2b_hex": [65, 152, 164, 291, 479], "unhexlifi": [65, 152, 291, 485], "quopri": [65, 152, 164, 260, 291], "decodestr": [65, 291, 323, 484, 485], "encodestr": [65, 291, 323, 484, 485], "markup": [65, 224, 247, 260, 320, 414, 423, 472, 477, 478, 485], "hypertext": [65, 115, 247, 248, 260, 279, 414], "unescap": [65, 97, 111, 196, 245, 246, 279, 294, 325, 398, 421, 439, 479, 484, 485], "xhtml": [65, 115, 245, 246, 260, 279, 320, 399, 414, 415, 417, 477], "htmlparser": [65, 279, 474, 476, 478, 479, 480, 484, 485], "getpo": [65, 247, 279], "get_starttag_text": [65, 247, 279], "handle_starttag": [65, 247, 279], "handle_endtag": [65, 247, 279], "handle_startendtag": [65, 247, 279], "handle_data": [65, 247, 279], "handle_entityref": [65, 247, 279], "handle_charref": [65, 247, 279], "handle_com": [65, 247, 279], "handle_decl": [65, 247, 279], "handle_pi": [65, 247, 279], "unknown_decl": [65, 247, 279], "entiti": [65, 97, 111, 115, 245, 247, 249, 260, 274, 279, 320, 350, 399, 413, 414, 415, 416, 418, 419, 420, 421, 469, 478, 483, 485], "html5": [65, 246, 279, 478, 479], "entitydef": [65, 246, 279], "name2codepoint": [65, 246, 247, 279], "codepoint2nam": [65, 246, 279], "vulner": [65, 114, 133, 142, 200, 279, 305, 320, 333, 337, 347, 355, 415, 416, 417, 418, 423, 424, 428, 471, 485], "defusedxml": [65, 279], "pull": [65, 83, 189, 192, 279, 334, 388, 393, 416, 429, 466, 470, 473, 479, 482, 485], "xpath": [65, 279, 413, 484, 485], "canonic": [65, 279, 417, 483, 485], "fromstr": [65, 127, 279, 417, 477, 484, 485], "fromstringlist": [65, 279, 417, 477], "isel": [65, 279, 417], "iterpars": [65, 279, 417, 479, 485], "processinginstruct": [65, 279, 417, 419, 471], "register_namespac": [65, 279, 417, 473, 477], "subel": [65, 279, 417, 477], "tostr": [65, 127, 279, 417, 473, 477, 479, 484, 485], "tostringlist": [65, 279, 417, 477, 479, 485], "xmlid": [65, 279, 417], "xinclud": [65, 279, 485], "elementinclud": [65, 279, 417, 471], "default_load": [65, 279, 417], "attrib": [65, 279, 417, 471, 485], "findtext": [65, 279, 417, 485], "iterfind": [65, 279, 417, 477], "itertext": [65, 279, 417, 473, 477, 485], "makeel": [65, 279, 417], "_setroot": [65, 279, 417], "getroot": [65, 279, 417, 471], "qname": [65, 279, 414, 419, 420], "treebuild": [65, 279, 477, 483, 485], "doctyp": [65, 115, 247, 249, 279, 320, 399, 414, 417, 477, 483, 485], "start_n": [65, 279, 417, 483, 485], "end_n": [65, 279, 417, 483, 485], "c14nwritertarget": [65, 279, 417], "xmlparser": [65, 279, 473, 479, 483, 485], "xmlpullpars": [65, 279, 479, 485], "read_ev": [65, 279, 417], "parseerror": [65, 279, 417, 473, 477, 485], "registerdomimplement": [65, 279, 414], "getdomimplement": [65, 279, 414, 415], "empty_namespac": [65, 279, 414], "xml_namespac": [65, 279, 414], "xmlns_namespac": [65, 279, 414], "xhtml_namespac": [65, 279, 414], "domimplement": [65, 279], "hasfeatur": [65, 279, 414], "createdocu": [65, 279, 414, 415], "createdocumenttyp": [65, 279, 414], "nodetyp": [65, 279, 414, 415], "parentnod": [65, 279, 414], "previouss": [65, 279, 414], "nextsibl": [65, 279, 414], "childnod": [65, 279, 414, 415, 466], "firstchild": [65, 279, 414], "lastchild": [65, 279, 414], "localnam": [65, 279, 414, 419, 420, 485], "namespaceuri": [65, 279, 414, 420], "nodenam": [65, 279, 299, 309, 414], "nodevalu": [65, 279, 414], "hasattribut": [65, 279, 414], "haschildnod": [65, 279, 414], "issamenod": [65, 279, 414], "appendchild": [65, 279, 414, 415, 466], "insertbefor": [65, 279, 414, 466], "removechild": [65, 279, 414, 466], "replacechild": [65, 279, 414], "clonenod": [65, 279, 414, 485], "nodelist": [65, 279, 415, 432], "documenttyp": [65, 279], "publicid": [65, 279, 320, 414, 419], "systemid": [65, 279, 320, 414, 419], "internalsubset": [65, 279, 414], "documentel": [65, 279, 414, 415, 466], "createel": [65, 279, 414], "createelementn": [65, 279, 414], "createtextnod": [65, 279, 414, 415], "createcom": [65, 279, 414], "createprocessinginstruct": [65, 279, 414], "createattribut": [65, 279, 414], "createattributen": [65, 279, 414], "getelementsbytagnam": [65, 279, 414, 415, 466], "getelementsbytagnamen": [65, 279, 414], "tagnam": [65, 279, 284, 381, 414, 415, 416], "hasattributen": [65, 279, 414], "getattribut": [65, 279, 414, 416, 432], "getattributenod": [65, 279, 414], "getattributen": [65, 279, 414], "getattributenoden": [65, 279, 414], "removeattribut": [65, 279, 414], "removeattributenod": [65, 279, 414, 485], "removeattributen": [65, 279, 414], "setattribut": [65, 279, 414], "setattributenod": [65, 279, 414], "setattributenoden": [65, 279, 414], "setattributen": [65, 279, 414], "namednodemap": [65, 279], "cdatasect": [65, 279], "domexcept": [65, 279, 414, 415], "domstringsizeerr": [65, 279, 414], "hierarchyrequesterr": [65, 279, 414], "indexsizeerr": [65, 279, 414], "inuseattributeerr": [65, 279, 414], "invalidaccesserr": [65, 279, 414], "invalidcharactererr": [65, 279, 414], "invalidmodificationerr": [65, 279, 414], "invalidstateerr": [65, 279, 414], "namespaceerr": [65, 279, 414], "notfounderr": [65, 279, 414], "notsupportederr": [65, 279, 414], "nodataallowederr": [65, 279, 414], "nomodificationallowederr": [65, 279, 414], "syntaxerr": [65, 279, 414], "wrongdocumenterr": [65, 279, 414], "minidom": [65, 260, 279, 413, 414, 416, 466, 467, 469, 483, 485], "writexml": [65, 279, 415, 483], "toxml": [65, 279, 415, 416, 466, 469, 483], "toprettyxml": [65, 279, 415, 469, 483], "pulldom": [65, 260, 279, 413, 483, 485], "sax2dom": [65, 279, 416], "default_bufs": [65, 279, 416], "domeventstream": [65, 279, 483, 485], "getev": [65, 279, 416], "expandnod": [65, 279, 416], "make_pars": [65, 279, 416, 418, 420, 466, 485], "saxexcept": [65, 279], "saxparseexcept": [65, 279, 418, 419], "saxnotrecognizedexcept": [65, 279, 418, 420], "saxnotsupportedexcept": [65, 279, 418, 420], "getexcept": [65, 279, 418], "contenthandl": [65, 279, 416, 418, 420, 421, 466], "dtdhandler": [65, 279, 420], "entityresolv": [65, 279, 420], "errorhandl": [65, 279, 418, 420, 459, 472], "lexicalhandl": [65, 279, 470, 476, 485], "feature_namespac": [65, 279, 419], "feature_namespace_prefix": [65, 279, 419], "feature_string_intern": [65, 279, 419], "feature_valid": [65, 279, 419], "feature_external_g": [65, 279, 416, 418, 419], "feature_external_p": [65, 279, 419], "all_featur": [65, 279, 419], "property_lexical_handl": [65, 279, 419], "property_declaration_handl": [65, 279, 419], "property_dom_nod": [65, 279, 419], "property_xml_str": [65, 279, 419], "all_properti": [65, 279, 419], "setdocumentloc": [65, 279, 419], "startdocu": [65, 279, 419], "enddocu": [65, 279, 419], "startprefixmap": [65, 279, 419], "endprefixmap": [65, 279, 419], "startel": [65, 279, 419, 420, 466], "endel": [65, 279, 419, 466], "startelementn": [65, 279, 419, 420], "endelementn": [65, 279, 419], "ignorablewhitespac": [65, 279, 419], "skippedent": [65, 279, 419], "notationdecl": [65, 279, 419], "unparsedentitydecl": [65, 279, 419], "resolveent": [65, 279, 419, 420], "fatalerror": [65, 279, 419], "startdtd": [65, 279, 419, 470], "enddtd": [65, 279, 419], "startcdata": [65, 279, 419], "endcdata": [65, 279, 419], "saxutil": [65, 260, 279, 418], "quoteattr": [65, 279, 421], "xmlgener": [65, 279, 421], "xmlfilterbas": [65, 279, 421], "prepare_input_sourc": [65, 279, 421], "xmlreader": [65, 260, 279, 416, 418, 419, 421, 480], "incrementalpars": [65, 279], "inputsourc": [65, 279, 418, 419, 421, 480, 485], "attributesimpl": [65, 279, 420], "attributesnsimpl": [65, 279, 420], "getcontenthandl": [65, 279, 420], "setcontenthandl": [65, 279, 420, 466], "getdtdhandl": [65, 279, 420], "setdtdhandl": [65, 279, 420], "getentityresolv": [65, 279, 420], "setentityresolv": [65, 279, 420], "geterrorhandl": [65, 279, 420], "seterrorhandl": [65, 279, 420], "getfeatur": [65, 279, 420], "setfeatur": [65, 279, 416, 418, 420], "getproperti": [65, 279, 287, 357, 420, 485], "setproperti": [65, 279, 287, 357, 419, 420], "getcolumnnumb": [65, 279, 420], "getlinenumb": [65, 279, 420], "getpublicid": [65, 279, 420], "getsystemid": [65, 279, 420], "setpublicid": [65, 279, 420], "setsystemid": [65, 279, 420], "setencod": [65, 279, 420], "setbytestream": [65, 279, 420], "getbytestream": [65, 279, 420], "setcharacterstream": [65, 279, 420], "getcharacterstream": [65, 279, 420], "getlength": [65, 279, 420], "gettyp": [65, 279, 420, 471], "attributesn": [65, 279, 418, 419], "getvaluebyqnam": [65, 279, 420], "getnamebyqnam": [65, 279, 420], "getqnamebynam": [65, 279, 420], "getqnam": [65, 279, 420], "expat": [65, 78, 260, 279, 310, 413, 417, 419, 460, 466, 467, 469, 471, 473, 477, 485], "expaterror": [65, 279, 477], "xmlparsertyp": [65, 279, 320], "errorstr": [65, 279, 320], "parsercr": [65, 279, 320], "parsefil": [65, 279, 320], "setbas": [65, 279, 320], "getbas": [65, 279, 320], "getinputcontext": [65, 279, 320], "externalentityparsercr": [65, 279, 320], "setparamentitypars": [65, 279, 320], "useforeigndtd": [65, 279, 320], "buffer_s": [65, 145, 264, 279, 320, 472], "buffer_text": [65, 279, 320, 469], "buffer_us": [65, 279, 320], "ordered_attribut": [65, 279, 320], "specified_attribut": [65, 279, 320, 485], "errorbyteindex": [65, 279, 320], "errorcolumnnumb": [65, 279, 320], "errorlinenumb": [65, 279, 320], "currentbyteindex": [65, 279, 320], "currentcolumnnumb": [65, 279, 320], "currentlinenumb": [65, 279, 320], "xmldeclhandl": [65, 279, 320], "startdoctypedeclhandl": [65, 279, 320], "enddoctypedeclhandl": [65, 279, 320], "elementdeclhandl": [65, 279, 320], "attlistdeclhandl": [65, 279, 320], "startelementhandl": [65, 279, 320], "endelementhandl": [65, 279, 320], "processinginstructionhandl": [65, 279, 320], "characterdatahandl": [65, 279, 320], "unparsedentitydeclhandl": [65, 279, 320], "entitydeclhandl": [65, 279, 320], "notationdeclhandl": [65, 279, 320], "startnamespacedeclhandl": [65, 279, 320], "endnamespacedeclhandl": [65, 279, 320], "commenthandl": [65, 279, 320], "startcdatasectionhandl": [65, 279, 320], "endcdatasectionhandl": [65, 279, 320], "defaulthandl": [65, 279, 320], "defaulthandlerexpand": [65, 279, 320], "notstandalonehandl": [65, 279, 320], "externalentityrefhandl": [65, 279, 320], "xml_error_async_ent": [65, 279, 320], "xml_error_attribute_external_entity_ref": [65, 279, 320], "xml_error_bad_char_ref": [65, 279, 320], "xml_error_binary_entity_ref": [65, 279, 320], "xml_error_duplicate_attribut": [65, 279, 320], "xml_error_incorrect_encod": [65, 279, 320], "xml_error_invalid_token": [65, 279, 320], "xml_error_junk_after_doc_el": [65, 279, 320], "xml_error_misplaced_xml_pi": [65, 279, 320], "xml_error_no_el": [65, 279, 320], "xml_error_no_memori": [65, 279, 320], "xml_error_param_entity_ref": [65, 279, 320], "xml_error_partial_char": [65, 279, 320], "xml_error_recursive_entity_ref": [65, 279, 320], "xml_error_syntax": [65, 279, 320], "xml_error_tag_mismatch": [65, 279, 320], "xml_error_unclosed_token": [65, 279, 320], "xml_error_undefined_ent": [65, 279, 320], "xml_error_unknown_encod": [65, 279, 320], "xml_error_unclosed_cdata_sect": [65, 279, 320], "xml_error_external_entity_handl": [65, 279, 320], "xml_error_not_standalon": [65, 279, 320], "xml_error_unexpected_st": [65, 279, 320], "xml_error_entity_declared_in_p": [65, 279, 320], "xml_error_feature_requires_xml_dtd": [65, 279, 320], "xml_error_cant_change_feature_once_pars": [65, 279, 320], "xml_error_unbound_prefix": [65, 279, 320], "xml_error_undeclaring_prefix": [65, 279, 320], "xml_error_incomplete_p": [65, 279, 320], "xml_error_xml_decl": [65, 279, 320], "xml_error_text_decl": [65, 279, 320], "xml_error_publicid": [65, 279, 320], "xml_error_suspend": [65, 279, 320], "xml_error_not_suspend": [65, 279, 320], "xml_error_abort": [65, 279, 320], "xml_error_finish": [65, 279, 320], "xml_error_suspend_p": [65, 279, 320], "browser": [65, 104, 112, 114, 115, 129, 158, 159, 196, 251, 252, 254, 260, 262, 270, 278, 314, 319, 398, 399, 444, 466, 467, 469, 470, 471, 472, 477, 478, 481, 482, 485], "open_new": [65, 262, 407, 471], "open_new_tab": [65, 262, 407, 471], "wsgi": [65, 260, 262, 471, 477, 485], "guess_schem": [65, 262, 411], "request_uri": [65, 262, 411], "application_uri": [65, 262, 411], "shift_path_info": [65, 262, 411], "setup_testing_default": [65, 262, 411], "is_hop_by_hop": [65, 262, 411], "filewrapp": [65, 262, 411, 483, 485], "simple_serv": [65, 262, 471, 481, 485], "make_serv": [65, 262, 411, 471], "demo_app": [65, 262, 411], "wsgiserv": [65, 262, 411, 485], "set_app": [65, 262, 411], "get_app": [65, 262, 411], "wsgirequesthandl": [65, 262, 411, 485], "get_environ": [65, 262, 411], "get_stderr": [65, 262, 411], "checker": [65, 95, 110, 126, 183, 200, 262, 298, 351, 390, 432, 470, 471, 476, 480, 481, 483, 484, 485], "cgihandl": [65, 262, 411], "iiscgihandl": [65, 262, 411], "basecgihandl": [65, 262, 411], "simplehandl": [65, 262, 411, 466], "basehandl": [65, 262, 393, 411, 485], "_write": [65, 262, 411], "_flush": [65, 262, 411], "get_stdin": [65, 262, 411], "add_cgi_var": [65, 262, 411], "wsgi_multithread": [65, 262, 411], "wsgi_multiprocess": [65, 262, 411], "wsgi_run_onc": [65, 262, 411], "os_environ": [65, 262, 411], "server_softwar": [65, 262, 411], "get_schem": [65, 262, 411], "setup_environ": [65, 262, 411], "log_except": [65, 262, 411], "traceback_limit": [65, 191, 262, 386, 411], "error_output": [65, 262, 411], "error_status": [65, 262, 411], "error_head": [65, 262, 411], "error_bodi": [65, 262, 411], "wsgi_file_wrapp": [65, 262, 411], "origin_serv": [65, 262, 411], "http_version": [65, 262, 411], "read_environ": [65, 262, 411, 477], "url": [65, 69, 70, 73, 76, 78, 81, 95, 141, 148, 149, 158, 172, 173, 230, 248, 249, 250, 252, 254, 259, 260, 262, 275, 282, 319, 332, 351, 367, 400, 402, 403, 407, 411, 417, 420, 421, 423, 424, 430, 436, 466, 469, 470, 471, 472, 473, 476, 477, 479, 480, 485], "urlopen": [65, 94, 115, 172, 175, 233, 250, 262, 313, 397, 398, 399, 455, 471, 472, 473, 477, 478, 479, 480, 485], "install_open": [65, 115, 262, 399], "build_open": [65, 115, 250, 262, 399], "pathname2url": [65, 262, 399], "url2pathnam": [65, 262, 399], "getproxi": [65, 115, 262, 399, 485], "openerdirector": [65, 115, 262, 479], "httpdefaulterrorhandl": [65, 115, 262, 399], "httpredirecthandl": [65, 115, 262], "httpcookieprocessor": [65, 250, 262, 470], "proxyhandl": [65, 115, 262, 485], "httppasswordmgr": [65, 115, 262, 485], "httppasswordmgrwithdefaultrealm": [65, 115, 262, 399], "httppasswordmgrwithpriorauth": [65, 262, 480, 485], "abstractbasicauthhandl": [65, 262, 393, 485], "httpbasicauthhandl": [65, 115, 262], "proxybasicauthhandl": [65, 262], "abstractdigestauthhandl": [65, 262, 393, 485], "httpdigestauthhandl": [65, 262], "proxydigestauthhandl": [65, 262], "httpshandler": [65, 262, 477], "datahandl": [65, 115, 262, 479], "ftphandler": [65, 115, 262], "cacheftphandl": [65, 262], "unknownhandl": [65, 115, 262], "httperrorprocessor": [65, 115, 262], "full_url": [65, 115, 262, 399, 479], "origin_req_host": [65, 250, 262, 399], "unverifi": [65, 249, 250, 262, 399], "get_method": [65, 262, 270, 358, 399, 478], "add_unredirected_head": [65, 250, 262, 399], "remove_head": [65, 262, 399, 479], "get_full_url": [65, 250, 262, 399], "set_proxi": [65, 262, 399, 423, 479], "get_head": [65, 250, 262, 390, 399], "header_item": [65, 250, 262, 399], "add_handl": [65, 115, 262, 399], "add_par": [65, 262, 399], "default_open": [65, 262, 399], "unknown_open": [65, 262, 399], "http_error_default": [65, 262, 399], "redirect_request": [65, 262, 399], "http_error_301": [65, 262, 399], "http_error_302": [65, 262, 399], "http_error_303": [65, 262, 399], "http_error_307": [65, 262, 399], "cookiejar": [65, 248, 251, 260, 262, 399, 485], "add_password": [65, 115, 262, 399], "find_user_password": [65, 262, 399, 485], "update_authent": [65, 262, 399], "is_authent": [65, 262, 399, 485], "http_error_auth_req": [65, 262, 399], "http_error_401": [65, 262, 399], "http_error_407": [65, 262, 399], "http_open": [65, 262, 399], "https_open": [65, 262, 399], "file_open": [65, 262, 399], "data_open": [65, 262, 399], "ftp_open": [65, 262, 399], "setmaxconn": [65, 262, 399], "http_respons": [65, 262, 399], "https_respons": [65, 262, 399], "urlretriev": [65, 262, 397, 399, 403, 485], "urlcleanup": [65, 262, 399, 485], "open_unknown": [65, 262, 399], "fancyurlopen": [65, 262, 399, 485], "prompt_user_passwd": [65, 262, 399], "addinfourl": [65, 262, 399, 485], "geturl": [65, 249, 262, 398, 399, 485], "getstatus": [65, 249, 262, 399, 479], "urlpars": [65, 262, 398, 403, 472, 473, 474, 477, 481, 485], "parse_q": [65, 158, 262, 398, 472, 476, 481, 482, 483, 484, 485], "parse_qsl": [65, 262, 398, 472, 476, 481, 482, 483, 484, 485], "urlunpars": [65, 262, 398], "urlsplit": [65, 141, 262, 398, 473, 481, 485], "urlunsplit": [65, 262, 398], "urljoin": [65, 262, 398, 480, 485], "urldefrag": [65, 262, 398, 477], "splitresult": [65, 262, 398, 485], "defragresult": [65, 262, 398, 477, 485], "parseresult": [65, 262, 398, 473, 477, 485], "defragresultbyt": [65, 262, 398, 485], "parseresultbyt": [65, 262, 398, 477, 485], "splitresultbyt": [65, 262, 398, 485], "quote_plus": [65, 262, 398, 477], "quote_from_byt": [65, 262, 398], "unquote_plus": [65, 262, 398], "unquote_to_byt": [65, 262, 398, 485], "urlencod": [65, 94, 115, 158, 249, 262, 275, 398, 399, 477, 480, 485], "urlerror": [65, 262, 397, 399, 472], "httperror": [65, 233, 262, 397, 399, 479, 485], "contenttooshorterror": [65, 262, 397, 399], "robot": [65, 260, 262, 396, 466, 485], "robotfilepars": [65, 262, 400, 481, 485], "set_url": [65, 262, 400], "can_fetch": [65, 262, 400, 485], "crawl_delay": [65, 262, 400, 485], "request_r": [65, 262, 400, 485], "site_map": [65, 262, 400, 485], "httpstatus": [65, 248, 262, 480, 484, 485], "httpconnect": [65, 262, 423, 472, 473, 477, 479, 480, 481, 482, 485], "httpsconnect": [65, 249, 262, 399, 472, 473, 477, 479, 482, 485], "httprespons": [65, 262, 399, 473, 478, 485], "parse_head": [65, 129, 158, 249, 252, 262, 357, 485], "httpexcept": [65, 249, 262], "notconnect": [65, 249, 262], "invalidurl": [65, 249, 262, 485], "unknownprotocol": [65, 249, 262], "unknowntransferencod": [65, 249, 262], "unimplementedfilemod": [65, 249, 262], "incompleteread": [65, 249, 262], "improperconnectionst": [65, 249, 262], "cannotsendrequest": [65, 249, 262], "cannotsendhead": [65, 249, 262], "responsenotreadi": [65, 249, 262], "badstatuslin": [65, 249, 262], "linetoolong": [65, 249, 262], "remotedisconnect": [65, 249, 262, 480, 485], "http_port": [65, 249, 262], "https_port": [65, 249, 262], "getrespons": [65, 249, 262, 480, 485], "set_debuglevel": [65, 230, 249, 262, 294, 311, 342, 357, 364, 480], "set_tunnel": [65, 249, 262, 423, 477, 485], "blocksiz": [65, 230, 249, 262, 299, 363, 482, 485], "putrequest": [65, 249, 262, 485], "puthead": [65, 249, 262], "endhead": [65, 249, 262, 481], "gethead": [65, 129, 249, 262], "debuglevel": [65, 249, 262, 342, 364, 399, 480, 485], "httpmessag": [65, 115, 252, 262], "ftp_tls": [65, 262, 473, 477, 478, 484, 485], "error_repli": [65, 230, 262], "error_temp": [65, 230, 262], "error_perm": [65, 230, 262], "error_proto": [65, 230, 262, 311, 478], "all_error": [65, 230, 262], "getwelcom": [65, 230, 262, 294, 311, 357], "login": [65, 109, 179, 230, 255, 262, 292, 294, 299, 316, 342, 346, 357, 364, 399, 477, 485], "sendcmd": [65, 148, 230, 262], "voidcmd": [65, 230, 262], "retrbinari": [65, 230, 262], "retrlin": [65, 230, 262], "set_pasv": [65, 230, 262, 467], "storbinari": [65, 230, 262, 472, 473], "storlin": [65, 230, 262, 472], "transfercmd": [65, 230, 262], "ntransfercmd": [65, 230, 262], "mlsd": [65, 230, 262, 478], "nlst": [65, 230, 262, 478], "mkd": [65, 230, 262], "pwd": [65, 116, 179, 230, 236, 240, 260, 262, 299, 300, 346, 355, 395, 426, 469, 484, 485], "rmd": [65, 230, 262], "ssl_version": [65, 230, 262, 348], "auth": [65, 230, 255, 262, 275, 342, 348, 469, 480, 485], "ccc": [65, 230, 262, 381, 478], "prot_p": [65, 230, 262], "prot_c": [65, 230, 262], "pop3": [65, 260, 262, 478, 479, 480, 484, 485], "pop3_ssl": [65, 262, 311, 477, 484, 485], "capa": [65, 262, 311, 479], "pass_": [65, 262, 311], "apop": [65, 262, 311], "rpop": [65, 262, 311], "retr": [65, 230, 262, 311], "dele": [65, 262, 311], "rset": [65, 262, 311, 341, 342, 485], "noop": [65, 255, 262, 289, 311, 341, 342, 485], "uidl": [65, 262, 311], "stls": [65, 262, 311, 479], "imap4": [65, 260, 262, 311, 477, 480, 481, 483, 484, 485], "imap4_ssl": [65, 255, 262, 478, 484, 485], "imap4_stream": [65, 255, 262, 484, 485], "internaldate2tupl": [65, 255, 262], "int2ap": [65, 255, 262], "parseflag": [65, 255, 262], "time2internald": [65, 255, 262], "deleteacl": [65, 255, 262, 470], "expung": [65, 255, 262], "getacl": [65, 255, 262, 468], "getannot": [65, 255, 262], "getquota": [65, 255, 262], "getquotaroot": [65, 255, 262], "login_cram_md5": [65, 255, 262], "logout": [65, 255, 262, 480, 483, 485], "lsub": [65, 255, 262], "myright": [65, 255, 262, 470], "proxyauth": [65, 255, 262], "recent": [65, 69, 83, 86, 94, 95, 99, 103, 104, 107, 109, 114, 120, 126, 132, 138, 150, 158, 166, 173, 175, 182, 189, 192, 194, 200, 217, 218, 221, 232, 233, 241, 247, 254, 255, 261, 262, 265, 273, 275, 289, 290, 299, 301, 302, 303, 305, 313, 320, 325, 342, 344, 347, 348, 351, 352, 354, 355, 359, 367, 380, 385, 386, 388, 391, 392, 393, 394, 398, 404, 406, 432, 434, 440, 444, 445, 446, 447, 450, 453, 456, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "setacl": [65, 255, 262, 468], "setannot": [65, 255, 262], "setquota": [65, 255, 262], "starttl": [65, 109, 255, 262, 275, 294, 342, 348, 357, 472, 477, 478, 485], "subscrib": [65, 109, 255, 262, 390, 432, 485], "unsubscrib": [65, 255, 262, 485], "unselect": [65, 255, 262, 484, 485], "xatom": [65, 255, 262], "protocol_vers": [65, 252, 255, 262], "utf8_en": [65, 255, 262, 480], "smtp_ssl": [65, 262, 342, 472, 478, 484, 485], "lmtp": [65, 262, 342, 472, 478, 484, 485], "smtpexcept": [65, 262, 342, 479], "smtpserverdisconnect": [65, 262, 342, 485], "smtpresponseexcept": [65, 262, 342], "smtpsenderrefus": [65, 262, 342], "smtprecipientsrefus": [65, 262, 342], "smtpdataerror": [65, 262, 342], "smtpconnecterror": [65, 262, 342], "smtpheloerror": [65, 262, 342], "smtpnotsupportederror": [65, 262, 342, 485], "smtpauthenticationerror": [65, 262, 342], "docmd": [65, 262, 342], "helo": [65, 262, 341, 342], "ehlo": [65, 262, 341, 342, 478], "ehlo_or_helo_if_need": [65, 262, 342], "has_extn": [65, 262, 342], "sendmail": [65, 94, 109, 111, 208, 215, 262, 325, 342, 455, 477, 480], "send_messag": [65, 207, 215, 262, 342, 477, 480, 485], "rfc": [65, 69, 108, 109, 111, 115, 133, 149, 152, 164, 181, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 230, 237, 242, 244, 248, 249, 250, 251, 252, 255, 260, 262, 265, 268, 272, 275, 277, 278, 294, 311, 323, 333, 341, 342, 344, 348, 353, 354, 364, 371, 397, 398, 399, 411, 412, 423, 455, 466, 468, 470, 471, 472, 473, 476, 477, 478, 480, 482, 484, 485], "4122": [65, 260, 262, 471], "safeuuid": [65, 262, 402, 485], "bytes_l": [65, 262, 402], "urn": [65, 262, 398, 402], "is_saf": [65, 262, 402, 482, 485], "getnod": [65, 262, 402, 482, 485], "uuid1": [65, 262, 402, 471, 482, 485], "uuid3": [65, 262, 402, 471], "uuid4": [65, 262, 402, 471, 485], "uuid5": [65, 262, 402, 471], "namespace_dn": [65, 262, 402, 471], "namespace_url": [65, 262, 402], "namespace_oid": [65, 262, 402], "namespace_x500": [65, 262, 402], "reserved_nc": [65, 262, 402], "rfc_4122": [65, 262, 402], "reserved_microsoft": [65, 262, 402], "reserved_futur": [65, 262, 402], "tcpserver": [65, 109, 252, 262, 273, 424, 473, 485], "udpserv": [65, 262], "unixstreamserv": [65, 262, 345, 485], "unixdatagramserv": [65, 262, 345], "forkingmixin": [65, 262, 345, 478, 482, 485], "threadingmixin": [65, 252, 262, 345, 482, 485], "forkingtcpserv": [65, 262, 345], "forkingudpserv": [65, 262, 345], "threadingtcpserv": [65, 109, 262, 345], "threadingudpserv": [65, 262, 345], "baseserv": [65, 262, 345, 478, 485], "handle_request": [65, 109, 129, 176, 262, 339, 345, 411, 424, 473], "service_act": [65, 262, 345, 478], "server_clos": [65, 262, 345, 411, 482, 485], "address_famili": [65, 262, 344, 345], "requesthandlerclass": [65, 252, 262, 345, 411], "server_address": [65, 252, 262, 345, 411], "allow_reuse_address": [65, 109, 262, 345, 424, 472], "request_queue_s": [65, 262, 345], "socket_typ": [65, 262, 345], "finish_request": [65, 262, 345], "get_request": [65, 262, 345], "handle_error": [65, 145, 262, 345, 357, 481, 485], "handle_timeout": [65, 262, 345, 472, 473], "process_request": [65, 109, 262, 345], "server_activ": [65, 262, 345, 424, 472], "server_bind": [65, 262, 345, 424, 472], "verify_request": [65, 262, 345, 485], "baserequesthandl": [65, 262, 345], "streamrequesthandl": [65, 109, 262, 345, 481, 485], "datagramrequesthandl": [65, 262, 345], "mixin": [65, 167, 175, 218, 262, 264, 367, 399, 485], "httpserver": [65, 252, 262, 339, 411], "threadinghttpserv": [65, 252, 262, 482, 485], "basehttprequesthandl": [65, 115, 249, 252, 262, 397, 411, 477, 478, 485], "client_address": [65, 252, 262, 345, 411], "close_connect": [65, 252, 262], "requestlin": [65, 252, 262], "request_vers": [65, 252, 262], "rfile": [65, 252, 262, 345], "wfile": [65, 252, 262, 345, 481, 485], "server_vers": [65, 252, 262], "sys_vers": [65, 252, 262], "error_message_format": [65, 252, 262, 479], "error_content_typ": [65, 252, 262], "messageclass": [65, 252, 262], "handle_one_request": [65, 252, 262], "handle_expect_100": [65, 252, 262], "send_error": [65, 252, 262, 479, 485], "send_respons": [65, 252, 262], "send_head": [65, 252, 262], "send_response_on": [65, 252, 262], "end_head": [65, 252, 262, 478], "flush_head": [65, 252, 262, 478], "log_request": [65, 252, 262], "log_error": [65, 252, 262], "log_messag": [65, 252, 262], "version_str": [65, 252, 262], "date_time_str": [65, 252, 262], "log_date_time_str": [65, 252, 262], "address_str": [65, 252, 262], "simplehttprequesthandl": [65, 252, 262, 339, 482, 485], "extensions_map": [65, 252, 262], "do_head": [65, 162, 252, 262], "do_get": [65, 252, 262], "cgihttprequesthandl": [65, 252, 262, 485], "cgi_directori": [65, 252, 262], "do_post": [65, 252, 262], "cooki": [65, 115, 121, 218, 242, 248, 260, 262, 348, 370, 383, 399, 470, 472, 473, 474, 480, 482, 485], "cookieerror": [65, 251, 262], "basecooki": [65, 251, 262], "simplecooki": [65, 251, 262, 485], "value_decod": [65, 251, 262], "value_encod": [65, 251, 262], "js_output": [65, 251, 262], "morsel": [65, 262, 472, 480, 482, 485], "coded_valu": [65, 251, 262, 480, 482, 485], "isreservedkey": [65, 251, 262], "outputstr": [65, 251, 262], "loaderror": [65, 250, 262], "filecookiejar": [65, 262, 485], "cookiepolici": [65, 262], "defaultcookiepolici": [65, 262, 485], "add_cookie_head": [65, 250, 262], "extract_cooki": [65, 250, 262], "set_polici": [65, 250, 262], "make_cooki": [65, 250, 262, 485], "set_cookie_if_ok": [65, 250, 262], "set_cooki": [65, 250, 262], "clear_session_cooki": [65, 250, 262], "revert": [65, 109, 176, 230, 249, 250, 262, 330, 367, 459, 473, 478, 481, 485], "delayload": [65, 250, 262], "mozillacookiejar": [65, 250, 262, 485], "lwpcookiejar": [65, 250, 262], "set_ok": [65, 250, 262], "return_ok": [65, 250, 262], "domain_return_ok": [65, 250, 262], "path_return_ok": [65, 250, 262], "netscap": [65, 183, 250, 262, 277, 407, 430, 467, 470, 472, 485], "rfc2965": [65, 250, 262], "hide_cookie2": [65, 250, 262], "blocked_domain": [65, 250, 262], "set_blocked_domain": [65, 250, 262], "is_block": [65, 250, 262], "allowed_domain": [65, 250, 262], "set_allowed_domain": [65, 250, 262], "is_not_allow": [65, 250, 262], "rfc2109_as_netscap": [65, 250, 262], "strict_domain": [65, 250, 262], "strict_rfc2965_unverifi": [65, 250, 262], "strict_ns_unverifi": [65, 250, 262], "strict_ns_domain": [65, 250, 262], "strict_ns_set_initial_dollar": [65, 250, 262], "strict_ns_set_path": [65, 250, 262], "domainstrictnodot": [65, 250, 262], "domainstrictnondomain": [65, 250, 262], "domainrfc2965match": [65, 250, 262], "domainliber": [65, 250, 262], "domainstrict": [65, 250, 262], "expir": [65, 133, 219, 250, 251, 262, 289, 331, 335, 339, 342, 344, 346, 348, 355, 370, 371, 399, 478, 485], "comment_url": [65, 250, 262], "rfc2109": [65, 250, 262], "port_specifi": [65, 250, 262], "domain_specifi": [65, 250, 262], "domain_initial_dot": [65, 250, 262], "has_nonstandard_attr": [65, 250, 262], "get_nonstandard_attr": [65, 250, 262], "set_nonstandard_attr": [65, 250, 262], "is_expir": [65, 250, 262], "rpc": [65, 90, 254, 260, 262, 268, 280, 422, 430, 468, 469, 470, 471, 472, 473, 481, 485], "serverproxi": [65, 262, 424, 480, 483, 485], "listmethod": [65, 262, 423, 424], "methodsignatur": [65, 262, 423, 424], "methodhelp": [65, 262, 423, 424], "faultcod": [65, 262, 423, 485], "faultstr": [65, 262, 423], "protocolerror": [65, 262], "errmsg": [65, 262, 423], "multical": [65, 262, 424], "simplexmlrpcserv": [65, 262, 423, 468, 470, 471, 472, 473, 474], "cgixmlrpcrequesthandl": [65, 262, 470], "simplexmlrpcrequesthandl": [65, 262, 424, 470, 473], "register_funct": [65, 262, 423, 424, 482, 485], "register_inst": [65, 262, 424], "register_introspection_funct": [65, 262, 424], "register_multicall_funct": [65, 262, 423, 424], "rpc_path": [65, 262, 424, 471], "docxmlrpcserv": [65, 262, 469, 471, 472, 474, 485], "doccgixmlrpcrequesthandl": [65, 262], "docxmlrpcrequesthandl": [65, 262, 424], "set_server_titl": [65, 262, 424], "set_server_nam": [65, 262, 424], "set_server_document": [65, 262, 424], "ipv4": [65, 107, 112, 133, 252, 260, 262, 344, 348, 472, 478, 483, 484, 485], "ipv6": [65, 107, 133, 252, 260, 262, 341, 344, 348, 367, 398, 460, 468, 472, 473, 475, 477, 478, 480, 483, 484, 485], "ip_address": [65, 107, 148, 262, 265, 344], "ip_network": [65, 107, 262, 265], "ip_interfac": [65, 107, 262, 265, 485], "ip": [65, 90, 108, 109, 133, 250, 252, 262, 273, 275, 344, 345, 348, 364, 367, 398, 399, 466, 472, 477, 478, 480, 482, 485], "ipv4address": [65, 107, 262, 265, 480, 485], "max_prefixlen": [65, 262, 265], "explod": [65, 107, 262, 265, 466, 468], "reverse_point": [65, 262, 265, 480, 485], "is_multicast": [65, 262, 265, 485], "is_priv": [65, 262, 265, 485], "is_glob": [65, 262, 265, 270, 358, 479, 485], "is_unspecifi": [65, 262, 265], "is_loopback": [65, 262, 265], "is_link_loc": [65, 262, 265], "ipv6address": [65, 107, 262, 265, 480, 484, 485], "is_site_loc": [65, 262, 265], "ipv4_map": [65, 262, 265], "scope_id": [65, 262, 265, 344, 484], "sixtofour": [65, 262, 265], "teredo": [65, 262, 265], "net": [65, 69, 72, 78, 91, 94, 115, 116, 189, 201, 242, 250, 262, 325, 334, 428, 430, 438, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 485], "ipv4network": [65, 107, 262, 265, 480, 482, 485], "network_address": [65, 262, 265], "broadcast_address": [65, 262, 265], "hostmask": [65, 107, 262, 265], "netmask": [65, 107, 262, 265, 480, 485], "with_prefixlen": [65, 262, 265], "with_netmask": [65, 262, 265], "with_hostmask": [65, 262, 265], "num_address": [65, 107, 262, 265], "prefixlen": [65, 262, 265], "address_exclud": [65, 262, 265], "subnet": [65, 262, 265, 478, 480, 485], "supernet": [65, 262, 265, 480], "subnet_of": [65, 262, 265, 482, 485], "supernet_of": [65, 262, 265, 482], "compare_network": [65, 262, 265], "ipv6network": [65, 107, 262, 265, 480, 482, 485], "ipv4interfac": [65, 107, 262, 265, 485], "ipv6interfac": [65, 107, 262, 265, 485], "v4_int_to_pack": [65, 262, 265], "v6_int_to_pack": [65, 262, 265], "summarize_address_rang": [65, 262, 265, 480, 485], "collapse_address": [65, 262, 265, 480, 485], "get_mixed_type_key": [65, 262, 265], "addressvalueerror": [65, 107, 262, 265], "netmaskvalueerror": [65, 107, 262, 265], "multimedia": [65, 260, 278, 301], "wav": [65, 147, 260, 283, 343, 410, 454], "wave_read": [65, 283], "getnchannel": [65, 123, 283, 356, 357, 405], "getsampwidth": [65, 123, 283, 356, 357, 405], "getframer": [65, 123, 283, 356, 357, 405], "getnfram": [65, 123, 283, 356, 357, 405], "getcomptyp": [65, 123, 283, 356, 357, 405], "getcompnam": [65, 123, 283, 356, 357, 405], "getparam": [65, 123, 283, 356, 357, 405, 479], "readfram": [65, 123, 283, 356, 357, 405], "rewind": [65, 123, 243, 283, 356, 357, 405], "getmark": [65, 123, 283, 356, 357, 405], "setpo": [65, 123, 229, 283, 356, 357, 388, 405], "wave_writ": [65, 283], "setnchannel": [65, 123, 283, 356, 357, 405], "setsampwidth": [65, 123, 283, 356, 357, 405, 479], "setframer": [65, 123, 283, 356, 357, 405], "setnfram": [65, 123, 283, 356, 357, 405], "setcomptyp": [65, 123, 283, 356, 357, 405], "setparam": [65, 123, 283, 356, 357, 405], "writeframesraw": [65, 123, 283, 356, 357, 405, 479], "writefram": [65, 123, 283, 356, 357, 405, 479], "rgb_to_yiq": [65, 168, 283], "yiq_to_rgb": [65, 168, 283], "rgb_to_hl": [65, 168, 283], "hls_to_rgb": [65, 168, 283], "rgb_to_hsv": [65, 168, 283], "hsv_to_rgb": [65, 168, 283], "multilingu": [65, 253, 254, 260, 485], "bindtextdomain": [65, 237, 253, 272], "bind_textdomain_codeset": [65, 237, 253, 272, 470, 483], "textdomain": [65, 237, 253, 272], "dgettext": [65, 237, 253, 272], "ngettext": [65, 237, 253], "dngettext": [65, 237, 253], "pgettext": [65, 237, 253, 483, 485], "dpgettext": [65, 237, 253], "npgettext": [65, 237, 253], "dnpgettext": [65, 237, 253], "lgettext": [65, 237, 253, 483, 485], "ldgettext": [65, 237, 253, 483], "lngettext": [65, 237, 253, 483], "ldngettext": [65, 237, 253, 483], "nulltransl": [65, 253], "_pars": [65, 237, 253], "add_fallback": [65, 237, 253], "set_output_charset": [65, 237, 253, 483], "gnutransl": [65, 253], "catalog": [65, 78, 253, 466, 467, 469, 485], "localeconv": [65, 253, 272, 351, 456, 481, 482, 485], "d_t_fmt": [65, 253, 272], "d_fmt": [65, 253, 272], "t_fmt": [65, 253, 272], "t_fmt_ampm": [65, 253, 272], "radixchar": [65, 253, 272], "thousep": [65, 253, 272], "yesexpr": [65, 253, 272], "noexpr": [65, 253, 272], "crncystr": [65, 253, 272], "era": [65, 253, 272, 471], "era_d_t_fmt": [65, 253, 272], "era_d_fmt": [65, 253, 272], "era_t_fmt": [65, 253, 272], "alt_digit": [65, 253, 272], "getdefaultlocal": [65, 253, 272, 459], "getlocal": [65, 189, 253, 272, 485], "getpreferredencod": [65, 97, 102, 181, 183, 232, 253, 264, 272, 299, 355, 465, 482, 485], "resetlocal": [65, 253, 272], "strcoll": [65, 113, 233, 253, 272, 477], "strxfrm": [65, 97, 113, 253, 272], "format_str": [65, 253, 272, 352, 456, 471, 480, 482, 485], "currenc": [65, 192, 253, 272, 471, 485], "deloc": [65, 253, 272, 480, 485], "atof": [65, 253, 272, 470, 471], "atoi": [65, 82, 253, 272], "lc_collat": [65, 253, 272], "lc_time": [65, 253, 272], "lc_monetari": [65, 253, 272, 485], "lc_messag": [65, 237, 253, 272], "lc_numer": [65, 253, 272, 351, 480, 481, 482, 485], "lc_all": [65, 183, 237, 253, 272, 367, 456, 459, 482, 485], "char_max": [65, 253, 272], "tip": [65, 95, 232, 253, 254, 466, 473, 485], "caveat": [65, 121, 189, 198, 253, 257, 258, 261, 314, 317, 393, 432, 440], "dcgettext": [65, 237, 253, 272], "turtl": [65, 162, 229, 254, 260, 374, 472, 474, 477, 485], "screen": [65, 95, 102, 104, 106, 114, 162, 183, 185, 229, 254, 326, 355, 374, 380, 381, 383, 466, 468, 469, 472, 476, 477, 480, 484, 485], "turtlescreen": [65, 229], "rawturtl": [65, 229], "motion": [65, 183, 229, 376], "bk": [65, 229, 388], "rt": [65, 156, 229, 232, 241, 276, 367, 388, 485], "setposit": [65, 229, 388], "setx": [65, 103, 229, 232, 388, 465], "seti": [65, 229, 388], "sethead": [65, 229, 388], "seth": [65, 229, 388, 485], "circl": [65, 162, 218, 229, 281, 388, 390, 472], "stamp": [65, 189, 229, 388, 469, 470, 485], "clearstamp": [65, 229, 388], "toward": [65, 95, 152, 192, 200, 203, 212, 225, 228, 229, 232, 273, 281, 351, 369, 371, 388, 432, 467, 469, 471, 472, 479, 484, 485], "xcor": [65, 229, 388], "ycor": [65, 229, 388], "distanc": [65, 126, 161, 162, 229, 276, 281, 350, 374, 377, 388, 483, 485], "measur": [65, 102, 103, 110, 139, 145, 147, 161, 191, 192, 196, 229, 233, 260, 305, 314, 328, 340, 345, 350, 371, 373, 374, 377, 386, 445, 466, 469, 470, 471, 472, 473, 478, 479, 482, 483, 484, 485], "pen": [65, 229], "draw": [65, 102, 162, 183, 229, 254, 324, 381, 472, 485], "pendown": [65, 229, 388], "pd": [65, 229, 388], "penup": [65, 229, 388], "pu": [65, 229, 388], "pensiz": [65, 229, 388], "isdown": [65, 229, 388], "color": [65, 95, 97, 109, 162, 166, 168, 183, 195, 218, 229, 247, 260, 337, 373, 374, 380, 381, 383, 409, 432, 445, 446, 476, 477, 481, 482, 485], "pencolor": [65, 229, 388], "fillcolor": [65, 229, 388], "begin_fil": [65, 229, 388], "end_fil": [65, 229, 388], "hideturtl": [65, 229, 388], "ht": [65, 184, 229, 324, 350, 388], "showturtl": [65, 229, 388], "st": [65, 229, 388, 469, 481, 482, 485], "isvis": [65, 229, 388], "resizemod": [65, 229, 388], "shapes": [65, 229, 388], "turtles": [65, 229, 388], "shearfactor": [65, 229, 388], "tilt": [65, 229, 388], "settiltangl": [65, 229, 388], "tiltangl": [65, 229, 388], "shapetransform": [65, 229, 388], "get_shapepoli": [65, 229, 388], "onreleas": [65, 229, 388], "ondrag": [65, 229, 388], "begin_poli": [65, 229, 388], "end_poli": [65, 229, 388], "get_poli": [65, 229, 388], "getturtl": [65, 229, 388], "getpen": [65, 229, 388], "getscreen": [65, 229, 388], "setundobuff": [65, 229, 388], "undobufferentri": [65, 229, 388], "bgcolor": [65, 229, 388], "bgpic": [65, 229, 388], "clearscreen": [65, 229, 388], "resetscreen": [65, 229, 388], "screensiz": [65, 229, 388], "setworldcoordin": [65, 229, 388], "anim": [65, 218, 229, 237, 381, 450, 472, 480], "tracer": [65, 229, 384, 388, 472, 485], "onkey": [65, 229, 388], "onkeyreleas": [65, 229, 388], "onkeypress": [65, 229, 388], "onclick": [65, 229, 388], "onscreenclick": [65, 229, 388], "ontim": [65, 229, 388], "mainloop": [65, 91, 112, 229, 254, 374, 381, 388, 485], "textinput": [65, 229, 388, 485], "numinput": [65, 229, 388, 485], "colormod": [65, 229, 388], "getcanva": [65, 229, 388], "getshap": [65, 229, 388], "register_shap": [65, 229, 388], "addshap": [65, 229, 388], "window_height": [65, 229, 388], "window_width": [65, 229, 388], "bye": [65, 162, 176, 229, 255, 294, 388, 478], "exitonclick": [65, 229, 388], "rawpen": [65, 229, 388], "scrolledcanva": [65, 229, 388], "addcompon": [65, 229, 388], "vec2d": [65, 229, 388, 485], "write_docstringdict": [65, 229, 388], "cmdloop": [65, 162, 229], "onecmd": [65, 162, 229], "emptylin": [65, 162, 229], "completedefault": [65, 162, 229], "precmd": [65, 162, 229], "postcmd": [65, 162, 229], "preloop": [65, 162, 229], "postloop": [65, 162, 229], "identchar": [65, 162, 229], "lastcmd": [65, 162, 229], "cmdqueue": [65, 162, 229], "intro": [65, 162, 229, 348, 463, 473], "doc_head": [65, 162, 229], "misc_head": [65, 162, 229], "undoc_head": [65, 162, 229], "ruler": [65, 162, 229], "use_rawinput": [65, 162, 229], "get_token": [65, 229, 337], "push_token": [65, 229, 337], "read_token": [65, 229, 337], "sourcehook": [65, 229, 337], "push_sourc": [65, 229, 337], "pop_sourc": [65, 229, 337], "error_lead": [65, 229, 337], "wordchar": [65, 229, 337], "escapedquot": [65, 229, 337], "whitespace_split": [65, 229, 337], "infil": [65, 126, 128, 146, 229, 268, 307, 337, 384, 456, 475, 477, 485], "instream": [65, 229, 337], "punctuation_char": [65, 229, 337, 481, 485], "tcl": [65, 91, 254, 260, 373, 380, 381, 456, 460, 463, 465, 466, 469, 472, 473, 476, 477, 480, 481, 483, 484, 485], "master": [65, 111, 114, 195, 200, 298, 299, 301, 305, 315, 325, 373, 374, 375, 378, 379, 381, 388, 472, 485], "children": [65, 95, 108, 128, 138, 270, 273, 289, 299, 302, 318, 320, 328, 367, 373, 374, 381, 392, 393, 394, 414, 415, 416, 417, 426, 466, 473, 482, 485], "life": [65, 70, 97, 100, 173, 233, 290, 305, 347, 363, 373, 414, 426, 445, 465, 466, 472, 483, 485], "concept": [65, 75, 102, 104, 107, 108, 110, 114, 116, 122, 144, 173, 192, 201, 251, 258, 264, 289, 307, 315, 347, 351, 363, 370, 373, 390, 394, 416, 417, 431, 436, 468, 469, 474, 476, 478, 479, 480, 485], "handi": [65, 69, 95, 102, 103, 110, 111, 112, 116, 120, 157, 173, 182, 196, 218, 298, 351, 373, 393, 466, 470], "packer": [65, 357, 373], "coupl": [65, 73, 78, 79, 85, 95, 100, 109, 110, 112, 116, 126, 133, 212, 215, 216, 273, 289, 298, 339, 373, 393, 394, 399, 413, 465, 479, 481, 482, 485], "createfilehandl": [65, 373, 374, 485], "deletefilehandl": [65, 373, 374], "colorchoos": [65, 260, 373, 374, 485], "choos": [65, 69, 83, 85, 94, 95, 99, 100, 104, 109, 110, 111, 112, 114, 116, 126, 164, 169, 200, 212, 218, 232, 233, 242, 252, 258, 260, 273, 281, 290, 298, 301, 305, 314, 347, 348, 354, 359, 370, 373, 374, 380, 393, 402, 417, 436, 465, 468, 469, 473, 477, 478, 479, 482, 485], "dialog": [65, 87, 102, 254, 260, 287, 298, 357, 367, 373, 374, 380, 388, 465, 476, 479, 480, 481, 482, 483, 484, 485], "chooser": [65, 373, 375], "askcolor": [65, 373, 375], "font": [65, 109, 114, 173, 219, 254, 260, 369, 373, 374, 380, 381, 388, 476, 481, 482, 484, 485], "bold": [65, 102, 157, 183, 373, 374, 377], "ital": [65, 157, 183, 373, 377], "roman": [65, 114, 373, 377, 391, 469, 485], "cget": [65, 373, 377, 381], "metric": [65, 95, 373, 377, 485], "nametofont": [65, 373, 377, 485], "simpledialog": [65, 373, 374, 485], "askfloat": [65, 195, 373], "askinteg": [65, 195, 373, 485], "askstr": [65, 195, 373], "buttonbox": [65, 195, 373, 380], "filedialog": [65, 373, 374], "askopenfil": [65, 195, 373], "asksaveasfil": [65, 195, 373], "askopenfilenam": [65, 195, 373], "asksaveasfilenam": [65, 195, 373], "askdirectori": [65, 195, 373], "savea": [65, 195, 373], "cancel_command": [65, 195, 373], "dirs_double_ev": [65, 195, 373], "dirs_select_ev": [65, 195, 373], "files_double_ev": [65, 195, 373], "files_select_ev": [65, 195, 373], "filter_command": [65, 195, 373], "get_filt": [65, 195, 373], "get_select": [65, 195, 373], "ok_ev": [65, 195, 373], "set_filt": [65, 195, 373], "set_select": [65, 195, 373], "loadfiledialog": [65, 195, 373], "ok_command": [65, 195, 373], "savefiledialog": [65, 195, 373], "commondialog": [65, 373, 374, 375], "messagebox": [65, 182, 195, 260, 373, 374, 485], "showinfo": [65, 373, 378], "showwarn": [65, 321, 373, 378, 404, 472, 485], "showerror": [65, 373, 378], "askquest": [65, 373, 378], "askokcancel": [65, 373, 378], "askretrycancel": [65, 373, 378], "askyesno": [65, 373, 378], "askyesnocancel": [65, 373, 378], "scrolledtext": [65, 260, 373, 374], "vbar": [65, 270, 373, 379, 382], "dnd": [65, 260, 373, 374], "drag": [65, 260, 373, 374, 380, 381, 388, 476, 485], "dndhandler": [65, 373, 376], "on_mot": [65, 373, 376], "on_releas": [65, 373, 376], "dnd_start": [65, 373, 376], "scrollabl": [65, 254, 373, 380], "instat": [65, 373, 381], "combobox": [65, 373, 380], "spinbox": [65, 373, 380, 482, 483, 485], "notebook": [65, 373, 380, 483, 485], "enable_travers": [65, 373, 381], "progressbar": [65, 373], "sizegrip": [65, 373], "treeview": [65, 373, 483, 485], "bbox": [65, 373, 381], "get_children": [65, 270, 358, 373, 381], "set_children": [65, 373, 381], "focus": [65, 91, 95, 112, 115, 189, 195, 215, 254, 363, 373, 374, 381, 388, 398, 471, 473, 477, 478, 479, 481, 485], "identify_row": [65, 373, 381], "identify_column": [65, 373, 381], "identify_region": [65, 373, 381], "identify_el": [65, 373, 381], "prev": [65, 183, 373, 381], "reattach": [65, 373, 381], "selection_set": [65, 373, 381, 483, 485], "selection_add": [65, 373, 381, 485], "selection_remov": [65, 373, 381, 485], "selection_toggl": [65, 373, 381, 485], "tag_bind": [65, 373, 381], "tag_configur": [65, 373, 381], "tag_ha": [65, 373, 381, 485], "xview": [65, 373, 381], "yview": [65, 373, 381], "element_cr": [65, 373, 381], "element_nam": [65, 373, 381], "element_opt": [65, 373, 381], "theme_cr": [65, 373, 381], "theme_set": [65, 373, 381], "theme_nam": [65, 373, 381], "theme_us": [65, 373, 381], "tix": [65, 91, 260, 373, 374, 469, 481, 485], "balloon": [65, 373, 380], "labelentri": [65, 373, 380], "labelfram": [65, 373, 380, 381], "meter": [65, 218, 373, 380], "optionmenu": [65, 373, 380, 485], "popupmenu": [65, 373, 380], "stdbuttonbox": [65, 373, 380], "dirlist": [65, 373, 380], "dirtre": [65, 373, 380], "dirselectdialog": [65, 373, 380], "dirselectbox": [65, 373, 380], "exfileselectbox": [65, 373, 380], "fileselectbox": [65, 373, 380], "fileentri": [65, 373, 380], "hierarch": [65, 108, 252, 257, 273, 274, 373, 374, 381, 398, 416, 417, 424, 436], "listbox": [65, 373, 381, 485], "hlist": [65, 373, 380, 485], "checklist": [65, 373, 380], "tabular": [65, 181, 373], "tlist": [65, 373, 380], "panedwindow": [65, 373, 380, 381, 485], "listnotebook": [65, 373, 380], "inputon": [65, 373, 380], "geometri": [65, 373, 374, 379, 381, 485], "tixcommand": [65, 373, 380], "tix_configur": [65, 373, 380], "tix_cget": [65, 373, 380], "tix_getbitmap": [65, 373, 380], "tix_addbitmapdir": [65, 373, 380], "tix_filedialog": [65, 373, 380], "tix_getimag": [65, 373, 380], "tix_option_get": [65, 373, 380], "tix_resetopt": [65, 373, 380], "menu": [65, 70, 102, 373, 374, 380, 388, 432, 465, 471, 475, 476, 477, 481, 482, 483, 484, 485], "menus": [65, 373, 374, 485], "calltip": [65, 373, 485], "newtyp": [65, 193, 481, 485], "nomin": [65, 128, 193, 350, 485], "noreturn": [65, 193, 390, 485], "classvar": [65, 187, 193, 390, 481, 485], "typeguard": [65, 193, 390, 476, 485], "typevar": [65, 193, 351, 390, 485], "paramspec": [65, 193, 351, 390, 476, 485], "paramspecarg": [65, 193, 390, 476, 485], "paramspeckwarg": [65, 193, 390, 476, 485], "anystr": [65, 193, 390], "runtime_check": [65, 193, 390, 476, 483, 485], "typeddict": [65, 193, 390, 476, 483, 485], "__total__": [65, 193, 390], "__required_keys__": [65, 193, 390, 485], "__optional_keys__": [65, 193, 390, 485], "textio": [65, 193, 258, 390, 485], "binaryio": [65, 193, 258, 390, 485], "abstractset": [65, 193, 390], "asynccontextmanag": [65, 175, 193, 321, 390, 394, 432, 482, 485], "supportsab": [65, 193, 390], "supportsbyt": [65, 193, 390], "supportscomplex": [65, 193, 390], "supportsfloat": [65, 193, 390], "supportsindex": [65, 193, 390, 483, 485], "supportsint": [65, 193, 390, 483], "supportsround": [65, 193, 390], "no_type_check": [65, 193, 390], "no_type_check_decor": [65, 193, 390], "type_check_on": [65, 193, 390, 485], "get_type_hint": [65, 97, 193, 390, 482, 484, 485], "get_arg": [65, 193, 390, 476, 483, 484, 485], "get_origin": [65, 193, 390, 483, 485], "is_typeddict": [65, 193, 390, 476, 485], "forwardref": [65, 193, 390, 485], "type_check": [65, 98, 193, 258, 298, 357, 390, 481, 485], "onlin": [65, 110, 193, 260, 374, 388, 403, 418, 430, 468, 472], "recogn": [65, 69, 78, 83, 95, 103, 107, 111, 126, 129, 162, 164, 173, 183, 193, 197, 203, 210, 225, 230, 235, 242, 256, 257, 258, 264, 268, 272, 282, 288, 298, 303, 305, 325, 337, 339, 352, 367, 371, 374, 382, 390, 393, 398, 399, 420, 439, 440, 465, 466, 474, 477, 478, 479, 480, 485], "dont_accept_true_for_1": [65, 193, 200], "dont_accept_blanklin": [65, 193, 200], "normalize_whitespac": [65, 193, 200], "ignore_exception_detail": [65, 193, 200, 473], "comparison_flag": [65, 193, 200], "report_udiff": [65, 193, 200, 470], "report_cdiff": [65, 193, 200, 470], "report_ndiff": [65, 193, 200, 470], "report_only_first_failur": [65, 193, 200], "fail_fast": [65, 193, 200, 479], "reporting_flag": [65, 193, 200], "register_optionflag": [65, 193, 200], "testfil": [65, 193, 200, 471, 485], "testmod": [65, 193, 200, 367, 455, 470, 475], "run_docstring_exampl": [65, 193, 200], "docfilesuit": [65, 193, 200, 471], "doctestsuit": [65, 193, 200, 392, 469, 480, 485], "set_unittest_reportflag": [65, 193, 200], "exc_msg": [65, 193, 200], "doctestfind": [65, 193, 470], "doctestpars": [65, 193], "get_doctest": [65, 193, 200], "get_exampl": [65, 193, 200], "doctestrunn": [65, 193, 470], "report_start": [65, 193, 200], "report_success": [65, 193, 200], "report_failur": [65, 193, 200], "report_unexpected_except": [65, 193, 200], "summar": [65, 103, 110, 114, 192, 193, 200, 264, 265, 336, 350, 351, 392, 431, 434, 436, 470, 477], "outputcheck": [65, 193, 470], "output_differ": [65, 193, 200], "script_from_exampl": [65, 193, 200], "testsourc": [65, 193, 200], "debug_src": [65, 193, 200], "debugrunn": [65, 193, 200], "doctestfailur": [65, 193, 200], "got": [65, 83, 115, 119, 133, 141, 143, 193, 200, 273, 289, 342, 347, 388, 399, 434, 445, 459, 471, 475, 483, 485], "unexpectedexcept": [65, 193, 200], "soapbox": [65, 193], "discoveri": [65, 193, 200, 342, 423, 477, 479, 480, 485], "organ": [65, 94, 98, 104, 108, 109, 111, 193, 200, 264, 348, 430, 436, 469, 484, 485], "skipif": [65, 193, 367, 392], "skipunless": [65, 193, 392, 475], "expectedfailur": [65, 193, 367, 392, 475, 485], "skiptest": [65, 193, 367, 392, 473, 479, 485], "subtest": [65, 193, 479, 485], "testcas": [65, 193, 200, 367, 392, 393, 394, 430, 455, 473, 475, 477, 478, 479, 483, 485], "teardown": [65, 193, 200, 367, 392, 393, 394, 473, 485], "setupclass": [65, 193, 473, 483, 485], "teardownclass": [65, 193, 473, 485], "assertequ": [65, 118, 193, 367, 392, 393, 394, 455, 473, 477, 479, 483, 485], "assertnotequ": [65, 118, 193, 392, 477], "asserttru": [65, 118, 193, 392, 473, 477], "assertfals": [65, 118, 193, 392, 473], "asserti": [65, 193, 392, 394, 473], "assertisnot": [65, 193, 392, 473], "assertisnon": [65, 193, 392, 473, 475], "assertisnotnon": [65, 193, 392, 473, 475], "assertin": [65, 193, 392, 473], "assertnotin": [65, 193, 392, 473], "assertisinst": [65, 193, 392, 473], "assertnotisinst": [65, 193, 392, 473], "assertrais": [65, 118, 193, 392, 455, 473, 475, 478, 485], "assertraisesregex": [65, 193, 392, 478, 485], "assertwarn": [65, 193, 392, 477, 478, 485], "assertwarnsregex": [65, 193, 392, 477, 478, 485], "assertlog": [65, 193, 392, 476, 479, 485], "assertnolog": [65, 193, 392, 476, 485], "assertalmostequ": [65, 118, 193, 392, 473, 477, 485], "assertnotalmostequ": [65, 118, 193, 392, 473, 477, 485], "assertgreat": [65, 193, 392, 473], "assertgreaterequ": [65, 193, 392, 473], "assertless": [65, 193, 392, 473], "assertlessequ": [65, 193, 392, 473], "assertregex": [65, 193, 392, 477, 485], "assertnotregex": [65, 193, 392], "assertcountequ": [65, 193, 392, 477], "addtypeequalityfunc": [65, 193, 392, 473], "assertmultilineequ": [65, 193, 392, 473], "assertsequenceequ": [65, 193, 392, 473, 475, 485], "assertlistequ": [65, 193, 392, 473, 475, 485], "asserttupleequ": [65, 193, 392, 473, 475, 485], "assertsetequ": [65, 193, 392, 473, 475], "assertdictequ": [65, 193, 392, 473, 475], "failureexcept": [65, 193, 200, 392], "longmessag": [65, 115, 193, 252, 392, 473, 485], "maxdiff": [65, 193, 392, 477], "counttestcas": [65, 193, 392], "defaulttestresult": [65, 193, 392], "shortdescript": [65, 193, 392, 485], "addcleanup": [65, 193, 392, 393, 394, 473, 483], "docleanup": [65, 193, 392, 473], "addclasscleanup": [65, 193, 392, 483, 485], "doclasscleanup": [65, 193, 392], "isolatedasynciotestcas": [65, 193, 392, 483, 485], "asyncsetup": [65, 193, 392, 483], "asyncteardown": [65, 193, 392, 483], "addasynccleanup": [65, 193, 392], "functiontestcas": [65, 193, 392], "testsuit": [65, 193, 200, 367, 392, 469, 479, 480, 485], "addtest": [65, 193, 200, 392], "testload": [65, 193, 367, 392, 393, 473, 480, 485], "loadtestsfromtestcas": [65, 193, 392, 485], "loadtestsfrommodul": [65, 193, 367, 392, 480, 485], "loadtestsfromnam": [65, 193, 392, 473], "gettestcasenam": [65, 193, 392], "discov": [65, 110, 112, 120, 189, 193, 203, 212, 251, 367, 392, 419, 467, 468, 469, 473, 477, 479, 485], "testmethodprefix": [65, 193, 392], "sorttestmethodsus": [65, 193, 392], "suiteclass": [65, 193, 392, 473], "testnamepattern": [65, 193, 392], "testresult": [65, 193, 200, 392, 473, 475, 478, 485], "unexpectedsuccess": [65, 193, 392], "shouldstop": [65, 193, 392], "testsrun": [65, 193, 392], "failfast": [65, 193, 392, 473, 485], "tb_local": [65, 193, 392], "wassuccess": [65, 193, 392], "starttest": [65, 193, 392], "stoptest": [65, 193, 392], "starttestrun": [65, 193, 392, 473, 485], "stoptestrun": [65, 193, 392, 473, 485], "adderror": [65, 193, 392], "addfailur": [65, 193, 392], "addsuccess": [65, 193, 392], "addskip": [65, 193, 392], "addexpectedfailur": [65, 193, 392], "addunexpectedsuccess": [65, 193, 392], "addsubtest": [65, 193, 392], "texttestresult": [65, 193, 392, 485], "defaulttestload": [65, 193, 392], "texttestrunn": [65, 193, 392, 485], "_makeresult": [65, 193, 392], "load_test": [65, 193, 200, 367, 480, 485], "fixtur": [65, 193, 473], "setupmodul": [65, 193, 473, 483, 485], "teardownmodul": [65, 193, 473, 485], "addmodulecleanup": [65, 193, 392, 483, 485], "domodulecleanup": [65, 193, 392], "installhandl": [65, 193, 392], "registerresult": [65, 193, 392], "removeresult": [65, 193, 392], "assert_cal": [65, 193, 393, 481, 485], "assert_called_onc": [65, 193, 393, 481, 485], "assert_called_with": [65, 193, 393, 394, 485], "assert_called_once_with": [65, 193, 393, 394, 485], "assert_any_cal": [65, 193, 393], "assert_has_cal": [65, 193, 393, 394, 485], "assert_not_cal": [65, 193, 393, 480, 485], "reset_mock": [65, 193, 393, 481, 485], "mock_add_spec": [65, 193, 393], "attach_mock": [65, 193, 393, 394, 485], "configure_mock": [65, 193, 393, 394, 485], "_get_child_mock": [65, 193, 393, 394], "call_count": [65, 193, 393, 394], "return_valu": [65, 150, 193, 197, 393, 394, 477, 479, 481, 485], "side_effect": [65, 193, 393, 394, 481, 485], "call_arg": [65, 193, 393, 394, 485], "call_args_list": [65, 193, 393, 394], "method_cal": [65, 193, 393, 394], "mock_cal": [65, 193, 393, 394, 485], "noncallablemock": [65, 193, 393, 485], "propertymock": [65, 193, 393], "asyncmock": [65, 193, 393, 394, 483, 485], "assert_await": [65, 193, 393], "assert_awaited_onc": [65, 193, 393, 394], "assert_awaited_with": [65, 193, 393], "assert_awaited_once_with": [65, 193, 393], "assert_any_await": [65, 193, 393], "assert_has_await": [65, 193, 393, 485], "assert_not_await": [65, 193, 393], "await_count": [65, 193, 393], "await_arg": [65, 193, 393], "await_args_list": [65, 193, 393, 485], "patcher": [65, 193, 394, 485], "stopal": [65, 193, 393, 485], "test_prefix": [65, 193], "magicmock": [65, 193, 480, 485], "noncallablemagicmock": [65, 193, 393], "call_list": [65, 193, 393, 394], "create_autospec": [65, 193, 485], "filter_dir": [65, 193], "mock_open": [65, 193, 479, 485], "autospecc": [65, 193, 485], "seal": [65, 193, 222, 477, 482, 485], "cope": [65, 193, 470, 485], "2to3": [65, 69, 97, 193, 260, 472, 473, 474, 477, 485], "fixer": [65, 193, 485], "lib2to3": [65, 97, 193, 484, 485], "regress": [65, 88, 95, 100, 193, 200, 260, 268, 350, 473, 479, 480, 485], "testfail": [65, 193, 367], "resourcedeni": [65, 193, 367], "is_jython": [65, 193, 367], "is_android": [65, 193, 367, 485], "unix_shel": [65, 193, 367, 485], "loopback_timeout": [65, 193, 367, 485], "internet_timeout": [65, 193, 367, 485], "short_timeout": [65, 193, 367, 485], "long_timeout": [65, 193, 367, 485], "pgo": [65, 193, 367, 460, 472, 481, 484, 485], "pipe_max_s": [65, 193, 367], "sock_max_s": [65, 193, 367], "test_support_dir": [65, 193, 367], "test_home_dir": [65, 193, 367], "test_data_dir": [65, 193, 367], "max_py_ssize_t": [65, 193, 367], "max_memus": [65, 193, 367], "real_max_memus": [65, 193, 367], "missing_c_docstr": [65, 193, 367], "have_docstr": [65, 193, 367], "test_http_url": [65, 193, 367, 485], "always_eq": [65, 193, 367], "never_eq": [65, 193, 367], "smallest": [65, 104, 114, 189, 192, 193, 243, 281, 350, 351, 359, 367, 374, 386, 456, 469, 470, 471, 472, 485], "is_resource_en": [65, 193, 367], "python_is_optim": [65, 193, 367], "with_pymalloc": [65, 193, 367], "sortdict": [65, 193, 367], "findfil": [65, 193, 367, 485], "match_test": [65, 193, 367, 386], "set_match_test": [65, 193, 367], "run_unittest": [65, 193, 367, 485], "run_doctest": [65, 193, 367, 386], "check_impl_detail": [65, 193, 367], "set_memlimit": [65, 193, 367], "record_original_stdout": [65, 193, 367], "get_original_stdout": [65, 193, 367], "args_from_interpreter_flag": [65, 193, 367], "optim_args_from_interpreter_flag": [65, 193, 367], "captured_stdin": [65, 193, 367], "captured_stdout": [65, 193, 367], "captured_stderr": [65, 193, 367, 485], "disable_faulthandl": [65, 193, 367], "gc_collect": [65, 193, 367], "disable_gc": [65, 193, 367], "swap_attr": [65, 193, 367, 485], "swap_item": [65, 193, 367, 485], "print_warn": [65, 193, 367], "wait_process": [65, 193, 367, 485], "calcobjs": [65, 193, 367], "calcvobjs": [65, 193, 367], "checksizeof": [65, 193, 367], "anticipate_failur": [65, 193, 367], "system_must_validate_cert": [65, 193, 367], "run_with_local": [65, 193, 367], "run_with_tz": [65, 193, 367], "requires_freebsd_vers": [65, 193, 367], "requires_linux_vers": [65, 193, 367], "requires_mac_vers": [65, 193, 367], "requires_ieee_754": [65, 193, 367], "requires_zlib": [65, 193, 367], "requires_gzip": [65, 193, 367], "requires_bz2": [65, 193, 367], "requires_lzma": [65, 193, 367], "requires_resourc": [65, 193, 367], "requires_docstr": [65, 193, 367], "cpython_on": [65, 193, 367], "impl_detail": [65, 193, 367], "no_trac": [65, 193, 367], "refcount_test": [65, 193, 367], "bigmemtest": [65, 193, 367], "bigaddrspacetest": [65, 193, 367], "check_syntax_error": [65, 193, 367], "open_urlresourc": [65, 193, 367], "reap_children": [65, 193, 367], "get_attribut": [65, 193, 367], "catch_unraisable_except": [65, 193, 367, 485], "load_package_test": [65, 193, 367, 485], "detect_api_mismatch": [65, 193, 367], "run_in_subinterp": [65, 193, 367], "check_free_after_iter": [65, 193, 367], "missing_compiler_execut": [65, 193, 367, 485], "check__all__": [65, 193, 367, 485], "skip_if_broken_multiprocessing_synchron": [65, 193, 367, 485], "check_disallow_instanti": [65, 193, 367], "adjust_int_max_str_digit": [65, 193, 367], "suppresscrashreport": [65, 193, 367], "savesign": [65, 193, 367], "matcher": [65, 193, 367, 394], "match_valu": [65, 193, 367], "basictestrunn": [65, 193, 367], "socket_help": [65, 193, 260], "ipv6_en": [65, 193, 367], "find_unused_port": [65, 193, 367, 485], "bind_port": [65, 193, 367], "bind_unix_socket": [65, 193, 367], "skip_unless_bind_unix_socket": [65, 193, 367, 485], "transient_internet": [65, 193, 367], "script_help": [65, 193, 260, 485], "interpreter_requires_environ": [65, 193, 367], "run_python_until_end": [65, 193, 367, 485], "assert_python_ok": [65, 193, 367, 485], "assert_python_failur": [65, 193, 367, 485], "spawn_python": [65, 193, 367], "kill_python": [65, 193, 367], "make_script": [65, 193, 367], "make_zip_script": [65, 193, 367], "make_pkg": [65, 193, 367], "make_zip_pkg": [65, 193, 367], "bytecode_help": [65, 193, 260, 485], "bytecodetestcas": [65, 193, 367], "get_disassembly_as_str": [65, 193, 367], "assertinbytecod": [65, 193, 367], "assertnotinbytecod": [65, 193, 367, 485], "threading_help": [65, 193, 260], "reap_thread": [65, 193, 367], "start_thread": [65, 109, 193, 367, 485], "threading_cleanup": [65, 193, 367, 485], "threading_setup": [65, 193, 367, 485], "wait_threads_exit": [65, 193, 367], "catch_threading_except": [65, 193, 367, 485], "os_help": [65, 193, 260], "fs_nonascii": [65, 193, 367], "savedcwd": [65, 193, 367], "testfn": [65, 193, 367, 485], "testfn_nonascii": [65, 193, 367], "testfn_unencod": [65, 193, 367], "testfn_undecod": [65, 193, 367], "testfn_unicod": [65, 193, 367], "environmentvarguard": [65, 193, 367, 472], "fakepath": [65, 193, 367], "can_symlink": [65, 193, 367], "can_xattr": [65, 193, 367], "change_cwd": [65, 193, 367], "create_empty_fil": [65, 193, 367], "fd_count": [65, 193, 367], "fs_is_case_insensit": [65, 193, 367], "make_bad_fd": [65, 193, 367], "skip_unless_symlink": [65, 193, 367], "skip_unless_xattr": [65, 193, 367], "temp_cwd": [65, 193, 367, 485], "temp_dir": [65, 193, 367], "temp_umask": [65, 193, 367], "import_help": [65, 193, 260, 485], "import_fresh_modul": [65, 193, 367, 485], "import_modul": [65, 95, 109, 193, 232, 257, 274, 286, 330, 367, 432, 436, 440, 473, 478, 485], "modules_setup": [65, 193, 367], "modules_cleanup": [65, 193, 367], "make_legacy_pyc": [65, 193, 367, 485], "cleanimport": [65, 193, 367], "dirsonsyspath": [65, 193, 367], "warnings_help": [65, 193, 260], "check_no_resource_warn": [65, 193, 367, 485], "check_syntax_warn": [65, 193, 367, 485], "check_warn": [65, 193, 367, 472], "warningsrecord": [65, 193, 367], "bdbquit": [65, 150, 191], "deletem": [65, 150, 191], "bpformat": [65, 150, 191], "bpprint": [65, 150, 191], "cond": [65, 143, 150, 191, 359, 471], "bpbynumb": [65, 150, 191], "bplist": [65, 150, 191], "trace_dispatch": [65, 150, 191], "dispatch_lin": [65, 150, 191], "dispatch_cal": [65, 150, 191], "dispatch_return": [65, 150, 191], "dispatch_except": [65, 150, 191], "is_skipped_lin": [65, 150, 191], "stop_her": [65, 150, 191], "break_her": [65, 150, 191], "break_anywher": [65, 150, 191], "user_cal": [65, 150, 191], "user_lin": [65, 150, 191], "user_return": [65, 150, 191], "user_except": [65, 150, 191], "do_clear": [65, 150, 191], "set_step": [65, 150, 191], "set_next": [65, 150, 191], "set_return": [65, 150, 191], "set_until": [65, 150, 191], "set_trac": [65, 150, 191, 200, 232, 303, 359, 459, 482, 485], "set_continu": [65, 150, 191], "set_quit": [65, 150, 191], "set_break": [65, 150, 191], "clear_break": [65, 150, 191], "clear_bpbynumb": [65, 150, 191], "clear_all_file_break": [65, 150, 191], "clear_all_break": [65, 150, 191], "get_bpbynumb": [65, 150, 191], "get_break": [65, 150, 191], "get_file_break": [65, 150, 191], "get_all_break": [65, 150, 191], "format_stack_entri": [65, 150, 191, 485], "runev": [65, 150, 191, 303], "runctx": [65, 150, 191, 314, 384], "runcal": [65, 150, 191, 303, 314, 483], "checkfuncnam": [65, 150, 191], "dump_traceback": [65, 191, 221, 480, 485], "is_en": [65, 191, 221], "dump_traceback_lat": [65, 191, 221, 480, 485], "cancel_dump_traceback_lat": [65, 191, 221], "post_mortem": [65, 191, 200, 303, 472], "pm": [65, 189, 191, 200, 272, 303, 359, 371], "introduct": [65, 75, 86, 102, 104, 107, 119, 120, 126, 139, 191, 200, 265, 289, 344, 348, 372, 390, 394, 466, 467, 468, 470, 479, 481, 485], "create_stat": [65, 191, 314], "print_stat": [65, 191, 314], "dump_stat": [65, 191, 314], "strip_dir": [65, 69, 191, 314], "sort_stat": [65, 191, 314], "reverse_ord": [65, 191, 314], "print_cal": [65, 191, 314], "print_calle": [65, 191, 314], "get_stats_profil": [65, 191, 314], "default_tim": [65, 191, 372], "autorang": [65, 191, 372, 481, 485], "print_exc": [65, 109, 191, 321, 372, 385, 485], "runfunc": [65, 191, 384, 483], "coverageresult": [65, 191, 384], "write_result": [65, 191, 384], "peak": [65, 147, 191, 471, 484], "clear_trac": [65, 191, 386], "get_object_traceback": [65, 191, 386, 485], "get_traceback_limit": [65, 191, 386], "get_traced_memori": [65, 191, 386], "reset_peak": [65, 191, 386, 484], "get_tracemalloc_memori": [65, 191, 386], "is_trac": [65, 191, 386], "take_snapshot": [65, 191, 386], "domainfilt": [65, 191, 481], "filename_pattern": [65, 191, 386], "all_fram": [65, 191, 386], "snapshot": [65, 191, 349, 479], "compare_to": [65, 191, 386], "filter_trac": [65, 191, 386], "statisticdiff": [65, 191], "count_diff": [65, 191, 386], "size_diff": [65, 191, 386], "total_nfram": [65, 191, 386, 485], "envbuild": [65, 198, 479, 485], "ensure_directori": [65, 198, 403], "create_configur": [65, 198, 403], "setup_python": [65, 198, 403], "setup_script": [65, 198, 403], "upgrade_depend": [65, 198, 403, 485], "post_setup": [65, 198, 403], "install_script": [65, 75, 198, 403], "create_arch": [65, 198, 425, 482, 485], "get_interpret": [65, 198, 425], "standalon": [65, 69, 76, 128, 175, 198, 200, 258, 320, 388, 392, 415, 431, 472, 485], "abiflag": [65, 116, 321, 359, 454, 460, 477, 483, 485], "builtin_module_nam": [65, 94, 258, 321, 359, 454], "call_trac": [65, 321, 359, 454], "_clear_type_cach": [65, 321, 359, 454], "_current_fram": [65, 148, 321, 359, 454, 471], "_current_except": [65, 148, 321, 359, 485], "breakpointhook": [65, 148, 232, 321, 359, 454, 459, 482, 485], "_debugmallocstat": [65, 321, 359, 454], "dllhandl": [65, 321, 359], "displayhook": [65, 232, 321, 359, 454, 467], "__breakpointhook__": [65, 321, 359, 454, 485], "__displayhook__": [65, 321, 359, 454], "__unraisablehook__": [65, 321, 359, 454], "float_info": [65, 97, 281, 321, 351, 359, 454, 472, 485], "float_repr_styl": [65, 321, 359, 454, 473], "getallocatedblock": [65, 321, 359, 454, 479], "getandroidapilevel": [65, 321, 359, 482, 485], "getdefaultencod": [65, 321, 359, 454], "getdlopenflag": [65, 299, 321, 359, 454, 468], "get_int_max_str_digit": [65, 321, 351, 359], "getrefcount": [65, 97, 321, 359, 454], "getrecursionlimit": [65, 169, 220, 254, 321, 359, 454, 466, 485], "getsizeof": [65, 192, 321, 359, 367, 386, 454, 472, 485], "getswitchinterv": [65, 321, 359, 454, 484, 485], "_getfram": [65, 108, 148, 321, 359, 454, 467], "getwindowsvers": [65, 321, 359, 473, 481, 485], "get_asyncgen_hook": [65, 321, 359, 454], "get_coroutine_origin_tracking_depth": [65, 321, 359, 454, 482], "hash_info": [65, 321, 351, 359, 432, 454, 477, 479], "int_info": [65, 321, 351, 359, 454, 460, 475], "__interactivehook__": [65, 321, 340, 359, 454, 459, 479], "maxunicod": [65, 321, 359, 454, 478], "setdlopenflag": [65, 299, 321, 359, 454, 468, 478], "set_int_max_str_digit": [65, 321, 351, 359, 367, 485], "setrecursionlimit": [65, 254, 305, 321, 359, 454, 466, 485], "set_asyncgen_hook": [65, 321, 359, 434, 454, 485], "set_coroutine_origin_tracking_depth": [65, 261, 321, 359, 454, 482, 485], "_enablelegacywindowsfsencod": [65, 321, 359, 459, 481], "__stdin__": [65, 254, 321, 359, 454], "__stdout__": [65, 254, 321, 338, 359, 454], "__stderr__": [65, 254, 321, 359, 367, 454], "stdlib_module_nam": [65, 321, 359, 476, 485], "thread_info": [65, 321, 359, 454, 478], "tracebacklimit": [65, 321, 359, 485], "api_vers": [65, 321, 359, 454, 469], "winver": [65, 321, 359], "get_config_var": [65, 69, 82, 299, 321, 360, 429, 473, 477, 479, 485], "get_scheme_nam": [65, 321, 360], "get_default_schem": [65, 321, 360, 485], "get_preferred_schem": [65, 321, 360, 485], "_get_preferred_schem": [65, 321, 360], "get_path_nam": [65, 321, 360], "get_path": [65, 321, 360, 473, 477, 485], "get_python_vers": [65, 321, 360, 477], "get_platform": [65, 69, 321, 360, 477], "is_python_build": [65, 321, 360, 473], "parse_config_h": [65, 321, 360], "get_config_h_filenam": [65, 69, 321, 360], "get_makefile_filenam": [65, 69, 82, 321, 360], "idiomat": [65, 110, 118, 321, 390], "formatwarn": [65, 273, 321, 404, 472, 485], "filterwarn": [65, 321, 404, 459, 467, 469, 485], "simplefilt": [65, 321, 367, 404, 472, 473, 485], "resetwarn": [65, 321, 404, 477], "catch_warn": [65, 321, 367, 404, 472, 485], "asdict": [65, 187, 321, 485], "astupl": [65, 187, 321, 485], "make_dataclass": [65, 187, 321, 485], "is_dataclass": [65, 187, 321, 485], "kw_on": [65, 187, 321, 476, 485], "frozeninstanceerror": [65, 187, 321, 485], "post": [65, 104, 108, 109, 115, 129, 149, 158, 182, 200, 201, 218, 249, 252, 275, 294, 301, 303, 321, 348, 357, 359, 374, 398, 399, 403, 424, 444, 466, 468, 472, 477, 478, 483, 485], "abstractcontextmanag": [65, 175, 321, 351, 390, 481, 485], "abstractasynccontextmanag": [65, 175, 321, 351, 390, 482, 485], "nullcontext": [65, 175, 321, 476, 482, 485], "redirect_stdout": [65, 175, 321, 479, 480], "redirect_stderr": [65, 175, 321, 480, 485], "contextdecor": [65, 175, 321, 477], "asynccontextdecor": [65, 175, 321, 476, 485], "exitstack": [65, 175, 321, 478, 482, 483, 485], "enter_context": [65, 175, 321], "push": [65, 69, 100, 109, 129, 163, 166, 175, 183, 185, 186, 192, 197, 220, 243, 288, 289, 321, 337, 357, 370, 417, 439, 440, 445, 466, 472, 478, 485], "pop_al": [65, 175, 321], "asyncexitstack": [65, 175, 321, 482, 483, 485], "enter_async_context": [65, 175, 321], "push_async_exit": [65, 175, 321], "push_async_callback": [65, 175, 321, 483], "reusabl": [65, 76, 120, 321, 411, 479], "reentrant": [65, 264, 321, 322, 370, 479, 485], "abcmeta": [65, 122, 321, 432, 472, 477, 478, 479, 485], "__subclasshook__": [65, 90, 122, 167, 321, 485], "abstractmethod": [65, 103, 122, 233, 258, 259, 295, 299, 321, 335, 472, 478], "abstractclassmethod": [65, 122, 321, 477, 478], "abstractstaticmethod": [65, 122, 321, 477, 478], "abstractproperti": [65, 122, 321, 472, 478], "get_cache_token": [65, 122, 321, 479], "update_abstractmethod": [65, 122, 321, 485], "print_tb": [65, 321, 385, 480], "print_except": [65, 273, 275, 321, 385, 476, 485], "print_last": [65, 321, 385], "extract_tb": [65, 321, 385], "extract_stack": [65, 321, 385, 485], "format_list": [65, 321, 385, 485], "format_exception_on": [65, 200, 321, 385, 476, 485], "format_except": [65, 321, 385, 476, 485], "format_exc": [65, 321, 385], "format_tb": [65, 321, 385, 386], "format_stack": [65, 321, 385, 485], "clear_fram": [65, 321, 385, 479], "walk_stack": [65, 321, 385, 480], "walk_tb": [65, 321, 385, 480], "tracebackexcept": [65, 321, 480, 485], "exc_typ": [65, 118, 175, 321, 339, 351, 359, 367, 370, 385, 394, 432, 474], "from_except": [65, 321, 385], "stacksummari": [65, 321, 480, 485], "from_list": [65, 321, 385], "framesummari": [65, 321, 480, 485], "get_object": [65, 148, 234, 321, 476, 483, 485], "get_stat": [65, 104, 234, 321, 479, 485], "set_threshold": [65, 234, 321], "get_count": [65, 234, 321, 471], "get_threshold": [65, 234, 321], "get_referr": [65, 148, 234, 321, 386, 476, 485], "unfreez": [65, 234, 321, 482], "get_freeze_count": [65, 234, 321, 482], "debug_stat": [65, 234, 321], "debug_collect": [65, 234, 321], "debug_uncollect": [65, 234, 321, 477], "debug_saveal": [65, 234, 321], "debug_leak": [65, 234, 321], "getmodulenam": [65, 258, 261, 321, 481], "ismodul": [65, 261, 321], "isclass": [65, 261, 321, 432], "ismethod": [65, 261, 321], "isfunct": [65, 261, 321], "isgeneratorfunct": [65, 261, 321, 472, 485], "isgener": [65, 261, 321, 472], "isawait": [65, 135, 167, 261, 321, 393, 480, 485], "isasyncgenfunct": [65, 261, 321, 485], "isasyncgen": [65, 261, 321], "istraceback": [65, 261, 321], "isfram": [65, 261, 321], "iscod": [65, 261, 321], "isbuiltin": [65, 261, 321], "isroutin": [65, 261, 321], "isabstract": [65, 261, 321, 472, 485], "ismethoddescriptor": [65, 261, 321], "isdatadescriptor": [65, 261, 321, 485], "isgetsetdescriptor": [65, 261, 321], "ismemberdescriptor": [65, 261, 321], "getdoc": [65, 261, 321, 432, 480, 483, 485], "getcom": [65, 261, 319, 321], "getfil": [65, 261, 321, 485], "getmodul": [65, 261, 321, 485], "getsourcefil": [65, 261, 321, 485], "getsourcelin": [65, 261, 321, 485], "getsourc": [65, 261, 321, 485], "cleandoc": [65, 128, 261, 321], "return_annot": [65, 261, 321], "bind_parti": [65, 261, 321], "from_cal": [65, 261, 321, 476, 480, 485], "boundargu": [65, 261, 321, 478, 480, 484, 485], "apply_default": [65, 261, 321, 480, 485], "getclasstre": [65, 261, 321], "getargspec": [65, 261, 321, 479, 480, 481, 485], "getfullargspec": [65, 261, 319, 321, 479, 480, 481, 485], "getargvalu": [65, 261, 321, 480], "formatargspec": [65, 261, 321, 480, 485], "formatargvalu": [65, 261, 321, 480], "getmro": [65, 261, 321], "getcallarg": [65, 261, 321, 473, 480, 485], "getclosurevar": [65, 261, 321, 478], "get_annot": [65, 98, 261, 321, 476, 485], "getframeinfo": [65, 261, 321, 485], "getouterfram": [65, 261, 321, 480], "getinnerfram": [65, 261, 321, 480], "currentfram": [65, 261, 321], "getattr_stat": [65, 261, 321, 477, 485], "getgeneratorst": [65, 261, 321, 477], "getcoroutinest": [65, 261, 321, 480, 485], "getgeneratorloc": [65, 261, 321, 478], "getcoroutineloc": [65, 261, 321, 480, 485], "co_optim": [65, 261, 321], "co_newloc": [65, 261, 321], "co_vararg": [65, 261, 321], "co_varkeyword": [65, 261, 321], "co_nest": [65, 261, 321], "co_gener": [65, 261, 321, 485], "co_nofre": [65, 261, 321, 485], "co_coroutin": [65, 261, 321, 483, 485], "co_iterable_coroutin": [65, 197, 261, 321], "co_async_gener": [65, 261, 321], "enable_user_sit": [65, 321, 340], "user_sit": [65, 116, 321, 340], "user_bas": [65, 78, 116, 321, 340, 473], "addsitedir": [65, 116, 321, 340], "getsitepackag": [65, 321, 340, 473, 477], "getuserbas": [65, 321, 340, 473, 477], "getusersitepackag": [65, 321, 340, 442, 473, 477], "interactiveinterpret": [65, 163, 186, 480, 485], "interactiveconsol": [65, 163, 186, 326], "compile_command": [65, 163, 165, 186, 485], "runsourc": [65, 163, 186], "runcod": [65, 163, 186], "showsyntaxerror": [65, 163, 186], "showtraceback": [65, 163, 186, 480, 485], "resetbuff": [65, 163, 186], "raw_input": [65, 118, 163, 186, 474], "codeop": [65, 89, 186, 260, 485], "commandcompil": [65, 165, 186], "zipimporterror": [65, 286, 427], "find_load": [65, 257, 258, 286, 308, 427, 436, 476, 478, 479, 482, 485], "find_modul": [65, 257, 258, 286, 357, 359, 427, 436, 469, 476, 478, 479, 482, 485], "find_spec": [65, 257, 258, 286, 308, 359, 427, 436, 476, 479, 480, 482, 485], "get_cod": [65, 258, 286, 427, 479], "get_data": [65, 258, 286, 308, 399, 427, 472, 479, 485], "get_sourc": [65, 258, 271, 286, 427, 479, 485], "is_packag": [65, 258, 286, 427], "load_modul": [65, 97, 257, 258, 286, 357, 427, 436, 469, 476, 479, 481, 485], "invalidate_cach": [65, 258, 286, 427, 476, 478, 482, 485], "pkgutil": [65, 260, 286, 464, 471, 472, 476, 478, 481, 482, 485], "moduleinfo": [65, 286, 308, 481], "extend_path": [65, 286, 308], "impimport": [65, 286, 308, 476], "impload": [65, 286, 308, 476], "get_import": [65, 286, 308], "get_load": [65, 286, 308, 485], "iter_import": [65, 286, 308, 478], "iter_modul": [65, 286, 308, 478, 481], "walk_packag": [65, 286, 308, 478, 481, 482, 485], "resolve_nam": [65, 258, 286, 308, 484, 485], "modulefind": [65, 260, 286, 485], "addpackagepath": [65, 285, 286], "replacepackag": [65, 285, 286], "run_script": [65, 285, 286], "runpi": [65, 120, 260, 286, 386, 459, 471, 472, 473, 475, 476, 479, 485], "run_path": [65, 286, 330, 459, 473, 485], "metapathfind": [65, 97, 258, 259, 286, 359, 476, 478, 479, 482, 485], "pathentryfind": [65, 97, 258, 286, 427, 436, 476, 478, 479, 482], "module_repr": [65, 258, 286, 436, 476, 479, 485], "resourceread": [65, 258, 286, 482, 485], "open_resourc": [65, 258, 286], "resource_path": [65, 258, 286], "is_resourc": [65, 258, 286], "resourceload": [65, 258, 286, 482, 485], "inspectload": [65, 258, 286, 479, 480, 485], "source_to_cod": [65, 258, 286, 479, 480, 485], "executionload": [65, 258, 286], "fileload": [65, 258, 286, 478, 479], "sourceload": [65, 258, 286, 478, 479], "path_stat": [65, 258, 286, 478], "path_mtim": [65, 258, 286, 478], "set_data": [65, 258, 286], "traversableresourc": [65, 258, 286, 485], "as_fil": [65, 258, 286, 485], "open_binari": [65, 258, 286], "open_text": [65, 258, 286], "read_binari": [65, 258, 286, 485], "source_suffix": [65, 258, 286], "debug_bytecode_suffix": [65, 258, 286], "optimized_bytecode_suffix": [65, 258, 286], "bytecode_suffix": [65, 258, 286], "extension_suffix": [65, 258, 286], "all_suffix": [65, 258, 261, 286], "builtinimport": [65, 258, 286, 476, 481, 485], "frozenimport": [65, 258, 286, 476, 479], "windowsregistryfind": [65, 258, 286, 465, 476, 481, 485], "pathfind": [65, 258, 259, 286, 436, 476, 479, 482, 485], "filefind": [65, 258, 286, 308, 476, 478, 485], "sourcelessfileload": [65, 258, 286, 478, 481], "extensionfileload": [65, 258, 286, 478, 479, 481], "submodule_search_loc": [65, 258, 286, 436], "loader_st": [65, 258, 286], "has_loc": [65, 258, 286, 436], "magic_numb": [65, 257, 258, 286, 479], "cache_from_sourc": [65, 257, 258, 286, 357, 477, 479, 480, 481], "decode_sourc": [65, 258, 286, 479], "module_from_spec": [65, 257, 258, 286, 389, 480, 485], "module_for_load": [65, 258, 286, 476, 479], "set_load": [65, 258, 286, 479], "set_packag": [65, 258, 286, 479], "spec_from_load": [65, 258, 286, 476], "spec_from_file_loc": [65, 257, 258, 286, 481], "source_hash": [65, 258, 286, 482], "lazyload": [65, 258, 286, 480, 481, 485], "lazi": [65, 98, 104, 116, 232, 286, 348, 351, 359, 364, 409, 471, 476, 480, 482, 485], "end_col_offset": [65, 128, 270, 435, 483, 485], "formattedvalu": [65, 128, 270, 485], "joinedstr": [65, 128, 270], "star": [65, 103, 128, 197, 270, 363, 382, 417, 431, 435, 438, 440, 476, 485], "expr": [65, 104, 128, 150, 270, 392, 434, 440, 466, 470, 474, 483, 484, 485], "unaryop": [65, 128, 270], "uadd": [65, 128, 270, 435], "usub": [65, 128, 270, 435], "binop": [65, 128, 270, 472, 485], "mult": [65, 128, 270, 435], "div": [65, 95, 128, 192, 247, 270, 416, 435], "bitor": [65, 128, 270, 435], "bitxor": [65, 128, 270, 435], "bitand": [65, 128, 270, 435], "matmult": [65, 128, 270, 435], "boolop": [65, 128, 270], "noteq": [65, 128, 270, 435], "lte": [65, 128, 270, 435], "gte": [65, 128, 270, 435], "isnot": [65, 128, 270, 435], "notin": [65, 128, 270, 435], "ifexp": [65, 128, 270], "namedexpr": [65, 128, 270], "listcomp": [65, 104, 128, 270, 435, 446], "setcomp": [65, 128, 270, 435], "generatorexp": [65, 128, 270], "dictcomp": [65, 128, 270, 435], "type_com": [65, 128, 270, 382, 435, 483, 485], "annassign": [65, 128, 270], "augassign": [65, 128, 270, 435], "importfrom": [65, 128, 270, 485], "excepthandl": [65, 128, 270], "withitem": [65, 128, 270], "match_cas": [65, 128, 270], "matchvalu": [65, 128, 270, 485], "matchsingleton": [65, 128, 270, 485], "matchsequ": [65, 128, 270, 485], "matchstar": [65, 128, 270, 485], "matchmap": [65, 128, 270, 485], "matchclass": [65, 128, 270, 485], "matcha": [65, 128, 270, 485], "matchor": [65, 128, 270, 485], "functiondef": [65, 128, 270, 485], "yieldfrom": [65, 128, 270], "classdef": [65, 128, 270, 431, 485], "asyncfunctiondef": [65, 128, 270, 485], "asyncfor": [65, 128, 270, 485], "asyncwith": [65, 128, 270, 485], "unpars": [65, 126, 128, 206, 259, 270, 320, 419, 484, 485], "literal_ev": [65, 128, 232, 270, 472, 477, 482, 485], "get_docstr": [65, 128, 270, 485], "get_source_seg": [65, 128, 270, 483, 485], "fix_missing_loc": [65, 128, 270, 485], "increment_lineno": [65, 128, 270, 485], "copy_loc": [65, 128, 270], "iter_field": [65, 128, 270], "iter_child_nod": [65, 128, 270], "nodevisitor": [65, 128, 270, 472, 483, 485], "generic_visit": [65, 128, 270], "nodetransform": [65, 128, 270, 472, 485], "pycf_allow_top_level_await": [65, 128, 232, 270, 483, 484, 485], "pycf_type_com": [65, 128, 270], "symbolt": [65, 270, 358, 484, 485], "get_typ": [65, 270, 358, 399, 479], "get_lineno": [65, 270, 358], "is_optim": [65, 270, 358], "is_nest": [65, 270, 358], "has_children": [65, 270, 358], "get_identifi": [65, 270, 358], "get_symbol": [65, 270, 358], "get_paramet": [65, 270, 358], "get_loc": [65, 270, 358], "get_glob": [65, 270, 358], "get_nonloc": [65, 270, 358], "get_fre": [65, 270, 358], "is_referenc": [65, 270, 358], "is_import": [65, 270, 358], "is_paramet": [65, 270, 358], "is_nonloc": [65, 270, 358, 485], "is_declared_glob": [65, 270, 358, 473], "is_loc": [65, 270, 358], "is_annot": [65, 270, 358], "is_fre": [65, 270, 358], "is_assign": [65, 270, 358], "is_namespac": [65, 270, 358], "get_namespac": [65, 270, 358], "tok_nam": [65, 270, 382, 485], "istermin": [65, 270, 382], "isnontermin": [65, 270, 382], "iseof": [65, 270, 382], "endmark": [65, 270, 382, 383, 435], "lpar": [65, 270, 382, 383], "rpar": [65, 270, 382, 383], "lsqb": [65, 270, 382], "rsqb": [65, 270, 382], "semi": [65, 100, 270, 289, 298, 382, 485], "slash": [65, 69, 71, 78, 79, 111, 116, 232, 261, 265, 270, 298, 299, 300, 302, 319, 382, 398, 411, 426, 427, 485], "amper": [65, 270, 382], "lbrace": [65, 270, 382], "rbrace": [65, 270, 382], "eqequ": [65, 270, 382], "notequ": [65, 270, 382], "lessequ": [65, 270, 382], "greaterequ": [65, 270, 382], "tild": [65, 116, 238, 270, 300, 382], "circumflex": [65, 114, 270, 382], "leftshift": [65, 270, 382], "rightshift": [65, 270, 382], "doublestar": [65, 270, 382], "plusequ": [65, 270, 382], "minequ": [65, 270, 382], "starequ": [65, 270, 382], "slashequ": [65, 270, 382], "percentequ": [65, 270, 382], "amperequ": [65, 270, 382], "vbarequ": [65, 270, 382], "circumflexequ": [65, 270, 382], "leftshiftequ": [65, 270, 382], "rightshiftequ": [65, 270, 382], "doublestarequ": [65, 270, 382], "doubleslash": [65, 270, 382], "doubleslashequ": [65, 270, 382], "atequ": [65, 270, 382], "rarrow": [65, 270, 382], "colonequ": [65, 270, 382], "type_ignor": [65, 128, 270, 382], "soft_keyword": [65, 270, 382, 435], "errortoken": [65, 270, 382, 383], "n_token": [65, 270, 382], "nt_offset": [65, 270, 382], "iskeyword": [65, 269, 270, 351], "kwlist": [65, 83, 86, 196, 269, 270], "issoftkeyword": [65, 269, 270], "softkwlist": [65, 269, 270], "generate_token": [65, 270, 383, 474, 485], "untoken": [65, 270, 383, 485], "detect_encod": [65, 270, 271, 383], "tokenerror": [65, 270, 383], "tabnanni": [65, 96, 260, 270, 466, 485], "filename_on": [65, 270, 362], "nannynag": [65, 270, 362], "process_token": [65, 270, 362], "readmodul": [65, 270, 318, 485], "readmodule_ex": [65, 270, 318, 485], "is_async": [65, 128, 270, 318, 485], "pycompileerror": [65, 270, 317, 485], "pycinvalidationmod": [65, 169, 270, 317], "checked_hash": [65, 270, 317], "unchecked_hash": [65, 270, 317], "compile_dir": [65, 169, 270, 480, 482, 485], "compile_fil": [65, 169, 270, 480, 485], "compile_path": [65, 169, 270, 480], "from_traceback": [65, 197, 270, 479], "codeobj": [65, 197, 270], "first_lin": [65, 197, 270], "code_info": [65, 197, 270, 477], "show_cod": [65, 197, 270, 477, 479], "distb": [65, 197, 270, 479, 485], "disassembl": [65, 197, 270, 306, 367, 479, 482, 485], "disco": [65, 197, 270], "get_instruct": [65, 197, 270, 479], "findlinestart": [65, 197, 270, 485], "findlabel": [65, 197, 270], "stack_effect": [65, 197, 270, 479, 485], "opnam": [65, 95, 197, 270, 367, 479], "argval": [65, 197, 270, 367], "argrepr": [65, 197, 270], "starts_lin": [65, 197, 270], "is_jump_target": [65, 197, 270], "opmap": [65, 197, 270], "cmp_op": [65, 197, 270], "hasconst": [65, 197, 270], "hasfre": [65, 197, 270], "hasnam": [65, 197, 270], "hasjrel": [65, 197, 270], "hasjab": [65, 197, 270], "hasloc": [65, 197, 270], "hascompar": [65, 197, 270], "genop": [65, 270, 306], "ms": [65, 106, 116, 164, 182, 183, 260, 298, 299, 355, 380, 465, 466, 482, 484, 485], "msvcrt": [65, 96, 148, 182, 260, 408, 472, 473, 485], "vc": [65, 182, 260, 408, 485], "lk_lock": [65, 288, 408], "lk_rlck": [65, 288, 408], "lk_nblck": [65, 288, 408], "lk_nbrlck": [65, 288, 408], "lk_unlck": [65, 288, 408], "setmod": [65, 288, 408], "open_osfhandl": [65, 148, 288, 408], "get_osfhandl": [65, 148, 288, 408], "kbhit": [65, 96, 288, 408], "getwch": [65, 288, 408, 472], "putch": [65, 288, 408], "putwch": [65, 288, 408, 472], "ungetwch": [65, 288, 408], "heapmin": [65, 288, 408], "closekey": [65, 408, 409], "connectregistri": [65, 148, 408, 409], "createkey": [65, 148, 408, 409], "createkeyex": [65, 408, 409, 473], "deletekey": [65, 148, 408, 409], "deletekeyex": [65, 408, 409, 473], "deletevalu": [65, 148, 408, 409], "enumkey": [65, 148, 408, 409], "enumvalu": [65, 148, 408, 409], "expandenvironmentstr": [65, 148, 408, 409, 472], "flushkey": [65, 408, 409], "loadkey": [65, 148, 408, 409], "openkey": [65, 148, 408, 409], "openkeyex": [65, 408, 409], "queryinfokey": [65, 148, 408, 409], "queryvalu": [65, 148, 408, 409], "queryvalueex": [65, 408, 409, 485], "savekey": [65, 148, 408, 409], "setvalu": [65, 148, 408, 409], "setvalueex": [65, 408, 409, 485], "disablereflectionkey": [65, 148, 408, 409, 472, 473], "enablereflectionkey": [65, 148, 408, 409, 472, 473], "queryreflectionkey": [65, 148, 408, 409, 472, 473], "hkey_": [65, 408], "hkey_classes_root": [65, 408, 409], "hkey_us": [65, 408, 409], "hkey_performance_data": [65, 408, 409], "hkey_current_config": [65, 408, 409], "hkey_dyn_data": [65, 408, 409], "key_all_access": [65, 408, 409], "key_writ": [65, 408, 409], "key_read": [65, 408, 409], "key_execut": [65, 408, 409], "key_query_valu": [65, 408, 409], "key_set_valu": [65, 408, 409], "key_create_sub_key": [65, 408, 409], "key_enumerate_sub_key": [65, 408, 409], "key_notifi": [65, 408, 409], "key_create_link": [65, 408, 409], "key_wow64_64key": [65, 408, 409], "key_wow64_32key": [65, 408, 409], "reg_binari": [65, 408, 409, 485], "reg_dword": [65, 408, 409], "reg_dword_little_endian": [65, 408, 409], "reg_dword_big_endian": [65, 408, 409], "reg_expand_sz": [65, 408, 409], "reg_link": [65, 408, 409], "reg_multi_sz": [65, 408, 409, 485], "reg_non": [65, 408, 409], "reg_qword": [65, 408, 409, 481, 485], "reg_qword_little_endian": [65, 408, 409], "reg_resource_list": [65, 408, 409], "reg_full_resource_descriptor": [65, 408, 409], "reg_resource_requirements_list": [65, 408, 409], "reg_sz": [65, 408, 409], "pyhkey": [65, 148, 408, 409], "sound": [65, 82, 94, 116, 123, 147, 183, 230, 260, 301, 405, 408, 454, 469, 472], "playsound": [65, 408, 410, 481, 485], "messagebeep": [65, 408, 410, 481, 485], "snd_filenam": [65, 408, 410], "snd_alia": [65, 408, 410], "snd_loop": [65, 408, 410], "snd_memori": [65, 408, 410, 485], "snd_purg": [65, 408, 410], "snd_async": [65, 408, 410], "snd_nodefault": [65, 408, 410], "snd_nostop": [65, 408, 410], "snd_nowait": [65, 408, 410], "mb_iconasterisk": [65, 408, 410], "mb_iconexclam": [65, 408, 410], "mb_iconhand": [65, 408, 410], "mb_iconquest": [65, 408, 410], "mb_ok": [65, 408, 410], "password": [65, 109, 115, 179, 236, 240, 242, 255, 260, 275, 289, 292, 294, 299, 300, 311, 332, 342, 346, 348, 364, 366, 395, 398, 399, 423, 426, 471, 472, 473, 478, 479, 480, 481, 485], "getpwuid": [65, 116, 299, 316, 395, 485], "getpwnam": [65, 179, 316, 355, 395, 485], "getpwal": [65, 316, 395], "getgrgid": [65, 240, 395, 481, 485], "getgrnam": [65, 240, 355, 395, 469, 485], "getgral": [65, 240, 395, 485], "termio": [65, 222, 260, 387, 395, 484, 485], "tti": [65, 183, 236, 260, 264, 299, 395, 441, 442, 452, 459, 472, 485], "tcgetattr": [65, 366, 395], "tcsetattr": [65, 366, 387, 395], "tcsendbreak": [65, 366, 395], "tcdrain": [65, 366, 395], "tcflush": [65, 366, 395], "tcflow": [65, 366, 395], "setraw": [65, 387, 395], "setcbreak": [65, 387, 395], "flock": [65, 148, 222, 277, 395, 485], "rlim_infin": [65, 328, 395], "getrlimit": [65, 328, 395, 485], "setrlimit": [65, 148, 328, 367, 395, 485], "prlimit": [65, 148, 328, 395, 479, 485], "rlimit_cor": [65, 328, 367, 395], "rlimit_cpu": [65, 328, 395, 485], "rlimit_fs": [65, 328, 395, 485], "rlimit_data": [65, 328, 395], "rlimit_stack": [65, 328, 395], "rlimit_rss": [65, 328, 395], "rlimit_nproc": [65, 328, 395], "rlimit_nofil": [65, 328, 395], "rlimit_ofil": [65, 328, 395], "rlimit_memlock": [65, 328, 395], "rlimit_vmem": [65, 328, 395], "rlimit_a": [65, 328, 395], "rlimit_msgqueu": [65, 328, 395, 479], "rlimit_nic": [65, 328, 395, 479], "rlimit_rtprio": [65, 328, 395, 479], "rlimit_rttim": [65, 328, 395, 479], "rlimit_sigpend": [65, 328, 395, 479], "rlimit_sbs": [65, 328, 395, 479], "rlimit_swap": [65, 328, 395, 479], "rlimit_npt": [65, 328, 395, 479], "rlimit_kqueu": [65, 328, 395, 485], "getrusag": [65, 299, 328, 395, 471], "getpages": [65, 328, 395], "rusage_self": [65, 328, 395], "rusage_children": [65, 328, 395], "rusage_both": [65, 328, 395], "rusage_thread": [65, 328, 395], "syslog": [65, 108, 148, 260, 275, 395, 473, 478, 485], "openlog": [65, 148, 361, 395, 485], "closelog": [65, 148, 361, 395], "setlogmask": [65, 148, 361, 395], "aiff": [65, 160, 260, 343, 357, 454, 485], "setmark": [65, 123, 357], "async_chat": [65, 129, 145, 357, 479, 485], "ac_in_buffer_s": [65, 129, 357], "ac_out_buffer_s": [65, 129, 357], "close_when_don": [65, 129, 357, 485], "collect_incoming_data": [65, 129, 357], "discard_buff": [65, 129, 357], "found_termin": [65, 129, 357], "get_termin": [65, 129, 357], "push_with_produc": [65, 129, 357], "set_termin": [65, 129, 357, 485], "handle_read": [65, 145, 357, 485], "handle_writ": [65, 129, 145, 357], "handle_expt": [65, 145, 357], "handle_connect": [65, 145, 357], "handle_clos": [65, 145, 357], "handle_accept": [65, 145, 357, 477], "create_socket": [65, 145, 357], "dispatcher_with_send": [65, 145, 357], "file_dispatch": [65, 145, 357], "file_wrapp": [65, 145, 357, 411, 485], "adpcm2lin": [65, 147, 357, 485], "alaw2lin": [65, 147, 357], "avg": [65, 147, 357], "avgpp": [65, 147, 357], "bias": [65, 147, 203, 212, 314, 324, 350, 357, 469, 477], "cross": [65, 69, 75, 82, 86, 109, 112, 116, 147, 189, 199, 219, 251, 254, 299, 305, 344, 357, 414, 429, 439, 466, 467, 468, 469, 472, 473, 475, 477, 478, 479, 480, 481, 483, 485], "findfactor": [65, 147, 357], "findfit": [65, 147, 357], "findmax": [65, 147, 357], "getsampl": [65, 147, 357], "lin2adpcm": [65, 147, 357, 485], "lin2alaw": [65, 147, 357], "lin2lin": [65, 147, 357], "lin2ulaw": [65, 147, 357], "maxpp": [65, 147, 357], "minmax": [65, 147, 357], "ratecv": [65, 147, 357, 485], "rms": [65, 147, 357], "tomono": [65, 147, 357], "tostereo": [65, 147, 357], "ulaw2lin": [65, 147, 357], "fieldstorag": [65, 158, 357, 479, 480, 482, 485], "getfirst": [65, 158, 357], "getlist": [65, 158, 357, 480], "parse_multipart": [65, 158, 357, 476, 481, 482, 483, 484, 485], "print_environ": [65, 158, 357], "print_form": [65, 158, 357], "print_directori": [65, 158, 357], "print_environ_usag": [65, 158, 357], "cgitb": [65, 158, 260, 357, 485], "iff": [65, 200, 260, 357], "method_sha512": [65, 179, 357], "method_sha256": [65, 179, 357], "method_blowfish": [65, 179, 357], "method_md5": [65, 179, 357], "method_crypt": [65, 179, 357, 481, 485], "mksalt": [65, 179, 357, 478, 482, 485], "get_mag": [65, 257, 357, 479], "get_suffix": [65, 257, 357], "new_modul": [65, 257, 357], "get_tag": [65, 257, 258, 357, 477], "lock_held": [65, 257, 357], "acquire_lock": [65, 257, 357, 474], "release_lock": [65, 257, 357, 474], "py_sourc": [65, 257, 357], "c_extens": [65, 257, 357], "pkg_directori": [65, 257, 357], "c_builtin": [65, 257, 357], "py_frozen": [65, 257, 357], "nullimport": [65, 257, 357, 359, 436, 478], "mailcap": [65, 260, 357, 476, 485], "findmatch": [65, 278, 357], "getcap": [65, 278, 294, 357], "fcicreat": [65, 287, 357, 485], "uuidcreat": [65, 287, 357], "opendatabas": [65, 287, 357, 485], "createrecord": [65, 287, 357], "init_databas": [65, 287, 357, 485], "add_data": [65, 287, 357, 399, 479], "add_tabl": [65, 287, 357], "add_stream": [65, 287, 357], "gen_uuid": [65, 287, 357], "openview": [65, 287, 357, 485], "getsummaryinform": [65, 287, 357], "getcolumninfo": [65, 287, 357], "summaryinform": [65, 287, 357, 485], "getpropertycount": [65, 287, 357], "getfieldcount": [65, 287, 357], "getinteg": [65, 287, 357, 472], "setstr": [65, 287, 357], "setinteg": [65, 287, 357], "cleardata": [65, 287, 357], "cab": [65, 357, 471, 485], "start_compon": [65, 287, 357, 485], "add_fil": [65, 287, 357], "remove_pyc": [65, 287, 357], "set_curr": [65, 287, 357], "radiobuttongroup": [65, 287, 357], "bitmap": [65, 78, 256, 261, 287, 334, 357, 374, 380, 381], "pushbutton": [65, 287, 357], "radiogroup": [65, 287, 357], "checkbox": [65, 102, 158, 287, 357, 465], "precomput": [65, 154, 357, 485], "nis": [65, 240, 260, 357, 471, 485], "sun": [65, 70, 114, 147, 157, 189, 252, 256, 260, 280, 301, 357, 371, 412, 485], "yellow": [65, 102, 154, 166, 183, 218, 260, 357, 388, 456, 470], "cat": [65, 95, 109, 111, 166, 218, 237, 293, 355, 357, 445, 455, 457, 477, 480], "get_default_domain": [65, 293, 357], "nntp_ssl": [65, 294, 357, 477, 484, 485], "nntperror": [65, 294, 357, 485], "nntpreplyerror": [65, 294, 357], "nntptemporaryerror": [65, 294, 357], "nntppermanenterror": [65, 294, 357], "nntpprotocolerror": [65, 294, 357], "nntpdataerror": [65, 294, 357], "nntp_version": [65, 294, 357], "nntp_implement": [65, 294, 357], "newgroup": [65, 294, 357], "newnew": [65, 294, 357], "articl": [65, 104, 114, 233, 242, 267, 277, 294, 348, 357, 388, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "ihav": [65, 294, 357], "slave": [65, 294, 299, 315, 357, 374, 485], "xhdr": [65, 294, 357], "xover": [65, 294, 357], "terminolog": [65, 75, 100, 107, 208, 252, 357, 371, 381, 414, 467, 468, 471, 472], "optiongroup": [65, 298, 357], "optionpars": [65, 126, 298, 357, 469, 471], "get_option_group": [65, 298, 357], "print_vers": [65, 298, 357], "get_vers": [65, 298, 357], "add_opt": [65, 126, 298, 357, 469], "callback_arg": [65, 298, 357], "callback_kwarg": [65, 298, 357], "disable_interspersed_arg": [65, 126, 298, 357], "enable_interspersed_arg": [65, 298, 357], "get_opt": [65, 298, 357], "conflict": [65, 70, 83, 111, 113, 115, 122, 126, 173, 220, 237, 248, 357, 359, 390, 409, 417, 430, 439, 459, 465, 476, 477, 479, 482, 485], "set_usag": [65, 298, 357], "get_usag": [65, 298, 357], "store_act": [65, 298, 357], "typed_act": [65, 298, 357], "always_typed_act": [65, 298, 357], "ossaudiodev": [65, 260, 357, 469, 480, 485], "oss": [65, 260, 355, 357, 469, 478, 485], "ossaudioerror": [65, 301, 357], "openmix": [65, 301, 357], "audio": [65, 123, 147, 160, 213, 357, 367, 405, 410, 466, 485], "oss_audio_devic": [65, 301, 357], "writeal": [65, 301, 357], "nonblock": [65, 301, 357, 485], "getfmt": [65, 301, 357], "setfmt": [65, 301, 357], "channel": [65, 114, 123, 129, 139, 145, 147, 182, 208, 219, 230, 274, 289, 301, 341, 343, 344, 348, 356, 357, 405, 468, 478, 485], "setparamet": [65, 301, 357], "obufcount": [65, 301, 357], "obuffre": [65, 301, 357], "mixer": [65, 357], "oss_mixer_devic": [65, 301, 357], "stereocontrol": [65, 301, 357], "reccontrol": [65, 301, 357], "get_recsrc": [65, 301, 357], "set_recsrc": [65, 301, 357], "smtpserver": [65, 357, 479, 480, 481, 485], "process_messag": [65, 341, 357, 480, 481], "channel_class": [65, 341, 357], "debuggingserv": [65, 357], "pureproxi": [65, 357], "mailmanproxi": [65, 357, 484, 485], "smtpchannel": [65, 357, 479, 480, 481, 485], "smtp_server": [65, 341, 357], "conn": [65, 103, 133, 145, 166, 172, 175, 249, 289, 305, 335, 341, 344, 348, 357, 370, 471, 477, 480], "addr": [65, 129, 139, 141, 145, 158, 176, 265, 335, 341, 344, 348, 357, 367, 424, 477, 480, 485], "received_lin": [65, 341, 357], "smtp_state": [65, 341, 357], "seen_greet": [65, 341, 357], "mailfrom": [65, 341, 357], "rcpttos": [65, 341, 357], "received_data": [65, 341, 357], "fqdn": [65, 341, 342, 357], "peer": [65, 112, 139, 219, 220, 294, 334, 341, 348, 357, 485], "whathdr": [65, 343, 357, 480, 485], "spwd": [65, 240, 260, 316, 357, 471, 481, 485], "shadow": [65, 95, 96, 179, 240, 260, 261, 316, 357, 471, 479, 484, 485], "getspnam": [65, 346, 357, 481, 485], "getspal": [65, 346, 357], "au": [65, 260, 301, 343, 348, 357, 454], "audio_file_mag": [65, 356, 357], "audio_file_encoding_mulaw_8": [65, 356, 357], "audio_file_encoding_linear_8": [65, 356, 357], "audio_file_encoding_linear_16": [65, 356, 357], "audio_file_encoding_linear_24": [65, 356, 357], "audio_file_encoding_linear_32": [65, 356, 357], "audio_file_encoding_alaw_8": [65, 356, 357], "audio_file_encoding_float": [65, 356, 357], "audio_file_encoding_doubl": [65, 356, 357], "audio_file_encoding_adpcm_g721": [65, 356, 357], "audio_file_encoding_adpcm_g722": [65, 356, 357], "audio_file_encoding_adpcm_g723_3": [65, 356, 357], "audio_file_encoding_adpcm_g723_5": [65, 356, 357], "au_read": [65, 357], "au_writ": [65, 357, 479], "telnet": [65, 148, 176, 260, 357, 398, 472, 481, 485], "read_until": [65, 357, 364], "read_al": [65, 357, 364], "read_som": [65, 357, 364], "read_very_eag": [65, 357, 364], "read_eag": [65, 357, 364], "read_lazi": [65, 357, 364], "read_very_lazi": [65, 357, 364], "read_sb_data": [65, 357, 364], "get_socket": [65, 357, 364], "mt_interact": [65, 357, 364], "set_option_negotiation_callback": [65, 357, 364], "xdrlib": [65, 127, 260, 354, 357, 485], "uuencod": [65, 149, 152, 164, 260, 357], "xdr": [65, 127, 260, 305, 354, 357], "pack_float": [65, 357, 412], "pack_doubl": [65, 357, 412], "pack_fstr": [65, 357, 412], "pack_fopaqu": [65, 357, 412], "pack_str": [65, 357, 412], "pack_opaqu": [65, 357, 412], "pack_byt": [65, 357, 412], "pack_list": [65, 357, 412], "pack_farray": [65, 357, 412], "pack_array": [65, 357, 412], "get_posit": [65, 357, 412], "set_posit": [65, 357, 412], "unpack_float": [65, 357, 412], "unpack_doubl": [65, 357, 412], "unpack_fstr": [65, 357, 412], "unpack_fopaqu": [65, 357, 412], "unpack_str": [65, 357, 412], "unpack_opaqu": [65, 357, 412], "unpack_byt": [65, 357, 412], "unpack_list": [65, 357, 412], "unpack_farray": [65, 357, 412], "unpack_array": [65, 357, 412], "conversionerror": [65, 357, 412, 485], "intermezzo": [65, 84], "linkag": [65, 69, 84, 309], "ice": [65, 290], "suggest": [65, 69, 84, 94, 95, 101, 104, 109, 111, 114, 121, 139, 192, 232, 237, 242, 258, 305, 313, 326, 370, 371, 386, 425, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 481, 483, 484, 485], "app": [65, 84, 109, 112, 254, 275, 359, 374, 403, 411, 430, 465, 472, 473, 477, 485], "caution": [65, 83, 95, 196, 274, 298, 299, 355, 417, 471, 485], "tss": [65, 482, 485], "arena": [65, 435, 459, 471, 484, 485], "pad": [65, 94, 128, 149, 160, 183, 189, 192, 203, 206, 232, 241, 242, 265, 344, 351, 352, 354, 356, 371, 374, 381, 399, 412, 466, 469, 472, 473, 477, 481, 485], "howto": [65, 95, 102, 105, 110, 111, 113, 344, 423, 466, 468, 473, 474, 477, 485], "primer": 65, "thought": [65, 100, 104, 154, 289, 466, 468, 469, 474, 476, 480], "orm": 65, "formal": [65, 69, 100, 200, 232, 242, 298, 325, 351, 352, 398, 418, 425, 432, 433, 434, 438, 440, 466, 468, 475, 479, 480, 483, 484, 485], "provabl": 65, "modular": [65, 94, 108, 179, 232, 478, 483, 485], "combinator": [65, 267, 475, 483], "acknowledg": [65, 173, 184, 430], "destin": [65, 69, 100, 108, 114, 183, 195, 215, 219, 273, 274, 275, 277, 284, 298, 299, 338, 344, 351, 361, 403, 470, 472, 478, 479, 483, 485], "contextu": [65, 196, 273], "impart": [65, 273], "deploy": [65, 94, 108, 149, 209, 247, 299, 355, 374, 411, 429, 465, 477, 483, 484, 485], "gunicorn": 65, "uwsgi": [65, 355], "zeromq": 65, "elabor": [65, 100, 111, 116, 439, 466, 469, 485], "gmt": [65, 108, 189, 216, 252, 273, 348, 371], "cli": [65, 241, 259, 367, 425, 459, 479, 482, 485], "starter": 65, "qt": 65, "rfc5424": 65, "plagu": [65, 479], "metacharact": [65, 278, 325, 355, 470], "lookahead": [65, 69, 325, 431, 435, 470], "greedi": [65, 164, 325, 364], "feedback": [65, 237, 430, 470, 485], "ipc": [65, 130, 136, 139, 344], "disconnect": [65, 311, 342, 409, 483, 485], "die": [65, 102, 334, 406, 483, 485], "undecor": [65, 109, 233, 351], "instrument": [65, 105, 133, 233, 314, 460, 477, 481, 485], "tapset": 65, "newer": [65, 69, 85, 86, 108, 110, 123, 200, 242, 250, 254, 258, 259, 274, 275, 294, 299, 303, 305, 318, 320, 334, 347, 348, 351, 371, 374, 390, 412, 413, 426, 465, 476, 479, 480, 481, 482, 483, 484, 485], "un": [65, 207, 210, 261, 294, 440, 453, 476, 479, 485], "stringiz": [65, 261, 476, 485], "__annotations__": [65, 97, 187, 197, 232, 233, 261, 390, 431, 432, 440, 445, 474, 476, 477, 479, 480, 481, 483, 484, 485], "quirk": [65, 102, 351, 438, 476, 479, 485], "__builtin_new": 65, "__pure_virtu": 65, "pyd": [65, 76, 81, 94, 275, 427, 471, 477, 480, 483, 485], "keypress": [65, 102, 288, 472], "l1": [65, 94, 164, 381], "psf": [65, 90, 302], "beopen": [65, 66], "cnri": [65, 466], "cwi": [65, 90, 247, 344, 398], "bsd": [65, 94, 102, 112, 139, 183, 222, 328, 334, 339, 344, 349, 371, 442, 460, 466, 468, 472, 479, 485], "mersenn": [65, 324, 469], "twister": [65, 324, 469], "uudecod": 65, "test_epol": 65, "siphash24": [65, 460, 485], "strtod": 65, "dtoa": [65, 460, 473, 485], "libffi": [65, 473, 482, 485], "cfuhash": 65, "libmpdec": [65, 192, 460, 478, 485], "w3c": [65, 115, 247, 249, 399, 414, 415, 419, 432, 467, 476, 481, 482, 483, 484, 485], "c14n": [65, 417, 483, 485], "2001": [66, 107, 109, 216, 265, 338, 363, 371, 417, 426, 430, 467, 468, 469, 472, 477, 483, 485], "2022": [66, 164, 202, 242, 430, 455, 470, 476, 484, 485], "foundat": [66, 78, 90, 104, 175, 348, 374, 430, 465, 469, 470, 472, 478], "2000": [66, 95, 108, 164, 230, 275, 290, 371, 388, 430, 445, 448, 466, 469, 472, 477, 478, 479, 485], "corpor": [66, 430], "nation": [66, 430], "research": [66, 104, 430, 476, 485], "sig": [67, 75, 78, 90, 114, 117, 133, 148, 164, 242, 261, 299, 339, 383, 463, 466, 467, 469, 473, 480], "bitbucket": [67, 117, 173, 403], "1998": [67, 111, 117, 324, 430], "setuptool": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 86, 116, 199, 259, 308, 313, 403, 457, 463, 465, 473, 476, 481, 485], "2004": [67, 116, 164, 189, 381, 470], "wheel": [67, 69, 78, 117, 196, 259, 324, 460, 476, 483, 484, 485], "bdist_wheel": [67, 69, 476, 483, 484, 485], "427": 67, "twine": 67, "pypirc": [67, 485], "readthedoc": [68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 116, 390, 411, 471], "en": [68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 104, 114, 115, 116, 166, 237, 242, 247, 267, 294, 399, 464, 465, 471, 477, 478, 485], "latest": [68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 95, 116, 158, 189, 217, 254, 403, 465, 471, 473, 475, 477, 478, 479, 481, 485], "project": [69, 70, 73, 76, 78, 85, 87, 94, 95, 96, 101, 109, 110, 116, 118, 128, 173, 189, 199, 200, 217, 230, 237, 242, 258, 259, 267, 298, 313, 320, 392, 393, 403, 425, 426, 429, 430, 438, 463, 465, 466, 469, 472, 473, 474, 477, 478, 479, 481, 484, 485], "retain": [69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 83, 98, 113, 116, 126, 173, 175, 183, 203, 212, 215, 220, 254, 257, 258, 261, 267, 273, 277, 299, 337, 347, 348, 388, 398, 423, 430, 432, 434, 439, 478, 479, 481, 483, 485], "ever": [69, 83, 95, 103, 112, 119, 128, 183, 206, 208, 218, 258, 264, 267, 288, 289, 348, 390, 393, 465, 468, 469, 471, 472, 473, 474, 479, 485], "laid": 69, "long_descript": [69, 70, 73, 78, 81, 264], "author_email": [69, 70, 73, 78, 81, 313, 485], "maintainer_email": [69, 70, 73, 78, 313, 485], "homepag": [69, 313], "download_url": [69, 78, 313, 471], "download": [69, 70, 73, 76, 78, 85, 90, 95, 109, 116, 302, 313, 380, 399, 403, 432, 444, 457, 465, 471, 472, 473, 477, 478, 482, 483, 485], "py_modul": [69, 73, 76, 78, 79, 466], "ext_modul": [69, 73, 78, 79, 81, 86, 466], "classifi": [69, 78, 110, 234, 259, 313, 350, 469, 473, 485], "pypi": [69, 74, 78, 79, 80, 88, 94, 99, 108, 110, 194, 309, 313, 348, 359, 393, 403, 413, 429, 438, 453, 457, 458, 463, 469, 471, 473, 476, 477, 479, 480, 481, 482, 483, 484, 485], "distclass": 69, "script_nam": [69, 367, 411], "script_arg": 69, "cmdclass": [69, 74], "data_fil": [69, 78, 79], "package_dir": [69, 73, 78], "run_setup": [69, 485], "stop_aft": 69, "commandlin": [69, 78], "ie": [69, 115, 212, 225, 247, 250, 255, 298, 399, 423, 480, 485], "swig": [69, 72, 78, 84, 89, 96], "include_dir": [69, 78, 81, 466], "define_macro": [69, 78, 81, 425, 466], "dfoo": 69, "undef_macro": [69, 78], "library_dir": [69, 78, 81, 173], "runtime_library_dir": [69, 78], "extra_object": [69, 78], "eg": [69, 73, 116, 250, 255, 299, 348, 485], "extra_compile_arg": [69, 78], "sens": [69, 85, 95, 99, 100, 107, 108, 109, 116, 118, 120, 126, 129, 189, 192, 196, 212, 213, 218, 233, 254, 265, 277, 289, 298, 299, 314, 339, 345, 347, 348, 351, 352, 359, 372, 388, 407, 430, 432, 436, 474, 477, 479, 480, 482, 485], "extra_link_arg": [69, 78], "export_symbol": [69, 78], "extension_nam": 69, "objc": 69, "libpython": [69, 106, 460, 476, 483, 485], "gen_lib_opt": 69, "gen_preprocess_opt": 69, "get_default_compil": 69, "osnam": 69, "new_compil": [69, 425], "dry_run": [69, 338, 367], "show_compil": 69, "behind": [69, 103, 116, 145, 182, 200, 290, 315, 331, 399, 432, 465, 467, 470, 476, 485], "basi": [69, 95, 108, 109, 164, 182, 199, 247, 250, 268, 273, 277, 314, 359, 363, 430, 436, 440, 465, 468, 469, 476, 482, 485], "rebuild": [69, 78, 83, 116, 169, 477, 485], "add_include_dir": [69, 425], "set_include_dir": 69, "add_librari": 69, "libnam": 69, "driven": [69, 70, 88, 95, 175, 282, 367, 374, 388, 392, 414, 416, 466, 477, 485], "infer": [69, 100, 126, 167, 200, 232, 233, 264, 274, 289, 308, 371, 385, 390, 481], "set_librari": 69, "mention": [69, 78, 79, 83, 85, 86, 87, 98, 104, 107, 109, 110, 111, 114, 116, 120, 173, 182, 183, 200, 220, 221, 222, 232, 268, 273, 274, 277, 289, 298, 299, 337, 340, 345, 367, 390, 430, 431, 432, 436, 438, 439, 440, 466, 474, 478, 479, 482, 484, 485], "add_library_dir": [69, 425], "set_library_dir": 69, "add_runtime_library_dir": 69, "set_runtime_library_dir": 69, "outcom": [69, 165, 173, 390, 392, 393, 431], "undefine_macro": 69, "redefinit": [69, 257, 258, 432, 485], "undefinit": 69, "redefin": [69, 95, 116, 150, 167, 247, 257, 258, 345, 432, 469, 472], "add_link_object": 69, "analogu": [69, 95, 289], "set_link_object": 69, "autodetect": [69, 114, 310, 363, 399, 467, 471], "autoconf": [69, 76, 460, 485], "detect_languag": 69, "language_map": 69, "language_ord": 69, "job": [69, 94, 100, 102, 108, 109, 111, 114, 126, 157, 165, 172, 208, 214, 230, 237, 289, 299, 305, 352, 355, 380, 399, 436, 466, 472, 477, 485], "find_library_fil": [69, 485], "has_funct": [69, 485], "library_dir_opt": 69, "library_opt": 69, "runtime_library_dir_opt": 69, "stage": [69, 111, 370, 399, 404, 414, 466, 484, 485], "linker_so": 69, "linker_ex": 69, "creator": [69, 109, 289, 299, 338, 403, 415, 426, 427, 432, 438, 485], "split_quot": 69, "output_dir": [69, 363, 426], "extra_prearg": 69, "extra_postarg": 69, "realiti": [69, 83, 189, 298, 344, 399], "alongsid": [69, 72, 73, 380, 425, 439, 465], "consult": [69, 70, 94, 95, 102, 104, 108, 111, 116, 161, 173, 182, 189, 197, 237, 273, 274, 277, 299, 301, 325, 328, 342, 344, 347, 349, 359, 371, 373, 411, 428, 436, 465, 466, 468, 469, 470, 471, 472, 473, 474, 484, 485], "hatch": [69, 390, 473], "occas": [69, 114, 115, 303, 319, 339, 354, 367, 471, 479], "cut": [69, 100, 111, 161, 232, 350, 371, 470, 472, 476, 485], "mustard": 69, "coars": [69, 482], "granular": [69, 109, 258, 299, 359], "compileerror": 69, "create_static_lib": 69, "output_libnam": 69, "target_lang": 69, "bunch": [69, 78, 109, 207, 214, 298, 466, 467, 468, 469, 472, 485], "matter": [69, 79, 95, 103, 109, 114, 116, 169, 189, 200, 215, 254, 258, 272, 298, 299, 345, 347, 351, 359, 366, 381, 390, 392, 393, 394, 404, 432, 465, 466, 468, 470, 471, 472, 473, 479, 485], "liberror": 69, "target_desc": 69, "output_filenam": 69, "build_temp": 69, "libfoo": 69, "sake": [69, 99, 100, 102, 109, 212, 299, 337, 436, 469, 485], "cours": [69, 70, 73, 76, 78, 79, 83, 86, 100, 104, 108, 109, 112, 116, 122, 182, 192, 200, 207, 209, 214, 242, 273, 274, 289, 295, 298, 299, 337, 345, 348, 374, 388, 393, 394, 414, 423, 432, 459, 466, 467, 469, 474, 477, 478, 479], "linkerror": 69, "link_execut": [69, 425], "output_prognam": 69, "link_shared_lib": 69, "link_shared_object": 69, "preprocess": [69, 100, 173, 181, 264, 398], "output_fil": [69, 314], "preprocesserror": 69, "executable_filenam": 69, "exe": [69, 96, 111, 254, 275, 289, 299, 300, 338, 340, 403, 425, 426, 442, 450, 452, 460, 465, 468, 473, 477, 481, 482, 485], "library_filenam": 69, "lib_typ": 69, "liblibnam": 69, "object_filenam": 69, "source_filenam": 69, "shared_object_filenam": 69, "mkpath": 69, "511": [69, 248, 481], "ancestor": [69, 108, 109, 183, 273, 274, 289, 302, 348, 381, 393, 394, 417, 432, 469, 485], "move_fil": [69, 485], "debug_print": 69, "dname": 69, "idir": 69, "llib": 69, "ldir": 69, "cc": [69, 78, 116, 166, 210, 216, 267, 277, 342, 366, 425, 460, 469, 478, 485], "ar": [69, 360, 460, 485], "ranlib": [69, 485], "studio": [69, 70, 87, 95, 465, 472, 480, 485], "2003": [69, 109, 189, 273, 417, 427, 455, 469, 472, 485], "distutils_use_sdk": 69, "mssdk": 69, "sdk": [69, 460, 484, 485], "setenv": [69, 484, 485], "borlandccompil": 69, "cygwinccompil": 69, "mingw32ccompil": 69, "mingw32": [69, 116], "tarbal": [69, 70, 76, 79, 466, 485], "base_nam": [69, 148, 338], "root_dir": [69, 148, 238, 338, 476, 485], "gztar": [69, 70, 79, 338, 477, 481, 485], "bztar": [69, 70, 79, 338, 477], "xztar": [69, 70, 79, 338, 480, 485], "ztar": [69, 70, 79], "make_tarbal": 69, "xz": [69, 70, 79, 103, 276, 338, 363, 390, 477, 478, 480, 485], "gz": [69, 70, 76, 79, 109, 116, 225, 241, 282, 302, 338, 363, 403, 428, 457, 464, 466, 471, 477], "make_zipfil": 69, "infozip": 69, "distutilsexecerror": [69, 485], "age": [69, 95, 103, 110, 113, 166, 233, 250, 251, 347, 348, 455, 468, 469, 470, 473, 477], "distutilsfileerror": 69, "newer_pairwis": 69, "newer_group": 69, "blow": [69, 109, 158, 298, 477, 485], "us": [69, 76, 86, 99, 104, 164, 167, 184, 189, 202, 203, 209, 213, 216, 230, 272, 290, 305, 324, 325, 338, 348, 371, 393, 394, 399, 411, 417, 430, 432, 464, 465, 471, 485], "dri": [69, 74, 290, 298], "ll": [69, 73, 78, 83, 85, 86, 94, 95, 98, 99, 100, 102, 103, 104, 107, 108, 109, 111, 112, 114, 115, 116, 118, 185, 200, 207, 243, 275, 278, 295, 298, 303, 325, 337, 347, 348, 351, 374, 394, 417, 436, 438, 439, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 483, 484], "pretend": [69, 83, 110, 112, 183, 393, 432, 468, 483], "carri": [69, 102, 108, 164, 190, 192, 197, 271, 273, 281, 289, 298, 324, 351, 392, 413, 414, 433, 439, 440, 471, 472, 473, 480, 483, 485], "wouldn": [69, 83, 94, 100, 110, 111, 257, 338, 350, 367, 392, 393, 431, 445, 466, 467, 468, 469, 470, 472, 485], "going": [69, 83, 85, 86, 89, 94, 100, 103, 104, 106, 110, 111, 112, 116, 123, 133, 142, 150, 158, 189, 192, 203, 207, 243, 285, 298, 299, 314, 340, 348, 363, 367, 370, 393, 394, 411, 417, 423, 432, 465, 466, 468, 472, 485], "0o777": [69, 299, 302], "unabl": [69, 102, 104, 108, 109, 115, 261, 277, 299, 334, 347, 355, 359, 369, 447, 471, 485], "create_tre": 69, "copy_tre": 69, "preserve_mod": 69, "preserve_tim": 69, "preserve_symlink": 69, "unaffect": [69, 192, 338, 371, 432, 440, 459, 469, 472, 481], "copy_fil": 69, "nfs": [69, 219, 485], "answer": [69, 95, 99, 103, 139, 161, 200, 233, 242, 274, 277, 314, 352, 371, 446, 450, 466, 470, 474, 485], "d2": [69, 94, 473, 484], "remove_tre": 69, "underneath": 69, "ruthless": 69, "clobber": [69, 250, 298, 485], "sym": 69, "_copy_file_cont": 69, "dest_nam": 69, "write_fil": 69, "piec": [69, 82, 97, 104, 111, 112, 139, 147, 152, 158, 175, 185, 196, 197, 200, 209, 250, 276, 298, 348, 374, 390, 418, 433, 439, 468, 471, 479, 484, 485], "kernel": [69, 102, 121, 133, 138, 267, 284, 299, 334, 338, 339, 344, 360, 370, 466, 471, 476, 478, 479, 481, 483, 485], "i586": [69, 360, 477], "sun4u": [69, 360], "macosx_deployment_target": [69, 299, 485], "fat": [69, 299, 360, 409], "fat64": 69, "fat3": 69, "ppc": [69, 360, 463, 472, 477], "i386": [69, 360, 464, 480], "x86_64": [69, 360, 460, 480, 483, 485], "macosx": [69, 360, 407, 463, 477, 485], "aix": [69, 83, 121, 299, 312, 359, 370, 483, 484, 485], "technolog": [69, 94, 102, 112, 262, 430], "5307": 69, "0747": 69, "oslevel": 69, "5300": [69, 485], "07": [69, 109, 189, 273, 277, 325, 352, 371, 383, 429, 471, 472, 481, 484, 485], "0000": [69, 97, 107, 114, 164, 189, 210, 216, 265, 351, 371, 432, 466, 477, 478, 485], "7105": 69, "1731": 69, "7100": 69, "05": [69, 99, 109, 140, 161, 189, 267, 281, 325, 348, 354, 371, 456, 471, 472, 481, 485], "01": [69, 99, 109, 112, 152, 189, 192, 216, 232, 242, 247, 273, 338, 344, 346, 348, 351, 371, 412, 426, 429, 434, 455, 467, 469, 470, 471, 477, 478, 481, 482, 485], "convert_path": 69, "ish": 69, "change_root": 69, "new_root": 69, "check_environ": [69, 485], "subst_var": 69, "local_var": [69, 390], "perl": [69, 97, 104, 111, 113, 250, 325, 443, 448, 456, 466, 470, 471, 485], "fledg": 69, "letter": [69, 73, 94, 102, 111, 114, 149, 154, 164, 183, 184, 192, 196, 200, 235, 272, 273, 298, 300, 302, 303, 307, 316, 325, 348, 351, 352, 369, 381, 391, 398, 399, 426, 434, 439, 446, 453, 466, 468, 470, 471, 472, 473, 474, 478, 480, 481, 482, 485], "bureaucraci": 69, "embodi": [69, 95, 214, 414], "strtobool": 69, "byte_compil": 69, "py_fil": [69, 363], "__pycache__": [69, 95, 257, 258, 302, 317, 359, 454, 459, 477, 483, 485], "subdirectori": [69, 73, 78, 79, 81, 83, 86, 94, 95, 116, 169, 207, 223, 238, 254, 258, 277, 299, 302, 308, 340, 384, 392, 403, 425, 426, 427, 465, 466, 467, 469, 472, 473, 480, 482, 483, 484, 485], "basedir": [69, 287], "wish": [69, 70, 76, 83, 85, 98, 100, 102, 104, 108, 111, 115, 116, 126, 152, 164, 173, 189, 200, 210, 215, 241, 258, 259, 265, 268, 273, 275, 277, 284, 298, 325, 342, 348, 349, 355, 381, 389, 403, 404, 406, 411, 432, 467, 470, 471, 472, 473, 479, 485], "rfc822_escap": 69, "822": [69, 111, 114, 207, 209, 237, 249, 342, 371, 468], "negative_opt": 69, "long_opt": 69, "short_opt": 69, "help_str": 69, "fancygetopt": 69, "wrap_text": 69, "option_t": 69, "optiondummi": 69, "get_option_ord": 69, "generate_help": 69, "poke": [69, 298], "launch": [69, 138, 172, 192, 289, 299, 355, 359, 367, 402, 407, 465, 466, 477, 478, 479, 483, 485], "find_execut": [69, 485], "heavili": [69, 116, 190, 258, 342, 431, 467, 481, 482], "get_python_inc": [69, 78, 425], "plat_specif": [69, 78], "get_python_lib": 69, "standard_lib": 69, "customize_compil": [69, 485], "flavor": [69, 85, 112, 200, 230, 242, 299, 349, 351, 434, 485], "set_python_build": 69, "adjac": [69, 111, 189, 196, 276, 288, 325, 392, 414, 439, 465, 479, 482, 485], "unreadlin": 69, "strip_com": 69, "lstrip_w": 69, "rstrip_w": 69, "skip_blank": 69, "join_lin": 69, "collapse_join": 69, "predecessor": [69, 239, 469, 477], "unread": [69, 103, 190, 305, 399, 475, 480, 485], "strip_blank": 69, "onto": [69, 112, 116, 175, 181, 183, 197, 220, 243, 255, 305, 313, 337, 353, 388, 392, 394, 425, 436, 466, 472], "cleans": 69, "bee": [69, 218], "subroutin": [69, 82, 97, 104, 471], "initialize_opt": 69, "finalize_opt": 69, "come": [69, 72, 79, 85, 94, 95, 100, 102, 103, 106, 108, 109, 110, 112, 114, 115, 116, 120, 157, 158, 164, 167, 175, 183, 187, 192, 200, 216, 233, 239, 242, 251, 257, 258, 298, 301, 305, 306, 325, 326, 340, 345, 348, 351, 373, 374, 381, 390, 399, 403, 414, 419, 428, 432, 436, 438, 445, 466, 467, 468, 469, 470, 472, 479, 482, 483, 484, 485], "command_templ": 69, "peel_banana": 69, "late": [69, 95, 102, 110, 196, 466, 485], "raison": 69, "etr": 69, "sub_command": 69, "command_nam": 69, "predic": [69, 103, 104, 143, 261, 267, 369, 370, 417, 469, 472, 477, 482, 484, 485], "msi": [69, 70, 287, 465, 471, 480, 482, 485], "build_py_2to3": 69, "subcommand": [69, 71, 100, 109, 126, 473, 477], "intermediari": [69, 70, 76], "spoken": [70, 109], "mainstream": 70, "desktop": [70, 78, 96, 114, 407, 465], "debian": [70, 89, 230, 464, 466, 467, 482, 485], "concentr": [70, 76, 83, 111, 115, 242, 374, 472], "specialti": 70, "speci": 70, "spring": [70, 111, 189, 232], "volunt": [70, 438, 472], "somewher": [70, 83, 94, 95, 100, 109, 252, 254, 298, 308, 320, 350, 351, 414, 445, 472, 476], "bdist": [70, 75, 76, 480], "fake": [70, 94, 298, 411, 432, 485], "bdist_dumb": [70, 75, 81, 485], "someon": [70, 83, 95, 100, 112, 189, 342, 399, 417, 473, 485], "smart": [70, 100, 254, 468, 485], "far": [70, 78, 83, 86, 95, 99, 100, 111, 112, 175, 189, 192, 196, 242, 243, 250, 264, 281, 289, 298, 299, 300, 302, 314, 325, 337, 338, 364, 371, 380, 392, 399, 438, 466, 467, 468, 469, 470, 472, 485], "sdist": [70, 75, 76, 79, 81, 466, 467, 471, 473, 481, 482, 485], "bzip": [70, 477], "xzip": 70, "pkgtool": [70, 76], "sdux": 70, "hp": [70, 76, 93, 470, 485], "ux": [70, 76, 485], "swinstal": [70, 76], "bdist_rpm": [70, 72, 75, 76, 81, 466, 485], "rpms": [70, 464], "srpm": [70, 75], "bdist_msi": [70, 75, 287, 484, 485], "bdist_": [70, 467], "popular": [70, 76, 83, 94, 103, 109, 112, 113, 145, 196, 200, 233, 255, 262, 277, 384, 388, 438, 465, 477, 478, 483], "red": [70, 76, 89, 90, 102, 108, 109, 111, 113, 116, 154, 157, 166, 183, 218, 247, 324, 350, 351, 374, 381, 388, 406, 430, 445, 456, 469, 470, 475, 476, 481, 485], "hat": [70, 76, 89, 90, 116, 430, 455, 485], "suse": [70, 76, 359, 460, 484, 485], "mandrak": [70, 76], "john": [70, 103, 113, 115, 166, 181, 196, 374, 417, 444, 445, 446, 467, 470, 471, 472, 473, 476, 478, 481, 485], "jdoe": 70, "vendor": [70, 102, 242, 309, 464, 465, 476, 485], "obsolet": [70, 78, 83, 102, 158, 220, 250, 268, 273, 312, 320, 351, 359, 371, 393, 404, 412, 423, 466, 467, 468, 471, 473, 476, 477, 479, 480, 481, 485], "distribution_nam": 70, "buildrequir": 70, "build_requir": 70, "icon": [70, 374, 465, 468, 469, 485], "tedious": [70, 72, 78, 114, 116, 128, 158, 393, 466, 471, 483], "prone": [70, 86, 120, 158, 189, 200, 305, 314, 351, 476, 480], "pydistutil": [70, 116], "wind": [70, 116, 298], "customiz": [70, 189, 374, 473, 485], "32bit": [70, 344, 468, 485], "64bit": [70, 360, 485], "amd64": [70, 112, 309, 354, 360], "pcbuild": [70, 367, 465, 472, 485], "sln": 70, "x64": [70, 115, 472], "pythoncor": [70, 465, 485], "reexecut": [70, 257], "uninstal": [70, 73, 217, 221, 287, 386, 457, 465, 479, 485], "directory_cr": 70, "file_cr": 70, "get_special_folder_path": 70, "csidl_str": 70, "folder": [70, 255, 277, 403, 465, 485], "csidl_appdata": 70, "csidl_common_startmenu": 70, "csidl_startmenu": 70, "csidl_common_desktopdirectori": 70, "csidl_desktopdirectori": 70, "csidl_common_startup": 70, "csidl_startup": 70, "csidl_common_program": 70, "csidl_program": 70, "csidl_font": 70, "shgetspecialfolderpath": 70, "create_shortcut": 70, "workdir": 70, "iconpath": 70, "iconindex": 70, "ishelllink": 70, "install_lib": [71, 75], "manifest": [71, 75, 78, 81, 232, 367, 473, 485], "pat1": 71, "pat2": 71, "prune": [71, 79, 299, 485], "graft": 71, "za": [71, 111, 114, 179, 325, 351, 439, 468], "f0": [71, 351], "9_": [71, 111, 114, 325, 439], "priori": [72, 258], "proceed": [72, 82, 86, 115, 192, 202, 212, 267, 277, 289, 299, 314, 348, 370, 431, 434], "cheap": [72, 95, 182, 305, 485], "solicit": [72, 162], "middl": [72, 95, 100, 102, 133, 175, 206, 303, 324, 327, 350, 369, 388, 420, 471, 473, 481, 485], "ground": [72, 183], "build_pi": [72, 74, 75], "build_ext": [72, 75, 78, 116, 480, 485], "temp": [72, 81, 83, 116, 289, 336, 347, 365, 415, 425, 434, 465, 485], "inplac": [72, 225, 485], "undef": [72, 78], "spell": [72, 78, 102, 164, 189, 210, 273, 314, 351, 381, 439, 440, 469, 474, 478, 485], "foo_bar": [72, 126, 298, 394], "say": [72, 73, 76, 78, 82, 83, 85, 87, 95, 103, 107, 109, 111, 112, 114, 116, 122, 139, 144, 154, 181, 189, 200, 209, 233, 237, 243, 250, 254, 259, 272, 273, 274, 275, 277, 289, 355, 399, 417, 425, 432, 436, 438, 450, 467, 468, 469, 471, 472, 473, 476, 477, 479, 485], "ext": [72, 108, 109, 164, 197, 207, 274, 282, 300, 303, 456, 469, 470, 477, 485], "mod1": [72, 78], "mod2": [72, 78], "rememb": [72, 83, 95, 99, 100, 102, 103, 104, 108, 109, 111, 116, 165, 200, 254, 258, 267, 289, 325, 347, 367, 374, 381, 399, 406, 414, 416, 440, 445, 465, 466, 467, 471, 472, 473, 475, 477, 478], "rpm": [72, 75, 76, 89, 466, 469], "greg": [72, 75, 78, 94, 116, 466, 468, 469, 470, 471, 478, 480, 483, 485], "ward": [72, 75, 78, 116, 466, 468, 469, 470, 471, 480, 485], "gward": [72, 78], "doc_fil": 72, "readm": [72, 79, 116, 194, 230, 254, 264, 302, 460, 464, 465, 466, 477, 481, 482, 485], "diagram": [73, 108, 200, 232, 243, 345, 468], "stick": [73, 102, 114, 276, 289, 367, 381, 388, 468, 469, 472], "hyphen": [73, 81, 126, 164, 235, 298, 325, 369, 390, 402, 459, 469, 485], "foobar": [73, 95, 126, 227, 232, 298, 325, 351, 394, 485], "scan": [73, 78, 95, 100, 103, 104, 106, 108, 111, 112, 164, 183, 235, 237, 252, 299, 325, 334, 367, 374, 390, 432, 433, 459, 468, 469, 471, 473, 477, 480, 485], "subfoo": 73, "blah": [73, 114, 276, 298], "foopkg": 73, "meet": [73, 103, 104, 109, 146, 175, 181, 192, 196, 200, 305, 351, 399, 432, 466, 470, 476], "fine": [73, 83, 88, 94, 95, 109, 112, 114, 115, 173, 182, 183, 200, 208, 250, 298, 299, 324, 325, 339, 348, 359, 374, 393, 399, 432, 465, 466, 467, 469, 471, 485], "tarek": [73, 338, 360, 472, 473, 477, 480, 485], "ziad": [73, 472, 473, 477, 480, 485], "underlin": [73, 102, 183, 377, 381], "pyx": 73, "egg": [73, 109, 166, 181, 196, 225, 232, 233, 259, 264, 302, 313, 325, 336, 351, 355, 363, 385, 393, 394, 399, 417, 426, 436, 445, 447, 450, 453, 466, 485], "distributionmetadata": 73, "read_pkg_fil": 73, "py2": [73, 113, 325, 457, 477, 485], "pkg_info_path": 73, "difficult": [74, 78, 86, 94, 102, 104, 108, 110, 111, 114, 126, 145, 274, 305, 399, 417, 466, 467, 468, 469, 470, 473, 476, 477, 483, 485], "lobbi": 74, "_build_pi": 74, "builder": [74, 116, 403, 414, 415, 417], "valuabl": [74, 102, 120, 237, 344, 385, 478], "everyon": [74, 76, 479], "command_packag": 74, "distcmd": 74, "buildcmd": 74, "bdist_openpkg": 74, "dist_fil": 74, "upload": [74, 115, 158, 467, 471, 473, 480, 482, 484, 485], "anthoni": [75, 468, 470, 471, 482, 483, 484, 485], "baxter": [75, 468, 470, 471], "readili": [75, 109, 264, 289, 350, 364, 476, 479, 485], "wider": [75, 100, 164, 189, 390, 470, 479], "audienc": [75, 78, 108, 313, 404, 438, 469, 474], "ccompil": [75, 425, 485], "unixccompil": [75, 485], "msvccompil": 75, "bcppcompil": 75, "borland": [75, 468, 485], "cygwincompil": 75, "cygwin": [75, 299, 359, 365, 465, 467, 469, 483, 485], "archive_util": 75, "dep_util": 75, "dir_util": 75, "file_util": [75, 473, 485], "fancy_getopt": 75, "filelist": 75, "text_fil": 75, "textfil": [75, 153, 207], "bdist_packag": 75, "redhat": [75, 237, 485], "build_clib": 75, "build_script": 75, "install_data": 75, "install_head": [75, 78], "solid": [76, 183, 478, 479], "multitud": 76, "hope": [76, 86, 107, 108, 109, 112, 220, 335, 465, 466, 467, 478, 479, 481, 483], "accessori": [76, 116], "occasion": [76, 82, 94, 100, 109, 126, 175, 183, 192, 196, 208, 212, 237, 254, 277, 281, 298, 299, 370, 373, 440, 466, 471, 472, 477, 485], "bdist_pkgtool": 76, "bdist_sdux": 76, "noarch": 76, "nevertheless": [76, 86, 109, 164, 204, 220, 264, 298, 363, 373, 417, 474], "glossari": [76, 114, 187, 485], "concern": [76, 107, 108, 116, 133, 139, 164, 173, 275, 305, 320, 348, 367, 394, 430, 467, 468, 473, 476, 481, 482, 483, 484, 485], "jython": [76, 88, 94, 97, 218, 309, 367, 411, 438, 453, 459, 467, 470, 472, 477, 479], "vast": [76, 218, 336, 373, 483, 484, 485], "mass": [76, 94, 189, 218, 466], "scipi": [76, 350, 448, 455, 458, 465], "pillow": [76, 374, 454], "mxbase": 76, "centr": 78, "saw": [78, 83], "env": [78, 94, 109, 114, 148, 173, 196, 207, 299, 302, 351, 355, 399, 403, 411, 425, 442, 452, 457, 464, 465, 469, 470, 483, 485], "www": [78, 85, 89, 104, 112, 114, 115, 116, 145, 158, 164, 168, 172, 175, 189, 190, 207, 233, 242, 247, 249, 250, 320, 324, 325, 334, 347, 348, 351, 359, 391, 398, 399, 400, 407, 415, 417, 428, 430, 432, 439, 444, 449, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 482, 485], "dozen": [78, 472, 477, 485], "spirit": [78, 99], "mydir": [78, 88], "promis": [78, 83, 218, 261, 477], "lay": [78, 109, 222], "great": [78, 82, 108, 243, 250, 325, 393, 406, 466, 467, 468, 469, 471, 472, 473, 474, 478, 480, 483, 485], "foo1": [78, 289, 325], "foo2": [78, 289, 325], "ext_packag": 78, "subpkg": [78, 258], "cpp": [78, 469, 485], "seem": [78, 83, 86, 89, 100, 104, 108, 111, 126, 145, 200, 223, 277, 285, 299, 314, 347, 434, 436, 466, 467, 468, 469, 471, 485], "notwithstand": [78, 430, 466], "_foo": [78, 261], "swig_opt": 78, "modern": [78, 83, 106, 110, 120, 133, 149, 183, 184, 201, 242, 264, 316, 338, 344, 348, 363, 374, 410, 466, 470, 472, 473, 477, 478, 481, 482, 483, 484, 485], "mc": [78, 439, 485], "rc": [78, 111, 182, 215, 302, 355, 360, 367, 403, 415], "x11r6": 78, "x11": [78, 111, 374, 381, 399, 407, 485], "xlib": [78, 374], "advantag": [78, 83, 85, 95, 100, 104, 108, 109, 113, 116, 145, 192, 204, 230, 257, 258, 305, 314, 330, 337, 351, 372, 380, 392, 406, 415, 417, 419, 425, 466, 469, 470, 475, 477, 478, 479, 480, 483, 485], "python1": [78, 116], "arrayobject": 78, "incdir": 78, "sensibl": [78, 112, 115, 126, 133, 173, 189, 242, 261, 298, 370, 393, 394, 434, 470, 473, 481, 482, 485], "ndebug": [78, 460], "have_strftim": 78, "have_foo": 78, "have_bar": 78, "xt": [78, 91, 156, 241, 276, 390], "explan": [78, 111, 115, 173, 189, 196, 252, 272, 277, 289, 292, 303, 307, 310, 325, 344, 351, 359, 371, 374, 388, 399, 466, 467, 468, 469, 470, 471, 472, 477, 485], "mypkg": [78, 298], "clever": [78, 100, 114, 158, 243, 305, 352, 468], "xmlproc_pars": 78, "xmlproc_val": 78, "package_data": [78, 79], "arrang": [78, 94, 104, 108, 109, 133, 138, 139, 144, 200, 243, 261, 274, 289, 348, 370, 374, 380, 381, 485], "dat": [78, 126, 190, 465], "spoon": 78, "bm": 78, "b1": [78, 344, 388], "gif": [78, 203, 212, 213, 238, 256, 374, 388, 411, 471, 485], "b2": [78, 344, 388], "discourag": [78, 104, 111, 144, 164, 187, 201, 232, 258, 294, 325, 340, 348, 351, 367, 432, 468, 471, 476, 485], "publish": [78, 83, 109, 111, 192, 196, 198, 347, 367, 372, 424, 430, 465, 467, 473, 477, 484, 485], "trove": [78, 110, 469], "licenc": [78, 430], "200": [78, 88, 95, 115, 162, 183, 192, 196, 230, 248, 249, 252, 344, 348, 351, 374, 388, 392, 399, 411, 431, 450, 456, 469, 481, 483, 485], "plain": [78, 81, 83, 95, 109, 115, 133, 157, 158, 159, 166, 179, 189, 203, 204, 207, 211, 212, 213, 220, 249, 261, 273, 342, 348, 349, 353, 390, 399, 411, 425, 426, 430, 439, 468, 474, 477, 479, 480, 481, 485], "sourceforg": [78, 90, 91, 116, 189, 466, 467, 469, 472, 485], "art": [78, 160, 161, 166, 200, 243], "adher": [78, 164, 173, 252, 268, 275, 289, 347, 438], "experiment": [78, 100, 103, 254, 277, 347, 374, 376, 414, 438, 469, 474, 475, 477, 482, 483, 485], "mileston": 78, "a1": [78, 109, 235, 485], "a2": [78, 109, 235, 325], "bn": [78, 90], "pr1": 78, "pr2": 78, "prn": 78, "osi": [78, 313], "approv": [78, 250, 294, 313, 465, 466, 473, 485], "offic": [78, 201, 430], "gut": [78, 114, 158, 485], "distutils_debug": [78, 485], "527": [79, 468], "rst": [79, 194, 302, 460, 464, 482, 485], "roll": [79, 166, 189, 275, 347, 367, 392, 444, 471, 472], "regener": [79, 208, 317, 436, 460, 473, 480, 481, 485], "rcs": 79, "cvs": [79, 299, 466, 467, 468, 469, 470, 471, 485], "svn": [79, 126, 169, 360, 398, 469, 471, 472, 473, 477, 485], "hg": [79, 173, 302, 348, 469, 473, 477, 485], "git": [79, 90, 149, 355, 479, 483, 485], "bzr": 79, "_darc": 79, "redund": [79, 83, 100, 122, 276, 300, 325, 351, 390, 428, 440, 468, 473, 476, 485], "weed": 79, "unalt": 79, "pyinit_": [81, 485], "pyinitu_": 81, "punycod": [81, 164, 469, 485], "initfunc_nam": 81, "u_": 81, "pyinit": 81, "driver": [81, 183, 200, 219, 237, 299, 301, 344, 367, 409, 410, 420, 469, 485], "module1": [81, 466], "packagenam": 81, "learn": [81, 83, 85, 87, 89, 94, 97, 99, 100, 102, 103, 104, 110, 111, 114, 158, 182, 192, 200, 254, 281, 305, 337, 347, 350, 374, 388, 415, 468, 469, 471, 472, 473, 477, 481, 482, 485], "major_vers": 81, "minor_vers": 81, "tcl83": 81, "martin": [81, 114, 237, 294, 466, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 483, 485], "loewi": [81, 294], "dndebug": [81, 82], "wall": [81, 82, 189, 314, 472, 485], "wstrict": [81, 82, 485], "fpic": [81, 460], "dmajor_vers": 81, "dminor_vers": 81, "python2": [81, 89, 116, 117, 118, 351, 425, 465, 467, 472, 479, 485], "i686": [81, 399], "ltcl83": 81, "trust": [81, 158, 230, 249, 255, 274, 289, 305, 308, 311, 342, 348, 355, 464, 465, 472, 473, 479, 483, 485], "enrich": 82, "tailor": [82, 100, 253, 351, 367], "identif": [82, 142, 289, 353, 370, 476, 485], "fprintf": [82, 83], "shut": [82, 112, 133, 252, 334, 339, 344, 345, 359, 388, 411, 456, 459, 469, 473, 480, 484, 485], "troubl": [82, 107, 112, 115, 220, 465, 470], "cumbersom": [82, 192, 374], "cost": [82, 95, 100, 173, 189, 194, 196, 233, 242, 250, 258, 299, 351, 372, 374, 385, 390, 394, 426, 432, 466, 469, 472, 473, 479, 485], "despit": [82, 95, 109, 112, 242, 268, 302, 348, 390, 436, 472, 485], "accommod": [82, 109, 208, 374, 470, 485], "pname": 82, "pmodul": [82, 83, 485], "parg": 82, "pythonfil": 82, "glue": [82, 100, 468, 470], "numarg": 82, "emb_numarg": 82, "embmethod": 82, "embmodul": 82, "pyinit_emb": 82, "cflag": [82, 116, 312, 366, 460, 469, 485], "4m": 82, "fwrapv": 82, "ldflag": [82, 460, 469, 485], "lpthread": 82, "ldl": 82, "lutil": 82, "lm": [82, 116, 351, 439], "lpython3": [82, 483, 485], "xlinker": [82, 116], "welcom": [82, 100, 102, 145, 162, 230, 289, 294, 388, 430, 471, 477, 485], "linkforshar": [82, 485], "incorpor": [83, 108, 111, 192, 273, 348, 417, 430, 469, 471, 472, 473, 476, 477, 483, 485], "cffi": [83, 84, 101, 192, 485], "favorit": [83, 114, 446], "food": [83, 97, 305, 450], "monti": [83, 173, 200, 232, 268, 302, 347, 350, 351, 363, 426, 443, 458, 470, 472, 477], "fan": 83, "ls": [83, 99, 109, 142, 183, 337, 355, 363, 364, 480], "spammodul": 83, "spammifi": 83, "spam_system": 83, "sts": [83, 94, 355, 470], "predefin": [83, 95, 108, 111, 118, 162, 164, 182, 183, 254, 273, 287, 352, 374, 407, 409, 428, 432, 485], "pyerr_": 83, "lost": [83, 99, 100, 108, 109, 114, 139, 183, 189, 192, 208, 218, 233, 254, 268, 273, 275, 289, 314, 338, 339, 342, 345, 431, 448, 466, 468, 477, 478, 479, 484, 485], "went": [83, 99, 150, 220, 301, 342, 417, 466, 468, 471, 472, 484], "predeclar": 83, "wise": [83, 187, 192, 218, 468, 482], "couldn": [83, 111, 115, 264, 299, 339, 347, 394, 427, 467, 468, 471, 473, 481, 485], "satisfi": [83, 115, 187, 238, 241, 264, 274, 281, 354, 370, 432, 436, 477], "spamerror": 83, "pyinit_spam": 83, "pymodinit_func": [83, 86, 460, 469, 485], "unintend": [83, 95, 192, 289, 302, 485], "genuin": [83, 200, 222, 473, 477], "seen": [83, 85, 94, 95, 100, 104, 109, 162, 237, 242, 261, 267, 275, 277, 298, 311, 337, 367, 374, 404, 406, 417, 419, 428, 459, 469, 472, 475, 479, 482, 485], "spammethod": 83, "spam_doc": 83, "pyinit_nam": 83, "satisfactorili": 83, "pyimport_inittab": [83, 485], "interven": [83, 109, 196, 200, 211, 478], "exercis": [83, 94, 108, 112, 166, 193, 273, 298, 314, 367, 472], "substanti": [83, 250, 267, 320, 414, 430, 468, 470, 475, 477, 478, 479, 481, 485], "xxmodul": 83, "perman": [83, 115, 116, 230, 234, 255, 399, 456, 465, 480, 484, 485], "luckili": [83, 100, 110, 392, 411], "toplevel": [83, 166, 192, 232, 358, 374, 380, 381, 417], "lx11": 83, "imagin": [83, 111, 120, 305, 393, 394], "fortun": [83, 86, 102, 120, 158, 474], "dwell": 83, "somehow": [83, 289, 350, 363, 472, 473], "wherev": [83, 89, 100, 102, 109, 111, 114, 183, 218, 374, 390, 401, 468, 471], "my_callback": [83, 85, 298], "my_set_callback": 83, "set_callback": 83, "boilerpl": [83, 86, 100, 295, 367, 393, 436, 480, 485], "arglist": 83, "eventcod": 83, "placement": [83, 152, 308, 374, 417], "mistak": [83, 110, 111, 112, 126, 218, 220, 273, 277, 298, 351, 371, 374, 460, 470, 471, 473, 475, 476, 485], "whoop": [83, 109], "lls": 83, "ii": [83, 89, 166, 182, 348, 431], "si": [83, 184, 355], "wb": [83, 97, 109, 123, 126, 156, 207, 215, 230, 241, 276, 284, 305, 310, 315, 326, 356, 390, 401, 405, 423, 425, 426, 466, 475, 477], "100000": [83, 232, 314, 372, 386, 469], "400": [83, 109, 115, 123, 162, 230, 248, 289, 294, 342, 374, 388, 445, 456, 476], "300": [83, 102, 109, 115, 162, 248, 254, 388, 399, 431, 456, 477], "myfunct": [83, 89, 175], "2j": [83, 106, 232, 268, 485], "geoff": [83, 485], "philbrick": 83, "hks": 83, "keywdarg_parrot": 83, "keywd": 83, "voltag": [83, 232, 445], "stiff": [83, 445], "voom": [83, 445], "norwegian": [83, 164, 445], "blue": [83, 102, 109, 111, 113, 154, 162, 166, 183, 218, 324, 350, 351, 374, 381, 388, 406, 445, 446, 456, 469, 470, 475, 476, 477, 481, 485], "sss": [83, 85, 189], "parrot": [83, 232, 249, 313, 445, 472], "volt": [83, 445], "love": [83, 109, 154, 181, 251, 445, 475, 479], "keywdarg_method": 83, "skit": [83, 200], "keywdargmodul": 83, "keywdarg": 83, "pyinit_keywdarg": 83, "counterpart": [83, 109, 183, 232, 264, 267, 273, 294, 325, 344, 351, 366, 473, 475, 476, 477, 482, 485], "iii": 83, "789": [83, 192, 472], "ss": [83, 114, 189, 255, 351, 371, 476, 478], "hell": 83, "forgotten": [83, 114, 132], "occupi": [83, 114, 123, 289, 328, 377, 381, 479], "reus": [83, 86, 90, 100, 112, 133, 164, 172, 175, 182, 190, 200, 218, 221, 233, 243, 258, 299, 325, 344, 345, 348, 354, 367, 369, 370, 393, 406, 431, 436, 471, 477, 484, 485], "unusu": [83, 102, 109, 116, 189, 220, 301, 314, 328, 350, 434, 485], "prematur": [83, 108, 249, 277, 439, 474, 485], "undetect": [83, 277, 370], "plenti": [83, 112], "appar": [83, 102, 158, 339, 412, 466, 470], "heavi": [83, 115, 173, 473, 478, 482, 485], "disadvantag": [83, 86, 94, 95, 111, 138, 164, 192, 348, 372, 468, 475], "truli": [83, 94, 95, 121, 187, 277, 369, 399, 473, 474, 485], "reclaim": [83, 85, 257, 258, 406], "nobodi": [83, 158, 242, 252, 342, 485], "pictur": [83, 173, 207, 468, 470], "bet": 83, "therebi": [83, 95, 204, 210, 388, 465, 479, 485], "no_bug": 83, "spent": [83, 314, 328, 339, 471, 472], "his": [83, 94, 237, 439, 466, 468, 472, 473, 479, 481, 485], "slowli": [83, 109, 476], "__cplusplus": 83, "sight": [83, 147], "unic": [83, 301, 316], "clash": [83, 182, 254, 273, 274, 277, 434, 439, 472, 480, 484, 485], "encourag": [83, 87, 98, 110, 220, 298, 334, 335, 337, 409, 415, 419, 438, 466, 467, 474, 483, 485], "certainti": [83, 409], "burden": [83, 473, 474, 478, 480], "pyspam_system": 83, "spam_modul": 83, "pyspam_api": 83, "pyspam_api_point": 83, "c_api_object": 83, "pyspam_system_num": 83, "_c_api": 83, "disappear": [83, 85, 108, 112, 144, 468, 470, 485], "bulk": [83, 192, 479], "ifndef": [83, 100, 485], "py_spammodule_h": 83, "endif": [83, 100, 247, 325, 425, 460, 476, 483, 484], "pyspam_system_return": 83, "pyspam_system_proto": 83, "import_spam": 83, "pyinit_cli": 83, "clientmodul": 83, "metaphor": [83, 258, 380], "cython": [84, 88, 89, 95, 101, 479, 485], "numba": 84, "baggag": 85, "easiest": [85, 86, 89, 94, 95, 112, 126, 192, 200, 250, 254, 264, 298, 299, 393], "dealt": [85, 112, 163, 298, 324], "newdatatype_dealloc": 85, "newdatatypeobject": 85, "obj_underlyingdatatypeptr": 85, "other_obj": 85, "unwound": [85, 273, 432], "mislead": [85, 114, 128, 159, 189, 399, 415, 468, 476, 477, 485], "my_dealloc": 85, "cbresult": 85, "err_typ": 85, "err_valu": 85, "err_traceback": 85, "unstabl": [85, 118, 192, 483, 485], "textual": [85, 86, 95, 110, 114, 126, 182, 208, 273, 292, 294, 320, 325, 351, 363, 381, 414, 415, 430, 434, 440, 444, 468, 481, 485], "newdatatype_repr": 85, "ified_newdatatyp": 85, "human": [85, 108, 109, 114, 123, 196, 197, 205, 218, 237, 250, 252, 273, 294, 305, 309, 339, 342, 348, 349, 356, 359, 382, 391, 405, 418, 434, 457, 468, 475, 478, 479, 485], "consumpt": [85, 128, 261, 305, 328, 338, 359, 477, 478, 485], "newdatatype_str": 85, "stringified_newdatatyp": 85, "structmemb": [85, 86, 103], "py_audit_read": 85, "read_restrict": 85, "write_restrict": 85, "newdatatype_getattr": 85, "50s": 85, "400s": 85, "newdatatype_setattr": 85, "newdatatype_richcmp": 85, "obj1": [85, 470], "obj2": [85, 470], "size1": 85, "size2": 85, "newdatatyp": 85, "unfil": [85, 434, 485], "newdatatype_hash": 85, "some_s": 85, "32767": 85, "some_numb": 85, "toy": [85, 305], "newdatatype_cal": 85, "arg3": [85, 95, 106, 122], "incur": [85, 192, 267, 477], "trivialobject": 85, "trivialtyp": 85, "trivial_dealloc": 85, "tp_": 85, "some_object": [85, 95, 261, 393], "mytyp": [85, 298], "myth": 85, "gentl": [86, 103, 107, 126, 468], "customobject": 86, "customtyp": 86, "custommodul": 86, "pyinit_custom": 86, "mandatori": [86, 94, 119, 255, 258, 274, 299, 348, 349, 469, 478, 482, 484, 485], "wari": 86, "accid": [86, 472, 473, 474, 483, 485], "besid": [86, 100, 103, 189, 218, 232, 264, 339, 381, 406, 439, 440, 465, 476, 485], "ob_fval": 86, "pick": [86, 95, 109, 115, 116, 147, 166, 252, 259, 281, 298, 386, 392, 425, 466, 471], "mycustom": 86, "fire": [86, 106, 109, 126, 144, 145, 339, 485], "uninterest": [86, 196], "showcas": [86, 133, 139], "custom2": 86, "custom_dealloc": 86, "custom_new": 86, "custom_init": 86, "tmp": [86, 109, 114, 116, 175, 230, 252, 277, 338, 365, 436, 466, 469, 470, 471, 472, 473, 477, 483], "ooi": 86, "custom_memb": 86, "custom_nam": 86, "custom_method": 86, "pyinit_custom2": 86, "midway": [86, 428], "polymorph": [86, 97, 100, 421], "ourselv": [86, 120, 390, 485], "anyon": [86, 110, 116, 348, 367, 430, 467, 473, 479], "riski": [86, 200, 485], "paranoid": 86, "uui": 86, "custom_getfirst": 86, "custom_setfirst": 86, "custom_getlast": 86, "custom_setlast": 86, "custom_getsett": 86, "custom3": 86, "pyinit_custom3": 86, "did": [86, 94, 100, 109, 110, 111, 112, 115, 144, 172, 173, 200, 209, 250, 289, 290, 292, 298, 299, 320, 325, 335, 348, 355, 359, 386, 390, 392, 419, 432, 435, 446, 466, 467, 468, 476, 477, 478, 479, 482, 483, 485], "unneed": [86, 415, 473, 479, 484, 485], "some_attribut": [86, 393], "custom_travers": 86, "custom_clear": 86, "custom4": 86, "pyinit_custom4": 86, "subobject": [86, 95], "vret": 86, "micro": [86, 95, 359, 466, 473, 475, 476, 482, 485], "robust": [86, 158, 190, 261, 314, 339, 350, 373, 406, 473, 477, 479, 480, 485], "reimplement": [86, 388, 392, 468, 479, 480, 481, 482, 485], "sublist": [86, 380, 466, 477], "sublistobject": 86, "sublist_incr": 86, "sublist_method": 86, "sublist_init": 86, "sublisttyp": 86, "sublistmodul": 86, "pyinit_sublist": 86, "resembl": [86, 116, 183, 218, 232, 250, 299, 303, 337, 459, 468, 472, 473, 476, 483], "briefli": [87, 114, 192, 471], "explanatori": [87, 200, 320, 392, 485], "materi": [87, 104, 111, 183, 196, 241, 344, 348, 373, 380, 390, 430, 470, 473, 485], "xy": [87, 116, 267, 340, 390], "studi": [87, 95, 104, 200, 243, 388, 469, 472], "paradigm": [87, 104], "reassur": 87, "pythonxi": [87, 465, 483], "ni": [87, 313, 398, 450, 471], "cl": [87, 303, 472], "thank": [87, 104, 110, 111, 114, 162, 207, 242, 289, 347, 367, 390, 393, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 481, 482, 485], "_declspec": 87, "dllexport": [87, 96], "initspam": 87, "nigetspamdata": 87, "100k": 87, "rid": [87, 112, 467, 476, 485], "msvcrtxx": 87, "guido": [88, 90, 95, 97, 103, 196, 285, 351, 390, 430, 446, 454, 466, 467, 468, 469, 471, 472, 473, 474, 476, 479, 480, 481, 482, 483, 484, 485], "van": [88, 90, 95, 97, 166, 189, 427, 430, 466, 467, 468, 469, 471, 472, 473, 474, 476, 479, 480, 481, 482, 483, 484, 485], "rossum": [88, 90, 95, 97, 427, 430, 466, 467, 468, 469, 471, 472, 473, 474, 476, 479, 480, 481, 482, 483, 484], "20": [88, 95, 99, 102, 103, 104, 106, 108, 109, 111, 114, 140, 162, 182, 187, 189, 192, 200, 216, 242, 243, 254, 261, 265, 267, 273, 289, 299, 302, 314, 324, 325, 327, 328, 344, 348, 350, 351, 359, 363, 371, 372, 388, 390, 398, 400, 430, 439, 444, 453, 455, 459, 460, 466, 470, 471, 472, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485], "30": [88, 94, 95, 102, 103, 104, 106, 108, 109, 145, 162, 166, 189, 192, 200, 243, 265, 267, 273, 275, 299, 322, 324, 327, 344, 350, 351, 352, 367, 370, 371, 372, 388, 427, 444, 445, 455, 456, 460, 469, 470, 471, 473, 475, 476, 479, 480, 481, 482, 483, 484, 485], "19999999999999996": 88, "0011001100110011001100110011001100110011001100110011": 88, "1999999999999999555910790149937383830547332763671875": 88, "15": [88, 95, 97, 102, 104, 106, 108, 109, 113, 114, 137, 164, 166, 173, 187, 189, 200, 210, 222, 230, 243, 248, 254, 265, 267, 273, 294, 299, 305, 324, 325, 328, 347, 348, 350, 351, 352, 355, 359, 371, 372, 383, 388, 428, 429, 450, 460, 467, 469, 470, 471, 472, 473, 475, 476, 477, 480, 481, 482, 483, 484, 485], "eight": [88, 114, 183, 265, 350, 351, 360, 374, 439, 466, 469, 470, 483], "modula": [88, 90, 280, 444], "m_": 88, "baseclass": 88, "methodnam": [88, 289, 392, 423, 444, 445], "572": [88, 431, 434, 483, 485], "mail": [88, 90, 104, 109, 110, 111, 149, 201, 202, 203, 205, 207, 209, 212, 224, 255, 275, 277, 278, 294, 299, 323, 341, 342, 348, 361, 392, 411, 456, 458, 466, 467, 468, 469, 470, 471, 472, 477, 480, 485], "pipermail": [88, 458, 467, 469], "3000": [88, 97, 119, 389, 390, 431, 432, 472, 474], "2006": [88, 104, 189, 273, 320, 415, 417, 426, 430, 471, 484], "novemb": [88, 189, 439, 485], "004643": 88, "mydict": [88, 95, 390, 470], "elif": [88, 95, 99, 102, 104, 109, 115, 128, 129, 189, 196, 207, 235, 258, 295, 325, 347, 349, 351, 359, 363, 403, 431, 432, 435, 436, 439, 445, 471, 478, 485], "function_1": [88, 106], "function_2": [88, 106], "method_1": 88, "myvisitor": 88, "visit_a": 88, "method_nam": [88, 89], "visit_": [88, 128], "stackless": [88, 438], "nuitka": [88, 95], "very_long_list_of_fil": 88, "boehm": 88, "purifi": [88, 460], "pascal": [88, 90, 95, 104, 354, 431, 444, 445, 446, 453, 469, 473], "lisp": [88, 95, 104, 468], "539294296": 88, "1142331976": 88, "listwrapp": 88, "the_list": 88, "98767": 88, "555": 88, "el": [88, 149, 364, 398, 417, 435], "9999999": 88, "1001": [88, 164, 352], "7777777": 88, "333": [88, 95, 446, 448, 471], "stub": [88, 162, 264, 390, 393, 485], "1970": [88, 90, 154, 157, 189, 346, 371, 485], "spaghetti": 88, "delphi": 88, "21": [88, 104, 106, 109, 114, 189, 192, 196, 210, 230, 233, 242, 243, 325, 348, 350, 371, 383, 386, 445, 453, 454, 459, 468, 469, 471, 472, 477, 478, 481, 483, 484, 485], "42": [88, 95, 108, 126, 128, 132, 135, 144, 166, 175, 176, 182, 192, 200, 218, 232, 233, 261, 274, 289, 290, 298, 324, 350, 351, 352, 372, 385, 388, 390, 392, 393, 424, 431, 433, 444, 445, 450, 453, 470, 471, 472, 477, 478, 481, 483, 484, 485], "63": [88, 267, 324, 359, 485], "fee": [88, 232, 430], "fie": 88, "fum": [88, 232], "fiefoo": 88, "book": [89, 101, 104, 110, 111, 157, 161, 166, 189, 277, 325, 347, 367, 373, 374, 477, 485], "pyrex": 89, "sip": [89, 398], "cxx": [89, 360, 460], "weav": 89, "pythonrun": [89, 471, 485], "pylists": 89, "al": [89, 104, 187, 344, 348, 353, 381, 472, 481, 485], "pymap": 89, "arg_format": 89, "print_error": [89, 477], "stdoutcatch": 89, "attrnam": [89, 273, 414], "ugli": [89, 120, 196, 374, 466, 469], "hackeri": 89, "worth": [89, 100, 109, 123, 200, 230, 274, 275, 289, 438, 439, 466, 467, 468, 471, 480, 485], "effort": [89, 95, 100, 109, 111, 113, 233, 281, 313, 350, 466, 468, 469, 470, 472, 473, 475, 476, 477, 482], "gdb": [89, 95, 473, 485], "gdbinit": [89, 473, 485], "br": [89, 183, 439, 474, 475, 477, 478, 485], "_pyimport_loaddynamicmodul": 89, "myscript": [89, 303, 314, 442, 459], "50": [89, 94, 95, 104, 108, 109, 110, 144, 162, 166, 189, 192, 254, 273, 285, 314, 324, 325, 344, 350, 359, 371, 372, 381, 388, 392, 394, 416, 417, 453, 454, 455, 472, 473, 477, 480, 481, 482, 483, 484, 485], "devel": [89, 106, 294, 485], "apt": [89, 106, 481, 485], "tripl": [89, 97, 111, 114, 196, 257, 294, 299, 306, 325, 334, 344, 351, 369, 388, 431, 439, 476, 485], "myreadlin": 89, "relink": 89, "linkcc": [89, 460], "bpl": 89, "amoeba": 90, "bourn": [90, 307], "1989": [90, 189, 472], "usenet": [90, 94, 108], "bugfix": [90, 99, 110, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "rcn": [90, 103], "0an": 90, "0bn": 90, "0rcn": 90, "a0": 90, "4a0": 90, "newsgroup": [90, 294, 470], "comp": [90, 94, 95, 108, 156, 294, 458, 467, 468, 471, 478, 479], "lang": [90, 94, 95, 108, 114, 237, 272, 347, 399, 458, 467, 468, 469, 471, 474], "communiti": [90, 95, 254, 463, 466, 467, 471, 472, 477, 482], "rss": [90, 468], "jelk": 90, "boer": 90, "283": [90, 189], "303": [90, 115, 248, 399], "wiki": [90, 91, 94, 95, 104, 166, 242, 267, 347, 348, 373, 463, 470, 471, 473, 477, 478, 485], "moin": [90, 94, 463, 470], "pythonbook": 90, "bbc": [90, 172, 443, 480], "18": [90, 99, 104, 106, 114, 189, 192, 200, 230, 233, 243, 267, 302, 324, 325, 338, 348, 350, 351, 381, 388, 450, 455, 469, 470, 473, 476, 477, 482, 483, 484, 485], "602": [90, 484], "mailman": [90, 341, 468, 470, 484], "zope": [90, 430, 467, 468, 477], "googl": [90, 93, 94, 108, 115, 407, 423, 471, 472, 473, 478, 483, 485], "yahoo": [90, 190, 471, 472], "lucasfilm": 90, "ltd": [90, 348, 430], "pygam": 90, "__sizeof__": [90, 359, 393, 472, 485], "__": [90, 95, 109, 295, 367, 439], "emac": [90, 96, 102, 114, 162, 183, 254, 277, 337, 439, 463, 472], "edu": [90, 104, 399, 430, 468, 469, 485], "tcl_librari": 91, "tk_librari": 91, "sam": [91, 430, 466, 485], "tkappinit": 91, "tclsam_init": 91, "libtclsam": 91, "libtksam": 91, "xtaddinput": 91, "keyboard": [91, 96, 102, 183, 254, 339, 355, 381, 388, 392, 445, 472, 485], "takefocus": [91, 381], "compaq": 93, "engin": [94, 104, 107, 111, 192, 272, 325, 347, 374, 381, 417, 419, 466, 468, 470, 472, 473, 480, 485], "mathmodul": 94, "sl": [94, 290, 485], "scriptfil": 94, "755": [94, 109], "alex": [94, 469, 472, 473, 476, 480, 481, 483, 484, 485], "rezinski": 94, "ncurs": [94, 102, 183, 466, 467, 470, 476, 483, 485], "sysv": [94, 466, 467], "colour": [94, 102, 111, 128, 466, 485], "mous": [94, 102, 183, 355, 376, 381, 388, 466, 472, 485], "ose": [94, 264, 344, 466, 482, 485], "fancier": [94, 126, 196, 470, 471, 473], "smalltalk": [94, 104, 166, 392, 444, 467], "delight": 94, "main_log": 94, "tractabl": 94, "ters": [94, 309, 465], "pleasant": [94, 466, 467, 471], "fun": [94, 173, 233, 388, 390, 392, 481], "flaw": [94, 98, 393, 468, 477, 485], "self_test": 94, "unavail": [94, 115, 200, 261, 276, 289, 299, 338, 390, 432, 485], "epydoc": 94, "thread_task": 94, "sequenti": [94, 109, 112, 132, 169, 225, 242, 264, 289, 305, 314, 351, 367, 393, 432, 456, 485], "001": [94, 189, 232, 267, 277, 314, 371, 439, 448], "realist": [94, 355, 393, 415, 428, 470, 471], "130283832797456": 94, "130283824404752": 94, "130283816012048": 94, "130283807619344": 94, "130283799226640": 94, "vm": [94, 328, 478, 485], "pvm": 94, "l2": [94, 164, 381], "d1": [94, 473, 484], "mutex": [94, 121, 131, 143, 359, 485], "hindranc": 94, "multiprocessor": [94, 290, 309], "cpu": [94, 112, 114, 128, 132, 133, 136, 144, 164, 170, 172, 242, 243, 268, 276, 299, 328, 351, 371, 372, 386, 413, 463, 469, 476, 478, 482, 483, 484, 485], "insist": [94, 315, 374], "stein": [94, 466, 485], "adam": [94, 472, 473, 476, 477, 478, 481, 482, 483, 484, 485], "olsen": [94, 472, 473], "experi": [94, 100, 104, 108, 111, 133, 182, 237, 314, 374, 388, 392, 414, 465, 466, 467, 468, 472, 473, 475, 476, 480, 483, 485], "safethread": 94, "exhibit": [94, 254, 264, 299, 351], "sharp": [94, 164], "slower": [94, 95, 111, 164, 233, 242, 254, 264, 276, 289, 336, 388, 469, 470, 472, 474, 482, 483, 484, 485], "compens": [94, 314, 481, 485], "creativ": [94, 242], "judici": [94, 187, 472], "tremend": 94, "3rd": [94, 325, 340, 390, 450, 478, 485], "rate": [94, 123, 147, 243, 295, 301, 314, 350, 356, 400, 405, 481, 485], "gain": [94, 100, 109, 150, 173, 258, 264, 305, 359, 399, 436, 438, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485], "old_path": 94, "new_path": 94, "ntfs": 94, "hfs": 94, "hhl": [94, 354], "homogen": [94, 351, 354, 390, 412], "osx": [94, 182, 479, 482, 485], "ironpython": [94, 97, 218, 309, 438, 472, 485], "pyseri": 94, "mitch": 94, "chapman": [94, 470, 483, 485], "selm": 94, "34a04430": 94, "cf9": 94, "ohioe": 94, "paul": [94, 320, 465, 466, 467, 468, 469, 471, 472, 473, 478, 479, 480, 482, 483, 484, 485], "boddi": [94, 465], "webprogram": 94, "cameron": [94, 154], "laird": 94, "20210224183619": 94, "phaseit": 94, "claird": 94, "web_python": 94, "me": [94, 112, 116, 207, 233, 243, 247, 294, 352, 367, 394, 457, 465, 472], "qs": [94, 398], "josephin": 94, "mi": [94, 156, 471, 483, 484, 485], "req": [94, 115, 348, 393, 399, 477], "hdrs": [94, 399], "guy": 94, "steel": [94, 485], "2c": [94, 374, 485], "sender": [94, 109, 207, 210, 215, 277, 342], "fromaddr": [94, 109, 274, 275, 342, 348], "toaddr": [94, 109, 274, 275, 342], "localhost": [94, 109, 112, 115, 145, 207, 249, 252, 254, 274, 275, 289, 311, 319, 335, 342, 345, 348, 364, 399, 423, 424, 455, 485], "sbin": [94, 182, 325], "progress": [94, 111, 158, 200, 219, 230, 239, 243, 289, 295, 337, 347, 348, 380, 381, 403, 404, 465, 466, 468, 473, 485], "twist": [94, 394, 430, 485], "disk": [94, 104, 108, 114, 175, 190, 201, 207, 215, 220, 243, 250, 254, 264, 271, 275, 277, 284, 287, 290, 294, 299, 301, 304, 305, 328, 333, 336, 338, 347, 355, 359, 386, 409, 417, 426, 469, 471, 472, 474, 478, 485], "lightweight": [94, 223, 233, 268, 347, 385, 403, 413, 465, 466, 471, 472, 480, 481], "databaseprogram": 94, "sdev": 94, "gaussian": [94, 477], "graphic": [95, 102, 114, 116, 164, 179, 183, 256, 323, 374, 380, 388, 392, 407, 472], "pythonwin": [95, 182, 465, 466], "cool": 95, "activepython": [95, 465], "eric": [95, 102, 181, 183, 302, 330, 417, 430, 446, 466, 467, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "pyqt": [95, 463], "scintilla": 95, "trepan3k": 95, "wing": 95, "komodo": 95, "pycharm": [95, 481], "pylint": [95, 110], "pyflak": [95, 485], "sooner": [95, 182, 415, 472], "mypi": [95, 110, 432, 480, 481, 485], "pyre": 95, "pytyp": [95, 110, 481], "pyinstal": [95, 289], "pyoxid": 95, "py2app": [95, 463], "py2ex": [95, 289, 485], "superfici": 95, "clutter": [95, 109, 477], "defeat": [95, 111, 404, 432, 485], "everywher": [95, 112, 367, 485], "harder": [95, 200, 298, 351, 394, 485], "linter": [95, 128, 390], "mx": 95, "zodb": [95, 468], "gordon": [95, 112, 466, 469, 485], "mcmillan": [95, 112, 469], "2nd": [95, 267, 325, 374, 485], "1st": [95, 189, 267], "gone": [95, 107, 115, 248, 393, 466, 467, 469, 472, 474, 477, 483, 485], "bite": [95, 111, 298, 394], "neophyt": 95, "memoiz": [95, 233, 467, 481, 485], "_cach": [95, 289, 467], "tast": 95, "14": [95, 99, 104, 106, 111, 114, 127, 144, 147, 164, 166, 182, 183, 189, 192, 200, 232, 243, 248, 254, 265, 267, 299, 325, 328, 350, 352, 359, 371, 383, 388, 402, 434, 439, 446, 448, 450, 453, 456, 468, 470, 471, 473, 477, 480, 481, 482, 483, 484, 485], "3c": [95, 374], "somevar": 95, "wrote": [95, 100, 104, 345, 430, 466, 468, 470, 479, 485], "wonder": [95, 100, 103, 113, 158, 181, 314, 438, 466, 469, 477], "factor": [95, 114, 147, 167, 200, 242, 298, 351, 390, 392, 434, 435, 445, 468, 473, 478, 482, 484, 485], "mistaken": [95, 444, 466, 477, 479, 485], "diagnos": [95, 108, 182, 254, 392, 394], "a_list": [95, 385], "some_tupl": 95, "some_int": 95, "calle": [95, 384], "se": [95, 250, 364, 374], "func1": [95, 390], "99": [95, 102, 112, 154, 182, 189, 192, 272, 274, 325, 350, 351, 371, 470, 473, 474, 477], "100": [95, 102, 109, 114, 115, 123, 132, 133, 141, 154, 162, 187, 189, 192, 196, 199, 208, 215, 221, 232, 248, 252, 254, 267, 272, 281, 289, 290, 301, 324, 335, 344, 347, 350, 351, 352, 363, 371, 372, 381, 388, 392, 399, 409, 411, 423, 431, 434, 445, 448, 450, 453, 454, 455, 456, 466, 469, 471, 472, 473, 476, 477, 479, 480, 483, 485], "clearest": [95, 469], "changeabl": 95, "func2": 95, "func3": 95, "func4": 95, "linear": [95, 138, 147, 154, 167, 196, 239, 334, 350, 351, 356, 388, 444, 469, 479, 483, 485], "tax": [95, 325, 453, 469], "10e6": 95, "inc": [95, 348, 412, 430, 466, 472], "dec": [95, 96, 104, 189, 228, 230, 455, 468, 469, 485], "newdict": 95, "olddict": 95, "new_l": 95, "0x16d07cc": 95, "arguabl": [95, 348], "deliber": [95, 100, 126, 298, 311, 340, 351, 389, 392, 459, 479], "benefici": [95, 109, 480], "gave": [95, 114, 392, 473, 477, 485], "porch": 95, "neighbour": 95, "syntact": [95, 175, 209, 247, 258, 292, 320, 347, 351, 390, 393, 398, 404, 418, 431, 434, 438, 439, 440, 445, 470, 471, 474], "on_tru": 95, "on_fals": 95, "ulf": 95, "bartelt": 95, "prime": [95, 172, 200, 215, 232, 289, 351, 359, 371, 445, 455, 477, 481, 483, 485], "fibonacci": [95, 233, 445, 453, 454], "mandelbrot": 95, "ru": [95, 225, 469], "ro": [95, 347], "iu": [95, 469], "sx": 95, "sy": 95, "yc": 95, "xc": [95, 359], "80": [95, 100, 110, 112, 141, 145, 154, 162, 164, 173, 215, 249, 250, 254, 267, 313, 314, 338, 344, 345, 350, 388, 392, 398, 399, 456, 470, 477, 480, 481, 485], "___": 95, "______": 95, "__________": 95, "_________________": 95, "axi": [95, 161, 281, 381, 445, 476], "____________________________": 95, "kid": [95, 388], "invari": [95, 104, 192, 203, 218, 243, 267, 305, 390, 434, 436, 485], "0o10": [95, 232], "0xa5": 95, "165": [95, 273, 350], "0xb2": 95, "178": 95, "ago": [95, 468, 485], "190": [95, 350, 468], "144": [95, 233, 267, 445, 453, 454, 483], "0144": 95, "0x144": 95, "rm": [95, 99, 302, 337], "rf": [95, 337, 439, 485], "09": [95, 109, 161, 216, 273, 281, 338, 348, 452, 485], "fanci": [95, 102, 109, 469, 473, 485], "04d": [95, 233], "3f": [95, 166, 450, 477, 483], "assembl": [95, 104, 114, 347, 355, 374, 432, 438, 471], "sio": 95, "yello": 95, "paren": [95, 118, 128, 181, 254, 435, 471, 485], "get_input": 95, "do_foo": [95, 162], "do_bar": [95, 162], "foo_inst": 95, "do_": [95, 162, 252], "myfunc": [95, 109, 197, 325, 424], "fname": [95, 114, 175, 274, 386, 479], "tough": 95, "dive": [95, 100], "hot": [95, 254, 314], "spot": [95, 301, 369], "benchmark": [95, 233, 314, 459, 466, 467, 469, 470, 471, 473, 474, 475, 478, 479, 480, 483, 484, 485], "sophist": [95, 100, 139, 145, 162, 175, 192, 273, 348, 352, 417, 468, 471], "benefit": [95, 104, 109, 110, 113, 120, 192, 199, 273, 274, 290, 305, 351, 359, 367, 381, 390, 406, 411, 465, 468, 469, 470, 473, 477, 478, 482, 483, 485], "sprinkl": [95, 438], "moder": [95, 104, 111, 230, 294, 298, 311, 325, 468, 469], "outweigh": 95, "detriment": 95, "confid": [95, 110, 116, 158, 324], "skill": 95, "devot": [95, 111], "quadrat": [95, 167, 196, 351, 413, 473, 476, 485], "my_str": 95, "my_bytes_object": 95, "penultim": 95, "activest": [95, 116, 458, 463, 466, 477], "52560": 95, "reorder": [95, 133, 218, 292, 417, 485], "mylist": [95, 187, 327, 477], "variat": [95, 103, 111, 189, 200, 218, 277, 299, 311, 348, 355, 432, 465, 471, 485], "keep_funct": 95, "keep_condit": 95, "fastest": [95, 100, 241, 289, 325, 372, 388, 428, 455, 472, 477, 483], "con": [95, 347, 485], "lisp_list": 95, "car": [95, 350], "cdr": 95, "replic": [95, 104, 215, 289, 465, 470, 473, 485], "exemplar": 95, "randal": [95, 113], "schwartz": [95, 113, 472], "isort": 95, "list1": 95, "list2": 95, "refin": [95, 482, 485], "mboxmailbox": 95, "maildirmailbox": 95, "outlookmailbox": 95, "mere": [95, 175, 189, 200, 232, 290, 298, 339, 355, 359, 388, 431, 474], "class1": [95, 393, 394, 468], "class2": [95, 393, 394, 468], "upperout": 95, "outfil": [95, 126, 146, 268, 298, 307, 384, 456, 475, 477, 485], "_outfil": 95, "trickier": [95, 298], "rough": [95, 103, 109, 112, 114, 181, 209, 233, 250, 258, 267, 281, 287, 289, 298, 299, 308, 351, 370, 389, 432, 466, 472, 473, 482, 484], "basealia": 95, "getcount": [95, 297, 484], "rebind": [95, 234, 440, 470], "tight": [95, 108, 116, 434, 438, 485], "cout": 95, "mangl": [95, 203, 232, 327, 434, 439, 440, 444, 479, 485], "_classname__spam": [95, 444], "privaci": [95, 348, 402], "bother": [95, 102, 109, 110, 114, 289, 467, 468], "vanish": [95, 164, 243, 390], "inconveni": [95, 100, 250, 261, 394, 417], "wors": [95, 111, 112, 133, 189, 194, 218, 268, 478, 479, 485], "patholog": [95, 485], "13901272": 95, "13891296": 95, "inadvis": 95, "500": [95, 115, 162, 189, 192, 221, 230, 248, 294, 350, 351, 402, 411, 454, 456, 469, 471, 476, 485], "thon": [95, 453], "english": [95, 109, 114, 298, 369, 371, 388, 438, 439, 473, 474, 480], "_sentinel": 95, "firstofmonthd": 95, "namedint": 95, "xlat": 95, "ten": [95, 103, 109, 166, 183, 192, 314, 324, 469], "titlestr": [95, 388], "2012": [95, 102, 114, 230, 478, 484, 485], "blog": [95, 394, 471], "rock": [95, 114, 126], "princip": [95, 128, 250, 348, 475, 477], "weather": 95, "govern": [95, 109, 187, 192, 201, 398, 423, 430, 477], "websit": [95, 115, 190, 399, 438, 477, 485], "station_id": 95, "_station_id": 95, "current_temperatur": 95, "longitud": [95, 352], "latitud": [95, 352], "station": 95, "historic_rainfal": 95, "mm": [95, 116, 189, 255, 284, 351, 371], "rainfal": 95, "change_st": 95, "cm": [95, 175, 367, 392], "xyz": [95, 126, 273, 274, 351, 392, 477, 485], "cfile": [95, 317], "bar_var": 95, "foo_var": 95, "workaround": [95, 187, 200, 303, 348, 351, 394, 439, 478, 483, 485], "jim": [95, 104, 109, 314, 438, 466, 470, 472, 477, 481, 485], "roskind": [95, 314], "strang": [95, 100, 121, 145, 243, 369, 432, 465, 467, 471, 472], "matthia": [95, 473, 476, 478, 481, 482, 483, 485], "urlich": 95, "restructur": [95, 112, 313, 466, 467, 472, 485], "modnam": [95, 444, 454, 471, 481], "fool": [95, 466, 470], "proof": [95, 104, 210, 289, 466, 483, 485], "paradox": [95, 469], "0x7352a0": 95, "0x4198d0": 95, "yournam": 96, "v3": [96, 344, 485], "d48eceb": 96, "19": [96, 99, 104, 108, 109, 111, 114, 116, 144, 166, 182, 189, 192, 200, 216, 230, 243, 299, 348, 350, 351, 352, 388, 427, 469, 470, 471, 472, 473, 476, 477, 483, 484, 485], "2017": [96, 348, 439, 485], "06": [96, 109, 189, 252, 273, 338, 453, 471, 481, 485], "04": [96, 99, 102, 189, 352, 354, 371, 429, 452, 471, 473, 476, 481, 482, 485], "45": [96, 100, 104, 152, 166, 173, 192, 273, 289, 324, 344, 388, 390, 469, 470, 471, 476, 483, 484], "msc": [96, 485], "1900": [96, 189, 371, 439, 472, 477], "hellohellohello": 96, "pathext": [96, 338, 403, 465, 479, 485], "mcafe": 96, "pyinit_foo": 96, "__declspec": 96, "nn": 96, "33": [96, 154, 166, 182, 184, 267, 289, 290, 314, 325, 359, 393, 448, 454, 455, 468, 469, 470, 477, 483, 484, 485], "loadlibraryex": [96, 182, 483], "getprocaddress": 96, "leo": [96, 156], "initleo": 96, "initleoc": 96, "initmyappc": 96, "myapp": [96, 108, 109, 173, 242, 374, 425, 480], "pythonnn": 96, "_resultobj": 96, "typemap": [96, 275], "wxpythonwindow": 96, "duck": [97, 390, 472, 479, 485], "bdfl": 97, "benevol": [97, 466], "argument1": 97, "argument2": 97, "1j": [97, 161, 232, 268, 393, 485], "multidimension": [97, 351], "dictview": [97, 351, 483, 485], "eafp": [97, 299], "forgiv": [97, 466], "lbyl": 97, "75": [97, 102, 109, 196, 200, 289, 350, 388, 453, 455, 469, 470, 472, 473, 481, 482, 483, 484, 485], "sum_two_numb": 97, "_featur": [97, 119, 232], "8192": [97, 112, 145, 230, 232, 249, 411], "81": [97, 267, 289, 324, 350, 383, 446, 450, 453, 455, 483], "443": [97, 141, 249, 348, 479], "parameter": [97, 183, 200, 347, 351, 389, 390, 432, 476, 484, 485], "483": [97, 390, 480], "intens": [97, 183, 276, 299, 478, 485], "collat": [97, 272, 347], "leap": [97, 108, 111, 157, 189, 371], "race": [97, 192, 258, 299, 333, 344, 365, 406, 477, 478, 484, 485], "new_local": 97, "cp1252": [97, 164, 452], "04x": [97, 114], "organiz": [97, 348, 432], "1024": [97, 114, 181, 192, 222, 242, 274, 315, 344, 345, 348, 351, 386, 439, 455, 485], "max_exp": [97, 359], "posonly1": 97, "posonly2": 97, "positional_or_keyword": [97, 261], "kw_only1": 97, "kw_only2": 97, "411": [97, 115, 248, 273, 359, 386, 485], "abracadabra": [97, 103, 166, 289, 351, 352, 446, 470], "variable_nam": 97, "10ffff": [97, 164, 432, 478, 485], "datastream": 97, "remove_gray_shad": 97, "refactor": [97, 104, 118, 128, 392, 393, 394, 470, 479, 480, 481, 482, 485], "macintosh": [97, 152, 153, 164, 439, 466, 469], "zen": [97, 120], "larri": [98, 100, 350, 473, 475, 476, 478, 479, 483, 484, 485], "hast": [98, 100, 473, 475, 476, 478, 479, 483, 484, 485], "viabl": 98, "inadvert": [98, 116, 175, 261, 403, 472, 479, 480, 485], "ann": 98, "exot": [98, 268, 468], "malform": [98, 128, 164, 192, 206, 232, 249, 264, 277, 300, 352, 470, 472, 477, 485], "nutshel": [98, 100], "__wrapped__": [98, 232, 233, 261, 476, 477, 479, 480, 485], "__globals__": [98, 261, 432, 474, 476, 485], "fn": [98, 109, 114, 172, 207, 273, 403, 411, 425, 426, 474, 480, 483], "paragraph": [98, 100, 108, 204, 254, 268, 298, 299, 302, 348, 351, 369, 417, 424, 430, 432, 466, 469, 485], "tshepang": 99, "lekhonkhob": 99, "devguid": [99, 479], "ctypes_configur": 99, "dotview": 99, "lib_pypi": 99, "drwxr": [99, 230], "xr": [99, 230, 338, 477], "wena": 99, "4096": [99, 112, 114, 121, 129, 166, 179, 230, 232, 242, 344, 351, 370, 477], "feb": [99, 104, 189, 468], "51": [99, 109, 324, 388, 446, 472, 476], "rwxr": [99, 338], "535": 99, "rw": [99, 109, 218, 230, 301, 338, 347, 355, 477, 480, 481, 482], "741": 99, "cftuvsux": 99, "cp": [99, 103, 164, 298, 299, 473, 480], "store_tru": [99, 126, 196, 235, 298, 315, 403, 473, 477], "brought": [99, 112, 305, 469, 485], "complaint": [99, 100, 467], "vv": [99, 126, 459, 475, 481, 485], "vvv": [99, 126, 399], "sad": [99, 218, 474, 485], "vvvv": 99, "surfac": 99, "explor": [99, 108, 115, 173, 197, 247, 254, 299, 403, 417, 432, 465, 472, 477], "expon": [99, 192, 232, 281, 324, 351, 352, 354, 359, 383, 439, 470, 472, 478, 483, 485], "opposit": [99, 104, 111, 114, 216, 325, 388, 432, 466, 472, 474, 485], "vq": 99, "ship": [100, 133, 138, 258, 374, 392, 413, 425, 465, 466, 469, 473, 475, 477, 479, 480, 484, 485], "black": [100, 102, 109, 114, 154, 166, 183, 218, 254, 324, 381, 388, 456, 469, 470, 476, 479, 483], "chore": [100, 466], "paramount": [100, 192], "speedup": [100, 305, 430, 435, 467, 471, 472, 473, 475, 477, 478, 479, 483, 485], "rewrit": [100, 110, 128, 207, 225, 299, 383, 466, 469, 471, 473, 474, 480, 483, 485], "past": [100, 109, 126, 128, 189, 200, 223, 254, 261, 299, 302, 305, 320, 352, 355, 371, 411, 428, 465, 477, 479, 480, 483, 484, 485], "admit": 100, "evolv": [100, 274, 436], "checksum": [100, 152, 344, 363, 426, 428], "clariti": [100, 112, 120, 298, 371, 431, 477, 485], "farther": 100, "walkthrough": 100, "checkout": [100, 126, 465, 473, 485], "trunk": [100, 471, 472], "_pickl": [100, 485], "scenario": [100, 108, 109, 192, 194, 273, 274, 326, 392, 393, 394, 399, 436, 476, 479, 481, 485], "junk": [100, 196, 289, 294, 355, 485], "margin": 100, "hygien": 100, "picklerobject": 100, "pickler_typ": 100, "name_of_paramet": 100, "establish": [100, 108, 133, 145, 200, 230, 243, 254, 255, 275, 289, 305, 308, 311, 334, 342, 348, 364, 399, 409, 431, 432, 433, 473, 477, 485], "multicharact": 100, "relax": [100, 104, 189, 251, 477, 484, 485], "outdent": 100, "luck": [100, 414], "reopen": [100, 108, 230, 275, 305, 364, 473, 481, 485], "_pickle_pickler_dump": 100, "87ecad1261e02ac7": 100, "552eb1c0f52260d9": 100, "__pickle_pickler_dump_methoddef": 100, "__pickle_pickler_dump": 100, "__pickle_pickler_dump__doc__": 100, "rerun": [100, 436, 474], "impl": [100, 415, 485], "cur": [100, 114, 277, 287, 347, 352, 391, 402, 434, 439, 472, 473, 481, 485], "reiter": 100, "weird": [100, 126], "return_typ": 100, "your_function_impl": 100, "da39a3ee5e6b4b0d3255bfef95601890afd80709": 100, "_pickle_pickler_dump_impl": 100, "3bd30745bf206a48f8b576a1da3d90f55a0a4187": 100, "issue3664": 100, "segfault": [100, 183, 470, 471, 481, 482, 485], "_pickler_clearbuff": 100, "pickler_method": 100, "__pickle_pickler_clear_memo_methoddef": 100, "congratul": 100, "curious": [100, 103, 158, 485], "from_builtin": [100, 480, 485], "collid": [100, 289, 325, 399, 440], "_impl": 100, "pickler_dump": 100, "pickler_dumper_impl": 100, "file_obj": [100, 466, 469], "fix_import": [100, 305, 475], "group_": 100, "clearer": [100, 104, 110, 200, 298, 351, 466, 467, 468, 469, 470, 472, 482, 485], "c_default": 100, "mandat": [100, 203, 212, 255, 268, 325, 371, 481], "subclass_of": 100, "parameter_nam": 100, "_length": 100, "unsigned_short": 100, "unsigned_char": 100, "name_of_encod": 100, "unsigned_int": 100, "unsigned_long": 100, "unsigned_long_long": 100, "pysomething_typ": 100, "name_of_c_funct": 100, "rwbuffer": 100, "robuff": 100, "unsigned_": 100, "unreason": [100, 471, 485], "bat": [100, 111, 302, 367, 403, 457, 485], "yep": 100, "nope": [100, 173, 445], "nada": 100, "perspect": [100, 258, 411], "came": [100, 104, 108, 109, 110, 200, 209, 258, 289, 467, 468, 469, 470, 471], "max_widget": 100, "preload": [100, 485], "decodefsdefault": 100, "new_funct": 100, "c_basenam": 100, "existing_funct": 100, "sorri": [100, 445], "proposit": 100, "__ignored_unused_variable__": 100, "self_convert": 100, "thereof": [100, 145, 213, 275, 299, 367, 370, 430, 433, 485], "picklerobject_convert": 100, "zlibmodul": 100, "zlib_compress_compress_impl": 100, "compobject": 100, "6731b3f0ff357ca6": 100, "04d00f65ab01d260": 100, "zlibstat": 100, "__text_signature__": [100, 485], "_pytype_getmodulebydef": [100, 485], "setattro": 100, "_threadmodul": 100, "local_setattro": 100, "thread_modul": 100, "thread_module_st": 100, "get_thread_st": 100, "573": [100, 484, 485], "cconvert": 100, "_convert": [100, 485], "converter_init": 100, "unspecifi": [100, 104, 110, 133, 156, 182, 200, 238, 258, 264, 265, 276, 281, 293, 299, 302, 305, 320, 344, 371, 381], "py_default": 100, "c_ignored_default": 100, "impl_by_refer": 100, "parse_by_refer": 100, "ssize_t_convert": 100, "da39a3ee5e6b4b0d": 100, "35521e4e733823c7": 100, "grep": [100, 106, 109, 254, 355, 466, 485], "creturnconvert": 100, "meth_o_sampl": 100, "interspers": [100, 109, 298], "boon": 100, "rearrang": [100, 456, 466, 469, 471, 473, 476, 484, 485], "hamper": 100, "subsect": [100, 102, 111, 116, 133, 254, 351, 434, 485], "methoddef_defin": 100, "seven": [100, 157, 192, 251, 261, 394, 477, 485], "docstring_prototyp": 100, "docstring_definit": 100, "impl_prototyp": 100, "parser_prototyp": 100, "parser_definit": 100, "impl_definit": 100, "methoddef": [100, 485], "_prototyp": 100, "_definit": 100, "_defin": 100, "five": [100, 109, 154, 192, 275, 277, 298, 299, 325, 345, 347, 348, 359, 398, 419, 466, 472, 478, 483], "preset": [100, 276, 363, 485], "file_templ": 100, "basename_root": 100, "basename_extens": 100, "line_prefix": 100, "line_suffix": 100, "have_functionnam": 100, "module_functionnam": 100, "functionnam": 100, "module_functionname_methoddef": 100, "_methoddef": 100, "ticklish": 100, "posixmodul": [100, 485], "12357": 100, "py3c": 101, "opinion": [101, 466, 471], "kuchl": [102, 104, 111, 114, 183, 466, 467, 468, 469, 470, 471, 472, 473, 479], "raymond": [102, 103, 104, 113, 183, 354, 390, 431, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "paint": [102, 183, 388, 468], "vt100s": [102, 183], "nich": 102, "button": [102, 109, 158, 183, 195, 254, 287, 374, 380, 381, 388, 430, 465, 481, 482, 483, 485], "urwid": 102, "commerci": [102, 301, 430, 472], "proprietari": [102, 350], "unicurs": 102, "biggest": [102, 110, 386, 474, 477, 478], "mvaddstr": 102, "mvwaddstr": 102, "stdscr": [102, 183, 472], "multibyt": [102, 183, 215, 351, 478, 485], "key_left": [102, 183], "mess": [102, 126, 298, 468], "buggi": [102, 112, 466, 468, 478, 479, 485], "uncaught": [102, 159, 347, 359, 370, 434, 467, 483, 485], "funni": [102, 147], "rectangular": [102, 161, 388], "redraw": 102, "begin_x": [102, 183], "begin_i": [102, 183], "height": [102, 183, 187, 254, 287, 299, 325, 350, 374, 381, 388, 453, 471, 485], "40": [102, 103, 104, 108, 162, 166, 189, 200, 254, 267, 273, 314, 324, 325, 327, 338, 350, 371, 380, 388, 428, 445, 455, 456, 476, 479, 482, 483, 484, 485], "col": [102, 183, 254, 347, 352, 480, 485], "slow": [102, 109, 112, 190, 242, 254, 264, 275, 289, 336, 345, 351, 367, 388, 402, 426, 427, 466, 467, 469, 470, 472, 484, 485], "baud": [102, 485], "flurri": [102, 466], "redrawn": [102, 183, 388], "26": [102, 108, 116, 189, 218, 243, 265, 289, 324, 338, 348, 371, 372, 383, 398, 427, 430, 469, 473, 477, 481, 483, 484, 485], "ordinari": [102, 108, 111, 158, 175, 200, 232, 241, 306, 325, 336, 339, 350, 362, 363, 393, 406, 417, 436, 439, 440, 466, 476, 478, 485], "annoy": [102, 114, 158, 181, 243, 273, 393, 466, 468, 469, 472, 474, 478, 483, 485], "flicker": [102, 183, 485], "twisti": 102, "maze": 102, "subt": [102, 112, 181, 203, 212, 436], "waddstr": [102, 478], "boldfac": [102, 472], "acs_plminus": [102, 183], "acs_ulcorn": [102, 183], "distract": [102, 298, 485], "blink": [102, 183, 483, 484, 485], "invis": [102, 164, 183, 185, 388, 473, 475, 485], "synonym": [102, 109, 114, 121, 183, 298, 305, 325, 349, 374, 390, 414, 439, 472, 485], "video": [102, 183, 278, 281, 472], "viewer": [102, 254, 275, 388, 485], "safest": [102, 182, 277], "a_blink": [102, 183], "a_bold": [102, 183, 472], "bright": 102, "a_dim": [102, 183], "half": [102, 109, 139, 181, 183, 189, 228, 233, 281, 301, 334, 351, 354, 439, 473, 476, 481, 485], "a_revers": [102, 183], "a_standout": [102, 183], "a_underlin": [102, 183], "xterm": [102, 183, 485], "american": [102, 189], "canadian": [102, 164], "british": 102, "resign": 102, "misspel": [102, 103, 173, 393, 485], "foreground": [102, 183, 254, 381, 456], "wire": [102, 108, 164, 183, 273, 274, 275, 348, 353, 393, 423, 480], "white": [102, 111, 183, 184, 206, 218, 254, 355, 381, 388, 399, 430, 438, 456, 479, 484, 485], "green": [102, 128, 166, 183, 218, 247, 324, 350, 388, 406, 445, 456, 469, 470, 475, 476, 477, 481, 485], "magenta": [102, 183, 218, 456], "cyan": [102, 183, 218, 456], "color_black": [102, 183], "color_r": [102, 183], "color_whit": [102, 183], "alert": [102, 112, 247, 275, 348, 390, 404, 482, 485], "rgb": [102, 168, 183, 256, 298, 374, 388, 479, 485], "purpl": [102, 109], "lucki": [102, 182], "talent": 102, "key_up": [102, 183], "tenth": [102, 147, 183, 216], "key_ppag": [102, 183], "key_hom": [102, 183], "printdocu": 102, "backspac": [102, 111, 183, 184, 254, 325, 439, 452, 485], "keybind": [102, 183, 254, 326], "editwin": 102, "struck": 102, "brows": [102, 115, 319, 381, 472, 485], "acs_": 102, "lengthi": [102, 104, 111, 267, 306, 466, 467, 468, 469, 470, 477, 485], "swear": 102, "pycon": [102, 114, 348, 471], "2013": [102, 109, 114, 189, 300, 348, 430, 485], "hetting": [103, 104, 113, 390, 431, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "objtyp": 103, "directorys": 103, "song": 103, "game": [103, 112, 126, 388, 471, 472], "twenti": [103, 181], "chess": [103, 104, 114, 468, 469], "reveal": [103, 189, 472, 477, 485], "_age": 103, "loggedageaccess": 103, "birthday": [103, 455, 476], "mari": [103, 344, 445], "dave": [103, 113, 469, 470, 473, 477, 485], "david": [103, 104, 106, 114, 237, 430, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 483, 485], "hardwir": [103, 175, 314], "loggedaccess": 103, "public_nam": 103, "private_nam": 103, "pete": 103, "peter": [103, 107, 120, 237, 324, 372, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 485], "kate": 103, "catherin": 103, "some_class": 103, "descriptor_nam": 103, "notori": [103, 406], "oneof": 103, "minvalu": 103, "maxvalu": 103, "minsiz": 103, "wood": [103, 126], "metal": 103, "plastic": 103, "quantiti": [103, 192, 281, 299, 325, 348, 469, 473, 477], "metl": 103, "toolset": [103, 267, 298, 472, 485], "deeper": [103, 115, 173, 189, 199, 200, 313, 352, 359], "everyday": [103, 232], "find_name_in_mro": 103, "_pytype_lookup": [103, 476, 485], "object_getattribut": 103, "cls_var": 103, "descr_get": 103, "bypass": [103, 164, 233, 299, 352, 393, 429, 432, 434, 436, 485], "getattr_hook": 103, "slot_tp_getattr_hook": 103, "type_getattro": [103, 485], "super_getattro": 103, "skeleton": 103, "movi": [103, 154, 347], "director": [103, 154, 399], "music": [103, 166], "artist": 103, "genr": 103, "entertain": [103, 158], "war": 103, "georg": [103, 114, 267, 450, 471, 472, 473, 475, 476, 477, 478, 480, 481, 485], "luca": [103, 242, 479, 480, 485], "jaw": [103, 154], "1975": [103, 154, 268, 347, 350, 483], "steven": [103, 467, 471, 473, 477, 479, 480, 481, 483, 485], "spielberg": 103, "countri": [103, 250, 272, 348, 351, 417, 470], "road": [103, 251], "denver": [103, 485], "abram": 103, "excit": [103, 466, 468], "prepackag": 103, "succinct": [103, 267, 476], "fget": [103, 232, 389], "fset": [103, 232, 389], "fdel": [103, 232, 389], "getx": [103, 232], "__x": 103, "delx": [103, 232], "descrobject": 103, "prop": [103, 465, 485], "grant": [103, 111, 300, 430, 466, 467, 471], "intervent": [103, 374, 429], "spreadsheet": [103, 181, 350, 469], "b10": 103, "recalcul": [103, 122, 128, 273, 350, 429], "recalc": 103, "_valu": [103, 203, 212], "seamless": 103, "classobject": [103, 485], "__func__": [103, 118, 261, 351, 432, 444, 472, 473], "__self__": [103, 261, 351, 432, 444, 472, 485], "func_descr_get": 103, "funcobject": 103, "0x00c45070": 103, "0x00b18c90": 103, "0x1012e1f98": 103, "recap": 103, "chart": [103, 114], "averag": [103, 147, 243, 267, 299, 314, 324, 350, 351, 355, 372, 381, 386, 438, 455, 474, 476, 479, 483, 485], "conceptu": [103, 104, 108, 126, 147, 201, 203, 207, 212, 258, 352, 404, 436, 476, 482], "dataset": [103, 113, 173, 233, 243, 350, 470, 483, 485], "9332": 103, "unexcit": 103, "pystaticmethod_typ": 103, "dict_fromkey": 103, "dictobject": [103, 471, 485], "pyclassmethod_typ": 103, "vehicl": 103, "id_numb": 103, "id_nubm": 103, "vye483814lqex": 103, "_dept": 103, "dept": [103, 444, 475, 477], "botani": 103, "watney": 103, "pirat": 103, "mar": [103, 104, 189, 218, 438, 445, 468, 472], "48": [103, 242, 350, 351, 386, 402, 476, 485], "152": 103, "flyweight": 103, "35": [103, 104, 192, 232, 324, 350, 439, 469, 470, 471, 472, 477, 481, 483, 484, 485], "m1": 103, "100_000": [103, 350], "faith": [103, 215, 352, 359], "_slotvalu": 103, "clsname": 103, "descr_new": 103, "member_get": 103, "member_set": 103, "member_delet": 103, "member_repr": 103, "mcls": [103, 386], "pytypereadi": 103, "add_method": 103, "slot_nam": 103, "object_new": 103, "empty_slot": 103, "_pyobject_genericsetattrwithdict": 103, "0x7fb5d302f9d0": 103, "slot_valu": 103, "tour": [104, 468, 469], "subclaus": 104, "ml": [104, 469], "ocaml": 104, "haskel": [104, 267, 445, 466, 469], "emphas": [104, 200, 290, 431, 485], "puriti": 104, "extrem": [104, 109, 114, 214, 268, 274, 299, 305, 324, 350, 393, 414, 426, 434, 485], "constraint": [104, 192, 239, 273, 305, 313, 351, 390, 435, 436, 471, 472, 474, 485], "conclud": [104, 108, 111], "rigor": 104, "aros": 104, "impract": 104, "enorm": 104, "daili": [104, 468, 485], "proven": [104, 200, 469], "believ": [104, 112, 243, 298, 469], "synthes": [104, 200], "jan": [104, 189, 348, 355, 409, 468, 473, 476, 477, 480, 481, 482, 483, 484, 485], "apr": [104, 459, 468, 471], "jun": [104, 230, 371, 468], "jul": [104, 230, 468, 477], "nov": [104, 189, 216, 230, 252, 348, 371, 468, 481], "itali": 104, "rome": 104, "franc": 104, "pari": [104, 111, 429], "washington": [104, 255], "dc": [104, 267, 417, 471], "genexp": [104, 435], "concis": [104, 107, 173, 298, 347, 432, 466, 470, 477, 481], "line_list": 104, "stripped_it": 104, "stripped_list": 104, "sequence1": [104, 466], "condition1": 104, "expr2": [104, 434, 466], "sequence2": [104, 466], "condition2": 104, "expr3": [104, 434], "sequence3": 104, "condition3": 104, "exprn": [104, 466], "sequencen": [104, 466], "conditionn": 104, "obj_tot": 104, "list_all_object": [104, 470], "expr1": [104, 434, 466], "seq1": [104, 297, 466], "doubtless": [104, 467, 468, 469], "weren": [104, 111, 128, 242, 467, 468, 469, 470, 471, 473], "generate_int": [104, 468, 469], "suspend": [104, 144, 183, 261, 320, 339, 366, 370, 371, 431, 432, 434, 468, 469, 471, 480, 482, 485], "gen": [104, 261, 267, 434, 468, 469, 477, 480, 485], "messier": [104, 111, 468, 469, 473], "test_gener": [104, 468, 469, 485], "inord": [104, 468, 469], "queen": [104, 324, 325, 468, 469], "nxn": [104, 468, 469], "board": [104, 183, 468, 469], "threaten": [104, 468, 469], "knight": [104, 114, 313, 430, 446, 450, 468, 469, 483], "rout": [104, 112, 115, 219, 389, 411, 456, 468, 469, 473, 479], "chessboard": [104, 468, 469], "messi": [104, 469, 473], "becam": [104, 119, 156, 220, 232, 299, 342, 359, 371, 390, 466, 472, 473, 476, 480, 483, 484, 485], "cumul": [104, 225, 233, 281, 314, 350, 384, 386, 459, 471, 477, 479, 480, 485], "itera": 104, "iterb": 104, "sentenc": [104, 233, 325, 369, 468, 469, 472, 485], "fragment": [104, 147, 152, 320, 348, 351, 398, 399, 416, 417, 471, 473, 477, 478, 485], "is_even": [104, 423], "verb": [104, 112, 299], "10000": [104, 314, 339, 372, 388, 469, 478, 485], "rand_list": 104, "769": 104, "7953": 104, "9828": 104, "6431": 104, "8442": 104, "9878": 104, "6213": 104, "2207": 104, "shortest": [104, 202, 232, 267, 466, 471, 473, 474, 475, 477], "broad": [104, 189, 298, 398, 468, 471, 473, 478, 485], "interv": [104, 108, 183, 189, 254, 275, 299, 314, 324, 339, 350, 359, 367, 370, 371, 381, 388, 470, 472, 477, 481, 483, 485], "elem": [104, 166, 232, 233, 267, 351, 417, 446, 471, 473, 477], "endless": [104, 267, 466, 468, 470, 471, 485], "rubi": [104, 350, 456], "less_than_10": 104, "aba": 104, "key_func": 104, "city_list": 104, "decatur": 104, "huntsvill": 104, "selma": 104, "anchorag": 104, "ak": 104, "nome": 104, "flagstaff": 104, "az": 104, "phoenix": 104, "tucson": 104, "city_st": 104, "kwarg1": [104, 471], "value1": [104, 173, 471, 484], "kwarg2": [104, 471], "value2": [104, 173, 471, 484], "server_log": [104, 471], "initial_valu": [104, 264], "abbc": 104, "stripped_lin": 104, "existing_fil": 104, "file_list": 104, "anonym": [104, 182, 230, 274, 284, 299, 388, 431, 434, 466, 477, 485], "adder": 104, "print_assign": 104, "multiway": 104, "disentangl": 104, "heck": 104, "essenc": 104, "disagre": [104, 383, 466], "assist": [104, 114, 270, 284, 290, 389, 403, 432, 468, 469, 470, 471, 472, 473, 482, 485], "draft": [104, 114, 158, 277, 302, 359, 414, 466, 467, 468, 469, 470, 471, 472, 473, 481, 482, 485], "ian": [104, 411], "bick": [104, 411], "nick": [104, 107, 110, 114, 330, 432, 468, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 485], "coghlan": [104, 107, 110, 114, 330, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 485], "efford": 104, "jewett": [104, 470, 472], "mike": [104, 468, 470, 471, 472, 485], "krell": 104, "leandro": 104, "lameiro": 104, "jussi": 104, "salmela": 104, "collin": [104, 472, 473, 480, 485], "winter": [104, 232, 472, 473], "blake": [104, 242], "winton": 104, "june": [104, 412, 452, 475, 482], "juli": [104, 196, 430, 439, 468, 469, 473, 485], "typo": [104, 158, 390, 393, 434, 468, 485], "tutor": 104, "harold": [104, 352], "abelson": 104, "gerald": 104, "jay": [104, 467, 477, 485], "sussman": 104, "mitpress": 104, "mit": [104, 259, 313, 430], "sicp": 104, "classic": [104, 173, 190, 210, 237, 277, 308, 350, 374, 388, 394, 453, 468, 469, 471, 473, 474, 477, 485], "textbook": [104, 111, 325, 471, 472], "scienc": [104, 111, 350, 370, 480], "defmacro": 104, "rambl": 104, "wikipedia": [104, 114, 166, 242, 267, 277, 348, 350, 354, 388, 471, 477, 478, 485], "functional_program": 104, "curri": 104, "gnosi": 104, "cx": [104, 267, 469], "tpip": 104, "mertz": 104, "ibm": [104, 164, 183, 192, 354, 469, 471, 478, 485], "developerwork": 104, "malcolm": [106, 325, 473, 477, 481, 485], "ukasz": [106, 294, 477, 479, 480, 481, 482, 483, 484, 485], "langa": [106, 294, 477, 479, 480, 481, 482, 483, 484, 485], "incorrect": [106, 109, 111, 118, 149, 163, 190, 200, 220, 232, 251, 254, 261, 273, 277, 298, 299, 355, 371, 392, 393, 394, 401, 415, 426, 432, 467, 468, 469, 471, 474, 476, 477, 478, 479, 483, 484, 485], "yum": 106, "sdt": 106, "sudo": [106, 109], "29564": [106, 485], "python18035": 106, "_pyeval_evalframedefault": [106, 485], "29565": 106, "dtrace_function_entri": 106, "29566": [106, 485], "29567": 106, "dtrace_function_return": 106, "29568": [106, 485], "29569": 106, "29570": 106, "29571": [106, 485], "maybe_dtrace_lin": 106, "stapsdt": 106, "readelf": 106, "0000000000000000": 106, "00308d78": 106, "libpython3": [106, 485], "3dm": 106, "00365b68": 106, "0x00000254": 106, "0x00000020": [106, 182], "0x00000010": 106, "nt_gnu_abi_tag": 106, "0x00000274": 106, "0x00000024": 106, "0x00000014": 106, "nt_gnu_build_id": 106, "bitstr": 106, "df924a2b08a7e89f6e11251d4602022977af2670": 106, "0x002d6c30": 106, "0x00000144": 106, "0x00000031": 106, "nt_stapsdt": 106, "gc__start": 106, "0x00000000004371c3": 106, "0x0000000000630ce2": 106, "0x00000000008d6bf6": 106, "ebx": 106, "0x00000030": 106, "gc__done": 106, "0x00000000004374e1": 106, "0x00000000008d6bf8": 106, "rax": 106, "0x00000045": 106, "function__entri": 106, "0x000000000053db6c": 106, "0x00000000008d6be8": 106, "rbp": 106, "r12": 106, "eax": 106, "0x00000046": 106, "function__return": 106, "0x000000000053dba8": 106, "0x00000000008d6bea": 106, "strateg": 106, "copyinstr": 106, "probenam": 106, "arg0": [106, 299], "call_stack": 106, "156641360502280": 106, "156641360518804": 106, "156641360532797": 106, "function_3": 106, "156641360546807": 106, "156641360563367": 106, "156641360578365": 106, "156641360591757": 106, "156641360605556": 106, "156641360617482": 106, "156641360629814": 106, "156641360642285": 106, "156641360656770": 106, "156641360669707": 106, "156641360687853": 106, "function_4": 106, "156641360700719": 106, "156641360719640": 106, "function_5": 106, "156641360732567": 106, "156641360747370": 106, "user_str": 106, "thread_ind": 106, "stap": 106, "stp": 106, "11408": 106, "8274": 106, "_abcol": 106, "11414": 106, "425": [106, 248, 484, 485], "11418": 106, "490": 106, "11424": 106, "11428": 106, "426": [106, 248], "11433": 106, "6dm": 106, "begun": [106, 370, 469, 470], "import__find__load__start": [106, 482], "import__find__load__don": [106, 482], "find_and_load": 106, "frameptr": 106, "arg4": 106, "probepoint": 106, "fn_call": 106, "033": [106, 183, 485], "1h": [106, 473], "6s": [106, 109, 196], "80s": 106, "30s": 106, "foreach": 106, "6d": [106, 109], "moodi": [107, 478, 479, 480], "192": [107, 109, 250, 265, 273, 314, 352], "db8": [107, 265], "3221225985": [107, 265], "42540766411282592856903984951653826561": 107, "96": [107, 116, 265, 351, 386, 481, 482, 483, 484, 485], "3221225984": 107, "42540766411282592856903984951653826560": 107, "firewal": [107, 230, 254, 289, 413, 467, 478], "router": [107, 265, 344], "hybrid": [107, 189, 479], "ipv": [107, 485], "intuit": [107, 108, 111, 158, 192, 196, 267, 380, 434, 466, 467, 468, 479], "addr4": 107, "addr6": [107, 480], "host4": 107, "host6": 107, "net4": 107, "net6": 107, "4294967296": [107, 265, 474], "254": 107, "ffff": [107, 265, 466, 478], "0db8": 107, "0001": [107, 189, 439, 482, 485], "explos": [107, 417], "lend": [107, 468], "agnost": [107, 351], "168": [107, 109, 250, 265, 273, 352], "octet": [107, 207, 213, 265, 311, 352, 398, 402, 485], "vinay": [108, 109, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484], "sajip": [108, 109, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484], "vinay_sajip": [108, 109], "dove": [108, 109], "investig": [108, 351], "confirm": [108, 195, 300, 303, 399, 404, 465, 476, 485], "told": [108, 390, 403, 432, 469], "resund": 108, "malm": 108, "threshold": [108, 109, 234, 273, 351, 471], "loglevel": 108, "numeric_level": 108, "afresh": [108, 175, 273], "mylib": [108, 392], "do_someth": [108, 109, 158, 348, 392, 434], "levelnam": [108, 109, 273, 274, 275, 289, 470, 473, 477], "2010": [108, 109, 114, 273, 338, 352, 359, 394, 473, 477], "41": [108, 313, 324, 325, 350, 423, 455, 472, 484, 485], "iso8601": [108, 423], "3339": 108, "datefmt": [108, 109, 273, 274], "46": [108, 166, 324, 351, 456, 476, 483, 484, 485], "am": [108, 109, 189, 272, 305, 371, 438], "invest": 108, "favourit": 108, "beverag": 108, "forum": 108, "hereaft": [108, 116, 314], "threefold": 108, "baz": [108, 109, 126, 173, 254, 257, 258, 268, 273, 274, 289, 299, 317, 325, 367, 392, 393, 394, 411, 436, 440], "bam": [108, 273], "descend": [108, 113, 122, 128, 169, 203, 212, 261, 273, 289, 314, 349, 362, 374, 381, 392, 414, 415, 417, 471, 473, 485], "deconfigur": 108, "fmt": [108, 109, 189, 208, 265, 273, 301, 310, 367, 456, 472, 485], "millisecond": [108, 133, 183, 189, 254, 273, 334, 381, 388, 410, 477, 481, 485], "tack": [108, 425], "simple_exampl": [108, 109], "simple_logging_modul": 108, "2005": [108, 109, 189, 277, 430, 470, 471, 472], "03": [108, 109, 189, 192, 348, 352, 371, 455, 469, 471, 485], "618": [108, 476, 485], "620": [108, 470], "695": 108, "697": 108, "773": 108, "conf": [108, 109, 111, 302, 456, 469, 477, 485], "simpleexampl": [108, 109], "consolehandl": 108, "simpleformatt": 108, "logger_root": [108, 274], "logger_simpleexampl": 108, "handler_consolehandl": 108, "formatter_simpleformatt": 108, "simple_logging_config": 108, "38": [108, 109, 196, 232, 273, 344, 386, 469, 476, 483, 484, 485], "977": [108, 294], "979": 108, "56": [108, 189, 192, 232, 264, 289, 344, 350, 446, 448, 477, 480, 485], "054": 108, "055": 108, "130": [108, 265, 348, 350, 473], "noncod": 108, "disable_existing_logg": [108, 109, 274], "mypackag": 108, "myhandl": [108, 109, 274], "superset": [108, 312, 351, 434, 466, 469, 485], "yaml": [108, 126, 259, 268, 274, 473, 476, 477], "raiseexcept": [108, 109, 273, 275, 477], "resort": [108, 190, 272, 273, 468], "absenc": [108, 115, 121, 261, 271, 273, 325, 348, 370, 411, 432, 485], "organis": [108, 109, 243, 273], "orgnam": 108, "prerog": 108, "interfer": [108, 138, 173, 233, 272, 485], "deliv": [108, 115, 139, 189, 232, 334, 339, 342, 381, 394, 434, 472, 485], "notset": [108, 273, 274, 289], "desk": 108, "staff": [108, 338], "convinc": [108, 272], "xp": [108, 275, 381, 469, 480], "criteria": [108, 181, 255, 273, 314], "xxx": [108, 109, 126, 436, 473, 475, 478, 485], "batch": [108, 111, 133, 305, 355, 465, 480, 485], "provis": [108, 308, 348, 430, 434], "trailer": [108, 299, 428, 435, 485], "swallow": [108, 109, 456, 466, 473, 477, 483, 485], "misconfigur": [108, 254, 485], "altogeth": [108, 109, 158, 220, 426, 432, 477], "expensive_func1": 108, "expensive_func2": 108, "deepli": [108, 367, 393, 413, 439, 466, 472, 485], "recomput": [108, 334, 335, 339, 479, 485], "_srcfile": 108, "logthread": 108, "logprocess": 108, "logmultiprocess": 108, "somelogg": 109, "auxiliary_modul": 109, "spam_appl": 109, "fh": 109, "auxiliari": [109, 267, 477, 485], "some_funct": [109, 393, 394], "module_logg": 109, "47": [109, 189, 216, 324, 325, 428, 446, 455, 472, 476, 485], "663": 109, "665": 109, "668": [109, 338], "669": [109, 166], "670": 109, "671": 109, "672": 109, "673": 109, "hi": [109, 154, 182, 310, 351, 374, 390, 485], "relativecr": [109, 273], "threadnam": [109, 273], "mainthread": [109, 485], "505": [109, 115, 248], "1007": 109, "1507": [109, 472], "1508": 109, "2258": 109, "2512": 109, "3009": 109, "3013": 109, "3515": 109, "3761": 109, "4017": 109, "4513": 109, "4518": 109, "quota": [109, 219, 255], "dormant": 109, "12s": 109, "8s": [109, 273, 274, 473, 477], "jackdaw": 109, "quartz": 109, "logger1": 109, "area1": 109, "logger2": 109, "area2": 109, "zephyr": 109, "vex": [109, 467], "daft": 109, "jump": [109, 197, 200, 254, 276, 303, 388, 432, 445, 469, 471, 474, 481, 482, 485], "zebra": [109, 166, 305], "jail": 109, "zesti": 109, "vixen": 109, "pay": [109, 111, 200, 465, 479], "quack": [109, 472], "wizard": [109, 468], "9999": [109, 139, 189, 254, 345, 477, 482, 485], "data_to_send": 109, "culprit": 109, "sluggish": 109, "poor": [109, 156, 295, 311, 314, 325, 467, 468, 485], "infrastructur": [109, 122, 129, 145, 164, 348, 404, 472, 473, 479, 482], "capac": [109, 183, 275, 299, 350, 370, 471, 473, 476], "precaut": [109, 122], "eat": [109, 281], "que": 109, "queue_handl": 109, "respect_handler_level": [109, 275, 480, 485], "rootlogg": 109, "default_tcp_logging_port": [109, 274], "unformat": [109, 268, 325], "logrecordstreamhandl": 109, "slen": 109, "handlelogrecord": 109, "lognam": [109, 236, 299], "wast": [109, 114, 474, 485], "bandwidth": [109, 114, 445, 473, 476], "logrecordsocketreceiv": 109, "serve_until_stop": 109, "rd": [109, 348, 351], "wr": [109, 467, 485], "5d": 109, "15s": [109, 273, 274, 473, 477], "69": [109, 371, 417, 476], "supervisor": 109, "gist": 109, "bone": [109, 463], "customadapt": 109, "connid": 109, "some_conn_id": 109, "threadloc": 109, "contextfilt": 109, "inject": [109, 133, 142, 273, 278, 337, 347, 355, 413, 459, 471, 476, 480, 485], "sheila": 109, "ips": [109, 485], "231": 109, "5s": 109, "lvl": 109, "lvlname": 109, "webapplib": 109, "webapp": 109, "11s": 109, "appnam": [109, 275], "9s": 109, "4s": 109, "ctx_request": 109, "ctx_appnam": 109, "injectingfilt": 109, "num_request": 109, "adhf": 109, "ap": 109, "aa": [109, 166, 267, 446, 473], "app1": 109, "app2": 109, "49": [109, 252, 267, 273, 289, 386, 446, 450, 453, 476, 483, 484, 485], "wc": 109, "153": 109, "147": [109, 483], "600": [109, 189, 481], "issue3770": 109, "listener_configur": 109, "mptest": 109, "processnam": [109, 273, 289], "10s": [109, 354, 485], "listener_process": 109, "worker_configur": 109, "worker_process": 109, "orchestr": 109, "logger_thread": 109, "qh": 109, "ham": [109, 166, 176, 196, 232, 261, 285, 434, 436, 445, 480], "mplog": 109, "foofil": 109, "wp": 109, "lp": [109, 276], "max_work": [109, 133, 172, 477, 485], "log_filenam": 109, "logging_rotatingfile_exampl": 109, "my_logg": 109, "mylogg": [109, 273], "maxbyt": [109, 274, 275, 473], "backupcount": [109, 274, 275, 473], "logfil": [109, 158], "bf": [109, 325, 455], "df": [109, 473], "924": 109, "494": [109, 481], "833": 109, "recal": [109, 254, 390], "bracemessag": 109, "dollarmessag": 109, "unwieldi": 109, "palat": 109, "brethren": 109, "2f": [109, 140, 267, 352, 398, 448, 472, 473, 475, 485], "trip": [109, 128, 156, 250, 383, 472, 474, 475, 485], "sugar": [109, 175, 232, 251, 258, 347, 445, 474], "xxxmessag": 109, "styleadapt": 109, "_log": [109, 273], "interrog": [109, 212, 394], "old_factori": [109, 273], "record_factori": [109, 273], "custom_attribut": [109, 273], "0xdecafbad": [109, 273], "born": [109, 351], "zmq": 109, "pyzmq": 109, "sock": [109, 111, 112, 129, 133, 139, 141, 145, 249, 314, 335, 344, 345, 348, 367, 477, 480, 482, 485], "pub": [109, 131, 230, 338, 464], "5556": 109, "zeromqsockethandl": [109, 485], "send_json": 109, "socktyp": [109, 275, 344, 367, 473], "zeromqsocketlisten": [109, 485], "setsockopt_str": 109, "recv_json": 109, "django": [109, 166, 303, 308, 393, 473, 478], "specialfilt": 109, "mail_admin": 109, "adminemailhandl": 109, "myproject": [109, 392], "sf": [109, 472], "rh": 109, "levelno": [109, 273], "stop_ev": 109, "heterogen": [109, 351, 474, 485], "config_initi": 109, "config_work": 109, "config_listen": 109, "hang": [109, 112, 115, 289, 334, 339, 367, 469, 477, 485], "5424": [109, 275], "compliant": [109, 118, 133, 152, 189, 201, 202, 203, 205, 208, 209, 210, 214, 215, 216, 222, 242, 252, 268, 277, 308, 317, 337, 347, 371, 411, 413, 430, 434, 468, 471, 473, 478, 481, 482, 485], "ufeffunicod": 109, "xef": [109, 152, 398, 439], "xbb": [109, 439], "xbf": [109, 439], "parseabl": [109, 309, 337], "serialis": [109, 164, 330, 417, 485], "structuredmessag": 109, "fnum": 109, "specialis": [109, 115, 347, 351, 390, 435, 485], "unicode_escap": [109, 164], "set_valu": 109, "snowman": 109, "u2603": 109, "owned_file_handl": 109, "puls": 109, "chowntest": 109, "resid": [109, 116, 207, 237, 277, 299, 319, 328, 349, 436, 465, 466, 485], "orthogon": 109, "decis": [109, 110, 112, 119, 163, 261, 359, 381, 431, 440, 466, 470, 471, 473, 477, 478, 485], "cater": [109, 200, 274, 275], "myfilt": [109, 477], "noshow": 109, "onelineexceptionformatt": 109, "exc_text": [109, 273, 275, 485], "configure_log": 109, "2015": [109, 189, 332, 480, 485], "logtest7": 109, "nzerodivisionerror": 109, "simplist": [109, 393], "render": [109, 114, 133, 195, 205, 208, 230, 312, 345, 381, 385, 415, 432, 469, 472, 473, 476, 483, 485], "audibl": [109, 183], "speech": [109, 301], "tts": 109, "frequenc": [109, 123, 234, 350, 371, 405, 410, 419, 472], "swamp": 109, "espeak": 109, "ttshandler": 109, "femal": [109, 350], "voic": [109, 468], "s150": 109, "ven": 109, "f3": [109, 126], "goodby": [109, 146, 230, 305, 374, 447], "parameteris": 109, "log_if_error": 109, "target_handl": 109, "flush_level": 109, "flushlevel": [109, 275], "write_lin": 109, "decorated_foo": 109, "har": [109, 162, 392, 477, 479], "bufferingsmtphandl": 109, "mailhost": [109, 274, 275], "mailport": 109, "nto": [109, 342], "nsubject": 109, "addresse": [109, 275], "102": [109, 192, 248, 267, 350, 473, 477, 483, 484], "eleven": 109, "eleventh": 109, "utcformatt": 109, "console1": 109, "console2": 109, "501": [109, 115, 248, 252, 299, 477], "sat": [109, 157, 189, 348, 350], "loggingcontext": 109, "old_level": 109, "ev": [109, 348], "logctx": 109, "generalis": 109, "scriptnam": 109, "subpars": [109, 126, 477, 482, 485], "start_cmd": 109, "add_pars": [109, 126, 477], "stop_cmd": 109, "restart_cmd": 109, "log_level": 109, "plural": [109, 237, 473, 482, 485], "ui": [109, 411, 465, 466, 485], "pyside2": 109, "pyqt5": 109, "qthandler": 109, "qthread": 109, "qtcore": 109, "qtgui": 109, "qtwidget": 109, "pyqtsign": 109, "pyqtslot": 109, "qobject": 109, "slotfunc": 109, "ctname": 109, "currentthread": [109, 196, 370, 476, 485], "objectnam": 109, "kick": 109, "qthreadnam": 109, "isinterruptionrequest": 109, "1f": [109, 324, 386, 485], "qwidget": 109, "orang": [109, 166, 297, 388, 446, 485], "textedit": 109, "te": 109, "qplaintextedit": 109, "monospac": [109, 254, 369], "qfont": 109, "nosuchfont": 109, "setstylehint": 109, "setfont": 109, "setreadon": 109, "pb": [109, 276], "qpushbutton": 109, "work_button": 109, "log_button": 109, "clear_button": 109, "update_status": 109, "fs": [109, 172, 184, 299, 350, 485], "abouttoquit": 109, "force_quit": 109, "qvboxlayout": 109, "addwidget": 109, "setfixeds": 109, "900": [109, 453], "click": [109, 112, 158, 183, 195, 254, 299, 388, 403, 430, 465, 476, 478, 481, 482, 483, 485], "manual_upd": 109, "clear_display": 109, "seten": 109, "worker_thread": 109, "setobjectnam": 109, "workerthread": 109, "movetothread": 109, "kill_thread": 109, "requestinterrupt": 109, "isrun": 109, "appendhtml": 109, "qapplic": 109, "exec_": 109, "2009": [109, 189, 325, 347, 394, 430, 467, 473, 475], "detault": 109, "3164": 109, "hail": 109, "widespread": [109, 110, 209, 438, 467, 477], "sysloghandler5424": 109, "tz_offset": 109, "msgid": [109, 207, 216], "has_offset": 109, "hrs": 109, "hostnam": [109, 115, 133, 141, 148, 158, 164, 190, 216, 230, 249, 255, 265, 275, 289, 294, 299, 311, 319, 342, 344, 348, 398, 399, 423, 453, 466, 469, 473, 477, 478, 479, 482, 485], "procid": 109, "sdata": 109, "structured_data": 109, "sd": 109, "sdid": 109, "dv": [109, 367], "specir": 109, "12345": [109, 232, 444, 446, 469, 475, 481, 485], "bozz": [109, 274], "fizz": 109, "buzz": 109, "54321": [109, 446], "rab": 109, "zab": 109, "zzif": 109, "unhelp": [109, 466, 485], "garbl": 109, "circumv": [109, 413], "pointless": [109, 485], "brett": [110, 314, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484], "cannon": [110, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484], "caniusepython3": 110, "tox": 110, "cleaner": [110, 351, 466, 475, 476, 478, 480, 485], "clarifi": [110, 111, 351, 393, 471, 472, 477, 479, 485], "six": [110, 189, 232, 233, 261, 305, 324, 325, 347, 360, 381, 398, 402, 426, 472, 477, 479, 482, 483], "feel": [110, 195, 298, 373, 381, 394, 445, 468, 469, 472, 476], "worst": [110, 111, 112, 182, 194, 196, 243, 432, 436, 459, 470, 481, 482, 485], "overal": [110, 128, 181, 189, 201, 243, 274, 290, 298, 314, 325, 352, 372, 386, 432, 448, 473, 479, 480], "freeli": [110, 129, 145, 200, 351, 430], "commonplac": [110, 477], "oldest": [110, 144, 234, 275, 370, 386, 406, 473, 477, 482, 485], "90": [110, 116, 154, 162, 267, 289, 324, 350, 388, 483], "cheat": 110, "sheet": [110, 157, 485], "pariti": [110, 476, 485], "conserv": [110, 129, 467, 470], "accustom": [110, 192], "diff": [110, 118, 149, 196, 200, 392, 467, 470, 473, 477, 485], "2002": [110, 114, 116, 189, 242, 265, 430, 468, 469], "confluenc": 110, "brittl": 110, "pronounc": [110, 477], "blind": [110, 351, 479], "predat": [110, 144, 184, 196, 289], "pose": [110, 133, 466, 470], "difficulti": [110, 289, 466, 469], "dichotomi": 110, "outdat": [110, 182, 258, 373, 374, 472, 477, 482, 485], "x00": [110, 182, 242, 264, 265, 344, 351, 354, 402, 485], "indexbyt": 110, "inevit": 110, "importlib2": 110, "absolute_import": [110, 119, 440, 471], "print_funct": [110, 118, 119, 440, 472], "werror": [110, 459, 460, 485], "lint": [110, 411], "analyz": [110, 119, 181, 285, 305, 306, 325, 337, 348, 386, 390, 430, 439, 471, 472, 473, 477, 485], "amk": [111, 325, 469, 472, 473], "regex": [111, 169, 227, 272, 308, 325, 364, 392, 467, 471, 472, 477, 479, 482, 485], "tex": 111, "automata": 111, "akm": 111, "complement": [111, 325, 351, 388, 432, 476, 478, 482, 484, 485], "caret": [111, 183, 184, 200, 325, 385, 485], "z0": [111, 114, 179, 325, 352, 439], "ct": [111, 112], "caaat": 111, "repetit": [111, 126, 156, 242, 267, 276, 281, 325, 351, 372, 385, 392, 394, 404, 432, 434, 438, 468, 485], "fewer": [111, 128, 181, 254, 264, 267, 325, 347, 350, 381, 436, 469, 471, 474, 476, 479, 481, 482, 483, 485], "bcd": [111, 267], "abcbd": 111, "abcb": 111, "bc": [111, 157, 166, 254, 267, 351, 466], "brew": 111, "homebrew": 111, "ab": [111, 156, 166, 196, 241, 267, 276, 298, 315, 325, 351, 421, 430, 439, 446, 466, 469], "infin": [111, 161, 192, 232, 268, 281, 351, 352, 359, 470, 472, 477, 485], "reductionist": 111, "bent": 111, "shorter": [111, 209, 232, 242, 298, 306, 354, 434, 466, 467, 470, 472, 473, 477, 485], "bloat": 111, "latex": [111, 472, 484, 485], "redemo": [111, 485], "tempo": 111, "drummer": 111, "drum": 111, "piper": 111, "lord": 111, "cook": [111, 183, 364, 485], "callable_iter": 111, "fromag": 111, "thu": [111, 157, 371], "52": [111, 144, 189, 267, 281, 324, 325, 348, 350, 352, 386, 446, 448, 470, 473, 485], "0130": [111, 325], "0131": [111, 325], "dotless": [111, 325], "017f": [111, 325], "212a": [111, 325], "kelvin": [111, 325], "pam": [111, 485], "french": [111, 114, 371, 480, 482], "unreli": [111, 183, 325, 485], "cultur": [111, 237, 272, 325], "charref": 111, "octal": [111, 118, 158, 190, 265, 298, 299, 325, 351, 352, 439, 466, 467, 469, 470, 472, 474, 476, 477, 483, 484, 485], "9a": [111, 325], "fa": [111, 325], "hexadecim": [111, 152, 164, 184, 242, 247, 265, 298, 325, 351, 352, 359, 402, 439, 466, 470, 472, 476, 477, 478, 479, 485], "crow": 111, "servo": 111, "cro": 111, "ervo": 111, "etern": [111, 144], "recit": 111, "bclass": 111, "declassifi": 111, "subtleti": [111, 189, 250], "collis": [111, 242, 295, 336, 465, 476, 479, 484, 485], "x08class": 111, "x08": [111, 354, 402], "dissect": [111, 467, 468], "subgroup": [111, 325, 477, 483], "agent": [111, 115, 277, 278, 342, 399, 400, 468, 472], "thunderbird": 111, "20061227": 111, "ababababab": 111, "upward": [111, 183, 302, 305, 388, 393], "parenthesi": [111, 118, 128, 254, 325, 435, 470, 485], "abcd": [111, 114, 166, 196, 267, 469, 472, 476], "backrefer": [111, 325, 485], "keystrok": [111, 162, 183, 339, 466, 473], "chose": [111, 257, 258, 438, 471], "subexpress": [111, 485], "jane": [111, 113], "internald": [111, 255], "mon": [111, 157, 189, 216, 469], "sec": [111, 289, 371, 372, 480, 485], "zonen": 111, "zoneh": 111, "zonem": 111, "news": [111, 190, 201, 233, 275, 294, 398, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 485, 486], "autoexec": 111, "sweet": 111, "p2": [111, 182, 267, 290, 355, 431, 445, 470, 476, 480], "leftmost": [111, 154, 166, 196, 200, 233, 242, 325, 348, 434, 470, 482, 483], "shoe": 111, "abxd": [111, 325, 482], "carriag": [111, 153, 184, 214, 215, 264, 325, 337, 351, 369, 411, 423, 439, 469, 471], "hexrepl": 111, "65490": 111, "49152": 111, "0xffd2": 111, "0xc000": 111, "bbbb": 111, "deed": 111, "swordfish": 111, "sdeedfish": 111, "bword": 111, "superstit": 111, "insuper": 111, "resist": [111, 242, 338, 467, 473, 478], "temptat": [111, 392, 467], "backtrack": [111, 485], "balanc": [111, 166, 243, 348, 479], "pain": [111, 272, 466, 471, 485], "dirti": 111, "terribl": [111, 243], "dog": [111, 166, 218, 325, 444, 477, 480], "neat": [111, 175, 468, 473], "pat": [111, 195, 480], "unclear": 111, "jeffrey": [111, 325, 348, 472, 473, 476, 477, 485], "friedl": [111, 325], "reilli": [111, 325, 372, 458, 468, 480, 485], "flavour": [111, 114, 258, 302, 363, 394, 471], "misunderstood": 112, "000": [112, 166, 182, 189, 192, 242, 267, 288, 314, 465, 477, 478], "foot": [112, 325, 350, 455], "decent": 112, "inet": [112, 344], "endpoint": [112, 129, 133, 139, 145, 219, 249, 344, 388, 477, 485], "switchboard": 112, "town": 112, "invent": [112, 164, 277, 370, 438, 469, 473], "berkeley": [112, 190, 474], "wildfir": 112, "unbeliev": 112, "repli": [112, 189, 210, 230, 252, 277, 289, 294, 342, 399, 485], "serversocket": 112, "snmp": 112, "clientsocket": 112, "client_thread": 112, "chat": 112, "recycl": [112, 121, 370, 485], "beast": 112, "etiquett": 112, "signon": 112, "forev": [112, 129, 144, 315, 334, 467, 468, 469, 470, 478, 485], "eot": [112, 184], "yuck": [112, 454], "shrug": 112, "righter": 112, "mysocket": [112, 268], "mysend": 112, "totals": 112, "msglen": [112, 344], "myrec": 112, "bytes_recd": 112, "2048": [112, 348, 409, 485], "asid": [112, 189, 232, 254, 314, 363, 394, 432, 434, 477, 482, 483], "nasti": 112, "competit": 112, "x86": [112, 182, 306, 354, 460, 465, 472, 482, 485], "arm": [112, 354, 480, 485], "risc": [112, 354, 485], "advisori": [112, 277, 432, 459, 466], "riddanc": 112, "neglect": [112, 409], "habit": [112, 237, 277], "indefinit": [112, 157, 183, 189, 252, 267, 271, 275, 277, 339, 364, 473, 479, 480, 485], "dead": [112, 313, 406, 444, 445, 469, 474, 477, 485], "screw": 112, "indistinguish": [112, 289, 314], "tcp_nodelay": [112, 133, 473, 481, 482, 485], "nut": 112, "crazi": 112, "suck": 112, "brain": [112, 470], "cake": 112, "ready_to_read": 112, "ready_to_writ": 112, "in_error": 112, "potential_read": 112, "potential_writ": 112, "potential_err": 112, "healthi": 112, "outbound": 112, "andrew": [113, 114, 183, 430, 466, 468, 469, 470, 471, 476, 477, 478, 479, 481, 482, 483, 484, 485], "dalk": [113, 430, 468, 469, 471], "ascend": [113, 314, 351], "student_tupl": 113, "student": [113, 120, 181, 233, 350, 354, 388, 390, 444, 465, 477], "grade": [113, 154, 218, 232, 351, 388, 469, 485], "student_object": 113, "secondari": [113, 133, 254, 314, 359, 473, 474, 476, 485], "multisort": 113, "xs": 113, "timsort": [113, 477], "dsu": 113, "lexicograph": [113, 267, 351, 434, 446, 471], "schwartzian": 113, "took": [113, 144, 175, 314, 372, 466, 485], "py3": [113, 118, 325, 457, 475, 477, 485], "__cmp__": [113, 466, 467, 469, 472, 473, 474], "numeric_compar": 113, "reverse_numer": 113, "mycmp": 113, "standard_way": 113, "double_revers": 113, "newgrad": 113, "japanes": [114, 164, 272, 470, 482], "hebrew": [114, 164], "russian": [114, 164], "emoji": [114, 477, 483, 485], "0x10ffff": [114, 232, 359, 478], "million": [114, 372, 445], "265e": 114, "0x265e": 114, "0061": 114, "0062": 114, "0063": 114, "007b": 114, "2167": 114, "2168": 114, "nine": [114, 192, 350, 479, 485], "265f": 114, "pawn": 114, "1f600": 114, "grin": 114, "1f609": 114, "wink": 114, "paper": [114, 126, 344, 469, 485], "glyph": [114, 215, 254], "diagon": [114, 445, 476], "stroke": [114, 468], "horizont": [114, 183, 184, 380, 381, 388, 439], "toolkit": [114, 254, 267, 373, 374, 430, 443, 466], "114": [114, 128, 232], "111": [114, 232, 267, 350, 352], "0x50": 114, "79": [114, 267, 386, 445], "74": [114, 350, 456, 483, 484], "68": [114, 192, 232, 324, 371, 417, 483], "6f": 114, "6e": 114, "0x00": [114, 184, 197], "ram": [114, 192, 347, 471, 485], "gigabyt": [114, 413], "intoler": 114, "strcpi": 114, "resynchron": [114, 478], "consortium": [114, 414], "chronolog": [114, 133, 481], "computerphil": 114, "youtub": 114, "tom": [114, 468, 471, 476, 477, 479, 485], "scott": [114, 154, 469, 471, 483, 485], "jukka": [114, 480], "korpela": 114, "introductori": [114, 344, 471], "joel": [114, 481, 485], "spolski": 114, "rudiment": 114, "fichier": 114, "trouv": 114, "pertoir": 114, "greek": [114, 164], "u0394": 114, "u00000394": 114, "xnn": 114, "x80abc": 114, "ufffdabc": 114, "iso_8859_1": 114, "57344": 114, "ue000": 114, "xmlcharrefreplac": [114, 164, 232, 264, 351, 469, 485], "unnnn": 114, "namereplac": [114, 164, 232, 264, 480, 485], "40960": 114, "1972": [114, 347, 469, 470, 471], "xea": 114, "x80": [114, 306, 468], "x80abcd": 114, "xde": 114, "xb4": 114, "ua000": 114, "ua000abcd": 114, "u07b4": 114, "yi": 114, "syllabl": 114, "comfort": [114, 200], "xac": 114, "u1234": [114, 164, 268], "u20ac": [114, 474, 480], "u00008000": 114, "97": [114, 128, 232, 284, 351, 473, 477], "172": [114, 314, 478], "4660": 114, "8364": [114, 232], "32768": [114, 348, 428], "dose": 114, "accent": [114, 337], "inspir": [114, 173, 207, 267, 268, 430, 431, 466, 467, 469, 472, 476, 477, 478, 485], "fifth": [114, 183, 254, 351, 371, 485], "233": [114, 233, 445, 453, 454], "0x0bf2": 114, "3972": [114, 473], "6000": [114, 242, 289], "13231": 114, "00e9": 114, "acut": 114, "0bf2": 114, "tamil": 114, "0f84": 114, "mn": [114, 439], "tibetan": 114, "halanta": 114, "1770": 114, "lo": [114, 154, 351, 439, 475], "tagbanwa": 114, "sa": [114, 189, 344], "33af": 114, "rad": [114, 469], "subcategori": 114, "nonspac": [114, 439], "00ea": 114, "0065": 114, "0302": 114, "german": [114, 164, 272, 351, 388, 479, 485], "00df": 114, "street": [114, 126, 325], "rzenichstra": 114, "rzenichstrass": 114, "inequ": [114, 192, 202, 209, 392, 434, 472, 477], "compare_str": 114, "nfd": [114, 391], "single_char": 114, "multiple_char": 114, "strs": [114, 390], "nfc": [114, 391, 483], "nfkc": [114, 353, 391, 398, 439, 485], "nfkd": [114, 391], "caseless": [114, 351, 478], "compare_caseless": 114, "nd": [114, 254, 325, 351, 439], "57": [114, 189, 267, 469, 483, 484, 485], "thai": [114, 164, 430], "arab": [114, 164, 192, 351, 466, 473, 477], "u0e55": 114, "u0e57": 114, "pragmat": 114, "ned": [114, 473, 477, 479, 484, 485], "batcheld": [114, 485], "marc": [114, 237, 347, 466, 467, 468, 469, 471, 478, 485], "andr": [114, 237, 347, 466, 467, 468, 469, 471, 485], "lemburg": [114, 237, 347, 466, 467, 468, 469, 471], "slide": [114, 415], "europython": 114, "transmiss": [114, 129, 184, 215, 275, 306, 411], "gib": [114, 276, 312, 363, 367, 426, 466, 469, 471, 485], "u4500": 114, "converg": [114, 350], "u4500abc": 114, "xe4": 114, "x94": [114, 242], "untrust": [114, 128, 196, 268, 274, 289, 305, 306, 318, 320, 333, 336, 338, 348, 363, 413, 415, 416, 417, 418, 423, 424, 426, 469, 472, 485], "attack": [114, 128, 133, 179, 232, 242, 251, 268, 274, 338, 347, 351, 413, 471, 473, 476, 478, 479, 480, 485], "bytestream": 114, "transpar": [114, 126, 156, 164, 182, 183, 209, 210, 225, 248, 254, 264, 276, 305, 363, 381, 388, 425, 465, 467, 469, 470, 476, 478, 479, 481, 482, 485], "new_f": 114, "beazley": [114, 468, 477], "benjamin": [114, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485], "peterson": [114, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483], "alexand": [114, 472, 473, 475, 477, 480, 481, 482, 485], "belopolski": [114, 472, 473, 475, 477, 480, 481, 482, 485], "brandl": [114, 471, 472, 473, 475, 477, 478, 480, 481, 485], "ezio": [114, 473, 477, 478, 479, 480], "melotti": [114, 473, 477, 478, 479, 480], "ric": [114, 478, 479, 483, 485], "araujo": [114, 478, 479, 483, 485], "nichola": [114, 469, 476], "bastin": [114, 470], "marius": [114, 466], "gedmina": 114, "kent": [114, 348, 367, 392, 467, 471, 472], "johnson": [114, 471, 472, 485], "ken": [114, 374, 476, 481, 482, 483, 484, 485], "krugler": 114, "von": [114, 237, 324, 432, 466, 468, 469, 470, 471, 472, 473, 477, 478, 479, 483], "wis": [114, 237, 294, 466, 468, 469, 470, 471, 472, 473, 477, 478, 479, 483], "terri": [114, 446, 476, 480, 481, 482, 483, 484, 485], "reedi": [114, 469, 476, 480, 481, 482, 483, 484, 485], "serhiy": [114, 476, 478, 479, 480, 481, 482, 483, 484, 485], "storchaka": [114, 476, 478, 479, 480, 481, 482, 483, 484, 485], "eryk": [114, 485], "chad": [114, 469, 471, 472, 485], "whitacr": 114, "graham": [114, 446, 472, 485], "wideman": 114, "michael": [115, 445, 446, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 483, 484, 485], "foord": [115, 473, 477], "urllib2": [115, 118, 399, 470, 472, 473, 474], "manuel": [115, 482, 485], "manquant": 115, "2616": [115, 397, 399, 411, 477], "tmp_file": 115, "voidspac": [115, 473], "uk": [115, 172, 250, 351, 371, 473], "the_pag": 115, "transmit": [115, 129, 133, 139, 147, 294, 342, 344, 366, 411, 413, 423, 470, 483], "someserv": 115, "northampton": 115, "submiss": [115, 158, 289, 320, 466], "hundredweight": 115, "tin": [115, 277], "door": [115, 126, 349], "somebodi": 115, "url_valu": 115, "dislik": [115, 393], "user_ag": 115, "win64": [115, 466, 480, 485], "pretend_serv": 115, "fulfil": [115, 248, 252, 348, 467, 469, 477], "404": [115, 158, 248, 249, 252, 268, 399, 411, 423, 424, 445, 476, 480], "403": [115, 248, 252, 445, 476], "401": [115, 248, 399, 445, 476, 480, 485], "299": [115, 230], "599": [115, 230, 294], "shortmessag": [115, 252], "101": [115, 126, 248, 267, 324, 350, 352, 386, 393, 473, 477], "obey": [115, 337, 351, 355, 370, 432, 472], "201": [115, 248, 267, 314, 374, 466], "202": [115, 189, 248], "203": [115, 248], "204": [115, 248, 252, 388], "206": [115, 248], "304": [115, 248, 252, 482], "unauthor": [115, 248], "402": [115, 248, 386], "payment": [115, 267], "charg": [115, 258, 390, 430], "406": [115, 248], "407": [115, 248], "408": [115, 248], "410": [115, 248], "precondit": [115, 348, 468, 477], "413": [115, 248, 485], "415": [115, 248], "media": [115, 160, 242, 287, 325, 430], "416": [115, 248, 386], "417": [115, 248, 252], "502": [115, 248, 470], "503": [115, 248], "504": [115, 248, 351], "respond": [115, 230, 249, 252, 254, 275, 319, 341, 344, 348, 359, 374, 393, 411, 423, 424, 473, 485], "fish": [115, 305, 393, 394, 403, 457, 479, 485], "dtd": [115, 247, 320, 399, 413, 418, 419, 420, 483, 485], "w3": [115, 247, 320, 399, 415, 417, 430, 485], "tr": [115, 183, 247, 307, 320, 399, 415, 417, 430, 485], "xhtml1": [115, 399], "someurl": 115, "brief": [115, 116, 126, 200, 212, 232, 233, 274, 298, 308, 314, 325, 328, 351, 355, 384, 430, 466, 468, 470, 471, 474, 477, 485], "lift": [115, 197, 481, 482, 483], "some_handler_inst": 115, "realm": [115, 215, 399, 485], "cpanel": 115, "password_mgr": [115, 399], "knew": [115, 295, 474], "top_level_url": 115, "a_url": 115, "http_proxi": [115, 399, 485], "8080": [115, 145, 249, 250, 344, 399, 423], "userinfo": [115, 399], "joe": [115, 158, 241, 388, 399, 480, 483, 485], "proxy_support": 115, "request_method": [115, 399, 411, 485], "lee": [115, 470, 471, 473, 477, 482, 485], "snif": 115, "msie": [115, 251], "sv1": 115, "clr": 115, "4322": 115, "aspn": [115, 281], "distro": [116, 476, 485], "promin": [116, 474, 485], "gunzip": [116, 241], "xf": [116, 298, 444], "cd": [116, 123, 126, 196, 267, 301, 392, 421, 472], "winzip": 116, "unzip": [116, 232, 425, 427, 469, 485], "pkunzip": 116, "privileg": [116, 158, 294, 299, 344, 346, 349, 371, 409, 478, 481, 485], "pristin": 116, "pybuild": 116, "6a1": [116, 472], "02": [116, 189, 192, 273, 289, 338, 371, 427, 455, 466, 468, 469, 470, 477, 481, 485], "distnam": 116, "python32": [116, 477], "painless": 116, "platbas": [116, 477], "userbas": [116, 477], "rpath": [116, 460, 464, 476, 485], "stash": 116, "typist": 116, "sitecustom": [116, 340, 442, 473, 479, 485], "mental": [116, 485], "trifl": 116, "mnt": 116, "immateri": [116, 436], "purelib": [116, 360, 477], "platlib": [116, 360, 477, 485], "pth": [116, 308, 340, 359, 459, 465, 466, 481, 485], "27": [116, 189, 218, 243, 299, 325, 344, 348, 350, 372, 383, 439, 450, 453, 466, 469, 475, 476, 477, 478, 482, 483, 484, 485], "20000731": 116, "112": [116, 192, 350, 386, 476, 483, 484, 485], "linux2": [116, 359, 478], "dynload": [116, 359, 460, 485], "stock": [116, 347, 471, 477, 485], "ver": [116, 485], "userprofil": [116, 300, 483, 485], "homedr": [116, 300], "homepath": [116, 300], "forcibl": [116, 232, 478, 479], "blib": 116, "implic": [116, 258, 289, 302, 305, 413, 434, 485], "inappropri": [116, 220, 258, 345, 353, 432, 485], "foreseen": 116, "sourcefil": 116, "cpparg": 116, "judg": 116, "foomodul": 116, "libm": [116, 182, 460, 485], "xcompil": 116, "o32": 116, "omf": 116, "coff": 116, "python25": 116, "coff2omf": 116, "python25_bcpp": 116, "_bcpp": 116, "foo_bcpp": 116, "bcpp": 116, "inferior": 116, "binutil": [116, 483], "20030111": 116, "pexport": 116, "dlltool": [116, 483], "dllname": [116, 275, 483], "libpython25": 116, "sourcewar": 116, "cygwin1": 116, "virtualenv": [117, 465, 478, 485], "somepackag": 117, "greet": [118, 311, 341, 342, 390, 480], "beneath": [118, 417, 485], "mycod": 118, "failunlessequ": [118, 392], "failifequ": [118, 392], "failunless": [118, 392], "assert_": [118, 392, 477], "failif": [118, 392], "failunlessrais": [118, 392], "cal": [118, 157, 399, 400], "failunlessalmostequ": [118, 392], "failifalmostequ": [118, 392], "basestr": [118, 469, 474, 479], "viewitem": [118, 473], "viewkey": [118, 473], "viewvalu": [118, 473], "execfil": [118, 469, 470, 474, 485], "exitfunc": [118, 466, 470, 474], "funcattr": 118, "my_funct": [118, 445], "func_closur": [118, 474], "__closure__": [118, 432, 474, 485], "new_featur": 118, "getcwdu": [118, 469], "someclass": [118, 305, 390, 393, 394, 466], "some_iter": 118, "imports2": 118, "itertools_import": 118, "ifilt": [118, 469], "izip": [118, 470], "ifilterfals": 118, "__metaclass__": [118, 468, 472, 474], "methodattr": 118, "im_func": [118, 472], "__nonzero__": [118, 474], "numliter": 118, "iscal": [118, 473, 474, 485], "sequenceinclud": [118, 473, 474], "issequencetyp": 118, "ismappingtyp": 118, "isnumbertyp": 118, "irepeat": 118, "maxint": [118, 474], "backtick": [118, 152, 401, 474, 482], "set_liter": 118, "standarderror": [118, 472, 474], "sys_exc": 118, "exc_valu": [118, 359, 367, 370, 385, 432, 473, 474], "exc_traceback": [118, 359, 367, 370, 385, 474, 485], "tuple_param": 118, "ws_comma": 118, "xrang": [118, 467, 468, 469, 470, 474], "xreadlin": [118, 467, 469, 470], "peg": [118, 435, 476, 484, 485], "617": [118, 435, 476, 484, 485], "parsabl": [118, 478, 484, 485], "libcst": [118, 128, 484], "parso": [118, 128, 484], "featurenam": [119, 420], "optionalreleas": 119, "mandatoryreleas": 119, "compilerflag": 119, "0a3": [119, 485], "predict": [119, 147, 232, 264, 350, 359, 417, 432, 459, 465, 477, 484, 485], "getoptionalreleas": 119, "getmandatoryreleas": 119, "compiler_flag": [119, 232], "nested_scop": [119, 440, 467, 468], "0b1": [119, 485], "0a1": [119, 485], "0a2": [119, 485], "with_stat": [119, 440, 471, 472], "unicode_liter": [119, 440, 472], "generator_stop": [119, 220, 440, 480, 485], "tbd": 119, "council": [119, 485], "649": 119, "helloworld": [120, 439], "tim": [120, 352, 372, 430, 465, 466, 467, 468, 469, 470, 471, 473, 479, 480, 481, 484, 485], "beauti": [120, 196], "__name___": 120, "phrase": [120, 248, 249, 255, 278, 298, 399, 434, 438, 439, 469, 472, 476, 478, 480, 485], "proactiv": 120, "exemplifi": [120, 274], "hypothet": [120, 298, 344, 466], "bandclass": 120, "teacher": 120, "search_stud": 120, "student_nam": 120, "fenc": 120, "did_user_define_their_nam": 120, "my_nam": [120, 393], "print_user_nam": 120, "dinsdal": 120, "uncom": [120, 207, 254, 468], "jabberwocki": 120, "light": [121, 182, 183, 472, 473, 475, 485], "weight": [121, 166, 182, 209, 324, 350, 352, 377, 481, 485], "netbsd": [121, 309, 344, 370, 371, 482, 485], "768": [121, 370], "a_lock": 121, "surviv": [121, 182, 234, 406], "honor": [121, 303, 359, 424, 472, 473, 481, 485], "myabc": 122, "get_iter": 122, "myiter": [122, 390], "innermost": [122, 175, 200, 320, 390, 434, 479, 485], "my_abstract_method": 122, "my_abstract_classmethod": 122, "my_abstract_staticmethod": 122, "my_abstract_properti": 122, "_get_x": 122, "_set_x": 122, "__isabstractmethod__": [122, 478], "_fget": 122, "_fset": 122, "_fdel": 122, "594": [123, 129, 145, 147, 158, 159, 160, 179, 256, 278, 287, 293, 294, 301, 307, 341, 343, 346, 356, 364, 401, 412, 485], "mono": [123, 147, 301, 405], "stereo": [123, 147, 301, 405], "quadro": 123, "nchannel": [123, 147, 301, 343, 356, 405], "samples": 123, "framer": [123, 343, 356, 405], "qualiti": [123, 200, 299, 301, 311, 432, 477, 485], "44": [123, 166, 192, 290, 324, 334, 391, 476, 478, 483, 484], "44100": [123, 301], "176": 123, "ahead": [123, 267, 364, 371, 407, 414, 470, 485], "sampwidth": [123, 343, 356, 405], "nframe": [123, 343, 356, 386, 405, 459], "comptyp": [123, 356, 405], "compnam": [123, 356, 405], "uncompress": [123, 156, 241, 276, 338, 363, 425, 426, 428, 476, 477, 485], "ulaw": [123, 356], "alaw": [123, 356], "g722": 123, "store_const": [126, 298], "helpformatt": [126, 298, 485], "myprogram": 126, "parent_pars": 126, "foo_pars": 126, "bar_pars": 126, "yyy": [126, 436], "nbar": 126, "foonley": 126, "store_fals": [126, 298], "foon": 126, "_storeact": 126, "option_str": 126, "absent": [126, 183, 274, 303, 305, 344, 352, 399, 477, 485], "append_const": [126, 298], "f1": [126, 223, 274, 289, 351, 431, 444, 485], "f2": [126, 223, 289, 351, 431, 485], "f4": [126, 468], "booleanoptionalact": [126, 485], "fooaction": 126, "xx": [126, 325, 336, 398, 485], "yy": 126, "_io": [126, 194, 477, 481, 485], "argumenttypeerror": 126, "code_point": 126, "source_fil": 126, "dest_fil": 126, "datapath": 126, "short_titl": 126, "tale": 126, "citi": [126, 348, 400, 430, 485], "downstream": [126, 429, 485], "filenotfound": 126, "scissor": 126, "frobbl": 126, "xyzz": 126, "badger": 126, "inher": [126, 370, 403, 417, 485], "cautious": [126, 268, 277], "1s": 126, "bacon": [126, 166, 196, 258, 285, 351, 385, 399, 432], "bac": 126, "mmm": [126, 255], "ba": [126, 261, 267, 426, 480], "parser_class": 126, "cmd1": 126, "cmd2": 126, "parser_a": 126, "parser_b": 126, "parser_foo": 126, "parser_bar": 126, "xyzyx": 126, "subparser_nam": 126, "subparser1": 126, "subparser2": 126, "group1": [126, 325], "group2": 126, "736": 126, "arg_lin": 126, "myargumentpars": 126, "errorcatchingargumentpars": 126, "doit": 126, "monkey": [126, 393, 394, 485], "callback_": 126, "optionerror": [126, 298], "optionvalueerror": [126, 298], "unicodestr": 127, "enc": [127, 348], "u2641": 127, "asdl": [128, 471, 476, 484, 485], "stmt": [128, 372, 472, 485], "decorator_list": 128, "orels": [128, 472], "finalbodi": 128, "elt": 128, "cmpop": 128, "format_spec": [128, 232, 352, 432, 439, 472, 485], "expr_context": 128, "ifs": 128, "posonlyarg": [128, 485], "vararg": [128, 261], "kwonlyarg": [128, 261], "kw_default": 128, "asnam": 128, "context_expr": 128, "optional_var": 128, "kwd_attr": 128, "kwd_pattern": 128, "typeignor": 128, "_ast": [128, 471, 477, 485], "asterisk": [128, 255, 316, 351, 410, 417, 434, 440, 482], "source_lin": 128, "nameconst": [128, 483, 485], "extslic": [128, 484, 485], "fantast": 128, "snake": [128, 166], "contributor": [128, 430, 474, 485], "115": [128, 267, 352, 386, 485], "compris": [128, 294, 308, 355, 434, 439, 440, 472], "collaps": [128, 203, 265, 300, 302, 369, 479, 485], "stararg": [128, 472], "walrus": [128, 434, 483, 485], "soc": 128, "otherexcept": [128, 220], "subpattern": [128, 431, 445, 476], "point2d": [128, 390], "point3d": [128, 166, 390], "outermost": [128, 261, 351, 370, 485], "decorator1": 128, "decorator2": 128, "3115": [128, 389, 431, 432, 474, 478], "base1": [128, 444], "base2": [128, 444], "other_func": 128, "feature_vers": [128, 382, 483, 485], "misplac": [128, 485], "func_typ": [128, 435, 483], "ast_obj": 128, "node_or_str": 128, "oneself": 128, "denial": [128, 232, 268, 351, 413, 432, 459, 476, 485], "new_nod": 128, "old_nod": 128, "visit_num": [128, 483, 485], "visit_str": [128, 483, 485], "visit_byt": [128, 483], "visit_nameconst": [128, 483], "visit_ellipsi": [128, 483], "visit_const": [128, 483, 485], "rewritenam": 128, "visit_nam": 128, "new_tre": 128, "yourtransform": 128, "annotate_field": 128, "include_attribut": 128, "asttoken": 128, "leoast": 128, "codemod": 128, "recoveri": [128, 208, 255, 399, 435], "incom": [129, 133, 139, 145, 220, 243, 252, 268, 289, 345, 348, 416, 477, 485], "fifo": [129, 131, 140, 166, 267, 289, 299, 302, 322, 335, 349, 363, 481, 482, 485], "emerg": [129, 275, 466], "encrypt": [129, 164, 179, 240, 255, 274, 294, 311, 316, 342, 346, 348, 426, 466, 468, 469, 473, 477, 478, 479, 485], "http_request_handl": 129, "extran": [129, 197, 268, 314, 374, 485], "ibuff": 129, "obuff": 129, "reading_head": 129, "cgi_data": 129, "clen": 129, "pythonasynciodebug": [132, 133, 194, 459, 485], "threadsaf": [132, 267, 273, 324, 347, 485], "slow_callback_dur": 132, "fut": [132, 135], "coro_func": 132, "coro": [132, 133, 144, 480, 485], "321": [132, 192], "source_traceback": 132, "base_ev": [133, 359, 434, 485], "prefac": [133, 139], "idempot": [133, 139, 173, 482, 485], "irrevers": 133, "567": [133, 135, 176, 192, 352, 456, 475, 482, 485], "protocol_factori": [133, 139], "local_addr": [133, 139, 141], "ssl_handshake_timeout": [133, 141, 482], "happy_eyeballs_delay": [133, 141, 483, 485], "interleav": [133, 141, 200, 289, 473, 477, 482, 483, 485], "synopsi": [133, 319, 348, 485], "happi": [133, 218, 469, 483, 485], "eyebal": [133, 483, 485], "8305": 133, "250": [133, 230, 341, 342, 347, 388, 473], "local_host": 133, "local_port": 133, "handshak": [133, 348, 476, 479, 480, 481, 482, 483, 485], "60": [133, 154, 162, 172, 189, 192, 203, 267, 313, 324, 348, 350, 371, 385, 386, 388, 402, 439, 469, 471, 477, 481, 483, 485], "dual": [133, 344, 348, 430, 439, 485], "undesir": [133, 467, 471, 485], "ietf": [133, 242, 265, 348, 354, 485], "rfc6555": 133, "remote_addr": [133, 139], "reuse_address": [133, 141, 481, 482, 483, 484, 485], "reuse_port": [133, 141, 344], "allow_broadcast": 133, "so_reuseaddr": [133, 145, 344, 367, 481, 482, 483, 484, 485], "packet": [133, 139, 147, 265, 275, 344, 345, 423, 473, 485], "so_reuseport": [133, 344, 367, 485], "remote_host": 133, "remote_port": 133, "broadcast": [133, 265, 344, 485], "preexist": 133, "af_unspec": [133, 141, 344], "ai_pass": [133, 141, 344], "backlog": [133, 141, 145, 289, 344, 480, 485], "time_wait": [133, 344], "syscal": [133, 220, 299, 328, 338, 476, 480, 481, 483, 485], "sockaddr": [133, 148, 344], "runnabl": [133, 403, 485], "uncatch": 133, "blocking_io": [133, 144], "cpu_bound": 133, "asyncgen": 133, "universal_newlin": [133, 142, 355, 470, 482, 485], "srv": [133, 176, 482], "client_connect": 133, "mypolici": [133, 478], "iocp": [133, 485], "msdn": [133, 299], "hello_world": 133, "reschedul": 133, "display_d": [133, 144], "end_tim": [133, 144], "rsock": [133, 139, 141], "wsock": [133, 139, 141], "recept": [133, 139, 141, 341], "ask_exit": 133, "signam": 133, "3600": [133, 139, 144, 175, 189], "base_futur": 135, "_asyncio_future_block": 135, "set_aft": 135, "excutor": 136, "water": [136, 334, 480, 485], "proactor_ev": 137, "windows_ev": [137, 485], "windows_util": [137, 482, 485], "hpet": 137, "prohibit": [138, 200, 264, 268, 348, 411, 434, 476, 482, 483, 484, 485], "inact": [138, 142, 445, 472, 485], "disrupt": [138, 485], "reap": [138, 485], "pidfd": [138, 339, 485], "goldilock": 138, "scale": [138, 334, 350, 381, 390, 466, 469, 472, 481, 482, 485], "myeventlooppolici": 138, "eventloop": [138, 485], "outgo": [139, 207, 344, 348, 477, 478], "peernam": [139, 141], "socknam": [139, 485], "peercert": 139, "ssl_object": 139, "watermark": [139, 141], "opportun": [139, 164, 331, 394, 465, 485], "list_of_data": 139, "terminateprocess": [139, 142, 148, 289, 299, 355, 472, 473], "unidirect": [139, 289], "reassembl": 139, "sizehint": [139, 164, 334, 485], "recipi": [139, 207, 215, 216, 341, 342, 345], "undeliver": 139, "echoserverprotocol": 139, "8888": [139, 141], "echoclientprotocol": 139, "on_con_lost": 139, "myprotocol": 139, "dateprotocol": 139, "exit_futur": 139, "unblock": [140, 239, 289, 339, 485], "priority_numb": [140, 322], "sleep_for": 140, "slept": 140, "workload": [140, 484, 485], "total_sleep_tim": 140, "started_at": 140, "total_slept_for": 140, "return_except": [140, 144, 485], "tcp_echo_cli": 141, "client_connected_cb": 141, "feed_eof": [141, 485], "handle_echo": 141, "print_http_head": 141, "wait_for_data": 141, "base_subprocess": 142, "proc": [142, 247, 299, 355, 481, 485], "zzz": [142, 436], "stdout_data": [142, 355, 470], "stderr_data": [142, 355, 470], "creationflag": [142, 355, 470], "waiter": [143, 370, 485], "waiter_task": 143, "codit": 143, "sem": 143, "0x1053bb7c8": 144, "say_aft": 144, "task1": [144, 456], "task2": [144, 456], "function_that_returns_a_future_object": 144, "some_python_coroutin": 144, "runner": [144, 200, 392, 404, 470, 473, 485], "mid": 144, "background_task": 144, "some_coro": 144, "aws": 144, "aggreg": [144, 267, 347, 392, 485], "aw": [144, 485], "yay": 144, "return_when": [144, 172], "all_complet": [144, 172], "first_complet": [144, 172], "first_except": [144, 172], "earliest": [144, 157, 189, 196, 371], "earliest_result": 144, "ran": [144, 166, 200, 220, 355, 392, 472, 473, 485], "54": [144, 267, 324, 338, 350, 427, 469, 476], "deni": [144, 219, 345, 432, 469, 485], "cancel_m": 144, "newest": 144, "old_style_coroutin": 144, "emptiv": 145, "juggl": 145, "snap": 145, "companion": [145, 469], "invalu": [145, 200, 325], "use_pol": 145, "oob": 145, "tenuous": 145, "banner": [145, 162, 163], "condens": [145, 242, 274, 471, 485], "passiv": [145, 230, 261, 465, 467], "partner": 145, "set_reuse_addr": 145, "httpclient": 145, "nhost": [145, 348], "echohandl": 145, "echoserv": 145, "unregistr": [146, 335], "counterfil": 146, "_count": 146, "incrcount": 146, "savecount": 146, "adject": [146, 450], "donni": 146, "sector": 146, "law": [147, 242, 343, 356, 371, 430, 471, 485], "dvi": 147, "adpcm": 147, "fragment1": 147, "fragment2": 147, "adpcmfrag": 147, "newstat": 147, "proport": [147, 173, 324, 485], "energi": 147, "maxim": [147, 196, 197, 203, 242, 254, 367, 444, 485], "wherebi": [147, 158, 274, 305], "ima": 147, "coder": [147, 153], "newwidth": 147, "new_fram": 147, "old_width": 147, "inrat": 147, "outrat": 147, "weighta": 147, "weightb": [147, 485], "newfrag": 147, "s_i": 147, "lfactor": 147, "rfactor": 147, "recombin": [147, 478], "mul_stereo": 147, "lsampl": 147, "rsampl": 147, "toler": [147, 161, 265, 281, 480, 482, 485], "loss": [147, 192, 232, 250, 264, 277, 281, 371, 399, 425, 430, 434, 468, 470, 472, 476, 477, 481, 482, 483, 485], "misinterpret": 147, "energet": 147, "echocancel": 147, "outputdata": 147, "inputdata": 147, "800": [147, 242, 276, 471, 473, 476, 477, 481], "out_test": 147, "in_test": 147, "ipo": 147, "prefil": 147, "postfil": 147, "run_fil": [148, 459], "run_interactivehook": [148, 359], "run_startup": [148, 459], "run_stdin": [148, 459], "call_funct": [148, 182, 197, 481, 485], "func_point": 148, "cdata": [148, 182, 320, 414, 419, 420, 485], "dlopen": [148, 182, 299, 359, 468, 471, 485], "dlsym": [148, 182], "seh_except": [148, 182], "code_object": 148, "whenc": [148, 160, 222, 264, 284, 450, 468], "dir_fd": [148, 232, 238, 299, 476, 478, 485], "putlin": [148, 294, 311, 485], "topdown": [148, 299], "onerror": [148, 299, 308, 338, 482, 485], "follow_symlink": [148, 299, 302, 338, 476, 478, 485], "pgid": [148, 299], "src_dir_fd": [148, 299], "dst_dir_fd": [148, 299], "show_cmd": [148, 299], "ns": [148, 299, 320, 386, 389, 417, 485], "followlink": [148, 299, 472], "extract_dir": [148, 338], "thread_id": [148, 339, 371], "signalnum": [148, 339], "servicenam": [148, 344], "protocolnam": [148, 344], "connection_handl": [148, 347], "set_asyncgen_hooks_fin": [148, 359], "set_asyncgen_hooks_firstit": [148, 359], "logopt": [148, 361], "maskpri": [148, 361], "fullpath": [148, 365], "fullurl": [148, 399], "computer_nam": [148, 409], "sub_key": [148, 409], "file_nam": [148, 409], "value_nam": [148, 409], "_winapi": [148, 485], "createfil": 148, "desired_access": 148, "share_mod": 148, "creation_disposit": 148, "flags_and_attribut": 148, "createjunct": 148, "src_path": 148, "dst_path": 148, "createnamedpip": 148, "open_mod": 148, "pipe_mod": 148, "createpip": 148, "createprocess": [148, 355], "application_nam": 148, "command_lin": [148, 355], "current_directori": 148, "openprocess": 148, "process_id": [148, 344], "exit_cod": 148, "pyobj_fromptr": 148, "4648": [149, 333, 485], "ascii85": [149, 479, 485], "76": [149, 209, 350, 386, 388, 423], "2045": [149, 201, 203, 209, 210, 212, 423], "altchar": 149, "map01": 149, "oh": 149, "eye": [149, 192, 196, 471, 480, 483], "foldspac": 149, "wrapcol": 149, "adob": [149, 479, 485], "btoa": 149, "ignorechar": 149, "x0b": [149, 351, 402], "zgf0ysb0bybizsblbmnvzgvk": 149, "1521": [149, 323], "multipurpos": [149, 323], "botfram": 150, "stopfram": 150, "returnfram": 150, "c_call": [150, 359], "c_return": [150, 359], "c_except": [150, 359], "module_nam": [150, 258, 367, 482, 485], "argument_list": [150, 431, 434], "dispatch_": 150, "frame_lineno": 150, "lprefix": 150, "a2b_": [152, 478], "3548": [152, 470], "quotetab": [152, 164, 323], "istext": 152, "1522": [152, 323], "linefe": [152, 215, 337, 352, 439, 469], "rle": 152, "0x90": 152, "orphan": [152, 289, 485], "hexbin4": [152, 484, 485], "ccitt": [152, 356], "polynomi": [152, 281], "0x1021": 152, "010x": 152, "0xffffffff": [152, 428, 469, 481], "bytes_per_sep": [152, 351], "xb9": 152, "x01": [152, 264, 265, 344, 354, 402], "b901ef": 152, "b9": 152, "ef": [152, 166, 267, 398, 421], "b9_01ef": 152, "b901": 152, "hexstr": 152, "invers": [152, 157, 161, 189, 192, 208, 216, 232, 251, 265, 281, 297, 305, 337, 350, 351, 371, 434, 435, 472, 483, 485], "liber": [152, 200], "85": [152, 160, 294, 480], "domin": [154, 250], "sortedcollect": 154, "straight": [154, 209, 213, 232, 289, 359, 392, 406, 415, 466, 474, 483, 485], "awkward": [154, 473, 483], "find_lt": 154, "find_l": 154, "find_gt": 154, "find_g": 154, "exam": [154, 350], "score": [154, 196, 347, 350, 456], "89": [154, 192, 233, 344, 350, 351, 445, 453, 454, 475, 477], "70": [154, 189, 192, 324, 350, 369, 386, 445, 455, 456, 485], "fdcba": 154, "77": [154, 192, 386, 388, 477], "speilberg": 154, "titan": 154, "bird": 154, "1963": 154, "hitchcock": 154, "alien": [154, 370], "1986": [154, 189], "1960": 154, "by_year": 154, "romanc": 154, "hiller": 154, "_f": 155, "compresslevel": [156, 241, 363, 426, 482, 484, 485], "xb": [156, 241, 276], "wt": [156, 232, 241, 276, 350], "compressor": [156, 276, 428, 485], "decompressor": [156, 276, 428, 485], "max_length": [156, 276, 428, 480, 485], "donec": 156, "rhoncus": 156, "qui": 156, "sapien": 156, "sit": [156, 380, 421], "amet": 156, "molesti": 156, "fusc": 156, "scelerisqu": 156, "vel": 156, "augu": 156, "nec": 156, "ullamcorp": 156, "nam": 156, "rutrum": 156, "pretium": 156, "placerat": 156, "aliquam": 156, "tristiqu": 156, "lorem": 156, "cursus": 156, "ant": [156, 218], "interdum": 156, "laoreet": 156, "ultric": 156, "purus": 156, "pulvinar": 156, "gravida": 156, "euismod": 156, "magna": 156, "varius": 156, "justo": 156, "tincidunt": 156, "feugiat": 156, "pharetra": 156, "lacus": 156, "risus": 156, "vehicula": 156, "maecena": 156, "feli": 156, "pellentesqu": 156, "semper": 156, "nunc": 156, "nibh": 156, "ac": [156, 166, 267, 430, 460, 469, 485], "elementum": 156, "dolor": 156, "luctus": 156, "curabitur": 156, "lacinia": 156, "ornar": 156, "consectetur": 156, "vestibulum": 156, "513595166163142": 156, "gen_data": 156, "chunksiz": [156, 172, 289, 309, 480, 485], "nonrandom": 156, "myfil": [156, 264, 299, 392, 426, 444, 447, 456], "week": [157, 189, 272, 371, 466, 483, 485], "european": [157, 164, 473], "gregorian": [157, 189], "prolept": [157, 189], "dershowitz": [157, 189], "reingold": [157, 189], "calendr": [157, 189], "prescrib": [157, 441], "8601": [157, 189, 196, 272, 347, 423, 481], "theyear": 157, "themonth": 157, "withyear": 157, "css": [157, 247, 477, 482, 485], "cascad": [157, 485], "tue": [157, 189], "wed": [157, 189, 371], "fri": [157, 216, 477, 478, 485], "formatmonthnam": [157, 485], "singular": [157, 237, 485], "customhtmlc": 157, "nowrap": 157, "formatweekday": [157, 485], "y1": [157, 434, 445, 476], "y2": [157, 232, 445, 476], "centuri": [157, 189, 371, 477, 485], "epoch": [157, 182, 216, 250, 255, 277, 294, 300, 347, 348, 371, 423, 467, 485], "januari": [157, 160, 189, 324, 371, 439, 467], "isindex": 158, "goodi": 158, "h1": [158, 242, 247, 249, 274, 424], "logdir": [158, 159], "keep_blank_valu": [158, 398], "minifieldstorag": [158, 485], "fileitem": 158, "userfil": 158, "linecount": 158, "multipart": [158, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 485], "employ": [158, 289, 299, 416, 436, 478], "strict_pars": [158, 398], "pdict": 158, "megabyt": 158, "hole": [158, 299, 337, 473, 476, 485], "hacker": [158, 324], "exploit": [158, 276, 299, 413, 432, 459, 479, 485], "gullibl": 158, "dash": [158, 164, 183, 203, 212, 325, 337, 411], "0o755": 158, "0755": [158, 485], "0o644": 158, "0o666": [158, 190, 299, 302, 401], "everybodi": [158, 251], "cryptic": [158, 485], "yourhostnam": 158, "suspect": [158, 466, 485], "userid": [158, 275, 390, 481], "suexec": 158, "liabil": [158, 430], "excerpt": [159, 192, 483], "ea": 160, "rmff": 160, "bigendian": 160, "inclhead": 160, "jerri": 160, "morrison": [160, 479], "electron": [160, 348], "1985": [160, 347], "cartesian": [161, 267, 347, 472, 475, 480], "modulus": [161, 295, 351, 359, 472, 477, 483], "phi": [161, 281], "counterclockwis": [161, 388], "141592653589793": [161, 448, 477], "arc": [161, 281, 388, 472, 473, 475, 477, 485], "cosin": [161, 192, 281], "sine": [161, 192, 281], "tangent": [161, 281, 388], "rel_tol": [161, 281, 480], "1e": [161, 232, 281, 352, 354, 434, 480, 485], "abs_tol": [161, 281, 480], "ieee": [161, 192, 268, 281, 300, 354, 367, 434, 448, 470, 472, 475, 477, 481, 482, 485], "754": [161, 192, 268, 281, 354, 367, 434, 448, 470, 472, 475, 477, 481, 482, 485], "curv": [161, 348, 388, 478, 485], "elementari": [161, 183, 388], "enlighten": 161, "kahan": 161, "ado": 161, "iserl": 161, "powel": [161, 485], "eds": 161, "clarendon": 161, "1987": [161, 164, 189, 412], "pp165": 161, "211": [161, 294, 478], "completekey": [162, 303], "bash": [162, 302, 337, 403, 451, 457, 485], "do_help": 162, "do_shel": 162, "complete_foo": 162, "begidx": 162, "endidx": 162, "help_bar": 162, "help_": 162, "undocu": [162, 273, 303, 367, 392, 426, 476, 478, 479, 480, 481, 482, 484, 485], "nonempti": [162, 325, 351, 388, 407, 432], "complete_": 162, "drawn": [162, 183, 299, 388], "do_forward": 162, "playback": [162, 301], "do_playback": 162, "turtleshel": 162, "do_right": 162, "do_left": 162, "do_goto": 162, "do_hom": 162, "do_circl": 162, "radius": [162, 218, 281, 347, 388, 390], "do_posit": 162, "do_color": 162, "do_undo": 162, "do_reset": 162, "do_by": 162, "do_record": 162, "rose": [162, 481, 485], "spiral": 162, "180": [162, 242, 350, 388, 477], "__console__": 163, "readfunc": 163, "exitmsg": 163, "stuf": 163, "data_encod": 164, "file_encod": 164, "transcod": [164, 411, 477], "base64_codec": 164, "rot_13": 164, "xdf": [164, 242, 310], "u266c": 164, "223": 164, "9836": 164, "xhh": [164, 439], "uxxxx": [164, 439], "uxxxxxxxx": [164, 439], "d800": 164, "dfff": 164, "error_handl": [164, 418], "utf_8": [164, 485], "rescan": [164, 308], "recov": [164, 220, 228, 359, 401, 419, 473, 477], "firstlin": [164, 194], "huge": [164, 264, 466, 479, 485], "reposit": 164, "resp": [164, 272, 294, 313, 480], "frontend": 164, "backend": [164, 183, 347, 367, 394, 460], "recreat": [164, 304, 344, 398, 403, 406, 432, 478, 482, 485], "0x0": 164, "00ff": [164, 477, 478, 485], "charmap": 164, "fffe": 164, "ligatur": 164, "2060": [164, 255], "joiner": [164, 480, 485], "payload": [164, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 249, 259, 473, 485], "00000000": 164, "0000007f": 164, "0xxxxxxx": 164, "00000080": 164, "000007ff": 164, "110xxxxx": 164, "10xxxxxx": 164, "00000800": 164, "0000ffff": 164, "1110xxxx": 164, "00010000": 164, "0010ffff": 164, "11110xxx": 164, "notepad": [164, 439], "0xef": 164, "0xbb": 164, "0xbf": 164, "improb": 164, "diaeresi": 164, "quotat": [164, 355, 472, 485], "iso8859": 164, "utf16": 164, "utf32": 164, "euro": [164, 473, 474], "ebcdic": [164, 479], "pc": [164, 183, 280, 410, 425, 439, 465, 472, 485], "646": 164, "big5": [164, 470], "csbig5": 164, "big5hksc": [164, 470], "hkscs": 164, "cp037": 164, "ibm037": 164, "ibm039": 164, "cp273": [164, 479], "ibm273": 164, "csibm273": 164, "cp424": 164, "he": [164, 243, 303, 325, 370, 439, 466, 481], "ibm424": 164, "cp437": 164, "437": 164, "ibm437": 164, "cp500": 164, "ibm500": 164, "western": [164, 371], "europ": [164, 172, 371, 429, 473], "cp720": [164, 473, 477], "cp737": 164, "cp775": 164, "ibm775": 164, "baltic": 164, "cp850": 164, "850": [164, 473], "ibm850": 164, "cp852": 164, "852": 164, "ibm852": 164, "central": [164, 189, 201, 212, 293, 350, 466, 467, 468, 469, 471, 477, 485], "eastern": [164, 189, 371, 481], "cp855": 164, "855": 164, "ibm855": 164, "bulgarian": 164, "byelorussian": 164, "macedonian": 164, "serbian": 164, "cp856": 164, "cp857": 164, "857": 164, "ibm857": 164, "cp858": [164, 473], "858": 164, "ibm858": 164, "cp860": 164, "860": 164, "ibm860": 164, "portugues": [164, 485], "cp861": 164, "861": [164, 302], "ibm861": 164, "iceland": [164, 471], "cp862": 164, "862": 164, "ibm862": 164, "cp863": 164, "863": 164, "ibm863": 164, "cp864": 164, "ibm864": 164, "cp865": 164, "865": 164, "ibm865": 164, "danish": 164, "cp866": 164, "866": [164, 196, 483], "ibm866": 164, "cp869": 164, "869": 164, "gr": [164, 471, 476, 483, 485], "ibm869": 164, "cp874": 164, "cp875": 164, "cp932": [164, 470], "932": 164, "ms932": 164, "mskanji": 164, "kanji": 164, "cp949": [164, 470], "949": 164, "ms949": 164, "uhc": 164, "cp950": [164, 470], "950": 164, "ms950": 164, "cp1006": 164, "urdu": 164, "cp1026": 164, "ibm1026": 164, "cp1125": [164, 479], "1125": 164, "ibm1125": 164, "cp866u": 164, "ruscii": 164, "cp1140": 164, "ibm1140": 164, "cp1250": [164, 173], "1250": 164, "cp1251": 164, "1251": 164, "1252": [164, 452, 456], "cp1253": 164, "1253": 164, "cp1254": 164, "1254": [164, 325], "cp1255": 164, "1255": 164, "cp1256": 164, "1256": 164, "cp1257": 164, "1257": 164, "cp1258": 164, "1258": 164, "euc_jp": 164, "eucjp": [164, 189], "uji": 164, "jis": [164, 470], "euc_jis_2004": 164, "jisx0213": [164, 470], "eucjis2004": 164, "euc_jisx0213": 164, "eucjisx0213": 164, "euc_kr": 164, "euckr": 164, "korean": [164, 470, 482, 485], "ksc5601": 164, "ks_c": 164, "5601": 164, "ksx1001": 164, "ks_x": 164, "gb2312": [164, 391, 470, 478], "chines": [164, 470, 485], "csiso58gb231280": 164, "euc": [164, 202, 470], "cn": 164, "euccn": 164, "eucgb2312": 164, "1980": [164, 196, 426, 485], "ir": 164, "58": [164, 324, 350, 352, 485], "gbk": [164, 470], "936": 164, "cp936": 164, "ms936": 164, "gb18030": [164, 470, 485], "hz": [164, 470, 478, 485], "hzgb": 164, "gb": [164, 348, 485], "2312": 164, "iso2022_jp": 164, "csiso2022jp": 164, "iso2022jp": 164, "jp": [164, 202, 430, 470], "iso2022_jp_1": 164, "iso2022_jp_2": 164, "iso2022_jp_2004": 164, "iso2022_jp_3": 164, "iso2022_jp_ext": 164, "iso2022_kr": 164, "csiso2022kr": 164, "iso2022kr": 164, "kr": [164, 470], "latin_1": [164, 202, 485], "cp819": 164, "iso8859_2": 164, "latin2": 164, "iso8859_3": 164, "latin3": 164, "l3": 164, "esperanto": 164, "maltes": 164, "iso8859_4": 164, "latin4": 164, "l4": 164, "iso8859_5": 164, "cyril": 164, "iso8859_6": 164, "iso8859_7": 164, "greek8": 164, "iso8859_8": 164, "iso8859_9": 164, "latin5": 164, "l5": 164, "iso8859_10": 164, "latin6": 164, "l6": [164, 478], "nordic": 164, "iso8859_11": 164, "iso8859_13": 164, "latin7": 164, "l7": 164, "iso8859_14": 164, "latin8": 164, "l8": 164, "celtic": 164, "iso8859_15": 164, "latin9": 164, "l9": 164, "iso8859_16": 164, "latin10": 164, "l10": 164, "south": [164, 218, 325, 381, 388, 472, 475], "johab": [164, 470], "cp1361": 164, "ms1361": 164, "koi8_r": 164, "koi8_t": [164, 480, 485], "tajik": [164, 480], "koi8_u": 164, "kz1048": [164, 480, 485], "kz_1048": 164, "strk1048_2002": 164, "rk1048": 164, "kazakh": [164, 480], "mac_cyril": 164, "maccyril": 164, "mac_greek": 164, "macgreek": 164, "mac_iceland": 164, "maciceland": 164, "mac_latin2": [164, 485], "maclatin2": 164, "maccentraleurop": 164, "mac_centeuro": [164, 485], "mac_roman": 164, "macroman": 164, "mac_turkish": 164, "macturkish": 164, "ptcp154": 164, "csptcp154": 164, "pt154": 164, "cp154": 164, "asian": [164, 391, 470], "shift_ji": 164, "csshiftji": 164, "shiftji": 164, "sjis": [164, 189], "s_jis": 164, "shift_jis_2004": 164, "shiftjis2004": 164, "sjis_2004": 164, "sjis2004": 164, "shift_jisx0213": 164, "shiftjisx0213": 164, "sjisx0213": 164, "s_jisx0213": 164, "utf_32": 164, "u32": 164, "utf_32_b": 164, "32be": 164, "utf_32_l": 164, "32le": 164, "utf_16": 164, "u16": 164, "utf_16_b": 164, "16be": 164, "utf_16_l": 164, "16le": 164, "utf_7": 164, "u7": 164, "u8": 164, "cp65001": [164, 478, 485], "asymmetr": 164, "3490": [164, 469], "oem": [164, 481, 485], "cp_oemcp": [164, 481], "palmo": 164, "3492": [164, 469], "raw_unicode_escap": 164, "bewar": [164, 220, 228, 268, 289, 336, 347, 348, 436, 455, 474], "unicode_intern": [164, 478, 483, 485], "base_64": 164, "bz2_codec": [164, 479], "hex_codec": [164, 479], "quopri_codec": 164, "quotedprint": 164, "quoted_print": 164, "uu_codec": [164, 485], "zlib_codec": 164, "rot13": [164, 479, 485], "caesar": 164, "cypher": 164, "idn": [164, 348, 482, 485], "5891": 164, "5895": 164, "rfcs": [164, 201, 203, 208, 209, 210, 212, 215, 216, 311, 348, 469, 480, 485], "alliancefran": [164, 469], "ais": [164, 469], "nu": [164, 469], "ace": [164, 324, 325, 469], "xn": [164, 348, 469, 482], "alliancefranais": [164, 469], "npb": [164, 469], "allowunassign": 164, "usestd3asciirul": 164, "subcontext": 166, "baselin": [166, 372, 377], "bach": 166, "rembrandt": 166, "gogh": 166, "opera": [166, 407, 471, 485], "carmen": 166, "584": [166, 299, 389, 406, 484, 485], "enthought": [166, 465], "codetool": 166, "multicontext": 166, "pylookup": 166, "guest": [166, 344, 485], "command_line_arg": 166, "deepchainmap": 166, "inner": [166, 175, 197, 242, 244, 261, 325, 347, 351, 388, 390, 417, 431, 470, 473, 477, 478, 485], "eleph": 166, "lion": 166, "topmost": [166, 359, 471, 485], "talli": [166, 473, 477, 478], "cnt": 166, "hamlet": [166, 466], "1143": 166, "966": 166, "762": 166, "631": 166, "554": [166, 485], "546": [166, 386], "514": [166, 275, 469, 485], "bag": [166, 207, 444], "multiset": [166, 477], "gallahad": [166, 446, 475], "sausag": [166, 232, 351], "list_of_pair": 166, "knuth": [166, 192], "donald": [166, 348, 473, 479], "deck": [166, 324], "ghi": [166, 182, 273, 337, 470], "jkl": 166, "pyshel": [166, 192, 254, 325, 481, 482, 483, 485], "moving_averag": 166, "39": [166, 189, 200, 267, 289, 299, 371, 460, 470, 476, 478, 483, 484], "43": [166, 179, 189, 230, 348, 351, 372, 445, 477, 483, 484], "roundrobin": [166, 267], "delete_nth": 166, "rot": [166, 468, 485], "mississippi": [166, 351], "constant_factori": 166, "typenam": [166, 313, 347, 472, 485], "field_nam": [166, 352], "_1": [166, 473, 475], "_3": 166, "_sourc": [166, 482, 485], "employeerecord": 166, "depart": [166, 232, 351], "paygrad": 166, "emp": 166, "employe": [166, 390, 444, 485], "companydata": 166, "partnum": 166, "inventori": [166, 187, 297], "price": [166, 325, 416, 453, 470, 471, 480, 483, 485], "newpric": 166, "pixel": [166, 374, 377, 381, 388, 485], "premium": 166, "714": 166, "018": 166, "hardcov": 166, "isbn": [166, 374, 458], "part_numb": 166, "lru": [166, 233, 485], "k1": 166, "k2": 166, "od": [166, 473, 476, 477, 485], "acdeb": 166, "bacd": 166, "od1": [166, 473], "od2": [166, 473], "lastupdatedordereddict": 166, "timeboundedlru": 166, "maxag": 166, "multihitlrucach": 166, "maxrequest": 166, "cache_aft": 166, "uncached_key": 166, "request_count": 166, "cached_key": 166, "function_result": 166, "uncach": [166, 299, 477, 485], "initialdata": 166, "_collections_abc": 167, "gencoro": 167, "myvar": 167, "listbasedset": 167, "lst": 167, "abcdef": [167, 182, 264, 267, 325, 473, 479], "defghi": [167, 267], "_from_iter": 167, "_hash": [167, 485], "orderedset": 167, "yiq": [168, 479], "hls": 168, "hsv": 168, "poynton": 168, "colorfaq": 168, "cambridgeincolour": 168, "htm": [168, 189, 252, 468, 469, 470, 471, 472, 473, 474], "qq": 169, "destdir": 169, "strip_prefix": 169, "prepend_prefix": 169, "coexist": 169, "uncheck": [169, 436, 459, 482, 485], "source_date_epoch": [169, 317, 482, 485], "hardlink": [169, 363, 484, 485], "dupe": [169, 484], "consolid": [169, 290, 469, 478, 481, 485], "multilevel": [169, 485], "ddir": [169, 485], "rx": [169, 325], "invalidation_mod": [169, 317, 482, 485], "stripdir": [169, 484], "prependdir": [169, 484], "limit_sl_dest": [169, 484], "hardlink_dup": [169, 484], "fullnam": [169, 257, 258, 308, 427, 469], "skip_curdir": 169, "323": [172, 481], "1235": 172, "chop": [172, 289, 300, 466, 470, 474], "cancel_futur": [172, 484, 485], "src1": [172, 477], "dest1": [172, 477], "src2": [172, 477], "dest2": [172, 477], "src3": [172, 477], "dest3": [172, 477], "src4": 172, "dest4": [172, 477], "wait_on_b": 172, "wait_on_a": 172, "wait_on_futur": 172, "thread_name_prefix": [172, 481, 485], "initarg": [172, 289, 482], "grace": [172, 325, 339, 370, 434, 473, 477, 482, 485], "foxnew": 172, "cnn": [172, 190], "wsj": 172, "load_url": 172, "future_to_url": 172, "picklabl": [172, 218, 261, 289, 305, 480, 485], "mp_context": [172, 482], "61": [172, 351, 371, 470, 485], "abrupt": [172, 345, 348, 370, 485], "start_method": 172, "112272535095293": 172, "112582705942171": 172, "115280095190773": 172, "115797848077099": 172, "1099726899285419": 172, "is_prim": 172, "sqrt_n": 172, "woken": [172, 472], "not_don": 172, "fashion": [172, 268, 289, 314, 325, 344, 385, 417, 431, 432, 434, 470, 473, 478, 479], "serveraliveinterv": 173, "compressionlevel": 173, "forwardx11": 173, "topsecret": 173, "50022": 173, "configfil": 173, "bytebong": 173, "another_config": 173, "nport": 173, "48484": 173, "21212": 173, "3des": [173, 348, 481, 485], "cbc": [173, 344], "monster": [173, 369], "batchmod": 173, "led": [173, 299, 467, 478, 481, 485], "1000000": [173, 189, 228, 232, 289, 314, 372, 445, 473, 481, 485], "14159265359": [173, 448, 450], "chorus": 173, "lumberjack": [173, 313, 385], "night": 173, "key_without_valu": 173, "harm": [173, 298, 425, 477], "can_values_be_as_wel": 173, "does_that_mean_anything_speci": 173, "multiline_valu": 173, "home_dir": 173, "my_dir": 173, "my_pictur": 173, "zc": 173, "buildout": [173, 477], "system_dir": 173, "macports_dir": 173, "arthur": [173, 351, 483, 485], "nicknam": 173, "shed": 173, "last_nam": [173, 181, 325], "jackson": [173, 479], "twosh": 173, "python_dir": 173, "defaultsect": 173, "section_nam": 173, "section_proxi": 173, "eleg": [173, 470, 477], "dict_typ": [173, 310], "section1": 173, "key1": [173, 431, 484], "key2": [173, 431, 484], "key3": [173, 484], "value3": [173, 484], "section2": 173, "keya": 173, "valuea": 173, "keyb": 173, "valueb": 173, "keyc": 173, "valuec": 173, "section3": 173, "allow_no_valu": [173, 473], "sample_config": [173, 473], "mysqld": [173, 473], "mysql": [173, 230, 473], "old_password": 173, "acid": [173, 468], "innodb": 173, "space_around_delimit": 173, "comment_prefix": 173, "inline_comment_prefix": 173, "enabled_extens": 173, "another_extens": 173, "disabled_by_com": 173, "yet_another_extens": 173, "empty_lines_in_valu": 173, "gotcha": 173, "she": 173, "default_sect": 173, "parser_inst": 173, "getdecim": 173, "funki": [173, 218], "unsuit": [173, 333, 417, 467, 473, 485], "anotherkey": 173, "larch": 173, "optcr": 173, "downright": 173, "counterintuit": 173, "an_int": 173, "a_bool": 173, "a_float": 173, "1415": [173, 192, 472], "evil": [173, 473, 485], "fileobject": [173, 476], "cfgparser": 173, "readline_gener": 173, "footnot": [173, 485], "managed_resourc": 175, "acquire_resourc": 175, "release_resourc": 175, "rerais": [175, 197, 289, 351, 431, 432, 485], "trap": [175, 192, 372, 468, 470, 478, 485], "get_connect": 175, "acquire_db_connect": 175, "release_db_connect": 175, "get_all_us": 175, "my_gener": 175, "enter_result": 175, "ignore_except": 175, "process_fil": 175, "file_or_path": 175, "send_http": 175, "aiohttp": 175, "clientsess": 175, "somefil": [175, 211, 237, 299, 337, 384], "someotherfil": 175, "new_target": [175, 376], "mycontext": 175, "contextbaseclass": 175, "close_fil": 175, "need_special_resourc": 175, "acquire_special_resourc": 175, "release_special_resourc": 175, "acquisit": [175, 222, 273, 370, 477, 485], "resourcemanag": 175, "check_resource_ok": 175, "_cleanup_on_error": 175, "exc_detail": 175, "cleanup_need": 175, "perform_oper": 175, "cleanup_resourc": 175, "cb": [175, 267], "track_entry_and_exit": [175, 477], "exc_tb": [175, 339, 351], "load_widget": [175, 477], "singleus": 175, "write_to_stream": 175, "outer_stack": 175, "inner_stack": 175, "bleed": 176, "client_addr_var": 176, "client_addr": 176, "render_goodby": 176, "8081": 176, "memo": [177, 305, 306, 435, 481, 485], "copied_list": 177, "original_list": 177, "__copy__": [177, 485], "__deepcopy__": 177, "constructor_ob": 178, "pickle_c": 178, "des": [179, 316, 430], "crack": 179, "salt": [179, 242, 332, 432, 459, 477, 478, 485], "86": [179, 350, 352, 386, 388], "sha": [179, 242, 402, 471, 472, 476, 477, 478, 481, 485], "strongest": [179, 473], "blowfish": [179, 482, 485], "md5": [179, 242, 244, 255, 342, 347, 348, 402, 460, 471, 472, 473, 474, 477, 479, 483, 484, 485], "weakest": 179, "method_": 179, "perturb": 179, "999_999_999": 179, "5000": [179, 192], "2_147_483_648": 179, "exposur": [179, 478], "compare_hash": 179, "cryptedpasswd": 179, "cleartext": [179, 275], "plaintext": [179, 230, 255, 478], "4180": [181, 485], "csvfile": 181, "fmtparam": 181, "spamread": 181, "bake": [181, 325], "bean": [181, 325], "stringifi": [181, 385, 485], "spamwrit": 181, "new_limit": [181, 471], "restkey": 181, "restval": 181, "first_nam": [181, 325], "clees": [181, 417, 445, 483], "extrasact": 181, "putat": 181, "heurist": [181, 196, 204, 210, 232, 475, 477, 485], "recognis": [181, 274, 308, 337, 393, 425, 432, 485], "quote_": 181, "passwd": [181, 230, 302, 316, 366, 392, 399, 470, 471, 472], "someiter": 181, "unixpwd": 181, "linend": 181, "cdecl": 182, "stdcall": 182, "kernel32": [182, 359, 485], "libc": [182, 309, 460, 471, 485], "getmodulehandlea": 182, "myownfunct": 182, "239": 182, "_stdcallfuncptr": 182, "user32": 182, "getmodulehandl": 182, "hmodul": 182, "lpcstr": 182, "lpmodulenam": 182, "getmodulehandlew": 182, "lpcwstr": 182, "yapaxi": 182, "310": 182, "1150640792": 182, "0x1d000000": 182, "erron": [182, 298, 388, 413, 429, 466, 479, 480, 482, 484, 485], "_bool": [182, 354, 472], "__int64": 182, "140018365411392": 182, "65533": 182, "c_s": 182, "139966785747344": 182, "139966783348904": 182, "x00lo": 182, "c_buffer": 182, "c_string": 182, "bottl": [182, 472], "beer": [182, 485], "1234": [182, 192, 265, 319, 335, 351, 383, 402, 446, 472, 476, 480, 485], "140000": [182, 352], "_as_parameter_": 182, "200000": [182, 372], "37": [182, 252, 324, 351, 352, 386, 410, 455, 470, 473, 475, 476, 482, 483, 484, 485], "000000": [182, 189, 468], "typecheck": [182, 390], "strchr": 182, "8059983": 182, "validhandl": 182, "486539264": 182, "silli": [182, 298, 394], "126": [182, 265, 386, 483], "sscanf": 182, "1400001049": 182, "upperleft": 182, "lowerright": 182, "ofs": 182, "pragma": [182, 485], "bigendianunion": 182, "littleendianunion": 182, "first_16": 182, "second_16": 182, "tenpointsarraytyp": 182, "artifici": [182, 417, 479], "mystruct": [182, 289], "point_array": 182, "arr": [182, 289], "pt": 182, "teninteg": 182, "c_long_array_10": 182, "oor": 182, "scene": [182, 465], "lp_c_long": 182, "null_ptr": 182, "c_byte_array_4": 182, "c1": [182, 351], "c2": 182, "qsort": 182, "intarray5": 182, "ia": 182, "cmpfunc": 182, "py_cmp_func": 182, "cmp_func": 182, "pythonapi": [182, 471], "opt_flag": 182, "struct_frozen": 182, "frozent": 182, "_frozen_importlib": [182, 485], "31764": [182, 485], "_frozen_importlib_extern": [182, 485], "41499": 182, "__hello__": [182, 485], "161": 182, "__phello__": 182, "p1": [182, 267, 290, 355, 431, 470, 480], "hm": 182, "temp0": 182, "temp1": 182, "short_array": 182, "dylib": 182, "ldconfig": [182, 485], "objdump": 182, "ld_library_path": [182, 481, 485], "libbz2": 182, "agl": 182, "default_mod": 182, "use_errno": [182, 472], "use_last_error": [182, 472], "winmod": [182, 483], "dumpbin": 182, "manpag": [182, 299, 481, 485], "setlasterror": 182, "hijack": 182, "prefabr": 182, "dlltype": 182, "func_spec": 182, "paramflag": 182, "name_or_ordin": 182, "vtbl_index": 182, "iid": [182, 381, 485], "messageboxw": 182, "winuserapi": 182, "winapi": [182, 355, 425, 485], "hwnd": 182, "lptext": 182, "lpcaption": 182, "uint": 182, "utyp": 182, "wintyp": [182, 485], "caption": 182, "getwindowrect": 182, "lprect": 182, "obj_or_typ": 182, "init_or_s": 182, "_ctype": [182, 430, 460, 473, 482, 485], "lasterror": [182, 472], "enlarg": [182, 485], "writeabl": [182, 232, 264, 348, 355, 485], "wparam": 182, "dword": 182, "pnext": 182, "_u": 182, "lptdesc": 182, "typedesc": 182, "lpadesc": 182, "arraydesc": 182, "hreftyp": 182, "vt": [182, 184, 390, 439], "vartyp": 182, "td": [182, 189], "vt_ptr": 182, "some_typ": 182, "facto": [183, 250, 363, 398, 423], "a_norm": 183, "color_numb": 183, "a_": 183, "cup": 183, "cud": 183, "cud1": 183, "cuu1": 183, "cuu": 183, "vpa": 183, "cr": [183, 184, 215, 439, 482, 485], "confin": [183, 200], "bell": [183, 184, 374, 439, 471, 485], "key_mous": 183, "bstate": 183, "buttonn_press": 183, "buttonn_releas": 183, "buttonn_click": 183, "buttonn_double_click": 183, "buttonn_triple_click": 183, "button_shift": 183, "button_ctrl": 183, "button_alt": 183, "button5_": [183, 476, 485], "256color": [183, 485], "region": [183, 254, 284, 288, 290, 299, 325, 374, 381, 388, 444, 472, 475, 485], "fg": [183, 267, 351, 374, 381], "bg": [183, 374, 381, 388, 485], "nline": [183, 194], "ncol": 183, "deiniti": 183, "terminfo": 183, "elaps": [183, 275, 289, 299, 314, 335, 344, 370, 371, 477, 485], "msec": [183, 273, 372, 480], "availmask": 183, "oldmask": 183, "pminrow": 183, "pmincol": 183, "sminrow": 183, "smincol": 183, "smaxrow": 183, "smaxcol": 183, "vertic": [183, 184, 239, 303, 351, 352, 369, 374, 377, 379, 380, 381, 388, 431, 438, 439], "intr": 183, "susp": 183, "tput": 183, "putchar": 183, "capnam": 183, "4h": [183, 354], "breakout": 183, "newterm": 183, "subwindow": 183, "20190511": 183, "stuck": 183, "rs": [183, 184], "ts": [183, 239, 347, 388, 471], "bs": [183, 184, 439], "tl": 183, "bl": 183, "acs_vlin": 183, "acs_hlin": 183, "acs_urcorn": 183, "acs_llcorn": 183, "acs_lrcorn": 183, "vertch": 183, "horch": 183, "repaint": 183, "degrad": [183, 477, 485], "wrefresh": 183, "movement": [183, 243, 388, 472, 477, 485], "new_i": 183, "new_x": 183, "destwin": 183, "dminrow": 183, "dmincol": 183, "dmaxrow": 183, "dmaxcol": 183, "beg": 183, "rendit": 183, "__version__": [183, 252, 392, 478, 480, 484, 485], "a_altcharset": 183, "dim": 183, "a_invi": 183, "a_ital": [183, 485], "a_protect": 183, "a_horizont": 183, "a_left": 183, "a_low": 183, "a_right": 183, "a_top": 183, "a_vert": 183, "a_chartext": 183, "a_attribut": 183, "a_color": 183, "key_": 183, "keycap": 183, "key_min": 183, "key_break": 183, "key_down": 183, "arrow": [183, 254, 303, 380, 381, 388], "key_right": 183, "key_backspac": 183, "key_f0": 183, "key_fn": 183, "key_dl": 183, "key_il": 183, "key_dc": 183, "key_ic": 183, "key_eic": 183, "key_clear": 183, "key_eo": 183, "key_eol": 183, "key_sf": 183, "key_sr": 183, "key_npag": 183, "key_stab": 183, "key_ctab": 183, "key_catab": 183, "key_ent": 183, "key_sreset": 183, "key_reset": 183, "key_print": 183, "key_ll": 183, "key_a1": 183, "key_a3": 183, "key_b2": 183, "key_c1": 183, "key_c3": 183, "key_btab": 183, "key_beg": 183, "key_cancel": 183, "key_clos": 183, "key_command": 183, "key_copi": 183, "key_creat": 183, "key_end": 183, "key_exit": 183, "key_find": 183, "key_help": 183, "key_mark": 183, "key_messag": 183, "key_mov": 183, "key_next": 183, "key_open": 183, "key_opt": 183, "key_previ": 183, "key_redo": 183, "redo": [183, 254, 485], "key_refer": 183, "key_refresh": 183, "key_replac": 183, "key_restart": 183, "key_resum": 183, "key_sav": 183, "key_sbeg": 183, "key_scancel": 183, "key_scommand": 183, "key_scopi": 183, "key_screat": 183, "key_sdc": 183, "key_sdl": 183, "key_select": 183, "key_send": 183, "key_seol": 183, "key_sexit": 183, "key_sfind": 183, "key_shelp": 183, "key_shom": 183, "key_sic": 183, "key_sleft": 183, "key_smessag": 183, "key_smov": 183, "key_snext": 183, "key_sopt": 183, "key_sprevi": 183, "key_sprint": 183, "key_sredo": 183, "key_sreplac": 183, "key_sright": 183, "key_srsum": 183, "key_ssav": 183, "key_ssuspend": 183, "key_sundo": 183, "key_suspend": 183, "key_undo": 183, "key_res": 183, "key_max": 183, "key_f1": 183, "key_f2": 183, "key_f3": 183, "key_f4": 183, "twelv": [183, 381], "vt100": 183, "crude": 183, "acs": 183, "acs_bbss": 183, "acs_block": 183, "acs_board": 183, "acs_bsb": 183, "acs_bssb": 183, "acs_bsss": 183, "acs_bte": 183, "acs_bullet": 183, "bullet": 183, "acs_ckboard": 183, "stippl": 183, "acs_darrow": 183, "acs_degre": 183, "acs_diamond": 183, "acs_gequ": 183, "acs_lantern": 183, "lantern": 183, "acs_larrow": 183, "acs_lequ": 183, "acs_lte": 183, "acs_nequ": 183, "acs_pi": 183, "acs_plus": 183, "acs_rarrow": 183, "acs_rte": 183, "acs_s1": 183, "acs_s3": 183, "acs_s7": 183, "acs_s9": 183, "acs_sbb": 183, "acs_sbsb": 183, "acs_sbss": 183, "acs_ssbb": 183, "acs_ssb": 183, "acs_sssb": 183, "acs_ssss": 183, "crossov": 183, "acs_sterl": 183, "pound": [183, 196], "sterl": 183, "acs_tte": 183, "acs_uarrow": 183, "color_blu": 183, "color_cyan": 183, "greenish": 183, "color_green": 183, "color_magenta": 183, "purplish": 183, "color_yellow": 183, "bbedit": [183, 463], "framemak": 183, "uli": 183, "ulx": 183, "lri": 183, "lrx": 183, "land": [183, 295, 485], "soh": 184, "stx": 184, "etx": 184, "enq": 184, "enquiri": 184, "bel": [184, 439, 469, 470, 471, 472, 473, 477, 478], "ff": [184, 196, 232, 325, 439], "dle": 184, "dc1": 184, "xon": 184, "dc2": 184, "dc3": 184, "xoff": 184, "dc4": 184, "nak": 184, "syn": 184, "etb": 184, "em": [184, 325], "esc": 184, "gs": 184, "sp": [184, 242, 247], "mnemon": [184, 274, 348, 381, 468], "teleprint": 184, "0x1f": [184, 476], "0x7f": [184, 351], "thirti": [184, 322], "557": [187, 386, 482, 485], "inventoryitem": 187, "unit_pric": 187, "quantity_on_hand": 187, "total_cost": 187, "unsafe_hash": [187, 485], "match_arg": [187, 485], "dunder": [187, 439, 483, 485], "nonetheless": [187, 255], "class_or_inst": 187, "initvar": [187, 485], "dict_factori": [187, 347], "tuple_factori": 187, "cls_name": 187, "add_on": 187, "__post_init__": [187, 485], "forewarn": 187, "is_dataclass_inst": 187, "databasetyp": 187, "my_databas": 187, "intconversiondescriptor": 187, "_default": 187, "dateutil": [189, 485], "categor": [189, 298, 325, 404, 434], "polit": [189, 230, 466], "metr": 189, "mile": 189, "north": [189, 218, 381, 388, 473, 475, 485], "est": [189, 371, 477, 481], "edt": [189, 371, 478, 481], "29000": [189, 485], "29156": 189, "tiebreak": 189, "t1": [189, 192, 267, 390, 403], "t2": [189, 192, 267, 390, 403], "t3": [189, 192, 298], "uuuuuu": 189, "68400": 189, "delta1": 189, "delta2": 189, "270": [189, 388], "accuraci": [189, 267, 281, 314, 372, 448, 470, 485], "another_year": 189, "365": [189, 218, 348, 371], "84": [189, 267, 350, 481, 483, 485], "31536000": 189, "ten_year": 189, "3650": 189, "nine_year": 189, "3285": 189, "three_year": 189, "1095": [189, 294], "2038": [189, 371, 485], "date_str": 189, "yyyi": [189, 255], "dd": [189, 255, 267, 298], "2019": [189, 350, 452, 459, 483, 485], "date2": 189, "date1": 189, "comparand": 189, "yday": 189, "isocalendard": 189, "2007": [189, 374, 430, 472, 485], "my_birthday": 189, "time_to_birthday": 189, "730920": 189, "730920th": 189, "march": [189, 351, 371, 388, 455, 466, 470, 479], "70th": 189, "ic": [189, 354, 472], "tz": [189, 367, 371, 429, 485], "gettimeofday": [189, 371, 485], "formula": [189, 237, 351, 485], "hh": [189, 255, 371, 439], "fff": 189, "ffffff": [189, 388], "isopars": [189, 485], "2011": [189, 210, 348, 417, 430, 432, 459, 477], "04t00": 189, "283000": 189, "14400": 189, "datetime2": 189, "datetime1": 189, "astz": 189, "dt": [189, 216, 423, 429, 484], "magnitud": [189, 192, 268, 281, 351, 352, 413, 466, 478], "tm_isdst": [189, 371], "spill": 189, "utcfromtimetupl": 189, "timespec": [189, 481, 485], "ddthh": 189, "132263": 189, "18t15": 189, "08": [189, 216, 242, 252, 273, 348, 371, 429, 484, 485], "27t00": 189, "000100": 189, "25t00": 189, "01t12": 189, "79043": 189, "79060": 189, "tt": 189, "325": [189, 192, 471], "30pm": 189, "kabul": 189, "afghanistan": 189, "1945": 189, "thereaft": [189, 254, 272, 399], "kabultz": 189, "utc_move_d": 189, "1944": 189, "pep495": 189, "tz1": 189, "dt1": 189, "dt2": 189, "dt3": 189, "midnight": [189, 275, 472, 477, 480], "obscur": [189, 200, 393, 472, 479, 480, 482, 485], "13936": [189, 480, 485], "time_str": 189, "000384": 189, "123456": 189, "east": [189, 218, 371, 381, 388, 391, 444, 470], "west": [189, 218, 371, 381, 388, 444, 475], "geograph": 189, "dston": 189, "dstoff": 189, "america": [189, 429, 430, 473, 484], "york": 189, "straddl": 189, "dtoff": 189, "dtdst": 189, "tzinfo_exampl": 189, "_time": 189, "stdoffset": 189, "dstoffset": 189, "dstdiff": 189, "localtimezon": 189, "dst_diff": 189, "_isdst": 189, "first_sunday_on_or_aft": 189, "days_to_go": 189, "olson": [189, 485], "pytz": 189, "twinsun": 189, "2am": 189, "dststart_2007": 189, "dstend_2007": 189, "april": [189, 439, 466, 467], "octob": [189, 466, 468, 469, 472, 476, 483, 484], "dststart_1987_2006": 189, "dstend_1987_2006": 189, "1967": [189, 388, 473], "dststart_1967_1986": 189, "dstend_1967_1986": 189, "us_dst_rang": 189, "dststart": 189, "dstend": 189, "1966": 189, "ustimezon": 189, "reprnam": 189, "stdname": [189, 314], "dstname": [189, 338], "gap": [189, 275, 277, 477], "std_time": 189, "dst_time": 189, "cst": 189, "cdt": 189, "mountain": 189, "mst": 189, "mdt": 189, "pacif": [189, 429], "pst": [189, 429, 484], "pdt": [189, 429, 484], "0500": [189, 216], "2016": [189, 348, 450, 457, 465, 481, 482, 485], "u0": [189, 481], "mimic": [189, 261, 273, 385, 388, 473, 475, 485], "bring": [189, 254, 267, 352, 380, 393, 476, 479, 480, 483, 484, 485], "tzdata": [189, 429, 484, 485], "globe": 189, "civil": 189, "en_us": [189, 480], "mo": [189, 237, 325, 351, 469, 481, 483, 485], "de_d": [189, 272, 480], "sonntag": 189, "montag": 189, "samstag": 189, "dez": 189, "februari": [189, 371, 439, 467, 477], "decemb": [189, 439, 455, 468, 469, 474, 481], "januar": 189, "februar": 189, "dezemb": 189, "0002": 189, "2014": [189, 244, 348, 472, 473, 479, 485], "9998": [189, 481, 485], "000001": 189, "hhmm": [189, 255, 371], "0400": [189, 478], "1030": 189, "063415": 189, "030712": 189, "345216": 189, "002": [189, 314, 351], "1988": [189, 196, 363, 472], "di": [189, 471], "88": [189, 267, 350, 386, 480], "c89": [189, 472], "01t00": 189, "ja_jp": 189, "0330": 189, "japan": [189, 272], "jst": 189, "gent": 189, "oracl": [190, 347, 471, 478, 485], "prevail": [190, 434], "cabl": 190, "open_flag": 190, "unwritten": 190, "pag": 190, "bottleneck": [191, 233, 475], "school": [192, 350, 354, 469], "3000000000000003": 192, "5511151231257827e": 192, "017": 192, "customari": [192, 369, 459], "monetari": [192, 272, 471, 482, 485], "schoolbook": 192, "multiplicand": 192, "5600": 192, "prec": [192, 456, 470, 471, 472], "142857": [192, 200], "1428571428571428571428571429": [192, 470], "modest": [192, 485], "prejudic": 192, "unround": 192, "coeffici": [192, 281, 350, 351, 352, 469, 479, 485], "differenti": [192, 326, 399, 476, 477, 478, 481, 484, 485], "sticki": [192, 349, 381], "emin": [192, 478], "emax": [192, 478], "140000000000000124344978758017532527446746826171875": 192, "4142135623730951": 192, "414213562373095048801688724": 192, "1415926535": 192, "7182818285": 192, "85987": 192, "85988": 192, "1e9999999999999999999": 192, "circus": [192, 232, 443], "87": [192, 255, 350, 355], "5058": 192, "718281828459045235360287471": [192, 472], "302585092994045684017991455": 192, "myothercontext": 192, "142857142857142857142857142857142857142857142857142857142857": 192, "142857143": [192, 470], "143": [192, 255, 386, 388, 468], "355": [192, 228], "113": [192, 228, 453], "14159292": 192, "snan": [192, 473], "devan": 192, "gar": [192, 302], "fullwidth": 192, "uff10": 192, "uff19": 192, "lossless": [192, 196, 383, 432, 477], "100000000000000088817841970012523233890533447265625": [192, 475, 477], "00000": 192, "321e": 192, "157": [192, 481], "decimaltupl": 192, "unequ": [192, 302, 351, 432, 434, 470, 471, 474, 478, 485], "compli": [192, 268, 277, 320, 430, 472, 485], "561702493119680037517373933e": 192, "139": [192, 386, 468], "0x1": [192, 351, 448, 472, 475, 476], "999999999999ap": 192, "1000000000000000055511151231257827021181583404541015625": [192, 448, 473], "fuse": 192, "closest": [192, 228, 232, 281, 431, 472, 473], "0e0": [192, 439], "321000e": 192, "41421356": 192, "123e": 192, "23e": 192, "calculate_someth": 192, "halt": [192, 219, 298, 302, 392, 479], "02e": 192, "weaker": [192, 467], "999": [192, 290], "23e999": 192, "23000e": 192, "4445": 192, "0023": 192, "recount": 192, "qnan": 192, "msd": 192, "scientif": [192, 350, 352, 458, 465, 472], "425000000": [192, 478], "999999999999999999": [192, 478], "849999999": 192, "1999999999999999997": 192, "inward": 192, "outward": 192, "stricter": [192, 393, 466, 467, 471, 478, 480, 482, 485], "amplifi": 192, "breakdown": 192, "seminumer": 192, "11111113": 192, "11111111": [192, 351], "51111111": 192, "5111111": 192, "20000": [192, 372], "0000003": 192, "0060000": 192, "affin": 192, "indetermin": [192, 381, 404, 412], "854": [192, 364], "0e": 192, "1000026": 192, "interf": [192, 289, 372, 434, 479], "applicationwid": 192, "moneyfmt": 192, "curr": 192, "dp": [192, 485], "trailneg": 192, "money": [192, 355], "1234567": [192, 456, 475], "8901": [192, 484, 485], "568": 192, "123456789": 192, "141592653589793238462643383": 192, "na": [192, 302, 332, 467, 476, 483, 484, 485], "da": [192, 267, 325], "389056098930650227230427461": 192, "38905609893": 192, "0j": [192, 232, 351, 423, 485], "taylor": [192, 472, 485], "8775825618903727161162815826": 192, "87758256189": 192, "4794255386042030002732879352": 192, "479425538604": 192, "twoplac": 192, "214": 192, "72": [192, 254, 267, 350, 388, 470, 471, 485], "105": [192, 350], "4314": 192, "62": [192, 245, 247, 386], "2e2": 192, "2e": [192, 485], "remove_expon": 192, "5e": [192, 354], "141592653589793115997963468544185161590576171875": 192, "spurious": [192, 302, 339, 475, 485], "anomali": 192, "ill": [192, 310, 477, 482, 485], "104": [192, 350, 477, 483, 484], "23456789": 192, "2345678": 192, "2345": 192, "pypy3": 192, "karatsuba": [192, 469], "bignum": [192, 351, 478], "904625697166532776746648320380374280103671755200316906558262375061821325312": 192, "overalloc": [192, 351, 483, 485], "8gb": 192, "500mb": 192, "maxdigit": [192, 359], "524288112": 192, "tighter": [192, 431, 470, 478], "pythondevmod": [194, 459, 482], "269": 194, "unclos": [194, 254, 347, 383, 476, 477, 481, 485], "18748": [194, 483, 485], "modal": [195, 375, 378], "initialdir": 195, "initialfil": 195, "defaultextens": 195, "mustexist": 195, "dir_or_fil": 195, "ratcliff": 196, "obershelp": 196, "gestalt": 196, "longest": [196, 243, 265, 267, 300, 439, 468, 471, 480], "cubic": 196, "autojunk": 196, "intralin": 196, "inter": [196, 266, 339, 390, 477], "intra": 196, "wrapcolumn": 196, "linejunk": 196, "charjunk": 196, "fromlin": 196, "tolin": 196, "fromdesc": 196, "todesc": 196, "numlin": 196, "hyperlink": [196, 485], "fromfiled": 196, "tofiled": 196, "lineterm": 196, "eggi": 196, "hamster": 196, "cutoff": [196, 485], "appel": 196, "ape": 196, "peach": 196, "puppi": 196, "pineappl": 196, "constitut": [196, 265, 337, 476, 485], "nois": [196, 298, 299, 350, 485], "ntwo": 196, "nthree": 196, "ntree": 196, "nemu": 196, "emu": 196, "dfunc": 196, "metzen": 196, "dr": [196, 230, 369, 477], "dobb": 196, "journal": 196, "isjunk": 196, "synch": 196, "bjunk": [196, 479], "bpopular": [196, 479], "b2j": 196, "alo": 196, "ahi": 196, "blo": 196, "bhi": 196, "abxcd": 196, "j1": [196, 464, 485], "j2": 196, "qabxcd": 196, "abycdf": 196, "cluster": [196, 232, 344, 350, 459, 472], "tide": [196, 380], "diet": 196, "bcde": [196, 267, 473], "volatil": [196, 290, 485], "text1": 196, "text2": 196, "flat": [196, 208, 211, 374, 381, 416], "interlin": 196, "file_mtim": 196, "fromdat": 196, "todat": 196, "tf": [196, 477], "vms": [197, 298, 478, 479], "alist": [197, 310, 432], "load_glob": [197, 483, 485], "load_fast": [197, 479], "current_offset": [197, 479], "analys": 197, "lasti": 197, "co_lin": [197, 476], "co_firstlineno": [197, 261, 432, 485], "co_lnotab": [197, 261, 432, 476, 481, 485], "oparg": [197, 485], "nop": [197, 364, 445, 485], "pop_top": 197, "tos": [197, 216, 476, 485], "rot_two": 197, "rot_thre": 197, "rot_four": [197, 483, 485], "dup_top": 197, "dup_top_two": 197, "unary_posit": 197, "unary_neg": 197, "unary_not": 197, "unary_invert": 197, "get_it": 197, "get_yield_from_it": [197, 485], "tos1": 197, "binary_pow": 197, "binary_multipli": [197, 477], "binary_matrix_multipli": 197, "binary_floor_divid": [197, 477], "binary_true_divid": 197, "binary_modulo": [197, 477], "binary_add": [197, 477, 479], "binary_subtract": 197, "binary_subscr": 197, "binary_lshift": 197, "binary_rshift": 197, "binary_and": 197, "binary_xor": 197, "binary_or": 197, "inplace_pow": 197, "inplace_multipli": 197, "inplace_matrix_multipli": 197, "inplace_floor_divid": 197, "inplace_true_divid": 197, "inplace_modulo": 197, "inplace_add": 197, "inplace_subtract": 197, "inplace_lshift": 197, "inplace_rshift": 197, "inplace_and": 197, "inplace_xor": 197, "inplace_or": 197, "store_subscr": 197, "tos2": 197, "delete_subscr": 197, "get_await": 197, "get_ait": 197, "get_anext": 197, "end_async_for": [197, 483, 485], "before_async_with": 197, "setup_async_with": 197, "print_expr": 197, "set_add": 197, "list_append": [197, 470], "map_add": [197, 483], "yield_valu": 197, "yield_from": [197, 434, 485], "subiter": [197, 434, 478], "setup_annot": [197, 481], "import_star": 197, "pop_block": 197, "pop_except": 197, "f_lasti": [197, 261, 432, 469, 476, 485], "with_except_start": [197, 485], "context_manag": 197, "load_assertion_error": [197, 484], "load_build_class": 197, "__build_class__": [197, 454, 485], "setup_with": 197, "store_fast": 197, "store_nam": [197, 348], "unpack_sequ": 197, "copy_dict_without_key": 197, "get_len": 197, "match_map": 197, "match_sequ": 197, "match_key": 197, "namei": 197, "co_nam": [197, 261, 432, 480, 485], "store_glob": 197, "delete_nam": 197, "unpack_ex": 197, "leftov": [197, 298], "store_attr": 197, "delete_attr": 197, "delete_glob": 197, "load_const": [197, 477, 479], "consti": 197, "co_const": [197, 261, 432, 485], "load_nam": [197, 477], "build_tupl": 197, "build_list": 197, "build_set": 197, "build_map": [197, 485], "tos3": 197, "build_const_key_map": [197, 481, 485], "build_str": [197, 481, 485], "list_to_tupl": [197, 485], "list_extend": [197, 485], "set_upd": [197, 485], "dict_upd": [197, 485], "dict_merg": [197, 485], "load_attr": [197, 476, 485], "compare_op": [197, 477, 484, 485], "is_op": [197, 484, 485], "contains_op": [197, 484, 485], "import_nam": [197, 435], "import_from": [197, 435], "jump_forward": [197, 485], "pop_jump_if_tru": 197, "pop_jump_if_fals": [197, 477], "jump_if_not_exc_match": [197, 484, 485], "jump_if_true_or_pop": 197, "jump_if_false_or_pop": 197, "jump_absolut": [197, 485], "for_it": 197, "setup_fin": 197, "var_num": 197, "co_varnam": [197, 261, 432], "delete_fast": 197, "load_closur": 197, "co_cellvar": [197, 261, 432], "co_freevar": [197, 261, 432], "load_deref": 197, "load_classderef": [197, 479], "store_deref": [197, 485], "delete_deref": 197, "raise_vararg": 197, "call_function_kw": [197, 481], "call_function_ex": [197, 481, 485], "load_method": [197, 482, 485], "call_method": [197, 482, 485], "make_funct": [197, 476, 481, 485], "0x02": [197, 481], "0x08": [197, 432], "build_slic": 197, "extended_arg": [197, 485], "format_valu": [197, 481, 485], "fmt_spec": 197, "match_class": 197, "gen_start": [197, 485], "rot_n": 197, "have_argu": 197, "plugin": [199, 481], "prebuild": 199, "expositori": 200, "265252859812191058636308480000000": 200, "ridicul": 200, "1e100": [200, 281, 434, 439], "1e300": 200, "test_doctest": [200, 485], "giant": 200, "720": [200, 477, 483], "__test__": 200, "blanklin": [200, 470], "trial": [200, 324, 350, 372, 469], "crumb": 200, "your_dict": 200, "rapid": [200, 314, 483, 485], "verbatim": [200, 355, 413], "ndetail": 200, "transcript": 200, "oop": [200, 447], "mismatch": [200, 220, 223, 273, 325, 340, 348, 417, 431, 467, 469, 471, 473, 480, 485], "my_flag": 200, "directive_opt": 200, "on_or_off": 200, "directive_option_nam": 200, "hermion": 200, "harri": [200, 471], "7948648": 200, "0x00ac18f0": 200, "14285714285714285": [200, 450], "safer": [200, 305, 306, 469, 470, 485], "142857142857": 200, "contriv": 200, "utter": [200, 474], "module_rel": 200, "optionflag": [200, 367], "extraglob": 200, "raise_on_error": 200, "failure_count": [200, 367], "test_count": [200, 367], "slate": [200, 436, 476, 479, 480, 485], "mortem": [200, 303, 359, 444], "exclude_empti": 200, "nonam": [200, 426], "compileflag": 200, "systemat": [200, 485], "my_module_with_doctest": 200, "tear": [200, 392], "test_find": 200, "doctestcas": 200, "docfilecas": 200, "runtest": [200, 392], "revolv": 200, "testrunn": [200, 392], "clear_glob": 200, "report_": 200, "cont": 200, "sketch": [200, 250, 445, 471, 472, 476], "grown": [200, 334], "amaz": [200, 468], "skimp": 200, "prose": 200, "attitud": 200, "coher": 200, "narrat": 200, "blur": [200, 267], "_regrtest_top": 200, "2821": 201, "5322": [201, 203, 206, 208, 210, 212, 214, 215, 342], "6532": [201, 212, 214, 215, 480, 482, 485], "2046": [201, 204, 209], "2047": [201, 209, 210, 215, 216, 242, 477], "2183": [201, 203, 212, 485], "2231": [201, 203, 209, 212, 216], "subcompon": 201, "forego": [201, 430], "promot": [201, 243, 430, 472, 485], "default_charset": 202, "impos": [202, 268, 299, 300, 305, 327, 328, 351, 390, 438, 459], "outright": 202, "qp": 202, "7bit": [202, 204, 205, 208, 210, 215, 277, 477, 478, 485], "maxlength": [202, 289], "header_enc": 202, "body_enc": 202, "codecnam": 202, "philosophi": [203, 474], "rfc822": [203, 204, 211, 212, 213, 214, 255, 468, 470], "envelop": [203, 208, 212, 214, 255, 277, 341, 342, 485], "from_": [203, 277, 381, 485], "unixfrom": [203, 208, 212, 479, 485], "maxheaderlen": [203, 208, 212, 479], "invalidbase64paddingdefect": [203, 206], "invalidbase64charactersdefect": [203, 206], "8bit": [203, 204, 205, 208, 209, 210, 214, 215, 477, 478], "2822": [203, 209, 216, 249, 252, 277, 371, 455, 468], "contravent": 203, "mymessag": [203, 212], "extant": [203, 212, 485], "roolz": [203, 212], "failobj": [203, 212], "_param": [203, 212, 213, 411], "disposit": [203, 204, 210, 212, 255, 299, 339, 404, 411, 480], "bud": [203, 212, 411], "fu": [203, 212], "baller": [203, 212], "ppt": [203, 212], "dfballer": 203, "subpart": [203, 205, 206, 208, 211, 212, 213, 214], "rawparam": 203, "requot": [203, 212], "make_": 203, "add_": [203, 204], "deliveri": [203, 207, 212, 214, 277, 299, 339, 344, 485], "armor": [203, 212], "typ": [204, 255, 390], "typekey": 204, "cid": [204, 207, 344], "headernam": 204, "headervalu": 204, "_subtyp": [205, 213], "_charset": [205, 213, 237, 485], "unprint": 205, "drawback": [205, 298, 482], "add_payload": 206, "messagedefect": 206, "noboundaryinmultipartdefect": 206, "startboundarynotfounddefect": 206, "closeboundarynotfounddefect": 206, "firstheaderlineiscontinuationdefect": 206, "misplacedenvelopeheaderdefect": 206, "missingheaderbodyseparatordefect": 206, "malformedheaderdefect": 206, "multipartinvariantviolationdefect": [206, 214], "invalidbase64lengthdefect": 206, "invaliddatedefect": 206, "messagefil": 207, "uncommon": [207, 471, 485], "someone_els": 207, "reunion": 207, "pngfile": 207, "img_data": 207, "msgfile": 207, "sanit": [207, 460, 485], "03d": [207, 273, 351], "ayon": 207, "asperg": 207, "pour": 207, "jeuner": 207, "pew": 207, "pepe": 207, "penelop": 207, "pussycat": 207, "fabrett": 207, "salut": 207, "cela": 207, "ressembl": 207, "yumm": 207, "roast": 207, "asparagus": 207, "epicuri": 207, "203718": 207, "asparagus_cid": 207, "href": [207, 245, 247, 249, 417, 473], "img": [207, 247], "peel": 207, "jpg": [207, 264, 300, 423, 456, 471], "jpeg": [207, 256, 374, 450, 472], "magic_html_pars": 207, "html_text": 207, "partfil": 207, "preview": [207, 485], "useless": [207, 230, 393, 415, 476, 483, 485], "preferencelist": [207, 212], "ans": 207, "richest": 207, "matthew": [207, 479, 485], "dixon": 207, "cowl": 207, "necess": [208, 485], "smime": 208, "outfp": 208, "refold": [208, 215, 478], "rewrap": [208, 233], "manheaderlen": 208, "craft": [208, 305, 436, 477, 485], "amessag": 208, "transfer_encod": 208, "part_info": 208, "_mangle_from_": 208, "worldwid": [209, 242], "slew": 209, "xf6stal": 209, "f6stal": 209, "maxlinelen": 209, "header_nam": [209, 399, 411], "continuation_w": 209, "splitchar": 209, "decoded_str": 209, "decoded_seq": 209, "headerdefect": 210, "_myattr": 210, "myattr": 210, "unstructur": 210, "wild": [210, 440, 466, 485], "uniqueunstructuredhead": 210, "supplement": [210, 220, 234, 299, 472, 479, 485], "base_class": 210, "default_class": 210, "use_default_map": 210, "uniquedatehead": 210, "resent": [210, 216, 277, 342], "orig": [210, 400], "uniquesingleaddresshead": 210, "uniqueaddresshead": 210, "bcc": [210, 342], "contenttransferencodinghead": 210, "messageidhead": 210, "5321": [210, 341, 478], "include_default": 211, "6531": [212, 215, 341, 342, 480, 485], "ordinarili": [213, 337], "dice": 213, "_maintyp": 213, "nonmultipart": [213, 485], "_subpart": 213, "_data": [213, 233], "_encod": 213, "_audiodata": 213, "_imagedata": 213, "_msg": 213, "_text": 213, "cloth": 214, "conduc": 214, "_factori": 214, "stitch": 214, "fed": [214, 242, 247, 289, 320, 417, 471], "_class": 214, "headerson": 214, "mybyt": 214, "edness": 214, "dispar": 215, "settabl": [215, 254, 404, 466, 468, 485], "mymsg": [215, 479], "compat_smtp": 215, "compat_strict": 215, "compat_strict_smtp": 215, "commut": 215, "policy100": 215, "policy80": 215, "apolici": 215, "78": [215, 290, 478, 485], "disciplin": 215, "sourcelin": 215, "unfold": 215, "stype": 215, "rejoin": 215, "refold_head": 215, "traffic": [215, 344, 348, 350, 468, 477, 485], "somepolici": 215, "isdst": 216, "summer": [216, 232, 371, 471, 472], "divin": 216, "idstr": 216, "strengthen": [216, 485], "constitu": [216, 259, 414], "realnam": 216, "email_address": 216, "fieldvalu": 216, "ccs": [216, 348], "resent_to": 216, "resent_cc": 216, "all_recipi": 216, "mailer": 216, "greenwich": [216, 371], "timev": [216, 485], "usegmt": 216, "fallback_charset": 216, "rational": [217, 220, 242, 299, 334, 335, 339, 344, 371, 406, 432, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 483, 485], "pipx": [217, 473, 479], "altinstal": [217, 460, 464, 473, 477, 479], "default_pip": 217, "upper_cas": [218, 485], "unimport": 218, "nomenclatur": [218, 359], "vanilla": [218, 466], "chocol": 218, "mint": 218, "delici": 218, "granni": 218, "smith": [218, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "alias_for_squar": 218, "__members__": [218, 468, 474], "_generate_next_value_": [218, 485], "autonam": 218, "mood": 218, "favorite_mood": 218, "_ignore_": [218, 482, 485], "enumnam": 218, "morecolor": 218, "pink": [218, 388], "some_behavior": 218, "test_enum": 218, "fruit": [218, 313, 432, 446], "tomato": [218, 347], "somedata": [218, 310], "newenumnam": 218, "chartreus": 218, "sea_green": 218, "rosemari": 218, "rwx": [218, 338], "strenum": [218, 485], "_value_": 218, "px": [218, 281], "km": [218, 350], "vx": 218, "vy": 218, "renumb": [218, 255, 432], "novalu": 218, "autonumb": 218, "swatch": 218, "panton": 218, "auburn": 218, "3497": 218, "1246": 218, "bleached_cor": 218, "grene": 218, "mercuri": [218, 477, 479, 485], "303e": 218, "4397e6": 218, "venus": [218, 445], "869e": 218, "0518e6": 218, "earth": [218, 347, 445], "976e": 218, "37814e6": 218, "421e": 218, "3972e6": 218, "jupit": 218, "9e": 218, "1492e7": 218, "saturn": 218, "688e": 218, "0268e7": 218, "uranus": 218, "686e": 218, "5559e7": 218, "neptun": 218, "024e": 218, "4746e7": 218, "kilogram": 218, "surface_grav": 218, "gravit": [218, 388], "m3": [218, 371], "kg": 218, "67300e": 218, "6378140": 218, "802652743337129": 218, "367": 218, "day_": 218, "day_0": 218, "day_1": [218, 272], "day_365": 218, "day_366": 218, "enummeta": [218, 432, 485], "some_enum_var": 218, "member_nam": 218, "_name_": 218, "_missing_": [218, 485], "_order_": [218, 485], "enumclass": [218, 485], "fieldtyp": 218, "typewrit": 219, "csi": 219, "anod": 219, "advertis": [219, 294, 341, 342, 348, 430, 472, 479, 480, 483], "srmount": 219, "multihop": 219, "rfs": 219, "stale": [219, 258, 479, 485], "xenix": 219, "new_exc": 220, "original_exc": 220, "3134": [220, 474], "someexcept": [220, 392, 474], "unpredict": [220, 277, 299, 348, 417, 420, 432, 459, 468], "rescu": 220, "unqualifi": [220, 355, 444, 479, 485], "perror": 220, "abandon": [220, 374, 419, 477], "dubious": [220, 404, 485], "apport": 221, "sigaltstack": [221, 485], "catastroph": [221, 477, 485], "all_thread": 221, "watchdog": 221, "0x00007fb899f39700": [221, 478], "f_add_seal": 222, "f_get_seal": 222, "f_seal_": 222, "f_getpath": [222, 485], "f_ofd_getlk": [222, 484, 485], "f_ofd_setlk": [222, 484, 485], "f_ofd_setlkw": [222, 484, 485], "f_getpipe_sz": [222, 485], "f_setpipe_sz": [222, 485], "mutate_flag": 222, "simplif": [222, 485], "13341": 222, "tiocgpgrp": 222, "lock_un": 222, "lock_sh": 222, "lock_ex": 222, "lock_nb": 222, "svr4": 222, "f_setfl": 222, "lockdata": 222, "hhllhh": 222, "f_wrlck": 222, "f_setlkw": 222, "dir1": 223, "dir2": 223, "mydircmp": 223, "print_diff_fil": 223, "dcmp": 223, "sub_dcmp": 223, "openhook": [225, 471, 485], "bak": 225, "fi": [225, 232], "reobj": 227, "other_fract": 228, "414213": 228, "1414213": 228, "125": [228, 448, 450, 453, 472], "7e": 228, "2476979795053773": [228, 477], "2251799813685248": [228, 477], "flt": 228, "max_denomin": 228, "1415926535897932": 228, "4503599627370497": 228, "9007199254740992": 228, "greatest": [228, 281, 351], "ndigit": [228, 232, 432, 485], "959": 230, "2640": [230, 484, 485], "1176": 230, "1063": 230, "sr": 230, "226": [230, 248], "221": 230, "acct": 230, "source_address": [230, 249, 342, 344, 473, 477, 478], "ftp1": [230, 477], "proftpd": [230, 477], "154": [230, 290, 386, 470, 477], "cento": [230, 477, 482, 485], "fedora": [230, 359, 460, 464, 476, 477, 484, 485], "keyfil": [230, 255, 275, 287, 311, 342, 348, 466, 481, 485], "certfil": [230, 255, 311, 342, 348, 466, 481, 485], "4217": 230, "pem": [230, 255, 311, 342, 348, 464, 479, 485], "ftps": [230, 348], "pureftpd": 230, "6jack": 230, "antilink": 230, "blogbench": 230, "bsdcam": 230, "clockspe": 230, "djbdns": 230, "jedi": 230, "eacceler": 230, "favicon": 230, "ico": [230, 485], "francoton": 230, "fugu": 230, "libpuzzl": 230, "metalog": 230, "minidentd": 230, "udf": [230, 485], "php": [230, 423, 466, 468], "jenkin": [230, 392], "skein": [230, 242], "webdav": [230, 248], "phpaudit": 230, "phpbench": 230, "pincast": 230, "ping": [230, 466, 467, 468, 471], "posto": 230, "public_key": 230, "ftpd": 230, "qscan": 230, "qtc": 230, "shared": 230, "skycach": 230, "ucarp": 230, "499": [230, 294], "disclaim": [230, 294, 356, 405, 430], "stor": 230, "eprt": 230, "epsv": 230, "pasv": [230, 485], "3659": 230, "fromnam": 230, "tonam": 230, "unilater": 230, "nat": [230, 344, 478], "async_iter": 232, "0b11": 232, "0b1010": [232, 474], "0b1110": 232, "1110": 232, "dont_inherit": [232, 479], "pycf_": 232, "__initializing__": 232, "_clearcach": 232, "perimet": 232, "season": 232, "floatnumb": [232, 434, 439], "numeric_valu": 232, "003": [232, 432, 450, 459], "1e6": 232, "0x2a": [232, 352], "010": [232, 267], "classinfo": 232, "mydata": [232, 370, 415, 456, 477], "process_block": 232, "iterat": 232, "keyfunc": [232, 267], "0o70": 232, "0o12": 232, "nnn": [232, 247, 399], "untransl": [232, 264], "somedir": 232, "spamspam": 232, "3j": [232, 295, 473], "inv_bas": 232, "_x": [232, 265, 472, 481], "_voltag": 232, "675": 232, "salari": [232, 351, 444], "suffic": [232, 301, 347], "regular_funct": 232, "type2": [232, 390], "spice": 232, "transpos": [232, 446, 470], "fo": [232, 235, 468], "x2": [232, 434, 445, 476], "attain": 232, "till": [232, 289, 314, 348, 364, 484, 485], "saus": 232, "_temp": 232, "pythoncaseok": [232, 459, 467, 484, 485], "user_funct": 233, "evict": 233, "3628800": 233, "479001600": 233, "sequence_of_numb": [233, 483], "count_vowel": 233, "vowel": 233, "aeiouaeiou": 233, "cache_paramet": [233, 485], "cache_info": [233, 477], "currsiz": [233, 477], "cache_clear": [233, 477], "predictor": 233, "impur": 233, "get_pep": 233, "290": 233, "320": [233, 392], "9991": 233, "cacheinfo": [233, 477], "fib": [233, 445, 454], "377": [233, 445, 453, 454], "610": [233, 445, 453, 454], "_is_valid_operand": 233, "lastnam": [233, 347, 477, 483], "firstnam": [233, 347, 477], "unrecognis": [233, 274, 478], "farg": 233, "fkeyword": 233, "newkeyword": 233, "basetwo": 233, "10010": 233, "_aliv": 233, "set_stat": 233, "set_dead": 233, "strength": [233, 350], "eh": 233, "fun_num": 233, "615": [233, 429, 484, 485], "0x1035a2840": 233, "0x103fe0000": 233, "dict_key": [233, 473, 485], "wrapper_assign": 233, "wrapper_upd": 233, "17482": 233, "my_decor": [233, 471], "uncollect": [234, 477, 485], "threshold0": 234, "threshold1": 234, "threshold2": 234, "sweep": [234, 471], "youngest": 234, "count0": 234, "count1": 234, "count2": 234, "referr": 234, "lazarus": 234, "unfamiliar": [235, 273, 298, 471, 472], "shortopt": 235, "longopt": 235, "frob": [235, 394], "posixly_correct": 235, "cfoo": 235, "optlist": 235, "ho": [235, 485], "lname": 236, "i18n": [237, 352, 466, 473, 485], "l10n": [237, 466], "monolingu": 237, "localedir": 237, "po": [237, 473], "unimpl": [237, 250], "myapplic": 237, "class_": 237, "_info": 237, "_fallback": 237, "albeit": 237, "gnome": [237, 350, 470, 478], "jame": [237, 427, 430, 466, 469, 471, 473, 482, 485], "henstridg": [237, 466, 473], "mylog": [237, 475, 477], "xgettext": [237, 485], "babel": 237, "pybabel": 237, "fran": [237, 478, 479, 480], "ois": [237, 478, 479, 480], "pinard": 237, "xpot": 237, "pygettext": [237, 480, 485], "msgfmt": [237, 473], "lang1": 237, "lang2": 237, "fr": [237, 277, 324, 439, 469, 482], "lang3": 237, "language1": 237, "mollusk": 237, "albatross": 237, "rat": 237, "penguin": [237, 431], "n_": 237, "teach": [237, 347, 468, 483], "markthisstringfortransl": 237, "funk": [237, 466], "juan": [237, 473], "ib": 237, "ez": 237, "palomar": 237, "barri": [237, 466, 467, 468, 470, 471, 472, 477, 478, 479, 480, 481, 482, 483, 485], "warsaw": [237, 466, 467, 468, 470, 471, 472, 477, 478, 479, 480, 482, 483, 485], "gustavo": [237, 468, 469, 470, 471, 485], "niemey": [237, 468, 469, 470, 471], "concert": [238, 476, 477], "subshel": [238, 299], "inordin": [238, 302], "unc": [238, 299, 300, 302, 426, 485], "sharepoint": [238, 300, 426], "quo": 238, "vadi": 238, "card": [238, 301, 324, 325, 440], "topolog": [239, 469, 484, 485], "vertex": [239, 388], "acycl": 239, "topological_sort": 239, "task_queu": [239, 289], "finalized_tasks_queu": 239, "successor": 239, "node_group": 239, "ts2": 239, "gr_name": [240, 469], "gr_passwd": 240, "gr_gid": [240, 355, 469], "gr_mem": 240, "yp": 240, "discern": 241, "slowest": [241, 367, 388, 428, 485], "unseek": [241, 405, 426, 477, 479, 480, 485], "file_cont": [241, 276], "f_in": 241, "f_out": 241, "s_in": 241, "s_out": 241, "fip": [242, 485], "sha1": [242, 460, 471, 473, 477, 485], "sha224": [242, 471, 473, 477], "sha256": [242, 259, 344, 348, 460, 471, 473, 477, 485], "sha384": [242, 348, 471, 473, 477], "sha512": [242, 460, 471, 473, 477, 485], "rsa": [242, 348, 430, 476, 485], "1321": 242, "sha3_224": [242, 481], "sha3_256": [242, 481], "sha3_384": [242, 481], "sha3_512": [242, 481, 485], "shake_128": [242, 481], "shake_256": [242, 481], "sha3": [242, 460, 484, 485], "keccak": [242, 481], "usedforsecur": [242, 333, 485], "insecur": [242, 292, 333, 336, 347, 348, 471, 477, 485], "spammish": 242, "x03": [242, 344, 351, 354, 402], "x1e": [242, 351], "xdd": 242, "ae": 242, "x15": [242, 354], "x93": 242, "xc5": 242, "xfe": 242, "x00o": 242, "xa5u": 242, "xfd": 242, "xf7": 242, "xbcn": 242, "x84": [242, 472], "xa6": 242, "xaf": [242, 472], "x0c": [242, 351, 402], "x95": 242, "x0fk": 242, "x06": [242, 402], "a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2": 242, "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 242, "upstream": [242, 341, 483, 485], "incept": 242, "length_in_bit": 242, "stretch": [242, 254, 381, 388, 414, 482], "brute": 242, "tunabl": [242, 299, 477], "hash_nam": 242, "dklen": 242, "pkcs": [242, 348, 479, 485], "pseudorandom": [242, 324, 348], "appendix": 242, "nist": [242, 469], "132": 242, "stackexchang": 242, "pbkdf2": [242, 476], "our_app_it": 242, "500_000": [242, 351], "dk": 242, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 242, "maxmem": 242, "7914": 242, "mib": [242, 276, 289, 338, 483, 485], "7693": 242, "fanout": 242, "leaf_siz": [242, 485], "node_offset": [242, 485], "node_depth": 242, "inner_s": 242, "last_nod": 242, "leaf": [242, 299, 382, 390, 485], "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 242, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 242, "6fa1d8fcfd719046d762": 242, "eb6ec15daf9546254f0809": 242, "1bf21a98c78a1c376ae9": 242, "567004bf96e4a25773ebf4": 242, "indifferenti": 242, "3d363ff7401e02026f4a4687d4863c": 242, "symmetr": [242, 290, 348, 351, 432, 434, 466, 468, 469, 470, 478, 485], "tamper": [242, 305], "secret_key": 242, "auth_siz": 242, "good_sig": 242, "alic": 242, "43b3c982cf697e0c5ab22172d1ca7421": 242, "bob": [242, 289, 463, 471, 472, 473, 475, 478], "0102030405060708090a0b0c0d0e0f00": 242, "digestmod": [242, 244, 479, 483, 485], "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 242, "signer": 242, "likelihood": [242, 350, 483], "106": [242, 267, 350, 468], "salt1": 242, "salt2": 242, "h2": [242, 249, 274, 415], "summarili": 242, "files_hash_person": 242, "block_hash_person": 242, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 242, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 242, "orig_key": 242, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 242, "khy6h21km": 242, "enc_key": 242, "kencrypt": 242, "mac_key": 242, "kmac": 242, "rbpb15s": 242, "z9t": 242, "agffno5wuhb77vbri6f9iv2qixu7whw": 242, "g9gthfe1yluxy1zwplyk1": 242, "nwfu0wseb0krcjhdep": 242, "h00": 242, "h01": 242, "h10": 242, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 242, "jean": [242, 430, 472, 473, 478], "philipp": [242, 430, 471, 476, 485], "aumasson": [242, 430], "samuel": [242, 344, 430, 469, 471, 481, 484, 485], "neve": [242, 430, 481], "zooko": [242, 430], "wilcox": 242, "hearn": 242, "christian": [242, 430, 466, 470, 472, 476, 478, 479, 481, 482, 483, 484, 485], "winnerlein": 242, "finalist": 242, "henzen": 242, "willi": 242, "meier": 242, "raphael": 242, "phan": 242, "chacha": 242, "daniel": [242, 469, 472, 473, 476, 477, 479, 480, 481, 485], "bernstein": [242, 430, 472, 485], "pyblake2": 242, "dmitri": [242, 470, 480, 481, 485], "chestnykh": [242, 481], "heim": [242, 430, 472, 476, 478, 479, 481, 482, 483, 484, 485], "neighbor": [242, 417, 468, 469], "warranti": [242, 430, 483], "cc0": 242, "creativecommon": 242, "publicdomain": 242, "alexandr": [242, 472, 473, 475, 477, 479, 485], "sokolovskiy": 242, "csrc": 242, "gov": [242, 250, 469], "fips180": 242, "cryptographic_hash_funct": 242, "cryptographic_hash_algorithm": 242, "rfc8018": 242, "cryptographi": [242, 344], "nvlpub": 242, "nistpub": 242, "nistspecialpublication800": 242, "heapsort": 243, "challeng": [243, 289, 342, 350, 477, 482, 485], "prioritizeditem": [243, 322], "pq": [243, 325], "entry_find": 243, "add_task": 243, "remove_task": 243, "pop_task": 243, "tournament": 243, "sport": 243, "winner": [243, 485], "oppon": 243, "loser": 243, "percol": [243, 485], "midi": 243, "speedi": 243, "fuzzili": 243, "melt": 243, "nowaday": [243, 363], "tape": [243, 363], "spectacular": 243, "digest_con": [244, 485], "crypto_memcmp": [244, 485], "x3e": [245, 247], "lenient": 245, "whatwg": [246, 398, 476, 485], "multipag": 246, "convert_charref": [247, 479, 480, 485], "myhtmlpars": 247, "insofar": [247, 277, 440], "unprocess": 247, "xnnn": 247, "condcom": 247, "ie9": 247, "decl": 247, "sgml": [247, 279, 421, 472], "ent": 247, "html4": 247, "logo": [247, 388, 430], "png": [247, 256, 374], "buff": 247, "ere": 247, "pan": [247, 485], "soup": 247, "switching_protocol": 248, "7231": 248, "2518": 248, "103": [248, 267, 350, 351, 386, 473, 477, 484, 485], "early_hint": [248, 484, 485], "8297": [248, 485], "non_authoritative_inform": 248, "no_cont": 248, "reset_cont": 248, "partial_cont": 248, "7233": 248, "multi_status": 248, "4918": 248, "already_report": 248, "5842": 248, "im_us": 248, "3229": 248, "multiple_choic": 248, "moved_perman": [248, 470], "see_oth": 248, "not_modifi": 248, "7232": [248, 473], "use_proxi": 248, "temporary_redirect": 248, "permanent_redirect": 248, "7238": 248, "bad_request": 248, "7235": 248, "payment_requir": 248, "not_found": [248, 249, 485], "method_not_allow": 248, "not_accept": 248, "proxy_authentication_requir": 248, "request_timeout": 248, "length_requir": 248, "precondition_fail": 248, "request_entity_too_larg": 248, "request_uri_too_long": 248, "unsupported_media_typ": 248, "requested_range_not_satisfi": 248, "expectation_fail": 248, "418": [248, 445, 476, 478, 484, 485], "im_a_teapot": [248, 484], "htcpcp": 248, "2324": 248, "misdirected_request": 248, "7540": 248, "422": 248, "unprocessable_ent": 248, "423": 248, "424": [248, 479], "failed_depend": 248, "too_ear": [248, 484, 485], "8470": 248, "upgrade_requir": 248, "428": [248, 302, 479], "precondition_requir": 248, "6585": 248, "429": [248, 479], "too_many_request": 248, "431": 248, "request_header_fields_too_larg": 248, "unavailable_for_legal_reason": [248, 485], "obstacl": 248, "7725": 248, "internal_server_error": 248, "not_impl": 248, "bad_gateway": 248, "service_unavail": 248, "gateway_timeout": 248, "http_version_not_support": 248, "506": [248, 332, 481, 485], "variant_also_negoti": 248, "2295": 248, "507": 248, "insufficient_storag": 248, "508": 248, "loop_detect": 248, "510": 248, "not_extend": 248, "2774": 248, "network_authentication_requir": 248, "h3": 249, "h4": 249, "key_fil": [249, 399], "cert_fil": [249, 399, 485], "_create_unverified_context": [249, 473, 479], "alpn": [249, 348, 399, 476, 480, 485], "encode_chunk": 249, "reconnect": [249, 480, 485], "tunnel": [249, 477], "skip_host": 249, "skip_accept_encod": 249, "message_bodi": 249, "7230": [249, 399], "amt": 249, "r1": [249, 388, 398], "data1": 249, "r2": [249, 388, 398], "data2": 249, "12524": 249, "issue12524": 249, "filecont": 249, "2965": [250, 399], "2109": [250, 251], "cookie2": 250, "secure_protocol": [250, 485], "wss": [250, 398, 485], "websocket": [250, 485], "downgrad": 250, "curl": [250, 464, 465, 485], "cookie_spec": 250, "kristol": 250, "errata": [250, 268], "unfinish": [250, 289, 485], "2964": 250, "get_origin_req_host": [250, 399, 479], "ignore_discard": 250, "ignore_expir": 250, "wipe": 250, "lynx": [250, 407, 470], "libwww": [250, 470], "cookie3": 250, "mycookiepolici": 250, "i_dont_want_to_store_this_cooki": 250, "tighten": [250, 466, 473, 477], "loos": [250, 370], "benign": 250, "blocklist": 250, "allowlist": [250, 398], "coyot": 250, "193": [250, 388, 474], "nz": 250, "acm": [250, 324], "rocket_launch": 250, "expiri": [250, 485], "began": [250, 258, 273, 367, 466, 467, 476, 485], "cj": 250, "ads": 250, "serializ": [251, 268], "2068": [251, 371], "real_valu": 251, "rawdata": 251, "http_cooki": 251, "httpon": [251, 472, 485], "samesit": [251, 485], "csrf": 251, "lax": [251, 471, 485], "fig": 251, "newton": [251, 325], "wafer": 251, "rocki": [251, 472], "chip": [251, 473], "ahoy": 251, "vienna": 251, "finger": [251, 474], "keebler": 251, "fudg": 251, "012": [251, 267, 351, 467], "oreo": 251, "doublestuff": 251, "twix": 251, "server_class": [252, 411], "handler_class": [252, 411], "8000": [252, 301, 339, 411, 423, 424, 471, 483, 485], "httpd": [252, 282, 339, 411, 471], "server_nam": [252, 411, 424], "server_port": [252, 411], "do_spam": 252, "3986": [252, 398, 473, 476, 480, 482, 485], "hier": 252, "basehttp": 252, "1xx": 252, "1994": [252, 430], "simplehttp": 252, "list_directori": 252, "webserv": 252, "9000": [252, 390, 434], "empt": 252, "htbin": 252, "namag": 254, "aqua": [254, 463, 485], "unsav": 254, "undon": [254, 388, 393, 394], "clipboard": [254, 374, 481, 482, 483, 485], "reformat": [254, 277, 298, 469, 485], "tabifi": 254, "untabifi": 254, "toggl": [254, 344, 381, 483, 484, 485], "chitespac": 254, "autosav": 254, "wake": [254, 334, 339, 370, 472, 485], "pane": [254, 380, 381, 485], "zoom": [254, 485], "momentarili": [254, 277, 485], "deiconifi": 254, "idlerc": [254, 485], "squeez": [254, 481, 482, 483, 485], "leftarrow": 254, "rightarrow": 254, "expres": 254, "pageup": 254, "pagedown": 254, "popup": [254, 367, 388, 485], "100000000": 254, "contract": [254, 351, 430], "uncolor": 254, "idlestartup": [254, 485], "pythonstartup": [254, 326, 340, 359, 442, 459, 479, 485], "masquerad": [254, 393, 485], "tcpconnect": 254, "irv": [254, 446], "6543": 254, "tcplisten": 254, "antivirus": [254, 367], "taught": [254, 350], "mis": [254, 485], "admin": 254, "zombi": [254, 289, 345, 367, 471, 478, 485], "pythonw": [254, 289, 340, 359, 463, 465, 468, 481, 482, 485], "dismiss": 254, "glitch": 254, "pyw": [254, 442, 465, 468, 485], "codepoint": 254, "bmp": [254, 256, 374, 478, 479, 482, 483, 485], "plane": [254, 281, 476, 485], "x02": [254, 265, 344, 354, 402], "x07": [254, 402], "x08c": 254, "loopback": [254, 265, 367], "transient": [254, 274, 347, 485], "f5": [254, 466], "mousewheel": [254, 485], "scrollbar": [254, 374, 379, 381, 388, 485], "toc": [254, 485], "dock": [254, 485], "zzdummi": [254, 485], "imap4rev1": 255, "1730": 255, "imap4_port": 255, "d25if65hy903weo": 255, "imap4_ssl_port": 255, "ssl_context": [255, 294], "993": 255, "datestr": 255, "flagstr": 255, "uw": 255, "message_set": 255, "authobject": [255, 342], "checkpoint": [255, 359], "new_mailbox": 255, "acl": [255, 338], "5161": [255, 480, 485], "6855": [255, 480, 485], "message_part": 255, "cyrus": [255, 485], "rfc2087": 255, "cram": [255, 342], "2342": [255, 468], "message_num": 255, "authoris": 255, "oldmailbox": 255, "newmailbox": 255, "criterion": [255, 305, 432, 466], "msgnum": 255, "ldj": 255, "inbox": [255, 277], "sort_criteria": 255, "search_criterion": 255, "flag_list": 255, "3501": 255, "gmail": [255, 485], "threading_algorithm": 255, "sgi": 256, "imglib": 256, "87a": 256, "89a": 256, "pbm": 256, "pgm": [256, 374], "graymap": 256, "ppm": [256, 374, 380], "pixmap": [256, 380], "tiff": [256, 374, 471], "rast": 256, "raster": 256, "xbm": [256, 374, 380], "jfif": 256, "exif": 256, "webp": [256, 374, 480, 485], "exr": 256, "openexr": [256, 480, 485], "bass": 256, "conduct": 257, "rebound": [257, 258, 440], "debug_overrid": [257, 258, 480], "path_str": 257, "comprehend": 258, "3120": [258, 439, 474], "educ": 258, "get_resource_read": [258, 482, 485], "artifact": [258, 301, 478, 485], "sourceless": [258, 478, 480], "traversableread": [258, 485], "leverag": [258, 289, 479, 484], "akin": [258, 351, 436], "pkg_resourc": [258, 259, 485], "allevi": [258, 466], "loader_detail": 258, "inhibit": [258, 320], "source_byt": 258, "lazy_load": 258, "file_path": 258, "lazy_import": 258, "lazy_typ": 258, "spammetapathfind": 258, "spampathentryfind": 258, "absolute_nam": 258, "parent_nam": 258, "child_nam": 258, "parent_modul": 258, "importlib_resourc": [259, 482, 484, 485], "discover": [259, 318, 479, 485], "566": [259, 485], "console_script": 259, "entrypoint": [259, 476, 485], "entry_point": [259, 485], "eps": 259, "setup_keyword": [259, 469], "egg_info": 259, "0x103528488": 259, "importlib_metadata": [259, 476, 484, 485], "selectablegroup": 259, "wheel_metadata": 259, "packagemetadata": [259, 485], "requires_python": [259, 313], "quickest": 259, "packagepath": [259, 483], "859": 259, "_hook": 259, "pathdistribut": [259, 485], "0x101e0cef0": 259, "filehash": 259, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 259, "text_typ": 259, "gustav": 259, "always_iter": 259, "pytest": [259, 392], "cov": 259, "packages_distribut": [259, 476, 485], "pyyaml": [259, 473, 475], "jaraco": 259, "metadatapathfind": 259, "find_distribut": 259, "distributionfind": 259, "__code__": [261, 351, 432, 474, 483, 485], "__defaults__": [261, 432, 474], "__kwdefaults__": [261, 432, 479], "tb_frame": [261, 389, 432, 485], "tb_lasti": [261, 389, 432], "tb_lineno": [261, 385, 389, 432], "tb_next": [261, 385, 389, 432, 482, 485], "f_back": [261, 385, 432, 485], "f_builtin": [261, 432], "f_code": [261, 432, 469, 485], "f_global": [261, 432], "f_lineno": [261, 432, 469, 476, 481, 485], "f_local": [261, 389, 432, 485], "f_trace": [261, 359, 432, 485], "co_argcount": [261, 432, 485], "co_cod": [261, 432, 485], "co_flag": [261, 432, 485], "co_": 261, "co_posonlyargcount": [261, 432, 483, 485], "co_kwonlyargcount": [261, 432], "co_nloc": [261, 432], "co_stacks": [261, 432], "gi_fram": [261, 471], "gi_run": 261, "gi_cod": [261, 472, 480, 485], "gi_yieldfrom": [261, 480, 485], "cr_await": [261, 485], "cr_frame": 261, "cr_run": 261, "cr_code": 261, "cr_origin": [261, 359, 485], "gen_coro": 261, "follow_wrap": [261, 480, 485], "eval_str": 261, "omiss": [261, 320, 344, 485], "new_sig": 261, "anno": 261, "globaln": [261, 390, 485], "localn": [261, 390, 485], "mysignatur": 261, "implicit0": [261, 481, 485], "keyword_on": 261, "positional_on": 261, "var_posit": 261, "var_keyword": 261, "argspec": 261, "fullargspec": 261, "varkw": 261, "kwonlydefault": 261, "arginfo": 261, "formatarg": 261, "formatvararg": 261, "formatvarkw": 261, "formatvalu": 261, "formatreturn": 261, "formatannot": 261, "closurevar": 261, "__signature__": [261, 479, 485], "conting": 261, "frameinfo": 261, "code_context": 261, "lifespan": 261, "handle_stackframe_without_leak": 261, "slot_descriptor": 261, "getset_descriptor": 261, "wrapper_descriptor": [261, 470], "descriptor_typ": 261, "gen_creat": [261, 477], "gen_run": 261, "gen_suspend": [261, 477], "gen_clos": [261, 477], "coro_cr": 261, "coro_run": 261, "coro_suspend": 261, "coro_clos": 261, "toml": [264, 476], "markdown": [264, 476], "md": 264, "597": [264, 476, 485], "pythonwarndefaultencod": [264, 459, 476, 485], "blksize": [264, 411], "stacklevel": [264, 273, 404, 471, 485], "unoptim": [264, 480], "seek_": 264, "seek_hol": [264, 299, 478], "seek_data": [264, 299, 478], "immin": 264, "latenc": [264, 275, 299, 445, 473, 476, 481], "initial_byt": 264, "ab56ef": 264, "nsecond": [264, 453], "reconstruct": [264, 305, 313, 383, 411], "downsid": [265, 465, 478, 482], "3232235521": [265, 352], "xc0": [265, 468], "xa8": 265, "glibc": [265, 299, 328, 479, 483, 484, 485], "arpa": [265, 364, 480], "ip6": [265, 480], "multicast": [265, 344, 367, 402, 485], "3171": 265, "2373": 265, "5735": 265, "3330": 265, "3927": 265, "0b11000000101010000000000000000001": 265, "2001_0db8_0000_0000_0000_0000_0000_1000": 265, "_n": 265, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 265, "longhand": 265, "4291": [265, 485], "0abc": 265, "0007": 265, "0def": 265, "4007": 265, "fe80": 265, "ff02": 265, "5678": [265, 402], "3879": 265, "4193": 265, "6to4": 265, "3056": 265, "4380": 265, "nbit": 265, "ff00": 265, "cisco": [265, 485], "wholli": [265, 417], "n1": 265, "n2": 265, "prefixlen_diff": 265, "new_prefix": 265, "db00": 265, "anycast": 265, "ipaddr": 265, "sortabl": [265, 275], "apl": [267, 475, 477], "sml": 267, "recast": [267, 477], "algebra": [267, 472, 485], "tabul": [267, 351, 415], "vector": [267, 281, 355, 372, 388, 390, 413, 485], "vector1": 267, "vector2": 267, "p0": 267, "plast": 267, "q0": 267, "q1": 267, "pred": [267, 403], "abcdefg": [267, 297], "it1": 267, "it2": 267, "itn": [267, 485], "fillvalu": [267, 327, 472], "ax": 267, "ad": [267, 430, 469], "bd": 267, "addabl": 267, "110": [267, 311, 350, 352, 445], "amort": 267, "recurr": 267, "1296": 267, "loan": 267, "annual": [267, 484], "cashflow": 267, "bal": 267, "pmt": 267, "960": [267, 485], "918": 267, "873": 267, "9000000000001": 267, "827": 267, "5950000000001": 267, "chaotic": 267, "logistic_map": 267, "x0": 267, "91": [267, 350], "92": [267, 350, 483, 484], "95": [267, 299, 320, 324, 350, 386, 469, 472], "93": [267, 344, 483, 484], "71": [267, 386], "83": [267, 386, 455, 479], "013": 267, "023": 267, "uniq": [267, 470], "uniquekey": 267, "aaaabbbccdaabbb": 267, "aaaabbbccd": 267, "aaaa": [267, 473], "bbb": 267, "tgtkey": 267, "currkey": 267, "currvalu": 267, "_grouper": 267, "nexti": 267, "021": 267, "210": 267, "odomet": 267, "ay": 267, "bx": 267, "cy": 267, "dx": [267, 350], "dy": 267, "011": 267, "mydequ": 267, "newval": 267, "uneven": 267, "num_act": 267, "superior": 267, "all_equ": 267, "quantifi": [267, 320], "pad_non": 267, "ncycl": 267, "dotproduct": 267, "vec1": 267, "vec2": [267, 390], "convolv": 267, "betterexplain": 267, "convolut": 267, "list_of_list": 267, "repeatfunc": 267, "grouper": 267, "gxx": 267, "triplewis": 267, "triplet": [267, 485], "cde": 267, "efg": 267, "sliding_window": 267, "cdef": 267, "defg": 267, "sakki": [267, 473], "is_odd": 267, "before_and_aft": 267, "abcdefghi": 267, "all_upp": 267, "true_iter": 267, "remainder_iter": 267, "subslic": 267, "powerset": 267, "unique_everseen": 267, "abbccad": 267, "seen_add": 267, "unique_justseen": 267, "iter_except": 267, "first_tru": 267, "random_product": 267, "random_permut": 267, "random_combin": 267, "random_combination_with_replac": 267, "nth_combin": 267, "7159": [268, 480, 485], "4627": [268, 485], "ecma": 268, "sort_key": [268, 310, 477], "x08ar": 268, "as_complex": 268, "dct": 268, "object_hook": 268, "parse_float": 268, "complexencod": 268, "unord": [268, 289, 351, 432], "skipkey": [268, 310, 485], "ensure_ascii": [268, 480, 485], "check_circular": 268, "allow_nan": 268, "item_separ": 268, "key_separ": 268, "parse_int": 268, "parse_const": 268, "object_pairs_hook": [268, 473, 475], "deseri": [268, 290, 305, 429, 450, 473, 479, 481, 485], "num_str": 268, "bigobject": 268, "forbid": [268, 305, 348, 351, 413, 473, 485], "unpair": 268, "weird_json": 268, "voluntarili": [268, 299], "mp_film": 268, "1971": [268, 347, 350], "holi": [268, 347, 352, 446], "grail": [268, 347, 407, 446], "2028": 268, "2029": 268, "ecmascript": [268, 414], "module_glob": [271, 404, 485], "_local": [272, 484, 485], "decimal_point": [272, 351, 485], "thousands_sep": [272, 351, 485], "int_curr_symbol": 272, "currency_symbol": [272, 456], "p_cs_preced": 272, "n_cs_preced": 272, "p_sep_by_spac": 272, "n_sep_by_spac": 272, "mon_decimal_point": 272, "frac_digit": [272, 456], "int_frac_digit": 272, "mon_thousands_sep": 272, "mon_group": 272, "positive_sign": 272, "negative_sign": 272, "p_sign_posn": 272, "n_sign_posn": 272, "day_7": 272, "abday_1": 272, "abday_7": 272, "mon_1": 272, "mon_12": 272, "abmon_1": 272, "abmon_12": 272, "emperor": 272, "reign": 272, "envvar": [272, 367], "1766": 272, "lc_": 272, "do_setlocal": [272, 299], "localenam": 272, "string1": [272, 347, 446], "string2": [272, 347, 446], "0f": [272, 477, 485], "loc": 272, "xe4n": 272, "umlaut": 272, "grip": [273, 381], "stack_info": [273, 485], "clientip": 273, "fblogg": 273, "hdlr": 273, "lno": 273, "sinfo": 273, "tidi": [273, 392, 469, 471, 472], "emiss": [273, 367, 485], "preparatori": 273, "uuu": 273, "default_time_format": 273, "default_msec_format": 273, "linefmt": 273, "footer": [273, 348, 485], "pertin": [273, 331], "004": 273, "896": [273, 350], "la": [273, 471], "entrant": [273, 485], "throttl": 273, "28524": 273, "reinstat": [273, 485], "attrdict": 273, "reconstitut": [273, 305], "klass": 273, "inabl": [274, 299], "dictconfigur": 274, "dictconfigclass": 274, "uncustom": 274, "default_logging_config_port": 274, "decrypt": [274, 348, 426], "victim": 274, "customis": 274, "allow_foo": 274, "logconfig": 274, "compel": [274, 473], "customformatterfactori": 274, "my_app": 274, "tld": 274, "support_team": 274, "dev_team": 274, "houston": 274, "mykey": 274, "config_dict": 274, "baseconfigur": 274, "log01": 274, "logger_log01": 274, "hand01": 274, "handler_hand01": 274, "form01": 274, "formatter_form01": 274, "log02": 274, "log03": 274, "log04": 274, "log05": 274, "log06": 274, "log07": 274, "hand02": 274, "hand03": 274, "hand04": 274, "hand05": 274, "hand06": 274, "hand07": 274, "hand08": 274, "hand09": 274, "form02": 274, "form03": 274, "form04": 274, "form05": 274, "form06": 274, "form07": 274, "form08": 274, "form09": 274, "uat": 274, "logger_pars": 274, "_defaultformatt": 274, "handler_hand02": 274, "handler_hand03": 274, "handler_hand04": 274, "default_udp_logging_port": 274, "handler_hand05": 274, "syslog_udp_port": [274, 275], "log_us": [274, 275, 361], "handler_hand06": 274, "handler_hand07": 274, "user1": 274, "user2": 274, "handler_hand08": 274, "handler_hand09": 274, "9022": 274, "typifi": 274, "42378": [275, 485], "newsyslog": 275, "logrot": 275, "precursor": 275, "rollov": [275, 365, 479, 485], "default_nam": [275, 432], "predetermin": 275, "attim": [275, 479], "w0": 275, "w6": 275, "w1": [275, 444], "d_": 275, "record_attr_dict": 275, "datalen": 275, "retrystart": 275, "retryfactor": 275, "retrymax": 275, "rsyslog": 275, "monterey": [275, 485], "gh": [275, 325, 476, 485], "91070": 275, "12168": 275, "append_nul": [275, 478], "12419": 275, "log_": 275, "log_alert": [275, 361], "crit": 275, "log_crit": [275, 361], "log_debug": [275, 361], "panic": [275, 469], "log_emerg": [275, 361], "log_err": [275, 361], "log_info": [275, 361], "log_notic": [275, 361], "log_warn": [275, 361], "log_auth": [275, 361], "authpriv": 275, "log_authpriv": [275, 361], "cron": 275, "log_cron": [275, 361], "log_daemon": [275, 361], "log_ftp": 275, "kern": 275, "log_kern": [275, 361], "lpr": 275, "log_lpr": [275, 361], "log_mail": [275, 361], "log_new": [275, 361], "log_syslog": [275, 361], "uucp": 275, "log_uucp": [275, 361], "local0": 275, "log_local0": [275, 361], "local1": 275, "log_local1": 275, "local2": 275, "log_local2": 275, "local3": 275, "log_local3": 275, "local4": 275, "log_local4": 275, "local5": 275, "log_local5": 275, "local6": 275, "log_local6": 275, "local7": 275, "log_local7": [275, 361], "hammond": [275, 465, 466, 468, 469, 478, 485], "logtyp": 275, "win32servic": 275, "slimmer": 275, "credenti": [275, 294, 399, 465, 480, 485], "zap": 275, "flushonclos": 275, "pickleabl": [275, 485], "format_xz": 276, "format_alon": [276, 485], "format_raw": 276, "format_auto": 276, "check_non": 276, "check_crc32": 276, "check_crc64": 276, "check_sha256": 276, "preset_extrem": 276, "preset_default": 276, "memlimit": 276, "check_unknown": 276, "liblzma": 276, "filter_lzma1": 276, "filter_lzma2": 276, "filter_delta": 276, "bcj": 276, "filter_x86": 276, "filter_ia64": 276, "filter_arm": 276, "filter_armthumb": 276, "filter_powerpc": 276, "filter_sparc": 276, "dict_siz": 276, "lc": 276, "mode_fast": 276, "mode_norm": 276, "nice_len": 276, "mf": 276, "mf_hc3": 276, "mf_hc4": 276, "mf_bt2": 276, "mf_bt3": 276, "mf_bt4": 276, "start_offset": 276, "data_in": 276, "data_out": 276, "lzc": 276, "out1": 276, "out2": 276, "out3": 276, "out4": 276, "lzf": 276, "my_filt": 276, "noteworthi": [277, 466, 467], "qmail": 277, "courier": [277, 374, 377, 485], "exclam": [277, 303, 352, 381, 410, 439], "deserv": [277, 466], "remark": [277, 388, 394, 466, 470, 485], "inventor": 277, "perceiv": 277, "shortcom": [277, 469], "mboxo": 277, "mh_sequenc": 277, "mh_profil": 277, "nmh": 277, "gpl": [277, 430, 468], "rmail": 277, "037": 277, "014": 277, "abridg": 277, "attract": [277, 472, 474], "multichannel": 277, "memorandum": 277, "newsread": 277, "composit": [277, 359, 381, 391, 436, 485], "bounc": [277, 466], "unseen": 277, "mua": [277, 348, 482], "time_": 277, "list_nam": 277, "list_id": 277, "mpeg": 278, "xmpeg": 278, "1524": 278, "cap": [278, 485], "showparti": 278, "tmp1223": 278, "unmarsh": 280, "binomi": [281, 350, 485], "mantissa": [281, 324, 470, 472], "9999999999999999": 281, "summat": 281, "halfway": [281, 474], "denorm": [281, 359, 485], "epsilon": [281, 359, 472], "718281": 281, "0000050000069649e": 281, "0000050000166668e": 281, "annex": [281, 391, 439, 472], "quadrant": 281, "euclidean": [281, 483, 485], "qx": 281, "norm": [281, 485], "hypotenus": 281, "triangl": [281, 388], "pythagorean": 281, "theorem": [281, 350, 351], "hyperbola": 281, "complementari": [281, 324, 412, 473, 477], "141592": 281, "283185": 281, "circumfer": [281, 390], "vi": [281, 326], "hart": 281, "celebr": 281, "pie": [281, 347], "rebuilt": [282, 478, 480, 485], "recognit": 282, "tgz": [282, 464], "access_read": 284, "access_writ": 284, "access_copi": 284, "access_default": [284, 485], "prot": 284, "allocationgranular": 284, "prot_writ": 284, "prot_read": 284, "lieu": [284, 430], "pages": 284, "advic": [284, 299, 465, 485], "pkg_name": [285, 367, 386], "oldnam": 285, "newnam": [285, 456], "replace_path": 285, "oldpath": 285, "newpath": 285, "baconhamegg": 285, "globalnam": 285, "badmodul": 285, "_type": 285, "_inverted_registri": 285, "_slotnam": [285, 485], "sre_compil": [285, 314], "isstr": 285, "_sre": [285, 480, 485], "_optimize_unicod": 285, "sre_const": [285, 480], "repeat_on": 285, "makedict": 285, "at_end_lin": 285, "_expand": 285, "sre_pars": 285, "_patternend": 285, "sre_flag_unicod": 285, "inttyp": [285, 485], "typetyp": 285, "cabinet": [287, 485], "cabnam": 287, "mszip": 287, "uuidtostr": 287, "msiopendatabas": 287, "msidbopen_createdirect": 287, "msidbopen_cr": 287, "msidbopen_direct": 287, "msidbopen_readon": 287, "msidbopen_transact": 287, "msidbopen_patchfil": 287, "msicreaterecord": 287, "productnam": 287, "productcod": 287, "productvers": 287, "manufactur": 287, "_validation_record": 287, "_stream": 287, "msidatabaseopenview": 287, "msidatabasecommit": 287, "msigetsummaryinform": 287, "msiclosehandl": 287, "msiviewexecut": 287, "msiviewgetcolumninfo": 287, "msicolinfo_nam": 287, "msicolinfo_typ": 287, "msiviewfetch": 287, "msiviewmodifi": 287, "msimodify_seek": 287, "msimodify_refresh": 287, "msimodify_insert": 287, "msimodify_upd": 287, "msimodify_assign": 287, "msimodify_replac": 287, "msimodify_merg": 287, "msimodify_delet": 287, "msimodify_insert_temporari": 287, "msimodify_valid": 287, "msimodify_validate_new": 287, "msimodify_validate_field": 287, "msimodify_validate_delet": 287, "msiviewclos": 287, "msisummaryinfogetproperti": 287, "pid_codepag": 287, "pid_titl": 287, "pid_subject": 287, "pid_author": 287, "pid_keyword": 287, "pid_com": 287, "pid_templ": 287, "pid_lastauthor": 287, "pid_revnumb": 287, "pid_lastprint": 287, "pid_create_dtm": 287, "pid_lastsave_dtm": 287, "pid_pagecount": 287, "pid_wordcount": 287, "pid_charcount": 287, "pid_appnam": 287, "pid_secur": 287, "msisummaryinfogetpropertycount": 287, "msisummaryinfosetproperti": 287, "msisummaryinfopersist": 287, "msirecordgetfieldcount": 287, "msirecordsetstr": 287, "msirecordsetstream": 287, "msirecordsetinteg": 287, "msirecordcleardata": 287, "msierror": [287, 485], "componentflag": 287, "defaultdir": 287, "keypath": 287, "featurecompon": 287, "dlg": 287, "controlev": 287, "eventmap": 287, "controlcondit": 287, "radio": [287, 380, 485], "control_next": 287, "next_control": 287, "radiobutton": [287, 380, 381, 485], "adminexecutesequ": 287, "adminuisequ": 287, "advtexecutesequ": 287, "installexecutesequ": 287, "installuisequ": 287, "uitext": 287, "actiontext": 287, "lk_": 288, "xe0": 288, "keycod": [288, 374], "unicode_char": 288, "33725": [289, 483, 485], "reboot": [289, 302, 479], "mp": [289, 469], "duplex": [289, 301], "parent_conn": 289, "child_conn": 289, "liabl": [289, 406, 430], "1415927": 289, "offload": 289, "multiple_result": 289, "patienc": 289, "poolwork": 289, "waitforsingleobject": 289, "waitformultipleobject": [289, 485], "infinitesim": 289, "conn1": 289, "conn2": 289, "feeder": [289, 390, 485], "sem_getvalu": [289, 485], "allow_exit_without_flush": 289, "3770": 289, "cpus": [289, 299, 479, 480, 485], "allow_non": [289, 423, 424, 469], "arr1": 289, "arr2": 289, "solitari": 289, "unown": [289, 485], "sem_timedwait": [289, 485], "typecode_or_typ": 289, "get_lock": 289, "size_or_initi": 289, "get_obj": 289, "875": 289, "375": [289, 350], "1111111111111111": 289, "515625": 289, "0625": [289, 453], "640625": 289, "50000": [289, 372], "typeid": [289, 483], "method_to_typeid": 289, "create_method": 289, "_exposed_": 289, "_method_to_typeid_": 289, "_z": 289, "mathsclass": 289, "mymanag": 289, "queuemanag": 289, "get_queu": 289, "listproxi": [289, 485], "l_outer": 289, "d_first_inn": 289, "lproxi": 289, "remoteerror": 289, "deregist": 289, "maxtasksperchild": [289, 473, 485], "apach": [289, 348, 423, 457, 466, 481, 485], "mod_wsgi": [289, 355], "error_callback": 289, "lazier": 289, "outstand": 289, "af_pip": 289, "object_list": 289, "waitabl": [289, 299, 334], "1729": 289, "pipenam": 289, "servernam": 289, "doom": [289, 471], "mainprocess": 289, "pymp": 289, "_bootstrap": [289, 386], "_pid": 289, "5155": 289, "5313": 289, "5331": 289, "_h": 289, "generatorproxi": 289, "get_operator_modul": 289, "94": [289, 324, 473], "calculatestar": 289, "pow3": 289, "imap_it": 289, "imap_unordered_it": 289, "tgot": 289, "imapiter": 289, "applyresult": 289, "number_of_process": 289, "tasks1": 289, "tasks2": 289, "done_queu": 289, "multicor": 290, "smp": 290, "novel": [290, 468, 469, 471], "relinquish": [290, 299, 370], "shm_a": 290, "shm_b": 290, "howdi": 290, "ndarray": 290, "np": [290, 478], "dtype": 290, "psm_21467_46075": 290, "existing_shm": 290, "int64": 290, "888": 290, "smm": 290, "psm_6572_7512": 290, "raw_shm": 290, "another_sl": 290, "psm_6572_12221": 290, "depict": 290, "do_work": [290, 299], "total_result": 290, "storabl": 290, "10m": 290, "deserialized_sl": 290, "mapnam": 293, "default_domain": 293, "joy": 293, "nntlib": 294, "poster": 294, "3977": 294, "2980": 294, "gmane": [294, 478, 485], "committ": [294, 478], "1096": 294, "1087": 294, "1088": 294, "1089": 294, "1090": 294, "1091": 294, "1092": 294, "ssh": [294, 337, 338, 398, 485], "1093": 294, "1094": 294, "fellow": 294, "240": [294, 388], "119": [294, 350, 386, 483], "readermod": 294, "usenetrc": 294, "authinfo": 294, "1755": [294, 478], "nntps": 294, "4642": 294, "groupinfo": 294, "tor": 294, "group_pattern": [294, 431, 435], "offlin": [294, 386, 465], "grouppattern": 294, "wildmat": 294, "295": 294, "biopython": 294, "elid": 294, "message_spec": 294, "article_numb": 294, "art_num": 294, "117216": 294, "xref": 294, "ik1hcnrpbib2libmw7z3axmi": 294, "message_id": 294, "9099": 294, "20030112190404": 294, "ge29873": 294, "metaslash": 294, "65": [294, 324, 338, 350, 453, 466, 472, 473, 480], "neal": [294, 469, 471, 472], "norwitz": [294, 469, 471, 472], "hdr": 294, "header_str": 294, "e9buter_en_python": 294, "buter": 294, "chjvymzdqg1ligrlig1hdhjpy2u": 294, "probl": 294, "matric": [294, 467], "myfoo": 295, "myintegr": 295, "do_my_adding_stuff": 295, "othertypeiknowabout": 295, "do_my_other_adding_stuff": 295, "intellig": [295, 298, 300, 301, 303], "_operator_fallback": 295, "monomorphic_oper": 295, "fallback_oper": 295, "__r": 295, "_add": 295, "66": [297, 393, 446, 467, 472], "tuppl": 297, "resolve_attr": 297, "cdefg": 297, "soldier": 297, "rank": [297, 417], "captain": [297, 481], "dotterbart": 297, "banana": [297, 351, 446, 455], "pear": [297, 446, 455], "yourscript": 298, "foutfil": 298, "qfoutfil": 298, "acquaint": 298, "pf": [298, 381], "ffoo": 298, "controversi": [298, 468], "contradictori": 298, "whatsoev": [298, 331, 430], "mutant": 298, "oddbal": 298, "humbl": 298, "tweak": [298, 394, 467, 470, 481, 485], "mission": 298, "overwhelm": 298, "opt_str": 298, "jam": 298, "n42": 298, "vewwi": 298, "wabbit": 298, "novic": 298, "bland": [298, 471, 472], "clue": 298, "optioncontain": 298, "add_option_group": 298, "4x": [298, 476, 478, 479, 481, 485], "suppress_usag": 298, "option_list": 298, "standard_option_list": 298, "option_class": 298, "indentedhelpformatt": 298, "titledhelpformatt": 298, "add_help_opt": 298, "make_opt": 298, "irrelev": [298, 473, 485], "suppress_help": 298, "fbar": 298, "noisi": [298, 485], "check_choic": 298, "set_conflict_handl": 298, "optionconflicterror": 298, "whittl": 298, "overkil": 298, "rarg": 298, "optionvalu": 298, "record_foo_seen": 298, "saw_foo": 298, "check_ord": 298, "moon": 298, "check_moon": 298, "is_moon_ful": 298, "store_valu": 298, "hairi": 298, "intricaci": 298, "stab": 298, "vararg_callback": 298, "floatabl": 298, "vararg_attr": 298, "check_mytyp": 298, "sillier": 298, "check_complex": 298, "myoption": 298, "take_act": 298, "ding": [298, 484, 485], "dong": [298, 476, 483, 484, 485], "ensure_valu": 298, "optparse_pars": 298, "valv": 298, "threat": 299, "inaccess": [299, 300, 399, 432, 466, 469, 479, 485], "dcxx": 299, "nonsens": [299, 479], "ruid": 299, "euid": 299, "suid": 299, "rgid": 299, "egid": 299, "sgid": 299, "superus": 299, "pgrp": 299, "sysnam": [299, 309], "decept": [299, 469], "fd_low": [299, 485], "fd_high": [299, 485], "offset_src": 299, "offset_dst": 299, "fd2": 299, "filedescriptor": 299, "98": [299, 344, 351, 409, 472, 473, 477], "_commit": 299, "sc_iov_max": [299, 344], "out_fd": [299, 485], "in_fd": [299, 485], "pg": 299, "stdout_fileno": 299, "close_fd": [299, 355, 470, 477, 482, 483, 485], "faccessat": 299, "effective_id": [299, 478], "vista": [299, 381, 485], "repars": [299, 483, 485], "junction": [299, 300, 338, 483, 485], "exist_ok": [299, 302, 480, 485], "21082": [299, 485], "rendezv": [299, 477], "0o600": 299, "opendir": 299, "readdir": [299, 480], "findfirstfilew": [299, 485], "findnextfilew": 299, "scandir_path": 299, "dirent": 299, "d_type": 299, "dt_unknown": 299, "statinfo": 299, "33188": 299, "7876932": 299, "234881026": 299, "264": [299, 354, 468], "1297230295": 299, "1297230027": 299, "fat32": 299, "dwfileattribut": [299, 480], "by_handle_file_inform": [299, 480], "getfileinformationbyhandl": [299, 480], "file_attribute_": 299, "io_reparse_tag_": 299, "f_bsize": 299, "f_frsize": 299, "f_block": 299, "f_bfree": 299, "f_bavail": 299, "f_file": 299, "f_ffree": 299, "f_favail": 299, "f_flag": 299, "f_namemax": 299, "f_fsid": [299, 485], "st_rdon": 299, "st_nosuid": 299, "st_nodev": 299, "st_noexec": 299, "st_synchron": 299, "st_mandlock": 299, "st_write": 299, "st_append": 299, "st_immut": 299, "st_noatim": 299, "st_nodiratim": 299, "st_relatim": 299, "atim": 299, "target_is_directori": [299, 302, 478], "morph": 299, "unprivileg": 299, "secreatesymboliclinkprivileg": 299, "unelev": 299, "atime_n": 299, "mtime_n": 299, "dirpath": 299, "resumpt": [299, 481, 485], "dirfd": 299, "rootfd": 299, "mfd_": 299, "memfd": [299, 485], "mfd_huge": 299, "initv": 299, "efc_cloexec": 299, "adddlldirectori": 299, "retryabl": 299, "file_act": [299, 485], "setpgroup": [299, 485], "resetid": [299, 485], "setsigmask": [299, 485], "setsigdef": [299, 485], "new_fd": 299, "posix_spawn_file_actions_addopen": 299, "posix_spawn_file_actions_addclos": 299, "posix_spawn_file_actions_adddup2": 299, "posix_spawn_setpgroup": 299, "posix_spawn_resetid": 299, "posix_spawn_setsid": 299, "posix_spawn_setsid_np": 299, "posix_spawn_setsigmask": 299, "sigdef": 299, "posix_spawn_setsigdef": 299, "posix_spawn_setschedparam": 299, "posix_spawn_setschedul": 299, "after_in_par": 299, "after_in_child": 299, "shellexecut": [299, 485], "comspec": [299, 355, 478, 479], "children_us": 299, "children_system": 299, "getprocesstim": 299, "idtyp": 299, "siginfo_t": [299, 339, 485], "si_pid": [299, 339], "si_uid": [299, 339], "si_signo": [299, 339], "si_status": [299, 339], "si_cod": [299, 339, 484, 485], "ptrace": [299, 485], "sporad": 299, "robin": [299, 417, 446, 483, 485], "quantum": 299, "undetermin": 299, "unobtain": 299, "entropi": [299, 348, 481, 485], "environment": [299, 399, 459, 485], "unnecessarili": [299, 485], "524": [299, 481, 485], "cryptgenrandom": 299, "getentropi": [299, 480, 485], "ntpath": [300, 482, 485], "unrepresent": [300, 302, 483, 485], "getvolumepathnam": 300, "std": [300, 359, 371, 471, 485], "1003": 300, "filepath": 300, "path1": 300, "path2": 300, "fp1": 300, "fp2": 300, "stat1": 300, "stat2": 300, "cshrc": [300, 463], "soundcard": 301, "audiodev": [301, 472], "dsp": 301, "player": [301, 325, 352, 388], "linuxaudiodev": [301, 466, 469, 472], "mixerdev": 301, "sndctl_dsp_setfmt": 301, "sndctl_dsp_sync": 301, "afmt_mu_law": 301, "afmt_a_law": 301, "afmt_ima_adpcm": 301, "afmt_u8": 301, "afmt_s16_l": 301, "afmt_s16_b": 301, "68k": 301, "powerpc": [301, 470, 471, 472, 485], "afmt_s8": 301, "afmt_u16_l": 301, "afmt_u16_b": 301, "afmt_queri": 301, "monophon": 301, "stereophon": 301, "sampler": 301, "11025": 301, "22050": 301, "96000": 301, "dvd": 301, "mixabl": 301, "sound_mixer_pcm": 301, "sound_mixer_synth": 301, "sound_mixer_": 301, "pcm": [301, 405], "sound_mixer_volum": 301, "gravi": 301, "ultrasound": 301, "left_volum": 301, "right_volum": 301, "microphon": 301, "setrecsrc": 301, "sound_mixer_m": 301, "test_pathlib": [302, 485], "pathseg": 302, "mimick": 302, "lib64": [302, 359, 460, 484, 485], "apache2": 302, "regroup": 302, "694": [302, 477], "subpath": [302, 427], "antoin": [302, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "751": 302, "851": 302, "798": 302, "956": 302, "1327883547": 302, "852554": 302, "33277": 302, "0o444": 302, "33060": 302, "nonexistentfil": 302, "film": [302, 350, 390], "_templat": 302, "_build": 302, "_static": [302, 485], "my_binary_fil": 302, "my_text_fil": 302, "mylink": 302, "other_path": 302, "missing_ok": [302, 485], "abnorm": [303, 359, 398, 477], "pdbrc": [303, 477, 481, 484, 485], "test2": [303, 352, 431], "nosigint": [303, 477], "readrc": [303, 481, 485], "elp": 303, "hel": 303, "reak": 303, "tbreak": 303, "ear": 303, "bpnumber": 303, "some_vari": 303, "tep": 303, "unt": 303, "il": [303, 348, 438], "eturn": 303, "ont": 303, "inu": 303, "ump": 303, "ist": 303, "longlist": 303, "rgs": 303, "whati": [303, 485], "undisplay": [303, 477], "classinst": 303, "ps": [303, 314, 355, 403], "unalia": 303, "list_opt": 303, "uit": 303, "retval": [303, 467], "ecosystem": 305, "tackl": [305, 466], "3154": [305, 479, 485], "574": [305, 386, 483, 485], "buffer_callback": 305, "therein": 305, "superflu": [305, 344, 347, 485], "referenti": 305, "elig": [305, 434, 477], "picklestr": [305, 306], "worthwhil": [305, 471, 478], "list_of_item": 305, "sixth": [305, 468, 483], "memorecord": 305, "dbpickler": 305, "dbunpickl": 305, "type_tag": 305, "key_id": 305, "fight": [305, 477], "italian": [305, 388], "disturb": [305, 485], "reduce_someclass": 305, "mypickl": 305, "textread": 305, "new_read": 305, "myclass": [305, 432, 444], "my_attribut": 305, "unpickled_class": 305, "massiv": [305, 470, 471, 480, 485], "eschew": 305, "reconstructor": 305, "zerocopybytearray": 305, "_reconstruct": 305, "unseri": [305, 477], "new_b": 305, "unaccept": [305, 344, 417, 440], "nsystem": 305, "ntr": 305, "inoffens": 305, "safe_builtin": 305, "restrictedunpickl": 305, "restricted_load": 305, "cbuiltin": [305, 475], "neval": 305, "4j": [305, 431, 439, 446, 472], "intim": 306, "binint1": 306, "tuple2": 306, "binput": [306, 485], "indentlevel": 306, "opcodeinfo": 306, "pipefil": 307, "module_find": 308, "ispkg": 308, "path_item": 308, "module_or_nam": 308, "12915": [308, 485], "pyramid": 308, "is_64bit": 309, "amdk6": 309, "buildno": 309, "builddat": 309, "scm": 309, "dega": 309, "vminfo": 309, "osinfo": 309, "vm_name": 309, "vm_releas": 309, "vm_vendor": 309, "os_nam": 309, "os_vers": 309, "os_arch": 309, "csd": 309, "uniprocessor": 309, "enterpris": [309, 485], "iotuap": 309, "serverstandard": 309, "nanoserv": 309, "iot": [309, 485], "versioninfo": 309, "dev_stag": 309, "non_release_vers": 309, "16384": 309, "freedesktop": [309, 476, 478, 485], "pretty_nam": 309, "id_lik": 309, "version_id": 309, "variant_id": 309, "get_like_distro": 309, "ios": 310, "nskeyedarchiv": [310, 483], "nskeyedunarchiv": 310, "invalidfileexcept": [310, 485], "pl": 310, "astr": 310, "doodah": 310, "afloat": 310, "anint": 310, "728": 310, "adict": 310, "anotherstr": 310, "athirdstr": 310, "xe4ssig": 310, "ma": [310, 476, 485], "atruevalu": 310, "afalsevalu": 310, "gunk": 310, "somemoredata": 310, "adat": 310, "akey": 310, "1939": 311, "2595": 311, "obsolesc": 311, "mailserv": 311, "pop3_port": 311, "pop3_ssl_port": 311, "995": [311, 481], "fetchmail": 311, "noncompli": 311, "2449": 311, "mesg_num": 311, "eudora": 311, "qpop": 311, "signoff": 311, "howmuch": 311, "mesgnum": 311, "6856": [311, 473, 477, 480, 485], "nummessag": 311, "disguis": [312, 325, 432], "off_t": 312, "getconf": 312, "lfs_cflag": 312, "d_largefile64_sourc": 312, "d_file_offset_bit": 312, "sort_dict": [313, 483, 485], "underscore_numb": [313, 476, 485], "tup": [313, 388], "sampleproject": 313, "project_info": 313, "pypa": [313, 403, 463], "googlegroup": 313, "bugtrack_url": 313, "webpag": 313, "description_content_typ": 313, "docs_url": 313, "last_day": 313, "last_month": 313, "last_week": 313, "home_pag": 313, "package_url": 313, "project_url": 313, "release_url": 313, "requires_dist": 313, "pstat": [314, 455, 467, 471, 485], "lsprof": 314, "rosen": 314, "ted": 314, "czotter": 314, "imit": [314, 472], "197": 314, "ncall": [314, 485], "tottim": 314, "percal": 314, "cumtim": 314, "212": 314, "268": 314, "_compil": 314, "_compile_charset": 314, "_optimize_charset": 314, "_identityfunct": 314, "induc": [314, 429], "subfunct": [314, 478], "restat": 314, "sort_ord": 314, "sortkey": 314, "cull": 314, "timeunit": 314, "subcal": 314, "pr": [314, 466, 485], "sortbi": 314, "coalesc": 314, "printout": [314, 485], "pcall": 314, "nfl": 314, "percentag": [314, 350, 352, 450, 472, 485], "statsprofil": [314, 485], "functionprofil": [314, 485], "tick": [314, 328, 371], "lag": 314, "calibr": 314, "probabilist": 314, "god": 314, "8ghz": 314, "i5": 314, "04e": 314, "your_computed_bia": 314, "your_time_func": 314, "lone": [314, 342, 434, 485], "cleanest": 314, "your_integer_time_func": 314, "_lsprof": [314, 485], "thorough": [315, 325, 344, 351, 477, 485], "master_read": 315, "stdin_read": 315, "baffl": 315, "pseudotermin": 315, "typescript": 315, "use_python": 315, "pw_name": 316, "pw_passwd": 316, "pw_uid": [316, 355], "pw_gid": 316, "pw_geco": 316, "pw_dir": 316, "pw_shell": 316, "dfile": 317, "dorais": 317, "filen": 317, "pagin": 319, "pager": [319, 485], "pythondoc": [319, 485], "pyexpat": [320, 413, 430, 460, 466, 469, 471, 472, 473, 485], "unauthent": [320, 348, 413, 415, 416, 417, 418, 423, 424], "namespace_separ": 320, "repertoir": [320, 342, 380, 472], "xmlns": [320, 399, 417, 473, 485], "elem1": [320, 471], "elem2": [320, 471], "isfin": 320, "xml_param_entity_parsing_nev": 320, "xml_param_entity_parsing_unless_standalon": 320, "xml_param_entity_parsing_alway": 320, "handlernam": 320, "doctypenam": 320, "has_internal_subset": 320, "elnam": 320, "attnam": 320, "idref": 320, "entitynam": 320, "notationnam": 320, "ndata": [320, 419], "is_parameter_ent": 320, "some_xml_docu": 320, "start_el": [320, 416], "end_el": [320, 416], "char_data": 320, "child1": [320, 393], "child2": [320, 393], "xml_ctype_ani": 320, "xml_ctype_choic": 320, "xml_ctype_empti": 320, "xml_ctype_mix": 320, "xml_ctype_nam": 320, "xml_ctype_seq": 320, "xml_cquant_non": 320, "xml_cquant_opt": 320, "xml_cquant_plus": 320, "xml_cquant_rep": 320, "xml_error_": 320, "constant_nam": 320, "undeclar": 320, "rec": [320, 415, 417], "xml11": [320, 415, 417], "20060816": [320, 415, 417], "encodingdecl": [320, 415, 417], "mise": 324, "19937": 324, "matsumoto": [324, 430], "nishimura": [324, 430], "equidistribut": 324, "vol": 324, "mersennetwist": 324, "cum_weight": 324, "2080": 324, "10000000": 324, "lambd": 324, "mu": [324, 350, 483, 485], "sigma": [324, 350, 483], "kappa": 324, "pareto": 324, "weibul": 324, "seeder": 324, "37444887175646646": 324, "1800146073117523": 324, "148957571865031": 324, "roulett": 324, "spin": [324, 485], "jack": [324, 325, 351, 401, 430, 446, 450, 468, 469, 471, 475, 485], "king": [324, 325, 466, 483], "coin": 324, "settl": [324, 472], "10_000": [324, 350], "4169": 324, "quartil": [324, 350, 483], "2_500": 324, "7_500": 324, "7958": 324, "thoughtco": 324, "3126155": 324, "73": [324, 386, 456, 470, 483, 484], "denni": [324, 476, 484, 485], "shasha": 324, "manda": 324, "wilson": [324, 469, 470, 480, 484, 485], "drug": 324, "placebo": 324, "observed_diff": 324, "new_diff": 324, "reshuffl": 324, "4f": 324, "hypothesi": 324, "average_arrival_interv": 324, "average_service_tim": 324, "stdev_service_tim": 324, "num_serv": 324, "arrival_tim": 324, "1_000_000": [324, 481, 485], "next_server_avail": 324, "service_dur": 324, "service_complet": 324, "jake": [324, 473, 475, 483, 485], "vanderpla": 324, "econom": 324, "norvig": 324, "05954861408025609": 324, "fullrandom": 324, "0x10_0000_0000_0000": 324, "87925541791544": 324, "allen": [324, 348, 477, 485], "downey": 324, "frie09": 325, "gentler": 325, "nfoo2": 325, "aaaab": 325, "aaab": 325, "aaaaaa": 325, "ailmsux": 325, "imsx": 325, "isaac": 325, "asimov": 325, "lookbehind": [325, 480, 485], "theth": 325, "bfoo": 325, "foo3": 325, "typographi": 325, "regexflag": [325, 482, 485], "nicer": [325, 394, 476, 485], "0a3b9": 325, "fell": [325, 445, 455, 467, 468, 469], "z_": [325, 439], "z_0": 325, "npy_": 325, "npy_myfunc": 325, "dashrepl": 325, "matchobj": 325, "pro": 325, "gram": [325, 435], "sand": 325, "unmatch": [325, 352, 398, 480, 485], "new_str": 325, "number_of_subs_mad": 325, "legal_char": 325, "abcdefghijklmnopqrstuvwxyz0123456789": 325, "digits_r": 325, "ogr": 325, "doggi": 325, "og": [325, 367, 485], "groupn": 325, "physicist": 325, "reynold": 325, "a1b2c3": 325, "c3": [325, 398, 432, 469, 478], "1632": 325, "cba": 325, "remove_thi": 325, "toni": [325, 472, 485], "tiremove_thisg": 325, "tiger": 325, "displaymatch": 325, "poker": [325, 388], "9tjqk": 325, "akt5q": 325, "akt5": 325, "akt": 325, "727ak": 325, "717ak": 325, "7s": 325, "717": 325, "718ak": 325, "354aa": 325, "5c": 325, "ee": [325, 351, 475], "nb": [325, 474], "nx": 325, "ross": [325, 473, 475, 478, 484, 485], "mcfluff": 325, "834": 325, "345": [325, 470, 475], "155": 325, "elm": 325, "ronald": [325, 471, 472, 473, 477, 479, 484], "heathmor": 325, "892": 325, "3428": 325, "finley": 325, "avenu": [325, 430, 468], "frank": [325, 485], "burger": 325, "925": 325, "541": 325, "7625": 325, "662": 325, "dogwood": 325, "heather": 325, "albrecht": 325, "548": 325, "326": 325, "4584": 325, "919": 325, "park": 325, "telephon": 325, "hous": [325, 481], "inner_word": 325, "professor": 325, "abdolmalek": 325, "poefsrosr": 325, "aealmlobdk": 325, "pslaee": 325, "reorpt": 325, "abnsec": 325, "plmrptoy": 325, "pofsros": 325, "aodlambelk": 325, "plase": 325, "reoprt": 325, "yuor": 325, "asnebc": 325, "potlmrpi": 325, "polic": 325, "ly": 325, "02d": 325, "scanner": [325, 362, 383, 479, 485], "gosub": 325, "token_specif": 325, "tok_regex": 325, "line_start": 325, "inputrc": [326, 485], "libedit": [326, 485], "editlin": [326, 460, 485], "editrc": [326, 485], "rl_complet": 326, "rl_parse_and_bind": 326, "rl_read_init_fil": 326, "rl_line_buff": 326, "rl_insert_text": 326, "rl_redisplay": 326, "read_histori": 326, "write_histori": [326, 485], "nelement": 326, "append_histori": 326, "history_truncate_fil": 326, "history_get": 326, "remove_histori": 326, "replace_history_entri": 326, "rl_startup_hook": 326, "rl_pre_input_hook": 326, "entry_func": 326, "rl_completion_match": 326, "rl_attempted_completion_funct": 326, "rl_completion_typ": 326, "libreadlin": [326, 485], "rl_completer_word_break_charact": 326, "rl_completion_display_matches_hook": 326, "longest_match_length": 326, "python_histori": [326, 340, 451], "histfil": 326, "unruli": 326, "h_len": 326, "prev_h_len": 326, "new_h_len": 326, "historyconsol": 326, "init_histori": 326, "save_histori": 326, "repr_typ": 327, "subobj": 327, "myrepr": 327, "repr_textiowrapp": 327, "cap_sys_resourc": 328, "sigxcpu": 328, "rlim_cur": 328, "spend": [328, 466, 485], "mbuf": 328, "overcommit": 328, "sysctl": 328, "rusage_": 328, "ru_utim": 328, "ru_stim": 328, "ru_maxrss": 328, "ru_ixrss": 328, "ru_idrss": 328, "unshar": 328, "ru_isrss": 328, "ru_minflt": 328, "ru_majflt": 328, "ru_nswap": 328, "ru_inblock": 328, "ru_oublock": 328, "ru_msgsnd": 328, "ru_msgrcv": 328, "ru_nsign": 328, "ru_nvcsw": 328, "voluntari": 328, "ru_nivcsw": 328, "involuntari": 328, "sandbox": [330, 485], "mod_nam": 330, "init_glob": 330, "run_nam": 330, "alter_si": 330, "path_nam": 330, "snow": [330, 478, 479, 480, 481, 482, 483], "timefunc": [331, 478], "delayfunc": 331, "print_tim": 331, "print_some_tim": 331, "930343690": 331, "257": [331, 485], "930343695": 331, "274": [331, 474], "275": 331, "930343700": 331, "276": 331, "soonest": [331, 478], "deadlin": 331, "xebr": 332, "x17d": 332, "xae": 332, "xd4": 332, "xe3": [332, 472], "xb6": 332, "xe2": [332, 472], "xebp1": 332, "x8b": 332, "f9bf78b9a18ce6d46a0cd2b0b86df9da": 332, "drmhze6epcv0fn_81bj": 332, "token_": 332, "xkcd": [332, 347], "passphras": 332, "epoll_create1": 334, "epoll_cloexec": 334, "kq_filter_read": 334, "kq_ev_add": 334, "rlist": 334, "wlist": 334, "xlist": 334, "parameterless": 334, "winsock": [334, 344, 485], "eventmask": [334, 472], "pollin": 334, "pollpri": 334, "pollout": 334, "epollin": 334, "epollout": 334, "epollpri": 334, "urgent": 334, "epollerr": 334, "assoc": 334, "epollhup": 334, "epollet": 334, "epolloneshot": 334, "epollexclus": [334, 485], "epollrdhup": [334, 485], "epollrdnorm": 334, "epollrdband": 334, "epollwrnorm": 334, "epollwrband": 334, "epollmsg": 334, "maxev": 334, "scalabl": [334, 466], "fds": [334, 344, 485], "pollerr": 334, "pollhup": 334, "hung": 334, "pollrdhup": [334, 485], "pollnval": 334, "changelist": 334, "max_ev": 334, "eventlist": 334, "sektion": 334, "kq_filter_writ": 334, "kq_filter_aio": 334, "aio": 334, "kq_filter_vnod": 334, "kq_filter_proc": 334, "kq_filter_netdev": 334, "kq_filter_sign": 334, "kq_filter_tim": 334, "kq_ev_delet": 334, "kq_ev_en": 334, "permitscontrol": 334, "kq_ev_dis": 334, "disablesev": 334, "kq_ev_oneshot": 334, "kq_ev_clear": 334, "kq_ev_sysflag": 334, "kq_ev_flag1": 334, "kq_ev_eof": 334, "kq_ev_error": 334, "kq_note_lowat": 334, "kq_note_delet": 334, "kq_note_writ": 334, "kq_note_extend": 334, "kq_note_attrib": 334, "kq_note_link": 334, "kq_note_renam": 334, "kq_note_revok": 334, "revok": 334, "kq_note_exit": 334, "kq_note_fork": 334, "kq_note_exec": 334, "kq_note_pctrlmask": 334, "kq_note_pdatamask": 334, "kq_note_track": 334, "kq_note_child": 334, "note_track": 334, "kq_note_trackerr": 334, "kq_note_linkup": 334, "kq_note_linkdown": 334, "kq_note_linkinv": 334, "event_read": [335, 339], "event_writ": 335, "sel": [335, 339], "writeback": 336, "handier": 336, "keyencod": 336, "set_loc": 336, "bsddb": [336, 469, 472, 473], "pybsddb": [336, 469, 472, 473, 474], "hashopen": 336, "btopen": 336, "rnopen": 336, "klist": 336, "minilanguag": 337, "split_command": 337, "boom": [337, 393, 394], "plug": [337, 485], "remote_command": 337, "pushback": 337, "newstream": 337, "newfil": 337, "lexer": 337, "leader": [337, 485], "beginn": 337, "donotsepar": 337, "fsrc": 338, "fdst": 338, "uncontrol": 338, "copy_funct": [338, 477, 480, 485], "ignore_dangling_symlink": [338, 477], "dirs_exist_ok": [338, 483, 485], "suscept": [338, 465, 485], "excinfo": 338, "mv": [338, 478], "python33": 338, "srcname": 338, "33671": [338, 483, 485], "userspac": [338, 478, 483], "outfd": [338, 483], "infd": [338, 483], "fcopyfil": 338, "_logpath": 338, "reattempt": 338, "remove_readon": 338, "pax": [338, 363, 472, 483, 485], "extra_arg": [338, 477], "archive_nam": 338, "myarchiv": [338, 456, 477], "tzvf": 338, "drwx": 338, "609": 338, "authorized_key": 338, "id_dsa": 338, "1675": 338, "id_rsa": 338, "37192": 338, "known_host": 338, "please_add": 338, "do_not_add": 338, "my_arch": 338, "uninterrupt": 339, "air": 339, "sigmask": 339, "sigquit": [339, 355], "bus": [339, 409], "hangup": 339, "death": [339, 478], "sigvtalrm": 339, "sigprof": 339, "siginfo": 339, "sigstop": 339, "sigprocmask": 339, "warn_on_full_buff": [339, 482, 485], "wakeup": [339, 478, 482, 485], "sigset": [339, 485], "si_errno": 339, "si_band": [339, 485], "ttys0": 339, "spamcontext": 339, "exc_val": [339, 351], "interrupt_read": 339, "interrupt_writ": 339, "subsubdirectori": 340, "bletch": 340, "usercustom": [340, 442, 479, 485], "appdata": [340, 465, 472], "pythonuserbas": [340, 459, 472], "sitedir": 340, "known_path": 340, "aiosmtpd": [341, 485], "1870": [341, 478], "localaddr": 341, "remoteaddr": 341, "data_size_limit": 341, "33554432": 341, "enable_smtputf8": [341, 485], "decode_data": [341, 480, 481, 485], "relay": [341, 402, 482, 485], "mail_opt": [341, 342, 480, 485], "8bitmim": [341, 342, 480, 485], "6152": [341, 473, 480], "_remoteaddr": 341, "rcpt_option": [341, 342], "rcpt": [341, 342], "smtp_": 341, "vrfi": [341, 342], "expn": 341, "esmtp": 342, "821": 342, "1869": 342, "local_hostnam": 342, "lmtp_port": 342, "smtp_code": 342, "smtp_error": 342, "helo_resp": 342, "ehlo_resp": 342, "does_esmtp": 342, "esmtp_featur": 342, "foil": 342, "spammer": 342, "initial_response_ok": [342, 485], "4954": [342, 485], "auth_cram_md5": 342, "auth_plain": 342, "auth_login": [342, 485], "from_addr": [342, 477], "to_addr": [342, 477], "dsn": 342, "smtpnotsupport": 342, "hcom": 343, "sndr": 343, "sndt": 343, "voc": 343, "8svx": 343, "sb": [343, 364], "ub": 343, "ul": [343, 415, 468], "sampling_r": 343, "bits_per_sampl": 343, "transliter": 344, "dare": 344, "inaddr_ani": 344, "inaddr_broadcast": 344, "flowinfo": 344, "sin6_flowinfo": 344, "sin6_scope_id": 344, "sockaddr_in6": 344, "af_netlink": [344, 471], "tipc": [344, 472], "af_tipc": 344, "addr_typ": 344, "v2": [344, 354, 471, 472, 485], "tipc_addr_nameseq": 344, "tipc_addr_nam": 344, "tipc_addr_id": 344, "tipc_zone_scop": 344, "tipc_cluster_scop": 344, "tipc_node_scop": 344, "can0": 344, "rx_addr": 344, "tx_addr": 344, "pgn": 344, "ecu": 344, "sysproto_control": 344, "pf_system": [344, 478], "af_bluetooth": [344, 485], "btproto_l2cap": 344, "bdaddr": 344, "psm": 344, "bluetooth": [344, 485], "btproto_rfcomm": 344, "btproto_hci": 344, "device_id": 344, "dragonflybsd": [344, 485], "btproto_sco": 344, "feat": 344, "aead": [344, 348], "skcipher": 344, "rng": 344, "aes": [344, 348, 469], "drbg_nopr_ctr_aes256": 344, "qemu": [344, 355, 483, 485], "esx": 344, "workstat": [344, 359], "ifnam": 344, "pkttype": 344, "hatyp": 344, "ethernet": 344, "packet_host": 344, "packet_broadcast": 344, "packet_multihost": 344, "packet_otherhost": 344, "promiscu": 344, "packet_outgo": 344, "arp": [344, 485], "qualcomm": [344, 485], "ipproto_udplit": [344, 485], "udplite_send_cscov": [344, 485], "udplite_recv_cscov": [344, 485], "v6": 344, "nondeterminist": 344, "h_errno": 344, "hstrerror": 344, "gai_strerror": 344, "eai_": 344, "af_": [344, 479], "sock_": [344, 479, 485], "addressfamili": 344, "socketkind": 344, "so_": 344, "msg_": 344, "sol_": 344, "scm_": 344, "ipproto_": 344, "ipport_": 344, "inaddr_": 344, "ip_": [344, 485], "ipv6_": 344, "ai_": 344, "ni_": 344, "tcp_": 344, "so_domain": [344, 481], "so_protocol": [344, 481], "so_peersec": [344, 481], "so_passsec": [344, 481], "tcp_user_timeout": [344, 481, 482, 485], "tcp_congest": [344, 481, 482, 485], "tcp_fastopen": [344, 485], "tcp_keepcnt": [344, 485], "tcp_notsent_lowat": [344, 482, 485], "tcp_keepidl": [344, 485], "tcp_keepintvl": [344, 485], "ip_recvto": [344, 476, 485], "tcp_keepal": [344, 485], "sol_can_": 344, "can_": 344, "can_bcm_": 344, "bcm": [344, 485], "can_bcm_can_fd_fram": 344, "can_raw": 344, "15765": 344, "sae": 344, "j1939": [344, 485], "packet_": 344, "rds_": 344, "rcvall_": 344, "wsaioctl": [344, 472], "tipc_": 344, "alg_": [344, 481], "vmaddr": 344, "so_vm": 344, "overrul": 344, "ipproto_mptcp": [344, 476, 485], "dualstack_ipv6": 344, "ai_numerichost": 344, "canonnam": 344, "ai_canonnam": 344, "ipproto_tcp": 344, "2606": 344, "2800": 344, "220": [344, 348, 445], "248": 344, "1893": 344, "25c8": 344, "1946": 344, "184": 344, "216": [344, 450, 453], "aliaslist": 344, "ipaddrlist": 344, "icmp": 344, "ip_str": 344, "quad": [344, 468, 485], "in_addr": 344, "packed_ip": 344, "in6_addr": 344, "5aef": 344, "2b": [344, 481], "ancillari": [344, 478, 485], "3542": [344, 485], "fb605b73": 344, "aac2": 344, "49a6": 344, "9a2f": 344, "25416aea0573": 344, "ethernet_32770": 344, "vethernet": 344, "hyper": 344, "if_nam": 344, "if_index": 344, "scm_right": 344, "maxfd": 344, "optnam": [344, 481], "ancbufs": 344, "ancdata": 344, "msg_flag": 344, "cmsg_level": 344, "cmsg_type": 344, "cmsg_data": 344, "unconnect": [344, 472], "sol_socket": 344, "scatter": [344, 468, 469, 473], "0123456789": [344, 351, 352], "b3": 344, "lamb": [344, 445], "iv": 344, "assoclen": 344, "optlen": [344, 481], "optval": 344, "halv": [344, 470, 473], "shut_rd": 344, "shut_wr": 344, "shut_rdwr": [344, 348, 485], "50007": 344, "af": 344, "ipproto_ip": 344, "ip_hdrincl": 344, "rcvall_on": 344, "65565": 344, "rcvall_off": 344, "can_fram": 344, "can_frame_fmt": 344, "ib3x8": 344, "can_frame_s": 344, "build_can_fram": 344, "can_id": 344, "can_dlc": 344, "dissect_can_fram": 344, "vcan0": 344, "3bsd": 344, "stuart": 344, "sechrest": 344, "leffler": 344, "supplementari": 344, "3493": 344, "bind_and_activ": [345, 424, 472], "infrequ": 345, "daemon_thread": 345, "autonom": [345, 430], "block_on_clos": [345, 482, 485], "deaf": [345, 477], "poll_interv": 345, "mytcphandl": 345, "tcpclient": 345, "myudphandl": 345, "threadedtcprequesthandl": 345, "cur_thread": 345, "threadedtcpserv": 345, "server_thread": 345, "sp_namp": 346, "sp_pwdp": 346, "sp_lstchg": 346, "sp_min": 346, "sp_max": 346, "sp_warn": 346, "sp_inact": 346, "sp_expir": 346, "sp_flag": 346, "nonstandard": [347, 460, 471], "postgresql": [347, 471], "gerhard": [347, 468, 471, 472, 473], "ring": [347, 468, 471, 472, 473], "249": [347, 471], "w3school": 347, "sqlite_mast": 347, "hollywood": 347, "bowl": 347, "1982": [347, 350, 371], "1983": [347, 350], "brian": [347, 438, 466, 469, 470, 472, 473, 477, 478, 479, 482, 485], "1979": [347, 350], "new_con": 347, "new_cur": 347, "detect_typ": 347, "check_same_thread": 347, "cached_stat": 347, "authorizer_callback": 347, "qmark": 347, "pragma_compile_opt": 347, "compile_opt": 347, "sqlite_threadsaf": 347, "sql_script": 347, "md5sum": [347, 485], "acbd18db4cc2f85cedef654fccc4a4d8": 347, "n_arg": 347, "aggregate_class": 347, "mysum": 347, "collate_revers": 347, "4th": 347, "5th": 347, "progress_handl": 347, "trace_callback": 347, "fulltext": [347, 477], "fts3": 347, "ingredi": 347, "broccoli": 347, "stew": 347, "pepper": 347, "chees": [347, 445, 458], "pumpkin": 347, "onion": 347, "garlic": 347, "celeri": 347, "flour": 347, "butter": 347, "rowid": 347, "autocommit": 347, "uncommit": [347, 477], "col_nam": 347, "db_row": 347, "austria": [347, 417], "sterreich": 347, "barfoo": 347, "row1": 347, "row2": 347, "6378": 347, "246": [347, 472, 485], "dml": [347, 485], "blob": [347, 348, 394, 485], "fiddl": 347, "current_d": 347, "current_timestamp": 347, "webcom": 347, "humor": 347, "rhat": [347, 471], "first_appear": 347, "lang_list": 347, "1957": 347, "__conform__": [347, 485], "adapt_point": 347, "convert_point": 347, "adapt_date_iso": 347, "adapt_datetime_iso": 347, "adapt_datetime_epoch": 347, "convert_d": 347, "convert_datetim": 347, "convert_timestamp": 347, "1984": 347, "varchar": 347, "nosuchdb": 347, "mem1": 347, "con1": 347, "con2": 347, "ddl": [347, 481, 485], "644": [348, 476, 485], "sni": [348, 479, 482, 485], "ssock": 348, "cert": [348, 464, 473, 479, 485], "cabundl": 348, "certchain": 348, "8443": 348, "cafil": [348, 399, 473, 479], "capath": [348, 399, 479], "cadata": [348, 479, 485], "rc4": [348, 430, 485], "sslkeylogfil": [348, 485], "ssl3": 348, "chacha20": [348, 481, 485], "poly1305": [348, 481, 485], "superimpos": 348, "x509": [348, 399], "certificate_verify_fail": 348, "prng": 348, "rand": 348, "csprng": [348, 485], "is_cryptograph": 348, "rand_egd": [348, 476, 485], "1750": 348, "2818": [348, 477], "5280": [348, 480, 485], "6125": 348, "commonnam": 348, "pthon": 348, "kva": 348, "tda": 348, "subjectaltnam": 348, "cert_tim": 348, "notbefor": 348, "notaft": 348, "2018": [348, 482, 485], "1515144883": 348, "ca_cert": 348, "der_cert_byt": 348, "der": [348, 402, 472, 479, 485], "pem_cert_str": 348, "defaultverifypath": 348, "openssl_cafile_env": 348, "openssl_cafil": 348, "openssl_capath_env": 348, "openssl_capath": 348, "libressl": [348, 482, 485], "cert_byt": 348, "encoding_typ": 348, "x509_asn": 348, "509": [348, 472, 479, 485], "asn": 348, "pkcs_7_asn": 348, "oid": [348, 402, 406, 485], "trustworthi": 348, "crls": [348, 479], "cert_req": 348, "do_handshake_on_connect": 348, "suppress_ragged_eof": [348, 485], "cert_": 348, "revoc": [348, 479, 485], "crl": [348, 479, 485], "issuer": 348, "cas": 348, "verify_": 348, "ssl2": 348, "sslv2": [348, 477], "ssl_op_al": 348, "renegoti": [348, 473], "hellorequest": 348, "clienthello": 348, "0h": [348, 485], "dh": [348, 476, 485], "secreci": [348, 476, 485], "ecdh": [348, 485], "op_": 348, "ticket": [348, 485], "7301": [348, 473, 477, 480], "ellipt": [348, 478, 485], "diffi": [348, 478], "hellman": [348, 478], "6066": 348, "2k": [348, 485], "268443839": 348, "0x100020bf": 348, "alert_description_": 348, "5246": 348, "ssl_error_": 348, "atop": [348, 471, 472], "diverg": [348, 468], "ssl_read_ex": [348, 485], "ssl_write_ex": [348, 485], "unencrypt": 348, "binary_form": 348, "amongst": 348, "3280": 348, "rdns": 348, "rdn": 348, "countrynam": 348, "organizationnam": 348, "startcom": 348, "organizationalunitnam": 348, "serialnumb": 348, "95f0": 348, "571208": 348, "sle257ohy9fvq07z": 348, "stateorprovincenam": 348, "california": [348, 430], "localitynam": 348, "san": [348, 400], "francisco": [348, 400, 485], "frontier": 348, "eff": 348, "emailaddress": 348, "hostmast": 348, "x509v3": [348, 479], "crldistributionpoint": [348, 479], "caissuer": 348, "ocsp": [348, 479], "cb_type": 348, "5929": 348, "npn": [348, 476, 485], "pha": 348, "certificaterequest": 348, "pythn": [348, 482], "pyth": [348, 482], "protocol_": 348, "sslv23": 348, "ecc": [348, 476, 485], "224": [348, 471], "x509_ca": 348, "aesgcm": 348, "ecdsa": [348, 477, 485], "alg_bit": 348, "aes256": [348, 485], "gcm": 348, "kx": 348, "50380848": 348, "kea": 348, "strength_bit": 348, "aes128": 348, "50380847": 348, "spdi": 348, "agre": [348, 430, 485], "openssl_no_tlsext": 348, "server_name_callback": 348, "dhfile": 348, "curve_nam": 348, "prime256v1": [348, 485], "vincent": [348, 480, 481, 485], "bernat": 348, "ssl_sock": 348, "verisign": 348, "keylog": [348, 485], "nss": 348, "wireshark": 348, "2197947391": 348, "op_no_ssl": [348, 485], "op_no_tl": 348, "1k": [348, 485], "satisfact": 348, "1422": 348, "agenc": [348, 430], "buy": [348, 471], "keyout": 348, "dn": [348, 402, 485], "provinc": 348, "mystat": 348, "compani": [348, 465, 471, 472], "widgit": 348, "myserv": 348, "mygroup": 348, "myorgan": 348, "digicert": 348, "cacert": 348, "digicertsha2extendedvalidationserverca": 348, "crl3": 348, "sha2": [348, 484, 485], "g1": [348, 388], "crl4": 348, "01bb6f00122b177f36cab49cea8b6b26": 348, "businesscategori": 348, "311": 348, "delawar": 348, "3359300": 348, "streetaddress": 348, "postalcod": 348, "03894": 348, "4801": 348, "nh": 348, "wolfeboro": 348, "testpypi": 348, "pythonhost": 348, "linuxfr": 348, "nginx": 348, "sameorigin": 348, "45679": [348, 485], "varnish": 348, "2188": 348, "lcy1134": 348, "lci": 348, "63072000": 348, "includesubdomain": 348, "mycertfil": 348, "mykeyfil": 348, "bindsocket": 348, "myaddr": 348, "10023": 348, "newsocket": 348, "connstream": 348, "deal_with_cli": 348, "client_context": 348, "disjunct": [348, 435], "rekey": 348, "steve": [348, 467, 472, 480, 481, 482, 483, 484, 485], "4086": 348, "schiller": 348, "dierk": 348, "eastlak": 348, "7525": [348, 485], "dtls": 348, "whiteout": 349, "s_is": 349, "walktre": 349, "visitfil": 349, "rwxrwxrwx": [349, 478], "v7": [349, 363], "competitor": 350, "profession": [350, 465, 475], "statistician": 350, "minitab": 350, "sas": 350, "matlab": 350, "input_data": 350, "geometr": 350, "harmon": [350, 485], "pearson": [350, 476, 485], "slope": 350, "625": [350, 483], "5625": [350, 453], "outlier": 350, "tendenc": 350, "unbias": 350, "reciproc": 350, "travel": 350, "hr": 350, "journey": 350, "50th": 350, "percentil": [350, 483], "midpoint": 350, "frederick": 350, "gravett": 350, "wallnau": 350, "8th": 350, "ssmedian": 350, "gnumer": 350, "aabbbbccddddeeffffgg": 350, "986893273527251": 350, "dispers": 350, "815": 350, "freedom": [350, 417, 440], "xbar": [350, 485], "0810874155219827": 350, "3720238095238095": [350, 455], "01875": 350, "108": [350, 386], "bessel": 350, "decil": [350, 483], "0th": 350, "100th": 350, "empir": 350, "129": 350, "109": [350, 386], "121": [350, 473], "107": 350, "joint": [350, 430], "pace": [350, 467, 472], "films_tot": 350, "densiti": 350, "agreement": [350, 430, 466, 483], "temperature_februari": 350, "celsius": 350, "fahrenheit": [350, 483], "birth_weight": 350, "drug_effect": 350, "1060": [350, 483, 485], "195": [350, 481], "1100": [350, 475], "1200": [350, 460], "928": 350, "1192": 350, "810": 350, "958": 350, "1011": [350, 352], "1109": 350, "1162": 350, "1224": 350, "1310": 350, "analyt": 350, "mont": 350, "carlo": 350, "3652260728": 350, "4582495471": 350, "6582483453": 350, "4591308524824727": 350, "8035946855390597": 350, "175091447274739": 350, "confer": [350, 381, 467, 471], "750": 350, "attende": 350, "8402": [350, 479], "8675309": 350, "8398": 350, "bayesian": 350, "gender": 350, "train": 350, "height_mal": 350, "height_femal": 350, "weight_mal": 350, "170": [350, 388], "weight_femal": 350, "150": [350, 388, 392, 469, 473], "foot_size_mal": 350, "foot_size_femal": 350, "male": 350, "posterior": 350, "prior_mal": 350, "prior_femal": 350, "posterior_mal": 350, "posterior_femal": 350, "posteriori": 350, "circuit": [351, 446], "unadorn": 351, "widen": [351, 485], "ucd": [351, 391, 439, 478, 479, 485], "derivednumerictyp": 351, "0b100101": [351, 473, 475], "100101": 351, "0b10011": 351, "x04": [351, 402, 468], "xff": [351, 478], "xfc": 351, "xe8": 351, "x10": [351, 468], "64512": 351, "16711680": 351, "tohexstr": 351, "0x3": 351, "a7p10": 351, "3740": 351, "d380000000000p": 351, "invmod": 351, "hash_fract": 351, "coprim": 351, "hash_valu": 351, "fermat": 351, "hash_float": 351, "hash_complex": 351, "breadth": [351, 388, 456], "gg": 351, "haunt": 351, "economi": 351, "subrang": 351, "linspac": 351, "zoot": 351, "digraph": 351, "fillchar": 351, "t012": 351, "t0123": 351, "t01234": 351, "0123": 351, "01234": 351, "007f": [351, 439], "0660": [351, 466], "superscript": 351, "kharosthi": 351, "numeric_typ": 351, "2155": 351, "vulgar": 351, "zs": 351, "ws": [351, 398, 423], "uncas": 351, "justifi": [351, 374, 381, 472], "spacious": 351, "cmowz": 351, "testhook": 351, "basetestcas": 351, "misctest": 351, "tmpdirmixin": 351, "ipz": 351, "mississ": 351, "x1c": 351, "x1d": 351, "x85": 351, "u2028": 351, "u2029": 351, "nde": [351, 477], "rkl": 351, "kl": 351, "comment_str": 351, "apostroph": [351, 475], "possess": [351, 409], "bill": [351, 450, 466, 472], "00042": 351, "0042": 351, "sprintf": [351, 466, 468], "parenthesis": [351, 485], "somenam": 351, "1e50": 351, "ieee754": 351, "emphasis": 351, "2ef0": 351, "f1f2": 351, "xf0": 351, "xf1": 351, "xf2": 351, "f0f1f2": 351, "f0_f1f2": 351, "uuddlrlrab": 351, "55554444": 351, "4c524c52": 351, "4142": 351, "aeiou": 351, "ths": 351, "shrt": 351, "fillbyt": 351, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [351, 473], "abcabc1": 351, "abc1": 351, "abcabc": 351, "abcdefghijklmnopqrstuvwxyz": [351, 352, 473], "subview": 351, "abcefg": 351, "0x7f3ddc9f4350": 351, "bce": 351, "22222222": 351, "33333333": 351, "44444444": 351, "zbcefg": 351, "z123fg": 351, "rvalu": 351, "z1spam": 351, "ce": [351, 465, 466, 485], "bepoint": 351, "616263": 351, "byte_length": 351, "new_items": 351, "1d": [351, 485], "zyz": 351, "ayz": 351, "3d": [351, 450], "2d": [351, 450, 485], "32000": 351, "32001": 351, "32002": [351, 485], "sjoerd": [351, 450, 466, 472], "cardin": 351, "disjoint": 351, "cbs": 351, "unwis": [351, 439], "4098": [351, 446, 450], "4127": [351, 446, 450], "dish": 351, "salad": 351, "juic": 351, "mappingproxi": 351, "synchronis": [351, 478], "neglig": [351, 430], "send_post_request": 351, "union_object": 351, "whoami": 351, "abitrari": 351, "2020": [351, 429, 430, 473, 476, 484, 485], "10735": [351, 476, 485], "4300": [351, 476, 485], "5432": 351, "i_squar": 351, "8599": 351, "7144": 351, "default_max_str_digit": [351, 359], "640": [351, 388], "str_digits_check_threshold": [351, 359], "578966293710682886880994035146873798396722250538762761564": 351, "9252925514383915483333812743580549779436104706260696366600": 351, "571186405732": 351, "pythonintmaxstrdigit": [351, 359, 459, 485], "int_max_str_digit": [351, 359, 459, 485], "initil": 351, "upper_bound": [351, 434], "68000": 351, "lower_bound": [351, 434], "4004": 351, "current_limit": 351, "0123456789abcdefabcdef": 352, "01234567": 352, "formfe": [352, 369, 439], "repack": 352, "literal_text": 352, "used_key": 352, "used_arg": 352, "arg_nam": 352, "attribute_nam": 352, "element_index": 352, "index_str": 352, "thou": [352, 477], "shalt": [352, 477], "quest": [352, 446], "ton": 352, "grouping_opt": 352, "000000120": 352, "insignific": [352, 485], "significand": [352, 359], "abra": 352, "cad": 352, "24n": 352, "81w": 352, "coord": 352, "5j": [352, 453], "test1": [352, 431], "2a": [352, 485], "101010": 352, "0o52": [352, 472], "0b101010": 352, "1234567890": [352, 472], "890": 352, "02x": 352, "c0a80001": 352, "dxob": 352, "1010": [352, 483], "flufl": 352, "noun": [352, 485], "ific": 352, "kung": 352, "pao": 352, "idpattern": [352, 485], "_a": 352, "braceidpattern": [352, 485], "unbrac": 352, "3454": [353, 469], "mkstringprep": [353, 469], "tablea": 353, "tableb": 353, "tablec": 353, "switchabl": 354, "bi": 354, "1700": 354, "binary32": 354, "binary64": 354, "binary16": 354, "hhhh": [354, 466], "10c": 354, "0s": 354, "0c": 354, "x32": 354, "x12": [354, 402], "serialnum": 354, "gradelevel": 354, "10shhb": 354, "4658": 354, "ci": [354, 392, 465, 482, 483, 485], "0x12131415": 354, "x13": 354, "x14": 354, "llh0l": 354, "capture_output": [355, 482, 485], "other_popen_kwarg": 355, "crw": [355, 480], "symmetri": [355, 466], "preexec_fn": [355, 470, 483, 485], "restore_sign": 355, "start_new_sess": [355, 483, 485], "pass_fd": [355, 483, 485], "extra_group": [355, 485], "pipes": [355, 485], "lpapplicationnam": 355, "lpcommandlin": 355, "vike": 355, "seldom": 355, "handle_list": 355, "sigxfz": 355, "sigxfsz": 355, "systemroot": 355, "ifconfig": [355, 485], "ncmdshow": [355, 425], "showwindow": 355, "sw_showdefault": 355, "startupinfoex": 355, "updateprocthreadattribut": 355, "error_invalid_paramet": 355, "conin": 355, "conout": 355, "realtim": 355, "non_existent_fil": 355, "mycmd": 355, "myarg": 355, "dmesg": 355, "hda": 355, "retcod": 355, "child_stdin": 355, "child_stdout": 355, "child_stderr": 355, "child_stdout_and_stderr": 355, "popen4": 355, "somestr": 355, "capturestderr": 355, "snd": 356, "711": 356, "compile_typ": 358, "some_func": 358, "__cantrace__": 359, "pythonbreakpoint": [359, 459, 482], "pycach": 359, "underdevelop": 359, "no_user_sit": [359, 477], "ignore_environ": [359, 477, 485], "hash_random": [359, 485], "division_warn": [359, 477, 478], "1999": [359, 371, 399, 430], "iec": 359, "dbl_epsilon": 359, "dig": 359, "dbl_dig": 359, "mant_dig": [359, 472], "dbl_mant_dig": 359, "dbl_max_exp": 359, "max_10_exp": 359, "dbl_max_10_exp": 359, "min_exp": 359, "dbl_min_exp": 359, "min_10_exp": 359, "dbl_min_10_exp": 359, "flt_radix": 359, "flt_round": 359, "14159265358979": 359, "15g": 359, "9876543211234567": 359, "16g": 359, "9876543211234568": 359, "rtld_xxx": 359, "service_pack": [359, 473], "service_pack_minor": [359, 473], "service_pack_major": [359, 473], "suite_mask": [359, 473], "product_typ": [359, 473], "platform_vers": [359, 481, 485], "ver_platform_win32_nt": 359, "ver_nt_workst": 359, "ver_nt_domain_control": 359, "ver_nt_serv": 359, "getversionex": [359, 485], "osversioninfoex": 359, "asyncgen_hook": 359, "firstit": 359, "hash_bit": 359, "seed_bit": 359, "0x010502f0": 359, "bits_per_digit": [359, 460, 473, 475], "sizeof_digit": [359, 473, 475], "immort": [359, 469, 483], "engag": 359, "0xffff": [359, 478, 485], "freebsd8": 359, "linux3": [359, 478], "aix5": 359, "aix7": [359, 483, 485], "coarser": 359, "profilefunc": 359, "timeslic": 359, "tracefunc": 359, "lnotab_not": [359, 481], "resurrect": [359, 367, 370, 432, 477, 484, 485], "releaselevel": [359, 473, 475], "xa": 359, "2a3": 359, "citat": 359, "9899": 359, "jtc1": 359, "sc22": 359, "wg14": 359, "n1256": 359, "py_enable_shar": 360, "libdir": [360, 464], "posix_prefix": [360, 477], "posix_hom": [360, 477], "posix_us": [360, 477, 485], "nt_user": [360, 477], "osx_framework_us": 360, "platstdlib": [360, 477], "platinclud": [360, 477], "_get_default_schem": 360, "redistributor": [360, 473], "_install_schem": 360, "intel64": [360, 485], "em64t": 360, "ppc64": [360, 485], "ac_apple_universal_build": 360, "aix_genuine_cplusplus": 360, "arflag": 360, "log_mask": 361, "pri": 361, "log_upto": 361, "log_pid": 361, "log_con": 361, "log_ndelay": 361, "log_odelay": 361, "log_nowait": 361, "log_perror": 361, "file_or_dir": 362, "ustar": [363, 472, 485], "longlink": 363, "10240": 363, "errorlevel": 363, "ignore_zero": [363, 485], "numeric_own": [363, 480, 485], "set_attr": 363, "arcnam": [363, 426], "regtyp": 363, "aregtyp": 363, "lnktype": 363, "symtyp": 363, "dirtyp": 363, "fifotyp": 363, "conttyp": 363, "chrtype": 363, "blktype": 363, "gnutype_spars": 363, "brian_1979": [363, 426], "source1": [363, 426], "sourcen": [363, 426], "quux": 363, "bsdtar": 363, "libarch": 363, "unmaintain": [363, 380, 477, 479, 481], "ancient": [363, 471], "seventh": 363, "miscalcul": 363, "telopt_": 364, "iac": 364, "dont": 364, "wont": 364, "subnegoti": 364, "dm": 364, "brk": 364, "ao": 364, "ayt": 364, "ec": [364, 485], "ga": 364, "read_": 364, "tn": 364, "eager": [364, 403, 431, 482], "midst": 364, "subopt": 364, "uncompil": 364, "max_siz": [365, 390], "spool": 365, "_file": 365, "ignore_cleanup_error": [365, 485], "tmpdir": 365, "tmpdirnam": [365, 477], "tmptjujjt": 365, "iflag": 366, "oflag": 366, "lflag": 366, "ispe": 366, "ospe": 366, "vmin": 366, "vtime": 366, "tcsanow": 366, "tcsadrain": 366, "tcsaflush": [366, 387], "tciflush": 366, "tcoflush": 366, "tcioflush": 366, "tcooff": 366, "tcoon": 366, "tcioff": 366, "tcion": 366, "regrtest": [367, 386, 469, 473, 485], "test_": [367, 426, 485], "pyunit": [367, 467], "mytestcase1": 367, "test_feature_on": 367, "test_feature_two": 367, "mytestcase2": 367, "whitebox": 367, "blackbox": 367, "improp": [367, 398, 432, 466, 479, 485], "crop": 367, "anomal": 367, "testfuncacceptssequencesmixin": 367, "mysuperwhammyfunct": 367, "test_func": 367, "acceptlist": 367, "acceptstr": 367, "accepttupl": 367, "beck": [367, 392, 467], "test_main": [367, 485], "test_spam": 367, "uall": [367, 469], "largefil": [367, 485], "buildbot": [367, 392, 460, 485], "with_doc_str": [367, 460], "o0": [367, 485], "_testcapi": [367, 460, 485], "accept_pattern": 367, "new_val": 367, "catstr": 367, "min_vers": 367, "memus": 367, "bigmem": 367, "_4g": 367, "errtext": 367, "hog": 367, "refleak": [367, 485], "pkg_dir": 367, "standard_test": [367, 392], "ref_api": 367, "other_api": 367, "test_inst": 367, "object_to_patch": 367, "new_valu": 367, "cmd_name": 367, "test_cas": [367, 392], "name_of_modul": 367, "not_export": [367, 485], "_csv": [367, 485], "misctestcas": 367, "test__all__": 367, "othertestcas": 367, "bar_const": 367, "foo_const": 367, "_bar": 367, "max_digit": 367, "seterrormod": 367, "coredump": 367, "elicit": 367, "ephemer": [367, 406], "s_server": 367, "so_exclusiveaddrus": 367, "resource_nam": 367, "assert_python": 367, "pythonusersit": 367, "env_var": 367, "__isol": 367, "__cleanenv": 367, "__cwd": 367, "script_dir": 367, "script_basenam": 367, "omit_suffix": 367, "zip_dir": 367, "zip_basenam": 367, "name_in_zip": 367, "init_sourc": 367, "_unspecifi": 367, "original_valu": 367, "xattr": 367, "tempcwd": 367, "reinsert": [367, 381, 473, 475], "py_warn": 367, "_warn": [367, 476, 485], "c_warn": 367, "required_on": 367, "oldmodul": 367, "regexp": [367, 477, 485], "warningcategori": 367, "warningrecord": 367, "hey": 367, "thello": 369, "nworld": 369, "imperfect": 369, "frankenstein": 369, "insec": 369, "camelcas": 370, "overcom": [370, 477, 485], "activecount": [370, 472, 476, 485], "_threading_loc": 370, "threadgroup": 370, "tid": [370, 485], "awaken": 370, "cv": [370, 388], "an_item_is_avail": 370, "get_an_available_item": 370, "make_an_item_avail": 370, "notifyal": [370, 476, 485], "dutch": [370, 439], "scientist": 370, "edsger": 370, "dijkstra": 370, "awoken": 370, "maxconnect": 370, "pool_sema": 370, "connectdb": 370, "isset": [370, 476, 485], "accept_connect": 370, "process_server_connect": 370, "make_connect": [370, 423], "process_client_connect": 370, "housekeep": 370, "awri": 370, "some_lock": 370, "1969": 371, "acronym": 371, "compromis": [371, 402, 428], "wisdom": 371, "tm_gmtoff": [371, 481, 485], "tm_zone": [371, 481, 485], "tm": [371, 380], "1993": [371, 485], "clk_id": 371, "ntp": 371, "suspens": [371, 432, 434], "tm_year": [371, 468], "tm_mon": 371, "tm_mday": 371, "tm_hour": 371, "tm_min": 371, "tm_sec": 371, "tm_wday": 371, "tm_yday": 371, "335": 371, "meridian": 371, "julian": [371, 479, 480, 485], "05edt": 371, "m4": [371, 485], "m10": 371, "aest": 371, "10aedt": 371, "tzfile": 371, "datafil": [371, 469], "australia": 371, "melbourn": 371, "egypt": 371, "eet": 371, "eest": 371, "discontinu": 371, "settimeofday": 371, "nonadjust": 371, "ptp": 371, "uptim": [371, 482, 485], "asleep": 371, "1123": [371, 475], "usec": [372, 480], "3018611848820001": 372, "2727368790656328": 372, "23702679807320237": 372, "19665591977536678": 372, "time_taken": 372, "wallclock": 372, "nsec": 372, "5000000": 372, "0877": 372, "41440500499993504": 372, "7246671520006203": 372, "3955516149999312": 372, "40183617287970225": 372, "37027556854118704": 372, "38344867356679524": 372, "3712595970846668": 372, "37866875250654886": 372, "9138244460009446": 372, "5829014980008651": 372, "04215312199994514": 372, "08588060699912603": 372, "stupid": 372, "chief": 373, "virtu": [373, 425], "famous": 373, "woefulli": 374, "tkdoc": [374, 485], "roseman": [374, 476, 484, 485], "978": 374, "1999149567": 374, "alan": [374, 471, 472, 482, 485], "moor": [374, 468, 469, 472, 479, 480, 482, 485], "1788835886": 374, "lutz": 374, "0596158101": 374, "ousterhout": 374, "jone": [374, 469, 471, 479, 480], "0321336330": 374, "multitask": 374, "bridg": [374, 477], "cocoa": [374, 463, 477, 485], "gdi": 374, "screennam": [374, 380], "usetk": 374, "argv0": 374, "winfo_id": 374, "winfo_par": 374, "loadtk": 374, "frm": 374, "grid": [374, 379, 381], "applicaton": 374, "lbl": 374, "btn": [374, 381, 388], "winfo_x": 374, "winfo_height": 374, "winfo_view": 374, "winfo": 374, "reenter": 374, "idiosyncrat": 374, "relief": [374, 381], "groov": 374, "placer": 374, "qualit": 374, "183": 374, "parcel": [374, 381], "ipadx": 374, "ipadi": 374, "padx": 374, "padi": 374, "textvari": [374, 381], "onvalu": 374, "offvalu": 374, "stringvar": [374, 381], "intvar": [374, 485], "doublevar": 374, "booleanvar": [374, 485], "entrythingi": 374, "print_cont": 374, "wm": 374, "_root": 374, "compass": 374, "sw": 374, "nw": 374, "gray25": 374, "gray50": 374, "hourglass": 374, "questhead": 374, "contrib": 374, "gumbi": 374, "print_it": 374, "rrggbb": 374, "rrrgggbbb": 374, "rrrrggggbbbb": 374, "160": [374, 386, 388, 430], "cursorfont": 374, "xc_": 374, "xc_hand2": 374, "hand2": 374, "179": 374, "centimetr": 374, "millimetr": 374, "5i": 374, "widthxheight": 374, "200x100": 374, "3i": 374, "2i": 374, "4c": 374, "43c": 374, "sunken": 374, "ridg": 374, "scrollcommand": [374, 381], "3tk": 374, "turn_r": 374, "activeforeground": 374, "send_ev": 374, "keysym": 374, "keysym_num": 374, "x_root": 374, "y_root": 374, "entryconfig": 374, "bitmapimag": 374, "photoimag": [374, 483, 485], "maxbytecount": 374, "picker": 375, "buttonpress": 376, "dnd_accept": 376, "old_target": 376, "dnd_leav": 376, "dnd_enter": 376, "dnd_commit": 376, "dnd_end": 376, "buttonreleas": 376, "slant": [377, 466], "emphasi": 377, "overstrik": 377, "strikeout": 377, "displayof": 377, "ascent": 377, "descent": 377, "linespac": 377, "tixinspect": 380, "inspector": 380, "combo": [380, 381], "subwidget": 380, "mega": 380, "tk_popup": 380, "motif": 380, "tixexfileselectdialog": 380, "checkbutton": [380, 381, 485], "tixnotebook": 380, "xpm": 380, "cnf": [380, 464], "tix_librari": 380, "dlgclass": 380, "fileselectdialog": 380, "monochrom": 380, "newschem": 380, "newfontset": 380, "newscmprio": 380, "fontset": 380, "resetopt": 380, "tix_config": 380, "tile": [381, 388, 473], "anti": [381, 394, 485], "menubutton": 381, "monograph": 381, "bw": 381, "tlabel": 381, "ttkstyle": 381, "bindtag": 381, "viewabl": 381, "xscrollcommand": 381, "yscrollcommand": 381, "statespec": 381, "inquir": [381, 480], "icursor": 381, "exportselect": 381, "selection_get": 381, "postcommand": 381, "dropdown": 381, "comboboxselect": 381, "newindex": 381, "tab_id": 381, "notebooktabchang": 381, "unmanag": 381, "autoincr": [381, 485], "recur": 381, "southeast": 381, "displaycolumn": 381, "selectmod": 381, "treeviewselect": 381, "treeviewopen": 381, "treeviewclos": 381, "offscreen": 381, "newchildren": 381, "minwidth": 381, "imagenam": 381, "winfo_class": 381, "somewidget": 381, "query_opt": 381, "tbutton": 381, "colored_btn": 381, "layoutspec": 381, "tmenubutton": 381, "mbtn": 381, "elementnam": 381, "etyp": [381, 385, 476], "vsapi": 381, "6a": 381, "imagespec": 381, "interior": [381, 388, 467, 468], "themenam": 381, "tcombobox": 381, "green2": 381, "green4": 381, "fieldbackground": 381, "green3": 381, "olivedrab1": 381, "olivedrab2": 381, "themechang": [381, 485], "caviti": 381, "whichsid": 381, "nswe": 381, "sublayout": 381, "exact_typ": 383, "srow": 383, "scol": 383, "erow": 383, "ecol": 383, "decistmt": 383, "3e": 383, "007": 383, "13th": 383, "21716034272e": 383, "217160342717258261933904529e": 383, "toknum": 383, "tokval": 383, "say_hello": 383, "listfunc": 384, "coverdir": 384, "trackcal": 384, "countfunc": 384, "countcal": 384, "ignoremod": 384, "ignoredir": 384, "show_miss": 384, "extracted_list": 385, "lookup_lin": 385, "capture_loc": 385, "frame_gen": 385, "cheaper": [385, 482], "run_user_cod": 385, "envdir": 385, "bright_side_of_lif": 385, "formatted_lin": 385, "another_funct": 385, "lumberstack": 385, "an_error": 385, "top_stat": 386, "716": 386, "4855": 386, "39328": 386, "284": 386, "521": 386, "3199": 386, "167": 386, "368": 386, "244": 386, "2315": 386, "381": 386, "185": [386, 475], "779": 386, "243": [386, 467], "133": 386, "347": [386, 471], "262": 386, "1446": 386, "911": 386, "1454": 386, "2131": 386, "148": 386, "344": 386, "snapshot1": 386, "snapshot2": 386, "8173": 386, "4428": 386, "71332": 386, "39369": [386, 485], "117": [386, 467], "940": 386, "8106": 386, "571": 386, "298": 386, "589": [386, 390, 483, 485], "1005": 386, "166": 386, "7423": 386, "1526": 386, "1334": 386, "848": 386, "1465": 386, "784": 386, "491": 386, "969": 386, "903": 386, "870": 386, "1036": 386, "934": 386, "1068": 386, "619": 386, "1581": 386, "1614": 386, "938": 386, "1728": 386, "test_pickletool": 386, "1276": 386, "test_runn": 386, "976": 386, "display_failur": 386, "761": 386, "1563": 386, "main_in_temp_cwd": 386, "run_glob": 386, "display_top": 386, "key_typ": 386, "419": [386, 475], "_b85chars2": 386, "_b85char": 386, "306": 386, "_a85chars2": 386, "_a85char": 386, "class_definit": 386, "testmethod": 386, "_hexdig": 386, "_weakrefset": 386, "142": [386, 446, 450], "_b32tab2": 386, "_b32tab": 386, "6220": 386, "3602": 386, "5303": 386, "large_sum": 386, "first_siz": 386, "first_peak": 386, "small_sum": 386, "second_s": 386, "second_peak": 386, "664": 386, "3592984": 386, "804": 386, "29704": [386, 485], "optimis": [386, 432, 485], "old_snapshot": 386, "most_recent_first": [386, 482, 485], "walli": 388, "feurzeig": 388, "seymour": 388, "papert": 388, "cynthia": 388, "solomon": [388, 485], "merit": 388, "playground": 388, "canva": [388, 472, 483, 485], "337": 388, "to_angl": 388, "clockwis": 388, "inscrib": 388, "polygon": 388, "semicircl": 388, "colorstr": 388, "diamet": 388, "stamp_id": 388, "stampid": 388, "astamp": 388, "undobuff": 388, "speedstr": 388, "speedvalu": 388, "440": 388, "225": [388, 466], "27876": 388, "60254": 388, "fullcircl": 388, "360": 388, "grad": 388, "gon": [388, 478], "gradian": 388, "5707963267948966": 388, "thick": 388, "turtleshap": 388, "pendict": 388, "nores": 388, "stretchfactor": 388, "penstat": 388, "33cc8c": 388, "brown": [388, 472, 485], "5490196078431373": 388, "140": [388, 473, 485], "32c18f": 388, "violet": 388, "colorstring1": 388, "colorstring2": 388, "g2": 388, "285078": 388, "a0c8f0": 388, "fillstat": 388, "arial": 388, "fontnam": 388, "fontsiz": 388, "fonttyp": 388, "shapenam": 388, "rmode": 388, "outlinewidth": 388, "stretch_wid": 388, "stretch_len": 388, "perpendicular": 388, "shear": 388, "t11": 388, "t12": 388, "t21": 388, "t22": 388, "myturtl": 388, "glow": 388, "unglow": 388, "handdraw": 388, "myfavouriteshap": 388, "mick": [388, 466, 469, 471], "pet": 388, "_screen": 388, "poly1": 388, "poly2": 388, "shapelist": 388, "myshap": 388, "800080": 388, "picnam": 388, "nopic": 388, "backgroundimag": 388, "landscap": [388, 472], "canvwidth": 388, "canvheight": 388, "canvaswidth": 388, "canvasheight": 388, "1500": 388, "llx": 388, "urx": 388, "distort": 388, "octagon": 388, "acceler": [388, 466, 467, 471, 474, 478, 479, 485], "xdummi": 388, "ydummi": 388, "nim": 388, "minval": 388, "maxval": 388, "stake": 388, "cmode": 388, "turtlegraphicserror": 388, "thusli": 388, "480": 388, "turtlegraph": 388, "using_idl": 388, "_cfg": 388, "startx": 388, "leftright": 388, "starti": 388, "topbottom": 388, "200x200": 388, "titlebar": 388, "zoo": [388, 431], "setbg": 388, "type_": 388, "poli": [388, 466], "tooltip": [388, 485], "backgroundcolor": 388, "turtle_docstringdict": 388, "turtle_docstringdict_german": 388, "glingl": 388, "aon": 388, "classroom": [388, 485], "undobuffers": 388, "exampleturtl": 388, "examplescreen": 388, "docstringdict": 388, "turtle_docstringdict_italian": 388, "bytedesign": 388, "sourcecod": 388, "chao": 388, "verhulst": 388, "colormix": 388, "forest": 388, "fractalcurv": 388, "hilbert": 388, "koch": 388, "lindenmay": 388, "ethnomathemat": 388, "indian": 388, "kolam": 388, "minimal_hanoi": 388, "hanoi": 388, "disc": 388, "nimstick": 388, "minimalist": 388, "peac": 388, "penros": [388, 485], "aperiod": 388, "kite": 388, "dart": 388, "planet_and_moon": 388, "round_danc": 388, "danc": [388, 446], "sorting_anim": 388, "two_canvas": 388, "canvas": 388, "yinyang": 388, "keyreleas": 388, "tdemo_nim": 388, "tdemo_round_d": 388, "exec_bodi": 389, "__prepare__": [389, 393, 432, 479, 481, 485], "__mro_entries__": [389, 432, 482, 485], "listiter": 389, "t_origin": 389, "t_arg": 389, "guidanc": [389, 473, 485], "gen_func": [389, 485], "typing_extens": 390, "544": [390, 483, 485], "586": [390, 476, 483, 484, 485], "591": [390, 483, 485], "593": [390, 484, 485], "new_vector": 390, "connectionopt": 390, "broadcast_messag": 390, "some_id": [390, 481], "524313": [390, 481], "get_user_nam": 390, "user_id": 390, "user_a": 390, "42351": 390, "user_b": 390, "23413": 390, "54341": 390, "some_valu": 390, "adminuserid": 390, "prouserid": 390, "arg1typ": 390, "arg2typ": 390, "returntyp": 390, "get_next_item": 390, "async_queri": 390, "on_success": 390, "on_error": 390, "on_upd": 390, "paramspecvari": 390, "notify_by_email": 390, "loggedvar": 390, "zero_all_var": 390, "contravari": 390, "weirdtrio": 390, "linkedlist": 390, "vec": [390, 446], "inproduct": 390, "type1": 390, "aesthet": 390, "legacy_pars": 390, "hash_a": 390, "hash_b": 390, "typesaf": 390, "unpython": 390, "bucket": [390, 432], "enjoy": [390, 417], "unconstrain": 390, "with_lock": 390, "my_lock": 390, "sum_threadsaf": 390, "ct_co": 390, "basicus": 390, "prouser": 390, "teamus": 390, "make_new_us": 390, "user_class": 390, "new_non_team_us": 390, "validate_simpl": 390, "open_help": 390, "starship": [390, 471, 481], "enterprise_d": 390, "fastconnector": 390, "variad": [390, 445], "typehint": 390, "valuerang": 390, "include_extra": [390, 484, 485], "is_str": 390, "is_str_list": 390, "typea": 390, "typeb": 390, "kt": 390, "lookup_nam": 390, "print_capit": 390, "stringsubclass": 390, "with_circumfer": 390, "tire": 390, "rubber": 390, "add_log": 390, "add_two": 390, "genproto": 390, "poni": 390, "closabl": 390, "_field_typ": [390, 483, 484, 485], "first_us": 390, "count_word": 390, "keep_posit": 390, "t_co": 390, "add_unicode_checkmark": 390, "u2713": 390, "kt_co": 390, "vt_co": 390, "get_position_in_index": 390, "word_list": 390, "t_contra": 390, "v_co": 390, "yieldtyp": 390, "sendtyp": 390, "echo_round": 390, "infinite_stream": 390, "fetch_respons": 390, "expensive_mod": 390, "sometyp": [390, 480], "anothertyp": 390, "other_fun": 390, "unistr": [391, 466], "00c7": [391, 434], "cedilla": [391, 434], "0043": [391, 434], "0327": [391, 434], "2160": 391, "0049": 391, "kd": 391, "kc": 391, "solidus": 391, "etter": 391, "ppercas": 391, "u0660": [391, 466], "rabic": 391, "umber": 391, "namealias": [391, 439], "namedsequ": 391, "junit": [392, 467, 485], "taxonomi": 392, "unittestgui": 392, "travi": [392, 471, 472, 473, 485], "appveyor": 392, "teststringmethod": 392, "test_upp": 392, "test_isupp": 392, "test_split": 392, "000s": 392, "001s": 392, "test_module1": 392, "test_module2": 392, "test_modul": [392, 394], "testclass": 392, "test_method": 392, "test_someth": [392, 393, 394, 482], "foo_test": [392, 482], "sometest": [392, 482], "bar_test": [392, 482], "test_foo": [392, 394, 482], "footest": [392, 482], "project_directori": 392, "_test": [392, 477], "defaultwidgetsizetestcas": 392, "test_default_widget_s": 392, "widgettestcas": 392, "test_widget_res": 392, "suffer": [392, 393, 467, 468, 469], "test_widget": [392, 485], "testsometh": 392, "makesometh": 392, "makesomethingdb": 392, "deletesomethingdb": 392, "mytestcas": 392, "test_noth": 392, "test_format": 392, "test_windows_support": 392, "test_maybe_skip": 392, "external_resource_avail": 392, "005s": 392, "myskippedtestcas": 392, "test_not_run": 392, "expectedfailuretestcas": 392, "test_fail": 392, "skipunlesshasattr": 392, "numberstest": [392, 479], "test_even": [392, 479], "the_except": 392, "error_cod": 392, "assertraisesregexp": [392, 473, 475], "somewarn": 392, "legacy_funct": [392, 477], "frobnic": [392, 406], "assertregexpmatch": [392, 473, 477], "assertnotregexpmatch": [392, 473], "typeobj": 392, "seq_typ": 392, "assertxyy": 392, "_async_connect": 392, "asyncconnect": [392, 483], "test_respons": 392, "status_cod": [392, 483], "on_cleanup": 392, "testfunc": 392, "_removetestatindex": [392, 479], "synthet": [392, 485], "testcaseclass": 392, "unoffici": [392, 480], "use_load_test": [392, 480, 485], "sampletest": 392, "sampletestcas": 392, "test_on": [392, 394], "test_two": [392, 394], "test_thre": 392, "start_dir": [392, 485], "top_level_dir": 392, "loadtestsfrom": 392, "formatted_err": 392, "_texttestresult": 392, "resultclass": 392, "wd": [392, 404, 471, 473, 479, 481], "wa": 392, "defaulttest": [392, 479], "catchbreak": 392, "testprogram": 392, "testcase1": 392, "testcase2": 392, "testcase3": 392, "test_class": 392, "this_dir": 392, "package_test": 392, "basetestsuit": 392, "_errorhold": 392, "_connect": [392, 423], "createexpensiveconnectionobject": 392, "createconnect": 392, "closeconnect": 392, "test_signal_handl": 392, "replay": 393, "productionclass": [393, 394], "classname2": [393, 394], "classname1": [393, 394], "mockclass1": [393, 394], "mockclass2": [393, 394], "mock_method": [393, 394], "newkey": [393, 394], "newvalu": [393, 394], "foobarbaz": 393, "wheeeeee": 393, "specc": [393, 394], "autospec": [393, 394, 485], "mock_funct": 393, "fishi": 393, "new_cal": 393, "spec_set": [393, 394], "assret": [393, 485], "asert": [393, 485], "aseert": [393, 485], "assrt": [393, 485], "wow": 393, "any_ord": [393, 394], "some_mock": 393, "w00t": 393, "140161580456576": [393, 394], "mock_foo": [393, 394], "mockiti": 393, "this_foo": 393, "async_func": 393, "asyncmockmixin": 393, "_mock_cal": 393, "exampleclass": 393, "sync_foo": 393, "async_foo": 393, "a_mock": 393, "coroutine_mock": 393, "bang": 393, "not_a_child": 393, "thing1": 393, "thing2": 393, "unpatch": [393, 485], "normal_argu": 393, "mock_class": 393, "mockclass": 393, "mock_th": 393, "mock_stdout": 393, "non_existing_attribut": 393, "honour": [393, 485], "class_method": 393, "in_dict": 393, "testsampl": 393, "test_sampl": 393, "patched_foo": 393, "first_patch": 393, "second_patch": 393, "test_funct": 393, "mock_exit": 393, "new_mock": [393, 394], "mytest": [393, 394], "patcher1": 393, "patcher2": 393, "fiddlier": [393, 394], "bonus": [393, 467], "mock_ord": 393, "foo_on": 393, "foo_two": 393, "static_method": [393, 394], "mock1": 393, "mock2": 393, "foobl": [393, 394], "__div__": 393, "__getinitargs__": 393, "__getformat__": [393, 485], "__setformat__": [393, 485], "kall": [393, 470, 485], "abstracthttphandl": [393, 481, 485], "_noncallablemock__get_return_valu": 393, "_noncallablemock__get_side_effect": 393, "_noncallablemock__return_value_doc": 393, "_noncallablemock__set_return_valu": 393, "_noncallablemock__set_side_effect": 393, "my_mock": 393, "irrespect": 393, "read_data": [393, 450, 485], "deplet": 393, "rewound": 393, "fidd": 393, "bibbl": 393, "assret_called_once_with": 393, "dandi": 393, "assret_called_with": 393, "has_data": [393, 399, 479], "mock_request": 393, "somethingfortest": 393, "submock": 393, "attribute1": 393, "not_submock": 393, "sample_nam": 393, "new_attribut": 393, "attribute2": 393, "mock_inst": 394, "some_method": [394, 423], "old_method": 394, "smarter": [394, 475, 477, 485], "stronger": [394, 485], "file_handl": 394, "testabl": 394, "backendprovid": 394, "get_endpoint": 394, "create_cal": 394, "start_cal": 394, "mock_backend": 394, "mock_respons": 394, "mock_dat": 394, "mocksomeclass": 394, "not_a_test": 394, "whilst": [394, 485], "nuisanc": 394, "grob": 394, "mock_frob": 394, "copy_call_arg": 394, "copyingmock": 394, "mock_bar": 394, "mock_spam": 394, "create_patch": 394, "my_dict": 394, "mymock": 394, "has_been_cal": 394, "adaptor": 394, "blip": 394, "expected_cal": 394, "fifti": 394, "some_obj": 394, "match_foo": 394, "match_wrong": 394, "pyhamcrest": 394, "hamcrest": 394, "match_equ": 394, "gopher": 398, "hdl": [398, 430], "mailto": [398, 430], "mms": 398, "prospero": 398, "rsync": 398, "rtsp": 398, "rtspu": 398, "sftp": 398, "shttp": 398, "snew": 398, "wai": 398, "urlstr": 398, "allow_frag": 398, "netloc": [398, 473, 477], "1808": [398, 480, 485], "7eguido": 398, "max_num_field": [398, 485], "doseq": 398, "2396": [398, 473, 480, 482, 485], "unreserv": 398, "20ni": 398, "b1o": 398, "2fel": 398, "quote_via": [398, 480, 485], "std66": 398, "2732": [398, 473, 477], "2368": 398, "1738": 398, "cadefault": 399, "_proxi": [399, 485], "handler_ord": 399, "firefox": [399, 407, 471, 485], "gecko": 399, "20071127": 399, "camel": [399, 472, 477], "request_host": 399, "no_proxi": [399, 485], "cern": 399, "ncsa": 399, "uiuc": 399, "basicauth": 399, "passwd_mgr": 399, "40x": 399, "unredirect": 399, "header_valu": 399, "get_host": [399, 479], "get_selector": [399, 479], "is_unverifi": [399, 479], "http_error_404": 399, "_open": [399, 485], "http_error_": 399, "_error": 399, "_request": 399, "_respons": 399, "adopt": [399, 436, 467, 468, 469, 472, 484], "newurl": 399, "http_error_30": 399, "authuri": 399, "authreq": 399, "2397": 399, "equiv": 399, "xhtm": 399, "ngot": 399, "auth_handl": 399, "pdq": 399, "mahler": 399, "8092": 399, "klem": 399, "kadidd": 399, "ehopp": 399, "proxy_handl": 399, "3128": 399, "proxy_auth_handl": 399, "contact": [399, 411, 430], "addhead": 399, "musi": [399, 400], "requestb": 399, "xrbl82xr": 399, "reporthook": 399, "local_filenam": 399, "30x": [399, 478], "maxtri": 399, "550": 399, "_urlopen": 399, "robotstxt": 400, "userag": 400, "crawl": [400, 481, 485], "requestr": 400, "sitemap": 400, "rp": 400, "rrate": 400, "lanc": [401, 430], "ellinghous": [401, 430], "jansen": [401, 430, 468, 469, 480, 485], "in_fil": 401, "out_fil": [401, 417], "time_low": 402, "time_mid": 402, "time_hi_vers": 402, "clock_seq_hi_vari": 402, "clock_seq_low": 402, "12345678": 402, "567812345678": 402, "12345678123456781234567812345678": 402, "x34": 402, "x56": [402, 466], "x78": 402, "0x12345678": 402, "0x1234": 402, "0x5678": 402, "0x12": 402, "0x34": 402, "0x567812345678": 402, "0x12345678123456781234567812345678": 402, "clock_seq": 402, "administ": [402, 466, 472, 482, 485], "ncs": 402, "a8098c1a": [402, 471], "f86e": [402, 471], "11da": [402, 471], "bd1a": [402, 471], "00112444be1e": [402, 471], "6fa459ea": [402, 471], "ee8a": [402, 471], "3ca4": [402, 471], "894e": [402, 471], "db77e160355": [402, 471], "16fd2706": [402, 471], "8baf": [402, 471], "433b": [402, 471], "82eb": [402, 471], "8c7fada847da": [402, 471], "886313e1": [402, 471], "3b8a": [402, 471], "5372": [402, 471], "9b90": [402, 471], "0c9aee199e5d": [402, 471], "00010203": 402, "0405": 402, "0607": 402, "0809": 402, "0a0b0c0d0e0f": 402, "x05": 402, "x0e": 402, "x0f": 402, "python35": [403, 457], "myenv": 403, "dep": [403, 485], "env_dir": 403, "powershel": [403, 465, 483, 485], "executionpolici": 403, "remotesign": 403, "currentus": 403, "zsh": 403, "csh": [403, 457, 479], "tcsh": [403, 470], "virtual_env": [403, 480], "system_site_packag": 403, "with_pip": [403, 479], "upgrade_dep": 403, "holder": [403, 430, 473, 485], "redirector": [403, 482, 485], "__venv_dir__": 403, "__venv_name__": [403, 484], "__venv_prompt__": [403, 484, 485], "__venv_bin_name__": 403, "__venv_python__": 403, "extendedenvbuild": 403, "easy_instal": 403, "nodist": 403, "nopip": 403, "install_setuptool": 403, "install_pip": 403, "binpath": 403, "bin_path": 403, "distpath": 403, "env_ex": 403, "ez_setup": 403, "system_sit": 403, "use_symlink": 403, "warrant": [404, 474], "user_n": 404, "fxn": 404, "__warningregistry__": [404, 485], "wave_format_pcm": 405, "wave_format_extens": 405, "subformat": 405, "defici": 405, "0x7fc859830220": 406, "lifecycl": [406, 473, 479], "do_something_us": 406, "extendedref": 406, "__counter": 406, "_id2obj_dict": 406, "id2obj": 406, "kenni": [406, 479], "newobj": [406, 485], "_final": 406, "unloading_modul": 406, "autorais": [407, 471], "galeon": 407, "epiphani": 407, "skipston": 407, "backgroundbrows": 407, "kfmclient": 407, "konqueror": [407, 471], "kfm": 407, "mosaic": 407, "genericbrows": 407, "elink": [407, 471], "w3m": 407, "windowsdefault": 407, "macosxosascript": 407, "safari": 407, "chrome": [407, 478, 485], "chromium": [407, 478], "kde": 407, "kdedir": 407, "hkey": 409, "computernam": 409, "subkey": [409, 465], "wow64": 409, "windir": 409, "flusher": 409, "se_restore_privileg": 409, "regloadkey": 409, "1601": 409, "sebackupprivileg": 409, "security_attribut": 409, "_winreg": [409, 466, 472, 473, 474], "subordin": [409, 473], "standard_rights_requir": 409, "standard_rights_writ": 409, "standard_rights_read": 409, "speaker": 410, "hertz": 410, "767": 410, "waveform": 410, "systemasterisk": 410, "systemexclam": 410, "systemhand": 410, "systemquest": 410, "systemdefault": 410, "url_schem": 411, "fastcgi": 411, "include_queri": 411, "path_info": 411, "query_str": 411, "http_host": 411, "simple_app": 411, "start_respons": [411, 477, 485], "ret": 411, "hop": 411, "filelik": 411, "nonexist": [411, 485], "base_environ": 411, "middlewar": 411, "nonconform": 411, "validator_app": 411, "run_onc": 411, "allowpathinfo": 411, "metabas": 411, "allowpathinfoforscriptmap": 411, "path_transl": 411, "vhost": 411, "iis7": 411, "scgi": 411, "retarget": 411, "spit": 411, "hello_world_app": 411, "1014": 412, "microsystem": 412, "1832": 412, "pack_typ": 412, "pack_uint": 412, "pack_int": 412, "pack_enum": 412, "pack_bool": 412, "pack_uhyp": 412, "pack_hyp": 412, "pack_item": 412, "unpack_typ": 412, "unpack_item": 412, "abus": [413, 440, 477, 485], "billion": [413, 485], "laugh": [413, 478, 485], "blowup": 413, "bomb": [413, 426, 485], "relianc": [413, 485], "expat_vers": 413, "parsererror": [413, 485], "unexpand": 413, "xmlrpclib": [413, 468, 469, 470, 471, 472, 473, 474, 485], "countermeasur": 413, "omg": [414, 415], "python_dom": 414, "qualifiednam": 414, "element_nod": 414, "attribute_nod": 414, "text_nod": [414, 415], "cdata_section_nod": 414, "entity_nod": 414, "processing_instruction_nod": [414, 415], "comment_nod": 414, "document_nod": 414, "document_type_nod": 414, "notation_nod": 414, "uncontroversi": 414, "newchild": 414, "refchild": 414, "oldchild": 414, "oldattr": 414, "newattr": [414, 468], "removenameditem": 414, "domstring_size_err": 414, "hierarchy_request_err": 414, "index_size_err": 414, "inuse_attribute_err": 414, "invalid_access_err": 414, "invalid_character_err": 414, "invalid_modification_err": 414, "invalid_state_err": 414, "namespace_err": 414, "not_found_err": 414, "not_supported_err": 414, "no_data_allowed_err": 414, "no_modification_allowed_err": 414, "syntax_err": 414, "wrong_document_err": 414, "domstr": [414, 415], "somevalu": 414, "anothervalu": 414, "_get_somevalu": 414, "_get_anothervalu": 414, "_set_anothervalu": 414, "corba": 414, "profici": 415, "dom1": 415, "datasourc": 415, "dom2": 415, "dom3": 415, "myxml": 415, "filename_or_fil": 415, "grasp": 415, "newdoc": 415, "some_tag": 415, "top_el": 415, "addind": 415, "newl": 415, "subnod": 415, "prologu": 415, "slideshow": 415, "handleslideshow": 415, "handleslideshowtitl": 415, "handletoc": 415, "handleslid": 415, "handleslidetitl": 415, "handlepoint": 415, "_get_foo": 415, "_set_foo": 415, "domtimestamp": 415, "entityrefer": 415, "sales_item": 416, "start_docu": 416, "end_docu": 416, "processing_instruct": 416, "ignorable_whitespac": 416, "documentfactori": 416, "stream_or_str": 416, "celementtre": [417, 471, 477, 478, 485], "liechtenstein": 417, "gdppc": 417, "141100": 417, "switzerland": 417, "singapor": 417, "59900": 417, "malaysia": 417, "panama": 417, "13600": 417, "costa": 417, "rica": 417, "colombia": 417, "country_data": 417, "country_data_as_str": 417, "mytag": 417, "sometext": 417, "0x7fa66db2be58": 417, "new_rank": 417, "sometag": 417, "fiction": 417, "actor": [417, 445, 483], "lancelot": [417, 446], "archi": 417, "leach": 417, "sir": [417, 445, 475, 483], "gunther": 417, "clement": [417, 481, 485], "xml_text": 417, "real_person": 417, "countrydata": 417, "grand": 417, "dublin": 417, "purl": 417, "grandchildren": [417, 485], "xml_data": 417, "normalis": 417, "c14n_output": 417, "inputfil": 417, "with_com": 417, "strip_text": 417, "rewrite_prefix": 417, "qname_aware_tag": 417, "qname_aware_attr": 417, "exclude_attr": 417, "exclude_tag": 417, "xml_declar": [417, 473, 485], "default_namespac": [417, 473, 485], "short_empty_el": [417, 421, 479], "xi": 417, "xpointer": 417, "para": 417, "base_url": 417, "max_depth": 417, "unprefix": [417, 485], "convey": 417, "perceptu": 417, "reorder_attribut": 417, "0xb77e6fac": 417, "0xb77ec26c": 417, "0xb77ec2ac": 417, "0xb77ec1cc": 417, "text_or_uri": 417, "element_factori": 417, "comment_factori": 417, "pi_factori": 417, "insert_com": 417, "insert_pi": 417, "pis": 417, "pubid": 417, "attrs_dict": 417, "maxdepth": 417, "examplexml": 417, "parser_list": [418, 485], "create_pars": [418, 420], "filename_or_stream": 418, "focal": 418, "sax2lib": 419, "declhandl": 419, "documenthandl": [419, 420], "unrecover": 419, "recover": 419, "public_id": 419, "system_id": [419, 420], "propertynam": 420, "formed": 420, "bytefil": 420, "charfil": 420, "amp": [421, 477], "use_datetim": [423, 471], "use_builtin_typ": [423, 424, 484], "safetransport": [423, 485], "ontosi": 423, "i4": 423, "i8": [423, 472], "biginteg": 423, "2147483648": 423, "2147483647": [423, 439, 471], "nil": [423, 469], "bigdecim": 423, "python_logo": 423, "fetched_python_logo": 423, "boxcar": 423, "methodrespons": 423, "betti": 423, "userland": 423, "getstatenam": 423, "proxiedtransport": 423, "proxy_head": 423, "requesthandl": 424, "logrequest": 424, "allow_dotted_nam": 424, "_dispatch": 424, "intrud": 424, "rpc2": [424, 471], "adder_funct": 424, "exampleservic": 424, "getdata": 424, "currenttim": 424, "getcurrenttim": 424, "nkeyboard": 424, "request_text": 424, "server_titl": 424, "server_document": 424, "pyz": [425, 480, 485], "mainfn": 425, "deflat": [425, 428, 485], "old_arch": 425, "new_arch": 425, "pyzw": [425, 485], "win32_lean_and_mean": 425, "wwinmain": 425, "hinstanc": 425, "hprevinst": 425, "lpwstr": 425, "lpcmdline": 425, "wmain": 425, "myargv": 425, "_alloca": 425, "__argc": 425, "__wargv": 425, "zastub": 425, "pkzip": [426, 427, 466], "zip64": [426, 471, 485], "phil": [426, 427, 472, 485], "katz": [426, 427], "allowzip64": [426, 479, 485], "strict_timestamp": [426, 485], "2107": [426, 485], "myzip": 426, "force_zip64": 426, "zipextfil": [426, 477, 485], "appreci": [426, 430], "zinfo_or_arcnam": 426, "grandchild": 426, "filterfunc": [426, 479], "zf": 426, "myprog": 426, "notest": 426, "testal": [426, 472], "bogus": [426, 473, 485], "ahlstrom": [427, 466, 469], "archivepath": 427, "8467": [427, 469], "jwzthread": [427, 469], "adler": [428, 430], "z_best_spe": 428, "z_best_compress": 428, "z_no_compress": 428, "z_default_compress": 428, "wbit": 428, "max_wbit": 428, "memlevel": 428, "def_mem_level": 428, "z_default_strategi": 428, "zdict": [428, 485], "z_filter": 428, "z_huffman_on": 428, "z_rle": 428, "z_fix": 428, "def_buf_s": 428, "z_no_flush": 428, "z_partial_flush": 428, "z_sync_flush": 428, "z_full_flush": 428, "z_block": 428, "z_finish": 428, "unconsum": 428, "los_angel": [429, 484], "dt_add": 429, "dt_utc": 429, "pythontzpath": 429, "fobj": [429, 442], "only_key": 429, "new_york": 429, "asia": 429, "tokyo": 429, "cldr": 429, "kwajalein": 429, "01t03": 429, "europe_berlin_pkl": 429, "berlin": 429, "europe_berlin_pkl_nc": 429, "posixrul": 429, "cautionari": [429, 470], "1990": 430, "reston": 430, "pythonlab": [430, 466, 468], "opensourc": 430, "license": 430, "herebi": 430, "nonexclus": 430, "royalti": 430, "herein": 430, "merchant": 430, "infring": 430, "consequenti": 430, "breach": 430, "partnership": 430, "ventur": 430, "trademark": 430, "saratoga": 430, "santa": 430, "clara": 430, "95051": 430, "1895": 430, "preston": [430, 482], "20191": [430, 485], "1013": 430, "feder": 430, "intellectu": 430, "commonwealth": 430, "virginia": 430, "netherland": 430, "profit": 430, "tortious": 430, "_random": [430, 485], "sci": 430, "hiroshima": 430, "mat": [430, 473, 484, 485], "mt": 430, "mt2002": 430, "emt19937ar": 430, "mt19937": 430, "takuji": 430, "makoto": [430, 485], "init_genrand": 430, "init_by_array": 430, "init_key": 430, "key_length": 430, "redistribut": [430, 485], "exemplari": 430, "procur": 430, "tort": 430, "emt": 430, "1996": 430, "rush": [430, 466], "timothi": 430, "malley": [430, 469], "timo": [430, 485], "alum": 430, "industri": 430, "whielacronx": 430, "mojam": 430, "montanaro": [430, 466, 469, 470, 471, 472], "bioreason": 430, "automatrix": 430, "cathedr": 430, "republ": 430, "lab": [430, 444, 466, 468, 469], "laboratori": 430, "sublicens": 430, "sell": [430, 471], "whom": 430, "furnish": 430, "noninfring": 430, "doug": [430, 485], "pyhash": [430, 460, 485], "marek": 430, "majkowski": 430, "dan": [430, 470, 471, 477, 478, 479, 480, 484, 485], "popcount": 430, "majek": 430, "csiphash": 430, "supercop": 430, "crypto_auth": 430, "djb": 430, "little2": 430, "131002": 430, "siphash": [430, 479, 485], "gay": [430, 473, 475, 476, 479, 481, 482, 485], "20220517033456": 430, "netlib": 430, "lucent": 430, "ssleay": 430, "young": 430, "eay": 430, "cryptsoft": 430, "hudson": [430, 467, 468, 469, 471, 485], "tjh": 430, "ahear": 430, "lhash": 430, "rouin": 430, "clark": [430, 478, 485], "loup": 430, "gailli": 430, "misrepres": 430, "jloup": 430, "madler": 430, "alumni": 430, "caltech": 430, "owen": 430, "_decim": [430, 460, 478, 485], "stefan": [430, 473, 478, 479, 480, 481, 482, 483, 484, 485], "krah": [430, 473, 478, 481, 485], "xmltestdata": 430, "c14n2": 430, "ercim": 430, "keio": 430, "beihang": 430, "incarn": 431, "if_stmt": [431, 435], "while_stmt": [431, 435], "for_stmt": [431, 435], "try_stmt": [431, 435], "with_stmt": [431, 435], "match_stmt": [431, 435], "funcdef": 431, "async_with_stmt": 431, "async_for_stmt": 431, "async_funcdef": 431, "stmt_list": [431, 441], "compound_stmt": [431, 435, 441], "simple_stmt": [431, 435], "assignment_express": [431, 434, 435], "target_list": [431, 434, 440], "expression_list": [431, 434, 440, 441], "try1_stmt": 431, "try2_stmt": 431, "0x10efad080": 431, "0x10efad040": 431, "with_stmt_cont": 431, "with_item": [431, 435], "hit_except": 431, "subject_expr": [431, 435], "case_block": [431, 435], "star_named_express": [431, 435], "named_express": [431, 435], "prerequisit": [431, 474], "636": [431, 445, 476], "bubbl": [431, 485], "ebnf": [431, 435], "open_sequence_pattern": [431, 435], "as_pattern": [431, 435], "or_pattern": [431, 435], "literal_pattern": [431, 435], "capture_pattern": [431, 435], "wildcard_pattern": [431, 435], "value_pattern": [431, 435], "sequence_pattern": [431, 435], "mapping_pattern": [431, 435], "class_pattern": [431, 435], "closed_pattern": [431, 435], "signed_numb": [431, 435], "name_or_attr": [431, 435], "name1": [431, 471], "name2": [431, 471], "maybe_sequence_pattern": [431, 435], "maybe_star_pattern": [431, 435], "star_pattern": [431, 435], "p3": 431, "items_pattern": [431, 435], "key_value_pattern": [431, 435], "double_star_pattern": [431, 435], "pattern_argu": 431, "positional_pattern": [431, 435], "keyword_pattern": [431, 435], "parameter_list": [431, 434], "defparamet": 431, "parameter_list_no_poson": 431, "parameter_list_stararg": 431, "614": [431, 484, 485], "whats_on_the_telli": 431, "570": [431, 483, 485], "3107": [431, 445, 474, 480, 482], "param1": 431, "param2": 431, "do_stuff": 431, "some_coroutin": 431, "suite2": 431, "aenter": 431, "aexit": 431, "neumann": 432, "illus": [432, 477], "merci": 432, "dwarf": 432, "affix": [432, 485], "cell_cont": 432, "0x2000": 432, "0x10": 432, "0x1000": 432, "precari": 432, "parentclass": 432, "ocert": [432, 459], "asymmetri": 432, "verbosemodul": 432, "__objclass__": 432, "unlist": 432, "philosoph": 432, "australianphilosoph": 432, "bruce": [432, 485], "mysubclass": 432, "__classcell__": [432, 481, 483, 485], "3135": [432, 473, 474], "boundless": 432, "class_of_obj": 432, "breakfast": 432, "a_tupl": 432, "unbind": [433, 485], "repair": [433, 465, 485], "offend": [433, 467], "bnf": [434, 438, 467], "othernam": [434, 466], "enclosur": 434, "parenth_form": 434, "list_display": 434, "dict_display": 434, "set_display": 434, "generator_express": 434, "yield_atom": 434, "__spam": [434, 444], "_ham__spam": 434, "stringliter": 434, "bytesliter": 434, "imagnumb": 434, "starred_express": [434, 435, 440], "unparenthes": [434, 476, 484, 485], "comp_for": 434, "or_test": 434, "comp_it": 434, "comp_if": 434, "starred_list": 434, "datum": [434, 440], "key_datum_list": 434, "dict_comprehens": 434, "key_datum": 434, "or_expr": [434, 439], "yield_express": [434, 439, 440], "attributeref": [434, 440], "slice_list": 434, "slice_item": 434, "proper_slic": 434, "positional_argu": 434, "starred_and_keyword": 434, "keywords_argu": 434, "positional_item": 434, "keyword_item": 434, "x1": [434, 445, 476], "x3": 434, "x4": 434, "ym": 434, "await_expr": 434, "u_expr": 434, "m_expr": 434, "a_expr": 434, "shift_expr": [434, 435], "and_expr": 434, "xor_expr": 434, "comp_oper": 434, "op1": 434, "op2": 434, "opn": 434, "reflex": 434, "and_test": 434, "not_test": 434, "conditional_express": [434, 439], "lambda_expr": 434, "starred_item": 434, "expr4": 434, "expr5": 434, "roundoff": 434, "0041": 434, "precompos": 434, "u00c7": 434, "u0043": 434, "u0327": 434, "_not_": 435, "_pypegen_pars": 435, "reserved_keyword": 435, "n_keyword_list": 435, "start_rul": 435, "file_rul": 435, "interactive_rul": 435, "eval_rul": 435, "py_func_type_input": 435, "func_type_rul": 435, "py_fstring_input": 435, "fstring_rul": 435, "mod_ti": [435, 476, 485], "_pypegen_make_modul": 435, "statement_newlin": 435, "_pyast_interact": 435, "_pyast_express": 435, "type_express": 435, "_pyast_functiontyp": 435, "fstring": [435, 485], "expr_ti": 435, "star_express": 435, "asdl_expr_seq": 435, "_pypegen_seq_append_to_end": 435, "asdl_seq": 435, "_pypegen_singleton_seq": 435, "asdl_stmt_seq": 435, "_pypegen_seq_flatten": 435, "stmt_ti": 435, "_pyast_pass": 435, "_pypegen_interactive_exit": 435, "_pyast_expr": 435, "return_stmt": [435, 440], "import_stmt": [435, 440], "raise_stmt": [435, 440], "del_stmt": [435, 440], "yield_stmt": [435, 440], "assert_stmt": [435, 440], "_pyast_break": 435, "_pyast_continu": 435, "global_stmt": [435, 440], "nonlocal_stmt": [435, 440], "function_def": 435, "class_def": 435, "annotated_rh": 435, "yield_expr": 435, "check_vers": 435, "_pyast_annassign": 435, "_pypegen_set_expr_context": 435, "single_target": 435, "single_subscript_attribute_target": 435, "star_target": 435, "tc": 435, "_pyast_assign": 435, "new_type_com": 435, "_pyast_augassign": 435, "invalid_assign": 435, "augoper": 435, "_pypegen_augoper": 435, "_pyast_glob": 435, "asdl_identifier_seq": 435, "_pypegen_map_names_to_id": 435, "_pyast_nonloc": 435, "_pyast_assert": 435, "del_target": 435, "_pyast_delet": 435, "invalid_del_stmt": 435, "dotted_as_nam": 435, "_pyast_import": 435, "dotted_nam": 435, "import_from_target": 435, "_pyast_importfrom": 435, "_pypegen_seq_count_dot": 435, "asdl_alias_seq": 435, "import_from_as_nam": 435, "alias_ti": 435, "_pypegen_alias_for_star": 435, "invalid_import_from_target": 435, "_pyast_alia": 435, "_pypegen_join_names_with_dot": 435, "invalid_if_stmt": 435, "elif_stmt": 435, "_pyast_if": 435, "else_block": 435, "invalid_elif_stmt": 435, "invalid_else_stmt": 435, "invalid_while_stmt": 435, "_pyast_whil": 435, "invalid_for_stmt": 435, "_pyast_for": 435, "_pyast_asyncfor": 435, "invalid_for_target": 435, "invalid_with_stmt_ind": 435, "asdl_withitem_seq": 435, "_pyast_with": 435, "_pyast_asyncwith": 435, "invalid_with_stmt": 435, "withitem_ti": 435, "_pyast_withitem": 435, "invalid_with_item": 435, "invalid_try_stmt": 435, "finally_block": 435, "_pyast_tri": 435, "asdl_excepthandler_seq": 435, "except_block": 435, "excepthandler_ti": 435, "invalid_except_stmt_ind": 435, "_pyast_excepthandl": 435, "invalid_except_stmt": 435, "invalid_finally_stmt": 435, "asdl_match_case_seq": 435, "_pyast_match": 435, "invalid_match_stmt": 435, "_pyast_tupl": 435, "_pypegen_seq_insert_in_front": 435, "match_case_ti": 435, "invalid_case_block": 435, "_pyast_match_cas": 435, "pattern_ti": 435, "asdl_pattern_seq": 435, "_pyast_matchsequ": 435, "pattern_capture_target": 435, "_pyast_matcha": 435, "invalid_as_pattern": 435, "asdl_seq_len": 435, "asdl_seq_get": 435, "_pyast_matchor": 435, "_pyast_matchvalu": 435, "complex_numb": 435, "_pyast_matchsingleton": 435, "literal_expr": 435, "_pyast_const": 435, "signed_real_numb": 435, "imaginary_numb": 435, "_pyast_binop": 435, "_pyast_unaryop": 435, "real_numb": 435, "_pypegen_ensure_r": 435, "_pypegen_ensure_imaginari": 435, "_pyast_attribut": 435, "_pyast_matchstar": 435, "_pyast_matchmap": 435, "_pypegen_get_pattern_key": 435, "_pypegen_get_pattern": 435, "keypatternpair": 435, "_pypegen_key_pattern_pair": 435, "_pyast_matchclass": 435, "invalid_class_pattern": 435, "_pyast_return": 435, "_pyast_rais": 435, "function_def_raw": 435, "_pypegen_function_def_decor": 435, "invalid_def_raw": 435, "func_type_com": 435, "_pyast_functiondef": 435, "arguments_ti": 435, "_pypegen_empty_argu": 435, "_pyast_asyncfunctiondef": 435, "invalid_double_type_com": 435, "invalid_paramet": 435, "slash_no_default": 435, "asdl_arg_seq": 435, "param_no_default": 435, "param_with_default": 435, "star_etc": 435, "_pypegen_make_argu": 435, "slash_with_default": 435, "slashwithdefault": 435, "_pypegen_slash_with_default": 435, "staretc": 435, "param_maybe_default": 435, "_pypegen_star_etc": 435, "invalid_star_etc": 435, "arg_ti": 435, "_pypegen_add_type_comment_to_arg": 435, "namedefaultpair": 435, "_pypegen_name_default_pair": 435, "_pyast_arg": 435, "class_def_raw": 435, "_pypegen_class_def_decor": 435, "invalid_class_def_raw": 435, "_pyast_classdef": 435, "invalid_block": 435, "bitwise_or": 435, "_pyast_star": 435, "_pyast_namedexpr": 435, "invalid_named_express": 435, "invalid_express": 435, "invalid_legacy_express": 435, "_pyast_ifexp": 435, "lambdef": 435, "lambda_param": 435, "_pyast_lambda": 435, "invalid_lambda_paramet": 435, "lambda_paramet": 435, "lambda_slash_no_default": 435, "lambda_param_no_default": 435, "lambda_param_with_default": 435, "lambda_star_etc": 435, "lambda_slash_with_default": 435, "lambda_param_maybe_default": 435, "lambda_kwd": 435, "invalid_lambda_star_etc": 435, "_pyast_boolop": 435, "compare_op_bitwise_or_pair": 435, "_pyast_compar": 435, "asdl_int_seq": 435, "_pypegen_get_cmpop": 435, "_pypegen_get_expr": 435, "cmpopexprpair": 435, "eq_bitwise_or": 435, "noteq_bitwise_or": 435, "lte_bitwise_or": 435, "lt_bitwise_or": 435, "gte_bitwise_or": 435, "gt_bitwise_or": 435, "notin_bitwise_or": 435, "in_bitwise_or": 435, "isnot_bitwise_or": 435, "is_bitwise_or": 435, "_pypegen_cmpop_expr_pair": 435, "tok": 435, "_pypegen_check_barry_as_flufl": 435, "bitwise_xor": 435, "bitwise_and": 435, "await_primari": 435, "_pyast_await": 435, "_pyast_cal": 435, "_pyast_subscript": 435, "_pyast_slic": 435, "_pypegen_concatenate_str": 435, "_pyast_list": 435, "for_if_claus": 435, "_pyast_listcomp": 435, "invalid_comprehens": 435, "invalid_group": 435, "_pyast_generatorexp": 435, "_pyast_set": 435, "_pyast_setcomp": 435, "double_starred_kvpair": 435, "_pyast_dict": 435, "_pypegen_get_key": 435, "_pypegen_get_valu": 435, "invalid_double_starred_kvpair": 435, "kvpair": 435, "_pyast_dictcomp": 435, "invalid_dict_comprehens": 435, "keyvaluepair": 435, "_pypegen_key_value_pair": 435, "asdl_comprehension_seq": 435, "comprehension_ti": 435, "_pyast_comprehens": 435, "_pyast_yieldfrom": 435, "_pyast_yield": 435, "invalid_argu": 435, "_pypegen_collect_call_seq": 435, "_pypegen_dummy_nam": 435, "check_null_allow": 435, "_pypegen_seq_extract_starred_expr": 435, "asdl_keyword_seq": 435, "_pypegen_seq_delete_starred_expr": 435, "kwarg_or_star": 435, "kwarg_or_double_star": 435, "_pypegen_join_sequ": 435, "keywordorstar": 435, "invalid_kwarg": 435, "_pypegen_keyword_or_star": 435, "keyword_ti": 435, "_pyast_keyword": 435, "star_targets_list_seq": 435, "star_targets_tuple_seq": 435, "target_with_star_atom": 435, "t_primari": 435, "t_lookahead": 435, "star_atom": 435, "del_t_atom": 435, "raise_syntax_error_known_loc": 435, "raise_syntax_error_known_rang": 435, "_pypegen_get_last_comprehension_item": 435, "pypegen_last_item": 435, "_pypegen_nonparen_genexp_in_cal": 435, "_pypegen_arguments_parsing_error": 435, "_without_invalid": 435, "expression_without_invalid": 435, "_pypegen_check_legacy_stmt": 435, "kf": 435, "dsfsdf": 435, "forgot": [435, 476], "_pypegen_get_expr_nam": 435, "invalid_ann_assign_target": 435, "raise_syntax_error_invalid_target": 435, "raise_indentation_error": 435, "invalid_parameters_help": 435, "invalid_lambda_parameters_help": 435, "raise_syntax_error": 435, "for_target": 435, "raise_syntax_error_starting_from": 435, "invalid_class_argument_pattern": 435, "pypegen_first_item": 435, "invalid_kvpair": 435, "raise_error_known_loc": 435, "anew": [436, 484, 485], "reinitialis": 436, "mpf": 436, "_init_module_attr": 436, "crucial": [436, 466], "atyp": 436, "searchabl": [436, 485], "subpackage1": 436, "modulex": 436, "moduley": 436, "subpackage2": 436, "modulez": 436, "modulea": 436, "lloyd": 438, "hugunin": 438, "lc_letter": 438, "vim": [439, 463, 479], "fileencod": 439, "bram": [439, 468], "moolenaar": 439, "2100": 439, "maart": 439, "mei": 439, "juni": 439, "augustus": 439, "septemb": [439, 466, 471, 478, 480], "oktob": 439, "uax": 439, "3131": [439, 474, 485], "xid_start": 439, "xid_continu": 439, "other_id_start": 439, "id_start": 439, "other_id_continu": 439, "id_continu": 439, "connector": 439, "proplist": 439, "normat": 439, "derivedcoreproperti": 439, "breakag": [439, 466, 467, 469, 482, 485], "stringprefix": 439, "shortstr": 439, "longstr": 439, "shortstringitem": 439, "longstringitem": 439, "shortstringchar": 439, "stringescapeseq": 439, "longstringchar": 439, "bytesprefix": 439, "shortbyt": 439, "longbyt": 439, "shortbytesitem": 439, "longbytesitem": 439, "shortbyteschar": 439, "bytesescapeseq": 439, "longbyteschar": 439, "ur": [439, 474, 485], "reintroduc": [439, 476, 485], "codebas": [439, 479, 480], "ooo": 439, "xxxx": [439, 485], "xxxxxxxx": 439, "mistyp": 439, "literal_char": 439, "replacement_field": 439, "f_express": 439, "34567": [439, 481], "0x400": 439, "mill": 439, "decinteg": 439, "bininteg": 439, "octinteg": 439, "hexinteg": 439, "nonzerodigit": 439, "bindigit": 439, "0o177": 439, "0b100110111": 439, "79228162514264337593543950336": 439, "0o377": [439, 485], "0xdeadbeef": 439, "100_000_000_000": 439, "0b_1110_0101": 439, "pointfloat": 439, "exponentfloat": 439, "digitpart": 439, "077e010": 439, "77e10": 439, "14e": 439, "14_15_93": 439, "14j": 439, "10j": 439, "001j": 439, "1e100j": 439, "14_15_93j": 439, "expression_stmt": 440, "assignment_stmt": 440, "augmented_assignment_stmt": 440, "annotated_assignment_stmt": 440, "pass_stmt": 440, "break_stmt": 440, "continue_stmt": 440, "future_stmt": 440, "3132": [440, 474], "augtarget": 440, "augop": 440, "expression1": 440, "expression2": 440, "tracebackobj": 440, "relative_modul": 440, "fbb": 440, "subpkg2": 440, "subpkg1": 440, "3104": [440, 474], "pythonrc": 442, "startup_fil": 442, "awk": [443, 466], "smalltak": 444, "pyhon": [444, 454], "the_answ": 444, "scope_test": 444, "do_loc": 444, "do_nonloc": 444, "do_glob": 444, "realpart": 444, "imagpart": 444, "canin": 444, "fido": 444, "buddi": 444, "add_trick": 444, "warehous": [444, 477], "w2": 444, "addtwic": 444, "derivedclassnam": 444, "baseclassnam": 444, "base3": 444, "_spam": 444, "items_list": 444, "__updat": 444, "mappingsubclass": 444, "_mapping__upd": 444, "_mappingsubclass__upd": 444, "str_iter": 444, "0x10c90e650": 444, "rev": 444, "0x00a1db50": 444, "golf": 444, "xvec": 444, "yvec": 444, "260": [444, 465, 473, 481], "unique_word": 444, "valedictorian": 444, "gpa": 444, "graduat": [444, 480, 483], "defenestr": 445, "han": [445, 469, 476, 485], "onor": 445, "active_us": 445, "myemptyclass": 445, "initlog": 445, "rust": 445, "http_error": [445, 476], "teapot": [445, 476, 485], "where_i": 445, "grass": [445, 476], "987": [445, 453, 454], "1597": 445, "10042ed0": 445, "fib2": [445, 454], "f100": 445, "ask_ok": 445, "ye": 445, "vooooom": 445, "bereft": 445, "daisi": 445, "cheeseshop": 445, "limburg": 445, "runni": 445, "shopkeep": 445, "palin": 445, "shop": [445, 458], "pos1": 445, "pos2": 445, "pos_or_kwd": 445, "kwd1": 445, "kwd2": 445, "standard_arg": 445, "pos_only_arg": 445, "kwd_only_arg": 445, "combined_exampl": 445, "pos_on": 445, "kwd_on": 445, "write_multiple_item": 445, "bleedin": 445, "demis": 445, "make_incrementor": 445, "uppercamelcas": 445, "lowercase_with_underscor": 445, "kiwi": 446, "tangerin": 446, "grape": 446, "7j": 446, "freshfruit": 446, "loganberri": 446, "passion": 446, "weapon": 446, "1416": 446, "14159": [446, 448], "comprehes": 446, "3x4": 446, "transposed_row": 446, "88888": 446, "basket": 446, "crabgrass": 446, "alacazam": [446, 470], "tel": 446, "sape": 446, "4139": 446, "brave": 446, "tic": 446, "tac": 446, "toe": 446, "raw_data": 446, "filtered_data": 446, "string3": 446, "trondheim": 446, "hammer": [446, 466], "non_nul": 446, "this_fail": 447, "hither": 447, "flew": 447, "bool_return": 447, "0001100110011001100110011001100110011001100110011": 448, "3602879701896397": 448, "10000000000000001": 448, "12g": [448, 466], "peril": 448, "3537115888337719": 448, "1125899906842624": 448, "921f9f01b866ep": 448, "7205759403792794": 448, "17f": 448, "36028797018963968": 448, "referendum": 450, "yes_vot": 450, "42_572_654": 450, "no_vot": 450, "43_132_495": 450, "vote": [450, 466, 471, 477], "42572654": 450, "40000": [450, 485], "dcab": 450, "7678": 450, "phone": [450, 477], "10d": 450, "eel": 450, "hovercraft": 450, "roach": [450, 481, 483, 485], "horribl": 450, "manfr": 450, "8637678": 450, "4d": 450, "729": 450, "00012": 450, "workfil": 450, "0123456789abcdef": 450, "6th": [450, 485], "korn": 451, "ipython": [451, 472, 476], "bpython": 451, "the_world_is_flat": 452, "666666666666667": 453, "ame": [453, 481], "thingi": 453, "ium": 453, "unununium": 453, "tho": 453, "supercalifragilisticexpialidoci": [453, 456], "cube": 453, "fibo": 454, "itemnam": 454, "ufs": 454, "_framework": 454, "_git": 454, "_home": 454, "callstat": [454, 482, 484, 485], "wavread": 454, "wavwrit": 454, "aiffread": 454, "aiffwrit": 454, "auread": 454, "auwrit": 454, "vocod": 454, "karaok": 454, "echofilt": 454, "atten": 454, "subitem": 454, "subsubitem": 454, "specific_submodul": 454, "python310": [455, 456], "accesslog": 455, "installdir": [455, 460], "tea": 455, "70710678118654757": 455, "17970987693706186": 455, "6071428571428572": 455, "worldtimeapi": 455, "01t01": 455, "689215": 455, "soothsay": 455, "jcaesar": 455, "1964": 455, "14368": 455, "witch": 455, "wrist": 455, "226805979": 455, "57535828626024577": 455, "54962537085770791": 455, "teststatisticalfunct": 455, "test_averag": 455, "batteri": 455, "sqllite3": 455, "english_unit": 456, "conv": [456, 480], "villag": 456, "folk": 456, "nottingham": 456, "ditch": 456, "fund": [456, 466, 471], "nottinghamfolk": 456, "unladen": [456, 477], "photofil": 456, "img_1074": 456, "img_1076": 456, "img_1077": 456, "batchrenam": 456, "seqnum": 456, "ashley_": 456, "ashley_0": 456, "ashley_1": 456, "ashley_2": 456, "iiihh": 456, "comp_siz": 456, "uncomp_s": 456, "filenames": 456, "extra_s": 456, "decoupl": [456, 480, 482], "asynczip": 456, "4000": 456, "700": 456, "22222": 456, "26932": [456, 485], "task3": 456, "task4": 456, "unsearch": 456, "starting_nod": 456, "breadth_first_search": 456, "gen_mov": 456, "is_goal": 456, "lua": 456, "09999999999999995": 456, "142857142857142857142857142857142857": 456, "nova": 457, "136kb": 457, "whl": 457, "kenneth": 457, "reitz": 457, "kennethreitz": 457, "akuchl": 457, "596": [458, 484], "00797": 458, "pyvideo": 458, "bbdehiioqssuvvwx": 459, "0b2": [459, 485], "0c076caaa8": 459, "20161005": 459, "wdefault": [459, 473, 477, 485], "walway": [459, 469], "wmodul": 459, "wonc": 459, "wignor": 459, "wi": 459, "showalloccount": [459, 481, 484, 485], "oldpars": [459, 484, 485], "qualif": [459, 479], "selftest": 459, "4294967295": [459, 481], "encodingnam": 459, "nix": [459, 482], "pythonthreaddebug": [459, 460, 476, 485], "_sqlite": [460, 485], "pylong_bits_in_digit": 460, "dbmlibord": [460, 473], "db1": 460, "db2": 460, "py_coerce_c_local": 460, "_bundl": [460, 476, 485], "lto": [460, 485], "profile_task": [460, 484, 485], "clang": [460, 479, 481, 485], "llvm": [460, 481, 485], "profdata": [460, 485], "interposit": [460, 476, 485], "fno": [460, 476, 485], "testtimeout": [460, 485], "gold": 460, "gprof": [460, 470], "gettotalrefcount": [460, 485], "__ltrace__": [460, 485], "surrounded": 460, "_pyobject_assert": 460, "py_safe_downcast": 460, "valgrind": [460, 473, 477, 481, 485], "addresssanit": [460, 485], "asan": 460, "memorysanit": 460, "msan": 460, "undefinedbehaviorsanit": 460, "ubsan": [460, 485], "libpythonmajor": [460, 476, 485], "lib1": 460, "ffi": [460, 481, 485], "mpdec": 460, "with_editlin": 460, "have_libreadlin": 460, "tcltk": [460, 476, 477, 484, 485], "fnv": [460, 479], "universalsdk": [460, 471, 484, 485], "sdkdir": 460, "arch": [460, 472, 485], "universal2": [460, 484, 485], "makesetup": 460, "buildbottest": 460, "distclean": [460, 485], "py_build_core_builtin": 460, "extensin": 460, "_asyncio": [460, 485], "py_build_core_modul": [460, 485], "pyapi_api": 460, "pyport": [460, 466, 485], "py_exported_symbol": 460, "py_imported_symbol": 460, "pyinit_xxx": [460, 485], "configure_cppflag": 460, "cppflag": [460, 469, 485], "basecppflag": 460, "py_cppflag": 460, "srcdir": [460, 477, 485], "maincc": 460, "cflags_nodist": [460, 485], "21121": [460, 485], "harden": [460, 485], "heighten": 460, "extra_cflag": 460, "configure_cflag": 460, "configure_cflags_nodist": 460, "basecflag": 460, "cflags_alias": 460, "ccshare": 460, "cflagsforshar": 460, "py_cflag": [460, 485], "py_cflags_nodist": [460, 485], "py_stdmodule_cflag": 460, "py_core_cflag": 460, "dpy_build_cor": [460, 485], "py_builtin_module_cflag": 460, "dpy_build_core_builtin": 460, "_testemb": [460, 485], "configure_ldflag": 460, "stomp": 460, "ldflags_nodist": 460, "35257": [460, 485], "configure_ldflags_nodist": 460, "lrt": 460, "ldshare": 460, "py_ldflag": 460, "bldshare": 460, "py_core_ldflag": 460, "py_ldflags_nodist": 460, "savag": 463, "bobsavag": 463, "pythonlaunch": 463, "textwrangl": 463, "barebon": 463, "textmat": [463, 479], "macrom": 463, "gvim": 463, "macvim": 463, "aquamac": 463, "qa1067": 463, "hashcollis": 463, "hkn": 463, "idle_intro": 463, "pyobjc": 463, "wxpython": 463, "riverbankcomput": 463, "pythonmac": 463, "maint": 464, "opensus": 464, "portal": 464, "fedoraproject": 464, "fedora_draft_document": 464, "rpm_guid": 464, "slackbook": 464, "slackwar": 464, "pkg_add": 464, "1p2": 464, "opencsw": 464, "python27": 464, "pki": 464, "install_sw": 464, "xzf": 464, "pushd": 464, "openssldir": 464, "j8": 464, "popd": 464, "team": [465, 466, 467, 468, 473, 477, 479, 484, 485], "longpathsen": 465, "currentcontrolset": 465, "installallus": 465, "targetdir": [465, 485], "defaultalluserstargetdir": 465, "programfil": 465, "defaultjustformetargetdir": 465, "localappdata": 465, "defaultcustomtargetdir": 465, "associatefil": 465, "prependpath": 465, "include_doc": 465, "include_debug": 465, "include_dev": 465, "include_ex": 465, "include_launch": 465, "installlauncherallus": 465, "include_lib": 465, "include_pip": 465, "include_symbol": 465, "include_tcltk": 465, "include_test": 465, "include_tool": 465, "launcheron": 465, "simpleinstal": 465, "simpleinstalldescript": 465, "elev": [465, 485], "unattend": [465, 485], "pythonsoftwarefound": 465, "8_qbz5n2kfra8p0": 465, "localcach": 465, "system32": 465, "windowsapp": 465, "package_nam": 465, "vfs": 465, "systemx86": 465, "test_fil": 465, "hklm": 465, "msix": 465, "uwp": 465, "nugetclidl": 465, "excludevers": 465, "outputdirectori": 465, "pythonx86": 465, "msbuild": [465, 485], "python37": 465, "ucrtbas": [465, 485], "anaconda": 465, "panda": 465, "conda": 465, "canopi": 465, "winpython": 465, "prebuilt": 465, "my_python_lib": 465, "procthread": 465, "set_1": 465, "wsl": 465, "shgetfolderpath": 465, "csidl_local_appdata": 465, "py_python": 465, "py_python3": 465, "pylaunch_debug": 465, "hive": 465, "hkcu": 465, "landmark": [465, 481], "apploc": 465, "pythonxx": 465, "mfc": 465, "golden": [465, 479], "ongo": [465, 482], "mosh": [466, 467, 468, 470], "zadka": [466, 467, 468, 470], "steadi": 466, "paid": 466, "contractu": 466, "oblig": 466, "evolut": [466, 467], "6final": 466, "0beta1": 466, "fourfold": 466, "schneider": [466, 485], "kamp": 466, "checkin": 466, "submitt": 466, "ka": [466, 467, 468, 471], "yee": [466, 467, 468, 471], "scraper": 466, "indiffer": 466, "him": 466, "consensus": 466, "dissent": 466, "editori": 466, "lockstep": 466, "elementwis": [466, 467], "objectwis": 466, "536": 466, "countless": 466, "stormi": 466, "uhhhh": 466, "xhhhh": 466, "01ff": 466, "777": [466, 480], "setdefaultencod": 466, "unichr": [466, 468, 471], "encode_func": 466, "decode_func": 466, "stream_read": 466, "stream_writ": 466, "ustr": 466, "u2000ab": 466, "utf8_encod": 466, "utf8_decod": 466, "utf8_streamread": 466, "utf8_streamwrit": 466, "sre": [466, 468], "workhors": 466, "ewe": [466, 478], "argu": [466, 468, 473], "lengthier": [466, 467], "thoma": [466, 467, 470, 471, 472, 473, 476, 479, 480, 481, 482, 485], "wouter": [466, 467, 470, 471, 472, 473, 480, 483, 485], "strop": 466, "hlinuxtnam": 466, "joke": [466, 485], "jpython": 466, "realis": 466, "myself": 466, "afford": 466, "tobi": [466, 485], "kelsey": 466, "tiedemann": 466, "neil": [466, 467, 468, 469, 471, 473, 477, 480, 481, 482, 483, 485], "schemenau": [466, 467, 468, 469, 471, 473, 477, 480, 483], "overrod": 466, "tismer": [466, 479], "rewrot": [466, 469, 485], "jeremi": [466, 467, 468, 469, 470, 471, 472, 473, 485], "hylton": [466, 467, 468, 469, 470, 471, 472, 473], "isomorph": 466, "trashcan": [466, 484, 485], "itanium": [466, 480], "trent": [466, 469, 471, 479], "pythonc": 466, "dyld": [466, 485], "wart": [466, 474], "291": 466, "1beta1": 466, "runaway": 466, "gpf": 466, "find_recursionlimit": 466, "listobject": 466, "no_strict_list_append": 466, "0alpha1": 466, "gvr": [466, 468, 469, 470, 473, 481], "reaction": [466, 467], "x123456": 466, "3l": 466, "abcabcabc": 466, "4l": 466, "18446744073709551616": [466, 473], "subtlest": 466, "longval": 466, "17g": [466, 475], "0999999999999996": 466, "fulton": [466, 470, 481, 485], "extensionclass": 466, "myextensionclass": 466, "importdl": 466, "reorganis": 466, "dynload_": 466, "vladimir": [466, 467, 469, 476, 483, 485], "marangozov": [466, 467, 469], "pymem": [466, 471], "objimpl": 466, "gusi": 466, "yakov": 466, "markovitch": 466, "charl": [466, 473, 478, 479, 480, 481, 482, 485], "waldman": 466, "affair": 466, "arduous": 466, "ritual": 466, "shepherd": [466, 469], "module2": 466, "expat_extens": 466, "xml_ns": 466, "xmltok": 466, "xmlpars": 466, "xmlrole": 466, "bdist_wininst": [466, 476, 483, 484, 485], "xmllib": 466, "mullend": [466, 472], "tag1": 466, "perslist": 466, "persona": 466, "claudius": 466, "denmark": 466, "son": 466, "nephew": 466, "20th": 466, "4dom": 466, "fourthought": 466, "xmlproc": 466, "lar": [466, 469, 470, 471, 472, 473, 477, 478], "garshol": 466, "sgmlop": 466, "gallew": 466, "httplib": [466, 469, 470, 472, 473, 474, 485], "create_lin": 466, "create_polygon": 466, "oliv": [466, 485], "andrich": 466, "hewlett": 466, "packard": 466, "cmpcach": 466, "macmillan": 466, "twin": 466, "sunaudiodev": [466, 472], "bosch": 466, "prescod": [466, 467, 468, 471], "spider": 466, "fetchabl": 466, "browsercontrol": 466, "tutt": 466, "imputil": [466, 469, 473], "ihook": [466, 469, 472, 473], "stdwin": 466, "packmail": 466, "whatsound": 466, "zmod": 466, "bolen": [466, 468], "gregg": 466, "hauser": 466, "detlef": [466, 469], "lannert": [466, 469], "aahz": [466, 470, 471], "maruch": 466, "tobia": 466, "polzin": 466, "russ": 466, "schmidt": 466, "sizabl": [467, 468], "clumsier": [467, 468], "list_attribut": [467, 468], "unknow": [467, 468], "gradual": [467, 468], "compulsori": [467, 468, 469], "crunch": 467, "tp_richcmp": 467, "ascher": 467, "spare": 467, "toolbox": [467, 468, 469], "aycock": 467, "spark": [467, 485], "135143996": 467, "py_tpflags_checktyp": 467, "middleton": 467, "vault": 467, "parnassus": 467, "retir": [467, 485], "wayback": 467, "catalogu": 467, "sean": [467, 469, 470, 471, 473, 485], "reifschneid": [467, 469, 470, 471, 473], "addict": 467, "purcel": 467, "gellekum": 467, "ninth": 467, "edward": [467, 468, 470, 471], "136": 467, "underestim": [467, 468, 469, 470, 471, 472], "afoul": [467, 469], "getc": 467, "jeff": [467, 469, 479, 481, 485], "epler": 467, "fuller": 467, "preliminari": [467, 476, 482, 485], "ben": [467, 471, 480, 485], "wolfson": 467, "vestigi": [467, 485], "ancestri": 467, "shrunk": [467, 485], "340k": 467, "majewski": 467, "jason": [467, 469, 472, 479, 483, 484, 485], "tishler": [467, 469, 485], "risco": [467, 474], "dietmar": 467, "schwertberg": 467, "unixwar": 467, "billi": 467, "alli": 467, "graem": 467, "goodger": [467, 468, 470], "grave": 467, "irregular": 468, "dark": [468, 485], "safeguard": 468, "esoter": [468, 471], "lockablefil": 468, "posixfil": [468, 472], "__methods__": [468, 474, 485], "inaccur": [468, 470, 485], "defstat": 468, "eiffel": 468, "postcondit": 468, "eiffelmethod": 468, "pre_f": 468, "post_f": 468, "get_par": 468, "__coerce__": [468, 473], "get_siz": 468, "set_siz": 468, "new_attr": 468, "whet": 468, "appetit": 468, "corp": 468, "0x8116870": 468, "crew": [468, 469, 471], "0x8117f90": [468, 469], "cs": [468, 469], "arizona": [468, 469], "ipd266": [468, 469], "harbor": [468, 469], "magnus": [468, 469], "hetland": [468, 469], "1234567890123": 468, "1234567890123l": 468, "18446744073709551616l": 468, "herald": 468, "erupt": 468, "storm": 468, "sarcast": 468, "110000": 468, "261": [468, 485], "x9c": 468, "xc9": 468, "xc1": 468, "nand": 468, "666": 468, "m2": [468, 473, 478], "5r92": 468, "qe": 468, "ee8v4": 468, "v8": 468, "f5d": 468, "6yd86yt": 468, "f5r": 468, "f5r8f": 468, "s92p": 468, "86yd": 468, "5t": 468, "71i": 468, "5x": [468, 481, 482, 485], "sheesh": 468, "furrfu": 468, "__unicode__": [468, 473], "headlin": 468, "oreillynet": 468, "meerkat": 468, "getchannel": 468, "freshmeat": 468, "4549": 468, "3dgamer": 468, "52719": 468, "xsl": 468, "html2fo": 468, "2104": 468, "memberst_mtim": 468, "mathewson": 468, "ichiro": 468, "itojun": 468, "hagino": 468, "bigcharset": 468, "2487": 468, "pier": [468, 469], "lauder": [468, 469], "michel": [468, 469, 478, 479, 480, 481, 482, 483, 484, 485], "pelleti": 468, "rfc2822": 468, "grunt": 468, "generator": 468, "itamar": 468, "shtull": 468, "traur": 468, "py_tpflags_gc": 468, "pytpflags_have_gc": 468, "pyobject_gc_init": 468, "pyobject_gc_fini": 468, "pygc_head_s": 468, "pyobject_as_gc": 468, "pyobject_from_gc": 468, "untyp": 468, "vsprintf": 468, "overrun": [468, 473, 485], "683": 468, "82": 468, "blown": 468, "osa": 468, "quicktim": 468, "cleanfutur": 468, "gpled": 468, "ftpmirror": 468, "romberg": 468, "pyrange_new": [468, 471], "sneakili": 468, "rhythm": 468, "stephen": [468, 485], "hansen": [468, 484, 485], "generous": 468, "installermast": 468, "0a": 468, "stolk": 468, "bremmer": 468, "keith": 468, "brigg": 468, "carel": [468, 485], "felling": 468, "mclay": 468, "donnel": 468, "joona": 468, "paalasma": 468, "jen": [468, 485], "reinhardt": 468, "welbourn": 468, "polish": 469, "berkeleydb": [469, 472, 473, 485], "immutableset": [469, 470], "union_upd": 469, "ungain": 469, "martelli": [469, 472], "suzuki": 469, "hisao": 469, "nyman": 469, "inadequ": 469, "hodgson": 469, "irrit": 469, "__builtin__": [469, 474, 475], "walter": [469, 470, 471, 472, 483], "rwald": [469, 470, 471, 483], "heart": 469, "quixot": 469, "richard": [469, 471, 472, 478, 479, 485], "toss": 469, "sundri": 469, "kevin": [469, 470, 472, 473, 477, 485], "alti": 469, "cole": [469, 470, 477, 485], "mcnamara": [469, 471], "cliff": [469, 473], "cpickl": [469, 471, 473, 474], "fanciest": 469, "__safe_for_unpickling__": 469, "rip": 469, "dcba": 469, "innocu": 469, "welter": 469, "fakeseq": 469, "calc_item": 469, "underw": [469, 470, 471, 472], "dylan": 469, "simionato": 469, "029035": 469, "pedroni": [469, 471], "setcheckinterv": [469, 484, 485], "getcheckinterv": [469, 484, 485], "_socket": [469, 485], "u4000": 469, "u4001abc": 469, "simon": [469, 485], "brun": 469, "0045": 469, "goofi": 469, "0goofi": 469, "oren": [469, 478, 482, 485], "tirosh": [469, 478], "christoph": [469, 480, 485], "craig": [469, 485], "set_lineno": 469, "idiosyncrasi": [469, 485], "hotspot": 469, "pyston": [469, 470, 471, 474, 485], "orendorff": [469, 472], "bsddb185": 469, "db2pickl": 469, "pickle2db": 469, "bsddb3": [469, 474], "sampmodul": 469, "samp": 469, "robert": [469, 471, 472, 473, 480, 482, 485], "weber": [469, 480, 485], "strand": [469, 470], "lg": 469, "xlinux": 469, "dad": 469, "priorityqu": 469, "connor": [469, 479, 481, 485], "idlefork": 469, "tino": 469, "deg": 469, "loadavg": 469, "geert": [469, 480, 485], "otkidach": 469, "stat_float_tim": [469, 471, 478, 482, 485], "1034791200": 469, "6335014": 469, "fitzroy": 469, "dale": [469, 478], "tu": 469, "sn": 469, "nos": 469, "3407": 469, "3805": 469, "1505": 469, "7023": 469, "2401": 469, "2267": 469, "9733": 469, "8083": 469, "9195": 469, "rexec": 469, "bastion": 469, "rotor": [469, 470], "gilfix": 469, "collabor": 469, "exc_clear": [469, 474], "gust": [469, 470, 471, 472, 473, 477, 478], "whit": 469, "defi": 469, "auguri": 469, "sparrow": 469, "tis": [469, 470, 485], "dummy_thread": [469, 482, 484, 485], "timer1": 469, "timer2": 469, "laptop": 469, "36831796169281006": 469, "37441694736480713": 469, "35304892063140869": 469, "17574405670166016": 469, "18193507194519043": 469, "17565798759460449": 469, "031107": 469, "tcl_obj": [469, 485], "wantobject": [469, 485], "tkapp": [469, 485], "dictmixin": 469, "seqdict": 469, "lookalik": 469, "keylist": [469, 470], "valuelist": 469, "quinlan": [469, 470, 473, 477], "3491": 469, "30t21": 469, "994956": 469, "827738": 469, "optik": [469, 470, 471], "0x400cad4c": 469, "0x400cad2c": 469, "iinput": 469, "llength": 469, "undistinguish": 469, "pymemcompat": 469, "libpython2": 469, "ondrej": 469, "palkovski": 469, "dl_export": 469, "dl_import": 469, "pyapi_data": [469, 485], "pyarg_noarg": 469, "pystring_new": 469, "test_bufio": 469, "emx": 469, "macintyr": [469, 471], "weaklink": [469, 484, 485], "atheo": [469, 485], "hurd": [469, 485], "openvm": 469, "mist": 469, "nifti": 469, "richi": 469, "hindl": 469, "0xffffffffl": 469, "get_distutil_opt": 469, "bauer": 469, "chermsid": 469, "fraser": 469, "kelli": [469, 478, 479], "gerber": 469, "chris": [469, 471, 472, 478, 480, 481, 485], "lambert": [469, 479], "lalo": 469, "netzer": 469, "nowak": 469, "francesco": 469, "ricciardi": 469, "suzi": 469, "radic": 470, "481": 470, "arbcd": 470, "wxi": 470, "unif": 470, "8589934592": 470, "svensson": 470, "get_all_link": 470, "jiwon": [470, 478], "seo": [470, 478], "hye": [470, 471], "shik": [470, 471], "untrain": 470, "deco": 470, "0x402ef0d4": 470, "require_int": 470, "_deco": 470, "bend": 470, "func_nam": [470, 474], "979728": 470, "russel": 470, "pythondecoratorlibrari": 470, "dpkg": 470, "deb": 470, "unawar": 470, "0001100110011": 470, "inaccuraci": [470, 473], "1000000000000001": [470, 475], "magnifi": 470, "plot": 470, "dodg": 470, "12f": 470, "100000000000": 470, "7956": 470, "64739884393063583815028902": 470, "1275": 470, "9184": 470, "123456789012": 470, "351364": 470, "18288201344": 470, "18288201344j": 470, "1828820134592177245001": 470, "facundo": [470, 472], "batista": [470, 472], "lahey": 470, "speleotrov": 470, "cowlishaw": 470, "rexx": 470, "resolve_dotted_attribut": 470, "dima": 470, "dorfman": 470, "gtk": [470, 472], "pyos_ascii_strtod": [470, 473, 475], "pyos_ascii_atof": [470, 473, 475], "pyos_ascii_formatd": 470, "buf_len": 470, "glib": 470, "relicens": 470, "donat": 470, "rei": 470, "carneiro": 470, "colormap": 470, "overflowwarn": 470, "method_descriptor": 470, "armin": [470, 471, 472, 473, 475, 477, 478, 479, 485], "rigo": [470, 471, 472, 485], "vasiliev": 470, "cjkcodec": [470, 485], "prc": 470, "roc": 470, "roman8": [470, 485], "iso_8859": 470, "pctp": 470, "belmont": [470, 476, 485], "rg": 470, "lehmann": 470, "gass": 470, "tenfold": 470, "eland": 470, "yves": 470, "dionn": 470, "arnaud": [470, 478], "mazin": 470, "key_val": 470, "0x402c2080": 470, "0x402c2090": 470, "bookmark": 470, "rgen": 470, "erhard": 470, "extractor": 470, "cryptoapi": 470, "trevor": 470, "perrin": [470, 476], "beni": 470, "cherniavski": 470, "raynor": 470, "hector": 470, "urtubia": 470, "30000": 470, "sidestep": 470, "unlucki": [470, 485], "mpz": 470, "jar": 470, "loper": 470, "ambiti": 470, "objn": 470, "py_is_nan": 470, "tsc": 470, "pentium": 470, "misnam": [470, 477], "tracebackobject": 470, "pytracebackobject": 470, "dircach": [470, 472], "koray": 470, "dyck": 470, "hurt": 470, "hamish": 470, "lawson": 470, "sadruddin": 470, "rejeb": 470, "august": 471, "356": 471, "458": 471, "true_valu": 471, "false_valu": 471, "voter": 471, "true_v": 471, "false_v": 471, "rarer": 471, "pygtk": 471, "open_item": 471, "open_func": 471, "item_path": 471, "popup_menu": 471, "pypackag": 471, "numarray": 471, "oldpackag": 471, "gpg": 471, "unclean": [471, 485], "holger": 471, "krekel": 471, "tidier": 471, "pylib": 471, "pycheck": 471, "exception1": 471, "exception2": 471, "hackish": 471, "trivia": 471, "phillip": [471, 472, 475, 477, 481, 485], "ebi": [471, 472, 475, 477], "288": 471, "20160321211320": 471, "sidh": 471, "000178": 471, "sugalski": 471, "db_connect": [471, 472], "databaseconnect": [471, 472], "flawless": [471, 472], "db_transact": [471, 472], "mgr1": [471, 472], "mgr2": [471, 472], "version2": 471, "whatsnew": [471, 485], "lp64_wp": 471, "oliph": [471, 472, 473], "zerodict": 471, "is_image_fil": 471, "lynn": 471, "bethard": [471, 473, 477, 480, 485], "puzzl": 471, "newbi": [471, 473], "needforspe": 471, "sprint": [471, 472], "reykjavik": 471, "ewt": 471, "llc": 471, "ccp": 471, "mcintyr": [471, 472], "ippolito": [471, 472, 473, 475], "diederich": [471, 475], "immisch": 471, "nel": 471, "mezzo": 471, "cammin": 471, "nostra": 471, "vita": 471, "ritrovai": 471, "una": 471, "selva": 471, "oscura": 471, "che": 471, "diritta": 471, "smarrita": 471, "init_lett": 471, "hotshot": 471, "josh": [471, 472, 480, 481, 483, 484, 485], "spoerri": 471, "bjorn": [471, 485], "tillenius": 471, "gregori": [471, 472, 473, 475, 476, 479, 481, 482, 483, 485], "schroeder": 471, "antti": 471, "louko": 471, "diego": [471, 483], "petten": 471, "goir": 471, "pybench": [471, 485], "regsub": 471, "statcach": 471, "tzpars": 471, "whrandom": 471, "kiendl": 471, "biondi": 471, "netlink": 471, "linuxjourn": 471, "7356": 471, "group_mask": 471, "getfamili": 471, "getproto": 471, "ih3": 471, "187": 471, "blai": 471, "subvers": [471, 472, 473, 477, 482, 485], "45313": 471, "45315": 471, "45355": 471, "45356m": 471, "iterkeyref": 471, "itervalueref": 471, "oleg": [471, 485], "broytmann": 471, "oussoren": [471, 472, 473, 477, 479, 484], "atle": [471, 485], "heller": [471, 472, 473], "dl": [471, 472, 485], "strfri": 471, "71828": 471, "1783957616": 471, "20180410025338": 471, "theller": 471, "elementpath": [471, 482], "20201124024954": 471, "effbot": [471, 473], "textnod": 471, "rss10": 471, "svg": 471, "10px": 471, "320px": 471, "pysqlit": [471, 473, 477], "tran": 471, "qti": 471, "msoft": 471, "140000000000001": 471, "wsgi_app": 471, "20160331090247": 471, "supervis": 471, "market": 471, "for_loop": 471, "339": 471, "pyparser_astfromstr": [471, 476, 485], "pyparser_astfromfil": [471, 476, 485], "pyast_compil": [471, 476, 485], "ehresman": [471, 485], "kurt": 471, "kaiser": [471, 485], "evan": [471, 484, 485], "256k": 471, "py_loc": 471, "py_local_inlin": 471, "py_local_aggress": 471, "pyerr_warn": 471, "lll": [471, 485], "2573": 471, "pymem_": 471, "_malloc": 471, "_free": 471, "ralf": [471, 472], "gross": 471, "kunstlev": 471, "iain": 471, "pryor": 471, "rovner": 471, "weikart": 471, "361": 472, "redesign": [472, 473, 479], "259": [472, 485], "py3kwarn": 472, "py_py3kwarningflag": 472, "3xxx": 472, "3100": 472, "committe": 472, "jira": 472, "launchpad": 472, "trac": 472, "upfront": 472, "stellenbosch": 472, "africa": 472, "1980s": 472, "1990s": 472, "ream": 472, "toolchain": [472, 481, 485], "python26": 472, "39916800": 472, "51090942171709440000": 472, "8222838654177922817725562880000000": 472, "33452526613163807108170062053440751665152000000000": 472, "mgr": 472, "15511187532873822802242430164693032110632597200169861120000": 472, "jess": [472, 475, 480, 481, 482, 485], "noller": [472, 475], "oudkerk": [472, 478, 479, 485], "last_login": 472, "npython": 472, "61261m": 472, "5367": 472, "mp4": 472, "banquet": 472, "invoic": 472, "750000e": 472, "6564": 472, "talin": 472, "u751f": 472, "u3080": 472, "u304": 472, "u3000": 472, "u3054": 472, "u3081": 472, "u305f": 472, "u307": 472, "pystringobject": 472, "u21ef": 472, "u3244": 472, "x87": 472, "x89": 472, "u31ef": 472, "ttys": 472, "cstringio": [472, 474], "stutzbach": [472, 473, 477], "verdon": 472, "doerwald": 472, "lownd": 472, "pybuf_lock": 472, "carl": [472, 473, 477, 478, 483, 484, 485], "bank": 472, "vagu": 472, "printabletyp": 472, "drawabl": 472, "draw_doubl": 472, "aranguren": 472, "0o21": 472, "0b101111": 472, "052": 472, "173": 472, "0b10101101": 472, "1101": 472, "0b1101": 472, "patrick": [472, 476, 485], "maupin": 472, "undergo": 472, "yasskin": [472, 473, 477], "guil": 472, "r5rs": 472, "66666666666666663": 472, "40000000000000002": 472, "7074029114692207l": 472, "2251799813685248l": 472, "6004799503160661l": 472, "18014398509481984l": 472, "andi": [472, 475, 485], "chu": [472, 475], "1739468": [472, 475, 480], "2196": 472, "ud": 472, "1686487": 472, "amauri": [472, 473, 475, 477, 485], "forgeot": [472, 473, 475, 477, 485], "3473": 472, "2719": 472, "abc123": 472, "cdf246": 472, "1635": 472, "1640": 472, "3008": 472, "e000000000000p": 472, "5555555555555p": 472, "niceti": 472, "dickinson": [472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485], "2235": 472, "austin": 472, "1537": 472, "1473257": 472, "1444529": 472, "cplx": 472, "1491866": 472, "bengt": 472, "richter": 472, "1193128": 472, "1591665": 472, "im_self": 472, "1631171": 472, "jacob": [472, 485], "1700288": 472, "py_tpflags_have_version_tag": [472, 485], "1878": 472, "pitrou": [472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "1819": 472, "jvm": 472, "josiah": [472, 478], "carlson": [472, 478], "1736190": 472, "jes": [472, 473, 478, 481, 482, 485], "cea": [472, 473, 478, 481, 482, 485], "avi": [472, 473, 478, 481, 482, 485], "jcea": [472, 473, 474], "programacion": [472, 474], "dbshelv": 472, "barn": [472, 482, 485], "fiori": 472, "nubi": 472, "1817": 472, "600362": 472, "1381": 472, "var_typ": 472, "amplitud": 472, "dq": 472, "arvin": 472, "schnell": 472, "1638033": 472, "fabian": 472, "kreutz": 472, "insert_mod": 472, "1158": 472, "7182818": 472, "9999999895305022877376682436": 472, "1221598": 472, "1739906": 472, "1001604": 472, "iter1": 472, "iter2": 472, "getmoduleinfo": [472, 481, 485], "getarg": [472, 485], "izip_longest": 472, "2n": [472, 485], "2138": 472, "brouwer": 472, "2819": 472, "711019": 472, "lenton": 472, "wine": [472, 485], "petrosyan": 472, "inst_nam": 472, "_helper": 472, "levinson": 472, "1663329": 472, "horcicka": 472, "1181": 472, "1273829": 472, "1115886": 472, "barran": 472, "1339796": 472, "957650": 472, "1393667": 472, "1106316": 472, "exception_hierarchi": 472, "2439": 472, "achim": 472, "gaedk": 472, "1137": 472, "shawn": 472, "ligocki": 472, "1727780": 472, "wladmir": 472, "laan": 472, "1681432": 472, "hoyt": [472, 480, 485], "schmitt": 472, "846388": 472, "3487": 472, "lorenz": [472, 485], "2250": 472, "1861": 472, "pollobj": 472, "1657": 472, "2663": 472, "1583": 472, "guilherm": [472, 473, 475, 479, 481, 482, 485], "polo": [472, 473, 475, 479, 481, 482, 485], "2240": 472, "2033": 472, "leif": 472, "hedstrom": 472, "957003": 472, "3207": 472, "fenner": 472, "829951": 472, "alberto": [472, 478], "bertog": 472, "1646": 472, "pomran": 472, "pedro": 472, "werneck": 472, "742598": 472, "1193577": 472, "remahl": 472, "1534": 472, "schuppeni": 472, "2898": 472, "1648": 472, "damien": [472, 479], "miller": [472, 479], "1537850": 472, "dustin": [472, 485], "mitchel": [472, 485], "2021": [472, 476, 485], "test_support": [472, 474], "transientresourc": 472, "3781": 472, "wrec": 472, "dwayn": 472, "bailey": 472, "1581073": 472, "2871": 472, "erik": [472, 482, 485], "demain": 472, "1533909": 472, "2906": 472, "gregor": 472, "lingl": 472, "1513695": 472, "ftpwrapper": [472, 485], "3811": 472, "1599845": 472, "_send_traceback_head": 472, "1330538": 472, "riku": 472, "lindblad": 472, "2985": 472, "251": 472, "sysmodul": 472, "467924": 472, "horler": 472, "1775025": 472, "alexey": [472, 479, 480, 485], "borzenkov": 472, "1734346": 472, "ronach": [472, 473, 475, 477, 478, 479], "abcdefghijklm": 472, "iterable1": 472, "__hex__": [472, 474], "__oct__": [472, 474], "in_json": 472, "simplejson": [472, 473], "data_struct": 472, "lastaccess": 472, "plist_str": 472, "writeplisttostr": 472, "new_struct": 472, "readplistfromstr": 472, "writeplist": [472, 479], "readplist": [472, 479, 482, 485], "1649190": 472, "outset": 472, "1798": 472, "janssen": 472, "bgenloc": 472, "buildtool": 472, "bundlebuild": [472, 485], "fpformat": 472, "gensuitemodul": 472, "imageop": 472, "imgfil": 472, "mhlib": 472, "mimetool": 472, "multifil": 472, "toaiff": 472, "gopherlib": [472, 474], "mimewrit": 472, "mimifi": 472, "rgbimg": 472, "duncan": 472, "grisbi": 472, "pyfile_incusecount": 472, "pyfile_decusecount": 472, "1675423": 472, "1629": 472, "1530959": 472, "free_list": [472, 485], "numfre": 472, "_maxfreelist": 472, "patchcheck": [472, 485], "nt4": 472, "sp4": 472, "1753245": 472, "flori": 472, "bruynoogh": 472, "2125": 472, "macf": 472, "macostool": 472, "1490190": 472, "_builtinsuit": 472, "aepack": 472, "aetool": 472, "aetyp": 472, "applesingl": 472, "appletrawmain": 472, "appletrunn": 472, "argvemul": 472, "audio_mac": 472, "autogil": 472, "carbon": [472, 477], "cfmfile": 472, "codewarrior": 472, "colorpick": 472, "easydialog": 472, "findertool": 472, "icglu": 472, "icopen": 472, "macerror": 472, "macresourc": 472, "miniaefram": 472, "nav": [472, 485], "osaterminolog": 472, "pimp": 472, "pixmapwrapp": 472, "stdsuit": 472, "systemev": 472, "terminalcommand": 472, "cddb": 472, "cdplayer": 472, "fl": 472, "flp": 472, "fm": 472, "glws": 472, "gl": 472, "panelpars": 472, "readcd": 472, "sv": 472, "torgb": 472, "videoread": 472, "1683368": 472, "conversionsyntax": 472, "1706815": 472, "dict1": 472, "dict2": 472, "ralph": 472, "corderoy": 472, "lambach": 472, "michlmayr": 472, "warner": 472, "373": 473, "7319": 473, "reenabl": 473, "qwarn": 473, "744": 473, "073": 473, "709": 473, "551": 473, "616": [473, 484, 485], "is_verbos": 473, "file1": 473, "file2": 473, "bore": 473, "1mb": 473, "configdict": 473, "netlog": 473, "netlogg": 473, "vk": 473, "revamp": [473, 477], "vassalotti": [473, 475, 477, 479, 485], "0x37f850": 473, "0x37f080": 473, "122": [473, 481], "mb": [473, 485], "2335": 473, "aaa": 473, "aaaaa": 473, "2333": 473, "codereview": 473, "appspot": [473, 475, 477], "53094": [473, 475, 477], "icc": [473, 475, 485], "suncc": 473, "7117": 473, "295147905179352891391": 473, "9514790517935283e": 473, "65535l": 473, "9514790517935289e": 473, "3166": 473, "1811": 473, "meador": [473, 478, 485], "5211": 473, "5237": [473, 475], "1588": 473, "7988": 473, "3382": 473, "7994": [473, 479], "124": [473, 475, 477, 479], "johansson": [473, 475], "victor": [473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "stinner": [473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "3439": [473, 475], "7902": 473, "1583863": 473, "4759": 473, "5982": 473, "7604": 473, "belchenko": 473, "1616979": [473, 477], "8016": 473, "kaliszewski": 473, "4764": 473, "5677": 473, "lingard": 473, "7362": 473, "8268": 473, "7140": 473, "curtin": [473, 477, 478, 479, 482], "survivor": 473, "4074": 473, "4688": [473, 475], "long_info": 473, "4258": [473, 475, 483], "5260": 473, "5512": 473, "1087418": 473, "5176": 473, "4715": 473, "gawain": [473, 477], "bolton": [473, 477], "6713": [473, 477], "florent": [473, 477], "xicluna": [473, 477], "7462": [473, 477], "7622": [473, 477], "mcguir": [473, 475], "5084": [473, 475], "5670": 473, "maru": 473, "senthil": [473, 476, 477, 479, 480, 481, 482, 483, 484, 485], "kumaran": [473, 476, 477, 479, 480, 481, 482, 483, 484, 485], "5142": 473, "7703": 473, "2devel9": 473, "8156": 473, "hagen": [473, 485], "rstenau": [473, 485], "3860": 473, "1696199": [473, 475], "field1": 473, "field2": 473, "_2": [473, 475], "1818": [473, 475], "8729": 473, "kindahl": 473, "7005": 473, "3924": 473, "1515": 473, "4606": 473, "klose": [473, 478, 481], "8142": 473, "5788": 473, "strive": 473, "4796": 473, "2531": [473, 477], "8257": [473, 477], "6595": 473, "jos": [473, 485], "conti": 473, "7633": 473, "6857": 473, "7279": 473, "anatoli": 473, "techtonik": 473, "7585": 473, "8688": 473, "lennart": [473, 485], "regebro": [473, 485], "7490": 473, "murray": [473, 477, 479, 480, 481, 485], "1368247": 473, "5812": 473, "8294": [473, 477], "oversight": [473, 478, 480, 482, 485], "giampaolo": [473, 477, 478, 480, 482, 483, 485], "rodola": [473, 477, 480, 482, 485], "2054": 473, "pablo": [473, 476, 480, 482, 483, 484, 485], "mouzo": 473, "6845": 473, "5479": 473, "nir": [473, 477, 478, 482, 485], "7471": [473, 477], "jacqu": 473, "frechet": 473, "4272": 473, "tadek": 473, "pietraszek": 473, "2846": [473, 477], "chenet": [473, 477], "7418": [473, 477], "kristj": [473, 477, 479], "valur": [473, 477, 479], "nsson": [473, 477, 479], "4879": 473, "eldon": 473, "ziegler": 473, "derek": [473, 475], "morr": [473, 475], "1655": [473, 475], "_pyio": [473, 475, 485], "4991": 473, "chambon": 473, "6939": 473, "5032": 473, "4816": 473, "4136": [473, 475], "5381": 473, "1607951": 473, "6896": 473, "nirina": 473, "raseliarison": 473, "3366": 473, "lekma": 473, "5585": 473, "cazabon": 473, "6963": 473, "1664": [473, 475], "6508": 473, "calderon": [473, 478], "7333": 473, "zsolt": [473, 485], "cserna": [473, 485], "7242": 473, "matt": [473, 479, 480, 485], "giuca": 473, "5827": 473, "3426": [473, 485], "laban": [473, 475], "4739": [473, 475], "6816": 473, "specialfileerror": 473, "3002": 473, "francoi": 473, "natali": [473, 478, 479, 480], "8354": 473, "6693": [473, 477], "8104": 473, "nagl": [473, 485], "disable_nagle_algorithm": 473, "6192": 473, "6267": 473, "7133": 473, "ssl_mode_auto_retri": 473, "8222": 473, "8322": [473, 477], "beda": 473, "kosata": 473, "8484": [473, 477], "8321": [473, 477], "bbhhiillqq": 473, "1523": 473, "8300": 473, "disk0s2": 473, "52g": 473, "49g": 473, "0g": [473, 485], "1068268": 473, "8451": 473, "4285": [473, 475], "7766": 473, "unnot": 473, "7357": 473, "lesher": [473, 485], "1674032": 473, "unihan": 473, "ander": [473, 476, 482, 485], "chrigstr": 473, "1571184": 473, "8024": 473, "2987": [473, 477], "1080": 473, "200c": 473, "417a": 473, "ampersand": 473, "stylesheet": [473, 485], "style1": 473, "muller": 473, "2746": 473, "encode_threshold": 473, "5511": 473, "kuba": 473, "wieczorek": 473, "4710": 473, "7610": [473, 477], "gabriel": 473, "genellina": 473, "4756": 473, "6003": 473, "anydbm": [473, 474], "distutils2": 473, "tck": 473, "tcl8": 473, "tkcmd": 473, "ttk_intro": 473, "screenshot": 473, "2983": [473, 475], "franklin": 473, "walzer": [473, 477, 485], "2618": 473, "unittest2": 473, "nose": 473, "6001": 473, "impati": 473, "dyer": 473, "8074": 473, "1034053": 473, "5663": 473, "4444": 473, "5679": 473, "2578": 473, "7031": 473, "8038": 473, "assertitemsequ": 473, "assertdictcontainssubset": [473, 475, 477, 485], "roddi": 473, "6866": 473, "fern": 473, "ndez": 473, "3379": 473, "5728": 473, "20210619163128": 473, "shtml": 473, "getiter": [473, 477, 483, 484, 485], "getchildren": [473, 477, 483, 484, 485], "childless": 473, "20200703234532": 473, "6472": [473, 477], "bt": [473, 485], "8032": 473, "3632": 473, "4293": 473, "7033": [473, 477], "horsen": 473, "7528": 473, "7767": [473, 477], "trojan": 473, "hors": 473, "5753": [473, 477], "py_isalnum": 473, "py_isalpha": 473, "py_isdigit": 473, "py_islow": 473, "py_isspac": 473, "py_isupp": 473, "py_isxdigit": 473, "py_tolow": 473, "py_toupp": 473, "5793": 473, "pyeval_callobject": [473, 477, 484, 485], "8276": [473, 477], "pyformat_fromstr": 473, "pyformat_fromstringv": 473, "7228": 473, "1590864": 473, "_shutdown": [473, 485], "1722344": 473, "t_string_inplac": 473, "3102": [473, 474], "arfrev": [473, 477, 485], "freht": [473, 477, 485], "taifersar": [473, 477, 485], "arahesi": [473, 477, 485], "7609": 473, "2422": [473, 477], "6491": 473, "x87_double_round": 473, "2937": 473, "ldcxxshare": 473, "1222585": 473, "clinton": 473, "roy": [473, 485], "3585": 473, "6094": 473, "capi": 473, "ucnhash_capi": [473, 476, 485], "pycobject": [473, 475, 477], "vtabl": 473, "pycobject_asvoidptr": 473, "cobject": 473, "5630": [473, 475], "crtassem": 473, "crt_assembly_vers": 473, "vc_assembly_publickeytoken": 473, "libraries_assembly_name_prefix": 473, "cournapeau": 473, "4365": 473, "7347": 473, "_beginthreadex": 473, "3582": 473, "miki": [473, 477], "tebeka": [473, 477], "1220212": 473, "hirokazu": [473, 478, 485], "yamamoto": [473, 478, 482, 485], "5913": 473, "mimelib": 473, "4969": 473, "4865": 473, "28440": [473, 485], "so_setfib": 473, "kyle": [473, 476, 481, 482, 483, 484, 485], "vanderbeek": 473, "8235": 473, "iobench": 473, "ccbench": 473, "throughput": [473, 482, 485], "5464": 473, "ziga": 473, "seilnacht": 473, "1180193": 473, "randse": 473, "7312": 473, "piotr": 473, "arowski": 473, "8233": 473, "1533": 473, "5920": 473, "6101": 473, "7853": 473, "leander": 473, "anand": [473, 477], "pillai": [473, 477], "7150": 473, "7348": 473, "5080": 473, "exempt": 473, "pythonshowrefcount": 473, "31733": 473, "count_alloc": [473, 481, 484, 485], "pythonshowalloccount": 473, "31692": 473, "gaynor": [473, 476, 480, 485], "21306": 473, "1g": [473, 485], "zachari": [473, 479, 480, 482, 485], "ware": [473, 479, 480, 482, 485], "21462": 473, "21304": 473, "21671": 473, "0224": 473, "tls1": 473, "reid": [473, 477], "21308": 473, "21305": 473, "21307": 473, "stufft": [473, 479], "deili": [473, 477, 479, 484, 485], "pythonhttpsverifi": 473, "_https_verify_certif": 473, "autotool": [473, 480, 481], "pregener": [473, 480, 481, 485], "23404": [473, 480, 481, 485], "philip": [473, 477, 481, 485], "jenvey": [473, 477], "ryan": [473, 478, 479, 481, 482, 485], "lovett": 473, "hugh": 473, "secker": 473, "walker": 473, "cruft": 474, "wealth": 474, "softspac": [474, 485], "retrain": 474, "corollari": 474, "incompar": 474, "0720": 474, "0o720": 474, "loud": 474, "unixi": 474, "3138": 474, "some_sequ": 474, "vindic": 474, "3109": 474, "crutch": 474, "item1": 474, "item2": 474, "3113": 474, "b_c": 474, "3108": 474, "beo": 474, "instabl": 474, "disobey": 474, "copy_reg": 474, "markupbas": 474, "_markupbas": [474, 476, 485], "dbhash": 474, "htmlentitydef": 474, "basehttpserv": 474, "cgihttpserv": [474, 485], "simplehttpserv": [474, 485], "jumpahead": 474, "tmpnam": 474, "tempnam": 474, "tmpfile": 474, "scoop": 474, "secondaryexcept": 474, "primary_except": 474, "__getslice__": 474, "__setslice__": 474, "__delslice__": 474, "3114": 474, "func_x": 474, "__x__": 474, "wit": 474, "func_cod": 474, "func_default": 474, "func_dict": 474, "func_doc": 474, "func_glob": 474, "3111": 474, "tru64": 474, "3123": 474, "pynumber_coerc": 474, "pynumber_coerceex": 474, "pymember_get": 474, "pymember_set": 474, "nb_nonzero": 474, "with_cycle_gc": 474, "contort": 474, "8901234": 475, "12j": 475, "600000": 475, "901": 475, "120000j": 475, "underway": 475, "camelot": 475, "5675": [475, 477], "mattia": [475, 477], "ndstr": [475, 477], "4707": 475, "199999999999ap": 475, "1580": 475, "grew": [475, 477], "namesak": 475, "lv": 475, "ov": 475, "oe": 475, "_0": 475, "query_field": 475, "userqueri": 475, "sale": [475, 477], "4384": 475, "vajda": 475, "4195": 475, "4201": 475, "5228": 475, "testgizmo": 475, "test_gizmo_on_window": 475, "test_gimzo_without_required_librari": 475, "builtout": 475, "test_division_by_zero": 475, "confound": 475, "remap": 475, "c__builtin__": 475, "nset": 475, "np0": 475, "lp1": 475, "nl1l": 475, "nal2l": 475, "nal3l": 475, "natp2": 475, "nrp3": 475, "6137": 475, "sunpro": 475, "4753": 475, "4868": 475, "roger": [475, 484, 485], "serwi": [475, 485], "5150": [475, 477], "lisandro": 475, "dalcrin": 475, "5175": 475, "pynumber_int": 475, "4910": 475, "5914": 475, "7182818284590451": 475, "718281828459045": 475, "galindo": [476, 482, 483, 484, 485], "salgado": [476, 480, 483, 484, 485], "635": 476, "12782": 476, "632": 476, "wstr": 476, "624": [476, 485], "ctxmanag": 476, "ctxmanager1": 476, "ctxmanager2": 476, "example1": 476, "example2": 476, "ctxmanager3": 476, "example3": 476, "lysandro": [476, 484, 485], "nikolaou": [476, 484, 485], "40334": [476, 484, 485], "some_other_cod": 476, "eol": [476, 485], "42864": [476, 485], "batuhan": [476, 484, 485], "taskaya": [476, 484, 485], "40176": [476, 485], "43914": [476, 485], "rocket": 476, "event_horizon": 476, "42997": [476, 485], "unparenthesis": 476, "43017": [476, 485], "43822": [476, 485], "build_dyson_spher": 476, "notenoughscienceerror": 476, "notenoughresourceserror": 476, "43149": [476, 485], "43823": [476, 485], "44305": [476, 485], "43797": [476, 485], "all_black_hol": 476, "revel": 476, "41064": [476, 485], "lel": 476, "namedtoplo": 476, "38530": [476, 485], "schwarzschild_black_hol": 476, "schwarschild_black_hol": 476, "pattern_1": 476, "action_1": 476, "pattern_2": 476, "action_2": 476, "pattern_3": 476, "action_3": 476, "action_wildcard": 476, "scala": 476, "elixir": 476, "imper": 476, "insur": 476, "test_vari": 476, "maggi": [476, 483], "moss": 476, "prado": 476, "41428": [476, 485], "yurii": [476, 484, 485], "karaba": [476, 484, 485], "44490": [476, 485], "jin": [476, 481, 482, 483, 484, 485], "41559": [476, 485], "jell": [476, 481, 482, 485], "zijlstra": [476, 481, 482, 485], "43783": 476, "mendoza": 476, "unannot": 476, "strcach": 476, "log_prefix": 476, "mikhail": 476, "golubev": 476, "41923": [476, 485], "43766": [476, 485], "traut": 476, "nikla": [476, 485], "fieka": [476, 485], "29882": [476, 485], "sweeney": [476, 484, 485], "40890": [476, 485], "37999": [476, 485], "shkop": [476, 485], "38302": [476, 485], "shannon": [476, 478, 482, 483, 484, 485], "42990": [476, 485], "joshua": [476, 480, 485], "bronson": [476, 483, 485], "pope": [476, 485], "justin": [476, 478, 485], "wang": [476, 482, 485], "31861": [476, 485], "43682": [476, 485], "42737": [476, 485], "43901": [476, 485], "42725": [476, 485], "effectless": 476, "43475": [476, 485], "hee": [476, 483, 484, 485], "45000": [476, 485], "nholm": [476, 483], "41332": [476, 485], "9694": [476, 485], "lorentsen": [476, 482, 485], "zackeri": [476, 483, 484, 485], "spytz": [476, 483, 484, 485], "31956": [476, 485], "clearbreakpoint": 476, "irit": [476, 485], "katriel": [476, 485], "24160": [476, 485], "4356": [476, 485], "hai": 476, "shi": 476, "41842": [476, 485], "42195": [476, 484, 485], "joongi": [476, 485], "kim": [476, 485], "41229": [476, 485], "gringauz": 476, "41543": [476, 485], "kintscher": [476, 485], "petter": [476, 483, 485], "jansson": 476, "36982": [476, 485], "39273": [476, 485], "42269": [476, 485], "43532": [476, 485], "42802": [476, 485], "42133": [476, 485], "normalize_encod": [476, 484, 485], "39337": [476, 485], "inada": [476, 480, 481, 482, 483, 484, 485], "naoki": [476, 480, 481, 482, 483, 484, 485], "43712": [476, 485], "5758": 476, "44466": [476, 485], "43439": [476, 485], "38144": [476, 485], "43669": [476, 485], "38820": [476, 485], "43880": [476, 485], "40645": [476, 485], "hilton": [476, 484, 485], "43008": [476, 484, 485], "40468": [476, 484, 485], "33962": [476, 484, 485], "sidebar": [476, 485], "tal": [476, 480, 481, 482, 483, 485], "einat": [476, 480, 481, 482, 483, 485], "37903": [476, 485], "37892": [476, 485], "44010": [476, 485], "pyi": [476, 484, 485], "waygood": [476, 484, 485], "45447": [476, 484, 485], "95191": [476, 485], "from_funct": [476, 480, 485], "43817": [476, 485], "38200": [476, 485], "rtos": [476, 485], "peix": [476, 485], "xin": [476, 485], "41440": [476, 485], "eventfd2": 476, "41001": [476, 485], "41625": [476, 485], "43106": [476, 485], "barney": [476, 485], "gale": 476, "43757": 476, "35498": [476, 485], "yaroslav": [476, 485], "pankovych": [476, 485], "21041": [476, 485], "39950": [476, 485], "39906": [476, 485], "28468": [476, 485], "sblondon": 476, "42914": [476, 485], "lewi": [476, 485], "gaul": [476, 485], "43080": [476, 485], "schevchenko": [476, 485], "38731": [476, 485], "readline_ex": 476, "avir": [476, 485], "srivastava": [476, 485], "38307": [476, 485], "34204": [476, 485], "tymoteusz": [476, 485], "wo": [476, 485], "ko": [476, 481, 482, 485], "38490": [476, 485], "42413": [476, 485], "mptcp": [476, 485], "rui": 476, "cunha": 476, "43571": [476, 485], "dscp": [476, 485], "ecn": [476, 485], "sauthoff": 476, "44077": [476, 485], "43794": [476, 485], "43788": [476, 485], "43791": [476, 485], "43799": [476, 485], "43920": [476, 485], "43789": [476, 485], "43811": [476, 485], "hynek": [476, 478, 479, 485], "schlawack": [476, 478, 479, 485], "43998": [476, 485], "31870": [476, 485], "42333": [476, 485], "l0x": 476, "40849": [476, 485], "erlend": [476, 485], "aasland": [476, 485], "43762": [476, 485], "23427": [476, 485], "42955": [476, 485], "43356": [476, 485], "mario": [476, 482, 485], "corchero": [476, 482, 485], "42251": [476, 485], "42308": [476, 485], "bussonni": [476, 482, 483, 485], "26389": [476, 485], "bas": 476, "beek": 476, "41810": [476, 485], "42345": [476, 484, 485], "41792": [476, 485], "38908": [476, 485], "sebastian": [476, 485], "rittau": 476, "38291": [476, 485], "kit": [476, 485], "yan": [476, 485], "choi": [476, 485], "39385": [476, 485], "goldschmidt": [476, 481, 482, 483, 484, 485], "42967": [476, 481, 482, 483, 484, 485], "_unsafe_url_bytes_to_remov": 476, "43882": [476, 485], "jonathan": [476, 478, 480, 483, 485], "gossag": 476, "35018": [476, 485], "42131": [476, 485], "desmond": [476, 485], "cheong": [476, 485], "14678": [476, 485], "41334": [476, 485], "41006": [476, 485], "41718": 476, "yuri": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "selivanov": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "42093": [476, 485], "42927": [476, 485], "micropython": [476, 485], "38980": [476, 485], "_compress": [476, 485], "decompressread": [476, 485], "09x": 476, "17x": [476, 485], "20x": 476, "32x": 476, "11x": 476, "18x": 476, "lin": [476, 485], "41486": [476, 485], "42202": [476, 485], "str1": [476, 485], "str2": [476, 485], "crochemor": 476, "41972": [476, 485], "dino": [476, 481, 484, 485], "viehland": [476, 481, 484, 485], "43452": [476, 485], "jeroen": [476, 481, 483, 484, 485], "demey": [476, 481, 483, 484, 485], "43575": [476, 485], "43287": [476, 485], "41922": [476, 485], "41873": [476, 485], "41870": [476, 485], "43785": [476, 485], "0in": 476, "1or": 476, "0if": 476, "1els": 476, "0x1for": 476, "43833": [476, 485], "37319": 476, "26131": [476, 485], "zimport": 476, "42134": [476, 485], "43672": [476, 485], "42135": [476, 485], "set_package_wrapp": 476, "set_loader_wrapp": 476, "43720": [476, 485], "42137": [476, 485], "frozenload": 476, "builtinload": 476, "42136": [476, 485], "optimizedunicod": [476, 485], "42264": [476, 485], "streamreaderprotocol": [476, 485], "39529": [476, 485], "enable_shared_cach": [476, 485], "24464": [476, 485], "87889": 476, "41139": [476, 485], "sslsslcontext": 476, "44584": [476, 485], "41974": [476, 485], "parserbas": [476, 485], "berker": [476, 479, 480, 481, 482, 483, 485], "peksag": [476, 479, 480, 481, 482, 483, 485], "31844": [476, 485], "_pyunicode_name_capi": [476, 485], "42157": [476, 485], "graminit": 476, "pyparser_simpleparsestringflag": [476, 484], "pyparser_simpleparsestringflagsfilenam": [476, 484], "pyparser_simpleparsefileflag": [476, 484], "pynode_compil": [476, 484], "42299": [476, 485], "pymodule_getwarningsmodul": 476, "42599": 476, "37324": [476, 485], "multifold": 476, "svetlov": [476, 479, 482, 483, 484], "stanley": [476, 481, 482, 483, 484, 485], "42392": [476, 485], "42639": [476, 485], "42393": [476, 485], "_node": [476, 485], "io_modul": 476, "import_importmodul": 476, "source_bytes_object": 476, "source_buf": 476, "frameobject": [476, 485], "wordcod": [476, 481, 485], "36020": [476, 485], "sergey": [476, 484, 485], "fedoseev": [476, 484, 485], "40744": [476, 485], "40810": [476, 485], "xavier": [476, 479, 481, 482, 485], "petazzoni": [476, 485], "27640": [476, 485], "42856": [476, 485], "43103": [476, 485], "manoli": 476, "stamatogiannaki": 476, "42603": [476, 485], "43466": [476, 485], "petr": [476, 480, 482, 483, 484, 485], "viktorin": [476, 480, 483, 484, 485], "43795": [476, 485], "40792": [476, 485], "30155": [476, 485], "matveev": [476, 483, 485], "41756": [476, 485], "41784": [476, 485], "1635741": [476, 485], "42262": [476, 485], "42423": [476, 485], "41832": [476, 485], "41073": [476, 485], "43277": [476, 485], "36465": [476, 483, 485], "43688": [476, 485], "43753": [476, 485], "43916": [476, 485], "43908": [476, 485], "40943": [476, 485], "new_refcnt": 476, "0x030900a4": 476, "39573": [476, 485], "40839": [476, 485], "36346": [476, 484, 485], "42260": [476, 485], "30459": [476, 485], "odictobject": [476, 485], "parser_interfac": [476, 485], "picklebufobject": [476, 485], "pyarena": [476, 485], "pyctyp": [476, 485], "pyfp": [476, 484, 485], "pytim": [476, 485], "sim": 476, "35134": [476, 483, 485], "py_frozenmain": [476, 485], "26241": 476, "41692": [476, 485], "py_unicode_str": [476, 485], "41123": [476, 485], "py_unicode_strlen": [476, 478], "py_unicode_strcat": [476, 478], "py_unicode_strcpi": [476, 478], "py_unicode_strncpi": [476, 478], "py_unicode_strcmp": [476, 478], "py_unicode_strncmp": [476, 478], "py_unicode_strchr": [476, 478], "py_unicode_strrchr": [476, 478], "pyunicode_getmax": [476, 478, 485], "41103": [476, 485], "pylong_fromunicod": [476, 485], "pyunicode_asunicodecopi": [476, 478, 485], "_py_checkrecursionlimit": [476, 484, 485], "ceval": [476, 485], "recursion_limit": [476, 485], "41834": [476, 485], "py_allow_recurs": [476, 485], "py_end_allow_recurs": [476, 485], "recursion_crit": [476, 485], "41936": [476, 485], "pyos_initinterrupt": [476, 485], "41713": [476, 485], "pyast_valid": [476, 485], "43244": [476, 485], "pyst_getscop": [476, 485], "pysymtable_build": [476, 485], "pysymtable_buildobject": [476, 485], "pysymtable_fre": [476, 485], "py_symtablestr": [476, 485], "py_symtablestringobject": [476, 485], "43868": [476, 485], "winbas": [476, 485], "_mod": [476, 485], "pyast_compileex": [476, 485], "pyast_compileobject": [476, 485], "pyfuture_fromast": [476, 485], "pyfuture_fromastobject": [476, 485], "pyparser_astfromfileobject": [476, 485], "pyparser_astfromfilenam": [476, 485], "pyparser_astfromstringobject": [476, 485], "pyarena_new": [476, 485], "pyarena_fre": [476, 485], "pyarena_malloc": [476, 485], "pyarena_addpyobject": [476, 485], "use_trac": 476, "43760": [476, 485], "98966": 476, "392": 477, "sneezi": 477, "sleepi": 477, "skycaptain": 477, "manage_cloud": 477, "helm": 477, "parser_l": 477, "missil": 477, "torpedo": 477, "parser_m": 477, "vessel": 477, "console_prior": 477, "compet": 477, "unladen10": 477, "py32": 477, "pyload": [477, 479], "pypycload": [477, 479], "pyshar": 477, "32m": 477, "33md": 477, "soabi": [477, 485], "32mu": 477, "ext_suffix": [477, 479, 485], "salient": 477, "pathway": [477, 485], "0o24": 477, "7094": 477, "shl": 477, "project_nam": 477, "lowercaseddict": 477, "lcd": 477, "placeholderdict": 477, "6081": 477, "marcin": 477, "wojdyr": 477, "1772833": 477, "9666": 477, "9337": 477, "abcdefgh": [477, 479], "9757": 477, "4617": 477, "structsequ": [477, 485], "8413": 477, "10093": 477, "477863": 477, "9213": 477, "2690": 477, "10889": 477, "10518": 477, "aggrav": 477, "9425": 477, "undergon": 477, "4661": 477, "10321": 477, "get_phone_numb": 477, "phonenumb": 477, "phonelist": 477, "user_request": 477, "4805": 477, "980": 477, "baker": 477, "498245": 477, "577479": 477, "10586": 477, "10593": 477, "terrenc": 477, "9567": 477, "3445": 477, "8814": 477, "prob_dist": 477, "satur": 477, "renew": 477, "resequenc": 477, "simsalabim": 477, "get_vot": 477, "ballot": 477, "conduct_elect": 477, "all_polls_clos": 477, "lockbox": 477, "seal_ballot": 477, "elect": 477, "deposit": 477, "8777": 477, "923754": 477, "accept2dyear": [477, 478], "guesswork": 477, "1289118": 477, "5094": 477, "6641": 477, "2706": 477, "1777412": 477, "8013": 477, "10827": 477, "013671875": 477, "013765762467652909": 477, "682689492137086": 477, "31731050786291404": 477, "gamma_funct": 477, "801": 477, "4551": 477, "950730698041": 477, "temperatur": 477, "from_fahrenheit": 477, "from_celsius": 477, "urban": [477, 479, 485], "5867": 477, "rec_len": 477, "loc_start": 477, "loc_len": 477, "change_loc": 477, "record_numb": 477, "byte_stream": 477, "g3805": 477, "storeroom": 477, "chassi": 477, "x7899": 477, "cog": 477, "l6988": 477, "sprocket": 477, "showroom": 477, "5506": 477, "9826": 477, "9840": 477, "susan": [477, 485], "salesl": 477, "talbot": 477, "5975": 477, "abraham": [477, 485], "1537721": 477, "duti": 477, "9110": 477, "8188": 477, "2305843009213693951": 477, "314159": 477, "1000003": 477, "8540": [477, 478], "log1": 477, "rodol": [477, 478, 483], "4972": [477, 480], "8046": 477, "1286": 477, "8806": 477, "7461": 477, "10554": 477, "bastien": [477, 479], "sabl": 477, "9862": 477, "3488": 477, "9962": 477, "1675951": 477, "redact": 477, "902": 477, "general_quest": 477, "3514": 477, "prion": 477, "py_todo": 477, "1399": 477, "semaphore_not": 477, "md2": 477, "dsawithsha": 477, "mdc2": 477, "md4": 477, "ripemd160": 477, "dsa": 477, "dsaencrypt": 477, "0x101739a10": 477, "sehensw": 477, "rdigkeiten": 477, "xc3": 477, "xbcrdigkeiten": 477, "in_transit": 477, "shashwat": 477, "8845": 477, "8524": 477, "9794": 477, "8850": 477, "1589": 477, "5639": 477, "4870": 477, "dysfunct": 477, "9360": 477, "vant": 477, "1926": 477, "9003": 477, "lorenzo": [477, 479], "catucci": [477, 479], "4471": 477, "10980": 477, "10620": 477, "my_proj_dir": 477, "9754": 477, "test_anagram": 477, "volumin": 477, "ups": [477, 485], "9424": 477, "misimpl": 477, "optic": 477, "9025": 477, "8807": 477, "6706": 477, "5178": 477, "rodolpho": 477, "eckhardt": 477, "10220": 477, "0x1022bd788": 477, "pydoc3": 477, "ron": 477, "newloc": 477, "nofre": 477, "_randbelow": 477, "9147": 477, "ray": [477, 479, 485], "9523": 477, "raymondhetting": 477, "os2": 477, "os2_hom": 477, "bindir": 477, "binlibdest": 477, "includepi": 477, "libdest": 477, "projectbas": 477, "py_vers": 477, "py_version_nodot": 477, "py_version_short": 477, "antonio": 477, "cuni": 477, "ilya": [477, 482, 485], "sandler": 477, "safeconfigpars": 477, "pluggabl": [477, 479, 481], "ambv": 477, "zope9": 477, "plone": 477, "zope9instal": 477, "zope9inst": 477, "beef": 477, "cafe": 477, "5417": 477, "aff": 477, "8fa3": 477, "telenovela": 477, "elisa": 477, "bfd": 477, "f3nde": 477, "e1": 477, "mahn": 477, "5468": 477, "9873": 477, "steffen": 477, "daod": 477, "nurpmeso": 477, "9124": 477, "10199": 477, "7316": 477, "torsten": [477, 478, 485], "landschoff": [477, 478, 485], "850728": 477, "kleckner": 477, "8844": 477, "6690": 477, "9410": 477, "3873": 477, "9915": 477, "7451": 477, "10314": 477, "10x": [477, 478, 479, 482, 485], "15x": [477, 484, 485], "3001": 477, "stringlib": 477, "differenc": [477, 485], "andress": 477, "bennett": 477, "8685": 477, "1569291": 477, "3709": [477, 478], "schaaf": [477, 478], "sped": [477, 480, 483, 484, 485], "10160": 477, "christo": 477, "georgiou": 477, "7113": 477, "mobil": 477, "kannada": 477, "0cf1": 477, "0cf2": 477, "tai": 477, "lue": 477, "19da": 477, "disqualifi": 477, "cheatsheet": 477, "jog": 477, "adjunct": 477, "9528": 477, "7962": 477, "aquatk": 477, "6075": 477, "changeset": [477, 479, 485], "385": 477, "workflow": [477, 485], "10679": 477, "bupjo": 477, "5127": 477, "9203": 477, "wctype": 477, "9210": 477, "9778": 477, "py_va_copi": 477, "va_copi": 477, "2443": 477, "8837": 477, "buildscript": [477, 485], "8990": 477, "setfilesystemencod": 477, "6shhbbb": 477, "gif87a": 477, "10783": 477, "10711": 477, "10272": 477, "398": 478, "segreg": 478, "meyer": [478, 483, 484, 485], "13411": 478, "10181": 478, "u0010ffff": 478, "udbff": 478, "udfff": 478, "13054": 478, "becker": 478, "3561": 478, "gather_t": 478, "acc": 478, "renaud": [478, 485], "blanch": [478, 485], "zbigniew": [478, 485], "drzejewski": [478, 485], "szmek": [478, 485], "_extra_attribut": 478, "ethan": [478, 479, 480, 481, 482, 483, 484, 485], "furman": [478, 479, 480, 481, 482, 485], "0x7f46b9fe31e0": 478, "amend": [478, 485], "2377": 478, "13959": 478, "14605": 478, "14646": 478, "growth": [478, 485], "delin": 478, "12753": 478, "13201": 478, "petri": [478, 485], "lehtinen": 478, "12170": 478, "12380": 478, "10516": 478, "11388": 478, "13748": 478, "filip": [478, 479, 483, 485], "gruszczi": [478, 479, 483, 485], "ski": [478, 479, 483, 485], "13521": 478, "clumsi": 478, "9260": 478, "4966": 478, "3144": 478, "nadeem": [478, 479], "vawda": [478, 479], "yvind": 478, "karlsen": [478, 485], "6715": 478, "darren": 478, "11610": 478, "10868": 478, "1172711": 478, "ywjj": 478, "catalin": [478, 485], "iacob": [478, 485], "13641": 478, "13637": 478, "5863": 478, "pbzip2": 478, "1625": 478, "13216": 478, "65001": [478, 485], "cp_utf8": [478, 485], "chcp": [478, 485], "cjk": [478, 485], "12016": 478, "u52ff": 478, "u65bd": 478, "u65bc": 478, "u4eba": 478, "u3002": 478, "npj": 478, "l6hk": 478, "hk": 478, "12100": 478, "11089": 478, "11297": 478, "11085": 478, "13121": 478, "13585": 478, "10924": 478, "ncursesw": [478, 485], "waddwstr": 478, "igo": 478, "serna": 478, "6755": 478, "15006": 478, "7652": 478, "100x": 478, "bytereef": 478, "mpdecim": [478, 485], "quickstart": 478, "02s": 478, "345s": 478, "120x": 478, "telco": 478, "19s": 478, "68s": 478, "psycopg": 478, "57s": 478, "29s": 478, "12x": 478, "rhs": 478, "watchexp": [478, 485], "465484": 478, "72000": 478, "89ric": 478, "pal": 478, "salli": 478, "bonzo": 478, "bonz": 478, "ought": 478, "8594": 478, "12139": 478, "11072": 478, "13227": 478, "15061": 478, "13295": 478, "kuhn": 478, "13464": 478, "htmlparseerror": 478, "15114": [478, 479, 480, 485], "14538": 478, "13993": 478, "13960": 478, "13358": 478, "1745761": 478, "755670": 478, "13357": 478, "12629": 478, "1200313": 478, "670664": 478, "13273": 478, "12888": 478, "7311": 478, "11113": 478, "15156": 478, "sijin": 478, "joseph": [478, 481, 485], "8808": 478, "13062": 478, "15153": 478, "c11": [478, 485], "townshend": 478, "12760": 478, "11888": 478, "12021": 478, "12328": 478, "4892": 478, "6064": 478, "12708": 478, "9795": 478, "lagerwal": 478, "10882": 478, "4761": 478, "10755": 478, "14626": 478, "supports_follows_symlink": 478, "10784": 478, "8828": 478, "14127": 478, "13609": 478, "12720": 478, "9344": 478, "dlfcn": [478, 481, 485], "13226": 478, "14210": 478, "14166": 478, "3665": 478, "13449": 478, "8684": 478, "delayfunct": 478, "13245": 478, "6397": 478, "12442": 478, "sandro": 478, "tosi": 478, "12191": 478, "15238": 478, "12715": 478, "niehof": 478, "9993": 478, "4489": 478, "8407": 478, "elho": 478, "trevino": 478, "juhana": 478, "jauhiainen": 478, "orr": [478, 479, 483, 484, 485], "boswel": 478, "8739": 478, "paulo": [478, 485], "scardin": 478, "11281": 478, "11289": 478, "kasun": 478, "herath": 478, "8809": 478, "watson": 478, "6560": 478, "heiko": 478, "wundram": 478, "socketcan": [478, 485], "lwn": 478, "253425": 478, "fuch": [478, 483, 485], "tiago": 478, "alv": 478, "10141": 478, "reliable_datagram_socket": 478, "rds": [478, 485], "goderbau": 478, "13777": 478, "10866": 478, "warkentin": 478, "11109": 478, "11688": 478, "12049": 478, "11183": 478, "simpkin": 478, "12803": 478, "13626": 478, "13627": 478, "scram": 478, "jacek": [478, 481, 485], "konieczni": 478, "12551": 478, "13634": 478, "colin": [478, 485], "14204": 478, "14837": 478, "11811": 478, "13635": 478, "14807": 478, "3163": 478, "8513": 478, "5870": 478, "11223": 478, "5689": 478, "9957": 478, "13857": 478, "10968": 478, "clock_xxx": 478, "10278": 478, "14386": 478, "14588": 478, "winston": 478, "ewert": 478, "10775": 478, "1673007": 478, "xdg": [478, 485], "gvfs": 478, "calmett": 478, "13620": 478, "14493": 478, "12646": 478, "12306": 478, "2x": [478, 481, 485], "14624": 478, "14738": 478, "15026": 478, "osf": 478, "9856": 478, "11377": 478, "13374": 478, "13988": 478, "py_unicode_copi": [478, 484, 485], "py_unicode_fil": [478, 484, 485], "py_unicode_match": [478, 484, 485], "pyunicode_encodedecim": 478, "12326": 478, "13847": 478, "14180": 478, "longstand": 478, "1079": 478, "1690608": 478, "11291": 478, "assertsameel": 478, "_clamp": 478, "sslfakefil": 478, "13550": 478, "smalltabl": 478, "pymemoryviewobject": [478, 480], "memoryobject": [478, 480], "xxxmodul": 478, "14040": 478, "10998": 478, "11591": 478, "rdmurray": 479, "bitdanc": 479, "16499": 479, "16475": 479, "3156": 479, "435": 479, "450": 479, "454": 479, "8713": 479, "18891": 479, "18214": 479, "unvers": 479, "pip3": 479, "hex_decod": 479, "bz2_encod": 479, "68656c6c6f": 479, "7475": 479, "17827": 479, "17828": 479, "19619": 479, "stone": 479, "berman": 479, "18111": 479, "18416": 479, "kang": 479, "hao": 479, "12892": 479, "bierenfeld": 479, "1097797": 479, "ukrainian": [479, 482], "19668": 479, "15958": 479, "16772": 479, "17934": 479, "claudiu": [479, 480, 485], "popa": [479, 480, 485], "18690": 479, "19078": 479, "16148": 479, "declin": 479, "eli": [479, 481, 485], "benderski": 479, "aprano": [479, 481, 483], "16832": 479, "bruno": [479, 480, 485], "dupui": 479, "16049": 479, "17818": 479, "storchacha": 479, "16486": 479, "8311": 479, "maystr": 479, "11175": 479, "12866": 479, "19641": 479, "16685": 479, "17839": 479, "a85": 479, "17618": 479, "16613": 479, "fcc": 479, "ntsc": 479, "lander": [479, 482], "14323": 479, "15806": 479, "piraeus": 479, "19266": 479, "inflex": [479, 480], "15805": 479, "19282": 479, "kluyver": [479, 480, 481, 485], "11816": 479, "17916": 479, "19722": 479, "16522": 479, "11390": 479, "3158": 479, "18600": 479, "email6": 479, "levitt": 479, "18149": 479, "15442": 479, "horev": 479, "4331": 479, "kati": 479, "10042": 479, "thorn": 479, "12428": 479, "16351": 479, "18582": 479, "coomb": [479, 483, 484], "18532": 479, "jona": [479, 482, 485], "borgstr": 479, "18240": 479, "17276": 479, "247": 479, "18775": 479, "2927": 479, "invit": 479, "13633": 479, "karl": [479, 484, 485], "cow": 479, "12921": 479, "malt": 479, "swart": 479, "17764": 479, "15627": 479, "18072": 479, "18193": 479, "18192": 479, "18194": 479, "namespaceload": 479, "18058": 479, "19152": 479, "18626": 479, "unravel": 479, "aaron": [479, 485], "ile": 479, "13266": 479, "18929": 479, "19030": 479, "broader": 479, "17481": 479, "behnel": [479, 480, 482, 483, 485], "17159": 479, "routeabl": 479, "17400": 479, "9556": 479, "ce46195b56a9": 479, "16110": 479, "15452": 479, "bump": [479, 485], "19219": 479, "valeri": 479, "4885": 479, "18999": 479, "19946": 479, "16694": 479, "nelson": 479, "yogesh": 479, "chaudhari": 479, "17914": 479, "11939": 479, "9035": 479, "uapi": 479, "18673": 479, "16596": 479, "osborn": 479, "18764": 479, "14455": 479, "4473": 479, "19132": 479, "17150": 479, "19674": 479, "20710": 479, "barnett": [479, 485], "16203": 479, "hugo": [479, 484, 485], "lope": 479, "tavar": 479, "13592": 479, "17087": 479, "16595": 479, "19324": 479, "19343": 479, "16488": 479, "18794": 479, "13896": 479, "atsuo": 479, "ishimoto": 479, "1492704": 479, "11959": 479, "2118": 479, "15359": 479, "7171": 479, "poq": 479, "13773": 479, "16692": 479, "stringent": 479, "19689": 479, "18138": 479, "18143": 479, "18147": 479, "christien": 479, "8813": 479, "19292": 479, "17134": 479, "8109": 479, "calissu": 479, "18379": 479, "_stat": [479, 485], "11016": 479, "hiem": 479, "17804": 479, "zack": 479, "weinberg": 479, "16624": 479, "10197": 479, "18901": 479, "18878": 479, "19261": 479, "13390": 479, "5845": 479, "13477": 479, "18585": 479, "18725": 479, "18882": 479, "1565525": 479, "mathia": 479, "panzenb": 479, "ck": 479, "16423": 479, "18978": 479, "kachayev": [479, 480, 485], "16464": 479, "wozniak": 479, "17485": 479, "brecht": [479, 480, 481, 485], "17272": 479, "15701": 479, "16997": 479, "jyrki": 479, "pulliainen": 479, "15132": 479, "zach": [479, 485], "16935": 479, "melin": 479, "ramnani": 479, "16709": 479, "wardil": 479, "mcclure": 479, "11798": 479, "18937": 479, "17457": 479, "17015": 479, "toshio": 479, "kuratomi": 479, "17467": 479, "15417": 479, "19552": 479, "17487": 479, "17616": 479, "5202": 479, "14631": 479, "15528": 479, "17643": 479, "17741": 479, "ariel": 479, "poliak": 479, "14377": 479, "19274": 479, "william": [479, 485], "mallard": 479, "17201": 479, "14621": 479, "dsl": 479, "17162": 479, "montagn": 479, "16129": 479, "1772673": 479, "ysj": [479, 485], "7330": 479, "dhiru": 479, "kholia": 479, "18596": 479, "16632": 479, "18338": 479, "18920": 479, "18922": 479, "18569": 479, "gcov": 479, "lcov": 479, "clav": 479, "milauer": 479, "16421": 479, "17853": 479, "pyfailmalloc": 479, "18408": 479, "18520": 479, "18807": [479, 485], "18818": 479, "heaney": [479, 480], "vajraski": [479, 480, 485], "kok": [479, 480, 485], "19201": 479, "19222": [479, 480], "19223": 479, "3x": [479, 485], "14625": 479, "linear_prob": 479, "18771": 479, "19218": 479, "19209": 479, "19205": 479, "9548": 479, "16034": 479, "16674": 479, "15596": 479, "15758": 479, "bryant": 479, "18020": 479, "18756": 479, "xxxloader": 479, "endtim": [479, 485], "readplistfrombyt": [479, 482, 485], "writeplisttobyt": 479, "18823": 479, "19375": 479, "16135": 479, "e52df05b496a": 479, "14470": 479, "16136": 479, "shlib_suffix": 479, "16754": 479, "tick_count": 479, "19199": 479, "tara": 479, "lyapun": 479, "15641": 479, "type_int64": [479, 485], "riti": 479, "15480": 479, "isbjunk": 479, "isbpopular": 479, "sm": 479, "13248": [479, 481, 485], "_gestalt": 479, "_mac_ver_lookup": 479, "_mac_ver_gstalt": 479, "_bcd2str": 479, "18393": 479, "17323": 479, "17115": 479, "module_to_load": 479, "19413": 479, "18065": 479, "is_frozen": 479, "felt": [479, 483, 485], "interstiti": 479, "17434": 479, "b32": 479, "18011": 479, "9177": 479, "14794": 479, "16290": 479, "16967": 479, "perpetu": 479, "17094": 479, "20625": 479, "19555": 479, "ineffect": 479, "15204": 479, "16333": 479, "20784": 479, "16742": 479, "f_tstate": 479, "14432": 479, "elvi": [480, 481, 482, 483, 484, 485], "pranskevichus": [480, 481, 482, 483, 484, 485], "478": 480, "441": [480, 485], "arnon": [480, 485], "yaari": [480, 485], "9951": [480, 485], "23632": [480, 485], "benno": [480, 485], "lesli": [480, 485], "24450": [480, 485], "19235": [480, 485], "lc_type": [480, 485], "19977": [480, 485], "streamlin": [480, 485], "22638": [480, 485], "22796": [480, 485], "rudimentari": 480, "http_get": 480, "nathaniel": [480, 482, 485], "landau": 480, "girdhar": [480, 481, 485], "detract": 480, "500000": 480, "evid": 480, "lehtosalo": 480, "intermitt": 480, "conceal": 480, "unguard": 480, "pernici": 480, "angelico": [480, 481, 485], "99998": 480, "00003": 480, "00001": 480, "barker": [480, 485], "19676": [480, 485], "22286": [480, 485], "23681": [480, 485], "22682": [480, 485], "22681": [480, 485], "24064": [480, 485], "17636": [480, 485], "23491": [480, 485], "paugh": [480, 485], "j3": [480, 482, 485], "eriksson": [480, 485], "14910": [480, 485], "proactor": [480, 485], "22560": 480, "21326": [480, 485], "yann": [480, 481, 485], "sionneau": [480, 481], "uvloop": [480, 481], "korenberg": [480, 481], "jiryu": [480, 481, 485], "davi": [480, 481, 485], "nikolaus": [480, 485], "rath": [480, 485], "15955": [480, 485], "20289": [480, 485], "24270": [480, 485], "17442": [480, 485], "16991": [480, 485], "19505": [480, 485], "23704": [480, 485], "coodin": 480, "abscissa": 480, "jevnik": [480, 483, 485], "22189": [480, 485], "devin": [480, 485], "jeanpierr": [480, 485], "23086": [480, 485], "24018": [480, 485], "24184": [480, 485], "16104": 480, "19628": [480, 485], "21338": [480, 485], "11271": [480, 485], "21527": [480, 485], "18159": 480, "22389": [480, 485], "23171": [480, 485], "4254": [480, 485], "18039": [480, 485], "2052": [480, 485], "17445": [480, 485], "5309": [480, 485], "16314": [480, 485], "glenn": 480, "15916": [480, 485], "milan": [480, 482, 485], "oberkirch": [480, 482, 485], "20098": [480, 485], "abhilash": [480, 485], "raj": [480, 485], "21083": 480, "24211": [480, 485], "claud": [480, 485], "paroz": [480, 485], "16324": [480, 485], "21706": 480, "wei": [480, 485], "wu": [480, 485], "23566": [480, 485], "14373": [480, 485], "13968": [480, 485], "55555": 480, "6666": 480, "13742": [480, 485], "demian": [480, 481, 485], "21793": [480, 485], "panter": [480, 481, 485], "3566": 480, "maciej": 480, "szulik": 480, "21800": [480, 485], "vignali": 480, "20295": [480, 485], "fabric": [480, 485], "anech": [480, 485], "20197": [480, 485], "17621": [480, 485], "21156": [480, 485], "20383": [480, 485], "20726": [480, 485], "20334": [480, 485], "24190": [480, 485], "17373": [480, 485], "20691": [480, 485], "24017": [480, 485], "24400": [480, 485], "shahaf": [480, 485], "16808": [480, 485], "20578": 480, "16531": [480, 485], "leon": [480, 485], "20480": [480, 485], "21650": [480, 485], "19361": [480, 485], "17911": [480, 485], "dric": [480, 483, 485], "krier": [480, 483, 485], "13918": [480, 485], "20537": [480, 485], "22788": [480, 485], "23185": [480, 485], "22486": [480, 484, 485], "21565": 480, "rosenberg": [480, 484, 485], "22955": [480, 485], "21176": [480, 485], "22524": [480, 485], "21719": [480, 485], "22181": [480, 485], "22054": [480, 485], "dower": [480, 481, 482, 483, 484, 485], "23668": [480, 485], "rafik": [480, 485], "draoui": [480, 485], "10395": [480, 485], "19775": [480, 485], "21539": [480, 485], "19776": [480, 485], "mayank": [480, 485], "tripathi": [480, 485], "19777": [480, 485], "spam42": 480, "welborn": 480, "20218": [480, 485], "23611": [480, 485], "21804": [480, 485], "aac": [480, 485], "sre_match": 480, "9179": [480, 485], "22437": [480, 485], "1519638": [480, 485], "22578": [480, 485], "cauet": [480, 485], "22940": [480, 485], "18931": [480, 485], "19840": 480, "5411": [480, 485], "22018": [480, 485], "21076": [480, 485], "19662": 480, "21795": [480, 485], "21725": [480, 485], "14758": 480, "15014": [480, 485], "gavin": 480, "chappel": 480, "16914": [480, 485], "22027": [480, 485], "18615": [480, 485], "22043": [480, 485], "17552": [480, 485], "23853": [480, 485], "21455": [480, 485], "21965": [480, 485], "suboptim": 480, "20188": [480, 485], "20421": [480, 485], "20951": [480, 485], "akira": [480, 485], "19940": [480, 485], "23186": [480, 485], "23239": [480, 485], "10203": [480, 485], "sinclair": 480, "jessica": [480, 485], "mckellar": 480, "13583": [480, 485], "23342": [480, 485], "set_coroutine_wrapp": [480, 482, 483, 485], "get_coroutine_wrapp": [480, 482, 483, 485], "22696": [480, 485], "23437": [480, 485], "21717": [480, 485], "vogt": [480, 485], "23193": [480, 485], "21549": [480, 485], "gindi": [480, 485], "18983": [480, 485], "2527": [480, 485], "_fix": [480, 485], "20035": [480, 485], "kazakov": [480, 485], "22619": [480, 485], "16662": [480, 485], "19746": [480, 485], "22936": [480, 485], "kushal": [480, 481, 485], "das": [480, 481, 485], "21238": [480, 485], "21262": [480, 485], "johann": [480, 485], "baiter": [480, 485], "20968": [480, 485], "kan": [480, 485], "vdahl": [480, 485], "23581": [480, 485], "23568": [480, 485], "17660": 480, "matej": [480, 485], "cepl": [480, 484, 485], "19494": [480, 485], "akshit": 480, "khurana": [480, 482, 485], "samwys": 480, "13866": [480, 485], "22366": [480, 485], "22118": [480, 485], "torr": [480, 485], "navarret": [480, 485], "silentghost": [480, 481, 485], "5800": [480, 485], "20627": [480, 485], "22960": [480, 485], "2175": [480, 485], "10590": [480, 485], "23252": [480, 485], "23001": [480, 485], "findfirstfil": 480, "findnextfil": 480, "23605": [480, 485], "21233": [480, 485], "albert": [480, 482, 485], "markus": [480, 485], "21486": [480, 485], "21487": [480, 485], "20826": [480, 485], "23266": [480, 485], "23133": [480, 485], "15381": [480, 485], "22003": [480, 485], "20416": [480, 485], "23344": [480, 485], "15027": [480, 485], "19380": [480, 485], "23206": [480, 485], "22540": [480, 485], "22847": [480, 485], "23488": [480, 485], "23910": [480, 485], "22464": 480, "23573": [480, 485], "_py_char2wchar": [480, 485], "_py_wchar2char": [480, 485], "18395": [480, 485], "18711": [480, 485], "24268": [480, 485], "amd": [480, 481], "gnu32": 480, "win_amd64": [480, 485], "win_ia64": 480, "win_arm": 480, "_d": 480, "legalchar": 480, "23671": [480, 485], "linux_distribut": [480, 485], "1322": [480, 485], "24248": [480, 485], "20438": 480, "22407": [480, 485], "23622": [480, 485], "chaput": [480, 485], "6623": [480, 485], "23464": [480, 485], "21205": [480, 485], "htmlparsererror": [480, 485], "21047": [480, 485], "16518": [480, 485], "22834": [480, 485], "23014": 480, "22818": [480, 485], "2211": [480, 485], "nnnn": [480, 485], "pot": [480, 485], "24284": [480, 485], "15582": [480, 485], "7830": [480, 485], "22453": [480, 485], "20204": [480, 485], "python36": 481, "gonzalez": [481, 482], "ivan": [481, 482, 483, 485], "levkivskyi": [481, 482, 483, 485], "lisa": [481, 483, 485], "1_000_000_000_000_000": 481, "1000000000000000": 481, "0x_ff_ff_ff_ff": 481, "ffff_ffff": 481, "ticker": 481, "pluginbas": 481, "plugin1": 481, "plugin2": 481, "teichmann": [481, 485], "intfield": 481, "int_field": 481, "some_fil": 481, "dusti": [481, 485], "koo": 481, "zevenhoven": 481, "27350": [481, 485], "jit": 481, "0x7fbcd41666f8": 481, "forbiddenbyt": [481, 485], "0x7fbcd41666fc": 481, "ouch": 481, "1233329": 481, "1a": 481, "test_byt": 481, "648": 481, "0x00007fbcdbd32700": 481, "test_hex": 481, "26516": [481, 485], "26564": [481, 485], "21590": [481, 485], "nikhil": 481, "benesch": 481, "barnert": [481, 485], "25958": [481, 485], "emanuel": [481, 485], "26823": [481, 485], "15767": 481, "23722": [481, 483, 485], "26492": [481, 485], "26146": [481, 485], "28613": [481, 485], "27041": [481, 485], "27040": [481, 485], "28370": [481, 485], "25593": [481, 485], "26221": 481, "27392": [481, 485], "27456": [481, 482, 485], "28003": [481, 485], "26081": [481, 485], "28544": [481, 485], "25357": [481, 485], "628": [481, 485], "23229": [481, 485], "27598": [481, 485], "25987": 481, "28720": [481, 485], "17941": [481, 485], "25628": [481, 485], "26482": [481, 485], "27664": [481, 485], "25609": [481, 485], "24773": [481, 485], "ashley": 481, "anderson": 481, "12006": 481, "alessandro": 481, "cucci": 481, "19475": [481, 485], "27661": [481, 485], "25928": [481, 485], "anticip": [481, 485], "27819": [481, 485], "24277": [481, 485], "27331": [481, 485], "20476": 481, "27959": [481, 485], "23591": [481, 485], "23848": [481, 485], "hackman": [481, 485], "25788": [481, 485], "26470": [481, 485], "26798": [481, 485], "16113": [481, 485], "bertoni": 481, "joan": 481, "daemen": 481, "micha": [481, 485], "peeter": 481, "gill": 481, "assch": 481, "ronni": 481, "keer": 481, "27928": [481, 485], "rolf": [481, 485], "krahl": 481, "12319": [481, 485], "tkfont": 481, "swiegart": 481, "24225": [481, 485], "autocomplet": [481, 482, 485], "louie": [481, 482, 485], "15786": [481, 482, 485], "cheryl": [481, 482, 483, 485], "sabella": [481, 482, 483, 485], "1612262": [481, 482, 485], "wohlgang": [481, 482, 485], "27099": [481, 482, 485], "13802": [481, 482, 485], "31860": [481, 482, 485], "maxlin": [481, 482, 485], "33642": [481, 482, 485], "33768": [481, 482, 485], "33679": [481, 482, 485], "dpi": [481, 482, 485], "sharper": [481, 482, 485], "33656": [481, 482, 485], "1529353": [481, 482, 483, 485], "19611": [481, 485], "churn": 481, "richer": 481, "27172": [481, 485], "17909": [481, 485], "marian": [481, 485], "horban": 481, "24884": 481, "davin": [481, 483, 485], "pott": [481, 483, 485], "6766": [481, 485], "25994": [481, 485], "27186": [481, 485], "24164": [481, 485], "25382": [481, 485], "8637": [481, 485], "24879": [481, 485], "18844": [481, 485], "ython": 481, "433028": [481, 485], "24454": [481, 485], "xiang": [481, 482, 483, 485], "zhang": [481, 482, 483, 485], "27177": [481, 485], "tyler": [481, 485], "crompton": [481, 485], "26870": [481, 485], "25011": [481, 485], "25209": [481, 485], "1521950": 481, "wolfgang": [481, 485], "langner": 481, "26587": [481, 485], "lordthorsen": [481, 485], "16864": [481, 485], "stoke": [481, 485], "26536": [481, 485], "26907": 481, "27744": [481, 485], "crypto": [481, 485], "omar": [481, 482, 485], "sandov": [481, 482, 485], "26273": [481, 482, 485], "aviv": [481, 483, 485], "palivoda": [481, 483, 485], "26404": [481, 485], "26721": [481, 485], "27850": [481, 485], "27766": [481, 485], "28043": [481, 485], "19500": [481, 485], "warhawk": 481, "28025": [481, 485], "28085": 481, "27181": [481, 483, 485], "11734": [481, 485], "26741": [481, 485], "6135": [481, 485], "27781": [481, 485], "27932": [481, 485], "phane": [481, 482, 485], "wirtel": [481, 482, 485], "25485": [481, 485], "6422": [481, 485], "23552": [481, 485], "trace_add": [481, 485], "trace_remov": [481, 485], "trace_info": [481, 485], "trace_vari": [481, 485], "trace_vdelet": [481, 485], "trace_vinfo": [481, 485], "22115": [481, 485], "26588": [481, 485], "280": 481, "189": 481, "amit": [481, 485], "saha": [481, 485], "26323": [481, 485], "21271": [481, 485], "nikolay": [481, 485], "bogoychev": [481, 485], "16099": [481, 485], "balcerzak": 481, "22829": 481, "26568": 481, "26567": [481, 485], "rouault": [481, 485], "23026": [481, 485], "27982": [481, 485], "26885": [481, 485], "26039": [481, 485], "26243": [481, 485], "16764": [481, 485], "demur": [481, 485], "rume": [481, 485], "26647": [481, 485], "28050": 481, "24870": 481, "25227": [481, 485], "25267": [481, 485], "25301": [481, 485], "25349": [481, 485], "25399": [481, 485], "25401": [481, 485], "snider": [481, 485], "26574": [481, 485], "26249": [481, 485], "27056": [481, 485], "27574": [481, 485], "25596": [481, 485], "26032": [481, 485], "25638": [481, 485], "25873": [481, 485], "25869": [481, 485], "25971": [481, 485], "py_long_long": 481, "17884": [481, 485], "ndk": [481, 485], "lollipop": 481, "26865": 481, "alecsandru": [481, 485], "patrascu": [481, 485], "26359": [481, 485], "5319": [481, 485], "26282": [481, 485], "0b4": [481, 485], "223967b49e49": 481, "27243": [481, 485], "27364": [481, 485], "25791": [481, 485], "mariatta": [481, 485], "25002": 481, "21708": [481, 485], "extra_path": [481, 485], "27919": [481, 485], "26129": [481, 485], "26754": [481, 485], "22493": [481, 485], "28022": [481, 485], "25154": [481, 485], "fullmodnam": 481, "find_lines_from_cod": 481, "find_lin": 481, "find_str": 481, "find_executable_lin": 481, "tk_menubar": [481, 485], "tk_bindfortravers": [481, 485], "cdrom": [481, 485], "cdio": [481, 485], "stropt": [481, 485], "chronic": 481, "h2pi": [481, 485], "show_track_count": [481, 485], "23034": [481, 485], "balogh": [481, 485], "2091": [481, 485], "25768": [481, 485], "20059": [481, 485], "taddei": [481, 485], "odziej": [481, 485], "23883": [481, 485], "18018": [481, 485], "23430": [481, 485], "26685": [481, 485], "18726": [481, 485], "holden": [481, 485], "27842": [481, 485], "25287": [481, 485], "lita": [481, 485], "cho": [481, 485], "21815": [481, 485], "jakub": [481, 485], "stasiak": [481, 485], "26335": [481, 485], "ramchandra": [481, 485], "17211": 481, "25953": [481, 485], "25483": 481, "27078": [481, 485], "27140": [481, 485], "build_map_unpack_with_cal": [481, 485], "build_tuple_unpack_with_cal": [481, 485], "call_function_var": 481, "call_function_var_kw": 481, "make_closur": [481, 485], "27095": [481, 485], "27213": [481, 485], "28257": [481, 485], "store_annot": [481, 482, 485], "27985": [481, 485], "pyexc_recursionerrorinst": [481, 482, 485], "22898": [481, 482, 485], "30697": [481, 482, 485], "31900": [481, 482, 485], "ammar": [481, 482, 483, 485], "askar": [481, 482, 483, 485], "33899": [481, 482, 483, 485], "37228": [481, 482, 483, 484, 485], "advent": 482, "uncov": [482, 485], "glare": 482, "advers": 482, "from_str": 482, "validate_b": 482, "rhel": [482, 485], "bray": [482, 485], "masayuki": [482, 485], "ja": 482, "julien": 482, "palard": 482, "12844": [482, 485], "18896": [482, 485], "xiao": [482, 485], "28927": [482, 485], "32677": [482, 485], "29546": [482, 485], "30024": [482, 485], "28974": [482, 485], "30579": [482, 485], "33053": [482, 485], "31415": [482, 485], "32248": [482, 485], "14191": [482, 485], "32314": [482, 483, 485], "32436": [482, 485], "32311": [482, 485], "23749": [482, 485], "31819": [482, 485], "32250": [482, 485], "32251": [482, 485], "32269": [482, 485], "32391": [482, 485], "32410": [482, 485], "32415": [482, 485], "sriniva": [482, 485], "reddi": [482, 485], "thatiparthi": [482, 485], "32418": [482, 485], "32662": [482, 485], "32741": [482, 485], "quentin": [482, 485], "dawan": 482, "31245": [482, 485], "create_accepted_socket": 482, "aspinal": 482, "29970": [482, 485], "marat": [482, 485], "sharafutdinov": [482, 485], "31943": [482, 485], "32193": [482, 485], "32356": [482, 485], "32066": [482, 485], "30508": [482, 485], "33792": [482, 485], "30103": [482, 485], "oz": 482, "tiram": 482, "30095": 482, "32320": [482, 485], "31650": [482, 485], "21423": [482, 485], "moreau": 482, "31540": [482, 485], "bakker": [482, 485], "10049": [482, 485], "29679": 482, "30241": [482, 485], "mohr": [482, 485], "kulakov": [482, 485], "29302": [482, 485], "sanyam": [482, 485], "21862": [482, 485], "31664": [482, 485], "31702": [482, 485], "ganssl": [482, 483, 484, 485], "15873": [482, 485], "5288": [482, 485], "32630": [482, 485], "11822": [482, 485], "11913": [482, 485], "31801": [482, 485], "33217": [482, 485], "32227": [482, 485], "zekun": 482, "31558": [482, 485], "32433": [482, 485], "soffer": [482, 485], "31945": [482, 485], "pierr": [482, 483, 485], "quentel": [482, 485], "29654": [482, 485], "28707": 482, "31639": [482, 485], "5680": [482, 483, 485], "37627": [482, 483, 485], "saimadhav": [482, 483, 485], "heblikar": [482, 483, 485], "17535": [482, 483, 485], "garvit": [482, 485], "khatri": [482, 485], "29851": [482, 485], "30436": [482, 485], "30526": [482, 485], "15216": [482, 485], "20825": [482, 485], "30537": [482, 485], "10379": [482, 485], "30520": [482, 485], "30522": [482, 485], "31080": [482, 485], "29962": [482, 485], "nitish": [482, 485], "chandra": [482, 485], "22589": [482, 485], "20486": [482, 485], "30596": [482, 485], "vitor": [482, 485], "pereira": [482, 485], "30794": [482, 485], "18966": [482, 485], "28682": [482, 485], "25996": [482, 485], "16500": [482, 485], "31368": [482, 485], "19930": [482, 485], "32441": [482, 485], "32659": [482, 485], "ry": [482, 485], "30897": [482, 485], "31389": [482, 485], "32206": [482, 485], "bernhard": 482, "wiedemann": 482, "29708": [482, 485], "feanil": 482, "patel": 482, "31128": [482, 485], "14976": [482, 485], "31690": [482, 485], "25054": [482, 485], "30215": [482, 485], "30349": [482, 485], "10076": [482, 485], "30050": [482, 485], "32373": [482, 485], "32454": [482, 485], "29728": [482, 485], "cathi": 482, "averi": 482, "27584": [482, 485], "28134": [482, 485], "lele": [482, 485], "gaifax": [482, 485], "27645": [482, 485], "31843": [482, 485], "31399": [482, 485], "libssl": 482, "32185": [482, 485], "mandeep": [482, 485], "singh": [482, 485], "23033": [482, 485], "blacklist": [482, 485], "whitelist": [482, 485], "31429": [482, 485], "28414": [482, 485], "32947": [482, 485], "20995": [482, 485], "29136": [482, 485], "30622": [482, 485], "33618": [482, 485], "32951": [482, 485], "32609": 482, "1198569": [482, 485], "bo": [482, 483, 485], "bayl": [482, 483, 485], "32102": [482, 483, 485], "clegg": [482, 485], "31756": [482, 485], "segev": [482, 485], "19764": [482, 485], "25942": [482, 485], "31353": [482, 485], "28740": [482, 485], "32591": [482, 485], "32025": [482, 485], "32585": [482, 485], "32121": [482, 485], "krebber": [482, 485], "29377": [482, 485], "32265": [482, 485], "32717": 482, "haag": 482, "32071": [482, 485], "20804": [482, 485], "30541": [482, 485], "theun": [482, 485], "ratnadeep": [482, 485], "debnath": [482, 485], "16285": [482, 485], "22807": [482, 485], "32107": [482, 485], "20361": [482, 485], "32043": [482, 485], "32230": [482, 485], "31975": [482, 485], "31648": [482, 485], "simplexmlrpcdispatch": [482, 485], "7769": [482, 485], "irmen": 482, "jong": 482, "31072": [482, 485], "zhime": 482, "31638": [482, 485], "21417": [482, 485], "30693": [482, 485], "25658": [482, 485], "28411": [482, 485], "victorin": 482, "23699": [482, 485], "31338": [482, 485], "30054": 482, "31574": [482, 485], "28761": [482, 485], "28769": [482, 485], "milman": [482, 485], "28280": [482, 485], "27867": [482, 485], "10381": [482, 485], "30708": [482, 485], "abid": 482, "29102": [482, 485], "29240": [482, 485], "28822": [482, 485], "31370": [482, 485], "27979": [482, 485], "30450": [482, 485], "29300": 482, "29507": 482, "29452": 482, "29286": 482, "29585": [482, 485], "31333": [482, 485], "26110": [482, 485], "32296": [482, 485], "32348": [482, 485], "32355": [482, 485], "32351": [482, 485], "31970": [482, 485], "32226": [482, 485], "elliot": [482, 485], "gorokhovski": [482, 485], "28685": [482, 485], "31179": [482, 485], "32544": [482, 485], "24821": [482, 485], "28638": [482, 485], "32403": [482, 485], "28564": [482, 485], "30285": [482, 485], "31671": [482, 485], "30014": [482, 485], "eugen": [482, 485], "toder": [482, 485], "29469": [482, 485], "11549": 482, "70x": [482, 485], "adrian": [482, 485], "wielgosik": [482, 485], "24700": [482, 485], "26121": [482, 485], "31344": [482, 485], "32305": [482, 485], "32303": [482, 485], "32690": [482, 485], "32304": [482, 485], "10544": [482, 483, 485], "28894": 482, "openfp": [482, 484, 485], "31985": [482, 485], "32253": [482, 485], "25988": [482, 485], "28847": [482, 485], "28692": [482, 485], "29576": [482, 485], "chi": [482, 485], "hsuan": [482, 485], "yen": [482, 485], "9850": [482, 485], "_dummy_thread": [482, 484, 485], "28332": [482, 485], "28124": [482, 485], "28799": [482, 485], "jessi": 482, "ubuntu": [482, 485], "trusti": 482, "lts": 482, "xenial": 482, "sles": 482, "sp3": 482, "splitunc": [482, 485], "_internaldict": [482, 485], "_overlap": [482, 485], "install_misc": [482, 485], "vander": [482, 485], "weel": [482, 485], "29218": [482, 485], "fpectl": [482, 485], "29137": [482, 485], "30291": [482, 485], "0p": [482, 485], "30362": [482, 485], "30406": [482, 485], "32670": [482, 485], "31709": [482, 485], "32012": [482, 485], "32023": [482, 485], "31233": [482, 485], "33540": [482, 485], "31151": [482, 485], "24744": [482, 485], "29193": [482, 485], "29192": [482, 485], "21071": [482, 485], "29979": [482, 485], "30399": [482, 485], "utkarsh": 482, "upadhyay": 482, "30302": [482, 485], "32308": [482, 485], "29995": [482, 485], "32331": [482, 485], "33169": [482, 485], "32327": [482, 485], "sottil": [482, 483, 484, 485], "26510": [482, 485], "31778": [482, 485], "28292": [482, 485], "32792": [482, 485], "nemec": 482, "33097": [482, 485], "tocknel": [482, 485], "23835": [482, 485], "32550": [482, 485], "28137": [482, 485], "latent": 482, "22257": [482, 485], "25612": [482, 485], "34247": 482, "affection": 483, "tusk": 483, "discount": 483, "clean_nam": 483, "allowed_nam": 483, "emili": [483, 485], "morehous": [483, 485], "35224": [483, 485], "impair": 483, "36540": [483, 485], "33499": [483, 485], "21536": [483, 485], "36722": [483, 485], "36721": [483, 485], "eric_idl": 483, "member_sinc": 483, "075": 483, "theta": 483, "36817": [483, 485], "_pyruntimest": [483, 485], "36763": [483, 485], "36974": [483, 484, 485], "36785": [483, 485], "32489": [483, 485], "33073": [483, 485], "37819": [483, 485], "20092": [483, 485], "copyright_year_pattern": 483, "eunic": [483, 485], "30688": [483, 485], "lapeyr": [483, 484, 485], "33462": [483, 485], "34641": [483, 485], "simpson": 483, "homer": 483, "marg": 483, "bart": 483, "cuthbert": [483, 485], "jordan": [483, 485], "32117": [483, 485], "15248": [483, 485], "32417": [483, 485], "1054041": [483, 485], "37032": [483, 485], "137": 483, "diophantin": 483, "equat": 483, "369": 483, "36027": [483, 485], "rn": 483, "heissler": 483, "glaser": [483, 485], "olivi": [483, 485], "grisel": [483, 485], "35900": [483, 485], "chardet": 483, "34632": [483, 485], "33416": [483, 485], "35766": [483, 485], "37028": [483, 485], "32528": [483, 485], "34687": [483, 485], "meili": [483, 485], "29883": [483, 485], "23057": [483, 485], "36999": [483, 485], "34270": [483, 485], "twisteroid": 483, "ambassador": 483, "33530": [483, 485], "34616": [483, 485], "remedi": 483, "35864": [483, 485], "sanderson": [483, 485], "29235": [483, 485], "selik": [483, 485], "34003": [483, 485], "31680": [483, 485], "36085": [483, 485], "36004": [483, 485], "36772": [483, 485], "21145": [483, 485], "taskmanag": 483, "32380": [483, 485], "36016": [483, 485], "franz": [483, 485], "glasner": 483, "2504": [483, 485], "guo": [483, 485], "teo": [483, 485], "34898": [483, 485], "6584": [483, 485], "13153": [483, 485], "4603": [483, 484], "johnni": [483, 484, 485], "najera": [483, 484, 485], "38944": [483, 484, 485], "37765": [483, 484, 485], "audioclip": 483, "bit_rat": 483, "kilohertz": 483, "36326": [483, 485], "1015": 483, "1045": 483, "34659": [483, 485], "weipeng": [483, 485], "hong": [483, 485], "31553": [483, 485], "jupyt": 483, "33897": [483, 485], "33089": [483, 485], "35606": [483, 485], "yash": [483, 485], "aggarw": [483, 485], "keller": [483, 485], "37128": [483, 485], "37178": [483, 485], "35431": [483, 485], "650320427": 483, "650320426": 483, "36887": [483, 485], "33083": [483, 485], "32941": [483, 485], "35813": [483, 485], "26836": [483, 485], "37834": [483, 485], "33721": [483, 485], "36264": [483, 485], "joannah": [483, 484, 485], "nanjeky": [483, 484, 485], "26978": [483, 485], "jon": [483, 484, 485], "janzen": [483, 484], "26707": [483, 485], "30670": [483, 485], "22640": [483, 485], "20849": [483, 485], "gerlach": [483, 485], "30661": 483, "17561": [483, 485], "37007": [483, 485], "34670": [483, 485], "35904": [483, 485], "35892": 483, "equiprob": 483, "36546": [483, 485], "36018": [483, 485], "temperature_feb": 483, "356099432828281": 483, "3184678262814532": 483, "2039930378537762": 483, "el_ni": 483, "climat": 483, "830080526611674": 483, "294144947901014": 483, "672102882379219": 483, "000027119750287": 483, "647488369766392": 483, "36829": [483, 485], "36268": [483, 485], "1230540": [483, 485], "tesler": 483, "36084": [483, 485], "selection_from": [483, 485], "selection_pres": [483, 485], "selection_rang": [483, 485], "selection_to": [483, 485], "juliett": [483, 485], "monsel": [483, 485], "34829": [483, 485], "moveto": [483, 485], "23831": [483, 485], "transparency_get": 483, "transparency_set": 483, "25451": [483, 485], "35702": [483, 485], "lat_long": 483, "grid_squar": 483, "xy_coordin": 483, "get_status": 483, "1415926536": 483, "belang": 483, "euresti": 483, "32285": [483, 485], "37966": [483, 485], "26467": [483, 485], "24412": [483, 485], "strandmark": [483, 485], "35047": [483, 485], "32972": [483, 485], "testrequest": 483, "test_get": 483, "32718": [483, 485], "36669": [483, 485], "17239": [483, 485], "28238": [483, 485], "13611": [483, 485], "36676": [483, 485], "36673": [483, 485], "35153": [483, 485], "35537": [483, 485], "smb": [483, 485], "33695": [483, 485], "pygc_head": [483, 484, 485], "33597": [483, 485], "bolsterle": [483, 485], "30977": [483, 485], "35664": [483, 485], "32492": [483, 485], "33234": [483, 485], "36012": [483, 485], "23867": 483, "35582": 483, "36127": 483, "26219": [483, 485], "36707": [483, 485], "8m": 483, "37m": 483, "35081": [483, 485], "pyobject_init_var": [483, 484, 485], "35059": [483, 485], "pybytearray_init": [483, 485], "pybytearray_fini": [483, 485], "35713": [483, 485], "33818": [483, 485], "dualiti": 483, "32430": [483, 485], "36048": [483, 485], "eddi": 483, "elizondo": 483, "35810": [483, 484, 485], "37221": [483, 485], "38234": [483, 485], "37481": [483, 485], "29209": [483, 485], "34075": [483, 485], "9372": [483, 485], "36320": [483, 485], "32892": [483, 485], "36917": [483, 485], "36921": [483, 485], "34790": [483, 484, 485], "33710": [483, 485], "isal": [483, 484, 485], "35283": [483, 485], "sharedmemoryserv": 483, "36492": [483, 485], "36952": [483, 485], "35471": [483, 485], "35345": [483, 485], "36895": [483, 485], "25427": [483, 485], "36297": [483, 485], "30262": [483, 485], "36933": [483, 485], "34850": [483, 485], "35459": 483, "36793": [483, 485], "aix3": [483, 485], "36588": [483, 485], "36475": [483, 485], "37412": [483, 485], "34651": [483, 485], "37951": [483, 485], "36348": [483, 485], "31508": [483, 485], "roja": 483, "34160": [483, 485], "32749": [483, 485], "pycore_pyst": [483, 485], "35886": [483, 485], "2122": [483, 485], "33106": [483, 485], "32751": [483, 484, 485], "37027": [483, 485], "kb2533623": 483, "pgen": [483, 485], "36623": [483, 485], "pyeval_reinitthread": [483, 485], "36728": [483, 485], "36381": [483, 485], "foo_struct": [483, 484], "foo_new": 483, "0x03080000": 483, "33407": [483, 485], "32388": [483, 485], "pynode_addchild": 483, "pyparser_addtoken": 483, "libpython38": [483, 485], "mingw": [483, 485], "python38": 483, "gendef": 483, "37351": [483, 485], "unrol": [483, 485], "break_loop": [483, 485], "continue_loop": [483, 485], "setup_loop": [483, 485], "setup_except": [483, 485], "begin_fin": [483, 485], "call_fin": [483, 485], "pop_fin": [483, 485], "end_fin": [483, 485], "with_cleanup_start": [483, 485], "17611": [483, 485], "33041": [483, 485], "var_access_benchmark": [483, 484, 485], "35884": [483, 485], "read_loc": [483, 484], "read_nonloc": [483, 484], "read_glob": [483, 484], "read_builtin": [483, 484], "read_classvar_from_class": [483, 484], "read_classvar_from_inst": [483, 484], "read_instancevar": [483, 484], "read_instancevar_slot": [483, 484], "read_namedtupl": [483, 484], "read_boundmethod": [483, 484], "write_loc": [483, 484], "write_nonloc": [483, 484], "write_glob": [483, 484], "write_classvar": [483, 484], "write_instancevar": [483, 484], "write_instancevar_slot": [483, 484], "read_list": [483, 484], "read_dequ": [483, 484], "read_strdict": [483, 484], "write_list": [483, 484], "write_dequ": [483, 484], "write_dict": [483, 484], "write_strdict": [483, 484], "list_append_pop": [483, 484], "deque_append_pop": [483, 484], "deque_append_popleft": [483, 484], "loop_overhead": [483, 484], "i7": [483, 484], "4960hq": [483, 484], "36384": [483, 484, 485], "achraf": 483, "merzouki": 483, "_abc": [484, 485], "_bz2": [484, 485], "_codec": [484, 485], "_contextvar": [484, 485], "_crypt": [484, 485], "_functool": [484, 485], "_json": [484, 485], "multiphas": [484, 485], "_hashlib": [484, 485], "_posixsubprocess": [484, 485], "brandt": [484, 485], "bucher": [484, 485], "36144": [484, 485], "39939": [484, 485], "greet_al": 484, "ta": [484, 485], "kaya": [484, 485], "39481": [484, 485], "pythonoldpars": [484, 485], "ngalim": [484, 485], "siregar": [484, 485], "37444": [484, 485], "20443": [484, 485], "37388": [484, 485], "28029": [484, 485], "39702": [484, 485], "40257": [484, 485], "ag_run": [484, 485], "30773": [484, 485], "40824": [484, 485], "41848": 484, "43755": [484, 485], "17005": [484, 485], "37995": [484, 485], "38870": [484, 485], "39638": [484, 485], "34037": [484, 485], "38692": [484, 485], "32309": [484, 485], "typererror": [484, 485], "ido": [484, 485], "37404": [484, 485], "lum": 484, "frenzi": 484, "balhar": 484, "40495": [484, 485], "38112": [484, 485], "39349": [484, 485], "39812": [484, 485], "39207": [484, 485], "38312": [484, 485], "24416": [484, 485], "40698": [484, 485], "38602": [484, 485], "39259": [484, 485], "38379": [484, 485], "39322": [484, 485], "xof": [484, 485], "37630": [484, 485], "40479": [484, 485], "39509": [484, 485], "rhode": [484, 485], "39507": [484, 485], "38615": [484, 485], "40375": [484, 485], "39336": [484, 485], "39791": [484, 485], "36350": [484, 485], "39775": [484, 485], "oleksandr": [484, 485], "pavliuk": [484, 485], "34788": [484, 485], "39648": [484, 485], "ananthakrishnan": 484, "39479": [484, 485], "39288": [484, 485], "39310": [484, 485], "30966": [484, 485], "38493": [484, 485], "38713": [484, 485], "39413": [484, 485], "39395": [484, 485], "40094": [484, 485], "girt": [484, 485], "folkmani": [484, 485], "30618": [484, 485], "hopper": [484, 485], "lidral": [484, 485], "porter": [484, 485], "20523": [484, 485], "bordum": [484, 485], "37376": [484, 485], "40286": [484, 485], "38712": [484, 485], "39329": [484, 485], "tatschner": 484, "25780": [484, 485], "40291": [484, 485], "shinya": [484, 485], "okano": [484, 485], "28724": [484, 485], "thread_cputim": [484, 485], "40192": [484, 485], "jek": [484, 485], "charalampo": [484, 485], "strataki": [484, 485], "1294959": [484, 485], "jendrik": [484, 485], "seipp": [484, 485], "13601": [484, 485], "huon": 484, "40630": 484, "varoquaux": [484, 485], "konstantin": [484, 485], "kashin": [484, 485], "39926": [484, 485], "37663": [484, 485], "eoln": 484, "mefistot": 484, "39011": [484, 485], "32856": [484, 485], "40010": [484, 485], "closefrom": [484, 485], "mast": [484, 485], "conrad": [484, 485], "kubilay": [484, 485], "kocak": [484, 485], "38061": [484, 485], "87x": 484, "37986": [484, 485], "37207": [484, 485], "evgeni": [484, 485], "kapun": [484, 485], "8425": [484, 485], "thrash": [484, 485], "37257": [484, 485], "39434": [484, 485], "37348": [484, 485], "kemenad": [484, 485], "39586": [484, 485], "37315": [484, 485], "35712": [484, 485], "28286": [484, 485], "tkapptyp": [484, 485], "splitlist": [484, 485], "38371": [484, 485], "39353": [484, 485], "34822": [484, 485], "augload": [484, 485], "augstor": [484, 485], "39639": [484, 485], "39969": [484, 485], "39988": [484, 485], "39877": [484, 485], "33262": [484, 485], "colvin": [484, 485], "35800": [484, 485], "40360": [484, 485], "40465": [484, 485], "xgtitl": [484, 485], "39366": [484, 485], "38916": [484, 485], "call_profil": [484, 485], "37414": [484, 485], "37392": [484, 485], "pyimport_cleanup": 484, "36710": 484, "37312": [484, 485], "37320": [484, 485], "37804": [484, 485], "36543": [484, 485], "36409": [484, 485], "pygen_needsfin": [484, 485], "15088": [484, 485], "39351": [484, 485], "39350": [484, 485], "39357": [484, 485], "39377": [484, 485], "34793": [484, 485], "39489": [484, 485], "40182": [484, 485], "has_exec": [484, 485], "40208": [484, 485], "40967": [484, 485], "39239": [484, 485], "39562": [484, 485], "34538": 484, "37742": [484, 485], "aiudi": [484, 485], "34775": [484, 485], "latex_latin1": 484, "jordon": 484, "xu": 484, "37751": [484, 485], "foo_travers": 484, "0x03090000": 484, "29548": [484, 485], "34880": [484, 485], "39156": [484, 485], "10945": [484, 485], "isysroot": [484, 485], "34956": [484, 485], "arm64": [484, 485], "33125": [484, 485], "36044": [484, 485], "37707": [484, 485], "marcel": [484, 485], "plch": [484, 485], "38787": [484, 485], "40421": [484, 485], "39947": [484, 485], "37194": [484, 485], "recursion_depth": [484, 485], "38644": [484, 485], "39542": [484, 485], "40024": [484, 485], "40241": [484, 485], "_pyobject_functionstr": [484, 485], "37645": [484, 485], "37483": [484, 485], "38500": [484, 485], "39984": [484, 485], "38650": [484, 485], "pycore_gc": 484, "pyunicode_wstr_length": [484, 485], "_pyunicode_asunicod": 484, "39882": [484, 485], "37540": [484, 485], "pyobject_new_var": [484, 485], "pyobject_get_weakrefs_listptr": [484, 485], "40170": [484, 485], "pyfpe_start_protect": [484, 485], "pyfpe_end_protect": [484, 485], "38835": [484, 485], "37878": [484, 485], "_pytracemalloc_newrefer": [484, 485], "_py_getreftot": [484, 485], "pytrash_unwind_level": 484, "py_trashcan_begin_condit": [484, 485], "py_trashcan_begin": [484, 485], "py_trashcan_end": [484, 485], "py_trashcan_safe_begin": [484, 485], "py_trashcan_safe_end": 484, "_pydebug_printtotalref": 484, "_py_printrefer": 484, "_py_printreferenceaddress": 484, "_py_tracemalloc_config": 484, "_py_addtoallobject": 484, "getfram": [484, 485], "_pythreadstate_getfram": [484, 485], "pythreadframegett": [484, 485], "39946": [484, 485], "37340": [484, 485], "38896": [484, 485], "40428": [484, 485], "pyasyncgen_clearfreelist": [484, 485], "pycontext_clearfreelist": [484, 485], "pydict_clearfreelist": [484, 485], "pyfloat_clearfreelist": [484, 485], "pyframe_clearfreelist": [484, 485], "pylist_clearfreelist": [484, 485], "pymethod_clearfreelist": [484, 485], "pycfunction_clearfreelist": [484, 485], "pyset_clearfreelist": [484, 485], "pytuple_clearfreelist": [484, 485], "pyunicode_clearfreelist": [484, 485], "_pyunicode_clearstaticstr": [484, 485], "39465": [484, 485], "_pybytes_insertthousandsgroupinglocal": [484, 485], "_pybytes_insertthousandsgroup": [484, 485], "_py_initializefromarg": [484, 485], "_py_initializefromwidearg": [484, 485], "_pyfloat_repr": [484, 485], "_pyfloat_digit": [484, 485], "_pyfloat_digitsinit": [484, 485], "pyframe_extendstack": [484, 485], "_pyaiterwrapper_typ": [484, 485], "pynullimporter_typ": [484, 485], "pycmpwrapper_typ": [484, 485], "pysortwrapper_typ": [484, 485], "pynoargsfunct": [484, 485], "39372": [484, 485], "lawrenc": [484, 485], "anna": 484, "41100": [484, 485], "98251": 485, "98178": 485, "46364": 485, "95731": 485, "97616": 485, "limor": 485, "97612": 485, "caleb": 485, "shortt": 485, "68966": 485, "96078": 485, "97943": 485, "97591": 485, "ofey": 485, "chan": 485, "96848": 485, "95921": 485, "96821": 485, "_testcapimodul": 485, "95778": 485, "96387": 485, "mingliang": 485, "zhao": 485, "96864": 485, "96678": 485, "96641": 485, "keywrapp": 485, "96611": 485, "95196": 485, "96352": 485, "georgi": 485, "42316": 485, "87730": 485, "97825": 485, "96827": 485, "97592": 485, "97639": 485, "97545": 485, "73588": 485, "97005": 485, "libexpat": 485, "85760": 485, "kumar": 485, "aditya": 485, "96819": 485, "resource_track": 485, "96741": 485, "96652": 485, "96073": 485, "overeag": 485, "90467": 485, "96052": 485, "91212": 485, "shin": 485, "myoung": 485, "serp": 485, "74116": 485, "90155": 485, "92986": 485, "91539": 485, "getproxies_environ": 485, "97741": 485, "95588": 485, "unfix": 485, "93031": 485, "96729": 485, "buildreleas": 485, "97728": 485, "90989": 485, "96577": 485, "97897": 485, "mkfifoat": 485, "mknodat": 485, "96187": 485, "_pycode_getextra": 485, "95876": 485, "_pypegen_raise_error_known_loc": 485, "95605": 485, "93592": 485, "94996": 485, "shantanu": 485, "jain": 485, "68163": 485, "96159": 485, "96175": 485, "95609": 485, "95231": 485, "96098": 485, "95789": 485, "datatrack": 485, "91207": 485, "chm": 485, "htmlhelp": 485, "47115": 485, "95243": 485, "testsocknam": 485, "burton": 485, "94682": 485, "1q": 485, "65802": 485, "87389": 485, "hamza": 485, "avvan": 485, "92888": 485, "95355": 485, "_pypegen_parser_new": 485, "honglin": 485, "zhu": 485, "94938": 485, "94949": 485, "94947": 485, "94869": 485, "91153": 485, "94329": 485, "1000s": 485, "94360": 485, "94192": 485, "93964": 485, "93671": 485, "backtrac": 485, "93021": 485, "92930": 485, "92914": 485, "92858": 485, "95339": 485, "95045": 485, "95087": 485, "95199": 485, "95194": 485, "93899": 485, "95166": 485, "93157": 485, "94821": 485, "94736": 485, "_multiprocess": 485, "semlock": 485, "94637": 485, "ssl_ctx_set_default_verify_path": 485, "94510": 485, "92336": 485, "89988": 485, "94254": 485, "94245": 485, "94207": 485, "_struct": 485, "94101": 485, "84753": 485, "mehdi": 485, "abaakouk": 485, "83499": 485, "79512": 485, "90494": 485, "90549": 485, "79579": 485, "93421": 485, "91810": 485, "93353": 485, "83658": 485, "74696": 485, "91577": 485, "47231": 485, "46755": 485, "46053": 485, "46197": 485, "45924": 485, "34828": 485, "94321": 485, "86128": 485, "61162": 485, "87260": 485, "86986": 485, "88831": 485, "47161": 485, "95280": 485, "test_ssl": 485, "test_get_ciph": 485, "pfs": 485, "95212": 485, "test_shared_memory_recr": 485, "91330": 485, "94208": 485, "93951": 485, "test_bdb": 485, "statetestcas": 485, "test_skip": 485, "93957": 485, "test_venv": 485, "ensurepiptest": 485, "test_with_pip": 485, "57539": 485, "92886": 485, "test_zipimport": 485, "47016": 485, "illia": 485, "volochii": 485, "turner": 485, "94841": 485, "1932": 485, "45816": 485, "v143": 485, "jeremiah": 485, "vivian": 485, "90844": 485, "92841": 485, "iarygin": 485, "42658": 485, "lcmapstringex": 485, "95511": 485, "95471": 485, "95411": 485, "89610": 485, "94538": 485, "94430": 485, "94930": 485, "94864": 485, "93418": 485, "91924": 485, "93061": 485, "93065": 485, "hamt": 485, "libman": 485, "magicstack": 485, "92311": 485, "misbehav": 485, "92112": 485, "92036": 485, "91421": 485, "_py_decodeutf8ex": 485, "47212": 485, "matthieu": 485, "dartiailh": 485, "47182": 485, "46775": 485, "47117": 485, "39829": 485, "pascual": 485, "46962": 485, "testcapi": 485, "recursinginfinitelyerror": 485, "36819": 485, "93156": 485, "89973": 485, "93010": 485, "invalidheadererror": 485, "invalidheaderdefect": 485, "92839": 485, "91581": 485, "92530": 485, "92049": 485, "_constant": 485, "47029": 485, "ogam": 485, "91401": 485, "vfork": 485, "_use_vfork": 485, "91910": 485, "91832": 485, "91734": 485, "91700": 485, "91676": 485, "90568": 485, "91595": 485, "write_repr": 485, "yu": 485, "liu": 485, "90622": 485, "91575": 485, "47260": 485, "seccomp": 485, "39064": 485, "47151": 485, "27929": 485, "43323": 485, "47101": 485, "ossl": 485, "46787": 485, "45393": 485, "46415": 485, "28249": 485, "45138": 485, "40318": 485, "44493": 485, "sockaddr_un": 485, "42627": 485, "36073": 485, "86438": 485, "92240": 485, "91888": 485, "91783": 485, "91547": 485, "44347": 485, "38668": 485, "47138": 485, "pin": 485, "jinja": 485, "26792": 485, "brezovski": 485, "40838": 485, "45790": 485, "42340": 485, "41233": 485, "yyyyyyyan": 485, "orest": 485, "38056": 485, "overhaul": 485, "13553": 485, "test_imaplib": 485, "92670": 485, "test_shutil": 485, "testcopi": 485, "test_copyfile_nonexistent_dir": 485, "91904": 485, "pythonregrtest_unicode_guard": 485, "91607": 485, "test_concurrent_futur": 485, "47205": 485, "47104": 485, "29890": 485, "louisom": 485, "47103": 485, "pginstrument": 485, "92984": 485, "47194": 485, "25032": 485, "46785": 485, "win32_xstat_impl": 485, "40859": 485, "91583": 485, "46968": 485, "auxv": 485, "23691": 485, "42369": 485, "_sharedfil": 485, "38256": 485, "4gib": 485, "39394": 485, "47061": 485, "2604": 485, "45997": 485, "aquir": 485, "47022": 485, "46421": 485, "40296": 485, "46940": 485, "46852": 485, "__set_format__": 485, "test_float": 485, "46794": 485, "46820": 485, "1not": 485, "46762": 485, "46724": 485, "46732": 485, "46707": 485, "va_end": 485, "_hashopenssl": 485, "46615": 485, "setobject": 485, "45773": 485, "43721": 485, "46503": 485, "46417": 485, "add_subclass": 485, "46383": 485, "_zoneinfo": 485, "module_fre": 485, "wasm32": 485, "emscripten": 485, "46070": 485, "46339": 485, "46240": 485, "46091": 485, "43253": 485, "47004": 485, "46985": 485, "getauxv": 485, "at_minsigstksz": 485, "amx_til": 485, "sapphir": 485, "xeon": 485, "isa": 485, "46955": 485, "zabka": 485, "23325": 485, "46932": 485, "25707": 485, "44886": 485, "46827": 485, "grainger": 485, "46811": 485, "46252": 485, "46784": 485, "39327": 485, "virtualbox": 485, "46756": 485, "46643": 485, "beauregard": 485, "45863": 485, "unarchiv": 485, "46676": 485, "46672": 485, "46655": 485, "45948": 485, "discrep": 485, "46521": 485, "46581": 485, "46591": 485, "clickabl": 485, "46400": 485, "46487": 485, "45173": 485, "46539": 485, "46491": 485, "46436": 485, "41403": 485, "46474": 485, "46469": 485, "46434": 485, "46333": 485, "46246": 485, "deprecatedlist": 485, "ari": 485, "bovenberg": 485, "46266": 485, "46232": 485, "43118": 485, "26552": 485, "21987": 485, "20392": 485, "46080": 485, "felix": 485, "fontein": 485, "44439": 485, "45703": 485, "24959": 485, "44791": 485, "14156": 485, "46463": 485, "escape4chm": 485, "46913": 485, "test_faulthandl": 485, "test_sigfp": 485, "faulthandler_sigfp": 485, "46708": 485, "test_asyncio": 485, "46678": 485, "46616": 485, "test_importlib": 485, "test_window": 485, "44359": 485, "test_ftplib": 485, "46542": 485, "test_lib2to3": 485, "46576": 485, "test_peg_gener": 485, "test_json": 485, "infinite_recurs": 485, "13886": 485, "test_builtin": 485, "47032": 485, "47024": 485, "1n": 485, "38472": 485, "46513": 485, "ac_c_char_unsign": 485, "__char_unsigned__": 485, "45925": 485, "44549": 485, "3189": 485, "12900": 485, "46948": 485, "26488": 485, "46638": 485, "46630": 485, "45296": 485, "46433": 485, "14916": 485, "46347": 485, "46289": 485, "46237": 485, "46006": 485, "_pyunicode_equaltoasciiid": 485, "update_slot": 485, "46085": 485, "46110": 485, "46054": 485, "46042": 485, "46025": 485, "46009": 485, "46000": 485, "46004": 485, "42918": 485, "46278": 485, "call_": 485, "46239": 485, "20369": 485, "46105": 485, "26952": 485, "27718": 485, "46032": 485, "46018": 485, "45755": 485, "13236": 485, "46120": 485, "46040": 485, "19737": 485, "45840": 485, "46205": 485, "runtest_mp": 485, "46263": 485, "test_capi": 485, "jemalloc": 485, "46150": 485, "fakenam": 485, "posixpathtest": 485, "test_expandus": 485, "46129": 485, "46114": 485, "0xmnn00pp0l": 485, "multiarch": 485, "46106": 485, "1m": 485, "40477": 485, "46236": 485, "42268": 485, "45727": 485, "45614": 485, "45848": 485, "45826": 485, "45822": 485, "45820": 485, "42540": 485, "45738": 485, "45716": 485, "45688": 485, "_scproxi": 485, "30570": 485, "45521": 485, "45494": 485, "45408": 485, "45385": 485, "descr_check": 485, "45167": 485, "44219": 485, "44959": 485, "44050": 485, "45121": 485, "45083": 485, "45056": 485, "27946": 485, "37658": 485, "44649": 485, "45803": 485, "45831": 485, "41735": 485, "45235": 485, "45765": 485, "45757": 485, "45644": 485, "wessel": 485, "45664": 485, "45663": 485, "45662": 485, "45438": 485, "45574": 485, "print_escap": 485, "45581": 485, "45557": 485, "45515": 485, "45475": 485, "43787": 485, "45428": 485, "45467": 485, "45461": 485, "45239": 485, "45249": 485, "45416": 485, "45419": 485, "degeneratefil": 485, "44904": 485, "45406": 485, "getabsfil": 485, "45262": 485, "45386": 485, "45371": 485, "20028": 485, "45343": 485, "45329": 485, "41710": 485, "sem_clockwait": 485, "45328": 485, "1596321": 485, "45274": 485, "45238": 485, "36674": 485, "45183": 485, "45234": 485, "45228": 485, "45192": 485, "_infer_return_typ": 485, "kyungmin": 485, "25169": 485, "45160": 485, "35474": 485, "45166": 485, "20499": 485, "24444": 485, "45021": 485, "39039": 485, "44594": 485, "flight": 485, "44295": 485, "43498": 485, "45640": 485, "milchior": 485, "45788": 485, "45772": 485, "45392": 485, "45726": 485, "45680": 485, "45655": 485, "45604": 485, "45250": 485, "45464": 485, "45449": 485, "45516": 485, "20692": 485, "45216": 485, "45024": 485, "25381": 485, "43905": 485, "19460": 485, "45835": 485, "test_queu": 485, "45678": 485, "45578": 485, "45577": 485, "test_zoneinfo": 485, "45566": 485, "test_frozen_pickl": 485, "test_dataclass": 485, "43592": 485, "libregrtest": 485, "39679": 485, "45400": 485, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 485, "test_except": 485, "40173": 485, "45280": 485, "45269": 485, "c_make_encod": 485, "45128": 485, "test_multiprocessing_fork": 485, "test_log": 485, "45209": 485, "_test_multiprocess": 485, "_testsharedmemori": 485, "test_shared_memory_cleaned_after_process_termin": 485, "45195": 485, "test_readlin": 485, "test_nonascii": 485, "45156": 485, "45125": 485, "sharablelist": 485, "44860": 485, "test_sysconfig": 485, "test_user_similar": 485, "25130": 485, "44035": 485, "33393": 485, "45866": 485, "pegen": 485, "pygen": 485, "41498": 485, "sigset_t": 485, "yurchak": 485, "pyodid": 485, "45881": 485, "43158": 485, "_uuid": 485, "libuuid": 485, "45571": 485, "45561": 485, "smelli": 485, "45532": 485, "jeong": 485, "yunwon": 485, "45536": 485, "45221": 485, "45405": 485, "bohman": 485, "45220": 485, "defaultwindowssdkvers": 485, "45067": 485, "extended_color_cont": 485, "island": 485, "t20170401": 485, "20170401": 485, "45901": 485, "45616": 485, "45732": 485, "45720": 485, "shlwapi": 485, "43652": 485, "45337": 485, "44828": 485, "culler": 485, "34602": 485, "quadrupl": 485, "45495": 485, "45193": 485, "44786": 485, "39026": 485, "xcode": 485, "pystat": 485, "45307": 485, "_pyimport_findextensionobject": 485, "44687": 485, "44751": 485, "42278": 485, "44394": 485, "0340": 485, "43124": 485, "putcmd": 485, "45123": 485, "45018": 485, "44963": 485, "anext_await": 485, "44962": 485, "44954": 485, "8p": 485, "1074": 485, "44947": 485, "44698": 485, "44885": 485, "44872": 485, "33930": 485, "augusto": 485, "goulart": 485, "25782": 485, "44856": 485, "update_bas": 485, "44838": 485, "39091": 485, "noah": 485, "oxer": 485, "45081": 485, "41620": 485, "43913": 485, "lesser": 485, "45030": 485, "45001": 485, "44449": 485, "44955": 485, "44935": 485, "44911": 485, "harel": 485, "44524": 485, "38956": 485, "44581": 485, "44849": 485, "44605": 485, "wherein": 485, "specialform": 485, "44822": 485, "44801": 485, "27334": 485, "41402": 485, "32695": 485, "34990": 485, "y2k38": 485, "38840": 485, "test___all__": 485, "26228": 485, "33349": 485, "44957": 485, "44903": 485, "othergui": 485, "33479": 485, "36700": 485, "44756": 485, "42958": 485, "43066": 485, "39452": 485, "broaden": 485, "27752": 485, "41576": 485, "39498": 485, "45052": 485, "withprocessestestsharedmemori": 485, "test_shared_memory_bas": 485, "sms": 485, "sms2": 485, "unskip": 485, "45042": 485, "hashlib_help": 485, "requires_hashdigest": 485, "45011": 485, "44949": 485, "44891": 485, "nikita": 485, "sobolev": 485, "44852": 485, "wholesal": 485, "40928": 485, "test_decim": 485, "spew": 485, "45007": 485, "44689": 485, "44600": 485, "burkland": 485, "44792": 485, "miguel": 485, "brito": 485, "34013": 485, "44732": 485, "44653": 485, "44676": 485, "44633": 485, "44662": 485, "44655": 485, "44646": 485, "44636": 485, "44635": 485, "44589": 485, "44606": 485, "42073": 485, "44472": 485, "ltrace": 485, "44806": 485, "44793": 485, "44784": 485, "44667": 485, "44752": 485, "rcomplet": 485, "44720": 485, "44704": 485, "44666": 485, "lzl": 485, "42854": 485, "_ssl": 485, "_sslsocket": 485, "44353": 485, "40897": 485, "44648": 485, "44608": 485, "_flatten": 485, "44559": 485, "41928": 485, "44566": 485, "41249": 485, "44461": 485, "43625": 485, "42892": 485, "27827": 485, "38741": 485, "27513": 485, "29298": 485, "44740": 485, "44693": 485, "35183": 485, "30511": 485, "44561": 485, "44613": 485, "44544": 485, "44453": 485, "44734": 485, "44708": 485, "44647": 485, "44515": 485, "44572": 485, "40263": 485, "issue26903": 485, "34932": 485, "shane": 485, "harvey": 485, "venvdir": 485, "42747": 485, "py_tpflags_have_am_send": 485, "41180": 485, "44562": 485, "44553": 485, "44523": 485, "44483": 485, "44297": 485, "44456": 485, "44368": 485, "44317": 485, "43667": 485, "44558": 485, "34798": 485, "44516": 485, "44468": 485, "43977": 485, "44482": 485, "44404": 485, "44458": 485, "buffer_block_s": 485, "lmza": 485, "44464": 485, "flake8": 485, "44446": 485, "44434": 485, "pthread_exit": 485, "libgcc_": 485, "44395": 485, "34266": 485, "ds": 485, "differenci": 485, "excplicit": 485, "congest": 485, "43024": 485, "30256": 485, "manager_own": 485, "autoproxi": 485, "38062": 485, "40620": 485, "controlflow": 485, "13814": 485, "41621": 485, "44287": 485, "test_popen": 485, "test_windows_util": 485, "militari": 485, "battl": 485, "44451": 485, "test_metadata_api": 485, "apitest": 485, "test_entry_points_by_index": 485, "dictproxi": 485, "44535": 485, "43298": 485, "44582": 485, "41299": 485, "16ms": 485, "jitter": 485, "44441": 485, "40939": 485, "pyparser_": 485, "44409": 485, "44396": 485, "44349": 485, "44335": 485, "44304": 485, "11105": 485, "42972": 485, "44422": 485, "44389": 485, "44362": 485, "44342": 485, "44356": 485, "44351": 485, "parse_makefil": 485, "44242": 485, "44246": 485, "43853": 485, "43318": 485, "37022": 485, "44392": 485, "44322": 485, "44363": 485, "43921": 485, "test_wrong_cert_tls13": 485, "test_pha_required_nocert": 485, "44381": 485, "enablecontrolflowguard": 485, "40128": 485, "update_idletask": 485, "_frame": 485, "44378": 485, "44022": 485, "44232": 485, "44201": 485, "44184": 485, "44180": 485, "44168": 485, "44143": 485, "44114": 485, "dictkeys_revers": 485, "dictitems_revers": 485, "broke": 485, "webassembl": 485, "corrent": 485, "44056": 485, "priorit": 485, "28146": 485, "44254": 485, "38693": 485, "33693": 485, "44241": 485, "simplepath": 485, "44210": 485, "_meta": 485, "43643": 485, "multiplexedpath": 485, "33433": 485, "44145": 485, "hmac_upd": 485, "37788": 485, "44098": 485, "44089": 485, "44059": 485, "serenityo": 485, "36515": 485, "unalign": 485, "44018": 485, "38352": 485, "43972": 485, "28528": 485, "checklin": 485, "43650": 485, "_unpack_zipfil": 485, "igor": 485, "bolshakov": 485, "41730": 485, "44195": 485, "41963": 485, "44072": 485, "43558": 485, "44025": 485, "31904": 485, "test_py_compil": 485, "test_file_not_exist": 485, "42083": 485, "35753": 485, "unwrapp": 485, "41282": 485, "42686": 485, "43109": 485, "41611": 485, "autocompletewindow": 485, "winconfig_ev": 485, "44026": 485, "44074": 485, "43434": 485, "43472": 485, "_xxsubinterpret": 485, "43362": 485, "_sha3": 485, "43756": 485, "43075": 485, "42800": 485, "37363": 485, "43892": 485, "43933": 485, "kweyword": 485, "43963": 485, "_signal": 485, "42739": 485, "pylinetable_initaddressrang": 485, "43754": 485, "consistut": 485, "38605": 485, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 485, "pile": 485, "43859": 485, "41323": 485, "43846": 485, "43798": 485, "43751": 485, "ait": 485, "42128": 485, "43683": 485, "43105": 485, "42609": 485, "absurd": 485, "44015": 485, "25478": 485, "43733": 485, "43979": 485, "zwerschk": 485, "43993": 485, "43957": 485, "42904": 485, "43945": 485, "43937": 485, "43930": 485, "43907": 485, "43926": 485, "43607": 485, "43284": 485, "_syscmd_ver": 485, "43867": 485, "serve_cli": 485, "40443": 485, "43820": 485, "43680": 485, "openwrapp": 485, "41515": 485, "43776": 485, "42248": 485, "_missing__": 485, "43744": 485, "43772": 485, "43764": 485, "openssl_api_compat": 485, "43478": 485, "make_ssl_data": 485, "25264": 485, "43780": 485, "43731": 485, "38659": 485, "simple_enum": 485, "test_simple_enum": 485, "43752": 485, "24723": 485, "43655": 485, "43723": 485, "2135": 485, "43534": 485, "43522": 485, "hostflag": 485, "ssl_ctx": 485, "8978": 485, "43296": 485, "sqlite3_value_blob": 485, "sqlite_nomem": 485, "43312": 485, "43265": 485, "43176": 485, "18369": 485, "privatekey": 485, "36470": 485, "x509_v_flag_partial_chain": 485, "35114": 485, "39899": 485, "36076": 485, "33731": 485, "32745": 485, "43987": 485, "43959": 485, "43938": 485, "43778": 485, "glossary_search": 485, "43739": 485, "43961": 485, "test_namer_rotator_inherit": 485, "43842": 485, "43843": 485, "env_chang": 485, "ccach": 485, "tlsv1_alert_internal_error": 485, "43567": 485, "35306": 485, "43538": 485, "38822": 485, "26227": 485, "40432": 485, "43745": 485, "mislabel": 485, "1i": 485, "43492": 485, "30555": 485, "42119": 485, "sdks": 485, "iossupport": 485, "43568": 485, "44009": 485, "rosetta": 485, "43851": 485, "sqlite_omit_autoinit": 485, "42235": 485, "43981": 485, "test_sidebar": 485, "test_squeez": 485, "43774": 485, "43962": 485, "_pyinterpreterstate_idincref": 485, "_pyinterpreterstate_idinitref": 485, "id_refcount": 485, "get_curr": 485, "interpreterid": 485, "28254": 485, "42988": 485, "schw": 485, "rer": 485, "43285": 485, "trust_server_pasv_ipv4_address": 485, "27129": 485, "43660": 485, "43555": 485, "43517": 485, "misdetect": 485, "43497": 485, "39316": 485, "35883": 485, "43410": 485, "43406": 485, "43390": 485, "sa_onstack": 485, "friendlier": 485, "golang": 485, "cgo": 485, "37448": 485, "address_in_rang": 485, "ultra": 485, "unsanitari": 485, "_py_no_sanitize_address": 485, "_py_no_sanitize_thread": 485, "_py_no_sanitize_memori": 485, "dwith_pymalloc_radix_tre": 485, "29988": 485, "43433": 485, "40066": 485, "35930": 485, "41369": 485, "43422": 485, "41324": 485, "43577": 485, "43542": 485, "heic": 485, "heif": 485, "43510": 485, "43521": 485, "41361": 485, "43423": 485, "27820": 485, "_always_": 485, "43445": 485, "43245": 485, "29982": 485, "43428": 485, "43332": 485, "43420": 485, "kirpichev": 485, "43399": 485, "43369": 485, "sqlite3_column_text": 485, "sqlite3_column_blob": 485, "43368": 485, "24562": 485, "mariusz": 485, "felisiak": 485, "42129": 485, "43295": 485, "43125": 485, "base64mim": 485, "43084": 485, "42994": 485, "opus": 485, "3gpp": 485, "3gpp2": 485, "42782": 485, "membernam": 485, "26053": 485, "40701": 485, "39342": 485, "x509_v_flag_allow_proxy_cert": 485, "man1": 485, "man7": 485, "jab": 485, "lordmauv": 485, "justin39": 485, "43199": 485, "43407": 485, "43354": 485, "41933": 485, "37945": 485, "test_getsetlocale_issue1813": 485, "test_local": 485, "41561": 485, "43179": 485, "alignof_x": 485, "sizeof_x": 485, "43631": 485, "43617": 485, "43372": 485, "python_for_regen": 485, "42246": 485, "877df851": 485, "test_frozent": 485, "43440": 485, "42225": 485, "43541": 485, "poison": 485, "43321": 485, "43121": 485, "42819": 485, "x1b": 485, "2004h": 485, "rodrigu": 485, "42808": 485, "42217": 485, "co_linet": 485, "40692": 485, "43316": 485, "43317": 485, "43146": 485, "43260": 485, "43258": 485, "needless": 485, "43251": 485, "sqlite3_column_nam": 485, "40956": 485, "23838": 485, "43172": 485, "irreconcil": 485, "43163": 485, "43162": 485, "43102": 485, "42960": 485, "42151": 485, "_elementre": 485, "29753": 485, "shrank": 485, "27646": 485, "43288": 485, "43174": 485, "13501": 485, "39448": 485, "43155": 485, "41837": 485, "43283": 485, "43278": 485, "43270": 485, "_pyerr_occur": 485, "43239": 485, "fvisibl": 485, "43181": 485, "42938": 485, "pyeval_": 485, "_pyeval_vector": 485, "_pyeval_evalcodewithnam": 485, "38631": 485, "42986": 485, "untermin": 485, "42924": 485, "42882": 485, "_pyunicode_fromid": 485, "_py_identifi": 485, "unicode_id": 485, "next_index": 485, "42827": 485, "42823": 485, "41994": 485, "27772": 485, "43108": 485, "43077": 485, "43014": 485, "42323": 485, "42944": 485, "42934": 485, "42931": 485, "38250": 485, "42877": 485, "42923": 485, "42848": 485, "42901": 485, "_proto_memb": 485, "42780": 485, "42866": 485, "getcodec": 485, "42846": 485, "_codecs_cn": 485, "_codecs_hk": 485, "_codecs_iso2022": 485, "_codecs_jp": 485, "_codecs_kr": 485, "_codecs_tw": 485, "42851": 485, "42834": 485, "41748": 485, "dubost": 485, "_multibytecodec": 485, "42384": 485, "42383": 485, "42005": 485, "41604": 485, "user_ptr": 485, "set_panel_userptr": 485, "41149": 485, "stratford": 485, "33289": 485, "40304": 485, "bori": 485, "verkhovskiy": 485, "42811": 485, "yair": 485, "frid": 485, "40823": 485, "makesuit": 485, "checktracecallbackcont": 485, "43031": 485, "36143": 485, "42874": 485, "add_cross_compiling_path": 485, "42584": 485, "42504": 485, "33065": 485, "23544": 485, "32631": 485, "42979": 485, "43030": 485, "42814": 485, "genericaliasobject": 485, "42806": 485, "40631": 485, "27794": 485, "42745": 485, "32381": 485, "30858": 485, "42615": 485, "resulttyp": 485, "40137": 485, "40077": 485, "42008": 485, "40521": 485, "42257": 485, "42772": 485, "42759": 485, "42756": 485, "23328": 485, "envar": 485, "42740": 485, "42655": 485, "42727": 485, "38308": 485, "42721": 485, "nodefaultroot": 485, "tempor": 485, "25246": 485, "35728": 485, "15303": 485, "42681": 485, "42685": 485, "37961": 485, "42630": 485, "_run_exitfunc": 485, "42644": 485, "loge": 485, "36541": 485, "pgen2": 485, "42382": 485, "41877": 485, "autospect": 485, "auto_spec": 485, "set_spec": 485, "39717": 485, "42385": 485, "thread_stack_s": 485, "34750": 485, "_enumdict": 485, "42517": 485, "42678": 485, "28964": 485, "42470": 485, "42388": 485, "34463": 485, "42222": 485, "42163": 485, "uname_result": 485, "42090": 485, "42059": 485, "41960": 485, "41907": 485, "41891": 485, "24792": 485, "41462": 485, "40219": 485, "labeledscal": 485, "37193": 485, "39068": 485, "brandon": 485, "stansburi": 485, "17140": 485, "34398": 485, "42794": 485, "test_nntplib": 485, "aioe": 485, "42641": 485, "test_select": 485, "_test_all_chown_common": 485, "42199": 485, "41443": 485, "test_posix": 485, "41439": 485, "test_uuid": 485, "42692": 485, "__builtin_avail": 485, "42604": 485, "310d": 485, "42598": 485, "29076": 485, "42361": 485, "rc2": 485, "42726": 485, "42613": 485, "prope": 485, "42591": 485, "_py_fopen": 485, "_py_wfopen": 485, "_py_fopen_obj": 485, "42111": 485, "xxlimit": 485, "40052": 485, "andrea": 485, "40791": 485, "42576": 485, "42536": 485, "42500": 485, "42435": 485, "bytarray": 485, "41686": 485, "_pyos_sigintev": 485, "42381": 485, "42374": 485, "42349": 485, "42296": 485, "42332": 485, "42282": 485, "42266": 485, "42233": 485, "5054": 485, "run_cgi": 485, "http_accept": 485, "getallmatchinghead": 485, "42562": 485, "17735": 485, "findsourc": 485, "co_lineno": 485, "42116": 485, "42532": 485, "spec_arg": 485, "41818": 485, "test_master_read": 485, "42487": 485, "42482": 485, "test_openpti": 485, "test_bas": 485, "winsiz": 485, "15450": 485, "42406": 485, "whichmodul": 485, "42403": 485, "_bootstrap_extern": 485, "42375": 485, "moham": 485, "koubaa": 485, "37205": 485, "42328": 485, "dedupl": 485, "42318": 485, "42350": 485, "42014": 485, "42237": 485, "illumo": 485, "42249": 485, "42236": 485, "41754": 485, "42183": 485, "42140": 485, "39825": 485, "platform_tag": 485, "cp38": 485, "41889": 485, "41861": 485, "40624": 485, "28850": 485, "_safe_repr": 485, "34215": 485, "12800": 485, "40968": 485, "40816": 485, "40550": 485, "39411": 485, "42238": 485, "tentat": 485, "suspici": 485, "42153": 485, "41028": 485, "switcher": 485, "docsbuild": 485, "41473": 485, "test_gdb": 485, "bugzilla": 485, "show_bug": 485, "1866884": 485, "42553": 485, "test_call_lat": 485, "test_netrc": 485, "test_getaddrinfo_ipv6_scopeid_symbol": 485, "test_getnameinfo_ipv6_scopeid_symbol": 485, "test_test": 485, "test_mailcap": 485, "test_pip": 485, "40754": 485, "_testinternalcapi": 485, "test_min_max_version_mismatch": 485, "libnet": 485, "detect_socket": 485, "42398": 485, "jn": 485, "moveov": 485, "41617": 485, "pycore_bitutil": 485, "__builtin_bswap16": 485, "38823": 485, "ctypes_unicod": 485, "42087": 485, "40680": 485, "40998": 485, "42120": 485, "_copysign": 485, "38506": 485, "41116": 485, "unixxcompil": 485, "42232": 485, "38443": 485, "42508": 485, "42426": 485, "searchengin": 485, "42415": 485, "42212": 485, "36310": 485, "_posixshmem": 485, "_queue": 485, "_pytrash_cond": 485, "42171": 485, "42085": 485, "42103": 485, "42051": 485, "42218": 485, "42214": 485, "barry_as_flufl": 485, "42206": 485, "41796": 485, "42143": 485, "yonatan": 485, "41659": 485, "42150": 485, "42123": 485, "42030": 485, "41984": 485, "41993": 485, "41979": 485, "41902": 485, "41894": 485, "41435": 485, "35455": 485, "gethrvtim": 485, "kulik": 485, "26789": 485, "42146": 485, "uid_t": 485, "gid_t": 485, "41490": 485, "certifi": 485, "41052": 485, "42089": 485, "packagenotfounderror": 485, "41491": 485, "42065": 485, "charmap_decod": 485, "41966": 485, "dean": 485, "inwood": 485, "19270": 485, "28660": 485, "35823": 485, "42043": 485, "42021": 485, "39101": 485, "41976": 485, "triy": 485, "41943": 485, "41905": 485, "23706": 485, "41876": 485, "41831": 485, "41747": 485, "30681": 485, "toth": 485, "41586": 485, "16396": 485, "40592": 485, "40492": 485, "27321": 485, "38976": 485, "42061": 485, "41910": 485, "42010": 485, "41805": 485, "39693": 485, "39416": 485, "41739": 485, "test_race_between_set_target_and_flush": 485, "41970": 485, "41944": 485, "41306": 485, "test_tk": 485, "scaletest": 485, "38439": 485, "38252": 485, "39107": 485, "41557": 485, "38324": 485, "41471": 485, "33987": 485, "40511": 485, "clover": 485, "42015": 485, "40423": 485, "close_rang": 485, "41845": 485, "40422": 485, "_py_closerang": 485, "41986": 485, "41304": 485, "python3x": 485, "29778": 485, "15801": 485, "41162": 485, "15523": 485, "41004": 485, "39603": 485, "41909": 485, "_bisect": 485, "39934": 485, "41780": 485, "_sha256": 485, "41690": 485, "_curses_panel": 485, "_opcod": 485, "41681": 485, "41675": 485, "41670": 485, "use_computed_goto": 485, "41654": 485, "41631": 485, "_oper": 485, "1653741": 485, "_blake2": 485, "41533": 485, "va_build_stack": 485, "do_mkstack": 485, "small_stack": 485, "41531": 485, "41525": 485, "_sha1": 485, "_sha512": 485, "_md5": 485, "41431": 485, "41340": 485, "strdup": 485, "38156": 485, "pyos_stdioreadlin": 485, "41342": 485, "41295": 485, "41247": 485, "set_running_loop": 485, "41252": 485, "_servername_callback": 485, "41215": 485, "xlc": 485, "41218": 485, "41175": 485, "bytearrayobject": 485, "41094": 485, "39960": 485, "hackcheck": 485, "sneak": 485, "41084": 485, "41076": 485, "41056": 485, "41061": 485, "hashtabl": 485, "pypegen": 485, "pypars": 485, "35975": 485, "40636": 485, "_gdbm": 485, "40985": 485, "40958": 485, "_dbm": 485, "40957": 485, "40950": 485, "40947": 485, "40847": 485, "threw": 485, "40889": 485, "40904": 485, "40903": 485, "40880": 485, "40883": 485, "40870": 485, "40854": 485, "40826": 485, "pyos_readlin": 485, "19468": 485, "furkan": 485, "nder": 485, "40780": 485, "38964": 485, "40750": 485, "40696": 485, "40679": 485, "29590": 485, "4022": 485, "_lzma": 485, "19569": 485, "_py_comp_diag_push": 485, "_py_comp_diag_ignore_depr_decl": 485, "_py_comp_diag_pop": 485, "26680": 485, "41900": 485, "41887": 485, "41773": 485, "41840": 485, "40564": 485, "40670": 485, "misindent": 485, "41833": 485, "41817": 485, "eventtyp": 485, "41815": 485, "mccormick": 485, "41816": 485, "41517": 485, "39587": 485, "41789": 485, "32218": 485, "39651": 485, "mashal": 485, "_string": 485, "41732": 485, "41720": 485, "41696": 485, "41687": 485, "41662": 485, "39010": 485, "41638": 485, "41513": 485, "41609": 485, "39994": 485, "40782": 485, "41520": 485, "41528": 485, "41503": 485, "41497": 485, "41467": 485, "41425": 485, "41421": 485, "41316": 485, "41384": 485, "tclerror": 485, "41317": 485, "41364": 485, "35328": 485, "virtual_env_prompt": 485, "41341": 485, "41344": 485, "41333": 485, "41288": 485, "newobj_ex": 485, "39017": 485, "20907": 485, "41273": 485, "_proactorreadpipetransport": 485, "41235": 485, "41207": 485, "29727": 485, "39168": 485, "41194": 485, "41195": 485, "41193": 485, "41182": 485, "41161": 485, "40874": 485, "41138": 485, "31082": 485, "freelist": 485, "31938": 485, "41068": 485, "41058": 485, "find_funct": 485, "41048": 485, "41043": 485, "41025": 485, "41002": 485, "merri": 485, "40448": 485, "krzysztof": 485, "konopko": 485, "40924": 485, "devis": 485, "40955": 485, "40855": 485, "33689": 485, "40884": 485, "asaf": 485, "40876": 485, "40807": 485, "_maybe_compil": 485, "32604": 485, "39314": 485, "40834": 485, "with_xxsubinterpret": 485, "channel_send": 485, "40755": 485, "26407": 485, "39384": 485, "40777": 485, "pydatetime_isocalendardatetyp": 485, "38488": 485, "40767": 485, "wayland": 485, "wayland_display": 485, "attali": 485, "40795": 485, "16995": 485, "30008": 485, "30064": 485, "40759": 485, "40756": 485, "37129": 485, "40737": 485, "40726": 485, "40695": 485, "9216": 485, "evp": 485, "test_hashlib": 485, "test_smtplib": 485, "40614": 485, "40626": 485, "h5": 485, "hdf5": 485, "hdf": 485, "schwab": 485, "25920": 485, "201311": 485, "40671": 485, "40611": 485, "39881": 485, "13097": 485, "23082": 485, "40105": 485, "mazur": 485, "40084": 485, "31122": 485, "39728": 485, "39244": 485, "39040": 485, "35714": 485, "26543": 485, "12178": 485, "itay": 485, "elbirt": 485, "36290": 485, "33944": 485, "35078": 485, "29620": 485, "runtimeexcept": 485, "kernc": 485, "34226": 485, "content_length": 485, "duran": 485, "33660": 485, "28557": 485, "rawio": 485, "41774": 485, "35293": 485, "removedinsphinx40warn": 485, "37149": 485, "shipman": 485, "nmt": 485, "41726": 485, "41624": 485, "40204": 485, "c_allow_pre_v3": 485, "c_warn_on_allowed_pre_v3": 485, "41045": 485, "41314": 485, "40979": 485, "40552": 485, "39883": 485, "bsd0": 485, "37703": 485, "41939": 485, "test_sit": 485, "test_license_exists_at_url": 485, "41731": 485, "test_cmd_line_script": 485, "41602": 485, "41521": 485, "41477": 485, "test_genericalia": 485, "41085": 485, "41069": 485, "38377": 485, "41009": 485, "require_": 485, "_version": 485, "41003": 485, "test_copyreg": 485, "pickletest": 485, "40964": 485, "cmu": 485, "40927": 485, "test_binhex": 485, "17258": 485, "38169": 485, "34401": 485, "osipov": 485, "38249": 485, "40684": 485, "40683": 485, "41744": 485, "41627": 485, "41526": 485, "41492": 485, "uac": 485, "40948": 485, "41412": 485, "ucrt": 485, "40741": 485, "41142": 485, "41074": 485, "41039": 485, "40164": 485, "39631": 485, "40677": 485, "37556": 485, "39580": 485, "rick": 485, "heil": 485, "41005": 485, "41775": 485, "35764": 485, "40181": 485, "41468": 485, "41373": 485, "41300": 485, "41152": 485, "41144": 485, "39885": 485, "40723": 485, "test_idl": 485, "41689": 485, "41524": 485, "40989": 485, "pyerror": 485, "40910": 485, "40724": 485, "_pyeval_evalcod": 485, "40703": 485, "py_tp_memb": 485, "py_tp_getset": 485, "39583": 485, "40501": 485, "rpcrt4": 485, "40663": 485, "40596": 485, "40593": 485, "40585": 485, "40566": 485, "40502": 485, "n_col_offset": 485, "40527": 485, "40523": 485, "40246": 485, "d00": 485, "fca": 485, "40417": 485, "rouhani": 485, "40408": 485, "29587": 485, "40328": 485, "40228": 485, "38880": 485, "40662": 485, "40665": 485, "40536": 485, "40637": 485, "blake1": 485, "alpha2": 485, "40607": 485, "skurikhin": 485, "40612": 485, "40597": 485, "40571": 485, "40503": 485, "40397": 485, "40549": 485, "31033": 485, "40541": 485, "40515": 485, "40504": 485, "40559": 485, "40480": 485, "futil": 485, "40457": 485, "40355": 485, "curti": 485, "40459": 485, "39435": 485, "39305": 485, "_nntpbase": 485, "32494": 485, "gdbm_count": 485, "40453": 485, "40394": 485, "39995": 485, "_threadwakeup": 485, "39966": 485, "25597": 485, "40389": 485, "40273": 485, "39075": 485, "40025": 485, "onstott": 485, "39058": 485, "40561": 485, "40499": 485, "39705": 485, "40055": 485, "40436": 485, "pythoninfo": 485, "40653": 485, "_dirnamew": 485, "have_symlink": 485, "40514": 485, "40650": 485, "winsock2": 485, "40458": 485, "39148": 485, "35569": 485, "multissltest": 485, "40431": 485, "40163": 485, "pycfunction_checkexact": 485, "pycmethod_checkexact": 485, "pycmethod_check": 485, "40545": 485, "_pyerr_gettopmostexcept": 485, "40412": 485, "nullifi": 485, "inittab_copi": 485, "szorc": 485, "40429": 485, "40121": 485, "39073": 485, "39503": 485, "8492": 485, "schwager": 485, "40313": 485, "40267": 485, "39522": 485, "40082": 485, "pyscannerobject": 485, "40141": 485, "40067": 485, "onder": 485, "henriqu": 485, "silva": 485, "20526": 485, "40020": 485, "parsetok": 485, "codepath": 485, "32894": 485, "40398": 485, "40396": 485, "_sc_open_max": 485, "fdescf": 485, "emast": 485, "cem": 485, "kevan": 485, "koob": 485, "242274": 485, "40138": 485, "39942": 485, "40275": 485, "40330": 485, "40148": 485, "40325": 485, "40287": 485, "40290": 485, "40282": 485, "40277": 485, "40270": 485, "json_object": 485, "29255": 485, "40260": 485, "40234": 485, "40091": 485, "_at_fork_reinit": 485, "40149": 485, "_abc_data": 485, "40196": 485, "40190": 485, "_sc_aix_realmem": 485, "36517": 485, "40126": 485, "40108": 485, "incorr": 485, "40089": 485, "_after_fork": 485, "_mainthread": 485, "_main_thread": 485, "_dummythread": 485, "_reset_internal_lock": 485, "_register_atexit": 485, "40050": 485, "40014": 485, "ngroup": 485, "40017": 485, "40016": 485, "39953": 485, "38891": 485, "krennwalln": 485, "39682": 485, "38410": 485, "35967": 485, "35113": 485, "karthikeyan": 485, "singaravelan": 485, "31758": 485, "_elementtre": 485, "27635": 485, "39879": 485, "sami": 485, "lahfa": 485, "38387": 485, "13743": 485, "test_c_locale_coercion": 485, "40162": 485, "40146": 485, "azur": 485, "40003": 485, "bisect_cmd": 485, "verbose2": 485, "39380": 485, "39793": 485, "1812": 485, "doni": 485, "38360": 485, "40158": 485, "38527": 485, "38329": 485, "icn": 485, "38689": 485, "40385": 485, "checkpyc": 485, "40179": 485, "38576": 485, "18348": 485, "_collect": 485, "_heapq": 485, "tracing_poss": 485, "_statist": 485, "39968": 485, "get_module_st": 485, "39965": 485, "38373": 485, "19466": 485, "38894": 485, "wozniski": 485, "39871": 485, "39776": 485, "39778": 485, "38091": 485, "39087": 485, "39520": 485, "39220": 485, "22490": 485, "39830": 485, "39999": 485, "39991": 485, "39656": 485, "39360": 485, "experienc": 485, "35370": 485, "39936": 485, "_aix_support": 485, "_bootsubprocess": 485, "aix_platform": 485, "39652": 485, "39915": 485, "38662": 485, "38075": 485, "39916": 485, "39850": 485, "36287": 485, "39889": 485, "39828": 485, "13487": 485, "39674": 485, "37330": 485, "28577": 485, "39826": 485, "getconnect": 485, "39763": 485, "39794": 485, "39517": 485, "0a4": 485, "39678": 485, "queue_manag": 485, "39764": 485, "pyasyncgenobject": 485, "39769": 485, "38691": 485, "39719": 485, "39667": 485, "zipp": 485, "39609": 485, "39548": 485, "qop": 485, "39495": 485, "38971": 485, "38641": 485, "vlad": 485, "emelianov": 485, "37534": 485, "prolog": 485, "39868": 485, "13790": 485, "17422": 485, "39530": 485, "39718": 485, "39677": 485, "40019": 485, "27807": 485, "test_startup_import": 485, "26067": 485, "test_chown": 485, "39855": 485, "test_subprocess": 485, "test_us": 485, "39761": 485, "dflag": 485, "39930": 485, "vcruntime140": 485, "39847": 485, "hibern": 485, "38597": 485, "38380": 485, "39789": 485, "34803": 485, "27115": 485, "39852": 485, "39781": 485, "36184": 485, "take_gil": 485, "pthread_cond_timedwait": 485, "38080": 485, "fix_urllib": 485, "roberto": 485, "meza": 485, "cabrera": 485, "_pyarg_nokwnam": 485, "_pytrash_begin": 485, "_pytrash_end": 485, "39884": 485, "38643": 485, "39824": 485, "38913": 485, "whwn": 485, "39184": 485, "39401": 485, "39382": 485, "39619": 485, "39606": 485, "39386": 485, "39579": 485, "ast_for_dotted_nam": 485, "39510": 485, "39502": 485, "1902": 485, "39492": 485, "39453": 485, "39320": 485, "build_map_unpack": 485, "39219": 485, "36051": 485, "38960": 485, "carlier": 485, "30566": 485, "39649": 485, "39681": 485, "35950": 485, "39104": 485, "processpoolexcutor": 485, "39627": 485, "39474": 485, "21016": 485, "39590": 485, "39595": 485, "39567": 485, "39559": 485, "38149": 485, "39546": 485, "39450": 485, "stripe": 485, "39493": 485, "39491": 485, "39485": 485, "38932": 485, "vegard": 485, "stikbakk": 485, "39082": 485, "39432": 485, "18819": 485, "devmajor": 485, "devminor": 485, "39274": 485, "35727": 485, "32173": 485, "39572": 485, "39654": 485, "hakan": 485, "elik": 485, "39153": 485, "39392": 485, "impress": 485, "9056": 485, "38325": 485, "test_winconsoleio": 485, "test_zipfil": 485, "test_add_file_after_2107": 485, "39553": 485, "sxs": 485, "39439": 485, "39393": 485, "unresolv": 485, "38883": 485, "39185": 485, "39663": 485, "find_good_parse_start": 485, "39600": 485, "30780": 485, "configdialog": 485, "39388": 485, "38792": 485, "bytes_method": 485, "pycore_bytes_method": 485, "pydoc_strvar_shar": 485, "pycore_dtoa": 485, "py_build_cor": 485, "39500": 485, "39511": 485, "38076": 485, "39245": 485, "pyobject_fastcalldict": 485, "39427": 485, "39421": 485, "build_list_unpack": 485, "build_tuple_unpack": 485, "build_set_unpack": 485, "39048": 485, "39235": 485, "39209": 485, "39216": 485, "39215": 485, "39200": 485, "39166": 485, "39114": 485, "38588": 485, "38610": 485, "32021": 485, "brot": 485, "39430": 485, "39390": 485, "39406": 485, "39396": 485, "29435": 485, "woodruff": 485, "39389": 485, "39313": 485, "exec_funct": 485, "refactoringtool": 485, "39297": 485, "resili": 485, "38901": 485, "39242": 485, "35292": 485, "38907": 485, "39152": 485, "giovanni": 485, "lombardo": 485, "39198": 485, "stopit": 485, "39191": 485, "38871": 485, "39142": 485, "convertingtupl": 485, "39158": 485, "39129": 485, "39057": 485, "proxy_bypass_environ": 485, "39056": 485, "39055": 485, "21600": 485, "39019": 485, "38914": 485, "juergen": 485, "gmach": 485, "38878": 485, "35182": 485, "andriy": 485, "maletski": 485, "38630": 485, "38536": 485, "eur": 485, "38473": 485, "38361": 485, "38293": 485, "37958": 485, "get_profile_dict": 485, "28367": 485, "b500000": 485, "b576000": 485, "b921600": 485, "b1000000": 485, "b1152000": 485, "b1500000": 485, "b2000000": 485, "b2500000": 485, "b3000000": 485, "b3500000": 485, "b4000000": 485, "andrey": 485, "smirnov": 485, "39381": 485, "38918": 485, "3530": 485, "39160": 485, "39144": 485, "ctag": 485, "etag": 485, "39050": 485, "34118": 485, "etcetera": 485, "32989": 485, "newline_and_indent_ev": 485, "39164": 485, "_pyerr_getexcinfo": 485, "38945": 485, "38804": 485, "39028": 485, "39080": 485, "39031": 485, "39008": 485, "38673": 485, "38922": 485, "38920": 485, "38892": 485, "38852": 485, "38858": 485, "nsmallnegint": 485, "nsmallposint": 485, "36854": 485, "38328": 485, "38707": 485, "38629": 485, "27145": 485, "hongweipeng": 485, "38021": 485, "pep425": 485, "35409": 485, "33387": 485, "with_cleanup_finish": 485, "39033": 485, "39022": 485, "39006": 485, "38708": 485, "38698": 485, "invalidmessageid": 485, "38994": 485, "38979": 485, "38978": 485, "38986": 485, "taskwakeupmethwrapp": 485, "38982": 485, "38529": 485, "27413": 485, "38634": 485, "33684": 485, "parse_message_id": 485, "38927": 485, "26730": 485, "38881": 485, "38876": 485, "binget": 485, "long_binget": 485, "38688": 485, "kinoshita": 485, "38863": 485, "is_cgi": 485, "37838": 485, "38859": 485, "38857": 485, "38834": 485, "zac": 485, "hatfield": 485, "dodd": 485, "38821": 485, "federico": 485, "bond": 485, "38811": 485, "toke": 485, "iland": 485, "rgensen": 485, "38686": 485, "38348": 485, "37523": 485, "38045": 485, "_decompos": 485, "36820": 485, "36406": 485, "34776": 485, "20928": 485, "29636": 485, "38928": 485, "38899": 485, "fishshel": 485, "22377": 485, "38546": 485, "test_ressources_gced_in_work": 485, "38614": 485, "38547": 485, "test_pti": 485, "38992": 485, "38991": 485, "strip_python_stderr": 485, "38965": 485, "_stack_overflow": 485, "38875": 485, "38841": 485, "test_create_datagram_endpoint_existing_sock_unix": 485, "test_pidfd_open": 485, "38839": 485, "38669": 485, "37957": 485, "36500": 485, "39007": 485, "37931": 485, "beno": 485, "38943": 485, "38862": 485, "38636": 485, "38722": 485, "killen": 485, "38622": 485, "38418": 485, "38243": 485, "38174": 485, "15903": 485, "37764": 485, "_header_value_pars": 485, "get_unstructur": 485, "ashwin": 485, "ramaswami": 485, "37461": 485, "37463": 485, "37364": 485, "34631": 485, "1c": 485, "34155": 485, "maxk": 485, "jpic": 485, "38639": 485, "38640": 485, "38613": 485, "38535": 485, "38525": 485, "38465": 485, "38469": 485, "38437": 485, "gc_debug": 485, "38392": 485, "38210": 485, "38402": 485, "crypt_r": 485, "37474": 485, "fedisableexcept": 485, "38006": 485, "38317": 485, "38310": 485, "36871": 485, "11410": 485, "minimis": 485, "38219": 485, "38236": 485, "38013": 485, "async_generator_athrow": 485, "38124": 485, "38116": 485, "38113": 485, "38074": 485, "38073": 485, "38072": 485, "38069": 485, "38071": 485, "38005": 485, "channelid": 485, "36946": 485, "37994": 485, "37947": 485, "37812": 485, "check_small_int": 485, "longobject": 485, "37830": 485, "20490": 485, "37840": 485, "37802": 485, "37409": 485, "32912": 485, "37757": 485, "targetscopeerror": 485, "36279": 485, "36311": 485, "2gib": 485, "37648": 485, "needl": 485, "37619": 485, "37593": 485, "37543": 485, "37537": 485, "_py_getallocatedblock": 485, "_pyobject_malloc": 485, "_pyobject_fre": 485, "37467": 485, "37433": 485, "37417": 485, "check_interv": 485, "24214": 485, "37316": 485, "37300": 485, "37269": 485, "37231": 485, "37213": 485, "37219": 485, "15913": 485, "36922": 485, "37160": 485, "37077": 485, "36781": 485, "34556": 485, "35551": 485, "tis260": 485, "tacti": 485, "19072": 485, "dumpleton": 485, "27575": 485, "su": 485, "ag": 485, "36589": 485, "38807": 485, "38724": 485, "doroschenko": 485, "38786": 485, "python273": 485, "38785": 485, "38723": 485, "27805": 485, "38438": 485, "38761": 485, "38716": 485, "rotatinghandl": 485, "eponym": 485, "38334": 485, "38586": 485, "38565": 485, "34679": 485, "asynci": 485, "31202": 485, "36321": 485, "38521": 485, "38478": 485, "33604": 485, "38378": 485, "38417": 485, "38449": 485, "15522": 485, "38431": 485, "38109": 485, "38422": 485, "38405": 485, "38332": 485, "_encoded_word": 485, "38341": 485, "38319": 485, "38242": 485, "38019": 485, "38163": 485, "38161": 485, "_awaitev": 485, "38216": 485, "30458": 485, "38108": 485, "38265": 485, "38248": 485, "38237": 485, "34002": 485, "38191": 485, "_typenam": 485, "38155": 485, "tahia": 485, "khan": 485, "38185": 485, "38136": 485, "37828": 485, "toriz": 485, "cruz": 485, "38175": 485, "33936": 485, "34706": 485, "38153": 485, "blake2b512": 485, "38115": 485, "38148": 485, "38142": 485, "36991": 485, "38134": 485, "pbkdf2_hmac_fast": 485, "38132": 485, "38008": 485, "37405": 485, "38121": 485, "38110": 485, "closewalk": 485, "fdwalk": 485, "38093": 485, "37488": 485, "35640": 485, "38086": 485, "37251": 485, "38037": 485, "38066": 485, "feed_data": 485, "set_transport": 485, "38059": 485, "38049": 485, "37953": 485, "forwardrefer": 485, "38026": 485, "35923": 485, "_origin": 485, "38010": 485, "34410": 485, "37140": 485, "37587": 485, "scanstr": 485, "10978": 485, "37972": 485, "blhsing": 485, "37965": 485, "37964": 485, "37960": 485, "36205": 485, "rusag": 485, "37950": 485, "methodi": 485, "37798": 485, "test_statist": 485, "26589": 485, "37915": 485, "32554": 485, "9938": 485, "37851": 485, "32793": 485, "37885": 485, "37868": 485, "__dataclass_fields__": 485, "37811": 485, "37863": 485, "21131": 485, "sigstksz": 485, "fastpath": 485, "14465": 485, "37810": 485, "37772": 485, "ancestr": 485, "18578": 485, "37785": 485, "34488": 485, "37449": 485, "18049": 485, "thread_pthread": 485, "37738": 485, "setcchar": 485, "37723": 485, "vaginay": 485, "35943": 485, "32178": 485, "37268": 485, "11953": 485, "wsa": 485, "37685": 485, "37697": 485, "37695": 485, "37689": 485, "29553": 485, "nester": 485, "37691": 485, "37354": 485, "37664": 485, "37642": 485, "36161": 485, "ttyname_r": 485, "36324": 485, "37555": 485, "_call_match": 485, "_call": 485, "_spec_signatur": 485, "elizabeth": 485, "uselton": 485, "29446": 485, "16970": 485, "leender": 485, "34443": 485, "__qualnam": 485, "37491": 485, "marco": 485, "paolini": 485, "18378": 485, "_parse_localenam": 485, "37579": 485, "21478": 485, "37531": 485, "37482": 485, "36993": 485, "hillier": 485, "37502": 485, "37520": 485, "18374": 485, "37424": 485, "37421": 485, "get_temp_dir": 485, "37479": 485, "37440": 485, "37437": 485, "37428": 485, "ssl_verify_post_handshak": 485, "37420": 485, "37406": 485, "29412": 485, "37394": 485, "26967": 485, "37212": 485, "37372": 485, "blanchard": 485, "37345": 485, "udplit": 485, "gabe": 485, "appleton": 485, "37358": 485, "37347": 485, "aleksandr": 485, "balezin": 485, "37163": 485, "37085": 485, "37328": 485, "37305": 485, "webmanifest": 485, "33972": 485, "37280": 485, "37279": 485, "19865": 485, "37266": 485, "37210": 485, "21872": 485, "35922": 485, "36607": 485, "36402": 485, "37206": 485, "37111": 485, "12144": 485, "34886": 485, "37173": 485, "37165": 485, "_count_el": 485, "34767": 485, "37158": 485, "34282": 485, "37150": 485, "_actionscontain": 485, "35621": 485, "36520": 485, "30835": 485, "donnellan": 485, "31163": 485, "25068": 485, "26185": 485, "micka": 485, "schoentgen": 485, "21315": 485, "rfc2047": 485, "test_datetim": 485, "35805": 485, "35070": 485, "ngroups_max": 485, "31783": 485, "36582": 485, "32424": 485, "hemsley": 485, "36564": 485, "36302": 485, "36250": 485, "36046": 485, "mclean": 485, "32627": 485, "35168": 485, "8538": 485, "20504": 485, "11122": 485, "rpmbuild": 485, "34749": 485, "34519": 485, "28009": 485, "32498": 485, "33348": 485, "32689": 485, "maxwel": 485, "13b": 485, "mckinnon": 485, "32820": 485, "27657": 485, "4963": 485, "21767": 485, "38816": 485, "38351": 485, "38778": 485, "38592": 485, "brazilian": 485, "38294": 485, "38053": 485, "26868": 485, "36797": 485, "37977": 485, "37979": 485, "12707": 485, "getcod": 485, "37937": 485, "37759": 485, "37726": 485, "32910": 485, "37256": 485, "37284": 485, "30088": 485, "sviatoslav": 485, "sydorenko": 485, "37521": 485, "mintz": 485, "37456": 485, "37487": 485, "mexico": 485, "tech": 485, "37478": 485, "34903": 485, "gleen": 485, "36260": 485, "37004": 485, "36960": 485, "brad": 485, "36487": 485, "23460": 485, "tuoma": 485, "suutari": 485, "35803": 485, "34293": 485, "25237": 485, "test_commun": 485, "38502": 485, "35998": 485, "test_start_tls_server_1": 485, "serverproto": 485, "38470": 485, "test_compileal": 485, "test_compile_dir_maxlevel": 485, "38239": 485, "38275": 485, "38271": 485, "38270": 485, "37123": 485, "test_mymanag": 485, "_finalize_manag": 485, "38212": 485, "test_queue_feeder_donot_stop_onexc": 485, "38117": 485, "38018": 485, "37805": 485, "37876": 485, "36833": 485, "pydatetime_xxx_get_xxx": 485, "37558": 485, "37526": 485, "test_distutil": 485, "test_build_ext": 485, "_run_fin": 485, "37472": 485, "outstanding_bug": 485, "37199": 485, "19696": 485, "test_pkg_import": 485, "37335": 485, "37411": 485, "test_wsgiref": 485, "testenviron": 485, "37400": 485, "test_o": 485, "test_chown_gid": 485, "37359": 485, "test_python_": 485, "cleantest": 485, "37362": 485, "37278": 485, "proactorloopctrlc": 485, "37261": 485, "37069": 485, "37252": 485, "test_clos": 485, "test_events_mask_overflow": 485, "37169": 485, "_pyobject_isfre": 485, "37153": 485, "test_multiprocess": 485, "34001": 485, "36919": 485, "test_source_encod": 485, "test_issue2301": 485, "30202": 485, "test_abc": 485, "macaddr": 485, "34596": 485, "uncal": 485, "naitre": 485, "38809": 485, "38684": 485, "38468": 485, "getvar": 485, "37415": 485, "stdatom": 485, "atomic_uintptr_t": 485, "38301": 485, "d_reentrant": 485, "36002": 485, "ac_path_tool": 485, "ac_path_target_tool": 485, "37936": 485, "gitignor": 485, "repo": 485, "37760": 485, "makeunicodedata": 485, "37725": 485, "37468": 485, "wininst": 485, "37189": 485, "pyrun_xxx": 485, "25361": 485, "sse2": 485, "36210": 485, "asi": 485, "libcurs": 485, "38589": 485, "38453": 485, "38519": 485, "38492": 485, "38344": 485, "38359": 485, "38355": 485, "38092": 485, "38133": 485, "38114": 485, "32592": 485, "36634": 485, "38081": 485, "38087": 485, "test_ntpath": 485, "38088": 485, "v142": 485, "37283": 485, "38030": 485, "38020": 485, "37705": 485, "winerror_to_errno": 485, "37549": 485, "1311": 485, "9949": 485, "36266": 485, "_pyimport_findsharedfuncptrwindow": 485, "nyayapati": 485, "25172": 485, "37778": 485, "37734": 485, "37702": 485, "37672": 485, "pip_us": 485, "37445": 485, "format_message_ignore_insert": 485, "formatmessagew": 485, "37369": 485, "37380": 485, "_activ": 485, "ruslan": 485, "kuprieiev": 485, "35360": 485, "37267": 485, "36779": 485, "cp_utf7": 485, "32587": 485, "28269": 485, "strcasecmp": 485, "_stricmp": 485, "minmin": 485, "gong": 485, "36590": 485, "rfcomm": 485, "38089": 485, "5mb": 485, "16mb": 485, "26353": 485, "4630": 485, "38598": 485, "36698": 485, "35379": 485, "editorwindow": 485, "38183": 485, "38077": 485, "38041": 485, "35771": 485, "hover_delay": 485, "test_tooltip": 485, "37824": 485, "ceas": 485, "37929": 485, "37902": 485, "37849": 485, "36419": 485, "37748": 485, "37692": 485, "37628": 485, "33610": 485, "37530": 485, "27452": 485, "removefil": 485, "createconfighandl": 485, "37325": 485, "37321": 485, "26806": 485, "37177": 485, "37039": 485, "35763": 485, "obtrus": 485, "36390": 485, "38118": 485, "38347": 485, "pathfix": 485, "37803": 485, "37942": 485, "argumentclin": 485, "37704": 485, "37675": 485, "37034": 485, "37064": 485, "pathscript": 485, "37633": 485, "38540": 485, "38395": 485, "36389": 485, "_pyobject_checkconsist": 485, "visit_decref": 485, "38266": 485, "38303": 485, "kieft": 485, "38205": 485, "38140": 485, "37926": 485, "37879": 485, "subtype_dealloc": 485, "37151": 485, "21120": 485, "37337": 485, "28805": 485, "positon": 485, "37215": 485, "36842": 485, "37170": 485, "35381": 485, "direntrytyp": 485, "scandiriteratortyp": 485, "34331": 485, "overriden": 485, "35907": 485, "9948": 485, "local_fil": 485, "33529": 485, "33164": 485, "35814": 485, "37126": 485, "37122": 485, "37087": 485, "37072": 485, "pyast_fromnodeobject": 485, "37029": 485, "26423": 485, "wrap_lenfunc": 485, "37050": 485, "expr_text": 485, "22385": 485, "36878": 485, "e1000": 485, "2180": 485, "36907": 485, "36826": 485, "namedexpress": 485, "ast_unpars": 485, "1875": 485, "36861": 485, "28866": 485, "36851": 485, "27639": 485, "blahay": 485, "erick": 485, "cervant": 485, "vaultah": 485, "36737": 485, "pyruntimest": 485, "24048": 485, "remove_modul": 485, "27987": 485, "36601": 485, "main_pid": 485, "36594": 485, "36045": 485, "36035": 485, "35983": 485, "20602": 485, "26826": 485, "31862": 485, "37120": 485, "12202": 485, "26835": 485, "29262": 485, "12639": 485, "35246": 485, "35279": 485, "37076": 485, "37054": 485, "_buffer": 485, "37058": 485, "37047": 485, "37049": 485, "37046": 485, "37045": 485, "37035": 485, "pollut": 485, "37001": 485, "36996": 485, "37008": 485, "27737": 485, "36969": 485, "36983": 485, "36972": 485, "36949": 485, "36948": 485, "33524": 485, "licht": 485, "takeuchi": 485, "24564": 485, "ying": 485, "36888": 485, "25652": 485, "36916": 485, "36889": 485, "writeon": 485, "readwrit": 485, "connect_unix": 485, "streamserv": 485, "flowcontrolmix": 485, "36845": 485, "23378": 485, "36867": 485, "23896": 485, "pygram": 485, "35545": 485, "36778": 485, "semaphore_track": 485, "24538": 485, "36832": 485, "36814": 485, "33110": 485, "26903": 485, "36813": 485, "36806": 485, "36802": 485, "36801": 485, "36748": 485, "8138": 485, "simpleserv": 485, "29183": 485, "36548": 485, "36542": 485, "36533": 485, "35252": 485, "36368": 485, "27497": 485, "ashish": 485, "nitin": 485, "patil": 485, "36239": 485, "keyedarch": 485, "35125": 485, "35721": 485, "31855": 485, "26660": 485, "34271": 485, "33569": 485, "34424": 485, "troeger": 485, "34303": 485, "33361": 485, "22454": 485, "31922": 485, "24882": 485, "31961": 485, "33123": 485, "buchholz": 485, "22102": 485, "facioni": 485, "32515": 485, "32299": 485, "vadim": 485, "tsander": 485, "27141": 485, "31829": 485, "x1a": 485, "23395": 485, "36896": 485, "36686": 485, "36984": 485, "36868": 485, "host_flag": 485, "35924": 485, "36783": 485, "time_fromtimeandfold": 485, "edison": 485, "abahurir": 485, "22865": 485, "35397": 485, "32995": 485, "33519": 485, "33482": 485, "25735": 485, "20285": 485, "test_coroutin": 485, "test_cprofil": 485, "test_rais": 485, "test_yield_from": 485, "37098": 485, "test_memfd_cr": 485, "37081": 485, "36915": 485, "36719": 485, "child_error": 485, "36816": 485, "selfsigned_pythontestdotnet": 485, "pythontest": 485, "35925": 485, "36782": 485, "36342": 485, "sem_open": 485, "36786": 485, "36965": 485, "status_control_c_exit": 485, "35926": 485, "1b": 485, "36231": 485, "35610": 485, "context_use_ps1": 485, "prompt_last_lin": 485, "31858": 485, "37038": 485, "36958": 485, "36807": 485, "usb": 485, "32411": 485, "37053": 485, "chih": 485, "36379": 485, "37107": 485, "_pyobject_callmethodidobjarg": 485, "_pyobject_getmethod": 485, "sullivan": 485, "36742": 485, "mishandl": 485, "9740": 485, "35755": 485, "cs_path": 485, "32849": 485, "20180": 485, "36611": 485, "serialno": 485, "36549": 485, "36504": 485, "pycarraytype_new": 485, "20844": 485, "36452": 485, "36459": 485, "tok_nextc": 485, "36433": 485, "classmethoddescr_cal": 485, "36430": 485, "36440": 485, "skrobov": 485, "18372": 485, "35952": 485, "1613500": 485, "36734": 485, "stack_t": 485, "current_stack": 485, "36650": 485, "28552": 485, "project_bas": 485, "25430": 485, "ipnetwork": 485, "30485": 485, "36613": 485, "36598": 485, "36575": 485, "33461": 485, "36559": 485, "lean": 485, "34373": 485, "36232": 485, "rougeth": 485, "36050": 485, "36522": 485, "houglum": 485, "30427": 485, "maier": 485, "36385": 485, "36434": 485, "36407": 485, "surjaninov": 485, "36366": 485, "unstart": 485, "test_tim": 485, "faiur": 485, "36227": 485, "35936": 485, "35376": 485, "17396": 485, "35934": 485, "23078": 485, "felip": 485, "ochoa": 485, "35416": 485, "35082": 485, "34547": 485, "31658": 485, "34139": 485, "33291": 485, "31310": 485, "31292": 485, "36625": 485, "30840": 485, "36523": 485, "36425": 485, "36345": 485, "literalinclud": 485, "36157": 485, "33043": 485, "35581": 485, "33832": 485, "32913": 485, "findleak": 485, "36725": 485, "36454": 485, "test_monoton": 485, "test_cyclic_gc": 485, "36635": 485, "36629": 485, "test_imap4_host_default_valu": 485, "test_si": 485, "test_getallocatedblock": 485, "36560": 485, "warmup": 485, "36565": 485, "test_resourc": 485, "test_tabnanni": 485, "36436": 485, "pymem_buffer_overflow": 485, "test_utf8_mod": 485, "36341": 485, "36747": 485, "scriptsinstal": 485, "36618": 485, "fmax": 485, "movap": 485, "movup": 485, "36605": 485, "36577": 485, "36544": 485, "36146": 485, "36508": 485, "36503": 485, "aix4": 485, "35920": 485, "arm32": 485, "36649": 485, "34144": 485, "mend": 485, "36509": 485, "35941": 485, "36441": 485, "36010": 485, "29515": 485, "ipproto_ah": 485, "ipproto_cbt": 485, "ipproto_dstopt": 485, "ipproto_egp": 485, "ipproto_esp": 485, "ipproto_frag": 485, "ipproto_ggp": 485, "ipproto_hopopt": 485, "ipproto_iclfxbm": 485, "ipproto_icmpv6": 485, "ipproto_idp": 485, "ipproto_igmp": 485, "ipproto_igp": 485, "ipproto_ipv4": 485, "ipproto_ipv6": 485, "ipproto_l2tp": 485, "ipproto_max": 485, "ipproto_nd": 485, "ipproto_non": 485, "ipproto_pgm": 485, "ipproto_pim": 485, "ipproto_pup": 485, "ipproto_rdp": 485, "ipproto_rout": 485, "ipproto_sctp": 485, "ipproto_st": 485, "35947": 485, "34060": 485, "kloth": 485, "31512": 485, "18075": 485, "36429": 485, "14546": 485, "36641": 485, "pydoc_var": 485, "cleanbyt": 485, "deaddyt": 485, "36443": 485, "mojibak": 485, "_py_preiniti": 485, "_pypreconfig": 485, "36025": 485, "36216": 485, "35121": 485, "36421": 485, "36412": 485, "36398": 485, "structseq_repr": 485, "36256": 485, "parsermodul": 485, "dfa": 485, "36365": 485, "36374": 485, "merge_consts_recurs": 485, "36236": 485, "36352": 485, "36301": 485, "36333": 485, "_pyruntimestate_fini": 485, "36332": 485, "36282": 485, "30040": 485, "36262": 485, "_py_dg_strtod": 485, "36252": 485, "36218": 485, "36188": 485, "vestig": 485, "martijn": 485, "pieter": 485, "36124": 485, "35808": 485, "36401": 485, "34745": 485, "_fields_default": 485, "36298": 485, "36285": 485, "stephan": 485, "hohe": 485, "36272": 485, "36280": 485, "35931": 485, "36251": 485, "stderrprint": 485, "36235": 485, "35807": 485, "36139": 485, "36179": 485, "36169": 485, "36103": 485, "36130": 485, "35652": 485, "35178": 485, "tashrif": 485, "billah": 485, "36106": 485, "sinpi": 485, "dmitrii": 485, "pasechnik": 485, "36091": 485, "henri": 485, "chen": 485, "36043": 485, "35899": 485, "21269": 485, "akshay": 485, "35843": 485, "_namespacepath": 485, "35802": 485, "35715": 485, "librat": 485, "_process_work": 485, "35493": 485, "35661": 485, "35198": 485, "36329": 485, "36138": 485, "21314": 485, "36234": 485, "posixuidgidtest": 485, "test_r": 485, "test_locale_flag": 485, "36123": 485, "test_socket": 485, "36356": 485, "test_extens": 485, "36312": 485, "50220": 485, "50221": 485, "50222": 485, "50225": 485, "50227": 485, "50229": 485, "57002": 485, "57011": 485, "65000": 485, "24643": 485, "_timezon": 485, "36405": 485, "36396": 485, "fgbg": 485, "gethighlight": 485, "36176": 485, "darken": 485, "23205": 485, "23216": 485, "36152": 485, "colordeleg": 485, "32129": 485, "blurri": 485, "36096": 485, "30348": 485, "35132": 485, "gdb7": 485, "32217": 485, "36142": 485, "coreconfig": 485, "pycore_coreconfig": 485, "36052": 485, "35942": 485, "35992": 485, "35993": 485, "35991": 485, "_randommodul": 485, "35961": 485, "slice_richcompar": 485, "35911": 485, "12822": 485, "pthread_condattr_setclock": 485, "31506": 485, "35724": 485, "33608": 485, "_py_addpendingcal": 485, "33989": 485, "35512": 485, "35918": 485, "18283": 485, "35960": 485, "35500": 485, "24209": 485, "35321": 485, "nina": 485, "zakharenko": 485, "35378": 485, "34294": 485, "35615": 485, "34572": 485, "burgess": 485, "36083": 485, "36007": 485, "22062": 485, "27313": 485, "test_ttk_guion": 485, "comboboxtest": 485, "36019": 485, "36037": 485, "rhel8": 485, "35798": 485, "35505": 485, "35917": 485, "shareabl": 485, "35704": 485, "test_unpack_archive_xztar": 485, "maxdata": 485, "0x20000000": 485, "aixtool": 485, "34720": 485, "m_state": 485, "35976": 485, "35692": 485, "35872": 485, "35873": 485, "35299": 485, "24310": 485, "35833": 485, "35689": 485, "35746": 485, "5010": 485, "deref": 485, "talo": 485, "0758": 485, "nicola": 485, "edet": 485, "34812": 485, "34791": 485, "domreg": 485, "34623": 485, "14647": 485, "_py_hashsecret": 485, "34405": 485, "0i": 485, "33871": 485, "32533": 485, "33136": 485, "8970": 485, "x509_verify_param_set1_host": 485, "namelen": 485, "33001": 485, "32981": 485, "1061": 485, "jami": 485, "35877": 485, "typed_ast": 485, "35720": 485, "pymain_parse_cmdline_impl": 485, "35634": 485, "35623": 485, "35214": 485, "test_io": 485, "35560": 485, "35552": 485, "35504": 485, "35494": 485, "unbalanc": 485, "35444": 485, "35436": 485, "35423": 485, "35357": 485, "magicproxi": 485, "from_kal": 485, "_mock_": 485, "35372": 485, "35336": 485, "31241": 485, "33954": 485, "35269": 485, "6x": 485, "35193": 485, "35169": 485, "34022": 485, "28401": 485, "stefano": 485, "rivera": 485, "29341": 485, "35050": 485, "29743": 485, "16806": 485, "35029": 485, "34983": 485, "34974": 485, "34939": 485, "34973": 485, "34876": 485, "34879": 485, "bytesobject": 485, "34784": 485, "34854": 485, "34824": 485, "30156": 485, "property_descr_get": 485, "34751": 485, "xxhash": 485, "34735": 485, "timemodul": 485, "34683": 485, "34653": 485, "pyparser_simpleparsestringfilenam": 485, "32236": 485, "34637": 485, "1621": 485, "34588": 485, "34485": 485, "_bootlocal": 485, "34527": 485, "34403": 485, "34523": 485, "12458": 485, "34408": 485, "leakag": 485, "34400": 485, "34377": 485, "_pyobject_realloc": 485, "34353": 485, "34320": 485, "34113": 485, "constantin": 485, "petrisor": 485, "34100": 485, "34151": 485, "34170": 485, "33237": 485, "34149": 485, "34125": 485, "34141": 485, "34126": 485, "24618": 485, "34068": 485, "34087": 485, "34080": 485, "34066": 485, "34042": 485, "33418": 485, "33985": 485, "33956": 485, "24596": 485, "33451": 485, "1617161": 485, "33824": 485, "33803": 485, "hadn": 485, "33738": 485, "33786": 485, "30167": 485, "33706": 485, "gohlk": 485, "30654": 485, "kerl": 485, "33622": 485, "25711": 485, "33509": 485, "31849": 485, "33475": 485, "20104": 485, "33391": 485, "set_symmetric_differ": 485, "33363": 485, "28055": 485, "eik": 485, "33128": 485, "33331": 485, "33312": 485, "_dictkeysobject": 485, "33305": 485, "33306": 485, "33270": 485, "30455": 485, "33176": 485, "33231": 485, "normalizestr": 485, "33205": 485, "round_up_to_power_2": 485, "hashtable_s": 485, "29922": 485, "33199": 485, "ma_version_tag": 485, "33138": 485, "copyabl": 485, "33018": 485, "25750": 485, "33026": 485, "33005": 485, "_pygilstate_reinit": 485, "_pyinterpreterstate_en": 485, "32911": 485, "29463": 485, "7a1": 485, "17288": 485, "32946": 485, "32932": 485, "32925": 485, "32889": 485, "py_address_in_rang": 485, "32836": 485, "31356": 485, "ensure_dis": 485, "32711": 485, "32583": 485, "31902": 485, "25862": 485, "21983": 485, "31577": 485, "29832": 485, "getsockaddrarg": 485, "35845": 485, "35847": 485, "ctypes_pass_by_ref_hack": 485, "test_pass_by_valu": 485, "35780": 485, "misord": 485, "23846": 485, "34323": 485, "iocpproactor": 485, "35674": 485, "35733": 485, "35726": 485, "35719": 485, "35717": 485, "35699": 485, "32710": 485, "readfil": 485, "wsasend": 485, "35682": 485, "35643": 485, "35619": 485, "28503": 485, "35614": 485, "35568": 485, "35588": 485, "35585": 485, "30561": 485, "35526": 485, "35523": 485, "selinux": 485, "31784": 485, "1e9": 485, "35513": 485, "35502": 485, "35348": 485, "35491": 485, "baseprocess": 485, "35477": 485, "31446": 485, "createprocessw": 485, "35052": 485, "20239": 485, "17185": 485, "35445": 485, "35415": 485, "35424": 485, "35330": 485, "35346": 485, "rhapsodi": 485, "10496": 485, "35389": 485, "cs_gnu_libc_vers": 485, "35394": 485, "35310": 485, "oran": 485, "avraham": 485, "35380": 485, "35341": 485, "ismo": 485, "toijala": 485, "35371": 485, "35066": 485, "399": 485, "35344": 485, "35312": 485, "35308": 485, "24746": 485, "jairo": 485, "trad": 485, "28604": 485, "35277": 485, "35226": 485, "35189": 485, "fnctl": 485, "calcel": 485, "35186": 485, "35152": 485, "35062": 485, "35065": 485, "_untrack_read": 485, "35079": 485, "sequencemanag": 485, "35017": 485, "35024": 485, "agren": 485, "31047": 485, "35053": 485, "34794": 485, "34909": 485, "35022": 485, "35008": 485, "23420": 485, "kuska": 485, "33947": 485, "34890": 485, "34521": 485, "recvfd": 485, "31522": 485, "34970": 485, "34969": 485, "16965": 485, "34966": 485, "34926": 485, "asthana": 485, "34941": 485, "32680": 485, "34769": 485, "34936": 485, "selection_el": 485, "34911": 485, "34922": 485, "34925": 485, "34900": 485, "oliveira": 485, "34844": 485, "strformatstyl": 485, "percentstyl": 485, "stringtemplatestyl": 485, "34897": 485, "34871": 485, "28441": 485, "34866": 485, "34711": 485, "34872": 485, "34849": 485, "34819": 485, "34758": 485, "wasm": 485, "34789": 485, "delfino": 485, "34334": 485, "5950": 485, "34728": 485, "34738": 485, "29577": 485, "31177": 485, "34672": 485, "musl": 485, "34666": 485, "awrit": 485, "6721": 485, "34658": 485, "after_par": 485, "34652": 485, "34638": 485, "34536": 485, "34636": 485, "microoptim": 485, "34630": 485, "32490": 485, "34363": 485, "34625": 485, "32270": 485, "34622": 485, "34610": 485, "34421": 485, "34604": 485, "grzybowski": 485, "34574": 485, "8110": 485, "34530": 485, "34563": 485, "peeknamedpip": 485, "34558": 485, "_aix": 485, "_convert_": 485, "22872": 485, "34515": 485, "13312": 485, "34472": 485, "sila": 485, "sewel": 485, "34454": 485, "izbyshev": 485, "6700": 485, "34171": 485, "34441": 485, "34427": 485, "34412": 485, "31715": 485, "mjs": 485, "34384": 485, "22602": 485, "2152": 485, "34341": 485, "34333": 485, "18540": 485, "26502": 485, "34318": 485, "33613": 485, "34248": 485, "34246": 485, "blum": 485, "aguiar": 485, "woellert": 485, "32321": 485, "wright": 485, "34263": 485, "34035": 485, "32215": 485, "34251": 485, "19891": 485, "homedir": 485, "34228": 485, "13041": 485, "zbyszek": 485, "34213": 485, "34052": 485, "34197": 485, "32788": 485, "__adapt__": 485, "21446": 485, "940286": 485, "showtop": 485, "34164": 485, "33729": 485, "34097": 485, "34108": 485, "34070": 485, "27494": 485, "33967": 485, "34041": 485, "34056": 485, "shim": 485, "34054": 485, "34043": 485, "34044": 485, "34010": 485, "34019": 485, "bumsik": 485, "33978": 485, "14117": 485, "rosett": 485, "33974": 485, "27500": 485, "24567": 485, "25007": 485, "33929": 485, "popen_spawn_win32": 485, "33916": 485, "32568": 485, "33833": 485, "proactorsockettransport": 485, "33663": 485, "26544": 485, "33843": 485, "33842": 485, "33805": 485, "33687": 485, "furrer": 485, "33812": 485, "32108": 485, "27397": 485, "33578": 485, "30805": 485, "33476": 485, "enriqu": 485, "perez": 485, "terron": 485, "33694": 485, "32493": 485, "uuid_enc_b": 485, "33274": 485, "33778": 485, "33165": 485, "33770": 485, "33769": 485, "ssltransport": 485, "33767": 485, "33734": 485, "31014": 485, "33197": 485, "_parameterkind": 485, "32684": 485, "33654": 485, "33674": 485, "512mib": 485, "sslprotocol": 485, "sslproto": 485, "31647": 485, "_selectorsockettransport": 485, "32610": 485, "33469": 485, "33672": 485, "33652": 485, "33238": 485, "haydaman": 485, "33625": 485, "33623": 485, "sigsgv": 485, "11874": 485, "wrappabl": 485, "30877": 485, "fos": 485, "7062": 485, "33582": 485, "33570": 485, "pre6": 485, "28556": 485, "12486": 485, "33548": 485, "_candidate_tempdir_list": 485, "33109": 485, "33541": 485, "_strptime": 485, "localetim": 485, "__pad": 485, "_localetime__pad": 485, "33536": 485, "33542": 485, "get_nod": 485, "duid": 485, "zvi": 485, "effron": 485, "26819": 485, "33516": 485, "28612": 485, "ladi": 485, "wirtz": 485, "28167": 485, "33504": 485, "33505": 485, "33497": 485, "amber": 485, "33495": 485, "26103": 485, "hall": 485, "33453": 485, "prs": 485, "paulius": 485, "arka": 485, "dombrova": 485, "33365": 485, "strigl": 485, "20087": 485, "33422": 485, "33281": 485, "33311": 485, "blondon": 485, "27300": 485, "32933": 485, "fluri": 485, "33383": 485, "33375": 485, "33336": 485, "6851": 485, "32455": 485, "27485": 485, "33332": 485, "sigfillset": 485, "33251": 485, "33329": 485, "33334": 485, "991266": 485, "33131": 485, "33308": 485, "line_info": 485, "col_info": 485, "23403": 485, "33266": 485, "11594": 485, "33254": 485, "33265": 485, "33263": 485, "starostin": 485, "33256": 485, "33144": 485, "33185": 485, "0b3": 485, "29613": 485, "33203": 485, "33224": 485, "mdiff": 485, "33209": 485, "32861": 485, "lazar": 485, "33175": 485, "33141": 485, "33096": 485, "32873": 485, "33134": 485, "33127": 485, "32505": 485, "33078": 485, "33116": 485, "32896": 485, "33100": 485, "32953": 485, "32968": 485, "33061": 485, "33064": 485, "33056": 485, "33021": 485, "31804": 485, "33034": 485, "eaton": 485, "30249": 485, "33037": 485, "27683": 485, "22674": 485, "32999": 485, "33009": 485, "32969": 485, "32056": 485, "32970": 485, "32844": 485, "32960": 485, "32713": 485, "joffrey": 485, "fuhrer": 485, "32257": 485, "32929": 485, "32146": 485, "32922": 485, "32759": 485, "32859": 485, "dup3": 485, "32556": 485, "_getfinalpathnam": 485, "_getvolumepathnam": 485, "_getdiskusag": 485, "21060": 485, "32857": 485, "after_cancel": 485, "32852": 485, "_abc_registri": 485, "_abc_cach": 485, "_abc_negative_cach": 485, "_dump_registri": 485, "_abc_registry_clear": 485, "_abc_caches_clear": 485, "32841": 485, "32819": 485, "19675": 485, "32394": 485, "31787": 485, "30157": 485, "32775": 485, "32622": 485, "32777": 485, "32647": 485, "libdl": 485, "32691": 485, "mod_spec": 485, "32734": 485, "32727": 485, "31453": 485, "ssl_ctx_set_min_proto_vers": 485, "24334": 485, "31848": 485, "aifc_read": 485, "initfp": 485, "ssnd": 485, "32512": 485, "8525": 485, "29877": 485, "32221": 485, "scopeid": 485, "32147": 485, "31908": 485, "31608": 485, "31425": 485, "gps": 485, "andersson": 485, "22005": 485, "16865": 485, "29456": 485, "hangul": 485, "u1176": 485, "u11a7": 485, "u11c3": 485, "21257": 485, "34764": 485, "35564": 485, "master_doc": 485, "35511": 485, "10536": 485, "35089": 485, "35038": 485, "unexist": 485, "f_restrict": 485, "35042": 485, "35044": 485, "35035": 485, "34967": 485, "add_object_typ": 485, "description_unit": 485, "34913": 485, "32174": 485, "charat": 485, "11233": 485, "34552": 485, "28617": 485, "stdtype": 485, "20177": 485, "hoffmann": 485, "34065": 485, "33460": 485, "33847": 485, "33409": 485, "versionad": 485, "parameterkind": 485, "17045": 485, "33736": 485, "23859": 485, "33594": 485, "33503": 485, "33421": 485, "33487": 485, "33378": 485, "33276": 485, "33201": 485, "33195": 485, "33126": 485, "27212": 485, "28247": 485, "18802": 485, "foster": 485, "27428": 485, "himanshu": 485, "lakhara": 485, "17232": 485, "32800": 485, "11015": 485, "32613": 485, "8722": 485, "32614": 485, "20709": 485, "gehrck": 485, "32722": 485, "31972": 485, "30607": 485, "8243": 485, "32337": 485, "25041": 485, "31432": 485, "35772": 485, "test_tarfil": 485, "tmpfs": 485, "aarch64": 485, "ppc64le": 485, "s390x": 485, "punch": 485, "35045": 485, "unbreak": 485, "test_min_max_vers": 485, "test_sendfil": 485, "33717": 485, "35488": 485, "31731": 485, "check_interrupted_writ": 485, "test_multiprocessing_main_handl": 485, "35519": 485, "test_xmlrpc": 485, "34279": 485, "testdidnotrun": 485, "35412": 485, "test_future4": 485, "26704": 485, "35352": 485, "35317": 485, "test_email": 485, "test_localtime_daylight_true_dst_tru": 485, "test_localtime_daylight_false_dst_tru": 485, "21263": 485, "34962": 485, "docstest": 485, "23596": 485, "antoni": 485, "34537": 485, "test_str": 485, "34587": 485, "rdstest": 485, "testcongest": 485, "34661": 485, "34200": 485, "flaki": 485, "test_pkg": 485, "scari": 485, "module_cleanup": 485, "34569": 485, "34594": 485, "34579": 485, "test_emb": 485, "34542": 485, "3072": 485, "11193": 485, "test_undecodable_env": 485, "34347": 485, "test_cmd_lin": 485, "34490": 485, "34391": 485, "11192": 485, "inet_pton6_zon": 485, "34399": 485, "test_mktim": 485, "test_pthread_getcpuclickid": 485, "_pytime_localtim": 485, "11191": 485, "test_search_cpp": 485, "33746": 485, "test_unittest": 485, "33901": 485, "test_dbm_gnu": 485, "33873": 485, "huntrleak": 485, "33562": 485, "33655": 485, "test_posix_falloc": 485, "zfs": 485, "32962": 485, "mcet": 485, "fcf": 485, "33358": 485, "test_pre_initialization_sys_opt": 485, "32872": 485, "32517": 485, "32663": 485, "smtputf8simtest": 485, "27643": 485, "test_c": 485, "19417": 485, "31809": 485, "secp": 485, "34691": 485, "35683": 485, "35642": 485, "asynciomodul": 485, "vcxproj": 485, "35550": 485, "__sun": 485, "__svr4": 485, "35499": 485, "35351": 485, "35139": 485, "inlinefunctionexpans": 485, "onlyexplicitinlin": 485, "ob1": 485, "pyproject": 485, "35011": 485, "pyexpatn": 485, "28015": 485, "34765": 485, "automak": 485, "34585": 485, "34710": 485, "pedant": 485, "34582": 485, "devop": 485, "34081": 485, "34555": 485, "have_linux_vm_sockets_h": 485, "have_sockaddr_alg": 485, "33015": 485, "34245": 485, "34121": 485, "30345": 485, "5755": 485, "33614": 485, "33648": 485, "33522": 485, "visualstudio": 485, "33512": 485, "33483": 485, "33394": 485, "33377": 485, "mip": 485, "r6": 485, "riscv": 485, "32232": 485, "33182": 485, "33163": 485, "v39": 485, "33012": 485, "32898": 485, "29442": 485, "35890": 485, "wcstok": 485, "32560": 485, "35854": 485, "35811": 485, "35797": 485, "35758": 485, "29734": 485, "35596": 485, "35402": 485, "35401": 485, "34977": 485, "35067": 485, "_distutils_findv": 485, "vswhere": 485, "32557": 485, "34770": 485, "pyshellext": 485, "34603": 485, "34581": 485, "socketmodul": 485, "_msc_ver": 485, "34532": 485, "34062": 485, "34225": 485, "34011": 485, "34006": 485, "31546": 485, "matplotlib": 485, "30237": 485, "readconsol": 485, "cancelsynchronousio": 485, "33895": 485, "33720": 485, "29097": 485, "86400": 485, "33316": 485, "33184": 485, "32890": 485, "33016": 485, "32903": 485, "32901": 485, "31966": 485, "32409": 485, "32457": 485, "32370": 485, "ipconfig": 485, "29248": 485, "printnameoffset": 485, "holmquist": 485, "sse4": 485, "1104": 485, "summaryinfo": 485, "35025": 485, "24658": 485, "33635": 485, "_recursivewildcardselector": 485, "_iterate_directori": 485, "13631": 485, "32726": 485, "activetcl": 485, "31903": 485, "systemconfigur": 485, "35770": 485, "35769": 485, "untitl": 485, "35660": 485, "35641": 485, "34055": 485, "35591": 485, "35196": 485, "squeezer": 485, "35598": 485, "config_key": 485, "28097": 485, "35208": 485, "35555": 485, "gray": 485, "35521": 485, "22703": 485, "35213": 485, "34864": 485, "35202": 485, "33000": 485, "overfil": 485, "23220": 485, "35099": 485, "stdxxx": 485, "35097": 485, "35093": 485, "35088": 485, "copy_str": 485, "35087": 485, "34548": 485, "unsqueez": 485, "34047": 485, "34275": 485, "34120": 485, "unrespons": 485, "33975": 485, "htest": 485, "33905": 485, "stackview": 485, "stackbrows": 485, "33924": 485, "mainmenu": 485, "menudef": 485, "33906": 485, "33917": 485, "idle_test": 485, "33904": 485, "rstripextens": 485, "33907": 485, "calltip_w": 485, "calltipwindow": 485, "33856": 485, "33839": 485, "33855": 485, "33763": 485, "33664": 485, "slider": 485, "33628": 485, "codecontext": 485, "33564": 485, "21474": 485, "33204": 485, "32984": 485, "32940": 485, "stringtranslatepseudomap": 485, "32916": 485, "32905": 485, "32874": 485, "32837": 485, "32826": 485, "test_help_about": 485, "test_file_button": 485, "32831": 485, "32765": 485, "34989": 485, "20260": 485, "read_var": 485, "33189": 485, "31920": 485, "krasnikov": 485, "29673": 485, "pystackv": 485, "pystack": 485, "32885": 485, "32222": 485, "harradin": 485, "31583": 485, "33817": 485, "35322": 485, "35296": 485, "pycore_": 485, "35259": 485, "neufeld": 485, "34725": 485, "_py_setprogramfullpath": 485, "34910": 485, "34193": 485, "34127": 485, "grammat": 485, "23927": 485, "pycompile_opcodestackeffectwithjump": 485, "34008": 485, "32500": 485, "33042": 485, "32374": 485, "30863": 485, "33851": 485, "33932": 485, "7b1": 485, "wno": 485, "threadedhttpserv": 485, "32703": 485, "32650": 485, "32685": 485, "32697": 485, "26163": 485, "0rc1": 485, "24340": 485, "18533": 485, "20891": 485, "32028": 485, "31113": 485, "30306": 485, "32513": 485, "32660": 485, "fionread": 485, "fionclex": 485, "fioclex": 485, "fioasync": 485, "fionbio": 485, "27931": 485, "32643": 485, "_step": 485, "_wakeup": 485, "_schedule_callback": 485, "32502": 485, "32596": 485, "32576": 485, "32574": 485, "melero": 485, "32521": 485, "libnsl": 485, "32467": 485, "32473": 485, "libtirpc": 485, "32503": 485, "29237": 485, "32404": 485, "32228": 485, "22908": 485, "31853": 485, "x509_verify_param_set1_ip": 485, "32724": 485, "32649": 485, "17799": 485, "32721": 485, "32602": 485, "32549": 485, "32635": 485, "libxcrypt": 485, "libcrypt": 485, "32598": 485, "ax_check_openssl": 485, "32593": 485, "32588": 485, "29911": 485, "32507": 485, "32681": 485, "timzon": 485, "32399": 485, "rfc4122": 485, "uuid_creat": 485, "32390": 485, "32143": 485, "32379": 485, "32259": 485, "27169": 485, "22091": 485, "32329": 485, "30416": 485, "32282": 485, "versionhelp": 485, "32260": 485, "32225": 485, "31901": 485, "32506": 485, "32279": 485, "32278": 485, "32499": 485, "32468": 485, "32422": 485, "31721": 485, "_log_traceback": 485, "26133": 485, "32363": 485, "32357": 485, "python_coroutin": 485, "cython_coroutin": 485, "32323": 485, "32302": 485, "v140": 485, "29711": 485, "stop_serv": 485, "17852": 485, "misunderstand": 485, "_py_pyatexit": 485, "_get_running_loop": 485, "_register_task": 485, "_enter_task": 485, "_leave_task": 485, "_unregister_task": 485, "32255": 485, "32277": 485, "32273": 485, "test_util": 485, "32272": 485, "classify_class_attr": 485, "ouput": 485, "32199": 485, "26439": 485, "31993": 485, "31802": 485, "31699": 485, "abstractserv": 485, "32252": 485, "faulthandler_suppress_crash_report": 485, "24960": 485, "32030": 485, "29084": 485, "32264": 485, "pygetopt": 485, "32241": 485, "32176": 485, "32137": 485, "32096": 485, "_pyruntime_initi": 485, "28180": 485, "_py_setlocalefromenv": 485, "31949": 485, "30696": 485, "20047": 485, "21720": 485, "31845": 485, "28936": 485, "31825": 485, "escape_decod": 485, "31618": 485, "28603": 485, "zane": 485, "bitter": 485, "31786": 485, "31781": 485, "31626": 485, "30817": 485, "_pysys_setobjectid": 485, "32214": 485, "27240": 485, "30788": 485, "31831": 485, "32182": 485, "rfc2231": 485, "32186": 485, "32101": 485, "32154": 485, "32089": 485, "preferenti": 485, "12239": 485, "vt_empti": 485, "mahon": 485, "28334": 485, "dimitri": 485, "merejkowski": 485, "31325": 485, "wellner": 485, "12382": 485, "ter": 485, "19610": 485, "28684": 485, "32110": 485, "27535": 485, "32088": 485, "1647489": 485, "32072": 485, "32069": 485, "32046": 485, "32018": 485, "32037": 485, "32034": 485, "32015": 485, "32011": 485, "28369": 485, "31976": 485, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 485, "untest": 485, "9678": 485, "takayuki": 485, "shimizukawa": 485, "30057": 485, "31933": 485, "poolexecutor": 485, "31927": 485, "dragonfli": 485, "27666": 485, "chtype": 485, "mmask_t": 485, "fink": 485, "31917": 485, "31897": 485, "25720": 485, "31893": 485, "kqueue_ev": 485, "31891": 485, "31884": 485, "28281": 485, "gollahon": 485, "30639": 485, "30768": 485, "intr_flag": 485, "31854": 485, "31834": 485, "ssse3": 485, "28416": 485, "31653": 485, "28326": 485, "superset_of": 485, "31827": 485, "31457": 485, "31806": 485, "31803": 485, "31800": 485, "30143": 485, "31770": 485, "31752": 485, "31620": 485, "poller": 485, "31632": 485, "_sslprotocoltransport": 485, "15037": 485, "31307": 485, "31334": 485, "riccardo": 485, "coccioli": 485, "31308": 485, "immun": 485, "30553": 485, "misdirect": 485, "32105": 485, "baseeventloop": 485, "31380": 485, "test_httpserv": 485, "test_undecodable_fil": 485, "apf": 485, "31705": 485, "test_sha256": 485, "enokey": 485, "32138": 485, "requires_android_level": 485, "32136": 485, "28668": 485, "requires_multiprocessing_queu": 485, "32126": 485, "test_get_event_loop_new_process": 485, "test_ev": 485, "31174": 485, "test_tool": 485, "test_unpars": 485, "directorytestcas": 485, "28538": 485, "28762": 485, "29040": 485, "r14": 485, "32059": 485, "detect_modul": 485, "sysroot": 485, "31957": 485, "31609": 485, "31934": 485, "31926": 485, "28791": 485, "28643": 485, "31866": 485, "1102": 485, "error_no_more_item": 485, "tuininga": 485, "31944": 485, "31857": 485, "31392": 485, "2m": 485, "32207": 485, "32164": 485, "tabbedpag": 485, "tabbedpageset": 485, "32100": 485, "pathbrows": 485, "31836": 485, "test_code_modul": 485, "ditto": 485, "32159": 485, "svneol": 485, "treesync": 485, "30722": 485, "sarnowski": 485, "32125": 485, "py_useclassexceptionsflag": 485, "31642": 485, "31708": 485, "30404": 485, "31619": 485, "31602": 485, "31592": 485, "31588": 485, "31566": 485, "31505": 485, "make_encod": 485, "31492": 485, "31478": 485, "31336": 485, "31410": 485, "31315": 485, "create_dynam": 485, "31311": 485, "31293": 485, "31285": 485, "30058": 485, "31672": 485, "31701": 485, "31728": 485, "bm_regex_compil": 485, "30397": 485, "31675": 485, "31673": 485, "adderrorinfo": 485, "30806": 485, "25351": 485, "20519": 485, "28293": 485, "31596": 485, "30347": 485, "30346": 485, "31556": 485, "31516": 485, "31525": 485, "sqlite3_prepare_v2": 485, "27541": 485, "31351": 485, "31537": 485, "30085": 485, "31696": 485, "31625": 485, "31624": 485, "22140": 485, "31569": 485, "31536": 485, "31460": 485, "flist": 485, "31649": 485, "_htest": 485, "_utest": 485, "31559": 485, "test_brows": 485, "31459": 485, "yesterday": 485, "31500": 485, "hidpi": 485, "31532": 485, "29781": 485, "29505": 485, "fuzz": 485, "30947": 485, "30730": 485, "30694": 485, "9233": 485, "9063": 485, "0718": 485, "0876": 485, "flood": 485, "xml_sethashsalt": 485, "30500": 485, "splithost": 485, "29591": 485, "4472": 485, "537": 485, "31490": 485, "31471": 485, "31418": 485, "31416": 485, "defaultact": 485, "31411": 485, "onceregistri": 485, "31373": 485, "demot": 485, "30465": 485, "30860": 485, "31347": 485, "_pyobject_fastcall_prepend": 485, "31343": 485, "sysmacro": 485, "libray": 485, "31291": 485, "31271": 485, "31243": 485, "30721": 485, "31070": 485, "_get_module_lock": 485, "30747": 485, "_py_atomic_stor": 485, "_py_atomic_load": 485, "31095": 485, "31071": 485, "30978": 485, "30808": 485, "_py_atom": 485, "30876": 485, "reimport": 485, "30703": 485, "30765": 485, "pthread_mutex_lock": 485, "31161": 485, "30814": 485, "30736": 485, "30604": 485, "co_extra_freefunc": 485, "30597": 485, "30682": 485, "30501": 485, "30486": 485, "25324": 485, "29104": 485, "27945": 485, "duan": 485, "griffin": 485, "25794": 485, "30039": 485, "12414": 485, "29839": 485, "29914": 485, "29949": 485, "29935": 485, "29816": 485, "29894": 485, "29859": 485, "pthread_": 485, "29849": 485, "28856": 485, "29723": 485, "29139": 485, "29714": 485, "29695": 485, "28893": 485, "28876": 485, "29683": 485, "_pycode_setextra": 485, "coleman": 485, "29684": 485, "segv": 485, "28598": 485, "29607": 485, "29602": 485, "29347": 485, "29438": 485, "29478": 485, "mircea": 485, "cosbuc": 485, "29319": 485, "runmainfromimport": 485, "29337": 485, "29327": 485, "29034": 485, "path_convert": 485, "29159": 485, "29049": 485, "28932": 485, "25677": 485, "layzel": 485, "28596": 485, "26919": 485, "28991": 485, "28147": 485, "28739": 485, "28512": 485, "28918": 485, "28797": 485, "pyeval_getcallstat": 485, "28782": 485, "28774": 485, "28731": 485, "_pydict_newpres": 485, "28532": 485, "27100": 485, "ellington": 485, "28746": 485, "26920": 485, "langinfo": 485, "28648": 485, "astral": 485, "28665": 485, "19398": 485, "28621": 485, "28580": 485, "28583": 485, "28128": 485, "28509": 485, "28426": 485, "28517": 485, "28214": 485, "23782": 485, "_pytraceback_add": 485, "28183": 485, "28379": 485, "28376": 485, "range_iter": 485, "26906": 485, "18287": 485, "koep": 485, "24098": 485, "28201": 485, "28350": 485, "26617": 485, "27942": 485, "28289": 485, "21578": 485, "28203": 485, "soumya": 485, "sharma": 485, "28086": 485, "unscath": 485, "27955": 485, "28192": 485, "27441": 485, "27222": 485, "long_rshift": 485, "28131": 485, "compile_sourc": 485, "28126": 485, "py_memcpi": 485, "28120": 485, "26182": 485, "28721": 485, "31499": 485, "31482": 485, "mitar": 485, "31544": 485, "31234": 485, "31431": 485, "approx": 485, "31400": 485, "27629": 485, "28958": 485, "28182": 485, "27340": 485, "31178": 485, "31350": 485, "31170": 485, "31326": 485, "27144": 485, "31281": 485, "10746": 485, "22536": 485, "29741": 485, "31249": 485, "workitem": 485, "31247": 485, "31238": 485, "serverthread": 485, "docserv": 485, "serve_until_quit": 485, "5001": 485, "31109": 485, "30102": 485, "openssl_add_all_algorithms_noconf": 485, "power8": 485, "serra": 485, "scalet": 485, "31183": 485, "diagnosi": 485, "luciano": 485, "ramalho": 485, "uninform": 485, "convert_to_error": 485, "31169": 485, "drallensmith": 485, "31185": 485, "include_fil": 485, "31135": 485, "31107": 485, "31061": 485, "30987": 485, "30502": 485, "30919": 485, "26732": 485, "29403": 485, "gallagh": 485, "30961": 485, "19896": 485, "30946": 485, "25684": 485, "30886": 485, "29854": 485, "30319": 485, "30828": 485, "cfutur": 485, "30807": 485, "30441": 485, "29293": 485, "sleeper": 485, "30532": 485, "9146": 485, "29169": 485, "30119": 485, "30879": 485, "30746": 485, "30664": 485, "29212": 485, "y_n": 485, "29755": 485, "30616": 485, "30038": 485, "23894": 485, "24484": 485, "30589": 485, "28994": 485, "30645": 485, "load_packag": 485, "alexandru": 485, "ardelean": 485, "30624": 485, "30595": 485, "30605": 485, "29870": 485, "sgha": 485, "er": 485, "27585": 485, "mathieu": 485, "sornay": 485, "30418": 485, "30463": 485, "30557": 485, "30245": 485, "yuan": 485, "30378": 485, "30470": 485, "wijaya": 485, "30414": 485, "_feed": 485, "30003": 485, "30149": 485, "30301": 485, "30375": 485, "30329": 485, "wsaeinval": 485, "10022": 485, "29196": 485, "30299": 485, "30048": 485, "30266": 485, "30340": 485, "30298": 485, "weaken": 485, "subsequenti": 485, "29990": 485, "30243": 485, "30185": 485, "fasaraki": 485, "hilliard": 485, "30205": 485, "30228": 485, "30190": 485, "30101": 485, "29822": 485, "nate": 485, "soar": 485, "29960": 485, "bryan": 485, "30070": 485, "22352": 485, "30061": 485, "sizeabl": 485, "30218": 485, "30068": 485, "_iobas": 485, "29694": 485, "29692": 485, "unchain": 485, "siddharth": 485, "velankar": 485, "26187": 485, "9303": 485, "30017": 485, "29998": 485, "29649": 485, "29931": 485, "sanjay": 485, "sundaresan": 485, "29953": 485, "29942": 485, "10030": 485, "29204": 485, "27863": 485, "28699": 485, "23890": 485, "29901": 485, "25803": 485, "29861": 485, "29884": 485, "zeitouni": 485, "25455": 485, "29800": 485, "seifert": 485, "8256": 485, "29619": 485, "28298": 485, "intabl": 485, "29645": 485, "28231": 485, "26915": 485, "29623": 485, "elli": 485, "_v2": 485, "28963": 485, "subprocessstreamprotocol": 485, "29271": 485, "29703": 485, "29615": 485, "motejlek": 485, "29376": 485, "28624": 485, "sayan": 485, "chowdhuri": 485, "28518": 485, "29742": 485, "29532": 485, "29110": 485, "29534": 485, "_pydecim": 485, "29100": 485, "29416": 485, "29444": 485, "wgh": 485, "29368": 485, "29338": 485, "29335": 485, "29290": 485, "28735": 485, "magickmock": 485, "29197": 485, "29210": 485, "29219": 485, "29195": 485, "28969": 485, "29142": 485, "28961": 485, "jiajun": 485, "huang": 485, "15812": 485, "brees": 485, "28985": 485, "dingyuan": 485, "29079": 485, "13051": 485, "tycho": 485, "andersen": 485, "9770": 485, "28427": 485, "28923": 485, "28871": 485, "19542": 485, "16255": 485, "28779": 485, "set_forkserver_preload": 485, "26937": 485, "27030": 485, "28835": 485, "revisit": 485, "28752": 485, "28727": 485, "sre_pattern": 485, "18383": 485, "20572": 485, "25659": 485, "28548": 485, "19717": 485, "28563": 485, "28387": 485, "cufr": 485, "27517": 485, "fogl": 485, "28549": 485, "ncurses6": 485, "28449": 485, "23262": 485, "broytman": 485, "24241": 485, "27939": 485, "28255": 485, "prweek": 485, "20491": 485, "kaarl": 485, "ritvanen": 485, "28353": 485, "28430": 485, "27025": 485, "25464": 485, "header_exist": 485, "addin": 485, "28488": 485, "28469": 485, "28115": 485, "18219": 485, "28448": 485, "23214": 485, "28480": 485, "28240": 485, "24452": 485, "20766": 485, "27998": 485, "28317": 485, "28380": 485, "28229": 485, "28321": 485, "28225": 485, "28227": 485, "27358": 485, "28322": 485, "leitch": 485, "28228": 485, "28226": 485, "28314": 485, "28148": 485, "localtime_r": 485, "schouten": 485, "28253": 485, "28275": 485, "27897": 485, "18893": 485, "macholib": 485, "madison": 485, "27611": 485, "displaystyl": 485, "27348": 485, "5a2": 485, "25651": 485, "falsi": 485, "27778": 485, "28200": 485, "25400": 485, "_sendfile_use_sendfil": 485, "28075": 485, "error_access_deni": 485, "25270": 485, "escape_encod": 485, "28181": 485, "antigrav": 485, "kaartic": 485, "sivaraam": 485, "25895": 485, "gerg": 485, "imreh": 485, "holtermann": 485, "28114": 485, "parse_envlist": 485, "27599": 485, "27906": 485, "conway": 485, "28174": 485, "larson": 485, "26654": 485, "iceboy": 485, "26909": 485, "28176": 485, "selectorloop": 485, "27759": 485, "28325": 485, "macurl2path": 485, "28368": 485, "28371": 485, "28372": 485, "28399": 485, "27972": 485, "24142": 485, "florian": 485, "29581": 485, "25532": 485, "30177": 485, "pietri": 485, "31294": 485, "21649": 485, "30803": 485, "thomassen": 485, "30176": 485, "30052": 485, "26985": 485, "19824": 485, "20314": 485, "12518": 485, "28929": 485, "25008": 485, "26355": 485, "29349": 485, "28513": 485, "29639": 485, "hostv4": 485, "hostv6": 485, "31320": 485, "31346": 485, "25674": 485, "tbs": 485, "30715": 485, "30822": 485, "extralargefil": 485, "test_zipfile64": 485, "30695": 485, "set_nomemori": 485, "remove_mem_hook": 485, "30357": 485, "test_thread": 485, "grzegorz": 485, "grzywacz": 485, "30197": 485, "24932": 485, "28950": 485, "j0": 485, "28683": 485, "26936": 485, "28666": 485, "unwrit": 485, "23839": 485, "26944": 485, "28409": 485, "28217": 485, "_testconsol": 485, "26939": 485, "test_functool": 485, "armv7": 485, "31354": 485, "21st": 485, "31341": 485, "30854": 485, "30687": 485, "vcvarsal": 485, "20210": 485, "29941": 485, "28787": 485, "29243": 485, "29643": 485, "27593": 485, "29572": 485, "27659": 485, "29384": 485, "26851": 485, "28768": 485, "_setmod": 485, "29080": 485, "23903": 485, "r13": 485, "20211": 485, "28849": 485, "_multiarch": 485, "10656": 485, "tristan": 485, "haubenwalln": 485, "optimi": 485, "28444": 485, "28208": 485, "28248": 485, "21124": 485, "13756": 485, "roumen": 485, "petrov": 485, "21085": 485, "rebas": 485, "28258": 485, "estonian": 485, "26661": 485, "15819": 485, "28676": 485, "gareth": 485, "ree": 485, "30389": 485, "31358": 485, "31340": 485, "v141": 485, "30581": 485, "30916": 485, "30731": 485, "gadget": 485, "23451": 485, "29579": 485, "25778": 485, "28896": 485, "28522": 485, "getpathp": 485, "28402": 485, "28333": 485, "28251": 485, "28110": 485, "28161": 485, "28162": 485, "28163": 485, "_open_osfhandl": 485, "28164": 485, "_pyio_get_console_typ": 485, "28138": 485, "31493": 485, "31488": 485, "parenmatch": 485, "31477": 485, "31480": 485, "31421": 485, "31414": 485, "31051": 485, "genpag": 485, "30617": 485, "outwin": 485, "31287": 485, "test_configdialog": 485, "keyset": 485, "31206": 485, "highpag": 485, "31001": 485, "31205": 485, "keyspag": 485, "31130": 485, "31002": 485, "19903": 485, "31083": 485, "tabpag": 485, "31050": 485, "31004": 485, "fontpag": 485, "30781": 485, "31060": 485, "30853": 485, "vartrac": 485, "31003": 485, "30993": 485, "causal": 485, "create_font_tab": 485, "set_sampl": 485, "var_changed_font": 485, "test_font_set": 485, "test_indent_scal": 485, "30981": 485, "28523": 485, "30917": 485, "idleconf": 485, "30934": 485, "30913": 485, "30899": 485, "30881": 485, "30851": 485, "30870": 485, "8231": 485, "getusercfgdir": 485, "30779": 485, "configchang": 485, "changes_class_v4": 485, "test_config": 485, "changestest": 485, "configdialog_tests_v1": 485, "msg297804": 485, "30777": 485, "30495": 485, "textview": 485, "pep8": 485, "30723": 485, "30674": 485, "21519": 485, "29910": 485, "30728": 485, "6739": 485, "25514": 485, "subsubsect": 485, "30642": 485, "30290": 485, "30303": 485, "29071": 485, "28572": 485, "30983": 485, "polaco": 485, "penteado": 485, "29748": 485, "24037": 485, "29367": 485, "wrapperobject": 485, "28023": 485, "15369": 485, "microbenchmark": 485, "28102": 485, "turnbul": 485, "30832": 485, "py_have_native_tl": 485, "29083": 485, "29058": 485, "28808": 485, "28748": 485, "_py_packagecontext": 485, "2o": 485, "29706": 485, "30353": 485, "32555": 485, "31518": 485, "sslv23_method": 485, "4rc1": 485, "31852": 485, "31641": 485, "3rc1": 485, "31662": 485, "uploadreleas": 485, "31423": 485, "29600": 485, "2159": 485, "26293": 485, "29094": 485, "29519": 485, "29316": 485, "29011": 485, "29203": 485, "29085": 485, "29061": 485, "brendan": 485, "donegan": 485, "29119": 485, "andra": 485, "bogildea": 485, "29055": 485, "neaten": 485, "29326": 485, "29409": 485, "29392": 485, "28087": 485, "test_asyncor": 485, "test_eintr": 485, "28990": 485, "hoho": 485, "28770": 485, "fastcal": 485, "28898": 485, "have_long_long": 485, "28843": 485, "28600": 485, "28634": 485, "28639": 485, "mayfield": 485, "28652": 485, "28653": 485, "28703": 485, "28704": 485, "28471": 485, "28492": 485, "28500": 485, "26923": 485, "ebk": 485, "26796": 485, "lawrenz": 485, "25221": 485, "27080": 485, "27199": 485, "27948": 485, "x7b": 485, "x7d": 485, "28046": 485, "28071": 485, "25758": 485, "25856": 485, "26331": 485, "27999": 485, "26058": 485, "27911": 485, "exec_builtin_or_dynam": 485, "stdint": 485, "27961": 485, "27355": 485, "27870": 485, "25402": 485, "27214": 485, "long_invert": 485, "long_add": 485, "27506": 485, "27812": 485, "27811": 485, "27587": 485, "pvs": 485, "_pystate_addmodul": 485, "27792": 485, "26984": 485, "25604": 485, "24254": 485, "27662": 485, "list_new": 485, "py_size_max": 485, "27782": 485, "py_create_mod": 485, "27936": 485, "27487": 485, "27157": 485, "27558": 485, "28008": 485, "codeobject": 485, "28732": 485, "28485": 485, "28037": 485, "sqlite3_get_autocommit": 485, "intransact": 485, "25283": 485, "10740": 485, "28070": 485, "24693": 485, "27137": 485, "1703178": 485, "28019": 485, "18401": 485, "matusiak": 485, "kimbrel": 485, "25969": 485, "14977": 485, "1542": 485, "28082": 485, "24594": 485, "17582": 485, "28047": 485, "27576": 485, "28027": 485, "27445": 485, "22450": 485, "pgen3": 485, "load_grammar": 485, "28005": 485, "26667": 485, "27570": 485, "22233": 485, "27988": 485, "tautolog": 485, "27776": 485, "27691": 485, "gen_rid": 485, "25761": 485, "sweet32": 485, "25387": 485, "27866": 485, "11620": 485, "12885": 485, "27881": 485, "27861": 485, "19884": 485, "27706": 485, "nofar": 485, "schnider": 485, "10513": 485, "_get_type_var": 485, "_eval_typ": 485, "27832": 485, "_normal": 485, "27539": 485, "unnormalis": 485, "21718": 485, "ctes": 485, "2466": 485, "27573": 485, "27930": 485, "andrad": 485, "21201": 485, "wojciech": 485, "walczak": 485, "15308": 485, "bayard": 485, "randel": 485, "27922": 485, "27891": 485, "17642": 485, "25564": 485, "27821": 485, "26900": 485, "26027": 485, "27427": 485, "couzo": 485, "27953": 485, "26040": 485, "test_math": 485, "test_cmath": 485, "rigour": 485, "27787": 485, "27566": 485, "27705": 485, "validate_ucrtbas": 485, "27976": 485, "27983": 485, "26307": 485, "27917": 485, "25825": 485, "libpl": 485, "2a4": 485, "21122": 485, "17128": 485, "27952": 485, "fixcid": 485, "28065": 485, "25144": 485, "1602": 485, "27731": 485, "aliasmbc": 485, "20366": 485, "27756": 485, "cherri": 485, "27883": 485, "27704": 485, "22557": 485, "17596": 485, "wincrypt": 485, "gw": 485, "17599": 485, "reparse_data_buff": 485, "27507": 485, "27581": 485, "27419": 485, "27083": 485, "27514": 485, "27366": 485, "27524": 485, "27736": 485, "27038": 485, "27773": 485, "26750": 485, "descriptortyp": 485, "26800": 485, "26981": 485, "27783": 485, "27774": 485, "27760": 485, "27758": 485, "27568": 485, "httpoxi": 485, "1000110": 485, "7063": 485, "chuck": 485, "27656": 485, "sched_": 485, "27130": 485, "27567": 485, "27533": 485, "_isdir": 485, "17711": 485, "27522": 485, "27512": 485, "27714": 485, "text_textview": 485, "test_autocomplet": 485, "27621": 485, "27620": 485, "27609": 485, "25507": 485, "27173": 485, "confighandl": 485, "25805": 485, "test_pkgutil": 485, "27472": 485, "27369": 485, "test_pyexpat": 485, "27594": 485, "test_ast": 485, "27647": 485, "27610": 485, "27469": 485, "27309": 485, "27713": 485, "27453": 485, "27641": 485, "26662": 485, "python_for_gen": 485, "10910": 485, "freedbsd": 485, "27278": 485, "22636": 485, "27473": 485, "27443": 485, "27007": 485, "26844": 485, "lev": 485, "maximov": 485, "23804": 485, "27466": 485, "time2netscap": 485, "27319": 485, "27079": 485, "27294": 485, "27048": 485, "27330": 485, "27238": 485, "27122": 485, "issue25782": 485, "26386": 485, "16182": 485, "27477": 485, "test_help": 485, "27380": 485, "sectionnam": 485, "helpsourc": 485, "itw": 485, "27372": 485, "27365": 485, "27245": 485, "24137": 485, "27310": 485, "28066": 485, "27442": 485, "android_api_level": 485, "27434": 485, "26930": 485, "2h": 485, "23968": 485, "machdep": 485, "platform_triplet": 485, "ldversion": 485, "_sysconfigdata": 485, "27332": 485, "27418": 485, "importbench": 485, "19489": 485, "27285": 485, "pierci": 485, "27027": 485, "26556": 485, "1283": 485, "0772": 485, "oststrom": 485, "26839": 485, "colm": 485, "buckley": 485, "27190": 485, "sawyer": 485, "27286": 485, "27066": 485, "26983": 485, "27097": 485, "23275": 485, "20508": 485, "21386": 485, "07a5610bae9d": 485, "luethi": 485, "27029": 485, "20900": 485, "ingrid": 485, "25738": 485, "susumu": 485, "koshiba": 485, "21313": 485, "27164": 485, "24291": 485, "serverhandl": 485, "21272": 485, "26809": 485, "26373": 485, "flip": 485, "sigiot": 485, "27167": 485, "25931": 485, "21776": 485, "26526": 485, "27114": 485, "_load_windows_store_cert": 485, "5124": 485, "24750": 485, "24759": 485, "27239": 485, "isxyztk": 485, "27262": 485, "27196": 485, "20567": 485, "27156": 485, "27117": 485, "26673": 485, "21939": 485, "21676": 485, "18410": 485, "westley": 485, "mart": 485, "nez": 485, "21703": 485, "27044": 485, "remove_var_callback": 485, "23977": 485, "test_deleg": 485, "16484": 485, "rodman": 485, "kaushik": 485, "nadikud": 485, "24136": 485, "22558": 485, "yoni": 485, "lavi": 485, "25285": 485, "27064": 485, "17500": 485, "pythondotorg": 485, "945": 485, "27229": 485, "26657": 485, "hagemeist": 485, "26313": 485, "baji": 485, "25939": 485, "20041": 485, "26168": 485, "26991": 485, "27039": 485, "23640": 485, "27005": 485, "18531": 485, "26811": 485, "20120": 485, "26802": 485, "26659": 485, "26718": 485, "27138": 485, "27147": 485, "25339": 485, "26494": 485, "26581": 485, "19711": 485, "21099": 485, "26563": 485, "26558": 485, "26464": 485, "22836": 485, "26302": 485, "26136": 485, "anish": 485, "shah": 485, "26204": 485, "4806": 485, "23601": 485, "25843": 485, "26107": 485, "26154": 485, "_pythreadstate_uncheckedget": 485, "_pythreadstate_curr": 485, "22995": 485, "_pyobject_getst": 485, "25961": 485, "25973": 485, "20440": 485, "py_setref": 485, "25766": 485, "25421": 485, "25709": 485, "24097": 485, "24731": 485, "25630": 485, "23564": 485, "fds_to_pass": 485, "25388": 485, "25462": 485, "24802": 485, "overread": 485, "25555": 485, "24726": 485, "25449": 485, "25395": 485, "_pybyteswrit": 485, "25274": 485, "24402": 485, "24806": 485, "24848": 485, "misform": 485, "25280": 485, "25003": 485, "9232": 485, "24965": 485, "26478": 485, "26171": 485, "25660": 485, "26288": 485, "26289": 485, "26315": 485, "25887": 485, "27057": 485, "eaccess": 485, "bednarski": 485, "27014": 485, "tuur": 485, "27031": 485, "14132": 485, "janech": 485, "17214": 485, "27033": 485, "27034": 485, "26892": 485, "22274": 485, "26807": 485, "yolanda": 485, "robla": 485, "25745": 485, "26977": 485, "26002": 485, "upendra": 485, "kuma": 485, "25974": 485, "26996": 485, "26881": 485, "23815": 485, "17765": 485, "26873": 485, "responseerror": 485, "26711": 485, "24114": 485, "crle": 485, "kee": 485, "bos": 485, "26864": 485, "24902": 485, "26634": 485, "26804": 485, "lower_cas": 485, "mixed_cas": 485, "26837": 485, "26041": 485, "kumaripaba": 485, "miyurusara": 485, "athukorala": 485, "26822": 485, "26733": 485, "26801": 485, "24838": 485, "26717": 485, "ize": 485, "26782": 485, "26735": 485, "024": 485, "26585": 485, "_quote_html": 485, "16329": 485, "webm": 485, "13952": 485, "26709": 485, "y2038": 485, "23735": 485, "25951": 485, "26586": 485, "26676": 485, "22854": 485, "26641": 485, "docfiletest": 485, "25195": 485, "3603bae63c13": 485, "plummer": 485, "26644": 485, "26616": 485, "26637": 485, "21925": 485, "26530": 485, "_pytracemalloc_track": 485, "_pytracemalloc_untrack": 485, "_pytracemalloc_gettraceback": 485, "_tracemalloc": 485, "24266": 485, "26590": 485, "18787": 485, "26560": 485, "inglesbi": 485, "_showwarnmsg": 485, "26569": 485, "26499": 485, "ghost": 485, "25320": 485, "den": 485, "elzen": 485, "16181": 485, "http2time": 485, "26513": 485, "23718": 485, "tam": 485, "benc": 485, "gedai": 485, "20589": 485, "26177": 485, "15068": 485, "2202": 485, "get_algorithm_impl": 485, "dupuy": 485, "26167": 485, "25718": 485, "26475": 485, "26457": 485, "26385": 485, "26402": 485, "25913": 485, "swati": 485, "jaiswal": 485, "26186": 485, "26367": 485, "26309": 485, "25995": 485, "23992": 485, "mapresult": 485, "26117": 485, "25949": 485, "25911": 485, "26045": 485, "12923": 485, "brazil": 485, "rocco": 485, "25945": 485, "26202": 485, "23076": 485, "nyberg": 485, "19883": 485, "26099": 485, "26147": 485, "25935": 485, "16620": 485, "26013": 485, "25850": 485, "25822": 485, "22642": 485, "24705": 485, "_parse_makefil": 485, "26069": 485, "22138": 485, "mcculli": 485, "25672": 485, "ssl_mode_release_buff": 485, "26012": 485, "24120": 485, "ulrich": 485, "25447": 485, "25802": 485, "24103": 485, "25860": 485, "samson": 485, "25914": 485, "25902": 485, "22227": 485, "25717": 485, "5a1": 485, "24903": 485, "25764": 485, "25771": 485, "6478": 485, "14285": 485, "19771": 485, "25177": 485, "10131": 485, "ganisin": 485, "7990": 485, "santoso": 485, "25725": 485, "25663": 485, "25688": 485, "23914": 485, "25691": 485, "25624": 485, "25626": 485, "uint_max": 485, "25583": 485, "6973": 485, "mauro": 485, "25590": 485, "25498": 485, "eryksun": 485, "25584": 485, "25446": 485, "18010": 485, "25554": 485, "18973": 485, "25510": 485, "ryosuk": 485, "ito": 485, "25503": 485, "vandenberg": 485, "25515": 485, "21827": 485, "25390": 485, "25441": 485, "25410": 485, "25411": 485, "simon04": 485, "25407": 485, "25406": 485, "25364": 485, "25328": 485, "25316": 485, "distutilsplatformerror": 485, "25380": 485, "stack_glob": 485, "23972": 485, "reuseport": 485, "reuseaddr": 485, "25304": 485, "25232": 485, "cgirequesthandl": 485, "24657": 485, "23600": 485, "25203": 485, "22241": 485, "23517": 485, "24633": 485, "24874": 485, "24360": 485, "23426": 485, "13938": 485, "stringtyp": 485, "8585": 485, "zipimporter2": 485, "18622": 485, "palumbo": 485, "laurent": 485, "buyst": 485, "24426": 485, "23661": 485, "ignacio": 485, "rossi": 485, "25578": 485, "getpeerc": 485, "25530": 485, "25569": 485, "25471": 485, "25319": 485, "26050": 485, "25924": 485, "26406": 485, "26848": 485, "20640": 485, "confighelpsourceedit": 485, "iobind": 485, "25905": 485, "15348": 485, "24455": 485, "15347": 485, "vwait": 485, "25313": 485, "currentthem": 485, "24782": 485, "22726": 485, "24820": 485, "cobalt": 485, "25224": 485, "24972": 485, "24570": 485, "24988": 485, "scrolledlist": 485, "24801": 485, "25173": 485, "25198": 485, "pitch": 485, "blueish": 485, "25225": 485, "21995": 485, "22820": 485, "25219": 485, "24861": 485, "idleib": 485, "25199": 485, "16893": 485, "helpdialog": 485, "helt": 485, "24199": 485, "idlev": 485, "24790": 485, "26736": 485, "6953": 485, "23606": 485, "24952": 485, "mattip": 485, "26014": 485, "21916": 485, "loys": 485, "26295": 485, "testdir": 485, "26523": 485, "26015": 485, "26325": 485, "25940": 485, "25616": 485, "test_collect": 485, "test_ordered_dict": 485, "25188": 485, "22806": 485, "18174": 485, "25260": 485, "26583": 485, "test_timestamp_overflow": 485, "test_import": 485, "21277": 485, "ffi_conveni": 485, "26884": 485, "rtld_": 485, "22359": 485, "21668": 485, "_datetim": 485, "_ctypes_test": 485, "25702": 485, "26624": 485, "17603": 485, "fileblock": 485, "26079": 485, "bjoern": 485, "thiel": 485, "26465": 485, "2g": 485, "25348": 485, "build_pgo": 485, "25827": 485, "25696": 485, "j9": 485, "24986": 485, "24421": 485, "_math": 485, "26268": 485, "25136": 485, "24324": 485, "27053": 485, "make_zip": 485, "prepare_ssl": 485, "26071": 485, "26073": 485, "26065": 485, "25022": 485, "example_nt": 485, "26799": 485, "ilsch": 485, "26271": 485, "shaulov": 485, "26489": 485, "26316": 485, "25440": 485, "26312": 485, "26198": 485, "32551": 485, "6rc1": 485, "30657": 485, "1000158": 485, "bosamiya": 485, "miro": 485, "hron": 485, "29537": 485, "30383": 485, "30523": 485, "matchfil": 485, "30540": 485, "warm": 485, "30675": 485, "29073": 485, "28189": 485, "dictitems_contain": 485, "26020": 485, "19003": 485, "26664": 485, "ld_so_aix": 485, "26867": 485, "26194": 485, "17633": 485, "27223": 485, "_read_readi": 485, "_write_readi": 485, "_conn_lost": 485, "22970": 485, "25500": 485, "25715": 485, "25182": 485, "stdprinter": 485, "25131": 485, "25150": 485, "_py_atomic_xxx": 485, "openmp": 485, "24483": 485, "22958": 485, "22609": 485, "25111": 485, "25262": 485, "binbytes8": 485, "binunicode8": 485, "25034": 485, "anthon": 485, "neut": 485, "25233": 485, "23329": 485, "_unpickler_read": 485, "25047": 485, "25135": 485, "deque_clear": 485, "19143": 485, "25092": 485, "25155": 485, "25108": 485, "25118": 485, "24684": 485, "25060": 485, "24857": 485, "kaptur": 485, "23144": 485, "24982": 485, "25019": 485, "16180": 485, "24891": 485, "24992": 485, "24881": 485, "21112": 485, "24764": 485, "read_multi": 485, "landri": 485, "24913": 485, "bryce": 485, "darl": 485, "24774": 485, "chiu": 485, "hsiang": 485, "hsu": 485, "21159": 485, "20362": 485, "ilia": 485, "kurenkov": 485, "23572": 485, "12067": 485, "23725": 485, "24808": 485, "weston": 485, "22812": 485, "mca": 485, "nulti": 485, "25099": 485, "23919": 485, "24915": 485, "24910": 485, "msis": 485, "25450": 485, "25164": 485, "25143": 485, "25163": 485, "25089": 485, "25165": 485, "25112": 485, "25102": 485, "25081": 485, "25091": 485, "25126": 485, "25213": 485, "requestedexecutionlevel": 485, "25071": 485, "25029": 485, "test_strptim": 485, "25027": 485, "24305": 485, "24912": 485, "24975": 485, "24917": 485, "time_strftim": 485, "24748": 485, "load_dynam": 485, "24635": 485, "24989": 485, "24769": 485, "21167": 485, "24492": 485, "24847": 485, "24839": 485, "24867": 485, "24667": 485, "odict": 485, "24824": 485, "24634": 485, "24798": 485, "_msvccompil": 485, "4395": 485, "23973": 485, "23004": 485, "hill": 485, "23888": 485, "23652": 485, "22932": 485, "shachnev": 485, "23779": 485, "23319": 485, "gautier": 485, "23254": 485, "19450": 485, "17527": 485, "sbardella": 485, "24791": 485, "23672": 485, "mohd": 485, "sanad": 485, "zaki": 485, "rizvi": 485, "24745": 485, "tkfixedfont": 485, "fontxxx": 485, "21192": 485, "adnan": 485, "umer": 485, "13884": 485, "tearoff": 485, "24129": 485, "20769": 485, "dorian": 485, "pula": 485, "23589": 485, "yongzhi": 485, "24729": 485, "24751": 485, "24569": 485, "24583": 485, "24407": 485, "24619": 485, "24687": 485, "15944": 485, "23441": 485, "sekera": 485, "24683": 485, "21697": 485, "eduardo": 485, "seabra": 485, "24695": 485, "24620": 485, "22485": 485, "22153": 485, "evilzero": 485, "24580": 485, "24206": 485, "24631": 485, "24608": 485, "18684": 485, "24259": 485, "24669": 485, "kai": 485, "groner": 485, "24688": 485, "24603": 485, "24467": 485, "24345": 485, "py_tp_fin": 485, "21750": 485, "24552": 485, "24514": 485, "19176": 485, "20387": 485, "24456": 485, "24336": 485, "24522": 485, "24489": 485, "24408": 485, "24347": 485, "24348": 485, "24359": 485, "24368": 485, "24362": 485, "24377": 485, "24369": 485, "defend": 485, "24373": 485, "_testmultiphas": 485, "16690": 485, "24458": 485, "24351": 485, "24432": 485, "24115": 485, "_pydict_contain": 485, "24328": 485, "11205": 485, "24285": 485, "23247": 485, "5633": 485, "24326": 485, "23934": 485, "24276": 485, "23955": 485, "24257": 485, "22939": 485, "23985": 485, "24102": 485, "7x": 485, "23290": 485, "set_merg": 485, "2292": 485, "24096": 485, "23996": 485, "23911": 485, "24192": 485, "24022": 485, "22906": 485, "24230": 485, "24244": 485, "15836": 485, "wagner": 485, "9858": 485, "laura": 485, "rupprecht": 485, "22107": 485, "23780": 485, "6598": 485, "24091": 485, "21931": 485, "fci": 485, "armstrong": 485, "mangle_from": 485, "18682": 485, "23796": 485, "hergenroed": 485, "24155": 485, "20274": 485, "24134": 485, "23880": 485, "getdoubl": 485, "24094": 485, "9246": 485, "1025": 485, "23917": 485, "23008": 485, "23908": 485, "23728": 485, "23887": 485, "24178": 485, "24179": 485, "22547": 485, "23898": 485, "bayer": 485, "24298": 485, "23184": 485, "sweigart": 485, "21520": 485, "9517": 485, "christi": 485, "22155": 485, "24029": 485, "24077": 485, "24000": 485, "24001": 485, "23330": 485, "24031": 485, "22980": 485, "kfreebsd": 485, "22631": 485, "courtesi": 485, "23731": 485, "23726": 485, "23309": 485, "22977": 485, "23466": 485, "24044": 485, "21354": 485, "23840": 485, "23703": 485, "901e4e52b20a": 485, "_curs": 485, "19933": 485, "calledprocess": 485, "21217": 485, "balling": 485, "allison": 485, "24521": 485, "22931": 485, "23811": 485, "21116": 485, "boquien": 485, "22982": 485, "23529": 485, "21859": 485, "23865": 485, "23400": 485, "10838": 485, "23411": 485, "23881": 485, "22721": 485, "15133": 485, "23338": 485, "kato": 485, "16840": 485, "23834": 485, "23618": 485, "21526": 485, "23836": 485, "18473": 485, "3to2": 485, "23485": 485, "23752": 485, "23745": 485, "22117": 485, "23310": 485, "kasia": 485, "jachim": 485, "23817": 485, "sovers": 485, "23501": 485, "23799": 485, "22390": 485, "18128": 485, "23935": 485, "23944": 485, "20586": 485, "23492": 485, "23500": 485, "23998": 485, "pyimport_reinitlock": 485, "23753": 485, "23192": 485, "23629": 485, "14260": 485, "23792": 485, "pipepag": 485, "23775": 485, "23765": 485, "isbadstringptr": 485, "22364": 485, "23742": 485, "21802": 485, "23502": 485, "17530": 485, "22687": 485, "tetxtwrap": 485, "4727": 485, "23657": 485, "23688": 485, "23647": 485, "23539": 485, "22351": 485, "23715": 485, "23646": 485, "23136": 485, "carrol": 485, "23700": 485, "bohuslav": 485, "kabrda": 485, "22903": 485, "23631": 485, "rdivmod": 485, "23138": 485, "23051": 485, "diamant": 485, "22928": 485, "23615": 485, "23585": 485, "23583": 485, "22289": 485, "test_urllib2net": 485, "22826": 485, "bkfile": 485, "23571": 485, "23103": 485, "23476": 485, "x509_v_flag_trusted_first": 485, "23576": 485, "stall": 485, "23504": 485, "23563": 485, "19980": 485, "23521": 485, "21619": 485, "6639": 485, "814253": 485, "23215": 485, "aleksi": 485, "torhamo": 485, "5700": 485, "23374": 485, "23481": 485, "21548": 485, "apropo": 485, "22885": 485, "23146": 485, "23096": 485, "19105": 485, "23421": 485, "wdv4758h": 485, "23367": 485, "23361": 485, "19705": 485, "yeo": 485, "23801": 485, "23445": 485, "23686": 485, "23465": 485, "23285": 485, "22735": 485, "22896": 485, "21295": 485, "16795": 485, "22986": 485, "15859": 485, "campbel": 485, "barton": 485, "21408": 485, "23321": 485, "23253": 485, "22038": 485, "pyatom": 485, "lima": 485, "templ": 485, "20284": 485, "23048": 485, "20335": 485, "22869": 485, "pylifecycl": 485, "22335": 485, "0x7fffffff": 485, "22653": 485, "22643": 485, "22604": 485, "21052": 485, "22470": 485, "22520": 485, "22519": 485, "22518": 485, "1764286": 485, "18554": 485, "21391": 485, "11471": 485, "22215": 485, "22258": 485, "f_getfd": 485, "f_setfd": 485, "21389": 485, "22206": 485, "20184": 485, "22116": 485, "builtin_function_or_method": 485, "22077": 485, "20179": 485, "22082": 485, "slotdef": 485, "21897": 485, "21669": 485, "21642": 485, "42els": 485, "21523": 485, "pessimist": 485, "21418": 485, "21425": 485, "21435": 485, "21377": 485, "20355": 485, "21274": 485, "path_max": 485, "20904": 485, "fpu": 485, "m68k": 485, "21209": 485, "21193": 485, "21134": 485, "19537": 485, "20929": 485, "20731": 485, "20637": 485, "ingebretson": 485, "19995": 485, "19655": 485, "12546": 485, "13598": 485, "elson": 485, "8931": 485, "23165": 485, "23399": 485, "13128": 485, "23099": 485, "23326": 485, "23363": 485, "23364": 485, "23366": 485, "23369": 485, "encode_basestring_ascii": 485, "23353": 485, "why_yield": 485, "why_return": 485, "14099": 485, "tellabl": 485, "18518": 485, "23094": 485, "23268": 485, "19996": 485, "23248": 485, "23098": 485, "dev_t": 485, "21817": 485, "23250": 485, "23063": 485, "23209": 485, "23225": 485, "23143": 485, "23132": 485, "23112": 485, "23093": 485, "23111": 485, "22585": 485, "19104": 485, "23071": 485, "22783": 485, "15513": 485, "19858": 485, "22095": 485, "23016": 485, "21775": 485, "vfat": 485, "1218234": 485, "21740": 485, "23009": 485, "22959": 485, "16043": 485, "gzip_decod": 485, "1753": 485, "22966": 485, "pyc_compil": 485, "21971": 485, "21032": 485, "22902": 485, "pach": 485, "21356": 485, "bernard": 485, "spil": 485, "22915": 485, "22921": 485, "22894": 485, "22370": 485, "22841": 485, "ludov": 485, "gasc": 485, "httpbasicpriorauthhandl": 485, "22849": 485, "12728": 485, "22821": 485, "22824": 485, "22406": 485, "17293": 485, "netstat": 485, "aivar": 485, "kalv": 485, "22769": 485, "22417": 485, "22775": 485, "22776": 485, "22665": 485, "17381": 485, "22410": 485, "22759": 485, "8876": 485, "22217": 485, "22457": 485, "18216": 485, "22676": 485, "18853": 485, "__nain__": 485, "9351": 485, "7559": 485, "21991": 485, "22641": 485, "17401": 485, "compile_": 485, "20152": 485, "18643": 485, "22435": 485, "13096": 485, "11694": 485, "22462": 485, "21173": 485, "11866": 485, "21905": 485, "21883": 485, "22219": 485, "22449": 485, "ssl_cert_dir": 485, "ssl_cert_fil": 485, "22508": 485, "20076": 485, "20079": 485, "22396": 485, "22517": 485, "23392": 485, "10510": 485, "oshmyan": 485, "22448": 485, "oliva": 485, "22427": 485, "22362": 485, "20912": 485, "21866": 485, "22278": 485, "issue22118": 485, "22415": 485, "groupref_exist": 485, "22423": 485, "21332": 485, "21091": 485, "21079": 485, "22247": 485, "22419": 485, "bobrov": 485, "22384": 485, "22168": 485, "21147": 485, "21951": 485, "22338": 485, "12410": 485, "21270": 485, "22226": 485, "19524": 485, "19546": 485, "22051": 485, "21933": 485, "21597": 485, "kani": 485, "18132": 485, "22216": 485, "22098": 485, "22185": 485, "zongker": 485, "22287": 485, "_pytime_gettimeofday": 485, "librt": 485, "22182": 485, "22042": 485, "22236": 485, "15696": 485, "22068": 485, "22165": 485, "8797": 485, "bull": 485, "20729": 485, "21448": 485, "22184": 485, "17923": 485, "delhallt": 485, "22176": 485, "elf": 485, "abiv2": 485, "21975": 485, "20170": 485, "exists_ok": 485, "22127": 485, "22085": 485, "21580": 485, "17172": 485, "21704": 485, "20173": 485, "22033": 485, "21947": 485, "16133": 485, "22044": 485, "call_tzinfo_method": 485, "flanagan": 485, "1034h": 485, "4350": 485, "6167": 485, "15275": 485, "21888": 485, "22032": 485, "22031": 485, "21044": 485, "21966": 485, "19076": 485, "16382": 485, "21932": 485, "21942": 485, "11259": 485, "12523": 485, "21707": 485, "replace_paths_in_cod": 485, "20639": 485, "tikhonov": 485, "21714": 485, "21151": 485, "21090": 485, "21781": 485, "21679": 485, "21863": 485, "11453": 485, "21858": 485, "21476": 485, "21729": 485, "21491": 485, "21832": 485, "21722": 485, "dengler": 485, "21723": 485, "21711": 485, "21766": 485, "21310": 485, "21256": 485, "21677": 485, "nonnorm": 485, "11709": 485, "21515": 485, "13223": 485, "writedoc": 485, "21463": 485, "21618": 485, "21552": 485, "14315": 485, "sapin": 485, "21402": 485, "3015": 485, "21513": 485, "21137": 485, "21538": 485, "21525": 485, "22166": 485, "_forget_codec": 485, "test_codec": 485, "10744": 485, "nontrivi": 485, "13916": 485, "20998": 485, "21075": 485, "21226": 485, "21398": 485, "21424": 485, "heaqp": 485, "nmsmallest": 485, "21396": 485, "18314": 485, "sman": 485, "21088": 485, "21407": 485, "10650": 485, "21469": 485, "19414": 485, "21421": 485, "21101": 485, "21321": 485, "anton": 485, "afanasyev": 485, "21057": 485, "9815": 485, "13204": 485, "19385": 485, "21207": 485, "21291": 485, "21127": 485, "str_": 485, "15002": 485, "_temporaryfilewrapp": 485, "_temporaryfileclos": 485, "12220": 485, "mindom": 485, "21068": 485, "21276": 485, "use_xattr": 485, "incas": 485, "20896": 485, "21239": 485, "21203": 485, "jure": 485, "koren": 485, "21222": 485, "21197": 485, "17498": 485, "17826": 485, "7776": 485, "21529": 485, "vranken": 485, "4616": 485, "21169": 485, "21171": 485, "20539": 485, "21172": 485, "21155": 485, "21136": 485, "20636": 485, "21149": 485, "21058": 485, "21200": 485, "21013": 485, "20145": 485, "20633": 485, "20980": 485, "20990": 485, "21015": 485, "21000": 485, "20884": 485, "21499": 485, "test_api": 485, "19165": 485, "20574": 485, "20879": 485, "19157": 485, "usuabl": 485, "11599": 485, "4931": 485, "grok_environment_error": 485, "20875": 485, "11558": 485, "20283": 485, "20778": 485, "20791": 485, "otten": 485, "19748": 485, "outsiz": 485, "2037": 485, "19573": 485, "20378": 485, "20816": 485, "lowin": 485, "20817": 485, "6676": 485, "gutteridg": 485, "21117": 485, "corowrapp": 485, "gi_": 485, "163": 485, "21311": 485, "_osx_support": 485, "szakmeist": 485, "11571": 485, "21801": 485, "21923": 485, "_config_var": 485, "21323": 485, "19435": 485, "byrn": 485, "22733": 485, "ffi_prep_arg": 485, "23302": 485, "mss": 485, "20577": 485, "formatparagraph": 485, "3068": 485, "16233": 485, "4832": 485, "21986": 485, "17390": 485, "14105": 485, "21765": 485, "hyperpars": 485, "21940": 485, "widgetredirector": 485, "18592": 485, "searchdialogbas": 485, "webster": 485, "21694": 485, "21686": 485, "12387": 485, "21695": 485, "18910": 485, "18292": 485, "autoexpand": 485, "saihadhav": 485, "18409": 485, "21477": 485, "18104": 485, "21139": 485, "21284": 485, "17654": 485, "23180": 485, "15506": 485, "pkg_prog_pkg_config": 485, "22935": 485, "22592": 485, "22591": 485, "djgpp": 485, "16537": 485, "hosmer": 485, "21958": 485, "have_round": 485, "18093": 485, "15759": 485, "linkcheck": 485, "21141": 485, "build_ssl": 485, "21037": 485, "19962": 485, "21285": 485, "15234": 485, "17861": 485, "generate_opcode_h": 485, "20644": 485, "20022": 485, "15968": 485, "17095": 485, "21811": 485, "21166": 485, "18096": 485, "17219": 485, "22919": 485, "21236": 485, "_msi": 485, "14203": 485, "bytearray_getbuff": 485, "bytesiobuf_getbuff": 485, "array_buffer_getbuf": 485, "22445": 485, "npy_relaxed_strides_check": 485, "22079": 485, "_pyobject_gc_calloc": 485, "20942": 485, "init_frozen": 485, "19548": 485, "22394": 485, "21514": 485, "21777": 485, "6916": 485, "17386": 485, "21312": 485, "thread_foobar": 485, "mccracken": 485, "21043": 485, "20765": 485, "19407": 485, "19697": 485, "18982": 485, "22838": 485, "22173": 485, "16000": 485, "test_curs": 485, "21456": 485, "remi": 485, "pointel": 485, "20746": 485, "test_pdb": 485, "22060": 485, "test_ctyp": 485, "22104": 485, "22111": 485, "22002": 485, "21976": 485, "21918": 485, "9554": 485, "test_argpars": 485, "coneybear": 485, "radu": 485, "voicila": 485, "20155": 485, "19493": 485, "18492": 485, "21634": 485, "21605": 485, "21493": 485, "19925": 485, "21522": 485, "itemconfigur": 485, "paneconfigur": 485, "entryconfigur": 485, "17756": 485, "test_cod": 485, "17752": 485, "18604": 485, "21275": 485, "21223": 485, "20635": 485, "20743": 485, "test_tcl": 485, "21097": 485, "test_namespace_pkg": 485, "21503": 485, "test_both": 485, "20939": 485, "20668": 485, "21093": 485, "test_macholib": 485, "libz": 485, "22770": 485, "23211": 485, "23345": 485, "8zc": 485, "22314": 485, "22615": 485, "makelocalealia": 485, "22201": 485, "22120": 485, "18974": 485, "21906": 485, "21629": 485, "16047": 485, "11824": 485, "20535": 485, "run_test": 485, "23260": 485, "17896": 485, "17717": 485, "nasm": 485, "21907": 485, "22644": 485, "10747": 485, "kilburn": 485, "cp35": 485}, "objects": {"": [[63, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [34, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [61, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [52, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [52, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [60, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [60, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [55, 4, 1, "c.PyCFunction", "PyCFunction"], [55, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [55, 4, 1, "c.PyCMethod", "PyCMethod"], [35, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [35, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [35, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_New", "PyCode_New"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 2, 1, "c.PyCode_NewWithPosOnlyArgs", "PyCode_NewWithPosOnlyArgs"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [61, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [63, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [32, 4, 1, "c.PyConfig", "PyConfig"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [33, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [33, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [31, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [31, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [63, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [63, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [63, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [63, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [50, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [50, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [50, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [50, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [50, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [50, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [31, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [63, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [31, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [31, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [31, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [31, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [31, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [31, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [31, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [63, 4, 1, "c.PyFrameObject", "PyFrameObject"], [50, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [50, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [50, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [52, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [52, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [52, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [52, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [26, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [26, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [26, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [26, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [26, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [26, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [26, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [26, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [26, 2, 1, "c.PyFunction_New", "PyFunction_New"], [26, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [26, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [26, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [26, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [26, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [27, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [27, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [27, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [27, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [31, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [31, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [31, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [31, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [28, 4, 1, "c.PyGenObject", "PyGenObject"], [28, 2, 1, "c.PyGen_Check", "PyGen_Check"], [28, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [28, 2, 1, "c.PyGen_New", "PyGen_New"], [28, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [28, 0, 1, "c.PyGen_Type", "PyGen_Type"], [55, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [29, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [29, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [29, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [29, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [29, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [29, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [29, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [29, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [29, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [29, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [29, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [29, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [29, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [29, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [29, 2, 1, "c.PyImport_Import", "PyImport_Import"], [29, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [29, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [29, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [29, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [29, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [29, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [29, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [29, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [45, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [81, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [42, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [42, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [42, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [42, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [42, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [31, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [31, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [31, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [31, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [31, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [31, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [31, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [31, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [31, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [31, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [31, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [34, 2, 1, "c.PyIter_Check", "PyIter_Check"], [34, 2, 1, "c.PyIter_Next", "PyIter_Next"], [34, 2, 1, "c.PyIter_Send", "PyIter_Send"], [36, 4, 1, "c.PyListObject", "PyListObject"], [36, 2, 1, "c.PyList_Append", "PyList_Append"], [36, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [36, 2, 1, "c.PyList_Check", "PyList_Check"], [36, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [36, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [36, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [36, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [36, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [36, 2, 1, "c.PyList_Insert", "PyList_Insert"], [36, 2, 1, "c.PyList_New", "PyList_New"], [36, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [36, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [36, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [36, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [36, 2, 1, "c.PyList_Size", "PyList_Size"], [36, 2, 1, "c.PyList_Sort", "PyList_Sort"], [36, 0, 1, "c.PyList_Type", "PyList_Type"], [37, 4, 1, "c.PyLongObject", "PyLongObject"], [37, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [37, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [37, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [37, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [37, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [37, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [37, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [37, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [37, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [37, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [37, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [37, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [37, 2, 1, "c.PyLong_Check", "PyLong_Check"], [37, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [37, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [37, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [37, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [37, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [37, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [37, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [37, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [37, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [37, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [37, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [37, 0, 1, "c.PyLong_Type", "PyLong_Type"], [60, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [38, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [38, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [38, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [38, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [38, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [38, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [38, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [38, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [38, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [38, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [38, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [38, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [39, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [39, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [39, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [39, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [39, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [39, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [39, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [39, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [40, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [40, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [40, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [40, 2, 1, "c.PyMem_Del", "PyMem_Del"], [40, 2, 1, "c.PyMem_Free", "PyMem_Free"], [40, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [40, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [40, 2, 1, "c.PyMem_New", "PyMem_New"], [40, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [40, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [40, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [40, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [40, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [40, 2, 1, "c.PyMem_Resize", "PyMem_Resize"], [40, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [40, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [55, 4, 1, "c.PyMemberDef", "PyMemberDef"], [55, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [55, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [41, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [41, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [41, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [41, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [41, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [41, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [41, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [55, 4, 1, "c.PyMethodDef", "PyMethodDef"], [42, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [42, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [42, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [42, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [42, 2, 1, "c.PyMethod_New", "PyMethod_New"], [42, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [42, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [43, 4, 1, "c.PyModuleDef", "PyModuleDef"], [43, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [43, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [43, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [43, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [43, 2, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [43, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [43, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [43, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [43, 2, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [43, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [43, 2, 1, "c.PyModule_Check", "PyModule_Check"], [43, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [43, 2, 1, "c.PyModule_Create", "PyModule_Create"], [43, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [43, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [43, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [43, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [43, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [43, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [43, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [43, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [43, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [43, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [43, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [43, 2, 1, "c.PyModule_New", "PyModule_New"], [43, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [43, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [43, 0, 1, "c.PyModule_Type", "PyModule_Type"], [60, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [45, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [45, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [45, 2, 1, "c.PyNumber_And", "PyNumber_And"], [45, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [45, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [45, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [45, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [45, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [45, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [45, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [45, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [45, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [45, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [45, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [45, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [45, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [45, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [45, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [45, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [45, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [45, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [45, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [45, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [45, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [45, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [45, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [45, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [45, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [45, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [45, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [45, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [45, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [45, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [45, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [45, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [45, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [45, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [56, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [56, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [56, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [56, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [56, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [56, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [63, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [63, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [56, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [56, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [55, 4, 1, "c.PyObject", "PyObject"], [40, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [47, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [46, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [46, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [46, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [47, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [40, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [46, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [47, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [47, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [47, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [47, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [40, 2, 1, "c.PyObject_Free", "PyObject_Free"], [27, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [27, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [27, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [27, 2, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [27, 2, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [27, 2, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [27, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [27, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [47, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [47, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [47, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [47, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [47, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [40, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [47, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [47, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [47, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [47, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [55, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [55, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [47, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [47, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [47, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [47, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [27, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [47, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [47, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [47, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [47, 2, 1, "c.PyObject_Length", "PyObject_Length"], [47, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [40, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 2, 1, "c.PyObject_New", "PyObject_New"], [3, 2, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [47, 2, 1, "c.PyObject_Not", "PyObject_Not"], [47, 2, 1, "c.PyObject_Print", "PyObject_Print"], [40, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [47, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [47, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [47, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [40, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [47, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [47, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [47, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [47, 2, 1, "c.PyObject_Size", "PyObject_Size"], [47, 2, 1, "c.PyObject_Str", "PyObject_Str"], [47, 2, 1, "c.PyObject_Type", "PyObject_Type"], [47, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [55, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [32, 4, 1, "c.PyPreConfig", "PyPreConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [63, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [63, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [63, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [63, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [63, 2, 1, "c.PyRun_File", "PyRun_File"], [63, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [63, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [63, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [63, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [63, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [63, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [63, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [63, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [63, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [63, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [63, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [63, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [63, 2, 1, "c.PyRun_String", "PyRun_String"], [63, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [34, 4, 1, "c.PySendResult", "PySendResult"], [35, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [35, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [35, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [60, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [51, 2, 1, "c.PySequence_Check", "PySequence_Check"], [51, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [51, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [51, 2, 1, "c.PySequence_Count", "PySequence_Count"], [51, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [51, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [51, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [51, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [51, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [51, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [51, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [51, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [51, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [51, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [51, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [51, 2, 1, "c.PySequence_Index", "PySequence_Index"], [51, 2, 1, "c.PySequence_Length", "PySequence_Length"], [51, 2, 1, "c.PySequence_List", "PySequence_List"], [51, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [51, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [51, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [51, 2, 1, "c.PySequence_Size", "PySequence_Size"], [51, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [52, 4, 1, "c.PySetObject", "PySetObject"], [52, 2, 1, "c.PySet_Add", "PySet_Add"], [52, 2, 1, "c.PySet_Check", "PySet_Check"], [52, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [52, 2, 1, "c.PySet_Clear", "PySet_Clear"], [52, 2, 1, "c.PySet_Contains", "PySet_Contains"], [52, 2, 1, "c.PySet_Discard", "PySet_Discard"], [52, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [52, 2, 1, "c.PySet_New", "PySet_New"], [52, 2, 1, "c.PySet_Pop", "PySet_Pop"], [52, 2, 1, "c.PySet_Size", "PySet_Size"], [52, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [53, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [53, 2, 1, "c.PySlice_Check", "PySlice_Check"], [53, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [53, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [53, 2, 1, "c.PySlice_New", "PySlice_New"], [53, 0, 1, "c.PySlice_Type", "PySlice_Type"], [53, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [43, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [43, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [43, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [32, 4, 1, "c.PyStatus", "PyStatus"], [57, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [57, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [57, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [57, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [57, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [57, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [57, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [57, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [57, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [57, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [57, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [56, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [56, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [56, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [56, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [56, 2, 1, "c.PySys_Audit", "PySys_Audit"], [56, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [56, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [56, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [56, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [56, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [31, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [31, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [56, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [56, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [56, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [56, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [31, 4, 1, "c.PyThreadState", "PyThreadState"], [31, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [31, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [31, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [31, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [31, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [31, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [31, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [31, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [31, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [31, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [31, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [31, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [31, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [31, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [31, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [31, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [31, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [31, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [31, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [31, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [31, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [31, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [31, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [31, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [31, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [40, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [40, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [31, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [31, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [31, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [31, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [31, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [31, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [31, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [31, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [57, 4, 1, "c.PyTupleObject", "PyTupleObject"], [57, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [57, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [57, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [57, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [57, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [57, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [57, 2, 1, "c.PyTuple_New", "PyTuple_New"], [57, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [57, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [57, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [57, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [57, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [58, 4, 1, "c.PyTypeObject", "PyTypeObject"], [58, 2, 1, "c.PyType_Check", "PyType_Check"], [58, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [58, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [58, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [58, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [58, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [58, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [58, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [58, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [58, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [58, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [58, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [58, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [58, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [58, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [58, 2, 1, "c.PyType_Modified", "PyType_Modified"], [58, 2, 1, "c.PyType_Ready", "PyType_Ready"], [58, 4, 1, "c.PyType_Slot", "PyType_Slot"], [58, 4, 1, "c.PyType_Spec", "PyType_Spec"], [58, 0, 1, "c.PyType_Type", "PyType_Type"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_Create", "PyUnicodeEncodeError_Create"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [61, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_Create", "PyUnicodeTranslateError_Create"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [61, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [61, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [61, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [61, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [61, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [61, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [61, 2, 1, "c.PyUnicode_AS_DATA", "PyUnicode_AS_DATA"], [61, 2, 1, "c.PyUnicode_AS_UNICODE", "PyUnicode_AS_UNICODE"], [61, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [61, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [61, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [61, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [61, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [61, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [61, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [61, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [61, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [61, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [61, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [61, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [61, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [61, 2, 1, "c.PyUnicode_AsUnicode", "PyUnicode_AsUnicode"], [61, 2, 1, "c.PyUnicode_AsUnicodeAndSize", "PyUnicode_AsUnicodeAndSize"], [61, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [61, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [61, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [61, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [61, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [61, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [61, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [61, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [61, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [61, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [61, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [61, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [61, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [61, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [61, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [61, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [61, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [61, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [61, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [61, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [61, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [61, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [61, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [61, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [61, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [61, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [61, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [61, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [61, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [61, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [61, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [61, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [61, 2, 1, "c.PyUnicode_Encode", "PyUnicode_Encode"], [61, 2, 1, "c.PyUnicode_EncodeASCII", "PyUnicode_EncodeASCII"], [61, 2, 1, "c.PyUnicode_EncodeCharmap", "PyUnicode_EncodeCharmap"], [61, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [61, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [61, 2, 1, "c.PyUnicode_EncodeLatin1", "PyUnicode_EncodeLatin1"], [61, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [61, 2, 1, "c.PyUnicode_EncodeMBCS", "PyUnicode_EncodeMBCS"], [61, 2, 1, "c.PyUnicode_EncodeRawUnicodeEscape", "PyUnicode_EncodeRawUnicodeEscape"], [61, 2, 1, "c.PyUnicode_EncodeUTF16", "PyUnicode_EncodeUTF16"], [61, 2, 1, "c.PyUnicode_EncodeUTF32", "PyUnicode_EncodeUTF32"], [61, 2, 1, "c.PyUnicode_EncodeUTF7", "PyUnicode_EncodeUTF7"], [61, 2, 1, "c.PyUnicode_EncodeUTF8", "PyUnicode_EncodeUTF8"], [61, 2, 1, "c.PyUnicode_EncodeUnicodeEscape", "PyUnicode_EncodeUnicodeEscape"], [61, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [61, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [61, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [61, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [61, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [61, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [61, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [61, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [61, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [61, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [61, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [61, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [61, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [61, 2, 1, "c.PyUnicode_FromUnicode", "PyUnicode_FromUnicode"], [61, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [61, 2, 1, "c.PyUnicode_GET_DATA_SIZE", "PyUnicode_GET_DATA_SIZE"], [61, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [61, 2, 1, "c.PyUnicode_GET_SIZE", "PyUnicode_GET_SIZE"], [61, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [61, 2, 1, "c.PyUnicode_GetSize", "PyUnicode_GetSize"], [61, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [61, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [61, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [61, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [61, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [61, 1, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [61, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [61, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [61, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [61, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [61, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [61, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [61, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [61, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [61, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [61, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [61, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [61, 2, 1, "c.PyUnicode_TransformDecimalToASCII", "PyUnicode_TransformDecimalToASCII"], [61, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [61, 2, 1, "c.PyUnicode_TranslateCharmap", "PyUnicode_TranslateCharmap"], [61, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [61, 1, 1, "c.PyUnicode_WCHAR_KIND", "PyUnicode_WCHAR_KIND"], [61, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [61, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [55, 4, 1, "c.PyVarObject", "PyVarObject"], [55, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [64, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [64, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [64, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [64, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [64, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [64, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [64, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [32, 4, 1, "c.PyWideStringList", "PyWideStringList"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [33, 1, 1, "c.Py_ABS", "Py_ABS"], [31, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [56, 2, 1, "c.Py_AtExit", "Py_AtExit"], [31, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [31, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [63, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [31, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [33, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [49, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [63, 2, 1, "c.Py_CompileString", "Py_CompileString"], [63, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [63, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [63, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [49, 2, 1, "c.Py_DECREF", "Py_DECREF"], [33, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [31, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [49, 2, 1, "c.Py_DecRef", "Py_DecRef"], [56, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [31, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [31, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [53, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [56, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [31, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [56, 2, 1, "c.Py_Exit", "Py_Exit"], [6, 0, 1, "c.Py_False", "Py_False"], [56, 2, 1, "c.Py_FatalError", "Py_FatalError"], [56, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [31, 2, 1, "c.Py_Finalize", "Py_Finalize"], [31, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [31, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [33, 1, 1, "c.Py_GETENV", "Py_GETENV"], [59, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [59, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [32, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [31, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [31, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [31, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [31, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [31, 2, 1, "c.Py_GetPath", "Py_GetPath"], [31, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [31, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [31, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [31, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [31, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [31, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [31, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [49, 2, 1, "c.Py_INCREF", "Py_INCREF"], [55, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [31, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [49, 2, 1, "c.Py_IncRef", "Py_IncRef"], [31, 2, 1, "c.Py_Initialize", "Py_Initialize"], [31, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [32, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [31, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [31, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [55, 2, 1, "c.Py_Is", "Py_Is"], [55, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [31, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [55, 2, 1, "c.Py_IsNone", "Py_IsNone"], [55, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [31, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [54, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [31, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [31, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [33, 1, 1, "c.Py_MAX", "Py_MAX"], [33, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [33, 1, 1, "c.Py_MIN", "Py_MIN"], [63, 2, 1, "c.Py_Main", "Py_Main"], [31, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [49, 2, 1, "c.Py_NewRef", "Py_NewRef"], [31, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [31, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [44, 0, 1, "c.Py_None", "Py_None"], [47, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [31, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [32, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [32, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [32, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [31, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [55, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [44, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [47, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [32, 2, 1, "c.Py_RunMain", "Py_RunMain"], [55, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [55, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [55, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [55, 2, 1, "c.Py_SIZE", "Py_SIZE"], [33, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [31, 2, 1, "c.Py_SetPath", "Py_SetPath"], [31, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [31, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [31, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [55, 2, 1, "c.Py_TYPE", "Py_TYPE"], [6, 0, 1, "c.Py_True", "Py_True"], [61, 4, 1, "c.Py_UCS1", "Py_UCS1"], [61, 4, 1, "c.Py_UCS2", "Py_UCS2"], [61, 4, 1, "c.Py_UCS4", "Py_UCS4"], [31, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [61, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [61, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [61, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [61, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [61, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [61, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [61, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [61, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [61, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [61, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [61, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [61, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [61, 1, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [61, 1, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [61, 1, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [61, 1, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [61, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [61, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [61, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [61, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [61, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [61, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [33, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [33, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [31, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [27, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [31, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [49, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [49, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [49, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [63, 0, 1, "c.Py_eval_input", "Py_eval_input"], [63, 0, 1, "c.Py_file_input", "Py_file_input"], [43, 1, 1, "c.Py_mod_create", "Py_mod_create"], [43, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [63, 0, 1, "c.Py_single_input", "Py_single_input"], [33, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [31, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [31, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [31, 4, 1, "c.Py_tss_t", "Py_tss_t"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [55, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [55, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [31, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [31, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [31, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [57, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [32, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [29, 5, 1, "c._frozen", "_frozen"], [29, 5, 1, "c._inittab", "_inittab"], [60, 4, 1, "c.allocfunc", "allocfunc"], [60, 4, 1, "c.binaryfunc", "binaryfunc"], [60, 4, 1, "c.descrgetfunc", "descrgetfunc"], [60, 4, 1, "c.descrsetfunc", "descrsetfunc"], [60, 4, 1, "c.destructor", "destructor"], [60, 4, 1, "c.freefunc", "freefunc"], [60, 4, 1, "c.getattrfunc", "getattrfunc"], [60, 4, 1, "c.getattrofunc", "getattrofunc"], [60, 4, 1, "c.getbufferproc", "getbufferproc"], [60, 4, 1, "c.getiterfunc", "getiterfunc"], [60, 4, 1, "c.hashfunc", "hashfunc"], [60, 4, 1, "c.initproc", "initproc"], [27, 4, 1, "c.inquiry", "inquiry"], [60, 4, 1, "c.iternextfunc", "iternextfunc"], [60, 4, 1, "c.lenfunc", "lenfunc"], [60, 4, 1, "c.newfunc", "newfunc"], [60, 4, 1, "c.objobjargproc", "objobjargproc"], [60, 4, 1, "c.objobjproc", "objobjproc"], [60, 4, 1, "c.releasebufferproc", "releasebufferproc"], [60, 4, 1, "c.reprfunc", "reprfunc"], [60, 4, 1, "c.richcmpfunc", "richcmpfunc"], [60, 4, 1, "c.sendfunc", "sendfunc"], [60, 4, 1, "c.setattrfunc", "setattrfunc"], [60, 4, 1, "c.setattrofunc", "setattrofunc"], [60, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [60, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [60, 4, 1, "c.ternaryfunc", "ternaryfunc"], [27, 4, 1, "c.traverseproc", "traverseproc"], [60, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [27, 4, 1, "c.visitproc", "visitproc"], [220, 6, 1, "", "ArithmeticError"], [220, 6, 1, "", "AssertionError"], [220, 6, 1, "", "AttributeError"], [220, 6, 1, "", "BaseException"], [220, 6, 1, "", "BlockingIOError"], [220, 6, 1, "", "BrokenPipeError"], [220, 6, 1, "", "BufferError"], [220, 6, 1, "", "BytesWarning"], [220, 6, 1, "", "ChildProcessError"], [220, 6, 1, "", "ConnectionAbortedError"], [220, 6, 1, "", "ConnectionError"], [220, 6, 1, "", "ConnectionRefusedError"], [220, 6, 1, "", "ConnectionResetError"], [220, 6, 1, "", "DeprecationWarning"], [220, 6, 1, "", "EOFError"], [174, 9, 1, "", "Ellipsis"], [220, 6, 1, "", "EncodingWarning"], [220, 6, 1, "", "EnvironmentError"], [220, 6, 1, "", "Exception"], [174, 9, 1, "", "False"], [220, 6, 1, "", "FileExistsError"], [220, 6, 1, "", "FileNotFoundError"], [220, 6, 1, "", "FloatingPointError"], [220, 6, 1, "", "FutureWarning"], [220, 6, 1, "", "GeneratorExit"], [220, 6, 1, "", "IOError"], [220, 6, 1, "", "ImportError"], [220, 6, 1, "", "ImportWarning"], [220, 6, 1, "", "IndentationError"], [220, 6, 1, "", "IndexError"], [220, 6, 1, "", "InterruptedError"], [220, 6, 1, "", "IsADirectoryError"], [220, 6, 1, "", "KeyError"], [220, 6, 1, "", "KeyboardInterrupt"], [220, 6, 1, "", "LookupError"], [55, 9, 1, "", "METH_CLASS"], [55, 9, 1, "", "METH_COEXIST"], [55, 9, 1, "", "METH_FASTCALL"], [55, 9, 1, "", "METH_NOARGS"], [55, 9, 1, "", "METH_O"], [55, 9, 1, "", "METH_STATIC"], [55, 9, 1, "", "METH_VARARGS"], [220, 6, 1, "", "MemoryError"], [220, 6, 1, "", "ModuleNotFoundError"], [220, 6, 1, "", "NameError"], [174, 9, 1, "", "None"], [220, 6, 1, "", "NotADirectoryError"], [174, 9, 1, "", "NotImplemented"], [220, 6, 1, "", "NotImplementedError"], [220, 6, 1, "", "OSError"], [220, 6, 1, "", "OverflowError"], [220, 6, 1, "", "PendingDeprecationWarning"], [220, 6, 1, "", "PermissionError"], [220, 6, 1, "", "ProcessLookupError"], [60, 9, 1, "", "Py_TPFLAGS_BASETYPE"], [60, 9, 1, "", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_BYTES_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_DEFAULT"], [60, 9, 1, "", "Py_TPFLAGS_DICT_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [60, 9, 1, "", "Py_TPFLAGS_HAVE_FINALIZE"], [60, 9, 1, "", "Py_TPFLAGS_HAVE_GC"], [60, 9, 1, "", "Py_TPFLAGS_HAVE_VECTORCALL"], [60, 9, 1, "", "Py_TPFLAGS_HEAPTYPE"], [60, 9, 1, "", "Py_TPFLAGS_IMMUTABLETYPE"], [60, 9, 1, "", "Py_TPFLAGS_LIST_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_LONG_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_MAPPING"], [60, 9, 1, "", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [60, 9, 1, "", "Py_TPFLAGS_READY"], [60, 9, 1, "", "Py_TPFLAGS_READYING"], [60, 9, 1, "", "Py_TPFLAGS_SEQUENCE"], [60, 9, 1, "", "Py_TPFLAGS_TUPLE_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_TYPE_SUBCLASS"], [60, 9, 1, "", "Py_TPFLAGS_UNICODE_SUBCLASS"], [220, 6, 1, "", "RecursionError"], [220, 6, 1, "", "ReferenceError"], [220, 6, 1, "", "ResourceWarning"], [220, 6, 1, "", "RuntimeError"], [220, 6, 1, "", "RuntimeWarning"], [220, 6, 1, "", "StopAsyncIteration"], [220, 6, 1, "", "StopIteration"], [220, 6, 1, "", "SyntaxError"], [220, 6, 1, "", "SyntaxWarning"], [220, 6, 1, "", "SystemError"], [220, 6, 1, "", "SystemExit"], [220, 6, 1, "", "TabError"], [220, 6, 1, "", "TimeoutError"], [174, 9, 1, "", "True"], [220, 6, 1, "", "TypeError"], [220, 6, 1, "", "UnboundLocalError"], [220, 6, 1, "", "UnicodeDecodeError"], [220, 6, 1, "", "UnicodeEncodeError"], [220, 6, 1, "", "UnicodeError"], [220, 6, 1, "", "UnicodeTranslateError"], [220, 6, 1, "", "UnicodeWarning"], [220, 6, 1, "", "UserWarning"], [220, 6, 1, "", "ValueError"], [220, 6, 1, "", "Warning"], [220, 6, 1, "", "WindowsError"], [220, 6, 1, "", "ZeroDivisionError"], [436, 7, 1, "cached__", "__cached__"], [174, 9, 1, "debug__", "__debug__"], [436, 7, 1, "file__", "__file__"], [119, 10, 0, "-", "__future__"], [232, 11, 1, "import__", "__import__"], [436, 7, 1, "loader__", "__loader__"], [120, 10, 0, "-", "__main__"], [436, 7, 1, "name__", "__name__"], [436, 7, 1, "package__", "__package__"], [436, 7, 1, "path__", "__path__"], [436, 7, 1, "spec__", "__spec__"], [121, 10, 0, "-", "_thread"], [122, 10, 0, "-", "abc"], [232, 11, 1, "", "abs"], [123, 10, 0, "-", "aifc"], [232, 11, 1, "", "aiter"], [232, 11, 1, "", "all"], [232, 11, 1, "", "anext"], [232, 11, 1, "", "any"], [126, 10, 0, "-", "argparse"], [127, 10, 0, "-", "array"], [232, 11, 1, "", "ascii"], [128, 10, 0, "-", "ast"], [129, 10, 0, "-", "asynchat"], [130, 10, 0, "-", "asyncio"], [145, 10, 0, "-", "asyncore"], [146, 10, 0, "-", "atexit"], [147, 10, 0, "-", "audioop"], [149, 10, 0, "-", "base64"], [150, 10, 0, "-", "bdb"], [232, 11, 1, "", "bin"], [152, 10, 0, "-", "binascii"], [153, 10, 0, "-", "binhex"], [154, 10, 0, "-", "bisect"], [232, 12, 1, "", "bool"], [232, 11, 1, "", "breakpoint"], [155, 10, 0, "-", "builtins"], [351, 12, 1, "", "bytearray"], [351, 12, 1, "", "bytes"], [156, 10, 0, "-", "bz2"], [314, 10, 0, "-", "cProfile"], [157, 10, 0, "-", "calendar"], [232, 11, 1, "", "callable"], [158, 10, 0, "-", "cgi"], [159, 10, 0, "-", "cgitb"], [232, 11, 1, "", "chr"], [160, 10, 0, "-", "chunk"], [232, 11, 1, "", "classmethod"], [161, 10, 0, "-", "cmath"], [162, 10, 0, "-", "cmd"], [163, 10, 0, "-", "code"], [164, 10, 0, "-", "codecs"], [165, 10, 0, "-", "codeop"], [166, 10, 0, "-", "collections"], [168, 10, 0, "-", "colorsys"], [232, 11, 1, "", "compile"], [169, 10, 0, "-", "compileall"], [232, 12, 1, "", "complex"], [173, 10, 0, "-", "configparser"], [175, 10, 0, "-", "contextlib"], [176, 10, 0, "-", "contextvars"], [177, 10, 0, "-", "copy"], [178, 10, 0, "-", "copyreg"], [174, 9, 1, "", "copyright"], [70, 11, 1, "", "create_shortcut"], [174, 9, 1, "", "credits"], [179, 10, 0, "-", "crypt"], [181, 10, 0, "-", "csv"], [182, 10, 0, "-", "ctypes"], [183, 10, 0, "-", "curses"], [187, 10, 0, "-", "dataclasses"], [189, 10, 0, "-", "datetime"], [190, 10, 0, "-", "dbm"], [192, 10, 0, "-", "decimal"], [232, 11, 1, "", "delattr"], [351, 12, 1, "", "dict"], [196, 10, 0, "-", "difflib"], [232, 11, 1, "", "dir"], [70, 11, 1, "", "directory_created"], [197, 10, 0, "-", "dis"], [199, 10, 0, "-", "distutils"], [232, 11, 1, "", "divmod"], [200, 10, 0, "-", "doctest"], [201, 10, 0, "-", "email"], [217, 10, 0, "-", "ensurepip"], [218, 10, 0, "-", "enum"], [232, 11, 1, "", "enumerate"], [219, 10, 0, "-", "errno"], [232, 11, 1, "", "eval"], [232, 11, 1, "", "exec"], [174, 9, 1, "", "exit"], [221, 10, 0, "-", "faulthandler"], [222, 10, 0, "-", "fcntl"], [70, 11, 1, "", "file_created"], [223, 10, 0, "-", "filecmp"], [225, 10, 0, "-", "fileinput"], [232, 11, 1, "", "filter"], [232, 12, 1, "", "float"], [227, 10, 0, "-", "fnmatch"], [232, 11, 1, "", "format"], [228, 10, 0, "-", "fractions"], [351, 12, 1, "", "frozenset"], [230, 10, 0, "-", "ftplib"], [233, 10, 0, "-", "functools"], [234, 10, 0, "-", "gc"], [70, 11, 1, "", "get_special_folder_path"], [232, 11, 1, "", "getattr"], [235, 10, 0, "-", "getopt"], [236, 10, 0, "-", "getpass"], [237, 10, 0, "-", "gettext"], [238, 10, 0, "-", "glob"], [232, 11, 1, "", "globals"], [239, 10, 0, "-", "graphlib"], [240, 10, 0, "-", "grp"], [241, 10, 0, "-", "gzip"], [232, 11, 1, "", "hasattr"], [232, 11, 1, "", "hash"], [242, 10, 0, "-", "hashlib"], [243, 10, 0, "-", "heapq"], [232, 11, 1, "", "help"], [232, 11, 1, "", "hex"], [244, 10, 0, "-", "hmac"], [245, 10, 0, "-", "html"], [248, 10, 0, "-", "http"], [232, 11, 1, "", "id"], [254, 10, 0, "-", "idlelib"], [255, 10, 0, "-", "imaplib"], [256, 10, 0, "-", "imghdr"], [257, 10, 0, "-", "imp"], [258, 10, 0, "-", "importlib"], [232, 11, 1, "", "input"], [261, 10, 0, "-", "inspect"], [232, 12, 1, "", "int"], [264, 10, 0, "-", "io"], [265, 10, 0, "-", "ipaddress"], [232, 11, 1, "", "isinstance"], [232, 11, 1, "", "issubclass"], [232, 11, 1, "", "iter"], [267, 10, 0, "-", "itertools"], [268, 10, 0, "-", "json"], [269, 10, 0, "-", "keyword"], [232, 11, 1, "", "len"], [118, 10, 0, "-", "lib2to3"], [174, 9, 1, "", "license"], [271, 10, 0, "-", "linecache"], [351, 12, 1, "", "list"], [272, 10, 0, "-", "locale"], [232, 11, 1, "", "locals"], [273, 10, 0, "-", "logging"], [276, 10, 0, "-", "lzma"], [277, 10, 0, "-", "mailbox"], [278, 10, 0, "-", "mailcap"], [232, 11, 1, "", "map"], [280, 10, 0, "-", "marshal"], [281, 10, 0, "-", "math"], [232, 11, 1, "", "max"], [351, 12, 1, "", "memoryview"], [282, 10, 0, "-", "mimetypes"], [232, 11, 1, "", "min"], [284, 10, 0, "-", "mmap"], [285, 10, 0, "-", "modulefinder"], [287, 10, 0, "-", "msilib"], [288, 10, 0, "-", "msvcrt"], [289, 10, 0, "-", "multiprocessing"], [292, 10, 0, "-", "netrc"], [232, 11, 1, "", "next"], [293, 10, 0, "-", "nis"], [294, 10, 0, "-", "nntplib"], [295, 10, 0, "-", "numbers"], [232, 12, 1, "", "object"], [232, 11, 1, "", "oct"], [232, 11, 1, "", "open"], [297, 10, 0, "-", "operator"], [298, 10, 0, "-", "optparse"], [232, 11, 1, "", "ord"], [299, 10, 0, "-", "os"], [301, 10, 0, "-", "ossaudiodev"], [302, 10, 0, "-", "pathlib"], [303, 10, 0, "-", "pdb"], [305, 10, 0, "-", "pickle"], [306, 10, 0, "-", "pickletools"], [307, 10, 0, "-", "pipes"], [308, 10, 0, "-", "pkgutil"], [309, 10, 0, "-", "platform"], [310, 10, 0, "-", "plistlib"], [311, 10, 0, "-", "poplib"], [312, 10, 0, "-", "posix"], [232, 11, 1, "", "pow"], [313, 10, 0, "-", "pprint"], [232, 11, 1, "", "print"], [314, 10, 0, "-", "profile"], [232, 12, 1, "", "property"], [314, 10, 0, "-", "pstats"], [315, 10, 0, "-", "pty"], [316, 10, 0, "-", "pwd"], [317, 10, 0, "-", "py_compile"], [318, 10, 0, "-", "pyclbr"], [319, 10, 0, "-", "pydoc"], [322, 10, 0, "-", "queue"], [174, 9, 1, "", "quit"], [323, 10, 0, "-", "quopri"], [324, 10, 0, "-", "random"], [351, 12, 1, "", "range"], [325, 10, 0, "-", "re"], [326, 10, 0, "-", "readline"], [232, 11, 1, "", "repr"], [327, 10, 0, "-", "reprlib"], [328, 10, 0, "-", "resource"], [232, 11, 1, "", "reversed"], [329, 10, 0, "-", "rlcompleter"], [232, 11, 1, "", "round"], [330, 10, 0, "-", "runpy"], [331, 10, 0, "-", "sched"], [332, 10, 0, "-", "secrets"], [334, 10, 0, "-", "select"], [335, 10, 0, "-", "selectors"], [351, 12, 1, "", "set"], [232, 11, 1, "", "setattr"], [336, 10, 0, "-", "shelve"], [337, 10, 0, "-", "shlex"], [338, 10, 0, "-", "shutil"], [339, 10, 0, "-", "signal"], [340, 10, 0, "-", "site"], [232, 12, 1, "", "slice"], [341, 10, 0, "-", "smtpd"], [342, 10, 0, "-", "smtplib"], [343, 10, 0, "-", "sndhdr"], [344, 10, 0, "-", "socket"], [345, 10, 0, "-", "socketserver"], [232, 11, 1, "", "sorted"], [346, 10, 0, "-", "spwd"], [347, 10, 0, "-", "sqlite3"], [348, 10, 0, "-", "ssl"], [349, 10, 0, "-", "stat"], [232, 11, 1, "", "staticmethod"], [350, 10, 0, "-", "statistics"], [351, 12, 1, "", "str"], [352, 10, 0, "-", "string"], [353, 10, 0, "-", "stringprep"], [354, 10, 0, "-", "struct"], [355, 10, 0, "-", "subprocess"], [232, 11, 1, "", "sum"], [356, 10, 0, "-", "sunau"], [232, 12, 1, "", "super"], [358, 10, 0, "-", "symtable"], [359, 10, 0, "-", "sys"], [360, 10, 0, "-", "sysconfig"], [361, 10, 0, "-", "syslog"], [362, 10, 0, "-", "tabnanny"], [363, 10, 0, "-", "tarfile"], [364, 10, 0, "-", "telnetlib"], [365, 10, 0, "-", "tempfile"], [366, 10, 0, "-", "termios"], [367, 10, 0, "-", "test"], [369, 10, 0, "-", "textwrap"], [370, 10, 0, "-", "threading"], [371, 10, 0, "-", "time"], [372, 10, 0, "-", "timeit"], [374, 10, 0, "-", "tkinter"], [382, 10, 0, "-", "token"], [383, 10, 0, "-", "tokenize"], [384, 10, 0, "-", "trace"], [385, 10, 0, "-", "traceback"], [386, 10, 0, "-", "tracemalloc"], [387, 10, 0, "-", "tty"], [351, 12, 1, "", "tuple"], [388, 10, 0, "-", "turtle"], [388, 10, 0, "-", "turtledemo"], [232, 12, 1, "", "type"], [389, 10, 0, "-", "types"], [390, 10, 0, "-", "typing"], [391, 10, 0, "-", "unicodedata"], [392, 10, 0, "-", "unittest"], [396, 10, 0, "-", "urllib"], [401, 10, 0, "-", "uu"], [402, 10, 0, "-", "uuid"], [232, 11, 1, "", "vars"], [403, 10, 0, "-", "venv"], [404, 10, 0, "-", "warnings"], [405, 10, 0, "-", "wave"], [406, 10, 0, "-", "weakref"], [407, 10, 0, "-", "webbrowser"], [409, 10, 0, "-", "winreg"], [410, 10, 0, "-", "winsound"], [411, 10, 0, "-", "wsgiref"], [412, 10, 0, "-", "xdrlib"], [413, 10, 0, "-", "xml"], [232, 11, 1, "", "zip"], [425, 10, 0, "-", "zipapp"], [426, 10, 0, "-", "zipfile"], [427, 10, 0, "-", "zipimport"], [428, 10, 0, "-", "zlib"], [429, 10, 0, "-", "zoneinfo"], [303, 13, 1, "pdbcommand-0", "!"], [459, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [460, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [460, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [460, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [460, 14, 1, "cmdoption-2", "--enable-framework"], [460, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [460, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [460, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [460, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [460, 14, 1, "cmdoption-1", "--enable-universalsdk"], [459, 14, 1, "cmdoption-help", "--help"], [459, 14, 1, "cmdoption-version", "--version"], [460, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [460, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [460, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [460, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [460, 14, 1, "cmdoption-0", "--with-cxx-main"], [460, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [460, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [460, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [460, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [460, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [460, 14, 1, "cmdoption-with-libc", "--with-libc"], [460, 14, 1, "cmdoption-with-libm", "--with-libm"], [460, 14, 1, "cmdoption-with-libs", "--with-libs"], [460, 14, 1, "cmdoption-with-lto", "--with-lto"], [460, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [460, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [460, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [460, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [460, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [460, 14, 1, "cmdoption-with-readline", "--with-readline"], [460, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [460, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [460, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [460, 14, 1, "cmdoption-with-system-ffi", "--with-system-ffi"], [460, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [460, 14, 1, "cmdoption-with-tcltk-includes", "--with-tcltk-includes"], [460, 14, 1, "cmdoption-with-tcltk-libs", "--with-tcltk-libs"], [460, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [460, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [460, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [460, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [460, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [460, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [460, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [460, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [460, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [460, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [460, 14, 1, "cmdoption-without-readline", "--without-readline"], [460, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [459, 14, 1, "cmdoption-0", "-?"], [459, 14, 1, "cmdoption-B", "-B"], [459, 14, 1, "cmdoption-E", "-E"], [459, 14, 1, "cmdoption-I", "-I"], [459, 14, 1, "cmdoption-J", "-J"], [459, 14, 1, "cmdoption-O", "-O"], [459, 14, 1, "cmdoption-OO", "-OO"], [459, 14, 1, "cmdoption-R", "-R"], [459, 14, 1, "cmdoption-S", "-S"], [459, 14, 1, "cmdoption-V", "-V"], [459, 14, 1, "cmdoption-W", "-W"], [459, 14, 1, "cmdoption-X", "-X"], [459, 14, 1, "cmdoption-b", "-b"], [459, 14, 1, "cmdoption-c", "-c"], [459, 14, 1, "cmdoption-d", "-d"], [459, 14, 1, "cmdoption-h", "-h"], [459, 14, 1, "cmdoption-i", "-i"], [459, 14, 1, "cmdoption-m", "-m"], [459, 14, 1, "cmdoption-q", "-q"], [459, 14, 1, "cmdoption-s", "-s"], [459, 14, 1, "cmdoption-u", "-u"], [459, 14, 1, "cmdoption-1", "-v"], [459, 14, 1, "cmdoption-x", "-x"], [460, 15, 1, "-", "BASECFLAGS"], [460, 15, 1, "-", "BASECPPFLAGS"], [197, 16, 1, "-", "BEFORE_ASYNC_WITH"], [197, 16, 1, "-", "BINARY_ADD"], [197, 16, 1, "-", "BINARY_AND"], [197, 16, 1, "-", "BINARY_FLOOR_DIVIDE"], [197, 16, 1, "-", "BINARY_LSHIFT"], [197, 16, 1, "-", "BINARY_MATRIX_MULTIPLY"], [197, 16, 1, "-", "BINARY_MODULO"], [197, 16, 1, "-", "BINARY_MULTIPLY"], [197, 16, 1, "-", "BINARY_OR"], [197, 16, 1, "-", "BINARY_POWER"], [197, 16, 1, "-", "BINARY_RSHIFT"], [197, 16, 1, "-", "BINARY_SUBSCR"], [197, 16, 1, "-", "BINARY_SUBTRACT"], [197, 16, 1, "-", "BINARY_TRUE_DIVIDE"], [197, 16, 1, "-", "BINARY_XOR"], [460, 15, 1, "-", "BLDSHARED"], [197, 16, 1, "-", "BUILD_CONST_KEY_MAP"], [197, 16, 1, "-", "BUILD_LIST"], [197, 16, 1, "-", "BUILD_MAP"], [197, 16, 1, "-", "BUILD_SET"], [197, 16, 1, "-", "BUILD_SLICE"], [197, 16, 1, "-", "BUILD_STRING"], [197, 16, 1, "-", "BUILD_TUPLE"], [197, 16, 1, "-", "CALL_FUNCTION"], [197, 16, 1, "-", "CALL_FUNCTION_EX"], [197, 16, 1, "-", "CALL_FUNCTION_KW"], [197, 16, 1, "-", "CALL_METHOD"], [460, 15, 1, "-", "CC"], [460, 15, 1, "-", "CCSHARED"], [460, 15, 1, "-", "CFLAGS"], [460, 15, 1, "-", "CFLAGSFORSHARED"], [460, 15, 1, "-", "CFLAGS_ALIASING"], [460, 15, 1, "-", "CFLAGS_NODIST"], [197, 16, 1, "-", "COMPARE_OP"], [460, 15, 1, "-", "CONFIGURE_CFLAGS"], [460, 15, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [460, 15, 1, "-", "CONFIGURE_CPPFLAGS"], [460, 15, 1, "-", "CONFIGURE_LDFLAGS"], [460, 15, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [197, 16, 1, "-", "CONTAINS_OP"], [197, 16, 1, "-", "COPY_DICT_WITHOUT_KEYS"], [460, 15, 1, "-", "CPPFLAGS"], [460, 15, 1, "-", "CXX"], [197, 16, 1, "-", "DELETE_ATTR"], [197, 16, 1, "-", "DELETE_DEREF"], [197, 16, 1, "-", "DELETE_FAST"], [197, 16, 1, "-", "DELETE_GLOBAL"], [197, 16, 1, "-", "DELETE_NAME"], [197, 16, 1, "-", "DELETE_SUBSCR"], [197, 16, 1, "-", "DICT_MERGE"], [197, 16, 1, "-", "DICT_UPDATE"], [197, 16, 1, "-", "DUP_TOP"], [197, 16, 1, "-", "DUP_TOP_TWO"], [197, 16, 1, "-", "END_ASYNC_FOR"], [197, 16, 1, "-", "EXTENDED_ARG"], [460, 15, 1, "-", "EXTRA_CFLAGS"], [197, 16, 1, "-", "FORMAT_VALUE"], [197, 16, 1, "-", "FOR_ITER"], [197, 16, 1, "-", "GEN_START"], [197, 16, 1, "-", "GET_AITER"], [197, 16, 1, "-", "GET_ANEXT"], [197, 16, 1, "-", "GET_AWAITABLE"], [197, 16, 1, "-", "GET_ITER"], [197, 16, 1, "-", "GET_LEN"], [197, 16, 1, "-", "GET_YIELD_FROM_ITER"], [197, 16, 1, "-", "HAVE_ARGUMENT"], [197, 16, 1, "-", "IMPORT_FROM"], [197, 16, 1, "-", "IMPORT_NAME"], [197, 16, 1, "-", "IMPORT_STAR"], [197, 16, 1, "-", "INPLACE_ADD"], [197, 16, 1, "-", "INPLACE_AND"], [197, 16, 1, "-", "INPLACE_FLOOR_DIVIDE"], [197, 16, 1, "-", "INPLACE_LSHIFT"], [197, 16, 1, "-", "INPLACE_MATRIX_MULTIPLY"], [197, 16, 1, "-", "INPLACE_MODULO"], [197, 16, 1, "-", "INPLACE_MULTIPLY"], [197, 16, 1, "-", "INPLACE_OR"], [197, 16, 1, "-", "INPLACE_POWER"], [197, 16, 1, "-", "INPLACE_RSHIFT"], [197, 16, 1, "-", "INPLACE_SUBTRACT"], [197, 16, 1, "-", "INPLACE_TRUE_DIVIDE"], [197, 16, 1, "-", "INPLACE_XOR"], [197, 16, 1, "-", "IS_OP"], [197, 16, 1, "-", "JUMP_ABSOLUTE"], [197, 16, 1, "-", "JUMP_FORWARD"], [197, 16, 1, "-", "JUMP_IF_FALSE_OR_POP"], [197, 16, 1, "-", "JUMP_IF_NOT_EXC_MATCH"], [197, 16, 1, "-", "JUMP_IF_TRUE_OR_POP"], [460, 15, 1, "-", "LDFLAGS"], [460, 15, 1, "-", "LDFLAGS_NODIST"], [460, 15, 1, "-", "LDSHARED"], [460, 15, 1, "-", "LIBS"], [460, 15, 1, "-", "LINKCC"], [197, 16, 1, "-", "LIST_APPEND"], [197, 16, 1, "-", "LIST_EXTEND"], [197, 16, 1, "-", "LIST_TO_TUPLE"], [197, 16, 1, "-", "LOAD_ASSERTION_ERROR"], [197, 16, 1, "-", "LOAD_ATTR"], [197, 16, 1, "-", "LOAD_BUILD_CLASS"], [197, 16, 1, "-", "LOAD_CLASSDEREF"], [197, 16, 1, "-", "LOAD_CLOSURE"], [197, 16, 1, "-", "LOAD_CONST"], [197, 16, 1, "-", "LOAD_DEREF"], [197, 16, 1, "-", "LOAD_FAST"], [197, 16, 1, "-", "LOAD_GLOBAL"], [197, 16, 1, "-", "LOAD_METHOD"], [197, 16, 1, "-", "LOAD_NAME"], [460, 15, 1, "-", "MAINCC"], [197, 16, 1, "-", "MAKE_FUNCTION"], [197, 16, 1, "-", "MAP_ADD"], [197, 16, 1, "-", "MATCH_CLASS"], [197, 16, 1, "-", "MATCH_KEYS"], [197, 16, 1, "-", "MATCH_MAPPING"], [197, 16, 1, "-", "MATCH_SEQUENCE"], [197, 16, 1, "-", "NOP"], [460, 15, 1, "-", "OPT"], [197, 16, 1, "-", "POP_BLOCK"], [197, 16, 1, "-", "POP_EXCEPT"], [197, 16, 1, "-", "POP_JUMP_IF_FALSE"], [197, 16, 1, "-", "POP_JUMP_IF_TRUE"], [197, 16, 1, "-", "POP_TOP"], [197, 16, 1, "-", "PRINT_EXPR"], [460, 15, 1, "-", "PROFILE_TASK"], [460, 15, 1, "-", "PURIFY"], [459, 15, 1, "-", "PYTHONASYNCIODEBUG"], [459, 15, 1, "-", "PYTHONBREAKPOINT"], [459, 15, 1, "-", "PYTHONCASEOK"], [459, 15, 1, "-", "PYTHONCOERCECLOCALE"], [459, 15, 1, "-", "PYTHONDEBUG"], [459, 15, 1, "-", "PYTHONDEVMODE"], [459, 15, 1, "-", "PYTHONDONTWRITEBYTECODE"], [459, 15, 1, "-", "PYTHONDUMPREFS"], [459, 15, 1, "-", "PYTHONEXECUTABLE"], [459, 15, 1, "-", "PYTHONFAULTHANDLER"], [459, 15, 1, "-", "PYTHONHASHSEED"], [459, 15, 1, "-", "PYTHONHOME"], [459, 15, 1, "-", "PYTHONINSPECT"], [459, 15, 1, "-", "PYTHONINTMAXSTRDIGITS"], [459, 15, 1, "-", "PYTHONIOENCODING"], [459, 15, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [459, 15, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [459, 15, 1, "-", "PYTHONMALLOC"], [459, 15, 1, "-", "PYTHONMALLOCSTATS"], [459, 15, 1, "-", "PYTHONNOUSERSITE"], [459, 15, 1, "-", "PYTHONOPTIMIZE"], [459, 15, 1, "-", "PYTHONPATH"], [459, 15, 1, "-", "PYTHONPLATLIBDIR"], [459, 15, 1, "-", "PYTHONPROFILEIMPORTTIME"], [459, 15, 1, "-", "PYTHONPYCACHEPREFIX"], [459, 15, 1, "-", "PYTHONSTARTUP"], [459, 15, 1, "-", "PYTHONTHREADDEBUG"], [459, 15, 1, "-", "PYTHONTRACEMALLOC"], [429, 15, 1, "-", "PYTHONTZPATH"], [459, 15, 1, "-", "PYTHONUNBUFFERED"], [459, 15, 1, "-", "PYTHONUSERBASE"], [459, 15, 1, "-", "PYTHONUTF8"], [459, 15, 1, "-", "PYTHONVERBOSE"], [459, 15, 1, "-", "PYTHONWARNDEFAULTENCODING"], [459, 15, 1, "-", "PYTHONWARNINGS"], [460, 15, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [460, 15, 1, "-", "PY_CFLAGS"], [460, 15, 1, "-", "PY_CFLAGS_NODIST"], [460, 15, 1, "-", "PY_CORE_CFLAGS"], [460, 15, 1, "-", "PY_CORE_LDFLAGS"], [460, 15, 1, "-", "PY_CPPFLAGS"], [460, 15, 1, "-", "PY_LDFLAGS"], [460, 15, 1, "-", "PY_LDFLAGS_NODIST"], [460, 15, 1, "-", "PY_STDMODULE_CFLAGS"], [197, 16, 1, "-", "RAISE_VARARGS"], [197, 16, 1, "-", "RERAISE"], [197, 16, 1, "-", "RETURN_VALUE"], [197, 16, 1, "-", "ROT_FOUR"], [197, 16, 1, "-", "ROT_N"], [197, 16, 1, "-", "ROT_THREE"], [197, 16, 1, "-", "ROT_TWO"], [197, 16, 1, "-", "SETUP_ANNOTATIONS"], [197, 16, 1, "-", "SETUP_ASYNC_WITH"], [197, 16, 1, "-", "SETUP_FINALLY"], [197, 16, 1, "-", "SETUP_WITH"], [197, 16, 1, "-", "SET_ADD"], [197, 16, 1, "-", "SET_UPDATE"], [197, 16, 1, "-", "STORE_ATTR"], [197, 16, 1, "-", "STORE_DEREF"], [197, 16, 1, "-", "STORE_FAST"], [197, 16, 1, "-", "STORE_GLOBAL"], [197, 16, 1, "-", "STORE_NAME"], [197, 16, 1, "-", "STORE_SUBSCR"], [197, 16, 1, "-", "UNARY_INVERT"], [197, 16, 1, "-", "UNARY_NEGATIVE"], [197, 16, 1, "-", "UNARY_NOT"], [197, 16, 1, "-", "UNARY_POSITIVE"], [197, 16, 1, "-", "UNPACK_EX"], [197, 16, 1, "-", "UNPACK_SEQUENCE"], [197, 16, 1, "-", "WITH_EXCEPT_START"], [197, 16, 1, "-", "YIELD_FROM"], [197, 16, 1, "-", "YIELD_VALUE"], [303, 13, 1, "-", "alias"], [118, 17, 1, "to3fixer-apply", "apply"], [303, 13, 1, "-", "args"], [118, 17, 1, "to3fixer-asserts", "asserts"], [118, 17, 1, "to3fixer-basestring", "basestring"], [303, 13, 1, "-", "break"], [118, 17, 1, "to3fixer-buffer", "buffer"], [303, 13, 1, "-", "clear"], [303, 13, 1, "-", "commands"], [303, 13, 1, "-", "condition"], [303, 13, 1, "-", "continue"], [303, 13, 1, "-", "debug"], [118, 17, 1, "to3fixer-dict", "dict"], [303, 13, 1, "-", "disable"], [303, 13, 1, "-", "display"], [303, 13, 1, "-", "down"], [303, 13, 1, "-", "enable"], [118, 17, 1, "to3fixer-except", "except"], [118, 17, 1, "to3fixer-exec", "exec"], [118, 17, 1, "to3fixer-execfile", "execfile"], [118, 17, 1, "to3fixer-exitfunc", "exitfunc"], [118, 17, 1, "to3fixer-filter", "filter"], [118, 17, 1, "to3fixer-funcattrs", "funcattrs"], [118, 17, 1, "to3fixer-future", "future"], [118, 17, 1, "to3fixer-getcwdu", "getcwdu"], [118, 17, 1, "to3fixer-has_key", "has_key"], [303, 13, 1, "-", "help"], [118, 17, 1, "to3fixer-idioms", "idioms"], [303, 13, 1, "-", "ignore"], [118, 17, 1, "to3fixer-import", "import"], [118, 17, 1, "to3fixer-imports", "imports"], [118, 17, 1, "to3fixer-imports2", "imports2"], [118, 17, 1, "to3fixer-input", "input"], [303, 13, 1, "-", "interact"], [118, 17, 1, "to3fixer-intern", "intern"], [118, 17, 1, "to3fixer-isinstance", "isinstance"], [118, 17, 1, "to3fixer-itertools", "itertools"], [118, 17, 1, "to3fixer-itertools_imports", "itertools_imports"], [303, 13, 1, "-", "jump"], [303, 13, 1, "-", "list"], [303, 13, 1, "-", "ll"], [118, 17, 1, "to3fixer-long", "long"], [118, 17, 1, "to3fixer-map", "map"], [118, 17, 1, "to3fixer-metaclass", "metaclass"], [118, 17, 1, "to3fixer-methodattrs", "methodattrs"], [118, 17, 1, "to3fixer-ne", "ne"], [118, 17, 1, "to3fixer-next", "next"], [303, 13, 1, "-", "next"], [118, 17, 1, "to3fixer-nonzero", "nonzero"], [118, 17, 1, "to3fixer-numliterals", "numliterals"], [118, 17, 1, "to3fixer-operator", "operator"], [303, 13, 1, "-", "p"], [118, 17, 1, "to3fixer-paren", "paren"], [303, 13, 1, "-", "pp"], [118, 17, 1, "to3fixer-print", "print"], [303, 13, 1, "-", "quit"], [118, 17, 1, "to3fixer-raise", "raise"], [118, 17, 1, "to3fixer-raw_input", "raw_input"], [118, 17, 1, "to3fixer-reduce", "reduce"], [118, 17, 1, "to3fixer-reload", "reload"], [118, 17, 1, "to3fixer-renames", "renames"], [118, 17, 1, "to3fixer-repr", "repr"], [303, 13, 1, "-", "restart"], [303, 13, 1, "-", "return"], [303, 13, 1, "-", "retval"], [303, 13, 1, "-", "run"], [118, 17, 1, "to3fixer-set_literal", "set_literal"], [303, 13, 1, "-", "source"], [118, 17, 1, "to3fixer-standarderror", "standarderror"], [303, 13, 1, "-", "step"], [118, 17, 1, "to3fixer-sys_exc", "sys_exc"], [303, 13, 1, "-", "tbreak"], [118, 17, 1, "to3fixer-throw", "throw"], [118, 17, 1, "to3fixer-tuple_params", "tuple_params"], [118, 17, 1, "to3fixer-types", "types"], [303, 13, 1, "-", "unalias"], [303, 13, 1, "-", "undisplay"], [118, 17, 1, "to3fixer-unicode", "unicode"], [303, 13, 1, "-", "until"], [303, 13, 1, "-", "up"], [118, 17, 1, "to3fixer-urllib", "urllib"], [303, 13, 1, "-", "whatis"], [303, 13, 1, "-", "where"], [118, 17, 1, "to3fixer-ws_comma", "ws_comma"], [118, 17, 1, "to3fixer-xrange", "xrange"], [118, 17, 1, "to3fixer-xreadlines", "xreadlines"], [118, 17, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[34, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[52, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[52, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[60, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [60, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [60, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [60, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[60, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [60, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCallIter_New": [[35, 3, 1, "c.PyCallIter_New", "callable"], [35, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_New": [[13, 3, 1, "c.PyCode_New", "argcount"], [13, 3, 1, "c.PyCode_New", "cellvars"], [13, 3, 1, "c.PyCode_New", "code"], [13, 3, 1, "c.PyCode_New", "consts"], [13, 3, 1, "c.PyCode_New", "filename"], [13, 3, 1, "c.PyCode_New", "firstlineno"], [13, 3, 1, "c.PyCode_New", "flags"], [13, 3, 1, "c.PyCode_New", "freevars"], [13, 3, 1, "c.PyCode_New", "kwonlyargcount"], [13, 3, 1, "c.PyCode_New", "lnotab"], [13, 3, 1, "c.PyCode_New", "name"], [13, 3, 1, "c.PyCode_New", "names"], [13, 3, 1, "c.PyCode_New", "nlocals"], [13, 3, 1, "c.PyCode_New", "stacksize"], [13, 3, 1, "c.PyCode_New", "varnames"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCode_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "lnotab"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyCode_NewWithPosOnlyArgs", "varnames"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[63, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [63, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[32, 2, 1, "c.PyConfig.PyConfig_Clear", "PyConfig_Clear"], [32, 2, 1, "c.PyConfig.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [32, 2, 1, "c.PyConfig.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [32, 2, 1, "c.PyConfig.PyConfig_Read", "PyConfig_Read"], [32, 2, 1, "c.PyConfig.PyConfig_SetArgv", "PyConfig_SetArgv"], [32, 2, 1, "c.PyConfig.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [32, 2, 1, "c.PyConfig.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [32, 2, 1, "c.PyConfig.PyConfig_SetString", "PyConfig_SetString"], [32, 2, 1, "c.PyConfig.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [32, 0, 1, "c.PyConfig.argv", "argv"], [32, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [32, 0, 1, "c.PyConfig.base_executable", "base_executable"], [32, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [32, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [32, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [32, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [32, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [32, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [32, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [32, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [32, 0, 1, "c.PyConfig.executable", "executable"], [32, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [32, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [32, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [32, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [32, 0, 1, "c.PyConfig.home", "home"], [32, 0, 1, "c.PyConfig.import_time", "import_time"], [32, 0, 1, "c.PyConfig.inspect", "inspect"], [32, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [32, 0, 1, "c.PyConfig.interactive", "interactive"], [32, 0, 1, "c.PyConfig.isolated", "isolated"], [32, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [32, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [32, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [32, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [32, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [32, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [32, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [32, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [32, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [32, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [32, 0, 1, "c.PyConfig.prefix", "prefix"], [32, 0, 1, "c.PyConfig.program_name", "program_name"], [32, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [32, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [32, 0, 1, "c.PyConfig.quiet", "quiet"], [32, 0, 1, "c.PyConfig.run_command", "run_command"], [32, 0, 1, "c.PyConfig.run_filename", "run_filename"], [32, 0, 1, "c.PyConfig.run_module", "run_module"], [32, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [32, 0, 1, "c.PyConfig.site_import", "site_import"], [32, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [32, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [32, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [32, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [32, 0, 1, "c.PyConfig.use_environment", "use_environment"], [32, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [32, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [32, 0, 1, "c.PyConfig.verbose", "verbose"], [32, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [32, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [32, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [32, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig.PyConfig_Clear": [[32, 3, 1, "c.PyConfig.PyConfig_Clear", "config"]], "PyConfig.PyConfig_InitIsolatedConfig": [[32, 3, 1, "c.PyConfig.PyConfig_InitIsolatedConfig", "config"]], "PyConfig.PyConfig_InitPythonConfig": [[32, 3, 1, "c.PyConfig.PyConfig_InitPythonConfig", "config"]], "PyConfig.PyConfig_Read": [[32, 3, 1, "c.PyConfig.PyConfig_Read", "config"]], "PyConfig.PyConfig_SetArgv": [[32, 3, 1, "c.PyConfig.PyConfig_SetArgv", "argc"], [32, 3, 1, "c.PyConfig.PyConfig_SetArgv", "argv"], [32, 3, 1, "c.PyConfig.PyConfig_SetArgv", "config"]], "PyConfig.PyConfig_SetBytesArgv": [[32, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "argc"], [32, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "argv"], [32, 3, 1, "c.PyConfig.PyConfig_SetBytesArgv", "config"]], "PyConfig.PyConfig_SetBytesString": [[32, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "config"], [32, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "config_str"], [32, 3, 1, "c.PyConfig.PyConfig_SetBytesString", "str"]], "PyConfig.PyConfig_SetString": [[32, 3, 1, "c.PyConfig.PyConfig_SetString", "config"], [32, 3, 1, "c.PyConfig.PyConfig_SetString", "config_str"], [32, 3, 1, "c.PyConfig.PyConfig_SetString", "str"]], "PyConfig.PyConfig_SetWideStringList": [[32, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "config"], [32, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "items"], [32, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "length"], [32, 3, 1, "c.PyConfig.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[31, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[63, 3, 1, "c.PyEval_EvalCode", "co"], [63, 3, 1, "c.PyEval_EvalCode", "globals"], [63, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[63, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [63, 3, 1, "c.PyEval_EvalCodeEx", "args"], [63, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [63, 3, 1, "c.PyEval_EvalCodeEx", "co"], [63, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [63, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [63, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [63, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [63, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [63, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [63, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[63, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[63, 3, 1, "c.PyEval_EvalFrameEx", "f"], [63, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[50, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[50, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[63, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[31, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[31, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[31, 3, 1, "c.PyEval_SetProfile", "func"], [31, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetTrace": [[31, 3, 1, "c.PyEval_SetTrace", "func"], [31, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFrame_GetBack": [[50, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetCode": [[50, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetLineNumber": [[50, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrozenSet_Check": [[52, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[52, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[52, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_Check": [[26, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_GetAnnotations": [[26, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[26, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[26, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[26, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[26, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[26, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[26, 3, 1, "c.PyFunction_New", "code"], [26, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[26, 3, 1, "c.PyFunction_NewWithQualName", "code"], [26, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [26, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[26, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [26, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[26, 3, 1, "c.PyFunction_SetClosure", "closure"], [26, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[26, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [26, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyGen_Check": [[28, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[28, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[28, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[28, 3, 1, "c.PyGen_NewWithQualName", "frame"], [28, 3, 1, "c.PyGen_NewWithQualName", "name"], [28, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyImport_AddModule": [[29, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[29, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[29, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [29, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[29, 3, 1, "c.PyImport_ExecCodeModule", "co"], [29, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[29, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [29, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [29, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[29, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [29, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [29, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [29, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[29, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [29, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [29, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [29, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[29, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[29, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[29, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[29, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[29, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[29, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[29, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[29, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [29, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [29, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [29, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[29, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [29, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [29, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [29, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [29, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[29, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [29, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [29, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [29, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [29, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[29, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[29, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[45, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[42, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[42, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[42, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[42, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterState_Clear": [[31, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[31, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[31, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[31, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[31, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[31, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[34, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[34, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[34, 3, 1, "c.PyIter_Send", "arg"], [34, 3, 1, "c.PyIter_Send", "iter"], [34, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[36, 3, 1, "c.PyList_Append", "item"], [36, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[36, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[36, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[36, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[36, 3, 1, "c.PyList_GET_ITEM", "i"], [36, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[36, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[36, 3, 1, "c.PyList_GetItem", "index"], [36, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[36, 3, 1, "c.PyList_GetSlice", "high"], [36, 3, 1, "c.PyList_GetSlice", "list"], [36, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[36, 3, 1, "c.PyList_Insert", "index"], [36, 3, 1, "c.PyList_Insert", "item"], [36, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[36, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[36, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[36, 3, 1, "c.PyList_SET_ITEM", "i"], [36, 3, 1, "c.PyList_SET_ITEM", "list"], [36, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[36, 3, 1, "c.PyList_SetItem", "index"], [36, 3, 1, "c.PyList_SetItem", "item"], [36, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[36, 3, 1, "c.PyList_SetSlice", "high"], [36, 3, 1, "c.PyList_SetSlice", "itemlist"], [36, 3, 1, "c.PyList_SetSlice", "list"], [36, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[36, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[36, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[37, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[37, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[37, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [37, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[37, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[37, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [37, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[37, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[37, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[37, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[37, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[37, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[37, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[37, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[37, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[37, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[37, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[37, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[37, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[37, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[37, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[37, 3, 1, "c.PyLong_FromString", "base"], [37, 3, 1, "c.PyLong_FromString", "pend"], [37, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[37, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [37, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[37, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[37, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[37, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[60, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [60, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [60, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[38, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[38, 3, 1, "c.PyMapping_DelItem", "key"], [38, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[38, 3, 1, "c.PyMapping_DelItemString", "key"], [38, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[38, 3, 1, "c.PyMapping_GetItemString", "key"], [38, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[38, 3, 1, "c.PyMapping_HasKey", "key"], [38, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[38, 3, 1, "c.PyMapping_HasKeyString", "key"], [38, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[38, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[38, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[38, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[38, 3, 1, "c.PyMapping_SetItemString", "key"], [38, 3, 1, "c.PyMapping_SetItemString", "o"], [38, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[38, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[38, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[39, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[39, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[39, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[39, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [39, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[39, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[39, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [39, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [39, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[39, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [39, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [39, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[39, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [39, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMemAllocatorDomain": [[40, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [40, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [40, 1, 1, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"]], "PyMem_Calloc": [[40, 3, 1, "c.PyMem_Calloc", "elsize"], [40, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[40, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[40, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[40, 3, 1, "c.PyMem_GetAllocator", "allocator"], [40, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[40, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_New": [[40, 3, 1, "c.PyMem_New", "n"]], "PyMem_RawCalloc": [[40, 3, 1, "c.PyMem_RawCalloc", "elsize"], [40, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[40, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[40, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[40, 3, 1, "c.PyMem_RawRealloc", "n"], [40, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[40, 3, 1, "c.PyMem_Realloc", "n"], [40, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_Resize": [[40, 3, 1, "c.PyMem_Resize", "n"], [40, 3, 1, "c.PyMem_Resize", "p"]], "PyMem_SetAllocator": [[40, 3, 1, "c.PyMem_SetAllocator", "allocator"], [40, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMember_GetOne": [[55, 3, 1, "c.PyMember_GetOne", "m"], [55, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[55, 3, 1, "c.PyMember_SetOne", "m"], [55, 3, 1, "c.PyMember_SetOne", "o"], [55, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[41, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[41, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[41, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [41, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [41, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[41, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[41, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[41, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[41, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [41, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [41, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethod_Check": [[42, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[42, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[42, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[42, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[42, 3, 1, "c.PyMethod_New", "func"], [42, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[42, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[43, 0, 1, "c.PyModuleDef.m_base", "m_base"], [43, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [43, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [43, 0, 1, "c.PyModuleDef.m_free", "m_free"], [43, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [43, 0, 1, "c.PyModuleDef.m_name", "m_name"], [43, 0, 1, "c.PyModuleDef.m_size", "m_size"], [43, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [43, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[43, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[43, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[43, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [43, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[43, 3, 1, "c.PyModule_AddFunctions", "functions"], [43, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[43, 3, 1, "c.PyModule_AddIntConstant", "module"], [43, 3, 1, "c.PyModule_AddIntConstant", "name"], [43, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddIntMacro": [[43, 3, 1, "c.PyModule_AddIntMacro", "module"]], "PyModule_AddObject": [[43, 3, 1, "c.PyModule_AddObject", "module"], [43, 3, 1, "c.PyModule_AddObject", "name"], [43, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[43, 3, 1, "c.PyModule_AddObjectRef", "module"], [43, 3, 1, "c.PyModule_AddObjectRef", "name"], [43, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[43, 3, 1, "c.PyModule_AddStringConstant", "module"], [43, 3, 1, "c.PyModule_AddStringConstant", "name"], [43, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddStringMacro": [[43, 3, 1, "c.PyModule_AddStringMacro", "module"]], "PyModule_AddType": [[43, 3, 1, "c.PyModule_AddType", "module"], [43, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[43, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[43, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[43, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[43, 3, 1, "c.PyModule_Create2", "def"], [43, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[43, 3, 1, "c.PyModule_ExecDef", "def"], [43, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[43, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [43, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[43, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [43, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [43, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[43, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[43, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[43, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[43, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[43, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[43, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[43, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[43, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[43, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[43, 3, 1, "c.PyModule_SetDocString", "docstring"], [43, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[60, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [60, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [60, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [60, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [60, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [60, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [60, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [60, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [60, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [60, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [60, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [60, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [60, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [60, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [60, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [60, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [60, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [60, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [60, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [60, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [60, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [60, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [60, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [60, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[45, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[45, 3, 1, "c.PyNumber_Add", "o1"], [45, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[45, 3, 1, "c.PyNumber_And", "o1"], [45, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[45, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [45, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[45, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[45, 3, 1, "c.PyNumber_Divmod", "o1"], [45, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[45, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[45, 3, 1, "c.PyNumber_FloorDivide", "o1"], [45, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[45, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [45, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[45, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [45, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[45, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [45, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[45, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [45, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[45, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [45, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[45, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [45, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[45, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [45, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[45, 3, 1, "c.PyNumber_InPlacePower", "o1"], [45, 3, 1, "c.PyNumber_InPlacePower", "o2"], [45, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[45, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [45, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[45, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [45, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[45, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [45, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[45, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [45, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[45, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [45, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[45, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[45, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[45, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[45, 3, 1, "c.PyNumber_Lshift", "o1"], [45, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[45, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [45, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[45, 3, 1, "c.PyNumber_Multiply", "o1"], [45, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[45, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[45, 3, 1, "c.PyNumber_Or", "o1"], [45, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[45, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[45, 3, 1, "c.PyNumber_Power", "o1"], [45, 3, 1, "c.PyNumber_Power", "o2"], [45, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[45, 3, 1, "c.PyNumber_Remainder", "o1"], [45, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[45, 3, 1, "c.PyNumber_Rshift", "o1"], [45, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[45, 3, 1, "c.PyNumber_Subtract", "o1"], [45, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[45, 3, 1, "c.PyNumber_ToBase", "base"], [45, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[45, 3, 1, "c.PyNumber_TrueDivide", "o1"], [45, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[45, 3, 1, "c.PyNumber_Xor", "o1"], [45, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[56, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[56, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[56, 3, 1, "c.PyOS_setsig", "h"], [56, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[60, 0, 1, "c.PyObject._ob_next", "_ob_next"], [60, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [60, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [60, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[47, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[46, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [46, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [46, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[46, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [46, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [46, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[46, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [46, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [46, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[47, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[40, 3, 1, "c.PyObject_Calloc", "elsize"], [40, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[46, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[47, 3, 1, "c.PyObject_DelAttr", "attr_name"], [47, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[47, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [47, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[47, 3, 1, "c.PyObject_DelItem", "key"], [47, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[47, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Free": [[40, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[27, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[27, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[27, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_New": [[27, 3, 1, "c.PyObject_GC_New", "type"]], "PyObject_GC_NewVar": [[27, 3, 1, "c.PyObject_GC_NewVar", "size"], [27, 3, 1, "c.PyObject_GC_NewVar", "type"]], "PyObject_GC_Resize": [[27, 3, 1, "c.PyObject_GC_Resize", "newsize"], [27, 3, 1, "c.PyObject_GC_Resize", "op"]], "PyObject_GC_Track": [[27, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[27, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[47, 3, 1, "c.PyObject_GenericGetAttr", "name"], [47, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[47, 3, 1, "c.PyObject_GenericGetDict", "context"], [47, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[47, 3, 1, "c.PyObject_GenericSetAttr", "name"], [47, 3, 1, "c.PyObject_GenericSetAttr", "o"], [47, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[47, 3, 1, "c.PyObject_GenericSetDict", "context"], [47, 3, 1, "c.PyObject_GenericSetDict", "o"], [47, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[47, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[40, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[47, 3, 1, "c.PyObject_GetAttr", "attr_name"], [47, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[47, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [47, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[47, 3, 1, "c.PyObject_GetItem", "key"], [47, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetIter": [[47, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_HasAttr": [[47, 3, 1, "c.PyObject_HasAttr", "attr_name"], [47, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[47, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [47, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[47, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[47, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[27, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[47, 3, 1, "c.PyObject_IsInstance", "cls"], [47, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[47, 3, 1, "c.PyObject_IsSubclass", "cls"], [47, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[47, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[47, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[47, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [47, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[40, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_New": [[3, 3, 1, "c.PyObject_New", "type"]], "PyObject_NewVar": [[3, 3, 1, "c.PyObject_NewVar", "size"], [3, 3, 1, "c.PyObject_NewVar", "type"]], "PyObject_Not": [[47, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[47, 3, 1, "c.PyObject_Print", "flags"], [47, 3, 1, "c.PyObject_Print", "fp"], [47, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[40, 3, 1, "c.PyObject_Realloc", "n"], [40, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[47, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[47, 3, 1, "c.PyObject_RichCompare", "o1"], [47, 3, 1, "c.PyObject_RichCompare", "o2"], [47, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[47, 3, 1, "c.PyObject_RichCompareBool", "o1"], [47, 3, 1, "c.PyObject_RichCompareBool", "o2"], [47, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[40, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[47, 3, 1, "c.PyObject_SetAttr", "attr_name"], [47, 3, 1, "c.PyObject_SetAttr", "o"], [47, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[47, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [47, 3, 1, "c.PyObject_SetAttrString", "o"], [47, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[47, 3, 1, "c.PyObject_SetItem", "key"], [47, 3, 1, "c.PyObject_SetItem", "o"], [47, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[47, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[47, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[47, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[47, 3, 1, "c.PyObject_TypeCheck", "o"], [47, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[32, 2, 1, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [32, 2, 1, "c.PyPreConfig.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [32, 0, 1, "c.PyPreConfig.allocator", "allocator"], [32, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [32, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [32, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [32, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [32, 0, 1, "c.PyPreConfig.isolated", "isolated"], [32, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [32, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [32, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [32, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig.PyPreConfig_InitIsolatedConfig": [[32, 3, 1, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig.PyPreConfig_InitPythonConfig": [[32, 3, 1, "c.PyPreConfig.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[63, 3, 1, "c.PyRun_AnyFile", "filename"], [63, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[63, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [63, 3, 1, "c.PyRun_AnyFileEx", "filename"], [63, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[63, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [63, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [63, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [63, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[63, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [63, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [63, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[63, 3, 1, "c.PyRun_File", "filename"], [63, 3, 1, "c.PyRun_File", "fp"], [63, 3, 1, "c.PyRun_File", "globals"], [63, 3, 1, "c.PyRun_File", "locals"], [63, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[63, 3, 1, "c.PyRun_FileEx", "closeit"], [63, 3, 1, "c.PyRun_FileEx", "filename"], [63, 3, 1, "c.PyRun_FileEx", "fp"], [63, 3, 1, "c.PyRun_FileEx", "globals"], [63, 3, 1, "c.PyRun_FileEx", "locals"], [63, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[63, 3, 1, "c.PyRun_FileExFlags", "closeit"], [63, 3, 1, "c.PyRun_FileExFlags", "filename"], [63, 3, 1, "c.PyRun_FileExFlags", "flags"], [63, 3, 1, "c.PyRun_FileExFlags", "fp"], [63, 3, 1, "c.PyRun_FileExFlags", "globals"], [63, 3, 1, "c.PyRun_FileExFlags", "locals"], [63, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[63, 3, 1, "c.PyRun_FileFlags", "filename"], [63, 3, 1, "c.PyRun_FileFlags", "flags"], [63, 3, 1, "c.PyRun_FileFlags", "fp"], [63, 3, 1, "c.PyRun_FileFlags", "globals"], [63, 3, 1, "c.PyRun_FileFlags", "locals"], [63, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[63, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [63, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[63, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [63, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [63, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[63, 3, 1, "c.PyRun_InteractiveOne", "filename"], [63, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[63, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [63, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [63, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[63, 3, 1, "c.PyRun_SimpleFile", "filename"], [63, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[63, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [63, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [63, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[63, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [63, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [63, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [63, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[63, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[63, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [63, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[63, 3, 1, "c.PyRun_String", "globals"], [63, 3, 1, "c.PyRun_String", "locals"], [63, 3, 1, "c.PyRun_String", "start"], [63, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[63, 3, 1, "c.PyRun_StringFlags", "flags"], [63, 3, 1, "c.PyRun_StringFlags", "globals"], [63, 3, 1, "c.PyRun_StringFlags", "locals"], [63, 3, 1, "c.PyRun_StringFlags", "start"], [63, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_New": [[35, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[60, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [60, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [60, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [60, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [60, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [60, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [60, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [60, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[51, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[51, 3, 1, "c.PySequence_Concat", "o1"], [51, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[51, 3, 1, "c.PySequence_Contains", "o"], [51, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[51, 3, 1, "c.PySequence_Count", "o"], [51, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[51, 3, 1, "c.PySequence_DelItem", "i"], [51, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[51, 3, 1, "c.PySequence_DelSlice", "i1"], [51, 3, 1, "c.PySequence_DelSlice", "i2"], [51, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[51, 3, 1, "c.PySequence_Fast", "m"], [51, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[51, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [51, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[51, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[51, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[51, 3, 1, "c.PySequence_GetItem", "i"], [51, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[51, 3, 1, "c.PySequence_GetSlice", "i1"], [51, 3, 1, "c.PySequence_GetSlice", "i2"], [51, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[51, 3, 1, "c.PySequence_ITEM", "i"], [51, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[51, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [51, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[51, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [51, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[51, 3, 1, "c.PySequence_Index", "o"], [51, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[51, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[51, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[51, 3, 1, "c.PySequence_Repeat", "count"], [51, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[51, 3, 1, "c.PySequence_SetItem", "i"], [51, 3, 1, "c.PySequence_SetItem", "o"], [51, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[51, 3, 1, "c.PySequence_SetSlice", "i1"], [51, 3, 1, "c.PySequence_SetSlice", "i2"], [51, 3, 1, "c.PySequence_SetSlice", "o"], [51, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[51, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[51, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[52, 3, 1, "c.PySet_Add", "key"], [52, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[52, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[52, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[52, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[52, 3, 1, "c.PySet_Contains", "anyset"], [52, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[52, 3, 1, "c.PySet_Discard", "key"], [52, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[52, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[52, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[52, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[52, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[53, 3, 1, "c.PySlice_AdjustIndices", "length"], [53, 3, 1, "c.PySlice_AdjustIndices", "start"], [53, 3, 1, "c.PySlice_AdjustIndices", "step"], [53, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[53, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[53, 3, 1, "c.PySlice_GetIndices", "length"], [53, 3, 1, "c.PySlice_GetIndices", "slice"], [53, 3, 1, "c.PySlice_GetIndices", "start"], [53, 3, 1, "c.PySlice_GetIndices", "step"], [53, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[53, 3, 1, "c.PySlice_GetIndicesEx", "length"], [53, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [53, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [53, 3, 1, "c.PySlice_GetIndicesEx", "start"], [53, 3, 1, "c.PySlice_GetIndicesEx", "step"], [53, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[53, 3, 1, "c.PySlice_New", "start"], [53, 3, 1, "c.PySlice_New", "step"], [53, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[53, 3, 1, "c.PySlice_Unpack", "slice"], [53, 3, 1, "c.PySlice_Unpack", "start"], [53, 3, 1, "c.PySlice_Unpack", "step"], [53, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[43, 3, 1, "c.PyState_AddModule", "def"], [43, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[43, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[43, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[32, 2, 1, "c.PyStatus.PyStatus_Error", "PyStatus_Error"], [32, 2, 1, "c.PyStatus.PyStatus_Exception", "PyStatus_Exception"], [32, 2, 1, "c.PyStatus.PyStatus_Exit", "PyStatus_Exit"], [32, 2, 1, "c.PyStatus.PyStatus_IsError", "PyStatus_IsError"], [32, 2, 1, "c.PyStatus.PyStatus_IsExit", "PyStatus_IsExit"], [32, 2, 1, "c.PyStatus.PyStatus_NoMemory", "PyStatus_NoMemory"], [32, 2, 1, "c.PyStatus.PyStatus_Ok", "PyStatus_Ok"], [32, 2, 1, "c.PyStatus.Py_ExitStatusException", "Py_ExitStatusException"], [32, 0, 1, "c.PyStatus.err_msg", "err_msg"], [32, 0, 1, "c.PyStatus.exitcode", "exitcode"], [32, 0, 1, "c.PyStatus.func", "func"]], "PyStatus.PyStatus_Error": [[32, 3, 1, "c.PyStatus.PyStatus_Error", "err_msg"]], "PyStatus.PyStatus_Exception": [[32, 3, 1, "c.PyStatus.PyStatus_Exception", "status"]], "PyStatus.PyStatus_Exit": [[32, 3, 1, "c.PyStatus.PyStatus_Exit", "exitcode"]], "PyStatus.PyStatus_IsError": [[32, 3, 1, "c.PyStatus.PyStatus_IsError", "status"]], "PyStatus.PyStatus_IsExit": [[32, 3, 1, "c.PyStatus.PyStatus_IsExit", "status"]], "PyStatus.Py_ExitStatusException": [[32, 3, 1, "c.PyStatus.Py_ExitStatusException", "status"]], "PyStructSequence_GET_ITEM": [[57, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [57, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[57, 3, 1, "c.PyStructSequence_GetItem", "p"], [57, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[57, 3, 1, "c.PyStructSequence_InitType", "desc"], [57, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[57, 3, 1, "c.PyStructSequence_InitType2", "desc"], [57, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[57, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[57, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[57, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [57, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [57, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[57, 3, 1, "c.PyStructSequence_SetItem", "o"], [57, 3, 1, "c.PyStructSequence_SetItem", "p"], [57, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[56, 3, 1, "c.PySys_AddAuditHook", "hook"], [56, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[56, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[56, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[56, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[56, 3, 1, "c.PySys_Audit", "event"], [56, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[56, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[56, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[56, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[31, 3, 1, "c.PySys_SetArgv", "argc"], [31, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[31, 3, 1, "c.PySys_SetArgvEx", "argc"], [31, 3, 1, "c.PySys_SetArgvEx", "argv"], [31, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[56, 3, 1, "c.PySys_SetObject", "name"], [56, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[56, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[56, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[56, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState_Clear": [[31, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[31, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_GetFrame": [[31, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[31, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[31, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_New": [[31, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[31, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[31, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [31, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[31, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[31, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[31, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[31, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[31, 3, 1, "c.PyThread_set_key_value", "key"], [31, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[31, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[31, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[31, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[31, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[31, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[31, 3, 1, "c.PyThread_tss_set", "key"], [31, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[40, 3, 1, "c.PyTraceMalloc_Track", "domain"], [40, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [40, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[40, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [40, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[57, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[57, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[57, 3, 1, "c.PyTuple_GET_ITEM", "p"], [57, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[57, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[57, 3, 1, "c.PyTuple_GetItem", "p"], [57, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[57, 3, 1, "c.PyTuple_GetSlice", "high"], [57, 3, 1, "c.PyTuple_GetSlice", "low"], [57, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[57, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[57, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[57, 3, 1, "c.PyTuple_SET_ITEM", "o"], [57, 3, 1, "c.PyTuple_SET_ITEM", "p"], [57, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[57, 3, 1, "c.PyTuple_SetItem", "o"], [57, 3, 1, "c.PyTuple_SetItem", "p"], [57, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[57, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[60, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [60, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [60, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [60, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [60, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [60, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [60, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [60, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [60, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [60, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [60, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [60, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [60, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [60, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [60, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [60, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [60, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [60, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [60, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [60, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [60, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [60, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [60, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [60, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [60, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [60, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [60, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [60, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [60, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [60, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [60, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [60, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [60, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [60, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [60, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [60, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [60, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [60, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [60, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [60, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [60, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [60, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [60, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [60, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [60, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [60, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [60, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [60, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyTypeObject.tp_richcompare": [[60, 1, 1, "c.PyTypeObject.tp_richcompare.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"]], "PyType_Check": [[58, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[58, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_FromModuleAndSpec": [[58, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [58, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [58, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[58, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[58, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [58, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[58, 3, 1, "c.PyType_GenericAlloc", "nitems"], [58, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[58, 3, 1, "c.PyType_GenericNew", "args"], [58, 3, 1, "c.PyType_GenericNew", "kwds"], [58, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetFlags": [[58, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[58, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleState": [[58, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetSlot": [[58, 3, 1, "c.PyType_GetSlot", "slot"], [58, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_HasFeature": [[58, 3, 1, "c.PyType_HasFeature", "feature"], [58, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[58, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[58, 3, 1, "c.PyType_IsSubtype", "a"], [58, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[58, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[58, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot.PyType_Slot": [[58, 0, 1, "c.PyType_Slot.PyType_Slot.pfunc", "pfunc"], [58, 0, 1, "c.PyType_Slot.PyType_Slot.slot", "slot"]], "PyType_Spec.PyType_Spec": [[58, 0, 1, "c.PyType_Spec.PyType_Spec.basicsize", "basicsize"], [58, 0, 1, "c.PyType_Spec.PyType_Spec.flags", "flags"], [58, 0, 1, "c.PyType_Spec.PyType_Spec.itemsize", "itemsize"], [58, 0, 1, "c.PyType_Spec.PyType_Spec.name", "name"], [58, 0, 1, "c.PyType_Spec.PyType_Spec.slots", "slots"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_Create": [[23, 3, 1, "c.PyUnicodeEncodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeEncodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeEncodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeEncodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeEncodeError_Create", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_Create": [[23, 3, 1, "c.PyUnicodeTranslateError_Create", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_Create", "length"], [23, 3, 1, "c.PyUnicodeTranslateError_Create", "object"], [23, 3, 1, "c.PyUnicodeTranslateError_Create", "reason"], [23, 3, 1, "c.PyUnicodeTranslateError_Create", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[61, 3, 1, "c.PyUnicode_1BYTE_DATA", "o"]], "PyUnicode_2BYTE_DATA": [[61, 3, 1, "c.PyUnicode_2BYTE_DATA", "o"]], "PyUnicode_4BYTE_DATA": [[61, 3, 1, "c.PyUnicode_4BYTE_DATA", "o"]], "PyUnicode_AS_DATA": [[61, 3, 1, "c.PyUnicode_AS_DATA", "o"]], "PyUnicode_AS_UNICODE": [[61, 3, 1, "c.PyUnicode_AS_UNICODE", "o"]], "PyUnicode_AsASCIIString": [[61, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[61, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [61, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[61, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [61, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [61, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[61, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[61, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[61, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[61, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [61, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [61, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [61, 3, 1, "c.PyUnicode_AsUCS4", "u"]], "PyUnicode_AsUCS4Copy": [[61, 3, 1, "c.PyUnicode_AsUCS4Copy", "u"]], "PyUnicode_AsUTF16String": [[61, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[61, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[61, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[61, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [61, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[61, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicode": [[61, 3, 1, "c.PyUnicode_AsUnicode", "unicode"]], "PyUnicode_AsUnicodeAndSize": [[61, 3, 1, "c.PyUnicode_AsUnicodeAndSize", "size"], [61, 3, 1, "c.PyUnicode_AsUnicodeAndSize", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[61, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[61, 3, 1, "c.PyUnicode_AsWideChar", "size"], [61, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [61, 3, 1, "c.PyUnicode_AsWideChar", "w"]], "PyUnicode_AsWideCharString": [[61, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [61, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[61, 3, 1, "c.PyUnicode_Check", "o"]], "PyUnicode_CheckExact": [[61, 3, 1, "c.PyUnicode_CheckExact", "o"]], "PyUnicode_Compare": [[61, 3, 1, "c.PyUnicode_Compare", "left"], [61, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[61, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [61, 3, 1, "c.PyUnicode_CompareWithASCIIString", "uni"]], "PyUnicode_Concat": [[61, 3, 1, "c.PyUnicode_Concat", "left"], [61, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[61, 3, 1, "c.PyUnicode_Contains", "container"], [61, 3, 1, "c.PyUnicode_Contains", "element"]], "PyUnicode_CopyCharacters": [[61, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [61, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [61, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [61, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [61, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[61, 3, 1, "c.PyUnicode_Count", "end"], [61, 3, 1, "c.PyUnicode_Count", "start"], [61, 3, 1, "c.PyUnicode_Count", "str"], [61, 3, 1, "c.PyUnicode_Count", "substr"]], "PyUnicode_DATA": [[61, 3, 1, "c.PyUnicode_DATA", "o"]], "PyUnicode_Decode": [[61, 3, 1, "c.PyUnicode_Decode", "encoding"], [61, 3, 1, "c.PyUnicode_Decode", "errors"], [61, 3, 1, "c.PyUnicode_Decode", "s"], [61, 3, 1, "c.PyUnicode_Decode", "size"]], "PyUnicode_DecodeASCII": [[61, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [61, 3, 1, "c.PyUnicode_DecodeASCII", "s"], [61, 3, 1, "c.PyUnicode_DecodeASCII", "size"]], "PyUnicode_DecodeCharmap": [[61, 3, 1, "c.PyUnicode_DecodeCharmap", "data"], [61, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [61, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [61, 3, 1, "c.PyUnicode_DecodeCharmap", "size"]], "PyUnicode_DecodeFSDefault": [[61, 3, 1, "c.PyUnicode_DecodeFSDefault", "s"]], "PyUnicode_DecodeFSDefaultAndSize": [[61, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "s"], [61, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"]], "PyUnicode_DecodeLatin1": [[61, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [61, 3, 1, "c.PyUnicode_DecodeLatin1", "s"], [61, 3, 1, "c.PyUnicode_DecodeLatin1", "size"]], "PyUnicode_DecodeLocale": [[61, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [61, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[61, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [61, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "len"], [61, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[61, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [61, 3, 1, "c.PyUnicode_DecodeMBCS", "s"], [61, 3, 1, "c.PyUnicode_DecodeMBCS", "size"]], "PyUnicode_DecodeMBCSStateful": [[61, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [61, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [61, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "s"], [61, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"]], "PyUnicode_DecodeRawUnicodeEscape": [[61, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [61, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "s"], [61, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"]], "PyUnicode_DecodeUTF16": [[61, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [61, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF16", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF16", "size"]], "PyUnicode_DecodeUTF16Stateful": [[61, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [61, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [61, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"]], "PyUnicode_DecodeUTF32": [[61, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [61, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF32", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF32", "size"]], "PyUnicode_DecodeUTF32Stateful": [[61, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [61, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [61, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"]], "PyUnicode_DecodeUTF7": [[61, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF7", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF7", "size"]], "PyUnicode_DecodeUTF7Stateful": [[61, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [61, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"]], "PyUnicode_DecodeUTF8": [[61, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF8", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF8", "size"]], "PyUnicode_DecodeUTF8Stateful": [[61, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [61, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "s"], [61, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"]], "PyUnicode_DecodeUnicodeEscape": [[61, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [61, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "s"], [61, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"]], "PyUnicode_Encode": [[61, 3, 1, "c.PyUnicode_Encode", "encoding"], [61, 3, 1, "c.PyUnicode_Encode", "errors"], [61, 3, 1, "c.PyUnicode_Encode", "s"], [61, 3, 1, "c.PyUnicode_Encode", "size"]], "PyUnicode_EncodeASCII": [[61, 3, 1, "c.PyUnicode_EncodeASCII", "errors"], [61, 3, 1, "c.PyUnicode_EncodeASCII", "s"], [61, 3, 1, "c.PyUnicode_EncodeASCII", "size"]], "PyUnicode_EncodeCharmap": [[61, 3, 1, "c.PyUnicode_EncodeCharmap", "errors"], [61, 3, 1, "c.PyUnicode_EncodeCharmap", "mapping"], [61, 3, 1, "c.PyUnicode_EncodeCharmap", "s"], [61, 3, 1, "c.PyUnicode_EncodeCharmap", "size"]], "PyUnicode_EncodeCodePage": [[61, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [61, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [61, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[61, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLatin1": [[61, 3, 1, "c.PyUnicode_EncodeLatin1", "errors"], [61, 3, 1, "c.PyUnicode_EncodeLatin1", "s"], [61, 3, 1, "c.PyUnicode_EncodeLatin1", "size"]], "PyUnicode_EncodeLocale": [[61, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [61, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_EncodeMBCS": [[61, 3, 1, "c.PyUnicode_EncodeMBCS", "errors"], [61, 3, 1, "c.PyUnicode_EncodeMBCS", "s"], [61, 3, 1, "c.PyUnicode_EncodeMBCS", "size"]], "PyUnicode_EncodeRawUnicodeEscape": [[61, 3, 1, "c.PyUnicode_EncodeRawUnicodeEscape", "s"], [61, 3, 1, "c.PyUnicode_EncodeRawUnicodeEscape", "size"]], "PyUnicode_EncodeUTF16": [[61, 3, 1, "c.PyUnicode_EncodeUTF16", "byteorder"], [61, 3, 1, "c.PyUnicode_EncodeUTF16", "errors"], [61, 3, 1, "c.PyUnicode_EncodeUTF16", "s"], [61, 3, 1, "c.PyUnicode_EncodeUTF16", "size"]], "PyUnicode_EncodeUTF32": [[61, 3, 1, "c.PyUnicode_EncodeUTF32", "byteorder"], [61, 3, 1, "c.PyUnicode_EncodeUTF32", "errors"], [61, 3, 1, "c.PyUnicode_EncodeUTF32", "s"], [61, 3, 1, "c.PyUnicode_EncodeUTF32", "size"]], "PyUnicode_EncodeUTF7": [[61, 3, 1, "c.PyUnicode_EncodeUTF7", "base64SetO"], [61, 3, 1, "c.PyUnicode_EncodeUTF7", "base64WhiteSpace"], [61, 3, 1, "c.PyUnicode_EncodeUTF7", "errors"], [61, 3, 1, "c.PyUnicode_EncodeUTF7", "s"], [61, 3, 1, "c.PyUnicode_EncodeUTF7", "size"]], "PyUnicode_EncodeUTF8": [[61, 3, 1, "c.PyUnicode_EncodeUTF8", "errors"], [61, 3, 1, "c.PyUnicode_EncodeUTF8", "s"], [61, 3, 1, "c.PyUnicode_EncodeUTF8", "size"]], "PyUnicode_EncodeUnicodeEscape": [[61, 3, 1, "c.PyUnicode_EncodeUnicodeEscape", "s"], [61, 3, 1, "c.PyUnicode_EncodeUnicodeEscape", "size"]], "PyUnicode_FSConverter": [[61, 3, 1, "c.PyUnicode_FSConverter", "obj"], [61, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[61, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [61, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[61, 3, 1, "c.PyUnicode_Fill", "fill_char"], [61, 3, 1, "c.PyUnicode_Fill", "length"], [61, 3, 1, "c.PyUnicode_Fill", "start"], [61, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[61, 3, 1, "c.PyUnicode_Find", "direction"], [61, 3, 1, "c.PyUnicode_Find", "end"], [61, 3, 1, "c.PyUnicode_Find", "start"], [61, 3, 1, "c.PyUnicode_Find", "str"], [61, 3, 1, "c.PyUnicode_Find", "substr"]], "PyUnicode_FindChar": [[61, 3, 1, "c.PyUnicode_FindChar", "ch"], [61, 3, 1, "c.PyUnicode_FindChar", "direction"], [61, 3, 1, "c.PyUnicode_FindChar", "end"], [61, 3, 1, "c.PyUnicode_FindChar", "start"], [61, 3, 1, "c.PyUnicode_FindChar", "str"]], "PyUnicode_Format": [[61, 3, 1, "c.PyUnicode_Format", "args"], [61, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[61, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [61, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [61, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[61, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[61, 3, 1, "c.PyUnicode_FromFormatV", "format"], [61, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[61, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [61, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [61, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[61, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[61, 3, 1, "c.PyUnicode_FromString", "u"]], "PyUnicode_FromStringAndSize": [[61, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [61, 3, 1, "c.PyUnicode_FromStringAndSize", "u"]], "PyUnicode_FromUnicode": [[61, 3, 1, "c.PyUnicode_FromUnicode", "size"], [61, 3, 1, "c.PyUnicode_FromUnicode", "u"]], "PyUnicode_FromWideChar": [[61, 3, 1, "c.PyUnicode_FromWideChar", "size"], [61, 3, 1, "c.PyUnicode_FromWideChar", "w"]], "PyUnicode_GET_DATA_SIZE": [[61, 3, 1, "c.PyUnicode_GET_DATA_SIZE", "o"]], "PyUnicode_GET_LENGTH": [[61, 3, 1, "c.PyUnicode_GET_LENGTH", "o"]], "PyUnicode_GET_SIZE": [[61, 3, 1, "c.PyUnicode_GET_SIZE", "o"]], "PyUnicode_GetLength": [[61, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_GetSize": [[61, 3, 1, "c.PyUnicode_GetSize", "unicode"]], "PyUnicode_InternFromString": [[61, 3, 1, "c.PyUnicode_InternFromString", "v"]], "PyUnicode_InternInPlace": [[61, 3, 1, "c.PyUnicode_InternInPlace", "string"]], "PyUnicode_IsIdentifier": [[61, 3, 1, "c.PyUnicode_IsIdentifier", "o"]], "PyUnicode_Join": [[61, 3, 1, "c.PyUnicode_Join", "separator"], [61, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[61, 3, 1, "c.PyUnicode_KIND", "o"]], "PyUnicode_New": [[61, 3, 1, "c.PyUnicode_New", "maxchar"], [61, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[61, 3, 1, "c.PyUnicode_READ", "data"], [61, 3, 1, "c.PyUnicode_READ", "index"], [61, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[61, 3, 1, "c.PyUnicode_READY", "o"]], "PyUnicode_READ_CHAR": [[61, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [61, 3, 1, "c.PyUnicode_READ_CHAR", "o"]], "PyUnicode_ReadChar": [[61, 3, 1, "c.PyUnicode_ReadChar", "index"], [61, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[61, 3, 1, "c.PyUnicode_Replace", "maxcount"], [61, 3, 1, "c.PyUnicode_Replace", "replstr"], [61, 3, 1, "c.PyUnicode_Replace", "str"], [61, 3, 1, "c.PyUnicode_Replace", "substr"]], "PyUnicode_RichCompare": [[61, 3, 1, "c.PyUnicode_RichCompare", "left"], [61, 3, 1, "c.PyUnicode_RichCompare", "op"], [61, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[61, 3, 1, "c.PyUnicode_Split", "maxsplit"], [61, 3, 1, "c.PyUnicode_Split", "s"], [61, 3, 1, "c.PyUnicode_Split", "sep"]], "PyUnicode_Splitlines": [[61, 3, 1, "c.PyUnicode_Splitlines", "keepend"], [61, 3, 1, "c.PyUnicode_Splitlines", "s"]], "PyUnicode_Substring": [[61, 3, 1, "c.PyUnicode_Substring", "end"], [61, 3, 1, "c.PyUnicode_Substring", "start"], [61, 3, 1, "c.PyUnicode_Substring", "str"]], "PyUnicode_Tailmatch": [[61, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [61, 3, 1, "c.PyUnicode_Tailmatch", "end"], [61, 3, 1, "c.PyUnicode_Tailmatch", "start"], [61, 3, 1, "c.PyUnicode_Tailmatch", "str"], [61, 3, 1, "c.PyUnicode_Tailmatch", "substr"]], "PyUnicode_TransformDecimalToASCII": [[61, 3, 1, "c.PyUnicode_TransformDecimalToASCII", "s"], [61, 3, 1, "c.PyUnicode_TransformDecimalToASCII", "size"]], "PyUnicode_Translate": [[61, 3, 1, "c.PyUnicode_Translate", "errors"], [61, 3, 1, "c.PyUnicode_Translate", "str"], [61, 3, 1, "c.PyUnicode_Translate", "table"]], "PyUnicode_TranslateCharmap": [[61, 3, 1, "c.PyUnicode_TranslateCharmap", "errors"], [61, 3, 1, "c.PyUnicode_TranslateCharmap", "mapping"], [61, 3, 1, "c.PyUnicode_TranslateCharmap", "s"], [61, 3, 1, "c.PyUnicode_TranslateCharmap", "size"]], "PyUnicode_WRITE": [[61, 3, 1, "c.PyUnicode_WRITE", "data"], [61, 3, 1, "c.PyUnicode_WRITE", "index"], [61, 3, 1, "c.PyUnicode_WRITE", "kind"], [61, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[61, 3, 1, "c.PyUnicode_WriteChar", "character"], [61, 3, 1, "c.PyUnicode_WriteChar", "index"], [61, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyVarObject": [[60, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_GET_OBJECT": [[64, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[64, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[64, 3, 1, "c.PyWeakref_NewProxy", "callback"], [64, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[64, 3, 1, "c.PyWeakref_NewRef", "callback"], [64, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[32, 2, 1, "c.PyWideStringList.PyWideStringList_Append", "PyWideStringList_Append"], [32, 2, 1, "c.PyWideStringList.PyWideStringList_Insert", "PyWideStringList_Insert"], [32, 0, 1, "c.PyWideStringList.items", "items"], [32, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList.PyWideStringList_Append": [[32, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "item"], [32, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "list"]], "PyWideStringList.PyWideStringList_Insert": [[32, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "index"], [32, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "item"], [32, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[31, 3, 1, "c.Py_AddPendingCall", "arg"], [31, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[56, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[63, 3, 1, "c.Py_BytesMain", "argc"], [63, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[49, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[63, 3, 1, "c.Py_CompileString", "filename"], [63, 3, 1, "c.Py_CompileString", "start"], [63, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[63, 3, 1, "c.Py_CompileStringExFlags", "filename"], [63, 3, 1, "c.Py_CompileStringExFlags", "flags"], [63, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [63, 3, 1, "c.Py_CompileStringExFlags", "start"], [63, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[63, 3, 1, "c.Py_CompileStringFlags", "filename"], [63, 3, 1, "c.Py_CompileStringFlags", "flags"], [63, 3, 1, "c.Py_CompileStringFlags", "start"], [63, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[63, 3, 1, "c.Py_CompileStringObject", "filename"], [63, 3, 1, "c.Py_CompileStringObject", "flags"], [63, 3, 1, "c.Py_CompileStringObject", "optimize"], [63, 3, 1, "c.Py_CompileStringObject", "start"], [63, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[49, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[49, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[56, 3, 1, "c.Py_DecodeLocale", "arg"], [56, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[56, 3, 1, "c.Py_EncodeLocale", "error_pos"], [56, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[31, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[56, 3, 1, "c.Py_Exit", "status"]], "Py_FatalError": [[56, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[56, 3, 1, "c.Py_FdIsInteractive", "filename"], [56, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[59, 3, 1, "c.Py_GenericAlias", "args"], [59, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[32, 3, 1, "c.Py_GetArgcArgv", "argc"], [32, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[49, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[55, 3, 1, "c.Py_IS_TYPE", "o"], [55, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[49, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[31, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[32, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[55, 3, 1, "c.Py_Is", "x"], [55, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[55, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[55, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[55, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[63, 3, 1, "c.Py_Main", "argc"], [63, 3, 1, "c.Py_Main", "argv"]], "Py_NewRef": [[49, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[32, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[32, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [32, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [32, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[32, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [32, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [32, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[55, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[55, 3, 1, "c.Py_SET_REFCNT", "o"], [55, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[55, 3, 1, "c.Py_SET_SIZE", "o"], [55, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[55, 3, 1, "c.Py_SET_TYPE", "o"], [55, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[55, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[31, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[31, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[31, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [31, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[55, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[61, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[61, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[61, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[61, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[61, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[61, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[61, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[61, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[61, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[61, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[61, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_TODECIMAL": [[61, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[61, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[61, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[61, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[61, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[61, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[27, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[49, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[49, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[49, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[43, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[43, 3, 1, "c.Py_mod_create.create_module", "def"], [43, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[43, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[43, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[31, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[31, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [31, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[57, 3, 1, "c._PyTuple_Resize", "newsize"], [57, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "BaseException": [[220, 7, 1, "", "args"], [220, 8, 1, "", "with_traceback"]], "BlockingIOError": [[220, 7, 1, "", "characters_written"]], "OSError": [[220, 7, 1, "", "errno"], [220, 7, 1, "", "filename"], [220, 7, 1, "", "filename2"], [220, 7, 1, "", "strerror"], [220, 7, 1, "", "winerror"]], "SyntaxError": [[220, 7, 1, "", "end_lineno"], [220, 7, 1, "", "end_offset"], [220, 7, 1, "", "filename"], [220, 7, 1, "", "lineno"], [220, 7, 1, "", "offset"], [220, 7, 1, "", "text"]], "SystemExit": [[220, 7, 1, "", "code"]], "UnicodeError": [[220, 7, 1, "", "encoding"], [220, 7, 1, "", "end"], [220, 7, 1, "", "object"], [220, 7, 1, "", "reason"], [220, 7, 1, "", "start"]], "_thread": [[121, 9, 1, "thread.LockType", "LockType"], [121, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [121, 11, 1, "thread.allocate_lock", "allocate_lock"], [121, 6, 1, "thread.error", "error"], [121, 11, 1, "thread.exit", "exit"], [121, 11, 1, "thread.get_ident", "get_ident"], [121, 11, 1, "thread.get_native_id", "get_native_id"], [121, 11, 1, "thread.interrupt_main", "interrupt_main"], [121, 11, 1, "thread.stack_size", "stack_size"], [121, 11, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[121, 8, 1, "thread.lock.acquire", "acquire"], [121, 8, 1, "thread.lock.locked", "locked"], [121, 8, 1, "thread.lock.release", "release"]], "abc": [[122, 12, 1, "", "ABC"], [122, 12, 1, "", "ABCMeta"], [122, 11, 1, "", "abstractclassmethod"], [122, 11, 1, "", "abstractmethod"], [122, 11, 1, "", "abstractproperty"], [122, 11, 1, "", "abstractstaticmethod"], [122, 11, 1, "", "get_cache_token"], [122, 11, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[122, 8, 1, "", "__subclasshook__"], [122, 8, 1, "", "register"]], "agen": [[434, 8, 1, "", "__anext__"], [434, 8, 1, "", "aclose"], [434, 8, 1, "", "asend"], [434, 8, 1, "", "athrow"]], "aifc.aifc": [[123, 8, 1, "", "aifc"], [123, 8, 1, "", "aiff"], [123, 8, 1, "", "close"], [123, 8, 1, "", "getcompname"], [123, 8, 1, "", "getcomptype"], [123, 8, 1, "", "getframerate"], [123, 8, 1, "", "getmark"], [123, 8, 1, "", "getmarkers"], [123, 8, 1, "", "getnchannels"], [123, 8, 1, "", "getnframes"], [123, 8, 1, "", "getparams"], [123, 8, 1, "", "getsampwidth"], [123, 8, 1, "", "readframes"], [123, 8, 1, "", "rewind"], [123, 8, 1, "", "setcomptype"], [123, 8, 1, "", "setframerate"], [123, 8, 1, "", "setmark"], [123, 8, 1, "", "setnchannels"], [123, 8, 1, "", "setnframes"], [123, 8, 1, "", "setparams"], [123, 8, 1, "", "setpos"], [123, 8, 1, "", "setsampwidth"], [123, 8, 1, "", "tell"], [123, 8, 1, "", "writeframes"], [123, 8, 1, "", "writeframesraw"]], "aifc": [[123, 11, 1, "", "open"]], "argparse": [[126, 12, 1, "", "Action"], [126, 12, 1, "", "ArgumentDefaultsHelpFormatter"], [126, 12, 1, "", "ArgumentParser"], [126, 12, 1, "", "FileType"], [126, 12, 1, "", "MetavarTypeHelpFormatter"], [126, 12, 1, "", "Namespace"], [126, 12, 1, "", "RawDescriptionHelpFormatter"], [126, 12, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[126, 8, 1, "", "add_argument"], [126, 8, 1, "", "add_argument_group"], [126, 8, 1, "", "add_mutually_exclusive_group"], [126, 8, 1, "", "add_subparsers"], [126, 8, 1, "", "convert_arg_line_to_args"], [126, 8, 1, "", "error"], [126, 8, 1, "", "exit"], [126, 8, 1, "", "format_help"], [126, 8, 1, "", "format_usage"], [126, 8, 1, "", "get_default"], [126, 8, 1, "", "parse_args"], [126, 8, 1, "", "parse_intermixed_args"], [126, 8, 1, "", "parse_known_args"], [126, 8, 1, "", "parse_known_intermixed_args"], [126, 8, 1, "", "print_help"], [126, 8, 1, "", "print_usage"], [126, 8, 1, "", "set_defaults"]], "array": [[127, 12, 1, "", "array"], [127, 9, 1, "", "typecodes"]], "array.array": [[127, 8, 1, "", "append"], [127, 8, 1, "", "buffer_info"], [127, 8, 1, "", "byteswap"], [127, 8, 1, "", "count"], [127, 8, 1, "", "extend"], [127, 8, 1, "", "frombytes"], [127, 8, 1, "", "fromfile"], [127, 8, 1, "", "fromlist"], [127, 8, 1, "", "fromunicode"], [127, 8, 1, "", "index"], [127, 8, 1, "", "insert"], [127, 7, 1, "", "itemsize"], [127, 8, 1, "", "pop"], [127, 8, 1, "", "remove"], [127, 8, 1, "", "reverse"], [127, 8, 1, "", "tobytes"], [127, 8, 1, "", "tofile"], [127, 8, 1, "", "tolist"], [127, 8, 1, "", "tounicode"], [127, 7, 1, "", "typecode"]], "ast": [[128, 12, 1, "", "AST"], [128, 12, 1, "", "Add"], [128, 12, 1, "", "And"], [128, 12, 1, "", "AnnAssign"], [128, 12, 1, "", "Assert"], [128, 12, 1, "", "Assign"], [128, 12, 1, "", "AsyncFor"], [128, 12, 1, "", "AsyncFunctionDef"], [128, 12, 1, "", "AsyncWith"], [128, 12, 1, "", "Attribute"], [128, 12, 1, "", "AugAssign"], [128, 12, 1, "", "Await"], [128, 12, 1, "", "BinOp"], [128, 12, 1, "", "BitAnd"], [128, 12, 1, "", "BitOr"], [128, 12, 1, "", "BitXor"], [128, 12, 1, "", "BoolOp"], [128, 12, 1, "", "Break"], [128, 12, 1, "", "Call"], [128, 12, 1, "", "ClassDef"], [128, 12, 1, "", "Compare"], [128, 12, 1, "", "Constant"], [128, 12, 1, "", "Continue"], [128, 12, 1, "", "Del"], [128, 12, 1, "", "Delete"], [128, 12, 1, "", "Dict"], [128, 12, 1, "", "DictComp"], [128, 12, 1, "", "Div"], [128, 12, 1, "", "Eq"], [128, 12, 1, "", "ExceptHandler"], [128, 12, 1, "", "Expr"], [128, 12, 1, "", "FloorDiv"], [128, 12, 1, "", "For"], [128, 12, 1, "", "FormattedValue"], [128, 12, 1, "", "FunctionDef"], [128, 12, 1, "", "GeneratorExp"], [128, 12, 1, "", "Global"], [128, 12, 1, "", "Gt"], [128, 12, 1, "", "GtE"], [128, 12, 1, "", "If"], [128, 12, 1, "", "IfExp"], [128, 12, 1, "", "Import"], [128, 12, 1, "", "ImportFrom"], [128, 12, 1, "", "In"], [128, 12, 1, "", "Invert"], [128, 12, 1, "", "Is"], [128, 12, 1, "", "IsNot"], [128, 12, 1, "", "JoinedStr"], [128, 12, 1, "", "LShift"], [128, 12, 1, "", "Lambda"], [128, 12, 1, "", "List"], [128, 12, 1, "", "ListComp"], [128, 12, 1, "", "Load"], [128, 12, 1, "", "Lt"], [128, 12, 1, "", "LtE"], [128, 12, 1, "", "MatMult"], [128, 12, 1, "", "Match"], [128, 12, 1, "", "MatchAs"], [128, 12, 1, "", "MatchClass"], [128, 12, 1, "", "MatchMapping"], [128, 12, 1, "", "MatchOr"], [128, 12, 1, "", "MatchSequence"], [128, 12, 1, "", "MatchSingleton"], [128, 12, 1, "", "MatchStar"], [128, 12, 1, "", "MatchValue"], [128, 12, 1, "", "Mod"], [128, 12, 1, "", "Mult"], [128, 12, 1, "", "Name"], [128, 12, 1, "", "NamedExpr"], [128, 12, 1, "", "NodeTransformer"], [128, 12, 1, "", "NodeVisitor"], [128, 12, 1, "", "Nonlocal"], [128, 12, 1, "", "Not"], [128, 12, 1, "", "NotEq"], [128, 12, 1, "", "NotIn"], [128, 12, 1, "", "Or"], [128, 12, 1, "", "Pass"], [128, 12, 1, "", "Pow"], [128, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [128, 9, 1, "", "PyCF_ONLY_AST"], [128, 9, 1, "", "PyCF_TYPE_COMMENTS"], [128, 12, 1, "", "RShift"], [128, 12, 1, "", "Raise"], [128, 12, 1, "", "Return"], [128, 12, 1, "", "Set"], [128, 12, 1, "", "SetComp"], [128, 12, 1, "", "Slice"], [128, 12, 1, "", "Starred"], [128, 12, 1, "", "Store"], [128, 12, 1, "", "Sub"], [128, 12, 1, "", "Subscript"], [128, 12, 1, "", "Try"], [128, 12, 1, "", "Tuple"], [128, 12, 1, "", "UAdd"], [128, 12, 1, "", "USub"], [128, 12, 1, "", "UnaryOp"], [128, 12, 1, "", "While"], [128, 12, 1, "", "With"], [128, 12, 1, "", "Yield"], [128, 12, 1, "", "YieldFrom"], [128, 12, 1, "", "alias"], [128, 12, 1, "", "arg"], [128, 12, 1, "", "arguments"], [128, 12, 1, "", "comprehension"], [128, 11, 1, "", "copy_location"], [128, 11, 1, "", "dump"], [128, 11, 1, "", "fix_missing_locations"], [128, 11, 1, "", "get_docstring"], [128, 11, 1, "", "get_source_segment"], [128, 11, 1, "", "increment_lineno"], [128, 11, 1, "", "iter_child_nodes"], [128, 11, 1, "", "iter_fields"], [128, 12, 1, "", "keyword"], [128, 11, 1, "", "literal_eval"], [128, 12, 1, "", "match_case"], [128, 11, 1, "", "parse"], [128, 11, 1, "", "unparse"], [128, 11, 1, "", "walk"], [128, 12, 1, "", "withitem"], [128, 14, 1, "cmdoption-ast-h", "--help"], [128, 14, 1, "cmdoption-ast-a", "--include-attributes"], [128, 14, 1, "cmdoption-ast-indent", "--indent"], [128, 14, 1, "cmdoption-ast-mode", "--mode"], [128, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [128, 14, 1, "cmdoption-ast-a", "-a"], [128, 14, 1, "cmdoption-ast-h", "-h"], [128, 14, 1, "cmdoption-ast-i", "-i"], [128, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[128, 7, 1, "", "_fields"], [128, 7, 1, "", "col_offset"], [128, 7, 1, "", "end_col_offset"], [128, 7, 1, "", "end_lineno"], [128, 7, 1, "", "lineno"]], "ast.Assign": [[128, 7, 1, "", "type_comment"]], "ast.For": [[128, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[128, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[128, 8, 1, "", "generic_visit"], [128, 8, 1, "", "visit"]], "ast.With": [[128, 7, 1, "", "type_comment"]], "ast.arg": [[128, 7, 1, "", "type_comment"]], "asynchat": [[129, 12, 1, "", "async_chat"]], "asynchat.async_chat": [[129, 9, 1, "", "ac_in_buffer_size"], [129, 9, 1, "", "ac_out_buffer_size"], [129, 8, 1, "", "close_when_done"], [129, 8, 1, "", "collect_incoming_data"], [129, 8, 1, "", "discard_buffers"], [129, 8, 1, "", "found_terminator"], [129, 8, 1, "", "get_terminator"], [129, 8, 1, "", "push"], [129, 8, 1, "", "push_with_producer"], [129, 8, 1, "", "set_terminator"]], "asyncio": [[138, 12, 1, "", "AbstractChildWatcher"], [133, 12, 1, "", "AbstractEventLoop"], [138, 12, 1, "", "AbstractEventLoopPolicy"], [139, 12, 1, "", "BaseProtocol"], [139, 12, 1, "", "BaseTransport"], [143, 12, 1, "", "BoundedSemaphore"], [139, 12, 1, "", "BufferedProtocol"], [134, 6, 1, "", "CancelledError"], [143, 12, 1, "", "Condition"], [139, 12, 1, "", "DatagramProtocol"], [139, 12, 1, "", "DatagramTransport"], [138, 12, 1, "", "DefaultEventLoopPolicy"], [143, 12, 1, "", "Event"], [138, 12, 1, "", "FastChildWatcher"], [135, 12, 1, "", "Future"], [133, 12, 1, "", "Handle"], [134, 6, 1, "", "IncompleteReadError"], [134, 6, 1, "", "InvalidStateError"], [140, 12, 1, "", "LifoQueue"], [134, 6, 1, "", "LimitOverrunError"], [143, 12, 1, "", "Lock"], [138, 12, 1, "", "MultiLoopChildWatcher"], [138, 12, 1, "", "PidfdChildWatcher"], [140, 12, 1, "", "PriorityQueue"], [133, 12, 1, "", "ProactorEventLoop"], [139, 12, 1, "", "Protocol"], [140, 12, 1, "", "Queue"], [140, 6, 1, "", "QueueEmpty"], [140, 6, 1, "", "QueueFull"], [139, 12, 1, "", "ReadTransport"], [138, 12, 1, "", "SafeChildWatcher"], [133, 12, 1, "", "SelectorEventLoop"], [143, 12, 1, "", "Semaphore"], [134, 6, 1, "", "SendfileNotAvailableError"], [133, 12, 1, "", "Server"], [141, 12, 1, "", "StreamReader"], [141, 12, 1, "", "StreamWriter"], [139, 12, 1, "", "SubprocessProtocol"], [139, 12, 1, "", "SubprocessTransport"], [144, 12, 1, "", "Task"], [138, 12, 1, "", "ThreadedChildWatcher"], [134, 6, 1, "", "TimeoutError"], [133, 12, 1, "", "TimerHandle"], [139, 12, 1, "", "Transport"], [138, 12, 1, "", "WindowsProactorEventLoopPolicy"], [138, 12, 1, "", "WindowsSelectorEventLoopPolicy"], [139, 12, 1, "", "WriteTransport"], [144, 11, 1, "", "all_tasks"], [144, 11, 1, "", "as_completed"], [144, 11, 1, "", "coroutine"], [142, 11, 1, "", "create_subprocess_exec"], [142, 11, 1, "", "create_subprocess_shell"], [144, 11, 1, "", "create_task"], [144, 11, 1, "", "current_task"], [135, 11, 1, "", "ensure_future"], [144, 11, 1, "", "gather"], [138, 11, 1, "", "get_child_watcher"], [133, 11, 1, "", "get_event_loop"], [138, 11, 1, "", "get_event_loop_policy"], [133, 11, 1, "", "get_running_loop"], [144, 11, 1, "", "iscoroutine"], [144, 11, 1, "", "iscoroutinefunction"], [135, 11, 1, "", "isfuture"], [133, 11, 1, "", "new_event_loop"], [141, 11, 1, "", "open_connection"], [141, 11, 1, "", "open_unix_connection"], [144, 11, 1, "", "run"], [144, 11, 1, "", "run_coroutine_threadsafe"], [138, 11, 1, "", "set_child_watcher"], [133, 11, 1, "", "set_event_loop"], [138, 11, 1, "", "set_event_loop_policy"], [144, 11, 1, "", "shield"], [144, 11, 1, "", "sleep"], [141, 11, 1, "", "start_server"], [141, 11, 1, "", "start_unix_server"], [144, 11, 1, "", "to_thread"], [144, 11, 1, "", "wait"], [144, 11, 1, "", "wait_for"], [135, 11, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[138, 8, 1, "", "add_child_handler"], [138, 8, 1, "", "attach_loop"], [138, 8, 1, "", "close"], [138, 8, 1, "", "is_active"], [138, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[138, 8, 1, "", "get_child_watcher"], [138, 8, 1, "", "get_event_loop"], [138, 8, 1, "", "new_event_loop"], [138, 8, 1, "", "set_child_watcher"], [138, 8, 1, "", "set_event_loop"]], "asyncio.BaseProtocol": [[139, 8, 1, "", "connection_lost"], [139, 8, 1, "", "connection_made"], [139, 8, 1, "", "pause_writing"], [139, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[139, 8, 1, "", "close"], [139, 8, 1, "", "get_extra_info"], [139, 8, 1, "", "get_protocol"], [139, 8, 1, "", "is_closing"], [139, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[139, 8, 1, "", "buffer_updated"], [139, 8, 1, "", "eof_received"], [139, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[143, 8, 1, "", "acquire"], [143, 8, 1, "", "locked"], [143, 8, 1, "", "notify"], [143, 8, 1, "", "notify_all"], [143, 8, 1, "", "release"], [143, 8, 1, "", "wait"], [143, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[139, 8, 1, "", "datagram_received"], [139, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[139, 8, 1, "", "abort"], [139, 8, 1, "", "sendto"]], "asyncio.Event": [[143, 8, 1, "", "clear"], [143, 8, 1, "", "is_set"], [143, 8, 1, "", "set"], [143, 8, 1, "", "wait"]], "asyncio.Future": [[135, 8, 1, "", "add_done_callback"], [135, 8, 1, "", "cancel"], [135, 8, 1, "", "cancelled"], [135, 8, 1, "", "done"], [135, 8, 1, "", "exception"], [135, 8, 1, "", "get_loop"], [135, 8, 1, "", "remove_done_callback"], [135, 8, 1, "", "result"], [135, 8, 1, "", "set_exception"], [135, 8, 1, "", "set_result"]], "asyncio.Handle": [[133, 8, 1, "", "cancel"], [133, 8, 1, "", "cancelled"]], "asyncio.IncompleteReadError": [[134, 7, 1, "", "expected"], [134, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[134, 7, 1, "", "consumed"]], "asyncio.Lock": [[143, 8, 1, "", "acquire"], [143, 8, 1, "", "locked"], [143, 8, 1, "", "release"]], "asyncio.Protocol": [[139, 8, 1, "", "data_received"], [139, 8, 1, "", "eof_received"]], "asyncio.Queue": [[140, 8, 1, "", "empty"], [140, 8, 1, "", "full"], [140, 8, 1, "", "get"], [140, 8, 1, "", "get_nowait"], [140, 8, 1, "", "join"], [140, 7, 1, "", "maxsize"], [140, 8, 1, "", "put"], [140, 8, 1, "", "put_nowait"], [140, 8, 1, "", "qsize"], [140, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[139, 8, 1, "", "is_reading"], [139, 8, 1, "", "pause_reading"], [139, 8, 1, "", "resume_reading"]], "asyncio.Semaphore": [[143, 8, 1, "", "acquire"], [143, 8, 1, "", "locked"], [143, 8, 1, "", "release"]], "asyncio.Server": [[133, 8, 1, "", "close"], [133, 8, 1, "", "get_loop"], [133, 8, 1, "", "is_serving"], [133, 8, 1, "", "serve_forever"], [133, 7, 1, "", "sockets"], [133, 8, 1, "", "start_serving"], [133, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[141, 8, 1, "", "at_eof"], [141, 8, 1, "", "read"], [141, 8, 1, "", "readexactly"], [141, 8, 1, "", "readline"], [141, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[141, 8, 1, "", "can_write_eof"], [141, 8, 1, "", "close"], [141, 8, 1, "", "drain"], [141, 8, 1, "", "get_extra_info"], [141, 8, 1, "", "is_closing"], [141, 7, 1, "", "transport"], [141, 8, 1, "", "wait_closed"], [141, 8, 1, "", "write"], [141, 8, 1, "", "write_eof"], [141, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[139, 8, 1, "", "pipe_connection_lost"], [139, 8, 1, "", "pipe_data_received"], [139, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[139, 8, 1, "", "close"], [139, 8, 1, "", "get_pid"], [139, 8, 1, "", "get_pipe_transport"], [139, 8, 1, "", "get_returncode"], [139, 8, 1, "", "kill"], [139, 8, 1, "", "send_signal"], [139, 8, 1, "", "terminate"]], "asyncio.Task": [[144, 8, 1, "", "add_done_callback"], [144, 8, 1, "", "cancel"], [144, 8, 1, "", "cancelled"], [144, 8, 1, "", "done"], [144, 8, 1, "", "exception"], [144, 8, 1, "", "get_coro"], [144, 8, 1, "", "get_name"], [144, 8, 1, "", "get_stack"], [144, 8, 1, "", "print_stack"], [144, 8, 1, "", "remove_done_callback"], [144, 8, 1, "", "result"], [144, 8, 1, "", "set_name"]], "asyncio.TimerHandle": [[133, 8, 1, "", "when"]], "asyncio.WriteTransport": [[139, 8, 1, "", "abort"], [139, 8, 1, "", "can_write_eof"], [139, 8, 1, "", "get_write_buffer_limits"], [139, 8, 1, "", "get_write_buffer_size"], [139, 8, 1, "", "set_write_buffer_limits"], [139, 8, 1, "", "write"], [139, 8, 1, "", "write_eof"], [139, 8, 1, "", "writelines"]], "asyncio.loop": [[133, 8, 1, "", "add_reader"], [133, 8, 1, "", "add_signal_handler"], [133, 8, 1, "", "add_writer"], [133, 8, 1, "", "call_at"], [133, 8, 1, "", "call_exception_handler"], [133, 8, 1, "", "call_later"], [133, 8, 1, "", "call_soon"], [133, 8, 1, "", "call_soon_threadsafe"], [133, 8, 1, "", "close"], [133, 8, 1, "", "connect_accepted_socket"], [133, 8, 1, "", "connect_read_pipe"], [133, 8, 1, "", "connect_write_pipe"], [133, 8, 1, "", "create_connection"], [133, 8, 1, "", "create_datagram_endpoint"], [133, 8, 1, "", "create_future"], [133, 8, 1, "", "create_server"], [133, 8, 1, "", "create_task"], [133, 8, 1, "", "create_unix_connection"], [133, 8, 1, "", "create_unix_server"], [133, 8, 1, "", "default_exception_handler"], [133, 8, 1, "", "get_debug"], [133, 8, 1, "", "get_exception_handler"], [133, 8, 1, "", "get_task_factory"], [133, 8, 1, "", "getaddrinfo"], [133, 8, 1, "", "getnameinfo"], [133, 8, 1, "", "is_closed"], [133, 8, 1, "", "is_running"], [133, 8, 1, "", "remove_reader"], [133, 8, 1, "", "remove_signal_handler"], [133, 8, 1, "", "remove_writer"], [133, 8, 1, "", "run_forever"], [133, 8, 1, "", "run_in_executor"], [133, 8, 1, "", "run_until_complete"], [133, 8, 1, "", "sendfile"], [133, 8, 1, "", "set_debug"], [133, 8, 1, "", "set_default_executor"], [133, 8, 1, "", "set_exception_handler"], [133, 8, 1, "", "set_task_factory"], [133, 8, 1, "", "shutdown_asyncgens"], [133, 8, 1, "", "shutdown_default_executor"], [133, 8, 1, "", "sock_accept"], [133, 8, 1, "", "sock_connect"], [133, 8, 1, "", "sock_recv"], [133, 8, 1, "", "sock_recv_into"], [133, 8, 1, "", "sock_sendall"], [133, 8, 1, "", "sock_sendfile"], [133, 8, 1, "", "start_tls"], [133, 8, 1, "", "stop"], [133, 8, 1, "", "subprocess_exec"], [133, 8, 1, "", "subprocess_shell"], [133, 8, 1, "", "time"]], "asyncio.subprocess": [[142, 9, 1, "", "DEVNULL"], [142, 9, 1, "", "PIPE"], [142, 12, 1, "", "Process"], [142, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[142, 8, 1, "", "communicate"], [142, 8, 1, "", "kill"], [142, 7, 1, "", "pid"], [142, 7, 1, "", "returncode"], [142, 8, 1, "", "send_signal"], [142, 7, 1, "", "stderr"], [142, 7, 1, "", "stdin"], [142, 7, 1, "", "stdout"], [142, 8, 1, "", "terminate"], [142, 8, 1, "", "wait"]], "asyncore": [[145, 12, 1, "", "dispatcher"], [145, 12, 1, "", "dispatcher_with_send"], [145, 12, 1, "", "file_dispatcher"], [145, 12, 1, "", "file_wrapper"], [145, 11, 1, "", "loop"]], "asyncore.dispatcher": [[145, 8, 1, "", "accept"], [145, 8, 1, "", "bind"], [145, 8, 1, "", "close"], [145, 8, 1, "", "connect"], [145, 8, 1, "", "create_socket"], [145, 8, 1, "", "handle_accept"], [145, 8, 1, "", "handle_accepted"], [145, 8, 1, "", "handle_close"], [145, 8, 1, "", "handle_connect"], [145, 8, 1, "", "handle_error"], [145, 8, 1, "", "handle_expt"], [145, 8, 1, "", "handle_read"], [145, 8, 1, "", "handle_write"], [145, 8, 1, "", "listen"], [145, 8, 1, "", "readable"], [145, 8, 1, "", "recv"], [145, 8, 1, "", "send"], [145, 8, 1, "", "writable"]], "atexit": [[146, 11, 1, "", "register"], [146, 11, 1, "", "unregister"]], "audioop": [[147, 11, 1, "", "add"], [147, 11, 1, "", "adpcm2lin"], [147, 11, 1, "", "alaw2lin"], [147, 11, 1, "", "avg"], [147, 11, 1, "", "avgpp"], [147, 11, 1, "", "bias"], [147, 11, 1, "", "byteswap"], [147, 11, 1, "", "cross"], [147, 6, 1, "", "error"], [147, 11, 1, "", "findfactor"], [147, 11, 1, "", "findfit"], [147, 11, 1, "", "findmax"], [147, 11, 1, "", "getsample"], [147, 11, 1, "", "lin2adpcm"], [147, 11, 1, "", "lin2alaw"], [147, 11, 1, "", "lin2lin"], [147, 11, 1, "", "lin2ulaw"], [147, 11, 1, "", "max"], [147, 11, 1, "", "maxpp"], [147, 11, 1, "", "minmax"], [147, 11, 1, "", "mul"], [147, 11, 1, "", "ratecv"], [147, 11, 1, "", "reverse"], [147, 11, 1, "", "rms"], [147, 11, 1, "", "tomono"], [147, 11, 1, "", "tostereo"], [147, 11, 1, "", "ulaw2lin"]], "base64": [[149, 11, 1, "", "a85decode"], [149, 11, 1, "", "a85encode"], [149, 11, 1, "", "b16decode"], [149, 11, 1, "", "b16encode"], [149, 11, 1, "", "b32decode"], [149, 11, 1, "", "b32encode"], [149, 11, 1, "", "b32hexdecode"], [149, 11, 1, "", "b32hexencode"], [149, 11, 1, "", "b64decode"], [149, 11, 1, "", "b64encode"], [149, 11, 1, "", "b85decode"], [149, 11, 1, "", "b85encode"], [149, 11, 1, "", "decode"], [149, 11, 1, "", "decodebytes"], [149, 11, 1, "", "encode"], [149, 11, 1, "", "encodebytes"], [149, 11, 1, "", "standard_b64decode"], [149, 11, 1, "", "standard_b64encode"], [149, 11, 1, "", "urlsafe_b64decode"], [149, 11, 1, "", "urlsafe_b64encode"]], "bdb": [[150, 12, 1, "", "Bdb"], [150, 6, 1, "", "BdbQuit"], [150, 12, 1, "", "Breakpoint"], [150, 11, 1, "", "checkfuncname"], [150, 11, 1, "", "effective"], [150, 11, 1, "", "set_trace"]], "bdb.Bdb": [[150, 8, 1, "", "break_anywhere"], [150, 8, 1, "", "break_here"], [150, 8, 1, "", "canonic"], [150, 8, 1, "", "clear_all_breaks"], [150, 8, 1, "", "clear_all_file_breaks"], [150, 8, 1, "", "clear_bpbynumber"], [150, 8, 1, "", "clear_break"], [150, 8, 1, "", "dispatch_call"], [150, 8, 1, "", "dispatch_exception"], [150, 8, 1, "", "dispatch_line"], [150, 8, 1, "", "dispatch_return"], [150, 8, 1, "", "do_clear"], [150, 8, 1, "", "format_stack_entry"], [150, 8, 1, "", "get_all_breaks"], [150, 8, 1, "", "get_bpbynumber"], [150, 8, 1, "", "get_break"], [150, 8, 1, "", "get_breaks"], [150, 8, 1, "", "get_file_breaks"], [150, 8, 1, "", "get_stack"], [150, 8, 1, "", "is_skipped_line"], [150, 8, 1, "", "reset"], [150, 8, 1, "", "run"], [150, 8, 1, "", "runcall"], [150, 8, 1, "", "runctx"], [150, 8, 1, "", "runeval"], [150, 8, 1, "", "set_break"], [150, 8, 1, "", "set_continue"], [150, 8, 1, "", "set_next"], [150, 8, 1, "", "set_quit"], [150, 8, 1, "", "set_return"], [150, 8, 1, "", "set_step"], [150, 8, 1, "", "set_trace"], [150, 8, 1, "", "set_until"], [150, 8, 1, "", "stop_here"], [150, 8, 1, "", "trace_dispatch"], [150, 8, 1, "", "user_call"], [150, 8, 1, "", "user_exception"], [150, 8, 1, "", "user_line"], [150, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[150, 7, 1, "", "bpbynumber"], [150, 8, 1, "", "bpformat"], [150, 7, 1, "", "bplist"], [150, 8, 1, "", "bpprint"], [150, 7, 1, "", "cond"], [150, 8, 1, "", "deleteMe"], [150, 8, 1, "", "disable"], [150, 8, 1, "", "enable"], [150, 7, 1, "", "enabled"], [150, 7, 1, "", "file"], [150, 7, 1, "", "funcname"], [150, 7, 1, "", "hits"], [150, 7, 1, "", "ignore"], [150, 7, 1, "", "line"], [150, 7, 1, "", "temporary"]], "binascii": [[152, 6, 1, "", "Error"], [152, 6, 1, "", "Incomplete"], [152, 11, 1, "", "a2b_base64"], [152, 11, 1, "", "a2b_hex"], [152, 11, 1, "", "a2b_hqx"], [152, 11, 1, "", "a2b_qp"], [152, 11, 1, "", "a2b_uu"], [152, 11, 1, "", "b2a_base64"], [152, 11, 1, "", "b2a_hex"], [152, 11, 1, "", "b2a_hqx"], [152, 11, 1, "", "b2a_qp"], [152, 11, 1, "", "b2a_uu"], [152, 11, 1, "", "crc32"], [152, 11, 1, "", "crc_hqx"], [152, 11, 1, "", "hexlify"], [152, 11, 1, "", "rlecode_hqx"], [152, 11, 1, "", "rledecode_hqx"], [152, 11, 1, "", "unhexlify"]], "binhex": [[153, 6, 1, "", "Error"], [153, 11, 1, "", "binhex"], [153, 11, 1, "", "hexbin"]], "bisect": [[154, 11, 1, "", "bisect"], [154, 11, 1, "", "bisect_left"], [154, 11, 1, "", "bisect_right"], [154, 11, 1, "", "insort"], [154, 11, 1, "", "insort_left"], [154, 11, 1, "", "insort_right"]], "bytearray": [[351, 8, 1, "", "capitalize"], [351, 8, 1, "", "center"], [351, 8, 1, "", "count"], [351, 8, 1, "", "decode"], [351, 8, 1, "", "endswith"], [351, 8, 1, "", "expandtabs"], [351, 8, 1, "", "find"], [351, 8, 1, "", "fromhex"], [351, 8, 1, "", "hex"], [351, 8, 1, "", "index"], [351, 8, 1, "", "isalnum"], [351, 8, 1, "", "isalpha"], [351, 8, 1, "", "isascii"], [351, 8, 1, "", "isdigit"], [351, 8, 1, "", "islower"], [351, 8, 1, "", "isspace"], [351, 8, 1, "", "istitle"], [351, 8, 1, "", "isupper"], [351, 8, 1, "", "join"], [351, 8, 1, "", "ljust"], [351, 8, 1, "", "lower"], [351, 8, 1, "", "lstrip"], [351, 8, 1, "", "maketrans"], [351, 8, 1, "", "partition"], [351, 8, 1, "", "removeprefix"], [351, 8, 1, "", "removesuffix"], [351, 8, 1, "", "replace"], [351, 8, 1, "", "rfind"], [351, 8, 1, "", "rindex"], [351, 8, 1, "", "rjust"], [351, 8, 1, "", "rpartition"], [351, 8, 1, "", "rsplit"], [351, 8, 1, "", "rstrip"], [351, 8, 1, "", "split"], [351, 8, 1, "", "splitlines"], [351, 8, 1, "", "startswith"], [351, 8, 1, "", "strip"], [351, 8, 1, "", "swapcase"], [351, 8, 1, "", "title"], [351, 8, 1, "", "translate"], [351, 8, 1, "", "upper"], [351, 8, 1, "", "zfill"]], "bytes": [[351, 8, 1, "", "capitalize"], [351, 8, 1, "", "center"], [351, 8, 1, "", "count"], [351, 8, 1, "", "decode"], [351, 8, 1, "", "endswith"], [351, 8, 1, "", "expandtabs"], [351, 8, 1, "", "find"], [351, 8, 1, "", "fromhex"], [351, 8, 1, "", "hex"], [351, 8, 1, "", "index"], [351, 8, 1, "", "isalnum"], [351, 8, 1, "", "isalpha"], [351, 8, 1, "", "isascii"], [351, 8, 1, "", "isdigit"], [351, 8, 1, "", "islower"], [351, 8, 1, "", "isspace"], [351, 8, 1, "", "istitle"], [351, 8, 1, "", "isupper"], [351, 8, 1, "", "join"], [351, 8, 1, "", "ljust"], [351, 8, 1, "", "lower"], [351, 8, 1, "", "lstrip"], [351, 8, 1, "", "maketrans"], [351, 8, 1, "", "partition"], [351, 8, 1, "", "removeprefix"], [351, 8, 1, "", "removesuffix"], [351, 8, 1, "", "replace"], [351, 8, 1, "", "rfind"], [351, 8, 1, "", "rindex"], [351, 8, 1, "", "rjust"], [351, 8, 1, "", "rpartition"], [351, 8, 1, "", "rsplit"], [351, 8, 1, "", "rstrip"], [351, 8, 1, "", "split"], [351, 8, 1, "", "splitlines"], [351, 8, 1, "", "startswith"], [351, 8, 1, "", "strip"], [351, 8, 1, "", "swapcase"], [351, 8, 1, "", "title"], [351, 8, 1, "", "translate"], [351, 8, 1, "", "upper"], [351, 8, 1, "", "zfill"]], "bz2": [[156, 12, 1, "", "BZ2Compressor"], [156, 12, 1, "", "BZ2Decompressor"], [156, 12, 1, "", "BZ2File"], [156, 11, 1, "", "compress"], [156, 11, 1, "", "decompress"], [156, 11, 1, "", "open"]], "bz2.BZ2Compressor": [[156, 8, 1, "", "compress"], [156, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[156, 8, 1, "", "decompress"], [156, 7, 1, "", "eof"], [156, 7, 1, "", "needs_input"], [156, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[156, 8, 1, "", "peek"]], "calendar": [[157, 12, 1, "", "Calendar"], [157, 9, 1, "", "FRIDAY"], [157, 12, 1, "", "HTMLCalendar"], [157, 12, 1, "", "LocaleHTMLCalendar"], [157, 12, 1, "", "LocaleTextCalendar"], [157, 9, 1, "", "MONDAY"], [157, 9, 1, "", "SATURDAY"], [157, 9, 1, "", "SUNDAY"], [157, 9, 1, "", "THURSDAY"], [157, 9, 1, "", "TUESDAY"], [157, 12, 1, "", "TextCalendar"], [157, 9, 1, "", "WEDNESDAY"], [157, 11, 1, "", "calendar"], [157, 9, 1, "", "day_abbr"], [157, 9, 1, "", "day_name"], [157, 11, 1, "", "firstweekday"], [157, 11, 1, "", "isleap"], [157, 11, 1, "", "leapdays"], [157, 11, 1, "", "month"], [157, 9, 1, "", "month_abbr"], [157, 9, 1, "", "month_name"], [157, 11, 1, "", "monthcalendar"], [157, 11, 1, "", "monthrange"], [157, 11, 1, "", "prcal"], [157, 11, 1, "", "prmonth"], [157, 11, 1, "", "setfirstweekday"], [157, 11, 1, "", "timegm"], [157, 11, 1, "", "weekday"], [157, 11, 1, "", "weekheader"]], "calendar.Calendar": [[157, 8, 1, "", "itermonthdates"], [157, 8, 1, "", "itermonthdays"], [157, 8, 1, "", "itermonthdays2"], [157, 8, 1, "", "itermonthdays3"], [157, 8, 1, "", "itermonthdays4"], [157, 8, 1, "", "iterweekdays"], [157, 8, 1, "", "monthdatescalendar"], [157, 8, 1, "", "monthdays2calendar"], [157, 8, 1, "", "monthdayscalendar"], [157, 8, 1, "", "yeardatescalendar"], [157, 8, 1, "", "yeardays2calendar"], [157, 8, 1, "", "yeardayscalendar"]], "calendar.HTMLCalendar": [[157, 7, 1, "", "cssclass_month"], [157, 7, 1, "", "cssclass_month_head"], [157, 7, 1, "", "cssclass_noday"], [157, 7, 1, "", "cssclass_year"], [157, 7, 1, "", "cssclass_year_head"], [157, 7, 1, "", "cssclasses"], [157, 7, 1, "", "cssclasses_weekday_head"], [157, 8, 1, "", "formatmonth"], [157, 8, 1, "", "formatyear"], [157, 8, 1, "", "formatyearpage"]], "calendar.TextCalendar": [[157, 8, 1, "", "formatmonth"], [157, 8, 1, "", "formatyear"], [157, 8, 1, "", "prmonth"], [157, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[158, 8, 1, "", "getfirst"], [158, 8, 1, "", "getlist"]], "cgi": [[158, 11, 1, "", "parse"], [158, 11, 1, "", "parse_header"], [158, 11, 1, "", "parse_multipart"], [158, 11, 1, "", "print_directory"], [158, 11, 1, "", "print_environ"], [158, 11, 1, "", "print_environ_usage"], [158, 11, 1, "", "print_form"], [158, 11, 1, "", "test"]], "cgitb": [[159, 11, 1, "", "enable"], [159, 11, 1, "", "handler"], [159, 11, 1, "", "html"], [159, 11, 1, "", "text"]], "chunk": [[160, 12, 1, "", "Chunk"]], "chunk.Chunk": [[160, 8, 1, "", "close"], [160, 8, 1, "", "getname"], [160, 8, 1, "", "getsize"], [160, 8, 1, "", "isatty"], [160, 8, 1, "", "read"], [160, 8, 1, "", "seek"], [160, 8, 1, "", "skip"], [160, 8, 1, "", "tell"]], "class": [[351, 7, 1, "", "__bases__"], [432, 8, 1, "", "__instancecheck__"], [351, 7, 1, "", "__mro__"], [432, 8, 1, "", "__subclasscheck__"], [351, 8, 1, "", "__subclasses__"], [351, 8, 1, "", "mro"]], "cmath": [[161, 11, 1, "", "acos"], [161, 11, 1, "", "acosh"], [161, 11, 1, "", "asin"], [161, 11, 1, "", "asinh"], [161, 11, 1, "", "atan"], [161, 11, 1, "", "atanh"], [161, 11, 1, "", "cos"], [161, 11, 1, "", "cosh"], [161, 9, 1, "", "e"], [161, 11, 1, "", "exp"], [161, 9, 1, "", "inf"], [161, 9, 1, "", "infj"], [161, 11, 1, "", "isclose"], [161, 11, 1, "", "isfinite"], [161, 11, 1, "", "isinf"], [161, 11, 1, "", "isnan"], [161, 11, 1, "", "log"], [161, 11, 1, "", "log10"], [161, 9, 1, "", "nan"], [161, 9, 1, "", "nanj"], [161, 11, 1, "", "phase"], [161, 9, 1, "", "pi"], [161, 11, 1, "", "polar"], [161, 11, 1, "", "rect"], [161, 11, 1, "", "sin"], [161, 11, 1, "", "sinh"], [161, 11, 1, "", "sqrt"], [161, 11, 1, "", "tan"], [161, 11, 1, "", "tanh"], [161, 9, 1, "", "tau"]], "cmd": [[162, 12, 1, "", "Cmd"]], "cmd.Cmd": [[162, 8, 1, "", "cmdloop"], [162, 7, 1, "", "cmdqueue"], [162, 8, 1, "", "completedefault"], [162, 8, 1, "", "default"], [162, 7, 1, "", "doc_header"], [162, 8, 1, "", "emptyline"], [162, 7, 1, "", "identchars"], [162, 7, 1, "", "intro"], [162, 7, 1, "", "lastcmd"], [162, 7, 1, "", "misc_header"], [162, 8, 1, "", "onecmd"], [162, 8, 1, "", "postcmd"], [162, 8, 1, "", "postloop"], [162, 8, 1, "", "precmd"], [162, 8, 1, "", "preloop"], [162, 7, 1, "", "prompt"], [162, 7, 1, "", "ruler"], [162, 7, 1, "", "undoc_header"], [162, 7, 1, "", "use_rawinput"]], "code": [[163, 12, 1, "", "InteractiveConsole"], [163, 12, 1, "", "InteractiveInterpreter"], [163, 11, 1, "", "compile_command"], [163, 11, 1, "", "interact"]], "code.InteractiveConsole": [[163, 8, 1, "", "interact"], [163, 8, 1, "", "push"], [163, 8, 1, "", "raw_input"], [163, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[163, 8, 1, "", "runcode"], [163, 8, 1, "", "runsource"], [163, 8, 1, "", "showsyntaxerror"], [163, 8, 1, "", "showtraceback"], [163, 8, 1, "", "write"]], "codecs": [[164, 9, 1, "", "BOM"], [164, 9, 1, "", "BOM_BE"], [164, 9, 1, "", "BOM_LE"], [164, 9, 1, "", "BOM_UTF16"], [164, 9, 1, "", "BOM_UTF16_BE"], [164, 9, 1, "", "BOM_UTF16_LE"], [164, 9, 1, "", "BOM_UTF32"], [164, 9, 1, "", "BOM_UTF32_BE"], [164, 9, 1, "", "BOM_UTF32_LE"], [164, 9, 1, "", "BOM_UTF8"], [164, 12, 1, "", "CodecInfo"], [164, 11, 1, "", "EncodedFile"], [164, 12, 1, "", "IncrementalDecoder"], [164, 12, 1, "", "IncrementalEncoder"], [164, 12, 1, "", "StreamReader"], [164, 12, 1, "", "StreamReaderWriter"], [164, 12, 1, "", "StreamRecoder"], [164, 12, 1, "", "StreamWriter"], [164, 11, 1, "", "backslashreplace_errors"], [164, 11, 1, "", "decode"], [164, 11, 1, "", "encode"], [164, 11, 1, "", "getdecoder"], [164, 11, 1, "", "getencoder"], [164, 11, 1, "", "getincrementaldecoder"], [164, 11, 1, "", "getincrementalencoder"], [164, 11, 1, "", "getreader"], [164, 11, 1, "", "getwriter"], [164, 11, 1, "", "ignore_errors"], [164, 11, 1, "", "iterdecode"], [164, 11, 1, "", "iterencode"], [164, 11, 1, "", "lookup"], [164, 11, 1, "", "lookup_error"], [164, 11, 1, "", "namereplace_errors"], [164, 11, 1, "", "open"], [164, 11, 1, "", "register"], [164, 11, 1, "", "register_error"], [164, 11, 1, "", "replace_errors"], [164, 11, 1, "", "strict_errors"], [164, 11, 1, "", "unregister"], [164, 11, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[164, 8, 1, "", "decode"], [164, 8, 1, "", "encode"]], "codecs.CodecInfo": [[164, 7, 1, "", "decode"], [164, 7, 1, "", "encode"], [164, 7, 1, "", "incrementaldecoder"], [164, 7, 1, "", "incrementalencoder"], [164, 7, 1, "", "name"], [164, 7, 1, "", "streamreader"], [164, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[164, 8, 1, "", "decode"], [164, 8, 1, "", "getstate"], [164, 8, 1, "", "reset"], [164, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[164, 8, 1, "", "encode"], [164, 8, 1, "", "getstate"], [164, 8, 1, "", "reset"], [164, 8, 1, "", "setstate"]], "codecs.StreamReader": [[164, 8, 1, "", "read"], [164, 8, 1, "", "readline"], [164, 8, 1, "", "readlines"], [164, 8, 1, "", "reset"]], "codecs.StreamWriter": [[164, 8, 1, "", "reset"], [164, 8, 1, "", "write"], [164, 8, 1, "", "writelines"]], "codeop": [[165, 12, 1, "", "CommandCompiler"], [165, 12, 1, "", "Compile"], [165, 11, 1, "", "compile_command"]], "collections": [[166, 12, 1, "", "ChainMap"], [166, 12, 1, "", "Counter"], [166, 12, 1, "", "OrderedDict"], [166, 12, 1, "", "UserDict"], [166, 12, 1, "", "UserList"], [166, 12, 1, "", "UserString"], [167, 10, 0, "-", "abc"], [166, 12, 1, "", "defaultdict"], [166, 12, 1, "", "deque"], [166, 11, 1, "", "namedtuple"]], "collections.ChainMap": [[166, 7, 1, "", "maps"], [166, 8, 1, "", "new_child"], [166, 7, 1, "", "parents"]], "collections.Counter": [[166, 8, 1, "", "elements"], [166, 8, 1, "", "fromkeys"], [166, 8, 1, "", "most_common"], [166, 8, 1, "", "subtract"], [166, 8, 1, "", "total"], [166, 8, 1, "", "update"]], "collections.OrderedDict": [[166, 8, 1, "", "move_to_end"], [166, 8, 1, "", "popitem"]], "collections.UserDict": [[166, 7, 1, "", "data"]], "collections.UserList": [[166, 7, 1, "", "data"]], "collections.UserString": [[166, 7, 1, "", "data"]], "collections.abc": [[167, 12, 1, "", "AsyncGenerator"], [167, 12, 1, "", "AsyncIterable"], [167, 12, 1, "", "AsyncIterator"], [167, 12, 1, "", "Awaitable"], [167, 12, 1, "", "ByteString"], [167, 12, 1, "", "Callable"], [167, 12, 1, "", "Collection"], [167, 12, 1, "", "Container"], [167, 12, 1, "", "Coroutine"], [167, 12, 1, "", "Generator"], [167, 12, 1, "", "Hashable"], [167, 12, 1, "", "ItemsView"], [167, 12, 1, "", "Iterable"], [167, 12, 1, "", "Iterator"], [167, 12, 1, "", "KeysView"], [167, 12, 1, "", "Mapping"], [167, 12, 1, "", "MappingView"], [167, 12, 1, "", "MutableMapping"], [167, 12, 1, "", "MutableSequence"], [167, 12, 1, "", "MutableSet"], [167, 12, 1, "", "Reversible"], [167, 12, 1, "", "Sequence"], [167, 12, 1, "", "Set"], [167, 12, 1, "", "Sized"], [167, 12, 1, "", "ValuesView"]], "collections.defaultdict": [[166, 8, 1, "", "__missing__"], [166, 7, 1, "", "default_factory"]], "collections.deque": [[166, 8, 1, "", "append"], [166, 8, 1, "", "appendleft"], [166, 8, 1, "", "clear"], [166, 8, 1, "", "copy"], [166, 8, 1, "", "count"], [166, 8, 1, "", "extend"], [166, 8, 1, "", "extendleft"], [166, 8, 1, "", "index"], [166, 8, 1, "", "insert"], [166, 7, 1, "", "maxlen"], [166, 8, 1, "", "pop"], [166, 8, 1, "", "popleft"], [166, 8, 1, "", "remove"], [166, 8, 1, "", "reverse"], [166, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[166, 8, 1, "", "_asdict"], [166, 7, 1, "", "_field_defaults"], [166, 7, 1, "", "_fields"], [166, 8, 1, "", "_make"], [166, 8, 1, "", "_replace"]], "colorsys": [[168, 11, 1, "", "hls_to_rgb"], [168, 11, 1, "", "hsv_to_rgb"], [168, 11, 1, "", "rgb_to_hls"], [168, 11, 1, "", "rgb_to_hsv"], [168, 11, 1, "", "rgb_to_yiq"], [168, 11, 1, "", "yiq_to_rgb"]], "compileall": [[169, 11, 1, "", "compile_dir"], [169, 11, 1, "", "compile_file"], [169, 11, 1, "", "compile_path"], [169, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [169, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [169, 14, 1, "cmdoption-compileall-b", "-b"], [169, 14, 1, "cmdoption-compileall-d", "-d"], [169, 14, 1, "cmdoption-compileall-e", "-e"], [169, 14, 1, "cmdoption-compileall-f", "-f"], [169, 14, 1, "cmdoption-compileall-i", "-i"], [169, 14, 1, "cmdoption-compileall-j", "-j"], [169, 14, 1, "cmdoption-compileall-l", "-l"], [169, 14, 1, "cmdoption-compileall-o", "-o"], [169, 14, 1, "cmdoption-compileall-p", "-p"], [169, 14, 1, "cmdoption-compileall-q", "-q"], [169, 14, 1, "cmdoption-compileall-r", "-r"], [169, 14, 1, "cmdoption-compileall-s", "-s"], [169, 14, 1, "cmdoption-compileall-x", "-x"], [169, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [169, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[172, 10, 0, "-", "futures"]], "concurrent.futures": [[172, 6, 1, "", "BrokenExecutor"], [172, 6, 1, "", "CancelledError"], [172, 12, 1, "", "Executor"], [172, 12, 1, "", "Future"], [172, 6, 1, "", "InvalidStateError"], [172, 12, 1, "", "ProcessPoolExecutor"], [172, 12, 1, "", "ThreadPoolExecutor"], [172, 6, 1, "", "TimeoutError"], [172, 11, 1, "", "as_completed"], [172, 11, 1, "", "wait"]], "concurrent.futures.Executor": [[172, 8, 1, "", "map"], [172, 8, 1, "", "shutdown"], [172, 8, 1, "", "submit"]], "concurrent.futures.Future": [[172, 8, 1, "", "add_done_callback"], [172, 8, 1, "", "cancel"], [172, 8, 1, "", "cancelled"], [172, 8, 1, "", "done"], [172, 8, 1, "", "exception"], [172, 8, 1, "", "result"], [172, 8, 1, "", "running"], [172, 8, 1, "", "set_exception"], [172, 8, 1, "", "set_result"], [172, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[172, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[172, 6, 1, "", "BrokenThreadPool"]], "configparser": [[173, 12, 1, "", "BasicInterpolation"], [173, 12, 1, "", "ConfigParser"], [173, 6, 1, "", "DuplicateOptionError"], [173, 6, 1, "", "DuplicateSectionError"], [173, 6, 1, "", "Error"], [173, 12, 1, "", "ExtendedInterpolation"], [173, 6, 1, "", "InterpolationDepthError"], [173, 6, 1, "", "InterpolationError"], [173, 6, 1, "", "InterpolationMissingOptionError"], [173, 6, 1, "", "InterpolationSyntaxError"], [173, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [173, 6, 1, "", "MissingSectionHeaderError"], [173, 6, 1, "", "NoOptionError"], [173, 6, 1, "", "NoSectionError"], [173, 6, 1, "", "ParsingError"], [173, 12, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[173, 7, 1, "", "BOOLEAN_STATES"], [173, 7, 1, "", "SECTCRE"], [173, 8, 1, "", "add_section"], [173, 8, 1, "", "defaults"], [173, 8, 1, "", "get"], [173, 8, 1, "", "getboolean"], [173, 8, 1, "", "getfloat"], [173, 8, 1, "", "getint"], [173, 8, 1, "", "has_option"], [173, 8, 1, "", "has_section"], [173, 8, 1, "", "items"], [173, 8, 1, "", "options"], [173, 8, 1, "", "optionxform"], [173, 8, 1, "", "read"], [173, 8, 1, "", "read_dict"], [173, 8, 1, "", "read_file"], [173, 8, 1, "", "read_string"], [173, 8, 1, "", "readfp"], [173, 8, 1, "", "remove_option"], [173, 8, 1, "", "remove_section"], [173, 8, 1, "", "sections"], [173, 8, 1, "", "set"], [173, 8, 1, "", "write"]], "configparser.RawConfigParser": [[173, 8, 1, "", "add_section"], [173, 8, 1, "", "set"]], "container": [[351, 8, 1, "", "__iter__"]], "contextlib": [[175, 12, 1, "", "AbstractAsyncContextManager"], [175, 12, 1, "", "AbstractContextManager"], [175, 12, 1, "", "AsyncContextDecorator"], [175, 12, 1, "", "AsyncExitStack"], [175, 12, 1, "", "ContextDecorator"], [175, 12, 1, "", "ExitStack"], [175, 11, 1, "", "aclosing"], [175, 11, 1, "", "asynccontextmanager"], [175, 11, 1, "", "closing"], [175, 11, 1, "", "contextmanager"], [175, 11, 1, "", "nullcontext"], [175, 11, 1, "", "redirect_stderr"], [175, 11, 1, "", "redirect_stdout"], [175, 11, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[175, 8, 1, "", "aclose"], [175, 8, 1, "", "enter_async_context"], [175, 8, 1, "", "push_async_callback"], [175, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[175, 8, 1, "", "callback"], [175, 8, 1, "", "close"], [175, 8, 1, "", "enter_context"], [175, 8, 1, "", "pop_all"], [175, 8, 1, "", "push"]], "contextmanager": [[351, 8, 1, "", "__enter__"], [351, 8, 1, "", "__exit__"]], "contextvars": [[176, 12, 1, "", "Context"], [176, 12, 1, "", "ContextVar"], [176, 12, 1, "", "Token"], [176, 11, 1, "", "copy_context"]], "contextvars.Context": [[176, 8, 1, "", "copy"], [176, 8, 1, "", "get"], [176, 8, 1, "", "items"], [176, 8, 1, "", "keys"], [176, 8, 1, "", "run"], [176, 8, 1, "", "values"]], "contextvars.ContextVar": [[176, 8, 1, "", "get"], [176, 7, 1, "", "name"], [176, 8, 1, "", "reset"], [176, 8, 1, "", "set"]], "contextvars.Token": [[176, 7, 1, "", "MISSING"], [176, 7, 1, "", "old_value"], [176, 7, 1, "", "var"]], "copy": [[177, 6, 1, "", "Error"], [177, 11, 1, "", "copy"], [177, 11, 1, "", "deepcopy"]], "copyreg": [[178, 11, 1, "", "constructor"], [178, 11, 1, "", "pickle"]], "coroutine": [[432, 8, 1, "", "close"], [432, 8, 1, "", "send"], [432, 8, 1, "", "throw"]], "crypt": [[179, 9, 1, "", "METHOD_BLOWFISH"], [179, 9, 1, "", "METHOD_CRYPT"], [179, 9, 1, "", "METHOD_MD5"], [179, 9, 1, "", "METHOD_SHA256"], [179, 9, 1, "", "METHOD_SHA512"], [179, 11, 1, "", "crypt"], [179, 7, 1, "", "methods"], [179, 11, 1, "", "mksalt"]], "csv": [[181, 12, 1, "", "Dialect"], [181, 12, 1, "", "DictReader"], [181, 12, 1, "", "DictWriter"], [181, 6, 1, "", "Error"], [181, 9, 1, "", "QUOTE_ALL"], [181, 9, 1, "", "QUOTE_MINIMAL"], [181, 9, 1, "", "QUOTE_NONE"], [181, 9, 1, "", "QUOTE_NONNUMERIC"], [181, 12, 1, "", "Sniffer"], [181, 12, 1, "", "excel"], [181, 12, 1, "", "excel_tab"], [181, 11, 1, "", "field_size_limit"], [181, 11, 1, "", "get_dialect"], [181, 11, 1, "", "list_dialects"], [181, 11, 1, "", "reader"], [181, 11, 1, "", "register_dialect"], [181, 12, 1, "", "unix_dialect"], [181, 11, 1, "", "unregister_dialect"], [181, 11, 1, "", "writer"]], "csv.Dialect": [[181, 7, 1, "", "delimiter"], [181, 7, 1, "", "doublequote"], [181, 7, 1, "", "escapechar"], [181, 7, 1, "", "lineterminator"], [181, 7, 1, "", "quotechar"], [181, 7, 1, "", "quoting"], [181, 7, 1, "", "skipinitialspace"], [181, 7, 1, "", "strict"]], "csv.DictWriter": [[181, 8, 1, "", "writeheader"]], "csv.Sniffer": [[181, 8, 1, "", "has_header"], [181, 8, 1, "", "sniff"]], "csv.csvreader": [[181, 8, 1, "", "__next__"], [181, 7, 1, "", "dialect"], [181, 7, 1, "", "fieldnames"], [181, 7, 1, "", "line_num"]], "csv.csvwriter": [[181, 7, 1, "", "dialect"], [181, 8, 1, "", "writerow"], [181, 8, 1, "", "writerows"]], "ctypes": [[182, 6, 1, "", "ArgumentError"], [182, 12, 1, "", "Array"], [182, 12, 1, "", "BigEndianStructure"], [182, 12, 1, "", "CDLL"], [182, 11, 1, "", "CFUNCTYPE"], [182, 11, 1, "", "DllCanUnloadNow"], [182, 11, 1, "", "DllGetClassObject"], [182, 11, 1, "", "FormatError"], [182, 11, 1, "", "GetLastError"], [182, 12, 1, "", "HRESULT"], [182, 12, 1, "", "LibraryLoader"], [182, 12, 1, "", "LittleEndianStructure"], [182, 12, 1, "", "OleDLL"], [182, 11, 1, "", "POINTER"], [182, 11, 1, "", "PYFUNCTYPE"], [182, 12, 1, "", "PyDLL"], [182, 12, 1, "", "Structure"], [182, 12, 1, "", "Union"], [182, 11, 1, "", "WINFUNCTYPE"], [182, 12, 1, "", "WinDLL"], [182, 11, 1, "", "WinError"], [182, 12, 1, "", "_CData"], [182, 12, 1, "", "_FuncPtr"], [182, 12, 1, "", "_Pointer"], [182, 12, 1, "", "_SimpleCData"], [182, 11, 1, "", "addressof"], [182, 11, 1, "", "alignment"], [182, 11, 1, "", "byref"], [182, 12, 1, "", "c_bool"], [182, 12, 1, "", "c_byte"], [182, 12, 1, "", "c_char"], [182, 12, 1, "", "c_char_p"], [182, 12, 1, "", "c_double"], [182, 12, 1, "", "c_float"], [182, 12, 1, "", "c_int"], [182, 12, 1, "", "c_int16"], [182, 12, 1, "", "c_int32"], [182, 12, 1, "", "c_int64"], [182, 12, 1, "", "c_int8"], [182, 12, 1, "", "c_long"], [182, 12, 1, "", "c_longdouble"], [182, 12, 1, "", "c_longlong"], [182, 12, 1, "", "c_short"], [182, 12, 1, "", "c_size_t"], [182, 12, 1, "", "c_ssize_t"], [182, 12, 1, "", "c_ubyte"], [182, 12, 1, "", "c_uint"], [182, 12, 1, "", "c_uint16"], [182, 12, 1, "", "c_uint32"], [182, 12, 1, "", "c_uint64"], [182, 12, 1, "", "c_uint8"], [182, 12, 1, "", "c_ulong"], [182, 12, 1, "", "c_ulonglong"], [182, 12, 1, "", "c_ushort"], [182, 12, 1, "", "c_void_p"], [182, 12, 1, "", "c_wchar"], [182, 12, 1, "", "c_wchar_p"], [182, 11, 1, "", "cast"], [182, 11, 1, "", "create_string_buffer"], [182, 11, 1, "", "create_unicode_buffer"], [182, 11, 1, "", "get_errno"], [182, 11, 1, "", "get_last_error"], [182, 11, 1, "", "memmove"], [182, 11, 1, "", "memset"], [182, 11, 1, "", "pointer"], [182, 12, 1, "", "py_object"], [182, 11, 1, "", "resize"], [182, 11, 1, "", "set_errno"], [182, 11, 1, "", "set_last_error"], [182, 11, 1, "", "sizeof"], [182, 11, 1, "", "string_at"], [182, 11, 1, "", "wstring_at"]], "ctypes.Array": [[182, 7, 1, "", "_length_"], [182, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[182, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[182, 7, 1, "", "_handle"], [182, 7, 1, "", "_name"]], "ctypes.Structure": [[182, 7, 1, "", "_anonymous_"], [182, 7, 1, "", "_fields_"], [182, 7, 1, "", "_pack_"]], "ctypes._CData": [[182, 7, 1, "", "_b_base_"], [182, 7, 1, "", "_b_needsfree_"], [182, 7, 1, "", "_objects"], [182, 8, 1, "", "from_address"], [182, 8, 1, "", "from_buffer"], [182, 8, 1, "", "from_buffer_copy"], [182, 8, 1, "", "from_param"], [182, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[182, 7, 1, "", "argtypes"], [182, 7, 1, "", "errcheck"], [182, 7, 1, "", "restype"]], "ctypes._Pointer": [[182, 7, 1, "", "_type_"], [182, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[182, 7, 1, "", "value"]], "ctypes.util": [[182, 11, 1, "", "find_library"], [182, 11, 1, "", "find_msvcrt"]], "curses": [[183, 9, 1, "", "ERR"], [183, 9, 1, "", "OK"], [184, 10, 0, "-", "ascii"], [183, 11, 1, "", "baudrate"], [183, 11, 1, "", "beep"], [183, 11, 1, "", "can_change_color"], [183, 11, 1, "", "cbreak"], [183, 11, 1, "", "color_content"], [183, 11, 1, "", "color_pair"], [183, 11, 1, "", "curs_set"], [183, 11, 1, "", "def_prog_mode"], [183, 11, 1, "", "def_shell_mode"], [183, 11, 1, "", "delay_output"], [183, 11, 1, "", "doupdate"], [183, 11, 1, "", "echo"], [183, 11, 1, "", "endwin"], [183, 11, 1, "", "erasechar"], [183, 6, 1, "", "error"], [183, 11, 1, "", "filter"], [183, 11, 1, "", "flash"], [183, 11, 1, "", "flushinp"], [183, 11, 1, "", "get_escdelay"], [183, 11, 1, "", "get_tabsize"], [183, 11, 1, "", "getmouse"], [183, 11, 1, "", "getsyx"], [183, 11, 1, "", "getwin"], [183, 11, 1, "", "halfdelay"], [183, 11, 1, "", "has_colors"], [183, 11, 1, "", "has_extended_color_support"], [183, 11, 1, "", "has_ic"], [183, 11, 1, "", "has_il"], [183, 11, 1, "", "has_key"], [183, 11, 1, "", "init_color"], [183, 11, 1, "", "init_pair"], [183, 11, 1, "", "initscr"], [183, 11, 1, "", "is_term_resized"], [183, 11, 1, "", "isendwin"], [183, 11, 1, "", "keyname"], [183, 11, 1, "", "killchar"], [183, 11, 1, "", "longname"], [183, 11, 1, "", "meta"], [183, 11, 1, "", "mouseinterval"], [183, 11, 1, "", "mousemask"], [183, 11, 1, "", "napms"], [183, 9, 1, "", "ncurses_version"], [183, 11, 1, "", "newpad"], [183, 11, 1, "", "newwin"], [183, 11, 1, "", "nl"], [183, 11, 1, "", "nocbreak"], [183, 11, 1, "", "noecho"], [183, 11, 1, "", "nonl"], [183, 11, 1, "", "noqiflush"], [183, 11, 1, "", "noraw"], [183, 11, 1, "", "pair_content"], [183, 11, 1, "", "pair_number"], [185, 10, 0, "-", "panel"], [183, 11, 1, "", "putp"], [183, 11, 1, "", "qiflush"], [183, 11, 1, "", "raw"], [183, 11, 1, "", "reset_prog_mode"], [183, 11, 1, "", "reset_shell_mode"], [183, 11, 1, "", "resetty"], [183, 11, 1, "", "resize_term"], [183, 11, 1, "", "resizeterm"], [183, 11, 1, "", "savetty"], [183, 11, 1, "", "set_escdelay"], [183, 11, 1, "", "set_tabsize"], [183, 11, 1, "", "setsyx"], [183, 11, 1, "", "setupterm"], [183, 11, 1, "", "start_color"], [183, 11, 1, "", "termattrs"], [183, 11, 1, "", "termname"], [183, 10, 0, "-", "textpad"], [183, 11, 1, "", "tigetflag"], [183, 11, 1, "", "tigetnum"], [183, 11, 1, "", "tigetstr"], [183, 11, 1, "", "tparm"], [183, 11, 1, "", "typeahead"], [183, 11, 1, "", "unctrl"], [183, 11, 1, "", "unget_wch"], [183, 11, 1, "", "ungetch"], [183, 11, 1, "", "ungetmouse"], [183, 11, 1, "", "update_lines_cols"], [183, 11, 1, "", "use_default_colors"], [183, 11, 1, "", "use_env"], [183, 9, 1, "", "version"], [183, 11, 1, "", "wrapper"]], "curses.ascii": [[184, 11, 1, "", "alt"], [184, 11, 1, "", "ascii"], [184, 9, 1, "", "controlnames"], [184, 11, 1, "", "ctrl"], [184, 11, 1, "", "isalnum"], [184, 11, 1, "", "isalpha"], [184, 11, 1, "", "isascii"], [184, 11, 1, "", "isblank"], [184, 11, 1, "", "iscntrl"], [184, 11, 1, "", "isctrl"], [184, 11, 1, "", "isdigit"], [184, 11, 1, "", "isgraph"], [184, 11, 1, "", "islower"], [184, 11, 1, "", "ismeta"], [184, 11, 1, "", "isprint"], [184, 11, 1, "", "ispunct"], [184, 11, 1, "", "isspace"], [184, 11, 1, "", "isupper"], [184, 11, 1, "", "isxdigit"], [184, 11, 1, "", "unctrl"]], "curses.panel.Panel": [[185, 8, 1, "", "above"], [185, 8, 1, "", "below"], [185, 8, 1, "", "bottom"], [185, 8, 1, "", "hidden"], [185, 8, 1, "", "hide"], [185, 8, 1, "", "move"], [185, 8, 1, "", "replace"], [185, 8, 1, "", "set_userptr"], [185, 8, 1, "", "show"], [185, 8, 1, "", "top"], [185, 8, 1, "", "userptr"], [185, 8, 1, "", "window"]], "curses.panel": [[185, 11, 1, "", "bottom_panel"], [185, 11, 1, "", "new_panel"], [185, 11, 1, "", "top_panel"], [185, 11, 1, "", "update_panels"]], "curses.textpad": [[183, 12, 1, "", "Textbox"], [183, 11, 1, "", "rectangle"]], "curses.textpad.Textbox": [[183, 8, 1, "", "do_command"], [183, 8, 1, "", "edit"], [183, 8, 1, "", "gather"], [183, 7, 1, "", "stripspaces"]], "curses.window": [[183, 8, 1, "", "addch"], [183, 8, 1, "", "addnstr"], [183, 8, 1, "", "addstr"], [183, 8, 1, "", "attroff"], [183, 8, 1, "", "attron"], [183, 8, 1, "", "attrset"], [183, 8, 1, "", "bkgd"], [183, 8, 1, "", "bkgdset"], [183, 8, 1, "", "border"], [183, 8, 1, "", "box"], [183, 8, 1, "", "chgat"], [183, 8, 1, "", "clear"], [183, 8, 1, "", "clearok"], [183, 8, 1, "", "clrtobot"], [183, 8, 1, "", "clrtoeol"], [183, 8, 1, "", "cursyncup"], [183, 8, 1, "", "delch"], [183, 8, 1, "", "deleteln"], [183, 8, 1, "", "derwin"], [183, 8, 1, "", "echochar"], [183, 8, 1, "", "enclose"], [183, 7, 1, "", "encoding"], [183, 8, 1, "", "erase"], [183, 8, 1, "", "get_wch"], [183, 8, 1, "", "getbegyx"], [183, 8, 1, "", "getbkgd"], [183, 8, 1, "", "getch"], [183, 8, 1, "", "getkey"], [183, 8, 1, "", "getmaxyx"], [183, 8, 1, "", "getparyx"], [183, 8, 1, "", "getstr"], [183, 8, 1, "", "getyx"], [183, 8, 1, "", "hline"], [183, 8, 1, "", "idcok"], [183, 8, 1, "", "idlok"], [183, 8, 1, "", "immedok"], [183, 8, 1, "", "inch"], [183, 8, 1, "", "insch"], [183, 8, 1, "", "insdelln"], [183, 8, 1, "", "insertln"], [183, 8, 1, "", "insnstr"], [183, 8, 1, "", "insstr"], [183, 8, 1, "", "instr"], [183, 8, 1, "", "is_linetouched"], [183, 8, 1, "", "is_wintouched"], [183, 8, 1, "", "keypad"], [183, 8, 1, "", "leaveok"], [183, 8, 1, "", "move"], [183, 8, 1, "", "mvderwin"], [183, 8, 1, "", "mvwin"], [183, 8, 1, "", "nodelay"], [183, 8, 1, "", "notimeout"], [183, 8, 1, "", "noutrefresh"], [183, 8, 1, "", "overlay"], [183, 8, 1, "", "overwrite"], [183, 8, 1, "", "putwin"], [183, 8, 1, "", "redrawln"], [183, 8, 1, "", "redrawwin"], [183, 8, 1, "", "refresh"], [183, 8, 1, "", "resize"], [183, 8, 1, "", "scroll"], [183, 8, 1, "", "scrollok"], [183, 8, 1, "", "setscrreg"], [183, 8, 1, "", "standend"], [183, 8, 1, "", "standout"], [183, 8, 1, "", "subpad"], [183, 8, 1, "", "subwin"], [183, 8, 1, "", "syncdown"], [183, 8, 1, "", "syncok"], [183, 8, 1, "", "syncup"], [183, 8, 1, "", "timeout"], [183, 8, 1, "", "touchline"], [183, 8, 1, "", "touchwin"], [183, 8, 1, "", "untouchwin"], [183, 8, 1, "", "vline"]], "dataclasses": [[187, 12, 1, "", "Field"], [187, 6, 1, "", "FrozenInstanceError"], [187, 9, 1, "", "KW_ONLY"], [187, 9, 1, "", "MISSING"], [187, 11, 1, "", "asdict"], [187, 11, 1, "", "astuple"], [187, 11, 1, "", "dataclass"], [187, 11, 1, "", "field"], [187, 11, 1, "", "fields"], [187, 11, 1, "", "is_dataclass"], [187, 11, 1, "", "make_dataclass"], [187, 11, 1, "", "replace"]], "datetime": [[189, 9, 1, "", "MAXYEAR"], [189, 9, 1, "", "MINYEAR"], [189, 12, 1, "", "date"], [189, 12, 1, "", "datetime"], [189, 12, 1, "", "time"], [189, 12, 1, "", "timedelta"], [189, 12, 1, "", "timezone"], [189, 12, 1, "", "tzinfo"]], "datetime.date": [[189, 8, 1, "", "__format__"], [189, 8, 1, "", "__str__"], [189, 8, 1, "", "ctime"], [189, 7, 1, "", "day"], [189, 8, 1, "", "fromisocalendar"], [189, 8, 1, "", "fromisoformat"], [189, 8, 1, "", "fromordinal"], [189, 8, 1, "", "fromtimestamp"], [189, 8, 1, "", "isocalendar"], [189, 8, 1, "", "isoformat"], [189, 8, 1, "", "isoweekday"], [189, 7, 1, "", "max"], [189, 7, 1, "", "min"], [189, 7, 1, "", "month"], [189, 8, 1, "", "replace"], [189, 7, 1, "", "resolution"], [189, 8, 1, "", "strftime"], [189, 8, 1, "", "timetuple"], [189, 8, 1, "", "today"], [189, 8, 1, "", "toordinal"], [189, 8, 1, "", "weekday"], [189, 7, 1, "", "year"]], "datetime.datetime": [[189, 8, 1, "", "__format__"], [189, 8, 1, "", "__str__"], [189, 8, 1, "", "astimezone"], [189, 8, 1, "", "combine"], [189, 8, 1, "", "ctime"], [189, 8, 1, "", "date"], [189, 7, 1, "", "day"], [189, 8, 1, "", "dst"], [189, 7, 1, "", "fold"], [189, 8, 1, "", "fromisocalendar"], [189, 8, 1, "", "fromisoformat"], [189, 8, 1, "", "fromordinal"], [189, 8, 1, "", "fromtimestamp"], [189, 7, 1, "", "hour"], [189, 8, 1, "", "isocalendar"], [189, 8, 1, "", "isoformat"], [189, 8, 1, "", "isoweekday"], [189, 7, 1, "", "max"], [189, 7, 1, "", "microsecond"], [189, 7, 1, "", "min"], [189, 7, 1, "", "minute"], [189, 7, 1, "", "month"], [189, 8, 1, "", "now"], [189, 8, 1, "", "replace"], [189, 7, 1, "", "resolution"], [189, 7, 1, "", "second"], [189, 8, 1, "", "strftime"], [189, 8, 1, "", "strptime"], [189, 8, 1, "", "time"], [189, 8, 1, "", "timestamp"], [189, 8, 1, "", "timetuple"], [189, 8, 1, "", "timetz"], [189, 8, 1, "", "today"], [189, 8, 1, "", "toordinal"], [189, 7, 1, "", "tzinfo"], [189, 8, 1, "", "tzname"], [189, 8, 1, "", "utcfromtimestamp"], [189, 8, 1, "", "utcnow"], [189, 8, 1, "", "utcoffset"], [189, 8, 1, "", "utctimetuple"], [189, 8, 1, "", "weekday"], [189, 7, 1, "", "year"]], "datetime.time": [[189, 8, 1, "", "__format__"], [189, 8, 1, "", "__str__"], [189, 8, 1, "", "dst"], [189, 7, 1, "", "fold"], [189, 8, 1, "", "fromisoformat"], [189, 7, 1, "", "hour"], [189, 8, 1, "", "isoformat"], [189, 7, 1, "", "max"], [189, 7, 1, "", "microsecond"], [189, 7, 1, "", "min"], [189, 7, 1, "", "minute"], [189, 8, 1, "", "replace"], [189, 7, 1, "", "resolution"], [189, 7, 1, "", "second"], [189, 8, 1, "", "strftime"], [189, 7, 1, "", "tzinfo"], [189, 8, 1, "", "tzname"], [189, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[189, 7, 1, "", "max"], [189, 7, 1, "", "min"], [189, 7, 1, "", "resolution"], [189, 8, 1, "", "total_seconds"]], "datetime.timezone": [[189, 8, 1, "", "dst"], [189, 8, 1, "", "fromutc"], [189, 8, 1, "", "tzname"], [189, 7, 1, "", "utc"], [189, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[189, 8, 1, "", "dst"], [189, 8, 1, "", "fromutc"], [189, 8, 1, "", "tzname"], [189, 8, 1, "", "utcoffset"]], "dbm": [[190, 10, 0, "-", "dumb"], [190, 6, 1, "", "error"], [190, 10, 0, "-", "gnu"], [190, 10, 0, "-", "ndbm"], [190, 11, 1, "", "open"], [190, 11, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[190, 8, 1, "", "close"], [190, 8, 1, "", "sync"]], "dbm.dumb": [[190, 6, 1, "", "error"], [190, 11, 1, "", "open"]], "dbm.gnu": [[190, 6, 1, "", "error"], [190, 11, 1, "", "open"]], "dbm.gnu.gdbm": [[190, 8, 1, "", "close"], [190, 8, 1, "", "firstkey"], [190, 8, 1, "", "nextkey"], [190, 8, 1, "", "reorganize"], [190, 8, 1, "", "sync"]], "dbm.ndbm": [[190, 6, 1, "", "error"], [190, 9, 1, "", "library"], [190, 11, 1, "", "open"]], "dbm.ndbm.ndbm": [[190, 8, 1, "", "close"]], "decimal": [[192, 12, 1, "", "BasicContext"], [192, 12, 1, "", "Clamped"], [192, 12, 1, "", "Context"], [192, 12, 1, "", "Decimal"], [192, 12, 1, "", "DecimalException"], [192, 12, 1, "", "DefaultContext"], [192, 12, 1, "", "DivisionByZero"], [192, 12, 1, "", "ExtendedContext"], [192, 12, 1, "", "FloatOperation"], [192, 9, 1, "", "HAVE_CONTEXTVAR"], [192, 9, 1, "", "HAVE_THREADS"], [192, 12, 1, "", "Inexact"], [192, 12, 1, "", "InvalidOperation"], [192, 9, 1, "", "MAX_EMAX"], [192, 9, 1, "", "MAX_PREC"], [192, 9, 1, "", "MIN_EMIN"], [192, 9, 1, "", "MIN_ETINY"], [192, 12, 1, "", "Overflow"], [192, 9, 1, "", "ROUND_05UP"], [192, 9, 1, "", "ROUND_CEILING"], [192, 9, 1, "", "ROUND_DOWN"], [192, 9, 1, "", "ROUND_FLOOR"], [192, 9, 1, "", "ROUND_HALF_DOWN"], [192, 9, 1, "", "ROUND_HALF_EVEN"], [192, 9, 1, "", "ROUND_HALF_UP"], [192, 9, 1, "", "ROUND_UP"], [192, 12, 1, "", "Rounded"], [192, 12, 1, "", "Subnormal"], [192, 12, 1, "", "Underflow"], [192, 11, 1, "", "getcontext"], [192, 11, 1, "", "localcontext"], [192, 11, 1, "", "setcontext"]], "decimal.Context": [[192, 8, 1, "", "Etiny"], [192, 8, 1, "", "Etop"], [192, 8, 1, "", "abs"], [192, 8, 1, "", "add"], [192, 8, 1, "", "canonical"], [192, 8, 1, "", "clear_flags"], [192, 8, 1, "", "clear_traps"], [192, 8, 1, "", "compare"], [192, 8, 1, "", "compare_signal"], [192, 8, 1, "", "compare_total"], [192, 8, 1, "", "compare_total_mag"], [192, 8, 1, "", "copy"], [192, 8, 1, "", "copy_abs"], [192, 8, 1, "", "copy_decimal"], [192, 8, 1, "", "copy_negate"], [192, 8, 1, "", "copy_sign"], [192, 8, 1, "", "create_decimal"], [192, 8, 1, "", "create_decimal_from_float"], [192, 8, 1, "", "divide"], [192, 8, 1, "", "divide_int"], [192, 8, 1, "", "divmod"], [192, 8, 1, "", "exp"], [192, 8, 1, "", "fma"], [192, 8, 1, "", "is_canonical"], [192, 8, 1, "", "is_finite"], [192, 8, 1, "", "is_infinite"], [192, 8, 1, "", "is_nan"], [192, 8, 1, "", "is_normal"], [192, 8, 1, "", "is_qnan"], [192, 8, 1, "", "is_signed"], [192, 8, 1, "", "is_snan"], [192, 8, 1, "", "is_subnormal"], [192, 8, 1, "", "is_zero"], [192, 8, 1, "", "ln"], [192, 8, 1, "", "log10"], [192, 8, 1, "", "logb"], [192, 8, 1, "", "logical_and"], [192, 8, 1, "", "logical_invert"], [192, 8, 1, "", "logical_or"], [192, 8, 1, "", "logical_xor"], [192, 8, 1, "", "max"], [192, 8, 1, "", "max_mag"], [192, 8, 1, "", "min"], [192, 8, 1, "", "min_mag"], [192, 8, 1, "", "minus"], [192, 8, 1, "", "multiply"], [192, 8, 1, "", "next_minus"], [192, 8, 1, "", "next_plus"], [192, 8, 1, "", "next_toward"], [192, 8, 1, "", "normalize"], [192, 8, 1, "", "number_class"], [192, 8, 1, "", "plus"], [192, 8, 1, "", "power"], [192, 8, 1, "", "quantize"], [192, 8, 1, "", "radix"], [192, 8, 1, "", "remainder"], [192, 8, 1, "", "remainder_near"], [192, 8, 1, "", "rotate"], [192, 8, 1, "", "same_quantum"], [192, 8, 1, "", "scaleb"], [192, 8, 1, "", "shift"], [192, 8, 1, "", "sqrt"], [192, 8, 1, "", "subtract"], [192, 8, 1, "", "to_eng_string"], [192, 8, 1, "", "to_integral_exact"], [192, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[192, 8, 1, "", "adjusted"], [192, 8, 1, "", "as_integer_ratio"], [192, 8, 1, "", "as_tuple"], [192, 8, 1, "", "canonical"], [192, 8, 1, "", "compare"], [192, 8, 1, "", "compare_signal"], [192, 8, 1, "", "compare_total"], [192, 8, 1, "", "compare_total_mag"], [192, 8, 1, "", "conjugate"], [192, 8, 1, "", "copy_abs"], [192, 8, 1, "", "copy_negate"], [192, 8, 1, "", "copy_sign"], [192, 8, 1, "", "exp"], [192, 8, 1, "", "fma"], [192, 8, 1, "", "from_float"], [192, 8, 1, "", "is_canonical"], [192, 8, 1, "", "is_finite"], [192, 8, 1, "", "is_infinite"], [192, 8, 1, "", "is_nan"], [192, 8, 1, "", "is_normal"], [192, 8, 1, "", "is_qnan"], [192, 8, 1, "", "is_signed"], [192, 8, 1, "", "is_snan"], [192, 8, 1, "", "is_subnormal"], [192, 8, 1, "", "is_zero"], [192, 8, 1, "", "ln"], [192, 8, 1, "", "log10"], [192, 8, 1, "", "logb"], [192, 8, 1, "", "logical_and"], [192, 8, 1, "", "logical_invert"], [192, 8, 1, "", "logical_or"], [192, 8, 1, "", "logical_xor"], [192, 8, 1, "", "max"], [192, 8, 1, "", "max_mag"], [192, 8, 1, "", "min"], [192, 8, 1, "", "min_mag"], [192, 8, 1, "", "next_minus"], [192, 8, 1, "", "next_plus"], [192, 8, 1, "", "next_toward"], [192, 8, 1, "", "normalize"], [192, 8, 1, "", "number_class"], [192, 8, 1, "", "quantize"], [192, 8, 1, "", "radix"], [192, 8, 1, "", "remainder_near"], [192, 8, 1, "", "rotate"], [192, 8, 1, "", "same_quantum"], [192, 8, 1, "", "scaleb"], [192, 8, 1, "", "shift"], [192, 8, 1, "", "sqrt"], [192, 8, 1, "", "to_eng_string"], [192, 8, 1, "", "to_integral"], [192, 8, 1, "", "to_integral_exact"], [192, 8, 1, "", "to_integral_value"]], "definition": [[351, 7, 1, "", "__name__"], [351, 7, 1, "", "__qualname__"]], "dict": [[351, 8, 1, "", "clear"], [351, 8, 1, "", "copy"], [351, 8, 1, "", "fromkeys"], [351, 8, 1, "", "get"], [351, 8, 1, "", "items"], [351, 8, 1, "", "keys"], [351, 8, 1, "", "pop"], [351, 8, 1, "", "popitem"], [351, 8, 1, "", "setdefault"], [351, 8, 1, "", "update"], [351, 8, 1, "", "values"]], "difflib": [[196, 12, 1, "", "Differ"], [196, 12, 1, "", "HtmlDiff"], [196, 11, 1, "", "IS_CHARACTER_JUNK"], [196, 11, 1, "", "IS_LINE_JUNK"], [196, 12, 1, "", "SequenceMatcher"], [196, 11, 1, "", "context_diff"], [196, 11, 1, "", "diff_bytes"], [196, 11, 1, "", "get_close_matches"], [196, 11, 1, "", "ndiff"], [196, 11, 1, "", "restore"], [196, 11, 1, "", "unified_diff"]], "difflib.Differ": [[196, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[196, 8, 1, "", "__init__"], [196, 8, 1, "", "make_file"], [196, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[196, 8, 1, "", "find_longest_match"], [196, 8, 1, "", "get_grouped_opcodes"], [196, 8, 1, "", "get_matching_blocks"], [196, 8, 1, "", "get_opcodes"], [196, 8, 1, "", "quick_ratio"], [196, 8, 1, "", "ratio"], [196, 8, 1, "", "real_quick_ratio"], [196, 8, 1, "", "set_seq1"], [196, 8, 1, "", "set_seq2"], [196, 8, 1, "", "set_seqs"]], "dis": [[197, 12, 1, "", "Bytecode"], [197, 12, 1, "", "Instruction"], [197, 9, 1, "", "cmp_op"], [197, 11, 1, "", "code_info"], [197, 11, 1, "", "dis"], [197, 11, 1, "", "disassemble"], [197, 11, 1, "", "disco"], [197, 11, 1, "", "distb"], [197, 11, 1, "", "findlabels"], [197, 11, 1, "", "findlinestarts"], [197, 11, 1, "", "get_instructions"], [197, 9, 1, "", "hascompare"], [197, 9, 1, "", "hasconst"], [197, 9, 1, "", "hasfree"], [197, 9, 1, "", "hasjabs"], [197, 9, 1, "", "hasjrel"], [197, 9, 1, "", "haslocal"], [197, 9, 1, "", "hasname"], [197, 9, 1, "", "opmap"], [197, 9, 1, "", "opname"], [197, 11, 1, "", "show_code"], [197, 11, 1, "", "stack_effect"]], "dis.Bytecode": [[197, 9, 1, "", "codeobj"], [197, 8, 1, "", "dis"], [197, 9, 1, "", "first_line"], [197, 8, 1, "", "from_traceback"], [197, 8, 1, "", "info"]], "dis.Instruction": [[197, 9, 1, "", "arg"], [197, 9, 1, "", "argrepr"], [197, 9, 1, "", "argval"], [197, 9, 1, "", "is_jump_target"], [197, 9, 1, "", "offset"], [197, 9, 1, "", "opcode"], [197, 9, 1, "", "opname"], [197, 9, 1, "", "starts_line"]], "distutils": [[69, 10, 0, "-", "archive_util"], [69, 10, 0, "-", "bcppcompiler"], [69, 10, 0, "-", "ccompiler"], [69, 10, 0, "-", "cmd"], [69, 10, 0, "-", "command"], [69, 10, 0, "-", "core"], [69, 10, 0, "-", "cygwinccompiler"], [69, 10, 0, "-", "debug"], [69, 10, 0, "-", "dep_util"], [69, 10, 0, "-", "dir_util"], [69, 10, 0, "-", "dist"], [69, 10, 0, "-", "errors"], [69, 10, 0, "-", "extension"], [69, 10, 0, "-", "fancy_getopt"], [69, 10, 0, "-", "file_util"], [69, 10, 0, "-", "filelist"], [69, 10, 0, "-", "log"], [69, 10, 0, "-", "msvccompiler"], [69, 10, 0, "-", "spawn"], [69, 10, 0, "-", "sysconfig"], [69, 10, 0, "-", "text_file"], [69, 10, 0, "-", "unixccompiler"], [69, 10, 0, "-", "util"], [69, 10, 0, "-", "version"]], "distutils.archive_util": [[69, 11, 1, "", "make_archive"], [69, 11, 1, "", "make_tarball"], [69, 11, 1, "", "make_zipfile"]], "distutils.ccompiler": [[69, 12, 1, "", "CCompiler"], [69, 11, 1, "", "gen_lib_options"], [69, 11, 1, "", "gen_preprocess_options"], [69, 11, 1, "", "get_default_compiler"], [69, 11, 1, "", "new_compiler"], [69, 11, 1, "", "show_compilers"]], "distutils.ccompiler.CCompiler": [[69, 8, 1, "", "add_include_dir"], [69, 8, 1, "", "add_library"], [69, 8, 1, "", "add_library_dir"], [69, 8, 1, "", "add_link_object"], [69, 8, 1, "", "add_runtime_library_dir"], [69, 8, 1, "", "announce"], [69, 8, 1, "", "compile"], [69, 8, 1, "", "create_static_lib"], [69, 8, 1, "", "debug_print"], [69, 8, 1, "", "define_macro"], [69, 8, 1, "", "detect_language"], [69, 8, 1, "", "executable_filename"], [69, 8, 1, "", "execute"], [69, 8, 1, "", "find_library_file"], [69, 8, 1, "", "has_function"], [69, 8, 1, "", "library_dir_option"], [69, 8, 1, "", "library_filename"], [69, 8, 1, "", "library_option"], [69, 8, 1, "", "link"], [69, 8, 1, "", "link_executable"], [69, 8, 1, "", "link_shared_lib"], [69, 8, 1, "", "link_shared_object"], [69, 8, 1, "", "mkpath"], [69, 8, 1, "", "move_file"], [69, 8, 1, "", "object_filenames"], [69, 8, 1, "", "preprocess"], [69, 8, 1, "", "runtime_library_dir_option"], [69, 8, 1, "", "set_executables"], [69, 8, 1, "", "set_include_dirs"], [69, 8, 1, "", "set_libraries"], [69, 8, 1, "", "set_library_dirs"], [69, 8, 1, "", "set_link_objects"], [69, 8, 1, "", "set_runtime_library_dirs"], [69, 8, 1, "", "shared_object_filename"], [69, 8, 1, "", "spawn"], [69, 8, 1, "", "undefine_macro"], [69, 8, 1, "", "warn"]], "distutils.cmd": [[69, 12, 1, "", "Command"]], "distutils.cmd.Command": [[69, 8, 1, "", "finalize_options"], [69, 8, 1, "", "initialize_options"], [69, 8, 1, "", "run"], [69, 7, 1, "", "sub_commands"]], "distutils.command": [[69, 10, 0, "-", "bdist"], [69, 10, 0, "-", "bdist_dumb"], [69, 10, 0, "-", "bdist_msi"], [69, 10, 0, "-", "bdist_packager"], [69, 10, 0, "-", "bdist_rpm"], [69, 10, 0, "-", "build"], [69, 10, 0, "-", "build_clib"], [69, 10, 0, "-", "build_ext"], [69, 10, 0, "-", "build_py"], [69, 10, 0, "-", "build_scripts"], [69, 10, 0, "-", "check"], [69, 10, 0, "-", "clean"], [69, 10, 0, "-", "config"], [69, 10, 0, "-", "install"], [69, 10, 0, "-", "install_data"], [69, 10, 0, "-", "install_headers"], [69, 10, 0, "-", "install_lib"], [69, 10, 0, "-", "install_scripts"], [69, 10, 0, "-", "register"], [69, 10, 0, "-", "sdist"]], "distutils.command.bdist_msi": [[69, 12, 1, "", "bdist_msi"]], "distutils.command.build_py": [[69, 12, 1, "", "build_py"], [69, 12, 1, "", "build_py_2to3"]], "distutils.core": [[69, 12, 1, "", "Command"], [69, 12, 1, "", "Distribution"], [69, 12, 1, "", "Extension"], [69, 11, 1, "", "run_setup"], [69, 11, 1, "", "setup"]], "distutils.dep_util": [[69, 11, 1, "", "newer"], [69, 11, 1, "", "newer_group"], [69, 11, 1, "", "newer_pairwise"]], "distutils.dir_util": [[69, 11, 1, "", "copy_tree"], [69, 11, 1, "", "create_tree"], [69, 11, 1, "", "mkpath"], [69, 11, 1, "", "remove_tree"]], "distutils.fancy_getopt": [[69, 12, 1, "", "FancyGetopt"], [69, 11, 1, "", "fancy_getopt"], [69, 11, 1, "", "wrap_text"]], "distutils.fancy_getopt.FancyGetopt": [[69, 8, 1, "", "generate_help"], [69, 8, 1, "", "get_option_order"], [69, 8, 1, "", "getopt"]], "distutils.file_util": [[69, 11, 1, "", "copy_file"], [69, 11, 1, "", "move_file"], [69, 11, 1, "", "write_file"]], "distutils.sysconfig": [[69, 9, 1, "", "EXEC_PREFIX"], [69, 9, 1, "", "PREFIX"], [69, 11, 1, "", "customize_compiler"], [69, 11, 1, "", "get_config_h_filename"], [69, 11, 1, "", "get_config_var"], [69, 11, 1, "", "get_config_vars"], [69, 11, 1, "", "get_makefile_filename"], [69, 11, 1, "", "get_python_inc"], [69, 11, 1, "", "get_python_lib"], [69, 11, 1, "", "set_python_build"]], "distutils.text_file": [[69, 12, 1, "", "TextFile"]], "distutils.text_file.TextFile": [[69, 8, 1, "", "close"], [69, 8, 1, "", "open"], [69, 8, 1, "", "readline"], [69, 8, 1, "", "readlines"], [69, 8, 1, "", "unreadline"], [69, 8, 1, "", "warn"]], "distutils.util": [[69, 11, 1, "", "byte_compile"], [69, 11, 1, "", "change_root"], [69, 11, 1, "", "check_environ"], [69, 11, 1, "", "convert_path"], [69, 11, 1, "", "execute"], [69, 11, 1, "", "get_platform"], [69, 11, 1, "", "rfc822_escape"], [69, 11, 1, "", "split_quoted"], [69, 11, 1, "", "strtobool"], [69, 11, 1, "", "subst_vars"]], "doctest": [[200, 9, 1, "", "COMPARISON_FLAGS"], [200, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [200, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [200, 12, 1, "", "DebugRunner"], [200, 11, 1, "", "DocFileSuite"], [200, 12, 1, "", "DocTest"], [200, 6, 1, "", "DocTestFailure"], [200, 12, 1, "", "DocTestFinder"], [200, 12, 1, "", "DocTestParser"], [200, 12, 1, "", "DocTestRunner"], [200, 11, 1, "", "DocTestSuite"], [200, 9, 1, "", "ELLIPSIS"], [200, 12, 1, "", "Example"], [200, 9, 1, "", "FAIL_FAST"], [200, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [200, 9, 1, "", "NORMALIZE_WHITESPACE"], [200, 12, 1, "", "OutputChecker"], [200, 9, 1, "", "REPORTING_FLAGS"], [200, 9, 1, "", "REPORT_CDIFF"], [200, 9, 1, "", "REPORT_NDIFF"], [200, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [200, 9, 1, "", "REPORT_UDIFF"], [200, 9, 1, "", "SKIP"], [200, 6, 1, "", "UnexpectedException"], [200, 11, 1, "", "debug"], [200, 11, 1, "", "debug_src"], [200, 11, 1, "", "register_optionflag"], [200, 11, 1, "", "run_docstring_examples"], [200, 11, 1, "", "script_from_examples"], [200, 11, 1, "", "set_unittest_reportflags"], [200, 11, 1, "", "testfile"], [200, 11, 1, "", "testmod"], [200, 11, 1, "", "testsource"]], "doctest.DocTest": [[200, 7, 1, "", "docstring"], [200, 7, 1, "", "examples"], [200, 7, 1, "", "filename"], [200, 7, 1, "", "globs"], [200, 7, 1, "", "lineno"], [200, 7, 1, "", "name"]], "doctest.DocTestFailure": [[200, 7, 1, "", "example"], [200, 7, 1, "", "got"], [200, 7, 1, "", "test"]], "doctest.DocTestFinder": [[200, 8, 1, "", "find"]], "doctest.DocTestParser": [[200, 8, 1, "", "get_doctest"], [200, 8, 1, "", "get_examples"], [200, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[200, 8, 1, "", "report_failure"], [200, 8, 1, "", "report_start"], [200, 8, 1, "", "report_success"], [200, 8, 1, "", "report_unexpected_exception"], [200, 8, 1, "", "run"], [200, 8, 1, "", "summarize"]], "doctest.Example": [[200, 7, 1, "", "exc_msg"], [200, 7, 1, "", "indent"], [200, 7, 1, "", "lineno"], [200, 7, 1, "", "options"], [200, 7, 1, "", "source"], [200, 7, 1, "", "want"]], "doctest.OutputChecker": [[200, 8, 1, "", "check_output"], [200, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[200, 7, 1, "", "example"], [200, 7, 1, "", "exc_info"], [200, 7, 1, "", "test"]], "email": [[202, 10, 0, "-", "charset"], [204, 10, 0, "-", "contentmanager"], [205, 10, 0, "-", "encoders"], [206, 10, 0, "-", "errors"], [208, 10, 0, "-", "generator"], [209, 10, 0, "-", "header"], [210, 10, 0, "-", "headerregistry"], [211, 10, 0, "-", "iterators"], [212, 10, 0, "-", "message"], [214, 11, 1, "", "message_from_binary_file"], [214, 11, 1, "", "message_from_bytes"], [214, 11, 1, "", "message_from_file"], [214, 11, 1, "", "message_from_string"], [213, 10, 0, "-", "mime"], [214, 10, 0, "-", "parser"], [215, 10, 0, "-", "policy"], [216, 10, 0, "-", "utils"]], "email.charset": [[202, 12, 1, "", "Charset"], [202, 11, 1, "", "add_alias"], [202, 11, 1, "", "add_charset"], [202, 11, 1, "", "add_codec"]], "email.charset.Charset": [[202, 8, 1, "", "__eq__"], [202, 8, 1, "", "__ne__"], [202, 8, 1, "", "__str__"], [202, 8, 1, "", "body_encode"], [202, 7, 1, "", "body_encoding"], [202, 8, 1, "", "get_body_encoding"], [202, 8, 1, "", "get_output_charset"], [202, 8, 1, "", "header_encode"], [202, 8, 1, "", "header_encode_lines"], [202, 7, 1, "", "header_encoding"], [202, 7, 1, "", "input_charset"], [202, 7, 1, "", "input_codec"], [202, 7, 1, "", "output_charset"], [202, 7, 1, "", "output_codec"]], "email.contentmanager": [[204, 12, 1, "", "ContentManager"], [204, 8, 1, "", "get_content"], [204, 9, 1, "", "raw_data_manager"], [204, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[204, 8, 1, "", "add_get_handler"], [204, 8, 1, "", "add_set_handler"], [204, 8, 1, "", "get_content"], [204, 8, 1, "", "set_content"]], "email.encoders": [[205, 11, 1, "", "encode_7or8bit"], [205, 11, 1, "", "encode_base64"], [205, 11, 1, "", "encode_noop"], [205, 11, 1, "", "encode_quopri"]], "email.errors": [[206, 6, 1, "", "BoundaryError"], [206, 6, 1, "", "HeaderParseError"], [206, 6, 1, "", "MessageError"], [206, 6, 1, "", "MessageParseError"], [206, 6, 1, "", "MultipartConversionError"]], "email.generator": [[208, 12, 1, "", "BytesGenerator"], [208, 12, 1, "", "DecodedGenerator"], [208, 12, 1, "", "Generator"]], "email.generator.BytesGenerator": [[208, 8, 1, "", "clone"], [208, 8, 1, "", "flatten"], [208, 8, 1, "", "write"]], "email.generator.Generator": [[208, 8, 1, "", "clone"], [208, 8, 1, "", "flatten"], [208, 8, 1, "", "write"]], "email.header": [[209, 12, 1, "", "Header"], [209, 11, 1, "", "decode_header"], [209, 11, 1, "", "make_header"]], "email.header.Header": [[209, 8, 1, "", "__eq__"], [209, 8, 1, "", "__ne__"], [209, 8, 1, "", "__str__"], [209, 8, 1, "", "append"], [209, 8, 1, "", "encode"]], "email.headerregistry": [[210, 12, 1, "", "Address"], [210, 12, 1, "", "AddressHeader"], [210, 12, 1, "", "BaseHeader"], [210, 12, 1, "", "ContentDispositionHeader"], [210, 12, 1, "", "ContentTransferEncoding"], [210, 12, 1, "", "ContentTypeHeader"], [210, 12, 1, "", "DateHeader"], [210, 12, 1, "", "Group"], [210, 12, 1, "", "HeaderRegistry"], [210, 12, 1, "", "MIMEVersionHeader"], [210, 12, 1, "", "ParameterizedMIMEHeader"], [210, 12, 1, "", "SingleAddressHeader"], [210, 12, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[210, 8, 1, "", "__str__"], [210, 7, 1, "", "addr_spec"], [210, 7, 1, "", "display_name"], [210, 7, 1, "", "domain"], [210, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[210, 7, 1, "", "addresses"], [210, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[210, 7, 1, "", "defects"], [210, 8, 1, "", "fold"], [210, 7, 1, "", "max_count"], [210, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[210, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[210, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[210, 7, 1, "", "content_type"], [210, 7, 1, "", "maintype"], [210, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[210, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[210, 8, 1, "", "__str__"], [210, 7, 1, "", "addresses"], [210, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[210, 8, 1, "", "__call__"], [210, 8, 1, "", "__getitem__"], [210, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[210, 7, 1, "", "major"], [210, 7, 1, "", "minor"], [210, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[210, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[210, 7, 1, "", "address"]], "email.iterators": [[211, 11, 1, "", "_structure"], [211, 11, 1, "", "body_line_iterator"], [211, 11, 1, "", "typed_subpart_iterator"]], "email.message": [[212, 12, 1, "", "EmailMessage"], [212, 12, 1, "", "MIMEPart"], [203, 12, 1, "", "Message"]], "email.message.EmailMessage": [[212, 8, 1, "", "__bytes__"], [212, 8, 1, "", "__contains__"], [212, 8, 1, "", "__delitem__"], [212, 8, 1, "", "__getitem__"], [212, 8, 1, "", "__len__"], [212, 8, 1, "", "__setitem__"], [212, 8, 1, "", "__str__"], [212, 8, 1, "", "add_alternative"], [212, 8, 1, "", "add_attachment"], [212, 8, 1, "", "add_header"], [212, 8, 1, "", "add_related"], [212, 8, 1, "", "as_bytes"], [212, 8, 1, "", "as_string"], [212, 8, 1, "", "clear"], [212, 8, 1, "", "clear_content"], [212, 7, 1, "", "defects"], [212, 8, 1, "", "del_param"], [212, 7, 1, "", "epilogue"], [212, 8, 1, "", "get"], [212, 8, 1, "", "get_all"], [212, 8, 1, "", "get_body"], [212, 8, 1, "", "get_boundary"], [212, 8, 1, "", "get_charsets"], [212, 8, 1, "", "get_content"], [212, 8, 1, "", "get_content_charset"], [212, 8, 1, "", "get_content_disposition"], [212, 8, 1, "", "get_content_maintype"], [212, 8, 1, "", "get_content_subtype"], [212, 8, 1, "", "get_content_type"], [212, 8, 1, "", "get_default_type"], [212, 8, 1, "", "get_filename"], [212, 8, 1, "", "get_unixfrom"], [212, 8, 1, "", "is_attachment"], [212, 8, 1, "", "is_multipart"], [212, 8, 1, "", "items"], [212, 8, 1, "", "iter_attachments"], [212, 8, 1, "", "iter_parts"], [212, 8, 1, "", "keys"], [212, 8, 1, "", "make_alternative"], [212, 8, 1, "", "make_mixed"], [212, 8, 1, "", "make_related"], [212, 7, 1, "", "preamble"], [212, 8, 1, "", "replace_header"], [212, 8, 1, "", "set_boundary"], [212, 8, 1, "", "set_content"], [212, 8, 1, "", "set_default_type"], [212, 8, 1, "", "set_param"], [212, 8, 1, "", "set_unixfrom"], [212, 8, 1, "", "values"], [212, 8, 1, "", "walk"]], "email.message.Message": [[203, 8, 1, "", "__bytes__"], [203, 8, 1, "", "__contains__"], [203, 8, 1, "", "__delitem__"], [203, 8, 1, "", "__getitem__"], [203, 8, 1, "", "__len__"], [203, 8, 1, "", "__setitem__"], [203, 8, 1, "", "__str__"], [203, 8, 1, "", "add_header"], [203, 8, 1, "", "as_bytes"], [203, 8, 1, "", "as_string"], [203, 8, 1, "", "attach"], [203, 7, 1, "", "defects"], [203, 8, 1, "", "del_param"], [203, 7, 1, "", "epilogue"], [203, 8, 1, "", "get"], [203, 8, 1, "", "get_all"], [203, 8, 1, "", "get_boundary"], [203, 8, 1, "", "get_charset"], [203, 8, 1, "", "get_charsets"], [203, 8, 1, "", "get_content_charset"], [203, 8, 1, "", "get_content_disposition"], [203, 8, 1, "", "get_content_maintype"], [203, 8, 1, "", "get_content_subtype"], [203, 8, 1, "", "get_content_type"], [203, 8, 1, "", "get_default_type"], [203, 8, 1, "", "get_filename"], [203, 8, 1, "", "get_param"], [203, 8, 1, "", "get_params"], [203, 8, 1, "", "get_payload"], [203, 8, 1, "", "get_unixfrom"], [203, 8, 1, "", "is_multipart"], [203, 8, 1, "", "items"], [203, 8, 1, "", "keys"], [203, 7, 1, "", "preamble"], [203, 8, 1, "", "replace_header"], [203, 8, 1, "", "set_boundary"], [203, 8, 1, "", "set_charset"], [203, 8, 1, "", "set_default_type"], [203, 8, 1, "", "set_param"], [203, 8, 1, "", "set_payload"], [203, 8, 1, "", "set_type"], [203, 8, 1, "", "set_unixfrom"], [203, 8, 1, "", "values"], [203, 8, 1, "", "walk"]], "email.mime.application": [[213, 12, 1, "", "MIMEApplication"]], "email.mime.audio": [[213, 12, 1, "", "MIMEAudio"]], "email.mime.base": [[213, 12, 1, "", "MIMEBase"]], "email.mime.image": [[213, 12, 1, "", "MIMEImage"]], "email.mime.message": [[213, 12, 1, "", "MIMEMessage"]], "email.mime.multipart": [[213, 12, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[213, 12, 1, "", "MIMENonMultipart"]], "email.mime.text": [[213, 12, 1, "", "MIMEText"]], "email.parser": [[214, 12, 1, "", "BytesFeedParser"], [214, 12, 1, "", "BytesHeaderParser"], [214, 12, 1, "", "BytesParser"], [214, 12, 1, "", "FeedParser"], [214, 12, 1, "", "HeaderParser"], [214, 12, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[214, 8, 1, "", "close"], [214, 8, 1, "", "feed"]], "email.parser.BytesParser": [[214, 8, 1, "", "parse"], [214, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[214, 8, 1, "", "parse"], [214, 8, 1, "", "parsestr"]], "email.policy": [[215, 12, 1, "", "Compat32"], [215, 12, 1, "", "EmailPolicy"], [215, 9, 1, "", "HTTP"], [215, 12, 1, "", "Policy"], [215, 9, 1, "", "SMTP"], [215, 9, 1, "", "SMTPUTF8"], [215, 9, 1, "", "compat32"], [215, 9, 1, "", "default"], [215, 9, 1, "", "strict"]], "email.policy.Compat32": [[215, 8, 1, "", "fold"], [215, 8, 1, "", "fold_binary"], [215, 8, 1, "", "header_fetch_parse"], [215, 8, 1, "", "header_source_parse"], [215, 8, 1, "", "header_store_parse"], [215, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[215, 7, 1, "", "content_manager"], [215, 8, 1, "", "fold"], [215, 8, 1, "", "fold_binary"], [215, 7, 1, "", "header_factory"], [215, 8, 1, "", "header_fetch_parse"], [215, 8, 1, "", "header_max_count"], [215, 8, 1, "", "header_source_parse"], [215, 8, 1, "", "header_store_parse"], [215, 7, 1, "", "refold_source"], [215, 7, 1, "", "utf8"]], "email.policy.Policy": [[215, 8, 1, "", "clone"], [215, 7, 1, "", "cte_type"], [215, 8, 1, "", "fold"], [215, 8, 1, "", "fold_binary"], [215, 8, 1, "", "handle_defect"], [215, 8, 1, "", "header_fetch_parse"], [215, 8, 1, "", "header_max_count"], [215, 8, 1, "", "header_source_parse"], [215, 8, 1, "", "header_store_parse"], [215, 7, 1, "", "linesep"], [215, 7, 1, "", "mangle_from_"], [215, 7, 1, "", "max_line_length"], [215, 7, 1, "", "message_factory"], [215, 7, 1, "", "raise_on_defect"], [215, 8, 1, "", "register_defect"]], "email.utils": [[216, 11, 1, "", "collapse_rfc2231_value"], [216, 11, 1, "", "decode_params"], [216, 11, 1, "", "decode_rfc2231"], [216, 11, 1, "", "encode_rfc2231"], [216, 11, 1, "", "format_datetime"], [216, 11, 1, "", "formataddr"], [216, 11, 1, "", "formatdate"], [216, 11, 1, "", "getaddresses"], [216, 11, 1, "", "localtime"], [216, 11, 1, "", "make_msgid"], [216, 11, 1, "", "mktime_tz"], [216, 11, 1, "", "parseaddr"], [216, 11, 1, "", "parsedate"], [216, 11, 1, "", "parsedate_to_datetime"], [216, 11, 1, "", "parsedate_tz"], [216, 11, 1, "", "quote"], [216, 11, 1, "", "unquote"]], "encodings": [[164, 10, 0, "-", "idna"], [164, 10, 0, "-", "mbcs"], [164, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[164, 11, 1, "", "ToASCII"], [164, 11, 1, "", "ToUnicode"], [164, 11, 1, "", "nameprep"]], "ensurepip": [[217, 11, 1, "", "bootstrap"], [217, 11, 1, "", "version"]], "enum": [[218, 12, 1, "", "Enum"], [218, 12, 1, "", "Flag"], [218, 12, 1, "", "IntEnum"], [218, 12, 1, "", "IntFlag"], [218, 12, 1, "", "auto"], [218, 11, 1, "", "unique"]], "errno": [[219, 9, 1, "", "E2BIG"], [219, 9, 1, "", "EACCES"], [219, 9, 1, "", "EADDRINUSE"], [219, 9, 1, "", "EADDRNOTAVAIL"], [219, 9, 1, "", "EADV"], [219, 9, 1, "", "EAFNOSUPPORT"], [219, 9, 1, "", "EAGAIN"], [219, 9, 1, "", "EALREADY"], [219, 9, 1, "", "EBADE"], [219, 9, 1, "", "EBADF"], [219, 9, 1, "", "EBADFD"], [219, 9, 1, "", "EBADMSG"], [219, 9, 1, "", "EBADR"], [219, 9, 1, "", "EBADRQC"], [219, 9, 1, "", "EBADSLT"], [219, 9, 1, "", "EBFONT"], [219, 9, 1, "", "EBUSY"], [219, 9, 1, "", "ECHILD"], [219, 9, 1, "", "ECHRNG"], [219, 9, 1, "", "ECOMM"], [219, 9, 1, "", "ECONNABORTED"], [219, 9, 1, "", "ECONNREFUSED"], [219, 9, 1, "", "ECONNRESET"], [219, 9, 1, "", "EDEADLK"], [219, 9, 1, "", "EDEADLOCK"], [219, 9, 1, "", "EDESTADDRREQ"], [219, 9, 1, "", "EDOM"], [219, 9, 1, "", "EDOTDOT"], [219, 9, 1, "", "EDQUOT"], [219, 9, 1, "", "EEXIST"], [219, 9, 1, "", "EFAULT"], [219, 9, 1, "", "EFBIG"], [219, 9, 1, "", "EHOSTDOWN"], [219, 9, 1, "", "EHOSTUNREACH"], [219, 9, 1, "", "EIDRM"], [219, 9, 1, "", "EILSEQ"], [219, 9, 1, "", "EINPROGRESS"], [219, 9, 1, "", "EINTR"], [219, 9, 1, "", "EINVAL"], [219, 9, 1, "", "EIO"], [219, 9, 1, "", "EISCONN"], [219, 9, 1, "", "EISDIR"], [219, 9, 1, "", "EISNAM"], [219, 9, 1, "", "EL2HLT"], [219, 9, 1, "", "EL2NSYNC"], [219, 9, 1, "", "EL3HLT"], [219, 9, 1, "", "EL3RST"], [219, 9, 1, "", "ELIBACC"], [219, 9, 1, "", "ELIBBAD"], [219, 9, 1, "", "ELIBEXEC"], [219, 9, 1, "", "ELIBMAX"], [219, 9, 1, "", "ELIBSCN"], [219, 9, 1, "", "ELNRNG"], [219, 9, 1, "", "ELOOP"], [219, 9, 1, "", "EMFILE"], [219, 9, 1, "", "EMLINK"], [219, 9, 1, "", "EMSGSIZE"], [219, 9, 1, "", "EMULTIHOP"], [219, 9, 1, "", "ENAMETOOLONG"], [219, 9, 1, "", "ENAVAIL"], [219, 9, 1, "", "ENETDOWN"], [219, 9, 1, "", "ENETRESET"], [219, 9, 1, "", "ENETUNREACH"], [219, 9, 1, "", "ENFILE"], [219, 9, 1, "", "ENOANO"], [219, 9, 1, "", "ENOBUFS"], [219, 9, 1, "", "ENOCSI"], [219, 9, 1, "", "ENODATA"], [219, 9, 1, "", "ENODEV"], [219, 9, 1, "", "ENOENT"], [219, 9, 1, "", "ENOEXEC"], [219, 9, 1, "", "ENOLCK"], [219, 9, 1, "", "ENOLINK"], [219, 9, 1, "", "ENOMEM"], [219, 9, 1, "", "ENOMSG"], [219, 9, 1, "", "ENONET"], [219, 9, 1, "", "ENOPKG"], [219, 9, 1, "", "ENOPROTOOPT"], [219, 9, 1, "", "ENOSPC"], [219, 9, 1, "", "ENOSR"], [219, 9, 1, "", "ENOSTR"], [219, 9, 1, "", "ENOSYS"], [219, 9, 1, "", "ENOTBLK"], [219, 9, 1, "", "ENOTCONN"], [219, 9, 1, "", "ENOTDIR"], [219, 9, 1, "", "ENOTEMPTY"], [219, 9, 1, "", "ENOTNAM"], [219, 9, 1, "", "ENOTSOCK"], [219, 9, 1, "", "ENOTTY"], [219, 9, 1, "", "ENOTUNIQ"], [219, 9, 1, "", "ENXIO"], [219, 9, 1, "", "EOPNOTSUPP"], [219, 9, 1, "", "EOVERFLOW"], [219, 9, 1, "", "EPERM"], [219, 9, 1, "", "EPFNOSUPPORT"], [219, 9, 1, "", "EPIPE"], [219, 9, 1, "", "EPROTO"], [219, 9, 1, "", "EPROTONOSUPPORT"], [219, 9, 1, "", "EPROTOTYPE"], [219, 9, 1, "", "ERANGE"], [219, 9, 1, "", "EREMCHG"], [219, 9, 1, "", "EREMOTE"], [219, 9, 1, "", "EREMOTEIO"], [219, 9, 1, "", "ERESTART"], [219, 9, 1, "", "EROFS"], [219, 9, 1, "", "ESHUTDOWN"], [219, 9, 1, "", "ESOCKTNOSUPPORT"], [219, 9, 1, "", "ESPIPE"], [219, 9, 1, "", "ESRCH"], [219, 9, 1, "", "ESRMNT"], [219, 9, 1, "", "ESTALE"], [219, 9, 1, "", "ESTRPIPE"], [219, 9, 1, "", "ETIME"], [219, 9, 1, "", "ETIMEDOUT"], [219, 9, 1, "", "ETOOMANYREFS"], [219, 9, 1, "", "ETXTBSY"], [219, 9, 1, "", "EUCLEAN"], [219, 9, 1, "", "EUNATCH"], [219, 9, 1, "", "EUSERS"], [219, 9, 1, "", "EWOULDBLOCK"], [219, 9, 1, "", "EXDEV"], [219, 9, 1, "", "EXFULL"], [219, 9, 1, "", "errorcode"]], "faulthandler": [[221, 11, 1, "", "cancel_dump_traceback_later"], [221, 11, 1, "", "disable"], [221, 11, 1, "", "dump_traceback"], [221, 11, 1, "", "dump_traceback_later"], [221, 11, 1, "", "enable"], [221, 11, 1, "", "is_enabled"], [221, 11, 1, "", "register"], [221, 11, 1, "", "unregister"]], "fcntl": [[222, 11, 1, "", "fcntl"], [222, 11, 1, "", "flock"], [222, 11, 1, "", "ioctl"], [222, 11, 1, "", "lockf"]], "filecmp": [[223, 7, 1, "", "DEFAULT_IGNORES"], [223, 11, 1, "", "clear_cache"], [223, 11, 1, "", "cmp"], [223, 11, 1, "", "cmpfiles"], [223, 12, 1, "", "dircmp"]], "filecmp.dircmp": [[223, 7, 1, "", "common"], [223, 7, 1, "", "common_dirs"], [223, 7, 1, "", "common_files"], [223, 7, 1, "", "common_funny"], [223, 7, 1, "", "diff_files"], [223, 7, 1, "", "funny_files"], [223, 7, 1, "", "left"], [223, 7, 1, "", "left_list"], [223, 7, 1, "", "left_only"], [223, 8, 1, "", "report"], [223, 8, 1, "", "report_full_closure"], [223, 8, 1, "", "report_partial_closure"], [223, 7, 1, "", "right"], [223, 7, 1, "", "right_list"], [223, 7, 1, "", "right_only"], [223, 7, 1, "", "same_files"], [223, 7, 1, "", "subdirs"]], "fileinput": [[225, 12, 1, "", "FileInput"], [225, 11, 1, "", "close"], [225, 11, 1, "", "filelineno"], [225, 11, 1, "", "filename"], [225, 11, 1, "", "fileno"], [225, 11, 1, "", "hook_compressed"], [225, 11, 1, "", "hook_encoded"], [225, 11, 1, "", "input"], [225, 11, 1, "", "isfirstline"], [225, 11, 1, "", "isstdin"], [225, 11, 1, "", "lineno"], [225, 11, 1, "", "nextfile"]], "float": [[351, 8, 1, "", "as_integer_ratio"], [351, 8, 1, "", "fromhex"], [351, 8, 1, "", "hex"], [351, 8, 1, "", "is_integer"]], "fnmatch": [[227, 11, 1, "", "filter"], [227, 11, 1, "", "fnmatch"], [227, 11, 1, "", "fnmatchcase"], [227, 11, 1, "", "translate"]], "fractions": [[228, 12, 1, "", "Fraction"]], "fractions.Fraction": [[228, 8, 1, "", "__ceil__"], [228, 8, 1, "", "__floor__"], [228, 8, 1, "", "__round__"], [228, 8, 1, "", "as_integer_ratio"], [228, 7, 1, "", "denominator"], [228, 8, 1, "", "from_decimal"], [228, 8, 1, "", "from_float"], [228, 8, 1, "", "limit_denominator"], [228, 7, 1, "", "numerator"]], "frame": [[432, 8, 1, "", "clear"]], "frozenset": [[351, 8, 1, "", "add"], [351, 8, 1, "", "clear"], [351, 8, 1, "", "copy"], [351, 8, 1, "", "difference"], [351, 8, 1, "", "difference_update"], [351, 8, 1, "", "discard"], [351, 8, 1, "", "intersection"], [351, 8, 1, "", "intersection_update"], [351, 8, 1, "", "isdisjoint"], [351, 8, 1, "", "issubset"], [351, 8, 1, "", "issuperset"], [351, 8, 1, "", "pop"], [351, 8, 1, "", "remove"], [351, 8, 1, "", "symmetric_difference"], [351, 8, 1, "", "symmetric_difference_update"], [351, 8, 1, "", "union"], [351, 8, 1, "", "update"]], "ftplib": [[230, 12, 1, "", "FTP"], [230, 12, 1, "", "FTP_TLS"], [230, 9, 1, "", "all_errors"], [230, 6, 1, "", "error_perm"], [230, 6, 1, "", "error_proto"], [230, 6, 1, "", "error_reply"], [230, 6, 1, "", "error_temp"]], "ftplib.FTP": [[230, 8, 1, "", "abort"], [230, 8, 1, "", "close"], [230, 8, 1, "", "connect"], [230, 8, 1, "", "cwd"], [230, 8, 1, "", "delete"], [230, 8, 1, "", "dir"], [230, 8, 1, "", "getwelcome"], [230, 8, 1, "", "login"], [230, 8, 1, "", "mkd"], [230, 8, 1, "", "mlsd"], [230, 8, 1, "", "nlst"], [230, 8, 1, "", "ntransfercmd"], [230, 8, 1, "", "pwd"], [230, 8, 1, "", "quit"], [230, 8, 1, "", "rename"], [230, 8, 1, "", "retrbinary"], [230, 8, 1, "", "retrlines"], [230, 8, 1, "", "rmd"], [230, 8, 1, "", "sendcmd"], [230, 8, 1, "", "set_debuglevel"], [230, 8, 1, "", "set_pasv"], [230, 8, 1, "", "size"], [230, 8, 1, "", "storbinary"], [230, 8, 1, "", "storlines"], [230, 8, 1, "", "transfercmd"], [230, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[230, 8, 1, "", "auth"], [230, 8, 1, "", "ccc"], [230, 8, 1, "", "prot_c"], [230, 8, 1, "", "prot_p"], [230, 7, 1, "", "ssl_version"]], "functools": [[233, 11, 1, "", "cache"], [233, 11, 1, "", "cached_property"], [233, 11, 1, "", "cmp_to_key"], [233, 11, 1, "", "lru_cache"], [233, 11, 1, "", "partial"], [233, 12, 1, "", "partialmethod"], [233, 11, 1, "", "reduce"], [233, 11, 1, "", "singledispatch"], [233, 12, 1, "", "singledispatchmethod"], [233, 11, 1, "", "total_ordering"], [233, 11, 1, "", "update_wrapper"], [233, 11, 1, "", "wraps"]], "functools.partial": [[233, 7, 1, "", "args"], [233, 7, 1, "", "func"], [233, 7, 1, "", "keywords"]], "gc": [[234, 9, 1, "", "DEBUG_COLLECTABLE"], [234, 9, 1, "", "DEBUG_LEAK"], [234, 9, 1, "", "DEBUG_SAVEALL"], [234, 9, 1, "", "DEBUG_STATS"], [234, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [234, 9, 1, "", "callbacks"], [234, 11, 1, "", "collect"], [234, 11, 1, "", "disable"], [234, 11, 1, "", "enable"], [234, 11, 1, "", "freeze"], [234, 9, 1, "", "garbage"], [234, 11, 1, "", "get_count"], [234, 11, 1, "", "get_debug"], [234, 11, 1, "", "get_freeze_count"], [234, 11, 1, "", "get_objects"], [234, 11, 1, "", "get_referents"], [234, 11, 1, "", "get_referrers"], [234, 11, 1, "", "get_stats"], [234, 11, 1, "", "get_threshold"], [234, 11, 1, "", "is_finalized"], [234, 11, 1, "", "is_tracked"], [234, 11, 1, "", "isenabled"], [234, 11, 1, "", "set_debug"], [234, 11, 1, "", "set_threshold"], [234, 11, 1, "", "unfreeze"]], "generator": [[434, 8, 1, "", "__next__"], [434, 8, 1, "", "close"], [434, 8, 1, "", "send"], [434, 8, 1, "", "throw"]], "genericalias": [[351, 7, 1, "", "__args__"], [351, 7, 1, "", "__origin__"], [351, 7, 1, "", "__parameters__"]], "getopt": [[235, 6, 1, "", "GetoptError"], [235, 6, 1, "", "error"], [235, 11, 1, "", "getopt"], [235, 11, 1, "", "gnu_getopt"]], "getpass": [[236, 6, 1, "", "GetPassWarning"], [236, 11, 1, "", "getpass"], [236, 11, 1, "", "getuser"]], "gettext": [[237, 12, 1, "", "GNUTranslations"], [237, 12, 1, "", "NullTranslations"], [237, 11, 1, "", "bind_textdomain_codeset"], [237, 11, 1, "", "bindtextdomain"], [237, 11, 1, "", "dgettext"], [237, 11, 1, "", "dngettext"], [237, 11, 1, "", "dnpgettext"], [237, 11, 1, "", "dpgettext"], [237, 11, 1, "", "find"], [237, 11, 1, "", "gettext"], [237, 11, 1, "", "install"], [237, 11, 1, "", "ldgettext"], [237, 11, 1, "", "ldngettext"], [237, 11, 1, "", "lgettext"], [237, 11, 1, "", "lngettext"], [237, 11, 1, "", "ngettext"], [237, 11, 1, "", "npgettext"], [237, 11, 1, "", "pgettext"], [237, 11, 1, "", "textdomain"], [237, 11, 1, "", "translation"]], "gettext.GNUTranslations": [[237, 8, 1, "", "gettext"], [237, 8, 1, "", "lgettext"], [237, 8, 1, "", "lngettext"], [237, 8, 1, "", "ngettext"], [237, 8, 1, "", "npgettext"], [237, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[237, 8, 1, "", "_parse"], [237, 8, 1, "", "add_fallback"], [237, 8, 1, "", "charset"], [237, 8, 1, "", "gettext"], [237, 8, 1, "", "info"], [237, 8, 1, "", "install"], [237, 8, 1, "", "lgettext"], [237, 8, 1, "", "lngettext"], [237, 8, 1, "", "ngettext"], [237, 8, 1, "", "npgettext"], [237, 8, 1, "", "output_charset"], [237, 8, 1, "", "pgettext"], [237, 8, 1, "", "set_output_charset"]], "glob": [[238, 11, 1, "", "escape"], [238, 11, 1, "", "glob"], [238, 11, 1, "", "iglob"]], "graphlib": [[239, 6, 1, "", "CycleError"], [239, 12, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[239, 8, 1, "", "add"], [239, 8, 1, "", "done"], [239, 8, 1, "", "get_ready"], [239, 8, 1, "", "is_active"], [239, 8, 1, "", "prepare"], [239, 8, 1, "", "static_order"]], "grp": [[240, 11, 1, "", "getgrall"], [240, 11, 1, "", "getgrgid"], [240, 11, 1, "", "getgrnam"]], "gzip": [[241, 6, 1, "", "BadGzipFile"], [241, 12, 1, "", "GzipFile"], [241, 11, 1, "", "compress"], [241, 11, 1, "", "decompress"], [241, 11, 1, "", "open"], [241, 14, 1, "cmdoption-gzip-best", "--best"], [241, 14, 1, "cmdoption-gzip-d", "--decompress"], [241, 14, 1, "cmdoption-gzip-fast", "--fast"], [241, 14, 1, "cmdoption-gzip-h", "--help"], [241, 14, 1, "cmdoption-gzip-d", "-d"], [241, 14, 1, "cmdoption-gzip-h", "-h"], [241, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[241, 7, 1, "", "mtime"], [241, 8, 1, "", "peek"]], "hashlib": [[242, 9, 1, "", "algorithms_available"], [242, 9, 1, "", "algorithms_guaranteed"], [242, 11, 1, "", "blake2b"], [242, 11, 1, "", "blake2s"], [242, 11, 1, "", "new"], [242, 11, 1, "", "pbkdf2_hmac"], [242, 11, 1, "", "scrypt"]], "hashlib.blake2b": [[242, 9, 1, "", "MAX_DIGEST_SIZE"], [242, 9, 1, "", "MAX_KEY_SIZE"], [242, 9, 1, "", "PERSON_SIZE"], [242, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[242, 9, 1, "", "MAX_DIGEST_SIZE"], [242, 9, 1, "", "MAX_KEY_SIZE"], [242, 9, 1, "", "PERSON_SIZE"], [242, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[242, 9, 1, "", "block_size"], [242, 8, 1, "", "copy"], [242, 8, 1, "", "digest"], [242, 9, 1, "", "digest_size"], [242, 8, 1, "", "hexdigest"], [242, 7, 1, "", "name"], [242, 8, 1, "", "update"]], "hashlib.shake": [[242, 8, 1, "", "digest"], [242, 8, 1, "", "hexdigest"]], "heapq": [[243, 11, 1, "", "heapify"], [243, 11, 1, "", "heappop"], [243, 11, 1, "", "heappush"], [243, 11, 1, "", "heappushpop"], [243, 11, 1, "", "heapreplace"], [243, 11, 1, "", "merge"], [243, 11, 1, "", "nlargest"], [243, 11, 1, "", "nsmallest"]], "hmac.HMAC": [[244, 7, 1, "", "block_size"], [244, 8, 1, "", "copy"], [244, 8, 1, "", "digest"], [244, 7, 1, "", "digest_size"], [244, 8, 1, "", "hexdigest"], [244, 7, 1, "", "name"], [244, 8, 1, "", "update"]], "hmac": [[244, 11, 1, "", "compare_digest"], [244, 11, 1, "", "digest"], [244, 11, 1, "", "new"]], "html": [[246, 10, 0, "-", "entities"], [245, 11, 1, "", "escape"], [247, 10, 0, "-", "parser"], [245, 11, 1, "", "unescape"]], "html.entities": [[246, 9, 1, "", "codepoint2name"], [246, 9, 1, "", "entitydefs"], [246, 9, 1, "", "html5"], [246, 9, 1, "", "name2codepoint"]], "html.parser": [[247, 12, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[247, 8, 1, "", "close"], [247, 8, 1, "", "feed"], [247, 8, 1, "", "get_starttag_text"], [247, 8, 1, "", "getpos"], [247, 8, 1, "", "handle_charref"], [247, 8, 1, "", "handle_comment"], [247, 8, 1, "", "handle_data"], [247, 8, 1, "", "handle_decl"], [247, 8, 1, "", "handle_endtag"], [247, 8, 1, "", "handle_entityref"], [247, 8, 1, "", "handle_pi"], [247, 8, 1, "", "handle_startendtag"], [247, 8, 1, "", "handle_starttag"], [247, 8, 1, "", "reset"], [247, 8, 1, "", "unknown_decl"]], "http": [[248, 12, 1, "", "HTTPStatus"], [249, 10, 0, "-", "client"], [250, 10, 0, "-", "cookiejar"], [251, 10, 0, "-", "cookies"], [252, 10, 0, "-", "server"]], "http.client": [[249, 6, 1, "", "BadStatusLine"], [249, 6, 1, "", "CannotSendHeader"], [249, 6, 1, "", "CannotSendRequest"], [249, 12, 1, "", "HTTPConnection"], [249, 6, 1, "", "HTTPException"], [249, 12, 1, "", "HTTPResponse"], [249, 12, 1, "", "HTTPSConnection"], [249, 9, 1, "", "HTTPS_PORT"], [249, 9, 1, "", "HTTP_PORT"], [249, 6, 1, "", "ImproperConnectionState"], [249, 6, 1, "", "IncompleteRead"], [249, 6, 1, "", "InvalidURL"], [249, 6, 1, "", "LineTooLong"], [249, 6, 1, "", "NotConnected"], [249, 6, 1, "", "RemoteDisconnected"], [249, 6, 1, "", "ResponseNotReady"], [249, 6, 1, "", "UnimplementedFileMode"], [249, 6, 1, "", "UnknownProtocol"], [249, 6, 1, "", "UnknownTransferEncoding"], [249, 11, 1, "", "parse_headers"], [249, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[249, 7, 1, "", "blocksize"], [249, 8, 1, "", "close"], [249, 8, 1, "", "connect"], [249, 8, 1, "", "endheaders"], [249, 8, 1, "", "getresponse"], [249, 8, 1, "", "putheader"], [249, 8, 1, "", "putrequest"], [249, 8, 1, "", "request"], [249, 8, 1, "", "send"], [249, 8, 1, "", "set_debuglevel"], [249, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[249, 7, 1, "", "closed"], [249, 7, 1, "", "debuglevel"], [249, 8, 1, "", "fileno"], [249, 8, 1, "", "getheader"], [249, 8, 1, "", "getheaders"], [249, 8, 1, "", "getstatus"], [249, 8, 1, "", "geturl"], [249, 7, 1, "", "headers"], [249, 8, 1, "", "info"], [249, 7, 1, "", "msg"], [249, 8, 1, "", "read"], [249, 8, 1, "", "readinto"], [249, 7, 1, "", "reason"], [249, 7, 1, "", "status"], [249, 7, 1, "", "url"], [249, 7, 1, "", "version"]], "http.cookiejar": [[250, 12, 1, "", "Cookie"], [250, 12, 1, "", "CookieJar"], [250, 12, 1, "", "CookiePolicy"], [250, 12, 1, "", "DefaultCookiePolicy"], [250, 12, 1, "", "FileCookieJar"], [250, 12, 1, "", "LWPCookieJar"], [250, 6, 1, "", "LoadError"], [250, 12, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[250, 7, 1, "", "comment"], [250, 7, 1, "", "comment_url"], [250, 7, 1, "", "discard"], [250, 7, 1, "", "domain_initial_dot"], [250, 7, 1, "", "domain_specified"], [250, 7, 1, "", "expires"], [250, 8, 1, "", "get_nonstandard_attr"], [250, 8, 1, "", "has_nonstandard_attr"], [250, 8, 1, "", "is_expired"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"], [250, 7, 1, "", "port"], [250, 7, 1, "", "port_specified"], [250, 7, 1, "", "rfc2109"], [250, 7, 1, "", "secure"], [250, 8, 1, "", "set_nonstandard_attr"], [250, 7, 1, "", "value"], [250, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[250, 8, 1, "", "add_cookie_header"], [250, 8, 1, "", "clear"], [250, 8, 1, "", "clear_session_cookies"], [250, 8, 1, "", "extract_cookies"], [250, 8, 1, "", "make_cookies"], [250, 8, 1, "", "set_cookie"], [250, 8, 1, "", "set_cookie_if_ok"], [250, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[250, 8, 1, "", "domain_return_ok"], [250, 7, 1, "", "hide_cookie2"], [250, 7, 1, "", "netscape"], [250, 8, 1, "", "path_return_ok"], [250, 8, 1, "", "return_ok"], [250, 7, 1, "", "rfc2965"], [250, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[250, 7, 1, "", "DomainLiberal"], [250, 7, 1, "", "DomainRFC2965Match"], [250, 7, 1, "", "DomainStrict"], [250, 7, 1, "", "DomainStrictNoDots"], [250, 7, 1, "", "DomainStrictNonDomain"], [250, 8, 1, "", "allowed_domains"], [250, 8, 1, "", "blocked_domains"], [250, 8, 1, "", "is_blocked"], [250, 8, 1, "", "is_not_allowed"], [250, 7, 1, "", "rfc2109_as_netscape"], [250, 8, 1, "", "set_allowed_domains"], [250, 8, 1, "", "set_blocked_domains"], [250, 7, 1, "", "strict_domain"], [250, 7, 1, "", "strict_ns_domain"], [250, 7, 1, "", "strict_ns_set_initial_dollar"], [250, 7, 1, "", "strict_ns_set_path"], [250, 7, 1, "", "strict_ns_unverifiable"], [250, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[250, 7, 1, "", "delayload"], [250, 7, 1, "", "filename"], [250, 8, 1, "", "load"], [250, 8, 1, "", "revert"], [250, 8, 1, "", "save"]], "http.cookies": [[251, 12, 1, "", "BaseCookie"], [251, 6, 1, "", "CookieError"], [251, 12, 1, "", "Morsel"], [251, 12, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[251, 8, 1, "", "js_output"], [251, 8, 1, "", "load"], [251, 8, 1, "", "output"], [251, 8, 1, "", "value_decode"], [251, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[251, 8, 1, "", "OutputString"], [251, 7, 1, "", "coded_value"], [251, 8, 1, "", "copy"], [251, 8, 1, "", "isReservedKey"], [251, 8, 1, "", "js_output"], [251, 7, 1, "", "key"], [251, 8, 1, "", "output"], [251, 8, 1, "", "set"], [251, 8, 1, "", "setdefault"], [251, 8, 1, "", "update"], [251, 7, 1, "", "value"]], "http.server": [[252, 12, 1, "", "BaseHTTPRequestHandler"], [252, 12, 1, "", "CGIHTTPRequestHandler"], [252, 12, 1, "", "HTTPServer"], [252, 12, 1, "", "SimpleHTTPRequestHandler"], [252, 12, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[252, 7, 1, "", "MessageClass"], [252, 8, 1, "", "address_string"], [252, 7, 1, "", "client_address"], [252, 7, 1, "", "close_connection"], [252, 7, 1, "", "command"], [252, 8, 1, "", "date_time_string"], [252, 8, 1, "", "end_headers"], [252, 7, 1, "", "error_content_type"], [252, 7, 1, "", "error_message_format"], [252, 8, 1, "", "flush_headers"], [252, 8, 1, "", "handle"], [252, 8, 1, "", "handle_expect_100"], [252, 8, 1, "", "handle_one_request"], [252, 7, 1, "", "headers"], [252, 8, 1, "", "log_date_time_string"], [252, 8, 1, "", "log_error"], [252, 8, 1, "", "log_message"], [252, 8, 1, "", "log_request"], [252, 7, 1, "", "path"], [252, 7, 1, "", "protocol_version"], [252, 7, 1, "", "request_version"], [252, 7, 1, "", "requestline"], [252, 7, 1, "", "responses"], [252, 7, 1, "", "rfile"], [252, 8, 1, "", "send_error"], [252, 8, 1, "", "send_header"], [252, 8, 1, "", "send_response"], [252, 8, 1, "", "send_response_only"], [252, 7, 1, "", "server"], [252, 7, 1, "", "server_version"], [252, 7, 1, "", "sys_version"], [252, 8, 1, "", "version_string"], [252, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[252, 7, 1, "", "cgi_directories"], [252, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[252, 8, 1, "", "do_GET"], [252, 8, 1, "", "do_HEAD"], [252, 7, 1, "", "extensions_map"], [252, 7, 1, "", "server_version"]], "imaplib": [[255, 12, 1, "", "IMAP4"], [255, 12, 1, "", "IMAP4_SSL"], [255, 12, 1, "", "IMAP4_stream"], [255, 11, 1, "", "Int2AP"], [255, 11, 1, "", "Internaldate2tuple"], [255, 11, 1, "", "ParseFlags"], [255, 11, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[255, 7, 1, "", "PROTOCOL_VERSION"], [255, 6, 1, "", "abort"], [255, 8, 1, "", "append"], [255, 8, 1, "", "authenticate"], [255, 8, 1, "", "check"], [255, 8, 1, "", "close"], [255, 8, 1, "", "copy"], [255, 8, 1, "", "create"], [255, 7, 1, "", "debug"], [255, 8, 1, "", "delete"], [255, 8, 1, "", "deleteacl"], [255, 8, 1, "", "enable"], [255, 6, 1, "", "error"], [255, 8, 1, "", "expunge"], [255, 8, 1, "", "fetch"], [255, 8, 1, "", "getacl"], [255, 8, 1, "", "getannotation"], [255, 8, 1, "", "getquota"], [255, 8, 1, "", "getquotaroot"], [255, 8, 1, "", "list"], [255, 8, 1, "", "login"], [255, 8, 1, "", "login_cram_md5"], [255, 8, 1, "", "logout"], [255, 8, 1, "", "lsub"], [255, 8, 1, "", "myrights"], [255, 8, 1, "", "namespace"], [255, 8, 1, "", "noop"], [255, 8, 1, "", "open"], [255, 8, 1, "", "partial"], [255, 8, 1, "", "proxyauth"], [255, 8, 1, "", "read"], [255, 8, 1, "", "readline"], [255, 6, 1, "", "readonly"], [255, 8, 1, "", "recent"], [255, 8, 1, "", "rename"], [255, 8, 1, "", "response"], [255, 8, 1, "", "search"], [255, 8, 1, "", "select"], [255, 8, 1, "", "send"], [255, 8, 1, "", "setacl"], [255, 8, 1, "", "setannotation"], [255, 8, 1, "", "setquota"], [255, 8, 1, "", "shutdown"], [255, 8, 1, "", "socket"], [255, 8, 1, "", "sort"], [255, 8, 1, "", "starttls"], [255, 8, 1, "", "status"], [255, 8, 1, "", "store"], [255, 8, 1, "", "subscribe"], [255, 8, 1, "", "thread"], [255, 8, 1, "", "uid"], [255, 8, 1, "", "unselect"], [255, 8, 1, "", "unsubscribe"], [255, 7, 1, "", "utf8_enabled"], [255, 8, 1, "", "xatom"]], "imghdr": [[256, 9, 1, "", "tests"], [256, 11, 1, "", "what"]], "imp": [[257, 9, 1, "", "C_BUILTIN"], [257, 9, 1, "", "C_EXTENSION"], [257, 12, 1, "", "NullImporter"], [257, 9, 1, "", "PKG_DIRECTORY"], [257, 9, 1, "", "PY_COMPILED"], [257, 9, 1, "", "PY_FROZEN"], [257, 9, 1, "", "PY_SOURCE"], [257, 11, 1, "", "acquire_lock"], [257, 11, 1, "", "cache_from_source"], [257, 11, 1, "", "find_module"], [257, 11, 1, "", "get_magic"], [257, 11, 1, "", "get_suffixes"], [257, 11, 1, "", "get_tag"], [257, 11, 1, "", "load_module"], [257, 11, 1, "", "lock_held"], [257, 11, 1, "", "new_module"], [257, 11, 1, "", "release_lock"], [257, 11, 1, "", "reload"], [257, 11, 1, "", "source_from_cache"]], "imp.NullImporter": [[257, 8, 1, "", "find_module"]], "importlib": [[258, 11, 1, "", "__import__"], [258, 10, 0, "-", "abc"], [258, 11, 1, "", "find_loader"], [258, 11, 1, "", "import_module"], [258, 11, 1, "", "invalidate_caches"], [258, 10, 0, "-", "machinery"], [259, 10, 0, "-", "metadata"], [258, 11, 1, "", "reload"], [258, 10, 0, "-", "resources"], [258, 10, 0, "-", "util"]], "importlib.abc": [[258, 12, 1, "", "ExecutionLoader"], [258, 12, 1, "", "FileLoader"], [258, 12, 1, "", "Finder"], [258, 12, 1, "", "InspectLoader"], [258, 12, 1, "", "Loader"], [258, 12, 1, "", "MetaPathFinder"], [258, 12, 1, "", "PathEntryFinder"], [258, 12, 1, "", "ResourceLoader"], [258, 12, 1, "", "ResourceReader"], [258, 12, 1, "", "SourceLoader"], [258, 12, 1, "", "Traversable"], [258, 12, 1, "", "TraversableResources"]], "importlib.abc.ExecutionLoader": [[258, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[258, 8, 1, "", "get_data"], [258, 8, 1, "", "get_filename"], [258, 8, 1, "", "load_module"], [258, 7, 1, "", "name"], [258, 7, 1, "", "path"]], "importlib.abc.Finder": [[258, 8, 1, "", "find_module"]], "importlib.abc.InspectLoader": [[258, 8, 1, "", "exec_module"], [258, 8, 1, "", "get_code"], [258, 8, 1, "", "get_source"], [258, 8, 1, "", "is_package"], [258, 8, 1, "", "load_module"], [258, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[258, 8, 1, "", "create_module"], [258, 8, 1, "", "exec_module"], [258, 8, 1, "", "load_module"], [258, 8, 1, "", "module_repr"]], "importlib.abc.MetaPathFinder": [[258, 8, 1, "", "find_module"], [258, 8, 1, "", "find_spec"], [258, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[258, 8, 1, "", "find_loader"], [258, 8, 1, "", "find_module"], [258, 8, 1, "", "find_spec"], [258, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[258, 8, 1, "", "get_data"]], "importlib.abc.ResourceReader": [[258, 8, 1, "", "contents"], [258, 8, 1, "", "is_resource"], [258, 8, 1, "", "open_resource"], [258, 8, 1, "", "resource_path"]], "importlib.abc.SourceLoader": [[258, 8, 1, "", "exec_module"], [258, 8, 1, "", "get_code"], [258, 8, 1, "", "get_source"], [258, 8, 1, "", "is_package"], [258, 8, 1, "", "load_module"], [258, 8, 1, "", "path_mtime"], [258, 8, 1, "", "path_stats"], [258, 8, 1, "", "set_data"]], "importlib.abc.Traversable": [[258, 8, 1, "", "__truediv__"], [258, 8, 1, "", "is_dir"], [258, 8, 1, "", "is_file"], [258, 8, 1, "", "iterdir"], [258, 8, 1, "", "joinpath"], [258, 8, 1, "", "name"], [258, 8, 1, "", "open"], [258, 8, 1, "", "read_bytes"], [258, 8, 1, "", "read_text"]], "importlib.machinery": [[258, 7, 1, "", "BYTECODE_SUFFIXES"], [258, 12, 1, "", "BuiltinImporter"], [258, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [258, 7, 1, "", "EXTENSION_SUFFIXES"], [258, 12, 1, "", "ExtensionFileLoader"], [258, 12, 1, "", "FileFinder"], [258, 12, 1, "", "FrozenImporter"], [258, 12, 1, "", "ModuleSpec"], [258, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [258, 12, 1, "", "PathFinder"], [258, 7, 1, "", "SOURCE_SUFFIXES"], [258, 12, 1, "", "SourceFileLoader"], [258, 12, 1, "", "SourcelessFileLoader"], [258, 12, 1, "", "WindowsRegistryFinder"], [258, 11, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[258, 8, 1, "", "create_module"], [258, 8, 1, "", "exec_module"], [258, 8, 1, "", "get_code"], [258, 8, 1, "", "get_filename"], [258, 8, 1, "", "get_source"], [258, 8, 1, "", "is_package"], [258, 7, 1, "", "name"], [258, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[258, 8, 1, "", "find_loader"], [258, 8, 1, "", "find_spec"], [258, 8, 1, "", "invalidate_caches"], [258, 7, 1, "", "path"], [258, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[258, 7, 1, "", "cached"], [258, 7, 1, "", "has_location"], [258, 7, 1, "", "loader"], [258, 7, 1, "", "loader_state"], [258, 7, 1, "", "name"], [258, 7, 1, "", "origin"], [258, 7, 1, "", "parent"], [258, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[258, 8, 1, "", "find_module"], [258, 8, 1, "", "find_spec"], [258, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[258, 8, 1, "", "is_package"], [258, 8, 1, "", "load_module"], [258, 7, 1, "", "name"], [258, 7, 1, "", "path"], [258, 8, 1, "", "path_stats"], [258, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[258, 8, 1, "", "get_code"], [258, 8, 1, "", "get_source"], [258, 8, 1, "", "is_package"], [258, 8, 1, "", "load_module"], [258, 7, 1, "", "name"], [258, 7, 1, "", "path"]], "importlib.resources": [[258, 9, 1, "", "Package"], [258, 9, 1, "", "Resource"], [258, 11, 1, "", "as_file"], [258, 11, 1, "", "contents"], [258, 11, 1, "", "files"], [258, 11, 1, "", "is_resource"], [258, 11, 1, "", "open_binary"], [258, 11, 1, "", "open_text"], [258, 11, 1, "", "path"], [258, 11, 1, "", "read_binary"], [258, 11, 1, "", "read_text"]], "importlib.util": [[258, 12, 1, "", "LazyLoader"], [258, 7, 1, "", "MAGIC_NUMBER"], [258, 11, 1, "", "cache_from_source"], [258, 11, 1, "", "decode_source"], [258, 11, 1, "", "find_spec"], [258, 11, 1, "", "module_for_loader"], [258, 11, 1, "", "module_from_spec"], [258, 11, 1, "", "resolve_name"], [258, 11, 1, "", "set_loader"], [258, 11, 1, "", "set_package"], [258, 11, 1, "", "source_from_cache"], [258, 11, 1, "", "source_hash"], [258, 11, 1, "", "spec_from_file_location"], [258, 11, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[258, 8, 1, "", "factory"]], "inspect": [[261, 12, 1, "", "BoundArguments"], [261, 9, 1, "", "CO_ASYNC_GENERATOR"], [261, 9, 1, "", "CO_COROUTINE"], [261, 9, 1, "", "CO_GENERATOR"], [261, 9, 1, "", "CO_ITERABLE_COROUTINE"], [261, 9, 1, "", "CO_NESTED"], [261, 9, 1, "", "CO_NEWLOCALS"], [261, 9, 1, "", "CO_NOFREE"], [261, 9, 1, "", "CO_OPTIMIZED"], [261, 9, 1, "", "CO_VARARGS"], [261, 9, 1, "", "CO_VARKEYWORDS"], [261, 12, 1, "", "Parameter"], [261, 12, 1, "", "Signature"], [261, 11, 1, "", "cleandoc"], [261, 11, 1, "", "currentframe"], [261, 11, 1, "", "formatargspec"], [261, 11, 1, "", "formatargvalues"], [261, 11, 1, "", "get_annotations"], [261, 11, 1, "", "getargspec"], [261, 11, 1, "", "getargvalues"], [261, 11, 1, "", "getattr_static"], [261, 11, 1, "", "getcallargs"], [261, 11, 1, "", "getclasstree"], [261, 11, 1, "", "getclosurevars"], [261, 11, 1, "", "getcomments"], [261, 11, 1, "", "getcoroutinelocals"], [261, 11, 1, "", "getcoroutinestate"], [261, 11, 1, "", "getdoc"], [261, 11, 1, "", "getfile"], [261, 11, 1, "", "getframeinfo"], [261, 11, 1, "", "getfullargspec"], [261, 11, 1, "", "getgeneratorlocals"], [261, 11, 1, "", "getgeneratorstate"], [261, 11, 1, "", "getinnerframes"], [261, 11, 1, "", "getmembers"], [261, 11, 1, "", "getmodule"], [261, 11, 1, "", "getmodulename"], [261, 11, 1, "", "getmro"], [261, 11, 1, "", "getouterframes"], [261, 11, 1, "", "getsource"], [261, 11, 1, "", "getsourcefile"], [261, 11, 1, "", "getsourcelines"], [261, 11, 1, "", "isabstract"], [261, 11, 1, "", "isasyncgen"], [261, 11, 1, "", "isasyncgenfunction"], [261, 11, 1, "", "isawaitable"], [261, 11, 1, "", "isbuiltin"], [261, 11, 1, "", "isclass"], [261, 11, 1, "", "iscode"], [261, 11, 1, "", "iscoroutine"], [261, 11, 1, "", "iscoroutinefunction"], [261, 11, 1, "", "isdatadescriptor"], [261, 11, 1, "", "isframe"], [261, 11, 1, "", "isfunction"], [261, 11, 1, "", "isgenerator"], [261, 11, 1, "", "isgeneratorfunction"], [261, 11, 1, "", "isgetsetdescriptor"], [261, 11, 1, "", "ismemberdescriptor"], [261, 11, 1, "", "ismethod"], [261, 11, 1, "", "ismethoddescriptor"], [261, 11, 1, "", "ismodule"], [261, 11, 1, "", "isroutine"], [261, 11, 1, "", "istraceback"], [261, 11, 1, "", "signature"], [261, 11, 1, "", "stack"], [261, 11, 1, "", "trace"], [261, 11, 1, "", "unwrap"], [261, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[261, 8, 1, "", "apply_defaults"], [261, 7, 1, "", "args"], [261, 7, 1, "", "arguments"], [261, 7, 1, "", "kwargs"], [261, 7, 1, "", "signature"]], "inspect.Parameter": [[261, 7, 1, "", "annotation"], [261, 7, 1, "", "default"], [261, 7, 1, "", "empty"], [261, 7, 1, "", "kind"], [261, 7, 1, "", "name"], [261, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[261, 7, 1, "", "description"]], "inspect.Signature": [[261, 8, 1, "", "bind"], [261, 8, 1, "", "bind_partial"], [261, 7, 1, "", "empty"], [261, 8, 1, "", "from_callable"], [261, 7, 1, "", "parameters"], [261, 8, 1, "", "replace"], [261, 7, 1, "", "return_annotation"]], "instance": [[351, 7, 1, "", "__class__"]], "int": [[351, 8, 1, "", "as_integer_ratio"], [351, 8, 1, "", "bit_count"], [351, 8, 1, "", "bit_length"], [351, 8, 1, "", "from_bytes"], [351, 8, 1, "", "to_bytes"]], "io": [[264, 6, 1, "", "BlockingIOError"], [264, 12, 1, "", "BufferedIOBase"], [264, 12, 1, "", "BufferedRWPair"], [264, 12, 1, "", "BufferedRandom"], [264, 12, 1, "", "BufferedReader"], [264, 12, 1, "", "BufferedWriter"], [264, 12, 1, "", "BytesIO"], [264, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [264, 12, 1, "", "FileIO"], [264, 12, 1, "", "IOBase"], [264, 12, 1, "", "IncrementalNewlineDecoder"], [264, 12, 1, "", "RawIOBase"], [264, 12, 1, "", "StringIO"], [264, 12, 1, "", "TextIOBase"], [264, 12, 1, "", "TextIOWrapper"], [264, 6, 1, "", "UnsupportedOperation"], [264, 11, 1, "", "open"], [264, 11, 1, "", "open_code"], [264, 11, 1, "", "text_encoding"]], "io.BufferedIOBase": [[264, 8, 1, "", "detach"], [264, 7, 1, "", "raw"], [264, 8, 1, "", "read"], [264, 8, 1, "", "read1"], [264, 8, 1, "", "readinto"], [264, 8, 1, "", "readinto1"], [264, 8, 1, "", "write"]], "io.BufferedReader": [[264, 8, 1, "", "peek"], [264, 8, 1, "", "read"], [264, 8, 1, "", "read1"]], "io.BufferedWriter": [[264, 8, 1, "", "flush"], [264, 8, 1, "", "write"]], "io.BytesIO": [[264, 8, 1, "", "getbuffer"], [264, 8, 1, "", "getvalue"], [264, 8, 1, "", "read1"], [264, 8, 1, "", "readinto1"]], "io.FileIO": [[264, 7, 1, "", "mode"], [264, 7, 1, "", "name"]], "io.IOBase": [[264, 8, 1, "", "__del__"], [264, 8, 1, "", "close"], [264, 7, 1, "", "closed"], [264, 8, 1, "", "fileno"], [264, 8, 1, "", "flush"], [264, 8, 1, "", "isatty"], [264, 8, 1, "", "readable"], [264, 8, 1, "", "readline"], [264, 8, 1, "", "readlines"], [264, 8, 1, "", "seek"], [264, 8, 1, "", "seekable"], [264, 8, 1, "", "tell"], [264, 8, 1, "", "truncate"], [264, 8, 1, "", "writable"], [264, 8, 1, "", "writelines"]], "io.RawIOBase": [[264, 8, 1, "", "read"], [264, 8, 1, "", "readall"], [264, 8, 1, "", "readinto"], [264, 8, 1, "", "write"]], "io.StringIO": [[264, 8, 1, "", "getvalue"]], "io.TextIOBase": [[264, 7, 1, "", "buffer"], [264, 8, 1, "", "detach"], [264, 7, 1, "", "encoding"], [264, 7, 1, "", "errors"], [264, 7, 1, "", "newlines"], [264, 8, 1, "", "read"], [264, 8, 1, "", "readline"], [264, 8, 1, "", "seek"], [264, 8, 1, "", "tell"], [264, 8, 1, "", "write"]], "io.TextIOWrapper": [[264, 7, 1, "", "line_buffering"], [264, 8, 1, "", "reconfigure"], [264, 7, 1, "", "write_through"]], "ipaddress": [[265, 6, 1, "", "AddressValueError"], [265, 12, 1, "", "IPv4Address"], [265, 12, 1, "", "IPv4Interface"], [265, 12, 1, "", "IPv4Network"], [265, 12, 1, "", "IPv6Address"], [265, 12, 1, "", "IPv6Interface"], [265, 12, 1, "", "IPv6Network"], [265, 6, 1, "", "NetmaskValueError"], [265, 11, 1, "", "collapse_addresses"], [265, 11, 1, "", "get_mixed_type_key"], [265, 11, 1, "", "ip_address"], [265, 11, 1, "", "ip_interface"], [265, 11, 1, "", "ip_network"], [265, 11, 1, "", "summarize_address_range"], [265, 11, 1, "", "v4_int_to_packed"], [265, 11, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[265, 8, 1, "", "__format__"], [265, 7, 1, "", "compressed"], [265, 7, 1, "", "exploded"], [265, 7, 1, "", "is_global"], [265, 7, 1, "", "is_link_local"], [265, 7, 1, "", "is_loopback"], [265, 7, 1, "", "is_multicast"], [265, 7, 1, "", "is_private"], [265, 7, 1, "", "is_reserved"], [265, 7, 1, "", "is_unspecified"], [265, 7, 1, "", "max_prefixlen"], [265, 7, 1, "", "packed"], [265, 7, 1, "", "reverse_pointer"], [265, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[265, 7, 1, "", "ip"], [265, 7, 1, "", "network"], [265, 7, 1, "", "with_hostmask"], [265, 7, 1, "", "with_netmask"], [265, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[265, 8, 1, "", "address_exclude"], [265, 7, 1, "", "broadcast_address"], [265, 8, 1, "", "compare_networks"], [265, 7, 1, "", "compressed"], [265, 7, 1, "", "exploded"], [265, 7, 1, "", "hostmask"], [265, 8, 1, "", "hosts"], [265, 7, 1, "", "is_link_local"], [265, 7, 1, "", "is_loopback"], [265, 7, 1, "", "is_multicast"], [265, 7, 1, "", "is_private"], [265, 7, 1, "", "is_reserved"], [265, 7, 1, "", "is_unspecified"], [265, 7, 1, "", "max_prefixlen"], [265, 7, 1, "", "netmask"], [265, 7, 1, "", "network_address"], [265, 7, 1, "", "num_addresses"], [265, 8, 1, "", "overlaps"], [265, 7, 1, "", "prefixlen"], [265, 8, 1, "", "subnet_of"], [265, 8, 1, "", "subnets"], [265, 8, 1, "", "supernet"], [265, 8, 1, "", "supernet_of"], [265, 7, 1, "", "version"], [265, 7, 1, "", "with_hostmask"], [265, 7, 1, "", "with_netmask"], [265, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[265, 8, 1, "", "__format__"], [265, 7, 1, "", "compressed"], [265, 7, 1, "", "exploded"], [265, 7, 1, "", "ipv4_mapped"], [265, 7, 1, "", "is_global"], [265, 7, 1, "", "is_link_local"], [265, 7, 1, "", "is_loopback"], [265, 7, 1, "", "is_multicast"], [265, 7, 1, "", "is_private"], [265, 7, 1, "", "is_reserved"], [265, 7, 1, "", "is_site_local"], [265, 7, 1, "", "is_unspecified"], [265, 7, 1, "", "max_prefixlen"], [265, 7, 1, "", "packed"], [265, 7, 1, "", "reverse_pointer"], [265, 7, 1, "", "scope_id"], [265, 7, 1, "", "sixtofour"], [265, 7, 1, "", "teredo"], [265, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[265, 7, 1, "", "ip"], [265, 7, 1, "", "network"], [265, 7, 1, "", "with_hostmask"], [265, 7, 1, "", "with_netmask"], [265, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[265, 8, 1, "", "address_exclude"], [265, 7, 1, "", "broadcast_address"], [265, 8, 1, "", "compare_networks"], [265, 7, 1, "", "compressed"], [265, 7, 1, "", "exploded"], [265, 7, 1, "", "hostmask"], [265, 8, 1, "", "hosts"], [265, 7, 1, "", "is_link_local"], [265, 7, 1, "", "is_loopback"], [265, 7, 1, "", "is_multicast"], [265, 7, 1, "", "is_private"], [265, 7, 1, "", "is_reserved"], [265, 7, 1, "", "is_site_local"], [265, 7, 1, "", "is_unspecified"], [265, 7, 1, "", "max_prefixlen"], [265, 7, 1, "", "netmask"], [265, 7, 1, "", "network_address"], [265, 7, 1, "", "num_addresses"], [265, 8, 1, "", "overlaps"], [265, 7, 1, "", "prefixlen"], [265, 8, 1, "", "subnet_of"], [265, 8, 1, "", "subnets"], [265, 8, 1, "", "supernet"], [265, 8, 1, "", "supernet_of"], [265, 7, 1, "", "version"], [265, 7, 1, "", "with_hostmask"], [265, 7, 1, "", "with_netmask"], [265, 7, 1, "", "with_prefixlen"]], "iterator": [[351, 8, 1, "", "__iter__"], [351, 8, 1, "", "__next__"]], "itertools": [[267, 11, 1, "", "accumulate"], [267, 11, 1, "", "chain"], [267, 11, 1, "", "combinations"], [267, 11, 1, "", "combinations_with_replacement"], [267, 11, 1, "", "compress"], [267, 11, 1, "", "count"], [267, 11, 1, "", "cycle"], [267, 11, 1, "", "dropwhile"], [267, 11, 1, "", "filterfalse"], [267, 11, 1, "", "groupby"], [267, 11, 1, "", "islice"], [267, 11, 1, "", "pairwise"], [267, 11, 1, "", "permutations"], [267, 11, 1, "", "product"], [267, 11, 1, "", "repeat"], [267, 11, 1, "", "starmap"], [267, 11, 1, "", "takewhile"], [267, 11, 1, "", "tee"], [267, 11, 1, "", "zip_longest"]], "itertools.chain": [[267, 8, 1, "", "from_iterable"]], "json": [[268, 6, 1, "", "JSONDecodeError"], [268, 12, 1, "", "JSONDecoder"], [268, 12, 1, "", "JSONEncoder"], [268, 11, 1, "", "dump"], [268, 11, 1, "", "dumps"], [268, 11, 1, "", "load"], [268, 11, 1, "", "loads"], [268, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[268, 7, 1, "", "colno"], [268, 7, 1, "", "doc"], [268, 7, 1, "", "lineno"], [268, 7, 1, "", "msg"], [268, 7, 1, "", "pos"]], "json.JSONDecoder": [[268, 8, 1, "", "decode"], [268, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[268, 8, 1, "", "default"], [268, 8, 1, "", "encode"], [268, 8, 1, "", "iterencode"]], "keyword": [[269, 11, 1, "", "iskeyword"], [269, 11, 1, "", "issoftkeyword"], [269, 9, 1, "", "kwlist"], [269, 9, 1, "", "softkwlist"]], "linecache": [[271, 11, 1, "", "checkcache"], [271, 11, 1, "", "clearcache"], [271, 11, 1, "", "getline"], [271, 11, 1, "", "lazycache"]], "list": [[351, 8, 1, "", "sort"]], "locale": [[272, 9, 1, "", "ALT_DIGITS"], [272, 9, 1, "", "CHAR_MAX"], [272, 9, 1, "", "CODESET"], [272, 9, 1, "", "CRNCYSTR"], [272, 9, 1, "", "D_FMT"], [272, 9, 1, "", "D_T_FMT"], [272, 9, 1, "", "ERA"], [272, 9, 1, "", "ERA_D_FMT"], [272, 9, 1, "", "ERA_D_T_FMT"], [272, 9, 1, "", "ERA_T_FMT"], [272, 6, 1, "", "Error"], [272, 9, 1, "", "LC_ALL"], [272, 9, 1, "", "LC_COLLATE"], [272, 9, 1, "", "LC_CTYPE"], [272, 9, 1, "", "LC_MESSAGES"], [272, 9, 1, "", "LC_MONETARY"], [272, 9, 1, "", "LC_NUMERIC"], [272, 9, 1, "", "LC_TIME"], [272, 9, 1, "", "NOEXPR"], [272, 9, 1, "", "RADIXCHAR"], [272, 9, 1, "", "THOUSEP"], [272, 9, 1, "", "T_FMT"], [272, 9, 1, "", "T_FMT_AMPM"], [272, 9, 1, "", "YESEXPR"], [272, 11, 1, "", "atof"], [272, 11, 1, "", "atoi"], [272, 11, 1, "", "bindtextdomain"], [272, 11, 1, "", "currency"], [272, 11, 1, "", "dcgettext"], [272, 11, 1, "", "delocalize"], [272, 11, 1, "", "dgettext"], [272, 11, 1, "", "format"], [272, 11, 1, "", "format_string"], [272, 11, 1, "", "getdefaultlocale"], [272, 11, 1, "", "getlocale"], [272, 11, 1, "", "getpreferredencoding"], [272, 11, 1, "", "gettext"], [272, 11, 1, "", "localeconv"], [272, 11, 1, "", "localize"], [272, 11, 1, "", "nl_langinfo"], [272, 11, 1, "", "normalize"], [272, 11, 1, "", "resetlocale"], [272, 11, 1, "", "setlocale"], [272, 11, 1, "", "str"], [272, 11, 1, "", "strcoll"], [272, 11, 1, "", "strxfrm"], [272, 11, 1, "", "textdomain"]], "logging": [[273, 12, 1, "", "BufferingFormatter"], [275, 12, 1, "", "FileHandler"], [273, 12, 1, "", "Filter"], [273, 12, 1, "", "Formatter"], [273, 12, 1, "", "Handler"], [273, 12, 1, "", "LogRecord"], [273, 12, 1, "", "Logger"], [273, 12, 1, "", "LoggerAdapter"], [275, 12, 1, "", "NullHandler"], [275, 12, 1, "", "StreamHandler"], [273, 11, 1, "", "addLevelName"], [273, 11, 1, "", "basicConfig"], [273, 11, 1, "", "captureWarnings"], [274, 10, 0, "-", "config"], [273, 11, 1, "", "critical"], [273, 11, 1, "", "debug"], [273, 11, 1, "", "disable"], [273, 11, 1, "", "error"], [273, 11, 1, "", "exception"], [273, 11, 1, "", "getLevelName"], [273, 11, 1, "", "getLogRecordFactory"], [273, 11, 1, "", "getLogger"], [273, 11, 1, "", "getLoggerClass"], [275, 10, 0, "-", "handlers"], [273, 11, 1, "", "info"], [273, 7, 1, "", "lastResort"], [273, 11, 1, "", "log"], [273, 11, 1, "", "makeLogRecord"], [273, 11, 1, "", "setLogRecordFactory"], [273, 11, 1, "", "setLoggerClass"], [273, 11, 1, "", "shutdown"], [273, 11, 1, "", "warning"]], "logging.BufferingFormatter": [[273, 8, 1, "", "format"], [273, 8, 1, "", "formatFooter"], [273, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[275, 8, 1, "", "close"], [275, 8, 1, "", "emit"]], "logging.Filter": [[273, 8, 1, "", "filter"]], "logging.Formatter": [[273, 8, 1, "", "format"], [273, 8, 1, "", "formatException"], [273, 8, 1, "", "formatStack"], [273, 8, 1, "", "formatTime"]], "logging.Handler": [[273, 8, 1, "", "__init__"], [273, 8, 1, "", "acquire"], [273, 8, 1, "", "addFilter"], [273, 8, 1, "", "close"], [273, 8, 1, "", "createLock"], [273, 8, 1, "", "emit"], [273, 8, 1, "", "filter"], [273, 8, 1, "", "flush"], [273, 8, 1, "", "format"], [273, 8, 1, "", "handle"], [273, 8, 1, "", "handleError"], [273, 8, 1, "", "release"], [273, 8, 1, "", "removeFilter"], [273, 8, 1, "", "setFormatter"], [273, 8, 1, "", "setLevel"]], "logging.LogRecord": [[273, 8, 1, "", "getMessage"]], "logging.Logger": [[273, 8, 1, "", "addFilter"], [273, 8, 1, "", "addHandler"], [273, 8, 1, "", "critical"], [273, 8, 1, "", "debug"], [273, 8, 1, "", "error"], [273, 8, 1, "", "exception"], [273, 8, 1, "", "filter"], [273, 8, 1, "", "findCaller"], [273, 8, 1, "", "getChild"], [273, 8, 1, "", "getEffectiveLevel"], [273, 8, 1, "", "handle"], [273, 8, 1, "", "hasHandlers"], [273, 8, 1, "", "info"], [273, 8, 1, "", "isEnabledFor"], [273, 8, 1, "", "log"], [273, 8, 1, "", "makeRecord"], [273, 7, 1, "", "propagate"], [273, 8, 1, "", "removeFilter"], [273, 8, 1, "", "removeHandler"], [273, 8, 1, "", "setLevel"], [273, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[273, 8, 1, "", "process"]], "logging.NullHandler": [[275, 8, 1, "", "createLock"], [275, 8, 1, "", "emit"], [275, 8, 1, "", "handle"]], "logging.StreamHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "flush"], [275, 8, 1, "", "setStream"], [275, 7, 1, "", "terminator"]], "logging.config": [[274, 11, 1, "", "dictConfig"], [274, 11, 1, "", "fileConfig"], [274, 11, 1, "", "listen"], [274, 11, 1, "", "stopListening"]], "logging.handlers": [[275, 12, 1, "", "BaseRotatingHandler"], [275, 12, 1, "", "BufferingHandler"], [275, 12, 1, "", "DatagramHandler"], [275, 12, 1, "", "HTTPHandler"], [275, 12, 1, "", "MemoryHandler"], [275, 12, 1, "", "NTEventLogHandler"], [275, 12, 1, "", "QueueHandler"], [275, 12, 1, "", "QueueListener"], [275, 12, 1, "", "RotatingFileHandler"], [275, 12, 1, "", "SMTPHandler"], [275, 12, 1, "", "SocketHandler"], [275, 12, 1, "", "SysLogHandler"], [275, 12, 1, "", "TimedRotatingFileHandler"], [275, 12, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[275, 7, 1, "", "namer"], [275, 8, 1, "", "rotate"], [275, 8, 1, "", "rotation_filename"], [275, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "flush"], [275, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "makeSocket"], [275, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[275, 8, 1, "", "close"], [275, 8, 1, "", "flush"], [275, 8, 1, "", "setTarget"], [275, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[275, 8, 1, "", "close"], [275, 8, 1, "", "emit"], [275, 8, 1, "", "getEventCategory"], [275, 8, 1, "", "getEventType"], [275, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "enqueue"], [275, 7, 1, "", "listener"], [275, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[275, 8, 1, "", "dequeue"], [275, 8, 1, "", "enqueue_sentinel"], [275, 8, 1, "", "handle"], [275, 8, 1, "", "prepare"], [275, 8, 1, "", "start"], [275, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[275, 8, 1, "", "doRollover"], [275, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[275, 8, 1, "", "close"], [275, 8, 1, "", "createSocket"], [275, 8, 1, "", "emit"], [275, 8, 1, "", "handleError"], [275, 8, 1, "", "makePickle"], [275, 8, 1, "", "makeSocket"], [275, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[275, 8, 1, "", "close"], [275, 8, 1, "", "emit"], [275, 8, 1, "", "encodePriority"], [275, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[275, 8, 1, "", "doRollover"], [275, 8, 1, "", "emit"], [275, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[275, 8, 1, "", "emit"], [275, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[108, 8, 1, "", "__init__"]], "lzma": [[276, 12, 1, "", "LZMACompressor"], [276, 12, 1, "", "LZMADecompressor"], [276, 6, 1, "", "LZMAError"], [276, 12, 1, "", "LZMAFile"], [276, 11, 1, "", "compress"], [276, 11, 1, "", "decompress"], [276, 11, 1, "", "is_check_supported"], [276, 11, 1, "", "open"]], "lzma.LZMACompressor": [[276, 8, 1, "", "compress"], [276, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[276, 7, 1, "", "check"], [276, 8, 1, "", "decompress"], [276, 7, 1, "", "eof"], [276, 7, 1, "", "needs_input"], [276, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[276, 8, 1, "", "peek"]], "mailbox": [[277, 12, 1, "", "Babyl"], [277, 12, 1, "", "BabylMessage"], [277, 6, 1, "", "Error"], [277, 6, 1, "", "ExternalClashError"], [277, 6, 1, "", "FormatError"], [277, 12, 1, "", "MH"], [277, 12, 1, "", "MHMessage"], [277, 12, 1, "", "MMDF"], [277, 12, 1, "", "MMDFMessage"], [277, 12, 1, "", "Mailbox"], [277, 12, 1, "", "Maildir"], [277, 12, 1, "", "MaildirMessage"], [277, 12, 1, "", "Message"], [277, 6, 1, "", "NoSuchMailboxError"], [277, 6, 1, "", "NotEmptyError"], [277, 12, 1, "", "mbox"], [277, 12, 1, "", "mboxMessage"]], "mailbox.Babyl": [[277, 8, 1, "", "get_file"], [277, 8, 1, "", "get_labels"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[277, 8, 1, "", "add_label"], [277, 8, 1, "", "get_labels"], [277, 8, 1, "", "get_visible"], [277, 8, 1, "", "remove_label"], [277, 8, 1, "", "set_labels"], [277, 8, 1, "", "set_visible"], [277, 8, 1, "", "update_visible"]], "mailbox.MH": [[277, 8, 1, "", "__delitem__"], [277, 8, 1, "", "add_folder"], [277, 8, 1, "", "close"], [277, 8, 1, "", "discard"], [277, 8, 1, "", "flush"], [277, 8, 1, "", "get_file"], [277, 8, 1, "", "get_folder"], [277, 8, 1, "", "get_sequences"], [277, 8, 1, "", "list_folders"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "pack"], [277, 8, 1, "", "remove"], [277, 8, 1, "", "remove_folder"], [277, 8, 1, "", "set_sequences"], [277, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[277, 8, 1, "", "add_sequence"], [277, 8, 1, "", "get_sequences"], [277, 8, 1, "", "remove_sequence"], [277, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[277, 8, 1, "", "get_file"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[277, 8, 1, "", "add_flag"], [277, 8, 1, "", "get_flags"], [277, 8, 1, "", "get_from"], [277, 8, 1, "", "remove_flag"], [277, 8, 1, "", "set_flags"], [277, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[277, 8, 1, "", "__contains__"], [277, 8, 1, "", "__delitem__"], [277, 8, 1, "", "__getitem__"], [277, 8, 1, "", "__iter__"], [277, 8, 1, "", "__len__"], [277, 8, 1, "", "__setitem__"], [277, 8, 1, "", "add"], [277, 8, 1, "", "clear"], [277, 8, 1, "", "close"], [277, 8, 1, "", "discard"], [277, 8, 1, "", "flush"], [277, 8, 1, "", "get"], [277, 8, 1, "", "get_bytes"], [277, 8, 1, "", "get_file"], [277, 8, 1, "", "get_message"], [277, 8, 1, "", "get_string"], [277, 8, 1, "", "items"], [277, 8, 1, "", "iteritems"], [277, 8, 1, "", "iterkeys"], [277, 8, 1, "", "itervalues"], [277, 8, 1, "", "keys"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "pop"], [277, 8, 1, "", "popitem"], [277, 8, 1, "", "remove"], [277, 8, 1, "", "unlock"], [277, 8, 1, "", "update"], [277, 8, 1, "", "values"]], "mailbox.Maildir": [[277, 8, 1, "", "__setitem__"], [277, 8, 1, "", "add"], [277, 8, 1, "", "add_folder"], [277, 8, 1, "", "clean"], [277, 8, 1, "", "close"], [277, 8, 1, "", "flush"], [277, 8, 1, "", "get_file"], [277, 8, 1, "", "get_folder"], [277, 8, 1, "", "list_folders"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "remove_folder"], [277, 8, 1, "", "unlock"], [277, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[277, 8, 1, "", "add_flag"], [277, 8, 1, "", "get_date"], [277, 8, 1, "", "get_flags"], [277, 8, 1, "", "get_info"], [277, 8, 1, "", "get_subdir"], [277, 8, 1, "", "remove_flag"], [277, 8, 1, "", "set_date"], [277, 8, 1, "", "set_flags"], [277, 8, 1, "", "set_info"], [277, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[277, 8, 1, "", "get_file"], [277, 8, 1, "", "lock"], [277, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[277, 8, 1, "", "add_flag"], [277, 8, 1, "", "get_flags"], [277, 8, 1, "", "get_from"], [277, 8, 1, "", "remove_flag"], [277, 8, 1, "", "set_flags"], [277, 8, 1, "", "set_from"]], "mailcap": [[278, 11, 1, "", "findmatch"], [278, 11, 1, "", "getcaps"]], "marshal": [[280, 11, 1, "", "dump"], [280, 11, 1, "", "dumps"], [280, 11, 1, "", "load"], [280, 11, 1, "", "loads"], [280, 9, 1, "", "version"]], "math": [[281, 11, 1, "", "acos"], [281, 11, 1, "", "acosh"], [281, 11, 1, "", "asin"], [281, 11, 1, "", "asinh"], [281, 11, 1, "", "atan"], [281, 11, 1, "", "atan2"], [281, 11, 1, "", "atanh"], [281, 11, 1, "", "ceil"], [281, 11, 1, "", "comb"], [281, 11, 1, "", "copysign"], [281, 11, 1, "", "cos"], [281, 11, 1, "", "cosh"], [281, 11, 1, "", "degrees"], [281, 11, 1, "", "dist"], [281, 9, 1, "", "e"], [281, 11, 1, "", "erf"], [281, 11, 1, "", "erfc"], [281, 11, 1, "", "exp"], [281, 11, 1, "", "expm1"], [281, 11, 1, "", "fabs"], [281, 11, 1, "", "factorial"], [281, 11, 1, "", "floor"], [281, 11, 1, "", "fmod"], [281, 11, 1, "", "frexp"], [281, 11, 1, "", "fsum"], [281, 11, 1, "", "gamma"], [281, 11, 1, "", "gcd"], [281, 11, 1, "", "hypot"], [281, 9, 1, "", "inf"], [281, 11, 1, "", "isclose"], [281, 11, 1, "", "isfinite"], [281, 11, 1, "", "isinf"], [281, 11, 1, "", "isnan"], [281, 11, 1, "", "isqrt"], [281, 11, 1, "", "lcm"], [281, 11, 1, "", "ldexp"], [281, 11, 1, "", "lgamma"], [281, 11, 1, "", "log"], [281, 11, 1, "", "log10"], [281, 11, 1, "", "log1p"], [281, 11, 1, "", "log2"], [281, 11, 1, "", "modf"], [281, 9, 1, "", "nan"], [281, 11, 1, "", "nextafter"], [281, 11, 1, "", "perm"], [281, 9, 1, "", "pi"], [281, 11, 1, "", "pow"], [281, 11, 1, "", "prod"], [281, 11, 1, "", "radians"], [281, 11, 1, "", "remainder"], [281, 11, 1, "", "sin"], [281, 11, 1, "", "sinh"], [281, 11, 1, "", "sqrt"], [281, 11, 1, "", "tan"], [281, 11, 1, "", "tanh"], [281, 9, 1, "", "tau"], [281, 11, 1, "", "trunc"], [281, 11, 1, "", "ulp"]], "memoryview": [[351, 8, 1, "", "__eq__"], [351, 7, 1, "", "c_contiguous"], [351, 8, 1, "", "cast"], [351, 7, 1, "", "contiguous"], [351, 7, 1, "", "f_contiguous"], [351, 7, 1, "", "format"], [351, 8, 1, "", "hex"], [351, 7, 1, "", "itemsize"], [351, 7, 1, "", "nbytes"], [351, 7, 1, "", "ndim"], [351, 7, 1, "", "obj"], [351, 7, 1, "", "readonly"], [351, 8, 1, "", "release"], [351, 7, 1, "", "shape"], [351, 7, 1, "", "strides"], [351, 7, 1, "", "suboffsets"], [351, 8, 1, "", "tobytes"], [351, 8, 1, "", "tolist"], [351, 8, 1, "", "toreadonly"]], "mimetypes": [[282, 12, 1, "", "MimeTypes"], [282, 11, 1, "", "add_type"], [282, 9, 1, "", "common_types"], [282, 9, 1, "", "encodings_map"], [282, 11, 1, "", "guess_all_extensions"], [282, 11, 1, "", "guess_extension"], [282, 11, 1, "", "guess_type"], [282, 11, 1, "", "init"], [282, 9, 1, "", "inited"], [282, 9, 1, "", "knownfiles"], [282, 11, 1, "", "read_mime_types"], [282, 9, 1, "", "suffix_map"], [282, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[282, 7, 1, "", "encodings_map"], [282, 8, 1, "", "guess_all_extensions"], [282, 8, 1, "", "guess_extension"], [282, 8, 1, "", "guess_type"], [282, 8, 1, "", "read"], [282, 8, 1, "", "read_windows_registry"], [282, 8, 1, "", "readfp"], [282, 7, 1, "", "suffix_map"], [282, 7, 1, "", "types_map"], [282, 7, 1, "", "types_map_inv"]], "mmap": [[284, 9, 1, "", "MADV_AUTOSYNC"], [284, 9, 1, "", "MADV_CORE"], [284, 9, 1, "", "MADV_DODUMP"], [284, 9, 1, "", "MADV_DOFORK"], [284, 9, 1, "", "MADV_DONTDUMP"], [284, 9, 1, "", "MADV_DONTFORK"], [284, 9, 1, "", "MADV_DONTNEED"], [284, 9, 1, "", "MADV_FREE"], [284, 9, 1, "", "MADV_FREE_REUSABLE"], [284, 9, 1, "", "MADV_FREE_REUSE"], [284, 9, 1, "", "MADV_HUGEPAGE"], [284, 9, 1, "", "MADV_HWPOISON"], [284, 9, 1, "", "MADV_MERGEABLE"], [284, 9, 1, "", "MADV_NOCORE"], [284, 9, 1, "", "MADV_NOHUGEPAGE"], [284, 9, 1, "", "MADV_NORMAL"], [284, 9, 1, "", "MADV_NOSYNC"], [284, 9, 1, "", "MADV_PROTECT"], [284, 9, 1, "", "MADV_RANDOM"], [284, 9, 1, "", "MADV_REMOVE"], [284, 9, 1, "", "MADV_SEQUENTIAL"], [284, 9, 1, "", "MADV_SOFT_OFFLINE"], [284, 9, 1, "", "MADV_UNMERGEABLE"], [284, 9, 1, "", "MADV_WILLNEED"], [284, 9, 1, "", "MAP_ANON"], [284, 9, 1, "", "MAP_ANONYMOUS"], [284, 9, 1, "", "MAP_DENYWRITE"], [284, 9, 1, "", "MAP_EXECUTABLE"], [284, 9, 1, "", "MAP_POPULATE"], [284, 9, 1, "", "MAP_PRIVATE"], [284, 9, 1, "", "MAP_SHARED"], [284, 12, 1, "", "mmap"]], "mmap.mmap": [[284, 8, 1, "", "close"], [284, 7, 1, "", "closed"], [284, 8, 1, "", "find"], [284, 8, 1, "", "flush"], [284, 8, 1, "", "madvise"], [284, 8, 1, "", "move"], [284, 8, 1, "", "read"], [284, 8, 1, "", "read_byte"], [284, 8, 1, "", "readline"], [284, 8, 1, "", "resize"], [284, 8, 1, "", "rfind"], [284, 8, 1, "", "seek"], [284, 8, 1, "", "size"], [284, 8, 1, "", "tell"], [284, 8, 1, "", "write"], [284, 8, 1, "", "write_byte"]], "modulefinder": [[285, 11, 1, "", "AddPackagePath"], [285, 12, 1, "", "ModuleFinder"], [285, 11, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[285, 7, 1, "", "modules"], [285, 8, 1, "", "report"], [285, 8, 1, "", "run_script"]], "msilib": [[287, 12, 1, "", "Binary"], [287, 12, 1, "", "CAB"], [287, 12, 1, "", "Control"], [287, 11, 1, "", "CreateRecord"], [287, 12, 1, "", "Dialog"], [287, 12, 1, "", "Directory"], [287, 11, 1, "", "FCICreate"], [287, 12, 1, "", "Feature"], [287, 11, 1, "", "OpenDatabase"], [287, 12, 1, "", "RadioButtonGroup"], [287, 11, 1, "", "UuidCreate"], [287, 11, 1, "", "add_data"], [287, 11, 1, "", "add_stream"], [287, 11, 1, "", "add_tables"], [287, 11, 1, "", "gen_uuid"], [287, 11, 1, "", "init_database"], [287, 9, 1, "", "schema"], [287, 9, 1, "", "sequence"], [287, 9, 1, "", "text"]], "msilib.CAB": [[287, 8, 1, "", "append"], [287, 8, 1, "", "commit"]], "msilib.Control": [[287, 8, 1, "", "condition"], [287, 8, 1, "", "event"], [287, 8, 1, "", "mapping"]], "msilib.Database": [[287, 8, 1, "", "Close"], [287, 8, 1, "", "Commit"], [287, 8, 1, "", "GetSummaryInformation"], [287, 8, 1, "", "OpenView"]], "msilib.Dialog": [[287, 8, 1, "", "bitmap"], [287, 8, 1, "", "checkbox"], [287, 8, 1, "", "control"], [287, 8, 1, "", "line"], [287, 8, 1, "", "pushbutton"], [287, 8, 1, "", "radiogroup"], [287, 8, 1, "", "text"]], "msilib.Directory": [[287, 8, 1, "", "add_file"], [287, 8, 1, "", "glob"], [287, 8, 1, "", "remove_pyc"], [287, 8, 1, "", "start_component"]], "msilib.Feature": [[287, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[287, 8, 1, "", "add"]], "msilib.Record": [[287, 8, 1, "", "ClearData"], [287, 8, 1, "", "GetFieldCount"], [287, 8, 1, "", "GetInteger"], [287, 8, 1, "", "GetString"], [287, 8, 1, "", "SetInteger"], [287, 8, 1, "", "SetStream"], [287, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[287, 8, 1, "", "GetProperty"], [287, 8, 1, "", "GetPropertyCount"], [287, 8, 1, "", "Persist"], [287, 8, 1, "", "SetProperty"]], "msilib.View": [[287, 8, 1, "", "Close"], [287, 8, 1, "", "Execute"], [287, 8, 1, "", "Fetch"], [287, 8, 1, "", "GetColumnInfo"], [287, 8, 1, "", "Modify"]], "msvcrt": [[288, 9, 1, "", "LK_LOCK"], [288, 9, 1, "", "LK_NBLCK"], [288, 9, 1, "", "LK_NBRLCK"], [288, 9, 1, "", "LK_RLCK"], [288, 9, 1, "", "LK_UNLCK"], [288, 11, 1, "", "get_osfhandle"], [288, 11, 1, "", "getch"], [288, 11, 1, "", "getche"], [288, 11, 1, "", "getwch"], [288, 11, 1, "", "getwche"], [288, 11, 1, "", "heapmin"], [288, 11, 1, "", "kbhit"], [288, 11, 1, "", "locking"], [288, 11, 1, "", "open_osfhandle"], [288, 11, 1, "", "putch"], [288, 11, 1, "", "putwch"], [288, 11, 1, "", "setmode"], [288, 11, 1, "", "ungetch"], [288, 11, 1, "", "ungetwch"]], "multiprocessing": [[289, 11, 1, "", "Array"], [289, 6, 1, "", "AuthenticationError"], [289, 12, 1, "", "Barrier"], [289, 12, 1, "", "BoundedSemaphore"], [289, 6, 1, "", "BufferTooShort"], [289, 12, 1, "", "Condition"], [289, 12, 1, "", "Event"], [289, 12, 1, "", "JoinableQueue"], [289, 12, 1, "", "Lock"], [289, 11, 1, "", "Manager"], [289, 11, 1, "", "Pipe"], [289, 12, 1, "", "Process"], [289, 6, 1, "", "ProcessError"], [289, 12, 1, "", "Queue"], [289, 12, 1, "", "RLock"], [289, 12, 1, "", "Semaphore"], [289, 12, 1, "", "SimpleQueue"], [289, 6, 1, "", "TimeoutError"], [289, 11, 1, "", "Value"], [289, 11, 1, "", "active_children"], [289, 10, 0, "-", "connection"], [289, 11, 1, "", "cpu_count"], [289, 11, 1, "", "current_process"], [289, 10, 0, "-", "dummy"], [289, 11, 1, "", "freeze_support"], [289, 11, 1, "", "get_all_start_methods"], [289, 11, 1, "", "get_context"], [289, 11, 1, "", "get_logger"], [289, 11, 1, "", "get_start_method"], [289, 11, 1, "", "log_to_stderr"], [289, 10, 0, "-", "managers"], [289, 11, 1, "", "parent_process"], [289, 10, 0, "-", "pool"], [289, 11, 1, "", "set_executable"], [289, 11, 1, "", "set_start_method"], [290, 10, 0, "-", "shared_memory"], [289, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[289, 8, 1, "", "join"], [289, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[289, 8, 1, "", "acquire"], [289, 8, 1, "", "release"]], "multiprocessing.Process": [[289, 7, 1, "", "authkey"], [289, 8, 1, "", "close"], [289, 7, 1, "", "daemon"], [289, 7, 1, "", "exitcode"], [289, 8, 1, "", "is_alive"], [289, 8, 1, "", "join"], [289, 8, 1, "", "kill"], [289, 7, 1, "", "name"], [289, 7, 1, "", "pid"], [289, 8, 1, "", "run"], [289, 7, 1, "", "sentinel"], [289, 8, 1, "", "start"], [289, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[289, 8, 1, "", "cancel_join_thread"], [289, 8, 1, "", "close"], [289, 8, 1, "", "empty"], [289, 8, 1, "", "full"], [289, 8, 1, "", "get"], [289, 8, 1, "", "get_nowait"], [289, 8, 1, "", "join_thread"], [289, 8, 1, "", "put"], [289, 8, 1, "", "put_nowait"], [289, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[289, 8, 1, "", "acquire"], [289, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[289, 8, 1, "", "close"], [289, 8, 1, "", "empty"], [289, 8, 1, "", "get"], [289, 8, 1, "", "put"]], "multiprocessing.connection": [[289, 11, 1, "", "Client"], [289, 12, 1, "", "Connection"], [289, 12, 1, "", "Listener"], [289, 11, 1, "", "answer_challenge"], [289, 11, 1, "", "deliver_challenge"], [289, 11, 1, "", "wait"]], "multiprocessing.connection.Connection": [[289, 8, 1, "", "close"], [289, 8, 1, "", "fileno"], [289, 8, 1, "", "poll"], [289, 8, 1, "", "recv"], [289, 8, 1, "", "recv_bytes"], [289, 8, 1, "", "recv_bytes_into"], [289, 8, 1, "", "send"], [289, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[289, 8, 1, "", "accept"], [289, 7, 1, "", "address"], [289, 8, 1, "", "close"], [289, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[289, 12, 1, "", "BaseManager"], [289, 12, 1, "", "BaseProxy"], [289, 12, 1, "", "Namespace"], [290, 12, 1, "", "SharedMemoryManager"], [289, 12, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[289, 7, 1, "", "address"], [289, 8, 1, "", "connect"], [289, 8, 1, "", "get_server"], [289, 8, 1, "", "register"], [289, 8, 1, "", "shutdown"], [289, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[289, 8, 1, "", "__repr__"], [289, 8, 1, "", "__str__"], [289, 8, 1, "", "_callmethod"], [289, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[290, 8, 1, "", "ShareableList"], [290, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[289, 8, 1, "", "Array"], [289, 8, 1, "", "Barrier"], [289, 8, 1, "", "BoundedSemaphore"], [289, 8, 1, "", "Condition"], [289, 8, 1, "", "Event"], [289, 8, 1, "", "Lock"], [289, 8, 1, "", "Namespace"], [289, 8, 1, "", "Queue"], [289, 8, 1, "", "RLock"], [289, 8, 1, "", "Semaphore"], [289, 8, 1, "", "Value"], [289, 8, 1, "", "dict"], [289, 8, 1, "", "list"]], "multiprocessing.pool": [[289, 12, 1, "", "AsyncResult"], [289, 12, 1, "", "Pool"], [289, 12, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[289, 8, 1, "", "get"], [289, 8, 1, "", "ready"], [289, 8, 1, "", "successful"], [289, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[289, 8, 1, "", "apply"], [289, 8, 1, "", "apply_async"], [289, 8, 1, "", "close"], [289, 8, 1, "", "imap"], [289, 8, 1, "", "imap_unordered"], [289, 8, 1, "", "join"], [289, 8, 1, "", "map"], [289, 8, 1, "", "map_async"], [289, 8, 1, "", "starmap"], [289, 8, 1, "", "starmap_async"], [289, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[290, 12, 1, "", "ShareableList"], [290, 12, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[290, 8, 1, "", "count"], [290, 7, 1, "", "format"], [290, 8, 1, "", "index"], [290, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[290, 7, 1, "", "buf"], [290, 8, 1, "", "close"], [290, 7, 1, "", "name"], [290, 7, 1, "", "size"], [290, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[289, 11, 1, "", "Array"], [289, 11, 1, "", "RawArray"], [289, 11, 1, "", "RawValue"], [289, 11, 1, "", "Value"], [289, 11, 1, "", "copy"], [289, 11, 1, "", "synchronized"]], "netrc": [[292, 6, 1, "", "NetrcParseError"], [292, 12, 1, "", "netrc"]], "netrc.netrc": [[292, 8, 1, "", "__repr__"], [292, 8, 1, "", "authenticators"], [292, 7, 1, "", "hosts"], [292, 7, 1, "", "macros"]], "nis": [[293, 11, 1, "", "cat"], [293, 6, 1, "", "error"], [293, 11, 1, "", "get_default_domain"], [293, 11, 1, "", "maps"], [293, 11, 1, "", "match"]], "nntplib": [[294, 12, 1, "", "NNTP"], [294, 6, 1, "", "NNTPDataError"], [294, 6, 1, "", "NNTPError"], [294, 6, 1, "", "NNTPPermanentError"], [294, 6, 1, "", "NNTPProtocolError"], [294, 6, 1, "", "NNTPReplyError"], [294, 6, 1, "", "NNTPTemporaryError"], [294, 12, 1, "", "NNTP_SSL"], [294, 11, 1, "", "decode_header"]], "nntplib.NNTP": [[294, 8, 1, "", "article"], [294, 8, 1, "", "body"], [294, 8, 1, "", "date"], [294, 8, 1, "", "description"], [294, 8, 1, "", "descriptions"], [294, 8, 1, "", "getcapabilities"], [294, 8, 1, "", "getwelcome"], [294, 8, 1, "", "group"], [294, 8, 1, "", "head"], [294, 8, 1, "", "help"], [294, 8, 1, "", "ihave"], [294, 8, 1, "", "last"], [294, 8, 1, "", "list"], [294, 8, 1, "", "login"], [294, 8, 1, "", "newgroups"], [294, 8, 1, "", "newnews"], [294, 8, 1, "", "next"], [294, 7, 1, "", "nntp_implementation"], [294, 7, 1, "", "nntp_version"], [294, 8, 1, "", "over"], [294, 8, 1, "", "post"], [294, 8, 1, "", "quit"], [294, 8, 1, "", "set_debuglevel"], [294, 8, 1, "", "slave"], [294, 8, 1, "", "starttls"], [294, 8, 1, "", "stat"], [294, 8, 1, "", "xhdr"], [294, 8, 1, "", "xover"]], "nntplib.NNTPError": [[294, 7, 1, "", "response"]], "numbers": [[295, 12, 1, "", "Complex"], [295, 12, 1, "", "Integral"], [295, 12, 1, "", "Number"], [295, 12, 1, "", "Rational"], [295, 12, 1, "", "Real"]], "numbers.Complex": [[295, 8, 1, "", "conjugate"], [295, 7, 1, "", "imag"], [295, 7, 1, "", "real"]], "numbers.Rational": [[295, 7, 1, "", "denominator"], [295, 7, 1, "", "numerator"]], "object": [[432, 8, 1, "", "__abs__"], [432, 8, 1, "", "__add__"], [432, 8, 1, "", "__aenter__"], [432, 8, 1, "", "__aexit__"], [432, 8, 1, "", "__aiter__"], [432, 8, 1, "", "__and__"], [432, 8, 1, "", "__anext__"], [432, 8, 1, "", "__await__"], [432, 8, 1, "", "__bool__"], [432, 8, 1, "", "__bytes__"], [432, 8, 1, "", "__call__"], [432, 8, 1, "", "__ceil__"], [432, 8, 1, "", "__class_getitem__"], [432, 8, 1, "", "__complex__"], [432, 8, 1, "", "__contains__"], [432, 8, 1, "", "__del__"], [432, 8, 1, "", "__delattr__"], [432, 8, 1, "", "__delete__"], [432, 8, 1, "", "__delitem__"], [351, 7, 1, "", "__dict__"], [432, 8, 1, "", "__dir__"], [432, 8, 1, "", "__divmod__"], [432, 8, 1, "", "__enter__"], [432, 8, 1, "", "__eq__"], [432, 8, 1, "", "__exit__"], [432, 8, 1, "", "__float__"], [432, 8, 1, "", "__floor__"], [432, 8, 1, "", "__floordiv__"], [432, 8, 1, "", "__format__"], [432, 8, 1, "", "__ge__"], [432, 8, 1, "", "__get__"], [432, 8, 1, "", "__getattr__"], [432, 8, 1, "", "__getattribute__"], [432, 8, 1, "", "__getitem__"], [305, 8, 1, "", "__getnewargs__"], [305, 8, 1, "", "__getnewargs_ex__"], [305, 8, 1, "", "__getstate__"], [432, 8, 1, "", "__gt__"], [432, 8, 1, "", "__hash__"], [432, 8, 1, "", "__iadd__"], [432, 8, 1, "", "__iand__"], [432, 8, 1, "", "__ifloordiv__"], [432, 8, 1, "", "__ilshift__"], [432, 8, 1, "", "__imatmul__"], [432, 8, 1, "", "__imod__"], [432, 8, 1, "", "__imul__"], [432, 8, 1, "", "__index__"], [432, 8, 1, "", "__init__"], [432, 8, 1, "", "__init_subclass__"], [432, 8, 1, "", "__int__"], [432, 8, 1, "", "__invert__"], [432, 8, 1, "", "__ior__"], [432, 8, 1, "", "__ipow__"], [432, 8, 1, "", "__irshift__"], [432, 8, 1, "", "__isub__"], [432, 8, 1, "", "__iter__"], [432, 8, 1, "", "__itruediv__"], [432, 8, 1, "", "__ixor__"], [432, 8, 1, "", "__le__"], [432, 8, 1, "", "__len__"], [432, 8, 1, "", "__length_hint__"], [432, 8, 1, "", "__lshift__"], [432, 8, 1, "", "__lt__"], [432, 9, 1, "", "__match_args__"], [432, 8, 1, "", "__matmul__"], [432, 8, 1, "", "__missing__"], [432, 8, 1, "", "__mod__"], [432, 8, 1, "", "__mul__"], [432, 8, 1, "", "__ne__"], [432, 8, 1, "", "__neg__"], [432, 8, 1, "", "__new__"], [432, 8, 1, "", "__or__"], [432, 8, 1, "", "__pos__"], [432, 8, 1, "", "__pow__"], [432, 8, 1, "", "__radd__"], [432, 8, 1, "", "__rand__"], [432, 8, 1, "", "__rdivmod__"], [305, 8, 1, "", "__reduce__"], [305, 8, 1, "", "__reduce_ex__"], [432, 8, 1, "", "__repr__"], [432, 8, 1, "", "__reversed__"], [432, 8, 1, "", "__rfloordiv__"], [432, 8, 1, "", "__rlshift__"], [432, 8, 1, "", "__rmatmul__"], [432, 8, 1, "", "__rmod__"], [432, 8, 1, "", "__rmul__"], [432, 8, 1, "", "__ror__"], [432, 8, 1, "", "__round__"], [432, 8, 1, "", "__rpow__"], [432, 8, 1, "", "__rrshift__"], [432, 8, 1, "", "__rshift__"], [432, 8, 1, "", "__rsub__"], [432, 8, 1, "", "__rtruediv__"], [432, 8, 1, "", "__rxor__"], [432, 8, 1, "", "__set__"], [432, 8, 1, "", "__set_name__"], [432, 8, 1, "", "__setattr__"], [432, 8, 1, "", "__setitem__"], [305, 8, 1, "", "__setstate__"], [432, 9, 1, "", "__slots__"], [432, 8, 1, "", "__str__"], [432, 8, 1, "", "__sub__"], [432, 8, 1, "", "__truediv__"], [432, 8, 1, "", "__trunc__"], [432, 8, 1, "", "__xor__"]], "operator": [[297, 11, 1, "", "__abs__"], [297, 11, 1, "", "__add__"], [297, 11, 1, "", "__and__"], [297, 11, 1, "", "__concat__"], [297, 11, 1, "", "__contains__"], [297, 11, 1, "", "__delitem__"], [297, 11, 1, "", "__eq__"], [297, 11, 1, "", "__floordiv__"], [297, 11, 1, "", "__ge__"], [297, 11, 1, "", "__getitem__"], [297, 11, 1, "", "__gt__"], [297, 11, 1, "", "__iadd__"], [297, 11, 1, "", "__iand__"], [297, 11, 1, "", "__iconcat__"], [297, 11, 1, "", "__ifloordiv__"], [297, 11, 1, "", "__ilshift__"], [297, 11, 1, "", "__imatmul__"], [297, 11, 1, "", "__imod__"], [297, 11, 1, "", "__imul__"], [297, 11, 1, "", "__index__"], [297, 11, 1, "", "__inv__"], [297, 11, 1, "", "__invert__"], [297, 11, 1, "", "__ior__"], [297, 11, 1, "", "__ipow__"], [297, 11, 1, "", "__irshift__"], [297, 11, 1, "", "__isub__"], [297, 11, 1, "", "__itruediv__"], [297, 11, 1, "", "__ixor__"], [297, 11, 1, "", "__le__"], [297, 11, 1, "", "__lshift__"], [297, 11, 1, "", "__lt__"], [297, 11, 1, "", "__matmul__"], [297, 11, 1, "", "__mod__"], [297, 11, 1, "", "__mul__"], [297, 11, 1, "", "__ne__"], [297, 11, 1, "", "__neg__"], [297, 11, 1, "", "__not__"], [297, 11, 1, "", "__or__"], [297, 11, 1, "", "__pos__"], [297, 11, 1, "", "__pow__"], [297, 11, 1, "", "__rshift__"], [297, 11, 1, "", "__setitem__"], [297, 11, 1, "", "__sub__"], [297, 11, 1, "", "__truediv__"], [297, 11, 1, "", "__xor__"], [297, 11, 1, "", "abs"], [297, 11, 1, "", "add"], [297, 11, 1, "", "and_"], [297, 11, 1, "", "attrgetter"], [297, 11, 1, "", "concat"], [297, 11, 1, "", "contains"], [297, 11, 1, "", "countOf"], [297, 11, 1, "", "delitem"], [297, 11, 1, "", "eq"], [297, 11, 1, "", "floordiv"], [297, 11, 1, "", "ge"], [297, 11, 1, "", "getitem"], [297, 11, 1, "", "gt"], [297, 11, 1, "", "iadd"], [297, 11, 1, "", "iand"], [297, 11, 1, "", "iconcat"], [297, 11, 1, "", "ifloordiv"], [297, 11, 1, "", "ilshift"], [297, 11, 1, "", "imatmul"], [297, 11, 1, "", "imod"], [297, 11, 1, "", "imul"], [297, 11, 1, "", "index"], [297, 11, 1, "", "indexOf"], [297, 11, 1, "", "inv"], [297, 11, 1, "", "invert"], [297, 11, 1, "", "ior"], [297, 11, 1, "", "ipow"], [297, 11, 1, "", "irshift"], [297, 11, 1, "", "is_"], [297, 11, 1, "", "is_not"], [297, 11, 1, "", "isub"], [297, 11, 1, "", "itemgetter"], [297, 11, 1, "", "itruediv"], [297, 11, 1, "", "ixor"], [297, 11, 1, "", "le"], [297, 11, 1, "", "length_hint"], [297, 11, 1, "", "lshift"], [297, 11, 1, "", "lt"], [297, 11, 1, "", "matmul"], [297, 11, 1, "", "methodcaller"], [297, 11, 1, "", "mod"], [297, 11, 1, "", "mul"], [297, 11, 1, "", "ne"], [297, 11, 1, "", "neg"], [297, 11, 1, "", "not_"], [297, 11, 1, "", "or_"], [297, 11, 1, "", "pos"], [297, 11, 1, "", "pow"], [297, 11, 1, "", "rshift"], [297, 11, 1, "", "setitem"], [297, 11, 1, "", "sub"], [297, 11, 1, "", "truediv"], [297, 11, 1, "", "truth"], [297, 11, 1, "", "xor"]], "optparse.Option": [[298, 7, 1, "", "ACTIONS"], [298, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [298, 7, 1, "", "STORE_ACTIONS"], [298, 7, 1, "", "TYPED_ACTIONS"], [298, 7, 1, "", "TYPES"], [298, 7, 1, "", "TYPE_CHECKER"], [298, 7, 1, "", "action"], [298, 7, 1, "", "callback"], [298, 7, 1, "", "callback_args"], [298, 7, 1, "", "callback_kwargs"], [298, 7, 1, "", "choices"], [298, 7, 1, "", "const"], [298, 7, 1, "", "default"], [298, 7, 1, "", "dest"], [298, 7, 1, "", "help"], [298, 7, 1, "", "metavar"], [298, 7, 1, "", "nargs"], [298, 7, 1, "", "type"]], "optparse": [[298, 12, 1, "", "OptionGroup"], [298, 12, 1, "", "OptionParser"]], "optparse.OptionParser": [[298, 8, 1, "", "add_option"], [298, 8, 1, "", "disable_interspersed_args"], [298, 8, 1, "", "enable_interspersed_args"], [298, 8, 1, "", "get_option"], [298, 8, 1, "", "get_option_group"], [298, 8, 1, "", "get_usage"], [298, 8, 1, "", "get_version"], [298, 8, 1, "", "has_option"], [298, 8, 1, "", "print_usage"], [298, 8, 1, "", "print_version"], [298, 8, 1, "", "remove_option"], [298, 8, 1, "", "set_defaults"], [298, 8, 1, "", "set_usage"]], "os": [[299, 9, 1, "", "CLD_CONTINUED"], [299, 9, 1, "", "CLD_DUMPED"], [299, 9, 1, "", "CLD_EXITED"], [299, 9, 1, "", "CLD_KILLED"], [299, 9, 1, "", "CLD_STOPPED"], [299, 9, 1, "", "CLD_TRAPPED"], [299, 12, 1, "", "DirEntry"], [299, 9, 1, "", "EFD_CLOEXEC"], [299, 9, 1, "", "EFD_NONBLOCK"], [299, 9, 1, "", "EFD_SEMAPHORE"], [299, 9, 1, "", "EX_CANTCREAT"], [299, 9, 1, "", "EX_CONFIG"], [299, 9, 1, "", "EX_DATAERR"], [299, 9, 1, "", "EX_IOERR"], [299, 9, 1, "", "EX_NOHOST"], [299, 9, 1, "", "EX_NOINPUT"], [299, 9, 1, "", "EX_NOPERM"], [299, 9, 1, "", "EX_NOTFOUND"], [299, 9, 1, "", "EX_NOUSER"], [299, 9, 1, "", "EX_OK"], [299, 9, 1, "", "EX_OSERR"], [299, 9, 1, "", "EX_OSFILE"], [299, 9, 1, "", "EX_PROTOCOL"], [299, 9, 1, "", "EX_SOFTWARE"], [299, 9, 1, "", "EX_TEMPFAIL"], [299, 9, 1, "", "EX_UNAVAILABLE"], [299, 9, 1, "", "EX_USAGE"], [299, 9, 1, "", "F_LOCK"], [299, 9, 1, "", "F_OK"], [299, 9, 1, "", "F_TEST"], [299, 9, 1, "", "F_TLOCK"], [299, 9, 1, "", "F_ULOCK"], [299, 9, 1, "", "GRND_NONBLOCK"], [299, 9, 1, "", "GRND_RANDOM"], [299, 9, 1, "", "MFD_ALLOW_SEALING"], [299, 9, 1, "", "MFD_CLOEXEC"], [299, 9, 1, "", "MFD_HUGETLB"], [299, 9, 1, "", "MFD_HUGE_16GB"], [299, 9, 1, "", "MFD_HUGE_16MB"], [299, 9, 1, "", "MFD_HUGE_1GB"], [299, 9, 1, "", "MFD_HUGE_1MB"], [299, 9, 1, "", "MFD_HUGE_256MB"], [299, 9, 1, "", "MFD_HUGE_2GB"], [299, 9, 1, "", "MFD_HUGE_2MB"], [299, 9, 1, "", "MFD_HUGE_32MB"], [299, 9, 1, "", "MFD_HUGE_512KB"], [299, 9, 1, "", "MFD_HUGE_512MB"], [299, 9, 1, "", "MFD_HUGE_64KB"], [299, 9, 1, "", "MFD_HUGE_8MB"], [299, 9, 1, "", "MFD_HUGE_MASK"], [299, 9, 1, "", "MFD_HUGE_SHIFT"], [299, 9, 1, "", "O_APPEND"], [299, 9, 1, "", "O_ASYNC"], [299, 9, 1, "", "O_BINARY"], [299, 9, 1, "", "O_CLOEXEC"], [299, 9, 1, "", "O_CREAT"], [299, 9, 1, "", "O_DIRECT"], [299, 9, 1, "", "O_DIRECTORY"], [299, 9, 1, "", "O_DSYNC"], [299, 9, 1, "", "O_EVTONLY"], [299, 9, 1, "", "O_EXCL"], [299, 9, 1, "", "O_EXLOCK"], [299, 9, 1, "", "O_FSYNC"], [299, 9, 1, "", "O_NDELAY"], [299, 9, 1, "", "O_NOATIME"], [299, 9, 1, "", "O_NOCTTY"], [299, 9, 1, "", "O_NOFOLLOW"], [299, 9, 1, "", "O_NOFOLLOW_ANY"], [299, 9, 1, "", "O_NOINHERIT"], [299, 9, 1, "", "O_NONBLOCK"], [299, 9, 1, "", "O_PATH"], [299, 9, 1, "", "O_RANDOM"], [299, 9, 1, "", "O_RDONLY"], [299, 9, 1, "", "O_RDWR"], [299, 9, 1, "", "O_RSYNC"], [299, 9, 1, "", "O_SEQUENTIAL"], [299, 9, 1, "", "O_SHLOCK"], [299, 9, 1, "", "O_SHORT_LIVED"], [299, 9, 1, "", "O_SYMLINK"], [299, 9, 1, "", "O_SYNC"], [299, 9, 1, "", "O_TEMPORARY"], [299, 9, 1, "", "O_TEXT"], [299, 9, 1, "", "O_TMPFILE"], [299, 9, 1, "", "O_TRUNC"], [299, 9, 1, "", "O_WRONLY"], [299, 9, 1, "", "POSIX_FADV_DONTNEED"], [299, 9, 1, "", "POSIX_FADV_NOREUSE"], [299, 9, 1, "", "POSIX_FADV_NORMAL"], [299, 9, 1, "", "POSIX_FADV_RANDOM"], [299, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [299, 9, 1, "", "POSIX_FADV_WILLNEED"], [299, 9, 1, "", "POSIX_SPAWN_CLOSE"], [299, 9, 1, "", "POSIX_SPAWN_DUP2"], [299, 9, 1, "", "POSIX_SPAWN_OPEN"], [299, 9, 1, "", "PRIO_PGRP"], [299, 9, 1, "", "PRIO_PROCESS"], [299, 9, 1, "", "PRIO_USER"], [299, 9, 1, "", "P_ALL"], [299, 9, 1, "", "P_DETACH"], [299, 9, 1, "", "P_NOWAIT"], [299, 9, 1, "", "P_NOWAITO"], [299, 9, 1, "", "P_OVERLAY"], [299, 9, 1, "", "P_PGID"], [299, 9, 1, "", "P_PID"], [299, 9, 1, "", "P_PIDFD"], [299, 9, 1, "", "P_WAIT"], [299, 12, 1, "", "PathLike"], [299, 9, 1, "", "RTLD_DEEPBIND"], [299, 9, 1, "", "RTLD_GLOBAL"], [299, 9, 1, "", "RTLD_LAZY"], [299, 9, 1, "", "RTLD_LOCAL"], [299, 9, 1, "", "RTLD_NODELETE"], [299, 9, 1, "", "RTLD_NOLOAD"], [299, 9, 1, "", "RTLD_NOW"], [299, 9, 1, "", "RWF_APPEND"], [299, 9, 1, "", "RWF_DSYNC"], [299, 9, 1, "", "RWF_HIPRI"], [299, 9, 1, "", "RWF_NOWAIT"], [299, 9, 1, "", "RWF_SYNC"], [299, 9, 1, "", "R_OK"], [299, 9, 1, "", "SCHED_BATCH"], [299, 9, 1, "", "SCHED_FIFO"], [299, 9, 1, "", "SCHED_IDLE"], [299, 9, 1, "", "SCHED_OTHER"], [299, 9, 1, "", "SCHED_RESET_ON_FORK"], [299, 9, 1, "", "SCHED_RR"], [299, 9, 1, "", "SCHED_SPORADIC"], [299, 9, 1, "", "SEEK_CUR"], [299, 9, 1, "", "SEEK_END"], [299, 9, 1, "", "SEEK_SET"], [299, 9, 1, "", "SF_MNOWAIT"], [299, 9, 1, "", "SF_NODISKIO"], [299, 9, 1, "", "SF_SYNC"], [299, 9, 1, "", "SPLICE_F_MORE"], [299, 9, 1, "", "SPLICE_F_MOVE"], [299, 9, 1, "", "SPLICE_F_NONBLOCK"], [299, 9, 1, "", "WCONTINUED"], [299, 11, 1, "", "WCOREDUMP"], [299, 9, 1, "", "WEXITED"], [299, 11, 1, "", "WEXITSTATUS"], [299, 11, 1, "", "WIFCONTINUED"], [299, 11, 1, "", "WIFEXITED"], [299, 11, 1, "", "WIFSIGNALED"], [299, 11, 1, "", "WIFSTOPPED"], [299, 9, 1, "", "WNOHANG"], [299, 9, 1, "", "WNOWAIT"], [299, 9, 1, "", "WSTOPPED"], [299, 11, 1, "", "WSTOPSIG"], [299, 11, 1, "", "WTERMSIG"], [299, 9, 1, "", "WUNTRACED"], [299, 9, 1, "", "W_OK"], [299, 9, 1, "", "XATTR_CREATE"], [299, 9, 1, "", "XATTR_REPLACE"], [299, 9, 1, "", "XATTR_SIZE_MAX"], [299, 9, 1, "", "X_OK"], [299, 11, 1, "", "_exit"], [299, 11, 1, "", "abort"], [299, 11, 1, "", "access"], [299, 11, 1, "", "add_dll_directory"], [299, 9, 1, "", "altsep"], [299, 11, 1, "", "chdir"], [299, 11, 1, "", "chflags"], [299, 11, 1, "", "chmod"], [299, 11, 1, "", "chown"], [299, 11, 1, "", "chroot"], [299, 11, 1, "", "close"], [299, 11, 1, "", "closerange"], [299, 11, 1, "", "confstr"], [299, 9, 1, "", "confstr_names"], [299, 11, 1, "", "copy_file_range"], [299, 11, 1, "", "cpu_count"], [299, 11, 1, "", "ctermid"], [299, 9, 1, "", "curdir"], [299, 9, 1, "", "defpath"], [299, 11, 1, "", "device_encoding"], [299, 9, 1, "", "devnull"], [299, 11, 1, "", "dup"], [299, 11, 1, "", "dup2"], [299, 9, 1, "", "environ"], [299, 9, 1, "", "environb"], [299, 6, 1, "", "error"], [299, 11, 1, "", "eventfd"], [299, 11, 1, "", "eventfd_read"], [299, 11, 1, "", "eventfd_write"], [299, 11, 1, "", "execl"], [299, 11, 1, "", "execle"], [299, 11, 1, "", "execlp"], [299, 11, 1, "", "execlpe"], [299, 11, 1, "", "execv"], [299, 11, 1, "", "execve"], [299, 11, 1, "", "execvp"], [299, 11, 1, "", "execvpe"], [299, 9, 1, "", "extsep"], [299, 11, 1, "", "fchdir"], [299, 11, 1, "", "fchmod"], [299, 11, 1, "", "fchown"], [299, 11, 1, "", "fdatasync"], [299, 11, 1, "", "fdopen"], [299, 11, 1, "", "fork"], [299, 11, 1, "", "forkpty"], [299, 11, 1, "", "fpathconf"], [299, 11, 1, "", "fsdecode"], [299, 11, 1, "", "fsencode"], [299, 11, 1, "", "fspath"], [299, 11, 1, "", "fstat"], [299, 11, 1, "", "fstatvfs"], [299, 11, 1, "", "fsync"], [299, 11, 1, "", "ftruncate"], [299, 11, 1, "", "fwalk"], [299, 11, 1, "", "get_blocking"], [299, 11, 1, "", "get_exec_path"], [299, 11, 1, "", "get_handle_inheritable"], [299, 11, 1, "", "get_inheritable"], [299, 11, 1, "", "get_terminal_size"], [299, 11, 1, "", "getcwd"], [299, 11, 1, "", "getcwdb"], [299, 11, 1, "", "getegid"], [299, 11, 1, "", "getenv"], [299, 11, 1, "", "getenvb"], [299, 11, 1, "", "geteuid"], [299, 11, 1, "", "getgid"], [299, 11, 1, "", "getgrouplist"], [299, 11, 1, "", "getgroups"], [299, 11, 1, "", "getloadavg"], [299, 11, 1, "", "getlogin"], [299, 11, 1, "", "getpgid"], [299, 11, 1, "", "getpgrp"], [299, 11, 1, "", "getpid"], [299, 11, 1, "", "getppid"], [299, 11, 1, "", "getpriority"], [299, 11, 1, "", "getrandom"], [299, 11, 1, "", "getresgid"], [299, 11, 1, "", "getresuid"], [299, 11, 1, "", "getsid"], [299, 11, 1, "", "getuid"], [299, 11, 1, "", "getxattr"], [299, 11, 1, "", "initgroups"], [299, 11, 1, "", "isatty"], [299, 11, 1, "", "kill"], [299, 11, 1, "", "killpg"], [299, 11, 1, "", "lchflags"], [299, 11, 1, "", "lchmod"], [299, 11, 1, "", "lchown"], [299, 9, 1, "", "linesep"], [299, 11, 1, "", "link"], [299, 11, 1, "", "listdir"], [299, 11, 1, "", "listxattr"], [299, 11, 1, "", "lockf"], [299, 11, 1, "", "lseek"], [299, 11, 1, "", "lstat"], [299, 11, 1, "", "major"], [299, 11, 1, "", "makedev"], [299, 11, 1, "", "makedirs"], [299, 11, 1, "", "memfd_create"], [299, 11, 1, "", "minor"], [299, 11, 1, "", "mkdir"], [299, 11, 1, "", "mkfifo"], [299, 11, 1, "", "mknod"], [299, 9, 1, "", "name"], [299, 11, 1, "", "nice"], [299, 11, 1, "", "open"], [299, 11, 1, "", "openpty"], [299, 9, 1, "", "pardir"], [300, 10, 0, "-", "path"], [299, 11, 1, "", "pathconf"], [299, 9, 1, "", "pathconf_names"], [299, 9, 1, "", "pathsep"], [299, 11, 1, "", "pidfd_open"], [299, 11, 1, "", "pipe"], [299, 11, 1, "", "pipe2"], [299, 11, 1, "", "plock"], [299, 11, 1, "", "popen"], [299, 11, 1, "", "posix_fadvise"], [299, 11, 1, "", "posix_fallocate"], [299, 11, 1, "", "posix_spawn"], [299, 11, 1, "", "posix_spawnp"], [299, 11, 1, "", "pread"], [299, 11, 1, "", "preadv"], [299, 11, 1, "", "putenv"], [299, 11, 1, "", "pwrite"], [299, 11, 1, "", "pwritev"], [299, 11, 1, "", "read"], [299, 11, 1, "", "readlink"], [299, 11, 1, "", "readv"], [299, 11, 1, "", "register_at_fork"], [299, 11, 1, "", "remove"], [299, 11, 1, "", "removedirs"], [299, 11, 1, "", "removexattr"], [299, 11, 1, "", "rename"], [299, 11, 1, "", "renames"], [299, 11, 1, "", "replace"], [299, 11, 1, "", "rmdir"], [299, 11, 1, "", "scandir"], [299, 11, 1, "", "sched_get_priority_max"], [299, 11, 1, "", "sched_get_priority_min"], [299, 11, 1, "", "sched_getaffinity"], [299, 11, 1, "", "sched_getparam"], [299, 11, 1, "", "sched_getscheduler"], [299, 12, 1, "", "sched_param"], [299, 11, 1, "", "sched_rr_get_interval"], [299, 11, 1, "", "sched_setaffinity"], [299, 11, 1, "", "sched_setparam"], [299, 11, 1, "", "sched_setscheduler"], [299, 11, 1, "", "sched_yield"], [299, 11, 1, "", "sendfile"], [299, 9, 1, "", "sep"], [299, 11, 1, "", "set_blocking"], [299, 11, 1, "", "set_handle_inheritable"], [299, 11, 1, "", "set_inheritable"], [299, 11, 1, "", "setegid"], [299, 11, 1, "", "seteuid"], [299, 11, 1, "", "setgid"], [299, 11, 1, "", "setgroups"], [299, 11, 1, "", "setpgid"], [299, 11, 1, "", "setpgrp"], [299, 11, 1, "", "setpriority"], [299, 11, 1, "", "setregid"], [299, 11, 1, "", "setresgid"], [299, 11, 1, "", "setresuid"], [299, 11, 1, "", "setreuid"], [299, 11, 1, "", "setsid"], [299, 11, 1, "", "setuid"], [299, 11, 1, "", "setxattr"], [299, 11, 1, "", "spawnl"], [299, 11, 1, "", "spawnle"], [299, 11, 1, "", "spawnlp"], [299, 11, 1, "", "spawnlpe"], [299, 11, 1, "", "spawnv"], [299, 11, 1, "", "spawnve"], [299, 11, 1, "", "spawnvp"], [299, 11, 1, "", "spawnvpe"], [299, 11, 1, "", "splice"], [299, 11, 1, "", "startfile"], [299, 11, 1, "", "stat"], [299, 12, 1, "", "stat_result"], [299, 11, 1, "", "statvfs"], [299, 11, 1, "", "strerror"], [299, 9, 1, "", "supports_bytes_environ"], [299, 9, 1, "", "supports_dir_fd"], [299, 9, 1, "", "supports_effective_ids"], [299, 9, 1, "", "supports_fd"], [299, 9, 1, "", "supports_follow_symlinks"], [299, 11, 1, "", "symlink"], [299, 11, 1, "", "sync"], [299, 11, 1, "", "sysconf"], [299, 9, 1, "", "sysconf_names"], [299, 11, 1, "", "system"], [299, 11, 1, "", "tcgetpgrp"], [299, 11, 1, "", "tcsetpgrp"], [299, 12, 1, "", "terminal_size"], [299, 11, 1, "", "times"], [299, 11, 1, "", "truncate"], [299, 11, 1, "", "ttyname"], [299, 11, 1, "", "umask"], [299, 11, 1, "", "uname"], [299, 11, 1, "", "unlink"], [299, 11, 1, "", "unsetenv"], [299, 11, 1, "", "urandom"], [299, 11, 1, "", "utime"], [299, 11, 1, "", "wait"], [299, 11, 1, "", "wait3"], [299, 11, 1, "", "wait4"], [299, 11, 1, "", "waitid"], [299, 11, 1, "", "waitpid"], [299, 11, 1, "", "waitstatus_to_exitcode"], [299, 11, 1, "", "walk"], [299, 11, 1, "", "write"], [299, 11, 1, "", "writev"]], "os.DirEntry": [[299, 8, 1, "", "inode"], [299, 8, 1, "", "is_dir"], [299, 8, 1, "", "is_file"], [299, 8, 1, "", "is_symlink"], [299, 7, 1, "", "name"], [299, 7, 1, "", "path"], [299, 8, 1, "", "stat"]], "os.PathLike": [[299, 8, 1, "", "__fspath__"]], "os.path": [[300, 11, 1, "", "abspath"], [300, 11, 1, "", "basename"], [300, 11, 1, "", "commonpath"], [300, 11, 1, "", "commonprefix"], [300, 11, 1, "", "dirname"], [300, 11, 1, "", "exists"], [300, 11, 1, "", "expanduser"], [300, 11, 1, "", "expandvars"], [300, 11, 1, "", "getatime"], [300, 11, 1, "", "getctime"], [300, 11, 1, "", "getmtime"], [300, 11, 1, "", "getsize"], [300, 11, 1, "", "isabs"], [300, 11, 1, "", "isdir"], [300, 11, 1, "", "isfile"], [300, 11, 1, "", "islink"], [300, 11, 1, "", "ismount"], [300, 11, 1, "", "join"], [300, 11, 1, "", "lexists"], [300, 11, 1, "", "normcase"], [300, 11, 1, "", "normpath"], [300, 11, 1, "", "realpath"], [300, 11, 1, "", "relpath"], [300, 11, 1, "", "samefile"], [300, 11, 1, "", "sameopenfile"], [300, 11, 1, "", "samestat"], [300, 11, 1, "", "split"], [300, 11, 1, "", "splitdrive"], [300, 11, 1, "", "splitext"], [300, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[299, 8, 1, "", "close"]], "os.sched_param": [[299, 7, 1, "", "sched_priority"]], "os.stat_result": [[299, 7, 1, "", "st_atime"], [299, 7, 1, "", "st_atime_ns"], [299, 7, 1, "", "st_birthtime"], [299, 7, 1, "", "st_blksize"], [299, 7, 1, "", "st_blocks"], [299, 7, 1, "", "st_creator"], [299, 7, 1, "", "st_ctime"], [299, 7, 1, "", "st_ctime_ns"], [299, 7, 1, "", "st_dev"], [299, 7, 1, "", "st_file_attributes"], [299, 7, 1, "", "st_flags"], [299, 7, 1, "", "st_fstype"], [299, 7, 1, "", "st_gen"], [299, 7, 1, "", "st_gid"], [299, 7, 1, "", "st_ino"], [299, 7, 1, "", "st_mode"], [299, 7, 1, "", "st_mtime"], [299, 7, 1, "", "st_mtime_ns"], [299, 7, 1, "", "st_nlink"], [299, 7, 1, "", "st_rdev"], [299, 7, 1, "", "st_reparse_tag"], [299, 7, 1, "", "st_rsize"], [299, 7, 1, "", "st_size"], [299, 7, 1, "", "st_type"], [299, 7, 1, "", "st_uid"]], "os.terminal_size": [[299, 7, 1, "", "columns"], [299, 7, 1, "", "lines"]], "ossaudiodev": [[301, 6, 1, "", "OSSAudioError"], [301, 11, 1, "", "open"], [301, 11, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[301, 8, 1, "", "bufsize"], [301, 8, 1, "", "channels"], [301, 8, 1, "", "close"], [301, 7, 1, "", "closed"], [301, 8, 1, "", "fileno"], [301, 8, 1, "", "getfmts"], [301, 7, 1, "", "mode"], [301, 7, 1, "", "name"], [301, 8, 1, "", "nonblock"], [301, 8, 1, "", "obufcount"], [301, 8, 1, "", "obuffree"], [301, 8, 1, "", "post"], [301, 8, 1, "", "read"], [301, 8, 1, "", "reset"], [301, 8, 1, "", "setfmt"], [301, 8, 1, "", "setparameters"], [301, 8, 1, "", "speed"], [301, 8, 1, "", "sync"], [301, 8, 1, "", "write"], [301, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[301, 8, 1, "", "close"], [301, 8, 1, "", "controls"], [301, 8, 1, "", "fileno"], [301, 8, 1, "", "get"], [301, 8, 1, "", "get_recsrc"], [301, 8, 1, "", "reccontrols"], [301, 8, 1, "", "set"], [301, 8, 1, "", "set_recsrc"], [301, 8, 1, "", "stereocontrols"]], "pathlib": [[302, 12, 1, "", "Path"], [302, 12, 1, "", "PosixPath"], [302, 12, 1, "", "PurePath"], [302, 12, 1, "", "PurePosixPath"], [302, 12, 1, "", "PureWindowsPath"], [302, 12, 1, "", "WindowsPath"]], "pathlib.Path": [[302, 8, 1, "", "chmod"], [302, 8, 1, "", "cwd"], [302, 8, 1, "", "exists"], [302, 8, 1, "", "expanduser"], [302, 8, 1, "", "glob"], [302, 8, 1, "", "group"], [302, 8, 1, "", "hardlink_to"], [302, 8, 1, "", "home"], [302, 8, 1, "", "is_block_device"], [302, 8, 1, "", "is_char_device"], [302, 8, 1, "", "is_dir"], [302, 8, 1, "", "is_fifo"], [302, 8, 1, "", "is_file"], [302, 8, 1, "", "is_mount"], [302, 8, 1, "", "is_socket"], [302, 8, 1, "", "is_symlink"], [302, 8, 1, "", "iterdir"], [302, 8, 1, "", "lchmod"], [302, 8, 1, "", "link_to"], [302, 8, 1, "", "lstat"], [302, 8, 1, "", "mkdir"], [302, 8, 1, "", "open"], [302, 8, 1, "", "owner"], [302, 8, 1, "", "read_bytes"], [302, 8, 1, "", "read_text"], [302, 8, 1, "", "readlink"], [302, 8, 1, "", "rename"], [302, 8, 1, "", "replace"], [302, 8, 1, "", "resolve"], [302, 8, 1, "", "rglob"], [302, 8, 1, "", "rmdir"], [302, 8, 1, "", "samefile"], [302, 8, 1, "", "stat"], [302, 8, 1, "", "symlink_to"], [302, 8, 1, "", "touch"], [302, 8, 1, "", "unlink"], [302, 8, 1, "", "write_bytes"], [302, 8, 1, "", "write_text"]], "pathlib.PurePath": [[302, 9, 1, "", "anchor"], [302, 8, 1, "", "as_posix"], [302, 8, 1, "", "as_uri"], [302, 9, 1, "", "drive"], [302, 8, 1, "", "is_absolute"], [302, 8, 1, "", "is_relative_to"], [302, 8, 1, "", "is_reserved"], [302, 8, 1, "", "joinpath"], [302, 8, 1, "", "match"], [302, 9, 1, "", "name"], [302, 9, 1, "", "parent"], [302, 9, 1, "", "parents"], [302, 9, 1, "", "parts"], [302, 8, 1, "", "relative_to"], [302, 9, 1, "", "root"], [302, 9, 1, "", "stem"], [302, 9, 1, "", "suffix"], [302, 9, 1, "", "suffixes"], [302, 8, 1, "", "with_name"], [302, 8, 1, "", "with_stem"], [302, 8, 1, "", "with_suffix"]], "pdb": [[303, 12, 1, "", "Pdb"], [303, 11, 1, "", "pm"], [303, 11, 1, "", "post_mortem"], [303, 11, 1, "", "run"], [303, 11, 1, "", "runcall"], [303, 11, 1, "", "runeval"], [303, 11, 1, "", "set_trace"]], "pdb.Pdb": [[303, 8, 1, "", "run"], [303, 8, 1, "", "runcall"], [303, 8, 1, "", "runeval"], [303, 8, 1, "", "set_trace"]], "pickle": [[305, 9, 1, "", "DEFAULT_PROTOCOL"], [305, 9, 1, "", "HIGHEST_PROTOCOL"], [305, 12, 1, "", "PickleBuffer"], [305, 6, 1, "", "PickleError"], [305, 12, 1, "", "Pickler"], [305, 6, 1, "", "PicklingError"], [305, 12, 1, "", "Unpickler"], [305, 6, 1, "", "UnpicklingError"], [305, 11, 1, "", "dump"], [305, 11, 1, "", "dumps"], [305, 11, 1, "", "load"], [305, 11, 1, "", "loads"]], "pickle.PickleBuffer": [[305, 8, 1, "", "raw"], [305, 8, 1, "", "release"]], "pickle.Pickler": [[305, 7, 1, "", "dispatch_table"], [305, 8, 1, "", "dump"], [305, 7, 1, "", "fast"], [305, 8, 1, "", "persistent_id"], [305, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[305, 8, 1, "", "find_class"], [305, 8, 1, "", "load"], [305, 8, 1, "", "persistent_load"]], "pickletools": [[306, 11, 1, "", "dis"], [306, 11, 1, "", "genops"], [306, 11, 1, "", "optimize"], [306, 14, 1, "cmdoption-pickletools-a", "--annotate"], [306, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [306, 14, 1, "cmdoption-pickletools-m", "--memo"], [306, 14, 1, "cmdoption-pickletools-o", "--output"], [306, 14, 1, "cmdoption-pickletools-p", "--preamble"], [306, 14, 1, "cmdoption-pickletools-a", "-a"], [306, 14, 1, "cmdoption-pickletools-l", "-l"], [306, 14, 1, "cmdoption-pickletools-m", "-m"], [306, 14, 1, "cmdoption-pickletools-o", "-o"], [306, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[307, 12, 1, "", "Template"]], "pipes.Template": [[307, 8, 1, "", "append"], [307, 8, 1, "", "clone"], [307, 8, 1, "", "copy"], [307, 8, 1, "", "debug"], [307, 8, 1, "", "open"], [307, 8, 1, "", "prepend"], [307, 8, 1, "", "reset"]], "pkgutil": [[308, 12, 1, "", "ImpImporter"], [308, 12, 1, "", "ImpLoader"], [308, 12, 1, "", "ModuleInfo"], [308, 11, 1, "", "extend_path"], [308, 11, 1, "", "find_loader"], [308, 11, 1, "", "get_data"], [308, 11, 1, "", "get_importer"], [308, 11, 1, "", "get_loader"], [308, 11, 1, "", "iter_importers"], [308, 11, 1, "", "iter_modules"], [308, 11, 1, "", "resolve_name"], [308, 11, 1, "", "walk_packages"]], "platform": [[309, 11, 1, "", "architecture"], [309, 11, 1, "", "freedesktop_os_release"], [309, 11, 1, "", "java_ver"], [309, 11, 1, "", "libc_ver"], [309, 11, 1, "", "mac_ver"], [309, 11, 1, "", "machine"], [309, 11, 1, "", "node"], [309, 11, 1, "", "platform"], [309, 11, 1, "", "processor"], [309, 11, 1, "", "python_branch"], [309, 11, 1, "", "python_build"], [309, 11, 1, "", "python_compiler"], [309, 11, 1, "", "python_implementation"], [309, 11, 1, "", "python_revision"], [309, 11, 1, "", "python_version"], [309, 11, 1, "", "python_version_tuple"], [309, 11, 1, "", "release"], [309, 11, 1, "", "system"], [309, 11, 1, "", "system_alias"], [309, 11, 1, "", "uname"], [309, 11, 1, "", "version"], [309, 11, 1, "", "win32_edition"], [309, 11, 1, "", "win32_is_iot"], [309, 11, 1, "", "win32_ver"]], "plistlib": [[310, 9, 1, "", "FMT_BINARY"], [310, 9, 1, "", "FMT_XML"], [310, 12, 1, "", "UID"], [310, 11, 1, "", "dump"], [310, 11, 1, "", "dumps"], [310, 11, 1, "", "load"], [310, 11, 1, "", "loads"]], "poplib": [[311, 12, 1, "", "POP3"], [311, 12, 1, "", "POP3_SSL"], [311, 6, 1, "", "error_proto"]], "poplib.POP3": [[311, 8, 1, "", "apop"], [311, 8, 1, "", "capa"], [311, 8, 1, "", "dele"], [311, 8, 1, "", "getwelcome"], [311, 8, 1, "", "list"], [311, 8, 1, "", "noop"], [311, 8, 1, "", "pass_"], [311, 8, 1, "", "quit"], [311, 8, 1, "", "retr"], [311, 8, 1, "", "rpop"], [311, 8, 1, "", "rset"], [311, 8, 1, "", "set_debuglevel"], [311, 8, 1, "", "stat"], [311, 8, 1, "", "stls"], [311, 8, 1, "", "top"], [311, 8, 1, "", "uidl"], [311, 8, 1, "", "user"], [311, 8, 1, "", "utf8"]], "posix": [[312, 9, 1, "", "environ"]], "pprint": [[313, 12, 1, "", "PrettyPrinter"], [313, 11, 1, "", "isreadable"], [313, 11, 1, "", "isrecursive"], [313, 11, 1, "", "pformat"], [313, 11, 1, "", "pp"], [313, 11, 1, "", "pprint"], [313, 11, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[313, 8, 1, "", "format"], [313, 8, 1, "", "isreadable"], [313, 8, 1, "", "isrecursive"], [313, 8, 1, "", "pformat"], [313, 8, 1, "", "pprint"]], "profile": [[314, 12, 1, "", "Profile"], [314, 11, 1, "", "run"], [314, 11, 1, "", "runctx"]], "profile.Profile": [[314, 8, 1, "", "create_stats"], [314, 8, 1, "", "disable"], [314, 8, 1, "", "dump_stats"], [314, 8, 1, "", "enable"], [314, 8, 1, "", "print_stats"], [314, 8, 1, "", "run"], [314, 8, 1, "", "runcall"], [314, 8, 1, "", "runctx"]], "pstats": [[314, 12, 1, "", "Stats"]], "pstats.Stats": [[314, 8, 1, "", "add"], [314, 8, 1, "", "dump_stats"], [314, 8, 1, "", "get_stats_profile"], [314, 8, 1, "", "print_callees"], [314, 8, 1, "", "print_callers"], [314, 8, 1, "", "print_stats"], [314, 8, 1, "", "reverse_order"], [314, 8, 1, "", "sort_stats"], [314, 8, 1, "", "strip_dirs"]], "pty": [[315, 11, 1, "", "fork"], [315, 11, 1, "", "openpty"], [315, 11, 1, "", "spawn"]], "pwd": [[316, 11, 1, "", "getpwall"], [316, 11, 1, "", "getpwnam"], [316, 11, 1, "", "getpwuid"]], "py_compile": [[317, 6, 1, "", "PyCompileError"], [317, 12, 1, "", "PycInvalidationMode"], [317, 11, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[317, 7, 1, "", "CHECKED_HASH"], [317, 7, 1, "", "TIMESTAMP"], [317, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr.Class": [[318, 7, 1, "", "children"], [318, 7, 1, "", "file"], [318, 7, 1, "", "lineno"], [318, 7, 1, "", "methods"], [318, 7, 1, "", "module"], [318, 7, 1, "", "name"], [318, 7, 1, "", "parent"], [318, 7, 1, "", "super"]], "pyclbr.Function": [[318, 7, 1, "", "children"], [318, 7, 1, "", "file"], [318, 7, 1, "", "is_async"], [318, 7, 1, "", "lineno"], [318, 7, 1, "", "module"], [318, 7, 1, "", "name"], [318, 7, 1, "", "parent"]], "pyclbr": [[318, 11, 1, "", "readmodule"], [318, 11, 1, "", "readmodule_ex"]], "queue": [[322, 6, 1, "", "Empty"], [322, 6, 1, "", "Full"], [322, 12, 1, "", "LifoQueue"], [322, 12, 1, "", "PriorityQueue"], [322, 12, 1, "", "Queue"], [322, 12, 1, "", "SimpleQueue"]], "queue.Queue": [[322, 8, 1, "", "empty"], [322, 8, 1, "", "full"], [322, 8, 1, "", "get"], [322, 8, 1, "", "get_nowait"], [322, 8, 1, "", "join"], [322, 8, 1, "", "put"], [322, 8, 1, "", "put_nowait"], [322, 8, 1, "", "qsize"], [322, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[322, 8, 1, "", "empty"], [322, 8, 1, "", "get"], [322, 8, 1, "", "get_nowait"], [322, 8, 1, "", "put"], [322, 8, 1, "", "put_nowait"], [322, 8, 1, "", "qsize"]], "quopri": [[323, 11, 1, "", "decode"], [323, 11, 1, "", "decodestring"], [323, 11, 1, "", "encode"], [323, 11, 1, "", "encodestring"]], "random": [[324, 12, 1, "", "Random"], [324, 12, 1, "", "SystemRandom"], [324, 11, 1, "", "betavariate"], [324, 11, 1, "", "choice"], [324, 11, 1, "", "choices"], [324, 11, 1, "", "expovariate"], [324, 11, 1, "", "gammavariate"], [324, 11, 1, "", "gauss"], [324, 11, 1, "", "getrandbits"], [324, 11, 1, "", "getstate"], [324, 11, 1, "", "lognormvariate"], [324, 11, 1, "", "normalvariate"], [324, 11, 1, "", "paretovariate"], [324, 11, 1, "", "randbytes"], [324, 11, 1, "", "randint"], [324, 11, 1, "", "random"], [324, 11, 1, "", "randrange"], [324, 11, 1, "", "sample"], [324, 11, 1, "", "seed"], [324, 11, 1, "", "setstate"], [324, 11, 1, "", "shuffle"], [324, 11, 1, "", "triangular"], [324, 11, 1, "", "uniform"], [324, 11, 1, "", "vonmisesvariate"], [324, 11, 1, "", "weibullvariate"]], "range": [[351, 7, 1, "", "start"], [351, 7, 1, "", "step"], [351, 7, 1, "", "stop"]], "re": [[325, 9, 1, "", "A"], [325, 9, 1, "", "ASCII"], [325, 9, 1, "", "DEBUG"], [325, 9, 1, "", "DOTALL"], [325, 9, 1, "", "I"], [325, 9, 1, "", "IGNORECASE"], [325, 9, 1, "", "L"], [325, 9, 1, "", "LOCALE"], [325, 9, 1, "", "M"], [325, 9, 1, "", "MULTILINE"], [325, 9, 1, "", "S"], [325, 9, 1, "", "VERBOSE"], [325, 9, 1, "", "X"], [325, 11, 1, "", "compile"], [325, 6, 1, "", "error"], [325, 11, 1, "", "escape"], [325, 11, 1, "", "findall"], [325, 11, 1, "", "finditer"], [325, 11, 1, "", "fullmatch"], [325, 11, 1, "", "match"], [325, 11, 1, "", "purge"], [325, 11, 1, "", "search"], [325, 11, 1, "", "split"], [325, 11, 1, "", "sub"], [325, 11, 1, "", "subn"]], "re.Match": [[325, 8, 1, "", "__getitem__"], [325, 8, 1, "", "end"], [325, 7, 1, "", "endpos"], [325, 8, 1, "", "expand"], [325, 8, 1, "", "group"], [325, 8, 1, "", "groupdict"], [325, 8, 1, "", "groups"], [325, 7, 1, "", "lastgroup"], [325, 7, 1, "", "lastindex"], [325, 7, 1, "", "pos"], [325, 7, 1, "", "re"], [325, 8, 1, "", "span"], [325, 8, 1, "", "start"], [325, 7, 1, "", "string"]], "re.Pattern": [[325, 8, 1, "", "findall"], [325, 8, 1, "", "finditer"], [325, 7, 1, "", "flags"], [325, 8, 1, "", "fullmatch"], [325, 7, 1, "", "groupindex"], [325, 7, 1, "", "groups"], [325, 8, 1, "", "match"], [325, 7, 1, "", "pattern"], [325, 8, 1, "", "search"], [325, 8, 1, "", "split"], [325, 8, 1, "", "sub"], [325, 8, 1, "", "subn"]], "re.error": [[325, 7, 1, "", "colno"], [325, 7, 1, "", "lineno"], [325, 7, 1, "", "msg"], [325, 7, 1, "", "pattern"], [325, 7, 1, "", "pos"]], "readline": [[326, 11, 1, "", "add_history"], [326, 11, 1, "", "append_history_file"], [326, 11, 1, "", "clear_history"], [326, 11, 1, "", "get_begidx"], [326, 11, 1, "", "get_completer"], [326, 11, 1, "", "get_completer_delims"], [326, 11, 1, "", "get_completion_type"], [326, 11, 1, "", "get_current_history_length"], [326, 11, 1, "", "get_endidx"], [326, 11, 1, "", "get_history_item"], [326, 11, 1, "", "get_history_length"], [326, 11, 1, "", "get_line_buffer"], [326, 11, 1, "", "insert_text"], [326, 11, 1, "", "parse_and_bind"], [326, 11, 1, "", "read_history_file"], [326, 11, 1, "", "read_init_file"], [326, 11, 1, "", "redisplay"], [326, 11, 1, "", "remove_history_item"], [326, 11, 1, "", "replace_history_item"], [326, 11, 1, "", "set_auto_history"], [326, 11, 1, "", "set_completer"], [326, 11, 1, "", "set_completer_delims"], [326, 11, 1, "", "set_completion_display_matches_hook"], [326, 11, 1, "", "set_history_length"], [326, 11, 1, "", "set_pre_input_hook"], [326, 11, 1, "", "set_startup_hook"], [326, 11, 1, "", "write_history_file"]], "reprlib": [[327, 12, 1, "", "Repr"], [327, 9, 1, "", "aRepr"], [327, 11, 1, "", "recursive_repr"], [327, 11, 1, "", "repr"]], "reprlib.Repr": [[327, 7, 1, "", "maxarray"], [327, 7, 1, "", "maxdeque"], [327, 7, 1, "", "maxdict"], [327, 7, 1, "", "maxfrozenset"], [327, 7, 1, "", "maxlevel"], [327, 7, 1, "", "maxlist"], [327, 7, 1, "", "maxlong"], [327, 7, 1, "", "maxother"], [327, 7, 1, "", "maxset"], [327, 7, 1, "", "maxstring"], [327, 7, 1, "", "maxtuple"], [327, 8, 1, "", "repr"], [327, 8, 1, "", "repr1"]], "resource": [[328, 9, 1, "", "RLIMIT_AS"], [328, 9, 1, "", "RLIMIT_CORE"], [328, 9, 1, "", "RLIMIT_CPU"], [328, 9, 1, "", "RLIMIT_DATA"], [328, 9, 1, "", "RLIMIT_FSIZE"], [328, 9, 1, "", "RLIMIT_KQUEUES"], [328, 9, 1, "", "RLIMIT_MEMLOCK"], [328, 9, 1, "", "RLIMIT_MSGQUEUE"], [328, 9, 1, "", "RLIMIT_NICE"], [328, 9, 1, "", "RLIMIT_NOFILE"], [328, 9, 1, "", "RLIMIT_NPROC"], [328, 9, 1, "", "RLIMIT_NPTS"], [328, 9, 1, "", "RLIMIT_OFILE"], [328, 9, 1, "", "RLIMIT_RSS"], [328, 9, 1, "", "RLIMIT_RTPRIO"], [328, 9, 1, "", "RLIMIT_RTTIME"], [328, 9, 1, "", "RLIMIT_SBSIZE"], [328, 9, 1, "", "RLIMIT_SIGPENDING"], [328, 9, 1, "", "RLIMIT_STACK"], [328, 9, 1, "", "RLIMIT_SWAP"], [328, 9, 1, "", "RLIMIT_VMEM"], [328, 9, 1, "", "RLIM_INFINITY"], [328, 9, 1, "", "RUSAGE_BOTH"], [328, 9, 1, "", "RUSAGE_CHILDREN"], [328, 9, 1, "", "RUSAGE_SELF"], [328, 9, 1, "", "RUSAGE_THREAD"], [328, 6, 1, "", "error"], [328, 11, 1, "", "getpagesize"], [328, 11, 1, "", "getrlimit"], [328, 11, 1, "", "getrusage"], [328, 11, 1, "", "prlimit"], [328, 11, 1, "", "setrlimit"]], "rlcompleter.Completer": [[329, 8, 1, "", "complete"]], "runpy": [[330, 11, 1, "", "run_module"], [330, 11, 1, "", "run_path"]], "sched": [[331, 12, 1, "", "scheduler"]], "sched.scheduler": [[331, 8, 1, "", "cancel"], [331, 8, 1, "", "empty"], [331, 8, 1, "", "enter"], [331, 8, 1, "", "enterabs"], [331, 7, 1, "", "queue"], [331, 8, 1, "", "run"]], "secrets": [[332, 12, 1, "", "SystemRandom"], [332, 11, 1, "", "choice"], [332, 11, 1, "", "compare_digest"], [332, 11, 1, "", "randbelow"], [332, 11, 1, "", "randbits"], [332, 11, 1, "", "token_bytes"], [332, 11, 1, "", "token_hex"], [332, 11, 1, "", "token_urlsafe"]], "select": [[334, 7, 1, "", "PIPE_BUF"], [334, 11, 1, "", "devpoll"], [334, 11, 1, "", "epoll"], [334, 6, 1, "", "error"], [334, 11, 1, "", "kevent"], [334, 11, 1, "", "kqueue"], [334, 11, 1, "", "poll"], [334, 11, 1, "", "select"]], "select.devpoll": [[334, 8, 1, "", "close"], [334, 7, 1, "", "closed"], [334, 8, 1, "", "fileno"], [334, 8, 1, "", "modify"], [334, 8, 1, "", "poll"], [334, 8, 1, "", "register"], [334, 8, 1, "", "unregister"]], "select.epoll": [[334, 8, 1, "", "close"], [334, 7, 1, "", "closed"], [334, 8, 1, "", "fileno"], [334, 8, 1, "", "fromfd"], [334, 8, 1, "", "modify"], [334, 8, 1, "", "poll"], [334, 8, 1, "", "register"], [334, 8, 1, "", "unregister"]], "select.kevent": [[334, 7, 1, "", "data"], [334, 7, 1, "", "fflags"], [334, 7, 1, "", "filter"], [334, 7, 1, "", "flags"], [334, 7, 1, "", "ident"], [334, 7, 1, "", "udata"]], "select.kqueue": [[334, 8, 1, "", "close"], [334, 7, 1, "", "closed"], [334, 8, 1, "", "control"], [334, 8, 1, "", "fileno"], [334, 8, 1, "", "fromfd"]], "select.poll": [[334, 8, 1, "", "modify"], [334, 8, 1, "", "poll"], [334, 8, 1, "", "register"], [334, 8, 1, "", "unregister"]], "selectors": [[335, 12, 1, "", "BaseSelector"], [335, 12, 1, "", "DefaultSelector"], [335, 12, 1, "", "DevpollSelector"], [335, 12, 1, "", "EpollSelector"], [335, 12, 1, "", "KqueueSelector"], [335, 12, 1, "", "PollSelector"], [335, 12, 1, "", "SelectSelector"], [335, 12, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[335, 8, 1, "", "close"], [335, 8, 1, "", "get_key"], [335, 8, 1, "", "get_map"], [335, 8, 1, "", "modify"], [335, 8, 1, "", "register"], [335, 8, 1, "", "select"], [335, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[335, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[335, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[335, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[335, 7, 1, "", "data"], [335, 7, 1, "", "events"], [335, 7, 1, "", "fd"], [335, 7, 1, "", "fileobj"]], "shelve": [[336, 12, 1, "", "BsdDbShelf"], [336, 12, 1, "", "DbfilenameShelf"], [336, 12, 1, "", "Shelf"], [336, 11, 1, "", "open"]], "shelve.Shelf": [[336, 8, 1, "", "close"], [336, 8, 1, "", "sync"]], "shlex": [[337, 11, 1, "", "join"], [337, 11, 1, "", "quote"], [337, 12, 1, "", "shlex"], [337, 11, 1, "", "split"]], "shlex.shlex": [[337, 7, 1, "", "commenters"], [337, 7, 1, "", "debug"], [337, 7, 1, "", "eof"], [337, 8, 1, "", "error_leader"], [337, 7, 1, "", "escape"], [337, 7, 1, "", "escapedquotes"], [337, 8, 1, "", "get_token"], [337, 7, 1, "", "infile"], [337, 7, 1, "", "instream"], [337, 7, 1, "", "lineno"], [337, 8, 1, "", "pop_source"], [337, 7, 1, "", "punctuation_chars"], [337, 8, 1, "", "push_source"], [337, 8, 1, "", "push_token"], [337, 7, 1, "", "quotes"], [337, 8, 1, "", "read_token"], [337, 7, 1, "", "source"], [337, 8, 1, "", "sourcehook"], [337, 7, 1, "", "token"], [337, 7, 1, "", "whitespace"], [337, 7, 1, "", "whitespace_split"], [337, 7, 1, "", "wordchars"]], "shutil": [[338, 6, 1, "", "Error"], [338, 6, 1, "", "SameFileError"], [338, 11, 1, "", "chown"], [338, 11, 1, "", "copy"], [338, 11, 1, "", "copy2"], [338, 11, 1, "", "copyfile"], [338, 11, 1, "", "copyfileobj"], [338, 11, 1, "", "copymode"], [338, 11, 1, "", "copystat"], [338, 11, 1, "", "copytree"], [338, 11, 1, "", "disk_usage"], [338, 11, 1, "", "get_archive_formats"], [338, 11, 1, "", "get_terminal_size"], [338, 11, 1, "", "get_unpack_formats"], [338, 11, 1, "", "ignore_patterns"], [338, 11, 1, "", "make_archive"], [338, 11, 1, "", "move"], [338, 11, 1, "", "register_archive_format"], [338, 11, 1, "", "register_unpack_format"], [338, 11, 1, "", "rmtree"], [338, 11, 1, "", "unpack_archive"], [338, 11, 1, "", "unregister_archive_format"], [338, 11, 1, "", "unregister_unpack_format"], [338, 11, 1, "", "which"]], "shutil.rmtree": [[338, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[339, 9, 1, "", "CTRL_BREAK_EVENT"], [339, 9, 1, "", "CTRL_C_EVENT"], [339, 9, 1, "", "ITIMER_PROF"], [339, 9, 1, "", "ITIMER_REAL"], [339, 9, 1, "", "ITIMER_VIRTUAL"], [339, 6, 1, "", "ItimerError"], [339, 9, 1, "", "NSIG"], [339, 9, 1, "", "SIGABRT"], [339, 9, 1, "", "SIGALRM"], [339, 9, 1, "", "SIGBREAK"], [339, 9, 1, "", "SIGBUS"], [339, 9, 1, "", "SIGCHLD"], [339, 9, 1, "", "SIGCLD"], [339, 9, 1, "", "SIGCONT"], [339, 9, 1, "", "SIGFPE"], [339, 9, 1, "", "SIGHUP"], [339, 9, 1, "", "SIGILL"], [339, 9, 1, "", "SIGINT"], [339, 9, 1, "", "SIGKILL"], [339, 9, 1, "", "SIGPIPE"], [339, 9, 1, "", "SIGSEGV"], [339, 9, 1, "", "SIGTERM"], [339, 9, 1, "", "SIGUSR1"], [339, 9, 1, "", "SIGUSR2"], [339, 9, 1, "", "SIGWINCH"], [339, 9, 1, "", "SIG_BLOCK"], [339, 9, 1, "", "SIG_DFL"], [339, 9, 1, "", "SIG_IGN"], [339, 9, 1, "", "SIG_SETMASK"], [339, 9, 1, "", "SIG_UNBLOCK"], [339, 11, 1, "", "alarm"], [339, 11, 1, "", "getitimer"], [339, 11, 1, "", "getsignal"], [339, 11, 1, "", "pause"], [339, 11, 1, "", "pidfd_send_signal"], [339, 11, 1, "", "pthread_kill"], [339, 11, 1, "", "pthread_sigmask"], [339, 11, 1, "", "raise_signal"], [339, 11, 1, "", "set_wakeup_fd"], [339, 11, 1, "", "setitimer"], [339, 11, 1, "", "siginterrupt"], [339, 11, 1, "", "signal"], [339, 11, 1, "", "sigpending"], [339, 11, 1, "", "sigtimedwait"], [339, 11, 1, "", "sigwait"], [339, 11, 1, "", "sigwaitinfo"], [339, 11, 1, "", "strsignal"], [339, 11, 1, "", "valid_signals"]], "site": [[340, 9, 1, "", "ENABLE_USER_SITE"], [340, 9, 1, "", "PREFIXES"], [340, 9, 1, "", "USER_BASE"], [340, 9, 1, "", "USER_SITE"], [340, 11, 1, "", "addsitedir"], [340, 11, 1, "", "getsitepackages"], [340, 11, 1, "", "getuserbase"], [340, 11, 1, "", "getusersitepackages"], [340, 11, 1, "", "main"], [340, 14, 1, "cmdoption-site-user-base", "--user-base"], [340, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[432, 8, 1, "", "indices"]], "smtpd": [[341, 12, 1, "", "DebuggingServer"], [341, 12, 1, "", "MailmanProxy"], [341, 12, 1, "", "PureProxy"], [341, 12, 1, "", "SMTPChannel"], [341, 12, 1, "", "SMTPServer"]], "smtpd.SMTPChannel": [[341, 7, 1, "", "addr"], [341, 7, 1, "", "conn"], [341, 7, 1, "", "fqdn"], [341, 7, 1, "", "mailfrom"], [341, 7, 1, "", "peer"], [341, 7, 1, "", "rcpttos"], [341, 7, 1, "", "received_data"], [341, 7, 1, "", "received_lines"], [341, 7, 1, "", "seen_greeting"], [341, 7, 1, "", "smtp_server"], [341, 7, 1, "", "smtp_state"]], "smtpd.SMTPServer": [[341, 7, 1, "", "channel_class"], [341, 8, 1, "", "process_message"]], "smtplib": [[342, 12, 1, "", "LMTP"], [342, 12, 1, "", "SMTP"], [342, 6, 1, "", "SMTPAuthenticationError"], [342, 6, 1, "", "SMTPConnectError"], [342, 6, 1, "", "SMTPDataError"], [342, 6, 1, "", "SMTPException"], [342, 6, 1, "", "SMTPHeloError"], [342, 6, 1, "", "SMTPNotSupportedError"], [342, 6, 1, "", "SMTPRecipientsRefused"], [342, 6, 1, "", "SMTPResponseException"], [342, 6, 1, "", "SMTPSenderRefused"], [342, 6, 1, "", "SMTPServerDisconnected"], [342, 12, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[342, 8, 1, "", "auth"], [342, 8, 1, "", "connect"], [342, 8, 1, "", "docmd"], [342, 8, 1, "", "ehlo"], [342, 8, 1, "", "ehlo_or_helo_if_needed"], [342, 8, 1, "", "has_extn"], [342, 8, 1, "", "helo"], [342, 8, 1, "", "login"], [342, 8, 1, "", "quit"], [342, 8, 1, "", "send_message"], [342, 8, 1, "", "sendmail"], [342, 8, 1, "", "set_debuglevel"], [342, 8, 1, "", "starttls"], [342, 8, 1, "", "verify"]], "sndhdr": [[343, 11, 1, "", "what"], [343, 11, 1, "", "whathdr"]], "socket": [[344, 9, 1, "", "AF_ALG"], [344, 9, 1, "", "AF_CAN"], [344, 9, 1, "", "AF_INET"], [344, 9, 1, "", "AF_INET6"], [344, 9, 1, "", "AF_LINK"], [344, 9, 1, "", "AF_PACKET"], [344, 9, 1, "", "AF_QIPCRTR"], [344, 9, 1, "", "AF_RDS"], [344, 9, 1, "", "AF_UNIX"], [344, 9, 1, "", "AF_VSOCK"], [344, 9, 1, "", "BDADDR_ANY"], [344, 9, 1, "", "BDADDR_LOCAL"], [344, 9, 1, "", "CAN_BCM"], [344, 9, 1, "", "CAN_ISOTP"], [344, 9, 1, "", "CAN_J1939"], [344, 9, 1, "", "CAN_RAW_FD_FRAMES"], [344, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [344, 11, 1, "", "CMSG_LEN"], [344, 11, 1, "", "CMSG_SPACE"], [344, 9, 1, "", "HCI_DATA_DIR"], [344, 9, 1, "", "HCI_FILTER"], [344, 9, 1, "", "HCI_TIME_STAMP"], [344, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [344, 9, 1, "", "PF_CAN"], [344, 9, 1, "", "PF_PACKET"], [344, 9, 1, "", "PF_RDS"], [344, 9, 1, "", "SIO_KEEPALIVE_VALS"], [344, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [344, 9, 1, "", "SIO_RCVALL"], [344, 9, 1, "", "SOCK_CLOEXEC"], [344, 9, 1, "", "SOCK_DGRAM"], [344, 9, 1, "", "SOCK_NONBLOCK"], [344, 9, 1, "", "SOCK_RAW"], [344, 9, 1, "", "SOCK_RDM"], [344, 9, 1, "", "SOCK_SEQPACKET"], [344, 9, 1, "", "SOCK_STREAM"], [344, 9, 1, "", "SOL_ALG"], [344, 9, 1, "", "SOL_RDS"], [344, 9, 1, "", "SOMAXCONN"], [344, 9, 1, "", "SocketType"], [344, 11, 1, "", "close"], [344, 11, 1, "", "create_connection"], [344, 11, 1, "", "create_server"], [344, 6, 1, "", "error"], [344, 11, 1, "", "fromfd"], [344, 11, 1, "", "fromshare"], [344, 6, 1, "", "gaierror"], [344, 11, 1, "", "getaddrinfo"], [344, 11, 1, "", "getdefaulttimeout"], [344, 11, 1, "", "getfqdn"], [344, 11, 1, "", "gethostbyaddr"], [344, 11, 1, "", "gethostbyname"], [344, 11, 1, "", "gethostbyname_ex"], [344, 11, 1, "", "gethostname"], [344, 11, 1, "", "getnameinfo"], [344, 11, 1, "", "getprotobyname"], [344, 11, 1, "", "getservbyname"], [344, 11, 1, "", "getservbyport"], [344, 11, 1, "", "has_dualstack_ipv6"], [344, 9, 1, "", "has_ipv6"], [344, 6, 1, "", "herror"], [344, 11, 1, "", "htonl"], [344, 11, 1, "", "htons"], [344, 11, 1, "", "if_indextoname"], [344, 11, 1, "", "if_nameindex"], [344, 11, 1, "", "if_nametoindex"], [344, 11, 1, "", "inet_aton"], [344, 11, 1, "", "inet_ntoa"], [344, 11, 1, "", "inet_ntop"], [344, 11, 1, "", "inet_pton"], [344, 11, 1, "", "ntohl"], [344, 11, 1, "", "ntohs"], [344, 11, 1, "", "recv_fds"], [344, 11, 1, "", "send_fds"], [344, 11, 1, "", "setdefaulttimeout"], [344, 11, 1, "", "sethostname"], [344, 12, 1, "", "socket"], [344, 11, 1, "", "socketpair"], [344, 6, 1, "", "timeout"]], "socket.socket": [[344, 8, 1, "", "accept"], [344, 8, 1, "", "bind"], [344, 8, 1, "", "close"], [344, 8, 1, "", "connect"], [344, 8, 1, "", "connect_ex"], [344, 8, 1, "", "detach"], [344, 8, 1, "", "dup"], [344, 7, 1, "", "family"], [344, 8, 1, "", "fileno"], [344, 8, 1, "", "get_inheritable"], [344, 8, 1, "", "getblocking"], [344, 8, 1, "", "getpeername"], [344, 8, 1, "", "getsockname"], [344, 8, 1, "", "getsockopt"], [344, 8, 1, "", "gettimeout"], [344, 8, 1, "", "ioctl"], [344, 8, 1, "", "listen"], [344, 8, 1, "", "makefile"], [344, 7, 1, "", "proto"], [344, 8, 1, "", "recv"], [344, 8, 1, "", "recv_into"], [344, 8, 1, "", "recvfrom"], [344, 8, 1, "", "recvfrom_into"], [344, 8, 1, "", "recvmsg"], [344, 8, 1, "", "recvmsg_into"], [344, 8, 1, "", "send"], [344, 8, 1, "", "sendall"], [344, 8, 1, "", "sendfile"], [344, 8, 1, "", "sendmsg"], [344, 8, 1, "", "sendmsg_afalg"], [344, 8, 1, "", "sendto"], [344, 8, 1, "", "set_inheritable"], [344, 8, 1, "", "setblocking"], [344, 8, 1, "", "setsockopt"], [344, 8, 1, "", "settimeout"], [344, 8, 1, "", "share"], [344, 8, 1, "", "shutdown"], [344, 7, 1, "", "type"]], "socketserver": [[345, 12, 1, "", "BaseRequestHandler"], [345, 12, 1, "", "BaseServer"], [345, 12, 1, "", "DatagramRequestHandler"], [345, 12, 1, "", "ForkingMixIn"], [345, 12, 1, "", "ForkingTCPServer"], [345, 12, 1, "", "ForkingUDPServer"], [345, 12, 1, "", "StreamRequestHandler"], [345, 12, 1, "", "TCPServer"], [345, 12, 1, "", "ThreadingMixIn"], [345, 12, 1, "", "ThreadingTCPServer"], [345, 12, 1, "", "ThreadingUDPServer"], [345, 12, 1, "", "UDPServer"], [345, 12, 1, "", "UnixDatagramServer"], [345, 12, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[345, 8, 1, "", "finish"], [345, 8, 1, "", "handle"], [345, 8, 1, "", "setup"]], "socketserver.BaseServer": [[345, 7, 1, "", "RequestHandlerClass"], [345, 7, 1, "", "address_family"], [345, 7, 1, "", "allow_reuse_address"], [345, 8, 1, "", "fileno"], [345, 8, 1, "", "finish_request"], [345, 8, 1, "", "get_request"], [345, 8, 1, "", "handle_error"], [345, 8, 1, "", "handle_request"], [345, 8, 1, "", "handle_timeout"], [345, 8, 1, "", "process_request"], [345, 7, 1, "", "request_queue_size"], [345, 8, 1, "", "serve_forever"], [345, 8, 1, "", "server_activate"], [345, 7, 1, "", "server_address"], [345, 8, 1, "", "server_bind"], [345, 8, 1, "", "server_close"], [345, 8, 1, "", "service_actions"], [345, 8, 1, "", "shutdown"], [345, 7, 1, "", "socket"], [345, 7, 1, "", "socket_type"], [345, 7, 1, "", "timeout"], [345, 8, 1, "", "verify_request"]], "spwd": [[346, 11, 1, "", "getspall"], [346, 11, 1, "", "getspnam"]], "sqlite3": [[347, 12, 1, "", "Connection"], [347, 12, 1, "", "Cursor"], [347, 6, 1, "", "DataError"], [347, 6, 1, "", "DatabaseError"], [347, 6, 1, "", "Error"], [347, 6, 1, "", "IntegrityError"], [347, 6, 1, "", "InterfaceError"], [347, 6, 1, "", "InternalError"], [347, 6, 1, "", "NotSupportedError"], [347, 6, 1, "", "OperationalError"], [347, 9, 1, "", "PARSE_COLNAMES"], [347, 9, 1, "", "PARSE_DECLTYPES"], [347, 12, 1, "", "PrepareProtocol"], [347, 6, 1, "", "ProgrammingError"], [347, 12, 1, "", "Row"], [347, 9, 1, "", "SQLITE_DENY"], [347, 9, 1, "", "SQLITE_IGNORE"], [347, 9, 1, "", "SQLITE_OK"], [347, 6, 1, "", "Warning"], [347, 9, 1, "", "apilevel"], [347, 11, 1, "", "complete_statement"], [347, 11, 1, "", "connect"], [347, 11, 1, "", "enable_callback_tracebacks"], [347, 9, 1, "", "paramstyle"], [347, 11, 1, "", "register_adapter"], [347, 11, 1, "", "register_converter"], [347, 9, 1, "", "sqlite_version"], [347, 9, 1, "", "sqlite_version_info"], [347, 9, 1, "", "threadsafety"], [347, 9, 1, "", "version"], [347, 9, 1, "", "version_info"]], "sqlite3.Connection": [[347, 8, 1, "", "backup"], [347, 8, 1, "", "close"], [347, 8, 1, "", "commit"], [347, 8, 1, "", "create_aggregate"], [347, 8, 1, "", "create_collation"], [347, 8, 1, "", "create_function"], [347, 8, 1, "", "cursor"], [347, 8, 1, "", "enable_load_extension"], [347, 8, 1, "", "execute"], [347, 8, 1, "", "executemany"], [347, 8, 1, "", "executescript"], [347, 7, 1, "", "in_transaction"], [347, 8, 1, "", "interrupt"], [347, 7, 1, "", "isolation_level"], [347, 8, 1, "", "iterdump"], [347, 8, 1, "", "load_extension"], [347, 8, 1, "", "rollback"], [347, 7, 1, "", "row_factory"], [347, 8, 1, "", "set_authorizer"], [347, 8, 1, "", "set_progress_handler"], [347, 8, 1, "", "set_trace_callback"], [347, 7, 1, "", "text_factory"], [347, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[347, 7, 1, "", "arraysize"], [347, 8, 1, "", "close"], [347, 7, 1, "", "connection"], [347, 7, 1, "", "description"], [347, 8, 1, "", "execute"], [347, 8, 1, "", "executemany"], [347, 8, 1, "", "executescript"], [347, 8, 1, "", "fetchall"], [347, 8, 1, "", "fetchmany"], [347, 8, 1, "", "fetchone"], [347, 7, 1, "", "lastrowid"], [347, 7, 1, "", "rowcount"], [347, 8, 1, "", "setinputsizes"], [347, 8, 1, "", "setoutputsize"]], "sqlite3.Row": [[347, 8, 1, "", "keys"]], "ssl": [[348, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [348, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [348, 12, 1, "", "AlertDescription"], [348, 9, 1, "", "CERT_NONE"], [348, 9, 1, "", "CERT_OPTIONAL"], [348, 9, 1, "", "CERT_REQUIRED"], [348, 9, 1, "", "CHANNEL_BINDING_TYPES"], [348, 6, 1, "", "CertificateError"], [348, 11, 1, "", "DER_cert_to_PEM_cert"], [348, 9, 1, "", "HAS_ALPN"], [348, 9, 1, "", "HAS_ECDH"], [348, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [348, 9, 1, "", "HAS_NPN"], [348, 9, 1, "", "HAS_SNI"], [348, 9, 1, "", "HAS_SSLv2"], [348, 9, 1, "", "HAS_SSLv3"], [348, 9, 1, "", "HAS_TLSv1"], [348, 9, 1, "", "HAS_TLSv1_1"], [348, 9, 1, "", "HAS_TLSv1_2"], [348, 9, 1, "", "HAS_TLSv1_3"], [348, 12, 1, "", "MemoryBIO"], [348, 9, 1, "", "OPENSSL_VERSION"], [348, 9, 1, "", "OPENSSL_VERSION_INFO"], [348, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [348, 9, 1, "", "OP_ALL"], [348, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [348, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [348, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [348, 9, 1, "", "OP_NO_COMPRESSION"], [348, 9, 1, "", "OP_NO_RENEGOTIATION"], [348, 9, 1, "", "OP_NO_SSLv2"], [348, 9, 1, "", "OP_NO_SSLv3"], [348, 9, 1, "", "OP_NO_TICKET"], [348, 9, 1, "", "OP_NO_TLSv1"], [348, 9, 1, "", "OP_NO_TLSv1_1"], [348, 9, 1, "", "OP_NO_TLSv1_2"], [348, 9, 1, "", "OP_NO_TLSv1_3"], [348, 9, 1, "", "OP_SINGLE_DH_USE"], [348, 9, 1, "", "OP_SINGLE_ECDH_USE"], [348, 12, 1, "", "Options"], [348, 11, 1, "", "PEM_cert_to_DER_cert"], [348, 9, 1, "", "PROTOCOL_SSLv2"], [348, 9, 1, "", "PROTOCOL_SSLv23"], [348, 9, 1, "", "PROTOCOL_SSLv3"], [348, 9, 1, "", "PROTOCOL_TLS"], [348, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [348, 9, 1, "", "PROTOCOL_TLS_SERVER"], [348, 9, 1, "", "PROTOCOL_TLSv1"], [348, 9, 1, "", "PROTOCOL_TLSv1_1"], [348, 9, 1, "", "PROTOCOL_TLSv1_2"], [348, 11, 1, "", "RAND_add"], [348, 11, 1, "", "RAND_bytes"], [348, 11, 1, "", "RAND_pseudo_bytes"], [348, 11, 1, "", "RAND_status"], [348, 6, 1, "", "SSLCertVerificationError"], [348, 12, 1, "", "SSLContext"], [348, 6, 1, "", "SSLEOFError"], [348, 6, 1, "", "SSLError"], [348, 12, 1, "", "SSLErrorNumber"], [348, 12, 1, "", "SSLObject"], [348, 12, 1, "", "SSLSession"], [348, 12, 1, "", "SSLSocket"], [348, 6, 1, "", "SSLSyscallError"], [348, 6, 1, "", "SSLWantReadError"], [348, 6, 1, "", "SSLWantWriteError"], [348, 6, 1, "", "SSLZeroReturnError"], [348, 12, 1, "", "TLSVersion"], [348, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [348, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [348, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [348, 9, 1, "", "VERIFY_DEFAULT"], [348, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [348, 9, 1, "", "VERIFY_X509_STRICT"], [348, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [348, 12, 1, "", "VerifyFlags"], [348, 12, 1, "", "VerifyMode"], [348, 11, 1, "", "cert_time_to_seconds"], [348, 11, 1, "", "create_default_context"], [348, 11, 1, "", "enum_certificates"], [348, 11, 1, "", "enum_crls"], [348, 11, 1, "", "get_default_verify_paths"], [348, 11, 1, "", "get_server_certificate"], [348, 11, 1, "", "match_hostname"], [348, 11, 1, "", "wrap_socket"]], "ssl.MemoryBIO": [[348, 7, 1, "", "eof"], [348, 7, 1, "", "pending"], [348, 8, 1, "", "read"], [348, 8, 1, "", "write"], [348, 8, 1, "", "write_eof"]], "ssl.Purpose": [[348, 9, 1, "", "CLIENT_AUTH"], [348, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[348, 7, 1, "", "verify_code"], [348, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[348, 8, 1, "", "cert_store_stats"], [348, 7, 1, "", "check_hostname"], [348, 8, 1, "", "get_ca_certs"], [348, 8, 1, "", "get_ciphers"], [348, 7, 1, "", "hostname_checks_common_name"], [348, 7, 1, "", "keylog_filename"], [348, 8, 1, "", "load_cert_chain"], [348, 8, 1, "", "load_default_certs"], [348, 8, 1, "", "load_dh_params"], [348, 8, 1, "", "load_verify_locations"], [348, 7, 1, "", "maximum_version"], [348, 7, 1, "", "minimum_version"], [348, 7, 1, "", "num_tickets"], [348, 7, 1, "", "options"], [348, 7, 1, "", "post_handshake_auth"], [348, 7, 1, "", "protocol"], [348, 7, 1, "", "security_level"], [348, 8, 1, "", "session_stats"], [348, 8, 1, "", "set_alpn_protocols"], [348, 8, 1, "", "set_ciphers"], [348, 8, 1, "", "set_default_verify_paths"], [348, 8, 1, "", "set_ecdh_curve"], [348, 8, 1, "", "set_npn_protocols"], [348, 7, 1, "", "set_servername_callback"], [348, 7, 1, "", "sni_callback"], [348, 7, 1, "", "sslobject_class"], [348, 7, 1, "", "sslsocket_class"], [348, 7, 1, "", "verify_flags"], [348, 7, 1, "", "verify_mode"], [348, 8, 1, "", "wrap_bio"], [348, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[348, 7, 1, "", "library"], [348, 7, 1, "", "reason"]], "ssl.SSLSession": [[348, 7, 1, "", "has_ticket"], [348, 7, 1, "", "id"], [348, 7, 1, "", "ticket_lifetime_hint"], [348, 7, 1, "", "time"], [348, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[348, 8, 1, "", "cipher"], [348, 8, 1, "", "compression"], [348, 7, 1, "", "context"], [348, 8, 1, "", "do_handshake"], [348, 8, 1, "", "get_channel_binding"], [348, 8, 1, "", "getpeercert"], [348, 8, 1, "", "pending"], [348, 8, 1, "", "read"], [348, 8, 1, "", "selected_alpn_protocol"], [348, 8, 1, "", "selected_npn_protocol"], [348, 7, 1, "", "server_hostname"], [348, 7, 1, "", "server_side"], [348, 7, 1, "", "session"], [348, 7, 1, "", "session_reused"], [348, 8, 1, "", "shared_ciphers"], [348, 8, 1, "", "unwrap"], [348, 8, 1, "", "verify_client_post_handshake"], [348, 8, 1, "", "version"], [348, 8, 1, "", "write"]], "ssl.TLSVersion": [[348, 7, 1, "", "MAXIMUM_SUPPORTED"], [348, 7, 1, "", "MINIMUM_SUPPORTED"], [348, 7, 1, "", "SSLv3"], [348, 7, 1, "", "TLSv1"], [348, 7, 1, "", "TLSv1_1"], [348, 7, 1, "", "TLSv1_2"], [348, 7, 1, "", "TLSv1_3"]], "stat": [[349, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [349, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [349, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [349, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [349, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [349, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [349, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [349, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [349, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [349, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [349, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [349, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [349, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [349, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [349, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [349, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [349, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [349, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [349, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [349, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [349, 9, 1, "", "SF_APPEND"], [349, 9, 1, "", "SF_ARCHIVED"], [349, 9, 1, "", "SF_IMMUTABLE"], [349, 9, 1, "", "SF_NOUNLINK"], [349, 9, 1, "", "SF_SNAPSHOT"], [349, 9, 1, "", "ST_ATIME"], [349, 9, 1, "", "ST_CTIME"], [349, 9, 1, "", "ST_DEV"], [349, 9, 1, "", "ST_GID"], [349, 9, 1, "", "ST_INO"], [349, 9, 1, "", "ST_MODE"], [349, 9, 1, "", "ST_MTIME"], [349, 9, 1, "", "ST_NLINK"], [349, 9, 1, "", "ST_SIZE"], [349, 9, 1, "", "ST_UID"], [349, 9, 1, "", "S_ENFMT"], [349, 9, 1, "", "S_IEXEC"], [349, 9, 1, "", "S_IFBLK"], [349, 9, 1, "", "S_IFCHR"], [349, 9, 1, "", "S_IFDIR"], [349, 9, 1, "", "S_IFDOOR"], [349, 9, 1, "", "S_IFIFO"], [349, 9, 1, "", "S_IFLNK"], [349, 11, 1, "", "S_IFMT"], [349, 9, 1, "", "S_IFPORT"], [349, 9, 1, "", "S_IFREG"], [349, 9, 1, "", "S_IFSOCK"], [349, 9, 1, "", "S_IFWHT"], [349, 11, 1, "", "S_IMODE"], [349, 9, 1, "", "S_IREAD"], [349, 9, 1, "", "S_IRGRP"], [349, 9, 1, "", "S_IROTH"], [349, 9, 1, "", "S_IRUSR"], [349, 9, 1, "", "S_IRWXG"], [349, 9, 1, "", "S_IRWXO"], [349, 9, 1, "", "S_IRWXU"], [349, 11, 1, "", "S_ISBLK"], [349, 11, 1, "", "S_ISCHR"], [349, 11, 1, "", "S_ISDIR"], [349, 11, 1, "", "S_ISDOOR"], [349, 11, 1, "", "S_ISFIFO"], [349, 9, 1, "", "S_ISGID"], [349, 11, 1, "", "S_ISLNK"], [349, 11, 1, "", "S_ISPORT"], [349, 11, 1, "", "S_ISREG"], [349, 11, 1, "", "S_ISSOCK"], [349, 9, 1, "", "S_ISUID"], [349, 9, 1, "", "S_ISVTX"], [349, 11, 1, "", "S_ISWHT"], [349, 9, 1, "", "S_IWGRP"], [349, 9, 1, "", "S_IWOTH"], [349, 9, 1, "", "S_IWRITE"], [349, 9, 1, "", "S_IWUSR"], [349, 9, 1, "", "S_IXGRP"], [349, 9, 1, "", "S_IXOTH"], [349, 9, 1, "", "S_IXUSR"], [349, 9, 1, "", "UF_APPEND"], [349, 9, 1, "", "UF_COMPRESSED"], [349, 9, 1, "", "UF_HIDDEN"], [349, 9, 1, "", "UF_IMMUTABLE"], [349, 9, 1, "", "UF_NODUMP"], [349, 9, 1, "", "UF_NOUNLINK"], [349, 9, 1, "", "UF_OPAQUE"], [349, 11, 1, "", "filemode"]], "statistics": [[350, 12, 1, "", "NormalDist"], [350, 6, 1, "", "StatisticsError"], [350, 11, 1, "", "correlation"], [350, 11, 1, "", "covariance"], [350, 11, 1, "", "fmean"], [350, 11, 1, "", "geometric_mean"], [350, 11, 1, "", "harmonic_mean"], [350, 11, 1, "", "linear_regression"], [350, 11, 1, "", "mean"], [350, 11, 1, "", "median"], [350, 11, 1, "", "median_grouped"], [350, 11, 1, "", "median_high"], [350, 11, 1, "", "median_low"], [350, 11, 1, "", "mode"], [350, 11, 1, "", "multimode"], [350, 11, 1, "", "pstdev"], [350, 11, 1, "", "pvariance"], [350, 11, 1, "", "quantiles"], [350, 11, 1, "", "stdev"], [350, 11, 1, "", "variance"]], "statistics.NormalDist": [[350, 8, 1, "", "cdf"], [350, 8, 1, "", "from_samples"], [350, 8, 1, "", "inv_cdf"], [350, 7, 1, "", "mean"], [350, 7, 1, "", "median"], [350, 7, 1, "", "mode"], [350, 8, 1, "", "overlap"], [350, 8, 1, "", "pdf"], [350, 8, 1, "", "quantiles"], [350, 8, 1, "", "samples"], [350, 7, 1, "", "stdev"], [350, 7, 1, "", "variance"], [350, 8, 1, "", "zscore"]], "str": [[351, 8, 1, "", "capitalize"], [351, 8, 1, "", "casefold"], [351, 8, 1, "", "center"], [351, 8, 1, "", "count"], [351, 8, 1, "", "encode"], [351, 8, 1, "", "endswith"], [351, 8, 1, "", "expandtabs"], [351, 8, 1, "", "find"], [351, 8, 1, "", "format"], [351, 8, 1, "", "format_map"], [351, 8, 1, "", "index"], [351, 8, 1, "", "isalnum"], [351, 8, 1, "", "isalpha"], [351, 8, 1, "", "isascii"], [351, 8, 1, "", "isdecimal"], [351, 8, 1, "", "isdigit"], [351, 8, 1, "", "isidentifier"], [351, 8, 1, "", "islower"], [351, 8, 1, "", "isnumeric"], [351, 8, 1, "", "isprintable"], [351, 8, 1, "", "isspace"], [351, 8, 1, "", "istitle"], [351, 8, 1, "", "isupper"], [351, 8, 1, "", "join"], [351, 8, 1, "", "ljust"], [351, 8, 1, "", "lower"], [351, 8, 1, "", "lstrip"], [351, 8, 1, "", "maketrans"], [351, 8, 1, "", "partition"], [351, 8, 1, "", "removeprefix"], [351, 8, 1, "", "removesuffix"], [351, 8, 1, "", "replace"], [351, 8, 1, "", "rfind"], [351, 8, 1, "", "rindex"], [351, 8, 1, "", "rjust"], [351, 8, 1, "", "rpartition"], [351, 8, 1, "", "rsplit"], [351, 8, 1, "", "rstrip"], [351, 8, 1, "", "split"], [351, 8, 1, "", "splitlines"], [351, 8, 1, "", "startswith"], [351, 8, 1, "", "strip"], [351, 8, 1, "", "swapcase"], [351, 8, 1, "", "title"], [351, 8, 1, "", "translate"], [351, 8, 1, "", "upper"], [351, 8, 1, "", "zfill"]], "string": [[352, 12, 1, "", "Formatter"], [352, 12, 1, "", "Template"], [352, 9, 1, "", "ascii_letters"], [352, 9, 1, "", "ascii_lowercase"], [352, 9, 1, "", "ascii_uppercase"], [352, 11, 1, "", "capwords"], [352, 9, 1, "", "digits"], [352, 9, 1, "", "hexdigits"], [352, 9, 1, "", "octdigits"], [352, 9, 1, "", "printable"], [352, 9, 1, "", "punctuation"], [352, 9, 1, "", "whitespace"]], "string.Formatter": [[352, 8, 1, "", "check_unused_args"], [352, 8, 1, "", "convert_field"], [352, 8, 1, "", "format"], [352, 8, 1, "", "format_field"], [352, 8, 1, "", "get_field"], [352, 8, 1, "", "get_value"], [352, 8, 1, "", "parse"], [352, 8, 1, "", "vformat"]], "string.Template": [[352, 8, 1, "", "safe_substitute"], [352, 8, 1, "", "substitute"], [352, 7, 1, "", "template"]], "stringprep": [[353, 11, 1, "", "in_table_a1"], [353, 11, 1, "", "in_table_b1"], [353, 11, 1, "", "in_table_c11"], [353, 11, 1, "", "in_table_c11_c12"], [353, 11, 1, "", "in_table_c12"], [353, 11, 1, "", "in_table_c21"], [353, 11, 1, "", "in_table_c21_c22"], [353, 11, 1, "", "in_table_c22"], [353, 11, 1, "", "in_table_c3"], [353, 11, 1, "", "in_table_c4"], [353, 11, 1, "", "in_table_c5"], [353, 11, 1, "", "in_table_c6"], [353, 11, 1, "", "in_table_c7"], [353, 11, 1, "", "in_table_c8"], [353, 11, 1, "", "in_table_c9"], [353, 11, 1, "", "in_table_d1"], [353, 11, 1, "", "in_table_d2"], [353, 11, 1, "", "map_table_b2"], [353, 11, 1, "", "map_table_b3"]], "struct": [[354, 12, 1, "", "Struct"], [354, 11, 1, "", "calcsize"], [354, 6, 1, "", "error"], [354, 11, 1, "", "iter_unpack"], [354, 11, 1, "", "pack"], [354, 11, 1, "", "pack_into"], [354, 11, 1, "", "unpack"], [354, 11, 1, "", "unpack_from"]], "struct.Struct": [[354, 7, 1, "", "format"], [354, 8, 1, "", "iter_unpack"], [354, 8, 1, "", "pack"], [354, 8, 1, "", "pack_into"], [354, 7, 1, "", "size"], [354, 8, 1, "", "unpack"], [354, 8, 1, "", "unpack_from"]], "subprocess": [[355, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [355, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [355, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [355, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [355, 9, 1, "", "CREATE_NEW_CONSOLE"], [355, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [355, 9, 1, "", "CREATE_NO_WINDOW"], [355, 6, 1, "", "CalledProcessError"], [355, 12, 1, "", "CompletedProcess"], [355, 9, 1, "", "DETACHED_PROCESS"], [355, 9, 1, "", "DEVNULL"], [355, 9, 1, "", "HIGH_PRIORITY_CLASS"], [355, 9, 1, "", "IDLE_PRIORITY_CLASS"], [355, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [355, 9, 1, "", "PIPE"], [355, 12, 1, "", "Popen"], [355, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [355, 9, 1, "", "STARTF_USESHOWWINDOW"], [355, 9, 1, "", "STARTF_USESTDHANDLES"], [355, 12, 1, "", "STARTUPINFO"], [355, 9, 1, "", "STDOUT"], [355, 9, 1, "", "STD_ERROR_HANDLE"], [355, 9, 1, "", "STD_INPUT_HANDLE"], [355, 9, 1, "", "STD_OUTPUT_HANDLE"], [355, 9, 1, "", "SW_HIDE"], [355, 6, 1, "", "SubprocessError"], [355, 6, 1, "", "TimeoutExpired"], [355, 11, 1, "", "call"], [355, 11, 1, "", "check_call"], [355, 11, 1, "", "check_output"], [355, 11, 1, "", "getoutput"], [355, 11, 1, "", "getstatusoutput"], [355, 11, 1, "", "run"]], "subprocess.CalledProcessError": [[355, 7, 1, "", "cmd"], [355, 7, 1, "", "output"], [355, 7, 1, "", "returncode"], [355, 7, 1, "", "stderr"], [355, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[355, 7, 1, "", "args"], [355, 8, 1, "", "check_returncode"], [355, 7, 1, "", "returncode"], [355, 7, 1, "", "stderr"], [355, 7, 1, "", "stdout"]], "subprocess.Popen": [[355, 7, 1, "", "args"], [355, 8, 1, "", "communicate"], [355, 8, 1, "", "kill"], [355, 7, 1, "", "pid"], [355, 8, 1, "", "poll"], [355, 7, 1, "", "returncode"], [355, 8, 1, "", "send_signal"], [355, 7, 1, "", "stderr"], [355, 7, 1, "", "stdin"], [355, 7, 1, "", "stdout"], [355, 8, 1, "", "terminate"], [355, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[355, 7, 1, "", "dwFlags"], [355, 7, 1, "", "hStdError"], [355, 7, 1, "", "hStdInput"], [355, 7, 1, "", "hStdOutput"], [355, 7, 1, "", "lpAttributeList"], [355, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[355, 7, 1, "", "cmd"], [355, 7, 1, "", "output"], [355, 7, 1, "", "stderr"], [355, 7, 1, "", "stdout"], [355, 7, 1, "", "timeout"]], "sunau": [[356, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [356, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [356, 9, 1, "", "AUDIO_FILE_MAGIC"], [356, 6, 1, "", "Error"], [356, 11, 1, "", "open"]], "sunau.AU_read": [[356, 8, 1, "", "close"], [356, 8, 1, "", "getcompname"], [356, 8, 1, "", "getcomptype"], [356, 8, 1, "", "getframerate"], [356, 8, 1, "", "getmark"], [356, 8, 1, "", "getmarkers"], [356, 8, 1, "", "getnchannels"], [356, 8, 1, "", "getnframes"], [356, 8, 1, "", "getparams"], [356, 8, 1, "", "getsampwidth"], [356, 8, 1, "", "readframes"], [356, 8, 1, "", "rewind"], [356, 8, 1, "", "setpos"], [356, 8, 1, "", "tell"]], "sunau.AU_write": [[356, 8, 1, "", "close"], [356, 8, 1, "", "setcomptype"], [356, 8, 1, "", "setframerate"], [356, 8, 1, "", "setnchannels"], [356, 8, 1, "", "setnframes"], [356, 8, 1, "", "setparams"], [356, 8, 1, "", "setsampwidth"], [356, 8, 1, "", "tell"], [356, 8, 1, "", "writeframes"], [356, 8, 1, "", "writeframesraw"]], "symtable": [[358, 12, 1, "", "Class"], [358, 12, 1, "", "Function"], [358, 12, 1, "", "Symbol"], [358, 12, 1, "", "SymbolTable"], [358, 11, 1, "", "symtable"]], "symtable.Class": [[358, 8, 1, "", "get_methods"]], "symtable.Function": [[358, 8, 1, "", "get_frees"], [358, 8, 1, "", "get_globals"], [358, 8, 1, "", "get_locals"], [358, 8, 1, "", "get_nonlocals"], [358, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[358, 8, 1, "", "get_name"], [358, 8, 1, "", "get_namespace"], [358, 8, 1, "", "get_namespaces"], [358, 8, 1, "", "is_annotated"], [358, 8, 1, "", "is_assigned"], [358, 8, 1, "", "is_declared_global"], [358, 8, 1, "", "is_free"], [358, 8, 1, "", "is_global"], [358, 8, 1, "", "is_imported"], [358, 8, 1, "", "is_local"], [358, 8, 1, "", "is_namespace"], [358, 8, 1, "", "is_nonlocal"], [358, 8, 1, "", "is_parameter"], [358, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[358, 8, 1, "", "get_children"], [358, 8, 1, "", "get_id"], [358, 8, 1, "", "get_identifiers"], [358, 8, 1, "", "get_lineno"], [358, 8, 1, "", "get_name"], [358, 8, 1, "", "get_symbols"], [358, 8, 1, "", "get_type"], [358, 8, 1, "", "has_children"], [358, 8, 1, "", "is_nested"], [358, 8, 1, "", "is_optimized"], [358, 8, 1, "", "lookup"]], "sys": [[359, 9, 1, "", "__breakpointhook__"], [359, 9, 1, "", "__displayhook__"], [359, 9, 1, "", "__excepthook__"], [359, 9, 1, "", "__interactivehook__"], [359, 9, 1, "", "__stderr__"], [359, 9, 1, "", "__stdin__"], [359, 9, 1, "", "__stdout__"], [359, 9, 1, "", "__unraisablehook__"], [359, 11, 1, "", "_clear_type_cache"], [359, 11, 1, "", "_current_exceptions"], [359, 11, 1, "", "_current_frames"], [359, 11, 1, "", "_debugmallocstats"], [359, 11, 1, "", "_enablelegacywindowsfsencoding"], [359, 11, 1, "", "_getframe"], [359, 9, 1, "", "_xoptions"], [359, 9, 1, "", "abiflags"], [359, 11, 1, "", "addaudithook"], [359, 9, 1, "", "api_version"], [359, 9, 1, "", "argv"], [359, 11, 1, "", "audit"], [359, 9, 1, "", "base_exec_prefix"], [359, 9, 1, "", "base_prefix"], [359, 11, 1, "", "breakpointhook"], [359, 9, 1, "", "builtin_module_names"], [359, 9, 1, "", "byteorder"], [359, 11, 1, "", "call_tracing"], [359, 9, 1, "", "copyright"], [359, 11, 1, "", "displayhook"], [359, 9, 1, "", "dllhandle"], [359, 9, 1, "", "dont_write_bytecode"], [359, 11, 1, "", "exc_info"], [359, 11, 1, "", "excepthook"], [359, 9, 1, "", "exec_prefix"], [359, 9, 1, "", "executable"], [359, 11, 1, "", "exit"], [359, 9, 1, "", "flags"], [359, 9, 1, "", "float_info"], [359, 9, 1, "", "float_repr_style"], [359, 11, 1, "", "get_asyncgen_hooks"], [359, 11, 1, "", "get_coroutine_origin_tracking_depth"], [359, 11, 1, "", "get_int_max_str_digits"], [359, 11, 1, "", "getallocatedblocks"], [359, 11, 1, "", "getandroidapilevel"], [359, 11, 1, "", "getdefaultencoding"], [359, 11, 1, "", "getdlopenflags"], [359, 11, 1, "", "getfilesystemencodeerrors"], [359, 11, 1, "", "getfilesystemencoding"], [359, 11, 1, "", "getprofile"], [359, 11, 1, "", "getrecursionlimit"], [359, 11, 1, "", "getrefcount"], [359, 11, 1, "", "getsizeof"], [359, 11, 1, "", "getswitchinterval"], [359, 11, 1, "", "gettrace"], [359, 11, 1, "", "getwindowsversion"], [359, 9, 1, "", "hash_info"], [359, 9, 1, "", "hexversion"], [359, 9, 1, "", "implementation"], [359, 9, 1, "", "int_info"], [359, 11, 1, "", "intern"], [359, 11, 1, "", "is_finalizing"], [359, 9, 1, "", "last_traceback"], [359, 9, 1, "", "last_type"], [359, 9, 1, "", "last_value"], [359, 9, 1, "", "maxsize"], [359, 9, 1, "", "maxunicode"], [359, 9, 1, "", "meta_path"], [359, 9, 1, "", "modules"], [359, 9, 1, "", "orig_argv"], [359, 9, 1, "", "path"], [359, 9, 1, "", "path_hooks"], [359, 9, 1, "", "path_importer_cache"], [359, 9, 1, "", "platform"], [359, 9, 1, "", "platlibdir"], [359, 9, 1, "", "prefix"], [359, 9, 1, "", "ps1"], [359, 9, 1, "", "ps2"], [359, 9, 1, "", "pycache_prefix"], [359, 11, 1, "", "set_asyncgen_hooks"], [359, 11, 1, "", "set_coroutine_origin_tracking_depth"], [359, 11, 1, "", "set_int_max_str_digits"], [359, 11, 1, "", "setdlopenflags"], [359, 11, 1, "", "setprofile"], [359, 11, 1, "", "setrecursionlimit"], [359, 11, 1, "", "setswitchinterval"], [359, 11, 1, "", "settrace"], [359, 9, 1, "", "stderr"], [359, 9, 1, "", "stdin"], [359, 9, 1, "", "stdlib_module_names"], [359, 9, 1, "", "stdout"], [359, 9, 1, "", "thread_info"], [359, 9, 1, "", "tracebacklimit"], [359, 11, 1, "", "unraisablehook"], [359, 9, 1, "", "version"], [359, 9, 1, "", "version_info"], [359, 9, 1, "", "warnoptions"], [359, 9, 1, "", "winver"]], "sysconfig": [[360, 11, 1, "", "_get_preferred_schemes"], [360, 11, 1, "", "get_config_h_filename"], [360, 11, 1, "", "get_config_var"], [360, 11, 1, "", "get_config_vars"], [360, 11, 1, "", "get_default_scheme"], [360, 11, 1, "", "get_makefile_filename"], [360, 11, 1, "", "get_path"], [360, 11, 1, "", "get_path_names"], [360, 11, 1, "", "get_paths"], [360, 11, 1, "", "get_platform"], [360, 11, 1, "", "get_preferred_scheme"], [360, 11, 1, "", "get_python_version"], [360, 11, 1, "", "get_scheme_names"], [360, 11, 1, "", "is_python_build"], [360, 11, 1, "", "parse_config_h"]], "syslog": [[361, 11, 1, "", "closelog"], [361, 11, 1, "", "openlog"], [361, 11, 1, "", "setlogmask"], [361, 11, 1, "", "syslog"]], "tabnanny": [[362, 6, 1, "", "NannyNag"], [362, 11, 1, "", "check"], [362, 9, 1, "", "filename_only"], [362, 11, 1, "", "process_tokens"], [362, 9, 1, "", "verbose"]], "tarfile": [[363, 6, 1, "", "CompressionError"], [363, 9, 1, "", "DEFAULT_FORMAT"], [363, 9, 1, "", "ENCODING"], [363, 6, 1, "", "ExtractError"], [363, 9, 1, "", "GNU_FORMAT"], [363, 6, 1, "", "HeaderError"], [363, 9, 1, "", "PAX_FORMAT"], [363, 6, 1, "", "ReadError"], [363, 6, 1, "", "StreamError"], [363, 6, 1, "", "TarError"], [363, 12, 1, "", "TarFile"], [363, 12, 1, "", "TarInfo"], [363, 9, 1, "", "USTAR_FORMAT"], [363, 11, 1, "", "is_tarfile"], [363, 11, 1, "", "open"], [363, 14, 1, "cmdoption-tarfile-create", "--create"], [363, 14, 1, "cmdoption-tarfile-extract", "--extract"], [363, 14, 1, "cmdoption-tarfile-list", "--list"], [363, 14, 1, "cmdoption-tarfile-test", "--test"], [363, 14, 1, "cmdoption-tarfile-v", "--verbose"], [363, 14, 1, "cmdoption-tarfile-c", "-c"], [363, 14, 1, "cmdoption-tarfile-e", "-e"], [363, 14, 1, "cmdoption-tarfile-l", "-l"], [363, 14, 1, "cmdoption-tarfile-t", "-t"], [363, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.TarFile": [[363, 8, 1, "", "add"], [363, 8, 1, "", "addfile"], [363, 8, 1, "", "close"], [363, 8, 1, "", "extract"], [363, 8, 1, "", "extractall"], [363, 8, 1, "", "extractfile"], [363, 8, 1, "", "getmember"], [363, 8, 1, "", "getmembers"], [363, 8, 1, "", "getnames"], [363, 8, 1, "", "gettarinfo"], [363, 8, 1, "", "list"], [363, 8, 1, "", "next"], [363, 8, 1, "", "open"], [363, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[363, 8, 1, "", "frombuf"], [363, 8, 1, "", "fromtarfile"], [363, 7, 1, "", "gid"], [363, 7, 1, "", "gname"], [363, 8, 1, "", "isblk"], [363, 8, 1, "", "ischr"], [363, 8, 1, "", "isdev"], [363, 8, 1, "", "isdir"], [363, 8, 1, "", "isfifo"], [363, 8, 1, "", "isfile"], [363, 8, 1, "", "islnk"], [363, 8, 1, "", "isreg"], [363, 8, 1, "", "issym"], [363, 7, 1, "", "linkname"], [363, 7, 1, "", "mode"], [363, 7, 1, "", "mtime"], [363, 7, 1, "", "name"], [363, 7, 1, "", "pax_headers"], [363, 7, 1, "", "size"], [363, 8, 1, "", "tobuf"], [363, 7, 1, "", "type"], [363, 7, 1, "", "uid"], [363, 7, 1, "", "uname"]], "telnetlib": [[364, 12, 1, "", "Telnet"]], "telnetlib.Telnet": [[364, 8, 1, "", "close"], [364, 8, 1, "", "expect"], [364, 8, 1, "", "fileno"], [364, 8, 1, "", "get_socket"], [364, 8, 1, "", "interact"], [364, 8, 1, "", "msg"], [364, 8, 1, "", "mt_interact"], [364, 8, 1, "", "open"], [364, 8, 1, "", "read_all"], [364, 8, 1, "", "read_eager"], [364, 8, 1, "", "read_lazy"], [364, 8, 1, "", "read_sb_data"], [364, 8, 1, "", "read_some"], [364, 8, 1, "", "read_until"], [364, 8, 1, "", "read_very_eager"], [364, 8, 1, "", "read_very_lazy"], [364, 8, 1, "", "set_debuglevel"], [364, 8, 1, "", "set_option_negotiation_callback"], [364, 8, 1, "", "write"]], "tempfile": [[365, 11, 1, "", "NamedTemporaryFile"], [365, 12, 1, "", "SpooledTemporaryFile"], [365, 12, 1, "", "TemporaryDirectory"], [365, 11, 1, "", "TemporaryFile"], [365, 11, 1, "", "gettempdir"], [365, 11, 1, "", "gettempdirb"], [365, 11, 1, "", "gettempprefix"], [365, 11, 1, "", "gettempprefixb"], [365, 11, 1, "", "mkdtemp"], [365, 11, 1, "", "mkstemp"], [365, 11, 1, "", "mktemp"], [365, 9, 1, "", "tempdir"]], "termios": [[366, 11, 1, "", "tcdrain"], [366, 11, 1, "", "tcflow"], [366, 11, 1, "", "tcflush"], [366, 11, 1, "", "tcgetattr"], [366, 11, 1, "", "tcsendbreak"], [366, 11, 1, "", "tcsetattr"]], "test": [[367, 10, 0, "-", "support"]], "test.support": [[367, 9, 1, "", "ALWAYS_EQ"], [367, 12, 1, "", "BasicTestRunner"], [367, 9, 1, "", "HAVE_DOCSTRINGS"], [367, 9, 1, "", "INTERNET_TIMEOUT"], [367, 9, 1, "", "LARGEST"], [367, 9, 1, "", "LONG_TIMEOUT"], [367, 9, 1, "", "LOOPBACK_TIMEOUT"], [367, 9, 1, "", "MAX_Py_ssize_t"], [367, 9, 1, "", "MISSING_C_DOCSTRINGS"], [367, 12, 1, "", "Matcher"], [367, 9, 1, "", "NEVER_EQ"], [367, 9, 1, "", "PGO"], [367, 9, 1, "", "PIPE_MAX_SIZE"], [367, 6, 1, "", "ResourceDenied"], [367, 9, 1, "", "SHORT_TIMEOUT"], [367, 9, 1, "", "SMALLEST"], [367, 9, 1, "", "SOCK_MAX_SIZE"], [367, 12, 1, "", "SaveSignals"], [367, 12, 1, "", "SuppressCrashReport"], [367, 9, 1, "", "TEST_DATA_DIR"], [367, 9, 1, "", "TEST_HOME_DIR"], [367, 9, 1, "", "TEST_HTTP_URL"], [367, 9, 1, "", "TEST_SUPPORT_DIR"], [367, 6, 1, "", "TestFailed"], [367, 11, 1, "", "adjust_int_max_str_digits"], [367, 11, 1, "", "anticipate_failure"], [367, 11, 1, "", "args_from_interpreter_flags"], [367, 11, 1, "", "bigaddrspacetest"], [367, 11, 1, "", "bigmemtest"], [367, 10, 0, "-", "bytecode_helper"], [367, 11, 1, "", "calcobjsize"], [367, 11, 1, "", "calcvobjsize"], [367, 11, 1, "", "captured_stderr"], [367, 11, 1, "", "captured_stdin"], [367, 11, 1, "", "captured_stdout"], [367, 11, 1, "", "catch_unraisable_exception"], [367, 11, 1, "", "check__all__"], [367, 11, 1, "", "check_disallow_instantiation"], [367, 11, 1, "", "check_free_after_iterating"], [367, 11, 1, "", "check_impl_detail"], [367, 11, 1, "", "check_syntax_error"], [367, 11, 1, "", "checksizeof"], [367, 11, 1, "", "cpython_only"], [367, 11, 1, "", "detect_api_mismatch"], [367, 11, 1, "", "disable_faulthandler"], [367, 11, 1, "", "disable_gc"], [367, 11, 1, "", "findfile"], [367, 11, 1, "", "gc_collect"], [367, 11, 1, "", "get_attribute"], [367, 11, 1, "", "get_original_stdout"], [367, 11, 1, "", "impl_detail"], [367, 10, 0, "-", "import_helper"], [367, 9, 1, "", "is_android"], [367, 9, 1, "", "is_jython"], [367, 11, 1, "", "is_resource_enabled"], [367, 11, 1, "", "load_package_tests"], [367, 11, 1, "", "match_test"], [367, 9, 1, "", "max_memuse"], [367, 11, 1, "", "missing_compiler_executable"], [367, 11, 1, "", "no_tracing"], [367, 11, 1, "", "open_urlresource"], [367, 11, 1, "", "optim_args_from_interpreter_flags"], [367, 10, 0, "-", "os_helper"], [367, 11, 1, "", "patch"], [367, 11, 1, "", "print_warning"], [367, 11, 1, "", "python_is_optimized"], [367, 9, 1, "", "real_max_memuse"], [367, 11, 1, "", "reap_children"], [367, 11, 1, "", "record_original_stdout"], [367, 11, 1, "", "refcount_test"], [367, 11, 1, "", "requires"], [367, 11, 1, "", "requires_IEEE_754"], [367, 11, 1, "", "requires_bz2"], [367, 11, 1, "", "requires_docstrings"], [367, 11, 1, "", "requires_freebsd_version"], [367, 11, 1, "", "requires_gzip"], [367, 11, 1, "", "requires_linux_version"], [367, 11, 1, "", "requires_lzma"], [367, 11, 1, "", "requires_mac_version"], [367, 11, 1, "", "requires_resource"], [367, 11, 1, "", "requires_zlib"], [367, 11, 1, "", "run_doctest"], [367, 11, 1, "", "run_in_subinterp"], [367, 11, 1, "", "run_unittest"], [367, 11, 1, "", "run_with_locale"], [367, 11, 1, "", "run_with_tz"], [367, 10, 0, "-", "script_helper"], [367, 11, 1, "", "set_match_tests"], [367, 11, 1, "", "set_memlimit"], [367, 11, 1, "", "setswitchinterval"], [367, 11, 1, "", "skip_if_broken_multiprocessing_synchronize"], [367, 10, 0, "-", "socket_helper"], [367, 11, 1, "", "sortdict"], [367, 11, 1, "", "swap_attr"], [367, 11, 1, "", "swap_item"], [367, 11, 1, "", "system_must_validate_cert"], [367, 10, 0, "-", "threading_helper"], [367, 9, 1, "", "unix_shell"], [367, 9, 1, "", "verbose"], [367, 11, 1, "", "wait_process"], [367, 10, 0, "-", "warnings_helper"], [367, 11, 1, "", "with_pymalloc"]], "test.support.BasicTestRunner": [[367, 8, 1, "", "run"]], "test.support.Matcher": [[367, 8, 1, "", "match_value"], [367, 8, 1, "", "matches"]], "test.support.SaveSignals": [[367, 8, 1, "", "restore"], [367, 8, 1, "", "save"]], "test.support.bytecode_helper": [[367, 12, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[367, 8, 1, "", "assertInBytecode"], [367, 8, 1, "", "assertNotInBytecode"], [367, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[367, 12, 1, "", "CleanImport"], [367, 12, 1, "", "DirsOnSysPath"], [367, 11, 1, "", "forget"], [367, 11, 1, "", "import_fresh_module"], [367, 11, 1, "", "import_module"], [367, 11, 1, "", "make_legacy_pyc"], [367, 11, 1, "", "modules_cleanup"], [367, 11, 1, "", "modules_setup"], [367, 11, 1, "", "unload"]], "test.support.os_helper": [[367, 12, 1, "", "EnvironmentVarGuard"], [367, 9, 1, "", "FS_NONASCII"], [367, 12, 1, "", "FakePath"], [367, 9, 1, "", "SAVEDCWD"], [367, 9, 1, "", "TESTFN"], [367, 9, 1, "", "TESTFN_NONASCII"], [367, 9, 1, "", "TESTFN_UNDECODABLE"], [367, 9, 1, "", "TESTFN_UNENCODABLE"], [367, 9, 1, "", "TESTFN_UNICODE"], [367, 11, 1, "", "can_symlink"], [367, 11, 1, "", "can_xattr"], [367, 11, 1, "", "change_cwd"], [367, 11, 1, "", "create_empty_file"], [367, 11, 1, "", "fd_count"], [367, 11, 1, "", "fs_is_case_insensitive"], [367, 11, 1, "", "make_bad_fd"], [367, 11, 1, "", "rmdir"], [367, 11, 1, "", "rmtree"], [367, 11, 1, "", "skip_unless_symlink"], [367, 11, 1, "", "skip_unless_xattr"], [367, 11, 1, "", "temp_cwd"], [367, 11, 1, "", "temp_dir"], [367, 11, 1, "", "temp_umask"], [367, 11, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[367, 8, 1, "", "set"], [367, 8, 1, "", "unset"]], "test.support.script_helper": [[367, 11, 1, "", "assert_python_failure"], [367, 11, 1, "", "assert_python_ok"], [367, 11, 1, "", "interpreter_requires_environment"], [367, 11, 1, "", "kill_python"], [367, 11, 1, "", "make_pkg"], [367, 11, 1, "", "make_script"], [367, 11, 1, "", "make_zip_pkg"], [367, 11, 1, "", "make_zip_script"], [367, 11, 1, "", "run_python_until_end"], [367, 11, 1, "", "spawn_python"]], "test.support.socket_helper": [[367, 9, 1, "", "IPV6_ENABLED"], [367, 11, 1, "", "bind_port"], [367, 11, 1, "", "bind_unix_socket"], [367, 11, 1, "", "find_unused_port"], [367, 11, 1, "", "skip_unless_bind_unix_socket"], [367, 11, 1, "", "transient_internet"]], "test.support.threading_helper": [[367, 11, 1, "", "catch_threading_exception"], [367, 11, 1, "", "join_thread"], [367, 11, 1, "", "reap_threads"], [367, 11, 1, "", "start_threads"], [367, 11, 1, "", "threading_cleanup"], [367, 11, 1, "", "threading_setup"], [367, 11, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[367, 12, 1, "", "WarningsRecorder"], [367, 11, 1, "", "check_no_resource_warning"], [367, 11, 1, "", "check_syntax_warning"], [367, 11, 1, "", "check_warnings"]], "textwrap": [[369, 12, 1, "", "TextWrapper"], [369, 11, 1, "", "dedent"], [369, 11, 1, "", "fill"], [369, 11, 1, "", "indent"], [369, 11, 1, "", "shorten"], [369, 11, 1, "", "wrap"]], "textwrap.TextWrapper": [[369, 7, 1, "", "break_long_words"], [369, 7, 1, "", "break_on_hyphens"], [369, 7, 1, "", "drop_whitespace"], [369, 7, 1, "", "expand_tabs"], [369, 8, 1, "", "fill"], [369, 7, 1, "", "fix_sentence_endings"], [369, 7, 1, "", "initial_indent"], [369, 7, 1, "", "max_lines"], [369, 7, 1, "", "placeholder"], [369, 7, 1, "", "replace_whitespace"], [369, 7, 1, "", "subsequent_indent"], [369, 7, 1, "", "tabsize"], [369, 7, 1, "", "width"], [369, 8, 1, "", "wrap"]], "threading": [[370, 12, 1, "", "Barrier"], [370, 12, 1, "", "BoundedSemaphore"], [370, 6, 1, "", "BrokenBarrierError"], [370, 12, 1, "", "Condition"], [370, 12, 1, "", "Event"], [370, 12, 1, "", "Lock"], [370, 12, 1, "", "RLock"], [370, 12, 1, "", "Semaphore"], [370, 9, 1, "", "TIMEOUT_MAX"], [370, 12, 1, "", "Thread"], [370, 12, 1, "", "Timer"], [370, 9, 1, "", "__excepthook__"], [370, 11, 1, "", "active_count"], [370, 11, 1, "", "current_thread"], [370, 11, 1, "", "enumerate"], [370, 11, 1, "", "excepthook"], [370, 11, 1, "", "get_ident"], [370, 11, 1, "", "get_native_id"], [370, 11, 1, "", "getprofile"], [370, 11, 1, "", "gettrace"], [370, 12, 1, "", "local"], [370, 11, 1, "", "main_thread"], [370, 11, 1, "", "setprofile"], [370, 11, 1, "", "settrace"], [370, 11, 1, "", "stack_size"]], "threading.Barrier": [[370, 8, 1, "", "abort"], [370, 7, 1, "", "broken"], [370, 7, 1, "", "n_waiting"], [370, 7, 1, "", "parties"], [370, 8, 1, "", "reset"], [370, 8, 1, "", "wait"]], "threading.Condition": [[370, 8, 1, "", "acquire"], [370, 8, 1, "", "notify"], [370, 8, 1, "", "notify_all"], [370, 8, 1, "", "release"], [370, 8, 1, "", "wait"], [370, 8, 1, "", "wait_for"]], "threading.Event": [[370, 8, 1, "", "clear"], [370, 8, 1, "", "is_set"], [370, 8, 1, "", "set"], [370, 8, 1, "", "wait"]], "threading.Lock": [[370, 8, 1, "", "acquire"], [370, 8, 1, "", "locked"], [370, 8, 1, "", "release"]], "threading.RLock": [[370, 8, 1, "", "acquire"], [370, 8, 1, "", "release"]], "threading.Semaphore": [[370, 8, 1, "", "acquire"], [370, 8, 1, "", "release"]], "threading.Thread": [[370, 7, 1, "", "daemon"], [370, 8, 1, "", "getName"], [370, 7, 1, "", "ident"], [370, 8, 1, "", "isDaemon"], [370, 8, 1, "", "is_alive"], [370, 8, 1, "", "join"], [370, 7, 1, "", "name"], [370, 7, 1, "", "native_id"], [370, 8, 1, "", "run"], [370, 8, 1, "", "setDaemon"], [370, 8, 1, "", "setName"], [370, 8, 1, "", "start"]], "threading.Timer": [[370, 8, 1, "", "cancel"]], "time": [[371, 9, 1, "", "CLOCK_BOOTTIME"], [371, 9, 1, "", "CLOCK_HIGHRES"], [371, 9, 1, "", "CLOCK_MONOTONIC"], [371, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [371, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [371, 9, 1, "", "CLOCK_PROF"], [371, 9, 1, "", "CLOCK_REALTIME"], [371, 9, 1, "", "CLOCK_TAI"], [371, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [371, 9, 1, "", "CLOCK_UPTIME"], [371, 9, 1, "", "CLOCK_UPTIME_RAW"], [371, 9, 1, "", "altzone"], [371, 11, 1, "", "asctime"], [371, 11, 1, "", "clock_getres"], [371, 11, 1, "", "clock_gettime"], [371, 11, 1, "", "clock_gettime_ns"], [371, 11, 1, "", "clock_settime"], [371, 11, 1, "", "clock_settime_ns"], [371, 11, 1, "", "ctime"], [371, 9, 1, "", "daylight"], [371, 11, 1, "", "get_clock_info"], [371, 11, 1, "", "gmtime"], [371, 11, 1, "", "localtime"], [371, 11, 1, "", "mktime"], [371, 11, 1, "", "monotonic"], [371, 11, 1, "", "monotonic_ns"], [371, 11, 1, "", "perf_counter"], [371, 11, 1, "", "perf_counter_ns"], [371, 11, 1, "", "process_time"], [371, 11, 1, "", "process_time_ns"], [371, 11, 1, "", "pthread_getcpuclockid"], [371, 11, 1, "", "sleep"], [371, 11, 1, "", "strftime"], [371, 11, 1, "", "strptime"], [371, 12, 1, "", "struct_time"], [371, 11, 1, "", "thread_time"], [371, 11, 1, "", "thread_time_ns"], [371, 11, 1, "", "time"], [371, 11, 1, "", "time_ns"], [371, 9, 1, "", "timezone"], [371, 9, 1, "", "tzname"], [371, 11, 1, "", "tzset"]], "timeit": [[372, 12, 1, "", "Timer"], [372, 11, 1, "", "default_timer"], [372, 11, 1, "", "repeat"], [372, 11, 1, "", "timeit"], [372, 14, 1, "cmdoption-timeit-h", "--help"], [372, 14, 1, "cmdoption-timeit-n", "--number"], [372, 14, 1, "cmdoption-timeit-p", "--process"], [372, 14, 1, "cmdoption-timeit-r", "--repeat"], [372, 14, 1, "cmdoption-timeit-s", "--setup"], [372, 14, 1, "cmdoption-timeit-u", "--unit"], [372, 14, 1, "cmdoption-timeit-v", "--verbose"], [372, 14, 1, "cmdoption-timeit-h", "-h"], [372, 14, 1, "cmdoption-timeit-n", "-n"], [372, 14, 1, "cmdoption-timeit-p", "-p"], [372, 14, 1, "cmdoption-timeit-r", "-r"], [372, 14, 1, "cmdoption-timeit-s", "-s"], [372, 14, 1, "cmdoption-timeit-u", "-u"], [372, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[372, 8, 1, "", "autorange"], [372, 8, 1, "", "print_exc"], [372, 8, 1, "", "repeat"], [372, 8, 1, "", "timeit"]], "tkinter": [[374, 9, 1, "", "EXCEPTION"], [374, 9, 1, "", "READABLE"], [374, 11, 1, "", "Tcl"], [374, 12, 1, "", "Tk"], [374, 9, 1, "", "WRITABLE"], [375, 10, 0, "-", "colorchooser"], [195, 10, 0, "-", "commondialog"], [376, 10, 0, "-", "dnd"], [195, 10, 0, "-", "filedialog"], [377, 10, 0, "-", "font"], [378, 10, 0, "-", "messagebox"], [379, 10, 0, "-", "scrolledtext"], [195, 10, 0, "-", "simpledialog"], [380, 10, 0, "-", "tix"], [381, 10, 0, "-", "ttk"]], "tkinter.Tk": [[374, 7, 1, "", "children"], [374, 7, 1, "", "master"], [374, 7, 1, "", "tk"]], "tkinter.Widget.tk": [[374, 8, 1, "", "createfilehandler"], [374, 8, 1, "", "deletefilehandler"]], "tkinter.colorchooser": [[375, 12, 1, "", "Chooser"], [375, 11, 1, "", "askcolor"]], "tkinter.commondialog": [[195, 12, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[195, 8, 1, "", "show"]], "tkinter.dnd": [[376, 12, 1, "", "DndHandler"], [376, 11, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[376, 8, 1, "", "cancel"], [376, 8, 1, "", "finish"], [376, 8, 1, "", "on_motion"], [376, 8, 1, "", "on_release"]], "tkinter.filedialog": [[195, 12, 1, "", "Directory"], [195, 12, 1, "", "FileDialog"], [195, 12, 1, "", "LoadFileDialog"], [195, 12, 1, "", "Open"], [195, 12, 1, "", "SaveAs"], [195, 12, 1, "", "SaveFileDialog"], [195, 11, 1, "", "askdirectory"], [195, 11, 1, "", "askopenfile"], [195, 11, 1, "", "askopenfilename"], [195, 11, 1, "", "askopenfilenames"], [195, 11, 1, "", "askopenfiles"], [195, 11, 1, "", "asksaveasfile"], [195, 11, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[195, 8, 1, "", "cancel_command"], [195, 8, 1, "", "dirs_double_event"], [195, 8, 1, "", "dirs_select_event"], [195, 8, 1, "", "files_double_event"], [195, 8, 1, "", "files_select_event"], [195, 8, 1, "", "filter_command"], [195, 8, 1, "", "get_filter"], [195, 8, 1, "", "get_selection"], [195, 8, 1, "", "go"], [195, 8, 1, "", "ok_event"], [195, 8, 1, "", "quit"], [195, 8, 1, "", "set_filter"], [195, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[195, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[195, 8, 1, "", "ok_command"]], "tkinter.font": [[377, 9, 1, "", "BOLD"], [377, 12, 1, "", "Font"], [377, 9, 1, "", "ITALIC"], [377, 9, 1, "", "NORMAL"], [377, 9, 1, "", "ROMAN"], [377, 11, 1, "", "families"], [377, 11, 1, "", "names"], [377, 11, 1, "", "nametofont"]], "tkinter.font.Font": [[377, 8, 1, "", "actual"], [377, 8, 1, "", "cget"], [377, 8, 1, "", "config"], [377, 8, 1, "", "copy"], [377, 8, 1, "", "measure"], [377, 8, 1, "", "metrics"]], "tkinter.messagebox": [[378, 12, 1, "", "Message"], [378, 8, 1, "", "askokcancel"], [378, 8, 1, "", "askquestion"], [378, 8, 1, "", "askretrycancel"], [378, 8, 1, "", "askyesno"], [378, 8, 1, "", "askyesnocancel"], [378, 8, 1, "", "showerror"], [378, 8, 1, "", "showinfo"], [378, 8, 1, "", "showwarning"]], "tkinter.scrolledtext": [[379, 12, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[379, 7, 1, "", "frame"], [379, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[195, 12, 1, "", "Dialog"], [195, 11, 1, "", "askfloat"], [195, 11, 1, "", "askinteger"], [195, 11, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[195, 8, 1, "", "body"], [195, 8, 1, "", "buttonbox"]], "tkinter.tix": [[380, 12, 1, "", "Balloon"], [380, 12, 1, "", "ButtonBox"], [380, 12, 1, "", "CheckList"], [380, 12, 1, "", "ComboBox"], [380, 12, 1, "", "Control"], [380, 12, 1, "", "DirList"], [380, 12, 1, "", "DirSelectBox"], [380, 12, 1, "", "DirSelectDialog"], [380, 12, 1, "", "DirTree"], [380, 12, 1, "", "ExFileSelectBox"], [380, 12, 1, "", "FileEntry"], [380, 12, 1, "", "FileSelectBox"], [380, 12, 1, "", "Form"], [380, 12, 1, "", "HList"], [380, 12, 1, "", "InputOnly"], [380, 12, 1, "", "LabelEntry"], [380, 12, 1, "", "LabelFrame"], [380, 12, 1, "", "ListNoteBook"], [380, 12, 1, "", "Meter"], [380, 12, 1, "", "NoteBook"], [380, 12, 1, "", "OptionMenu"], [380, 12, 1, "", "PanedWindow"], [380, 12, 1, "", "PopupMenu"], [380, 12, 1, "", "Select"], [380, 12, 1, "", "StdButtonBox"], [380, 12, 1, "", "TList"], [380, 12, 1, "", "Tk"], [380, 12, 1, "", "Tree"], [380, 12, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[380, 8, 1, "", "tix_addbitmapdir"], [380, 8, 1, "", "tix_cget"], [380, 8, 1, "", "tix_configure"], [380, 8, 1, "", "tix_filedialog"], [380, 8, 1, "", "tix_getbitmap"], [380, 8, 1, "", "tix_getimage"], [380, 8, 1, "", "tix_option_get"], [380, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[381, 12, 1, "", "Combobox"], [381, 12, 1, "", "Notebook"], [381, 12, 1, "", "Progressbar"], [381, 12, 1, "", "Spinbox"], [381, 12, 1, "", "Style"], [381, 12, 1, "", "Treeview"], [381, 12, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[381, 8, 1, "", "current"], [381, 8, 1, "", "get"], [381, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[381, 8, 1, "", "add"], [381, 8, 1, "", "enable_traversal"], [381, 8, 1, "", "forget"], [381, 8, 1, "", "hide"], [381, 8, 1, "", "identify"], [381, 8, 1, "", "index"], [381, 8, 1, "", "insert"], [381, 8, 1, "", "select"], [381, 8, 1, "", "tab"], [381, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[381, 8, 1, "", "start"], [381, 8, 1, "", "step"], [381, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[381, 8, 1, "", "get"], [381, 8, 1, "", "set"]], "tkinter.ttk.Style": [[381, 8, 1, "", "configure"], [381, 8, 1, "", "element_create"], [381, 8, 1, "", "element_names"], [381, 8, 1, "", "element_options"], [381, 8, 1, "", "layout"], [381, 8, 1, "", "lookup"], [381, 8, 1, "", "map"], [381, 8, 1, "", "theme_create"], [381, 8, 1, "", "theme_names"], [381, 8, 1, "", "theme_settings"], [381, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[381, 8, 1, "", "bbox"], [381, 8, 1, "", "column"], [381, 8, 1, "", "delete"], [381, 8, 1, "", "detach"], [381, 8, 1, "", "exists"], [381, 8, 1, "", "focus"], [381, 8, 1, "", "get_children"], [381, 8, 1, "", "heading"], [381, 8, 1, "", "identify"], [381, 8, 1, "", "identify_column"], [381, 8, 1, "", "identify_element"], [381, 8, 1, "", "identify_region"], [381, 8, 1, "", "identify_row"], [381, 8, 1, "", "index"], [381, 8, 1, "", "insert"], [381, 8, 1, "", "item"], [381, 8, 1, "", "move"], [381, 8, 1, "", "next"], [381, 8, 1, "", "parent"], [381, 8, 1, "", "prev"], [381, 8, 1, "", "reattach"], [381, 8, 1, "", "see"], [381, 8, 1, "", "selection"], [381, 8, 1, "", "selection_add"], [381, 8, 1, "", "selection_remove"], [381, 8, 1, "", "selection_set"], [381, 8, 1, "", "selection_toggle"], [381, 8, 1, "", "set"], [381, 8, 1, "", "set_children"], [381, 8, 1, "", "tag_bind"], [381, 8, 1, "", "tag_configure"], [381, 8, 1, "", "tag_has"], [381, 8, 1, "", "xview"], [381, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[381, 8, 1, "", "identify"], [381, 8, 1, "", "instate"], [381, 8, 1, "", "state"]], "token": [[382, 9, 1, "", "AMPER"], [382, 9, 1, "", "AMPEREQUAL"], [382, 9, 1, "", "ASYNC"], [382, 9, 1, "", "AT"], [382, 9, 1, "", "ATEQUAL"], [382, 9, 1, "", "AWAIT"], [382, 9, 1, "", "CIRCUMFLEX"], [382, 9, 1, "", "CIRCUMFLEXEQUAL"], [382, 9, 1, "", "COLON"], [382, 9, 1, "", "COLONEQUAL"], [382, 9, 1, "", "COMMA"], [382, 9, 1, "", "COMMENT"], [382, 9, 1, "", "DEDENT"], [382, 9, 1, "", "DOT"], [382, 9, 1, "", "DOUBLESLASH"], [382, 9, 1, "", "DOUBLESLASHEQUAL"], [382, 9, 1, "", "DOUBLESTAR"], [382, 9, 1, "", "DOUBLESTAREQUAL"], [382, 9, 1, "", "ELLIPSIS"], [382, 9, 1, "", "ENCODING"], [382, 9, 1, "", "ENDMARKER"], [382, 9, 1, "", "EQEQUAL"], [382, 9, 1, "", "EQUAL"], [382, 9, 1, "", "ERRORTOKEN"], [382, 9, 1, "", "GREATER"], [382, 9, 1, "", "GREATEREQUAL"], [382, 9, 1, "", "INDENT"], [382, 11, 1, "", "ISEOF"], [382, 11, 1, "", "ISNONTERMINAL"], [382, 11, 1, "", "ISTERMINAL"], [382, 9, 1, "", "LBRACE"], [382, 9, 1, "", "LEFTSHIFT"], [382, 9, 1, "", "LEFTSHIFTEQUAL"], [382, 9, 1, "", "LESS"], [382, 9, 1, "", "LESSEQUAL"], [382, 9, 1, "", "LPAR"], [382, 9, 1, "", "LSQB"], [382, 9, 1, "", "MINEQUAL"], [382, 9, 1, "", "MINUS"], [382, 9, 1, "", "NAME"], [382, 9, 1, "", "NEWLINE"], [382, 9, 1, "", "NL"], [382, 9, 1, "", "NOTEQUAL"], [382, 9, 1, "", "NT_OFFSET"], [382, 9, 1, "", "NUMBER"], [382, 9, 1, "", "N_TOKENS"], [382, 9, 1, "", "OP"], [382, 9, 1, "", "PERCENT"], [382, 9, 1, "", "PERCENTEQUAL"], [382, 9, 1, "", "PLUS"], [382, 9, 1, "", "PLUSEQUAL"], [382, 9, 1, "", "RARROW"], [382, 9, 1, "", "RBRACE"], [382, 9, 1, "", "RIGHTSHIFT"], [382, 9, 1, "", "RIGHTSHIFTEQUAL"], [382, 9, 1, "", "RPAR"], [382, 9, 1, "", "RSQB"], [382, 9, 1, "", "SEMI"], [382, 9, 1, "", "SLASH"], [382, 9, 1, "", "SLASHEQUAL"], [382, 9, 1, "", "SOFT_KEYWORD"], [382, 9, 1, "", "STAR"], [382, 9, 1, "", "STAREQUAL"], [382, 9, 1, "", "STRING"], [382, 9, 1, "", "TILDE"], [382, 9, 1, "", "TYPE_COMMENT"], [382, 9, 1, "", "TYPE_IGNORE"], [382, 9, 1, "", "VBAR"], [382, 9, 1, "", "VBAREQUAL"], [382, 9, 1, "", "tok_name"]], "tokenize": [[383, 6, 1, "", "TokenError"], [383, 11, 1, "", "detect_encoding"], [383, 11, 1, "", "generate_tokens"], [383, 11, 1, "", "open"], [383, 11, 1, "", "tokenize"], [383, 11, 1, "", "untokenize"], [383, 14, 1, "cmdoption-tokenize-e", "--exact"], [383, 14, 1, "cmdoption-tokenize-h", "--help"], [383, 14, 1, "cmdoption-tokenize-e", "-e"], [383, 14, 1, "cmdoption-tokenize-h", "-h"]], "trace": [[384, 12, 1, "", "CoverageResults"], [384, 12, 1, "", "Trace"], [384, 14, 1, "cmdoption-trace-c", "--count"], [384, 14, 1, "cmdoption-trace-C", "--coverdir"], [384, 14, 1, "cmdoption-trace-f", "--file"], [384, 14, 1, "cmdoption-trace-help", "--help"], [384, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [384, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [384, 14, 1, "cmdoption-trace-l", "--listfuncs"], [384, 14, 1, "cmdoption-trace-m", "--missing"], [384, 14, 1, "cmdoption-trace-R", "--no-report"], [384, 14, 1, "cmdoption-trace-r", "--report"], [384, 14, 1, "cmdoption-trace-s", "--summary"], [384, 14, 1, "cmdoption-trace-g", "--timing"], [384, 14, 1, "cmdoption-trace-t", "--trace"], [384, 14, 1, "cmdoption-trace-T", "--trackcalls"], [384, 14, 1, "cmdoption-trace-version", "--version"], [384, 14, 1, "cmdoption-trace-C", "-C"], [384, 14, 1, "cmdoption-trace-R", "-R"], [384, 14, 1, "cmdoption-trace-T", "-T"], [384, 14, 1, "cmdoption-trace-c", "-c"], [384, 14, 1, "cmdoption-trace-f", "-f"], [384, 14, 1, "cmdoption-trace-g", "-g"], [384, 14, 1, "cmdoption-trace-l", "-l"], [384, 14, 1, "cmdoption-trace-m", "-m"], [384, 14, 1, "cmdoption-trace-r", "-r"], [384, 14, 1, "cmdoption-trace-s", "-s"], [384, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[384, 8, 1, "", "update"], [384, 8, 1, "", "write_results"]], "trace.Trace": [[384, 8, 1, "", "results"], [384, 8, 1, "", "run"], [384, 8, 1, "", "runctx"], [384, 8, 1, "", "runfunc"]], "traceback": [[385, 12, 1, "", "FrameSummary"], [385, 12, 1, "", "StackSummary"], [385, 12, 1, "", "TracebackException"], [385, 11, 1, "", "clear_frames"], [385, 11, 1, "", "extract_stack"], [385, 11, 1, "", "extract_tb"], [385, 11, 1, "", "format_exc"], [385, 11, 1, "", "format_exception"], [385, 11, 1, "", "format_exception_only"], [385, 11, 1, "", "format_list"], [385, 11, 1, "", "format_stack"], [385, 11, 1, "", "format_tb"], [385, 11, 1, "", "print_exc"], [385, 11, 1, "", "print_exception"], [385, 11, 1, "", "print_last"], [385, 11, 1, "", "print_stack"], [385, 11, 1, "", "print_tb"], [385, 11, 1, "", "walk_stack"], [385, 11, 1, "", "walk_tb"]], "traceback.StackSummary": [[385, 8, 1, "", "extract"], [385, 8, 1, "", "format"], [385, 8, 1, "", "from_list"]], "traceback.TracebackException": [[385, 7, 1, "", "__cause__"], [385, 7, 1, "", "__context__"], [385, 7, 1, "", "__suppress_context__"], [385, 7, 1, "", "exc_type"], [385, 7, 1, "", "filename"], [385, 8, 1, "", "format"], [385, 8, 1, "", "format_exception_only"], [385, 8, 1, "", "from_exception"], [385, 7, 1, "", "lineno"], [385, 7, 1, "", "msg"], [385, 7, 1, "", "offset"], [385, 7, 1, "", "stack"], [385, 7, 1, "", "text"]], "tracemalloc": [[386, 12, 1, "", "DomainFilter"], [386, 12, 1, "", "Filter"], [386, 12, 1, "", "Frame"], [386, 12, 1, "", "Snapshot"], [386, 12, 1, "", "Statistic"], [386, 12, 1, "", "StatisticDiff"], [386, 12, 1, "", "Trace"], [386, 12, 1, "", "Traceback"], [386, 11, 1, "", "clear_traces"], [386, 11, 1, "", "get_object_traceback"], [386, 11, 1, "", "get_traceback_limit"], [386, 11, 1, "", "get_traced_memory"], [386, 11, 1, "", "get_tracemalloc_memory"], [386, 11, 1, "", "is_tracing"], [386, 11, 1, "", "reset_peak"], [386, 11, 1, "", "start"], [386, 11, 1, "", "stop"], [386, 11, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[386, 7, 1, "", "domain"], [386, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[386, 7, 1, "", "all_frames"], [386, 7, 1, "", "domain"], [386, 7, 1, "", "filename_pattern"], [386, 7, 1, "", "inclusive"], [386, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[386, 7, 1, "", "filename"], [386, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[386, 8, 1, "", "compare_to"], [386, 8, 1, "", "dump"], [386, 8, 1, "", "filter_traces"], [386, 8, 1, "", "load"], [386, 8, 1, "", "statistics"], [386, 7, 1, "", "traceback_limit"], [386, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[386, 7, 1, "", "count"], [386, 7, 1, "", "size"], [386, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[386, 7, 1, "", "count"], [386, 7, 1, "", "count_diff"], [386, 7, 1, "", "size"], [386, 7, 1, "", "size_diff"], [386, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[386, 7, 1, "", "domain"], [386, 7, 1, "", "size"], [386, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[386, 8, 1, "", "format"], [386, 7, 1, "", "total_nframe"]], "tty": [[387, 11, 1, "", "setcbreak"], [387, 11, 1, "", "setraw"]], "turtle": [[388, 12, 1, "", "RawPen"], [388, 12, 1, "", "RawTurtle"], [388, 12, 1, "", "Screen"], [388, 12, 1, "", "ScrolledCanvas"], [388, 12, 1, "", "Shape"], [388, 12, 1, "", "Turtle"], [388, 12, 1, "", "TurtleScreen"], [388, 12, 1, "", "Vec2D"], [388, 11, 1, "", "addshape"], [388, 11, 1, "", "back"], [388, 11, 1, "", "backward"], [388, 11, 1, "", "begin_fill"], [388, 11, 1, "", "begin_poly"], [388, 11, 1, "", "bgcolor"], [388, 11, 1, "", "bgpic"], [388, 11, 1, "", "bk"], [388, 11, 1, "", "bye"], [388, 11, 1, "", "circle"], [388, 11, 1, "", "clear"], [388, 11, 1, "", "clearscreen"], [388, 11, 1, "", "clearstamp"], [388, 11, 1, "", "clearstamps"], [388, 11, 1, "", "clone"], [388, 11, 1, "", "color"], [388, 11, 1, "", "colormode"], [388, 11, 1, "", "degrees"], [388, 11, 1, "", "delay"], [388, 11, 1, "", "distance"], [388, 11, 1, "", "done"], [388, 11, 1, "", "dot"], [388, 11, 1, "", "down"], [388, 11, 1, "", "end_fill"], [388, 11, 1, "", "end_poly"], [388, 11, 1, "", "exitonclick"], [388, 11, 1, "", "fd"], [388, 11, 1, "", "fillcolor"], [388, 11, 1, "", "filling"], [388, 11, 1, "", "forward"], [388, 11, 1, "", "get_poly"], [388, 11, 1, "", "get_shapepoly"], [388, 11, 1, "", "getcanvas"], [388, 11, 1, "", "getpen"], [388, 11, 1, "", "getscreen"], [388, 11, 1, "", "getshapes"], [388, 11, 1, "", "getturtle"], [388, 11, 1, "", "goto"], [388, 11, 1, "", "heading"], [388, 11, 1, "", "hideturtle"], [388, 11, 1, "", "home"], [388, 11, 1, "", "ht"], [388, 11, 1, "", "isdown"], [388, 11, 1, "", "isvisible"], [388, 11, 1, "", "left"], [388, 11, 1, "", "listen"], [388, 11, 1, "", "lt"], [388, 11, 1, "", "mainloop"], [388, 11, 1, "", "mode"], [388, 11, 1, "", "numinput"], [388, 11, 1, "", "onclick"], [388, 11, 1, "", "ondrag"], [388, 11, 1, "", "onkey"], [388, 11, 1, "", "onkeypress"], [388, 11, 1, "", "onkeyrelease"], [388, 11, 1, "", "onrelease"], [388, 11, 1, "", "onscreenclick"], [388, 11, 1, "", "ontimer"], [388, 11, 1, "", "pd"], [388, 11, 1, "", "pen"], [388, 11, 1, "", "pencolor"], [388, 11, 1, "", "pendown"], [388, 11, 1, "", "pensize"], [388, 11, 1, "", "penup"], [388, 11, 1, "", "pos"], [388, 11, 1, "", "position"], [388, 11, 1, "", "pu"], [388, 11, 1, "", "radians"], [388, 11, 1, "", "register_shape"], [388, 11, 1, "", "reset"], [388, 11, 1, "", "resetscreen"], [388, 11, 1, "", "resizemode"], [388, 11, 1, "", "right"], [388, 11, 1, "", "rt"], [388, 11, 1, "", "screensize"], [388, 11, 1, "", "seth"], [388, 11, 1, "", "setheading"], [388, 11, 1, "", "setpos"], [388, 11, 1, "", "setposition"], [388, 11, 1, "", "settiltangle"], [388, 11, 1, "", "setundobuffer"], [388, 11, 1, "", "setup"], [388, 11, 1, "", "setworldcoordinates"], [388, 11, 1, "", "setx"], [388, 11, 1, "", "sety"], [388, 11, 1, "", "shape"], [388, 11, 1, "", "shapesize"], [388, 11, 1, "", "shapetransform"], [388, 11, 1, "", "shearfactor"], [388, 11, 1, "", "showturtle"], [388, 11, 1, "", "speed"], [388, 11, 1, "", "st"], [388, 11, 1, "", "stamp"], [388, 11, 1, "", "textinput"], [388, 11, 1, "", "tilt"], [388, 11, 1, "", "tiltangle"], [388, 11, 1, "", "title"], [388, 11, 1, "", "towards"], [388, 11, 1, "", "tracer"], [388, 11, 1, "", "turtles"], [388, 11, 1, "", "turtlesize"], [388, 11, 1, "", "undo"], [388, 11, 1, "", "undobufferentries"], [388, 11, 1, "", "up"], [388, 11, 1, "", "update"], [388, 11, 1, "", "width"], [388, 11, 1, "", "window_height"], [388, 11, 1, "", "window_width"], [388, 11, 1, "", "write"], [388, 11, 1, "", "write_docstringdict"], [388, 11, 1, "", "xcor"], [388, 11, 1, "", "ycor"]], "turtle.Shape": [[388, 8, 1, "", "addcomponent"]], "types": [[389, 9, 1, "", "AsyncGeneratorType"], [389, 9, 1, "", "BuiltinFunctionType"], [389, 9, 1, "", "BuiltinMethodType"], [389, 9, 1, "", "CellType"], [389, 9, 1, "", "ClassMethodDescriptorType"], [389, 12, 1, "", "CodeType"], [389, 9, 1, "", "CoroutineType"], [389, 11, 1, "", "DynamicClassAttribute"], [389, 9, 1, "", "EllipsisType"], [389, 9, 1, "", "FrameType"], [389, 9, 1, "", "FunctionType"], [389, 9, 1, "", "GeneratorType"], [389, 12, 1, "", "GenericAlias"], [389, 9, 1, "", "GetSetDescriptorType"], [389, 9, 1, "", "LambdaType"], [389, 12, 1, "", "MappingProxyType"], [389, 9, 1, "", "MemberDescriptorType"], [389, 9, 1, "", "MethodDescriptorType"], [389, 9, 1, "", "MethodType"], [389, 9, 1, "", "MethodWrapperType"], [389, 12, 1, "", "ModuleType"], [389, 9, 1, "", "NoneType"], [389, 9, 1, "", "NotImplementedType"], [389, 12, 1, "", "SimpleNamespace"], [389, 12, 1, "", "TracebackType"], [389, 12, 1, "", "UnionType"], [389, 9, 1, "", "WrapperDescriptorType"], [389, 11, 1, "", "coroutine"], [389, 11, 1, "", "new_class"], [389, 11, 1, "", "prepare_class"], [389, 11, 1, "", "resolve_bases"]], "types.CodeType": [[389, 8, 1, "", "replace"]], "types.MappingProxyType": [[389, 8, 1, "", "copy"], [389, 8, 1, "", "get"], [389, 8, 1, "", "items"], [389, 8, 1, "", "keys"], [389, 8, 1, "", "values"]], "types.ModuleType": [[389, 7, 1, "", "__doc__"], [389, 7, 1, "", "__loader__"], [389, 7, 1, "", "__name__"], [389, 7, 1, "", "__package__"], [389, 7, 1, "", "__spec__"]], "typing": [[390, 12, 1, "", "AbstractSet"], [390, 9, 1, "", "Annotated"], [390, 9, 1, "", "Any"], [390, 9, 1, "", "AnyStr"], [390, 12, 1, "", "AsyncContextManager"], [390, 12, 1, "", "AsyncGenerator"], [390, 12, 1, "", "AsyncIterable"], [390, 12, 1, "", "AsyncIterator"], [390, 12, 1, "", "Awaitable"], [390, 12, 1, "", "BinaryIO"], [390, 12, 1, "", "ByteString"], [390, 9, 1, "", "Callable"], [390, 12, 1, "", "ChainMap"], [390, 9, 1, "", "ClassVar"], [390, 12, 1, "", "Collection"], [390, 9, 1, "", "Concatenate"], [390, 12, 1, "", "Container"], [390, 12, 1, "", "ContextManager"], [390, 12, 1, "", "Coroutine"], [390, 12, 1, "", "Counter"], [390, 12, 1, "", "DefaultDict"], [390, 12, 1, "", "Deque"], [390, 12, 1, "", "Dict"], [390, 9, 1, "", "Final"], [390, 12, 1, "", "ForwardRef"], [390, 12, 1, "", "FrozenSet"], [390, 12, 1, "", "Generator"], [390, 12, 1, "", "Generic"], [390, 12, 1, "", "Hashable"], [390, 12, 1, "", "IO"], [390, 12, 1, "", "ItemsView"], [390, 12, 1, "", "Iterable"], [390, 12, 1, "", "Iterator"], [390, 12, 1, "", "KeysView"], [390, 12, 1, "", "List"], [390, 9, 1, "", "Literal"], [390, 12, 1, "", "Mapping"], [390, 12, 1, "", "MappingView"], [390, 12, 1, "", "Match"], [390, 12, 1, "", "MutableMapping"], [390, 12, 1, "", "MutableSequence"], [390, 12, 1, "", "MutableSet"], [390, 12, 1, "", "NamedTuple"], [390, 12, 1, "", "NewType"], [390, 9, 1, "", "NoReturn"], [390, 9, 1, "", "Optional"], [390, 12, 1, "", "OrderedDict"], [390, 12, 1, "", "ParamSpec"], [390, 9, 1, "", "ParamSpecArgs"], [390, 9, 1, "", "ParamSpecKwargs"], [390, 12, 1, "", "Pattern"], [390, 12, 1, "", "Protocol"], [390, 12, 1, "", "Reversible"], [390, 12, 1, "", "Sequence"], [390, 12, 1, "", "Set"], [390, 12, 1, "", "Sized"], [390, 12, 1, "", "SupportsAbs"], [390, 12, 1, "", "SupportsBytes"], [390, 12, 1, "", "SupportsComplex"], [390, 12, 1, "", "SupportsFloat"], [390, 12, 1, "", "SupportsIndex"], [390, 12, 1, "", "SupportsInt"], [390, 12, 1, "", "SupportsRound"], [390, 9, 1, "", "TYPE_CHECKING"], [390, 12, 1, "", "Text"], [390, 12, 1, "", "TextIO"], [390, 9, 1, "", "Tuple"], [390, 12, 1, "", "Type"], [390, 9, 1, "", "TypeAlias"], [390, 9, 1, "", "TypeGuard"], [390, 12, 1, "", "TypeVar"], [390, 12, 1, "", "TypedDict"], [390, 9, 1, "", "Union"], [390, 12, 1, "", "ValuesView"], [390, 11, 1, "", "cast"], [390, 11, 1, "", "final"], [390, 11, 1, "", "get_args"], [390, 11, 1, "", "get_origin"], [390, 11, 1, "", "get_type_hints"], [390, 11, 1, "", "is_typeddict"], [390, 11, 1, "", "no_type_check"], [390, 11, 1, "", "no_type_check_decorator"], [390, 11, 1, "", "overload"], [390, 11, 1, "", "runtime_checkable"], [390, 11, 1, "", "type_check_only"]], "typing.ParamSpec": [[390, 7, 1, "", "args"], [390, 7, 1, "", "kwargs"]], "typing.TypedDict": [[390, 7, 1, "", "__optional_keys__"], [390, 7, 1, "", "__required_keys__"], [390, 7, 1, "", "__total__"]], "unicodedata": [[391, 11, 1, "", "bidirectional"], [391, 11, 1, "", "category"], [391, 11, 1, "", "combining"], [391, 11, 1, "", "decimal"], [391, 11, 1, "", "decomposition"], [391, 11, 1, "", "digit"], [391, 11, 1, "", "east_asian_width"], [391, 11, 1, "", "is_normalized"], [391, 11, 1, "", "lookup"], [391, 11, 1, "", "mirrored"], [391, 11, 1, "", "name"], [391, 11, 1, "", "normalize"], [391, 11, 1, "", "numeric"], [391, 9, 1, "", "ucd_3_2_0"], [391, 9, 1, "", "unidata_version"]], "unittest": [[392, 12, 1, "", "FunctionTestCase"], [392, 12, 1, "", "IsolatedAsyncioTestCase"], [392, 6, 1, "", "SkipTest"], [392, 12, 1, "", "TestCase"], [392, 12, 1, "", "TestLoader"], [392, 12, 1, "", "TestResult"], [392, 12, 1, "", "TestSuite"], [392, 12, 1, "", "TextTestResult"], [392, 12, 1, "", "TextTestRunner"], [392, 11, 1, "", "addModuleCleanup"], [392, 9, 1, "", "defaultTestLoader"], [392, 11, 1, "", "doModuleCleanups"], [392, 11, 1, "", "expectedFailure"], [392, 11, 1, "", "installHandler"], [392, 11, 1, "", "main"], [393, 10, 0, "-", "mock"], [392, 11, 1, "", "registerResult"], [392, 11, 1, "", "removeHandler"], [392, 11, 1, "", "removeResult"], [392, 11, 1, "", "skip"], [392, 11, 1, "", "skipIf"], [392, 11, 1, "", "skipUnless"], [392, 14, 1, "cmdoption-unittest-b", "--buffer"], [392, 14, 1, "cmdoption-unittest-c", "--catch"], [392, 14, 1, "cmdoption-unittest-f", "--failfast"], [392, 14, 1, "cmdoption-unittest-locals", "--locals"], [392, 14, 1, "cmdoption-unittest-b", "-b"], [392, 14, 1, "cmdoption-unittest-c", "-c"], [392, 14, 1, "cmdoption-unittest-f", "-f"], [392, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[392, 8, 1, "", "addAsyncCleanup"], [392, 8, 1, "", "asyncSetUp"], [392, 8, 1, "", "asyncTearDown"], [392, 8, 1, "", "run"]], "unittest.TestCase": [[392, 8, 1, "", "addClassCleanup"], [392, 8, 1, "", "addCleanup"], [392, 8, 1, "", "addTypeEqualityFunc"], [392, 8, 1, "", "assertAlmostEqual"], [392, 8, 1, "", "assertCountEqual"], [392, 8, 1, "", "assertDictEqual"], [392, 8, 1, "", "assertEqual"], [392, 8, 1, "", "assertFalse"], [392, 8, 1, "", "assertGreater"], [392, 8, 1, "", "assertGreaterEqual"], [392, 8, 1, "", "assertIn"], [392, 8, 1, "", "assertIs"], [392, 8, 1, "", "assertIsInstance"], [392, 8, 1, "", "assertIsNone"], [392, 8, 1, "", "assertIsNot"], [392, 8, 1, "", "assertIsNotNone"], [392, 8, 1, "", "assertLess"], [392, 8, 1, "", "assertLessEqual"], [392, 8, 1, "", "assertListEqual"], [392, 8, 1, "", "assertLogs"], [392, 8, 1, "", "assertMultiLineEqual"], [392, 8, 1, "", "assertNoLogs"], [392, 8, 1, "", "assertNotAlmostEqual"], [392, 8, 1, "", "assertNotEqual"], [392, 8, 1, "", "assertNotIn"], [392, 8, 1, "", "assertNotIsInstance"], [392, 8, 1, "", "assertNotRegex"], [392, 8, 1, "", "assertRaises"], [392, 8, 1, "", "assertRaisesRegex"], [392, 8, 1, "", "assertRegex"], [392, 8, 1, "", "assertSequenceEqual"], [392, 8, 1, "", "assertSetEqual"], [392, 8, 1, "", "assertTrue"], [392, 8, 1, "", "assertTupleEqual"], [392, 8, 1, "", "assertWarns"], [392, 8, 1, "", "assertWarnsRegex"], [392, 8, 1, "", "countTestCases"], [392, 8, 1, "", "debug"], [392, 8, 1, "", "defaultTestResult"], [392, 8, 1, "", "doClassCleanups"], [392, 8, 1, "", "doCleanups"], [392, 8, 1, "", "fail"], [392, 7, 1, "", "failureException"], [392, 8, 1, "", "id"], [392, 7, 1, "", "longMessage"], [392, 7, 1, "", "maxDiff"], [392, 7, 1, "", "output"], [392, 7, 1, "", "records"], [392, 8, 1, "", "run"], [392, 8, 1, "", "setUp"], [392, 8, 1, "", "setUpClass"], [392, 8, 1, "", "shortDescription"], [392, 8, 1, "", "skipTest"], [392, 8, 1, "", "subTest"], [392, 8, 1, "", "tearDown"], [392, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[392, 8, 1, "", "discover"], [392, 7, 1, "", "errors"], [392, 8, 1, "", "getTestCaseNames"], [392, 8, 1, "", "loadTestsFromModule"], [392, 8, 1, "", "loadTestsFromName"], [392, 8, 1, "", "loadTestsFromNames"], [392, 8, 1, "", "loadTestsFromTestCase"], [392, 7, 1, "", "sortTestMethodsUsing"], [392, 7, 1, "", "suiteClass"], [392, 7, 1, "", "testMethodPrefix"], [392, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[392, 8, 1, "", "addError"], [392, 8, 1, "", "addExpectedFailure"], [392, 8, 1, "", "addFailure"], [392, 8, 1, "", "addSkip"], [392, 8, 1, "", "addSubTest"], [392, 8, 1, "", "addSuccess"], [392, 8, 1, "", "addUnexpectedSuccess"], [392, 7, 1, "", "buffer"], [392, 7, 1, "", "errors"], [392, 7, 1, "", "expectedFailures"], [392, 7, 1, "", "failfast"], [392, 7, 1, "", "failures"], [392, 7, 1, "", "shouldStop"], [392, 7, 1, "", "skipped"], [392, 8, 1, "", "startTest"], [392, 8, 1, "", "startTestRun"], [392, 8, 1, "", "stop"], [392, 8, 1, "", "stopTest"], [392, 8, 1, "", "stopTestRun"], [392, 7, 1, "", "tb_locals"], [392, 7, 1, "", "testsRun"], [392, 7, 1, "", "unexpectedSuccesses"], [392, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[392, 8, 1, "", "__iter__"], [392, 8, 1, "", "addTest"], [392, 8, 1, "", "addTests"], [392, 8, 1, "", "countTestCases"], [392, 8, 1, "", "debug"], [392, 8, 1, "", "run"]], "unittest.TextTestRunner": [[392, 8, 1, "", "_makeResult"], [392, 8, 1, "", "run"]], "unittest.mock": [[393, 9, 1, "", "ANY"], [393, 12, 1, "", "AsyncMock"], [393, 9, 1, "", "DEFAULT"], [393, 9, 1, "", "FILTER_DIR"], [393, 12, 1, "", "MagicMock"], [393, 12, 1, "", "Mock"], [393, 12, 1, "", "NonCallableMagicMock"], [393, 12, 1, "", "NonCallableMock"], [393, 12, 1, "", "PropertyMock"], [393, 11, 1, "", "call"], [393, 11, 1, "", "create_autospec"], [393, 11, 1, "", "mock_open"], [393, 11, 1, "", "patch"], [393, 11, 1, "", "seal"], [393, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[393, 8, 1, "", "assert_any_await"], [393, 8, 1, "", "assert_awaited"], [393, 8, 1, "", "assert_awaited_once"], [393, 8, 1, "", "assert_awaited_once_with"], [393, 8, 1, "", "assert_awaited_with"], [393, 8, 1, "", "assert_has_awaits"], [393, 8, 1, "", "assert_not_awaited"], [393, 7, 1, "", "await_args"], [393, 7, 1, "", "await_args_list"], [393, 7, 1, "", "await_count"], [393, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[393, 7, 1, "", "__class__"], [393, 8, 1, "", "__dir__"], [393, 8, 1, "", "_get_child_mock"], [393, 8, 1, "", "assert_any_call"], [393, 8, 1, "", "assert_called"], [393, 8, 1, "", "assert_called_once"], [393, 8, 1, "", "assert_called_once_with"], [393, 8, 1, "", "assert_called_with"], [393, 8, 1, "", "assert_has_calls"], [393, 8, 1, "", "assert_not_called"], [393, 8, 1, "", "attach_mock"], [393, 7, 1, "", "call_args"], [393, 7, 1, "", "call_args_list"], [393, 7, 1, "", "call_count"], [393, 7, 1, "", "called"], [393, 8, 1, "", "configure_mock"], [393, 7, 1, "", "method_calls"], [393, 8, 1, "", "mock_add_spec"], [393, 7, 1, "", "mock_calls"], [393, 8, 1, "", "reset_mock"], [393, 7, 1, "", "return_value"], [393, 7, 1, "", "side_effect"]], "unittest.mock.call": [[393, 8, 1, "", "call_list"]], "unittest.mock.patch": [[393, 11, 1, "", "dict"], [393, 11, 1, "", "multiple"], [393, 11, 1, "", "object"], [393, 11, 1, "", "stopall"]], "urllib": [[397, 10, 0, "-", "error"], [398, 10, 0, "-", "parse"], [399, 10, 0, "-", "request"], [399, 10, 0, "-", "response"], [400, 10, 0, "-", "robotparser"]], "urllib.error": [[397, 6, 1, "", "ContentTooShortError"], [397, 6, 1, "", "HTTPError"], [397, 6, 1, "", "URLError"]], "urllib.error.HTTPError": [[397, 7, 1, "", "code"], [397, 7, 1, "", "headers"], [397, 7, 1, "", "reason"]], "urllib.error.URLError": [[397, 7, 1, "", "reason"]], "urllib.parse": [[398, 12, 1, "", "DefragResult"], [398, 12, 1, "", "DefragResultBytes"], [398, 12, 1, "", "ParseResult"], [398, 12, 1, "", "ParseResultBytes"], [398, 12, 1, "", "SplitResult"], [398, 12, 1, "", "SplitResultBytes"], [398, 11, 1, "", "parse_qs"], [398, 11, 1, "", "parse_qsl"], [398, 11, 1, "", "quote"], [398, 11, 1, "", "quote_from_bytes"], [398, 11, 1, "", "quote_plus"], [398, 11, 1, "", "unquote"], [398, 11, 1, "", "unquote_plus"], [398, 11, 1, "", "unquote_to_bytes"], [398, 11, 1, "", "unwrap"], [398, 11, 1, "", "urldefrag"], [398, 11, 1, "", "urlencode"], [398, 11, 1, "", "urljoin"], [398, 11, 1, "", "urlparse"], [398, 11, 1, "", "urlsplit"], [398, 11, 1, "", "urlunparse"], [398, 11, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[398, 8, 1, "", "geturl"]], "urllib.request": [[399, 12, 1, "", "AbstractBasicAuthHandler"], [399, 12, 1, "", "AbstractDigestAuthHandler"], [399, 12, 1, "", "BaseHandler"], [399, 12, 1, "", "CacheFTPHandler"], [399, 12, 1, "", "DataHandler"], [399, 12, 1, "", "FTPHandler"], [399, 12, 1, "", "FancyURLopener"], [399, 12, 1, "", "FileHandler"], [399, 12, 1, "", "HTTPBasicAuthHandler"], [399, 12, 1, "", "HTTPCookieProcessor"], [399, 12, 1, "", "HTTPDefaultErrorHandler"], [399, 12, 1, "", "HTTPDigestAuthHandler"], [399, 12, 1, "", "HTTPErrorProcessor"], [399, 12, 1, "", "HTTPHandler"], [399, 12, 1, "", "HTTPPasswordMgr"], [399, 12, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [399, 12, 1, "", "HTTPPasswordMgrWithPriorAuth"], [399, 12, 1, "", "HTTPRedirectHandler"], [399, 12, 1, "", "HTTPSHandler"], [399, 12, 1, "", "OpenerDirector"], [399, 12, 1, "", "ProxyBasicAuthHandler"], [399, 12, 1, "", "ProxyDigestAuthHandler"], [399, 12, 1, "", "ProxyHandler"], [399, 12, 1, "", "Request"], [399, 12, 1, "", "URLopener"], [399, 12, 1, "", "UnknownHandler"], [399, 11, 1, "", "build_opener"], [399, 11, 1, "", "getproxies"], [399, 11, 1, "", "install_opener"], [399, 11, 1, "", "pathname2url"], [399, 11, 1, "", "url2pathname"], [399, 11, 1, "", "urlcleanup"], [399, 11, 1, "", "urlopen"], [399, 11, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[399, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[399, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[399, 8, 1, "", "add_parent"], [399, 8, 1, "", "close"], [399, 8, 1, "", "default_open"], [399, 8, 1, "", "http_error_default"], [399, 7, 1, "", "parent"], [399, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[399, 8, 1, "", "setMaxConns"], [399, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[399, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[399, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[399, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[399, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[399, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[399, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[399, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[399, 8, 1, "", "http_response"], [399, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[399, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[399, 8, 1, "", "add_password"], [399, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[399, 8, 1, "", "add_password"], [399, 8, 1, "", "find_user_password"], [399, 8, 1, "", "is_authenticated"], [399, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[399, 8, 1, "", "http_error_301"], [399, 8, 1, "", "http_error_302"], [399, 8, 1, "", "http_error_303"], [399, 8, 1, "", "http_error_307"], [399, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[399, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[399, 8, 1, "", "add_handler"], [399, 8, 1, "", "error"], [399, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[399, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[399, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[399, 8, 1, "", "add_header"], [399, 8, 1, "", "add_unredirected_header"], [399, 7, 1, "", "data"], [399, 7, 1, "", "full_url"], [399, 8, 1, "", "get_full_url"], [399, 8, 1, "", "get_header"], [399, 8, 1, "", "get_method"], [399, 8, 1, "", "has_header"], [399, 8, 1, "", "header_items"], [399, 7, 1, "", "host"], [399, 7, 1, "", "method"], [399, 7, 1, "", "origin_req_host"], [399, 8, 1, "", "remove_header"], [399, 7, 1, "", "selector"], [399, 8, 1, "", "set_proxy"], [399, 7, 1, "", "type"], [399, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[399, 8, 1, "", "open"], [399, 8, 1, "", "open_unknown"], [399, 8, 1, "", "retrieve"], [399, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[399, 8, 1, "", "unknown_open"]], "urllib.response": [[399, 12, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[399, 7, 1, "", "code"], [399, 8, 1, "", "getstatus"], [399, 8, 1, "", "geturl"], [399, 7, 1, "", "headers"], [399, 8, 1, "", "info"], [399, 7, 1, "", "status"], [399, 7, 1, "", "url"]], "urllib.robotparser": [[400, 12, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[400, 8, 1, "", "can_fetch"], [400, 8, 1, "", "crawl_delay"], [400, 8, 1, "", "modified"], [400, 8, 1, "", "mtime"], [400, 8, 1, "", "parse"], [400, 8, 1, "", "read"], [400, 8, 1, "", "request_rate"], [400, 8, 1, "", "set_url"], [400, 8, 1, "", "site_maps"]], "uu": [[401, 6, 1, "", "Error"], [401, 11, 1, "", "decode"], [401, 11, 1, "", "encode"]], "uuid": [[402, 9, 1, "", "NAMESPACE_DNS"], [402, 9, 1, "", "NAMESPACE_OID"], [402, 9, 1, "", "NAMESPACE_URL"], [402, 9, 1, "", "NAMESPACE_X500"], [402, 9, 1, "", "RESERVED_FUTURE"], [402, 9, 1, "", "RESERVED_MICROSOFT"], [402, 9, 1, "", "RESERVED_NCS"], [402, 9, 1, "", "RFC_4122"], [402, 12, 1, "", "SafeUUID"], [402, 12, 1, "", "UUID"], [402, 11, 1, "", "getnode"], [402, 11, 1, "", "uuid1"], [402, 11, 1, "", "uuid3"], [402, 11, 1, "", "uuid4"], [402, 11, 1, "", "uuid5"]], "uuid.SafeUUID": [[402, 7, 1, "", "safe"], [402, 7, 1, "", "unknown"], [402, 7, 1, "", "unsafe"]], "uuid.UUID": [[402, 7, 1, "", "bytes"], [402, 7, 1, "", "bytes_le"], [402, 7, 1, "", "fields"], [402, 7, 1, "", "hex"], [402, 7, 1, "", "int"], [402, 7, 1, "", "is_safe"], [402, 7, 1, "", "urn"], [402, 7, 1, "", "variant"], [402, 7, 1, "", "version"]], "venv": [[403, 12, 1, "", "EnvBuilder"], [403, 11, 1, "", "create"]], "venv.EnvBuilder": [[403, 8, 1, "", "create"], [403, 8, 1, "", "create_configuration"], [403, 8, 1, "", "ensure_directories"], [403, 8, 1, "", "install_scripts"], [403, 8, 1, "", "post_setup"], [403, 8, 1, "", "setup_python"], [403, 8, 1, "", "setup_scripts"], [403, 8, 1, "", "upgrade_dependencies"]], "warnings": [[404, 12, 1, "", "catch_warnings"], [404, 11, 1, "", "filterwarnings"], [404, 11, 1, "", "formatwarning"], [404, 11, 1, "", "resetwarnings"], [404, 11, 1, "", "showwarning"], [404, 11, 1, "", "simplefilter"], [404, 11, 1, "", "warn"], [404, 11, 1, "", "warn_explicit"]], "wave": [[405, 6, 1, "", "Error"], [405, 11, 1, "", "open"]], "wave.Wave_read": [[405, 8, 1, "", "close"], [405, 8, 1, "", "getcompname"], [405, 8, 1, "", "getcomptype"], [405, 8, 1, "", "getframerate"], [405, 8, 1, "", "getmark"], [405, 8, 1, "", "getmarkers"], [405, 8, 1, "", "getnchannels"], [405, 8, 1, "", "getnframes"], [405, 8, 1, "", "getparams"], [405, 8, 1, "", "getsampwidth"], [405, 8, 1, "", "readframes"], [405, 8, 1, "", "rewind"], [405, 8, 1, "", "setpos"], [405, 8, 1, "", "tell"]], "wave.Wave_write": [[405, 8, 1, "", "close"], [405, 8, 1, "", "setcomptype"], [405, 8, 1, "", "setframerate"], [405, 8, 1, "", "setnchannels"], [405, 8, 1, "", "setnframes"], [405, 8, 1, "", "setparams"], [405, 8, 1, "", "setsampwidth"], [405, 8, 1, "", "tell"], [405, 8, 1, "", "writeframes"], [405, 8, 1, "", "writeframesraw"]], "weakref": [[406, 9, 1, "", "CallableProxyType"], [406, 9, 1, "", "ProxyType"], [406, 9, 1, "", "ProxyTypes"], [406, 9, 1, "", "ReferenceType"], [406, 12, 1, "", "WeakKeyDictionary"], [406, 12, 1, "", "WeakMethod"], [406, 12, 1, "", "WeakSet"], [406, 12, 1, "", "WeakValueDictionary"], [406, 12, 1, "", "finalize"], [406, 11, 1, "", "getweakrefcount"], [406, 11, 1, "", "getweakrefs"], [406, 11, 1, "", "proxy"], [406, 12, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[406, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[406, 8, 1, "", "valuerefs"]], "weakref.finalize": [[406, 8, 1, "", "__call__"], [406, 7, 1, "", "alive"], [406, 7, 1, "", "atexit"], [406, 8, 1, "", "detach"], [406, 8, 1, "", "peek"]], "weakref.ref": [[406, 7, 1, "", "__callback__"]], "webbrowser": [[407, 6, 1, "", "Error"], [407, 11, 1, "", "get"], [407, 11, 1, "", "open"], [407, 11, 1, "", "open_new"], [407, 11, 1, "", "open_new_tab"], [407, 11, 1, "", "register"]], "webbrowser.controller": [[407, 8, 1, "", "open"], [407, 8, 1, "", "open_new"], [407, 8, 1, "", "open_new_tab"]], "winreg": [[409, 11, 1, "", "CloseKey"], [409, 11, 1, "", "ConnectRegistry"], [409, 11, 1, "", "CreateKey"], [409, 11, 1, "", "CreateKeyEx"], [409, 11, 1, "", "DeleteKey"], [409, 11, 1, "", "DeleteKeyEx"], [409, 11, 1, "", "DeleteValue"], [409, 11, 1, "", "DisableReflectionKey"], [409, 11, 1, "", "EnableReflectionKey"], [409, 11, 1, "", "EnumKey"], [409, 11, 1, "", "EnumValue"], [409, 11, 1, "", "ExpandEnvironmentStrings"], [409, 11, 1, "", "FlushKey"], [409, 9, 1, "", "HKEY_CLASSES_ROOT"], [409, 9, 1, "", "HKEY_CURRENT_CONFIG"], [409, 9, 1, "", "HKEY_CURRENT_USER"], [409, 9, 1, "", "HKEY_DYN_DATA"], [409, 9, 1, "", "HKEY_LOCAL_MACHINE"], [409, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [409, 9, 1, "", "HKEY_USERS"], [409, 9, 1, "", "KEY_ALL_ACCESS"], [409, 9, 1, "", "KEY_CREATE_LINK"], [409, 9, 1, "", "KEY_CREATE_SUB_KEY"], [409, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [409, 9, 1, "", "KEY_EXECUTE"], [409, 9, 1, "", "KEY_NOTIFY"], [409, 9, 1, "", "KEY_QUERY_VALUE"], [409, 9, 1, "", "KEY_READ"], [409, 9, 1, "", "KEY_SET_VALUE"], [409, 9, 1, "", "KEY_WOW64_32KEY"], [409, 9, 1, "", "KEY_WOW64_64KEY"], [409, 9, 1, "", "KEY_WRITE"], [409, 11, 1, "", "LoadKey"], [409, 11, 1, "", "OpenKey"], [409, 11, 1, "", "OpenKeyEx"], [409, 11, 1, "", "QueryInfoKey"], [409, 11, 1, "", "QueryReflectionKey"], [409, 11, 1, "", "QueryValue"], [409, 11, 1, "", "QueryValueEx"], [409, 9, 1, "", "REG_BINARY"], [409, 9, 1, "", "REG_DWORD"], [409, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [409, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [409, 9, 1, "", "REG_EXPAND_SZ"], [409, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [409, 9, 1, "", "REG_LINK"], [409, 9, 1, "", "REG_MULTI_SZ"], [409, 9, 1, "", "REG_NONE"], [409, 9, 1, "", "REG_QWORD"], [409, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [409, 9, 1, "", "REG_RESOURCE_LIST"], [409, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [409, 9, 1, "", "REG_SZ"], [409, 11, 1, "", "SaveKey"], [409, 11, 1, "", "SetValue"], [409, 11, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[409, 8, 1, "", "Close"], [409, 8, 1, "", "Detach"], [409, 8, 1, "", "__enter__"], [409, 8, 1, "", "__exit__"]], "winsound": [[410, 11, 1, "", "Beep"], [410, 9, 1, "", "MB_ICONASTERISK"], [410, 9, 1, "", "MB_ICONEXCLAMATION"], [410, 9, 1, "", "MB_ICONHAND"], [410, 9, 1, "", "MB_ICONQUESTION"], [410, 9, 1, "", "MB_OK"], [410, 11, 1, "", "MessageBeep"], [410, 11, 1, "", "PlaySound"], [410, 9, 1, "", "SND_ALIAS"], [410, 9, 1, "", "SND_ASYNC"], [410, 9, 1, "", "SND_FILENAME"], [410, 9, 1, "", "SND_LOOP"], [410, 9, 1, "", "SND_MEMORY"], [410, 9, 1, "", "SND_NODEFAULT"], [410, 9, 1, "", "SND_NOSTOP"], [410, 9, 1, "", "SND_NOWAIT"], [410, 9, 1, "", "SND_PURGE"]], "wsgiref": [[411, 10, 0, "-", "handlers"], [411, 10, 0, "-", "headers"], [411, 10, 0, "-", "simple_server"], [411, 10, 0, "-", "util"], [411, 10, 0, "-", "validate"]], "wsgiref.handlers": [[411, 12, 1, "", "BaseCGIHandler"], [411, 12, 1, "", "BaseHandler"], [411, 12, 1, "", "CGIHandler"], [411, 12, 1, "", "IISCGIHandler"], [411, 12, 1, "", "SimpleHandler"], [411, 11, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[411, 8, 1, "", "_flush"], [411, 8, 1, "", "_write"], [411, 8, 1, "", "add_cgi_vars"], [411, 7, 1, "", "error_body"], [411, 7, 1, "", "error_headers"], [411, 8, 1, "", "error_output"], [411, 7, 1, "", "error_status"], [411, 8, 1, "", "get_scheme"], [411, 8, 1, "", "get_stderr"], [411, 8, 1, "", "get_stdin"], [411, 7, 1, "", "http_version"], [411, 8, 1, "", "log_exception"], [411, 7, 1, "", "origin_server"], [411, 7, 1, "", "os_environ"], [411, 8, 1, "", "run"], [411, 8, 1, "", "sendfile"], [411, 7, 1, "", "server_software"], [411, 8, 1, "", "setup_environ"], [411, 7, 1, "", "traceback_limit"], [411, 7, 1, "", "wsgi_file_wrapper"], [411, 7, 1, "", "wsgi_multiprocess"], [411, 7, 1, "", "wsgi_multithread"], [411, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[411, 12, 1, "", "Headers"]], "wsgiref.headers.Headers": [[411, 8, 1, "", "add_header"], [411, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[411, 12, 1, "", "WSGIRequestHandler"], [411, 12, 1, "", "WSGIServer"], [411, 11, 1, "", "demo_app"], [411, 11, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[411, 8, 1, "", "get_environ"], [411, 8, 1, "", "get_stderr"], [411, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[411, 8, 1, "", "get_app"], [411, 8, 1, "", "set_app"]], "wsgiref.util": [[411, 12, 1, "", "FileWrapper"], [411, 11, 1, "", "application_uri"], [411, 11, 1, "", "guess_scheme"], [411, 11, 1, "", "is_hop_by_hop"], [411, 11, 1, "", "request_uri"], [411, 11, 1, "", "setup_testing_defaults"], [411, 11, 1, "", "shift_path_info"]], "wsgiref.validate": [[411, 11, 1, "", "validator"]], "xdrlib": [[412, 6, 1, "", "ConversionError"], [412, 6, 1, "", "Error"], [412, 12, 1, "", "Packer"], [412, 12, 1, "", "Unpacker"]], "xdrlib.Packer": [[412, 8, 1, "", "get_buffer"], [412, 8, 1, "", "pack_array"], [412, 8, 1, "", "pack_bytes"], [412, 8, 1, "", "pack_double"], [412, 8, 1, "", "pack_farray"], [412, 8, 1, "", "pack_float"], [412, 8, 1, "", "pack_fopaque"], [412, 8, 1, "", "pack_fstring"], [412, 8, 1, "", "pack_list"], [412, 8, 1, "", "pack_opaque"], [412, 8, 1, "", "pack_string"], [412, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[412, 8, 1, "", "done"], [412, 8, 1, "", "get_buffer"], [412, 8, 1, "", "get_position"], [412, 8, 1, "", "reset"], [412, 8, 1, "", "set_position"], [412, 8, 1, "", "unpack_array"], [412, 8, 1, "", "unpack_bytes"], [412, 8, 1, "", "unpack_double"], [412, 8, 1, "", "unpack_farray"], [412, 8, 1, "", "unpack_float"], [412, 8, 1, "", "unpack_fopaque"], [412, 8, 1, "", "unpack_fstring"], [412, 8, 1, "", "unpack_list"], [412, 8, 1, "", "unpack_opaque"], [412, 8, 1, "", "unpack_string"]], "xml": [[414, 10, 0, "-", "dom"], [418, 10, 0, "-", "sax"]], "xml.dom.Attr": [[414, 7, 1, "", "localName"], [414, 7, 1, "", "name"], [414, 7, 1, "", "prefix"], [414, 7, 1, "", "value"]], "xml.dom.Comment": [[414, 7, 1, "", "data"]], "xml.dom": [[414, 6, 1, "", "DOMException"], [414, 6, 1, "", "DomstringSizeErr"], [414, 9, 1, "", "EMPTY_NAMESPACE"], [414, 6, 1, "", "HierarchyRequestErr"], [414, 6, 1, "", "IndexSizeErr"], [414, 6, 1, "", "InuseAttributeErr"], [414, 6, 1, "", "InvalidAccessErr"], [414, 6, 1, "", "InvalidCharacterErr"], [414, 6, 1, "", "InvalidModificationErr"], [414, 6, 1, "", "InvalidStateErr"], [414, 6, 1, "", "NamespaceErr"], [414, 6, 1, "", "NoDataAllowedErr"], [414, 6, 1, "", "NoModificationAllowedErr"], [414, 6, 1, "", "NotFoundErr"], [414, 6, 1, "", "NotSupportedErr"], [414, 6, 1, "", "SyntaxErr"], [414, 6, 1, "", "WrongDocumentErr"], [414, 9, 1, "", "XHTML_NAMESPACE"], [414, 9, 1, "", "XMLNS_NAMESPACE"], [414, 9, 1, "", "XML_NAMESPACE"], [414, 11, 1, "", "getDOMImplementation"], [415, 10, 0, "-", "minidom"], [416, 10, 0, "-", "pulldom"], [414, 11, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[414, 8, 1, "", "createDocument"], [414, 8, 1, "", "createDocumentType"], [414, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[414, 8, 1, "", "createAttribute"], [414, 8, 1, "", "createAttributeNS"], [414, 8, 1, "", "createComment"], [414, 8, 1, "", "createElement"], [414, 8, 1, "", "createElementNS"], [414, 8, 1, "", "createProcessingInstruction"], [414, 8, 1, "", "createTextNode"], [414, 7, 1, "", "documentElement"], [414, 8, 1, "", "getElementsByTagName"], [414, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[414, 7, 1, "", "entities"], [414, 7, 1, "", "internalSubset"], [414, 7, 1, "", "name"], [414, 7, 1, "", "notations"], [414, 7, 1, "", "publicId"], [414, 7, 1, "", "systemId"]], "xml.dom.Element": [[414, 8, 1, "", "getAttribute"], [414, 8, 1, "", "getAttributeNS"], [414, 8, 1, "", "getAttributeNode"], [414, 8, 1, "", "getAttributeNodeNS"], [414, 8, 1, "", "getElementsByTagName"], [414, 8, 1, "", "getElementsByTagNameNS"], [414, 8, 1, "", "hasAttribute"], [414, 8, 1, "", "hasAttributeNS"], [414, 8, 1, "", "removeAttribute"], [414, 8, 1, "", "removeAttributeNS"], [414, 8, 1, "", "removeAttributeNode"], [414, 8, 1, "", "setAttribute"], [414, 8, 1, "", "setAttributeNS"], [414, 8, 1, "", "setAttributeNode"], [414, 8, 1, "", "setAttributeNodeNS"], [414, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[414, 8, 1, "", "item"], [414, 7, 1, "", "length"]], "xml.dom.Node": [[414, 8, 1, "", "appendChild"], [414, 7, 1, "", "attributes"], [414, 7, 1, "", "childNodes"], [414, 8, 1, "", "cloneNode"], [414, 7, 1, "", "firstChild"], [414, 8, 1, "", "hasAttributes"], [414, 8, 1, "", "hasChildNodes"], [414, 8, 1, "", "insertBefore"], [414, 8, 1, "", "isSameNode"], [414, 7, 1, "", "lastChild"], [414, 7, 1, "", "localName"], [414, 7, 1, "", "namespaceURI"], [414, 7, 1, "", "nextSibling"], [414, 7, 1, "", "nodeName"], [414, 7, 1, "", "nodeType"], [414, 7, 1, "", "nodeValue"], [414, 8, 1, "", "normalize"], [414, 7, 1, "", "parentNode"], [414, 7, 1, "", "prefix"], [414, 7, 1, "", "previousSibling"], [414, 8, 1, "", "removeChild"], [414, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[414, 8, 1, "", "item"], [414, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[414, 7, 1, "", "data"], [414, 7, 1, "", "target"]], "xml.dom.Text": [[414, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[415, 8, 1, "", "toprettyxml"], [415, 8, 1, "", "toxml"], [415, 8, 1, "", "unlink"], [415, 8, 1, "", "writexml"]], "xml.dom.minidom": [[415, 11, 1, "", "parse"], [415, 11, 1, "", "parseString"]], "xml.dom.pulldom": [[416, 12, 1, "", "DOMEventStream"], [416, 12, 1, "", "PullDom"], [416, 12, 1, "", "SAX2DOM"], [416, 9, 1, "", "default_bufsize"], [416, 11, 1, "", "parse"], [416, 11, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[416, 8, 1, "", "expandNode"], [416, 8, 1, "", "getEvent"], [416, 8, 1, "", "reset"]], "xml.etree.ElementInclude": [[417, 11, 1, "", "default_loader"], [417, 11, 1, "", "include"]], "xml.etree": [[417, 10, 0, "-", "ElementTree"]], "xml.etree.ElementTree": [[417, 12, 1, "", "C14NWriterTarget"], [417, 11, 1, "", "Comment"], [417, 12, 1, "", "Element"], [417, 12, 1, "", "ElementTree"], [417, 12, 1, "", "ParseError"], [417, 11, 1, "", "ProcessingInstruction"], [417, 12, 1, "", "QName"], [417, 11, 1, "", "SubElement"], [417, 12, 1, "", "TreeBuilder"], [417, 11, 1, "", "XML"], [417, 11, 1, "", "XMLID"], [417, 12, 1, "", "XMLParser"], [417, 12, 1, "", "XMLPullParser"], [417, 11, 1, "", "canonicalize"], [417, 11, 1, "", "dump"], [417, 11, 1, "", "fromstring"], [417, 11, 1, "", "fromstringlist"], [417, 11, 1, "", "indent"], [417, 11, 1, "", "iselement"], [417, 11, 1, "", "iterparse"], [417, 11, 1, "", "parse"], [417, 11, 1, "", "register_namespace"], [417, 11, 1, "", "tostring"], [417, 11, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[417, 8, 1, "", "append"], [417, 7, 1, "", "attrib"], [417, 8, 1, "", "clear"], [417, 8, 1, "", "extend"], [417, 8, 1, "", "find"], [417, 8, 1, "", "findall"], [417, 8, 1, "", "findtext"], [417, 8, 1, "", "get"], [417, 8, 1, "", "insert"], [417, 8, 1, "", "items"], [417, 8, 1, "", "iter"], [417, 8, 1, "", "iterfind"], [417, 8, 1, "", "itertext"], [417, 8, 1, "", "keys"], [417, 8, 1, "", "makeelement"], [417, 8, 1, "", "remove"], [417, 8, 1, "", "set"], [417, 7, 1, "", "tag"], [417, 7, 1, "", "tail"], [417, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[417, 8, 1, "", "_setroot"], [417, 8, 1, "", "find"], [417, 8, 1, "", "findall"], [417, 8, 1, "", "findtext"], [417, 8, 1, "", "getroot"], [417, 8, 1, "", "iter"], [417, 8, 1, "", "iterfind"], [417, 8, 1, "", "parse"], [417, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[417, 7, 1, "", "code"], [417, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[417, 8, 1, "", "close"], [417, 8, 1, "", "comment"], [417, 8, 1, "", "data"], [417, 8, 1, "", "doctype"], [417, 8, 1, "", "end"], [417, 8, 1, "", "end_ns"], [417, 8, 1, "", "pi"], [417, 8, 1, "", "start"], [417, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[417, 8, 1, "", "close"], [417, 8, 1, "", "feed"]], "xml.etree.ElementTree.XMLPullParser": [[417, 8, 1, "", "close"], [417, 8, 1, "", "feed"], [417, 8, 1, "", "read_events"]], "xml.parsers": [[320, 10, 0, "-", "expat"]], "xml.parsers.expat": [[320, 11, 1, "", "ErrorString"], [320, 6, 1, "", "ExpatError"], [320, 11, 1, "", "ParserCreate"], [320, 9, 1, "", "XMLParserType"], [320, 6, 1, "", "error"], [320, 10, 0, "-", "errors"], [320, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[320, 7, 1, "", "code"], [320, 7, 1, "", "lineno"], [320, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[320, 9, 1, "", "XML_ERROR_ABORTED"], [320, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [320, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [320, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [320, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [320, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [320, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [320, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [320, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [320, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [320, 9, 1, "", "XML_ERROR_FINISHED"], [320, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [320, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [320, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [320, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [320, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [320, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [320, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [320, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [320, 9, 1, "", "XML_ERROR_NO_MEMORY"], [320, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [320, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [320, 9, 1, "", "XML_ERROR_PUBLICID"], [320, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [320, 9, 1, "", "XML_ERROR_SUSPENDED"], [320, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [320, 9, 1, "", "XML_ERROR_SYNTAX"], [320, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [320, 9, 1, "", "XML_ERROR_TEXT_DECL"], [320, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [320, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [320, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [320, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [320, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [320, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [320, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [320, 9, 1, "", "XML_ERROR_XML_DECL"], [320, 9, 1, "", "codes"], [320, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[320, 8, 1, "", "AttlistDeclHandler"], [320, 8, 1, "", "CharacterDataHandler"], [320, 8, 1, "", "CommentHandler"], [320, 7, 1, "", "CurrentByteIndex"], [320, 7, 1, "", "CurrentColumnNumber"], [320, 7, 1, "", "CurrentLineNumber"], [320, 8, 1, "", "DefaultHandler"], [320, 8, 1, "", "DefaultHandlerExpand"], [320, 8, 1, "", "ElementDeclHandler"], [320, 8, 1, "", "EndCdataSectionHandler"], [320, 8, 1, "", "EndDoctypeDeclHandler"], [320, 8, 1, "", "EndElementHandler"], [320, 8, 1, "", "EndNamespaceDeclHandler"], [320, 8, 1, "", "EntityDeclHandler"], [320, 7, 1, "", "ErrorByteIndex"], [320, 7, 1, "", "ErrorCode"], [320, 7, 1, "", "ErrorColumnNumber"], [320, 7, 1, "", "ErrorLineNumber"], [320, 8, 1, "", "ExternalEntityParserCreate"], [320, 8, 1, "", "ExternalEntityRefHandler"], [320, 8, 1, "", "GetBase"], [320, 8, 1, "", "GetInputContext"], [320, 8, 1, "", "NotStandaloneHandler"], [320, 8, 1, "", "NotationDeclHandler"], [320, 8, 1, "", "Parse"], [320, 8, 1, "", "ParseFile"], [320, 8, 1, "", "ProcessingInstructionHandler"], [320, 8, 1, "", "SetBase"], [320, 8, 1, "", "SetParamEntityParsing"], [320, 8, 1, "", "StartCdataSectionHandler"], [320, 8, 1, "", "StartDoctypeDeclHandler"], [320, 8, 1, "", "StartElementHandler"], [320, 8, 1, "", "StartNamespaceDeclHandler"], [320, 8, 1, "", "UnparsedEntityDeclHandler"], [320, 8, 1, "", "UseForeignDTD"], [320, 8, 1, "", "XmlDeclHandler"], [320, 7, 1, "", "buffer_size"], [320, 7, 1, "", "buffer_text"], [320, 7, 1, "", "buffer_used"], [320, 7, 1, "", "ordered_attributes"], [320, 7, 1, "", "specified_attributes"]], "xml.sax": [[418, 6, 1, "", "SAXException"], [418, 6, 1, "", "SAXNotRecognizedException"], [418, 6, 1, "", "SAXNotSupportedException"], [418, 6, 1, "", "SAXParseException"], [419, 10, 0, "-", "handler"], [418, 11, 1, "", "make_parser"], [418, 11, 1, "", "parse"], [418, 11, 1, "", "parseString"], [421, 10, 0, "-", "saxutils"], [420, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[418, 8, 1, "", "getException"], [418, 8, 1, "", "getMessage"]], "xml.sax.handler": [[419, 12, 1, "", "ContentHandler"], [419, 12, 1, "", "DTDHandler"], [419, 12, 1, "", "EntityResolver"], [419, 12, 1, "", "ErrorHandler"], [419, 12, 1, "", "LexicalHandler"], [419, 9, 1, "", "all_features"], [419, 9, 1, "", "all_properties"], [419, 9, 1, "", "feature_external_ges"], [419, 9, 1, "", "feature_external_pes"], [419, 9, 1, "", "feature_namespace_prefixes"], [419, 9, 1, "", "feature_namespaces"], [419, 9, 1, "", "feature_string_interning"], [419, 9, 1, "", "feature_validation"], [419, 9, 1, "", "property_declaration_handler"], [419, 9, 1, "", "property_dom_node"], [419, 9, 1, "", "property_lexical_handler"], [419, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[419, 8, 1, "", "characters"], [419, 8, 1, "", "endDocument"], [419, 8, 1, "", "endElement"], [419, 8, 1, "", "endElementNS"], [419, 8, 1, "", "endPrefixMapping"], [419, 8, 1, "", "ignorableWhitespace"], [419, 8, 1, "", "processingInstruction"], [419, 8, 1, "", "setDocumentLocator"], [419, 8, 1, "", "skippedEntity"], [419, 8, 1, "", "startDocument"], [419, 8, 1, "", "startElement"], [419, 8, 1, "", "startElementNS"], [419, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[419, 8, 1, "", "notationDecl"], [419, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[419, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[419, 8, 1, "", "error"], [419, 8, 1, "", "fatalError"], [419, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[419, 8, 1, "", "comment"], [419, 8, 1, "", "endCDATA"], [419, 8, 1, "", "endDTD"], [419, 8, 1, "", "startCDATA"], [419, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[421, 12, 1, "", "XMLFilterBase"], [421, 12, 1, "", "XMLGenerator"], [421, 11, 1, "", "escape"], [421, 11, 1, "", "prepare_input_source"], [421, 11, 1, "", "quoteattr"], [421, 11, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[420, 8, 1, "", "getLength"], [420, 8, 1, "", "getNames"], [420, 8, 1, "", "getType"], [420, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[420, 12, 1, "", "AttributesImpl"], [420, 12, 1, "", "AttributesNSImpl"], [420, 12, 1, "", "IncrementalParser"], [420, 12, 1, "", "InputSource"], [420, 12, 1, "", "Locator"], [420, 12, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[420, 8, 1, "", "getNameByQName"], [420, 8, 1, "", "getQNameByName"], [420, 8, 1, "", "getQNames"], [420, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[420, 8, 1, "", "close"], [420, 8, 1, "", "feed"], [420, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[420, 8, 1, "", "getByteStream"], [420, 8, 1, "", "getCharacterStream"], [420, 8, 1, "", "getEncoding"], [420, 8, 1, "", "getPublicId"], [420, 8, 1, "", "getSystemId"], [420, 8, 1, "", "setByteStream"], [420, 8, 1, "", "setCharacterStream"], [420, 8, 1, "", "setEncoding"], [420, 8, 1, "", "setPublicId"], [420, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[420, 8, 1, "", "getColumnNumber"], [420, 8, 1, "", "getLineNumber"], [420, 8, 1, "", "getPublicId"], [420, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[420, 8, 1, "", "getContentHandler"], [420, 8, 1, "", "getDTDHandler"], [420, 8, 1, "", "getEntityResolver"], [420, 8, 1, "", "getErrorHandler"], [420, 8, 1, "", "getFeature"], [420, 8, 1, "", "getProperty"], [420, 8, 1, "", "parse"], [420, 8, 1, "", "setContentHandler"], [420, 8, 1, "", "setDTDHandler"], [420, 8, 1, "", "setEntityResolver"], [420, 8, 1, "", "setErrorHandler"], [420, 8, 1, "", "setFeature"], [420, 8, 1, "", "setLocale"], [420, 8, 1, "", "setProperty"]], "xmlrpc": [[423, 10, 0, "-", "client"], [424, 10, 0, "-", "server"]], "xmlrpc.client": [[423, 12, 1, "", "Binary"], [423, 12, 1, "", "DateTime"], [423, 12, 1, "", "Fault"], [423, 12, 1, "", "MultiCall"], [423, 12, 1, "", "ProtocolError"], [423, 12, 1, "", "ServerProxy"], [423, 11, 1, "", "dumps"], [423, 11, 1, "", "loads"]], "xmlrpc.client.Binary": [[423, 7, 1, "", "data"], [423, 8, 1, "", "decode"], [423, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[423, 8, 1, "", "decode"], [423, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[423, 7, 1, "", "faultCode"], [423, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[423, 7, 1, "", "errcode"], [423, 7, 1, "", "errmsg"], [423, 7, 1, "", "headers"], [423, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[423, 8, 1, "", "listMethods"], [423, 8, 1, "", "methodHelp"], [423, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[424, 12, 1, "", "CGIXMLRPCRequestHandler"], [424, 12, 1, "", "DocCGIXMLRPCRequestHandler"], [424, 12, 1, "", "DocXMLRPCRequestHandler"], [424, 12, 1, "", "DocXMLRPCServer"], [424, 12, 1, "", "SimpleXMLRPCRequestHandler"], [424, 12, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[424, 8, 1, "", "handle_request"], [424, 8, 1, "", "register_function"], [424, 8, 1, "", "register_instance"], [424, 8, 1, "", "register_introspection_functions"], [424, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[424, 8, 1, "", "set_server_documentation"], [424, 8, 1, "", "set_server_name"], [424, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[424, 8, 1, "", "set_server_documentation"], [424, 8, 1, "", "set_server_name"], [424, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[424, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[424, 8, 1, "", "register_function"], [424, 8, 1, "", "register_instance"], [424, 8, 1, "", "register_introspection_functions"], [424, 8, 1, "", "register_multicall_functions"]], "zipapp": [[425, 11, 1, "", "create_archive"], [425, 11, 1, "", "get_interpreter"], [425, 14, 1, "cmdoption-zipapp-c", "--compress"], [425, 14, 1, "cmdoption-zipapp-h", "--help"], [425, 14, 1, "cmdoption-zipapp-info", "--info"], [425, 14, 1, "cmdoption-zipapp-m", "--main"], [425, 14, 1, "cmdoption-zipapp-o", "--output"], [425, 14, 1, "cmdoption-zipapp-p", "--python"], [425, 14, 1, "cmdoption-zipapp-c", "-c"], [425, 14, 1, "cmdoption-zipapp-h", "-h"], [425, 14, 1, "cmdoption-zipapp-m", "-m"], [425, 14, 1, "cmdoption-zipapp-o", "-o"], [425, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[426, 6, 1, "", "BadZipFile"], [426, 6, 1, "", "BadZipfile"], [426, 6, 1, "", "LargeZipFile"], [426, 12, 1, "", "Path"], [426, 12, 1, "", "PyZipFile"], [426, 9, 1, "", "ZIP_BZIP2"], [426, 9, 1, "", "ZIP_DEFLATED"], [426, 9, 1, "", "ZIP_LZMA"], [426, 9, 1, "", "ZIP_STORED"], [426, 12, 1, "", "ZipFile"], [426, 12, 1, "", "ZipInfo"], [426, 11, 1, "", "is_zipfile"], [426, 14, 1, "cmdoption-zipfile-create", "--create"], [426, 14, 1, "cmdoption-zipfile-extract", "--extract"], [426, 14, 1, "cmdoption-zipfile-list", "--list"], [426, 14, 1, "cmdoption-zipfile-test", "--test"], [426, 14, 1, "cmdoption-zipfile-c", "-c"], [426, 14, 1, "cmdoption-zipfile-e", "-e"], [426, 14, 1, "cmdoption-zipfile-l", "-l"], [426, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[426, 8, 1, "", "exists"], [426, 8, 1, "", "is_dir"], [426, 8, 1, "", "is_file"], [426, 8, 1, "", "iterdir"], [426, 8, 1, "", "joinpath"], [426, 7, 1, "", "name"], [426, 8, 1, "", "open"], [426, 8, 1, "", "read_bytes"], [426, 8, 1, "", "read_text"]], "zipfile.PyZipFile": [[426, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[426, 8, 1, "", "close"], [426, 7, 1, "", "comment"], [426, 7, 1, "", "debug"], [426, 8, 1, "", "extract"], [426, 8, 1, "", "extractall"], [426, 7, 1, "", "filename"], [426, 8, 1, "", "getinfo"], [426, 8, 1, "", "infolist"], [426, 8, 1, "", "namelist"], [426, 8, 1, "", "open"], [426, 8, 1, "", "printdir"], [426, 8, 1, "", "read"], [426, 8, 1, "", "setpassword"], [426, 8, 1, "", "testzip"], [426, 8, 1, "", "write"], [426, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[426, 7, 1, "", "CRC"], [426, 7, 1, "", "comment"], [426, 7, 1, "", "compress_size"], [426, 7, 1, "", "compress_type"], [426, 7, 1, "", "create_system"], [426, 7, 1, "", "create_version"], [426, 7, 1, "", "date_time"], [426, 7, 1, "", "external_attr"], [426, 7, 1, "", "extra"], [426, 7, 1, "", "extract_version"], [426, 7, 1, "", "file_size"], [426, 7, 1, "", "filename"], [426, 7, 1, "", "flag_bits"], [426, 8, 1, "", "from_file"], [426, 7, 1, "", "header_offset"], [426, 7, 1, "", "internal_attr"], [426, 8, 1, "", "is_dir"], [426, 7, 1, "", "reserved"], [426, 7, 1, "", "volume"]], "zipimport": [[427, 6, 1, "", "ZipImportError"], [427, 12, 1, "", "zipimporter"]], "zipimport.zipimporter": [[427, 7, 1, "", "archive"], [427, 8, 1, "", "create_module"], [427, 8, 1, "", "exec_module"], [427, 8, 1, "", "find_loader"], [427, 8, 1, "", "find_module"], [427, 8, 1, "", "find_spec"], [427, 8, 1, "", "get_code"], [427, 8, 1, "", "get_data"], [427, 8, 1, "", "get_filename"], [427, 8, 1, "", "get_source"], [427, 8, 1, "", "invalidate_caches"], [427, 8, 1, "", "is_package"], [427, 8, 1, "", "load_module"], [427, 7, 1, "", "prefix"]], "zlib.Compress": [[428, 8, 1, "", "compress"], [428, 8, 1, "", "copy"], [428, 8, 1, "", "flush"]], "zlib.Decompress": [[428, 8, 1, "", "copy"], [428, 8, 1, "", "decompress"], [428, 7, 1, "", "eof"], [428, 8, 1, "", "flush"], [428, 7, 1, "", "unconsumed_tail"], [428, 7, 1, "", "unused_data"]], "zlib": [[428, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [428, 9, 1, "", "ZLIB_VERSION"], [428, 11, 1, "", "adler32"], [428, 11, 1, "", "compress"], [428, 11, 1, "", "compressobj"], [428, 11, 1, "", "crc32"], [428, 11, 1, "", "decompress"], [428, 11, 1, "", "decompressobj"], [428, 6, 1, "", "error"]], "zoneinfo": [[429, 6, 1, "", "InvalidTZPathWarning"], [429, 9, 1, "", "TZPATH"], [429, 12, 1, "", "ZoneInfo"], [429, 6, 1, "", "ZoneInfoNotFoundError"], [429, 11, 1, "", "available_timezones"], [429, 11, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[429, 8, 1, "", "clear_cache"], [429, 8, 1, "", "from_file"], [429, 7, 1, "", "key"], [429, 8, 1, "", "no_cache"]], "json.tool": [[268, 14, 1, "cmdoption-json.tool-indent", "--compact"], [268, 14, 1, "cmdoption-json.tool-h", "--help"], [268, 14, 1, "cmdoption-json.tool-indent", "--indent"], [268, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [268, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [268, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [268, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [268, 14, 1, "cmdoption-json.tool-indent", "--tab"], [268, 14, 1, "cmdoption-json.tool-h", "-h"], [268, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [268, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[317, 14, 1, "cmdoption-python-m-py_compile", "-"], [317, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [317, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [317, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "unittest-discover": [[392, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [392, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [392, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [392, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [392, 14, 1, "cmdoption-unittest-discover-p", "-p"], [392, 14, 1, "cmdoption-unittest-discover-s", "-s"], [392, 14, 1, "cmdoption-unittest-discover-t", "-t"], [392, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:function", "12": "py:class", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:envvar", "16": "std:opcode", "17": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "function", "Python \u51fd\u5f0f"], "12": ["py", "class", "Python \u985e\u5225"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "16": ["std", "opcode", "opcode"], "17": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 30, 31, 32, 33, 40, 65, 67, 69, 73, 75, 76, 77, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 110, 114, 116, 117, 118, 120, 164, 165, 169, 182, 186, 194, 197, 199, 200, 221, 260, 269, 270, 272, 273, 280, 299, 303, 305, 314, 317, 318, 321, 330, 336, 339, 347, 360, 367, 372, 374, 382, 383, 384, 388, 425, 430, 437, 441, 442, 444, 449, 452, 453, 454, 455, 456, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "bug": [1, 31, 95, 381], "abstract": [2, 69, 85, 122, 128, 167, 258, 295, 390, 472], "object": [2, 3, 8, 9, 13, 15, 16, 17, 23, 33, 40, 42, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 85, 89, 94, 95, 98, 103, 107, 108, 109, 126, 133, 138, 144, 163, 172, 181, 183, 185, 189, 192, 196, 210, 213, 215, 218, 233, 242, 261, 265, 268, 273, 274, 287, 289, 299, 301, 302, 305, 307, 318, 325, 327, 329, 331, 334, 336, 344, 345, 347, 348, 351, 355, 364, 370, 393, 394, 399, 402, 406, 407, 409, 412, 414, 417, 420, 423, 426, 432, 469, 470, 472, 473, 478, 479], "layer": [2, 16, 63, 115, 480], "alloc": [3, 31, 40, 58, 85, 386, 469, 479], "on": [3, 40, 70, 87, 89, 94, 95, 104, 107, 116, 158, 190, 221, 233, 237, 254, 339, 344, 348, 351, 355, 394, 432, 467], "the": [3, 23, 27, 31, 40, 63, 69, 70, 71, 72, 73, 78, 79, 83, 86, 89, 94, 95, 98, 100, 102, 104, 106, 108, 109, 110, 111, 113, 114, 116, 120, 126, 133, 138, 158, 182, 194, 200, 203, 217, 221, 222, 223, 237, 240, 257, 258, 259, 261, 273, 276, 288, 289, 295, 298, 299, 302, 303, 312, 314, 316, 338, 344, 347, 351, 355, 358, 367, 370, 374, 386, 393, 394, 404, 414, 415, 417, 420, 425, 429, 431, 432, 434, 436, 440, 460, 465, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484], "heap": [3, 58, 60, 243], "api": [4, 5, 8, 10, 14, 30, 31, 32, 40, 54, 61, 69, 83, 96, 121, 130, 131, 133, 136, 173, 200, 203, 214, 217, 218, 237, 259, 305, 347, 351, 355, 386, 403, 414, 417, 425, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "abi": [4, 476, 477, 483], "pars": [5, 126, 214, 298, 310, 320, 337, 382, 398, 417, 473, 476, 477, 482, 484], "argument": [5, 95, 100, 126, 182, 298, 299, 355, 394, 432, 445, 465, 479, 481], "and": [5, 7, 14, 23, 31, 33, 54, 55, 61, 69, 78, 81, 82, 83, 85, 86, 87, 89, 94, 95, 98, 100, 102, 103, 104, 106, 109, 111, 113, 114, 115, 116, 126, 128, 132, 133, 138, 139, 144, 152, 153, 158, 161, 164, 167, 175, 181, 182, 189, 192, 199, 201, 206, 213, 218, 222, 223, 233, 237, 242, 247, 250, 254, 258, 261, 262, 265, 266, 268, 272, 274, 276, 281, 289, 298, 299, 302, 305, 310, 314, 319, 323, 325, 330, 334, 338, 339, 344, 347, 348, 350, 351, 354, 359, 363, 369, 370, 371, 374, 376, 386, 388, 389, 392, 393, 394, 405, 411, 414, 415, 417, 423, 429, 432, 433, 434, 436, 439, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "build": [5, 33, 69, 81, 83, 87, 116, 199, 390, 416, 417, 460, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "valu": [5, 83, 89, 94, 95, 100, 104, 126, 173, 182, 187, 192, 218, 268, 298, 347, 351, 394, 409, 431, 432, 434], "string": [5, 61, 88, 94, 95, 111, 114, 218, 265, 298, 325, 351, 352, 353, 354, 355, 429, 439, 445, 450, 453, 466, 469, 470, 472, 474, 478, 481, 482, 483, 484], "buffer": [5, 7, 46, 60, 109, 139, 264, 305, 326, 478, 483], "boolean": [6, 218, 298, 351, 434, 469], "protocol": [7, 10, 34, 38, 45, 46, 47, 51, 85, 103, 139, 173, 230, 249, 255, 262, 311, 342, 348, 390, 392, 436, 478, 480, 481, 483], "structur": [7, 15, 60, 109, 173, 182, 239, 279, 390, 398, 433, 439, 476], "request": [7, 345, 397, 399, 481], "type": [7, 8, 33, 55, 58, 59, 60, 61, 74, 85, 86, 104, 110, 114, 126, 182, 187, 189, 218, 261, 282, 295, 298, 305, 347, 351, 374, 380, 389, 390, 409, 414, 432, 468, 469, 470, 471, 472, 476, 478, 479, 480, 481, 482, 483, 484], "independ": [7, 470], "field": [7, 182, 187, 476], "readon": 7, "format": [7, 108, 109, 181, 189, 254, 274, 277, 289, 305, 351, 352, 354, 363, 425, 439, 450, 456, 472, 473, 474, 475, 480, 481], "shape": [7, 388], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 388, 431], "complex": [7, 15, 113, 161, 351, 394, 476], "array": [7, 8, 95, 127, 154, 182, 268, 476, 478, 481], "numpi": 7, "style": [7, 69, 95, 109, 235, 238, 351, 366, 381, 445, 471], "pil": 7, "relat": [7, 79, 115, 157, 258, 350, 436, 468, 471, 472, 476], "function": [7, 8, 14, 26, 43, 55, 61, 69, 83, 89, 95, 100, 103, 104, 111, 113, 128, 157, 161, 169, 175, 178, 182, 187, 197, 218, 233, 239, 259, 261, 265, 267, 273, 274, 281, 288, 294, 305, 324, 325, 329, 344, 347, 352, 355, 359, 388, 389, 392, 394, 404, 423, 431, 434, 445, 466, 467, 470, 471, 472, 474, 478, 480, 481, 482], "byte": [8, 9, 114, 169, 182, 351, 354, 398, 439, 472, 480], "check": [8, 69, 73, 95, 110, 200, 258, 298, 325, 394, 432, 484], "macro": [8, 33, 55], "direct": [8, 133, 200, 258, 290, 390, 467], "call": [10, 83, 89, 95, 100, 104, 182, 222, 298, 312, 393, 394, 434, 480, 483], "tp_call": 10, "vectorcal": [10, 483], "capsul": [11, 473], "cell": [12, 183], "code": [13, 31, 33, 95, 100, 114, 115, 120, 126, 133, 163, 165, 189, 254, 258, 261, 351, 372, 392, 404, 445, 469, 477, 478, 479, 480, 484], "codec": [14, 61, 164, 469, 476, 477, 478, 479], "registri": [14, 164, 409, 465], "support": [14, 27, 31, 39, 43, 48, 61, 85, 86, 104, 109, 110, 114, 156, 162, 173, 175, 176, 178, 218, 237, 241, 245, 262, 284, 312, 318, 348, 363, 367, 376, 390, 393, 416, 417, 418, 429, 466, 469, 472, 479, 480, 481, 482, 483, 484], "lookup": [14, 43, 103, 432], "for": [14, 59, 61, 69, 83, 94, 95, 98, 102, 108, 109, 114, 126, 133, 156, 161, 162, 167, 175, 182, 183, 184, 185, 196, 218, 235, 241, 250, 258, 264, 267, 269, 272, 273, 290, 295, 298, 305, 306, 325, 329, 334, 339, 345, 347, 348, 350, 367, 383, 388, 389, 390, 394, 404, 410, 416, 417, 418, 419, 420, 431, 432, 434, 436, 445, 465, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "unicod": [14, 23, 61, 114, 164, 363, 391, 466, 468, 469, 474, 477, 478], "encod": [14, 61, 114, 153, 164, 205, 264, 268, 323, 398, 439, 452, 469, 476, 481], "error": [14, 23, 69, 83, 95, 115, 133, 164, 192, 194, 206, 287, 298, 320, 397, 447, 448, 469, 476], "handler": [14, 94, 108, 109, 115, 133, 146, 164, 221, 273, 275, 339, 345, 374, 411, 419], "number": [15, 45, 60, 69, 94, 95, 115, 161, 175, 228, 268, 281, 295, 299, 453, 472, 476], "as": [15, 69, 100, 107, 108, 109, 175, 265, 354, 360, 393, 431, 471, 472, 478, 483], "concret": [16, 220, 302, 390], "context": [17, 109, 175, 176, 192, 200, 220, 254, 289, 347, 348, 351, 390, 394, 404, 432, 470, 471, 472, 476, 478], "variabl": [17, 31, 95, 100, 108, 128, 175, 176, 182, 187, 242, 298, 299, 360, 374, 459, 465, 473, 476, 481], "coroutin": [19, 144, 261, 389, 431, 432, 480], "datetim": [20, 189, 477, 478, 481, 482, 483, 484], "descriptor": [21, 103, 133, 187, 194, 221, 299, 393, 432, 468, 479, 481], "print": [23, 89, 126, 298, 385, 472, 474], "clear": 23, "rais": [23, 95, 108, 298, 394, 440], "except": [23, 69, 83, 95, 108, 109, 115, 172, 175, 200, 206, 220, 265, 325, 339, 394, 429, 447, 471, 472, 473, 474, 478], "issu": [23, 221, 363, 465, 472], "warn": [23, 200, 273, 367, 404, 429, 467, 473, 481, 482], "queri": [23, 298, 299, 338, 347], "indic": 23, "signal": [23, 94, 133, 192, 221, 339, 392, 478, 480, 482, 484], "handl": [23, 115, 133, 183, 201, 250, 278, 291, 298, 305, 348, 392, 409, 469, 472, 473, 479, 480], "recurs": 23, "control": [23, 27, 86, 95, 128, 347, 366, 388, 404, 407], "standard": [23, 33, 69, 95, 116, 164, 195, 219, 260, 268, 298, 351, 381, 389, 415, 432, 436, 469, 484], "categori": [23, 404], "file": [24, 33, 61, 69, 72, 78, 79, 89, 94, 95, 100, 108, 109, 110, 114, 116, 126, 133, 153, 156, 173, 181, 194, 195, 200, 221, 223, 241, 254, 258, 259, 264, 274, 276, 278, 284, 288, 292, 299, 310, 312, 317, 326, 338, 363, 374, 380, 405, 417, 426, 441, 455, 460, 465, 469, 477, 479, 480, 481, 482, 483], "float": [25, 192, 351, 439, 470], "point": [25, 192, 218, 259, 439], "cyclic": [27, 86], "garbag": [27, 86, 234, 466], "collect": [27, 86, 166, 167, 197, 390, 466, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484], "collector": [27, 234], "state": [27, 31, 221, 251, 261, 289, 305, 381, 388], "initi": [31, 32, 43, 83, 480, 483], "final": [31, 85, 175, 406, 471, 479, 485], "thread": [31, 94, 109, 121, 133, 144, 192, 264, 273, 339, 367, 370, 374, 456, 476, 477, 478, 479, 480, 482, 483], "befor": 31, "global": [31, 94, 95, 305, 429, 440], "configur": [31, 32, 69, 72, 108, 109, 116, 173, 274, 340, 351, 360, 388, 429, 460, 473, 477, 483], "interpret": [31, 94, 162, 163, 186, 261, 349, 354, 389, 425, 468, 471, 472, 473], "process": [31, 56, 69, 109, 133, 138, 187, 279, 289, 290, 292, 299, 348, 368, 466, 472], "wide": 31, "paramet": [31, 83, 95, 100, 109, 113, 181, 182, 187, 299, 359, 374, 445, 476, 483], "lock": [31, 94, 143, 370, 478], "releas": [31, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485], "gil": 31, "from": [31, 69, 83, 89, 94, 95, 103, 108, 109, 144, 161, 175, 182, 213, 225, 288, 355, 388, 394, 426, 427, 465, 469, 472], "extens": [31, 55, 69, 73, 78, 81, 83, 85, 86, 87, 89, 116, 117, 185, 254, 272, 308, 460, 478, 480], "non": [31, 111, 112, 116, 268, 348, 417, 479], "creat": [31, 58, 61, 69, 70, 71, 79, 89, 94, 95, 104, 107, 109, 112, 126, 133, 144, 213, 218, 242, 267, 298, 344, 394, 403, 425, 432, 479], "caution": 31, "about": [31, 95, 158, 200, 466], "fork": 31, "high": [31, 63, 82, 264, 335, 338, 355], "level": [31, 43, 63, 82, 108, 111, 120, 121, 158, 264, 265, 268, 273, 334, 335, 338, 344, 355, 441, 480], "low": [31, 43, 121, 344], "sub": [31, 60, 69, 126], "caveat": [31, 54, 272, 425], "asynchron": [31, 339, 345, 390, 394, 432, 434, 481], "notif": [31, 103], "profil": [31, 314], "trace": [31, 384, 386], "advanc": [31, 99, 100, 108, 200, 472], "debugg": [31, 150, 303], "local": [31, 61, 237, 272, 370, 465, 470, 476, 480, 481, 482], "storag": [31, 482], "specif": [31, 76, 85, 104, 164, 340, 352, 359, 381, 388, 409, 469, 470, 471, 472, 473, 476], "tss": 31, "dynam": [31, 103, 182, 389, 433], "method": [31, 42, 55, 61, 83, 86, 88, 89, 94, 95, 103, 111, 126, 133, 175, 179, 218, 247, 289, 294, 298, 302, 344, 347, 351, 388, 393, 394, 406, 414, 432, 434, 444, 450, 466, 470, 471, 474, 478, 480, 481, 482, 484], "tls": [31, 133, 348], "pywidestringlist": 32, "pystatus": 32, "pypreconfig": 32, "preiniti": 32, "with": [32, 69, 81, 88, 89, 94, 95, 102, 106, 107, 109, 133, 142, 164, 175, 182, 192, 218, 221, 239, 250, 261, 264, 273, 305, 337, 338, 347, 355, 370, 382, 394, 406, 417, 425, 426, 428, 431, 432, 433, 471, 472, 476, 478, 480, 482, 483], "pyconfig": 32, "isol": 32, "path": [32, 116, 258, 300, 302, 360, 426, 436, 465, 476, 481, 483], "py_runmain": 32, "py_getargcargv": 32, "multi": [32, 43, 264, 348, 456, 470, 477, 480], "phase": [32, 43, 480], "privat": 32, "provision": [32, 478], "includ": 33, "use": [33, 87, 89, 94, 95, 100, 107, 108, 109, 110, 111, 112, 113, 116, 158, 169, 175, 203, 218, 242, 259, 276, 285, 288, 289, 302, 314, 320, 347, 355, 360, 367, 370, 380, 381, 382, 388, 392, 394, 399, 429, 432, 459, 471, 472, 478, 483], "refer": [33, 60, 83, 85, 95, 104, 114, 182, 289, 298, 314, 347, 374, 406, 411, 417, 434, 436, 456, 467], "count": [33, 83], "detail": [33, 107, 167, 189, 272, 274], "debug": [33, 40, 69, 78, 89, 104, 133, 158, 200, 254, 459, 460, 473, 476, 483], "iter": [34, 35, 95, 104, 211, 218, 225, 265, 267, 351, 392, 394, 432, 434, 444, 468, 470, 474, 480], "list": [36, 78, 88, 95, 104, 107, 154, 326, 351, 434, 445, 446, 453, 456, 466, 472, 474], "map": [38, 60, 61, 173, 282, 284, 351, 414, 431], "data": [39, 69, 78, 86, 94, 95, 104, 108, 110, 112, 114, 115, 151, 182, 187, 276, 291, 304, 305, 313, 323, 354, 370, 374, 429, 432, 456, 465, 470, 474, 483], "marshal": [39, 280, 305, 479], "domain": [40, 164], "raw": [40, 61, 264, 325], "memori": [40, 276, 284, 290, 348, 351, 386, 479, 480], "interfac": [40, 54, 88, 89, 94, 107, 158, 190, 196, 217, 234, 241, 261, 264, 265, 268, 299, 306, 317, 326, 340, 344, 347, 363, 367, 372, 374, 384, 392, 399, 410, 420, 426, 459, 477], "default": [40, 95, 100, 126, 187, 298, 347, 348, 393, 404, 426, 465, 473, 479], "custom": [40, 100, 103, 108, 109, 116, 126, 138, 173, 182, 186, 210, 218, 265, 274, 276, 289, 305, 314, 347, 352, 432, 465, 479, 481, 482], "hook": [40, 258, 326, 340, 436, 467, 469, 483], "pymalloc": [40, 469], "arena": 40, "tracemalloc": [40, 386, 479, 481, 482, 484], "memoryview": [41, 351, 473, 478], "instanc": [42, 95, 103, 107, 187, 204, 218, 305, 351, 432], "modul": [43, 69, 71, 73, 78, 81, 83, 89, 94, 95, 102, 104, 107, 108, 109, 111, 113, 158, 174, 187, 199, 237, 258, 264, 265, 273, 285, 289, 302, 305, 312, 314, 318, 330, 347, 355, 374, 392, 427, 432, 436, 454, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "singl": [43, 69, 73, 94, 109, 175], "creation": [43, 107, 299, 345, 348, 389, 403, 432, 481], "none": [44, 94], "implement": [48, 55, 89, 94, 109, 133, 175, 190, 258, 268, 295, 327, 411, 415, 432, 438, 478, 479, 481, 482], "reflect": 50, "sequenc": [51, 57, 60, 95, 351, 355, 431, 446], "set": [52, 133, 138, 202, 254, 258, 339, 348, 351, 374, 388, 394, 434, 446, 465, 469, 470], "ellipsi": [53, 351], "stabil": [54, 113], "stabl": [54, 476, 477], "applic": [54, 94, 102, 103, 109, 164, 237, 247, 254, 425, 465, 471, 480], "binari": [54, 69, 94, 95, 110, 112, 117, 151, 152, 164, 264, 351, 354, 423, 434, 456], "limit": [54, 268, 328, 351, 426, 465], "scope": [54, 444, 467, 468], "perform": [54, 69, 94, 95, 111, 264, 305, 460, 474, 478], "platform": [54, 116, 309, 338, 381, 467, 476, 482], "consider": [54, 120, 149, 252, 274, 333, 348, 355, 436], "content": [54, 187, 204, 312, 320], "of": [54, 55, 69, 89, 94, 95, 98, 100, 103, 104, 107, 108, 109, 110, 116, 156, 173, 175, 187, 189, 190, 194, 218, 246, 258, 261, 265, 285, 289, 299, 305, 338, 339, 351, 362, 372, 386, 388, 394, 403, 404, 423, 426, 432, 433, 439, 460, 465, 466, 473, 474, 478, 479, 480, 481, 482, 483], "base": [55, 69, 95, 109, 116, 122, 139, 144, 163, 164, 167, 190, 220, 237, 258, 264, 289, 295, 370, 390, 411, 419, 436, 472, 473, 477, 482], "access": [55, 61, 89, 94, 98, 173, 182, 218, 257, 271, 272, 274, 290, 302, 358, 360, 371, 409, 423, 432, 468, 482], "attribut": [55, 85, 86, 95, 102, 103, 109, 218, 261, 273, 298, 299, 351, 393, 394, 420, 432, 434, 436, 467, 468, 481, 482], "tupl": [57, 88, 89, 95, 166, 351, 446], "struct": [57, 354, 478, 479, 481], "hint": [59, 272, 390, 476, 480, 484], "quick": [60, 173, 192, 393], "tp": 60, "slot": [60, 61], "typedef": 60, "pytypeobject": 60, "definit": [60, 103, 119, 128, 246, 265, 431, 444, 481], "pyobject": 60, "pyvarobject": 60, "static": [60, 95, 103, 106, 110, 261], "async": [60, 128, 431, 480], "charact": [61, 111, 183, 184, 202, 268, 354], "properti": [61, 103, 114, 189, 302, 472], "deprec": [61, 392, 466, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "py_unicod": 61, "system": [61, 69, 82, 89, 158, 219, 222, 299, 312, 319, 355, 359, 426, 436, 460, 467, 478, 479, 480, 481], "wchar_t": 61, "built": [61, 70, 104, 351, 389, 390, 466, 470, 482], "in": [61, 69, 82, 83, 87, 89, 94, 95, 98, 100, 104, 108, 109, 110, 114, 120, 133, 144, 164, 175, 182, 187, 200, 254, 264, 276, 277, 297, 298, 302, 347, 351, 370, 389, 390, 414, 432, 465, 466, 467, 470, 474, 476, 479, 480, 481, 482, 483, 484], "generic": [61, 85, 351, 390, 432, 459, 482, 484], "utf": [61, 164, 299, 465, 481, 482], "32": 61, "16": 61, "escap": 61, "latin": 61, "ascii": [61, 152, 184, 398], "mbcs": [61, 164], "window": [61, 70, 87, 96, 102, 116, 137, 164, 183, 195, 254, 309, 355, 374, 388, 408, 409, 410, 425, 465, 469, 472, 473, 478, 481, 482, 485], "veri": [63, 82], "distutil": [69, 73, 74, 76, 81, 116, 199, 466, 469, 476, 480, 481, 482, 484], "core": [69, 95, 264, 466, 482, 485], "ccompil": 69, "class": [69, 88, 89, 95, 100, 103, 109, 122, 126, 128, 163, 164, 167, 172, 187, 206, 218, 220, 223, 237, 258, 261, 264, 287, 289, 295, 305, 314, 318, 322, 335, 351, 354, 388, 389, 390, 392, 393, 394, 399, 411, 419, 429, 431, 432, 439, 444, 468, 471, 472, 476, 478, 481], "unixccompil": 69, "unix": [69, 82, 87, 94, 116, 133, 158, 179, 190, 227, 238, 309, 361, 395, 464], "compil": [69, 70, 82, 83, 89, 111, 116, 128, 165, 169, 317, 358, 429, 460, 483], "msvccompil": 69, "microsoft": [69, 116, 287, 465], "bcppcompil": 69, "borland": [69, 116], "cygwincompil": 69, "cygwin": [69, 116], "archive_util": 69, "archiv": [69, 338, 363, 425, 426, 427, 469], "util": [69, 126, 175, 182, 184, 216, 258, 294, 308, 315, 367, 389, 411, 421], "dep_util": 69, "depend": [69, 110, 338, 404], "dir_util": 69, "directori": [69, 223, 287, 299, 338, 472, 477, 480], "tree": [69, 128, 242, 382, 416, 417], "oper": [69, 95, 104, 113, 233, 239, 250, 265, 288, 295, 297, 299, 302, 325, 338, 348, 351, 352, 434, 439, 468, 474, 476, 478, 479, 480, 484], "file_util": 69, "miscellan": [69, 216, 276, 289, 299, 380, 459, 474], "other": [69, 78, 86, 89, 94, 95, 107, 109, 126, 144, 218, 265, 288, 298, 305, 344, 351, 390, 439, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "dist": 69, "distribut": [69, 70, 71, 73, 74, 78, 79, 81, 116, 259], "mode": [69, 133, 192, 194, 242, 299, 459, 465, 473, 482], "fancy_getopt": 69, "wrapper": [69, 348, 377], "around": 69, "getopt": [69, 235], "filelist": 69, "log": [69, 108, 109, 273, 274, 275, 289, 456, 469, 473, 477, 478, 479, 480, 481, 482, 483], "simpl": [69, 103, 111, 200, 242, 247, 337, 411, 440, 468, 469, 476], "pep": [69, 390, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "282": [69, 469], "spawn": [69, 289, 355], "sysconfig": [69, 360, 473, 477, 480], "inform": [69, 102, 109, 287, 299, 328, 360], "text_fil": 69, "textfil": 69, "version": [69, 98, 107, 110, 116, 259, 298, 348, 404, 465, 477], "cmd": [69, 162], "command": [69, 71, 74, 126, 128, 162, 169, 196, 217, 235, 241, 254, 261, 268, 298, 299, 303, 306, 317, 340, 355, 363, 367, 383, 384, 392, 426, 459, 465, 473, 477, 478, 479, 481], "new": [69, 74, 104, 298, 404, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "individu": [69, 78, 302], "bdist": 69, "instal": [69, 71, 78, 116, 158, 199, 217, 287, 360, 460, 465, 466, 479], "bdist_packag": 69, "packag": [69, 70, 73, 77, 78, 80, 94, 120, 201, 259, 308, 367, 436, 454, 465, 467, 469, 471, 472, 478], "bdist_dumb": 69, "dumb": [69, 190], "bdist_msi": 69, "bdist_rpm": 69, "redhat": 69, "rpm": [69, 70], "srpm": 69, "sdist": [69, 71], "sourc": [69, 71, 78, 79, 114, 116, 254, 258, 261, 317, 383, 429, 469], "all": [69, 95, 289, 298, 325, 386, 394, 473, 480, 481], "build_clib": 69, "ani": [69, 89, 94, 98, 175, 390, 393], "librari": [69, 78, 108, 109, 118, 169, 182, 260, 265, 361, 393, 460, 472, 474, 485], "build_ext": 69, "build_pi": 69, "py": [69, 94, 110, 120], "pyc": [69, 95, 477, 482], "build_script": 69, "script": [69, 70, 78, 94, 95, 158, 285, 360, 388, 465, 471], "clean": [69, 175], "area": 69, "config": [69, 116, 274], "install_data": [69, 71], "install_head": 69, "header": [69, 115, 209, 210, 411, 478], "install_lib": 69, "install_script": [69, 71], "regist": [69, 178, 347], "index": [69, 77, 80, 88, 95, 374, 469, 471], "meta": [69, 78, 436], "cross": 70, "postinstal": 70, "famili": [71, 344, 355], "write": [72, 78, 83, 89, 94, 95, 100, 114, 139, 181, 276, 325, 347, 363, 367, 405, 471, 472], "setup": [72, 78, 89, 110], "exampl": [73, 86, 103, 109, 129, 145, 162, 167, 173, 175, 189, 194, 196, 200, 207, 218, 247, 285, 298, 325, 338, 350, 352, 385, 394, 399, 403, 423], "pure": [73, 82, 103, 302], "by": [73, 95, 100, 182, 285, 399, 473, 479], "read": [73, 94, 114, 133, 139, 181, 276, 363, 405], "metadata": [73, 259, 467, 469, 471, 476], "extend": [74, 82, 89, 95, 259, 298, 299, 403, 466, 469], "integr": [74, 110, 273], "adding": [74, 86, 109, 295, 298, 473, 478, 481], "an": [76, 82, 83, 89, 94, 95, 98, 103, 109, 114, 144, 175, 189, 201, 203, 212, 218, 258, 268, 355, 394, 403, 417, 465, 473], "introduct": [76, 103, 114, 314], "to": [76, 79, 86, 89, 94, 95, 100, 108, 109, 110, 114, 161, 190, 196, 218, 239, 258, 265, 271, 272, 274, 282, 299, 302, 305, 314, 347, 355, 358, 360, 374, 388, 390, 393, 394, 402, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "concept": [76, 100, 374], "terminolog": [76, 298], "general": [76, 104, 157, 246, 298, 302, 339, 460, 480], "pypi": 77, "whole": 78, "describ": [78, 404], "name": [78, 95, 103, 111, 116, 126, 164, 218, 268, 299, 389, 393, 394, 432, 433, 434, 469, 478], "preprocessor": [78, 460], "option": [78, 79, 95, 99, 100, 110, 126, 200, 235, 241, 254, 268, 298, 306, 363, 374, 381, 384, 426, 459, 460, 476, 481], "relationship": [78, 305, 466], "between": [78, 87, 95, 114, 152, 289, 298, 350, 439], "addit": [78, 95, 214, 351, 389, 465, 480], "specifi": [79, 95, 100, 110, 182, 276, 425, 473, 475], "manifest": 79, "your": [81, 100, 109, 110, 158, 182, 237, 298, 394, 484], "app": 82, "embed": [82, 89, 466], "beyond": [82, 126], "overview": [82, 103, 259, 388, 431, 474], "link": [82, 182, 468], "under": 82, "like": [82, 239], "intermezzo": 83, "tabl": [83, 287, 305, 358], "linkag": 83, "extract": [83, 89, 426], "keyword": [83, 95, 187, 269, 439, 445, 476, 480, 481], "arbitrari": [83, 89, 108, 298, 445], "ownership": 83, "rule": [83, 337, 339, 468], "thin": 83, "ice": 83, "null": [83, 100, 351], "pointer": [83, 182], "provid": [83, 86, 108, 305, 360], "cpython": [84, 88, 106, 476, 479, 481, 482, 483, 484], "runtim": [84, 96, 288, 321, 429, 482, 483], "defin": [85, 86, 95, 100, 107, 274, 298, 390, 476, 477], "assort": 85, "topic": [85, 100], "de": [85, 156], "present": [85, 474], "manag": [85, 103, 109, 175, 176, 204, 251, 289, 299, 347, 351, 355, 374, 380, 390, 394, 404, 425, 432, 471, 472, 476], "comparison": [85, 107, 218, 223, 265, 305, 351, 434, 467, 474], "weak": [85, 406, 456, 467], "more": [85, 99, 102, 107, 109, 111, 295, 388, 394], "suggest": 85, "tutori": [86, 103, 108, 182, 192, 298, 347, 417], "basic": [86, 100, 115, 145, 200, 302, 380, 424, 432], "finer": [86, 218, 478], "over": [86, 95, 225], "subclass": [86, 95, 109, 218, 250, 327, 394, 432], "cookbook": [87, 109], "approach": [87, 474, 476], "differ": [87, 95, 196, 218, 242, 386, 388], "dlls": [87, 182], "practic": [87, 95, 98, 103, 332], "self": [88, 95, 100, 348, 483], "express": [88, 89, 100, 104, 111, 114, 128, 325, 434, 440, 441, 470, 471, 483], "len": 88, "join": [88, 439], "switch": [88, 478], "case": [88, 392, 431, 467], "lambda": [88, 95, 104, 434, 445], "dictionari": [88, 109, 274, 394, 434, 446, 473, 475, 477, 478, 484], "sort": [88, 95, 113], "spec": [88, 436], "goto": 88, "generat": [88, 94, 100, 104, 144, 208, 261, 298, 310, 319, 348, 351, 358, 367, 394, 434, 444, 468, 469, 470, 471, 480, 481], "if": [88, 95, 108, 189, 258, 431, 445], "while": [88, 431], "def": 88, "faq": [89, 192], "can": [89, 94, 95, 258, 305], "my": [89, 94, 95], "own": [89, 182], "is": [89, 94, 95, 102, 108, 120, 189, 314, 470, 474], "hard": 89, "are": [89, 94, 95, 200, 218, 298, 479], "there": [89, 94, 95], "altern": [89, 109, 116, 327, 438, 465], "how": [89, 94, 95, 100, 116, 200, 218, 298, 347, 374, 388], "execut": [89, 133, 170, 200, 254, 330, 339, 367, 372, 384, 425, 432, 433, 465, 471], "statement": [89, 119, 128, 175, 370, 384, 431, 432, 440, 471, 472], "evalu": [89, 434, 481, 482], "do": [89, 94, 95, 374], "py_buildvalu": 89, "length": [89, 242, 351], "catch": [89, 175], "output": [89, 94, 95, 100, 109, 254, 338, 456], "pyerr_print": 89, "or": [89, 94, 95, 109, 126, 133, 182, 189, 351, 384, 385, 431, 445], "anyth": 89, "that": [89, 95, 103, 104, 109, 272], "stdout": [89, 94], "stderr": [89, 94], "written": 89, "added": [89, 473], "make": [89, 95, 110, 325, 425, 466, 473, 480, 481], "fail": [89, 107, 480], "whi": [89, 94, 95, 470], "want": [89, 95], "linux": [89, 117, 299, 309, 464], "but": [89, 95], "some": 89, "miss": 89, "tell": [89, 388], "incomplet": [89, 182], "input": [89, 94, 102, 183, 195, 225, 350, 383, 388, 441], "invalid": [89, 126, 436], "find": [89, 94, 95, 182, 285, 325, 417, 465], "undefin": 89, "symbol": [89, 100, 219, 358], "__builtin_new": 89, "__pure_virtu": 89, "through": 89, "inherit": [89, 187, 299, 388, 444, 468, 479], "beta": [90, 485], "www": [90, 94], "org": [90, 465], "monti": 90, "gui": [91, 109, 287, 373, 463], "tkinter": [91, 195, 254, 374, 375, 376, 377, 378, 379, 380, 381, 480, 481, 482, 483], "tk": [91, 373, 374, 380, 381, 473], "key": [91, 113, 242, 254, 289, 348, 476, 478], "bind": [91, 254, 347, 374, 433], "task": [94, 131, 133, 144], "math": [94, 281, 477, 478, 480, 481, 482, 483, 484], "socket": [94, 109, 112, 115, 129, 133, 139, 141, 145, 344, 348, 367, 430, 476, 477, 478, 479, 480, 481, 482, 483, 484], "regex": 94, "curs": [94, 102, 183, 184, 185, 476, 478, 480, 483, 484], "termcap": 94, "equival": [94, 95, 103], "onexit": 94, "don": [94, 95], "work": [94, 95, 116, 133, 192, 200, 264, 347, 426], "document": [94, 104, 208, 319, 414, 417, 424, 445, 472, 473, 478, 479, 483, 485], "doc": 94, "get": [94, 95, 99, 107, 138, 386, 394], "keypress": [94, 96], "at": 94, "time": [94, 108, 109, 189, 371, 372, 429, 469, 477, 478, 480, 481, 482, 483, 484], "program": [94, 95, 102, 112, 114, 144, 183, 237, 272, 289, 374, 390, 433, 441], "seem": 94, "run": [94, 109, 133, 144, 254, 367, 392], "parcel": 94, "out": [94, 305, 483], "among": 94, "bunch": 94, "worker": [94, 289], "what": [94, 95, 102, 108, 120, 200, 298, 305, 314, 374, 466], "kind": [94, 103], "mutat": 94, "safe": [94, 479], "we": 94, "rid": 94, "delet": [94, 95, 393, 466], "question": 94, "copi": [94, 95, 177, 338], "os": [94, 220, 299, 300, 302, 355, 367, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484], "pipe": [94, 133, 289, 307], "popen": [94, 355, 477], "serial": [94, 305, 429], "rs232": 94, "port": [94, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "doesn": 94, "close": [94, 103], "sys": [94, 126, 359, 476, 478, 479, 480, 481, 482, 483, 484], "stdin": 94, "realli": 94, "it": [94, 95, 115, 200, 298], "network": [94, 107, 109, 133, 265, 266, 344, 345, 473], "internet": [94, 262, 291, 353], "tool": [94, 264, 279, 302, 306, 367, 411, 473, 476, 483, 485], "mimic": 94, "cgi": [94, 158, 159, 480], "form": [94, 380, 390, 434], "submiss": 94, "post": [94, 187], "should": [94, 484], "help": [94, 126, 254, 298, 319, 388], "html": [94, 245, 246, 247, 477, 478, 479], "send": [94, 109], "mail": 94, "avoid": [94, 109], "block": [94, 109, 110, 112, 348, 386, 417, 431, 474], "connect": [94, 133, 139, 274, 289, 344, 347], "databas": [94, 190, 240, 287, 316, 347, 391], "you": [94, 95, 110, 459, 484], "persist": [94, 304, 305, 336], "mathemat": [94, 161], "numer": [94, 295, 351, 432, 439, 481], "random": [94, 242, 271, 299, 324, 348, 477, 481, 484], "stand": 95, "alon": 95, "guid": [95, 298, 347, 393], "languag": [95, 237, 245, 270, 352, 388, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "unboundlocalerror": 95, "loop": [95, 133, 139, 267], "return": [95, 100, 103, 182, 394, 440], "same": [95, 109, 394, 483], "result": [95, 349, 398], "share": [95, 182, 289, 290, 478], "across": [95, 109, 290], "best": [95, 98, 332, 348], "import": [95, 120, 128, 257, 258, 273, 274, 275, 367, 374, 394, 427, 436, 440, 454, 467, 469, 470, 471, 472, 478, 479], "pass": [95, 104, 109, 182, 440, 445], "one": [95, 156], "anoth": 95, "did": 95, "chang": [95, 100, 108, 237, 388, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "also": 95, "higher": [95, 158, 233], "order": [95, 182, 187, 233, 298, 354, 394, 434, 473, 474, 475, 481], "discov": 95, "up": [95, 115, 116, 175, 258], "comma": [95, 469], "preced": [95, 434], "ternari": 95, "possibl": 95, "obfusc": 95, "liner": 95, "doe": [95, 374], "slash": 95, "mean": 95, "hexadecim": 95, "octal": 95, "integ": [95, 265, 351, 439, 468, 470, 472, 474], "22": 95, "10": [95, 98, 386, 430, 476, 481, 482, 485], "int": [95, 351], "liter": [95, 114, 128, 431, 434, 439, 450, 472, 476, 478, 481], "instead": [95, 100, 110, 474], "syntaxerror": [95, 476], "convert": [95, 100, 114, 152, 347, 355], "modifi": [95, 111, 116, 384, 417, 465], "place": [95, 297], "perl": 95, "chomp": 95, "remov": [95, 465, 471, 472, 473, 474, 476, 479, 480, 481, 482, 483, 484], "trail": 95, "newlin": [95, 469], "scanf": [95, 325], "sscanf": 95, "unicodedecodeerror": 95, "unicodeencodeerror": 95, "too": 95, "slow": 95, "speed": 95, "most": [95, 312], "effici": [95, 267, 338], "way": [95, 113], "concaten": [95, 439], "mani": 95, "togeth": [95, 298], "negat": 95, "revers": [95, 470], "duplic": [95, 218], "multipl": [95, 108, 109, 225, 393, 394, 468, 480], "item": [95, 381], "multidimension": 95, "appli": [95, 394], "a_tupl": 95, "when": [95, 107, 112, 218], "complic": 95, "schwartzian": 95, "transform": [95, 164], "given": 95, "deleg": [95, 478], "deriv": [95, 218, 242], "organ": [95, 392], "easier": 95, "overload": 95, "constructor": [95, 237, 355], "tri": [95, 175, 431, 471], "__spam": 95, "_someclassname__spam": 95, "__del__": [95, 406], "not": [95, 351, 388], "id": [95, 371], "appear": [95, 388], "be": [95, 258, 305], "uniqu": [95, 218], "reli": 95, "ident": [95, 434], "test": [95, 104, 158, 200, 269, 348, 367, 392, 394, 404, 434, 480, 485], "store": [95, 298, 465], "immut": [95, 351], "cach": [95, 436, 483], "current": [95, 133, 261, 386], "have": 95, "mutual": [95, 126], "each": 95, "__import__": 95, "edit": [95, 254, 451], "reimport": 95, "show": [95, 482], "this": 95, "happen": [95, 108], "pyd": 96, "dll": 96, "tab": [96, 381, 451], "ms": [96, 288, 408], "win": 96, "crt": 96, "l1": 96, "annot": [98, 351, 440, 445, 481, 482], "dict": [98, 109, 351, 393, 394, 481], "newer": 98, "older": [98, 116, 355], "manual": [98, 176, 314, 348, 374], "un": 98, "stringiz": 98, "__annotations__": 98, "quirk": 98, "argpars": [99, 126, 473, 476, 477, 479, 480, 482], "short": 99, "littl": 99, "conflict": [99, 298], "clinic": [100, 479], "goal": 100, "usag": [100, 120, 126, 128, 189, 200, 254, 285, 306, 328, 383, 384, 423, 478], "first": 100, "renam": 100, "pyarg_unpacktupl": 100, "group": [100, 104, 111, 126, 240, 298, 392, 431], "real": 100, "legaci": [100, 173, 355, 399, 482], "py_buff": 100, "clone": 100, "exist": [100, 139, 394], "meth_o": 100, "meth_noarg": 100, "tp_new": 100, "tp_init": 100, "redirect": [100, 465], "ifdef": 100, "trick": [100, 116], "start": [102, 173, 192, 289, 393, 394], "end": [102, 113], "pad": 102, "display": [102, 108, 133, 183, 386, 434, 467], "text": [102, 110, 164, 183, 200, 254, 264, 271, 325, 351, 368, 369, 379, 414, 474], "color": [102, 254, 375, 388], "user": [102, 116, 221, 254, 274, 314, 390, 472, 476], "howto": [103, 104, 112, 114], "primer": 103, "constant": [103, 183, 284, 320, 347, 352, 355, 371, 382, 409], "thought": 103, "complet": [103, 254, 326, 329, 334, 441, 451], "valid": [103, 411], "technic": [103, 189], "invoc": [103, 355], "super": 103, "summari": [103, 287, 476, 478, 479, 480, 481, 482, 483, 484], "logic": [103, 192, 265, 439], "automat": [103, 218, 254], "orm": 103, "member": [103, 218, 261], "__slots__": [103, 432, 476], "formal": 104, "provabl": 104, "modular": 104, "eas": 104, "compos": 104, "comprehens": [104, 128, 446, 466, 481], "into": [104, 109, 388, 398], "itertool": [104, 267, 476, 477, 478, 482, 483], "element": [104, 414, 417], "select": [104, 109, 195, 334, 348, 430, 477, 478, 479], "combinator": 104, "functool": [104, 233, 477, 478, 479, 480, 482, 483], "small": [104, 372], "revis": 104, "histori": [104, 112, 326, 451], "acknowledg": 104, "instrument": 106, "dtrace": [106, 481], "systemtap": [106, 481], "enabl": [106, 133, 473, 479], "marker": 106, "probe": [106, 481], "avail": [106, 189, 388, 404], "tapset": 106, "ipaddress": [107, 265, 478, 479, 480, 482, 484], "address": [107, 265, 289], "note": [107, 192, 214, 295, 339, 344, 345, 348, 381, 432], "ip": [107, 265], "host": [107, 265], "inspect": [107, 261, 476, 477, 478, 479, 480, 481, 483, 484], "messag": [108, 109, 203, 212, 214, 237, 242, 272, 277, 378, 476], "date": [108, 133, 189, 469], "next": [108, 485], "step": [108, 460], "flow": [108, 128], "logger": [108, 109, 273], "formatt": [108, 109, 273], "no": [108, 479], "dure": 108, "optim": [108, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "destin": 109, "server": [109, 133, 139, 145, 252, 345, 348, 411, 423, 424, 477, 482], "deal": 109, "receiv": 109, "event": [109, 133, 143, 331, 339, 370, 374, 381, 388], "listen": [109, 289], "product": 109, "contextu": 109, "loggeradapt": [109, 273], "impart": 109, "than": 109, "filter": [109, 273, 276, 384, 386, 404], "contextvar": [109, 176, 482], "concurr": [109, 132, 144, 170, 171, 172, 477, 480, 481, 482, 484], "futur": [109, 119, 133, 135, 172, 440, 473, 477, 480, 481, 482, 484], "processpoolexecutor": [109, 172], "deploy": 109, "web": [109, 250, 407, 477], "gunicorn": 109, "uwsgi": 109, "rotat": 109, "logrecord": [109, 273], "queuehandl": [109, 275], "zeromq": 109, "queuelisten": [109, 275], "namer": 109, "elabor": 109, "multiprocess": [109, 289, 290, 472, 478, 479, 480, 481, 482, 483, 484], "insert": 109, "bom": [109, 164], "sent": 109, "sysloghandl": [109, 275], "dictconfig": 109, "particular": 109, "throughout": 109, "factori": [109, 187, 265], "speak": 109, "them": 109, "condit": [109, 143, 298, 370, 434, 446, 471], "email": [109, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 477, 478, 479, 480, 481], "utc": 109, "gmt": 109, "via": [109, 465], "cli": 109, "starter": 109, "templat": [109, 195, 307, 352, 456], "qt": 109, "syslog": [109, 361], "rfc5424": 109, "pattern": [109, 111, 128, 227, 238, 431, 432, 476], "open": [109, 115, 133], "nullhandl": [109, 275], "lot": 109, "resourc": [109, 258, 328, 426, 478, 479, 482], "sure": 110, "proper": 110, "divis": [110, 468], "versus": [110, 111, 432], "featur": [110, 287, 433, 471, 473, 476, 478, 479, 480, 481, 482, 483, 484], "detect": [110, 362], "prevent": 110, "compat": [110, 337, 381, 428], "regress": [110, 367], "which": [110, 200], "transit": 110, "updat": [110, 404, 473, 484], "denot": 110, "continu": [110, 182, 440, 445], "stay": 110, "consid": 110, "match": [111, 126, 128, 227, 325, 394, 431, 432, 445, 476], "repeat": [111, 268], "thing": 111, "regular": [111, 114, 325, 436], "backslash": 111, "plagu": 111, "flag": [111, 116, 126, 128, 175, 200, 218, 261, 298, 325, 460], "power": [111, 161, 281, 434], "metacharact": 111, "captur": [111, 431], "lookahead": 111, "assert": [111, 394, 440], "split": [111, 116], "search": [111, 116, 254, 259, 325, 436], "replac": [111, 175, 254, 355, 436], "common": [111, 158, 189, 300, 312, 351, 352, 474], "problem": [111, 158], "greedi": 111, "re": [111, 187, 325, 392, 478, 479, 480, 481, 482], "verbos": [111, 394], "feedback": 111, "ipc": 112, "disconnect": 112, "die": 112, "old": [113, 392, 468], "decor": [113, 175, 393, 394, 470, 472], "undecor": 113, "cmp": 113, "odd": 113, "compar": [114, 406], "filenam": [114, 227, 282], "tip": [114, 116, 272], "awar": [114, 189, 480], "unknown": 114, "urllib": [115, 396, 397, 398, 399, 400, 476, 477, 478, 479, 480, 481, 482, 484], "articl": 115, "url": [115, 396, 398, 399], "urlerror": 115, "httperror": 115, "wrap": [115, 369, 374], "info": 115, "geturl": 115, "authent": [115, 289], "proxi": [115, 289, 393], "variat": 116, "job": 116, "scheme": 116, "home": 116, "prefix": [116, 126, 265, 484], "locat": [116, 330, 420], "syntax": [116, 126, 128, 325, 352, 417, 447, 472, 474, 476, 478, 480, 481], "tweak": 116, "linker": [116, 460], "codegear": 116, "gnu": [116, 190, 237, 326, 329], "mingw": 116, "pip": [117, 217, 457, 473, 479], "2to3": 118, "fixer": 118, "lib2to3": 118, "__future__": [119, 467], "__main__": [120, 436, 482], "top": [120, 268, 386, 441], "environ": [120, 299, 403, 411, 429, 459, 465, 473, 478, 480, 481], "__name__": 120, "idiomat": 120, "_thread": [121, 476], "abc": [122, 167, 258, 295, 390, 476, 477, 478, 479, 480, 484], "aifc": [123, 479, 482], "aiff": 123, "parser": [126, 173, 214, 235, 247, 298, 320, 418, 420, 472, 484], "line": [126, 128, 162, 169, 196, 217, 225, 235, 241, 254, 261, 268, 271, 298, 299, 306, 317, 326, 340, 363, 367, 383, 384, 392, 426, 439, 459, 465, 470, 473, 476, 477, 478], "argumentpars": 126, "prog": 126, "epilog": 126, "parent": 126, "formatter_class": 126, "prefix_char": 126, "fromfile_prefix_char": 126, "argument_default": 126, "allow_abbrev": 126, "conflict_handl": 126, "add_help": 126, "exit_on_error": 126, "add_argu": 126, "action": [126, 298], "narg": 126, "const": 126, "choic": 126, "requir": [126, 182, 259], "metavar": 126, "dest": 126, "parse_arg": 126, "contain": [126, 167, 265, 432], "abbrevi": 126, "argv": 126, "namespac": [126, 417, 432, 436, 444, 478], "filetyp": 126, "exclus": 126, "partial": [126, 233, 394, 416, 471], "exit": [126, 146], "intermix": 126, "upgrad": [126, 133], "optpars": [126, 298, 469], "ast": [128, 472, 477, 481, 483, 484], "grammar": 128, "node": [128, 414], "subscript": [128, 434], "await": [128, 132, 144, 432, 434, 480], "helper": [128, 196, 352, 355, 390, 393], "asynchat": [129, 476, 481], "asyncio": [130, 132, 144, 176, 476, 479, 480, 481, 482, 483, 484], "hello": [130, 133, 374], "world": [130, 133, 374], "queue": [131, 140, 243, 289, 322, 446, 482], "subprocess": [131, 133, 139, 142, 254, 355, 470, 478, 479, 480, 481, 482], "stream": [131, 139, 164, 225, 264, 305], "synchron": [131, 143, 289], "multithread": 132, "never": 132, "retriev": [132, 261, 385], "stop": [133, 393], "schedul": [133, 144, 299, 331], "callback": [133, 182, 298, 469], "delay": 133, "transfer": 133, "watch": 133, "dns": 133, "pool": [133, 289], "call_soon": 133, "call_lat": 133, "sigint": 133, "sigterm": 133, "polici": [136, 138, 215, 478], "maco": [137, 254, 309, 460, 484, 485], "watcher": 138, "transport": 139, "hierarchi": [139, 220, 264, 432, 472, 478], "onli": [139, 187, 254, 445, 476, 482, 483], "datagram": 139, "tcp": [139, 141], "echo": [139, 141, 145], "client": [139, 145, 230, 249, 250, 255, 289, 311, 342, 348, 423, 473, 477, 479, 480, 481, 482], "udp": 139, "subprocess_exec": 139, "subprocessprotocol": 139, "prioriti": [140, 243], "lifo": 140, "streamread": [141, 164], "streamwrit": [141, 164], "http": [141, 145, 248, 249, 250, 251, 252, 411, 473, 477, 478, 479, 480, 481, 482, 484], "interact": [142, 163, 200, 433, 441, 467, 471], "primit": [143, 144, 289, 390], "semaphor": [143, 370], "boundedsemaphor": 143, "sleep": 144, "shield": 144, "cancel": 144, "timeout": [144, 221, 344], "wait": [144, 334], "introspect": [144, 261, 390], "asyncor": [145, 476, 477, 481], "atexit": 146, "audioop": [147, 479], "base64": [149, 476, 478, 479], "base16": 149, "base32": 149, "base85": 149, "secur": [149, 158, 242, 252, 274, 333, 348, 355, 460, 473, 476, 479, 485], "bdb": [150, 476], "framework": [150, 345, 467, 478], "servic": [151, 237, 270, 272, 283, 321], "binascii": [152, 478, 481, 482], "binhex": 153, "decod": [153, 164, 268, 323], "binhex4": 153, "bisect": [154, 476], "algorithm": [154, 242, 259, 276, 479], "builtin": [155, 393, 433, 474, 478, 483, 485], "bz2": [156, 478, 480], "bzip2": 156, "compress": [156, 276, 428], "increment": [156, 164, 274], "shot": 156, "calendar": [157, 482], "care": 158, "solut": 158, "cgitb": 159, "traceback": [159, 221, 385, 386, 476, 479, 480, 481], "chunk": 160, "iff": 160, "cmath": [161, 480, 481], "convers": [161, 182, 265, 281, 351, 371, 434, 470], "polar": 161, "coordin": 161, "logarithm": [161, 281], "trigonometr": [161, 281], "hyperbol": [161, 281], "classif": 161, "orient": [162, 302], "consol": [163, 288, 481], "stateless": 164, "incrementalencod": 164, "incrementaldecod": 164, "streamreaderwrit": 164, "streamrecod": 164, "idna": 164, "internation": [164, 209, 237, 272], "ansi": 164, "codepag": 164, "utf_8_sig": 164, "signatur": [164, 261, 478], "codeop": 165, "chainmap": 166, "counter": 166, "dequ": 166, "defaultdict": 166, "namedtupl": 166, "ordereddict": 166, "userdict": 166, "userlist": 166, "userstr": 166, "descript": [167, 218, 320], "recip": [167, 175, 192, 267, 347, 350], "colorsi": [168, 479], "compileal": [169, 480, 482, 484], "public": [169, 388], "executor": 172, "threadpoolexecutor": 172, "configpars": [173, 477, 480], "datatyp": [173, 469], "fallback": 173, "ini": [173, 465], "interpol": 173, "behaviour": 173, "rawconfigpars": 173, "site": [174, 340, 472, 476, 477, 481], "contextlib": [175, 471, 472, 476, 477, 478, 479, 480, 481, 482], "__enter__": 175, "reusabl": 175, "reentrant": 175, "shallow": 177, "deep": 177, "copyreg": 178, "pickl": [178, 218, 305, 306, 429, 469, 478, 479, 480, 481, 483], "crypt": [179, 478, 482], "hash": [179, 242, 351, 479, 482], "csv": [181, 477, 480, 483], "dialect": 181, "reader": 181, "writer": [181, 272], "ctype": [182, 289, 471, 472, 477, 483], "foreign": 182, "load": [182, 195, 392, 436], "fundament": 182, "prototyp": 182, "union": [182, 351, 476], "align": [182, 354], "bit": [182, 261, 409, 474], "export": 182, "surpris": 182, "size": [182, 242, 299, 338, 354, 386], "termin": [183, 299, 315, 338], "textpad": 183, "widget": [183, 374, 379, 380, 381, 473], "textbox": 183, "panel": 185, "stack": [185, 261, 385, 446], "dataclass": [187, 476, 482], "init": [187, 326], "frozen": 187, "__init__": [187, 218], "mutabl": [187, 351, 394], "naiv": 189, "determin": [189, 432], "timedelta": 189, "tzinfo": 189, "timezon": [189, 371], "strftime": 189, "strptime": 189, "dbm": [190, 477, 479, 480, 481, 482], "reinterpret": 190, "ndbm": 190, "portabl": 190, "decim": [192, 456, 470, 477, 478, 481, 482], "fix": [192, 298, 467, 468, 469, 473], "arithmet": [192, 265, 295, 434], "operand": 192, "round": 192, "mitig": 192, "off": 192, "increas": 192, "precis": [192, 476], "special": [192, 281, 351, 388, 390, 432, 436, 469, 474], "develop": [194, 254, 306, 466, 472, 482], "effect": [194, 394], "resourcewarn": 194, "bad": 194, "dialog": [195, 375], "simpledialog": 195, "filedialog": 195, "nativ": 195, "save": 195, "commondialog": 195, "difflib": [196, 480], "comput": [196, 386], "delta": 196, "sequencematch": 196, "dis": [197, 477, 479, 482], "bytecod": [197, 367, 436, 476, 481, 482, 483, 484], "analysi": [197, 337, 439], "instruct": 197, "opcod": 197, "doctest": [200, 470, 476, 479, 480], "docstr": [200, 388], "examin": [200, 358], "recogn": 200, "unittest": [200, 392, 393, 394, 473, 476, 477, 478, 479, 480, 481, 482, 483], "doctestfind": 200, "doctestpars": 200, "doctestrunn": 200, "outputcheck": 200, "soapbox": 200, "mime": [201, 204, 208, 213, 282, 323], "charset": 202, "repres": [202, 203, 212], "compat32": 203, "contentmanag": 204, "defect": 206, "headerregistri": 210, "scratch": 213, "feedpars": 214, "ensurepip": [217, 473, 479], "bootstrap": [217, 473, 479], "enum": [218, 479, 480, 481, 482], "enumer": [218, 469], "programmat": [218, 258, 306, 384], "their": [218, 325, 394], "ensur": 218, "allow": 218, "restrict": [218, 305, 336, 399, 433], "intenum": 218, "intflag": 218, "__new__": 218, "vs": [218, 325, 390, 474], "interest": [218, 417], "omit": 218, "auto": 218, "orderedenum": 218, "duplicatefreeenum": 218, "planet": 218, "timeperiod": 218, "aka": 218, "__dunder__": 218, "_sunder_": 218, "_private__nam": 218, "combin": [218, 348], "errno": 219, "faulthandl": [221, 476, 478, 480, 481], "dump": 221, "fault": [221, 423], "after": 221, "fcntl": [222, 484], "ioctl": 222, "filecmp": [223, 479], "dircmp": 223, "fileinput": [225, 476, 481], "fnmatch": 227, "fraction": [228, 472, 477], "ration": 228, "ftplib": [230, 478, 484], "ftp": [230, 477], "ftp_tls": 230, "callabl": [233, 261, 347, 390, 432], "gc": [234, 476, 478, 479, 482, 483, 484], "getpass": 236, "gettext": [237, 482, 483], "multilingu": 237, "nulltransl": 237, "gnutransl": 237, "solari": 237, "catalog": [237, 272], "fli": 237, "defer": 237, "translat": [237, 388], "glob": [238, 476, 479, 480], "pathnam": [238, 300], "expans": 238, "graphlib": [239, 484], "graph": 239, "grp": [240, 481], "gzip": [241, 428, 477, 480, 483], "hashlib": [242, 471, 476, 477, 479, 481, 484], "digest": 242, "shake": 242, "blake2": 242, "person": 242, "credit": 242, "heapq": [243, 480], "hmac": [244, 476, 478, 479, 482], "hypertext": 245, "markup": [245, 279], "entiti": 246, "xhtml": 247, "htmlparser": 247, "httpconnect": 249, "httprespons": 249, "httpmessag": 249, "cookiejar": 250, "cooki": [250, 251, 430], "filecookiejar": 250, "co": 250, "browser": [250, 318, 407], "cookiepolici": 250, "defaultcookiepolici": 250, "morsel": 251, "idl": [254, 466, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485], "menu": 254, "shell": [254, 307, 337, 355], "editor": [254, 461], "menus": 254, "navig": [254, 374], "indent": [254, 362, 439], "calltip": 254, "startup": [254, 326], "failur": [254, 392], "without": [254, 476], "prefer": 254, "idlelib": [254, 476, 479, 480, 481, 482, 483, 484], "imaplib": [255, 477, 478, 480, 484], "imap4": 255, "imghdr": [256, 480], "imp": 257, "intern": [257, 274, 351], "importlib": [258, 259, 436, 473, 476, 478, 479, 480, 481, 482, 484], "machineri": 258, "lazi": 258, "approxim": [258, 480], "import_modul": 258, "entri": [259, 432, 436], "live": 261, "fetch": 261, "io": [264, 477, 478, 480, 482, 483], "opt": 264, "encodingwarn": [264, 476], "reentranc": 264, "ipv4": 265, "ipv6": 265, "manipul": [265, 277, 298, 300], "conveni": [265, 407, 423], "net": 265, "mask": 265, "interprocess": 266, "communic": 266, "json": [268, 305, 450, 472, 480, 481, 483], "complianc": 268, "interoper": 268, "infinit": 268, "nan": 268, "within": 268, "linecach": [271, 476, 480], "background": [272, 298], "emb": 272, "facil": 273, "safeti": 273, "schema": 274, "extern": [274, 305], "resolut": [274, 433, 482], "streamhandl": 275, "filehandl": [275, 399], "watchedfilehandl": 275, "baserotatinghandl": 275, "rotatingfilehandl": 275, "timedrotatingfilehandl": 275, "sockethandl": 275, "datagramhandl": 275, "nteventloghandl": 275, "smtphandler": 275, "memoryhandl": 275, "httphandler": [275, 399], "lzma": [276, 478, 480], "decompress": [276, 426], "chain": [276, 348, 394, 447], "mailbox": [277, 477], "various": 277, "maildir": 277, "mbox": 277, "mh": 277, "babyl": 277, "mmdf": 277, "maildirmessag": 277, "mboxmessag": 277, "mhmessag": 277, "babylmessag": 277, "mmdfmessag": 277, "mailcap": 278, "theoret": 281, "represent": [281, 429, 448, 478], "angular": 281, "mimetyp": [282, 482], "multimedia": 283, "mmap": [284, 478, 479, 483], "madv_": 284, "map_": 284, "modulefind": 285, "msilib": [287, 482], "view": [287, 351, 473, 474], "record": [287, 386, 456], "cab": 287, "precomput": 287, "msvcrt": 288, "routin": [288, 361], "vc": 288, "parallel": [289, 370, 483], "exchang": 289, "sharedctyp": 289, "remot": 289, "cleanup": [289, 298, 479], "dummi": 289, "guidelin": 289, "forkserv": 289, "shared_memori": 290, "netrc": 292, "nis": 293, "sun": [293, 356], "yellow": 293, "page": 293, "nntplib": [294, 478, 484], "nntp": [294, 477], "tower": 295, "implementor": 295, "posit": [298, 325, 432, 445, 476, 483], "understand": [298, 374], "put": 298, "popul": 298, "trivial": 298, "ossaudiodev": 301, "oss": 301, "audio": 301, "devic": 301, "mixer": 301, "pathlib": [302, 476, 479, 480, 481, 482, 483, 484], "filesystem": [302, 481, 483], "part": 302, "correspond": [302, 388, 390], "pdb": [303, 477, 478, 479, 481, 482, 484], "unpickl": 305, "dispatch": 305, "reduct": 305, "band": [305, 483], "consum": 305, "pickletool": [306, 481], "pipelin": [307, 355], "pkgutil": 308, "java": 309, "plistlib": [310, 472, 479, 483], "appl": [310, 484], "plist": 310, "poplib": [311, 477, 479, 480, 484], "pop3": 311, "posix": [312, 366], "larg": 312, "notabl": [312, 476, 480, 481, 482, 483, 484], "pprint": [313, 476, 479, 483, 484], "pretti": [313, 386], "printer": 313, "prettyprint": 313, "instant": 314, "cprofil": [314, 482, 483], "stat": [314, 349, 478, 479], "determinist": 314, "timer": [314, 370], "pti": [315, 479], "pseudo": 315, "pwd": 316, "password": 316, "py_compil": [317, 476, 482, 483], "pyclbr": [318, 476], "pydoc": [319, 477, 478, 479, 481, 482, 484], "onlin": 319, "xml": [320, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 430, 466, 476, 478, 479, 480, 482, 483, 484], "expat": [320, 430], "fast": [320, 483], "xmlparser": [320, 417], "expaterror": 320, "model": [320, 374, 414, 432, 433, 467], "simplequeu": 322, "quopri": 323, "quot": [323, 398], "printabl": 323, "bookkeep": 324, "reproduc": 324, "pair": 325, "simul": 325, "phonebook": 325, "mung": 325, "adverb": 325, "notat": [325, 438, 472], "token": [325, 332, 382, 383, 439, 483], "readlin": [326, 329, 340, 480, 481], "reprlib": [327, 477], "repr": [327, 436], "rlcomplet": [329, 481], "runpi": 330, "sched": [331, 478], "secret": [332, 481], "dev": [334, 482], "poll": 334, "edg": 334, "trigger": 334, "epol": 334, "kqueue": [334, 430], "kevent": 334, "selector": [335, 380, 479, 480], "multiplex": 335, "shelv": [336, 476, 479], "shlex": [337, 478, 481, 483], "lexic": [337, 439], "improv": [337, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "shutil": [338, 477, 478, 479, 480, 483], "copytre": 338, "rmtree": 338, "base_dir": 338, "sigpip": 339, "smtpd": [341, 476, 478, 479, 480], "smtp": [341, 342], "smtpserver": 341, "debuggingserv": 341, "pureproxi": 341, "mailmanproxi": 341, "smtpchannel": 341, "smtplib": [342, 478, 479, 480, 484], "sndhdr": [343, 480], "accept": 344, "socketserv": [345, 478, 481, 482], "tcpserver": 345, "udpserv": 345, "mixin": 345, "spwd": 346, "shadow": 346, "sqlite3": [347, 471, 476, 477, 478, 479, 480, 481, 482], "db": 347, "sqlite": 347, "cursor": 347, "row": 347, "prepareprotocol": 347, "adapt": 347, "placehold": 347, "sql": 347, "shortcut": 347, "uri": 347, "transact": 347, "ssl": [348, 472, 476, 477, 478, 479, 480, 481, 482, 483], "certif": [348, 473, 477, 479], "ca": 348, "sign": 348, "side": [348, 394], "bio": [348, 480], "session": 348, "verifi": 348, "cipher": 348, "statist": [350, 386, 476, 479, 481, 483], "spread": 350, "two": [350, 473], "normaldist": 350, "bitwis": [351, 434], "rang": [351, 445], "str": 351, "printf": 351, "bytearray": [351, 480], "frozenset": 351, "alia": 351, "genericalia": 351, "notimpl": 351, "affect": 351, "recommend": 351, "mini": 352, "stringprep": 353, "prepar": [353, 432], "pack": 354, "frequent": 355, "bin": 355, "sh": 355, "substitut": [355, 470], "popen2": 355, "popen3": 355, "sunau": [356, 479, 482], "au": 356, "au_read": 356, "au_writ": 356, "symtabl": 358, "tabnanni": 362, "ambigu": 362, "tarfil": [363, 477, 478, 479, 480, 483], "tar": 363, "tarinfo": 363, "telnetlib": [364, 481], "telnet": 364, "tempfil": [365, 477, 478], "termio": 366, "tti": [366, 387], "unit": 367, "suit": 367, "socket_help": 367, "script_help": 367, "bytecode_help": 367, "correct": 367, "threading_help": 367, "os_help": 367, "import_help": 367, "warnings_help": 367, "textwrap": [369, 478, 479], "fill": [369, 388], "rlock": 370, "barrier": 370, "clock": 371, "timeit": [372, 480, 481], "measur": [372, 388], "snippet": 372, "tcl": 374, "architectur": 374, "life": 374, "preserv": [374, 481], "handi": 374, "packer": [374, 412], "coupl": 374, "imag": [374, 380], "colorchoos": 375, "choos": 375, "dnd": 376, "drag": 376, "drop": 376, "font": 377, "messagebox": 378, "prompt": 378, "scrolledtext": 379, "scroll": 379, "tix": 380, "hierarch": 380, "listbox": 380, "tabular": 380, "geometri": 380, "ttk": [381, 473], "theme": [381, 473], "scrollabl": 381, "label": 381, "combobox": 381, "virtual": [381, 403, 465, 478, 480], "spinbox": 381, "notebook": 381, "identifi": [381, 434, 439], "progressbar": 381, "separ": [381, 469, 473, 475], "sizegrip": 381, "treeview": 381, "tag": [381, 477], "column": 381, "layout": [381, 456], "track": [384, 394], "main": [384, 460, 472], "tracebackexcept": 385, "stacksummari": 385, "framesummari": 385, "peak": 386, "domainfilt": 386, "frame": [386, 481], "snapshot": 386, "statisticdiff": 386, "turtl": 388, "star": 388, "screen": 388, "turtlescreen": 388, "rawturtl": 388, "motion": 388, "pen": 388, "draw": 388, "visibl": [388, 478], "anim": 388, "turtledemo": [388, 477], "demo": [388, 483, 485], "sinc": 388, "relev": 390, "alias": [390, 392], "newtyp": 390, "nomin": 390, "subtyp": 390, "unicodedata": [391, 480, 481, 482, 483, 484], "discoveri": 392, "skip": 392, "expect": 392, "distinguish": 392, "subtest": 392, "load_test": 392, "fixtur": 392, "setupclass": 392, "teardownclass": 392, "setupmodul": 392, "teardownmodul": 392, "mock": [393, 394, 480, 481, 482], "attach": 393, "patcher": 393, "patch": [393, 394], "test_prefix": 393, "nest": [393, 394, 467, 468, 476], "where": 393, "magicmock": [393, 394], "magic": 393, "sentinel": 393, "create_autospec": 393, "filter_dir": 393, "mock_open": 393, "autospecc": 393, "seal": 393, "further": 394, "everi": 394, "unbound": 394, "cope": 394, "less": 394, "compon": [398, 441], "openerdirector": 399, "basehandl": 399, "httpredirecthandl": 399, "httpcookieprocessor": 399, "proxyhandl": 399, "httppasswordmgr": 399, "httppasswordmgrwithpriorauth": 399, "abstractbasicauthhandl": 399, "httpbasicauthhandl": 399, "proxybasicauthhandl": 399, "abstractdigestauthhandl": 399, "httpdigestauthhandl": 399, "proxydigestauthhandl": 399, "httpshandler": 399, "datahandl": 399, "ftphandler": 399, "cacheftphandl": 399, "unknownhandl": 399, "httperrorprocessor": 399, "respons": [399, 411], "robotpars": [400, 481], "robot": 400, "txt": 400, "xdrlib": [401, 412], "uuencod": [401, 430], "uuid": [402, 482], "accord": 402, "rfc": 402, "4122": 402, "venv": [403, 479, 481, 483, 484], "envbuild": 403, "overrid": 404, "temporarili": 404, "suppress": [404, 478], "wave": [405, 479, 482], "wav": 405, "wave_read": 405, "wave_writ": 405, "weakref": [406, 479, 483], "webbrows": [407, 478], "winreg": [409, 481], "hkey_": 409, "right": 409, "64": 409, "winsound": [410, 481], "sound": 410, "play": 410, "wsgiref": [411, 471, 480], "wsgi": 411, "simple_serv": 411, "conform": [411, 414], "checker": 411, "gateway": [411, 477], "xdr": 412, "unpack": [412, 445, 480], "vulner": 413, "defusedxml": 413, "dom": [414, 415, 416, 466], "domimplement": 414, "nodelist": 414, "documenttyp": 414, "attr": 414, "namednodemap": 414, "comment": [414, 439], "cdatasect": 414, "processinginstruct": 414, "accessor": 414, "minidom": 415, "minim": 415, "pulldom": 416, "domeventstream": 416, "etre": [417, 478, 479, 482], "elementtre": [417, 471, 473, 477, 478], "pull": 417, "xpath": 417, "xinclud": 417, "qname": 417, "treebuild": 417, "xmlpullpars": 417, "sax": [418, 419, 420, 421, 480], "sax2": [418, 466], "saxexcept": 418, "contenthandl": 419, "dtdhandler": 419, "entityresolv": 419, "errorhandl": 419, "lexicalhandl": 419, "xmlreader": 420, "incrementalpars": 420, "inputsourc": 420, "attributesn": 420, "saxutil": 421, "xmlrpc": [422, 423, 424, 480, 481, 482, 483], "rpc": [423, 424], "serverproxi": 423, "protocolerror": 423, "multical": 423, "simplexmlrpcserv": 424, "cgixmlrpcrequesthandl": 424, "docxmlrpcserv": 424, "doccgixmlrpcrequesthandl": 424, "zipapp": [425, 480, 482], "zip": [425, 426, 427, 469], "standalon": 425, "zipfil": [426, 477, 479, 480, 481, 482], "pyzipfil": 426, "zipinfo": 426, "pitfal": 426, "itself": 426, "interrupt": 426, "behavior": [426, 476, 479, 480, 481, 482, 483], "zipimport": [427, 476], "zlib": [428, 430, 478, 481], "zoneinfo": [429, 484], "iana": 429, "zone": 429, "psf": 430, "beopen": 430, "com": 430, "cnri": 430, "cwi": 430, "zero": 430, "claus": 430, "bsd": 430, "mersenn": 430, "twister": 430, "uudecod": 430, "test_epol": 430, "siphash24": 430, "strtod": 430, "dtoa": 430, "openssl": [430, 464], "libffi": 430, "cfuhash": 430, "libmpdec": 430, "w3c": 430, "c14n": 430, "guard": [431, 476], "irrefut": 431, "wildcard": [431, 455, 476], "invok": 432, "metaclass": 432, "resolv": 432, "mro": 432, "appropri": 432, "bodi": 432, "emul": 432, "purpos": 432, "__class_getitem__": 432, "__getitem__": 432, "atom": 434, "parenthes": [434, 476], "yield": [434, 440], "primari": 434, "slice": [434, 469], "unari": 434, "shift": 434, "membership": 434, "assign": [434, 440, 466, 483], "finder": 436, "loader": 436, "submodul": 436, "__path__": 436, "__spec__": 436, "physic": 439, "declar": [439, 476], "explicit": [439, 472, 478, 479], "implicit": [439, 478], "blank": 439, "whitespac": 439, "soft": 439, "reserv": 439, "imaginari": 439, "delimit": 439, "augment": [440, 466], "del": [440, 446], "break": [440, 445], "nonloc": 440, "els": 445, "dir": 454, "shouldn": 459, "makefil": 460, "target": [460, 473, 480, 481], "ide": [461, 463], "mac": [463, 472, 473, 484], "macpython": 463, "freebsd": [464, 473], "openbsd": 464, "opensolari": 464, "full": 465, "max_path": 465, "known": 465, "temporari": 465, "nuget": 465, "embedd": 465, "bundl": 465, "excursus": 465, "launcher": [465, 478, 480], "shebang": 465, "diagnost": 465, "pywin32": 465, "cx_freez": 465, "cycl": 466, "minor": 466, "easi": 466, "pyxml": 466, "227": [467, 468], "236": 467, "207": 467, "rich": 467, "230": 467, "229": 467, "205": 467, "232": 467, "235": 467, "insensit": 467, "217": 467, "208": 467, "coercion": [467, 482], "241": 467, "252": 468, "253": 468, "diamond": 468, "234": 468, "255": [468, 469], "237": [468, 470], "unifi": [468, 470, 471], "long": [468, 470], "238": 468, "218": [469, 470], "263": 469, "273": 469, "277": 469, "nt": 469, "278": 469, "univers": 469, "279": 469, "285": 469, "293": 469, "301": 469, "302": 469, "305": 469, "307": 469, "enhanc": [469, 472, 473, 481], "289": 470, "292": 470, "simpler": [470, 481], "318": 470, "322": 470, "324": 470, "327": 470, "need": 470, "328": [470, 471], "331": 470, "cookielib": 470, "308": 471, "309": 471, "314": 471, "softwar": 471, "v1": [471, 477], "absolut": 471, "338": 471, "341": 471, "342": 471, "343": [471, 472], "352": 471, "353": 471, "ssize_t": 471, "357": 471, "__index__": 471, "tracker": 472, "roundup": 472, "restructuredtext": 472, "sphinx": 472, "366": 472, "370": 472, "per": 472, "371": 472, "3101": [472, 474], "3105": 472, "3110": 472, "3112": 472, "3116": 472, "3118": [472, 478], "3119": 472, "3127": 472, "3129": 472, "3141": 472, "future_builtin": 472, "javascript": 472, "irix": 472, "372": [473, 475], "378": [473, 475], "thousand": [473, 475], "389": [473, 477], "391": [473, 477], "3106": 473, "3137": 473, "mainten": 473, "434": 473, "branch": 473, "466": 473, "477": 473, "backport": 473, "453": [473, 479], "476": [473, 479], "verif": [473, 479], "stdlib": [473, 479], "493": 473, "https": 473, "migrat": 473, "regen": [473, 480, 481], "touch": [473, 480, 481], "stumbl": 474, "alreadi": 474, "highlight": [476, 478, 479, 480, 481, 482, 483, 484], "better": [476, 480], "indentationerror": 476, "attributeerror": 476, "nameerror": 476, "626": 476, "634": 476, "604": 476, "612": 476, "613": 476, "typealia": 476, "647": 476, "652": 476, "maintain": 476, "384": 477, "3148": 477, "3147": 477, "repositori": 477, "3149": 477, "so": 477, "3333": 477, "405": 478, "420": 478, "393": 478, "flexibl": 478, "397": 478, "3151": 478, "rework": 478, "380": 478, "subgener": 478, "409": 478, "414": 478, "3155": 478, "qualifi": 478, "412": 478, "362": 478, "421": 478, "simplenamespac": 478, "grain": 478, "unsupport": [478, 480], "446": 479, "newli": 479, "451": 479, "modulespec": 479, "445": 479, "442": 479, "456": 479, "interchang": 479, "436": 479, "signific": 479, "longer": 479, "492": 480, "465": 480, "dedic": 480, "infix": 480, "matrix": 480, "448": 480, "461": 480, "percent": 480, "484": 480, "471": 480, "scandir": 480, "faster": 480, "475": 480, "retri": 480, "eintr": 480, "479": 480, "stopiter": 480, "insid": 480, "485": 480, "equal": 480, "486": 480, "488": 480, "elimin": 480, "pyo": 480, "489": 480, "negoti": 480, "498": 481, "526": 481, "515": 481, "underscor": 481, "525": 481, "530": 481, "487": 481, "519": 481, "495": 481, "disambigu": 481, "529": 481, "528": 481, "520": 481, "468": 481, "523": 481, "pythonmalloc": 481, "13": 481, "563": 482, "postpon": 482, "538": 482, "540": 482, "forc": 482, "553": 482, "breakpoint": 482, "539": 482, "562": 482, "564": 482, "nanosecond": 482, "565": 482, "deprecationwarn": [482, 484], "560": 482, "552": 482, "545": 482, "uu": 482, "macpath": 482, "578": 483, "audit": 483, "587": 483, "590": 483, "12": 483, "merg": 484, "suffix": 484, "11": 484, "big": 484, "sur": 484, "silicon": 484, "changelog": 485, "candid": 485, "alpha": 485}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Initialization, Finalization, and Threads": [[31, "initialization-finalization-and-threads"]], "Before Python Initialization": [[31, "before-python-initialization"]], "Global configuration variables": [[31, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[31, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[31, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[31, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[31, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[31, "non-python-created-threads"]], "Cautions about fork()": [[31, "cautions-about-fork"]], "High-level API": [[31, "high-level-api"]], "Low-level API": [[31, "low-level-api"]], "Sub-interpreter support": [[31, "sub-interpreter-support"]], "Bugs and caveats": [[31, "bugs-and-caveats"]], "Asynchronous Notifications": [[31, "asynchronous-notifications"]], "Profiling and Tracing": [[31, "profiling-and-tracing"]], "Advanced Debugger Support": [[31, "advanced-debugger-support"]], "Thread Local Storage Support": [[31, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[31, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[31, "dynamic-allocation"]], "Methods": [[31, "methods"], [351, "methods"], [294, "methods"], [302, "methods"]], "Thread Local Storage (TLS) API": [[31, "thread-local-storage-tls-api"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Supporting Cyclic Garbage Collection": [[27, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[27, "controlling-the-garbage-collector-state"]], "Python/C API \u53c3\u8003\u624b\u518a": [[30, "python-c-api-reference-manual"]], "\u51fd\u5f0f\uff08Function\uff09\u7269\u4ef6": [[26, "function-objects"]], "\u532f\u5165\u6a21\u7d44": [[29, "importing-modules"], [286, "importing-modules"]], "Code Objects": [[13, "code-objects"], [351, "code-objects"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "\u7522\u751f\u5668\u7269\u4ef6": [[28, "generator-objects"]], "API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "Byte Array Objects": [[8, "byte-array-objects"]], "Type check macros": [[8, "type-check-macros"]], "Direct API functions": [[8, "direct-api-functions"]], "Macros": [[8, "macros"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "\u6a94\u6848\uff08File\uff09\u7269\u4ef6": [[24, "file-objects"]], "Capsules": [[11, "capsules"], [473, "capsules"]], "Bytes Objects": [[9, "bytes-objects"], [351, "bytes-objects"]], "Context Variables Objects": [[17, "context-variables-objects"]], "Python Initialization Configuration": [[32, "python-initialization-configuration"]], "\u7bc4\u4f8b": [[32, "example"], [126, "example"], [133, "examples"], [106, "examples"], [40, "examples"], [60, "examples"], [425, "examples"], [411, "examples"], [427, "examples"], [417, "example"], [417, "id3"], [386, "examples"], [402, "example"], [406, "example"], [383, "examples"], [326, "example"], [315, "example"], [324, "examples"], [336, "example"], [335, "examples"], [313, "example"], [310, "examples"], [320, "example"], [339, "example"], [366, "example"], [345, "examples"], [372, "examples"], [361, "examples"], [363, "examples"], [344, "example"], [354, "examples"], [365, "examples"], [348, "examples"], [305, "example"], [305, "examples"], [276, "examples"], [277, "examples"], [289, "examples"], [249, "examples"], [250, "examples"], [247, "examples"], [251, "example"], [258, "examples"], [242, "examples"], [257, "examples"], [221, "example"], [179, "examples"], [181, "examples"], [178, "example"], [139, "examples"], [142, "examples"], [154, "examples"], [141, "examples"], [140, "examples"]], "PyWideStringList": [[32, "pywidestringlist"]], "PyStatus": [[32, "pystatus"]], "PyPreConfig": [[32, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[32, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[32, "pyconfig"]], "Initialization with PyConfig": [[32, "initialization-with-pyconfig"]], "Isolated Configuration": [[32, "isolated-configuration"]], "Python Configuration": [[32, "python-configuration"]], "Python Path Configuration": [[32, "python-path-configuration"]], "Py_RunMain()": [[32, "py-runmain"]], "Py_GetArgcArgv()": [[32, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[32, "multi-phase-initialization-private-provisional-api"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [392, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "Codec registry and support functions": [[14, "codec-registry-and-support-functions"]], "Codec lookup API": [[14, "codec-lookup-api"]], "Registry API for Unicode encoding error handlers": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "Concrete Objects Layer": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [318, "function-objects"]], "\u5176\u4ed6\u7269\u4ef6": [[16, "other-objects"], [5, "other-objects"]], "Complex Number Objects": [[15, "complex-number-objects"]], "Complex Numbers as C Structures": [[15, "complex-numbers-as-c-structures"]], "Complex Numbers as Python Objects": [[15, "complex-numbers-as-python-objects"]], "Parsing arguments and building values": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [126, "parsing-arguments"], [298, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "\u7c21\u4ecb": [[33, "introduction"], [116, "introduction"], [104, "introduction"], [111, "introduction"], [115, "introduction"], [438, "introduction"], [466, "introduction"], [467, "introduction"], [468, "introduction"], [457, "introduction"], [335, "introduction"], [289, "introduction"], [258, "introduction"], [263, "introduction"], [158, "introduction"]], "Coding standards": [[33, "coding-standards"]], "Include Files": [[33, "include-files"]], "Useful macros": [[33, "useful-macros"]], "Objects, Types and Reference Counts": [[33, "objects-types-and-reference-counts"]], "Reference Counts": [[33, "reference-counts"], [83, "reference-counts"]], "Reference Count Details": [[33, "reference-count-details"]], "Types": [[33, "types"]], "\u4f8b\u5916": [[33, "exceptions"], [134, "exceptions"], [131, "exceptions"], [433, "exceptions"], [412, "exceptions"], [414, "exceptions"], [417, "exceptions"], [344, "exceptions"], [355, "exceptions"], [350, "exceptions"], [347, "exceptions"], [348, "exceptions"], [277, "exceptions"], [268, "exceptions"], [239, "exceptions"], [173, "exceptions"], [140, "exceptions"]], "\u5d4c\u5165\u5f0fPython": [[33, "embedding-python"]], "Debugging Builds": [[33, "debugging-builds"]], "Allocating Objects on the Heap": [[3, "allocating-objects-on-the-heap"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[84, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[84, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[84, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[84, "embedding-the-cpython-runtime-in-a-larger-application"]], "Annotations Best Practices": [[98, "annotations-best-practices"]], "\u6458\u8981": [[98, null], [100, null], [102, null], [112, null], [103, "abstract"], [111, null], [110, null]], "Accessing The Annotations Dict Of An Object In Python 3.10 And Newer": [[98, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "Accessing The Annotations Dict Of An Object In Python 3.9 And Older": [[98, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "Manually Un-Stringizing Stringized Annotations": [[98, "manually-un-stringizing-stringized-annotations"]], "Best Practices For __annotations__ In Any Python Version": [[98, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ Quirks": [[98, "annotations-quirks"]], "\u767c\u5e03 Python \u6a21\u7d44\uff08\u820a\u7248\uff09": [[75, "distributing-python-modules-legacy-version"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[95, "programming-faq"]], "\u76ee\u9304": [[95, "id1"], [96, "id1"], [91, "id1"], [89, "id1"], [88, "id1"], [94, "id1"], [90, "id1"], [103, "id1"], [254, "menus"]], "\u5e38\u898b\u554f\u984c": [[95, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[95, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[95, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "How can I create a stand-alone binary from a Python script?": [[95, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Are there coding standards or a style guide for Python programs?": [[95, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "Core Language": [[95, "core-language"]], "\u70ba\u4ec0\u9ebc\u7576\u8b8a\u6578\u6709\u503c\u6642\u6211\u5f97\u5230\u932f\u8aa4\u8a0a\u606f UnboundLocalError": [[95, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[95, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[95, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "How do I share global variables across modules?": [[95, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[95, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[95, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[95, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "What is the difference between arguments and parameters?": [[95, "what-is-the-difference-between-arguments-and-parameters"]], "Why did changing list 'y' also change list 'x'?": [[95, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[95, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[95, "how-do-you-make-a-higher-order-function-in-python"]], "How do I copy an object in Python?": [[95, "how-do-i-copy-an-object-in-python"]], "How can I find the methods or attributes of an object?": [[95, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "How can my code discover the name of an object?": [[95, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[95, "what-s-up-with-the-comma-operator-s-precedence"]], "Is there an equivalent of C's \"?:\" ternary operator?": [[95, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[95, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[95, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "Numbers and strings": [[95, "numbers-and-strings"]], "How do I specify hexadecimal and octal integers?": [[95, "how-do-i-specify-hexadecimal-and-octal-integers"]], "Why does -22 // 10 return -3?": [[95, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[95, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "How do I convert a string to a number?": [[95, "how-do-i-convert-a-string-to-a-number"]], "How do I convert a number to a string?": [[95, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[95, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[95, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[95, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[95, "is-there-a-scanf-or-sscanf-equivalent"]], "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?": [[95, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Performance": [[95, "performance"], [474, "performance"], [305, "performance"], [264, "performance"]], "My program is too slow. How do I speed it up?": [[95, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[95, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[95, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[95, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[95, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[95, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[95, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[95, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[95, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[95, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method to a sequence of objects?": [[95, "how-do-i-apply-a-method-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[95, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[95, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[95, "how-can-i-sort-one-list-by-values-from-another-list"]], "Objects": [[95, "objects"]], "What is a class?": [[95, "what-is-a-class"]], "What is a method?": [[95, "what-is-a-method"]], "What is self?": [[95, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[95, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[95, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[95, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[95, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[95, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[95, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[95, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[95, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[95, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[95, "why-does-the-result-of-id-appear-to-be-not-unique"]], "When can I rely on identity tests with the is operator?": [[95, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "How can a subclass control what data is stored in an immutable instance?": [[95, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[95, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[95, "modules"], [434, "examples"], [351, "modules"]], "How do I create a .pyc file?": [[95, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[95, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[95, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') returns <module 'x'>; how do I get z?": [[95, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "When I edit an imported module and reimport it, the changes don't show up.  Why does this happen?": [[95, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "Extending Distutils": [[74, "extending-distutils"]], "Integrating new commands": [[74, "integrating-new-commands"]], "Adding new distribution types": [[74, "adding-new-distribution-types"]], "Python \u5957\u4ef6\u7d22\u5f15 (Python Package Index, PyPI)": [[77, "the-python-package-index-pypi"]], "An Introduction to Distutils": [[76, "an-introduction-to-distutils"]], "Concepts & Terminology": [[76, "concepts-terminology"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[76, "a-simple-example"], [83, "a-simple-example"], [108, "a-simple-example"]], "General Python terminology": [[76, "general-python-terminology"]], "Distutils-specific terminology": [[76, "distutils-specific-terminology"]], "Building C and C++ Extensions on Windows": [[87, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[87, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[87, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[87, "using-dlls-in-practice"]], "\u6307\u4ee4\u53c3\u7167": [[71, "command-reference"]], "Installing modules: the install command family": [[71, "installing-modules-the-install-command-family"]], "install_data": [[71, "install-data"]], "install_scripts": [[71, "install-scripts"]], "Creating a source distribution: the sdist command": [[71, "creating-a-source-distribution-the-sdist-command"]], "Building C and C++ Extensions": [[81, "building-c-and-c-extensions"]], "Building C and C++ Extensions with distutils": [[81, "building-c-and-c-extensions-with-distutils"]], "Distributing your extension modules": [[81, "distributing-your-extension-modules"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[96, "python-on-windows-faq"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[96, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[96, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[96, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[96, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[96, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[96, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[96, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[96, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[96, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "Argparse \u6559\u5b78": [[99, "argparse-tutorial"]], "\u6982\u5ff5": [[99, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[99, "the-basics"], [117, "basic-usage"], [268, "basic-usage"]], "\u4ecb\u7d39\u4f4d\u7f6e\u53c3\u6578": [[99, "introducing-positional-arguments"]], "\u4ecb\u7d39\u9078\u9805\u53c3\u6578": [[99, "introducing-optional-arguments"]], "Short options": [[99, "short-options"]], "\u73fe\u5728\u7d50\u5408\u4f4d\u7f6e\u8207\u9078\u9805\u53c3\u6578": [[99, "combining-positional-and-optional-arguments"]], "Getting a little more advanced": [[99, "getting-a-little-more-advanced"]], "Conflicting options": [[99, "conflicting-options"]], "\u7d50\u8ad6": [[99, "conclusion"]], "API \u53c3\u7167": [[69, "api-reference"]], "distutils.core --- Core Distutils functionality": [[69, "module-distutils.core"]], "distutils.ccompiler --- CCompiler base class": [[69, "module-distutils.ccompiler"]], "distutils.unixccompiler --- Unix C Compiler": [[69, "module-distutils.unixccompiler"]], "distutils.msvccompiler --- Microsoft Compiler": [[69, "module-distutils.msvccompiler"]], "distutils.bcppcompiler --- Borland Compiler": [[69, "module-distutils.bcppcompiler"]], "distutils.cygwincompiler --- Cygwin Compiler": [[69, "module-distutils.cygwinccompiler"]], "distutils.archive_util ---  Archiving utilities": [[69, "module-distutils.archive_util"]], "distutils.dep_util --- Dependency checking": [[69, "module-distutils.dep_util"]], "distutils.dir_util --- Directory tree operations": [[69, "module-distutils.dir_util"]], "distutils.file_util --- Single file operations": [[69, "module-distutils.file_util"]], "distutils.util --- Miscellaneous other utility functions": [[69, "module-distutils.util"]], "distutils.dist --- The Distribution class": [[69, "module-distutils.dist"]], "distutils.extension --- The Extension class": [[69, "module-distutils.extension"]], "distutils.debug --- Distutils debug mode": [[69, "module-distutils.debug"]], "distutils.errors --- Distutils exceptions": [[69, "module-distutils.errors"]], "distutils.fancy_getopt --- Wrapper around the standard getopt module": [[69, "module-distutils.fancy_getopt"]], "distutils.filelist --- The FileList class": [[69, "module-distutils.filelist"]], "distutils.log --- Simple PEP 282-style logging": [[69, "module-distutils.log"]], "distutils.spawn --- Spawn a sub-process": [[69, "module-distutils.spawn"]], "distutils.sysconfig --- System configuration information": [[69, "module-distutils.sysconfig"]], "distutils.text_file --- The TextFile class": [[69, "module-distutils.text_file"]], "distutils.version --- Version number classes": [[69, "module-distutils.version"]], "distutils.cmd --- Abstract base class for Distutils commands": [[69, "module-distutils.cmd"]], "Creating a new Distutils command": [[69, "creating-a-new-distutils-command"]], "distutils.command --- Individual Distutils commands": [[69, "module-distutils.command"]], "distutils.command.bdist --- Build a binary installer": [[69, "module-distutils.command.bdist"]], "distutils.command.bdist_packager --- Abstract base class for packagers": [[69, "module-distutils.command.bdist_packager"]], "distutils.command.bdist_dumb --- Build a \"dumb\" installer": [[69, "module-distutils.command.bdist_dumb"]], "distutils.command.bdist_msi --- Build a Microsoft Installer binary package": [[69, "module-distutils.command.bdist_msi"]], "distutils.command.bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM": [[69, "module-distutils.command.bdist_rpm"]], "distutils.command.sdist --- Build a source distribution": [[69, "module-distutils.command.sdist"]], "distutils.command.build --- Build all files of a package": [[69, "module-distutils.command.build"]], "distutils.command.build_clib --- Build any C libraries in a package": [[69, "module-distutils.command.build_clib"]], "distutils.command.build_ext --- Build any extensions in a package": [[69, "module-distutils.command.build_ext"]], "distutils.command.build_py --- Build the .py/.pyc files of a package": [[69, "module-distutils.command.build_py"]], "distutils.command.build_scripts --- Build the scripts of a package": [[69, "module-distutils.command.build_scripts"]], "distutils.command.clean --- Clean a package build area": [[69, "module-distutils.command.clean"]], "distutils.command.config --- Perform package configuration": [[69, "module-distutils.command.config"]], "distutils.command.install --- Install a package": [[69, "module-distutils.command.install"]], "distutils.command.install_data --- Install data files from a package": [[69, "module-distutils.command.install_data"]], "distutils.command.install_headers --- Install C/C++ header files from a package": [[69, "module-distutils.command.install_headers"]], "distutils.command.install_lib --- Install library files from a package": [[69, "module-distutils.command.install_lib"]], "distutils.command.install_scripts --- Install script files from a package": [[69, "module-distutils.command.install_scripts"]], "distutils.command.register --- Register a module with the Python Package Index": [[69, "module-distutils.command.register"]], "distutils.command.check --- Check the meta-data of a package": [[69, "module-distutils.command.check"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[91, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[91, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[91, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[91, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[91, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[91, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[91, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "Creating Built Distributions": [[70, "creating-built-distributions"]], "Creating RPM packages": [[70, "creating-rpm-packages"]], "Cross-compiling on Windows": [[70, "cross-compiling-on-windows"]], "The Postinstallation script": [[70, "the-postinstallation-script"]], "Extending/Embedding FAQ": [[89, "extending-embedding-faq"]], "Can I create my own functions in C?": [[89, "can-i-create-my-own-functions-in-c"]], "Can I create my own functions in C++?": [[89, "id2"]], "Writing C is hard; are there any alternatives?": [[89, "writing-c-is-hard-are-there-any-alternatives"]], "How can I execute arbitrary Python statements from C?": [[89, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[89, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "How do I extract C values from a Python object?": [[89, "how-do-i-extract-c-values-from-a-python-object"]], "How do I use Py_BuildValue() to create a tuple of arbitrary length?": [[89, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "How do I call an object's method from C?": [[89, "how-do-i-call-an-object-s-method-from-c"]], "How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?": [[89, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "How do I access a module written in Python from C?": [[89, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[89, "how-do-i-interface-to-c-objects-from-python"]], "I added a module using the Setup file and the make fails; why?": [[89, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "How do I debug an extension?": [[89, "how-do-i-debug-an-extension"]], "I want to compile a Python module on my Linux system, but some files are missing. Why?": [[89, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "How do I tell \"incomplete input\" from \"invalid input\"?": [[89, "how-do-i-tell-incomplete-input-from-invalid-input"]], "How do I find undefined g++ symbols __builtin_new or __pure_virtual?": [[89, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[89, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[88, "design-and-history-faq"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[88, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[88, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[88, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[88, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[88, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[88, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[88, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[88, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[88, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[88, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[88, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[88, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[88, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[88, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[88, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[88, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[88, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[88, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[88, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[88, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[88, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[88, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[88, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[88, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[88, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[88, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[88, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[88, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "Defining Extension Types: Tutorial": [[86, "defining-extension-types-tutorial"]], "The Basics": [[86, "the-basics"]], "Adding data and methods to the Basic example": [[86, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[86, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[86, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[86, "subclassing-other-types"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[82, "embedding-python-in-another-application"]], "Very High Level Embedding": [[82, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[82, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[82, "pure-embedding"]], "Extending Embedded Python": [[82, "extending-embedded-python"]], "Embedding Python in C++": [[82, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[82, "compiling-and-linking-under-unix-like-systems"]], "\u4e0a\u50b3\u5957\u4ef6\u81f3\u5957\u4ef6\u7d22\u5f15 (Package Index)": [[80, "uploading-packages-to-the-package-index"]], "Python \u5e38\u898b\u554f\u984c": [[92, "python-frequently-asked-questions"]], "Argument Clinic How-To": [[100, "argument-clinic-how-to"]], "The Goals Of Argument Clinic": [[100, "the-goals-of-argument-clinic"]], "Basic Concepts And Usage": [[100, "basic-concepts-and-usage"]], "Converting Your First Function": [[100, "converting-your-first-function"]], "Advanced Topics": [[100, "advanced-topics"]], "Symbolic default values": [[100, "symbolic-default-values"]], "Renaming the C functions and variables generated by Argument Clinic": [[100, "renaming-the-c-functions-and-variables-generated-by-argument-clinic"]], "Converting functions using PyArg_UnpackTuple": [[100, "converting-functions-using-pyarg-unpacktuple"]], "Optional Groups": [[100, "optional-groups"]], "Using real Argument Clinic converters, instead of \"legacy converters\"": [[100, "using-real-argument-clinic-converters-instead-of-legacy-converters"]], "Py_buffer": [[100, "py-buffer"]], "Advanced converters": [[100, "advanced-converters"]], "Parameter default values": [[100, "parameter-default-values"]], "The NULL default value": [[100, "the-null-default-value"]], "Expressions specified as default values": [[100, "expressions-specified-as-default-values"]], "Using a return converter": [[100, "using-a-return-converter"]], "Cloning existing functions": [[100, "cloning-existing-functions"]], "Calling Python code": [[100, "calling-python-code"]], "Using a \"self converter\"": [[100, "using-a-self-converter"]], "Using a \"defining class\" converter": [[100, "using-a-defining-class-converter"]], "Writing a custom converter": [[100, "writing-a-custom-converter"]], "Writing a custom return converter": [[100, "writing-a-custom-return-converter"]], "METH_O and METH_NOARGS": [[100, "meth-o-and-meth-noargs"]], "tp_new and tp_init functions": [[100, "tp-new-and-tp-init-functions"]], "Changing and redirecting Clinic's output": [[100, "changing-and-redirecting-clinic-s-output"]], "The #ifdef trick": [[100, "the-ifdef-trick"]], "Using Argument Clinic in Python files": [[100, "using-argument-clinic-in-python-files"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[101, "porting-extension-modules-to-python-3"]], "Writing the Setup Script": [[78, "writing-the-setup-script"]], "Listing whole packages": [[78, "listing-whole-packages"]], "Listing individual modules": [[78, "listing-individual-modules"]], "Describing extension modules": [[78, "describing-extension-modules"]], "Extension names and packages": [[78, "extension-names-and-packages"]], "Extension source files": [[78, "extension-source-files"]], "Preprocessor options": [[78, "preprocessor-options"]], "Library options": [[78, "library-options"]], "Other options": [[78, "other-options"]], "Relationships between Distributions and Packages": [[78, "relationships-between-distributions-and-packages"]], "Installing Scripts": [[78, "installing-scripts"]], "Installing Package Data": [[78, "installing-package-data"]], "Installing Additional Files": [[78, "installing-additional-files"]], "Additional meta-data": [[78, "additional-meta-data"]], "Debugging the setup script": [[78, "debugging-the-setup-script"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[93, "why-is-python-installed-on-my-computer-faq"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[93, "what-is-python"], [90, "what-is-python"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[93, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[93, "can-i-delete-python"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[94, "library-and-extension-faq"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[94, "general-library-questions"]], "How do I find a module or application to perform task X?": [[94, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u539f\u59cb\u6a94\u6848": [[94, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[94, "how-do-i-make-a-python-script-executable-on-unix"]], "Is there a curses/termcap package for Python?": [[94, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[94, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[94, "why-don-t-my-signal-handlers-work"]], "\u4e00\u822c\u6027\u7684\u5de5\u4f5c": [[94, "common-tasks"]], "\u6211\u5982\u4f55\u6e2c\u8a66Python\u7a0b\u5f0f": [[94, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[94, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[94, "how-do-i-get-a-single-keypress-at-a-time"]], "Threads": [[94, "threads"]], "How do I program using threads?": [[94, "how-do-i-program-using-threads"]], "None of my threads seem to run: why?": [[94, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[94, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[94, "what-kinds-of-global-value-mutation-are-thread-safe"]], "Can't we get rid of the Global Interpreter Lock?": [[94, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "Input and Output": [[94, "input-and-output"]], "How do I delete a file? (And other file questions...)": [[94, "how-do-i-delete-a-file-and-other-file-questions"]], "How do I copy a file?": [[94, "how-do-i-copy-a-file"]], "How do I read (or write) binary data?": [[94, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[94, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "How do I access the serial (RS232) port?": [[94, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[94, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "Network/Internet Programming": [[94, "network-internet-programming"]], "What WWW tools are there for Python?": [[94, "what-www-tools-are-there-for-python"]], "How can I mimic CGI form submission (METHOD=POST)?": [[94, "how-can-i-mimic-cgi-form-submission-method-post"]], "What module should I use to help with generating HTML?": [[94, "what-module-should-i-use-to-help-with-generating-html"]], "How do I send mail from a Python script?": [[94, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[94, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "Databases": [[94, "databases"]], "Are there any interfaces to database packages in Python?": [[94, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[94, "how-do-you-implement-persistent-objects-in-python"]], "Mathematics and Numerics": [[94, "mathematics-and-numerics"]], "How do I generate random numbers in Python?": [[94, "how-do-i-generate-random-numbers-in-python"]], "Defining Extension Types: Assorted Topics": [[85, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[85, "finalization-and-de-allocation"]], "Object Presentation": [[85, "object-presentation"]], "Attribute Management": [[85, "attribute-management"]], "Generic Attribute Management": [[85, "generic-attribute-management"]], "Type-specific Attribute Management": [[85, "type-specific-attribute-management"]], "Object Comparison": [[85, "object-comparison"]], "Abstract Protocol Support": [[85, "abstract-protocol-support"]], "Weak Reference Support": [[85, "weak-reference-support"]], "More Suggestions": [[85, "more-suggestions"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[83, "extending-python-with-c-or-c"]], "Intermezzo: Errors and Exceptions": [[83, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[83, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[83, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[83, "compilation-and-linkage"]], "Calling Python Functions from C": [[83, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[83, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[83, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[83, "building-arbitrary-values"]], "Reference Counting in Python": [[83, "reference-counting-in-python"]], "Ownership Rules": [[83, "ownership-rules"]], "Thin Ice": [[83, "thin-ice"]], "NULL Pointers": [[83, "null-pointers"]], "Writing Extensions in C++": [[83, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[83, "providing-a-c-api-for-an-extension-module"]], "Creating a Source Distribution": [[79, "creating-a-source-distribution"]], "Specifying the files to distribute": [[79, "specifying-the-files-to-distribute"]], "Manifest-related options": [[79, "manifest-related-options"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[90, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[90, "general-information"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[90, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[90, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[90, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[90, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[90, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[90, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[90, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[90, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[90, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[90, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[90, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[90, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[90, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[90, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[90, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[90, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[90, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[90, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[90, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[90, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[90, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[90, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[90, "is-python-a-good-language-for-beginning-programmers"]], "\u8853\u8a9e\u8868": [[97, "glossary"]], "Writing the Setup Configuration File": [[72, "writing-the-setup-configuration-file"]], "Distutils Examples": [[73, "distutils-examples"]], "Pure Python distribution (by module)": [[73, "pure-python-distribution-by-module"]], "Pure Python distribution (by package)": [[73, "pure-python-distribution-by-package"]], "Single extension module": [[73, "single-extension-module"]], "Checking a package": [[73, "checking-a-package"]], "Reading the metadata": [[73, "reading-the-metadata"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[132, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[132, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[132, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[132, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[132, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[132, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[132, "detect-never-retrieved-exceptions"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[127, "module-array"]], "Logging Cookbook": [[109, "logging-cookbook"]], "Using logging in multiple modules": [[109, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[109, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[109, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[109, "logging-to-multiple-destinations"]], "Configuration server example": [[109, "configuration-server-example"]], "Dealing with handlers that block": [[109, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[109, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[109, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[109, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[109, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[109, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[109, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[109, "use-of-contextvars"]], "Imparting contextual information in handlers": [[109, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[109, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[109, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[109, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[109, "using-file-rotation"]], "Use of alternative formatting styles": [[109, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[109, "customizing-logrecord"]], "Subclassing QueueHandler - a ZeroMQ example": [[109, "subclassing-queuehandler-a-zeromq-example"]], "Subclassing QueueListener - a ZeroMQ example": [[109, "subclassing-queuelistener-a-zeromq-example"]], "An example dictionary-based configuration": [[109, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[109, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[109, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[109, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[109, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[109, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[109, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[109, "using-logrecord-factories"]], "Using custom message objects": [[109, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[109, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[109, "customized-exception-formatting"]], "Speaking logging messages": [[109, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[109, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[109, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[109, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[109, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[109, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[109, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[109, "logging-to-syslog-with-rfc5424-support"]], "Patterns to avoid": [[109, "patterns-to-avoid"]], "Opening the same log file multiple times": [[109, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[109, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[109, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[109, "creating-a-lot-of-loggers"]], "Other resources": [[109, "other-resources"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[125, "data-compression-and-archiving"]], "Curses Programming with Python": [[102, "curses-programming-with-python"]], "What is curses?": [[102, "what-is-curses"]], "The Python curses module": [[102, "the-python-curses-module"]], "Starting and ending a curses application": [[102, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[102, "windows-and-pads"]], "Displaying Text": [[102, "displaying-text"]], "Attributes and Color": [[102, "attributes-and-color"]], "User Input": [[102, "user-input"]], "For More Information": [[102, "for-more-information"]], "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09": [[116, "installing-python-modules-legacy-version"]], "Distutils based source distributions": [[116, "distutils-based-source-distributions"]], "Standard Build and Install": [[116, "standard-build-and-install"]], "Platform variations": [[116, "platform-variations"]], "Splitting the job up": [[116, "splitting-the-job-up"]], "How building works": [[116, "how-building-works"]], "How installation works": [[116, "how-installation-works"]], "Alternate Installation": [[116, "alternate-installation"]], "Alternate installation: the user scheme": [[116, "alternate-installation-the-user-scheme"]], "Alternate installation: the home scheme": [[116, "alternate-installation-the-home-scheme"]], "Alternate installation: Unix (the prefix scheme)": [[116, "alternate-installation-unix-the-prefix-scheme"]], "Alternate installation: Windows (the prefix scheme)": [[116, "alternate-installation-windows-the-prefix-scheme"]], "Custom Installation": [[116, "custom-installation"]], "Modifying Python's Search Path": [[116, "modifying-python-s-search-path"]], "Distutils Configuration Files": [[116, "distutils-configuration-files"]], "Location and names of config files": [[116, "location-and-names-of-config-files"]], "Syntax of config files": [[116, "syntax-of-config-files"]], "Building Extensions: Tips and Tricks": [[116, "building-extensions-tips-and-tricks"]], "Tweaking compiler/linker flags": [[116, "tweaking-compiler-linker-flags"]], "Using non-Microsoft compilers on Windows": [[116, "using-non-microsoft-compilers-on-windows"]], "Borland/CodeGear C++": [[116, "borland-codegear-c"]], "GNU C / Cygwin / MinGW": [[116, "gnu-c-cygwin-mingw"]], "Older Versions of Python and MinGW": [[116, "older-versions-of-python-and-mingw"]], "\u5982\u4f55\u6392\u5e8f": [[113, "sorting-how-to"]], "\u57fa\u790e\u6392\u5e8f": [[113, "sorting-basics"]], "Key Functions": [[113, "key-functions"]], "Operator Module Functions": [[113, "operator-module-functions"]], "\u5347\u51aa\u8207\u964d\u51aa": [[113, "ascending-and-descending"]], "Sort Stability and Complex Sorts": [[113, "sort-stability-and-complex-sorts"]], "The Old Way Using Decorate-Sort-Undecorate": [[113, "the-old-way-using-decorate-sort-undecorate"]], "The Old Way Using the cmp Parameter": [[113, "the-old-way-using-the-cmp-parameter"]], "Odd and Ends": [[113, "odd-and-ends"]], "\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[104, "functional-programming-howto"]], "Formal provability": [[104, "formal-provability"]], "Modularity": [[104, "modularity"]], "Ease of debugging and testing": [[104, "ease-of-debugging-and-testing"]], "Composability": [[104, "composability"]], "Iterators": [[104, "iterators"]], "Data Types That Support Iterators": [[104, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[104, "generator-expressions-and-list-comprehensions"]], "Generators": [[104, "generators"]], "Passing values into a generator": [[104, "passing-values-into-a-generator"]], "Built-in functions": [[104, "built-in-functions"]], "The itertools module": [[104, "the-itertools-module"]], "Creating new iterators": [[104, "creating-new-iterators"]], "Calling functions on elements": [[104, "calling-functions-on-elements"]], "Selecting elements": [[104, "selecting-elements"]], "Combinatoric functions": [[104, "combinatoric-functions"]], "Grouping elements": [[104, "grouping-elements"]], "The functools module": [[104, "the-functools-module"]], "The operator module": [[104, "the-operator-module"]], "Small functions and the lambda expression": [[104, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[104, "revision-history-and-acknowledgements"]], "References": [[104, "references"], [114, "references"], [114, "id2"], [114, "id3"], [436, "references"]], "General": [[104, "general"]], "Python-specific": [[104, "python-specific"]], "Python documentation": [[104, "python-documentation"]], "__main__ --- Top-level code environment": [[120, "module-__main__"]], "__name__ == '__main__'": [[120, "name-main"]], "What is the \"top-level code environment\"?": [[120, "what-is-the-top-level-code-environment"]], "Idiomatic Usage": [[120, "idiomatic-usage"], [120, "id1"]], "Packaging Considerations": [[120, "packaging-considerations"]], "__main__.py in Python Packages": [[120, "main-py-in-python-packages"]], "import __main__": [[120, "import-main"]], "asynchat --- \u975e\u540c\u6b65 socket \u6307\u4ee4/\u56de\u61c9\u8655\u7406\u51fd\u5f0f": [[129, "module-asynchat"]], "asynchat Example": [[129, "asynchat-example"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[130, "module-asyncio"]], "Hello World!": [[130, null]], "\u9ad8\u968e API": [[130, null]], "\u4f4e\u968e API": [[130, null]], "\u6307\u5357\u8207\u6559\u5b78": [[130, null]], "\u5b89\u88dd Python \u6a21\u7d44": [[117, "installing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[117, "key-terms"], [67, "key-terms"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[117, "how-do-i"], [67, "how-do-i"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[117, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[117, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[117, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[117, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[117, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[117, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[117, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[117, "installing-binary-extensions"]], "Socket Programming HOWTO": [[112, "socket-programming-howto"]], "Sockets": [[112, "sockets"], [430, "sockets"]], "History": [[112, "history"]], "Creating a Socket": [[112, "creating-a-socket"]], "IPC": [[112, "ipc"]], "Using a Socket": [[112, "using-a-socket"]], "Binary Data": [[112, "binary-data"]], "Disconnecting": [[112, "disconnecting"]], "When Sockets Die": [[112, "when-sockets-die"]], "Non-blocking Sockets": [[112, "non-blocking-sockets"]], "__future__ --- Future statement definitions": [[119, "module-__future__"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[107, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[107, null]], "Creating Address/Network/Interface objects": [[107, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[107, "a-note-on-ip-versions"]], "IP Host Addresses": [[107, "ip-host-addresses"]], "Defining Networks": [[107, "defining-networks"]], "Host Interfaces": [[107, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[107, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[107, "networks-as-lists-of-addresses"]], "Comparisons": [[107, "comparisons"], [434, "comparisons"], [351, "comparisons"], [218, "comparisons"]], "Using IP Addresses with other modules": [[107, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[107, "getting-more-detail-when-instance-creation-fails"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[118, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[118, "using-2to3"]], "Fixers": [[118, "fixers"]], "lib2to3 --- 2to3's library": [[118, "module-lib2to3"]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[123, "module-aifc"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[105, "python-howtos"]], "ast --- Abstract Syntax Trees": [[128, "module-ast"]], "Abstract Grammar": [[128, "abstract-grammar"]], "Node classes": [[128, "node-classes"]], "Literals": [[128, "literals"], [439, "literals"], [434, "literals"]], "Variables": [[128, "variables"]], "Expressions": [[128, "expressions"], [434, "expressions"]], "Subscripting": [[128, "subscripting"]], "Comprehensions": [[128, "comprehensions"]], "Statements": [[128, "statements"]], "Imports": [[128, "imports"]], "Control flow": [[128, "control-flow"]], "Pattern matching": [[128, "pattern-matching"]], "Function and class definitions": [[128, "function-and-class-definitions"]], "Async and await": [[128, "async-and-await"]], "ast Helpers": [[128, "ast-helpers"]], "Compiler Flags": [[128, "compiler-flags"]], "Command-Line Usage": [[128, "command-line-usage"], [384, "command-line-usage"], [383, "command-line-usage"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[126, "module-argparse"]], "\u6559\u5b78": [[126, null]], "Creating a parser": [[126, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[126, "adding-arguments"]], "ArgumentParser \u7269\u4ef6": [[126, "argumentparser-objects"]], "prog": [[126, "prog"]], "usage": [[126, "usage"]], "\u63cf\u8ff0": [[126, "description"]], "epilog": [[126, "epilog"]], "parents": [[126, "parents"]], "formatter_class": [[126, "formatter-class"]], "prefix_chars": [[126, "prefix-chars"]], "fromfile_prefix_chars": [[126, "fromfile-prefix-chars"]], "argument_default": [[126, "argument-default"]], "allow_abbrev": [[126, "allow-abbrev"]], "conflict_handler": [[126, "conflict-handler"]], "add_help": [[126, "add-help"]], "exit_on_error": [[126, "exit-on-error"]], "The add_argument() method": [[126, "the-add-argument-method"]], "name or flags": [[126, "name-or-flags"]], "action": [[126, "action"]], "nargs": [[126, "nargs"]], "const": [[126, "const"]], "default": [[126, "default"]], "type": [[126, "type"]], "choices": [[126, "choices"]], "required": [[126, "required"]], "help": [[126, "help"]], "metavar": [[126, "metavar"]], "dest": [[126, "dest"]], "Action classes": [[126, "action-classes"]], "The parse_args() method": [[126, "the-parse-args-method"]], "Option value syntax": [[126, "option-value-syntax"]], "Invalid arguments": [[126, "invalid-arguments"]], "Arguments containing -": [[126, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[126, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[126, "beyond-sys-argv"]], "The Namespace object": [[126, "the-namespace-object"]], "Other utilities": [[126, "other-utilities"]], "Sub-commands": [[126, "sub-commands"]], "FileType \u7269\u4ef6": [[126, "filetype-objects"]], "Argument groups": [[126, "argument-groups"]], "Mutual exclusion": [[126, "mutual-exclusion"]], "Parser defaults": [[126, "parser-defaults"]], "Printing help": [[126, "printing-help"]], "Partial parsing": [[126, "partial-parsing"]], "Customizing file parsing": [[126, "customizing-file-parsing"]], "Exiting methods": [[126, "exiting-methods"]], "Intermixed parsing": [[126, "intermixed-parsing"]], "Upgrading optparse code": [[126, "upgrading-optparse-code"]], "Event Loop": [[133, "event-loop"]], "Event Loop Methods": [[133, "event-loop-methods"]], "Running and stopping the loop": [[133, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[133, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[133, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[133, "creating-futures-and-tasks"]], "Opening network connections": [[133, "opening-network-connections"]], "Creating network servers": [[133, "creating-network-servers"]], "Transferring files": [[133, "transferring-files"]], "TLS Upgrade": [[133, "tls-upgrade"]], "Watching file descriptors": [[133, "watching-file-descriptors"]], "Working with socket objects directly": [[133, "working-with-socket-objects-directly"]], "DNS": [[133, "dns"]], "Working with pipes": [[133, "working-with-pipes"]], "Unix signals": [[133, "unix-signals"]], "Executing code in thread or process pools": [[133, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[133, "error-handling-api"]], "Enabling debug mode": [[133, "enabling-debug-mode"]], "Running Subprocesses": [[133, "running-subprocesses"]], "Callback Handles": [[133, "callback-handles"]], "Server Objects": [[133, "server-objects"], [345, "server-objects"]], "Event Loop Implementations": [[133, "event-loop-implementations"]], "Hello World with call_soon()": [[133, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[133, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[133, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[133, "set-signal-handlers-for-sigint-and-sigterm"]], "_thread --- Low-level threading API": [[121, "module-_thread"]], "\u4fee\u98fe\u5668 HowTo \u6307\u5357": [[103, "descriptor-howto-guide"]], "Primer": [[103, "primer"]], "Simple example: A descriptor that returns a constant": [[103, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[103, "dynamic-lookups"]], "Managed attributes": [[103, "managed-attributes"]], "Customized names": [[103, "customized-names"]], "Closing thoughts": [[103, "closing-thoughts"]], "Complete Practical Example": [[103, "complete-practical-example"]], "Validator class": [[103, "validator-class"]], "Custom validators": [[103, "custom-validators"]], "Practical application": [[103, "practical-application"]], "Technical Tutorial": [[103, "technical-tutorial"]], "Definition and introduction": [[103, "definition-and-introduction"]], "Descriptor protocol": [[103, "descriptor-protocol"]], "Overview of descriptor invocation": [[103, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[103, "invocation-from-an-instance"]], "Invocation from a class": [[103, "invocation-from-a-class"]], "Invocation from super": [[103, "invocation-from-super"]], "Summary of invocation logic": [[103, "summary-of-invocation-logic"]], "Automatic name notification": [[103, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[103, "orm-example"]], "Pure Python Equivalents": [[103, "pure-python-equivalents"]], "Properties": [[103, "properties"]], "Functions and methods": [[103, "functions-and-methods"]], "Kinds of methods": [[103, "kinds-of-methods"]], "Static methods": [[103, "static-methods"]], "Class methods": [[103, "class-methods"]], "Member objects and __slots__": [[103, "member-objects-and-slots"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[111, "regular-expression-howto"]], "Simple Patterns": [[111, "simple-patterns"]], "Matching Characters": [[111, "matching-characters"]], "Repeating Things": [[111, "repeating-things"]], "Using Regular Expressions": [[111, "using-regular-expressions"]], "Compiling Regular Expressions": [[111, "compiling-regular-expressions"]], "The Backslash Plague": [[111, "the-backslash-plague"]], "Performing Matches": [[111, "performing-matches"]], "Module-Level Functions": [[111, "module-level-functions"], [273, "module-level-functions"]], "Compilation Flags": [[111, "compilation-flags"]], "More Pattern Power": [[111, "more-pattern-power"]], "More Metacharacters": [[111, "more-metacharacters"]], "Grouping": [[111, "grouping"]], "Non-capturing and Named Groups": [[111, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[111, "lookahead-assertions"]], "Modifying Strings": [[111, "modifying-strings"]], "Splitting Strings": [[111, "splitting-strings"]], "Search and Replace": [[111, "search-and-replace"], [254, "search-and-replace"]], "Common Problems": [[111, "common-problems"]], "Use String Methods": [[111, "use-string-methods"]], "match() versus search()": [[111, "match-versus-search"]], "Greedy versus Non-Greedy": [[111, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[111, "using-re-verbose"]], "Feedback": [[111, "feedback"]], "Instrumenting CPython with DTrace and SystemTap": [[106, "instrumenting-cpython-with-dtrace-and-systemtap"]], "Enabling the static markers": [[106, "enabling-the-static-markers"]], "Static DTrace probes": [[106, "static-dtrace-probes"]], "Static SystemTap markers": [[106, "static-systemtap-markers"]], "Available static markers": [[106, "available-static-markers"]], "SystemTap Tapsets": [[106, "systemtap-tapsets"]], "Unicode HOWTO": [[114, "unicode-howto"]], "Introduction to Unicode": [[114, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[114, "definitions"]], "Encodings": [[114, "encodings"]], "Python's Unicode Support": [[114, "python-s-unicode-support"]], "The String Type": [[114, "the-string-type"]], "Converting to Bytes": [[114, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[114, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[114, "unicode-properties"]], "Comparing Strings": [[114, "comparing-strings"]], "Unicode Regular Expressions": [[114, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[114, "reading-and-writing-unicode-data"]], "Unicode filenames": [[114, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[114, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[114, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[114, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[114, "acknowledgements"], [466, "acknowledgements"], [467, "acknowledgements"], [470, "acknowledgements"], [471, "acknowledgements"], [468, "acknowledgements"], [469, "acknowledgements"], [472, "acknowledgements"], [473, "acknowledgements"], [237, "acknowledgements"]], "\u9ad8\u968e API \u7d22\u5f15": [[131, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[131, "tasks"]], "\u4f47\u5217 (Queues)": [[131, "queues"], [140, "queues"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[131, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[131, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[131, "synchronization"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[124, "generic-operating-system-services"]], "Futures": [[135, "futures"]], "Future \u51fd\u6578": [[135, "future-functions"]], "Future \u7269\u4ef6": [[135, "future-object"]], "abc --- Abstract Base Classes": [[122, "module-abc"]], "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3": [[110, "porting-python-2-code-to-python-3"]], "\u7c21\u77ed\u7684\u8aaa\u660e": [[110, "the-short-explanation"]], "\u8a73\u7d30\u7684": [[110, "details"]], "\u5411\u4e0b\u652f\u63f4Python 2.6\u548c\u66f4\u820a\u7684\u7248\u672c": [[110, "drop-support-for-python-2-6-and-older"]], "Make sure you specify the proper version support in your setup.py file": [[110, "make-sure-you-specify-the-proper-version-support-in-your-setup-py-file"]], "\u6709\u597d\u7684\u6e2c\u8a66\u8986\u84cb\u7387": [[110, "have-good-test-coverage"]], "\u77ad\u89e3Python 2 & 3\u7684\u5dee\u7570": [[110, "learn-the-differences-between-python-2-3"]], "\u66f4\u65b0\u4f60\u7684\u7a0b\u5f0f\u78bc": [[110, "update-your-code"]], "Division": [[110, "division"]], "Text versus binary data": [[110, "text-versus-binary-data"]], "Use feature detection instead of version detection": [[110, "use-feature-detection-instead-of-version-detection"]], "Prevent compatibility regressions": [[110, "prevent-compatibility-regressions"]], "Check which dependencies block your transition": [[110, "check-which-dependencies-block-your-transition"]], "Update your setup.py file to denote Python 3 compatibility": [[110, "update-your-setup-py-file-to-denote-python-3-compatibility"]], "Use continuous integration to stay compatible": [[110, "use-continuous-integration-to-stay-compatible"]], "Consider using optional static type checking": [[110, "consider-using-optional-static-type-checking"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[108, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[108, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[108, "when-to-use-logging"]], "Logging to a file": [[108, "logging-to-a-file"]], "Logging from multiple modules": [[108, "logging-from-multiple-modules"]], "Logging variable data": [[108, "logging-variable-data"]], "Changing the format of displayed messages": [[108, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[108, "displaying-the-date-time-in-messages"]], "Next Steps": [[108, "next-steps"]], "Advanced Logging Tutorial": [[108, "advanced-logging-tutorial"]], "Logging Flow": [[108, "logging-flow"]], "Loggers": [[108, "loggers"]], "Handlers": [[108, "handlers"]], "Formatters": [[108, "formatters"]], "Configuring Logging": [[108, "configuring-logging"]], "What happens if no configuration is provided": [[108, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[108, "configuring-logging-for-a-library"]], "Logging Levels": [[108, "logging-levels"], [273, "logging-levels"]], "Custom Levels": [[108, "custom-levels"]], "Useful Handlers": [[108, "useful-handlers"]], "Exceptions raised during logging": [[108, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[108, "using-arbitrary-objects-as-messages"]], "Optimization": [[108, "optimization"]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[115, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[115, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[115, "fetching-urls"]], "Data": [[115, "data"]], "Headers": [[115, "headers"]], "Handling Exceptions": [[115, "handling-exceptions"]], "URLError": [[115, "urlerror"]], "HTTPError": [[115, "httperror"]], "Error Codes": [[115, "error-codes"]], "Wrapping it Up": [[115, "wrapping-it-up"]], "Number 1": [[115, "number-1"]], "Number 2": [[115, "number-2"]], "info and geturl": [[115, "info-and-geturl"]], "Openers and Handlers": [[115, "openers-and-handlers"]], "Basic Authentication": [[115, "id5"]], "Proxies": [[115, "proxies"]], "Sockets and Layers": [[115, "sockets-and-layers"]], "\u8a3b\u89e3": [[115, "footnotes"], [355, "notes"], [153, "notes"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[42, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[42, "method-objects"]], "Data marshalling support": [[39, "data-marshalling-support"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[35, "iterator-objects"]], "C API Stability": [[54, "c-api-stability"]], "Stable Application Binary Interface": [[54, "stable-application-binary-interface"]], "Limited API Scope and Performance": [[54, "limited-api-scope-and-performance"]], "Limited API Caveats": [[54, "limited-api-caveats"]], "Platform Considerations": [[54, "platform-considerations"]], "Contents of Limited API": [[54, "contents-of-limited-api"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[40, "memory-management"]], "\u7e3d\u89bd": [[40, "overview"], [264, "overview"]], "Allocator Domains": [[40, "allocator-domains"]], "Raw Memory Interface": [[40, "raw-memory-interface"]], "Memory Interface": [[40, "memory-interface"]], "Object allocators": [[40, "object-allocators"]], "Default Memory Allocators": [[40, "default-memory-allocators"]], "Customize Memory Allocators": [[40, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[40, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[40, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[40, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[40, "tracemalloc-c-api"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[46, "old-buffer-protocol"]], "Number Protocol": [[45, "number-protocol"]], "Sequence Protocol": [[51, "sequence-protocol"]], "\u5143\u7d44\uff08Tuple\uff09\u7269\u4ef6": [[57, "tuple-objects"]], "Struct Sequence Objects": [[57, "struct-sequence-objects"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[65, "python-documentation-contents"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[55, "common-object-structures"]], "Base object types and macros": [[55, "base-object-types-and-macros"]], "Implementing functions and methods": [[55, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[55, "accessing-attributes-of-extension-types"]], "Reflection": [[50, "reflection"]], "Unicode\u7269\u4ef6\u8207\u7de8\u78bc": [[61, "unicode-objects-and-codecs"]], "Unicode Objects": [[61, "unicode-objects"]], "Unicode Type": [[61, "unicode-type"]], "Unicode Character Properties": [[61, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[61, "creating-and-accessing-unicode-strings"]], "Deprecated Py_UNICODE APIs": [[61, "deprecated-py-unicode-apis"]], "Locale Encoding": [[61, "locale-encoding"]], "File System Encoding": [[61, "file-system-encoding"]], "wchar_t Support": [[61, "wchar-t-support"]], "Built-in Codecs": [[61, "built-in-codecs"]], "Generic Codecs": [[61, "generic-codecs"]], "UTF-8 Codecs": [[61, "utf-8-codecs"]], "UTF-32 Codecs": [[61, "utf-32-codecs"]], "UTF-16 Codecs": [[61, "utf-16-codecs"]], "UTF-7 Codecs": [[61, "utf-7-codecs"]], "Unicode-Escape Codecs": [[61, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[61, "raw-unicode-escape-codecs"]], "Latin-1 Codecs": [[61, "latin-1-codecs"]], "ASCII Codecs": [[61, "ascii-codecs"]], "Character Map Codecs": [[61, "character-map-codecs"]], "MBCS codecs for Windows": [[61, "mbcs-codecs-for-windows"]], "Methods & Slots": [[61, "methods-slots"]], "Methods and Slot Functions": [[61, "methods-and-slot-functions"]], "Object Implementation Support": [[48, "object-implementation-support"]], "None \u7269\u4ef6": [[44, "the-none-object"]], "\u5207\u7247\u7269\u4ef6": [[53, "slice-objects"]], "Ellipsis Object": [[53, "ellipsis-object"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[64, "weak-reference-objects"]], "Set Objects": [[52, "set-objects"]], "The Very High Level Layer": [[63, "the-very-high-level-layer"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[43, "module-objects"]], "Initializing C modules": [[43, "initializing-c-modules"]], "Single-phase initialization": [[43, "single-phase-initialization"]], "Multi-phase initialization": [[43, "multi-phase-initialization"]], "Low-level module creation functions": [[43, "low-level-module-creation-functions"]], "Support functions": [[43, "support-functions"]], "Module lookup": [[43, "module-lookup"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[36, "list-objects"]], "Mapping Protocol": [[38, "mapping-protocol"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[56, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[56, "system-functions"]], "\u884c\u7a0b\uff08Process\uff09\u63a7\u5236": [[56, "process-control"]], "\u5de5\u5177": [[62, "utilities"]], "\u7248\u6b0a\u5ba3\u544a": [[66, "copyright"]], "Type Objects": [[58, "type-objects"], [60, "type-objects"], [351, "type-objects"]], "Creating Heap-Allocated Types": [[58, "creating-heap-allocated-types"]], "Iterator Protocol": [[34, "iterator-protocol"]], "Objects for Type Hinting": [[59, "objects-for-type-hinting"]], "\u53c3\u7167\u8a08\u6578": [[49, "reference-counting"]], "\u6574\u6578\u7269\u4ef6": [[37, "integer-objects"]], "Quick Reference": [[60, "quick-reference"]], "\"tp slots\"": [[60, "tp-slots"]], "sub-slots": [[60, "sub-slots"]], "slot typedefs": [[60, "slot-typedefs"]], "PyTypeObject Definition": [[60, "pytypeobject-definition"]], "PyObject Slots": [[60, "pyobject-slots"]], "PyVarObject Slots": [[60, "pyvarobject-slots"]], "PyTypeObject Slots": [[60, "pytypeobject-slots"]], "Static Types": [[60, "static-types"]], "Heap Types": [[60, "heap-types"]], "Number Object Structures": [[60, "number-object-structures"]], "Mapping Object Structures": [[60, "mapping-object-structures"]], "Sequence Object Structures": [[60, "sequence-object-structures"]], "Buffer Object Structures": [[60, "buffer-object-structures"]], "Async Object Structures": [[60, "async-object-structures"]], "Slot Type typedefs": [[60, "slot-type-typedefs"]], "Object Protocol": [[47, "object-protocol"]], "MemoryView \u7269\u4ef6": [[41, "index-0"]], "\u767c\u5e03 Python \u6a21\u7d44": [[67, "distributing-python-modules"]], "\u958b\u6e90\u6388\u6b0a\u8207\u5354\u540c\u5408\u4f5c": [[67, "open-source-licensing-and-collaboration"]], "\u5b89\u88dd\u5de5\u5177": [[67, "installing-the-tools"]], "\u95b1\u8b80 Python \u5c01\u88dd\u4f7f\u7528\u8005\u6307\u5357": [[67, "reading-the-python-packaging-user-guide"]], "...\u70ba\u6211\u7684\u5c08\u6848\u9078\u64c7\u4e00\u500b\u540d\u7a31\uff1f": [[67, "choose-a-name-for-my-project"]], "...\u5efa\u7acb\u548c\u767c\u5e03\u4e8c\u9032\u5236\u64f4\u5145\uff1f": [[67, "create-and-distribute-binary-extensions"]], "zoneinfo --- IANA time zone support": [[429, "module-zoneinfo"]], "Using ZoneInfo": [[429, "using-zoneinfo"]], "Data sources": [[429, "data-sources"]], "Configuring the data sources": [[429, "configuring-the-data-sources"]], "Compile-time configuration": [[429, "compile-time-configuration"]], "Environment configuration": [[429, "environment-configuration"]], "Runtime configuration": [[429, "runtime-configuration"]], "The ZoneInfo class": [[429, "the-zoneinfo-class"]], "String representations": [[429, "string-representations"]], "Pickle serialization": [[429, "pickle-serialization"]], "\u51fd\u5f0f": [[429, "functions"], [417, "functions"], [417, "elementinclude-functions"], [409, "functions"], [386, "functions"], [371, "functions"], [344, "functions"], [351, "functions"], [258, "functions"], [185, "functions"], [183, "functions"], [158, "functions"]], "Globals": [[429, "globals"]], "Exceptions and warnings": [[429, "exceptions-and-warnings"]], "zipfile --- Work with ZIP archives": [[426, "module-zipfile"]], "ZipFile \u7269\u4ef6": [[426, "zipfile-objects"]], "Path Objects": [[426, "path-objects"]], "PyZipFile \u7269\u4ef6": [[426, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[426, "zipinfo-objects"]], "Command-Line Interface": [[426, "command-line-interface"], [317, "command-line-interface"], [363, "command-line-interface"]], "Command-line options": [[426, "command-line-options"], [363, "command-line-options"]], "Decompression pitfalls": [[426, "decompression-pitfalls"]], "From file itself": [[426, "from-file-itself"]], "File System limitations": [[426, "file-system-limitations"]], "Resources limitations": [[426, "resources-limitations"]], "Interruption": [[426, "interruption"]], "Default behaviors of extraction": [[426, "default-behaviors-of-extraction"]], "zipapp --- Manage executable Python zip archives": [[425, "module-zipapp"]], "\u57fa\u672c\u7bc4\u4f8b": [[425, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[425, "command-line-interface"], [372, "command-line-interface"]], "Python API": [[425, "python-api"]], "Specifying the Interpreter": [[425, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[425, "creating-standalone-applications-with-zipapp"]], "Making a Windows executable": [[425, "making-a-windows-executable"]], "Caveats": [[425, "caveats"]], "The Python Zip Application Archive Format": [[425, "the-python-zip-application-archive-format"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[430, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[430, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[430, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.10.8 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[430, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[430, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[430, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[430, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.10.8 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[430, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[430, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[430, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[430, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[430, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[430, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[430, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[430, "xml-remote-procedure-calls"]], "test_epoll": [[430, "test-epoll"]], "Select kqueue": [[430, "select-kqueue"]], "SipHash24": [[430, "siphash24"]], "strtod \u8207 dtoa": [[430, "strtod-and-dtoa"]], "OpenSSL": [[430, "openssl"]], "expat": [[430, "expat"]], "libffi": [[430, "libffi"]], "zlib": [[430, "zlib"], [481, "zlib"], [478, "zlib"]], "cfuhash": [[430, "cfuhash"]], "libmpdec": [[430, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[430, "w3c-c14n-test-suite"]], "Lexical analysis": [[439, "lexical-analysis"]], "Line structure": [[439, "line-structure"]], "Logical lines": [[439, "logical-lines"]], "Physical lines": [[439, "physical-lines"]], "Comments": [[439, "comments"]], "Encoding declarations": [[439, "encoding-declarations"]], "Explicit line joining": [[439, "explicit-line-joining"]], "Implicit line joining": [[439, "implicit-line-joining"]], "Blank lines": [[439, "blank-lines"]], "Indentation": [[439, "indentation"]], "Whitespace between tokens": [[439, "whitespace-between-tokens"]], "Other tokens": [[439, "other-tokens"]], "Identifiers and keywords": [[439, "identifiers"]], "Keywords": [[439, "keywords"]], "Soft Keywords": [[439, "soft-keywords"]], "Reserved classes of identifiers": [[439, "reserved-classes-of-identifiers"]], "String and Bytes literals": [[439, "string-and-bytes-literals"]], "String literal concatenation": [[439, "string-literal-concatenation"]], "Formatted string literals": [[439, "formatted-string-literals"]], "Numeric literals": [[439, "numeric-literals"]], "Integer literals": [[439, "integer-literals"]], "Floating point literals": [[439, "floating-point-literals"]], "Imaginary literals": [[439, "imaginary-literals"]], "Operators": [[439, "operators"], [302, "operators"], [265, "operators"], [265, "id1"], [265, "id2"]], "Delimiters": [[439, "delimiters"]], "xml.sax --- Support for SAX2 parsers": [[418, "module-xml.sax"]], "SAXException \u7269\u4ef6": [[418, "saxexception-objects"]], "Top-level components": [[441, "top-level-components"]], "Complete Python programs": [[441, "complete-python-programs"]], "File input": [[441, "file-input"]], "Interactive input": [[441, "interactive-input"]], "Expression input": [[441, "expression-input"]], "Execution model": [[433, "execution-model"]], "Structure of a program": [[433, "structure-of-a-program"]], "Naming and binding": [[433, "naming-and-binding"]], "Binding of names": [[433, "binding-of-names"]], "Resolution of names": [[433, "resolution-of-names"]], "Builtins and restricted execution": [[433, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[433, "interaction-with-dynamic-features"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[412, "module-xdrlib"]], "Packer Objects": [[412, "packer-objects"]], "Unpacker Objects": [[412, "unpacker-objects"]], "wsgiref --- WSGI Utilities and Reference Implementation": [[411, "module-wsgiref"]], "wsgiref.util -- WSGI environment utilities": [[411, "module-wsgiref.util"]], "wsgiref.headers -- WSGI response header tools": [[411, "module-wsgiref.headers"]], "wsgiref.simple_server -- a simple WSGI HTTP server": [[411, "module-wsgiref.simple_server"]], "wsgiref.validate --- WSGI conformance checker": [[411, "module-wsgiref.validate"]], "wsgiref.handlers -- server/gateway base classes": [[411, "module-wsgiref.handlers"]], "zipimport --- Import modules from Zip archives": [[427, "module-zipimport"]], "zipimporter \u7269\u4ef6": [[427, "zipimporter-objects"]], "MS Windows \u7279\u6709\u670d\u52d9": [[408, "ms-windows-specific-services"]], "xmlrpc --- XMLRPC \u670d\u52d9\u7aef\u8207\u5ba2\u6236\u7aef\u6a21\u7d44": [[422, "xmlrpc-xmlrpc-server-and-client-modules"]], "Arithmetic conversions": [[434, "arithmetic-conversions"]], "Atoms": [[434, "atoms"]], "Identifiers (Names)": [[434, "atom-identifiers"]], "Parenthesized forms": [[434, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[434, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[434, "list-displays"]], "Set displays": [[434, "set-displays"]], "Dictionary displays": [[434, "dictionary-displays"]], "Generator expressions": [[434, "generator-expressions"]], "Yield expressions": [[434, "yield-expressions"]], "Generator-iterator methods": [[434, "generator-iterator-methods"]], "Asynchronous generator functions": [[434, "asynchronous-generator-functions"]], "Asynchronous generator-iterator methods": [[434, "asynchronous-generator-iterator-methods"]], "Primaries": [[434, "primaries"]], "Attribute references": [[434, "attribute-references"]], "Subscriptions": [[434, "subscriptions"]], "Slicings": [[434, "slicings"]], "Calls": [[434, "calls"]], "Await expression": [[434, "await-expression"]], "The power operator": [[434, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[434, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[434, "binary-arithmetic-operations"]], "Shifting operations": [[434, "shifting-operations"]], "Binary bitwise operations": [[434, "binary-bitwise-operations"]], "Value comparisons": [[434, "value-comparisons"]], "Membership test operations": [[434, "membership-test-operations"]], "Identity comparisons": [[434, "is-not"]], "Boolean operations": [[434, "boolean-operations"]], "Assignment expressions": [[434, "assignment-expressions"], [483, "assignment-expressions"]], "Conditional expressions": [[434, "conditional-expressions"]], "Lambdas": [[434, "lambda"]], "Expression lists": [[434, "expression-lists"]], "Evaluation order": [[434, "evaluation-order"]], "Operator precedence": [[434, "operator-precedence"]], "xmlrpc.server --- Basic XML-RPC servers": [[424, "module-xmlrpc.server"]], "SimpleXMLRPCServer \u7269\u4ef6": [[424, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[424, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[424, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[424, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[424, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[424, "doccgixmlrpcrequesthandler"]], "xml.dom --- The Document Object Model API": [[414, "module-xml.dom"]], "\u6a21\u7d44\u5167\u5bb9": [[414, "module-contents"], [390, "module-contents"], [325, "module-contents"], [339, "module-contents"], [344, "module-contents"], [340, "module-contents"], [218, "module-contents"], [181, "module-contents"]], "Objects in the DOM": [[414, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[414, "domimplementation-objects"]], "Node Objects": [[414, "node-objects"]], "NodeList \u7269\u4ef6": [[414, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[414, "documenttype-objects"]], "Document Objects": [[414, "document-objects"]], "Element Objects": [[414, "element-objects"], [417, "element-objects"]], "Attr Objects": [[414, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[414, "namednodemap-objects"]], "Comment Objects": [[414, "comment-objects"]], "Text and CDATASection Objects": [[414, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[414, "processinginstruction-objects"]], "Conformance": [[414, "conformance"]], "Type Mapping": [[414, "type-mapping"]], "Accessor Methods": [[414, "accessor-methods"]], "xml.sax.xmlreader --- Interface for XML parsers": [[420, "module-xml.sax.xmlreader"]], "XMLReader \u7269\u4ef6": [[420, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[420, "incrementalparser-objects"]], "Locator Objects": [[420, "locator-objects"]], "InputSource \u7269\u4ef6": [[420, "inputsource-objects"]], "The Attributes Interface": [[420, "the-attributes-interface"]], "The AttributesNS Interface": [[420, "the-attributesns-interface"]], "Simple statements": [[440, "simple-statements"]], "Expression statements": [[440, "expression-statements"]], "Assignment statements": [[440, "assignment-statements"]], "Augmented assignment statements": [[440, "augmented-assignment-statements"]], "Annotated assignment statements": [[440, "annotated-assignment-statements"]], "The assert statement": [[440, "the-assert-statement"]], "The pass statement": [[440, "the-pass-statement"]], "The del statement": [[440, "the-del-statement"]], "The return statement": [[440, "the-return-statement"]], "The yield statement": [[440, "the-yield-statement"]], "The raise statement": [[440, "the-raise-statement"]], "The break statement": [[440, "the-break-statement"]], "The continue statement": [[440, "the-continue-statement"]], "The import statement": [[440, "the-import-statement"]], "Future statements": [[440, "future-statements"]], "The global statement": [[440, "the-global-statement"]], "The nonlocal statement": [[440, "the-nonlocal-statement"]], "xml.etree.ElementTree --- The ElementTree XML API": [[417, "module-xml.etree.ElementTree"]], "Tutorial": [[417, "tutorial"], [347, "tutorial"], [298, "tutorial"]], "XML tree and elements": [[417, "xml-tree-and-elements"]], "Parsing XML": [[417, "parsing-xml"]], "Pull API for non-blocking parsing": [[417, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[417, "finding-interesting-elements"]], "Modifying an XML File": [[417, "modifying-an-xml-file"]], "Building XML documents": [[417, "building-xml-documents"]], "Parsing XML with Namespaces": [[417, "parsing-xml-with-namespaces"]], "XPath support": [[417, "xpath-support"]], "Supported XPath syntax": [[417, "supported-xpath-syntax"]], "Reference": [[417, "reference"], [417, "id4"], [347, "reference"], [289, "reference"]], "XInclude support": [[417, "xinclude-support"]], "ElementTree \u7269\u4ef6": [[417, "elementtree-objects"]], "QName \u7269\u4ef6": [[417, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[417, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[417, "xmlparser-objects"], [320, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[417, "xmlpullparser-objects"]], "winsound --- Sound-playing interface for Windows": [[410, "module-winsound"]], "Data model": [[432, "data-model"]], "Objects, values and types": [[432, "objects-values-and-types"]], "The standard type hierarchy": [[432, "the-standard-type-hierarchy"]], "Special method names": [[432, "special-method-names"]], "Basic customization": [[432, "basic-customization"]], "Customizing attribute access": [[432, "customizing-attribute-access"]], "Customizing module attribute access": [[432, "customizing-module-attribute-access"]], "Implementing Descriptors": [[432, "implementing-descriptors"]], "Invoking Descriptors": [[432, "invoking-descriptors"]], "__slots__": [[432, "slots"], [476, "slots"]], "Notes on using __slots__": [[432, "notes-on-using-slots"]], "Customizing class creation": [[432, "customizing-class-creation"]], "Metaclasses": [[432, "metaclasses"]], "Resolving MRO entries": [[432, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[432, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[432, "preparing-the-class-namespace"]], "Executing the class body": [[432, "executing-the-class-body"]], "Creating the class object": [[432, "creating-the-class-object"]], "Uses for metaclasses": [[432, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[432, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[432, "emulating-generic-types"]], "The purpose of __class_getitem__": [[432, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[432, "class-getitem-versus-getitem"]], "Emulating callable objects": [[432, "emulating-callable-objects"]], "Emulating container types": [[432, "emulating-container-types"]], "Emulating numeric types": [[432, "emulating-numeric-types"]], "With Statement Context Managers": [[432, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[432, "customizing-positional-arguments-in-class-pattern-matching"]], "Special method lookup": [[432, "special-method-lookup"]], "\u5354\u7a0b": [[432, "coroutines"], [431, "coroutines"], [144, "coroutines"]], "Awaitable Objects": [[432, "awaitable-objects"]], "Coroutine Objects": [[432, "coroutine-objects"]], "Asynchronous Iterators": [[432, "asynchronous-iterators"]], "Asynchronous Context Managers": [[432, "asynchronous-context-managers"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[437, "the-python-language-reference"]], "XML \u8655\u7406\u6a21\u7d44": [[413, "module-xml"]], "XML vulnerabilities": [[413, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[413, "the-defusedxml-package"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[435, "full-grammar-specification"]], "xml.dom.minidom --- Minimal DOM implementation": [[415, "module-xml.dom.minidom"]], "DOM \u7269\u4ef6": [[415, "dom-objects"]], "DOM \u7bc4\u4f8b": [[415, "dom-example"]], "minidom and the DOM standard": [[415, "minidom-and-the-dom-standard"]], "Alternate Implementations": [[438, "alternate-implementations"]], "Notation": [[438, "notation"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[416, "module-xml.dom.pulldom"]], "DOMEventStream \u7269\u4ef6": [[416, "domeventstream-objects"]], "Compound statements": [[431, "compound-statements"]], "The if statement": [[431, "the-if-statement"]], "The while statement": [[431, "the-while-statement"]], "The for statement": [[431, "the-for-statement"]], "The try statement": [[431, "the-try-statement"]], "The with statement": [[431, "the-with-statement"]], "The match statement": [[431, "the-match-statement"]], "Overview": [[431, "overview"], [259, "overview"]], "Guards": [[431, "guards"]], "Irrefutable Case Blocks": [[431, "irrefutable-case-blocks"]], "Patterns": [[431, "patterns"]], "OR Patterns": [[431, "or-patterns"]], "AS Patterns": [[431, "as-patterns"]], "Literal Patterns": [[431, "literal-patterns"]], "Capture Patterns": [[431, "capture-patterns"]], "Wildcard Patterns": [[431, "wildcard-patterns"]], "Value Patterns": [[431, "value-patterns"]], "Group Patterns": [[431, "group-patterns"]], "Sequence Patterns": [[431, "sequence-patterns"]], "Mapping Patterns": [[431, "mapping-patterns"]], "Class Patterns": [[431, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[431, "function-definitions"]], "Class definitions": [[431, "class-definitions"]], "Coroutine function definition": [[431, "coroutine-function-definition"]], "The async for statement": [[431, "the-async-for-statement"]], "The async with statement": [[431, "the-async-with-statement"]], "xml.sax.saxutils --- SAX Utilities": [[421, "module-xml.sax.saxutils"]], "xml.sax.handler --- Base classes for SAX handlers": [[419, "module-xml.sax.handler"]], "ContentHandler \u7269\u4ef6": [[419, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[419, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[419, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[419, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[419, "lexicalhandler-objects"]], "xmlrpc.client --- XML-RPC client access": [[423, "module-xmlrpc.client"]], "ServerProxy \u7269\u4ef6": [[423, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[423, "datetime-objects"]], "Binary Objects": [[423, "binary-objects"]], "Fault Objects": [[423, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[423, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[423, "multicall-objects"]], "Convenience Functions": [[423, "convenience-functions"]], "Example of Client Usage": [[423, "example-of-client-usage"]], "Example of Client and Server Usage": [[423, "example-of-client-and-server-usage"]], "winreg --- Windows registry access": [[409, "module-winreg"]], "\u5e38\u6578": [[409, "constants"], [390, "constant"], [344, "constants"], [348, "constants"], [281, "constants"], [242, "constants"], [192, "constants"], [189, "constants"], [142, "constants"], [161, "constants"]], "HKEY_* Constants": [[409, "hkey-constants"]], "Access Rights": [[409, "access-rights"]], "64-bit Specific": [[409, "bit-specific"]], "Value Types": [[409, "value-types"]], "Registry Handle Objects": [[409, "registry-handle-objects"]], "zlib --- Compression compatible with gzip": [[428, "module-zlib"]], "The import system": [[436, "the-import-system"]], "importlib": [[436, "importlib"], [482, "importlib"], [482, "id6"], [481, "importlib"], [481, "id3"], [480, "importlib"], [484, "importlib"], [479, "importlib"]], "Packages": [[436, "packages"]], "Regular packages": [[436, "regular-packages"]], "Namespace packages": [[436, "namespace-packages"]], "Searching": [[436, "searching"]], "The module cache": [[436, "the-module-cache"]], "Finders and loaders": [[436, "finders-and-loaders"]], "Import hooks": [[436, "import-hooks"]], "The meta path": [[436, "the-meta-path"]], "Loading": [[436, "loading"]], "Loaders": [[436, "loaders"]], "Submodules": [[436, "submodules"]], "Module spec": [[436, "module-spec"]], "Import-related module attributes": [[436, "import-related-module-attributes"]], "module.__path__": [[436, "module-path"]], "Module reprs": [[436, "module-reprs"]], "Cached bytecode invalidation": [[436, "cached-bytecode-invalidation"]], "The Path Based Finder": [[436, "the-path-based-finder"]], "Path entry finders": [[436, "path-entry-finders"]], "Path entry finder protocol": [[436, "path-entry-finder-protocol"]], "Replacing the standard import system": [[436, "replacing-the-standard-import-system"]], "Package Relative Imports": [[436, "package-relative-imports"]], "Special considerations for __main__": [[436, "special-considerations-for-main"]], "__main__.__spec__": [[436, "main-spec"]], "\u6dfa\u5617\u6ecb\u5473": [[443, "whetting-your-appetite"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[462, "python-setup-and-usage"]], "\u6a21\u7d44 (Module)": [[454, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[454, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[454, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[454, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[454, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[454, "standard-modules"]], "dir() \u51fd\u5f0f": [[454, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[454, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[454, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[454, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[454, "packages-in-multiple-directories"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[456, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[456, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[456, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[456, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[456, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[456, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[456, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[456, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[456, "decimal-floating-point-arithmetic"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[465, "using-python-on-windows"]], "The full installer": [[465, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[465, "installation-steps"]], "Removing the MAX_PATH Limitation": [[465, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[465, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[465, "installing-without-downloading"]], "Modifying an install": [[465, "modifying-an-install"]], "The Microsoft Store package": [[465, "the-microsoft-store-package"]], "Known issues": [[465, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[465, "redirection-of-local-data-registry-and-temporary-paths"]], "The nuget.org packages": [[465, "the-nuget-org-packages"]], "The embeddable package": [[465, "the-embeddable-package"]], "Python Application": [[465, "python-application"]], "\u5d4c\u5165 Python": [[465, "embedding-python"]], "Alternative bundles": [[465, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[465, "configuring-python"]], "Excursus: Setting environment variables": [[465, "excursus-setting-environment-variables"]], "Finding the Python executable": [[465, "finding-the-python-executable"]], "UTF-8 mode": [[465, "utf-8-mode"]], "Python Launcher for Windows": [[465, "python-launcher-for-windows"]], "\u958b\u59cb": [[465, "getting-started"]], "From the command-line": [[465, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[465, "virtual-environments"]], "From a script": [[465, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[465, "from-file-associations"]], "Shebang Lines": [[465, "shebang-lines"]], "Arguments in shebang lines": [[465, "arguments-in-shebang-lines"]], "Customization": [[465, "customization"]], "Customization via INI files": [[465, "customization-via-ini-files"]], "Customizing default Python versions": [[465, "customizing-default-python-versions"]], "Diagnostics": [[465, "diagnostics"]], "Finding modules": [[465, "finding-modules"]], "Additional modules": [[465, "additional-modules"]], "PyWin32": [[465, "pywin32"]], "cx_Freeze": [[465, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[465, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[465, "other-platforms"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[474, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[474, "common-stumbling-blocks"]], "Print Is A Function": [[474, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[474, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[474, "ordering-comparisons"]], "Integers": [[474, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[474, "text-vs-data-instead-of-unicode-vs-8-bit"]], "Overview Of Syntax Changes": [[474, "overview-of-syntax-changes"]], "New Syntax": [[474, "new-syntax"]], "Changed Syntax": [[474, "changed-syntax"]], "Removed Syntax": [[474, "removed-syntax"]], "Changes Already Present In Python 2.6": [[474, "changes-already-present-in-python-2-6"]], "Library Changes": [[474, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[474, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[474, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[474, "miscellaneous-other-changes"]], "Operators And Special Methods": [[474, "operators-and-special-methods"]], "Builtins": [[474, "builtins"]], "Build and C API Changes": [[474, "build-and-c-api-changes"], [470, "build-and-c-api-changes"], [475, "build-and-c-api-changes"], [471, "build-and-c-api-changes"], [469, "build-and-c-api-changes"], [472, "build-and-c-api-changes"], [473, "build-and-c-api-changes"], [481, "build-and-c-api-changes"], [483, "build-and-c-api-changes"], [480, "build-and-c-api-changes"], [478, "build-and-c-api-changes"], [477, "build-and-c-api-changes"]], "Porting To Python 3.0": [[474, "porting-to-python-3-0"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[466, "what-about-python-1-6"]], "New Development Process": [[466, "new-development-process"]], "Unicode": [[466, "unicode"], [477, "unicode"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[466, "list-comprehensions"]], "Augmented Assignment": [[466, "augmented-assignment"]], "String Methods": [[466, "string-methods"], [351, "string-methods"]], "Garbage Collection of Cycles": [[466, "garbage-collection-of-cycles"]], "Other Core Changes": [[466, "other-core-changes"]], "Minor Language Changes": [[466, "minor-language-changes"]], "Changes to Built-in Functions": [[466, "changes-to-built-in-functions"]], "Porting to 2.0": [[466, "porting-to-2-0"]], "Extending/Embedding Changes": [[466, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[466, "distutils-making-modules-easy-to-install"]], "XML Modules": [[466, "xml-modules"]], "SAX2 Support": [[466, "sax2-support"]], "DOM Support": [[466, "dom-support"]], "Relationship to PyXML": [[466, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[466, "module-changes"]], "New modules": [[466, "new-modules"]], "IDLE Improvements": [[466, "idle-improvements"]], "Deleted and Deprecated Modules": [[466, "deleted-and-deprecated-modules"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[450, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[450, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[450, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[450, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[450, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[450, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[450, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[450, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[450, "saving-structured-data-with-json"]], "\u8cc7\u6599\u7d50\u69cb": [[446, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[446, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[446, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[446, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[446, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[446, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[446, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[446, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[446, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[446, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[446, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[446, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[446, "comparing-sequences-and-other-types"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-2-1"]], "PEP 227: Nested Scopes": [[467, "pep-227-nested-scopes"], [468, "pep-227-nested-scopes"]], "PEP 236: __future__ Directives": [[467, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[467, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[467, "pep-230-warning-framework"]], "PEP 229: New Build System": [[467, "pep-229-new-build-system"]], "PEP 205: Weak References": [[467, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[467, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[467, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[467, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[467, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[467, "pep-241-metadata-in-python-packages"]], "New and Improved Modules": [[467, "new-and-improved-modules"], [468, "new-and-improved-modules"], [472, "new-and-improved-modules"], [473, "new-and-improved-modules"]], "Other Changes and Fixes": [[467, "other-changes-and-fixes"], [468, "other-changes-and-fixes"], [469, "other-changes-and-fixes"], [473, "other-changes-and-fixes"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[464, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[464, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[464, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[464, "on-freebsd-and-openbsd"]], "\u5728 OpenSolaris \u7cfb\u7d71\u4e0a": [[464, "on-opensolaris"]], "\u5efa\u7f6e Python": [[464, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[464, "python-related-paths-and-files"]], "\u96dc\u9805": [[464, "miscellaneous"]], "\u5ba2\u88fd\u5316 OpenSSL": [[464, "custom-openssl"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[470, "pep-218-built-in-set-objects"]], "PEP 237: Unifying Long Integers and Integers": [[470, "pep-237-unifying-long-integers-and-integers"], [468, "pep-237-unifying-long-integers-and-integers"]], "PEP 289: Generator Expressions": [[470, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[470, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[470, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[470, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[470, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[470, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[470, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[470, "the-decimal-type"]], "Context \u578b\u5225": [[470, "the-context-type"]], "PEP 328: Multi-line Imports": [[470, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[470, "pep-331-locale-independent-float-string-conversions"]], "Other Language Changes": [[470, "other-language-changes"], [475, "other-language-changes"], [471, "other-language-changes"], [469, "other-language-changes"], [472, "other-language-changes"], [473, "other-language-changes"], [482, "other-language-changes"], [481, "other-language-changes"], [483, "other-language-changes"], [480, "other-language-changes"], [478, "other-language-changes"], [476, "other-language-changes"], [484, "other-language-changes"], [479, "other-language-changes"], [477, "other-language-changes"]], "Optimizations": [[470, "optimizations"], [475, "optimizations"], [471, "optimizations"], [469, "optimizations"], [472, "optimizations"], [473, "optimizations"], [482, "optimizations"], [481, "optimizations"], [483, "optimizations"], [480, "optimizations"], [478, "optimizations"], [476, "optimizations"], [484, "optimizations"], [477, "optimizations"]], "New, Improved, and Deprecated Modules": [[470, "new-improved-and-deprecated-modules"], [475, "new-improved-and-deprecated-modules"], [469, "new-improved-and-deprecated-modules"], [477, "new-improved-and-deprecated-modules"]], "cookielib": [[470, "cookielib"]], "doctest": [[470, "doctest"], [480, "doctest"], [476, "doctest"], [479, "doctest"]], "Port-Specific Changes": [[470, "port-specific-changes"], [471, "port-specific-changes"], [469, "port-specific-changes"]], "Porting to Python 2.4": [[470, "porting-to-python-2-4"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[475, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[475, "pep-372-ordered-dictionaries"]], "PEP 378: Format Specifier for Thousands Separator": [[475, "pep-378-format-specifier-for-thousands-separator"], [473, "pep-378-format-specifier-for-thousands-separator"]], "IDLE": [[475, "idle"], [485, "idle"], [485, "id15"], [485, "id33"], [485, "id49"], [485, "id57"], [485, "id88"], [485, "id98"], [485, "id109"], [485, "id118"], [485, "id128"], [485, "id138"], [485, "id156"], [485, "id167"], [485, "id177"], [485, "id197"], [485, "id208"], [485, "id218"], [485, "id224"], [485, "id234"], [485, "id244"], [485, "id255"], [485, "id266"], [485, "id276"], [485, "id284"], [485, "id293"], [485, "id303"], [485, "id310"], [485, "id318"], [485, "id328"], [485, "id339"], [485, "id363"], [485, "id370"], [485, "id379"], [485, "id389"], [485, "id402"], [485, "id412"], [485, "id424"], [485, "id430"], [485, "id441"], [485, "id474"], [485, "id482"], [485, "id489"], [485, "id498"], [485, "id508"], [485, "id530"], [485, "id539"], [485, "id543"], [485, "id553"], [485, "id568"], [485, "id583"], [485, "id605"], [477, "idle"], [254, "idle"]], "Porting to Python 3.1": [[475, "porting-to-python-3-1"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[471, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[471, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[471, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[471, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[471, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[471, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[471, "pep-342-new-generator-features"]], "PEP 343: The 'with' statement": [[471, "pep-343-the-with-statement"], [472, "pep-343-the-with-statement"]], "Writing Context Managers": [[471, "writing-context-managers"], [472, "writing-context-managers"]], "The contextlib module": [[471, "the-contextlib-module"], [472, "the-contextlib-module"]], "PEP 352: Exceptions as New-Style Classes": [[471, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[471, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[471, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[471, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[471, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[471, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[471, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[471, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[471, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[471, "the-wsgiref-package"]], "Porting to Python 2.5": [[471, "porting-to-python-2-5"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[455, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[455, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[455, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[455, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[455, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[455, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[455, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[455, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[455, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[455, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[455, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[455, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[455, "batteries-included"]], "Class\uff08\u985e\u5225\uff09": [[444, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[444, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[444, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[444, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[444, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[444, "class-definition-syntax"]], "Class \u7269\u4ef6": [[444, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[444, "instance-objects"]], "Method \u7269\u4ef6": [[444, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[444, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[444, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[444, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[444, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[444, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[444, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[444, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[444, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[444, "generator-expressions"]], "Editors and IDEs": [[461, "editors-and-ides"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[463, "using-python-on-a-mac"]], "\u53d6\u5f97\u548c\u5b89\u88dd MacPython": [[463, "getting-and-installing-macpython"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[463, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[463, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[463, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[463, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[463, "installing-additional-python-packages"]], "\u65bc Mac \u4e0a\u958b\u767c GUI \u7a0b\u5f0f": [[463, "gui-programming-on-the-mac"]], "\u65bc Mac \u4e0a\u767c\u884c Python \u61c9\u7528\u7a0b\u5f0f": [[463, "distributing-python-applications-on-the-mac"]], "\u5176\u4ed6\u8cc7\u6e90": [[463, "other-resources"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[468, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[468, "old-and-new-classes"]], "Descriptors": [[468, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[468, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[468, "attribute-access"]], "Related Links": [[468, "related-links"]], "PEP 234: Iterators": [[468, "pep-234-iterators"]], "PEP 255: Simple Generators": [[468, "pep-255-simple-generators"], [469, "pep-255-simple-generators"]], "PEP 238: Changing the Division Operator": [[468, "pep-238-changing-the-division-operator"]], "Unicode Changes": [[468, "unicode-changes"]], "Interpreter Changes and Fixes": [[468, "interpreter-changes-and-fixes"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[447, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[447, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[447, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[447, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[447, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[447, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[447, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[447, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[447, "predefined-clean-up-actions"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[453, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[453, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[453, "numbers"]], "\u5b57\u4e32 (String)": [[453, "strings"]], "List\uff08\u4e32\u5217\uff09": [[453, "lists"], [351, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[453, "first-steps-towards-programming"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[469, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[469, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[469, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[469, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[469, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[469, "pep-279-enumerate"]], "PEP 282: The logging Package": [[469, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[469, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[469, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[469, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[469, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[469, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[469, "pep-307-pickle-enhancements"]], "Extended Slices": [[469, "extended-slices"]], "String Changes": [[469, "string-changes"]], "Date/Time Type": [[469, "date-time-type"]], "The optparse Module": [[469, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[469, "pymalloc-a-specialized-object-allocator"]], "Porting to Python 2.3": [[469, "porting-to-python-2-3"]], "Python \u6559\u5b78": [[449, "the-python-tutorial"]], "Configure Python": [[460, "configure-python"]], "Configure Options": [[460, "configure-options"]], "General Options": [[460, "general-options"]], "Install Options": [[460, "install-options"]], "Performance options": [[460, "performance-options"]], "Python Debug Build": [[460, "python-debug-build"]], "Debug options": [[460, "debug-options"]], "Linker options": [[460, "linker-options"]], "Libraries options": [[460, "libraries-options"]], "Security Options": [[460, "security-options"]], "macOS Options": [[460, "macos-options"]], "Python Build System": [[460, "python-build-system"]], "Main files of the build system": [[460, "main-files-of-the-build-system"]], "Main build steps": [[460, "main-build-steps"]], "Main Makefile targets": [[460, "main-makefile-targets"]], "C extensions": [[460, "c-extensions"]], "Compiler and linker flags": [[460, "compiler-and-linker-flags"]], "Preprocessor flags": [[460, "preprocessor-flags"]], "Compiler flags": [[460, "compiler-flags"]], "Linker flags": [[460, "linker-flags"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[457, "virtual-environments-and-packages"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[457, "creating-virtual-environments"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[457, "managing-packages-with-pip"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[452, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[452, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[452, "argument-passing"]], "\u4e92\u52d5\u6a21\u5f0f": [[452, "interactive-mode"], [442, "interactive-mode"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[452, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[452, "source-code-encoding"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-2-6"]], "Python 3.0": [[472, "python-3-0"]], "Changes to the Development Process": [[472, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[472, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[472, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 366: Explicit Relative Imports From a Main Module": [[472, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[472, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[472, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[472, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[472, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[472, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[472, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[472, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[472, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[472, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[472, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[472, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[472, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[472, "the-fractions-module"]], "Interpreter Changes": [[472, "interpreter-changes"], [473, "interpreter-changes"]], "The ast module": [[472, "the-ast-module"]], "The future_builtins module": [[472, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[472, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[472, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[472, "ctypes-enhancements"]], "Improved SSL Support": [[472, "improved-ssl-support"]], "Deprecations and Removals": [[472, "deprecations-and-removals"]], "Port-Specific Changes: Windows": [[472, "port-specific-changes-windows"], [473, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[472, "port-specific-changes-mac-os-x"], [473, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: IRIX": [[472, "port-specific-changes-irix"]], "Porting to Python 2.6": [[472, "porting-to-python-2-6"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[448, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[448, "representation-error"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[445, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[445, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[445, "for-statements"]], "range() \u51fd\u5f0f": [[445, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[445, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[445, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[445, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[445, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[445, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[445, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[445, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[445, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[445, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[445, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[445, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[445, "function-examples"]], "\u56de\u9867": [[445, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[445, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[445, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[445, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[445, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[445, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[445, "intermezzo-coding-style"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[473, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[473, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[473, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[473, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[473, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 389: The argparse Module for Parsing Command Lines": [[473, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[473, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[473, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[473, "pep-3137-the-memoryview-object"]], "New module: importlib": [[473, "new-module-importlib"]], "New module: sysconfig": [[473, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[473, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[473, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[473, "updated-module-elementtree-1-3"]], "Port-Specific Changes: FreeBSD": [[473, "port-specific-changes-freebsd"]], "Porting to Python 2.7": [[473, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[473, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[473, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[473, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[473, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[473, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "Bootstrapping pip By Default": [[473, "bootstrapping-pip-by-default"], [479, "bootstrapping-pip-by-default"]], "Documentation Changes": [[473, "documentation-changes"], [479, "documentation-changes"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[473, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [479, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[473, "pep-493-https-verification-migration-tools-for-python-2-7"]], "New make regen-all build target": [[473, "new-make-regen-all-build-target"], [481, "new-make-regen-all-build-target"], [480, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[473, "removal-of-make-touch-build-target"], [481, "removal-of-make-touch-build-target"], [480, "removal-of-make-touch-build-target"]], "Command line and environment": [[459, "command-line-and-environment"]], "Command line": [[459, "command-line"]], "Interface options": [[459, "interface-options"]], "Generic options": [[459, "generic-options"]], "Miscellaneous options": [[459, "miscellaneous-options"]], "Options you shouldn't use": [[459, "options-you-shouldn-t-use"]], "Environment variables": [[459, "environment-variables"]], "Debug-mode variables": [[459, "debug-mode-variables"]], "\u9644\u9304": [[442, "appendix"]], "\u932f\u8aa4\u8655\u7406": [[442, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[442, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[442, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[442, "the-customization-modules"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[451, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[451, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[451, "alternatives-to-the-interactive-interpreter"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[458, "what-now"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[380, "module-tkinter.tix"]], "Using Tix": [[380, "using-tix"]], "Tix Widgets": [[380, "tix-widgets"]], "Basic Widgets": [[380, "basic-widgets"]], "File Selectors": [[380, "file-selectors"]], "Hierarchical ListBox": [[380, "hierarchical-listbox"]], "Tabular ListBox": [[380, "tabular-listbox"]], "Manager Widgets": [[380, "manager-widgets"]], "Image Types": [[380, "image-types"]], "Miscellaneous Widgets": [[380, "miscellaneous-widgets"]], "Form Geometry Manager": [[380, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[380, "tix-commands"]], "wave --- Read and write WAV files": [[405, "module-wave"]], "Wave_read \u7269\u4ef6": [[405, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[405, "wave-write-objects"]], "tkinter --- Python interface to Tcl/Tk": [[374, "module-tkinter"]], "Architecture": [[374, "architecture"]], "Tkinter Modules": [[374, "tkinter-modules"]], "Tkinter Life Preserver": [[374, "tkinter-life-preserver"]], "A Hello World Program": [[374, "a-hello-world-program"]], "Important Tk Concepts": [[374, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[374, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[374, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[374, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[374, "threading-model"]], "Handy Reference": [[374, "handy-reference"]], "Setting Options": [[374, "setting-options"]], "The Packer": [[374, "the-packer"]], "Packer Options": [[374, "packer-options"]], "Coupling Widget Variables": [[374, "coupling-widget-variables"]], "The Window Manager": [[374, "the-window-manager"]], "Tk Option Data Types": [[374, "tk-option-data-types"]], "Bindings and Events": [[374, "bindings-and-events"]], "The index Parameter": [[374, "the-index-parameter"]], "Images": [[374, "images"]], "File Handlers": [[374, "file-handlers"]], "Unix \u7279\u6709\u670d\u52d9": [[395, "unix-specific-services"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[399, "module-urllib.request"]], "Request Objects": [[399, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[399, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[399, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[399, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[399, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[399, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[399, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[399, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[399, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[399, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[399, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[399, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[399, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[399, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[399, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[399, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[399, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[399, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[399, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[399, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[399, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[399, "httperrorprocessor-objects"]], "Examples": [[399, "examples"]], "Legacy interface": [[399, "legacy-interface"]], "urllib.request Restrictions": [[399, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[399, "module-urllib.response"]], "tracemalloc --- Trace memory allocations": [[386, "module-tracemalloc"]], "Display the top 10": [[386, "display-the-top-10"]], "Compute differences": [[386, "compute-differences"]], "Get the traceback of a memory block": [[386, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[386, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[386, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "API": [[386, "api"], [403, "api"]], "DomainFilter": [[386, "domainfilter"]], "Filter": [[386, "filter"]], "Frame": [[386, "frame"]], "Snapshot": [[386, "snapshot"]], "Statistic": [[386, "statistic"]], "StatisticDiff": [[386, "statisticdiff"]], "Trace": [[386, "trace"]], "Traceback": [[386, "traceback"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[400, "module-urllib.robotparser"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[379, "module-tkinter.scrolledtext"]], "tkinter.colorchooser --- Color choosing dialog": [[375, "module-tkinter.colorchooser"]], "unittest.mock --- mock object library": [[393, "module-unittest.mock"]], "Quick Guide": [[393, "quick-guide"]], "The Mock Class": [[393, "the-mock-class"]], "Calling": [[393, "calling"]], "Deleting Attributes": [[393, "deleting-attributes"]], "Mock names and the name attribute": [[393, "mock-names-and-the-name-attribute"]], "Attaching Mocks as Attributes": [[393, "attaching-mocks-as-attributes"]], "The patchers": [[393, "the-patchers"]], "patch": [[393, "patch"]], "patch.object": [[393, "patch-object"]], "patch.dict": [[393, "patch-dict"]], "patch.multiple": [[393, "patch-multiple"]], "patch methods: start and stop": [[393, "patch-methods-start-and-stop"]], "patch builtins": [[393, "patch-builtins"]], "TEST_PREFIX": [[393, "test-prefix"]], "Nesting Patch Decorators": [[393, "nesting-patch-decorators"]], "Where to patch": [[393, "where-to-patch"]], "Patching Descriptors and Proxy Objects": [[393, "patching-descriptors-and-proxy-objects"]], "MagicMock and magic method support": [[393, "magicmock-and-magic-method-support"]], "Mocking Magic Methods": [[393, "mocking-magic-methods"]], "Magic Mock": [[393, "magic-mock"]], "Helpers": [[393, "helpers"]], "sentinel": [[393, "sentinel"]], "DEFAULT": [[393, "default"]], "call": [[393, "call"]], "create_autospec": [[393, "create-autospec"]], "ANY": [[393, "any"]], "FILTER_DIR": [[393, "filter-dir"]], "mock_open": [[393, "mock-open"]], "Autospeccing": [[393, "autospeccing"]], "Sealing mocks": [[393, "sealing-mocks"]], "uuid --- UUID objects according to RFC 4122": [[402, "module-uuid"]], "weakref --- Weak references": [[406, "module-weakref"]], "Weak Reference Objects": [[406, "weak-reference-objects"]], "Finalizer Objects": [[406, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[406, "comparing-finalizers-with-del-methods"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[392, "module-unittest"]], "\u7c21\u55ae\u7bc4\u4f8b": [[392, "basic-example"], [361, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[392, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[392, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[392, "test-discovery"]], "Organizing test code": [[392, "organizing-test-code"]], "Re-using old test code": [[392, "re-using-old-test-code"]], "Skipping tests and expected failures": [[392, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[392, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[392, "classes-and-functions"], [261, "classes-and-functions"]], "Test cases": [[392, "test-cases"]], "Deprecated aliases": [[392, "deprecated-aliases"]], "Grouping tests": [[392, "grouping-tests"]], "Loading and running tests": [[392, "loading-and-running-tests"]], "load_tests Protocol": [[392, "load-tests-protocol"]], "Class and Module Fixtures": [[392, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[392, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[392, "setupmodule-and-teardownmodule"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[396, "module-urllib"]], "trace --- Trace or track Python statement execution": [[384, "module-trace"]], "Main options": [[384, "main-options"]], "Modifiers": [[384, "modifiers"]], "Filters": [[384, "filters"]], "Programmatic Interface": [[384, "programmatic-interface"], [306, "programmatic-interface"]], "traceback --- Print or retrieve a stack traceback": [[385, "module-traceback"]], "TracebackException \u7269\u4ef6": [[385, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[385, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[385, "framesummary-objects"]], "Traceback Examples": [[385, "traceback-examples"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[397, "module-urllib.error"]], "tkinter.font --- Tkinter font wrapper": [[377, "module-tkinter.font"]], "typing --- Support for type hints": [[390, "module-typing"]], "Relevant PEPs": [[390, "relevant-peps"]], "Type aliases": [[390, "type-aliases"]], "NewType": [[390, "newtype"]], "Callable": [[390, "callable"]], "Generics": [[390, "generics"]], "User-defined generic types": [[390, "user-defined-generic-types"]], "Any \u578b\u5225": [[390, "the-any-type"]], "Nominal vs structural subtyping": [[390, "nominal-vs-structural-subtyping"]], "Special typing primitives": [[390, "special-typing-primitives"]], "Special types": [[390, "special-types"]], "Special forms": [[390, "special-forms"]], "Building generic types": [[390, "building-generic-types"]], "Other special directives": [[390, "other-special-directives"]], "Generic concrete collections": [[390, "generic-concrete-collections"]], "Corresponding to built-in types": [[390, "corresponding-to-built-in-types"]], "Corresponding to types in collections": [[390, "corresponding-to-types-in-collections"]], "Other concrete types": [[390, "other-concrete-types"]], "Abstract Base Classes": [[390, "abstract-base-classes"]], "Corresponding to collections in collections.abc": [[390, "corresponding-to-collections-in-collections-abc"]], "Corresponding to other types in collections.abc": [[390, "corresponding-to-other-types-in-collections-abc"]], "Asynchronous programming": [[390, "asynchronous-programming"]], "Context manager types": [[390, "context-manager-types"]], "Protocols": [[390, "protocols"], [139, "protocols"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[390, "functions-and-decorators"]], "Introspection helpers": [[390, "introspection-helpers"]], "venv --- Creation of virtual environments": [[403, "module-venv"]], "Creating virtual environments": [[403, "creating-virtual-environments"]], "An example of extending EnvBuilder": [[403, "an-example-of-extending-envbuilder"]], "unicodedata --- Unicode Database": [[391, "module-unicodedata"]], "token --- Constants used with Python parse trees": [[382, "module-token"]], "tkinter.ttk --- Tk themed widgets": [[381, "module-tkinter.ttk"]], "Using Ttk": [[381, "using-ttk"]], "Ttk Widgets": [[381, "ttk-widgets"]], "Widget": [[381, "widget"]], "Standard Options": [[381, "standard-options"]], "Scrollable Widget Options": [[381, "scrollable-widget-options"]], "Label Options": [[381, "label-options"]], "Compatibility Options": [[381, "compatibility-options"]], "Widget States": [[381, "widget-states"]], "ttk.Widget": [[381, "ttk-widget"]], "Combobox": [[381, "combobox"]], "Options": [[381, "options"], [381, "id1"], [381, "id3"], [381, "id5"], [381, "id6"], [381, "id7"]], "Virtual events": [[381, "virtual-events"], [381, "id2"]], "ttk.Combobox": [[381, "ttk-combobox"]], "Spinbox": [[381, "spinbox"]], "ttk.Spinbox": [[381, "ttk-spinbox"]], "Notebook": [[381, "notebook"]], "Tab Options": [[381, "tab-options"]], "Tab Identifiers": [[381, "tab-identifiers"]], "Virtual Events": [[381, "id4"], [381, "id8"]], "ttk.Notebook": [[381, "ttk-notebook"]], "Progressbar": [[381, "progressbar"]], "ttk.Progressbar": [[381, "ttk-progressbar"]], "Separator": [[381, "separator"]], "Sizegrip": [[381, "sizegrip"]], "Platform-specific notes": [[381, "platform-specific-notes"]], "Bugs": [[381, "bugs"]], "Treeview": [[381, "treeview"]], "Item Options": [[381, "item-options"]], "Tag Options": [[381, "tag-options"]], "Column Identifiers": [[381, "column-identifiers"]], "ttk.Treeview": [[381, "ttk-treeview"]], "Ttk Styling": [[381, "ttk-styling"]], "Layouts": [[381, "layouts"]], "tokenize --- Tokenizer for Python source": [[383, "module-tokenize"]], "Tokenizing Input": [[383, "tokenizing-input"]], "tkinter.dnd --- Drag and drop support": [[376, "module-tkinter.dnd"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[387, "module-tty"]], "tkinter.messagebox --- Tkinter message prompts": [[378, "module-tkinter.messagebox"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[401, "module-uu"]], "turtle --- \u9f9c\u5716\u5b78": [[388, "module-turtle"]], "\u4ecb\u7d39": [[388, "introduction"]], "Turtle star": [[388, null]], "Overview of available Turtle and Screen methods": [[388, "overview-of-available-turtle-and-screen-methods"]], "Turtle methods": [[388, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[388, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[388, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[388, "turtle-motion"]], "Tell Turtle's state": [[388, "tell-turtle-s-state"]], "Settings for measurement": [[388, "settings-for-measurement"]], "Pen control": [[388, "pen-control"]], "Drawing state": [[388, "drawing-state"]], "Color control": [[388, "color-control"]], "Filling": [[388, "filling"]], "More drawing control": [[388, "more-drawing-control"]], "Turtle state": [[388, "turtle-state"]], "Visibility": [[388, "visibility"]], "Appearance": [[388, "appearance"]], "Using events": [[388, "using-events"]], "Special Turtle methods": [[388, "special-turtle-methods"]], "Compound shapes": [[388, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[388, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[388, "window-control"]], "Animation control": [[388, "animation-control"]], "Using screen events": [[388, "using-screen-events"]], "Input methods": [[388, "input-methods"]], "Settings and special methods": [[388, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[388, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[388, "public-classes"]], "Help and configuration": [[388, "help-and-configuration"]], "How to use help": [[388, "how-to-use-help"]], "Translation of docstrings into different languages": [[388, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[388, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[388, "module-turtledemo"]], "Changes since Python 2.6": [[388, "changes-since-python-2-6"]], "Changes since Python 3.0": [[388, "changes-since-python-3-0"]], "types --- Dynamic type creation and names for built-in types": [[389, "module-types"]], "Dynamic Type Creation": [[389, "dynamic-type-creation"]], "Standard Interpreter Types": [[389, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[389, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[389, "coroutine-utility-functions"]], "warnings --- Warning control": [[404, "module-warnings"]], "Warning Categories": [[404, "warning-categories"]], "The Warnings Filter": [[404, "the-warnings-filter"]], "Describing Warning Filters": [[404, "describing-warning-filters"]], "Default Warning Filter": [[404, "default-warning-filter"]], "Overriding the default filter": [[404, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[404, "temporarily-suppressing-warnings"]], "Testing Warnings": [[404, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[404, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[404, "available-functions"]], "Available Context Managers": [[404, "available-context-managers"]], "urllib.parse --- Parse URLs into components": [[398, "module-urllib.parse"]], "URL Parsing": [[398, "url-parsing"]], "Parsing ASCII Encoded Bytes": [[398, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[398, "structured-parse-results"]], "URL Quoting": [[398, "url-quoting"]], "webbrowser --- Convenient web-browser controller": [[407, "module-webbrowser"]], "Browser Controller Objects": [[407, "browser-controller-objects"]], "unittest.mock --- getting started": [[394, "unittest-mock-getting-started"]], "Using Mock": [[394, "using-mock"]], "Mock Patching Methods": [[394, "mock-patching-methods"]], "Mock for Method Calls on an Object": [[394, "mock-for-method-calls-on-an-object"]], "Mocking Classes": [[394, "mocking-classes"]], "Naming your mocks": [[394, "naming-your-mocks"]], "Tracking all Calls": [[394, "tracking-all-calls"]], "Setting Return Values and Attributes": [[394, "setting-return-values-and-attributes"]], "Raising exceptions with mocks": [[394, "raising-exceptions-with-mocks"]], "Side effect functions and iterables": [[394, "side-effect-functions-and-iterables"]], "Mocking asynchronous iterators": [[394, "mocking-asynchronous-iterators"]], "Mocking asynchronous context manager": [[394, "mocking-asynchronous-context-manager"]], "Creating a Mock from an Existing Object": [[394, "creating-a-mock-from-an-existing-object"]], "Patch Decorators": [[394, "patch-decorators"]], "Further Examples": [[394, "further-examples"]], "Mocking chained calls": [[394, "mocking-chained-calls"]], "Partial mocking": [[394, "partial-mocking"]], "Mocking a Generator Method": [[394, "mocking-a-generator-method"]], "Applying the same patch to every test method": [[394, "applying-the-same-patch-to-every-test-method"]], "Mocking Unbound Methods": [[394, "mocking-unbound-methods"]], "Checking multiple calls with mock": [[394, "checking-multiple-calls-with-mock"]], "Coping with mutable arguments": [[394, "coping-with-mutable-arguments"]], "Nesting Patches": [[394, "nesting-patches"]], "Mocking a dictionary with MagicMock": [[394, "mocking-a-dictionary-with-magicmock"]], "Mock subclasses and their attributes": [[394, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[394, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[394, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[394, "more-complex-argument-matching"]], "Security Considerations": [[333, "security-considerations"], [355, "security-considerations"], [252, "security-considerations"], [149, "security-considerations"]], "Python Runtime Services": [[321, "python-runtime-services"]], "readline --- GNU readline interface": [[326, "module-readline"]], "Init file": [[326, "init-file"]], "Line buffer": [[326, "line-buffer"]], "History file": [[326, "history-file"]], "History list": [[326, "history-list"]], "Startup hooks": [[326, "startup-hooks"]], "Completion": [[326, "completion"]], "pipes --- shell pipelines \u4ecb\u9762": [[307, "module-pipes"]], "Template Objects": [[307, "template-objects"]], "posix --- The most common POSIX system calls": [[312, "module-posix"]], "Large File Support": [[312, "large-file-support"]], "Notable Module Contents": [[312, "notable-module-contents"]], "pty --- Pseudo-terminal utilities": [[315, "module-pty"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[309, "module-platform"]], "\u8de8\u5e73\u53f0": [[309, "cross-platform"]], "Java \u5e73\u53f0": [[309, "java-platform"]], "Windows \u5e73\u53f0": [[309, "windows-platform"]], "macOS \u5e73\u53f0": [[309, "macos-platform"]], "Unix \u5e73\u53f0": [[309, "unix-platforms"]], "Linux \u5e73\u53f0": [[309, "linux-platforms"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[324, "module-random"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[324, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[324, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[324, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[324, "functions-for-sequences"]], "\u5be6\u6578\u5206\u5e03": [[324, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[324, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[324, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[324, "recipes"]], "shelve --- Python object persistence": [[336, "module-shelve"]], "Restrictions": [[336, "restrictions"]], "selectors --- High-level I/O multiplexing": [[335, "module-selectors"]], "Classes": [[335, "classes"], [354, "classes"]], "The Python Profilers": [[314, "the-python-profilers"]], "Introduction to the profilers": [[314, "introduction-to-the-profilers"]], "Instant User's Manual": [[314, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[314, "module-cProfile"]], "The Stats Class": [[314, "the-stats-class"]], "What Is Deterministic Profiling?": [[314, "what-is-deterministic-profiling"]], "\u9650\u5236": [[314, "limitations"]], "\u6821\u6b63": [[314, "calibration"]], "Using a custom timer": [[314, "using-a-custom-timer"]], "pickletools --- Tools for pickle developers": [[306, "module-pickletools"]], "Command line usage": [[306, "command-line-usage"], [254, "command-line-usage"]], "Command line options": [[306, "command-line-options"], [268, "command-line-options"], [241, "command-line-options"]], "pyclbr --- Python module browser support": [[318, "module-pyclbr"]], "Class Objects": [[318, "class-objects"]], "shlex --- Simple lexical analysis": [[337, "module-shlex"]], "shlex \u7269\u4ef6": [[337, "shlex-objects"]], "Parsing Rules": [[337, "parsing-rules"]], "Improved Compatibility with Shells": [[337, "improved-compatibility-with-shells"]], "runpy --- Locating and executing Python modules": [[330, "module-runpy"]], "py_compile --- Compile Python source files": [[317, "module-py_compile"]], "select --- Waiting for I/O completion": [[334, "module-select"]], "/dev/poll Polling Objects": [[334, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[334, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[334, "polling-objects"]], "Kqueue Objects": [[334, "kqueue-objects"]], "Kevent Objects": [[334, "kevent-objects"]], "pprint --- Data pretty printer": [[313, "module-pprint"]], "PrettyPrinter \u7269\u4ef6": [[313, "prettyprinter-objects"]], "reprlib --- Alternate repr() implementation": [[327, "module-reprlib"]], "Repr \u7269\u4ef6": [[327, "repr-objects"]], "Subclassing Repr Objects": [[327, "subclassing-repr-objects"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[322, "module-queue"]], "\u4f47\u5217\u7269\u4ef6": [[322, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[322, "simplequeue-objects"]], "resource --- Resource usage information": [[328, "module-resource"]], "Resource Limits": [[328, "resource-limits"]], "Resource Usage": [[328, "resource-usage"]], "re --- Regular expression operations": [[325, "module-re"]], "Regular Expression Syntax": [[325, "regular-expression-syntax"]], "Flags": [[325, "flags"]], "Functions": [[325, "functions"]], "Exceptions": [[325, "exceptions"]], "Regular Expression Objects": [[325, "regular-expression-objects"]], "Match Objects": [[325, "match-objects"]], "Regular Expression Examples": [[325, "regular-expression-examples"]], "Checking for a Pair": [[325, "checking-for-a-pair"]], "Simulating scanf()": [[325, "simulating-scanf"]], "search() vs. match()": [[325, "search-vs-match"]], "Making a Phonebook": [[325, "making-a-phonebook"]], "Text Munging": [[325, "text-munging"]], "Finding all Adverbs": [[325, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[325, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[325, "raw-string-notation"]], "Writing a Tokenizer": [[325, "writing-a-tokenizer"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[332, "module-secrets"]], "\u4e82\u6578": [[332, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[332, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[332, "how-many-bytes-should-tokens-use"]], "\u5176\u4ed6\u51fd\u5f0f": [[332, "other-functions"], [360, "other-functions"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[332, "recipes-and-best-practices"]], "poplib --- POP3 protocol client": [[311, "module-poplib"]], "POP3 \u7269\u4ef6": [[311, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[311, "pop3-example"]], "rlcompleter --- Completion function for GNU readline": [[329, "module-rlcompleter"]], "Completer Objects": [[329, "completer-objects"]], "shutil --- High-level file operations": [[338, "module-shutil"]], "Directory and files operations": [[338, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[338, "platform-dependent-efficient-copy-operations"]], "copytree example": [[338, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[338, "rmtree-example"]], "Archiving operations": [[338, "archiving-operations"]], "Archiving example": [[338, "archiving-example"]], "Archiving example with base_dir": [[338, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[338, "querying-the-size-of-the-output-terminal"]], "pydoc --- Documentation generator and online help system": [[319, "module-pydoc"]], "quopri --- Encode and decode MIME quoted-printable data": [[323, "module-quopri"]], "sched --- Event scheduler": [[331, "module-sched"]], "Scheduler Objects": [[331, "scheduler-objects"]], "pkgutil --- Package extension utility": [[308, "module-pkgutil"]], "plistlib --- Generate and parse Apple .plist files": [[310, "module-plistlib"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[320, "module-xml.parsers.expat"]], "ExpatError \u4f8b\u5916": [[320, "expaterror-exceptions"]], "Content Model Descriptions": [[320, "module-xml.parsers.expat.model"]], "Expat error constants": [[320, "module-xml.parsers.expat.errors"]], "signal --- Set handlers for asynchronous events": [[339, "module-signal"]], "General rules": [[339, "general-rules"]], "Execution of Python signal handlers": [[339, "execution-of-python-signal-handlers"]], "Signals and threads": [[339, "signals-and-threads"]], "Note on SIGPIPE": [[339, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[339, "note-on-signal-handlers-and-exceptions"]], "pwd --- The password database": [[316, "module-pwd"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[482, "what-s-new-in-python-3-7"]], "Summary -- Release Highlights": [[482, "summary-release-highlights"], [479, "summary-release-highlights"]], "New Features": [[482, "new-features"], [481, "new-features"], [483, "new-features"], [480, "new-features"], [476, "new-features"], [476, "id1"], [484, "new-features"], [484, "id1"], [479, "new-features"]], "PEP 563: Postponed Evaluation of Annotations": [[482, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[482, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[482, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[482, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[482, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[482, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[482, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[482, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[482, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[482, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[482, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[482, "python-development-mode-x-dev"]], "\u65b0\u6a21\u7d44": [[482, "new-modules"], [481, "new-modules"], [478, "new-modules"], [484, "new-modules"], [479, "new-modules"]], "contextvars": [[482, "contextvars"]], "dataclasses": [[482, "dataclasses"], [476, "dataclasses"]], "importlib.resources": [[482, "importlib-resources"]], "Improved Modules": [[482, "improved-modules"], [481, "improved-modules"], [483, "improved-modules"], [480, "improved-modules"], [478, "improved-modules"], [476, "improved-modules"], [484, "improved-modules"], [479, "improved-modules"]], "argparse": [[482, "argparse"], [480, "argparse"], [476, "argparse"], [479, "argparse"]], "asyncio": [[482, "asyncio"], [482, "whatsnew37-asyncio-deprecated"], [481, "asyncio"], [483, "asyncio"], [480, "asyncio"], [476, "asyncio"], [484, "asyncio"], [479, "asyncio"]], "binascii": [[482, "binascii"], [481, "binascii"], [478, "binascii"]], "calendar": [[482, "calendar"]], "collections": [[482, "collections"], [482, "id3"], [481, "collections"], [483, "collections"], [480, "collections"], [478, "collections"], [479, "collections"], [477, "collections"]], "compileall": [[482, "compileall"], [480, "compileall"], [484, "compileall"]], "concurrent.futures": [[482, "concurrent-futures"], [481, "concurrent-futures"], [480, "concurrent-futures"], [484, "concurrent-futures"]], "contextlib": [[482, "contextlib"], [481, "contextlib"], [480, "contextlib"], [478, "contextlib"], [476, "contextlib"], [479, "contextlib"], [477, "contextlib"]], "cProfile": [[482, "cprofile"], [483, "cprofile"]], "crypt": [[482, "crypt"], [478, "crypt"]], "datetime": [[482, "datetime"], [481, "datetime"], [483, "datetime"], [478, "datetime"], [484, "datetime"]], "dbm": [[482, "dbm"], [482, "id4"], [481, "dbm"], [480, "dbm"], [479, "dbm"], [477, "dbm"]], "decimal": [[482, "decimal"], [481, "decimal"], [478, "decimal"]], "dis": [[482, "dis"], [479, "dis"], [477, "dis"]], "distutils": [[482, "distutils"], [481, "distutils"], [481, "id2"], [480, "distutils"], [476, "distutils"], [484, "distutils"]], "enum": [[482, "enum"], [482, "id5"], [481, "enum"], [480, "enum"], [479, "enum"]], "functools": [[482, "functools"], [483, "functools"], [480, "functools"], [478, "functools"], [479, "functools"], [477, "functools"]], "gc": [[482, "gc"], [483, "gc"], [478, "gc"], [476, "gc"], [484, "gc"], [479, "gc"]], "hmac": [[482, "hmac"], [478, "hmac"], [476, "hmac"], [479, "hmac"]], "http.client": [[482, "http-client"], [481, "http-client"], [480, "http-client"], [477, "http-client"]], "http.server": [[482, "http-server"]], "idlelib and IDLE": [[482, "idlelib-and-idle"], [481, "idlelib-and-idle"], [480, "idlelib-and-idle"], [479, "idlelib-and-idle"]], "io": [[482, "io"], [483, "io"], [480, "io"], [478, "io"], [477, "io"]], "ipaddress": [[482, "ipaddress"], [480, "ipaddress"], [478, "ipaddress"], [484, "ipaddress"], [479, "ipaddress"]], "itertools": [[482, "itertools"], [483, "itertools"], [478, "itertools"], [476, "itertools"], [477, "itertools"]], "locale": [[482, "locale"], [482, "id7"], [480, "locale"]], "logging": [[482, "logging"], [481, "logging"], [483, "logging"], [480, "logging"], [478, "logging"], [479, "logging"], [477, "logging"]], "math": [[482, "math"], [481, "math"], [483, "math"], [480, "math"], [478, "math"], [484, "math"], [477, "math"]], "mimetypes": [[482, "mimetypes"]], "msilib": [[482, "msilib"]], "multiprocessing": [[482, "multiprocessing"], [481, "multiprocessing"], [483, "multiprocessing"], [480, "multiprocessing"], [478, "multiprocessing"], [484, "multiprocessing"], [479, "multiprocessing"]], "os": [[482, "os"], [481, "os"], [481, "id4"], [483, "os"], [480, "os"], [478, "os"], [476, "os"], [484, "os"], [479, "os"], [477, "os"]], "pathlib": [[482, "pathlib"], [481, "pathlib"], [483, "pathlib"], [480, "pathlib"], [476, "pathlib"], [484, "pathlib"], [479, "pathlib"]], "pdb": [[482, "pdb"], [481, "pdb"], [478, "pdb"], [484, "pdb"], [479, "pdb"], [477, "pdb"]], "py_compile": [[482, "py-compile"], [483, "py-compile"], [476, "py-compile"]], "pydoc": [[482, "pydoc"], [481, "pydoc"], [478, "pydoc"], [484, "pydoc"], [479, "pydoc"], [477, "pydoc"]], "queue": [[482, "queue"]], "re": [[482, "re"], [481, "re"], [481, "id5"], [480, "re"], [478, "re"], [479, "re"]], "signal": [[482, "signal"], [480, "signal"], [478, "signal"], [484, "signal"]], "socket": [[482, "socket"], [482, "id8"], [481, "socket"], [483, "socket"], [480, "socket"], [478, "socket"], [476, "socket"], [484, "socket"], [479, "socket"], [477, "socket"]], "socketserver": [[482, "socketserver"], [481, "socketserver"], [478, "socketserver"]], "sqlite3": [[482, "sqlite3"], [481, "sqlite3"], [480, "sqlite3"], [478, "sqlite3"], [476, "sqlite3"], [479, "sqlite3"], [477, "sqlite3"]], "ssl": [[482, "ssl"], [482, "id9"], [481, "ssl"], [481, "id6"], [483, "ssl"], [480, "ssl"], [478, "ssl"], [476, "ssl"], [479, "ssl"], [477, "ssl"]], "string": [[482, "string"]], "subprocess": [[482, "subprocess"], [481, "subprocess"], [480, "subprocess"], [478, "subprocess"], [479, "subprocess"]], "sys": [[482, "sys"], [482, "id10"], [481, "sys"], [483, "sys"], [480, "sys"], [478, "sys"], [476, "sys"], [484, "sys"], [479, "sys"]], "time": [[482, "time"], [481, "time"], [483, "time"], [480, "time"], [478, "time"], [484, "time"]], "tkinter": [[482, "tkinter"], [481, "tkinter"], [481, "id7"], [483, "tkinter"], [480, "tkinter"]], "tracemalloc": [[482, "tracemalloc"], [481, "tracemalloc"], [484, "tracemalloc"], [479, "tracemalloc"]], "types": [[482, "types"], [480, "types"], [478, "types"], [476, "types"], [479, "types"]], "unicodedata": [[482, "unicodedata"], [481, "unicodedata"], [483, "unicodedata"], [480, "unicodedata"], [484, "unicodedata"]], "unittest": [[482, "unittest"], [483, "unittest"], [480, "unittest"], [478, "unittest"], [476, "unittest"], [479, "unittest"], [477, "unittest"]], "unittest.mock": [[482, "unittest-mock"], [481, "unittest-mock"], [480, "unittest-mock"]], "urllib.parse": [[482, "urllib-parse"], [476, "urllib-parse"], [484, "urllib-parse"], [477, "urllib-parse"]], "uu": [[482, "uu"]], "uuid": [[482, "uuid"]], "warnings": [[482, "warnings"], [481, "warnings"]], "xml.etree": [[482, "xml-etree"], [479, "xml-etree"]], "xmlrpc.server": [[482, "xmlrpc-server"]], "zipapp": [[482, "zipapp"], [480, "zipapp"]], "zipfile": [[482, "zipfile"], [481, "zipfile"], [480, "zipfile"], [479, "zipfile"]], "C API Changes": [[482, "c-api-changes"], [476, "c-api-changes"], [484, "c-api-changes"]], "Build Changes": [[482, "build-changes"], [476, "build-changes"], [484, "build-changes"]], "Other CPython Implementation Changes": [[482, "other-cpython-implementation-changes"]], "Deprecated Python Behavior": [[482, "deprecated-python-behavior"], [480, "deprecated-python-behavior"]], "Deprecated Python modules, functions and methods": [[482, "deprecated-python-modules-functions-and-methods"], [481, "deprecated-python-modules-functions-and-methods"], [480, "deprecated-python-modules-functions-and-methods"], [478, "deprecated-python-modules-functions-and-methods"]], "aifc": [[482, "aifc"], [479, "aifc"]], "gettext": [[482, "gettext"], [483, "gettext"]], "macpath": [[482, "macpath"]], "threading": [[482, "threading"], [483, "threading"], [480, "threading"], [478, "threading"], [476, "threading"], [479, "threading"], [477, "threading"]], "sunau": [[482, "sunau"], [479, "sunau"]], "wave": [[482, "wave"], [479, "wave"]], "Deprecated functions and types of the C API": [[482, "deprecated-functions-and-types-of-the-c-api"], [481, "deprecated-functions-and-types-of-the-c-api"], [478, "deprecated-functions-and-types-of-the-c-api"]], "Platform Support Removals": [[482, "platform-support-removals"]], "API and Feature Removals": [[482, "api-and-feature-removals"], [481, "api-and-feature-removals"], [483, "api-and-feature-removals"], [480, "api-and-feature-removals"], [479, "api-and-feature-removals"]], "Module Removals": [[482, "module-removals"]], "Windows-only Changes": [[482, "windows-only-changes"], [482, "id12"]], "Porting to Python 3.7": [[482, "porting-to-python-3-7"]], "Changes in Python Behavior": [[482, "changes-in-python-behavior"]], "Changes in the Python API": [[482, "changes-in-the-python-api"], [481, "changes-in-the-python-api"], [483, "changes-in-the-python-api"], [480, "changes-in-the-python-api"], [476, "changes-in-the-python-api"], [484, "changes-in-the-python-api"], [479, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[482, "changes-in-the-c-api"], [481, "changes-in-the-c-api"], [483, "changes-in-the-c-api"], [480, "changes-in-the-c-api"], [476, "changes-in-the-c-api"], [484, "changes-in-the-c-api"], [479, "changes-in-the-c-api"]], "CPython bytecode changes": [[482, "cpython-bytecode-changes"], [481, "cpython-bytecode-changes"], [483, "cpython-bytecode-changes"], [476, "cpython-bytecode-changes"], [484, "cpython-bytecode-changes"]], "Other CPython implementation changes": [[482, "id13"]], "Notable changes in Python 3.7.1": [[482, "notable-changes-in-python-3-7-1"]], "Notable changes in Python 3.7.2": [[482, "notable-changes-in-python-3-7-2"]], "Notable changes in Python 3.7.6": [[482, "notable-changes-in-python-3-7-6"]], "Notable changes in Python 3.7.10": [[482, "notable-changes-in-python-3-7-10"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[481, "what-s-new-in-python-3-6"]], "Summary -- Release highlights": [[481, "summary-release-highlights"], [483, "summary-release-highlights"], [480, "summary-release-highlights"], [478, "summary-release-highlights"], [476, "summary-release-highlights"], [484, "summary-release-highlights"]], "PEP 498: Formatted string literals": [[481, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[481, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[481, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[481, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[481, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[481, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[481, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[481, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[481, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[481, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[481, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[481, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[481, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[481, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[481, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[481, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[481, "dtrace-and-systemtap-probing-support"]], "secrets": [[481, "secrets"]], "array": [[481, "array"], [478, "array"], [476, "array"]], "ast": [[481, "ast"], [483, "ast"], [484, "ast"], [477, "ast"]], "cmath": [[481, "cmath"], [480, "cmath"]], "email": [[481, "email"], [480, "email"], [478, "email"], [479, "email"], [477, "email"]], "encodings": [[481, "encodings"], [476, "encodings"]], "faulthandler": [[481, "faulthandler"], [480, "faulthandler"], [478, "faulthandler"], [476, "faulthandler"]], "fileinput": [[481, "fileinput"], [476, "fileinput"]], "hashlib": [[481, "hashlib"], [476, "hashlib"], [484, "hashlib"], [479, "hashlib"], [477, "hashlib"]], "inspect": [[481, "inspect"], [483, "inspect"], [480, "inspect"], [478, "inspect"], [476, "inspect"], [484, "inspect"], [479, "inspect"], [477, "inspect"]], "json": [[481, "json"], [480, "json"]], "pickle": [[481, "pickle"], [483, "pickle"], [480, "pickle"], [478, "pickle"], [479, "pickle"]], "pickletools": [[481, "pickletools"]], "random": [[481, "random"], [484, "random"], [477, "random"]], "readline": [[481, "readline"], [480, "readline"]], "rlcompleter": [[481, "rlcompleter"]], "shlex": [[481, "shlex"], [483, "shlex"], [478, "shlex"]], "site": [[481, "site"], [476, "site"], [477, "site"]], "statistics": [[481, "statistics"], [483, "statistics"], [476, "statistics"], [479, "statistics"]], "struct": [[481, "struct"], [478, "struct"], [479, "struct"]], "telnetlib": [[481, "telnetlib"]], "timeit": [[481, "timeit"], [480, "timeit"]], "traceback": [[481, "traceback"], [480, "traceback"], [476, "traceback"], [479, "traceback"]], "typing": [[481, "typing"], [483, "typing"], [480, "typing"], [476, "typing"], [484, "typing"], [484, "id4"]], "urllib.request": [[481, "urllib-request"]], "urllib.robotparser": [[481, "urllib-robotparser"]], "venv": [[481, "venv"], [481, "id8"], [483, "venv"], [484, "venv"], [479, "venv"]], "winreg": [[481, "winreg"]], "winsound": [[481, "winsound"]], "xmlrpc.client": [[481, "xmlrpc-client"]], "Other Improvements": [[481, "other-improvements"], [479, "other-improvements"]], "Deprecated": [[481, "deprecated"], [483, "deprecated"], [480, "deprecated"], [478, "deprecated"], [476, "deprecated"], [476, "id3"], [484, "deprecated"], [479, "deprecated"]], "\u65b0\u95dc\u9375\u5b57": [[481, "new-keywords"]], "Deprecated Python behavior": [[481, "deprecated-python-behavior"]], "asynchat": [[481, "asynchat"]], "asyncore": [[481, "asyncore"], [477, "asyncore"]], "grp": [[481, "grp"]], "Deprecated Build Options": [[481, "deprecated-build-options"]], "Removed": [[481, "removed"], [480, "removed"], [476, "removed"], [476, "id4"], [484, "removed"], [484, "id3"], [479, "removed"]], "Porting to Python 3.6": [[481, "porting-to-python-3-6"]], "Changes in 'python' Command Behavior": [[481, "changes-in-python-command-behavior"], [479, "changes-in-python-command-behavior"]], "Notable changes in Python 3.6.2": [[481, "notable-changes-in-python-3-6-2"]], "Notable changes in Python 3.6.4": [[481, "notable-changes-in-python-3-6-4"]], "Notable changes in Python 3.6.5": [[481, "notable-changes-in-python-3-6-5"]], "Notable changes in Python 3.6.7": [[481, "notable-changes-in-python-3-6-7"]], "Notable changes in Python 3.6.10": [[481, "notable-changes-in-python-3-6-10"]], "Notable changes in Python 3.6.13": [[481, "notable-changes-in-python-3-6-13"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[483, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[483, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[483, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[483, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[483, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[483, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[483, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[483, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[483, "pickle-protocol-5-with-out-of-band-data-buffers"]], "New Modules": [[483, "new-modules"], [480, "new-modules"], [476, "new-modules"]], "builtins": [[483, "builtins"]], "csv": [[483, "csv"], [480, "csv"], [477, "csv"]], "curses": [[483, "curses"], [480, "curses"], [478, "curses"], [476, "curses"], [484, "curses"]], "ctypes": [[483, "ctypes"], [477, "ctypes"]], "gzip": [[483, "gzip"], [480, "gzip"]], "IDLE and idlelib": [[483, "idle-and-idlelib"], [476, "idle-and-idlelib"], [484, "idle-and-idlelib"]], "json.tool": [[483, "json-tool"]], "mmap": [[483, "mmap"], [478, "mmap"], [479, "mmap"]], "os.path": [[483, "os-path"], [476, "os-path"]], "plistlib": [[483, "plistlib"], [479, "plistlib"]], "pprint": [[483, "pprint"], [476, "pprint"], [484, "pprint"], [479, "pprint"]], "shutil": [[483, "shutil"], [480, "shutil"], [478, "shutil"], [479, "shutil"], [477, "shutil"]], "tarfile": [[483, "tarfile"], [480, "tarfile"], [478, "tarfile"], [479, "tarfile"], [477, "tarfile"]], "tokenize": [[483, "tokenize"]], "weakref": [[483, "weakref"], [479, "weakref"]], "xml": [[483, "xml"], [476, "xml"], [484, "xml"]], "xmlrpc": [[483, "xmlrpc"], [480, "xmlrpc"]], "Porting to Python 3.8": [[483, "porting-to-python-3-8"]], "Changes in Python behavior": [[483, "changes-in-python-behavior"], [480, "changes-in-python-behavior"]], "Demos and Tools": [[483, "demos-and-tools"]], "Notable changes in Python 3.8.1": [[483, "notable-changes-in-python-3-8-1"]], "Notable changes in Python 3.8.8": [[483, "notable-changes-in-python-3-8-8"]], "Notable changes in Python 3.8.12": [[483, "notable-changes-in-python-3-8-12"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[486, "what-s-new-in-python"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[485, "changelog"]], "Python next": [[485, "python-next"]], "Library": [[485, "library"], [485, "id2"], [485, "id5"], [485, "id10"], [485, "id18"], [485, "id25"], [485, "id27"], [485, "id36"], [485, "id43"], [485, "id53"], [485, "id61"], [485, "id68"], [485, "id77"], [485, "id84"], [485, "id92"], [485, "id103"], [485, "id113"], [485, "id122"], [485, "id132"], [485, "id141"], [485, "id150"], [485, "id161"], [485, "id171"], [485, "id181"], [485, "id191"], [485, "id202"], [485, "id213"], [485, "id221"], [485, "id228"], [485, "id238"], [485, "id249"], [485, "id260"], [485, "id271"], [485, "id280"], [485, "id287"], [485, "id296"], [485, "id299"], [485, "id305"], [485, "id312"], [485, "id322"], [485, "id333"], [485, "id342"], [485, "id350"], [485, "id357"], [485, "id367"], [485, "id374"], [485, "id383"], [485, "id396"], [485, "id406"], [485, "id415"], [485, "id419"], [485, "id429"], [485, "id440"], [485, "id452"], [485, "id457"], [485, "id462"], [485, "id467"], [485, "id473"], [485, "id481"], [485, "id488"], [485, "id497"], [485, "id507"], [485, "id517"], [485, "id518"], [485, "id521"], [485, "id529"], [485, "id542"], [485, "id552"], [485, "id560"], [485, "id563"], [485, "id565"], [485, "id567"], [485, "id572"], [485, "id575"], [485, "id580"], [485, "id582"], [485, "id588"], [485, "id594"], [485, "id599"], [485, "id604"]], "Tools/Demos": [[485, "tools-demos"], [485, "id16"], [485, "id23"], [485, "id50"], [485, "id73"], [485, "id99"], [485, "id146"], [485, "id157"], [485, "id187"], [485, "id198"], [485, "id209"], [485, "id245"], [485, "id256"], [485, "id267"], [485, "id277"], [485, "id294"], [485, "id319"], [485, "id329"], [485, "id340"], [485, "id354"], [485, "id364"], [485, "id380"], [485, "id390"], [485, "id403"], [485, "id413"], [485, "id425"], [485, "id434"], [485, "id448"], [485, "id455"], [485, "id478"], [485, "id492"], [485, "id504"], [485, "id513"], [485, "id534"], [485, "id548"], [485, "id558"], [485, "id586"], [485, "id591"], [485, "id597"], [485, "id610"]], "Python 3.10.8 final": [[485, "python-3-10-8-final"]], "Security": [[485, "security"], [485, "id3"], [485, "id8"], [485, "id59"], [485, "id66"], [485, "id75"], [485, "id90"], [485, "id101"], [485, "id111"], [485, "id120"], [485, "id130"], [485, "id148"], [485, "id159"], [485, "id169"], [485, "id179"], [485, "id189"], [485, "id200"], [485, "id211"], [485, "id226"], [485, "id236"], [485, "id247"], [485, "id258"], [485, "id269"], [485, "id285"], [485, "id320"], [485, "id331"], [485, "id372"], [485, "id394"], [485, "id417"], [485, "id426"], [485, "id427"], [485, "id486"], [485, "id495"], [485, "id505"], [485, "id515"], [485, "id519"], [485, "id527"], [485, "id540"]], "Core and Builtins": [[485, "core-and-builtins"], [485, "id4"], [485, "id9"], [485, "id17"], [485, "id24"], [485, "id26"], [485, "id35"], [485, "id42"], [485, "id52"], [485, "id60"], [485, "id67"], [485, "id76"], [485, "id83"], [485, "id91"], [485, "id102"], [485, "id112"], [485, "id121"], [485, "id131"], [485, "id140"], [485, "id149"], [485, "id160"], [485, "id170"], [485, "id180"], [485, "id190"], [485, "id201"], [485, "id212"], [485, "id220"], [485, "id227"], [485, "id237"], [485, "id248"], [485, "id259"], [485, "id270"], [485, "id279"], [485, "id286"], [485, "id298"], [485, "id304"], [485, "id311"], [485, "id321"], [485, "id332"], [485, "id341"], [485, "id349"], [485, "id356"], [485, "id366"], [485, "id373"], [485, "id382"], [485, "id395"], [485, "id405"], [485, "id418"], [485, "id428"], [485, "id437"], [485, "id439"], [485, "id447"], [485, "id451"], [485, "id456"], [485, "id461"], [485, "id466"], [485, "id472"], [485, "id480"], [485, "id487"], [485, "id496"], [485, "id506"], [485, "id516"], [485, "id520"], [485, "id528"], [485, "id537"], [485, "id541"], [485, "id549"], [485, "id551"], [485, "id562"], [485, "id564"], [485, "id566"], [485, "id571"], [485, "id574"], [485, "id579"], [485, "id581"], [485, "id587"], [485, "id593"], [485, "id598"], [485, "id603"]], "Documentation": [[485, "documentation"], [485, "id6"], [485, "id11"], [485, "id19"], [485, "id28"], [485, "id37"], [485, "id44"], [485, "id54"], [485, "id62"], [485, "id69"], [485, "id78"], [485, "id85"], [485, "id93"], [485, "id104"], [485, "id114"], [485, "id123"], [485, "id133"], [485, "id142"], [485, "id151"], [485, "id162"], [485, "id172"], [485, "id182"], [485, "id192"], [485, "id203"], [485, "id214"], [485, "id222"], [485, "id229"], [485, "id239"], [485, "id250"], [485, "id261"], [485, "id272"], [485, "id281"], [485, "id288"], [485, "id300"], [485, "id306"], [485, "id313"], [485, "id323"], [485, "id334"], [485, "id343"], [485, "id351"], [485, "id358"], [485, "id368"], [485, "id375"], [485, "id384"], [485, "id397"], [485, "id407"], [485, "id420"], [485, "id433"], [485, "id444"], [485, "id454"], [485, "id458"], [485, "id493"], [485, "id499"], [485, "id509"], [485, "id522"], [485, "id532"], [485, "id544"], [485, "id554"], [485, "id569"], [485, "id577"], [485, "id585"], [485, "id608"]], "Build": [[485, "build"], [485, "id7"], [485, "id13"], [485, "id21"], [485, "id30"], [485, "id39"], [485, "id46"], [485, "id56"], [485, "id80"], [485, "id87"], [485, "id95"], [485, "id106"], [485, "id116"], [485, "id125"], [485, "id135"], [485, "id144"], [485, "id153"], [485, "id164"], [485, "id174"], [485, "id184"], [485, "id194"], [485, "id205"], [485, "id216"], [485, "id223"], [485, "id231"], [485, "id241"], [485, "id252"], [485, "id263"], [485, "id274"], [485, "id290"], [485, "id301"], [485, "id308"], [485, "id315"], [485, "id325"], [485, "id336"], [485, "id345"], [485, "id360"], [485, "id369"], [485, "id377"], [485, "id386"], [485, "id393"], [485, "id399"], [485, "id409"], [485, "id416"], [485, "id422"], [485, "id432"], [485, "id438"], [485, "id446"], [485, "id450"], [485, "id460"], [485, "id464"], [485, "id470"], [485, "id477"], [485, "id485"], [485, "id491"], [485, "id502"], [485, "id511"], [485, "id524"], [485, "id536"], [485, "id546"], [485, "id556"], [485, "id559"], [485, "id561"], [485, "id573"], [485, "id578"], [485, "id589"], [485, "id595"], [485, "id600"], [485, "id606"]], "Windows": [[485, "windows"], [485, "id14"], [485, "id22"], [485, "id31"], [485, "id47"], [485, "id64"], [485, "id71"], [485, "id81"], [485, "id96"], [485, "id107"], [485, "id117"], [485, "id126"], [485, "id136"], [485, "id154"], [485, "id165"], [485, "id175"], [485, "id185"], [485, "id195"], [485, "id206"], [485, "id217"], [485, "id232"], [485, "id242"], [485, "id253"], [485, "id264"], [485, "id275"], [485, "id283"], [485, "id291"], [485, "id302"], [485, "id316"], [485, "id326"], [485, "id337"], [485, "id346"], [485, "id353"], [485, "id361"], [485, "id378"], [485, "id387"], [485, "id400"], [485, "id410"], [485, "id423"], [485, "id436"], [485, "id442"], [485, "id449"], [485, "id463"], [485, "id468"], [485, "id479"], [485, "id484"], [485, "id501"], [485, "id512"], [485, "id525"], [485, "id535"], [485, "id547"], [485, "id550"], [485, "id557"], [485, "id602"], [485, "id611"], [137, "windows"]], "macOS": [[485, "macos"], [485, "id32"], [485, "id40"], [485, "id48"], [485, "id65"], [485, "id72"], [485, "id97"], [485, "id108"], [485, "id127"], [485, "id137"], [485, "id145"], [485, "id155"], [485, "id166"], [485, "id176"], [485, "id186"], [485, "id196"], [485, "id207"], [485, "id233"], [485, "id243"], [485, "id254"], [485, "id265"], [485, "id292"], [485, "id309"], [485, "id317"], [485, "id327"], [485, "id338"], [485, "id347"], [485, "id362"], [485, "id388"], [485, "id401"], [485, "id411"], [137, "macos"]], "Python 3.10.7 final": [[485, "python-3-10-7-final"]], "Tests": [[485, "tests"], [485, "id12"], [485, "id20"], [485, "id29"], [485, "id38"], [485, "id45"], [485, "id55"], [485, "id63"], [485, "id70"], [485, "id79"], [485, "id86"], [485, "id94"], [485, "id105"], [485, "id115"], [485, "id124"], [485, "id134"], [485, "id143"], [485, "id152"], [485, "id163"], [485, "id173"], [485, "id183"], [485, "id193"], [485, "id204"], [485, "id215"], [485, "id230"], [485, "id240"], [485, "id251"], [485, "id262"], [485, "id273"], [485, "id282"], [485, "id289"], [485, "id307"], [485, "id314"], [485, "id324"], [485, "id335"], [485, "id344"], [485, "id352"], [485, "id359"], [485, "id376"], [485, "id385"], [485, "id392"], [485, "id398"], [485, "id408"], [485, "id421"], [485, "id435"], [485, "id445"], [485, "id459"], [485, "id465"], [485, "id471"], [485, "id476"], [485, "id483"], [485, "id494"], [485, "id500"], [485, "id510"], [485, "id523"], [485, "id533"], [485, "id538"], [485, "id545"], [485, "id555"], [485, "id570"], [485, "id576"], [485, "id584"], [485, "id590"], [485, "id596"], [485, "id609"]], "Python 3.10.6 final": [[485, "python-3-10-6-final"]], "C API": [[485, "c-api"], [485, "id34"], [485, "id41"], [485, "id51"], [485, "id58"], [485, "id74"], [485, "id82"], [485, "id89"], [485, "id100"], [485, "id110"], [485, "id119"], [485, "id129"], [485, "id139"], [485, "id147"], [485, "id158"], [485, "id168"], [485, "id178"], [485, "id188"], [485, "id199"], [485, "id210"], [485, "id219"], [485, "id225"], [485, "id235"], [485, "id246"], [485, "id257"], [485, "id268"], [485, "id278"], [485, "id295"], [485, "id297"], [485, "id330"], [485, "id348"], [485, "id355"], [485, "id365"], [485, "id371"], [485, "id381"], [485, "id391"], [485, "id404"], [485, "id414"], [485, "id431"], [485, "id443"], [485, "id453"], [485, "id469"], [485, "id475"], [485, "id490"], [485, "id503"], [485, "id514"], [485, "id526"], [485, "id531"], [485, "id592"], [485, "id601"], [485, "id607"]], "Python 3.10.5 final": [[485, "python-3-10-5-final"]], "Python 3.10.4 final": [[485, "python-3-10-4-final"]], "Python 3.10.3 final": [[485, "python-3-10-3-final"]], "Python 3.10.2 final": [[485, "python-3-10-2-final"]], "Python 3.10.1 final": [[485, "python-3-10-1-final"]], "Python 3.10.0 final": [[485, "python-3-10-0-final"]], "Python 3.10.0 release candidate 2": [[485, "python-3-10-0-release-candidate-2"]], "Python 3.10.0 release candidate 1": [[485, "python-3-10-0-release-candidate-1"]], "Python 3.10.0 beta 4": [[485, "python-3-10-0-beta-4"]], "Python 3.10.0 beta 3": [[485, "python-3-10-0-beta-3"]], "Python 3.10.0 beta 2": [[485, "python-3-10-0-beta-2"]], "Python 3.10.0 beta 1": [[485, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[485, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[485, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[485, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[485, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[485, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[485, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[485, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[485, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[485, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[485, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[485, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[485, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[485, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[485, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[485, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[485, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[485, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[485, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[485, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[485, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[485, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[485, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[485, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[485, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[485, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[485, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[485, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[485, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[485, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[485, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[485, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[485, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[485, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[485, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[485, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[485, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[485, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[485, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[485, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[485, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[485, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[485, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[485, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[485, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[485, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[485, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[485, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[485, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[485, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[485, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[485, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[485, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[485, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[485, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[485, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[485, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[485, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[485, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[485, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[485, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[485, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[485, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[485, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[485, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[485, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[485, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[485, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[485, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[485, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[485, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[485, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[485, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[485, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[485, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[485, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[485, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[485, "python-3-5-0-alpha-1"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[480, "what-s-new-in-python-3-5"], [479, "what-s-new-in-python-3-4"]], "PEP 492 - Coroutines with async and await syntax": [[480, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[480, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[480, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[480, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[480, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[480, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[480, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[480, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[480, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[480, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[480, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[480, "pep-489-multi-phase-extension-module-initialization"]], "bz2": [[480, "bz2"], [478, "bz2"]], "cgi": [[480, "cgi"]], "code": [[480, "code"]], "collections.abc": [[480, "collections-abc"], [476, "collections-abc"], [484, "collections-abc"]], "configparser": [[480, "configparser"], [477, "configparser"]], "difflib": [[480, "difflib"]], "glob": [[480, "glob"], [476, "glob"], [479, "glob"]], "heapq": [[480, "heapq"]], "http": [[480, "http"], [478, "http"], [484, "http"], [479, "http"]], "imaplib": [[480, "imaplib"], [478, "imaplib"], [484, "imaplib"], [477, "imaplib"]], "imghdr": [[480, "imghdr"]], "linecache": [[480, "linecache"], [476, "linecache"]], "lzma": [[480, "lzma"], [478, "lzma"]], "operator": [[480, "operator"], [479, "operator"]], "poplib": [[480, "poplib"], [484, "poplib"], [479, "poplib"], [477, "poplib"]], "selectors": [[480, "selectors"], [479, "selectors"]], "smtpd": [[480, "smtpd"], [478, "smtpd"], [479, "smtpd"]], "smtplib": [[480, "smtplib"], [478, "smtplib"], [484, "smtplib"], [479, "smtplib"]], "sndhdr": [[480, "sndhdr"]], "Memory BIO Support": [[480, "memory-bio-support"], [348, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[480, "application-layer-protocol-negotiation-support"]], "Other Changes": [[480, "other-changes"]], "sysconfig": [[480, "sysconfig"], [477, "sysconfig"]], "urllib": [[480, "urllib"], [478, "urllib"], [479, "urllib"]], "wsgiref": [[480, "wsgiref"]], "xml.sax": [[480, "xml-sax"]], "Other module-level changes": [[480, "other-module-level-changes"]], "New Keywords": [[480, "new-keywords"]], "Unsupported Operating Systems": [[480, "unsupported-operating-systems"], [478, "unsupported-operating-systems"]], "Porting to Python 3.5": [[480, "porting-to-python-3-5"]], "Notable changes in Python 3.5.4": [[480, "notable-changes-in-python-3-5-4"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[478, "what-s-new-in-python-3-3"]], "PEP 405: Virtual Environments": [[478, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[478, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[478, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "Features": [[478, "features"], [478, "id1"], [287, "features"]], "API changes": [[478, "api-changes"], [478, "id2"]], "PEP 393: Flexible String Representation": [[478, "pep-393-flexible-string-representation"]], "Functionality": [[478, "functionality"]], "Performance and resource usage": [[478, "performance-and-resource-usage"]], "PEP 397: Python Launcher for Windows": [[478, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[478, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[478, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[478, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[478, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[478, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[478, "pep-412-key-sharing-dictionary"]], "PEP 362: Function Signature Object": [[478, "pep-362-function-signature-object"]], "PEP 421: Adding sys.implementation": [[478, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[478, "simplenamespace"]], "Using importlib as the Implementation of Import": [[478, "using-importlib-as-the-implementation-of-import"]], "New APIs": [[478, "new-apis"]], "Visible Changes": [[478, "visible-changes"]], "A Finer-Grained Import Lock": [[478, "a-finer-grained-import-lock"]], "Builtin functions and types": [[478, "builtin-functions-and-types"]], "abc": [[478, "abc"], [479, "abc"], [477, "abc"]], "base64": [[478, "base64"], [476, "base64"], [479, "base64"]], "codecs": [[478, "codecs"], [476, "codecs"]], "Policy Framework": [[478, "policy-framework"]], "Provisional Policy with New Header API": [[478, "provisional-policy-with-new-header-api"]], "Other API Changes": [[478, "other-api-changes"]], "ftplib": [[478, "ftplib"], [484, "ftplib"]], "html": [[478, "html"], [479, "html"], [477, "html"]], "nntplib": [[478, "nntplib"], [484, "nntplib"]], "sched": [[478, "sched"]], "select": [[478, "select"], [479, "select"], [477, "select"]], "stat": [[478, "stat"], [479, "stat"]], "tempfile": [[478, "tempfile"], [477, "tempfile"]], "textwrap": [[478, "textwrap"], [479, "textwrap"]], "webbrowser": [[478, "webbrowser"]], "xml.etree.ElementTree": [[478, "xml-etree-elementtree"]], "Deprecated features": [[478, "deprecated-features"]], "Porting to Python 3.3": [[478, "porting-to-python-3-3"]], "Porting Python code": [[478, "porting-python-code"]], "Porting C code": [[478, "porting-c-code"]], "Building C extensions": [[478, "building-c-extensions"]], "Command Line Switch Changes": [[478, "command-line-switch-changes"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[476, "what-s-new-in-python-3-10"]], "Parenthesized context managers": [[476, "parenthesized-context-managers"]], "Better error messages": [[476, "better-error-messages"]], "SyntaxErrors": [[476, "syntaxerrors"]], "IndentationErrors": [[476, "indentationerrors"]], "AttributeErrors": [[476, "attributeerrors"]], "NameErrors": [[476, "nameerrors"]], "PEP 626: Precise line numbers for debugging and other tools": [[476, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634: Structural Pattern Matching": [[476, "pep-634-structural-pattern-matching"]], "Syntax and operations": [[476, "syntax-and-operations"]], "Declarative approach": [[476, "declarative-approach"]], "Simple pattern: match to a literal": [[476, "simple-pattern-match-to-a-literal"]], "Behavior without the wildcard": [[476, "behavior-without-the-wildcard"]], "Patterns with a literal and variable": [[476, "patterns-with-a-literal-and-variable"]], "Patterns and classes": [[476, "patterns-and-classes"]], "Patterns with positional parameters": [[476, "patterns-with-positional-parameters"]], "Nested patterns": [[476, "nested-patterns"]], "Complex patterns and the wildcard": [[476, "complex-patterns-and-the-wildcard"]], "Guard": [[476, "guard"]], "Other Key Features": [[476, "other-key-features"]], "Optional EncodingWarning and encoding=\"locale\" option": [[476, "optional-encodingwarning-and-encoding-locale-option"]], "New Features Related to Type Hints": [[476, "new-features-related-to-type-hints"]], "PEP 604: New Type Union Operator": [[476, "pep-604-new-type-union-operator"]], "PEP 612: Parameter Specification Variables": [[476, "pep-612-parameter-specification-variables"]], "PEP 613: TypeAlias": [[476, "pep-613-typealias"]], "PEP 647: User-Defined Type Guards": [[476, "pep-647-user-defined-type-guards"]], "asynchat, asyncore, smtpd": [[476, "asynchat-asyncore-smtpd"]], "bdb": [[476, "bdb"]], "bisect": [[476, "bisect"]], "Keyword-only fields": [[476, "keyword-only-fields"]], "importlib.metadata": [[476, "importlib-metadata"]], "platform": [[476, "platform"]], "pyclbr": [[476, "pyclbr"]], "shelve": [[476, "shelve"], [479, "shelve"]], "_thread": [[476, "thread"]], "zipimport": [[476, "zipimport"]], "Porting to Python 3.10": [[476, "porting-to-python-3-10"], [476, "id2"]], "Changes in the Python syntax": [[476, "changes-in-the-python-syntax"]], "PEP 652: Maintaining the Stable ABI": [[476, "pep-652-maintaining-the-stable-abi"]], "Notable security feature in 3.10.7": [[476, "notable-security-feature-in-3-10-7"]], "Notable security feature in 3.10.8": [[476, "notable-security-feature-in-3-10-8"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[484, "what-s-new-in-python-3-9"]], "You should check for DeprecationWarning in your code": [[484, "you-should-check-for-deprecationwarning-in-your-code"]], "Dictionary Merge & Update Operators": [[484, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[484, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[484, "type-hinting-generics-in-standard-collections"]], "New Parser": [[484, "new-parser"]], "zoneinfo": [[484, "zoneinfo"]], "graphlib": [[484, "graphlib"]], "fcntl": [[484, "fcntl"]], "Porting to Python 3.9": [[484, "porting-to-python-3-9"], [484, "id2"]], "Notable changes in Python 3.9.1": [[484, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[484, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Notable changes in Python 3.9.2": [[484, "notable-changes-in-python-3-9-2"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[479, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[479, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[479, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[479, "pep-451-a-modulespec-type-for-the-import-system"]], "ensurepip": [[479, "ensurepip"]], "audioop": [[479, "audioop"]], "colorsys": [[479, "colorsys"]], "filecmp": [[479, "filecmp"]], "marshal": [[479, "marshal"]], "pty": [[479, "pty"]], "resource": [[479, "resource"]], "CPython Implementation Changes": [[479, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[479, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[479, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[479, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[479, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[479, "other-build-and-c-api-changes"]], "Significant Optimizations": [[479, "significant-optimizations"]], "Deprecations in the Python API": [[479, "deprecations-in-the-python-api"]], "Deprecated Features": [[479, "deprecated-features"]], "Operating Systems No Longer Supported": [[479, "operating-systems-no-longer-supported"]], "Code Cleanups": [[479, "code-cleanups"]], "Porting to Python 3.4": [[479, "porting-to-python-3-4"]], "Changed in 3.4.3": [[479, "changed-in-3-4-3"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[477, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[477, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[477, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[477, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[477, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[477, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[477, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "elementtree": [[477, "elementtree"]], "datetime \u548c time": [[477, "datetime-and-time"]], "reprlib": [[477, "reprlib"]], "decimal and fractions": [[477, "decimal-and-fractions"]], "ftp": [[477, "ftp"]], "popen": [[477, "popen"]], "gzip \u548c zipfile": [[477, "gzip-and-zipfile"]], "nntp": [[477, "nntp"]], "certificates": [[477, "certificates"]], "mailbox": [[477, "mailbox"]], "turtledemo": [[477, "turtledemo"]], "Multi-threading": [[477, "multi-threading"], [264, "multi-threading"]], "Codecs": [[477, "codecs"]], "\u6587\u4ef6": [[477, "documentation"]], "Code Repository": [[477, "code-repository"]], "Porting to Python 3.2": [[477, "porting-to-python-3-2"]], "stat --- Interpreting stat() results": [[349, "module-stat"]], "termios --- POSIX style tty control": [[366, "module-termios"]], "\u4ee5 Tk \u6253\u9020 GUI": [[373, "graphical-user-interfaces-with-tk"]], "time --- Time access and conversions": [[371, "module-time"]], "Clock ID Constants": [[371, "clock-id-constants"]], "Timezone Constants": [[371, "timezone-constants"]], "socketserver --- A framework for network servers": [[345, "module-socketserver"]], "Server Creation Notes": [[345, "server-creation-notes"]], "Request Handler Objects": [[345, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[345, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[345, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[345, "asynchronous-mixins"]], "stringprep --- Internet String Preparation": [[353, "module-stringprep"]], "timeit --- Measure execution time of small code snippets": [[372, "module-timeit"]], "\u57fa\u790e\u7bc4\u4f8b": [[372, "basic-examples"], [243, "basic-examples"]], "Python Interface": [[372, "python-interface"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[356, "module-sunau"]], "AU_read \u7269\u4ef6": [[356, "au-read-objects"]], "AU_write \u7269\u4ef6": [[356, "au-write-objects"]], "symtable --- Access to the compiler's symbol tables": [[358, "module-symtable"]], "Generating Symbol Tables": [[358, "generating-symbol-tables"]], "Examining Symbol Tables": [[358, "examining-symbol-tables"]], "syslog --- Unix syslog library routines": [[361, "module-syslog"]], "tarfile --- Read and write tar archive files": [[363, "module-tarfile"]], "TarFile \u7269\u4ef6": [[363, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[363, "tarinfo-objects"]], "Supported tar formats": [[363, "supported-tar-formats"]], "Unicode issues": [[363, "unicode-issues"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[368, "text-processing-services"]], "smtplib --- SMTP protocol client": [[342, "module-smtplib"]], "SMTP \u7269\u4ef6": [[342, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[342, "smtp-example"]], "textwrap --- Text wrapping and filling": [[369, "module-textwrap"]], "socket --- Low-level networking interface": [[344, "module-socket"]], "Socket families": [[344, "socket-families"]], "Creating sockets": [[344, "creating-sockets"]], "Other functions": [[344, "other-functions"]], "Socket Objects": [[344, "socket-objects"]], "Notes on socket timeouts": [[344, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[344, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[344, "timeouts-and-the-accept-method"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[343, "module-sndhdr"]], "smtpd --- SMTP \u4f3a\u670d\u5668": [[341, "module-smtpd"]], "SMTPServer \u7269\u4ef6": [[341, "smtpserver-objects"]], "DebuggingServer \u7269\u4ef6": [[341, "debuggingserver-objects"]], "PureProxy \u7269\u4ef6": [[341, "pureproxy-objects"]], "MailmanProxy \u7269\u4ef6": [[341, "mailmanproxy-objects"]], "SMTPChannel \u7269\u4ef6": [[341, "smtpchannel-objects"]], "test --- Regression tests package for Python": [[367, "module-test"]], "Writing Unit Tests for the test package": [[367, "writing-unit-tests-for-the-test-package"]], "Running tests using the command-line interface": [[367, "running-tests-using-the-command-line-interface"]], "test.support --- Utilities for the Python test suite": [[367, "module-test.support"]], "test.support.socket_helper --- Utilities for socket tests": [[367, "module-test.support.socket_helper"]], "test.support.script_helper --- Utilities for the Python execution tests": [[367, "module-test.support.script_helper"]], "test.support.bytecode_helper --- Support tools for testing correct bytecode generation": [[367, "module-test.support.bytecode_helper"]], "test.support.threading_helper --- Utilities for threading tests": [[367, "module-test.support.threading_helper"]], "test.support.os_helper --- Utilities for os tests": [[367, "module-test.support.os_helper"]], "test.support.import_helper --- Utilities for import tests": [[367, "module-test.support.import_helper"]], "test.support.warnings_helper --- Utilities for warnings tests": [[367, "module-test.support.warnings_helper"]], "struct --- Interpret bytes as packed binary data": [[354, "module-struct"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[354, "functions-and-exceptions"]], "Format Strings": [[354, "format-strings"]], "Byte Order, Size, and Alignment": [[354, "byte-order-size-and-alignment"]], "Format Characters": [[354, "format-characters"]], "sys --- System-specific parameters and functions": [[359, "module-sys"]], "\u5167\u5efa\u578b\u5225": [[351, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[351, "truth-value-testing"]], "Boolean Operations --- and, or, not": [[351, "boolean-operations-and-or-not"]], "Numeric Types --- int, float, complex": [[351, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[351, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[351, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[351, "additional-methods-on-float"]], "Hashing of numeric types": [[351, "hashing-of-numeric-types"]], "Iterator Types": [[351, "iterator-types"]], "Generator Types": [[351, "generator-types"]], "Sequence Types --- list, tuple, range": [[351, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[351, "common-sequence-operations"]], "Immutable Sequence Types": [[351, "immutable-sequence-types"]], "Mutable Sequence Types": [[351, "mutable-sequence-types"]], "Tuples": [[351, "tuples"]], "Ranges": [[351, "ranges"]], "Text Sequence Type --- str": [[351, "text-sequence-type-str"]], "printf-style String Formatting": [[351, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[351, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytearray Objects": [[351, "bytearray-objects"]], "Bytes and Bytearray Operations": [[351, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[351, "printf-style-bytes-formatting"]], "Memory Views": [[351, "memory-views"]], "Set Types --- set, frozenset": [[351, "set-types-set-frozenset"]], "Mapping Types --- dict": [[351, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[351, "dictionary-view-objects"]], "Context Manager Types": [[351, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[351, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[351, "generic-alias-type"]], "Standard Generic Classes": [[351, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[351, "special-attributes-of-genericalias-objects"]], "Union Type": [[351, "union-type"]], "Other Built-in Types": [[351, "other-built-in-types"]], "Classes and Class Instances": [[351, "classes-and-class-instances"]], "The Null Object": [[351, "the-null-object"]], "The Ellipsis Object": [[351, "the-ellipsis-object"]], "The NotImplemented Object": [[351, "the-notimplemented-object"]], "Boolean Values": [[351, "boolean-values"]], "Internal Objects": [[351, "internal-objects"]], "Special Attributes": [[351, "special-attributes"]], "Integer string conversion length limitation": [[351, "integer-string-conversion-length-limitation"]], "Affected APIs": [[351, "affected-apis"]], "Configuring the limit": [[351, "configuring-the-limit"]], "Recommended configuration": [[351, "recommended-configuration"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[365, "module-tempfile"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[365, "deprecated-functions-and-variables"]], "subprocess --- Subprocess management": [[355, "module-subprocess"]], "Using the subprocess Module": [[355, "using-the-subprocess-module"]], "Frequently Used Arguments": [[355, "frequently-used-arguments"]], "Popen Constructor": [[355, "popen-constructor"]], "Popen Objects": [[355, "popen-objects"]], "Windows Popen Helpers": [[355, "windows-popen-helpers"]], "Windows Constants": [[355, "windows-constants"]], "Older high-level API": [[355, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[355, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[355, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[355, "replacing-shell-pipeline"]], "Replacing os.system()": [[355, "replacing-os-system"]], "Replacing the os.spawn family": [[355, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[355, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[355, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[355, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[355, "converting-an-argument-sequence-to-a-string-on-windows"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[357, "superseded-modules"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[346, "module-spwd"]], "site --- Site-specific configuration hook": [[340, "module-site"]], "Readline configuration": [[340, "readline-configuration"]], "Command Line Interface": [[340, "command-line-interface"], [268, "module-json.tool"], [241, "command-line-interface"], [261, "command-line-interface"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[350, "module-statistics"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[350, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[350, "measures-of-spread"]], "Statistics for relations between two inputs": [[350, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[350, "function-details"]], "NormalDist \u7269\u4ef6": [[350, "normaldist-objects"]], "NormalDist Examples and Recipes": [[350, "normaldist-examples-and-recipes"]], "threading --- Thread-based parallelism": [[370, "module-threading"]], "Thread-Local Data": [[370, "thread-local-data"]], "Thread Objects": [[370, "thread-objects"]], "Lock Objects": [[370, "lock-objects"]], "RLock \u7269\u4ef6": [[370, "rlock-objects"]], "Condition Objects": [[370, "condition-objects"]], "Semaphore Objects": [[370, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[370, "semaphore-example"]], "Event Objects": [[370, "event-objects"]], "Timer Objects": [[370, "timer-objects"]], "Barrier Objects": [[370, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[370, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "string --- Common string operations": [[352, "module-string"]], "String constants": [[352, "string-constants"]], "Custom String Formatting": [[352, "custom-string-formatting"]], "Format String Syntax": [[352, "format-string-syntax"]], "Format Specification Mini-Language": [[352, "format-specification-mini-language"]], "Format examples": [[352, "format-examples"]], "Template strings": [[352, "template-strings"]], "Helper functions": [[352, "helper-functions"]], "sqlite3 --- DB-API 2.0 interface for SQLite databases": [[347, "module-sqlite3"]], "Module functions": [[347, "module-functions"]], "Module constants": [[347, "module-constants"]], "Connection objects": [[347, "connection-objects"]], "Cursor objects": [[347, "cursor-objects"]], "Row objects": [[347, "row-objects"]], "PrepareProtocol objects": [[347, "prepareprotocol-objects"]], "SQLite and Python types": [[347, "sqlite-and-python-types"]], "Default adapters and converters": [[347, "default-adapters-and-converters"]], "How-to guides": [[347, "how-to-guides"]], "How to use placeholders to bind values in SQL queries": [[347, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[347, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[347, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[347, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[347, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[347, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[347, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[347, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[347, "how-to-work-with-sqlite-uris"]], "\u89e3\u91cb": [[347, "explanation"]], "Transaction control": [[347, "transaction-control"]], "sysconfig --- Provide access to Python's configuration information": [[360, "module-sysconfig"]], "Configuration variables": [[360, "configuration-variables"]], "Installation paths": [[360, "installation-paths"]], "Using sysconfig as a script": [[360, "using-sysconfig-as-a-script"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[364, "module-telnetlib"]], "Telnet Objects": [[364, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[364, "telnet-example"]], "tabnanny --- Detection of ambiguous indentation": [[362, "module-tabnanny"]], "ssl --- TLS/SSL wrapper for socket objects": [[348, "module-ssl"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[348, "functions-constants-and-exceptions"]], "Socket creation": [[348, "socket-creation"]], "Context creation": [[348, "context-creation"]], "Random generation": [[348, "random-generation"]], "Certificate handling": [[348, "certificate-handling"]], "SSL Sockets": [[348, "ssl-sockets"]], "SSL Contexts": [[348, "ssl-contexts"]], "Certificates": [[348, "certificates"]], "Certificate chains": [[348, "certificate-chains"]], "CA certificates": [[348, "ca-certificates"]], "Combined key and certificate": [[348, "combined-key-and-certificate"]], "Self-signed certificates": [[348, "self-signed-certificates"]], "Testing for SSL support": [[348, "testing-for-ssl-support"]], "Client-side operation": [[348, "client-side-operation"]], "Server-side operation": [[348, "server-side-operation"]], "Notes on non-blocking sockets": [[348, "notes-on-non-blocking-sockets"]], "SSL session": [[348, "ssl-session"]], "Security considerations": [[348, "security-considerations"], [274, "security-considerations"]], "Best defaults": [[348, "best-defaults"]], "Manual settings": [[348, "manual-settings"]], "Verifying certificates": [[348, "verifying-certificates"]], "Protocol versions": [[348, "protocol-versions"]], "Cipher selection": [[348, "cipher-selection"]], "Multi-processing": [[348, "multi-processing"]], "TLS 1.3": [[348, "tls-1-3"]], "os --- Miscellaneous operating system interfaces": [[299, "module-os"]], "File Names, Command Line Arguments, and Environment Variables": [[299, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[299, "python-utf-8-mode"]], "Process Parameters": [[299, "process-parameters"]], "File Object Creation": [[299, "file-object-creation"]], "File Descriptor Operations": [[299, "file-descriptor-operations"]], "Querying the size of a terminal": [[299, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[299, "inheritance-of-file-descriptors"]], "Files and Directories": [[299, "files-and-directories"]], "Linux extended attributes": [[299, "linux-extended-attributes"]], "Process Management": [[299, "process-management"]], "Interface to the scheduler": [[299, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[299, "miscellaneous-system-information"]], "Random numbers": [[299, "random-numbers"]], "Data Persistence": [[304, "data-persistence"]], "logging.config --- Logging configuration": [[274, "module-logging.config"]], "Important": [[274, null], [275, null], [273, "index-0"]], "Configuration functions": [[274, "configuration-functions"]], "Configuration dictionary schema": [[274, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[274, "dictionary-schema-details"]], "Incremental Configuration": [[274, "incremental-configuration"]], "Object connections": [[274, "object-connections"]], "User-defined objects": [[274, "user-defined-objects"]], "Access to external objects": [[274, "access-to-external-objects"]], "Access to internal objects": [[274, "access-to-internal-objects"]], "Import resolution and custom importers": [[274, "import-resolution-and-custom-importers"]], "Configuration file format": [[274, "configuration-file-format"]], "modulefinder --- Find modules used by a script": [[285, "module-modulefinder"]], "Example usage of ModuleFinder": [[285, "example-usage-of-modulefinder"]], "os.path --- Common pathname manipulations": [[300, "module-os.path"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[301, "module-ossaudiodev"]], "Audio Device Objects": [[301, "audio-device-objects"]], "Mixer Device Objects": [[301, "mixer-device-objects"]], "netrc --- netrc file processing": [[292, "module-netrc"]], "netrc \u7269\u4ef6": [[292, "netrc-objects"]], "pdb --- The Python Debugger": [[303, "module-pdb"]], "Debugger Commands": [[303, "debugger-commands"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[287, "module-msilib"]], "Database Objects": [[287, "database-objects"]], "View Objects": [[287, "view-objects"]], "Summary Information Objects": [[287, "summary-information-objects"]], "Record Objects": [[287, "record-objects"]], "Errors": [[287, "errors"]], "CAB \u7269\u4ef6": [[287, "cab-objects"]], "Directory Objects": [[287, "directory-objects"]], "GUI classes": [[287, "gui-classes"]], "Precomputed tables": [[287, "precomputed-tables"]], "optparse --- Parser for command line options": [[298, "module-optparse"]], "Background": [[298, "background"]], "Terminology": [[298, "terminology"]], "What are options for?": [[298, "what-are-options-for"]], "What are positional arguments for?": [[298, "what-are-positional-arguments-for"]], "Understanding option actions": [[298, "understanding-option-actions"]], "The store action": [[298, "the-store-action"]], "Handling boolean (flag) options": [[298, "handling-boolean-flag-options"]], "Other actions": [[298, "other-actions"]], "Default values": [[298, "default-values"]], "Generating help": [[298, "generating-help"]], "Grouping Options": [[298, "grouping-options"]], "Printing a version string": [[298, "printing-a-version-string"]], "How optparse handles errors": [[298, "how-optparse-handles-errors"]], "Putting it all together": [[298, "putting-it-all-together"]], "Reference Guide": [[298, "reference-guide"]], "Creating the parser": [[298, "creating-the-parser"]], "Populating the parser": [[298, "populating-the-parser"]], "Defining options": [[298, "defining-options"]], "Option attributes": [[298, "option-attributes"]], "Standard option actions": [[298, "standard-option-actions"]], "Standard option types": [[298, "standard-option-types"]], "Querying and manipulating your option parser": [[298, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[298, "conflicts-between-options"]], "Cleanup": [[298, "cleanup"], [289, "cleanup"]], "Other methods": [[298, "other-methods"]], "Option Callbacks": [[298, "option-callbacks"]], "Defining a callback option": [[298, "defining-a-callback-option"]], "How callbacks are called": [[298, "how-callbacks-are-called"]], "Raising errors in a callback": [[298, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[298, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[298, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[298, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[298, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[298, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[298, "callback-example-6-variable-arguments"]], "Extending optparse": [[298, "extending-optparse"]], "Adding new types": [[298, "adding-new-types"]], "Adding new actions": [[298, "adding-new-actions"]], "pickle --- Python object serialization": [[305, "module-pickle"]], "Relationship to other Python modules": [[305, "relationship-to-other-python-modules"]], "Comparison with marshal": [[305, "comparison-with-marshal"]], "Comparison with json": [[305, "comparison-with-json"]], "Data stream format": [[305, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[305, "module-interface"]], "What can be pickled and unpickled?": [[305, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[305, "pickling-class-instances"]], "Persistence of External Objects": [[305, "persistence-of-external-objects"]], "Dispatch Tables": [[305, "dispatch-tables"]], "Handling Stateful Objects": [[305, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[305, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[305, "out-of-band-buffers"]], "Provider API": [[305, "provider-api"]], "Consumer API": [[305, "consumer-api"]], "Restricting Globals": [[305, "restricting-globals"]], "Structured Markup Processing Tools": [[279, "structured-markup-processing-tools"]], "mimetypes --- Map filenames to MIME types": [[282, "module-mimetypes"]], "MimeTypes \u7269\u4ef6": [[282, "mimetypes-objects"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[293, "module-nis"]], "lzma --- Compression using the LZMA algorithm": [[276, "module-lzma"]], "Reading and writing compressed files": [[276, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[276, "compressing-and-decompressing-data-in-memory"]], "Miscellaneous": [[276, "miscellaneous"], [289, "miscellaneous"]], "Specifying custom filter chains": [[276, "specifying-custom-filter-chains"]], "locale --- Internationalization services": [[272, "module-locale"]], "Background, details, hints, tips and caveats": [[272, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[272, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[272, "access-to-message-catalogs"]], "logging.handlers --- Logging handlers": [[275, "module-logging.handlers"]], "StreamHandler": [[275, "streamhandler"]], "FileHandler": [[275, "filehandler"]], "NullHandler": [[275, "nullhandler"]], "WatchedFileHandler": [[275, "watchedfilehandler"]], "BaseRotatingHandler": [[275, "baserotatinghandler"]], "RotatingFileHandler": [[275, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[275, "timedrotatingfilehandler"]], "SocketHandler": [[275, "sockethandler"]], "DatagramHandler": [[275, "datagramhandler"]], "SysLogHandler": [[275, "sysloghandler"]], "NTEventLogHandler": [[275, "nteventloghandler"]], "SMTPHandler": [[275, "smtphandler"]], "MemoryHandler": [[275, "memoryhandler"]], "HTTPHandler": [[275, "httphandler"]], "QueueHandler": [[275, "queuehandler"]], "QueueListener": [[275, "queuelistener"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[288, "module-msvcrt"]], "File Operations": [[288, "file-operations"]], "Console I/O": [[288, "console-i-o"]], "Other Functions": [[288, "other-functions"]], "logging --- Logging facility for Python": [[273, "module-logging"]], "Logger Objects": [[273, "logger-objects"]], "Handler Objects": [[273, "handler-objects"]], "Formatter Objects": [[273, "formatter-objects"]], "Filter Objects": [[273, "filter-objects"]], "LogRecord \u7269\u4ef6": [[273, "logrecord-objects"]], "LogRecord attributes": [[273, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[273, "loggeradapter-objects"]], "Thread Safety": [[273, "thread-safety"]], "Module-Level Attributes": [[273, "module-level-attributes"]], "Integration with the warnings module": [[273, "integration-with-the-warnings-module"]], "numbers --- Numeric abstract base classes": [[295, "module-numbers"]], "The numeric tower": [[295, "the-numeric-tower"]], "Notes for type implementors": [[295, "notes-for-type-implementors"]], "Adding More Numeric ABCs": [[295, "adding-more-numeric-abcs"]], "Implementing the arithmetic operations": [[295, "implementing-the-arithmetic-operations"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[281, "module-math"]], "Number-theoretic and representation functions": [[281, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[281, "power-and-logarithmic-functions"], [161, "power-and-logarithmic-functions"]], "Trigonometric functions": [[281, "trigonometric-functions"], [161, "trigonometric-functions"]], "Angular conversion": [[281, "angular-conversion"]], "Hyperbolic functions": [[281, "hyperbolic-functions"], [161, "hyperbolic-functions"]], "Special functions": [[281, "special-functions"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[280, "module-marshal"]], "mailbox --- Manipulate mailboxes in various formats": [[277, "module-mailbox"]], "Mailbox \u7269\u4ef6": [[277, "mailbox-objects"]], "Maildir": [[277, "maildir"]], "mbox": [[277, "mbox"]], "MH": [[277, "mh"]], "Babyl": [[277, "babyl"]], "MMDF": [[277, "mmdf"]], "Message \u7269\u4ef6": [[277, "message-objects"]], "MaildirMessage": [[277, "maildirmessage"]], "mboxMessage": [[277, "mboxmessage"]], "MHMessage": [[277, "mhmessage"]], "BabylMessage": [[277, "babylmessage"]], "MMDFMessage": [[277, "mmdfmessage"]], "multiprocessing.shared_memory --- Shared memory for direct access across processes": [[290, "module-multiprocessing.shared_memory"]], "Internet Data Handling": [[291, "internet-data-handling"]], "Multimedia Services": [[283, "multimedia-services"]], "mmap --- Memory-mapped file support": [[284, "module-mmap"]], "MADV_* Constants": [[284, "madv-constants"]], "MAP_* Constants": [[284, "map-constants"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[296, "numeric-and-mathematical-modules"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[294, "module-nntplib"]], "NNTP \u7269\u4ef6": [[294, "nntp-objects"]], "\u5c6c\u6027": [[294, "attributes"]], "Utility functions": [[294, "utility-functions"], [182, "utility-functions"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[297, "module-operator"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[297, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[297, "in-place-operators"]], "mailcap --- Mailcap file handling": [[278, "module-mailcap"]], "pathlib --- Object-oriented filesystem paths": [[302, "module-pathlib"]], "Basic use": [[302, "basic-use"]], "Pure paths": [[302, "pure-paths"]], "General properties": [[302, "general-properties"]], "Accessing individual parts": [[302, "accessing-individual-parts"]], "Methods and properties": [[302, "methods-and-properties"]], "Concrete paths": [[302, "concrete-paths"]], "Correspondence to tools in the os module": [[302, "correspondence-to-tools-in-the-os-module"]], "multiprocessing --- Process-based parallelism": [[289, "module-multiprocessing"]], "The Process class": [[289, "the-process-class"]], "Contexts and start methods": [[289, "contexts-and-start-methods"]], "Exchanging objects between processes": [[289, "exchanging-objects-between-processes"]], "Synchronization between processes": [[289, "synchronization-between-processes"]], "Sharing state between processes": [[289, "sharing-state-between-processes"]], "Using a pool of workers": [[289, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[289, "process-and-exceptions"]], "Pipes and Queues": [[289, "pipes-and-queues"]], "Connection Objects": [[289, "connection-objects"]], "Synchronization primitives": [[289, "synchronization-primitives"]], "Shared ctypes Objects": [[289, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[289, "module-multiprocessing.sharedctypes"]], "Managers": [[289, "managers"]], "Customized managers": [[289, "customized-managers"]], "Using a remote manager": [[289, "using-a-remote-manager"]], "Proxy Objects": [[289, "proxy-objects"]], "Process Pools": [[289, "module-multiprocessing.pool"]], "Listeners and Clients": [[289, "module-multiprocessing.connection"]], "Address Formats": [[289, "address-formats"]], "Authentication keys": [[289, "authentication-keys"]], "Logging": [[289, "logging"]], "The multiprocessing.dummy module": [[289, "module-multiprocessing.dummy"]], "Programming guidelines": [[289, "programming-guidelines"]], "All start methods": [[289, "all-start-methods"]], "The spawn and forkserver start methods": [[289, "the-spawn-and-forkserver-start-methods"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[260, "the-python-standard-library"]], "http.client --- HTTP protocol client": [[249, "module-http.client"]], "HTTPConnection \u7269\u4ef6": [[249, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[249, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[249, "httpmessage-objects"]], "http.cookiejar --- Cookie handling for HTTP clients": [[250, "module-http.cookiejar"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[250, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[250, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[250, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[250, "defaultcookiepolicy-objects"]], "Cookie \u7269\u4ef6": [[250, "cookie-objects"], [251, "cookie-objects"]], "html.parser --- Simple HTML and XHTML parser": [[247, "module-html.parser"]], "Example HTML Parser Application": [[247, "example-html-parser-application"]], "HTMLParser Methods": [[247, "htmlparser-methods"]], "http --- HTTP \u6a21\u7d44": [[248, "module-http"]], "HTTP \u72c0\u614b\u78bc": [[248, "http-status-codes"]], "html.entities --- Definitions of HTML general entities": [[246, "module-html.entities"]], "linecache --- Random access to text lines": [[271, "module-linecache"]], "http.cookies --- HTTP state management": [[251, "module-http.cookies"]], "Morsel \u7269\u4ef6": [[251, "morsel-objects"]], "json --- JSON encoder and decoder": [[268, "module-json"]], "Encoders and Decoders": [[268, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[268, "standard-compliance-and-interoperability"]], "Character Encodings": [[268, "character-encodings"]], "Infinite and NaN Number Values": [[268, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[268, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[268, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[268, "implementation-limitations"]], "gzip --- Support for gzip files": [[241, "module-gzip"]], "\u7528\u6cd5\u7bc4\u4f8b": [[241, "examples-of-usage"], [156, "examples-of-usage"]], "Internet Protocols and Support": [[262, "internet-protocols-and-support"]], "grp --- The group database": [[240, "module-grp"]], "importlib --- The implementation of import": [[258, "module-importlib"]], "importlib.abc -- Abstract base classes related to import": [[258, "module-importlib.abc"]], "importlib.resources -- Resources": [[258, "module-importlib.resources"]], "importlib.machinery -- Importers and path hooks": [[258, "module-importlib.machinery"]], "importlib.util -- Utility code for importers": [[258, "module-importlib.util"]], "Importing programmatically": [[258, "importing-programmatically"]], "Checking if a module can be imported": [[258, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[258, "importing-a-source-file-directly"]], "Implementing lazy imports": [[258, "implementing-lazy-imports"]], "Setting up an importer": [[258, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[258, "approximating-importlib-import-module"]], "keyword --- Testing for Python keywords": [[269, "module-keyword"]], "Python Language Services": [[270, "python-language-services"]], "Using importlib.metadata": [[259, "module-importlib.metadata"]], "Functional API": [[259, "functional-api"], [218, "functional-api"]], "Entry points": [[259, "entry-points"]], "Distribution metadata": [[259, "distribution-metadata"]], "Distribution versions": [[259, "distribution-versions"]], "Distribution files": [[259, "distribution-files"]], "Distribution requirements": [[259, "distribution-requirements"]], "Package distributions": [[259, "package-distributions"]], "Distributions": [[259, "distributions"]], "Extending the search algorithm": [[259, "extending-the-search-algorithm"]], "hashlib --- Secure hashes and message digests": [[242, "module-hashlib"]], "Hash algorithms": [[242, "hash-algorithms"]], "SHAKE variable length digests": [[242, "shake-variable-length-digests"]], "Key derivation": [[242, "key-derivation"]], "BLAKE2": [[242, "blake2"]], "Creating hash objects": [[242, "creating-hash-objects"]], "Simple hashing": [[242, "simple-hashing"]], "Using different digest sizes": [[242, "using-different-digest-sizes"]], "Keyed hashing": [[242, "keyed-hashing"]], "Randomized hashing": [[242, "randomized-hashing"]], "Personalization": [[242, "personalization"]], "Tree mode": [[242, "tree-mode"]], "Credits": [[242, "credits"]], "html --- HyperText Markup Language support": [[245, "module-html"]], "File menu (Shell and Editor)": [[254, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[254, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[254, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[254, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[254, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[254, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[254, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[254, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[254, "help-menu-shell-and-editor"]], "Context menus": [[254, "context-menus"]], "Editing and Navigation": [[254, "editing-and-navigation"]], "Editor windows": [[254, "editor-windows"]], "Key bindings": [[254, "key-bindings"]], "Automatic indentation": [[254, "automatic-indentation"]], "Completions": [[254, "completions"]], "Calltips": [[254, "calltips"]], "Code Context": [[254, "code-context"]], "Shell window": [[254, "shell-window"]], "Text colors": [[254, "text-colors"]], "Startup and Code Execution": [[254, "startup-and-code-execution"]], "Startup failure": [[254, "startup-failure"]], "Running user code": [[254, "running-user-code"]], "User output in Shell": [[254, "user-output-in-shell"]], "Developing tkinter applications": [[254, "developing-tkinter-applications"]], "Running without a subprocess": [[254, "running-without-a-subprocess"]], "Help and Preferences": [[254, "help-and-preferences"]], "Help sources": [[254, "help-sources"]], "Setting preferences": [[254, "setting-preferences"]], "IDLE on macOS": [[254, "idle-on-macos"]], "Extensions": [[254, "extensions"]], "idlelib": [[254, "module-idlelib"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[263, "notes-on-availability"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[244, "module-hmac"]], "inspect --- Inspect live objects": [[261, "module-inspect"]], "Types and members": [[261, "types-and-members"]], "Retrieving source code": [[261, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[261, "introspecting-callables-with-the-signature-object"]], "The interpreter stack": [[261, "the-interpreter-stack"]], "Fetching attributes statically": [[261, "fetching-attributes-statically"]], "Current State of Generators and Coroutines": [[261, "current-state-of-generators-and-coroutines"]], "Code Objects Bit Flags": [[261, "code-objects-bit-flags"]], "http.server --- HTTP servers": [[252, "module-http.server"]], "imp --- Access the import internals": [[257, "module-imp"]], "\u570b\u969b\u5316": [[253, "internationalization"]], "ipaddress --- IPv4/IPv6 manipulation library": [[265, "module-ipaddress"]], "Convenience factory functions": [[265, "convenience-factory-functions"]], "IP Addresses": [[265, "ip-addresses"]], "Address objects": [[265, "address-objects"]], "Conversion to Strings and Integers": [[265, "conversion-to-strings-and-integers"]], "Comparison operators": [[265, "comparison-operators"]], "Arithmetic operators": [[265, "arithmetic-operators"]], "IP Network definitions": [[265, "ip-network-definitions"]], "Prefix, net mask and host mask": [[265, "prefix-net-mask-and-host-mask"]], "Network objects": [[265, "network-objects"]], "Logical operators": [[265, "logical-operators"], [265, "id3"]], "Iteration": [[265, "iteration"], [218, "iteration"]], "Networks as containers of addresses": [[265, "networks-as-containers-of-addresses"]], "Interface objects": [[265, "interface-objects"]], "Other Module Level Functions": [[265, "other-module-level-functions"]], "Custom Exceptions": [[265, "custom-exceptions"]], "Networking and Interprocess Communication": [[266, "networking-and-interprocess-communication"]], "graphlib --- Functionality to operate with graph-like structures": [[239, "module-graphlib"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[243, "module-heapq"]], "\u512a\u5148\u4f47\u5217  (Priority Queue) \u5be6\u4f5c\u7d30\u7bc0": [[243, "priority-queue-implementation-notes"]], "\u539f\u7406": [[243, "theory"]], "glob --- Unix style pathname pattern expansion": [[238, "module-glob"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[256, "module-imghdr"]], "imaplib --- IMAP4 protocol client": [[255, "module-imaplib"]], "IMAP4 \u7269\u4ef6": [[255, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[255, "imap4-example"]], "io --- Core tools for working with streams": [[264, "module-io"]], "Text I/O": [[264, "text-i-o"], [264, "id1"], [264, "id3"]], "Binary I/O": [[264, "binary-i-o"], [264, "id2"]], "Raw I/O": [[264, "raw-i-o"]], "Text Encoding": [[264, "text-encoding"]], "Opt-in EncodingWarning": [[264, "opt-in-encodingwarning"]], "High-level Module Interface": [[264, "high-level-module-interface"]], "Class hierarchy": [[264, "class-hierarchy"]], "I/O Base Classes": [[264, "i-o-base-classes"]], "Raw File I/O": [[264, "raw-file-i-o"]], "Buffered Streams": [[264, "buffered-streams"]], "Reentrancy": [[264, "reentrancy"]], "itertools --- Functions creating iterators for efficient looping": [[267, "module-itertools"]], "Itertool functions": [[267, "itertool-functions"]], "Itertools Recipes": [[267, "itertools-recipes"]], "email.iterators: Iterators": [[211, "module-email.iterators"]], "email.utils: Miscellaneous utilities": [[216, "module-email.utils"]], "email: Examples": [[207, "email-examples"]], "email.header: Internationalized headers": [[209, "module-email.header"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[236, "module-getpass"]], "\u6a94\u6848\u683c\u5f0f": [[224, "file-formats"]], "\u7a0b\u5f0f\u6846\u67b6": [[229, "program-frameworks"]], "\u5167\u5efa\u51fd\u5f0f": [[232, "built-in-functions"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[231, "functional-programming-modules"]], "fractions --- Rational numbers": [[228, "module-fractions"]], "enum --- Support for enumerations": [[218, "module-enum"]], "Creating an Enum": [[218, "creating-an-enum"]], "Programmatic access to enumeration members and their attributes": [[218, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[218, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[218, "ensuring-unique-enumeration-values"]], "Using automatic values": [[218, "using-automatic-values"]], "Allowed members and attributes of enumerations": [[218, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[218, "restricted-enum-subclassing"]], "Pickling": [[218, "pickling"]], "Derived Enumerations": [[218, "derived-enumerations"]], "IntEnum": [[218, "intenum"]], "IntFlag": [[218, "intflag"]], "Flag": [[218, "flag"]], "Others": [[218, "others"]], "When to use __new__() vs. __init__()": [[218, "when-to-use-new-vs-init"]], "Interesting examples": [[218, "interesting-examples"]], "Omitting values": [[218, "omitting-values"]], "Using auto": [[218, "using-auto"]], "Using object": [[218, "using-object"]], "Using a descriptive string": [[218, "using-a-descriptive-string"]], "Using a custom __new__()": [[218, "using-a-custom-new"]], "OrderedEnum": [[218, "orderedenum"]], "DuplicateFreeEnum": [[218, "duplicatefreeenum"]], "Planet": [[218, "planet"]], "TimePeriod": [[218, "timeperiod"]], "How are Enums different?": [[218, "how-are-enums-different"]], "Enum Classes": [[218, "enum-classes"]], "Enum Members (aka instances)": [[218, "enum-members-aka-instances"]], "Finer Points": [[218, "finer-points"]], "Supported __dunder__ names": [[218, "supported-dunder-names"]], "Supported _sunder_ names": [[218, "supported-sunder-names"]], "_Private__names": [[218, "private-names"]], "Enum member type": [[218, "enum-member-type"]], "Boolean value of Enum classes and members": [[218, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[218, "enum-classes-with-methods"]], "Combining members of Flag": [[218, "combining-members-of-flag"]], "fcntl --- The fcntl and ioctl system calls": [[222, "module-fcntl"]], "email.encoders: Encoders": [[205, "module-email.encoders"]], "email.message: Representing an email message": [[212, "module-email.message"]], "fileinput --- Iterate over lines from multiple input streams": [[225, "module-fileinput"]], "getopt --- C-style parser for command line options": [[235, "module-getopt"]], "functools --- Higher-order functions and operations on callable objects": [[233, "module-functools"]], "partial \u7269\u4ef6": [[233, "partial-objects"]], "email.headerregistry: Custom Header Objects": [[210, "module-email.headerregistry"]], "email.errors: Exception and Defect classes": [[206, "module-email.errors"]], "fnmatch --- Unix filename pattern matching": [[227, "module-fnmatch"]], "faulthandler --- Dump the Python traceback": [[221, "module-faulthandler"]], "Dumping the traceback": [[221, "dumping-the-traceback"]], "Fault handler state": [[221, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[221, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[221, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[221, "issue-with-file-descriptors"]], "ftplib --- FTP protocol client": [[230, "module-ftplib"]], "FTP \u7269\u4ef6": [[230, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[230, "ftp-tls-objects"]], "email.policy: Policy Objects": [[215, "module-email.policy"]], "filecmp --- File and Directory Comparisons": [[223, "module-filecmp"]], "The dircmp class": [[223, "the-dircmp-class"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[220, "built-in-exceptions"]], "Exception context": [[220, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[220, "inheriting-from-built-in-exceptions"]], "Base classes": [[220, "base-classes"]], "Concrete exceptions": [[220, "concrete-exceptions"]], "OS exceptions": [[220, "os-exceptions"]], "\u8b66\u544a": [[220, "warnings"]], "Exception hierarchy": [[220, "exception-hierarchy"]], "ensurepip --- Bootstrapping the pip installer": [[217, "module-ensurepip"]], "Command line interface": [[217, "command-line-interface"]], "\u6a21\u7d44 API": [[217, "module-api"]], "email.generator: Generating MIME documents": [[208, "module-email.generator"]], "errno --- Standard errno system symbols": [[219, "module-errno"]], "email.contentmanager: Managing MIME Content": [[204, "module-email.contentmanager"]], "Content Manager Instances": [[204, "content-manager-instances"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[226, "file-and-directory-access"]], "gc --- Garbage Collector interface": [[234, "module-gc"]], "email.parser: Parsing email messages": [[214, "module-email.parser"]], "FeedParser API": [[214, "feedparser-api"]], "Parser API": [[214, "parser-api"]], "Additional notes": [[214, "additional-notes"]], "email.mime: Creating email and MIME objects from scratch": [[213, "module-email.mime"]], "gettext --- Multilingual internationalization services": [[237, "module-gettext"]], "GNU gettext API": [[237, "gnu-gettext-api"]], "Class-based API": [[237, "class-based-api"]], "The NullTranslations class": [[237, "the-nulltranslations-class"]], "The GNUTranslations class": [[237, "the-gnutranslations-class"]], "Solaris message catalog support": [[237, "solaris-message-catalog-support"]], "The Catalog constructor": [[237, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[237, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[237, "localizing-your-module"]], "Localizing your application": [[237, "localizing-your-application"]], "Changing languages on the fly": [[237, "changing-languages-on-the-fly"]], "Deferred translations": [[237, "deferred-translations"]], "dataclasses --- Data Classes": [[187, "module-dataclasses"]], "Module contents": [[187, "module-contents"]], "Post-init processing": [[187, "post-init-processing"]], "Class variables": [[187, "class-variables"]], "Init-only variables": [[187, "init-only-variables"]], "Frozen instances": [[187, "frozen-instances"]], "Inheritance": [[187, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[187, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[187, "default-factory-functions"]], "Mutable default values": [[187, "mutable-default-values"]], "Descriptor-typed fields": [[187, "descriptor-typed-fields"]], "contextlib --- Utilities for with-statement contexts": [[175, "module-contextlib"]], "Utilities": [[175, "utilities"]], "Examples and Recipes": [[175, "examples-and-recipes"], [167, "examples-and-recipes"]], "Supporting a variable number of context managers": [[175, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[175, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[175, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[175, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[175, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[175, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[175, "reentrant-context-managers"]], "Reusable context managers": [[175, "reusable-context-managers"]], "distutils --- Building and installing Python modules": [[199, "module-distutils"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[172, "module-concurrent.futures"]], "Executor Objects": [[172, "executor-objects"]], "ThreadPoolExecutor": [[172, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[172, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[172, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[172, "processpoolexecutor-example"]], "Future Objects": [[172, "future-objects"]], "\u6a21\u7d44\u51fd\u5f0f": [[172, "module-functions"], [179, "module-functions"]], "Exception classes": [[172, "exception-classes"]], "decimal --- Decimal fixed point and floating point arithmetic": [[192, "module-decimal"]], "Quick-start Tutorial": [[192, "quick-start-tutorial"]], "Decimal objects": [[192, "decimal-objects"]], "Logical operands": [[192, "logical-operands"]], "Context objects": [[192, "context-objects"]], "Rounding modes": [[192, "rounding-modes"]], "Signals": [[192, "signals"]], "Floating Point Notes": [[192, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[192, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[192, "special-values"]], "Working with threads": [[192, "working-with-threads"]], "Recipes": [[192, "recipes"]], "Decimal FAQ": [[192, "decimal-faq"]], "curses.panel --- A panel stack extension for curses": [[185, "module-curses.panel"]], "Panel Objects": [[185, "panel-objects"]], "Python Development Mode": [[194, "python-development-mode"]], "Effects of the Python Development Mode": [[194, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[194, "resourcewarning-example"]], "Bad file descriptor error example": [[194, "bad-file-descriptor-error-example"]], "ctypes --- A foreign function library for Python": [[182, "module-ctypes"]], "ctypes tutorial": [[182, "ctypes-tutorial"]], "Loading dynamic link libraries": [[182, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[182, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[182, "calling-functions"]], "Fundamental data types": [[182, "fundamental-data-types"], [182, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[182, "calling-functions-continued"]], "Calling functions with your own custom data types": [[182, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[182, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[182, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[182, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[182, "structures-and-unions"]], "Structure/union alignment and byte order": [[182, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[182, "bit-fields-in-structures-and-unions"]], "Arrays": [[182, "arrays"]], "Pointers": [[182, "pointers"]], "Type conversions": [[182, "type-conversions"]], "Incomplete Types": [[182, "incomplete-types"]], "Callback functions": [[182, "callback-functions"]], "Accessing values exported from dlls": [[182, "accessing-values-exported-from-dlls"]], "Surprises": [[182, "surprises"]], "Variable-sized data types": [[182, "variable-sized-data-types"]], "ctypes reference": [[182, "ctypes-reference"]], "Finding shared libraries": [[182, "finding-shared-libraries"]], "Loading shared libraries": [[182, "loading-shared-libraries"]], "Foreign functions": [[182, "foreign-functions"]], "Function prototypes": [[182, "function-prototypes"]], "Data types": [[182, "data-types"]], "Structured data types": [[182, "structured-data-types"]], "Arrays and pointers": [[182, "arrays-and-pointers"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[197, "module-dis"]], "Bytecode analysis": [[197, "bytecode-analysis"]], "Analysis functions": [[197, "analysis-functions"]], "Python Bytecode Instructions": [[197, "python-bytecode-instructions"]], "Opcode collections": [[197, "opcode-collections"]], "email.message.Message: Representing an email message using the compat32 API": [[203, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "Tkinter Dialogs": [[195, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[195, "module-tkinter.simpledialog"]], "tkinter.filedialog --- File selection dialogs": [[195, "module-tkinter.filedialog"]], "Native Load/Save Dialogs": [[195, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[195, "module-tkinter.commondialog"]], "doctest --- Test interactive Python examples": [[200, "module-doctest"]], "Simple Usage: Checking Examples in Docstrings": [[200, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[200, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[200, "how-it-works"]], "Which Docstrings Are Examined?": [[200, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[200, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[200, "what-s-the-execution-context"]], "What About Exceptions?": [[200, "what-about-exceptions"]], "Option Flags": [[200, "option-flags"]], "Directives": [[200, "directives"]], "Warnings": [[200, "warnings"]], "Basic API": [[200, "basic-api"]], "Unittest API": [[200, "unittest-api"]], "Advanced API": [[200, "advanced-api"]], "DocTest \u7269\u4ef6": [[200, "doctest-objects"]], "Example \u7269\u4ef6": [[200, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[200, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[200, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[200, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[200, "outputchecker-objects"]], "Debugging": [[200, "debugging"]], "Soapbox": [[200, "soapbox"]], "dbm --- Interfaces to Unix \"databases\"": [[190, "module-dbm"]], "dbm.gnu --- GNU's reinterpretation of dbm": [[190, "module-dbm.gnu"]], "dbm.ndbm --- Interface based on ndbm": [[190, "module-dbm.ndbm"]], "dbm.dumb --- Portable DBM implementation": [[190, "module-dbm.dumb"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[179, "module-crypt"]], "Hashing Methods": [[179, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[179, "module-attributes"]], "\u958b\u767c\u5de5\u5177": [[193, "development-tools"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[189, "module-datetime"]], "Aware and Naive Objects": [[189, "aware-and-naive-objects"]], "Available Types": [[189, "available-types"]], "Common Properties": [[189, "common-properties"]], "Determining if an Object is Aware or Naive": [[189, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[189, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[189, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[189, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[189, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[189, "datetime-objects"]], "Examples of Usage: datetime": [[189, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[189, "time-objects"]], "Examples of Usage: time": [[189, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[189, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[189, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[189, "strftime-and-strptime-behavior"]], "strftime() and strptime() Format Codes": [[189, "strftime-and-strptime-format-codes"]], "Technical Detail": [[189, "technical-detail"]], "\u5167\u5efa\u5e38\u6578": [[174, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[174, "constants-added-by-the-site-module"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[177, "module-copy"]], "email --- An email and MIME handling package": [[201, "module-email"]], "\u52a0\u5bc6\u670d\u52d9": [[180, "cryptographic-services"]], "concurrent \u5957\u4ef6": [[171, "the-concurrent-package"]], "curses.ascii --- Utilities for ASCII characters": [[184, "module-curses.ascii"]], "contextvars --- Context Variables": [[176, "module-contextvars"]], "Context Variables": [[176, "context-variables"]], "Manual Context Management": [[176, "manual-context-management"]], "asyncio support": [[176, "asyncio-support"]], "curses --- Terminal handling for character-cell displays": [[183, "module-curses"]], "Window Objects": [[183, "window-objects"]], "Constants": [[183, "constants"]], "curses.textpad --- Text input widget for curses programs": [[183, "module-curses.textpad"]], "Textbox objects": [[183, "textbox-objects"]], "configparser --- Configuration file parser": [[173, "module-configparser"]], "Quick Start": [[173, "quick-start"]], "Supported Datatypes": [[173, "supported-datatypes"]], "Fallback Values": [[173, "fallback-values"]], "Supported INI File Structure": [[173, "supported-ini-file-structure"]], "Interpolation of values": [[173, "interpolation-of-values"]], "Mapping Protocol Access": [[173, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[173, "customizing-parser-behaviour"]], "Legacy API Examples": [[173, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[173, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[173, "rawconfigparser-objects"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[170, "concurrent-execution"]], "\u8cc7\u6599\u578b\u5225": [[188, "data-types"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[198, "software-packaging-and-distribution"]], "csv --- CSV File Reading and Writing": [[181, "module-csv"]], "Dialects and Formatting Parameters": [[181, "dialects-and-formatting-parameters"]], "Reader Objects": [[181, "reader-objects"]], "Writer Objects": [[181, "writer-objects"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[191, "debugging-and-profiling"]], "difflib --- Helpers for computing deltas": [[196, "module-difflib"]], "SequenceMatcher \u7269\u4ef6": [[196, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[196, "sequencematcher-examples"]], "Differ Objects": [[196, "differ-objects"]], "Differ Example": [[196, "differ-example"]], "A command-line interface to difflib": [[196, "a-command-line-interface-to-difflib"]], "copyreg --- Register pickle support functions": [[178, "module-copyreg"]], "email.charset: Representing character sets": [[202, "module-email.charset"]], "Custom Python Interpreters": [[186, "custom-python-interpreters"]], "Coroutines and Tasks": [[144, "coroutines-and-tasks"]], "Awaitables": [[144, "awaitables"]], "Running an asyncio Program": [[144, "running-an-asyncio-program"]], "Creating Tasks": [[144, "creating-tasks"]], "Sleeping": [[144, "sleeping"]], "Running Tasks Concurrently": [[144, "running-tasks-concurrently"]], "Shielding From Cancellation": [[144, "shielding-from-cancellation"]], "Timeouts": [[144, "timeouts"]], "Waiting Primitives": [[144, "waiting-primitives"]], "Running in Threads": [[144, "running-in-threads"]], "Scheduling From Other Threads": [[144, "scheduling-from-other-threads"]], "Introspection": [[144, "introspection"]], "Task Object": [[144, "task-object"]], "Generator-based Coroutines": [[144, "generator-based-coroutines"]], "\u5e73\u81fa\u652f\u63f4": [[137, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[137, "all-platforms"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[137, "subprocess-support-on-windows"]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[143, "synchronization-primitives"]], "Lock": [[143, "lock"]], "Event": [[143, "event"]], "Condition": [[143, "condition"]], "Semaphore": [[143, "semaphore"]], "BoundedSemaphore": [[143, "boundedsemaphore"]], "codeop --- Compile Python code": [[165, "module-codeop"]], "Binary Data Services": [[151, "binary-data-services"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[168, "module-colorsys"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[155, "module-builtins"]], "\u4f4e\u968e API \u7d22\u5f15": [[136, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[136, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[136, "event-loop-methods"]], "\u50b3\u8f38": [[136, "transports"]], "\u5354\u5b9a": [[136, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[136, "event-loop-policies"]], "calendar --- General calendar-related functions": [[157, "module-calendar"]], "asyncore --- \u975e\u540c\u6b65 socket \u8655\u7406\u51fd\u5f0f": [[145, "module-asyncore"]], "asyncore Example basic HTTP client": [[145, "asyncore-example-basic-http-client"]], "asyncore Example basic echo server": [[145, "asyncore-example-basic-echo-server"]], "binhex --- Encode and decode binhex4 files": [[153, "module-binhex"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[158, "module-cgi"]], "Using the cgi module": [[158, "using-the-cgi-module"]], "Higher Level Interface": [[158, "higher-level-interface"]], "Caring about security": [[158, "caring-about-security"]], "Installing your CGI script on a Unix system": [[158, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[158, "testing-your-cgi-script"]], "Debugging CGI scripts": [[158, "debugging-cgi-scripts"]], "Common problems and solutions": [[158, "common-problems-and-solutions"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[159, "module-cgitb"]], "code --- Interpreter base classes": [[163, "module-code"]], "Interactive Interpreter Objects": [[163, "interactive-interpreter-objects"]], "Interactive Console Objects": [[163, "interactive-console-objects"]], "Transports and Protocols": [[139, "transports-and-protocols"]], "Transports": [[139, "transports"]], "Transports Hierarchy": [[139, "transports-hierarchy"]], "Base Transport": [[139, "base-transport"]], "Read-only Transports": [[139, "read-only-transports"]], "Write-only Transports": [[139, "write-only-transports"]], "Datagram Transports": [[139, "datagram-transports"]], "Subprocess Transports": [[139, "subprocess-transports"]], "Base Protocols": [[139, "base-protocols"]], "Base Protocol": [[139, "base-protocol"]], "Streaming Protocols": [[139, "streaming-protocols"]], "Buffered Streaming Protocols": [[139, "buffered-streaming-protocols"]], "Datagram Protocols": [[139, "datagram-protocols"]], "Subprocess Protocols": [[139, "subprocess-protocols"]], "TCP Echo Server": [[139, "tcp-echo-server"]], "TCP Echo Client": [[139, "tcp-echo-client"]], "UDP Echo Server": [[139, "udp-echo-server"]], "UDP Echo Client": [[139, "udp-echo-client"]], "Connecting Existing Sockets": [[139, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[139, "loop-subprocess-exec-and-subprocessprotocol"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[148, "audit-events-table"]], "cmd --- Support for line-oriented command interpreters": [[162, "module-cmd"]], "Cmd \u7269\u4ef6": [[162, "cmd-objects"]], "Cmd Example": [[162, "cmd-example"]], "codecs --- Codec registry and base classes": [[164, "module-codecs"]], "Codec Base Classes": [[164, "codec-base-classes"]], "Error Handlers": [[164, "error-handlers"]], "Stateless Encoding and Decoding": [[164, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[164, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[164, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[164, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[164, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[164, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[164, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[164, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[164, "streamrecoder-objects"]], "Encodings and Unicode": [[164, "encodings-and-unicode"]], "Standard Encodings": [[164, "standard-encodings"]], "Python Specific Encodings": [[164, "python-specific-encodings"]], "Text Encodings": [[164, "text-encodings"]], "Binary Transforms": [[164, "binary-transforms"]], "Text Transforms": [[164, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[164, "module-encodings.idna"]], "encodings.mbcs --- Windows ANSI codepage": [[164, "module-encodings.mbcs"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[164, "module-encodings.utf_8_sig"]], "bdb --- Debugger framework": [[150, "module-bdb"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[149, "module-base64"]], "bz2 --- Support for bzip2 compression": [[156, "module-bz2"]], "(De)compression of files": [[156, "de-compression-of-files"]], "Incremental (de)compression": [[156, "incremental-de-compression"]], "One-shot (de)compression": [[156, "one-shot-de-compression"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[160, "module-chunk"]], "compileall --- Byte-compile Python libraries": [[169, "module-compileall"]], "Command-line use": [[169, "command-line-use"]], "Public functions": [[169, "public-functions"]], "\u5b50\u884c\u7a0b": [[142, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[142, "creating-subprocesses"]], "Interacting with Subprocesses": [[142, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[142, "subprocess-and-threads"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[147, "module-audioop"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[154, "module-bisect"]], "\u6548\u80fd\u8003\u91cf": [[154, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[154, "searching-sorted-lists"]], "atexit --- Exit handlers": [[146, "module-atexit"]], "atexit \u7bc4\u4f8b": [[146, "atexit-example"]], "Policies": [[138, "policies"]], "Getting and Setting the Policy": [[138, "getting-and-setting-the-policy"]], "Policy Objects": [[138, "policy-objects"]], "Process Watchers": [[138, "process-watchers"]], "Custom Policies": [[138, "custom-policies"]], "cmath --- Mathematical functions for complex numbers": [[161, "module-cmath"]], "Conversions to and from polar coordinates": [[161, "conversions-to-and-from-polar-coordinates"]], "Classification functions": [[161, "classification-functions"]], "binascii --- Convert between binary and ASCII": [[152, "module-binascii"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[166, "module-collections"]], "ChainMap \u7269\u4ef6": [[166, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[166, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[166, "counter-objects"]], "deque \u7269\u4ef6": [[166, "deque-objects"]], "deque \u7528\u6cd5": [[166, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[166, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[166, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[166, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[166, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[166, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[166, "userdict-objects"]], "UserList \u7269\u4ef6": [[166, "userlist-objects"]], "UserString \u7269\u4ef6": [[166, "userstring-objects"]], "\u4e32\u6d41": [[141, "streams"]], "StreamReader": [[141, "streamreader"]], "StreamWriter": [[141, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[141, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[141, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[141, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[141, "register-an-open-socket-to-wait-for-data-using-streams"]], "collections.abc --- Abstract Base Classes for Containers": [[167, "module-collections.abc"]], "Collections Abstract Base Classes": [[167, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[167, "collections-abstract-base-classes-detailed-descriptions"]], "Queue": [[140, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[140, "priority-queue"]], "LIFO Queue": [[140, "lifo-queue"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c function)": [[3, "c.PyObject_New"]], "pyobject_newvar (c function)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(see buffer protocol)": [[7, "index-0"]], "c-contiguous": [[7, "index-2"], [97, "index-10"]], "fortran contiguous": [[7, "index-2"], [97, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs": [[7, "index-1"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface": [[7, "index-0"]], "buffer object": [[7, "index-0"]], "buffer protocol": [[7, "index-0"], [351, "index-30"], [351, "index-38"]], "contiguous": [[7, "index-2"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray": [[8, "index-0"], [351, "index-22"], [351, "index-39"], [351, "index-41"], [351, "index-42"], [351, "index-44"], [432, "index-24"]], "\u7269\u4ef6": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [26, "index-0"], [33, "index-8"], [36, "index-0"], [37, "index-0"], [41, "index-0"], [42, "index-0"], [42, "index-1"], [43, "index-0"], [44, "index-0"], [52, "index-0"], [57, "index-0"], [58, "index-0"], [232, "index-11"], [344, "index-0"], [351, "index-11"], [351, "index-18"], [351, "index-21"], [351, "index-22"], [351, "index-24"], [351, "index-25"], [351, "index-26"], [351, "index-27"], [351, "index-28"], [351, "index-39"], [351, "index-40"], [351, "index-41"], [351, "index-50"], [351, "index-51"], [351, "index-55"], [351, "index-58"], [351, "index-60"], [359, "index-8"], [385, "index-0"], [431, "index-11"], [431, "index-27"], [431, "index-39"], [431, "index-6"], [432, "index-10"], [432, "index-11"], [432, "index-13"], [432, "index-14"], [432, "index-15"], [432, "index-17"], [432, "index-20"], [432, "index-22"], [432, "index-23"], [432, "index-26"], [432, "index-27"], [432, "index-28"], [432, "index-29"], [432, "index-30"], [432, "index-32"], [432, "index-33"], [432, "index-35"], [432, "index-40"], [432, "index-41"], [432, "index-42"], [432, "index-45"], [432, "index-49"], [432, "index-51"], [432, "index-57"], [432, "index-59"], [432, "index-6"], [432, "index-62"], [432, "index-7"], [432, "index-76"], [432, "index-8"], [432, "index-9"], [432, "index-95"], [434, "index-15"], [434, "index-16"], [434, "index-17"], [434, "index-22"], [434, "index-31"], [434, "index-35"], [434, "index-40"], [434, "index-42"], [434, "index-45"], [434, "index-47"], [434, "index-52"], [434, "index-53"], [434, "index-54"], [434, "index-55"], [434, "index-80"], [434, "index-92"], [440, "index-10"], [440, "index-11"], [440, "index-28"], [440, "index-3"], [440, "index-4"], [440, "index-9"], [444, "index-0"], [450, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes": [[9, "index-0"], [47, "index-3"], [351, "index-30"], [351, "index-39"], [351, "index-40"], [351, "index-42"], [351, "index-44"], [432, "index-21"], [432, "index-73"]], "pep 590": [[10, "index-2"], [476, "index-33"], [483, "index-35"], [484, "index-18"], [484, "index-8"], [485, "index-100"], [485, "index-102"], [485, "index-129"], [485, "index-22"], [485, "index-23"], [485, "index-56"], [485, "index-57"], [485, "index-83"], [485, "index-90"], [485, "index-99"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [29, "index-3"], [31, "index-40"], [31, "index-41"], [31, "index-47"], [31, "index-50"], [31, "index-51"], [32, "index-0"], [32, "index-13"], [32, "index-28"], [32, "index-29"], [32, "index-32"], [32, "index-33"], [32, "index-5"], [33, "index-0"], [33, "index-15"], [33, "index-6"], [33, "index-7"], [43, "index-10"], [43, "index-7"], [43, "index-8"], [47, "index-4"], [47, "index-5"], [54, "index-0"], [56, "index-0"], [60, "index-3"], [60, "index-4"], [60, "index-5"], [61, "index-0"], [61, "index-1"], [61, "index-2"], [61, "index-3"], [61, "index-4"], [61, "index-5"], [61, "index-6"], [63, "index-3"], [65, "index-23"], [67, "index-3"], [69, "index-0"], [69, "index-3"], [69, "index-4"], [69, "index-5"], [69, "index-7"], [69, "index-8"], [75, "index-7"], [81, "index-1"], [83, "index-0"], [85, "index-2"], [88, "index-2"], [90, "index-6"], [90, "index-7"], [90, "index-8"], [95, "index-0"], [95, "index-2"], [95, "index-3"], [96, "index-2"], [97, "index-100"], [97, "index-101"], [97, "index-102"], [97, "index-103"], [97, "index-104"], [97, "index-105"], [97, "index-106"], [97, "index-107"], [97, "index-108"], [97, "index-109"], [97, "index-110"], [97, "index-111"], [97, "index-112"], [97, "index-77"], [97, "index-78"], [97, "index-79"], [97, "index-80"], [97, "index-81"], [97, "index-82"], [97, "index-83"], [97, "index-84"], [97, "index-85"], [97, "index-86"], [97, "index-87"], [97, "index-88"], [97, "index-89"], [97, "index-90"], [97, "index-91"], [97, "index-92"], [97, "index-93"], [97, "index-94"], [97, "index-95"], [97, "index-96"], [97, "index-97"], [97, "index-98"], [97, "index-99"], [98, "index-0"], [100, "index-0"], [100, "index-3"], [104, "index-0"], [104, "index-1"], [104, "index-2"], [114, "index-0"], [118, "index-0"], [118, "index-1"], [119, "index-0"], [119, "index-1"], [119, "index-10"], [119, "index-2"], [119, "index-3"], [119, "index-4"], [119, "index-5"], [119, "index-6"], [119, "index-7"], [119, "index-8"], [119, "index-9"], [122, "index-0"], [122, "index-1"], [123, "index-4"], [128, "index-2"], [128, "index-3"], [128, "index-4"], [128, "index-5"], [128, "index-6"], [133, "index-0"], [133, "index-1"], [133, "index-2"], [135, "index-2"], [147, "index-3"], [148, "index-3"], [158, "index-8"], [159, "index-4"], [160, "index-3"], [161, "index-0"], [164, "index-2"], [164, "index-5"], [166, "index-10"], [166, "index-11"], [166, "index-8"], [166, "index-9"], [167, "index-0"], [167, "index-1"], [167, "index-2"], [167, "index-3"], [167, "index-6"], [169, "index-0"], [169, "index-2"], [169, "index-3"], [172, "index-0"], [175, "index-2"], [176, "index-2"], [179, "index-1"], [181, "index-5"], [187, "index-0"], [187, "index-1"], [187, "index-2"], [197, "index-0"], [217, "index-0"], [220, "index-10"], [220, "index-11"], [220, "index-2"], [220, "index-5"], [220, "index-6"], [220, "index-7"], [220, "index-8"], [220, "index-9"], [232, "index-13"], [232, "index-14"], [232, "index-17"], [232, "index-9"], [233, "index-0"], [234, "index-0"], [254, "index-7"], [256, "index-2"], [257, "index-2"], [257, "index-3"], [257, "index-4"], [257, "index-5"], [257, "index-6"], [257, "index-7"], [258, "index-0"], [258, "index-1"], [258, "index-10"], [258, "index-11"], [258, "index-12"], [258, "index-13"], [258, "index-14"], [258, "index-15"], [258, "index-17"], [258, "index-18"], [258, "index-19"], [258, "index-2"], [258, "index-20"], [258, "index-21"], [258, "index-22"], [258, "index-23"], [258, "index-24"], [258, "index-25"], [258, "index-3"], [258, "index-4"], [258, "index-5"], [258, "index-6"], [258, "index-7"], [258, "index-8"], [258, "index-9"], [259, "index-0"], [259, "index-1"], [259, "index-2"], [261, "index-0"], [261, "index-1"], [261, "index-2"], [261, "index-3"], [264, "index-6"], [271, "index-1"], [273, "index-1"], [278, "index-0"], [281, "index-0"], [287, "index-3"], [293, "index-2"], [294, "index-12"], [295, "index-0"], [299, "index-21"], [299, "index-23"], [299, "index-24"], [299, "index-26"], [299, "index-43"], [299, "index-5"], [299, "index-52"], [299, "index-54"], [299, "index-6"], [301, "index-4"], [302, "index-1"], [305, "index-2"], [305, "index-3"], [305, "index-4"], [305, "index-8"], [307, "index-2"], [308, "index-0"], [308, "index-1"], [308, "index-10"], [308, "index-11"], [308, "index-12"], [308, "index-15"], [308, "index-16"], [308, "index-2"], [308, "index-3"], [308, "index-4"], [308, "index-5"], [308, "index-7"], [308, "index-8"], [317, "index-1"], [317, "index-2"], [317, "index-4"], [317, "index-5"], [328, "index-0"], [330, "index-1"], [330, "index-2"], [330, "index-3"], [330, "index-5"], [330, "index-6"], [330, "index-7"], [330, "index-8"], [332, "index-0"], [334, "index-0"], [334, "index-3"], [334, "index-4"], [334, "index-5"], [334, "index-6"], [334, "index-7"], [335, "index-0"], [338, "index-2"], [339, "index-0"], [339, "index-1"], [340, "index-11"], [341, "index-11"], [343, "index-3"], [344, "index-1"], [344, "index-10"], [344, "index-11"], [344, "index-12"], [344, "index-13"], [344, "index-2"], [344, "index-4"], [344, "index-5"], [344, "index-7"], [344, "index-8"], [344, "index-9"], [346, "index-2"], [347, "index-0"], [347, "index-1"], [347, "index-4"], [347, "index-5"], [347, "index-6"], [348, "index-2"], [351, "index-48"], [351, "index-49"], [351, "index-56"], [351, "index-57"], [351, "index-59"], [351, "index-71"], [351, "index-72"], [352, "index-0"], [352, "index-1"], [352, "index-10"], [352, "index-14"], [352, "index-15"], [355, "index-0"], [356, "index-2"], [359, "index-0"], [359, "index-1"], [359, "index-13"], [359, "index-14"], [359, "index-15"], [359, "index-16"], [359, "index-19"], [359, "index-20"], [359, "index-24"], [359, "index-25"], [359, "index-29"], [359, "index-30"], [359, "index-31"], [359, "index-40"], [359, "index-41"], [359, "index-9"], [364, "index-5"], [367, "index-3"], [367, "index-4"], [371, "index-8"], [383, "index-0"], [383, "index-1"], [389, "index-0"], [389, "index-1"], [389, "index-2"], [389, "index-4"], [390, "index-0"], [390, "index-1"], [390, "index-10"], [390, "index-11"], [390, "index-12"], [390, "index-13"], [390, "index-14"], [390, "index-16"], [390, "index-17"], [390, "index-18"], [390, "index-19"], [390, "index-2"], [390, "index-20"], [390, "index-21"], [390, "index-22"], [390, "index-23"], [390, "index-24"], [390, "index-25"], [390, "index-26"], [390, "index-27"], [390, "index-28"], [390, "index-29"], [390, "index-3"], [390, "index-30"], [390, "index-31"], [390, "index-32"], [390, "index-33"], [390, "index-34"], [390, "index-35"], [390, "index-36"], [390, "index-37"], [390, "index-38"], [390, "index-39"], [390, "index-4"], [390, "index-40"], [390, "index-41"], [390, "index-42"], [390, "index-43"], [390, "index-44"], [390, "index-45"], [390, "index-46"], [390, "index-47"], [390, "index-48"], [390, "index-49"], [390, "index-5"], [390, "index-50"], [390, "index-51"], [390, "index-52"], [390, "index-53"], [390, "index-54"], [390, "index-55"], [390, "index-56"], [390, "index-57"], [390, "index-58"], [390, "index-59"], [390, "index-6"], [390, "index-60"], [390, "index-61"], [390, "index-62"], [390, "index-63"], [390, "index-64"], [390, "index-65"], [390, "index-66"], [390, "index-67"], [390, "index-68"], [390, "index-69"], [390, "index-7"], [390, "index-70"], [390, "index-71"], [390, "index-72"], [390, "index-73"], [390, "index-74"], [390, "index-75"], [390, "index-76"], [390, "index-78"], [390, "index-79"], [390, "index-8"], [390, "index-82"], [390, "index-83"], [390, "index-9"], [401, "index-3"], [403, "index-3"], [403, "index-5"], [406, "index-1"], [406, "index-2"], [406, "index-4"], [411, "index-0"], [411, "index-1"], [411, "index-11"], [411, "index-12"], [411, "index-13"], [411, "index-14"], [411, "index-15"], [411, "index-16"], [411, "index-2"], [411, "index-3"], [411, "index-4"], [411, "index-6"], [411, "index-7"], [411, "index-8"], [411, "index-9"], [412, "index-7"], [427, "index-0"], [427, "index-1"], [427, "index-2"], [429, "index-0"], [429, "index-1"], [431, "index-16"], [431, "index-18"], [431, "index-19"], [431, "index-23"], [431, "index-24"], [431, "index-25"], [431, "index-29"], [431, "index-32"], [431, "index-35"], [431, "index-36"], [431, "index-37"], [431, "index-38"], [431, "index-41"], [431, "index-42"], [431, "index-43"], [431, "index-44"], [431, "index-49"], [432, "index-103"], [432, "index-104"], [432, "index-106"], [432, "index-110"], [432, "index-81"], [432, "index-83"], [432, "index-86"], [432, "index-89"], [432, "index-90"], [432, "index-91"], [432, "index-92"], [434, "index-14"], [434, "index-19"], [434, "index-21"], [434, "index-26"], [434, "index-27"], [434, "index-28"], [434, "index-29"], [434, "index-30"], [434, "index-51"], [434, "index-79"], [434, "index-87"], [434, "index-89"], [434, "index-94"], [435, "index-0"], [436, "index-1"], [436, "index-11"], [436, "index-12"], [436, "index-13"], [436, "index-14"], [436, "index-15"], [436, "index-18"], [436, "index-19"], [436, "index-2"], [436, "index-20"], [436, "index-21"], [436, "index-22"], [436, "index-23"], [436, "index-24"], [436, "index-25"], [436, "index-26"], [436, "index-6"], [439, "index-1"], [439, "index-11"], [439, "index-12"], [439, "index-21"], [439, "index-26"], [440, "index-13"], [440, "index-16"], [440, "index-17"], [440, "index-41"], [440, "index-42"], [440, "index-46"], [445, "index-15"], [445, "index-16"], [445, "index-17"], [445, "index-18"], [454, "index-16"], [459, "index-1"], [459, "index-11"], [459, "index-13"], [459, "index-14"], [459, "index-15"], [459, "index-18"], [459, "index-35"], [459, "index-36"], [459, "index-48"], [459, "index-49"], [460, "index-31"], [461, "index-0"], [465, "index-0"], [465, "index-14"], [465, "index-15"], [465, "index-17"], [465, "index-29"], [466, "index-0"], [466, "index-1"], [466, "index-2"], [466, "index-3"], [467, "index-0"], [467, "index-1"], [467, "index-10"], [467, "index-12"], [467, "index-13"], [467, "index-14"], [467, "index-15"], [467, "index-16"], [467, "index-17"], [467, "index-2"], [467, "index-3"], [467, "index-4"], [467, "index-5"], [467, "index-6"], [467, "index-7"], [467, "index-8"], [467, "index-9"], [468, "index-0"], [468, "index-1"], [468, "index-10"], [468, "index-11"], [468, "index-12"], [468, "index-13"], [468, "index-14"], [468, "index-15"], [468, "index-16"], [468, "index-2"], [468, "index-22"], [468, "index-3"], [468, "index-4"], [468, "index-5"], [468, "index-6"], [468, "index-7"], [468, "index-8"], [468, "index-9"], [469, "index-0"], [469, "index-1"], [469, "index-10"], [469, "index-11"], [469, "index-12"], [469, "index-13"], [469, "index-14"], [469, "index-15"], [469, "index-16"], [469, "index-17"], [469, "index-18"], [469, "index-19"], [469, "index-2"], [469, "index-20"], [469, "index-21"], [469, "index-22"], [469, "index-23"], [469, "index-3"], [469, "index-4"], [469, "index-5"], [469, "index-6"], [469, "index-7"], [469, "index-9"], [470, "index-0"], [470, "index-1"], [470, "index-10"], [470, "index-11"], [470, "index-12"], [470, "index-13"], [470, "index-14"], [470, "index-15"], [470, "index-16"], [470, "index-17"], [470, "index-2"], [470, "index-3"], [470, "index-4"], [470, "index-5"], [470, "index-6"], [470, "index-8"], [470, "index-9"], [471, "index-0"], [471, "index-1"], [471, "index-10"], [471, "index-11"], [471, "index-12"], [471, "index-13"], [471, "index-14"], [471, "index-15"], [471, "index-16"], [471, "index-17"], [471, "index-18"], [471, "index-19"], [471, "index-2"], [471, "index-21"], [471, "index-24"], [471, "index-25"], [471, "index-26"], [471, "index-27"], [471, "index-28"], [471, "index-29"], [471, "index-3"], [471, "index-30"], [471, "index-31"], [471, "index-4"], [471, "index-5"], [471, "index-6"], [471, "index-7"], [471, "index-8"], [471, "index-9"], [472, "index-0"], [472, "index-1"], [472, "index-10"], [472, "index-11"], [472, "index-12"], [472, "index-14"], [472, "index-15"], [472, "index-16"], [472, "index-17"], [472, "index-18"], [472, "index-19"], [472, "index-2"], [472, "index-25"], [472, "index-3"], [472, "index-7"], [472, "index-8"], [472, "index-9"], [473, "index-0"], [473, "index-16"], [473, "index-17"], [473, "index-18"], [473, "index-19"], [473, "index-2"], [473, "index-20"], [473, "index-21"], [473, "index-22"], [473, "index-23"], [473, "index-24"], [473, "index-25"], [473, "index-26"], [473, "index-3"], [473, "index-4"], [473, "index-5"], [473, "index-6"], [473, "index-7"], [474, "index-0"], [474, "index-1"], [474, "index-10"], [474, "index-11"], [474, "index-12"], [474, "index-13"], [474, "index-14"], [474, "index-15"], [474, "index-16"], [474, "index-17"], [474, "index-18"], [474, "index-19"], [474, "index-2"], [474, "index-20"], [474, "index-21"], [474, "index-22"], [474, "index-23"], [474, "index-24"], [474, "index-25"], [474, "index-26"], [474, "index-27"], [474, "index-28"], [474, "index-29"], [474, "index-3"], [474, "index-30"], [474, "index-31"], [474, "index-32"], [474, "index-33"], [474, "index-34"], [474, "index-35"], [474, "index-4"], [474, "index-5"], [474, "index-6"], [474, "index-7"], [474, "index-8"], [474, "index-9"], [475, "index-0"], [475, "index-1"], [475, "index-2"], [475, "index-3"], [476, "index-0"], [476, "index-1"], [476, "index-10"], [476, "index-11"], [476, "index-12"], [476, "index-13"], [476, "index-14"], [476, "index-15"], [476, "index-16"], [476, "index-18"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-24"], [476, "index-25"], [476, "index-26"], [476, "index-27"], [476, "index-28"], [476, "index-29"], [476, "index-3"], [476, "index-30"], [476, "index-32"], [476, "index-33"], [476, "index-35"], [476, "index-36"], [476, "index-37"], [476, "index-38"], [476, "index-39"], [476, "index-4"], [476, "index-42"], [476, "index-43"], [476, "index-5"], [476, "index-6"], [476, "index-7"], [476, "index-8"], [476, "index-9"], [477, "index-0"], [477, "index-1"], [477, "index-14"], [477, "index-2"], [477, "index-3"], [477, "index-4"], [477, "index-5"], [477, "index-6"], [477, "index-9"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-12"], [478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-16"], [478, "index-17"], [478, "index-18"], [478, "index-19"], [478, "index-2"], [478, "index-20"], [478, "index-21"], [478, "index-22"], [478, "index-25"], [478, "index-28"], [478, "index-29"], [478, "index-3"], [478, "index-30"], [478, "index-31"], [478, "index-32"], [478, "index-33"], [478, "index-34"], [478, "index-36"], [478, "index-37"], [478, "index-38"], [478, "index-4"], [478, "index-40"], [478, "index-6"], [478, "index-7"], [478, "index-8"], [478, "index-9"], [479, "index-0"], [479, "index-1"], [479, "index-10"], [479, "index-11"], [479, "index-12"], [479, "index-13"], [479, "index-14"], [479, "index-15"], [479, "index-16"], [479, "index-17"], [479, "index-18"], [479, "index-19"], [479, "index-2"], [479, "index-20"], [479, "index-21"], [479, "index-22"], [479, "index-23"], [479, "index-24"], [479, "index-25"], [479, "index-26"], [479, "index-27"], [479, "index-28"], [479, "index-29"], [479, "index-3"], [479, "index-30"], [479, "index-31"], [479, "index-32"], [479, "index-33"], [479, "index-34"], [479, "index-35"], [479, "index-36"], [479, "index-37"], [479, "index-38"], [479, "index-39"], [479, "index-4"], [479, "index-42"], [479, "index-43"], [479, "index-44"], [479, "index-45"], [479, "index-46"], [479, "index-47"], [479, "index-48"], [479, "index-49"], [479, "index-5"], [479, "index-52"], [479, "index-53"], [479, "index-6"], [479, "index-7"], [479, "index-8"], [479, "index-9"], [480, "index-0"], [480, "index-1"], [480, "index-10"], [480, "index-11"], [480, "index-12"], [480, "index-13"], [480, "index-14"], [480, "index-15"], [480, "index-16"], [480, "index-17"], [480, "index-18"], [480, "index-19"], [480, "index-2"], [480, "index-20"], [480, "index-21"], [480, "index-22"], [480, "index-23"], [480, "index-24"], [480, "index-25"], [480, "index-26"], [480, "index-27"], [480, "index-28"], [480, "index-29"], [480, "index-3"], [480, "index-30"], [480, "index-4"], [480, "index-47"], [480, "index-48"], [480, "index-49"], [480, "index-5"], [480, "index-50"], [480, "index-51"], [480, "index-52"], [480, "index-54"], [480, "index-6"], [480, "index-7"], [480, "index-8"], [480, "index-9"], [481, "index-0"], [481, "index-1"], [481, "index-10"], [481, "index-11"], [481, "index-12"], [481, "index-13"], [481, "index-14"], [481, "index-15"], [481, "index-16"], [481, "index-17"], [481, "index-18"], [481, "index-20"], [481, "index-22"], [481, "index-23"], [481, "index-24"], [481, "index-25"], [481, "index-26"], [481, "index-28"], [481, "index-29"], [481, "index-3"], [481, "index-30"], [481, "index-31"], [481, "index-32"], [481, "index-33"], [481, "index-34"], [481, "index-35"], [481, "index-36"], [481, "index-37"], [481, "index-4"], [481, "index-5"], [481, "index-6"], [481, "index-7"], [481, "index-8"], [481, "index-9"], [482, "index-0"], [482, "index-1"], [482, "index-10"], [482, "index-11"], [482, "index-13"], [482, "index-14"], [482, "index-15"], [482, "index-16"], [482, "index-17"], [482, "index-18"], [482, "index-19"], [482, "index-2"], [482, "index-20"], [482, "index-21"], [482, "index-22"], [482, "index-23"], [482, "index-24"], [482, "index-28"], [482, "index-29"], [482, "index-3"], [482, "index-30"], [482, "index-32"], [482, "index-33"], [482, "index-37"], [482, "index-38"], [482, "index-40"], [482, "index-5"], [482, "index-6"], [482, "index-7"], [482, "index-9"], [483, "index-10"], [483, "index-11"], [483, "index-12"], [483, "index-15"], [483, "index-16"], [483, "index-17"], [483, "index-18"], [483, "index-19"], [483, "index-23"], [483, "index-24"], [483, "index-31"], [483, "index-32"], [483, "index-33"], [483, "index-34"], [483, "index-35"], [483, "index-36"], [483, "index-5"], [483, "index-8"], [484, "index-0"], [484, "index-1"], [484, "index-10"], [484, "index-11"], [484, "index-12"], [484, "index-13"], [484, "index-14"], [484, "index-15"], [484, "index-16"], [484, "index-17"], [484, "index-18"], [484, "index-19"], [484, "index-2"], [484, "index-20"], [484, "index-23"], [484, "index-24"], [484, "index-25"], [484, "index-26"], [484, "index-27"], [484, "index-3"], [484, "index-4"], [484, "index-5"], [484, "index-6"], [484, "index-7"], [484, "index-8"], [484, "index-9"], [485, "index-10"], [485, "index-100"], [485, "index-101"], [485, "index-102"], [485, "index-103"], [485, "index-104"], [485, "index-105"], [485, "index-106"], [485, "index-107"], [485, "index-108"], [485, "index-109"], [485, "index-111"], [485, "index-112"], [485, "index-113"], [485, "index-114"], [485, "index-115"], [485, "index-116"], [485, "index-117"], [485, "index-121"], [485, "index-123"], [485, "index-124"], [485, "index-125"], [485, "index-127"], [485, "index-128"], [485, "index-129"], [485, "index-132"], [485, "index-134"], [485, "index-138"], [485, "index-139"], [485, "index-140"], [485, "index-141"], [485, "index-142"], [485, "index-145"], [485, "index-146"], [485, "index-147"], [485, "index-15"], [485, "index-150"], [485, "index-151"], [485, "index-152"], [485, "index-155"], [485, "index-156"], [485, "index-157"], [485, "index-158"], [485, "index-159"], [485, "index-16"], [485, "index-160"], [485, "index-161"], [485, "index-163"], [485, "index-164"], [485, "index-165"], [485, "index-166"], [485, "index-167"], [485, "index-168"], [485, "index-169"], [485, "index-17"], [485, "index-170"], [485, "index-171"], [485, "index-172"], [485, "index-175"], [485, "index-176"], [485, "index-177"], [485, "index-178"], [485, "index-179"], [485, "index-18"], [485, "index-180"], [485, "index-181"], [485, "index-182"], [485, "index-183"], [485, "index-184"], [485, "index-185"], [485, "index-186"], [485, "index-187"], [485, "index-188"], [485, "index-189"], [485, "index-19"], [485, "index-190"], [485, "index-191"], [485, "index-192"], [485, "index-193"], [485, "index-194"], [485, "index-195"], [485, "index-196"], [485, "index-197"], [485, "index-198"], [485, "index-199"], [485, "index-2"], [485, "index-20"], [485, "index-200"], [485, "index-201"], [485, "index-202"], [485, "index-205"], [485, "index-206"], [485, "index-207"], [485, "index-208"], [485, "index-209"], [485, "index-21"], [485, "index-210"], [485, "index-211"], [485, "index-212"], [485, "index-213"], [485, "index-214"], [485, "index-215"], [485, "index-216"], [485, "index-217"], [485, "index-218"], [485, "index-219"], [485, "index-22"], [485, "index-220"], [485, "index-221"], [485, "index-222"], [485, "index-23"], [485, "index-24"], [485, "index-26"], [485, "index-27"], [485, "index-28"], [485, "index-29"], [485, "index-30"], [485, "index-31"], [485, "index-32"], [485, "index-33"], [485, "index-34"], [485, "index-35"], [485, "index-36"], [485, "index-37"], [485, "index-38"], [485, "index-39"], [485, "index-4"], [485, "index-40"], [485, "index-41"], [485, "index-42"], [485, "index-43"], [485, "index-44"], [485, "index-45"], [485, "index-46"], [485, "index-47"], [485, "index-48"], [485, "index-49"], [485, "index-5"], [485, "index-50"], [485, "index-51"], [485, "index-52"], [485, "index-53"], [485, "index-54"], [485, "index-56"], [485, "index-57"], [485, "index-58"], [485, "index-59"], [485, "index-60"], [485, "index-61"], [485, "index-62"], [485, "index-63"], [485, "index-64"], [485, "index-65"], [485, "index-66"], [485, "index-67"], [485, "index-68"], [485, "index-69"], [485, "index-7"], [485, "index-70"], [485, "index-72"], [485, "index-73"], [485, "index-74"], [485, "index-75"], [485, "index-76"], [485, "index-77"], [485, "index-78"], [485, "index-79"], [485, "index-8"], [485, "index-80"], [485, "index-81"], [485, "index-82"], [485, "index-83"], [485, "index-84"], [485, "index-85"], [485, "index-86"], [485, "index-87"], [485, "index-88"], [485, "index-89"], [485, "index-9"], [485, "index-90"], [485, "index-91"], [485, "index-92"], [485, "index-93"], [485, "index-94"], [485, "index-96"], [485, "index-97"], [485, "index-98"], [485, "index-99"], [486, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_new (c function)": [[13, "c.PyCode_New"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs (c function)": [[13, "c.PyCode_NewWithPosOnlyArgs"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "code": [[13, "index-0"], [163, "module-code"], [280, "index-1"], [351, "index-61"], [432, "index-55"], [433, "index-0"]], "code object": [[13, "index-0"], [280, "index-1"], [351, "index-61"], [432, "index-55"]], "object": [[13, "index-0"], [85, "index-0"], [280, "index-1"], [351, "index-61"], [351, "index-8"], [432, "index-0"], [432, "index-55"], [434, "index-20"], [434, "index-7"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number": [[15, "index-0"], [351, "index-11"], [351, "index-12"]], "mapping": [[16, "index-2"], [351, "index-51"], [432, "index-29"], [432, "index-51"], [434, "index-42"], [440, "index-11"]], "numeric": [[16, "index-0"], [351, "index-11"], [351, "index-12"], [351, "index-14"], [351, "index-15"], [351, "index-8"], [432, "index-51"], [432, "index-9"]], "sequence": [[16, "index-1"], [351, "index-17"], [351, "index-18"], [351, "index-19"], [351, "index-21"], [351, "index-22"], [351, "index-23"], [431, "index-6"], [432, "index-15"], [432, "index-51"], [434, "index-42"], [434, "index-45"], [434, "index-80"], [440, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pyunicode_fromstring()": [[22, "index-1"]], "dictionary": [[22, "index-0"], [351, "index-51"], [432, "index-30"], [432, "index-45"], [432, "index-76"], [434, "index-17"], [434, "index-18"], [434, "index-42"], [440, "index-11"]], "len": [[22, "index-2"], [36, "index-1"], [38, "index-0"], [47, "index-8"], [51, "index-0"], [52, "index-1"], [351, "index-19"], [351, "index-51"], [432, "index-15"], [432, "index-26"], [432, "index-29"], [432, "index-94"]], "\u5167\u5efa\u51fd\u5f0f": [[22, "index-2"], [29, "index-1"], [29, "index-2"], [36, "index-1"], [36, "index-2"], [38, "index-0"], [45, "index-0"], [45, "index-1"], [45, "index-2"], [45, "index-3"], [45, "index-4"], [45, "index-5"], [47, "index-0"], [47, "index-1"], [47, "index-3"], [47, "index-6"], [47, "index-7"], [47, "index-8"], [51, "index-0"], [51, "index-1"], [52, "index-1"], [55, "index-0"], [55, "index-1"], [60, "index-1"], [60, "index-2"], [70, "create_shortcut"], [70, "directory_created"], [70, "file_created"], [70, "get_special_folder_path"], [85, "index-3"], [197, "index-1"], [232, "abs"], [232, "aiter"], [232, "all"], [232, "anext"], [232, "any"], [232, "ascii"], [232, "bin"], [232, "breakpoint"], [232, "callable"], [232, "chr"], [232, "classmethod"], [232, "compile"], [232, "delattr"], [232, "dir"], [232, "divmod"], [232, "enumerate"], [232, "eval"], [232, "exec"], [232, "filter"], [232, "format"], [232, "getattr"], [232, "globals"], [232, "hasattr"], [232, "hash"], [232, "help"], [232, "hex"], [232, "id"], [232, "import__"], [232, "index-1"], [232, "input"], [232, "isinstance"], [232, "issubclass"], [232, "iter"], [232, "len"], [232, "locals"], [232, "map"], [232, "max"], [232, "min"], [232, "next"], [232, "oct"], [232, "open"], [232, "ord"], [232, "pow"], [232, "print"], [232, "repr"], [232, "reversed"], [232, "round"], [232, "setattr"], [232, "sorted"], [232, "staticmethod"], [232, "sum"], [232, "vars"], [232, "zip"], [289, "multiprocessing.Manager"], [313, "index-1"], [313, "index-2"], [351, "index-13"], [351, "index-19"], [351, "index-21"], [351, "index-51"], [351, "index-62"], [351, "index-63"], [351, "index-64"], [389, "index-3"], [417, "xml.etree.ElementInclude.default_loader"], [417, "xml.etree.ElementInclude.include"], [431, "index-8"], [432, "index-1"], [432, "index-100"], [432, "index-101"], [432, "index-15"], [432, "index-19"], [432, "index-26"], [432, "index-29"], [432, "index-53"], [432, "index-65"], [432, "index-73"], [432, "index-74"], [432, "index-76"], [432, "index-82"], [432, "index-94"], [432, "index-96"], [432, "index-97"], [432, "index-98"], [432, "index-99"], [440, "index-3"], [440, "index-44"], [441, "index-6"], [450, "index-0"], [455, "index-0"]], "keyboardinterrupt (built-in exception)": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [220, "index-8"], [328, "index-0"], [334, "index-0"], [344, "index-2"], [478, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror": [[23, "index-4"]], "pyexc_assertionerror": [[23, "index-4"]], "pyexc_attributeerror": [[23, "index-4"]], "pyexc_baseexception": [[23, "index-4"]], "pyexc_blockingioerror": [[23, "index-4"]], "pyexc_brokenpipeerror": [[23, "index-4"]], "pyexc_buffererror": [[23, "index-4"]], "pyexc_byteswarning": [[23, "index-7"]], "pyexc_childprocesserror": [[23, "index-4"]], "pyexc_connectionabortederror": [[23, "index-4"]], "pyexc_connectionerror": [[23, "index-4"]], "pyexc_connectionrefusederror": [[23, "index-4"]], "pyexc_connectionreseterror": [[23, "index-4"]], "pyexc_deprecationwarning": [[23, "index-7"]], "pyexc_eoferror": [[23, "index-4"]], "pyexc_environmenterror": [[23, "index-6"]], "pyexc_exception": [[23, "index-4"]], "pyexc_fileexistserror": [[23, "index-4"]], "pyexc_filenotfounderror": [[23, "index-4"]], "pyexc_floatingpointerror": [[23, "index-4"]], "pyexc_futurewarning": [[23, "index-7"]], "pyexc_generatorexit": [[23, "index-4"]], "pyexc_ioerror": [[23, "index-6"]], "pyexc_importerror": [[23, "index-4"]], "pyexc_importwarning": [[23, "index-7"]], "pyexc_indentationerror": [[23, "index-4"]], "pyexc_indexerror": [[23, "index-4"]], "pyexc_interruptederror": [[23, "index-4"]], "pyexc_isadirectoryerror": [[23, "index-4"]], "pyexc_keyerror": [[23, "index-4"]], "pyexc_keyboardinterrupt": [[23, "index-4"]], "pyexc_lookuperror": [[23, "index-4"]], "pyexc_memoryerror": [[23, "index-4"]], "pyexc_modulenotfounderror": [[23, "index-4"]], "pyexc_nameerror": [[23, "index-4"]], "pyexc_notadirectoryerror": [[23, "index-4"]], "pyexc_notimplementederror": [[23, "index-4"]], "pyexc_oserror": [[23, "index-4"]], "pyexc_overflowerror": [[23, "index-4"]], "pyexc_pendingdeprecationwarning": [[23, "index-7"]], "pyexc_permissionerror": [[23, "index-4"]], "pyexc_processlookuperror": [[23, "index-4"]], "pyexc_recursionerror": [[23, "index-4"]], "pyexc_referenceerror": [[23, "index-4"]], "pyexc_resourcewarning": [[23, "index-7"]], "pyexc_runtimeerror": [[23, "index-4"]], "pyexc_runtimewarning": [[23, "index-7"]], "pyexc_stopasynciteration": [[23, "index-4"]], "pyexc_stopiteration": [[23, "index-4"]], "pyexc_syntaxerror": [[23, "index-4"]], "pyexc_syntaxwarning": [[23, "index-7"]], "pyexc_systemerror": [[23, "index-4"]], "pyexc_systemexit": [[23, "index-4"]], "pyexc_taberror": [[23, "index-4"]], "pyexc_timeouterror": [[23, "index-4"]], "pyexc_typeerror": [[23, "index-4"]], "pyexc_unboundlocalerror": [[23, "index-4"]], "pyexc_unicodedecodeerror": [[23, "index-4"]], "pyexc_unicodeencodeerror": [[23, "index-4"]], "pyexc_unicodeerror": [[23, "index-4"]], "pyexc_unicodetranslateerror": [[23, "index-4"]], "pyexc_unicodewarning": [[23, "index-7"]], "pyexc_userwarning": [[23, "index-7"]], "pyexc_valueerror": [[23, "index-4"]], "pyexc_warning": [[23, "index-7"]], "pyexc_windowserror": [[23, "index-6"]], "pyexc_zerodivisionerror": [[23, "index-4"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_create (c function)": [[23, "c.PyUnicodeEncodeError_Create"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_create (c function)": [[23, "c.PyUnicodeTranslateError_Create"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint": [[23, "index-1"], [23, "index-2"]], "signal": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [121, "index-2"], [339, "module-signal"]], "strerror()": [[23, "index-0"]], "\u6a21\u7d44": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [31, "index-16"], [31, "index-39"], [31, "index-42"], [33, "index-23"], [69, "module-distutils.archive_util"], [69, "module-distutils.bcppcompiler"], [69, "module-distutils.ccompiler"], [69, "module-distutils.cmd"], [69, "module-distutils.command"], [69, "module-distutils.command.bdist"], [69, "module-distutils.command.bdist_dumb"], [69, "module-distutils.command.bdist_msi"], [69, "module-distutils.command.bdist_packager"], [69, "module-distutils.command.bdist_rpm"], [69, "module-distutils.command.build"], [69, "module-distutils.command.build_clib"], [69, "module-distutils.command.build_ext"], [69, "module-distutils.command.build_py"], [69, "module-distutils.command.build_scripts"], [69, "module-distutils.command.check"], [69, "module-distutils.command.clean"], [69, "module-distutils.command.config"], [69, "module-distutils.command.install"], [69, "module-distutils.command.install_data"], [69, "module-distutils.command.install_headers"], [69, "module-distutils.command.install_lib"], [69, "module-distutils.command.install_scripts"], [69, "module-distutils.command.register"], [69, "module-distutils.command.sdist"], [69, "module-distutils.core"], [69, "module-distutils.cygwinccompiler"], [69, "module-distutils.debug"], [69, "module-distutils.dep_util"], [69, "module-distutils.dir_util"], [69, "module-distutils.dist"], [69, "module-distutils.errors"], [69, "module-distutils.extension"], [69, "module-distutils.fancy_getopt"], [69, "module-distutils.file_util"], [69, "module-distutils.filelist"], [69, "module-distutils.log"], [69, "module-distutils.msvccompiler"], [69, "module-distutils.spawn"], [69, "module-distutils.sysconfig"], [69, "module-distutils.text_file"], [69, "module-distutils.unixccompiler"], [69, "module-distutils.util"], [69, "module-distutils.version"], [118, "module-lib2to3"], [119, "module-__future__"], [120, "module-__main__"], [121, "index-2"], [121, "module-_thread"], [122, "module-abc"], [123, "module-aifc"], [126, "module-argparse"], [127, "module-array"], [128, "module-ast"], [129, "module-asynchat"], [130, "module-asyncio"], [145, "module-asyncore"], [146, "module-atexit"], [147, "module-audioop"], [149, "module-base64"], [150, "module-bdb"], [152, "index-0"], [152, "module-binascii"], [153, "module-binhex"], [154, "module-bisect"], [155, "module-builtins"], [156, "module-bz2"], [157, "module-calendar"], [158, "module-cgi"], [159, "module-cgitb"], [160, "module-chunk"], [161, "index-1"], [161, "module-cmath"], [162, "module-cmd"], [163, "module-code"], [164, "module-codecs"], [164, "module-encodings.idna"], [164, "module-encodings.mbcs"], [164, "module-encodings.utf_8_sig"], [165, "module-codeop"], [166, "module-collections"], [167, "module-collections.abc"], [168, "module-colorsys"], [169, "module-compileall"], [172, "module-concurrent.futures"], [173, "module-configparser"], [175, "module-contextlib"], [176, "module-contextvars"], [177, "index-0"], [177, "module-copy"], [178, "index-0"], [178, "module-copyreg"], [179, "module-crypt"], [181, "module-csv"], [182, "module-ctypes"], [183, "module-curses"], [183, "module-curses.textpad"], [184, "module-curses.ascii"], [185, "module-curses.panel"], [187, "module-dataclasses"], [189, "module-datetime"], [190, "module-dbm"], [190, "module-dbm.dumb"], [190, "module-dbm.gnu"], [190, "module-dbm.ndbm"], [192, "module-decimal"], [195, "module-tkinter.commondialog"], [195, "module-tkinter.filedialog"], [195, "module-tkinter.simpledialog"], [196, "module-difflib"], [197, "module-dis"], [199, "module-distutils"], [200, "module-doctest"], [201, "module-email"], [202, "module-email.charset"], [204, "module-email.contentmanager"], [205, "module-email.encoders"], [206, "module-email.errors"], [208, "module-email.generator"], [209, "module-email.header"], [210, "module-email.headerregistry"], [211, "module-email.iterators"], [212, "module-email.message"], [213, "module-email.mime"], [214, "module-email.parser"], [215, "module-email.policy"], [216, "module-email.utils"], [217, "module-ensurepip"], [218, "module-enum"], [219, "module-errno"], [220, "index-4"], [221, "module-faulthandler"], [222, "module-fcntl"], [223, "module-filecmp"], [225, "module-fileinput"], [227, "index-1"], [227, "index-3"], [227, "module-fnmatch"], [228, "module-fractions"], [230, "module-ftplib"], [232, "index-12"], [232, "index-7"], [233, "module-functools"], [234, "module-gc"], [235, "module-getopt"], [236, "module-getpass"], [237, "module-gettext"], [238, "module-glob"], [239, "module-graphlib"], [240, "module-grp"], [241, "module-gzip"], [242, "module-hashlib"], [243, "module-heapq"], [244, "module-hmac"], [245, "module-html"], [246, "module-html.entities"], [247, "module-html.parser"], [248, "module-http"], [249, "index-1"], [249, "module-http.client"], [250, "module-http.cookiejar"], [251, "module-http.cookies"], [252, "module-http.server"], [254, "module-idlelib"], [255, "module-imaplib"], [256, "module-imghdr"], [257, "module-imp"], [258, "module-importlib"], [258, "module-importlib.abc"], [258, "module-importlib.machinery"], [258, "module-importlib.resources"], [258, "module-importlib.util"], [259, "module-importlib.metadata"], [261, "module-inspect"], [262, "index-1"], [264, "module-io"], [265, "module-ipaddress"], [267, "module-itertools"], [268, "module-json"], [268, "module-json.tool"], [269, "module-keyword"], [271, "module-linecache"], [272, "index-0"], [272, "index-6"], [272, "module-locale"], [273, "module-logging"], [274, "module-logging.config"], [275, "module-logging.handlers"], [276, "module-lzma"], [277, "module-mailbox"], [278, "module-mailcap"], [280, "index-0"], [280, "module-marshal"], [281, "module-math"], [282, "module-mimetypes"], [284, "module-mmap"], [285, "module-modulefinder"], [287, "module-msilib"], [288, "module-msvcrt"], [289, "module-multiprocessing"], [289, "module-multiprocessing.connection"], [289, "module-multiprocessing.dummy"], [289, "module-multiprocessing.managers"], [289, "module-multiprocessing.pool"], [289, "module-multiprocessing.sharedctypes"], [290, "module-multiprocessing.shared_memory"], [292, "module-netrc"], [293, "module-nis"], [294, "module-nntplib"], [295, "module-numbers"], [297, "module-operator"], [298, "module-optparse"], [299, "index-22"], [299, "index-29"], [299, "module-os"], [300, "index-2"], [300, "module-os.path"], [301, "module-ossaudiodev"], [302, "module-pathlib"], [303, "index-1"], [303, "module-pdb"], [305, "module-pickle"], [306, "module-pickletools"], [307, "module-pipes"], [308, "module-pkgutil"], [309, "module-platform"], [310, "module-plistlib"], [311, "module-poplib"], [312, "index-0"], [312, "module-posix"], [313, "module-pprint"], [314, "module-cProfile"], [314, "module-profile"], [314, "module-pstats"], [315, "module-pty"], [316, "index-0"], [316, "module-pwd"], [317, "module-py_compile"], [318, "module-pyclbr"], [319, "module-pydoc"], [320, "index-1"], [320, "module-xml.parsers.expat"], [320, "module-xml.parsers.expat.errors"], [320, "module-xml.parsers.expat.model"], [322, "module-queue"], [323, "module-quopri"], [324, "module-random"], [325, "module-re"], [326, "module-readline"], [327, "module-reprlib"], [328, "module-resource"], [329, "module-rlcompleter"], [330, "index-0"], [330, "index-4"], [330, "module-runpy"], [331, "module-sched"], [332, "module-secrets"], [334, "module-select"], [335, "module-selectors"], [336, "index-0"], [336, "index-1"], [336, "module-shelve"], [337, "module-shlex"], [338, "module-shutil"], [339, "module-signal"], [340, "index-5"], [340, "index-6"], [340, "module-site"], [341, "module-smtpd"], [342, "module-smtplib"], [343, "module-sndhdr"], [344, "index-14"], [344, "module-socket"], [345, "module-socketserver"], [346, "module-spwd"], [347, "module-sqlite3"], [348, "module-ssl"], [349, "module-stat"], [350, "module-statistics"], [351, "index-15"], [351, "index-32"], [351, "index-39"], [351, "index-64"], [352, "module-string"], [353, "module-stringprep"], [354, "module-struct"], [355, "module-subprocess"], [356, "module-sunau"], [358, "module-symtable"], [359, "module-sys"], [360, "module-sysconfig"], [361, "module-syslog"], [362, "module-tabnanny"], [363, "module-tarfile"], [364, "module-telnetlib"], [365, "module-tempfile"], [366, "module-termios"], [367, "module-test"], [367, "module-test.support"], [367, "module-test.support.bytecode_helper"], [367, "module-test.support.import_helper"], [367, "module-test.support.os_helper"], [367, "module-test.support.script_helper"], [367, "module-test.support.socket_helper"], [367, "module-test.support.threading_helper"], [367, "module-test.support.warnings_helper"], [369, "module-textwrap"], [370, "module-threading"], [371, "module-time"], [372, "module-timeit"], [374, "module-tkinter"], [375, "module-tkinter.colorchooser"], [376, "module-tkinter.dnd"], [377, "module-tkinter.font"], [378, "module-tkinter.messagebox"], [379, "module-tkinter.scrolledtext"], [380, "module-tkinter.tix"], [381, "module-tkinter.ttk"], [382, "module-token"], [383, "module-tokenize"], [384, "module-trace"], [385, "module-traceback"], [386, "module-tracemalloc"], [387, "module-tty"], [388, "module-turtle"], [388, "module-turtledemo"], [389, "module-types"], [390, "module-typing"], [391, "module-unicodedata"], [392, "module-unittest"], [393, "module-unittest.mock"], [396, "module-urllib"], [397, "module-urllib.error"], [398, "module-urllib.parse"], [399, "module-urllib.request"], [399, "module-urllib.response"], [400, "module-urllib.robotparser"], [401, "module-uu"], [402, "module-uuid"], [403, "module-venv"], [404, "module-warnings"], [405, "module-wave"], [406, "module-weakref"], [407, "module-webbrowser"], [409, "module-winreg"], [410, "module-winsound"], [411, "module-wsgiref"], [411, "module-wsgiref.handlers"], [411, "module-wsgiref.headers"], [411, "module-wsgiref.simple_server"], [411, "module-wsgiref.util"], [411, "module-wsgiref.validate"], [412, "module-xdrlib"], [413, "module-xml"], [414, "module-xml.dom"], [415, "module-xml.dom.minidom"], [416, "module-xml.dom.pulldom"], [417, "module-xml.etree.ElementTree"], [418, "module-xml.sax"], [419, "module-xml.sax.handler"], [420, "module-xml.sax.xmlreader"], [421, "module-xml.sax.saxutils"], [423, "module-xmlrpc.client"], [424, "module-xmlrpc.server"], [425, "module-zipapp"], [426, "module-zipfile"], [427, "module-zipimport"], [428, "module-zlib"], [429, "module-zoneinfo"], [431, "index-11"], [432, "index-25"], [432, "index-31"], [432, "index-53"], [433, "index-10"], [441, "index-2"], [441, "index-3"], [450, "index-1"], [454, "index-4"], [454, "index-7"]], "eoferror (built-in exception)": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw": [[24, "index-2"]], "file": [[24, "index-0"], [169, "cmdoption-compileall-arg-file"], [173, "index-0"], [232, "index-5"], [241, "cmdoption-gzip-arg-file"], [257, "index-1"], [282, "index-2"], [303, "index-2"], [310, "index-0"], [312, "index-1"], [317, "index-0"], [338, "index-0"], [340, "index-4"], [365, "index-0"], [450, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "floating point": [[25, "index-0"], [351, "index-11"], [351, "index-12"], [432, "index-13"]], "methodtype (in module types)": [[26, "index-1"], [42, "index-2"]], "pyfunctionobject (c type)": [[26, "c.PyFunctionObject"]], "pyfunction_check (c function)": [[26, "c.PyFunction_Check"]], "pyfunction_getannotations (c function)": [[26, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[26, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[26, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[26, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[26, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[26, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[26, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[26, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[26, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[26, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[26, "c.PyFunction_SetDefaults"]], "pyfunction_type (c var)": [[26, "c.PyFunction_Type"]], "function": [[26, "index-0"], [431, "index-27"], [431, "index-33"], [432, "index-32"], [432, "index-33"], [432, "index-37"], [432, "index-38"], [432, "index-39"], [432, "index-40"], [434, "index-23"], [434, "index-52"], [434, "index-53"], [434, "index-90"], [440, "index-24"], [440, "index-26"], [445, "index-6"]], "pygc_collect (c function)": [[27, "c.PyGC_Collect"]], "pygc_disable (c function)": [[27, "c.PyGC_Disable"]], "pygc_enable (c function)": [[27, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[27, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[27, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[27, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[27, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c function)": [[27, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c function)": [[27, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c function)": [[27, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[27, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[27, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[27, "c.PyObject_IS_GC"]], "py_visit (c function)": [[27, "c.Py_VISIT"]], "inquiry (c type)": [[27, "c.inquiry"]], "traverseproc (c type)": [[27, "c.traverseproc"]], "visitproc (c type)": [[27, "c.visitproc"]], "pygenobject (c type)": [[28, "c.PyGenObject"]], "pygen_check (c function)": [[28, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[28, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[28, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[28, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[28, "c.PyGen_Type"]], "pep 3147": [[29, "index-3"], [69, "index-3"], [95, "index-3"], [169, "index-0"], [169, "index-2"], [169, "index-3"], [257, "index-2"], [257, "index-3"], [257, "index-4"], [257, "index-5"], [257, "index-6"], [258, "index-11"], [258, "index-21"], [258, "index-23"], [258, "index-24"], [317, "index-1"], [317, "index-4"], [330, "index-2"], [367, "index-3"], [436, "index-13"], [454, "index-16"], [477, "index-5"], [478, "index-18"]], "pyimport_addmodule (c function)": [[29, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[29, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[29, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[29, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[29, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[29, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[29, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[29, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[29, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[29, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[29, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[29, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[29, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[29, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[29, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[29, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[29, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[29, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[29, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[29, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[29, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[29, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[29, "c.PyImport_ReloadModule"]], "__all__": [[29, "index-0"], [454, "index-8"]], "__all__ (package variable)": [[29, "index-0"]], "__import__": [[29, "index-1"]], "_frozen (c struct)": [[29, "c._frozen"]], "_inittab (c struct)": [[29, "c._inittab"]], "compile": [[29, "index-2"], [351, "index-62"], [389, "index-3"], [440, "index-44"]], "freeze utility": [[29, "index-4"]], "modules (in module sys)": [[29, "index-0"], [31, "index-16"]], "package variable": [[29, "index-0"]], "pep 523": [[31, "index-40"], [31, "index-41"], [481, "index-25"], [481, "index-26"], [484, "index-24"], [485, "index-171"], [485, "index-176"], [485, "index-184"]], "pep 528": [[31, "index-51"], [32, "index-13"], [465, "index-14"], [481, "index-22"]], "pep 529": [[31, "index-50"], [61, "index-6"], [299, "index-26"], [359, "index-41"], [359, "index-9"], [459, "index-48"], [465, "index-15"], [481, "index-20"], [483, "index-19"], [485, "index-125"], [485, "index-178"], [485, "index-5"]], "pep 539": [[31, "index-47"], [482, "index-14"], [482, "index-15"], [485, "index-165"]], "python*": [[31, "index-4"], [459, "index-0"], [459, "index-10"], [459, "index-2"], [459, "index-5"], [479, "index-50"], [485, "index-0"]], "pythondebug": [[31, "index-0"], [32, "index-18"], [459, "envvar-PYTHONDEBUG"], [459, "index-4"]], "pythondontwritebytecode": [[31, "index-1"], [32, "index-27"], [95, "index-4"], [359, "index-6"], [459, "envvar-PYTHONDONTWRITEBYTECODE"], [459, "index-3"], [472, "index-20"], [472, "index-24"]], "pythonhashseed": [[31, "index-2"], [31, "index-3"], [32, "index-8"], [432, "index-109"], [459, "envvar-PYTHONHASHSEED"], [459, "index-16"], [459, "index-17"], [459, "index-33"], [478, "index-23"], [478, "index-35"], [485, "index-154"]], "pythonhome": [[31, "index-31"], [31, "index-32"], [31, "index-6"], [32, "index-9"], [33, "index-27"], [33, "index-30"], [116, "index-0"], [116, "index-1"], [367, "index-0"], [459, "envvar-PYTHONHOME"], [459, "index-26"], [459, "index-27"], [459, "index-30"], [459, "index-7"], [465, "index-24"], [465, "index-26"], [465, "index-28"], [481, "index-2"]], "pythoninspect": [[31, "index-7"], [32, "index-11"], [459, "envvar-PYTHONINSPECT"], [459, "index-9"], [469, "index-29"]], "pythonioencoding": [[31, "index-18"], [31, "index-19"], [32, "index-22"], [299, "index-1"], [359, "index-34"], [459, "envvar-PYTHONIOENCODING"], [459, "index-39"], [472, "index-21"], [479, "index-54"]], "pythonlegacywindowsfsencoding": [[31, "index-8"], [32, "index-1"], [359, "index-32"], [459, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [481, "index-19"]], "pythonlegacywindowsstdio": [[31, "index-10"], [32, "index-12"], [359, "index-36"], [459, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [459, "index-34"], [481, "index-21"]], "pythonnousersite": [[31, "index-12"], [32, "index-24"], [340, "index-8"], [459, "envvar-PYTHONNOUSERSITE"], [472, "index-6"]], "pythonoptimize": [[31, "index-13"], [32, "index-17"], [459, "envvar-PYTHONOPTIMIZE"], [459, "index-12"]], "pythonpath": [[31, "index-5"], [32, "index-16"], [33, "index-28"], [33, "index-31"], [81, "index-0"], [116, "index-2"], [116, "index-3"], [158, "index-4"], [359, "index-22"], [359, "index-23"], [367, "index-1"], [436, "index-17"], [454, "index-14"], [454, "index-17"], [454, "index-18"], [459, "envvar-PYTHONPATH"], [459, "index-29"], [459, "index-31"], [459, "index-32"], [459, "index-6"], [463, "index-2"], [465, "index-23"], [465, "index-25"], [465, "index-27"], [465, "index-9"], [479, "index-56"], [479, "index-57"]], "pythonunbuffered": [[31, "index-14"], [32, "index-4"], [359, "index-37"], [459, "envvar-PYTHONUNBUFFERED"], [459, "index-46"], [485, "index-122"]], "pythonverbose": [[31, "index-15"], [32, "index-25"], [459, "envvar-PYTHONVERBOSE"], [459, "index-47"]], "pyeval_acquirelock (c function)": [[31, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[31, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[31, "index-38"]], "pyeval_initthreads (c function)": [[31, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[31, "index-16"]], "pyeval_releaselock (c function)": [[31, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[31, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[31, "index-38"]], "pyeval_restorethread (c function)": [[31, "c.PyEval_RestoreThread"]], "pyeval_restorethread()": [[31, "index-37"], [31, "index-38"]], "pyeval_savethread (c function)": [[31, "c.PyEval_SaveThread"]], "pyeval_savethread()": [[31, "index-37"], [31, "index-38"]], "pyeval_setprofile (c function)": [[31, "c.PyEval_SetProfile"]], "pyeval_settrace (c function)": [[31, "c.PyEval_SetTrace"]], "pyeval_threadsinitialized (c function)": [[31, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[31, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[31, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[31, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[31, "c.PyGILState_Release"]], "pyinterpreterstate (c type)": [[31, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[31, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[31, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[31, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[31, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[31, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[31, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[31, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[31, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[31, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[31, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[31, "c.PySys_SetArgv"]], "pysys_setargv()": [[31, "index-16"]], "pysys_setargvex (c function)": [[31, "c.PySys_SetArgvEx"]], "pysys_setargvex()": [[31, "index-16"], [33, "index-24"]], "pythreadstate": [[31, "index-35"]], "pythreadstate (c type)": [[31, "c.PyThreadState"]], "pythreadstate_clear (c function)": [[31, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[31, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[31, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_get (c function)": [[31, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[31, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[31, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[31, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[31, "c.PyThreadState_GetInterpreter"]], "pythreadstate_new (c function)": [[31, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[31, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[31, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[31, "c.PyThreadState_Swap"]], "pythread_reinittls (c function)": [[31, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[31, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[31, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[31, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[31, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[31, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[31, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[31, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[31, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[31, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[31, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[31, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[31, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[31, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[31, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[31, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[31, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[31, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[31, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[31, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[31, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[31, "c.Py_AddPendingCall"]], "py_addpendingcall()": [[31, "index-46"]], "py_begin_allow_threads": [[31, "index-36"]], "py_begin_allow_threads (c macro)": [[31, "c.Py_BEGIN_ALLOW_THREADS"]], "py_block_threads (c macro)": [[31, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[31, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[31, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[31, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads": [[31, "index-36"]], "py_end_allow_threads (c macro)": [[31, "c.Py_END_ALLOW_THREADS"]], "py_endinterpreter (c function)": [[31, "c.Py_EndInterpreter"]], "py_fatalerror()": [[31, "index-30"]], "py_finalize (c function)": [[31, "c.Py_Finalize"]], "py_finalizeex (c function)": [[31, "c.Py_FinalizeEx"]], "py_finalizeex()": [[31, "index-16"], [31, "index-43"], [31, "index-45"], [56, "index-2"], [56, "index-3"]], "py_frozenflag (c var)": [[31, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[31, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[31, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[31, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[31, "c.Py_GetExecPrefix"]], "py_getpath (c function)": [[31, "c.Py_GetPath"]], "py_getpath()": [[31, "index-20"], [31, "index-24"], [33, "index-29"]], "py_getplatform (c function)": [[31, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[31, "c.Py_GetPrefix"]], "py_getprogramfullpath (c function)": [[31, "c.Py_GetProgramFullPath"]], "py_getprogramname (c function)": [[31, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[31, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[31, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[31, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[31, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[31, "c.Py_Initialize"]], "py_initialize()": [[31, "index-17"], [31, "index-20"], [31, "index-43"], [33, "index-23"]], "py_initializeex (c function)": [[31, "c.Py_InitializeEx"]], "py_inspectflag (c var)": [[31, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[31, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[31, "c.Py_IsInitialized"]], "py_isolatedflag (c var)": [[31, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[31, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[31, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[31, "c.Py_NewInterpreter"]], "py_nositeflag (c var)": [[31, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[31, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[31, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[31, "c.Py_QuietFlag"]], "py_setpath (c function)": [[31, "c.Py_SetPath"]], "py_setpath()": [[31, "index-23"]], "py_setprogramname (c function)": [[31, "c.Py_SetProgramName"]], "py_setprogramname()": [[31, "index-16"], [31, "index-21"], [31, "index-22"], [33, "index-29"]], "py_setpythonhome (c function)": [[31, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[31, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[31, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[31, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[31, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[31, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[31, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[31, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[31, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[31, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[31, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[31, "index-16"], [31, "index-42"], [33, "index-23"], [120, "module-__main__"], [330, "index-0"], [330, "index-4"], [433, "index-10"], [441, "index-2"], [441, "index-3"]], "_thread": [[31, "index-39"], [121, "module-_thread"]], "argv (in module sys)": [[31, "index-30"]], "builtins": [[31, "index-16"], [31, "index-42"], [33, "index-23"], [155, "module-builtins"], [441, "index-2"], [454, "index-7"]], "close() (in module os)": [[31, "index-44"]], "copyright (in module sys)": [[31, "index-27"]], "executable (in module sys)": [[31, "index-22"]], "global interpreter lock": [[31, "index-33"]], "interpreter lock": [[31, "index-33"]], "lock, interpreter": [[31, "index-33"]], "main()": [[31, "index-17"], [31, "index-20"], [31, "index-30"]], "module": [[31, "index-16"], [31, "index-23"], [31, "index-24"], [33, "index-23"], [43, "index-0"], [271, "index-0"], [340, "index-0"], [359, "index-21"], [432, "index-4"], [432, "index-42"], [432, "index-43"], [434, "index-40"], [440, "index-34"], [454, "index-0"]], "path": [[31, "index-16"], [31, "index-23"], [31, "index-24"], [33, "index-25"], [33, "index-26"], [33, "index-23"], [94, "index-0"], [94, "index-1"], [158, "index-3"], [158, "index-6"], [271, "index-0"], [299, "index-32"], [299, "index-33"], [299, "index-34"], [299, "index-35"], [299, "index-38"], [299, "index-39"], [299, "index-40"], [299, "index-41"], [299, "index-51"], [300, "index-0"], [302, "index-0"], [340, "index-3"], [340, "index-0"], [340, "index-4"], [355, "index-2"], [359, "index-21"], [407, "index-3"], [436, "index-9"], [442, "index-4"], [454, "index-15"], [454, "index-0"], [459, "index-28"], [464, "index-8"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-16"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-20"], [465, "index-21"], [465, "index-3"], [465, "index-31"], [465, "index-7"], [465, "index-8"], [479, "index-55"], [479, "index-58"], [479, "index-59"], [483, "index-22"], [485, "index-130"], [485, "index-131"]], "path (in module sys)": [[31, "index-16"], [31, "index-23"], [31, "index-24"], [33, "index-23"]], "platform (in module sys)": [[31, "index-26"]], "sdterr": [[31, "index-17"]], "search": [[31, "index-16"], [31, "index-23"], [31, "index-24"], [33, "index-23"], [271, "index-0"], [340, "index-0"], [359, "index-21"], [454, "index-0"]], "setswitchinterval() (in module sys)": [[31, "index-34"]], "stderr (in module sys)": [[31, "index-42"], [432, "index-53"]], "stdin": [[31, "index-17"]], "stdin (in module sys)": [[31, "index-42"], [432, "index-53"]], "stdout": [[31, "index-17"]], "stdout (in module sys)": [[31, "index-42"], [432, "index-53"]], "sys": [[31, "index-16"], [31, "index-42"], [33, "index-23"], [232, "index-7"], [359, "module-sys"], [431, "index-11"], [441, "index-2"], [454, "index-4"]], "version (in module sys)": [[31, "index-25"], [31, "index-28"], [31, "index-29"]], "\u74b0\u5883\u8b8a\u6578": [[31, "index-0"], [31, "index-1"], [31, "index-10"], [31, "index-12"], [31, "index-13"], [31, "index-14"], [31, "index-15"], [31, "index-18"], [31, "index-19"], [31, "index-2"], [31, "index-3"], [31, "index-31"], [31, "index-32"], [31, "index-4"], [31, "index-5"], [31, "index-6"], [31, "index-7"], [31, "index-8"], [32, "index-1"], [32, "index-10"], [32, "index-11"], [32, "index-12"], [32, "index-14"], [32, "index-15"], [32, "index-16"], [32, "index-17"], [32, "index-18"], [32, "index-19"], [32, "index-2"], [32, "index-20"], [32, "index-21"], [32, "index-22"], [32, "index-23"], [32, "index-24"], [32, "index-25"], [32, "index-26"], [32, "index-27"], [32, "index-3"], [32, "index-30"], [32, "index-31"], [32, "index-4"], [32, "index-6"], [32, "index-7"], [32, "index-8"], [32, "index-9"], [33, "index-1"], [33, "index-2"], [33, "index-25"], [33, "index-26"], [33, "index-27"], [33, "index-28"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-4"], [33, "index-5"], [40, "index-1"], [40, "index-2"], [40, "index-3"], [40, "index-4"], [40, "index-5"], [60, "index-0"], [69, "index-1"], [69, "index-2"], [78, "index-0"], [81, "index-0"], [91, "index-4"], [91, "index-5"], [94, "index-0"], [94, "index-1"], [95, "index-4"], [115, "index-3"], [116, "index-0"], [116, "index-1"], [116, "index-10"], [116, "index-2"], [116, "index-3"], [116, "index-4"], [116, "index-5"], [116, "index-6"], [116, "index-7"], [116, "index-8"], [116, "index-9"], [132, "index-2"], [133, "index-5"], [158, "index-3"], [158, "index-4"], [158, "index-6"], [169, "index-1"], [183, "index-0"], [183, "index-1"], [183, "index-2"], [183, "index-3"], [183, "index-4"], [183, "index-5"], [183, "index-6"], [183, "index-7"], [183, "index-8"], [194, "index-0"], [194, "index-1"], [194, "index-2"], [194, "index-3"], [194, "index-4"], [194, "index-5"], [221, "index-0"], [232, "index-15"], [235, "index-0"], [236, "index-10"], [236, "index-11"], [236, "index-8"], [236, "index-9"], [237, "index-0"], [237, "index-1"], [237, "index-2"], [237, "index-3"], [237, "index-5"], [237, "index-6"], [237, "index-7"], [237, "index-8"], [254, "index-5"], [254, "index-6"], [264, "index-2"], [272, "index-1"], [272, "index-2"], [272, "index-3"], [299, "index-1"], [299, "index-10"], [299, "index-2"], [299, "index-3"], [299, "index-32"], [299, "index-33"], [299, "index-34"], [299, "index-35"], [299, "index-38"], [299, "index-39"], [299, "index-4"], [299, "index-40"], [299, "index-41"], [299, "index-42"], [299, "index-51"], [299, "index-9"], [300, "index-3"], [300, "index-4"], [300, "index-5"], [300, "index-6"], [300, "index-7"], [300, "index-8"], [301, "index-1"], [301, "index-2"], [317, "index-3"], [317, "index-6"], [317, "index-7"], [319, "index-1"], [319, "index-2"], [326, "index-0"], [340, "index-10"], [340, "index-3"], [340, "index-7"], [340, "index-8"], [340, "index-9"], [348, "index-3"], [348, "index-4"], [351, "index-67"], [351, "index-68"], [355, "index-2"], [355, "index-3"], [355, "index-4"], [359, "index-17"], [359, "index-18"], [359, "index-22"], [359, "index-23"], [359, "index-3"], [359, "index-32"], [359, "index-34"], [359, "index-35"], [359, "index-36"], [359, "index-37"], [359, "index-4"], [359, "index-5"], [359, "index-6"], [359, "index-7"], [365, "index-7"], [365, "index-8"], [365, "index-9"], [367, "index-0"], [367, "index-1"], [367, "index-2"], [371, "index-13"], [371, "index-14"], [371, "index-15"], [371, "index-16"], [371, "index-17"], [371, "index-18"], [374, "index-0"], [374, "index-1"], [386, "index-0"], [386, "index-1"], [386, "index-2"], [399, "index-18"], [399, "index-4"], [399, "index-9"], [403, "index-2"], [404, "index-1"], [404, "index-2"], [404, "index-3"], [404, "index-4"], [404, "index-5"], [407, "index-0"], [407, "index-1"], [407, "index-2"], [407, "index-3"], [414, "index-0"], [429, "envvar-PYTHONTZPATH"], [429, "index-2"], [432, "index-109"], [442, "index-4"], [442, "index-5"], [454, "index-14"], [454, "index-15"], [454, "index-17"], [454, "index-18"], [459, "envvar-PYTHONASYNCIODEBUG"], [459, "envvar-PYTHONBREAKPOINT"], [459, "envvar-PYTHONCASEOK"], [459, "envvar-PYTHONCOERCECLOCALE"], [459, "envvar-PYTHONDEBUG"], [459, "envvar-PYTHONDEVMODE"], [459, "envvar-PYTHONDONTWRITEBYTECODE"], [459, "envvar-PYTHONDUMPREFS"], [459, "envvar-PYTHONEXECUTABLE"], [459, "envvar-PYTHONFAULTHANDLER"], [459, "envvar-PYTHONHASHSEED"], [459, "envvar-PYTHONHOME"], [459, "envvar-PYTHONINSPECT"], [459, "envvar-PYTHONINTMAXSTRDIGITS"], [459, "envvar-PYTHONIOENCODING"], [459, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [459, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [459, "envvar-PYTHONMALLOC"], [459, "envvar-PYTHONMALLOCSTATS"], [459, "envvar-PYTHONNOUSERSITE"], [459, "envvar-PYTHONOPTIMIZE"], [459, "envvar-PYTHONPATH"], [459, "envvar-PYTHONPLATLIBDIR"], [459, "envvar-PYTHONPROFILEIMPORTTIME"], [459, "envvar-PYTHONPYCACHEPREFIX"], [459, "envvar-PYTHONSTARTUP"], [459, "envvar-PYTHONTHREADDEBUG"], [459, "envvar-PYTHONTRACEMALLOC"], [459, "envvar-PYTHONUNBUFFERED"], [459, "envvar-PYTHONUSERBASE"], [459, "envvar-PYTHONUTF8"], [459, "envvar-PYTHONVERBOSE"], [459, "envvar-PYTHONWARNDEFAULTENCODING"], [459, "envvar-PYTHONWARNINGS"], [459, "index-0"], [459, "index-10"], [459, "index-12"], [459, "index-16"], [459, "index-17"], [459, "index-2"], [459, "index-21"], [459, "index-22"], [459, "index-23"], [459, "index-24"], [459, "index-25"], [459, "index-26"], [459, "index-27"], [459, "index-28"], [459, "index-29"], [459, "index-3"], [459, "index-30"], [459, "index-31"], [459, "index-32"], [459, "index-33"], [459, "index-34"], [459, "index-37"], [459, "index-39"], [459, "index-4"], [459, "index-40"], [459, "index-46"], [459, "index-47"], [459, "index-5"], [459, "index-6"], [459, "index-7"], [459, "index-8"], [459, "index-9"], [460, "envvar-BASECFLAGS"], [460, "envvar-BASECPPFLAGS"], [460, "envvar-BLDSHARED"], [460, "envvar-CC"], [460, "envvar-CCSHARED"], [460, "envvar-CFLAGS"], [460, "envvar-CFLAGSFORSHARED"], [460, "envvar-CFLAGS_ALIASING"], [460, "envvar-CFLAGS_NODIST"], [460, "envvar-CONFIGURE_CFLAGS"], [460, "envvar-CONFIGURE_CFLAGS_NODIST"], [460, "envvar-CONFIGURE_CPPFLAGS"], [460, "envvar-CONFIGURE_LDFLAGS"], [460, "envvar-CONFIGURE_LDFLAGS_NODIST"], [460, "envvar-CPPFLAGS"], [460, "envvar-CXX"], [460, "envvar-EXTRA_CFLAGS"], [460, "envvar-LDFLAGS"], [460, "envvar-LDFLAGS_NODIST"], [460, "envvar-LDSHARED"], [460, "envvar-LIBS"], [460, "envvar-LINKCC"], [460, "envvar-MAINCC"], [460, "envvar-OPT"], [460, "envvar-PROFILE_TASK"], [460, "envvar-PURIFY"], [460, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [460, "envvar-PY_CFLAGS"], [460, "envvar-PY_CFLAGS_NODIST"], [460, "envvar-PY_CORE_CFLAGS"], [460, "envvar-PY_CORE_LDFLAGS"], [460, "envvar-PY_CPPFLAGS"], [460, "envvar-PY_LDFLAGS"], [460, "envvar-PY_LDFLAGS_NODIST"], [460, "envvar-PY_STDMODULE_CFLAGS"], [460, "index-10"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-15"], [460, "index-16"], [460, "index-17"], [460, "index-18"], [460, "index-19"], [460, "index-2"], [460, "index-20"], [460, "index-21"], [460, "index-22"], [460, "index-23"], [460, "index-24"], [460, "index-25"], [460, "index-26"], [460, "index-30"], [460, "index-32"], [460, "index-4"], [460, "index-5"], [460, "index-6"], [460, "index-7"], [460, "index-8"], [460, "index-9"], [463, "index-2"], [464, "index-6"], [464, "index-7"], [464, "index-8"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-13"], [465, "index-16"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-20"], [465, "index-21"], [465, "index-22"], [465, "index-23"], [465, "index-24"], [465, "index-25"], [465, "index-26"], [465, "index-27"], [465, "index-28"], [465, "index-3"], [465, "index-31"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-7"], [465, "index-8"], [465, "index-9"], [467, "index-11"], [469, "index-24"], [469, "index-25"], [469, "index-26"], [469, "index-27"], [469, "index-28"], [469, "index-29"], [472, "index-20"], [472, "index-21"], [472, "index-24"], [472, "index-4"], [472, "index-5"], [472, "index-6"], [473, "index-1"], [473, "index-12"], [473, "index-14"], [473, "index-15"], [473, "index-8"], [473, "index-9"], [476, "index-17"], [476, "index-34"], [477, "index-10"], [478, "index-23"], [478, "index-24"], [478, "index-35"], [479, "index-40"], [479, "index-41"], [479, "index-50"], [479, "index-51"], [479, "index-54"], [479, "index-55"], [479, "index-56"], [479, "index-57"], [479, "index-58"], [479, "index-59"], [480, "index-31"], [480, "index-32"], [481, "index-19"], [481, "index-2"], [481, "index-21"], [481, "index-27"], [481, "index-38"], [482, "index-12"], [482, "index-26"], [482, "index-27"], [482, "index-31"], [482, "index-36"], [482, "index-4"], [482, "index-8"], [483, "index-13"], [483, "index-14"], [483, "index-2"], [483, "index-20"], [483, "index-21"], [483, "index-22"], [483, "index-3"], [484, "index-21"], [485, "index-0"], [485, "index-1"], [485, "index-11"], [485, "index-110"], [485, "index-118"], [485, "index-119"], [485, "index-120"], [485, "index-122"], [485, "index-126"], [485, "index-13"], [485, "index-130"], [485, "index-131"], [485, "index-133"], [485, "index-135"], [485, "index-137"], [485, "index-143"], [485, "index-144"], [485, "index-148"], [485, "index-149"], [485, "index-153"], [485, "index-154"], [485, "index-162"], [485, "index-173"], [485, "index-174"], [485, "index-203"], [485, "index-204"], [485, "index-25"], [485, "index-3"], [485, "index-55"], [485, "index-6"], [485, "index-71"]], "pep 432": [[32, "index-32"], [32, "index-33"], [482, "index-38"], [485, "index-167"]], "pep 538": [[32, "index-28"], [459, "index-49"], [460, "index-31"], [482, "index-10"], [482, "index-3"], [482, "index-6"], [482, "index-7"], [485, "index-141"], [485, "index-145"], [485, "index-166"]], "pep 540": [[32, "index-29"], [299, "index-54"], [482, "index-11"], [482, "index-9"], [485, "index-155"]], "pep 552": [[32, "index-5"], [258, "index-9"], [317, "index-5"], [482, "index-22"], [482, "index-23"], [485, "index-138"], [485, "index-158"]], "pep 587": [[32, "index-0"], [483, "index-34"], [483, "index-5"], [485, "index-123"], [485, "index-128"]], "pythoncoerceclocale": [[32, "index-31"], [299, "index-4"], [459, "envvar-PYTHONCOERCECLOCALE"], [460, "index-30"], [482, "index-4"]], "pythondumprefs": [[32, "index-6"], [60, "index-0"], [459, "envvar-PYTHONDUMPREFS"], [460, "index-5"], [483, "index-3"], [485, "index-133"]], "pythonexecutable": [[32, "index-19"], [459, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[32, "index-7"], [194, "index-4"], [221, "index-0"], [459, "envvar-PYTHONFAULTHANDLER"], [478, "index-24"]], "pythonmallocstats": [[32, "index-14"], [40, "index-2"], [459, "envvar-PYTHONMALLOCSTATS"], [485, "index-204"]], "pythonplatlibdir": [[32, "index-15"], [459, "envvar-PYTHONPLATLIBDIR"], [485, "index-71"]], "pythonprofileimporttime": [[32, "index-10"], [459, "envvar-PYTHONPROFILEIMPORTTIME"], [459, "index-23"], [482, "index-27"], [485, "index-162"]], "pythonpycacheprefix": [[32, "index-21"], [359, "index-7"], [459, "envvar-PYTHONPYCACHEPREFIX"], [459, "index-24"], [483, "index-2"], [485, "index-135"]], "pythontracemalloc": [[32, "index-23"], [386, "index-0"], [386, "index-1"], [386, "index-2"], [459, "envvar-PYTHONTRACEMALLOC"]], "pythonutf8": [[32, "index-2"], [32, "index-30"], [299, "index-2"], [299, "index-3"], [359, "index-35"], [459, "envvar-PYTHONUTF8"], [459, "index-40"], [465, "index-13"], [482, "index-8"]], "pythonwarnings": [[32, "index-26"], [194, "index-1"], [404, "index-1"], [404, "index-2"], [404, "index-3"], [404, "index-4"], [404, "index-5"], [459, "envvar-PYTHONWARNINGS"], [459, "index-21"], [473, "index-1"], [473, "index-8"], [477, "index-10"], [482, "index-36"], [485, "index-3"]], "pyconfig (c type)": [[32, "c.PyConfig"]], "pyconfig.pyconfig_clear (c function)": [[32, "c.PyConfig.PyConfig_Clear"]], "pyconfig.pyconfig_initisolatedconfig (c function)": [[32, "c.PyConfig.PyConfig_InitIsolatedConfig"]], "pyconfig.pyconfig_initpythonconfig (c function)": [[32, "c.PyConfig.PyConfig_InitPythonConfig"]], "pyconfig.pyconfig_read (c function)": [[32, "c.PyConfig.PyConfig_Read"]], "pyconfig.pyconfig_setargv (c function)": [[32, "c.PyConfig.PyConfig_SetArgv"]], "pyconfig.pyconfig_setbytesargv (c function)": [[32, "c.PyConfig.PyConfig_SetBytesArgv"]], "pyconfig.pyconfig_setbytesstring (c function)": [[32, "c.PyConfig.PyConfig_SetBytesString"]], "pyconfig.pyconfig_setstring (c function)": [[32, "c.PyConfig.PyConfig_SetString"]], "pyconfig.pyconfig_setwidestringlist (c function)": [[32, "c.PyConfig.PyConfig_SetWideStringList"]], "pyconfig.argv (c member)": [[32, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[32, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[32, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[32, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[32, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[32, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[32, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.configure_c_stdio (c member)": [[32, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[32, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[32, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[32, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[32, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[32, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[32, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[32, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[32, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[32, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[32, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[32, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[32, "c.PyConfig.install_signal_handlers"]], "pyconfig.interactive (c member)": [[32, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[32, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[32, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[32, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[32, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[32, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[32, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[32, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[32, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[32, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[32, "c.PyConfig.pathconfig_warnings"]], "pyconfig.platlibdir (c member)": [[32, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[32, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[32, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[32, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[32, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[32, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[32, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[32, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[32, "c.PyConfig.run_module"]], "pyconfig.show_ref_count (c member)": [[32, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[32, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[32, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[32, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[32, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[32, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[32, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[32, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[32, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[32, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[32, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[32, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[32, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[32, "c.PyConfig.xoptions"]], "pypreconfig (c type)": [[32, "c.PyPreConfig"]], "pypreconfig.pypreconfig_initisolatedconfig (c function)": [[32, "c.PyPreConfig.PyPreConfig_InitIsolatedConfig"]], "pypreconfig.pypreconfig_initpythonconfig (c function)": [[32, "c.PyPreConfig.PyPreConfig_InitPythonConfig"]], "pypreconfig.allocator (c member)": [[32, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[32, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[32, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[32, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[32, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[32, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[32, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[32, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[32, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[32, "c.PyPreConfig.utf8_mode"]], "pystatus (c type)": [[32, "c.PyStatus"]], "pystatus.pystatus_error (c function)": [[32, "c.PyStatus.PyStatus_Error"]], "pystatus.pystatus_exception (c function)": [[32, "c.PyStatus.PyStatus_Exception"]], "pystatus.pystatus_exit (c function)": [[32, "c.PyStatus.PyStatus_Exit"]], "pystatus.pystatus_iserror (c function)": [[32, "c.PyStatus.PyStatus_IsError"]], "pystatus.pystatus_isexit (c function)": [[32, "c.PyStatus.PyStatus_IsExit"]], "pystatus.pystatus_nomemory (c function)": [[32, "c.PyStatus.PyStatus_NoMemory"]], "pystatus.pystatus_ok (c function)": [[32, "c.PyStatus.PyStatus_Ok"]], "pystatus.py_exitstatusexception (c function)": [[32, "c.PyStatus.Py_ExitStatusException"]], "pystatus.err_msg (c member)": [[32, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[32, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[32, "c.PyStatus.func"]], "pywidestringlist (c type)": [[32, "c.PyWideStringList"]], "pywidestringlist.pywidestringlist_append (c function)": [[32, "c.PyWideStringList.PyWideStringList_Append"]], "pywidestringlist.pywidestringlist_insert (c function)": [[32, "c.PyWideStringList.PyWideStringList_Insert"]], "pywidestringlist.items (c member)": [[32, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[32, "c.PyWideStringList.length"]], "py_getargcargv (c function)": [[32, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[32, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[32, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[32, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[32, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[32, "c.Py_RunMain"]], "_py_initializemain (c function)": [[32, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[32, "index-20"], [32, "index-3"]], "pep 353": [[33, "index-15"], [471, "index-16"], [471, "index-17"], [471, "index-29"], [476, "index-37"], [485, "index-76"]], "pep 7": [[33, "index-0"], [33, "index-6"], [33, "index-7"], [481, "index-34"]], "pydoc_str (c macro)": [[33, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[33, "c.PyDoc_STRVAR"]], "pyerr_clear()": [[33, "index-17"], [33, "index-22"]], "pyerr_exceptionmatches()": [[33, "index-22"]], "pyerr_occurred()": [[33, "index-16"]], "pyerr_setstring()": [[33, "index-17"]], "pylist_getitem()": [[33, "index-12"]], "pylist_setitem()": [[33, "index-10"]], "pysequence_getitem()": [[33, "index-12"]], "pytuple_setitem()": [[33, "index-10"]], "py_abs (c macro)": [[33, "c.Py_ABS"]], "py_charmask (c macro)": [[33, "c.Py_CHARMASK"]], "py_decref()": [[33, "index-9"]], "py_deprecated (c macro)": [[33, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[33, "c.Py_GETENV"]], "py_getexecprefix()": [[33, "index-29"]], "py_getprefix()": [[33, "index-29"]], "py_getprogramfullpath()": [[33, "index-29"]], "py_incref()": [[33, "index-9"]], "py_isinitialized()": [[33, "index-32"]], "py_max (c macro)": [[33, "c.Py_MAX"]], "py_member_size (c macro)": [[33, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[33, "c.Py_MIN"]], "py_stringify (c macro)": [[33, "c.Py_STRINGIFY"]], "py_unreachable (c macro)": [[33, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[33, "c.Py_UNUSED"]], "py_xdecref()": [[33, "index-22"]], "py_ssize_t (c type)": [[33, "c.Py_ssize_t"]], "exc_info() (in module sys)": [[33, "index-18"]], "exec_prefix": [[33, "index-2"], [33, "index-5"], [464, "index-7"]], "incr_item()": [[33, "index-20"], [33, "index-21"]], "prefix": [[33, "index-1"], [33, "index-3"], [33, "index-4"], [464, "index-6"]], "set_all()": [[33, "index-11"]], "sum_list()": [[33, "index-13"]], "sum_sequence()": [[33, "index-14"], [33, "index-19"]], "type": [[33, "index-8"], [47, "index-7"], [58, "index-0"], [232, "index-0"], [232, "index-11"], [351, "index-23"], [351, "index-51"], [351, "index-58"], [351, "index-64"], [432, "index-1"], [432, "index-4"], [432, "index-82"], [434, "index-7"]], "pyaiter_check (c function)": [[34, "c.PyAIter_Check"]], "pyiter_check (c function)": [[34, "c.PyIter_Check"]], "pyiter_next (c function)": [[34, "c.PyIter_Next"]], "pyiter_send (c function)": [[34, "c.PyIter_Send"]], "pysendresult (c type)": [[34, "c.PySendResult"]], "pycalliter_check (c function)": [[35, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[35, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[35, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[35, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[35, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[35, "c.PySeqIter_Type"]], "pylistobject (c type)": [[36, "c.PyListObject"]], "pylist_append (c function)": [[36, "c.PyList_Append"]], "pylist_astuple (c function)": [[36, "c.PyList_AsTuple"]], "pylist_check (c function)": [[36, "c.PyList_Check"]], "pylist_checkexact (c function)": [[36, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[36, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[36, "c.PyList_GET_SIZE"]], "pylist_getitem (c function)": [[36, "c.PyList_GetItem"]], "pylist_getslice (c function)": [[36, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[36, "c.PyList_Insert"]], "pylist_new (c function)": [[36, "c.PyList_New"]], "pylist_reverse (c function)": [[36, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[36, "c.PyList_SET_ITEM"]], "pylist_setitem (c function)": [[36, "c.PyList_SetItem"]], "pylist_setslice (c function)": [[36, "c.PyList_SetSlice"]], "pylist_size (c function)": [[36, "c.PyList_Size"]], "pylist_sort (c function)": [[36, "c.PyList_Sort"]], "pylist_type (c var)": [[36, "c.PyList_Type"]], "list": [[36, "index-0"], [351, "index-22"], [351, "index-23"], [351, "index-24"], [431, "index-6"], [432, "index-23"], [434, "index-15"], [434, "index-40"], [434, "index-42"], [434, "index-45"], [434, "index-91"], [440, "index-1"], [440, "index-10"], [440, "index-2"], [440, "index-21"], [440, "index-5"], [440, "index-6"]], "tuple": [[36, "index-2"], [51, "index-1"], [57, "index-0"], [351, "index-21"], [351, "index-25"], [432, "index-20"], [434, "index-42"], [434, "index-45"], [434, "index-9"], [434, "index-92"]], "long_max": [[37, "index-1"]], "overflowerror (built-in exception)": [[37, "index-1"], [37, "index-2"], [37, "index-3"], [37, "index-4"], [37, "index-5"], [37, "index-6"]], "py_ssize_t_max": [[37, "index-3"]], "pylongobject (c type)": [[37, "c.PyLongObject"]], "pylong_asdouble (c function)": [[37, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[37, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[37, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[37, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[37, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[37, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[37, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[37, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[37, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[37, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[37, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[37, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[37, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[37, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[37, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[37, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[37, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[37, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[37, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[37, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[37, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[37, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[37, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[37, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[37, "c.PyLong_Type"]], "size_max": [[37, "index-5"]], "ulong_max": [[37, "index-4"]], "integer": [[37, "index-0"], [351, "index-11"], [351, "index-12"], [351, "index-16"], [432, "index-10"], [432, "index-12"], [432, "index-19"]], "long integer": [[37, "index-0"]], "pymapping_check (c function)": [[38, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[38, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[38, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[38, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[38, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[38, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[38, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[38, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[38, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[38, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[38, "c.PyMapping_Size"]], "pymapping_values (c function)": [[38, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[39, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[39, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[39, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[39, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[39, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[39, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[39, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[39, "c.PyMarshal_WriteObjectToString"]], "pythonmalloc": [[40, "index-1"], [40, "index-3"], [40, "index-4"], [40, "index-5"], [194, "index-2"], [194, "index-3"], [459, "envvar-PYTHONMALLOC"], [459, "index-37"], [460, "index-32"], [481, "index-27"], [481, "index-38"], [485, "index-203"]], "pymemallocatordomain (c type)": [[40, "c.PyMemAllocatorDomain"]], "pymemallocatordomain.pymem_domain_mem (c macro)": [[40, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_MEM"]], "pymemallocatordomain.pymem_domain_obj (c macro)": [[40, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_OBJ"]], "pymemallocatordomain.pymem_domain_raw (c macro)": [[40, "c.PyMemAllocatorDomain.PYMEM_DOMAIN_RAW"]], "pymemallocatorex (c type)": [[40, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[40, "c.PyMem_Calloc"]], "pymem_del (c function)": [[40, "c.PyMem_Del"]], "pymem_free (c function)": [[40, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[40, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[40, "c.PyMem_Malloc"]], "pymem_new (c function)": [[40, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[40, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[40, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[40, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[40, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[40, "c.PyMem_Realloc"]], "pymem_resize (c function)": [[40, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[40, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[40, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[40, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[40, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[40, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[40, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[40, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[40, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[40, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[40, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[40, "c.PyTraceMalloc_Untrack"]], "calloc()": [[40, "index-0"]], "free()": [[40, "index-0"]], "malloc()": [[40, "index-0"]], "realloc()": [[40, "index-0"]], "pymemoryview_check (c function)": [[41, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[41, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[41, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[41, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[41, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[41, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[41, "c.PyMemoryView_GetContiguous"]], "memoryview": [[41, "index-0"], [351, "index-39"]], "pyinstancemethod_check (c function)": [[42, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[42, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[42, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[42, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[42, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[42, "c.PyMethod_Check"]], "pymethod_function (c function)": [[42, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[42, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[42, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[42, "c.PyMethod_New"]], "pymethod_self (c function)": [[42, "c.PyMethod_Self"]], "pymethod_type (c var)": [[42, "c.PyMethod_Type"]], "instancemethod": [[42, "index-0"]], "method": [[42, "index-1"], [97, "index-26"], [97, "index-34"], [351, "index-60"], [432, "index-35"], [432, "index-41"], [434, "index-53"], [444, "index-0"]], "moduletype (in module types)": [[43, "index-1"]], "pep 3121": [[43, "index-10"], [474, "index-34"], [485, "index-70"]], "pep 451": [[43, "index-7"], [97, "index-92"], [258, "index-6"], [308, "index-15"], [308, "index-16"], [330, "index-3"], [330, "index-5"], [330, "index-8"], [359, "index-20"], [436, "index-26"], [476, "index-32"], [479, "index-23"], [479, "index-3"], [480, "index-27"], [485, "index-202"]], "pep 489": [[43, "index-8"], [81, "index-1"], [83, "index-0"], [258, "index-18"], [258, "index-19"], [258, "index-20"], [258, "index-8"], [480, "index-26"], [480, "index-28"], [480, "index-47"], [485, "index-101"], [485, "index-103"], [485, "index-105"], [485, "index-112"], [485, "index-113"], [485, "index-114"], [485, "index-115"], [485, "index-116"], [485, "index-121"], [485, "index-30"], [485, "index-31"], [485, "index-33"], [485, "index-36"], [485, "index-38"], [485, "index-39"], [485, "index-40"], [485, "index-41"], [485, "index-42"], [485, "index-43"], [485, "index-44"], [485, "index-45"], [485, "index-46"], [485, "index-47"], [485, "index-48"], [485, "index-49"], [485, "index-50"], [485, "index-51"], [485, "index-53"], [485, "index-58"], [485, "index-59"], [485, "index-60"], [485, "index-61"], [485, "index-62"], [485, "index-63"], [485, "index-64"], [485, "index-65"], [485, "index-66"], [485, "index-67"], [485, "index-68"], [485, "index-72"], [485, "index-73"], [485, "index-74"], [485, "index-78"], [485, "index-79"], [485, "index-80"], [485, "index-84"], [485, "index-85"], [485, "index-86"], [485, "index-87"], [485, "index-88"], [485, "index-96"], [485, "index-97"], [485, "index-98"]], "pymoduledef (c type)": [[43, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[43, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[43, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[43, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[43, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[43, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[43, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[43, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[43, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[43, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[43, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[43, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[43, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[43, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[43, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[43, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[43, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c function)": [[43, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[43, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[43, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[43, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c function)": [[43, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[43, "c.PyModule_AddType"]], "pymodule_check (c function)": [[43, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[43, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[43, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[43, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[43, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[43, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[43, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[43, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[43, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[43, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[43, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[43, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[43, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[43, "c.PyModule_GetState"]], "pymodule_new (c function)": [[43, "c.PyModule_New"]], "pymodule_newobject (c function)": [[43, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[43, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[43, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[43, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[43, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[43, "c.PyState_RemoveModule"]], "py_mod_create (c macro)": [[43, "c.Py_mod_create"]], "py_mod_create.create_module (c function)": [[43, "c.Py_mod_create.create_module"]], "py_mod_exec (c macro)": [[43, "c.Py_mod_exec"]], "py_mod_exec.exec_module (c function)": [[43, "c.Py_mod_exec.exec_module"]], "systemerror (built-in exception)": [[43, "index-4"], [43, "index-5"]], "__dict__ (module attribute)": [[43, "index-3"], [432, "index-44"]], "__doc__ (module attribute)": [[43, "index-2"], [432, "index-43"]], "__file__ (module attribute)": [[43, "index-2"], [43, "index-5"], [432, "index-43"]], "__loader__ (module attribute)": [[43, "index-2"]], "__name__ (module attribute)": [[43, "index-2"], [43, "index-4"], [432, "index-43"]], "__package__ (module attribute)": [[43, "index-2"]], "none": [[44, "index-0"], [432, "index-6"], [440, "index-3"]], "py_none (c var)": [[44, "c.Py_None"]], "py_return_none (c macro)": [[44, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[45, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[45, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[45, "c.PyNumber_Add"]], "pynumber_and (c function)": [[45, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[45, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[45, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[45, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[45, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[45, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[45, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[45, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[45, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[45, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[45, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[45, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[45, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[45, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[45, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[45, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[45, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[45, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[45, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[45, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[45, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[45, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[45, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[45, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[45, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[45, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[45, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[45, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[45, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[45, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[45, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[45, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[45, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[45, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[45, "c.PyNumber_Xor"]], "abs": [[45, "index-2"], [432, "index-99"]], "divmod": [[45, "index-0"], [432, "index-96"], [432, "index-97"]], "float": [[45, "index-5"], [351, "index-13"], [432, "index-100"]], "int": [[45, "index-4"], [351, "index-13"], [432, "index-100"]], "pow": [[45, "index-1"], [45, "index-3"], [432, "index-96"], [432, "index-97"], [432, "index-98"]], "pyobject_ascharbuffer (c function)": [[46, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[46, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[46, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[46, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[47, "index-4"], [47, "index-5"], [122, "index-0"], [167, "index-6"], [432, "index-90"], [472, "index-16"]], "pyobject_ascii (c function)": [[47, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[47, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[47, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[47, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[47, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[47, "c.PyObject_Dir"]], "pyobject_genericgetattr (c function)": [[47, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[47, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[47, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[47, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[47, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[47, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[47, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[47, "c.PyObject_GetItem"]], "pyobject_getiter (c function)": [[47, "c.PyObject_GetIter"]], "pyobject_hasattr (c function)": [[47, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[47, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[47, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[47, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[47, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[47, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[47, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[47, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[47, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[47, "c.PyObject_Not"]], "pyobject_print (c function)": [[47, "c.PyObject_Print"]], "pyobject_repr (c function)": [[47, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[47, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[47, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[47, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[47, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[47, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[47, "c.PyObject_Size"]], "pyobject_str (c function)": [[47, "c.PyObject_Str"], [47, "index-2"]], "pyobject_type (c function)": [[47, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[47, "c.PyObject_TypeCheck"]], "py_notimplemented (c var)": [[47, "c.Py_NotImplemented"]], "py_return_notimplemented (c macro)": [[47, "c.Py_RETURN_NOTIMPLEMENTED"]], "ascii": [[47, "index-1"], [438, "index-1"], [439, "index-17"]], "hash": [[47, "index-6"], [60, "index-2"], [351, "index-21"], [432, "index-76"]], "repr": [[47, "index-0"], [60, "index-1"], [85, "index-3"], [440, "index-3"]], "string": [[47, "index-2"], [85, "index-3"], [232, "index-10"], [232, "index-3"], [272, "index-6"], [351, "index-27"], [351, "index-29"], [351, "index-31"], [351, "index-34"], [352, "module-string"], [432, "index-18"], [432, "index-72"], [432, "index-74"], [434, "index-42"], [434, "index-43"], [434, "index-45"], [439, "index-25"], [440, "index-3"]], "py_clear (c function)": [[49, "c.Py_CLEAR"]], "py_decref (c function)": [[49, "c.Py_DECREF"], [49, "c.Py_DecRef"]], "py_incref (c function)": [[49, "c.Py_INCREF"], [49, "c.Py_IncRef"]], "py_newref (c function)": [[49, "c.Py_NewRef"]], "py_xdecref (c function)": [[49, "c.Py_XDECREF"]], "py_xincref (c function)": [[49, "c.Py_XINCREF"]], "py_xnewref (c function)": [[49, "c.Py_XNewRef"]], "pyeval_getbuiltins (c function)": [[50, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[50, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[50, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[50, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[50, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[50, "c.PyEval_GetLocals"]], "pyframe_getback (c function)": [[50, "c.PyFrame_GetBack"]], "pyframe_getcode (c function)": [[50, "c.PyFrame_GetCode"]], "pyframe_getlinenumber (c function)": [[50, "c.PyFrame_GetLineNumber"]], "pysequence_check (c function)": [[51, "c.PySequence_Check"]], "pysequence_concat (c function)": [[51, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[51, "c.PySequence_Contains"]], "pysequence_count (c function)": [[51, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[51, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[51, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[51, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[51, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[51, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[51, "c.PySequence_Fast_ITEMS"]], "pysequence_getitem (c function)": [[51, "c.PySequence_GetItem"]], "pysequence_getslice (c function)": [[51, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[51, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[51, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[51, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[51, "c.PySequence_Index"]], "pysequence_length (c function)": [[51, "c.PySequence_Length"]], "pysequence_list (c function)": [[51, "c.PySequence_List"]], "pysequence_repeat (c function)": [[51, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[51, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[51, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[51, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[51, "c.PySequence_Tuple"]], "pyanyset_check (c function)": [[52, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[52, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[52, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[52, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[52, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[52, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[52, "c.PySetObject"]], "pyset_add (c function)": [[52, "c.PySet_Add"]], "pyset_check (c function)": [[52, "c.PySet_Check"]], "pyset_checkexact (c function)": [[52, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[52, "c.PySet_Clear"]], "pyset_contains (c function)": [[52, "c.PySet_Contains"]], "pyset_discard (c function)": [[52, "c.PySet_Discard"]], "pyset_get_size (c function)": [[52, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[52, "c.PySet_New"]], "pyset_pop (c function)": [[52, "c.PySet_Pop"]], "pyset_size (c function)": [[52, "c.PySet_Size"]], "pyset_type (c var)": [[52, "c.PySet_Type"]], "frozenset": [[52, "index-0"], [432, "index-28"]], "set": [[52, "index-0"], [351, "index-50"], [432, "index-27"], [434, "index-16"]], "pyslice_adjustindices (c function)": [[53, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[53, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[53, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[53, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[53, "c.PySlice_New"]], "pyslice_type (c var)": [[53, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[53, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[53, "c.Py_Ellipsis"]], "pep 387": [[54, "index-0"], [220, "index-10"], [220, "index-11"]], "py_limited_api (c macro)": [[54, "c.Py_LIMITED_API"]], "meth_class (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_CLASS"]], "meth_coexist (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_COEXIST"]], "meth_fastcall (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_FASTCALL"]], "meth_noargs (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_NOARGS"]], "meth_o (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_O"]], "meth_static (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_STATIC"]], "meth_varargs (\u5167\u5efa\u8b8a\u6578)": [[55, "METH_VARARGS"]], "pycfunction (c type)": [[55, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[55, "c.PyCFunctionWithKeywords"]], "pycmethod (c type)": [[55, "c.PyCMethod"]], "pygetsetdef (c type)": [[55, "c.PyGetSetDef"]], "pymemberdef (c type)": [[55, "c.PyMemberDef"]], "pymember_getone (c function)": [[55, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[55, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[55, "c.PyMethodDef"]], "pyobject (c type)": [[55, "c.PyObject"]], "pyobject_head (c macro)": [[55, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[55, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[55, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[55, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[55, "c.PyVarObject_HEAD_INIT"]], "py_is_type (c function)": [[55, "c.Py_IS_TYPE"]], "py_is (c function)": [[55, "c.Py_Is"]], "py_isfalse (c function)": [[55, "c.Py_IsFalse"]], "py_isnone (c function)": [[55, "c.Py_IsNone"]], "py_istrue (c function)": [[55, "c.Py_IsTrue"]], "py_refcnt (c function)": [[55, "c.Py_REFCNT"]], "py_set_refcnt (c function)": [[55, "c.Py_SET_REFCNT"]], "py_set_size (c function)": [[55, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[55, "c.Py_SET_TYPE"]], "py_size (c function)": [[55, "c.Py_SIZE"]], "py_type (c function)": [[55, "c.Py_TYPE"]], "_pycfunctionfast (c type)": [[55, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[55, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[55, "index-0"]], "staticmethod": [[55, "index-1"]], "pep 578": [[56, "index-0"], [148, "index-3"], [359, "index-1"], [483, "index-33"]], "pyos_afterfork (c function)": [[56, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[56, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[56, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[56, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[56, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[56, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[56, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[56, "c.PyOS_setsig"]], "pysys_addaudithook (c function)": [[56, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[56, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[56, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[56, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[56, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[56, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[56, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[56, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[56, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[56, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[56, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[56, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[56, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[56, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[56, "c.Py_AtExit"]], "py_decodelocale (c function)": [[56, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[56, "c.Py_EncodeLocale"]], "py_exit (c function)": [[56, "c.Py_Exit"]], "py_fatalerror (c function)": [[56, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[56, "c.Py_FdIsInteractive"]], "abort()": [[56, "index-1"]], "cleanup functions": [[56, "index-3"]], "exit()": [[56, "index-2"]], "pystructsequence_desc (c type)": [[57, "c.PyStructSequence_Desc"]], "pystructsequence_field (c type)": [[57, "c.PyStructSequence_Field"]], "pystructsequence_get_item (c function)": [[57, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[57, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[57, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[57, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[57, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[57, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[57, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[57, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[57, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[57, "c.PyTupleObject"]], "pytuple_check (c function)": [[57, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[57, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[57, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[57, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[57, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[57, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[57, "c.PyTuple_New"]], "pytuple_pack (c function)": [[57, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[57, "c.PyTuple_SET_ITEM"]], "pytuple_setitem (c function)": [[57, "c.PyTuple_SetItem"]], "pytuple_size (c function)": [[57, "c.PyTuple_Size"]], "pytuple_type (c var)": [[57, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[57, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[58, "c.PyTypeObject"]], "pytype_check (c function)": [[58, "c.PyType_Check"]], "pytype_checkexact (c function)": [[58, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[58, "c.PyType_ClearCache"]], "pytype_frommoduleandspec (c function)": [[58, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[58, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[58, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[58, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[58, "c.PyType_GenericNew"]], "pytype_getflags (c function)": [[58, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[58, "c.PyType_GetModule"]], "pytype_getmodulestate (c function)": [[58, "c.PyType_GetModuleState"]], "pytype_getslot (c function)": [[58, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[58, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[58, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[58, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[58, "c.PyType_Modified"]], "pytype_ready (c function)": [[58, "c.PyType_Ready"]], "pytype_slot (c type)": [[58, "c.PyType_Slot"]], "pytype_slot.pytype_slot.pfunc (c member)": [[58, "c.PyType_Slot.PyType_Slot.pfunc"]], "pytype_slot.pytype_slot.slot (c member)": [[58, "c.PyType_Slot.PyType_Slot.slot"]], "pytype_spec (c type)": [[58, "c.PyType_Spec"]], "pytype_spec.pytype_spec.basicsize (c member)": [[58, "c.PyType_Spec.PyType_Spec.basicsize"]], "pytype_spec.pytype_spec.flags (c member)": [[58, "c.PyType_Spec.PyType_Spec.flags"]], "pytype_spec.pytype_spec.itemsize (c member)": [[58, "c.PyType_Spec.PyType_Spec.itemsize"]], "pytype_spec.pytype_spec.name (c member)": [[58, "c.PyType_Spec.PyType_Spec.name"]], "pytype_spec.pytype_spec.slots (c member)": [[58, "c.PyType_Spec.PyType_Spec.slots"]], "pytype_type (c var)": [[58, "c.PyType_Type"]], "py_genericalias (c function)": [[59, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[59, "c.Py_GenericAliasType"]], "pep 442": [[60, "index-5"], [85, "index-2"], [234, "index-0"], [479, "index-15"], [479, "index-16"], [479, "index-45"], [479, "index-46"], [484, "index-20"], [485, "index-127"]], "pep 634": [[60, "index-3"], [60, "index-4"], [118, "index-1"], [431, "index-18"], [431, "index-24"], [432, "index-104"], [476, "index-0"], [476, "index-14"], [485, "index-16"], [485, "index-28"]], "pyasyncmethods (c type)": [[60, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[60, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[60, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[60, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[60, "c.PyAsyncMethods.am_send"]], "pybufferprocs (c type)": [[60, "c.PyBufferProcs"]], "pybufferprocs.bf_getbuffer (c member)": [[60, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[60, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[60, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[60, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[60, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[60, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[60, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[60, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[60, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[60, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[60, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[60, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[60, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[60, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[60, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[60, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[60, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[60, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[60, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[60, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[60, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[60, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[60, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[60, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[60, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[60, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[60, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[60, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[60, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[60, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[60, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[60, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[60, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[60, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[60, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[60, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[60, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[60, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[60, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[60, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[60, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[60, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[60, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[60, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[60, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[60, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[60, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[60, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[60, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[60, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[60, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[60, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[60, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[60, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[60, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[60, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[60, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[60, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[60, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[60, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[60, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[60, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[60, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[60, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[60, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[60, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[60, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[60, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[60, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[60, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[60, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[60, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[60, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[60, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[60, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[60, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[60, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[60, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[60, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[60, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[60, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[60, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[60, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[60, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[60, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[60, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[60, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[60, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[60, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[60, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[60, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[60, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[60, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[60, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_richcompare.py_return_richcompare (c macro)": [[60, "c.PyTypeObject.tp_richcompare.Py_RETURN_RICHCOMPARE"]], "pytypeobject.tp_setattr (c member)": [[60, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[60, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[60, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[60, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[60, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[60, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[60, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[60, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_weaklist (c member)": [[60, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[60, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[60, "c.PyVarObject.ob_size"]], "py_tpflags_basetype (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_list_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_mapping (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_READY"]], "py_tpflags_readying (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_READYING"]], "py_tpflags_sequence (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (\u5167\u5efa\u8b8a\u6578)": [[60, "Py_TPFLAGS_UNICODE_SUBCLASS"]], "allocfunc (c type)": [[60, "c.allocfunc"]], "binaryfunc (c type)": [[60, "c.binaryfunc"]], "descrgetfunc (c type)": [[60, "c.descrgetfunc"]], "descrsetfunc (c type)": [[60, "c.descrsetfunc"]], "destructor (c type)": [[60, "c.destructor"]], "freefunc (c type)": [[60, "c.freefunc"]], "getattrfunc (c type)": [[60, "c.getattrfunc"]], "getattrofunc (c type)": [[60, "c.getattrofunc"]], "getbufferproc (c type)": [[60, "c.getbufferproc"]], "getiterfunc (c type)": [[60, "c.getiterfunc"]], "hashfunc (c type)": [[60, "c.hashfunc"]], "initproc (c type)": [[60, "c.initproc"]], "iternextfunc (c type)": [[60, "c.iternextfunc"]], "lenfunc (c type)": [[60, "c.lenfunc"]], "newfunc (c type)": [[60, "c.newfunc"]], "objobjargproc (c type)": [[60, "c.objobjargproc"]], "objobjproc (c type)": [[60, "c.objobjproc"]], "releasebufferproc (c type)": [[60, "c.releasebufferproc"]], "reprfunc (c type)": [[60, "c.reprfunc"]], "richcmpfunc (c type)": [[60, "c.richcmpfunc"]], "sendfunc (c type)": [[60, "c.sendfunc"]], "setattrfunc (c type)": [[60, "c.setattrfunc"]], "setattrofunc (c type)": [[60, "c.setattrofunc"]], "ssizeargfunc (c type)": [[60, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[60, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[60, "c.ternaryfunc"]], "unaryfunc (c type)": [[60, "c.unaryfunc"]], "pep 383": [[61, "index-3"], [61, "index-4"], [61, "index-5"], [164, "index-2"], [344, "index-1"], [485, "index-4"]], "pep 393": [[61, "index-0"], [61, "index-2"], [164, "index-5"], [359, "index-19"], [476, "index-38"], [478, "index-30"], [478, "index-32"], [478, "index-33"], [478, "index-34"], [478, "index-38"], [478, "index-6"], [478, "index-7"], [478, "index-8"], [484, "index-25"], [484, "index-26"]], "pep 623": [[61, "index-1"], [476, "index-10"], [485, "index-27"], [485, "index-29"]], "pyasciiobject (c type)": [[61, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[61, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[61, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[61, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[61, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[61, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[61, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[61, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[61, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_as_data (c function)": [[61, "c.PyUnicode_AS_DATA"]], "pyunicode_as_unicode (c function)": [[61, "c.PyUnicode_AS_UNICODE"]], "pyunicode_asasciistring (c function)": [[61, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[61, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[61, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[61, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[61, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[61, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[61, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[61, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[61, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[61, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[61, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[61, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[61, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicode (c function)": [[61, "c.PyUnicode_AsUnicode"]], "pyunicode_asunicodeandsize (c function)": [[61, "c.PyUnicode_AsUnicodeAndSize"]], "pyunicode_asunicodeescapestring (c function)": [[61, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[61, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[61, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[61, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[61, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[61, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[61, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[61, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[61, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[61, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[61, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[61, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[61, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[61, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[61, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[61, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[61, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[61, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[61, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[61, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[61, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[61, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[61, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[61, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[61, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[61, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[61, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[61, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[61, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[61, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[61, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[61, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encode (c function)": [[61, "c.PyUnicode_Encode"]], "pyunicode_encodeascii (c function)": [[61, "c.PyUnicode_EncodeASCII"]], "pyunicode_encodecharmap (c function)": [[61, "c.PyUnicode_EncodeCharmap"]], "pyunicode_encodecodepage (c function)": [[61, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[61, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelatin1 (c function)": [[61, "c.PyUnicode_EncodeLatin1"]], "pyunicode_encodelocale (c function)": [[61, "c.PyUnicode_EncodeLocale"]], "pyunicode_encodembcs (c function)": [[61, "c.PyUnicode_EncodeMBCS"]], "pyunicode_encoderawunicodeescape (c function)": [[61, "c.PyUnicode_EncodeRawUnicodeEscape"]], "pyunicode_encodeutf16 (c function)": [[61, "c.PyUnicode_EncodeUTF16"]], "pyunicode_encodeutf32 (c function)": [[61, "c.PyUnicode_EncodeUTF32"]], "pyunicode_encodeutf7 (c function)": [[61, "c.PyUnicode_EncodeUTF7"]], "pyunicode_encodeutf8 (c function)": [[61, "c.PyUnicode_EncodeUTF8"]], "pyunicode_encodeunicodeescape (c function)": [[61, "c.PyUnicode_EncodeUnicodeEscape"]], "pyunicode_fsconverter (c function)": [[61, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[61, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[61, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[61, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[61, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[61, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[61, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[61, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[61, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[61, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[61, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[61, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[61, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromunicode (c function)": [[61, "c.PyUnicode_FromUnicode"]], "pyunicode_fromwidechar (c function)": [[61, "c.PyUnicode_FromWideChar"]], "pyunicode_get_data_size (c function)": [[61, "c.PyUnicode_GET_DATA_SIZE"]], "pyunicode_get_length (c function)": [[61, "c.PyUnicode_GET_LENGTH"]], "pyunicode_get_size (c function)": [[61, "c.PyUnicode_GET_SIZE"]], "pyunicode_getlength (c function)": [[61, "c.PyUnicode_GetLength"]], "pyunicode_getsize (c function)": [[61, "c.PyUnicode_GetSize"]], "pyunicode_internfromstring (c function)": [[61, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[61, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[61, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[61, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[61, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c macro)": [[61, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[61, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[61, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[61, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[61, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[61, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[61, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[61, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[61, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[61, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[61, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[61, "c.PyUnicode_Tailmatch"]], "pyunicode_transformdecimaltoascii (c function)": [[61, "c.PyUnicode_TransformDecimalToASCII"]], "pyunicode_translate (c function)": [[61, "c.PyUnicode_Translate"]], "pyunicode_translatecharmap (c function)": [[61, "c.PyUnicode_TranslateCharmap"]], "pyunicode_type (c var)": [[61, "c.PyUnicode_Type"]], "pyunicode_wchar_kind (c macro)": [[61, "c.PyUnicode_WCHAR_KIND"]], "pyunicode_write (c function)": [[61, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[61, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[61, "c.Py_UCS1"]], "py_ucs2 (c type)": [[61, "c.Py_UCS2"]], "py_ucs4 (c type)": [[61, "c.Py_UCS4"]], "py_unicode (c type)": [[61, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[61, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[61, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[61, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[61, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[61, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[61, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[61, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[61, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[61, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[61, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[61, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c macro)": [[61, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c macro)": [[61, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c macro)": [[61, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c macro)": [[61, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[61, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[61, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[61, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[61, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[61, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[61, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[63, "c.CO_FUTURE_DIVISION"]], "pep 238": [[63, "index-3"], [97, "index-93"], [119, "index-2"], [468, "index-11"], [468, "index-12"], [468, "index-13"], [474, "index-2"]], "pycompilerflags (c struct)": [[63, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[63, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[63, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[63, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[63, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[63, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[63, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[63, "c.PyEval_MergeCompilerFlags"]], "pyframeobject (c type)": [[63, "c.PyFrameObject"]], "pyos_inputhook (c var)": [[63, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[63, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[63, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[63, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[63, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[63, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[63, "c.PyRun_File"]], "pyrun_fileex (c function)": [[63, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[63, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[63, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[63, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[63, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[63, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[63, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[63, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[63, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[63, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[63, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[63, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[63, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[63, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[63, "c.Py_BytesMain"]], "py_compilestring (c function)": [[63, "c.Py_CompileString"]], "py_compilestring()": [[63, "index-0"], [63, "index-1"], [63, "index-2"]], "py_compilestringexflags (c function)": [[63, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[63, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[63, "c.Py_CompileStringObject"]], "py_main (c function)": [[63, "c.Py_Main"]], "py_eval_input (c var)": [[63, "c.Py_eval_input"]], "py_file_input (c var)": [[63, "c.Py_file_input"]], "py_single_input (c var)": [[63, "c.Py_single_input"]], "pyweakref_check (c function)": [[64, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[64, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[64, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[64, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[64, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[64, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[64, "c.PyWeakref_NewRef"]], "pep 3101": [[65, "index-23"], [352, "index-0"], [352, "index-1"], [472, "index-9"], [474, "index-23"], [474, "index-24"], [486, "index-23"]], "rfc": [[65, "index-0"], [69, "index-6"], [108, "index-0"], [109, "index-0"], [109, "index-1"], [109, "index-2"], [109, "index-3"], [109, "index-4"], [109, "index-5"], [115, "index-1"], [115, "index-2"], [115, "index-5"], [133, "index-3"], [133, "index-4"], [149, "index-10"], [149, "index-11"], [149, "index-12"], [149, "index-15"], [149, "index-16"], [149, "index-3"], [149, "index-4"], [149, "index-5"], [149, "index-6"], [149, "index-7"], [149, "index-8"], [149, "index-9"], [152, "index-1"], [152, "index-2"], [164, "index-10"], [164, "index-11"], [164, "index-12"], [164, "index-13"], [164, "index-14"], [164, "index-6"], [164, "index-7"], [164, "index-8"], [164, "index-9"], [181, "index-1"], [201, "index-0"], [201, "index-1"], [201, "index-2"], [201, "index-3"], [201, "index-4"], [201, "index-5"], [201, "index-6"], [201, "index-7"], [203, "index-0"], [203, "index-1"], [203, "index-10"], [203, "index-11"], [203, "index-2"], [203, "index-3"], [203, "index-4"], [203, "index-5"], [203, "index-6"], [203, "index-7"], [203, "index-8"], [203, "index-9"], [204, "index-0"], [206, "index-0"], [207, "index-0"], [208, "index-0"], [208, "index-1"], [209, "index-0"], [209, "index-1"], [209, "index-10"], [209, "index-11"], [209, "index-12"], [209, "index-13"], [209, "index-2"], [209, "index-3"], [209, "index-4"], [209, "index-5"], [209, "index-6"], [209, "index-7"], [209, "index-8"], [209, "index-9"], [210, "index-0"], [210, "index-1"], [210, "index-10"], [210, "index-11"], [210, "index-12"], [210, "index-13"], [210, "index-14"], [210, "index-2"], [210, "index-3"], [210, "index-4"], [210, "index-5"], [210, "index-6"], [210, "index-7"], [210, "index-8"], [210, "index-9"], [212, "index-0"], [212, "index-1"], [212, "index-10"], [212, "index-2"], [212, "index-3"], [212, "index-4"], [212, "index-5"], [212, "index-6"], [212, "index-7"], [212, "index-8"], [212, "index-9"], [214, "index-0"], [214, "index-1"], [215, "index-0"], [215, "index-1"], [215, "index-2"], [215, "index-3"], [215, "index-4"], [215, "index-5"], [215, "index-6"], [215, "index-7"], [215, "index-8"], [215, "index-9"], [216, "index-0"], [216, "index-1"], [216, "index-10"], [216, "index-2"], [216, "index-3"], [216, "index-4"], [216, "index-5"], [216, "index-6"], [216, "index-7"], [216, "index-8"], [216, "index-9"], [230, "index-1"], [230, "index-2"], [230, "index-3"], [230, "index-4"], [230, "index-5"], [230, "index-6"], [237, "index-9"], [242, "index-1"], [242, "index-3"], [242, "index-5"], [244, "index-2"], [248, "index-125"], [248, "index-126"], [248, "index-127"], [248, "index-128"], [248, "index-129"], [248, "index-130"], [248, "index-131"], [248, "index-132"], [248, "index-133"], [248, "index-134"], [248, "index-135"], [248, "index-136"], [248, "index-137"], [248, "index-138"], [248, "index-139"], [248, "index-140"], [248, "index-141"], [248, "index-142"], [248, "index-143"], [248, "index-144"], [248, "index-145"], [248, "index-146"], [248, "index-147"], [248, "index-148"], [248, "index-149"], [248, "index-150"], [248, "index-151"], [248, "index-152"], [248, "index-153"], [248, "index-154"], [248, "index-155"], [248, "index-156"], [248, "index-157"], [248, "index-158"], [248, "index-159"], [248, "index-160"], [248, "index-161"], [248, "index-162"], [248, "index-163"], [248, "index-164"], [248, "index-165"], [248, "index-166"], [248, "index-167"], [248, "index-168"], [248, "index-169"], [248, "index-170"], [248, "index-171"], [248, "index-172"], [248, "index-173"], [248, "index-174"], [248, "index-175"], [248, "index-176"], [248, "index-177"], [248, "index-178"], [248, "index-179"], [248, "index-180"], [248, "index-181"], [248, "index-182"], [248, "index-183"], [248, "index-184"], [248, "index-185"], [248, "index-186"], [249, "index-2"], [249, "index-3"], [249, "index-4"], [250, "index-0"], [250, "index-1"], [250, "index-10"], [250, "index-11"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-15"], [250, "index-16"], [250, "index-17"], [250, "index-18"], [250, "index-19"], [250, "index-2"], [250, "index-20"], [250, "index-21"], [250, "index-22"], [250, "index-23"], [250, "index-24"], [250, "index-25"], [250, "index-3"], [250, "index-4"], [250, "index-5"], [250, "index-6"], [250, "index-7"], [250, "index-8"], [250, "index-9"], [251, "index-0"], [251, "index-1"], [251, "index-2"], [251, "index-3"], [251, "index-4"], [251, "index-5"], [251, "index-6"], [251, "index-7"], [252, "index-1"], [252, "index-2"], [255, "index-1"], [255, "index-2"], [255, "index-3"], [255, "index-4"], [255, "index-5"], [255, "index-6"], [255, "index-7"], [255, "index-8"], [260, "index-0"], [262, "index-0"], [265, "index-0"], [265, "index-1"], [265, "index-10"], [265, "index-11"], [265, "index-12"], [265, "index-13"], [265, "index-2"], [265, "index-3"], [265, "index-4"], [265, "index-5"], [265, "index-6"], [265, "index-7"], [265, "index-8"], [265, "index-9"], [268, "index-0"], [268, "index-1"], [268, "index-2"], [268, "index-3"], [268, "index-4"], [272, "index-4"], [272, "index-5"], [275, "index-0"], [277, "index-0"], [278, "index-1"], [278, "index-2"], [294, "index-10"], [294, "index-2"], [294, "index-3"], [294, "index-4"], [294, "index-5"], [294, "index-6"], [294, "index-7"], [294, "index-8"], [294, "index-9"], [311, "index-1"], [311, "index-2"], [311, "index-3"], [311, "index-4"], [311, "index-5"], [311, "index-6"], [323, "index-1"], [323, "index-2"], [323, "index-3"], [323, "index-4"], [333, "index-1"], [341, "index-1"], [341, "index-2"], [341, "index-3"], [341, "index-4"], [341, "index-5"], [341, "index-6"], [341, "index-7"], [341, "index-8"], [341, "index-9"], [342, "index-1"], [342, "index-10"], [342, "index-11"], [342, "index-12"], [342, "index-2"], [342, "index-3"], [342, "index-4"], [342, "index-5"], [342, "index-6"], [342, "index-7"], [342, "index-8"], [342, "index-9"], [344, "index-15"], [344, "index-3"], [348, "index-10"], [348, "index-11"], [348, "index-12"], [348, "index-13"], [348, "index-14"], [348, "index-15"], [348, "index-16"], [348, "index-17"], [348, "index-20"], [348, "index-21"], [348, "index-22"], [348, "index-23"], [348, "index-24"], [348, "index-25"], [348, "index-26"], [348, "index-5"], [348, "index-6"], [348, "index-7"], [348, "index-8"], [348, "index-9"], [353, "index-0"], [353, "index-1"], [364, "index-2"], [364, "index-3"], [371, "index-10"], [371, "index-19"], [371, "index-20"], [371, "index-21"], [371, "index-22"], [397, "index-2"], [398, "index-1"], [398, "index-10"], [398, "index-11"], [398, "index-12"], [398, "index-2"], [398, "index-3"], [398, "index-4"], [398, "index-5"], [398, "index-6"], [398, "index-7"], [398, "index-8"], [398, "index-9"], [399, "index-10"], [399, "index-19"], [399, "index-20"], [399, "index-21"], [399, "index-5"], [399, "index-6"], [399, "index-7"], [399, "index-8"], [402, "index-0"], [402, "index-1"], [402, "index-10"], [402, "index-11"], [402, "index-2"], [402, "index-3"], [402, "index-4"], [411, "index-10"], [411, "index-5"], [412, "index-2"], [412, "index-3"], [412, "index-4"], [412, "index-5"], [423, "index-0"], [455, "index-3"], [468, "index-17"], [468, "index-18"], [468, "index-19"], [468, "index-20"], [468, "index-21"], [470, "index-18"], [471, "index-22"], [471, "index-23"], [472, "index-22"], [472, "index-23"], [473, "index-10"], [473, "index-11"], [473, "index-13"], [476, "index-31"], [477, "index-11"], [477, "index-12"], [477, "index-13"], [477, "index-7"], [477, "index-8"], [478, "index-26"], [478, "index-27"], [480, "index-33"], [480, "index-34"], [480, "index-35"], [480, "index-36"], [480, "index-37"], [480, "index-38"], [480, "index-39"], [480, "index-40"], [480, "index-41"], [480, "index-42"], [480, "index-43"], [480, "index-44"], [480, "index-45"], [480, "index-46"], [480, "index-53"], [482, "index-34"], [482, "index-35"], [484, "index-22"], [485, "index-12"], [485, "index-136"], [485, "index-14"], [485, "index-95"]], "rfc 4122": [[65, "index-0"], [260, "index-0"], [262, "index-0"], [402, "index-0"], [402, "index-1"], [402, "index-10"], [402, "index-11"], [402, "index-2"], [402, "index-3"], [402, "index-4"], [471, "index-22"], [471, "index-23"]], "(see python package index (pypi))": [[67, "index-1"]], "pep 427": [[67, "index-3"]], "pypi": [[67, "index-1"]], "python package index (pypi)": [[67, "index-1"]], "ccompiler (distutils.ccompiler \u4e2d\u7684\u985e\u5225)": [[69, "distutils.ccompiler.CCompiler"]], "command (distutils.cmd \u4e2d\u7684\u985e\u5225)": [[69, "distutils.cmd.Command"]], "command (distutils.core \u4e2d\u7684\u985e\u5225)": [[69, "distutils.core.Command"]], "distribution (distutils.core \u4e2d\u7684\u985e\u5225)": [[69, "distutils.core.Distribution"]], "exec_prefix (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.EXEC_PREFIX"]], "extension (distutils.core \u4e2d\u7684\u985e\u5225)": [[69, "distutils.core.Extension"]], "fancygetopt (distutils.fancy_getopt \u4e2d\u7684\u985e\u5225)": [[69, "distutils.fancy_getopt.FancyGetopt"]], "home": [[69, "index-1"], [116, "index-4"], [116, "index-5"], [300, "index-3"], [300, "index-8"], [374, "index-1"], [483, "index-14"], [483, "index-21"], [485, "index-119"], [485, "index-120"]], "pep 282": [[69, "index-7"], [75, "index-7"], [273, "index-1"], [338, "index-2"], [469, "index-11"], [469, "index-12"]], "pep 301": [[69, "index-8"], [469, "index-16"]], "pep 314": [[69, "index-0"], [471, "index-4"]], "pep 488": [[69, "index-4"], [69, "index-5"], [258, "index-22"], [258, "index-25"], [258, "index-7"], [317, "index-2"], [367, "index-4"], [459, "index-11"], [459, "index-13"], [459, "index-14"], [459, "index-15"], [480, "index-24"], [480, "index-25"], [480, "index-52"], [485, "index-216"]], "plat": [[69, "index-2"]], "prefix (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.PREFIX"]], "rfc 822": [[69, "index-6"], [207, "index-0"], [209, "index-1"], [237, "index-9"], [249, "index-3"], [342, "index-10"], [342, "index-12"], [342, "index-6"], [342, "index-9"], [371, "index-19"], [371, "index-20"], [468, "index-21"]], "textfile (distutils.text_file \u4e2d\u7684\u985e\u5225)": [[69, "distutils.text_file.TextFile"]], "add_include_dir() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.add_include_dir"]], "add_library() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.add_library"]], "add_library_dir() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.add_library_dir"]], "add_link_object() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.add_link_object"]], "add_runtime_library_dir() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.add_runtime_library_dir"]], "announce() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.announce"]], "bdist_msi (distutils.command.bdist_msi \u4e2d\u7684\u985e\u5225)": [[69, "distutils.command.bdist_msi.bdist_msi"]], "build_py (distutils.command.build_py \u4e2d\u7684\u985e\u5225)": [[69, "distutils.command.build_py.build_py"]], "build_py_2to3 (distutils.command.build_py \u4e2d\u7684\u985e\u5225)": [[69, "distutils.command.build_py.build_py_2to3"]], "byte_compile() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.byte_compile"]], "change_root() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.change_root"]], "check_environ() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.check_environ"]], "close() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.close"]], "compile() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.compile"]], "convert_path() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.convert_path"]], "copy_file() (\u65bc distutils.file_util \u6a21\u7d44\u4e2d)": [[69, "distutils.file_util.copy_file"]], "copy_tree() (\u65bc distutils.dir_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dir_util.copy_tree"]], "create_static_lib() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.create_static_lib"]], "create_tree() (\u65bc distutils.dir_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dir_util.create_tree"]], "customize_compiler() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.customize_compiler"]], "debug_print() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.debug_print"]], "define_macro() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.define_macro"]], "detect_language() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.detect_language"]], "distutils.archive_util": [[69, "module-distutils.archive_util"]], "distutils.bcppcompiler": [[69, "module-distutils.bcppcompiler"]], "distutils.ccompiler": [[69, "module-distutils.ccompiler"]], "distutils.cmd": [[69, "module-distutils.cmd"]], "distutils.command": [[69, "module-distutils.command"]], "distutils.command.bdist": [[69, "module-distutils.command.bdist"]], "distutils.command.bdist_dumb": [[69, "module-distutils.command.bdist_dumb"]], "distutils.command.bdist_msi": [[69, "module-distutils.command.bdist_msi"]], "distutils.command.bdist_packager": [[69, "module-distutils.command.bdist_packager"]], "distutils.command.bdist_rpm": [[69, "module-distutils.command.bdist_rpm"]], "distutils.command.build": [[69, "module-distutils.command.build"]], "distutils.command.build_clib": [[69, "module-distutils.command.build_clib"]], "distutils.command.build_ext": [[69, "module-distutils.command.build_ext"]], "distutils.command.build_py": [[69, "module-distutils.command.build_py"]], "distutils.command.build_scripts": [[69, "module-distutils.command.build_scripts"]], "distutils.command.check": [[69, "module-distutils.command.check"]], "distutils.command.clean": [[69, "module-distutils.command.clean"]], "distutils.command.config": [[69, "module-distutils.command.config"]], "distutils.command.install": [[69, "module-distutils.command.install"]], "distutils.command.install_data": [[69, "module-distutils.command.install_data"]], "distutils.command.install_headers": [[69, "module-distutils.command.install_headers"]], "distutils.command.install_lib": [[69, "module-distutils.command.install_lib"]], "distutils.command.install_scripts": [[69, "module-distutils.command.install_scripts"]], "distutils.command.register": [[69, "module-distutils.command.register"]], "distutils.command.sdist": [[69, "module-distutils.command.sdist"]], "distutils.core": [[69, "module-distutils.core"]], "distutils.cygwinccompiler": [[69, "module-distutils.cygwinccompiler"]], "distutils.debug": [[69, "module-distutils.debug"]], "distutils.dep_util": [[69, "module-distutils.dep_util"]], "distutils.dir_util": [[69, "module-distutils.dir_util"]], "distutils.dist": [[69, "module-distutils.dist"]], "distutils.errors": [[69, "module-distutils.errors"]], "distutils.extension": [[69, "module-distutils.extension"]], "distutils.fancy_getopt": [[69, "module-distutils.fancy_getopt"]], "distutils.file_util": [[69, "module-distutils.file_util"]], "distutils.filelist": [[69, "module-distutils.filelist"]], "distutils.log": [[69, "module-distutils.log"]], "distutils.msvccompiler": [[69, "module-distutils.msvccompiler"]], "distutils.spawn": [[69, "module-distutils.spawn"]], "distutils.sysconfig": [[69, "module-distutils.sysconfig"]], "distutils.text_file": [[69, "module-distutils.text_file"]], "distutils.unixccompiler": [[69, "module-distutils.unixccompiler"]], "distutils.util": [[69, "module-distutils.util"]], "distutils.version": [[69, "module-distutils.version"]], "executable_filename() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.executable_filename"]], "execute() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.execute"]], "execute() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.execute"]], "fancy_getopt() (\u65bc distutils.fancy_getopt \u6a21\u7d44\u4e2d)": [[69, "distutils.fancy_getopt.fancy_getopt"]], "finalize_options() (distutils.cmd.command \u7684\u65b9\u6cd5)": [[69, "distutils.cmd.Command.finalize_options"]], "find_library_file() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.find_library_file"]], "gen_lib_options() (\u65bc distutils.ccompiler \u6a21\u7d44\u4e2d)": [[69, "distutils.ccompiler.gen_lib_options"]], "gen_preprocess_options() (\u65bc distutils.ccompiler \u6a21\u7d44\u4e2d)": [[69, "distutils.ccompiler.gen_preprocess_options"]], "generate_help() (distutils.fancy_getopt.fancygetopt \u7684\u65b9\u6cd5)": [[69, "distutils.fancy_getopt.FancyGetopt.generate_help"]], "get_config_h_filename() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_config_var"]], "get_config_vars() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_config_vars"]], "get_default_compiler() (\u65bc distutils.ccompiler \u6a21\u7d44\u4e2d)": [[69, "distutils.ccompiler.get_default_compiler"]], "get_makefile_filename() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_makefile_filename"]], "get_option_order() (distutils.fancy_getopt.fancygetopt \u7684\u65b9\u6cd5)": [[69, "distutils.fancy_getopt.FancyGetopt.get_option_order"]], "get_platform() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.get_platform"]], "get_python_inc() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_python_inc"]], "get_python_lib() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.get_python_lib"]], "getopt() (distutils.fancy_getopt.fancygetopt \u7684\u65b9\u6cd5)": [[69, "distutils.fancy_getopt.FancyGetopt.getopt"]], "has_function() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.has_function"]], "initialize_options() (distutils.cmd.command \u7684\u65b9\u6cd5)": [[69, "distutils.cmd.Command.initialize_options"]], "library_dir_option() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.library_dir_option"]], "library_filename() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.library_filename"]], "library_option() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.library_option"]], "link() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.link"]], "link_executable() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.link_executable"]], "link_shared_lib() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.link_shared_lib"]], "link_shared_object() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.link_shared_object"]], "make_archive() (\u65bc distutils.archive_util \u6a21\u7d44\u4e2d)": [[69, "distutils.archive_util.make_archive"]], "make_tarball() (\u65bc distutils.archive_util \u6a21\u7d44\u4e2d)": [[69, "distutils.archive_util.make_tarball"]], "make_zipfile() (\u65bc distutils.archive_util \u6a21\u7d44\u4e2d)": [[69, "distutils.archive_util.make_zipfile"]], "mkpath() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.mkpath"]], "mkpath() (\u65bc distutils.dir_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dir_util.mkpath"]], "move_file() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.move_file"]], "move_file() (\u65bc distutils.file_util \u6a21\u7d44\u4e2d)": [[69, "distutils.file_util.move_file"]], "new_compiler() (\u65bc distutils.ccompiler \u6a21\u7d44\u4e2d)": [[69, "distutils.ccompiler.new_compiler"]], "newer() (\u65bc distutils.dep_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dep_util.newer"]], "newer_group() (\u65bc distutils.dep_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dep_util.newer_group"]], "newer_pairwise() (\u65bc distutils.dep_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dep_util.newer_pairwise"]], "object_filenames() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.object_filenames"]], "open() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.open"]], "preprocess() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.preprocess"]], "readline() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.readline"]], "readlines() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.readlines"]], "remove_tree() (\u65bc distutils.dir_util \u6a21\u7d44\u4e2d)": [[69, "distutils.dir_util.remove_tree"]], "rfc822_escape() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.rfc822_escape"]], "run() (distutils.cmd.command \u7684\u65b9\u6cd5)": [[69, "distutils.cmd.Command.run"]], "run_setup() (\u65bc distutils.core \u6a21\u7d44\u4e2d)": [[69, "distutils.core.run_setup"]], "runtime_library_dir_option() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.runtime_library_dir_option"]], "set_executables() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_executables"]], "set_include_dirs() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_include_dirs"]], "set_libraries() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_libraries"]], "set_library_dirs() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_library_dirs"]], "set_link_objects() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_link_objects"]], "set_python_build() (\u65bc distutils.sysconfig \u6a21\u7d44\u4e2d)": [[69, "distutils.sysconfig.set_python_build"]], "set_runtime_library_dirs() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.set_runtime_library_dirs"]], "setup() (\u65bc distutils.core \u6a21\u7d44\u4e2d)": [[69, "distutils.core.setup"]], "shared_object_filename() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.shared_object_filename"]], "show_compilers() (\u65bc distutils.ccompiler \u6a21\u7d44\u4e2d)": [[69, "distutils.ccompiler.show_compilers"]], "spawn() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.spawn"]], "split_quoted() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.split_quoted"]], "strtobool() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.strtobool"]], "sub_commands (distutils.cmd.command \u7684\u5c6c\u6027)": [[69, "distutils.cmd.Command.sub_commands"]], "subst_vars() (\u65bc distutils.util \u6a21\u7d44\u4e2d)": [[69, "distutils.util.subst_vars"]], "undefine_macro() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.undefine_macro"]], "unreadline() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.unreadline"]], "warn() (distutils.ccompiler.ccompiler \u7684\u65b9\u6cd5)": [[69, "distutils.ccompiler.CCompiler.warn"]], "warn() (distutils.text_file.textfile \u7684\u65b9\u6cd5)": [[69, "distutils.text_file.TextFile.warn"]], "wrap_text() (\u65bc distutils.fancy_getopt \u6a21\u7d44\u4e2d)": [[69, "distutils.fancy_getopt.wrap_text"]], "write_file() (\u65bc distutils.file_util \u6a21\u7d44\u4e2d)": [[69, "distutils.file_util.write_file"]], "create_shortcut()": [[70, "create_shortcut"]], "directory_created()": [[70, "directory_created"]], "file_created()": [[70, "file_created"]], "get_special_folder_path()": [[70, "get_special_folder_path"]], "distutils_debug": [[78, "index-0"]], "pyinit_modulename (c function)": [[81, "c.PyInit_modulename"]], "philbrick, geoff": [[83, "index-4"]], "pyarg_parsetuple()": [[83, "index-2"]], "pyarg_parsetupleandkeywords()": [[83, "index-3"]], "pyobject_callobject()": [[83, "index-1"]], "py_audit_read": [[85, "index-4"]], "pyerr_fetch()": [[85, "index-1"]], "pyerr_restore()": [[85, "index-1"]], "readonly": [[85, "index-4"]], "read_restricted": [[85, "index-4"]], "restricted": [[85, "index-4"], [433, "index-11"]], "write_restricted": [[85, "index-4"]], "deallocation": [[85, "index-0"]], "deallocation, object": [[85, "index-0"]], "finalization": [[85, "index-0"]], "finalization, of objects": [[85, "index-0"]], "object representation": [[85, "index-3"]], "pep 572": [[88, "index-2"], [431, "index-23"], [434, "index-21"], [434, "index-87"], [483, "index-24"], [483, "index-31"], [485, "index-111"], [485, "index-124"], [485, "index-134"]], "pep 5": [[90, "index-8"], [467, "index-6"]], "pep 6": [[90, "index-6"]], "pep 602": [[90, "index-7"], [484, "index-10"]], "tcl_library": [[91, "index-4"]], "tk_library": [[91, "index-5"]], "pep 8": [[95, "index-0"], [95, "index-2"], [96, "index-2"], [100, "index-0"], [232, "index-9"], [434, "index-79"], [445, "index-18"], [461, "index-0"], [474, "index-21"], [485, "index-159"], [485, "index-221"]], "argument": [[95, "index-1"], [431, "index-30"], [432, "index-32"], [434, "index-47"]], "difference from argument": [[95, "index-1"]], "difference from parameter": [[95, "index-1"]], "parameter": [[95, "index-1"], [431, "index-26"], [431, "index-30"], [434, "index-48"]], "...": [[97, "term-..."], [174, "index-0"], [200, "index-0"], [200, "index-3"], [313, "index-0"], [327, "index-0"], [351, "index-65"], [359, "index-26"], [369, "index-0"], [432, "index-8"]], "2to3": [[97, "term-2to3"]], ">>>": [[97, "term-0"], [200, "index-0"], [359, "index-26"]], "bdfl": [[97, "term-BDFL"]], "cpython": [[97, "term-CPython"]], "eafp": [[97, "term-EAFP"]], "gil": [[97, "term-GIL"]], "idle": [[97, "term-IDLE"], [254, "index-0"]], "lbyl": [[97, "term-LBYL"]], "mro": [[97, "term-MRO"]], "pep": [[97, "term-PEP"]], "pep 1": [[97, "index-103"], [466, "index-0"], [466, "index-1"]], "pep 278": [[97, "index-109"], [469, "index-9"]], "pep 302": [[97, "index-90"], [97, "index-99"], [232, "index-13"], [257, "index-7"], [258, "index-12"], [258, "index-13"], [258, "index-14"], [258, "index-15"], [258, "index-17"], [258, "index-2"], [271, "index-1"], [308, "index-0"], [308, "index-1"], [308, "index-10"], [308, "index-11"], [308, "index-12"], [308, "index-2"], [308, "index-3"], [308, "index-4"], [308, "index-5"], [308, "index-7"], [308, "index-8"], [330, "index-1"], [359, "index-24"], [359, "index-25"], [427, "index-2"], [436, "index-1"], [436, "index-18"], [469, "index-17"], [469, "index-18"], [469, "index-19"], [469, "index-6"], [471, "index-21"], [475, "index-2"], [478, "index-20"], [478, "index-21"], [478, "index-37"]], "pep 3116": [[97, "index-110"], [472, "index-14"], [475, "index-3"]], "pep 3155": [[97, "index-106"], [478, "index-15"]], "pep 343": [[97, "index-86"], [119, "index-4"], [175, "index-2"], [431, "index-16"], [432, "index-103"], [471, "index-10"], [471, "index-14"], [472, "index-3"]], "pep 362": [[97, "index-101"], [97, "index-79"], [261, "index-0"], [478, "index-17"]], "pep 411": [[97, "index-105"], [359, "index-13"], [359, "index-14"], [359, "index-30"], [359, "index-31"]], "pep 420": [[97, "index-100"], [97, "index-104"], [97, "index-91"], [258, "index-5"], [436, "index-14"], [436, "index-15"], [436, "index-19"], [436, "index-2"], [436, "index-20"], [436, "index-21"], [436, "index-6"], [478, "index-2"], [478, "index-3"], [485, "index-201"], [485, "index-208"]], "pep 443": [[97, "index-95"], [479, "index-11"], [479, "index-36"]], "pep 483": [[97, "index-96"], [390, "index-1"], [390, "index-3"], [480, "index-12"]], "pep 484": [[97, "index-107"], [97, "index-108"], [97, "index-111"], [97, "index-77"], [97, "index-94"], [97, "index-97"], [128, "index-2"], [128, "index-4"], [128, "index-5"], [351, "index-56"], [390, "index-0"], [390, "index-18"], [390, "index-19"], [390, "index-2"], [390, "index-27"], [390, "index-34"], [390, "index-74"], [390, "index-82"], [431, "index-36"], [432, "index-91"], [440, "index-17"], [445, "index-17"], [476, "index-18"], [476, "index-20"], [476, "index-22"], [480, "index-10"], [480, "index-11"], [481, "index-5"], [482, "index-20"], [483, "index-10"], [483, "index-12"]], "pep 492": [[97, "index-80"], [97, "index-81"], [97, "index-83"], [97, "index-84"], [97, "index-85"], [97, "index-87"], [97, "index-88"], [167, "index-3"], [261, "index-1"], [261, "index-2"], [431, "index-49"], [432, "index-106"], [434, "index-30"], [480, "index-1"], [480, "index-2"], [480, "index-49"], [480, "index-54"], [481, "index-35"], [481, "index-9"], [485, "index-164"], [485, "index-198"], [485, "index-209"], [485, "index-213"]], "pep 498": [[97, "index-89"], [439, "index-26"], [481, "index-3"], [481, "index-4"], [485, "index-205"]], "pep 519": [[97, "index-102"], [481, "index-16"], [485, "index-189"], [485, "index-194"], [485, "index-195"], [485, "index-196"], [485, "index-197"], [485, "index-200"]], "pep 525": [[97, "index-82"], [167, "index-2"], [261, "index-3"], [359, "index-29"], [359, "index-40"], [434, "index-29"], [481, "index-10"], [485, "index-182"]], "pep 526": [[97, "index-112"], [97, "index-78"], [128, "index-3"], [128, "index-6"], [187, "index-1"], [187, "index-2"], [390, "index-30"], [390, "index-37"], [390, "index-38"], [390, "index-4"], [431, "index-37"], [440, "index-16"], [476, "index-26"], [481, "index-33"], [481, "index-6"], [482, "index-1"], [483, "index-11"], [485, "index-183"]], "pep 585": [[97, "index-98"], [167, "index-0"], [351, "index-57"], [390, "index-21"], [390, "index-23"], [390, "index-24"], [390, "index-28"], [390, "index-40"], [390, "index-41"], [390, "index-42"], [390, "index-43"], [390, "index-44"], [390, "index-45"], [390, "index-46"], [390, "index-47"], [390, "index-48"], [390, "index-49"], [390, "index-50"], [390, "index-51"], [390, "index-52"], [390, "index-53"], [390, "index-54"], [390, "index-55"], [390, "index-56"], [390, "index-57"], [390, "index-58"], [390, "index-59"], [390, "index-6"], [390, "index-60"], [390, "index-61"], [390, "index-62"], [390, "index-63"], [390, "index-64"], [390, "index-65"], [390, "index-66"], [390, "index-67"], [390, "index-68"], [390, "index-69"], [390, "index-70"], [390, "index-71"], [390, "index-72"], [390, "index-73"], [390, "index-78"], [484, "index-13"], [484, "index-2"], [485, "index-10"]], "python 3000": [[97, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[97, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[97, "term-Zen-of-Python"]], "__future__": [[97, "term-__future__"], [119, "module-__future__"], [440, "index-40"]], "__slots__": [[97, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[97, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[97, "term-annotation"]], "argument\uff08\u5f15\u6578\uff09": [[97, "term-argument"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[97, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[97, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[97, "term-asynchronous-generator"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[97, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[97, "term-asynchronous-iterator"]], "attribute\uff08\u5c6c\u6027\uff09": [[97, "term-attribute"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[97, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u5236\u6a94\u6848\uff09": [[97, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[97, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[97, "term-bytecode"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[97, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[97, "term-callable"]], "callback\uff08\u56de\u547c\uff09": [[97, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[97, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[97, "term-class"]], "coercion\uff08\u5f37\u5236\u8f49\u578b\uff09": [[97, "term-coercion"]], "complex number\uff08\u8907\u6578\uff09": [[97, "term-complex-number"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[97, "term-context-manager"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[97, "term-context-variable"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[97, "term-contiguous"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[97, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[97, "term-coroutine"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[97, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[97, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[97, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[97, "term-dictionary-view"]], "dictionary\uff08\u5b57\u5178\uff09": [[97, "term-dictionary"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[97, "term-docstring"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[97, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[97, "term-expression"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[97, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[97, "term-f-string"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[97, "term-file-object"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[97, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[97, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[97, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[97, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[97, "term-function-annotation"]], "function\uff08\u51fd\u5f0f\uff09": [[97, "term-function"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[97, "term-garbage-collection"]], "generator": [[97, "index-19"], [432, "index-37"], [432, "index-57"], [434, "index-22"], [434, "index-23"], [434, "index-31"], [440, "index-26"]], "generator expression": [[97, "index-20"], [434, "index-22"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[97, "term-generator-expression"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[97, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[97, "term-generator"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[97, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[97, "term-generic-type"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[97, "term-global-interpreter-lock"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[97, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[97, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[97, "term-immutable"]], "import path\uff08\u532f\u5165\u8def\u5f91\uff09": [[97, "term-import-path"]], "importer\uff08\u532f\u5165\u5668\uff09": [[97, "term-importer"]], "importing\uff08\u532f\u5165\uff09": [[97, "term-importing"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[97, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[97, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[97, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[97, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[97, "term-iterator"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[97, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[97, "term-keyword-argument"]], "lambda": [[97, "term-lambda"], [431, "index-34"], [434, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[97, "term-list-comprehension"]], "list\uff08\u4e32\u5217\uff09": [[97, "term-list"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[97, "term-loader"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[97, "term-locale-encoding"]], "magic": [[97, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[97, "term-magic-method"]], "mapping\uff08\u5c0d\u6620\uff09": [[97, "term-mapping"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[97, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[97, "term-metaclass"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[97, "term-method-resolution-order"]], "method\uff08\u65b9\u6cd5\uff09": [[97, "term-method"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[97, "term-module-spec"]], "module\uff08\u6a21\u7d44\uff09": [[97, "term-module"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[97, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[97, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[97, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[97, "term-namespace"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[97, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[97, "term-new-style-class"]], "object\uff08\u7269\u4ef6\uff09": [[97, "term-object"]], "package\uff08\u5957\u4ef6\uff09": [[97, "term-package"]], "parameter\uff08\u53c3\u6578\uff09": [[97, "term-parameter"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[97, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[97, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[97, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[97, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[97, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[97, "term-portion"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[97, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[97, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[97, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[97, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[97, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[97, "term-regular-package"]], "sequence\uff08\u5e8f\u5217\uff09": [[97, "term-sequence"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[97, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[97, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[97, "term-slice"]], "special": [[97, "index-34"], [432, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[97, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[97, "term-statement"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[97, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[97, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[97, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[97, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[97, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[97, "term-type-hint"]], "type\uff08\u578b\u5225\uff09": [[97, "term-type"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[97, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[97, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[97, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[97, "term-virtual-machine"]], "pep 604": [[98, "index-0"], [351, "index-59"], [390, "index-11"], [476, "index-42"], [476, "index-5"], [485, "index-34"], [485, "index-75"]], "pep 573": [[100, "index-3"], [484, "index-23"], [484, "index-6"], [485, "index-77"], [485, "index-82"]], "pep 289": [[104, "index-1"], [470, "index-15"], [470, "index-2"]], "pep 342": [[104, "index-0"], [104, "index-2"], [167, "index-1"], [434, "index-27"], [471, "index-11"], [471, "index-31"], [471, "index-9"]], "rfc 3339": [[108, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[108, "logging.logging.Formatter.__init__"]], "rfc 3164": [[109, "index-5"]], "rfc 5424": [[109, "index-0"], [109, "index-2"], [109, "index-3"], [109, "index-4"], [275, "index-0"]], "rfc 5424#section-6": [[109, "index-1"]], "pep 263": [[114, "index-0"], [258, "index-1"], [383, "index-0"], [383, "index-1"], [469, "index-3"], [471, "index-19"], [485, "index-9"]], "rfc 2616": [[115, "index-1"], [115, "index-2"], [115, "index-5"], [397, "index-2"], [399, "index-10"], [399, "index-6"], [399, "index-7"], [411, "index-10"], [411, "index-5"], [477, "index-7"]], "http_proxy": [[115, "index-3"], [399, "index-18"], [399, "index-9"]], "cflags": [[116, "index-10"], [116, "index-9"], [460, "envvar-CFLAGS"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-17"], [469, "index-25"]], "homedrive": [[116, "index-7"], [300, "index-6"]], "homepath": [[116, "index-8"], [300, "index-5"]], "userprofile": [[116, "index-6"], [300, "index-4"], [483, "index-13"], [483, "index-20"], [485, "index-118"]], "pep 617": [[118, "index-0"], [435, "index-0"], [476, "index-13"], [484, "index-14"], [484, "index-19"], [484, "index-7"], [485, "index-91"]], "apply (2to3 fixer)": [[118, "to3fixer-apply"]], "asserts (2to3 fixer)": [[118, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[118, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[118, "to3fixer-buffer"]], "dict (2to3 fixer)": [[118, "to3fixer-dict"]], "except (2to3 fixer)": [[118, "to3fixer-except"]], "exec (2to3 fixer)": [[118, "to3fixer-exec"]], "execfile (2to3 fixer)": [[118, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[118, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[118, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[118, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[118, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[118, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[118, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[118, "to3fixer-idioms"]], "import (2to3 fixer)": [[118, "to3fixer-import"]], "imports (2to3 fixer)": [[118, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[118, "to3fixer-imports2"]], "input (2to3 fixer)": [[118, "to3fixer-input"]], "intern (2to3 fixer)": [[118, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[118, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[118, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[118, "to3fixer-itertools_imports"]], "lib2to3": [[118, "module-lib2to3"]], "long (2to3 fixer)": [[118, "to3fixer-long"]], "map (2to3 fixer)": [[118, "to3fixer-map"]], "metaclass (2to3 fixer)": [[118, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[118, "to3fixer-methodattrs"]], "ne (2to3 fixer)": [[118, "to3fixer-ne"]], "next (2to3 fixer)": [[118, "to3fixer-next"]], "nonzero (2to3 fixer)": [[118, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[118, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[118, "to3fixer-operator"]], "paren (2to3 fixer)": [[118, "to3fixer-paren"]], "print (2to3 fixer)": [[118, "to3fixer-print"]], "raise (2to3 fixer)": [[118, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[118, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[118, "to3fixer-reduce"]], "reload (2to3 fixer)": [[118, "to3fixer-reload"]], "renames (2to3 fixer)": [[118, "to3fixer-renames"]], "repr (2to3 fixer)": [[118, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[118, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[118, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[118, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[118, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[118, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[118, "to3fixer-types"]], "unicode (2to3 fixer)": [[118, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[118, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[118, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[118, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[118, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[118, "to3fixer-zip"]], "pep 227": [[119, "index-0"], [467, "index-2"], [468, "index-16"]], "pep 255": [[119, "index-1"], [434, "index-26"], [468, "index-8"], [468, "index-9"], [469, "index-1"], [469, "index-2"]], "pep 3105": [[119, "index-5"], [472, "index-10"], [474, "index-0"]], "pep 3112": [[119, "index-6"], [472, "index-12"]], "pep 328": [[119, "index-3"], [232, "index-14"], [258, "index-3"], [436, "index-23"], [470, "index-10"], [470, "index-17"], [471, "index-5"], [471, "index-6"], [474, "index-16"], [478, "index-36"]], "pep 479": [[119, "index-7"], [220, "index-5"], [220, "index-6"], [480, "index-17"], [480, "index-18"], [482, "index-37"], [485, "index-139"], [485, "index-147"], [485, "index-150"], [485, "index-172"], [485, "index-193"], [485, "index-207"]], "pep 563": [[119, "index-8"], [119, "index-9"], [390, "index-76"], [390, "index-79"], [431, "index-38"], [440, "index-41"], [482, "index-2"], [485, "index-19"], [485, "index-52"]], "pep 649": [[119, "index-10"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.LockType"]], "posix": [[121, "index-1"], [312, "module-posix"], [366, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[121, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.allocate_lock"]], "binary semaphores": [[121, "index-0"]], "error": [[121, "thread.error"], [147, "audioop.error"], [152, "binascii.Error"], [153, "binhex.Error"], [173, "configparser.Error"], [177, "copy.Error"], [181, "csv.Error"], [183, "curses.error"], [190, "dbm.dumb.error"], [190, "dbm.error"], [190, "dbm.gnu.error"], [190, "dbm.ndbm.error"], [235, "getopt.error"], [272, "locale.Error"], [277, "mailbox.Error"], [293, "nis.error"], [299, "os.error"], [320, "xml.parsers.expat.error"], [325, "re.error"], [328, "resource.error"], [334, "select.error"], [338, "shutil.Error"], [344, "socket.error"], [347, "sqlite3.Error"], [354, "struct.error"], [356, "sunau.Error"], [401, "uu.Error"], [405, "wave.Error"], [407, "webbrowser.Error"], [412, "xdrlib.Error"], [428, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.interrupt_main"]], "light-weight processes": [[121, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[121, "thread.lock.locked"]], "processes, light-weight": [[121, "index-0"]], "pthreads": [[121, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[121, "thread.lock.release"]], "semaphores, binary": [[121, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[121, "thread.start_new_thread"]], "threads": [[121, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[122, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[122, "abc.ABCMeta"]], "pep 3141": [[122, "index-1"], [295, "index-0"], [472, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[122, "abc.ABCMeta.__subclasshook__"]], "abc": [[122, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[122, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[122, "abc.update_abstractmethods"]], "a-law": [[123, "index-2"], [147, "index-1"], [343, "index-0"]], "aiff": [[123, "index-0"], [160, "index-0"]], "aiff-c": [[123, "index-0"], [160, "index-0"]], "audio interchange file format": [[123, "index-0"], [160, "index-0"]], "g.722": [[123, "index-2"]], "pep 594#aifc": [[123, "index-4"]], "aifc": [[123, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[123, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.tell"]], "u-law": [[123, "index-2"], [147, "index-1"], [343, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[123, "aifc.aifc.writeframesraw"]], "* (asterisk)": [[126, "index-1"], [128, "index-1"], [227, "index-2"], [238, "index-1"], [325, "index-3"], [351, "index-13"], [351, "index-35"], [351, "index-45"], [431, "index-31"], [434, "index-49"], [434, "index-65"], [434, "index-93"], [440, "index-37"], [440, "index-6"], [445, "index-3"]], "+ (plus)": [[126, "index-2"], [200, "index-4"], [325, "index-4"], [351, "index-13"], [351, "index-36"], [351, "index-46"], [352, "index-4"], [434, "index-61"], [434, "index-69"]], "? (question mark)": [[126, "index-0"], [128, "index-0"], [162, "index-0"], [164, "index-1"], [227, "index-2"], [238, "index-1"], [325, "index-5"], [347, "index-2"], [354, "index-2"], [354, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.ArgumentDefaultsHelpFormatter"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.ArgumentParser"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[126, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[126, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.get_default"]], "in argparse module": [[126, "index-0"], [126, "index-1"], [126, "index-2"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[126, "argparse.ArgumentParser.set_defaults"]], "append() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.append"]], "array": [[127, "module-array"], [351, "index-39"], [432, "index-25"]], "array (array \u4e2d\u7684\u985e\u5225)": [[127, "array.array"]], "arrays": [[127, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[127, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[127, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[127, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[127, "array.typecodes"]], "--help": [[128, "cmdoption-ast-h"], [241, "cmdoption-gzip-h"], [268, "cmdoption-json.tool-h"], [372, "cmdoption-timeit-h"], [383, "cmdoption-tokenize-h"], [384, "cmdoption-trace-help"], [425, "cmdoption-zipapp-h"], [459, "cmdoption-help"]], "--include-attributes": [[128, "cmdoption-ast-a"]], "--indent": [[128, "cmdoption-ast-indent"], [268, "cmdoption-json.tool-indent"]], "--mode": [[128, "cmdoption-ast-mode"]], "--no-type-comments": [[128, "cmdoption-ast-no-type-comments"]], "-a": [[128, "cmdoption-ast-a"], [306, "cmdoption-pickletools-a"]], "-h": [[128, "cmdoption-ast-h"], [241, "cmdoption-gzip-h"], [268, "cmdoption-json.tool-h"], [372, "cmdoption-timeit-h"], [383, "cmdoption-tokenize-h"], [425, "cmdoption-zipapp-h"], [459, "cmdoption-h"]], "-i": [[128, "cmdoption-ast-i"], [169, "cmdoption-compileall-i"], [459, "cmdoption-I"], [459, "cmdoption-i"]], "-m": [[128, "cmdoption-ast-m"], [306, "cmdoption-pickletools-m"], [384, "cmdoption-trace-m"], [425, "cmdoption-zipapp-m"], [459, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Expr"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.FunctionDef"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.In"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Mod"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Or"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Try"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Tuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[128, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.arguments"]], "ast": [[128, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[128, "cmdoption-ast-a"], [128, "cmdoption-ast-h"], [128, "cmdoption-ast-i"], [128, "cmdoption-ast-indent"], [128, "cmdoption-ast-m"], [128, "cmdoption-ast-mode"], [128, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[128, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[128, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[128, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[128, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.get_source_segment"]], "in ast grammar": [[128, "index-0"], [128, "index-1"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[128, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[128, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[128, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[128, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[128, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[128, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[128, "ast.NodeVisitor.visit"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[128, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[128, "ast.withitem"]], "async_chat (asynchat \u4e2d\u7684\u985e\u5225)": [[129, "asynchat.async_chat"]], "async_chat.ac_in_buffer_size (\u65bc asynchat \u6a21\u7d44\u4e2d)": [[129, "asynchat.async_chat.ac_in_buffer_size"]], "async_chat.ac_out_buffer_size (\u65bc asynchat \u6a21\u7d44\u4e2d)": [[129, "asynchat.async_chat.ac_out_buffer_size"]], "asynchat": [[129, "module-asynchat"]], "close_when_done() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.close_when_done"]], "collect_incoming_data() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.collect_incoming_data"]], "discard_buffers() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.discard_buffers"]], "found_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.found_terminator"]], "get_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.get_terminator"]], "push() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.push"]], "push_with_producer() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.push_with_producer"]], "set_terminator() (asynchat.async_chat \u7684\u65b9\u6cd5)": [[129, "asynchat.async_chat.set_terminator"]], "asyncio": [[130, "module-asyncio"]], "pythonasynciodebug": [[132, "index-2"], [133, "index-5"], [194, "index-5"], [459, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Handle"]], "pep 567": [[133, "index-0"], [133, "index-1"], [133, "index-2"], [135, "index-2"], [176, "index-2"], [482, "index-28"], [482, "index-30"], [485, "index-142"], [485, "index-146"], [485, "index-151"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.ProactorEventLoop"]], "rfc 8305": [[133, "index-3"], [133, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[133, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[133, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.default_exception_handler"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.shutdown_default_executor"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_recv_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.sock_sendfile"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[133, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[133, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[133, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[133, "asyncio.TimerHandle.when"]], "cancellederror": [[134, "asyncio.CancelledError"], [172, "concurrent.futures.CancelledError"]], "incompletereaderror": [[134, "asyncio.IncompleteReadError"]], "invalidstateerror": [[134, "asyncio.InvalidStateError"], [172, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[134, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[134, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[134, "asyncio.TimeoutError"], [172, "concurrent.futures.TimeoutError"], [220, "TimeoutError"], [289, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[134, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[134, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[134, "asyncio.IncompleteReadError.partial"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[135, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[138, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[138, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[139, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[139, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[139, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[139, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[139, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[139, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[139, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[139, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[139, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[140, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[140, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[140, "asyncio.Queue"]], "queueempty": [[140, "asyncio.QueueEmpty"]], "queuefull": [[140, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[140, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[140, "asyncio.Queue.task_done"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[141, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[141, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.drain"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[141, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[141, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[141, "asyncio.start_server"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[141, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[141, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[141, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[142, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[142, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[142, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[142, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[142, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[142, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[142, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[142, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[142, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[142, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[142, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[142, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[142, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[142, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[142, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[142, "asyncio.subprocess.Process.wait"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[143, "asyncio.BoundedSemaphore"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[143, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[143, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[143, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[143, "asyncio.Semaphore"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[143, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[143, "asyncio.Semaphore.acquire"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[143, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[143, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[143, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[143, "asyncio.Semaphore.locked"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.notify_all"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[143, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[143, "asyncio.Semaphore.release"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[143, "asyncio.Event.set"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[143, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[143, "asyncio.Condition.wait_for"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[144, "asyncio.Task"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.cancelled"]], "coroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.coroutine"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.done"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.exception"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.gather"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.get_stack"]], "iscoroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.iscoroutine"]], "iscoroutinefunction() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.iscoroutinefunction"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.remove_done_callback"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.result"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.run"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[144, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.sleep"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.to_thread"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[144, "asyncio.wait_for"]], "accept() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.accept"]], "asyncore": [[145, "module-asyncore"]], "bind() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.bind"]], "close() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.close"]], "connect() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.connect"]], "create_socket() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.create_socket"]], "dispatcher (asyncore \u4e2d\u7684\u985e\u5225)": [[145, "asyncore.dispatcher"]], "dispatcher_with_send (asyncore \u4e2d\u7684\u985e\u5225)": [[145, "asyncore.dispatcher_with_send"]], "file_dispatcher (asyncore \u4e2d\u7684\u985e\u5225)": [[145, "asyncore.file_dispatcher"]], "file_wrapper (asyncore \u4e2d\u7684\u985e\u5225)": [[145, "asyncore.file_wrapper"]], "handle_accept() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_accept"]], "handle_accepted() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_accepted"]], "handle_close() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_close"]], "handle_connect() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_connect"]], "handle_error() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_error"]], "handle_expt() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_expt"]], "handle_read() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_read"]], "handle_write() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.handle_write"]], "listen() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.listen"]], "loop() (\u65bc asyncore \u6a21\u7d44\u4e2d)": [[145, "asyncore.loop"]], "readable() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.readable"]], "recv() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.recv"]], "send() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.send"]], "writable() (asyncore.dispatcher \u7684\u65b9\u6cd5)": [[145, "asyncore.dispatcher.writable"]], "atexit": [[146, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[146, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[146, "atexit.unregister"]], "adpcm, intel/dvi": [[147, "index-1"]], "intel/dvi adpcm": [[147, "index-1"]], "pep 594#audioop": [[147, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.alaw2lin"]], "audioop": [[147, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[147, "audioop.ulaw2lin"]], "audit events": [[148, "index-0"]], "mime": [[149, "index-0"], [158, "index-0"], [282, "index-0"], [282, "index-1"], [323, "index-0"]], "rfc 1521": [[149, "index-12"], [323, "index-1"], [323, "index-3"]], "rfc 2045": [[149, "index-10"], [149, "index-4"], [149, "index-5"], [149, "index-9"], [201, "index-3"], [203, "index-4"], [203, "index-5"], [203, "index-6"], [203, "index-9"], [209, "index-4"], [210, "index-10"], [210, "index-9"], [212, "index-6"], [212, "index-7"], [212, "index-8"]], "rfc 4648": [[149, "index-11"], [149, "index-15"], [149, "index-16"], [149, "index-3"], [149, "index-6"], [149, "index-7"], [149, "index-8"], [333, "index-1"], [485, "index-12"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.b85encode"]], "base64": [[149, "index-0"], [149, "module-base64"], [152, "index-0"]], "base64 encoding": [[149, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.encodebytes"]], "encoding": [[149, "index-0"], [323, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[149, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[150, "bdb.Bdb"]], "bdbquit": [[150, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[150, "bdb.Breakpoint"]], "bdb": [[150, "module-bdb"], [303, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[150, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[150, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[150, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[150, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[150, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[150, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[150, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.line"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[150, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[150, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[150, "bdb.Bdb.user_return"]], "incomplete": [[152, "binascii.Incomplete"]], "rfc 1522": [[152, "index-2"], [323, "index-2"], [323, "index-4"]], "rfc 3548": [[152, "index-1"], [470, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.a2b_hex"]], "a2b_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.a2b_hqx"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.b2a_hex"]], "b2a_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.b2a_hqx"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.b2a_uu"]], "binascii": [[152, "module-binascii"]], "binhex": [[152, "index-0"], [153, "module-binhex"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.hexlify"]], "rlecode_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.rlecode_hqx"]], "rledecode_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.rledecode_hqx"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[152, "binascii.unhexlify"]], "uu": [[152, "index-0"], [401, "module-uu"]], "binhex() (\u65bc binhex \u6a21\u7d44\u4e2d)": [[153, "binhex.binhex"]], "hexbin() (\u65bc binhex \u6a21\u7d44\u4e2d)": [[153, "binhex.hexbin"]], "bisect": [[154, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[154, "bisect.insort_right"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[156, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[156, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[156, "bz2.BZ2File"]], "bz2": [[156, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[156, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[156, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[156, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[156, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[156, "bz2.BZ2Decompressor.eof"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[156, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[156, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[156, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[156, "bz2.BZ2File.peek"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[156, "bz2.BZ2Decompressor.unused_data"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[157, "calendar.Calendar"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[157, "calendar.HTMLCalendar"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[157, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[157, "calendar.LocaleTextCalendar"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.MONDAY"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.SATURDAY"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.SUNDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.THURSDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[157, "calendar.TextCalendar"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.WEDNESDAY"]], "calendar": [[157, "module-calendar"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[157, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.TextCalendar.formatmonth"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.leapdays"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[157, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.timegm"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[157, "calendar.weekheader"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[157, "calendar.Calendar.yeardayscalendar"]], "cgi": [[158, "index-0"], [158, "index-2"], [158, "index-5"], [158, "module-cgi"], [159, "index-0"]], "common gateway interface": [[158, "index-0"]], "http": [[158, "index-0"], [248, "index-0"], [248, "module-http"], [249, "index-0"], [252, "index-0"], [399, "index-11"], [399, "index-12"]], "pep 594#cgi": [[158, "index-8"]], "url": [[158, "index-0"], [252, "index-0"], [398, "index-0"], [400, "index-0"]], "www": [[158, "index-0"], [252, "index-0"], [262, "index-0"], [398, "index-0"], [400, "index-0"]], "debugging": [[158, "index-5"], [303, "index-0"], [440, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[158, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[158, "cgi.FieldStorage.getlist"]], "headers": [[158, "index-0"], [282, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.print_form"]], "protocol": [[158, "index-0"], [230, "index-0"], [248, "index-0"], [249, "index-0"], [252, "index-0"], [255, "index-0"], [294, "index-0"], [305, "index-5"], [311, "index-0"], [342, "index-0"], [351, "index-17"], [351, "index-53"], [364, "index-0"], [399, "index-11"], [399, "index-12"]], "security": [[158, "index-2"], [252, "index-3"]], "server": [[158, "index-0"], [252, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[158, "cgi.test"]], "pep 594#cgitb": [[159, "index-4"]], "cgitb": [[159, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[159, "cgitb.enable"]], "excepthook() (in module sys)": [[159, "index-2"]], "exceptions": [[159, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[159, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[159, "cgitb.html"]], "in cgi scripts": [[159, "index-0"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[159, "cgitb.text"]], "tracebacks": [[159, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[160, "chunk.Chunk"]], "pep 594#chunk": [[160, "index-3"]], "rmff": [[160, "index-0"]], "real media file format": [[160, "index-0"]], "chunk": [[160, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[160, "chunk.Chunk.tell"]], "pep 485": [[161, "index-0"], [281, "index-0"], [480, "index-19"], [480, "index-20"], [485, "index-214"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.atanh"]], "cmath": [[161, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.log10"]], "math": [[161, "index-1"], [281, "module-math"], [351, "index-15"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[161, "cmath.tau"]], "! (exclamation)": [[162, "index-0"], [184, "index-0"], [227, "index-2"], [238, "index-1"], [352, "index-2"], [354, "index-1"], [439, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[162, "cmd.Cmd"]], "cmd": [[162, "module-cmd"], [303, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.cmdqueue"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.default"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.identchars"]], "in a command interpreter": [[162, "index-0"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[162, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[162, "cmd.Cmd.use_rawinput"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[163, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[163, "code.InteractiveInterpreter"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[163, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[163, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[163, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[163, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[163, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[163, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[163, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[163, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[163, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[163, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[163, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.BOM_UTF8"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.CodecInfo"]], "codecs": [[164, "index-0"], [164, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.IncrementalEncoder"]], "rfc 3490": [[164, "index-13"], [164, "index-14"], [164, "index-6"], [164, "index-8"]], "rfc 3490#section-3.1": [[164, "index-12"]], "rfc 3492": [[164, "index-7"], [164, "index-9"]], "rfc 5891": [[164, "index-10"]], "rfc 5895": [[164, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[164, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[164, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[164, "encodings.idna.ToUnicode"]], "unicode": [[164, "index-0"], [391, "index-0"], [432, "index-19"]], "\\ (backslash)": [[164, "index-1"], [299, "index-47"], [325, "index-11"], [325, "index-24"], [325, "index-8"], [439, "index-23"]], "\\n": [[164, "index-3"], [325, "index-35"], [325, "index-35"], [439, "index-23"], [439, "index-23"]], "\\u": [[164, "index-1"], [164, "index-1"], [325, "index-35"], [325, "index-35"], [439, "index-23"], [439, "index-23"]], "\\x": [[164, "index-1"], [325, "index-35"], [439, "index-23"]], "backslashreplace": [[164, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.backslashreplace_errors"]], "decode": [[164, "index-0"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[164, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.decode"]], "encode": [[164, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[164, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.encode"]], "encodings.idna": [[164, "module-encodings.idna"]], "encodings.mbcs": [[164, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[164, "module-encodings.utf_8_sig"]], "error handler's name": [[164, "index-1"], [164, "index-3"], [164, "index-4"]], "escape sequence": [[164, "index-1"], [164, "index-3"], [439, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.getwriter"]], "ignore": [[164, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[164, "encodings.idna.nameprep"]], "namereplace": [[164, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[164, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[164, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[164, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.register_error"]], "replace": [[164, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.replace_errors"]], "replacement character": [[164, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[164, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[164, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[164, "codecs.IncrementalEncoder.setstate"]], "stackable": [[164, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.streamreader"]], "streams": [[164, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[164, "codecs.CodecInfo.streamwriter"]], "strict": [[164, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.strict_errors"]], "surrogateescape": [[164, "index-1"]], "surrogatepass": [[164, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[164, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[164, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[164, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[164, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[165, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[165, "codeop.Compile"]], "codeop": [[165, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[165, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.OrderedDict"]], "pep 468": [[166, "index-10"], [481, "index-24"], [485, "index-177"]], "pep 584": [[166, "index-11"], [166, "index-8"], [166, "index-9"], [299, "index-5"], [299, "index-6"], [389, "index-4"], [406, "index-1"], [406, "index-4"], [484, "index-1"], [484, "index-11"], [485, "index-106"], [485, "index-107"], [485, "index-108"], [485, "index-109"], [485, "index-92"], [485, "index-93"], [485, "index-94"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[166, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[166, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[166, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[166, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[166, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[166, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.clear"]], "collections": [[166, "module-collections"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[166, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[166, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[166, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[166, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[166, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[166, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[166, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[166, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[166, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[166, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[166, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[166, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[166, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[166, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Awaitable"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.MutableSet"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[167, "collections.abc.ValuesView"]], "collections.abc": [[167, "module-collections.abc"]], "colorsys": [[168, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[168, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[169, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[169, "cmdoption-compileall-invalidation-mode"]], "-b": [[169, "cmdoption-compileall-b"], [392, "cmdoption-unittest-b"], [459, "cmdoption-B"], [459, "cmdoption-b"]], "-d": [[169, "cmdoption-compileall-d"], [241, "cmdoption-gzip-d"], [459, "cmdoption-d"]], "-e": [[169, "cmdoption-compileall-e"], [363, "cmdoption-tarfile-e"], [383, "cmdoption-tokenize-e"], [426, "cmdoption-zipfile-e"], [459, "cmdoption-E"]], "-f": [[169, "cmdoption-compileall-f"], [384, "cmdoption-trace-f"], [392, "cmdoption-unittest-f"]], "-j": [[169, "cmdoption-compileall-j"], [459, "cmdoption-J"]], "-l": [[169, "cmdoption-compileall-l"], [306, "cmdoption-pickletools-l"], [363, "cmdoption-tarfile-l"], [384, "cmdoption-trace-l"], [426, "cmdoption-zipfile-l"]], "-o": [[169, "cmdoption-compileall-o"], [306, "cmdoption-pickletools-o"], [425, "cmdoption-zipapp-o"], [459, "cmdoption-O"]], "-p": [[169, "cmdoption-compileall-p"], [306, "cmdoption-pickletools-p"], [372, "cmdoption-timeit-p"], [392, "cmdoption-unittest-discover-p"], [425, "cmdoption-zipapp-p"]], "-q": [[169, "cmdoption-compileall-q"], [317, "cmdoption-python-m-py_compile-q"], [459, "cmdoption-q"]], "-r": [[169, "cmdoption-compileall-r"], [372, "cmdoption-timeit-r"], [384, "cmdoption-trace-R"], [384, "cmdoption-trace-r"], [459, "cmdoption-R"]], "-s": [[169, "cmdoption-compileall-s"], [372, "cmdoption-timeit-s"], [384, "cmdoption-trace-s"], [392, "cmdoption-unittest-discover-s"], [459, "cmdoption-S"], [459, "cmdoption-s"]], "-x": [[169, "cmdoption-compileall-x"], [459, "cmdoption-X"], [459, "cmdoption-x"]], "source_date_epoch": [[169, "index-1"], [317, "index-3"], [317, "index-6"], [317, "index-7"], [482, "index-31"], [485, "index-137"], [485, "index-153"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[169, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[169, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[169, "compileall.compile_path"]], "compileall": [[169, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[169, "cmdoption-compileall-arg-directory"], [169, "cmdoption-compileall-arg-file"], [169, "cmdoption-compileall-b"], [169, "cmdoption-compileall-d"], [169, "cmdoption-compileall-e"], [169, "cmdoption-compileall-f"], [169, "cmdoption-compileall-hardlink-dupes"], [169, "cmdoption-compileall-i"], [169, "cmdoption-compileall-invalidation-mode"], [169, "cmdoption-compileall-j"], [169, "cmdoption-compileall-l"], [169, "cmdoption-compileall-o"], [169, "cmdoption-compileall-p"], [169, "cmdoption-compileall-q"], [169, "cmdoption-compileall-r"], [169, "cmdoption-compileall-s"], [169, "cmdoption-compileall-x"]], "directory": [[169, "cmdoption-compileall-arg-directory"], [299, "index-25"], [299, "index-27"], [299, "index-28"], [299, "index-30"], [299, "index-31"], [338, "index-1"], [340, "index-1"]], "brokenexecutor": [[172, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[172, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[172, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[172, "concurrent.futures.Executor"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[172, "concurrent.futures.Future"]], "pep 3148": [[172, "index-0"], [477, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[172, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[172, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[172, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[172, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[172, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[172, "concurrent.futures.wait"]], "$ (dollar)": [[173, "index-2"], [300, "index-9"], [325, "index-2"], [352, "index-11"]], "% (percent)": [[173, "index-1"], [189, "index-0"], [300, "index-9"], [351, "index-13"], [351, "index-34"], [351, "index-44"], [371, "index-11"], [371, "index-9"], [409, "index-0"], [434, "index-68"]], ".ini": [[173, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[173, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[173, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[173, "configparser.ConfigParser"]], "duplicateoptionerror": [[173, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[173, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[173, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[173, "configparser.InterpolationDepthError"]], "interpolationerror": [[173, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[173, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[173, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[173, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[173, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[173, "configparser.NoOptionError"]], "nosectionerror": [[173, "configparser.NoSectionError"]], "parsingerror": [[173, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[173, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[173, "configparser.ConfigParser.SECTCRE"]], "windows ini file": [[173, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[173, "configparser.RawConfigParser.add_section"]], "configparser": [[173, "module-configparser"]], "configuration": [[173, "index-0"], [303, "index-2"], [340, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.has_section"]], "ini file": [[173, "index-0"]], "interpolation in configuration files": [[173, "index-1"], [173, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.read_string"]], "readfp() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.readfp"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[173, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[173, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[174, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[174, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[174, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[174, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[174, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[174, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[174, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[174, "credits"]], "ellipsis literal": [[174, "index-0"], [351, "index-65"], [432, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[174, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[174, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[174, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[175, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.ExitStack.callback"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.closing"]], "contextlib": [[175, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[175, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[175, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[176, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[176, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[176, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[176, "contextvars.Token"]], "contextvars": [[176, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[176, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[176, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[176, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[176, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[176, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[176, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[176, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[176, "contextvars.Token.var"]], "__copy__() (copy protocol)": [[177, "index-1"]], "__deepcopy__() (copy protocol)": [[177, "index-1"]], "copy": [[177, "module-copy"], [178, "index-0"], [254, "index-4"], [305, "index-5"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[177, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[177, "copy.deepcopy"]], "pickle": [[177, "index-0"], [178, "index-0"], [280, "index-0"], [305, "module-pickle"], [336, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[178, "copyreg.constructor"]], "copyreg": [[178, "module-copyreg"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[178, "copyreg.pickle"]], "des": [[179, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[179, "index-1"]], "cipher": [[179, "index-0"]], "crypt": [[179, "module-crypt"], [316, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.crypt"]], "crypt(3)": [[179, "index-0"], [179, "index-2"], [179, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[179, "crypt.mksalt"]], "cryptography": [[180, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.DictWriter"]], "pep 305": [[181, "index-5"], [469, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.QUOTE_NONNUMERIC"]], "rfc 4180": [[181, "index-1"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[181, "csv.csvreader.__next__"]], "csv": [[181, "index-0"], [181, "module-csv"]], "csv.reader function": [[181, "index-3"]], "data": [[181, "index-0"], [354, "index-0"], [432, "index-0"], [432, "index-4"], [434, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[181, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[181, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.field_size_limit"]], "fieldnames (csv.csvreader \u7684\u5c6c\u6027)": [[181, "csv.csvreader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[181, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[181, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[181, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[181, "csv.Dialect.strict"]], "tabular": [[181, "index-0"]], "universal newlines": [[181, "index-3"], [232, "index-6"], [258, "index-16"], [264, "index-3"], [264, "index-4"], [351, "index-33"], [351, "index-43"], [355, "index-1"], [469, "index-8"], [470, "index-7"], [471, "index-20"], [472, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[181, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[181, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[181, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[181, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[181, "csv.csvwriter.writerows"]], "argumenterror": [[182, "ctypes.ArgumentError"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.BigEndianStructure"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.LittleEndianStructure"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[182, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.POINTER"], [182, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[182, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[182, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[182, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[182, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[182, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[182, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[182, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[182, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[182, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[182, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[182, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[182, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_ssize_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[182, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.create_unicode_buffer"]], "ctypes": [[182, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[182, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[182, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[182, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[182, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[182, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[182, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[182, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[182, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[182, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[182, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[182, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[182, "ctypes.wstring_at"]], "cols": [[183, "index-4"], [480, "index-32"]], "columns": [[183, "index-6"], [183, "index-8"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.ERR"]], "lines": [[183, "index-0"], [183, "index-3"], [183, "index-5"], [183, "index-7"], [480, "index-31"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.OK"]], "term": [[183, "index-1"], [183, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[183, "curses.textpad.Textbox"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.curs_set"]], "curses": [[183, "module-curses"]], "curses.textpad": [[183, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[183, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[183, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[183, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[183, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[183, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[183, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[183, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[183, "curses.wrapper"]], "^ (caret)": [[184, "index-0"], [200, "index-1"], [325, "index-1"], [325, "index-12"], [351, "index-16"], [352, "index-3"], [385, "index-1"], [434, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.ctrl"]], "curses.ascii": [[184, "module-curses.ascii"]], "in curses module": [[184, "index-0"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[184, "curses.ascii.unctrl"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[185, "curses.panel.bottom_panel"]], "curses.panel": [[185, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[185, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[185, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[185, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[185, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[187, "dataclasses.Field"]], "frozeninstanceerror": [[187, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.MISSING"]], "pep 557": [[187, "index-0"], [482, "index-29"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.dataclass"]], "dataclasses": [[187, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[187, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[189, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[189, "datetime.MINYEAR"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.date"]], "datetime": [[189, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.datetime"]], "datetime format": [[189, "index-0"], [371, "index-11"], [371, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[189, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[189, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[189, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[189, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[189, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[189, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[189, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[189, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[189, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[189, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[189, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[189, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[189, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[189, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[189, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[189, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[189, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[189, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[189, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[189, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[190, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[190, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[190, "dbm.ndbm.ndbm.close"]], "databases": [[190, "index-0"]], "dbm": [[190, "module-dbm"]], "dbm.dumb": [[190, "module-dbm.dumb"]], "dbm.gnu": [[190, "module-dbm.gnu"], [336, "index-1"], [432, "index-31"]], "dbm.ndbm": [[190, "module-dbm.ndbm"], [336, "index-1"], [432, "index-31"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[190, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[190, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[190, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[190, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[190, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[190, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[190, "dbm.ndbm.open"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[190, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[190, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[190, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[190, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[192, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.create_decimal_from_float"]], "decimal": [[192, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[192, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[192, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[192, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[192, "decimal.Context.to_sci_string"]], "pythondevmode": [[194, "index-0"], [459, "envvar-PYTHONDEVMODE"], [482, "index-26"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[195, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[195, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[195, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[195, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[195, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[195, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[195, "module-tkinter.commondialog"]], "tkinter.filedialog": [[195, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[195, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[196, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[196, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[196, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[196, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[196, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.diff_bytes"]], "difflib": [[196, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[196, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[196, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[196, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[196, "difflib.unified_diff"]], "before_async_with (opcode)": [[197, "opcode-BEFORE_ASYNC_WITH"]], "binary_add (opcode)": [[197, "opcode-BINARY_ADD"]], "binary_and (opcode)": [[197, "opcode-BINARY_AND"]], "binary_floor_divide (opcode)": [[197, "opcode-BINARY_FLOOR_DIVIDE"]], "binary_lshift (opcode)": [[197, "opcode-BINARY_LSHIFT"]], "binary_matrix_multiply (opcode)": [[197, "opcode-BINARY_MATRIX_MULTIPLY"]], "binary_modulo (opcode)": [[197, "opcode-BINARY_MODULO"]], "binary_multiply (opcode)": [[197, "opcode-BINARY_MULTIPLY"]], "binary_or (opcode)": [[197, "opcode-BINARY_OR"]], "binary_power (opcode)": [[197, "opcode-BINARY_POWER"]], "binary_rshift (opcode)": [[197, "opcode-BINARY_RSHIFT"]], "binary_subscr (opcode)": [[197, "opcode-BINARY_SUBSCR"]], "binary_subtract (opcode)": [[197, "opcode-BINARY_SUBTRACT"]], "binary_true_divide (opcode)": [[197, "opcode-BINARY_TRUE_DIVIDE"]], "binary_xor (opcode)": [[197, "opcode-BINARY_XOR"]], "build_const_key_map (opcode)": [[197, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[197, "opcode-BUILD_LIST"]], "build_map (opcode)": [[197, "opcode-BUILD_MAP"]], "build_set (opcode)": [[197, "opcode-BUILD_SET"]], "build_slice (opcode)": [[197, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[197, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[197, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[197, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Bytecode.first_line"]], "call_function (opcode)": [[197, "opcode-CALL_FUNCTION"]], "call_function_ex (opcode)": [[197, "opcode-CALL_FUNCTION_EX"]], "call_function_kw (opcode)": [[197, "opcode-CALL_FUNCTION_KW"]], "call_method (opcode)": [[197, "opcode-CALL_METHOD"]], "compare_op (opcode)": [[197, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[197, "opcode-CONTAINS_OP"]], "copy_dict_without_keys (opcode)": [[197, "opcode-COPY_DICT_WITHOUT_KEYS"]], "delete_attr (opcode)": [[197, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[197, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[197, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[197, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[197, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[197, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[197, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[197, "opcode-DICT_UPDATE"]], "dup_top (opcode)": [[197, "opcode-DUP_TOP"]], "dup_top_two (opcode)": [[197, "opcode-DUP_TOP_TWO"]], "end_async_for (opcode)": [[197, "opcode-END_ASYNC_FOR"]], "extended_arg (opcode)": [[197, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[197, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[197, "opcode-FOR_ITER"]], "gen_start (opcode)": [[197, "opcode-GEN_START"]], "get_aiter (opcode)": [[197, "opcode-GET_AITER"]], "get_anext (opcode)": [[197, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[197, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[197, "opcode-GET_ITER"]], "get_len (opcode)": [[197, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[197, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[197, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[197, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[197, "opcode-IMPORT_NAME"]], "import_star (opcode)": [[197, "opcode-IMPORT_STAR"]], "inplace_add (opcode)": [[197, "opcode-INPLACE_ADD"]], "inplace_and (opcode)": [[197, "opcode-INPLACE_AND"]], "inplace_floor_divide (opcode)": [[197, "opcode-INPLACE_FLOOR_DIVIDE"]], "inplace_lshift (opcode)": [[197, "opcode-INPLACE_LSHIFT"]], "inplace_matrix_multiply (opcode)": [[197, "opcode-INPLACE_MATRIX_MULTIPLY"]], "inplace_modulo (opcode)": [[197, "opcode-INPLACE_MODULO"]], "inplace_multiply (opcode)": [[197, "opcode-INPLACE_MULTIPLY"]], "inplace_or (opcode)": [[197, "opcode-INPLACE_OR"]], "inplace_power (opcode)": [[197, "opcode-INPLACE_POWER"]], "inplace_rshift (opcode)": [[197, "opcode-INPLACE_RSHIFT"]], "inplace_subtract (opcode)": [[197, "opcode-INPLACE_SUBTRACT"]], "inplace_true_divide (opcode)": [[197, "opcode-INPLACE_TRUE_DIVIDE"]], "inplace_xor (opcode)": [[197, "opcode-INPLACE_XOR"]], "is_op (opcode)": [[197, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[197, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.opname"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.Instruction.starts_line"]], "jump_absolute (opcode)": [[197, "opcode-JUMP_ABSOLUTE"]], "jump_forward (opcode)": [[197, "opcode-JUMP_FORWARD"]], "jump_if_false_or_pop (opcode)": [[197, "opcode-JUMP_IF_FALSE_OR_POP"]], "jump_if_not_exc_match (opcode)": [[197, "opcode-JUMP_IF_NOT_EXC_MATCH"]], "jump_if_true_or_pop (opcode)": [[197, "opcode-JUMP_IF_TRUE_OR_POP"]], "list_append (opcode)": [[197, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[197, "opcode-LIST_EXTEND"]], "list_to_tuple (opcode)": [[197, "opcode-LIST_TO_TUPLE"]], "load_assertion_error (opcode)": [[197, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[197, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[197, "opcode-LOAD_BUILD_CLASS"]], "load_classderef (opcode)": [[197, "opcode-LOAD_CLASSDEREF"]], "load_closure (opcode)": [[197, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[197, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[197, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[197, "opcode-LOAD_FAST"]], "load_global (opcode)": [[197, "opcode-LOAD_GLOBAL"]], "load_method (opcode)": [[197, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[197, "opcode-LOAD_NAME"]], "make_function (opcode)": [[197, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[197, "opcode-MAP_ADD"]], "match_class (opcode)": [[197, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[197, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[197, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[197, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[197, "opcode-NOP"]], "pep 626": [[197, "index-0"], [476, "index-4"]], "pop_block (opcode)": [[197, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[197, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[197, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_true (opcode)": [[197, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[197, "opcode-POP_TOP"]], "print_expr (opcode)": [[197, "opcode-PRINT_EXPR"]], "raise_varargs (opcode)": [[197, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[197, "opcode-RERAISE"]], "return_value (opcode)": [[197, "opcode-RETURN_VALUE"]], "rot_four (opcode)": [[197, "opcode-ROT_FOUR"]], "rot_n (opcode)": [[197, "opcode-ROT_N"]], "rot_three (opcode)": [[197, "opcode-ROT_THREE"]], "rot_two (opcode)": [[197, "opcode-ROT_TWO"]], "setup_annotations (opcode)": [[197, "opcode-SETUP_ANNOTATIONS"]], "setup_async_with (opcode)": [[197, "opcode-SETUP_ASYNC_WITH"]], "setup_finally (opcode)": [[197, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[197, "opcode-SETUP_WITH"]], "set_add (opcode)": [[197, "opcode-SET_ADD"]], "set_update (opcode)": [[197, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[197, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[197, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[197, "opcode-STORE_FAST"]], "store_global (opcode)": [[197, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[197, "opcode-STORE_NAME"]], "store_subscr (opcode)": [[197, "opcode-STORE_SUBSCR"]], "unary_invert (opcode)": [[197, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[197, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[197, "opcode-UNARY_NOT"]], "unary_positive (opcode)": [[197, "opcode-UNARY_POSITIVE"]], "unpack_ex (opcode)": [[197, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[197, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[197, "opcode-WITH_EXCEPT_START"]], "yield_from (opcode)": [[197, "opcode-YIELD_FROM"]], "yield_value (opcode)": [[197, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.code_info"]], "dis": [[197, "module-dis"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[197, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[197, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.get_instructions"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hasconst"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[197, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.show_code"]], "slice": [[197, "index-1"], [351, "index-19"], [351, "index-23"], [432, "index-65"], [432, "index-95"], [434, "index-44"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[197, "dis.stack_effect"]], "distutils": [[199, "module-distutils"]], "# (hash)": [[200, "index-4"], [325, "index-36"], [340, "index-2"], [351, "index-36"], [351, "index-46"], [352, "index-5"], [439, "index-4"], [439, "index-5"], [453, "index-0"]], "- (minus)": [[200, "index-4"], [227, "index-2"], [238, "index-1"], [325, "index-10"], [351, "index-13"], [351, "index-36"], [351, "index-46"], [352, "index-4"], [434, "index-60"], [434, "index-70"]], "<blankline>": [[200, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.DocTest"]], "doctestfailure": [[200, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[200, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.SKIP"]], "unexpectedexception": [[200, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[200, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.docstring"]], "doctest": [[200, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[200, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[200, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[200, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.exc_msg"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[200, "doctest.DocTestFailure.got"]], "in doctests": [[200, "index-3"], [200, "index-4"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.indent"]], "interpreter prompt": [[200, "index-0"], [359, "index-26"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.lineno"]], "marker": [[200, "index-1"], [385, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[200, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[200, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[200, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[200, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[200, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[200, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[200, "doctest.Example.want"]], "rfc 2046": [[201, "index-4"], [204, "index-0"], [209, "index-5"]], "rfc 2047": [[201, "index-5"], [209, "index-11"], [209, "index-13"], [209, "index-6"], [209, "index-8"], [210, "index-1"], [210, "index-4"], [210, "index-6"], [215, "index-3"], [215, "index-4"], [216, "index-1"], [477, "index-11"], [477, "index-8"]], "rfc 2183": [[201, "index-6"], [203, "index-11"], [212, "index-10"]], "rfc 2231": [[201, "index-7"], [203, "index-10"], [203, "index-2"], [203, "index-3"], [203, "index-7"], [203, "index-8"], [209, "index-7"], [212, "index-4"], [212, "index-5"], [212, "index-9"], [216, "index-5"], [216, "index-6"], [216, "index-7"], [216, "index-8"], [216, "index-9"]], "rfc 2821": [[201, "index-0"]], "rfc 5322": [[201, "index-1"], [203, "index-0"], [206, "index-0"], [208, "index-0"], [208, "index-1"], [210, "index-0"], [210, "index-11"], [210, "index-12"], [210, "index-14"], [210, "index-2"], [210, "index-3"], [210, "index-5"], [210, "index-7"], [210, "index-8"], [212, "index-0"], [212, "index-2"], [214, "index-0"], [215, "index-0"], [215, "index-1"], [215, "index-2"], [215, "index-5"], [215, "index-6"], [215, "index-9"], [342, "index-11"]], "rfc 6532": [[201, "index-2"], [212, "index-1"], [214, "index-1"], [215, "index-7"], [480, "index-33"]], "email": [[201, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[202, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[202, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[202, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[202, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.body_encoding"]], "email.charset": [[202, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[202, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[202, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[203, "email.message.Message"]], "rfc 2822": [[203, "index-1"], [209, "index-0"], [209, "index-10"], [209, "index-12"], [209, "index-2"], [209, "index-3"], [209, "index-9"], [216, "index-0"], [216, "index-10"], [216, "index-2"], [216, "index-3"], [216, "index-4"], [249, "index-2"], [252, "index-2"], [277, "index-0"], [371, "index-10"], [371, "index-22"], [455, "index-3"], [468, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[203, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[203, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[203, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[203, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[204, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[204, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[204, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[204, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[204, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[204, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[204, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[204, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[204, "email.contentmanager.set_content"]], "email.encoders": [[205, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[205, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[205, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[205, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[205, "email.encoders.encode_quopri"]], "boundaryerror": [[206, "email.errors.BoundaryError"]], "headerparseerror": [[206, "email.errors.HeaderParseError"]], "messageerror": [[206, "email.errors.MessageError"]], "messageparseerror": [[206, "email.errors.MessageParseError"]], "multipartconversionerror": [[206, "email.errors.MultipartConversionError"]], "email.errors": [[206, "module-email.errors"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[208, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[208, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[208, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[208, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[208, "email.generator.Generator.clone"]], "email.generator": [[208, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[208, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[208, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[208, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[208, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[209, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[209, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[209, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[209, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[209, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[209, "email.header.decode_header"]], "email.header": [[209, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[209, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[209, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[210, "index-13"], [341, "index-1"], [341, "index-6"], [341, "index-7"], [478, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[210, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Address.domain"]], "email.headerregistry": [[210, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[210, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[210, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[210, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[211, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[211, "email.iterators.body_line_iterator"]], "email.iterators": [[211, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[211, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[212, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[212, "email.message.MIMEPart"]], "rfc 6531": [[212, "index-3"], [215, "index-8"], [341, "index-3"], [341, "index-4"], [341, "index-8"], [342, "index-3"], [480, "index-34"], [480, "index-40"], [480, "index-41"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[212, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.del_param"]], "email.message": [[212, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[212, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[212, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[212, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[213, "email.mime.text.MIMEText"]], "email.mime": [[213, "module-email.mime"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[214, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[214, "email.parser.BytesFeedParser.close"]], "email.parser": [[214, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[214, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[214, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[214, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[214, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[214, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[214, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[214, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[214, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[214, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[215, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[215, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[215, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[215, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.default"]], "email.policy": [[215, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[215, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[215, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[215, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[215, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[215, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[215, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[215, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[215, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[215, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[215, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[215, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[215, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[215, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.decode_rfc2231"]], "email.utils": [[216, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[216, "email.utils.unquote"]], "pep 453": [[217, "index-0"], [473, "index-22"], [473, "index-23"], [473, "index-24"], [479, "index-1"], [479, "index-19"], [479, "index-20"], [479, "index-27"], [479, "index-42"], [479, "index-5"], [479, "index-53"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[217, "ensurepip.bootstrap"]], "ensurepip": [[217, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[217, "ensurepip.version"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[218, "enum.Enum"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[218, "enum.Flag"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[218, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[218, "enum.IntFlag"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[218, "enum.auto"]], "enum": [[218, "module-enum"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[218, "enum.unique"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EBUSY"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTBLK"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTNAM"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTSOCK"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EOVERFLOW"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EPROTOTYPE"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.EXFULL"]], "errno": [[219, "module-errno"], [220, "index-4"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[219, "errno.errorcode"]], "arithmeticerror": [[220, "ArithmeticError"]], "assertionerror": [[220, "AssertionError"], [440, "index-19"]], "attributeerror": [[220, "AttributeError"], [434, "index-40"]], "baseexception": [[220, "BaseException"]], "blockingioerror": [[220, "BlockingIOError"], [264, "io.BlockingIOError"]], "brokenpipeerror": [[220, "BrokenPipeError"]], "buffererror": [[220, "BufferError"]], "byteswarning": [[220, "BytesWarning"]], "childprocesserror": [[220, "ChildProcessError"]], "connectionabortederror": [[220, "ConnectionAbortedError"]], "connectionerror": [[220, "ConnectionError"]], "connectionrefusederror": [[220, "ConnectionRefusedError"]], "connectionreseterror": [[220, "ConnectionResetError"]], "deprecationwarning": [[220, "DeprecationWarning"]], "eoferror": [[220, "EOFError"]], "encodingwarning": [[220, "EncodingWarning"]], "environmenterror": [[220, "EnvironmentError"]], "exception": [[220, "Exception"], [432, "index-62"], [433, "index-12"], [440, "index-27"], [440, "index-29"]], "fileexistserror": [[220, "FileExistsError"]], "filenotfounderror": [[220, "FileNotFoundError"]], "floatingpointerror": [[220, "FloatingPointError"]], "futurewarning": [[220, "FutureWarning"]], "generatorexit": [[220, "GeneratorExit"], [434, "index-33"], [434, "index-37"]], "ioerror": [[220, "IOError"]], "importerror": [[220, "ImportError"], [440, "index-34"]], "importwarning": [[220, "ImportWarning"]], "indentationerror": [[220, "IndentationError"]], "indexerror": [[220, "IndexError"]], "interruptederror": [[220, "InterruptedError"]], "isadirectoryerror": [[220, "IsADirectoryError"]], "keyerror": [[220, "KeyError"]], "keyboardinterrupt": [[220, "KeyboardInterrupt"]], "lookuperror": [[220, "LookupError"]], "memoryerror": [[220, "MemoryError"]], "modulenotfounderror": [[220, "ModuleNotFoundError"]], "nameerror": [[220, "NameError"], [434, "index-4"]], "notadirectoryerror": [[220, "NotADirectoryError"]], "notimplementederror": [[220, "NotImplementedError"]], "oserror": [[220, "OSError"]], "overflowerror": [[220, "OverflowError"]], "pep 3134": [[220, "index-2"], [474, "index-12"], [474, "index-28"], [474, "index-29"]], "pep 475": [[220, "index-7"], [232, "index-17"], [299, "index-21"], [299, "index-23"], [299, "index-24"], [299, "index-43"], [334, "index-3"], [334, "index-4"], [334, "index-5"], [334, "index-6"], [334, "index-7"], [335, "index-0"], [339, "index-0"], [339, "index-1"], [344, "index-10"], [344, "index-11"], [344, "index-12"], [344, "index-13"], [344, "index-4"], [344, "index-5"], [344, "index-7"], [344, "index-8"], [344, "index-9"], [371, "index-8"], [480, "index-15"], [480, "index-16"], [480, "index-51"], [485, "index-160"], [485, "index-217"]], "pep 565": [[220, "index-9"], [482, "index-19"]], "pendingdeprecationwarning": [[220, "PendingDeprecationWarning"]], "permissionerror": [[220, "PermissionError"]], "processlookuperror": [[220, "ProcessLookupError"]], "recursionerror": [[220, "RecursionError"]], "referenceerror": [[220, "ReferenceError"]], "resourcewarning": [[220, "ResourceWarning"]], "runtimeerror": [[220, "RuntimeError"]], "runtimewarning": [[220, "RuntimeWarning"]], "stopasynciteration": [[220, "StopAsyncIteration"], [434, "index-36"]], "stopiteration": [[220, "StopIteration"], [434, "index-32"], [440, "index-26"]], "syntaxerror": [[220, "SyntaxError"]], "syntaxwarning": [[220, "SyntaxWarning"]], "systemerror": [[220, "SystemError"]], "systemexit": [[220, "SystemExit"]], "taberror": [[220, "TabError"]], "typeerror": [[220, "TypeError"], [434, "index-63"]], "unboundlocalerror": [[220, "UnboundLocalError"], [433, "index-9"]], "unicodedecodeerror": [[220, "UnicodeDecodeError"]], "unicodeencodeerror": [[220, "UnicodeEncodeError"]], "unicodeerror": [[220, "UnicodeError"]], "unicodetranslateerror": [[220, "UnicodeTranslateError"]], "unicodewarning": [[220, "UnicodeWarning"]], "userwarning": [[220, "UserWarning"]], "valueerror": [[220, "ValueError"], [434, "index-72"]], "warning": [[220, "Warning"], [347, "sqlite3.Warning"]], "windowserror": [[220, "WindowsError"]], "zerodivisionerror": [[220, "ZeroDivisionError"], [434, "index-67"]], "args (baseexception \u7684\u5c6c\u6027)": [[220, "BaseException.args"]], "assert": [[220, "index-3"], [440, "index-18"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[220, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[220, "SystemExit.code"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[220, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[220, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[220, "OSError.errno"]], "except": [[220, "index-0"], [431, "index-9"]], "filename (oserror \u7684\u5c6c\u6027)": [[220, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[220, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.lineno"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[220, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.offset"]], "raise": [[220, "index-1"], [440, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[220, "UnicodeError.reason"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[220, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[220, "OSError.strerror"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[220, "SyntaxError.text"]], "try": [[220, "index-0"], [431, "index-9"], [432, "index-63"]], "winerror (oserror \u7684\u5c6c\u6027)": [[220, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[220, "BaseException.with_traceback"]], "\u9673\u8ff0\u5f0f": [[220, "index-0"], [220, "index-1"], [220, "index-3"], [232, "index-12"], [257, "index-0"], [340, "index-2"], [351, "index-1"], [351, "index-23"], [351, "index-51"], [431, "index-12"], [431, "index-14"], [431, "index-15"], [431, "index-17"], [431, "index-27"], [431, "index-3"], [431, "index-39"], [431, "index-4"], [431, "index-45"], [431, "index-47"], [431, "index-48"], [431, "index-5"], [431, "index-6"], [431, "index-7"], [431, "index-9"], [432, "index-102"], [432, "index-42"], [432, "index-63"], [432, "index-70"], [440, "index-18"], [440, "index-20"], [440, "index-21"], [440, "index-22"], [440, "index-24"], [440, "index-26"], [440, "index-27"], [440, "index-30"], [440, "index-30"], [440, "index-33"], [440, "index-33"], [440, "index-34"], [440, "index-43"], [440, "index-45"], [445, "index-0"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.enable"]], "faulthandler": [[221, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[221, "faulthandler.unregister"]], "i/o control": [[222, "index-0"], [232, "index-7"], [344, "index-6"], [366, "index-0"]], "unix": [[222, "index-0"], [441, "index-4"]], "fcntl": [[222, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[222, "fcntl.fcntl"]], "file control": [[222, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[222, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[222, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[222, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[223, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[223, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[223, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[223, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[223, "filecmp.dircmp"]], "filecmp": [[223, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[223, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[223, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[223, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[223, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[225, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.close"]], "fileinput": [[225, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[225, "fileinput.nextfile"]], "[] (square brackets)": [[227, "index-2"], [238, "index-1"], [325, "index-9"], [352, "index-2"], [434, "index-15"], [434, "index-41"], [440, "index-6"]], "filenames": [[227, "index-0"], [238, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[227, "fnmatch.filter"]], "fnmatch": [[227, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[227, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[227, "fnmatch.fnmatchcase"]], "glob": [[227, "index-3"], [238, "module-glob"]], "in glob-style wildcards": [[227, "index-2"], [238, "index-1"], [238, "index-2"]], "re": [[227, "index-1"], [325, "module-re"], [351, "index-32"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[227, "fnmatch.translate"]], "wildcard expansion": [[227, "index-0"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[228, "fractions.Fraction"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[228, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[228, "fractions.Fraction.__floor__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[228, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[228, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[228, "fractions.Fraction.denominator"]], "fractions": [[228, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[228, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[228, "fractions.Fraction.from_float"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[228, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[228, "fractions.Fraction.numerator"]], "ftp": [[230, "index-0"], [399, "index-11"], [399, "index-13"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[230, "ftplib.FTP"]], "ftp_tls (ftplib \u4e2d\u7684\u985e\u5225)": [[230, "ftplib.FTP_TLS"]], "rfc 2640": [[230, "index-2"], [230, "index-3"], [230, "index-5"], [484, "index-22"], [485, "index-95"]], "rfc 3659": [[230, "index-6"]], "rfc 4217": [[230, "index-4"]], "rfc 959": [[230, "index-1"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[230, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.dir"]], "error_perm": [[230, "ftplib.error_perm"]], "error_proto": [[230, "ftplib.error_proto"], [311, "poplib.error_proto"]], "error_reply": [[230, "ftplib.error_reply"]], "error_temp": [[230, "ftplib.error_temp"]], "ftplib": [[230, "module-ftplib"]], "ftplib (standard module)": [[230, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[230, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[230, "ftplib.FTP.voidcmd"]], "boolean": [[232, "index-0"], [351, "index-1"], [351, "index-11"], [351, "index-5"], [351, "index-66"], [432, "index-11"], [434, "index-82"]], "infinity": [[232, "index-2"]], "nan": [[232, "index-2"]], "pythoncaseok": [[232, "index-15"], [459, "envvar-PYTHONCASEOK"], [467, "index-11"], [484, "index-21"], [485, "index-110"]], "__format__": [[232, "index-3"]], "__import__()": [[232, "import__"]], "abs()": [[232, "abs"]], "aiter()": [[232, "aiter"]], "all()": [[232, "all"]], "anext()": [[232, "anext"]], "any()": [[232, "any"]], "ascii()": [[232, "ascii"]], "bin()": [[232, "bin"]], "binary mode": [[232, "index-7"]], "bool (\u5167\u5efa\u985e\u5225)": [[232, "bool"]], "breakpoint()": [[232, "breakpoint"]], "buffer size, i/o": [[232, "index-7"]], "buffering": [[232, "index-7"], [344, "index-6"]], "callable()": [[232, "callable"]], "chr()": [[232, "chr"]], "classmethod()": [[232, "classmethod"]], "compile()": [[232, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[232, "complex"]], "delattr()": [[232, "delattr"]], "dir()": [[232, "dir"]], "divmod()": [[232, "divmod"]], "enumerate()": [[232, "enumerate"]], "eval()": [[232, "eval"]], "exec": [[232, "index-1"], [351, "index-63"], [440, "index-44"]], "exec()": [[232, "exec"]], "file object": [[232, "index-4"], [264, "index-0"]], "filter()": [[232, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[232, "float"]], "format()": [[232, "format"]], "format() (built-in function)": [[232, "index-3"], [432, "index-72"]], "getattr()": [[232, "getattr"]], "globals()": [[232, "globals"]], "hasattr()": [[232, "hasattr"]], "hash()": [[232, "hash"]], "help()": [[232, "help"]], "hex()": [[232, "hex"]], "id()": [[232, "id"]], "imp": [[232, "index-12"], [257, "module-imp"]], "import": [[232, "index-12"], [257, "index-0"], [340, "index-2"], [432, "index-42"], [436, "index-9"], [440, "index-34"], [440, "index-39"]], "input()": [[232, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[232, "int"]], "isinstance()": [[232, "isinstance"]], "issubclass()": [[232, "issubclass"]], "iter()": [[232, "iter"]], "len()": [[232, "len"]], "line-buffered i/o": [[232, "index-7"]], "locals()": [[232, "locals"]], "map()": [[232, "map"]], "max()": [[232, "max"]], "min()": [[232, "min"]], "modes": [[232, "index-5"]], "next()": [[232, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[232, "object"]], "oct()": [[232, "oct"]], "open()": [[232, "open"]], "open() built-in function": [[232, "index-4"], [232, "index-6"]], "ord()": [[232, "ord"]], "pow()": [[232, "pow"]], "print()": [[232, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[232, "property"]], "repr()": [[232, "repr"]], "reversed()": [[232, "reversed"]], "round()": [[232, "round"]], "setattr()": [[232, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[232, "slice"]], "sorted()": [[232, "sorted"]], "staticmethod()": [[232, "staticmethod"]], "str() (built-in function)": [[232, "index-10"]], "sum()": [[232, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[232, "super"]], "text mode": [[232, "index-7"]], "type (\u5167\u5efa\u985e\u5225)": [[232, "type"]], "unbuffered i/o": [[232, "index-7"]], "vars()": [[232, "vars"]], "zip()": [[232, "zip"]], "pep 412": [[233, "index-0"], [478, "index-16"]], "args (functools.partial \u7684\u5c6c\u6027)": [[233, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[233, "functools.partial.func"]], "functools": [[233, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[233, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[233, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[233, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[233, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.garbage"]], "gc": [[234, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[234, "gc.unfreeze"]], "getopterror": [[235, "getopt.GetoptError"]], "posixly_correct": [[235, "index-0"]], "getopt": [[235, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[235, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[235, "getopt.gnu_getopt"]], "getpasswarning": [[236, "getpass.GetPassWarning"]], "lname": [[236, "index-10"]], "logname": [[236, "index-8"], [299, "index-9"]], "user": [[236, "index-9"], [299, "index-15"], [299, "index-18"], [299, "index-7"]], "username": [[236, "index-11"], [299, "index-10"], [300, "index-7"]], "getpass": [[236, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[236, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[236, "getpass.getuser"]], "gnome": [[237, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[237, "gettext.GNUTranslations"]], "lang": [[237, "index-3"], [237, "index-8"], [272, "index-1"], [272, "index-2"], [272, "index-3"]], "language": [[237, "index-0"], [237, "index-5"], [351, "index-11"], [351, "index-15"], [432, "index-13"], [432, "index-4"], [432, "index-40"], [434, "index-77"]], "lc_all": [[237, "index-1"], [237, "index-6"]], "lc_messages": [[237, "index-2"], [237, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[237, "gettext.NullTranslations"]], "_ (underscore)": [[237, "index-4"], [352, "index-8"], [439, "index-28"], [439, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.add_fallback"]], "bind_textdomain_codeset() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.bind_textdomain_codeset"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.find"]], "gettext": [[237, "index-4"], [237, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.install"]], "ldgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.ldgettext"]], "ldngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.ldngettext"]], "lgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.lgettext"]], "lgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.lgettext"]], "lgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.lgettext"]], "lngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.lngettext"]], "lngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.lngettext"]], "lngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.lngettext"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.npgettext"]], "output_charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.output_charset"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[237, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.pgettext"]], "set_output_charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[237, "gettext.NullTranslations.set_output_charset"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[237, "gettext.translation"]], "**": [[238, "index-2"], [351, "index-13"], [431, "index-31"], [434, "index-18"], [434, "index-50"], [434, "index-58"], [445, "index-4"]], ". (dot)": [[238, "index-1"], [299, "index-44"], [299, "index-49"], [325, "index-0"], [351, "index-35"], [351, "index-45"], [352, "index-2"], [434, "index-39"], [439, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[238, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[238, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[238, "glob.iglob"]], "pathname expansion": [[238, "index-0"]], "cycleerror": [[239, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[239, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[239, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[239, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[240, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[240, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[240, "grp.getgrnam"]], "grp": [[240, "module-grp"]], "--best": [[241, "cmdoption-gzip-best"]], "--decompress": [[241, "cmdoption-gzip-d"]], "--fast": [[241, "cmdoption-gzip-fast"]], "badgzipfile": [[241, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[241, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[241, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[241, "gzip.decompress"]], "gzip": [[241, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[241, "cmdoption-gzip-arg-file"], [241, "cmdoption-gzip-best"], [241, "cmdoption-gzip-d"], [241, "cmdoption-gzip-fast"], [241, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[241, "gzip.GzipFile.mtime"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[241, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[241, "gzip.GzipFile.peek"]], "(use in module hashlib)": [[242, "index-2"]], "openssl": [[242, "index-2"], [348, "index-0"]], "rfc 1321": [[242, "index-1"]], "rfc 7693": [[242, "index-5"]], "rfc 7914": [[242, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2b"]], "blake2b, blake2s": [[242, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[242, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[242, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[242, "hashlib.shake.digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.hash.digest_size"]], "hashlib": [[242, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[242, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[242, "hashlib.shake.hexdigest"]], "message digest, md5": [[242, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[242, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[242, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha224, sha256, sha384, sha512": [[242, "index-0"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[242, "hashlib.hash.update"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.heappushpop"]], "heapq": [[243, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[243, "heapq.nsmallest"]], "rfc 2014": [[244, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[244, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[244, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[244, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[244, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[244, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[244, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[244, "hmac.HMAC.hexdigest"]], "hmac": [[244, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[244, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[244, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[244, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[245, "html.escape"]], "html": [[245, "module-html"], [247, "index-0"], [399, "index-12"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[245, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[246, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[246, "html.entities.entitydefs"]], "html.entities": [[246, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[246, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[246, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[247, "html.parser.HTMLParser"]], "xhtml": [[247, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[247, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[247, "html.parser.HTMLParser.unknown_decl"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[248, "http.HTTPStatus"]], "rfc 2295": [[248, "index-182"]], "rfc 2324": [[248, "index-165"]], "rfc 2518": [[248, "index-127"]], "rfc 2774": [[248, "index-185"]], "rfc 3229": [[248, "index-138"]], "rfc 4918": [[248, "index-136"], [248, "index-167"], [248, "index-168"], [248, "index-169"], [248, "index-183"]], "rfc 5842": [[248, "index-137"], [248, "index-184"]], "rfc 6585": [[248, "index-172"], [248, "index-173"], [248, "index-174"], [248, "index-186"]], "rfc 7231": [[248, "index-125"], [248, "index-126"], [248, "index-129"], [248, "index-130"], [248, "index-131"], [248, "index-132"], [248, "index-133"], [248, "index-134"], [248, "index-139"], [248, "index-140"], [248, "index-141"], [248, "index-142"], [248, "index-144"], [248, "index-145"], [248, "index-147"], [248, "index-149"], [248, "index-150"], [248, "index-151"], [248, "index-152"], [248, "index-153"], [248, "index-155"], [248, "index-156"], [248, "index-157"], [248, "index-158"], [248, "index-160"], [248, "index-161"], [248, "index-162"], [248, "index-164"], [248, "index-171"], [248, "index-176"], [248, "index-177"], [248, "index-178"], [248, "index-179"], [248, "index-180"], [248, "index-181"]], "rfc 7232": [[248, "index-143"], [248, "index-159"]], "rfc 7233": [[248, "index-135"], [248, "index-163"]], "rfc 7235": [[248, "index-148"], [248, "index-154"]], "rfc 7238": [[248, "index-146"]], "rfc 7540": [[248, "index-166"]], "rfc 7725": [[248, "index-175"]], "rfc 8297": [[248, "index-128"]], "rfc 8470": [[248, "index-170"]], "http (standard module)": [[248, "index-0"]], "badstatusline": [[249, "http.client.BadStatusLine"]], "cannotsendheader": [[249, "http.client.CannotSendHeader"]], "cannotsendrequest": [[249, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[249, "http.client.HTTPConnection"]], "httpexception": [[249, "http.client.HTTPException"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[249, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[249, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[249, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[249, "http.client.HTTP_PORT"]], "improperconnectionstate": [[249, "http.client.ImproperConnectionState"]], "incompleteread": [[249, "http.client.IncompleteRead"]], "invalidurl": [[249, "http.client.InvalidURL"]], "linetoolong": [[249, "http.client.LineTooLong"]], "notconnected": [[249, "http.client.NotConnected"]], "rfc 7230": [[249, "index-4"], [399, "index-19"]], "remotedisconnected": [[249, "http.client.RemoteDisconnected"]], "responsenotready": [[249, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[249, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[249, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[249, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[249, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.fileno"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.getresponse"]], "getstatus() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.getstatus"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.headers"]], "http.client": [[249, "module-http.client"]], "http.client (standard module)": [[249, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[249, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[249, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[249, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.url"]], "urllib.request": [[249, "index-1"], [399, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[249, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.LWPCookieJar"]], "loaderror": [[250, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[250, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[250, "index-1"], [250, "index-15"], [250, "index-21"], [250, "index-23"], [250, "index-24"], [250, "index-3"], [250, "index-4"], [250, "index-6"], [251, "index-0"], [251, "index-2"], [251, "index-3"], [251, "index-4"], [251, "index-5"], [251, "index-6"], [251, "index-7"]], "rfc 2964": [[250, "index-10"]], "rfc 2965": [[250, "index-0"], [250, "index-11"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-16"], [250, "index-17"], [250, "index-18"], [250, "index-19"], [250, "index-2"], [250, "index-20"], [250, "index-22"], [250, "index-25"], [250, "index-5"], [250, "index-7"], [250, "index-8"], [250, "index-9"], [399, "index-20"], [399, "index-21"], [399, "index-5"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[250, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.discard"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[250, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[250, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[250, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[250, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[250, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[251, "http.cookies.BaseCookie"]], "cookieerror": [[251, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[251, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[251, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[251, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[251, "http.cookies.Morsel.coded_value"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.copy"]], "http.cookies": [[251, "module-http.cookies"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[251, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[251, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[251, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[251, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.output"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[251, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[251, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[251, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[251, "http.cookies.BaseCookie.value_encode"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[252, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[252, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[252, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[252, "index-1"], [398, "index-2"], [398, "index-4"], [398, "index-6"], [398, "index-7"], [473, "index-10"], [473, "index-13"], [476, "index-31"], [480, "index-44"], [482, "index-35"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[252, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[252, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[252, "index-3"], [252, "module-http.server"]], "httpd": [[252, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[252, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[252, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[254, "index-4"]], "cut": [[254, "index-4"]], "idlestartup": [[254, "index-5"], [485, "index-143"], [485, "index-148"], [485, "index-173"]], "integrated development environment": [[254, "index-0"]], "module browser": [[254, "index-1"]], "pep 434": [[254, "index-7"], [473, "index-16"]], "pythonstartup": [[254, "index-6"], [326, "index-0"], [340, "index-7"], [359, "index-18"], [442, "index-5"], [459, "envvar-PYTHONSTARTUP"], [459, "index-8"], [479, "index-40"], [479, "index-41"], [485, "index-144"], [485, "index-149"], [485, "index-174"]], "paste": [[254, "index-4"]], "path browser": [[254, "index-1"]], "python editor": [[254, "index-0"]], "run script": [[254, "index-2"]], "set breakpoint": [[254, "index-4"]], "breakpoints": [[254, "index-4"]], "debugger": [[254, "index-3"], [303, "index-2"], [359, "index-11"], [359, "index-28"], [370, "index-1"]], "idlelib": [[254, "module-idlelib"]], "stack viewer": [[254, "index-3"]], "imap4": [[255, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[255, "imaplib.IMAP4"]], "imap4.abort": [[255, "imaplib.IMAP4.abort"]], "imap4.error": [[255, "imaplib.IMAP4.error"]], "imap4.readonly": [[255, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[255, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[255, "imaplib.IMAP4_SSL"]], "imap4_stream": [[255, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[255, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[255, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[255, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[255, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[255, "imaplib.ParseFlags"]], "rfc 1730": [[255, "index-2"]], "rfc 2060": [[255, "index-1"], [255, "index-7"]], "rfc 2342": [[255, "index-6"], [468, "index-19"]], "rfc 3501": [[255, "index-8"]], "rfc 5161": [[255, "index-3"], [480, "index-35"]], "rfc 6855": [[255, "index-4"], [255, "index-5"], [480, "index-36"], [480, "index-37"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[255, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[255, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[255, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[255, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[255, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[256, "index-2"]], "imghdr": [[256, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[256, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[256, "imghdr.what"]], "c_builtin (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.C_BUILTIN"]], "c_extension (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.C_EXTENSION"]], "nullimporter (imp \u4e2d\u7684\u985e\u5225)": [[257, "imp.NullImporter"]], "pkg_directory (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.PKG_DIRECTORY"]], "py_compiled (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.PY_COMPILED"]], "py_frozen (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.PY_FROZEN"]], "py_source (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.PY_SOURCE"]], "acquire_lock() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.acquire_lock"]], "byte-code": [[257, "index-1"], [317, "index-0"]], "cache_from_source() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.cache_from_source"]], "find_module() (imp.nullimporter \u7684\u65b9\u6cd5)": [[257, "imp.NullImporter.find_module"]], "find_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.find_module"]], "get_magic() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.get_magic"]], "get_suffixes() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.get_suffixes"]], "get_tag() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.get_tag"]], "load_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.load_module"]], "lock_held() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.lock_held"]], "new_module() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.new_module"]], "release_lock() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.release_lock"]], "reload() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.reload"]], "source_from_cache() (\u65bc imp \u6a21\u7d44\u4e2d)": [[257, "imp.source_from_cache"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.FileLoader"]], "finder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.Finder"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[258, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.ModuleSpec"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[258, "index-0"]], "pep 3120": [[258, "index-10"], [439, "index-1"], [474, "index-4"]], "pep 366": [[258, "index-4"], [330, "index-7"], [436, "index-11"], [436, "index-12"], [436, "index-22"], [436, "index-24"], [478, "index-22"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.Package"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.PathFinder"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.Resource"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.ResourceLoader"]], "resourcereader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.ResourceReader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.SourcelessFileLoader"]], "traversable (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.Traversable"]], "traversableresources (importlib.abc \u4e2d\u7684\u985e\u5225)": [[258, "importlib.abc.TraversableResources"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[258, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[258, "importlib.__import__"]], "__truediv__() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.__truediv__"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[258, "importlib.machinery.all_suffixes"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.as_file"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.cached"]], "contents() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ResourceReader.contents"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.contents"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "importlib.util.LazyLoader.factory"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.files"]], "find_loader() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.PathEntryFinder.find_loader"]], "find_loader() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.FileFinder.find_loader"]], "find_loader() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[258, "importlib.find_loader"]], "find_module() (importlib.abc.finder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Finder.find_module"]], "find_module() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.MetaPathFinder.find_module"]], "find_module() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.PathEntryFinder.find_module"]], "find_module() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "importlib.machinery.PathFinder.find_module"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[258, "importlib.import_module"]], "importlib": [[258, "module-importlib"]], "importlib.abc": [[258, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source method": [[258, "index-16"]], "importlib.machinery": [[258, "module-importlib.machinery"]], "importlib.resources": [[258, "module-importlib.resources"]], "importlib.util": [[258, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[258, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[258, "importlib.invalidate_caches"]], "is_dir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.is_dir"]], "is_file() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.is_file"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourcelessFileLoader.is_package"]], "is_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ResourceReader.is_resource"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.is_resource"]], "iterdir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.iterdir"]], "joinpath() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.joinpath"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.loader_state"]], "module_for_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.module_for_loader"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.module_from_spec"]], "module_repr() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Loader.module_repr"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[258, "importlib.abc.FileLoader.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.SourcelessFileLoader.name"]], "name() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.name"]], "open() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.open"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.open_binary"]], "open_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ResourceReader.open_resource"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.open_text"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[258, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[258, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[258, "importlib.machinery.SourcelessFileLoader.path"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourceFileLoader.path_stats"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.read_binary"]], "read_bytes() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.read_bytes"]], "read_text() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[258, "importlib.abc.Traversable.read_text"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[258, "importlib.resources.read_text"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[258, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.resolve_name"]], "resource_path() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.ResourceReader.resource_path"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[258, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[258, "importlib.machinery.SourceFileLoader.set_data"]], "set_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.set_loader"]], "set_package() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.set_package"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[258, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[258, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[258, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[259, "index-0"], [259, "index-1"], [259, "index-2"]], "importlib.metadata": [[259, "module-importlib.metadata"]], "--details": [[261, "cmdoption-inspect-details"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[261, "inspect.BoundArguments"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_NEWLOCALS"]], "co_nofree (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_NOFREE"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.CO_VARKEYWORDS"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[261, "inspect.Parameter"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[261, "inspect.Signature"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[261, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[261, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[261, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[261, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[261, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.cleandoc"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[261, "inspect.Signature.empty"]], "formatargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.formatargspec"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.formatargvalues"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[261, "inspect.Signature.from_callable"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.get_annotations"]], "getargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getargspec"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getargvalues"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getmembers"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.getsourcelines"]], "inspect": [[261, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[261, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.ismethoddescriptor"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[261, "inspect.BoundArguments.kwargs"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[261, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[261, "inspect.Signature.parameters"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[261, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[261, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[261, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[261, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[261, "inspect.unwrap"]], "internet": [[262, "index-0"]], "world wide web": [[262, "index-0"], [398, "index-0"], [400, "index-0"]], "socket": [[262, "index-1"], [344, "index-0"], [344, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[264, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[264, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[264, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[264, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[264, "io.IncrementalNewlineDecoder"]], "pep 597": [[264, "index-6"], [476, "index-12"], [485, "index-24"]], "pythonwarndefaultencoding": [[264, "index-2"], [459, "envvar-PYTHONWARNDEFAULTENCODING"], [459, "index-25"], [476, "index-17"], [485, "index-25"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[264, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[264, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[264, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[264, "io.TextIOWrapper"]], "unsupportedoperation": [[264, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[264, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[264, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[264, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[264, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[264, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[264, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[264, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[264, "io.StringIO.getvalue"]], "io": [[264, "module-io"], [432, "index-53"]], "io module": [[264, "index-0"]], "io.incrementalnewlinedecoder class": [[264, "index-4"]], "io.textiowrapper class": [[264, "index-3"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[264, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[264, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[264, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[264, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[264, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[264, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[264, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[264, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[264, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[264, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[264, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[264, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[264, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[264, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[264, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[264, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[264, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[264, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[264, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[264, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[264, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[264, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[264, "io.IOBase.writelines"]], "addressvalueerror": [[265, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[265, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[265, "ipaddress.NetmaskValueError"]], "rfc 2373": [[265, "index-1"], [265, "index-3"], [265, "index-5"]], "rfc 3056": [[265, "index-12"]], "rfc 3171": [[265, "index-0"]], "rfc 3330": [[265, "index-4"]], "rfc 3879": [[265, "index-9"]], "rfc 3927": [[265, "index-6"]], "rfc 4007": [[265, "index-11"], [265, "index-8"]], "rfc 4193": [[265, "index-10"]], "rfc 4291": [[265, "index-7"], [485, "index-14"]], "rfc 4380": [[265, "index-13"]], "rfc 5735": [[265, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.ip_network"]], "ipaddress": [[265, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[265, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[265, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[265, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.accumulate"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[267, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.islice"]], "itertools": [[267, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[267, "itertools.zip_longest"]], "--compact": [[268, "cmdoption-json.tool-indent"]], "--json-lines": [[268, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[268, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[268, "cmdoption-json.tool-indent"]], "--sort-keys": [[268, "cmdoption-json.tool-sort-keys"]], "--tab": [[268, "cmdoption-json.tool-indent"]], "jsondecodeerror": [[268, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[268, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[268, "json.JSONEncoder"]], "rfc 4627": [[268, "index-1"], [268, "index-3"]], "rfc 7159": [[268, "index-0"], [268, "index-2"], [268, "index-4"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[268, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[268, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[268, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[268, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[268, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[268, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[268, "json.JSONEncoder.encode"]], "infile": [[268, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[268, "json.JSONEncoder.iterencode"]], "json": [[268, "module-json"], [450, "index-1"]], "json.tool": [[268, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[268, "cmdoption-json.tool-arg-infile"], [268, "cmdoption-json.tool-arg-outfile"], [268, "cmdoption-json.tool-h"], [268, "cmdoption-json.tool-indent"], [268, "cmdoption-json.tool-json-lines"], [268, "cmdoption-json.tool-no-ensure-ascii"], [268, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[268, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[268, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[268, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[268, "json.JSONDecodeError.msg"]], "outfile": [[268, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[268, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[268, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[269, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[269, "keyword.issoftkeyword"]], "keyword": [[269, "module-keyword"], [439, "index-13"], [439, "index-14"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[269, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[269, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[271, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[271, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[271, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[271, "linecache.lazycache"]], "linecache": [[271, "module-linecache"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.CRNCYSTR"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.LC_TIME"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.RADIXCHAR"]], "rfc 1766": [[272, "index-4"], [272, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.YESEXPR"]], "_locale": [[272, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.atoi"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.dgettext"]], "format() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.format"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.getdefaultlocale"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.gettext"]], "locale": [[272, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[272, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.BufferingFormatter"]], "errors": [[273, "index-0"], [433, "index-13"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.Handler"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[273, "logging.LoggerAdapter"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.__init__"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.disable"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[273, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[273, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[273, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[273, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[273, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[273, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[273, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[273, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.getChild"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.getEffectiveLevel"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.getLevelName"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[273, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.handleError"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.lastResort"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.log"]], "logging": [[273, "index-0"], [273, "module-logging"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.makeRecord"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[273, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[273, "logging.Logger.propagate"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[273, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[273, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[273, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[274, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[274, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[274, "logging.config.listen"]], "logging.config": [[274, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[274, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[275, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[275, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[275, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[275, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[275, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[275, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[275, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[275, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[275, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[275, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[275, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[275, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[275, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[275, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[275, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[275, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[275, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[275, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[275, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[276, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[276, "lzma.LZMADecompressor"]], "lzmaerror": [[276, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[276, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[276, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[276, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[276, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[276, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[276, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[276, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[276, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[276, "lzma.is_check_supported"]], "lzma": [[276, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[276, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[276, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[276, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[276, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.BabylMessage"]], "externalclasherror": [[277, "mailbox.ExternalClashError"]], "formaterror": [[277, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.Message"]], "nosuchmailboxerror": [[277, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[277, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.close"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[277, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[277, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[277, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[277, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[277, "mailbox.mbox.lock"]], "mailbox": [[277, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[277, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[277, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[277, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[277, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[277, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[277, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[277, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[277, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[278, "index-0"]], "rfc 1524": [[278, "index-1"], [278, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[278, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[278, "mailcap.getcaps"]], "mailcap": [[278, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[280, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[280, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[280, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[280, "marshal.loads"]], "marshal": [[280, "module-marshal"]], "shelve": [[280, "index-0"], [336, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[280, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.atanh"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.exp"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.log2"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.sqrt"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[281, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[282, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.common_types"]], "content type": [[282, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[282, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.knownfiles"]], "mime.types": [[282, "index-2"]], "mimetypes": [[282, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[282, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[282, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[282, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[282, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[282, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MADV_WILLNEED"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_ANONYMOUS"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[284, "mmap.MAP_SHARED"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[284, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.madvise"]], "mmap": [[284, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[284, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[284, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[285, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[285, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[285, "modulefinder.ReplacePackage"]], "modulefinder": [[285, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[285, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[285, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[285, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[287, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[287, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[287, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[287, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[287, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[287, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[287, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[287, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[287, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[287, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[287, "msilib.Database.OpenView"]], "pep 594#msilib": [[287, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[287, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[287, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[287, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[287, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[287, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[287, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[287, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[287, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[287, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[287, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[287, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[287, "msilib.Control.mapping"]], "msi": [[287, "index-0"]], "msilib": [[287, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[287, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[287, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[287, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[287, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[287, "msilib.Dialog.text"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.LK_UNLCK"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.locking"]], "msvcrt": [[288, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[288, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[289, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[289, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Process"]], "processerror": [[289, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[289, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[289, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[289, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[289, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[289, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[289, "module-multiprocessing"]], "multiprocessing.manager()": [[289, "multiprocessing.Manager"]], "multiprocessing.connection": [[289, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[289, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[289, "module-multiprocessing.managers"]], "multiprocessing.pool": [[289, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[289, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[289, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[289, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[289, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.set_executable"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[289, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[289, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[289, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[289, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[289, "multiprocessing.connection.wait"]], "named shared memory": [[290, "index-0"]], "posix shared memory": [[290, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[290, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[290, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory": [[290, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[290, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[290, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[290, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[290, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[290, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[290, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[290, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[290, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[290, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[290, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[290, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[290, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[290, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[292, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[292, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[292, "netrc.netrc.authenticators"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[292, "netrc.netrc.hosts"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[292, "netrc.netrc.macros"]], "netrc": [[292, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[292, "netrc.netrc"]], "pep 594#nis": [[293, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[293, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[293, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[293, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[293, "nis.match"]], "nis": [[293, "module-nis"]], "nntp": [[294, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[294, "nntplib.NNTP"]], "nntpdataerror": [[294, "nntplib.NNTPDataError"]], "nntperror": [[294, "nntplib.NNTPError"]], "nntppermanenterror": [[294, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[294, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[294, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[294, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[294, "nntplib.NNTP_SSL"]], "network news transfer protocol": [[294, "index-0"]], "pep 594": [[294, "index-12"], [485, "index-7"], [485, "index-8"]], "rfc 2980": [[294, "index-4"], [294, "index-9"]], "rfc 3977": [[294, "index-10"], [294, "index-2"], [294, "index-6"], [294, "index-7"], [294, "index-8"]], "rfc 4642": [[294, "index-5"]], "rfc 977": [[294, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[294, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[294, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[294, "nntplib.NNTP.nntp_version"]], "nntplib": [[294, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[294, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[294, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[295, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[295, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[295, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[295, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[295, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[295, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[295, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[295, "numbers.Complex.imag"]], "numbers": [[295, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[295, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[295, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__and__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.attrgetter"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.not_"]], "operator": [[297, "module-operator"], [351, "index-13"], [351, "index-7"], [432, "index-67"], [434, "index-60"], [434, "index-61"], [434, "index-69"], [434, "index-70"], [434, "index-88"], [434, "index-97"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[297, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[298, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[298, "optparse.OptionParser"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.TYPE_CHECKER"]], "action (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.nargs"]], "optparse": [[298, "module-optparse"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[298, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[298, "optparse.Option.type"]], "..": [[299, "index-45"]], "/ (slash)": [[299, "index-46"], [299, "index-48"], [351, "index-13"], [431, "index-31"], [434, "index-67"]], ": (colon)": [[299, "index-50"], [347, "index-3"], [352, "index-2"], [431, "index-15"], [431, "index-17"], [431, "index-27"], [431, "index-3"], [431, "index-33"], [431, "index-39"], [431, "index-4"], [431, "index-6"], [431, "index-9"], [434, "index-17"], [434, "index-44"], [434, "index-90"], [439, "index-25"], [440, "index-15"], [445, "index-6"]], "; (semicolon)": [[299, "index-50"], [431, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.CLD_TRAPPED"]], "comspec": [[299, "index-42"], [355, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[299, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.O_WRONLY"]], "pep 524": [[299, "index-52"], [481, "index-1"], [481, "index-31"], [481, "index-32"], [485, "index-186"], [485, "index-187"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.POSIX_SPAWN_OPEN"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[299, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SEEK_CUR"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SEEK_END"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SF_MNOWAIT"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.SPLICE_F_NONBLOCK"]], "unc paths": [[299, "index-27"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[299, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.altsep"]], "and os.makedirs()": [[299, "index-27"]], "changing": [[299, "index-25"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[299, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[299, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.cpu_count"]], "creating": [[299, "index-27"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.defpath"]], "deleting": [[299, "index-20"], [299, "index-28"], [338, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.devnull"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.dup2"]], "effective id": [[299, "index-7"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.environb"]], "environment variables": [[299, "index-16"], [299, "index-20"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getgroups"]], "gethostbyaddr() (in module socket)": [[299, "index-19"]], "gethostname() (in module socket)": [[299, "index-19"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.getxattr"]], "group": [[299, "index-11"], [299, "index-8"]], "id": [[299, "index-12"], [299, "index-15"], [432, "index-1"]], "id of parent": [[299, "index-13"]], "id, setting": [[299, "index-18"]], "in pathnames": [[299, "index-44"], [299, "index-45"], [299, "index-46"], [299, "index-48"], [299, "index-49"]], "in pathnames (windows)": [[299, "index-47"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[299, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[299, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[299, "os.DirEntry.is_file"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[299, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.kill"]], "killing": [[299, "index-36"], [299, "index-37"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[299, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.listdir"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lockf"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[299, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.openpty"]], "os": [[299, "module-os"], [312, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[299, "os.DirEntry.path"]], "path separator (posix)": [[299, "index-50"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.preadv"]], "process": [[299, "index-11"], [299, "index-12"], [299, "index-13"], [299, "index-14"], [299, "index-17"], [299, "index-36"], [299, "index-37"], [299, "index-8"]], "pty": [[299, "index-22"], [315, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[299, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[299, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sched_yield"]], "scheduling priority": [[299, "index-14"], [299, "index-17"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setgroups"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setsid"]], "setting": [[299, "index-16"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.setxattr"]], "signalling": [[299, "index-36"], [299, "index-37"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_birthtime"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[299, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.startfile"]], "stat": [[299, "index-29"], [349, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[299, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[299, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[299, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.times"]], "traversal": [[299, "index-30"], [299, "index-31"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.unsetenv"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.urandom"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.walk"]], "walking": [[299, "index-30"], [299, "index-31"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[299, "os.writev"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.dirname"]], "environment variables expansion": [[300, "index-9"]], "environment variables expansion (windows)": [[300, "index-9"], [409, "index-0"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.getsize"]], "home directory expansion": [[300, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.isabs"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.isfile"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.normpath"]], "operations": [[300, "index-0"], [302, "index-0"], [351, "index-1"], [351, "index-16"], [351, "index-5"]], "os.path": [[300, "module-os.path"]], "pwd": [[300, "index-2"], [316, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.splitext"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[300, "os.path.supports_unicode_filenames"]], "~ (tilde)": [[300, "index-1"], [351, "index-16"], [434, "index-62"]], "audiodev": [[301, "index-1"]], "mixerdev": [[301, "index-2"]], "ossaudioerror": [[301, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[301, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[301, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[301, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[301, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[301, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[301, "ossaudiodev.openmixer"]], "ossaudiodev": [[301, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[301, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[302, "index-1"], [479, "index-30"], [479, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.PurePath"]], "purepath.anchor (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.anchor"]], "purepath.drive (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.drive"]], "purepath.name (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.name"]], "purepath.parent (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.parent"]], "purepath.parents (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.parents"]], "purepath.parts (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.parts"]], "purepath.root (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.root"]], "purepath.stem (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.stem"]], "purepath.suffix (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.suffix"]], "purepath.suffixes (\u65bc pathlib \u6a21\u7d44\u4e2d)": [[302, "pathlib.PurePath.suffixes"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[302, "pathlib.WindowsPath"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[302, "pathlib.Path.cwd"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[302, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_file"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.lchmod"]], "link_to() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.link_to"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.mkdir"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.owner"]], "pathlib": [[302, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.rmdir"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.stat"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.unlink"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.with_name"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[302, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[302, "pathlib.Path.write_text"]], "! (pdb command)": [[303, "pdbcommand-0"]], ".pdbrc": [[303, "index-2"]], "pdb (class in pdb)": [[303, "index-1"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[303, "pdb.Pdb"]], "alias (pdb command)": [[303, "pdbcommand-alias"]], "args (pdb command)": [[303, "pdbcommand-args"]], "break (pdb command)": [[303, "pdbcommand-break"]], "clear (pdb command)": [[303, "pdbcommand-clear"]], "commands (pdb command)": [[303, "pdbcommand-commands"]], "condition (pdb command)": [[303, "pdbcommand-condition"]], "continue (pdb command)": [[303, "pdbcommand-continue"]], "debug (pdb command)": [[303, "pdbcommand-debug"]], "disable (pdb command)": [[303, "pdbcommand-disable"]], "display (pdb command)": [[303, "pdbcommand-display"]], "down (pdb command)": [[303, "pdbcommand-down"]], "enable (pdb command)": [[303, "pdbcommand-enable"]], "help (pdb command)": [[303, "pdbcommand-help"]], "ignore (pdb command)": [[303, "pdbcommand-ignore"]], "interact (pdb command)": [[303, "pdbcommand-interact"]], "jump (pdb command)": [[303, "pdbcommand-jump"]], "list (pdb command)": [[303, "pdbcommand-list"]], "ll (pdb command)": [[303, "pdbcommand-ll"]], "next (pdb command)": [[303, "pdbcommand-next"]], "p (pdb command)": [[303, "pdbcommand-p"]], "pdb": [[303, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.post_mortem"]], "pp (pdb command)": [[303, "pdbcommand-pp"]], "quit (pdb command)": [[303, "pdbcommand-quit"]], "restart (pdb command)": [[303, "pdbcommand-restart"]], "return (pdb command)": [[303, "pdbcommand-return"]], "retval (pdb command)": [[303, "pdbcommand-retval"]], "run (pdb command)": [[303, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[303, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[303, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[303, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[303, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[303, "pdb.set_trace"]], "source (pdb command)": [[303, "pdbcommand-source"]], "step (pdb command)": [[303, "pdbcommand-step"]], "tbreak (pdb command)": [[303, "pdbcommand-tbreak"]], "unalias (pdb command)": [[303, "pdbcommand-unalias"]], "undisplay (pdb command)": [[303, "pdbcommand-undisplay"]], "until (pdb command)": [[303, "pdbcommand-until"]], "up (pdb command)": [[303, "pdbcommand-up"]], "whatis (pdb command)": [[303, "pdbcommand-whatis"]], "where (pdb command)": [[303, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.DEFAULT_PROTOCOL"]], "external data representation": [[305, "index-1"], [412, "index-0"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[305, "index-2"], [469, "index-21"], [469, "index-22"], [469, "index-23"]], "pep 3154": [[305, "index-3"], [479, "index-12"], [479, "index-39"], [485, "index-140"]], "pep 574": [[305, "index-4"], [305, "index-8"], [483, "index-36"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[305, "pickle.PickleBuffer"]], "pickleerror": [[305, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[305, "pickle.Pickler"]], "picklingerror": [[305, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[305, "pickle.Unpickler"]], "unpicklingerror": [[305, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[305, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[305, "object.__getnewargs_ex__"]], "__getstate__() (copy protocol)": [[305, "index-7"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[305, "object.__getstate__"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[305, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[305, "object.__reduce_ex__"]], "__setstate__() (copy protocol)": [[305, "index-7"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[305, "object.__setstate__"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[305, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[305, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[305, "pickle.Pickler.fast"]], "find_class() (pickle protocol)": [[305, "index-9"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[305, "pickle.Unpickler.find_class"]], "flattening": [[305, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[305, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[305, "pickle.loads"]], "marshalling": [[305, "index-0"]], "objects": [[305, "index-0"], [351, "index-8"]], "persistence": [[305, "index-0"]], "persistent": [[305, "index-0"]], "persistent_id (pickle protocol)": [[305, "index-6"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[305, "pickle.Pickler.persistent_id"]], "persistent_load (pickle protocol)": [[305, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[305, "pickle.Unpickler.persistent_load"]], "pickling": [[305, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[305, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[305, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[305, "pickle.PickleBuffer.release"]], "serializing": [[305, "index-0"]], "--annotate": [[306, "cmdoption-pickletools-a"]], "--indentlevel": [[306, "cmdoption-pickletools-l"]], "--memo": [[306, "cmdoption-pickletools-m"]], "--output": [[306, "cmdoption-pickletools-o"], [425, "cmdoption-zipapp-o"]], "--preamble": [[306, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[306, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[306, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[306, "pickletools.optimize"]], "pickletools": [[306, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[306, "cmdoption-pickletools-a"], [306, "cmdoption-pickletools-l"], [306, "cmdoption-pickletools-m"], [306, "cmdoption-pickletools-o"], [306, "cmdoption-pickletools-p"]], "pep 594#pipes": [[307, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[307, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.open"]], "pipes": [[307, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[307, "pipes.Template.reset"]], "impimporter (pkgutil \u4e2d\u7684\u985e\u5225)": [[308, "pkgutil.ImpImporter"]], "imploader (pkgutil \u4e2d\u7684\u985e\u5225)": [[308, "pkgutil.ImpLoader"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[308, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.iter_modules"]], "pkgutil": [[308, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[308, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.node"]], "platform": [[309, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[309, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[310, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[310, "plistlib.loads"]], "plist": [[310, "index-0"]], "plistlib": [[310, "module-plistlib"]], "property list": [[310, "index-0"]], "pop3": [[311, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[311, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[311, "poplib.POP3_SSL"]], "rfc 1939": [[311, "index-1"], [311, "index-2"]], "rfc 2449": [[311, "index-4"]], "rfc 2595": [[311, "index-3"], [311, "index-6"]], "rfc 6856": [[311, "index-5"], [480, "index-38"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.pass_"]], "poplib": [[311, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[311, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[312, "posix.environ"]], "large files": [[312, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[313, "pprint.PrettyPrinter"]], "eval": [[313, "index-1"], [313, "index-2"], [351, "index-63"], [440, "index-44"], [441, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[313, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[313, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[313, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[313, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.pformat"]], "placeholder": [[313, "index-0"], [327, "index-0"], [369, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.pp"]], "pprint": [[313, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[313, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[313, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[314, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[314, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.add"]], "cprofile": [[314, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.create_stats"]], "deterministic profiling": [[314, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.print_stats"]], "profile": [[314, "module-profile"]], "profiling, deterministic": [[314, "index-0"]], "pstats": [[314, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[314, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[314, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[314, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[314, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[315, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[315, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[315, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[316, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[316, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[316, "pwd.getpwuid"]], "-": [[317, "cmdoption-python-m-py_compile"]], "--quiet": [[317, "cmdoption-python-m-py_compile-q"]], "<file>": [[317, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[317, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[317, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[317, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[317, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[317, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[317, "py_compile.compile"]], "py_compile": [[317, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[317, "cmdoption-python-m-py_compile"], [317, "cmdoption-python-m-py_compile-arg-file"], [317, "cmdoption-python-m-py_compile-q"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[318, "pyclbr.Function.parent"]], "pyclbr": [[318, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[318, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[318, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[318, "pyclbr.Class.super"]], "pager": [[319, "index-1"]], "pythondocs": [[319, "index-2"]], "documentation": [[319, "index-0"]], "generation": [[319, "index-0"]], "help": [[319, "index-0"], [455, "index-0"]], "online": [[319, "index-0"]], "pydoc": [[319, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.ErrorString"]], "expat": [[320, "index-0"]], "expaterror": [[320, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.GetInputContext"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[320, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[320, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[320, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[320, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[320, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[320, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[320, "module-xml.parsers.expat.model"]], "empty": [[322, "queue.Empty"], [432, "index-20"], [434, "index-15"], [434, "index-9"]], "full": [[322, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[322, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[322, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[322, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[322, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[322, "queue.SimpleQueue.qsize"]], "queue": [[322, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[322, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[323, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[323, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[323, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[323, "quopri.encodestring"]], "quopri": [[323, "module-quopri"]], "quoted-printable": [[323, "index-0"]], "quoted-printable encoding": [[323, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[324, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[324, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.betavariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.gauss"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.getrandbits"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.randint"]], "random": [[324, "module-random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.sample"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.seed"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[324, "random.weibullvariate"]], "() (parentheses)": [[325, "index-14"], [351, "index-35"], [351, "index-45"], [431, "index-27"], [431, "index-39"], [434, "index-22"], [434, "index-47"], [434, "index-8"], [440, "index-6"]], "(?": [[325, "index-15"]], "(?!": [[325, "index-21"]], "(?#": [[325, "index-19"]], "(?:": [[325, "index-16"]], "(?<!": [[325, "index-23"]], "(?<=": [[325, "index-22"]], "(?=": [[325, "index-20"]], "(?p<": [[325, "index-17"]], "(?p=": [[325, "index-18"]], "*?": [[325, "index-6"]], "+?": [[325, "index-6"]], "??": [[325, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.MULTILINE"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.S"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.X"]], "\\a": [[325, "index-25"], [325, "index-35"], [439, "index-23"]], "\\b": [[325, "index-27"], [325, "index-26"], [325, "index-35"], [439, "index-23"]], "\\d": [[325, "index-29"], [325, "index-28"]], "\\s": [[325, "index-31"], [325, "index-30"]], "\\w": [[325, "index-33"], [325, "index-32"]], "\\z": [[325, "index-34"]], "\\\\": [[325, "index-35"], [439, "index-23"]], "\\f": [[325, "index-35"], [439, "index-23"]], "\\g": [[325, "index-37"]], "\\r": [[325, "index-35"], [439, "index-23"]], "\\t": [[325, "index-35"], [439, "index-23"]], "\\v": [[325, "index-35"], [439, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[325, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[325, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[325, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[325, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.groups"]], "in regular expressions": [[325, "index-0"], [325, "index-1"], [325, "index-10"], [325, "index-11"], [325, "index-12"], [325, "index-13"], [325, "index-14"], [325, "index-15"], [325, "index-16"], [325, "index-17"], [325, "index-18"], [325, "index-19"], [325, "index-2"], [325, "index-20"], [325, "index-21"], [325, "index-22"], [325, "index-23"], [325, "index-24"], [325, "index-25"], [325, "index-26"], [325, "index-27"], [325, "index-28"], [325, "index-29"], [325, "index-3"], [325, "index-30"], [325, "index-31"], [325, "index-32"], [325, "index-33"], [325, "index-34"], [325, "index-35"], [325, "index-36"], [325, "index-37"], [325, "index-4"], [325, "index-5"], [325, "index-6"], [325, "index-7"], [325, "index-8"], [325, "index-9"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[325, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[325, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[325, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[325, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[325, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.re"]], "scanf()": [[325, "index-38"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[325, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[325, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[325, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[325, "re.subn"]], "{} (curly brackets)": [[325, "index-7"], [352, "index-2"], [434, "index-16"], [434, "index-17"], [439, "index-25"]], "| (vertical bar)": [[325, "index-13"], [351, "index-16"], [434, "index-76"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.read_init_file"]], "readline": [[326, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[326, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[327, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[327, "reprlib.aRepr"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[327, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[327, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[327, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[327, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[327, "reprlib.Repr.repr1"]], "reprlib": [[327, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.prlimit"]], "resource": [[328, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[328, "resource.setrlimit"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[329, "rlcompleter.Completer.complete"]], "rlcompleter": [[329, "module-rlcompleter"]], "pep 338": [[330, "index-6"], [436, "index-25"], [459, "index-1"], [471, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[330, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[330, "runpy.run_path"]], "runpy": [[330, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[331, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[331, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[331, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[331, "sched.scheduler.enterabs"]], "event scheduling": [[331, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[331, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[331, "sched.scheduler.run"]], "sched": [[331, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[331, "sched.scheduler"]], "pep 506": [[332, "index-0"], [481, "index-28"], [485, "index-206"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[332, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.randbits"]], "secrets": [[332, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[332, "secrets.token_urlsafe"]], "security considerations": [[333, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.PIPE_BUF"]], "winsock": [[334, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[334, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[334, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[334, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[334, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[334, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[334, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[334, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[334, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[334, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.poll"]], "popen() (in module os)": [[334, "index-1"], [432, "index-53"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[334, "select.poll.register"]], "select": [[334, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[334, "select.select"]], "socket() (in module socket)": [[334, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[334, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[334, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[334, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[334, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.DevpollSelector"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[335, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[335, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[335, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[335, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[335, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[335, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[335, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[335, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.select"]], "selectors": [[335, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[335, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[336, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[336, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[336, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[336, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[336, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[336, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[337, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[337, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.read_token"]], "shlex": [[337, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[337, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[337, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[337, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[337, "shlex.shlex.wordchars"]], "samefileerror": [[338, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[338, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copyfileobj"]], "copying": [[338, "index-0"]], "copying files": [[338, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.rmtree"]], "shutil": [[338, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[338, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.CTRL_C_EVENT"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.ITIMER_VIRTUAL"]], "itimererror": [[339, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGSEGV"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.SIG_UNBLOCK"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.siginterrupt"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[339, "signal.valid_signals"]], "--user-base": [[340, "cmdoption-site-user-base"]], "--user-site": [[340, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.ENABLE_USER_SITE"]], "pep 370": [[340, "index-11"], [459, "index-18"], [459, "index-35"], [459, "index-36"], [472, "index-7"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.PREFIXES"]], "pythonuserbase": [[340, "index-10"], [340, "index-9"], [459, "envvar-PYTHONUSERBASE"], [472, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.addsitedir"]], "comment": [[340, "index-2"], [439, "index-4"], [453, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[340, "site.main"]], "package": [[340, "index-4"], [436, "index-3"], [436, "index-4"], [436, "index-5"]], "site": [[340, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[340, "cmdoption-site-user-base"], [340, "cmdoption-site-user-site"]], "site-packages": [[340, "index-1"]], "sitecustomize": [[340, "index-5"]], "usercustomize": [[340, "index-6"]], "debuggingserver (smtpd \u4e2d\u7684\u985e\u5225)": [[341, "smtpd.DebuggingServer"]], "mailmanproxy (smtpd \u4e2d\u7684\u985e\u5225)": [[341, "smtpd.MailmanProxy"]], "pep 594#smtpd": [[341, "index-11"]], "pureproxy (smtpd \u4e2d\u7684\u985e\u5225)": [[341, "smtpd.PureProxy"]], "rfc 1870": [[341, "index-2"], [341, "index-9"], [478, "index-27"]], "rfc 6152": [[341, "index-5"], [480, "index-39"]], "smtpchannel (smtpd \u4e2d\u7684\u985e\u5225)": [[341, "smtpd.SMTPChannel"]], "smtpserver (smtpd \u4e2d\u7684\u985e\u5225)": [[341, "smtpd.SMTPServer"]], "addr (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.addr"]], "channel_class (smtpd.smtpserver \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPServer.channel_class"]], "conn (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.conn"]], "fqdn (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.fqdn"]], "mailfrom (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.mailfrom"]], "peer (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.peer"]], "process_message() (smtpd.smtpserver \u7684\u65b9\u6cd5)": [[341, "smtpd.SMTPServer.process_message"]], "rcpttos (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.rcpttos"]], "received_data (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.received_data"]], "received_lines (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.received_lines"]], "seen_greeting (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.seen_greeting"]], "smtp_server (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.smtp_server"]], "smtp_state (smtpd.smtpchannel \u7684\u5c6c\u6027)": [[341, "smtpd.SMTPChannel.smtp_state"]], "smtpd": [[341, "module-smtpd"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[342, "smtplib.LMTP"]], "rfc 1869": [[342, "index-2"], [342, "index-5"]], "rfc 4954": [[342, "index-7"], [342, "index-8"]], "rfc 821": [[342, "index-1"], [342, "index-4"]], "smtp": [[342, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[342, "smtplib.SMTP"]], "smtpauthenticationerror": [[342, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[342, "smtplib.SMTPConnectError"]], "smtpdataerror": [[342, "smtplib.SMTPDataError"]], "smtpexception": [[342, "smtplib.SMTPException"]], "smtpheloerror": [[342, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[342, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[342, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[342, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[342, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[342, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[342, "smtplib.SMTP_SSL"]], "simple mail transfer protocol": [[342, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[342, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[342, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[343, "index-3"]], "sndhdr": [[343, "module-sndhdr"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[343, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[343, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_CAN"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_UNIX"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.CMSG_SPACE"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.HCI_TIME_STAMP"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.PF_CAN"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.PF_RDS"]], "rfc 3493": [[344, "index-15"]], "rfc 3542": [[344, "index-3"], [485, "index-136"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SOMAXCONN"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[344, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.fromshare"]], "gaierror": [[344, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.has_ipv6"]], "herror": [[344, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[344, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[344, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[344, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[344, "socket.socketpair"]], "struct": [[344, "index-14"], [354, "module-struct"]], "timeout": [[344, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[344, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ForkingUDPServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.ThreadingUDPServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[345, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.allow_reuse_address"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.process_request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.request_queue_size"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.serve_forever"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.socket_type"]], "socketserver": [[345, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[345, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[345, "socketserver.BaseServer.verify_request"]], "pep 594#spwd": [[346, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[346, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[346, "spwd.getspnam"]], "spwd": [[346, "module-spwd"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[347, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[347, "sqlite3.Cursor"]], "dataerror": [[347, "sqlite3.DataError"]], "databaseerror": [[347, "sqlite3.DatabaseError"]], "integrityerror": [[347, "sqlite3.IntegrityError"]], "interfaceerror": [[347, "sqlite3.InterfaceError"]], "internalerror": [[347, "sqlite3.InternalError"]], "notsupportederror": [[347, "sqlite3.NotSupportedError"]], "operationalerror": [[347, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[347, "index-4"], [485, "index-2"]], "pep 249": [[347, "index-0"], [347, "index-1"], [347, "index-5"], [347, "index-6"], [471, "index-24"], [471, "index-25"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[347, "sqlite3.PrepareProtocol"]], "programmingerror": [[347, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[347, "sqlite3.Row"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[347, "sqlite3.Cursor.arraysize"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.backup"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[347, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.create_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[347, "sqlite3.Cursor.description"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.fetchone"]], "in sql statements": [[347, "index-2"], [347, "index-3"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[347, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[347, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[347, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[347, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.paramstyle"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[347, "sqlite3.Connection.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[347, "sqlite3.Cursor.rowcount"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[347, "sqlite3.Connection.set_trace_callback"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.setinputsizes"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[347, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[347, "module-sqlite3"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.sqlite_version_info"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[347, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[347, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[347, "sqlite3.version_info"]], "(use in module ssl)": [[348, "index-0"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[348, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[348, "index-2"], [476, "index-28"], [476, "index-29"], [476, "index-35"], [476, "index-8"], [485, "index-20"]], "protocol_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_SSLv2"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.RAND_bytes"]], "rand_pseudo_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.RAND_pseudo_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.RAND_status"]], "rfc 1422": [[348, "index-20"], [348, "index-21"]], "rfc 1750": [[348, "index-5"]], "rfc 2818": [[348, "index-6"], [477, "index-12"]], "rfc 3280": [[348, "index-14"]], "rfc 4086": [[348, "index-22"]], "rfc 5246": [[348, "index-13"], [348, "index-24"]], "rfc 5280": [[348, "index-10"], [348, "index-23"], [348, "index-7"], [480, "index-43"], [480, "index-53"]], "rfc 5929": [[348, "index-15"]], "rfc 6066": [[348, "index-12"], [348, "index-17"], [348, "index-25"]], "rfc 6125": [[348, "index-8"], [348, "index-9"]], "rfc 7301": [[348, "index-11"], [348, "index-16"], [480, "index-42"]], "rfc 7525": [[348, "index-26"]], "ssl": [[348, "index-1"], [348, "module-ssl"]], "sslcertverificationerror": [[348, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.SSLContext"]], "ssleoferror": [[348, "ssl.SSLEOFError"]], "sslerror": [[348, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[348, "index-3"], [348, "index-4"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.SSLSocket"]], "sslsyscallerror": [[348, "ssl.SSLSyscallError"]], "sslwantreaderror": [[348, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[348, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[348, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.SSLv3"]], "secure sockets layer": [[348, "index-1"]], "tls": [[348, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[348, "ssl.TLSVersion.TLSv1_3"]], "transport layer security": [[348, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[348, "ssl.VerifyMode"]], "x509 certificate": [[348, "index-19"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.cert_time_to_seconds"]], "certificates": [[348, "index-18"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[348, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[348, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[348, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[348, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[348, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.load_verify_locations"]], "match_hostname() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.match_hostname"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[348, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[348, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[348, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[348, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[348, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[348, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[348, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[348, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[348, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[348, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[348, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[348, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[348, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[348, "ssl.SSLContext.wrap_socket"]], "wrap_socket() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[348, "ssl.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[348, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[348, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[348, "ssl.MemoryBIO.write_eof"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[349, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[350, "statistics.NormalDist"]], "statisticserror": [[350, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[350, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[350, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[350, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[350, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.samples"]], "statistics": [[350, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[350, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[350, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[350, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[350, "statistics.NormalDist.zscore"]], "!=": [[351, "index-7"], [434, "index-77"]], "& (ampersand)": [[351, "index-16"], [434, "index-74"]], "(see also string)": [[351, "index-27"]], "//": [[351, "index-13"], [434, "index-67"]], "< (less)": [[351, "index-7"], [352, "index-3"], [354, "index-1"], [434, "index-77"]], "<<": [[351, "index-16"], [434, "index-71"]], "<=": [[351, "index-7"], [434, "index-77"]], "==": [[351, "index-7"], [434, "index-77"]], "> (greater)": [[351, "index-7"], [352, "index-3"], [354, "index-1"], [434, "index-77"]], ">=": [[351, "index-7"], [434, "index-77"]], ">>": [[351, "index-16"], [434, "index-71"]], "alias": [[351, "index-55"]], "c": [[351, "index-11"], [351, "index-15"], [354, "index-0"], [432, "index-13"], [432, "index-4"], [432, "index-40"], [434, "index-77"], [439, "index-23"]], "false": [[351, "index-4"], [351, "index-66"], [351, "index-1"], [432, "index-11"]], "false (built-in object)": [[351, "index-3"]], "generic": [[351, "index-55"], [432, "index-5"]], "genericalias": [[351, "index-55"]], "none (built-in object)": [[351, "index-3"]], "pep 237": [[351, "index-71"], [351, "index-72"], [468, "index-10"], [470, "index-1"], [470, "index-16"], [474, "index-1"]], "pep 3118": [[351, "index-49"], [472, "index-15"], [474, "index-33"], [478, "index-31"], [478, "index-4"], [478, "index-40"], [483, "index-8"], [485, "index-168"], [485, "index-175"], [485, "index-220"]], "pep 461": [[351, "index-48"], [480, "index-7"], [480, "index-8"]], "pythonintmaxstrdigits": [[351, "index-67"], [351, "index-68"], [359, "index-17"], [459, "envvar-PYTHONINTMAXSTRDIGITS"], [459, "index-22"], [485, "index-1"]], "true": [[351, "index-4"], [351, "index-66"], [351, "index-2"], [432, "index-11"]], "union": [[351, "index-58"], [351, "index-58"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[351, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[351, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[351, "instance.__class__"]], "__code__ (function object attribute)": [[351, "index-62"]], "__dict__ (object \u7684\u5c6c\u6027)": [[351, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[351, "contextmanager.__enter__"]], "__eq__() (instance method)": [[351, "index-9"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.__eq__"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[351, "contextmanager.__exit__"]], "__ge__() (instance method)": [[351, "index-9"]], "__gt__() (instance method)": [[351, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[351, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[351, "iterator.__iter__"]], "__le__() (instance method)": [[351, "index-9"]], "__lt__() (instance method)": [[351, "index-9"]], "__missing__()": [[351, "index-52"]], "__mro__ (class \u7684\u5c6c\u6027)": [[351, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[351, "definition.__name__"]], "__ne__() (instance method)": [[351, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[351, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[351, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[351, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[351, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[351, "class.__subclasses__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.add"]], "and": [[351, "index-4"], [351, "index-6"], [434, "index-74"], [434, "index-84"]], "annotation": [[351, "index-54"]], "append() (sequence method)": [[351, "index-23"]], "arithmetic": [[351, "index-13"], [434, "index-1"], [434, "index-59"], [434, "index-64"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[351, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[351, "int.as_integer_ratio"]], "assignment": [[351, "index-23"], [432, "index-22"], [432, "index-46"], [432, "index-50"], [440, "index-12"], [440, "index-14"], [440, "index-15"], [440, "index-4"], [440, "index-6"], [440, "index-8"], [440, "index-9"]], "binary": [[351, "index-12"], [354, "index-0"], [434, "index-64"], [434, "index-73"]], "binary operator": [[351, "index-13"], [434, "index-69"], [434, "index-70"]], "binary sequence types": [[351, "index-38"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[351, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[351, "int.bit_length"]], "bitwise": [[351, "index-16"], [434, "index-59"], [434, "index-73"], [434, "index-74"], [434, "index-75"], [434, "index-76"]], "built-in": [[351, "index-0"], [432, "index-41"]], "bytearray (%)": [[351, "index-44"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[351, "bytearray"]], "bytearray.splitlines method": [[351, "index-43"]], "bytes (%)": [[351, "index-44"]], "bytes (\u5167\u5efa\u985e\u5225)": [[351, "bytes"]], "bytes.splitlines method": [[351, "index-43"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[351, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[351, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.cast"]], "ceil() (in module math)": [[351, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[351, "str.center"]], "chaining": [[351, "index-7"], [434, "index-78"], [440, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[351, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.clear"]], "clear() (sequence method)": [[351, "index-23"]], "comparing": [[351, "index-8"]], "comparison": [[351, "index-7"], [434, "index-77"]], "comparisons": [[351, "index-7"], [432, "index-75"], [434, "index-78"]], "complex": [[351, "index-13"], [432, "index-100"], [432, "index-14"]], "concatenation": [[351, "index-19"]], "conjugate() (complex number method)": [[351, "index-14"]], "container": [[351, "index-17"], [432, "index-3"], [432, "index-45"]], "context management": [[351, "index-53"]], "context management protocol": [[351, "index-53"]], "context manager": [[351, "index-53"], [432, "index-102"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.contiguous"]], "conversions": [[351, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[351, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.copy"]], "copy() (sequence method)": [[351, "index-23"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.count"]], "count() (sequence method)": [[351, "index-19"]], "count() (str \u7684\u65b9\u6cd5)": [[351, "str.count"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.decode"]], "del": [[351, "index-23"], [351, "index-51"], [432, "index-70"], [440, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[351, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[351, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[351, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[351, "str.expandtabs"]], "extend() (sequence method)": [[351, "index-23"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[351, "str.find"]], "floor() (in module math)": [[351, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[351, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[351, "str.format_map"]], "formatting": [[351, "index-44"]], "formatting, printf": [[351, "index-34"]], "formatting, string (%)": [[351, "index-34"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[351, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[351, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[351, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[351, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[351, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[351, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[351, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[351, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.hex"]], "hexadecimal": [[351, "index-12"]], "if": [[351, "index-1"], [431, "index-17"], [431, "index-3"], [434, "index-12"], [434, "index-88"]], "immutable": [[351, "index-21"], [432, "index-17"], [434, "index-20"], [434, "index-7"]], "in": [[351, "index-10"], [351, "index-19"], [431, "index-6"], [434, "index-80"]], "in printf-style formatting": [[351, "index-35"], [351, "index-36"], [351, "index-45"], [351, "index-46"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.index"]], "index() (sequence method)": [[351, "index-19"]], "index() (str \u7684\u65b9\u6cd5)": [[351, "str.index"]], "insert() (sequence method)": [[351, "index-23"]], "interpolation": [[351, "index-44"]], "interpolation, printf": [[351, "index-34"]], "interpolation, string (%)": [[351, "index-34"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.intersection_update"]], "io.stringio": [[351, "index-28"]], "is": [[351, "index-7"], [434, "index-81"]], "is not": [[351, "index-7"], [434, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[351, "float.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[351, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[351, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[351, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[351, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[351, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[351, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[351, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[351, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[351, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[351, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[351, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[351, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[351, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.itemsize"]], "iteration": [[351, "index-17"]], "iteration over": [[351, "index-17"]], "iterator": [[351, "index-17"], [432, "index-37"], [440, "index-26"]], "iterator protocol": [[351, "index-17"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[351, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[351, "dict.keys"]], "list (\u5167\u5efa\u985e\u5225)": [[351, "list"]], "literals": [[351, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[351, "str.ljust"]], "loop": [[351, "index-20"], [431, "index-4"], [431, "index-6"], [440, "index-30"], [440, "index-33"]], "loop over": [[351, "index-20"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[351, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[351, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[351, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[351, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[351, "str.maketrans"]], "masking": [[351, "index-16"]], "max": [[351, "index-19"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[351, "memoryview"]], "methods": [[351, "index-31"], [351, "index-42"]], "min": [[351, "index-19"]], "mro() (class \u7684\u65b9\u6cd5)": [[351, "class.mro"]], "mutable": [[351, "index-22"], [432, "index-22"], [440, "index-4"], [440, "index-9"]], "mutable sequence": [[351, "index-20"], [432, "index-22"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.ndim"]], "not": [[351, "index-6"], [434, "index-83"]], "not in": [[351, "index-10"], [351, "index-19"], [434, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.obj"]], "octal": [[351, "index-12"]], "operation": [[351, "index-19"], [434, "index-58"], [434, "index-59"], [434, "index-64"], [434, "index-71"], [434, "index-73"], [434, "index-82"], [440, "index-20"]], "operations on": [[351, "index-14"], [351, "index-16"], [351, "index-19"], [351, "index-23"], [351, "index-51"]], "or": [[351, "index-4"], [351, "index-6"], [434, "index-75"], [434, "index-76"], [434, "index-85"]], "over mutable sequence": [[351, "index-20"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[351, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[351, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.pop"]], "pop() (sequence method)": [[351, "index-23"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[351, "dict.popitem"]], "printf-style formatting": [[351, "index-34"], [351, "index-44"]], "range": [[351, "index-26"], [431, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[351, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.remove"]], "remove() (sequence method)": [[351, "index-23"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[351, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[351, "str.removesuffix"]], "repetition": [[351, "index-19"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[351, "str.replace"]], "reverse() (sequence method)": [[351, "index-23"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[351, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[351, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[351, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[351, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[351, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[351, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[351, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[351, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.shape"]], "shifting": [[351, "index-16"], [434, "index-71"]], "sort() (list \u7684\u65b9\u6cd5)": [[351, "list.sort"]], "space": [[351, "index-36"], [351, "index-46"], [352, "index-4"], [439, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[351, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[351, "str.splitlines"]], "sprintf-style formatting": [[351, "index-34"], [351, "index-44"]], "start (range \u7684\u5c6c\u6027)": [[351, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[351, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[351, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[351, "range.stop"]], "str (built-in class)": [[351, "index-27"], [351, "index-29"], [351, "index-30"]], "str (\u5167\u5efa\u985e\u5225)": [[351, "str"]], "str.splitlines method": [[351, "index-33"]], "strides (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[351, "str.strip"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[351, "memoryview.suboffsets"]], "subscript": [[351, "index-19"], [351, "index-23"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[351, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.symmetric_difference_update"]], "text sequence type": [[351, "index-27"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[351, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[351, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[351, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[351, "str.translate"]], "trunc() (in module math)": [[351, "index-15"]], "truth": [[351, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[351, "tuple"]], "type annotation; type hint": [[351, "index-54"]], "types": [[351, "index-0"], [351, "index-14"], [351, "index-16"], [351, "index-19"], [351, "index-21"], [351, "index-22"], [351, "index-23"], [351, "index-51"], [351, "index-64"], [389, "module-types"]], "unary operator": [[351, "index-13"], [434, "index-60"], [434, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[351, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[351, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[351, "str.upper"]], "value": [[351, "index-1"], [431, "index-30"]], "values": [[351, "index-66"], [440, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[351, "dict.values"]], "while": [[351, "index-1"], [431, "index-4"], [440, "index-30"], [440, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[351, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[351, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[351, "str.zfill"]], "\u904b\u7b97\u5b50": [[351, "index-10"], [351, "index-13"], [351, "index-16"], [351, "index-19"], [351, "index-4"], [351, "index-6"], [351, "index-7"], [434, "index-58"], [434, "index-62"], [434, "index-65"], [434, "index-66"], [434, "index-67"], [434, "index-68"], [434, "index-71"], [434, "index-74"], [434, "index-75"], [434, "index-76"], [434, "index-77"], [434, "index-80"], [434, "index-81"], [434, "index-83"], [434, "index-84"], [434, "index-85"]], ", (comma)": [[352, "index-6"], [431, "index-15"], [431, "index-27"], [431, "index-39"], [434, "index-10"], [434, "index-15"], [434, "index-16"], [434, "index-17"], [434, "index-44"], [434, "index-47"], [434, "index-91"], [440, "index-18"], [440, "index-34"], [440, "index-43"], [440, "index-45"], [440, "index-6"]], "= (equals)": [[352, "index-3"], [354, "index-1"], [431, "index-30"], [432, "index-82"], [434, "index-47"], [439, "index-25"], [440, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[352, "string.Formatter"]], "pep 292": [[352, "index-10"], [470, "index-3"]], "pep 378": [[352, "index-14"], [473, "index-3"], [475, "index-1"]], "pep 515": [[352, "index-15"], [481, "index-7"], [481, "index-8"], [485, "index-180"], [485, "index-181"]], "template (string \u4e2d\u7684\u985e\u5225)": [[352, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.get_field"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.hexdigits"]], "in string formatting": [[352, "index-2"], [352, "index-3"], [352, "index-4"], [352, "index-5"], [352, "index-6"], [352, "index-8"]], "in template strings": [[352, "index-11"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[352, "string.Template.safe_substitute"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[352, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[352, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[352, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[352, "string.whitespace"]], "rfc 3454": [[353, "index-0"], [353, "index-1"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[353, "stringprep.map_table_b3"]], "stringprep": [[353, "module-stringprep"]], "@ (at)": [[354, "index-1"], [431, "index-28"], [431, "index-40"], [434, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[354, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[354, "struct.Struct.format"]], "in struct format strings": [[354, "index-1"], [354, "index-2"], [354, "index-3"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[354, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[354, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[354, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.pack_into"]], "packing": [[354, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[354, "struct.Struct.size"]], "structures": [[354, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[354, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[354, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[354, "struct.unpack_from"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[355, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[355, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[355, "index-0"], [470, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[355, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[355, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.SW_HIDE"]], "subprocesserror": [[355, "subprocess.SubprocessError"]], "systemroot": [[355, "index-4"]], "timeoutexpired": [[355, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[355, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[355, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[355, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[355, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[355, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[355, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[355, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[355, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[355, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[355, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[355, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[355, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[355, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[355, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[355, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[355, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[355, "module-subprocess"]], "subprocess module": [[355, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[355, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[355, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[355, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[356, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[356, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.setsampwidth"]], "sunau": [[356, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[356, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[356, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[358, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[358, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[358, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[358, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[358, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[358, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[358, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[358, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[358, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[358, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[358, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[358, "symtable.SymbolTable.lookup"]], "symtable": [[358, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[358, "symtable.symtable"]], "pep 3149": [[359, "index-0"], [477, "index-6"], [485, "index-215"]], "pep 421": [[359, "index-15"], [359, "index-16"], [478, "index-19"]], "pythonbreakpoint": [[359, "index-3"], [359, "index-4"], [359, "index-5"], [459, "envvar-PYTHONBREAKPOINT"], [482, "index-12"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._debugmallocstats"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._getframe"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.abiflags"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.addaudithook"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.audit"]], "auditing": [[359, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.base_prefix"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.byteorder"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.copyright"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.dllhandle"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.dont_write_bytecode"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.excepthook"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.gettrace"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.getwindowsversion"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.hash_info"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.hexversion"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.implementation"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.int_info"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.intern"]], "interpreter prompts": [[359, "index-26"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.is_finalizing"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.last_value"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.meta_path"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.modules"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.prefix"]], "profile function": [[359, "index-10"], [359, "index-27"], [370, "index-2"], [370, "index-3"]], "profiler": [[359, "index-10"], [359, "index-27"]], "prompts, interpreter": [[359, "index-26"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.ps2"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.pycache_prefix"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.settrace"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.stdout"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.thread_info"]], "trace function": [[359, "index-11"], [359, "index-28"], [370, "index-0"], [370, "index-1"]], "traceback": [[359, "index-8"], [385, "index-0"], [385, "module-traceback"], [431, "index-11"], [432, "index-62"], [440, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.unraisablehook"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.version_info"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.warnoptions"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[359, "sys.winver"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig._get_preferred_schemes"]], "configuration information": [[360, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[360, "sysconfig.parse_config_h"]], "sysconfig": [[360, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[361, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[361, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[361, "syslog.setlogmask"]], "syslog": [[361, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[361, "syslog.syslog"]], "nannynag": [[362, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[362, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[362, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[362, "tabnanny.process_tokens"]], "tabnanny": [[362, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[362, "tabnanny.verbose"]], "--create": [[363, "cmdoption-tarfile-create"], [426, "cmdoption-zipfile-create"]], "--extract": [[363, "cmdoption-tarfile-extract"], [426, "cmdoption-zipfile-extract"]], "--list": [[363, "cmdoption-tarfile-list"], [426, "cmdoption-zipfile-list"]], "--test": [[363, "cmdoption-tarfile-test"], [426, "cmdoption-zipfile-test"]], "--verbose": [[363, "cmdoption-tarfile-v"], [372, "cmdoption-timeit-v"], [392, "cmdoption-unittest-discover-v"]], "-c": [[363, "cmdoption-tarfile-c"], [384, "cmdoption-trace-C"], [384, "cmdoption-trace-c"], [392, "cmdoption-unittest-c"], [425, "cmdoption-zipapp-c"], [426, "cmdoption-zipfile-c"], [459, "cmdoption-c"]], "-t": [[363, "cmdoption-tarfile-t"], [384, "cmdoption-trace-T"], [384, "cmdoption-trace-t"], [392, "cmdoption-unittest-discover-t"], [426, "cmdoption-zipfile-t"]], "-v": [[363, "cmdoption-tarfile-v"], [372, "cmdoption-timeit-v"], [392, "cmdoption-unittest-discover-v"], [459, "cmdoption-V"], [459, "cmdoption-1"]], "compressionerror": [[363, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.DEFAULT_FORMAT"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.ENCODING"]], "extracterror": [[363, "tarfile.ExtractError"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.GNU_FORMAT"]], "headererror": [[363, "tarfile.HeaderError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.PAX_FORMAT"]], "readerror": [[363, "tarfile.ReadError"]], "streamerror": [[363, "tarfile.StreamError"]], "tarerror": [[363, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[363, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[363, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.addfile"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.close"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.extractfile"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[363, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[363, "tarfile.TarInfo.fromtarfile"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[363, "tarfile.TarFile.next"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[363, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[363, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[363, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.pax_headers"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.size"]], "tarfile": [[363, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[363, "cmdoption-tarfile-c"], [363, "cmdoption-tarfile-create"], [363, "cmdoption-tarfile-e"], [363, "cmdoption-tarfile-extract"], [363, "cmdoption-tarfile-l"], [363, "cmdoption-tarfile-list"], [363, "cmdoption-tarfile-t"], [363, "cmdoption-tarfile-test"], [363, "cmdoption-tarfile-v"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[363, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[363, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[364, "index-5"]], "rfc 854": [[364, "index-2"], [364, "index-3"]], "telnet": [[364, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[364, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[364, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[364, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[365, "tempfile.SpooledTemporaryFile"]], "temp": [[365, "index-8"], [465, "index-5"]], "tmp": [[365, "index-9"]], "tmpdir": [[365, "index-7"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[365, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.TemporaryFile"]], "file name": [[365, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.mktemp"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[365, "tempfile.tempdir"]], "tempfile": [[365, "module-tempfile"]], "temporary": [[365, "index-0"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcgetattr"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[366, "termios.tcsetattr"]], "termios": [[366, "module-termios"]], "tty": [[366, "index-0"], [387, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.ALWAYS_EQ"]], "basictestrunner (test.support \u4e2d\u7684\u985e\u5225)": [[367, "test.support.BasicTestRunner"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[367, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[367, "index-2"]], "resourcedenied": [[367, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[367, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[367, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[367, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[367, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[367, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[367, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.bind_unix_socket"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.findfile"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[367, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.get_original_stdout"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.make_zip_script"]], "match_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.match_test"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[367, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[367, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_gzip"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[367, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.rmtree"]], "run() (test.support.basictestrunner \u7684\u65b9\u6cd5)": [[367, "test.support.BasicTestRunner.run"]], "run_doctest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.run_doctest"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.run_python_until_end"]], "run_unittest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.run_unittest"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[367, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[367, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_match_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.set_match_tests"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.skip_unless_xattr"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.temp_umask"]], "test": [[367, "module-test"], [434, "index-80"], [434, "index-81"]], "test.support": [[367, "module-test.support"]], "test.support.bytecode_helper": [[367, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[367, "module-test.support.import_helper"]], "test.support.os_helper": [[367, "module-test.support.os_helper"]], "test.support.script_helper": [[367, "module-test.support.script_helper"]], "test.support.socket_helper": [[367, "module-test.support.socket_helper"]], "test.support.threading_helper": [[367, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[367, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[367, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[367, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[367, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[369, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[369, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[369, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[369, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[369, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[369, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.tabsize"]], "textwrap": [[369, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[369, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[369, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[369, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.BoundedSemaphore"]], "brokenbarriererror": [[370, "threading.BrokenBarrierError"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[370, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[370, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[370, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[370, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[370, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[370, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[370, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[370, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[370, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[370, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[370, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[370, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[370, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[370, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[370, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[370, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[370, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[370, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[370, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[370, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[370, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.setprofile"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.settrace"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[370, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[370, "threading.Thread.start"]], "threading": [[370, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[370, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[370, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[370, "threading.Condition.wait_for"]], "2-digit years": [[371, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.CLOCK_UPTIME_RAW"]], "cpu time": [[371, "index-12"], [371, "index-7"]], "coordinated universal time": [[371, "index-4"]], "daylight saving time": [[371, "index-5"]], "greenwich mean time": [[371, "index-4"]], "rfc 1123": [[371, "index-21"]], "tz": [[371, "index-13"], [371, "index-14"], [371, "index-15"], [371, "index-16"], [371, "index-17"], [371, "index-18"]], "utc": [[371, "index-4"]], "year 2038": [[371, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.asctime"]], "benchmarking": [[371, "index-12"], [371, "index-6"], [371, "index-7"], [372, "index-0"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.daylight"]], "epoch": [[371, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.process_time_ns"]], "processor time": [[371, "index-12"], [371, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[371, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[371, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.thread_time_ns"]], "time": [[371, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.timezone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[371, "time.tzset"]], "--number": [[372, "cmdoption-timeit-n"]], "--process": [[372, "cmdoption-timeit-p"]], "--repeat": [[372, "cmdoption-timeit-r"]], "--setup": [[372, "cmdoption-timeit-s"]], "--unit": [[372, "cmdoption-timeit-u"]], "-n": [[372, "cmdoption-timeit-n"]], "-u": [[372, "cmdoption-timeit-u"], [459, "cmdoption-u"]], "performance": [[372, "index-0"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[372, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[372, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[372, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[372, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[372, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[372, "timeit.repeat"]], "timeit": [[372, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[372, "cmdoption-timeit-h"], [372, "cmdoption-timeit-n"], [372, "cmdoption-timeit-p"], [372, "cmdoption-timeit-r"], [372, "cmdoption-timeit-s"], [372, "cmdoption-timeit-u"], [372, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[372, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[372, "timeit.timeit"]], "gui": [[373, "index-0"]], "graphical user interface": [[373, "index-0"]], "tk": [[373, "index-0"]], "tkinter": [[373, "index-0"], [374, "module-tkinter"]], "display": [[374, "index-0"], [434, "index-15"], [434, "index-16"], [434, "index-17"]], "exception (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[374, "tkinter.EXCEPTION"]], "readable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[374, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[374, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.Tk"]], "tk option data types": [[374, "index-4"]], "writable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[374, "tkinter.WRITABLE"]], "bind (widgets)": [[374, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[374, "tkinter.Tk.children"]], "createfilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[374, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[374, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[374, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[374, "tkinter.Tk.master"]], "packing (widgets)": [[374, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[374, "tkinter.Tk.tk"]], "window manager (widgets)": [[374, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[375, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[375, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[376, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[376, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[376, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[376, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[376, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[376, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[377, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[377, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[377, "tkinter.font.nametofont"]], "tkinter.font": [[377, "module-tkinter.font"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[378, "tkinter.messagebox.Message"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.askyesnocancel"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[378, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[378, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[379, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[379, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[379, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[379, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.TList"]], "tix": [[380, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[380, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[380, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[380, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[381, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[381, "module-tkinter.ttk"]], "ttk": [[381, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[381, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ERRORTOKEN"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[382, "token.tok_name"]], "token": [[382, "module-token"], [439, "index-0"]], "--exact": [[383, "cmdoption-tokenize-e"]], "tokenerror": [[383, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[383, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[383, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[383, "tokenize.open"]], "tokenize": [[383, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[383, "cmdoption-tokenize-e"], [383, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[383, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[383, "tokenize.untokenize"]], "--count": [[384, "cmdoption-trace-c"]], "--coverdir": [[384, "cmdoption-trace-C"]], "--file": [[384, "cmdoption-trace-f"]], "--ignore-dir": [[384, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[384, "cmdoption-trace-ignore-module"]], "--listfuncs": [[384, "cmdoption-trace-l"]], "--missing": [[384, "cmdoption-trace-m"]], "--no-report": [[384, "cmdoption-trace-R"]], "--report": [[384, "cmdoption-trace-r"]], "--summary": [[384, "cmdoption-trace-s"]], "--timing": [[384, "cmdoption-trace-g"]], "--trace": [[384, "cmdoption-trace-t"]], "--trackcalls": [[384, "cmdoption-trace-T"]], "--version": [[384, "cmdoption-trace-version"], [459, "cmdoption-version"]], "-g": [[384, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[384, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[384, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[384, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[384, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[384, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[384, "trace.Trace.runfunc"]], "trace": [[384, "module-trace"], [432, "index-62"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[384, "cmdoption-trace-C"], [384, "cmdoption-trace-R"], [384, "cmdoption-trace-T"], [384, "cmdoption-trace-c"], [384, "cmdoption-trace-f"], [384, "cmdoption-trace-g"], [384, "cmdoption-trace-help"], [384, "cmdoption-trace-ignore-dir"], [384, "cmdoption-trace-ignore-module"], [384, "cmdoption-trace-l"], [384, "cmdoption-trace-m"], [384, "cmdoption-trace-r"], [384, "cmdoption-trace-s"], [384, "cmdoption-trace-t"], [384, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[384, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[384, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[385, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[385, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[385, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.__context__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.clear_frames"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.exc_type"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[385, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.extract_tb"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[385, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[385, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[385, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_exception_only"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[385, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[385, "traceback.StackSummary.from_list"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.msg"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.offset"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[385, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[385, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[386, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[386, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[386, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[386, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[386, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[386, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[386, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[386, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[386, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[386, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[386, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[386, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[386, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[386, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[386, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[386, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[386, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[386, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[386, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[386, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[386, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[386, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[386, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[386, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[386, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[386, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[386, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[386, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[386, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[386, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[386, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[386, "tracemalloc.Snapshot.traces"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[387, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[387, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[388, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[388, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.stamp"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.tracer"]], "turtle": [[388, "module-turtle"]], "turtledemo": [[388, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[388, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[389, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[389, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[389, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[389, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.NotImplementedType"]], "pep 3115": [[389, "index-0"], [431, "index-42"], [432, "index-86"], [474, "index-14"], [478, "index-29"]], "pep 560": [[389, "index-1"], [389, "index-2"], [432, "index-83"], [432, "index-92"], [482, "index-21"], [482, "index-33"], [485, "index-156"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[389, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[389, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[389, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[389, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[389, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[389, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[389, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[389, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[389, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[389, "types.MappingProxyType.get"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[389, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[389, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.prepare_class"]], "replace() (types.codetype \u7684\u65b9\u6cd5)": [[389, "types.CodeType.replace"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[389, "types.resolve_bases"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[389, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Literal"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.NamedTuple"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.NoReturn"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.OrderedDict"]], "pep 544": [[390, "index-20"], [390, "index-36"], [390, "index-5"], [483, "index-18"]], "pep 586": [[390, "index-29"], [390, "index-7"], [476, "index-30"], [483, "index-16"], [484, "index-27"]], "pep 589": [[390, "index-39"], [390, "index-8"], [483, "index-15"]], "pep 591": [[390, "index-31"], [390, "index-75"], [390, "index-9"], [483, "index-17"]], "pep 593": [[390, "index-10"], [390, "index-32"], [390, "index-83"], [484, "index-17"], [484, "index-5"], [485, "index-117"]], "pep 612": [[390, "index-12"], [390, "index-16"], [390, "index-17"], [390, "index-25"], [390, "index-26"], [390, "index-35"], [476, "index-21"], [476, "index-7"], [485, "index-15"], [485, "index-17"], [485, "index-32"], [485, "index-35"], [485, "index-37"]], "pep 613": [[390, "index-13"], [390, "index-22"], [476, "index-43"], [476, "index-6"], [485, "index-54"]], "pep 647": [[390, "index-14"], [390, "index-33"], [476, "index-24"], [485, "index-18"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Protocol"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Reversible"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.TypeAlias"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.TypeVar"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.Union"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[390, "typing.ValuesView"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[390, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[390, "typing.TypedDict.__required_keys__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[390, "typing.TypedDict.__total__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[390, "typing.ParamSpec.args"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.cast"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.get_origin"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[390, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.overload"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[390, "typing.type_check_only"]], "typing": [[390, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.category"]], "character": [[391, "index-0"], [432, "index-19"], [434, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.combining"]], "database": [[391, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.ucd_3_2_0"]], "unicodedata": [[391, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[391, "unicodedata.unidata_version"]], "--buffer": [[392, "cmdoption-unittest-b"]], "--catch": [[392, "cmdoption-unittest-c"]], "--failfast": [[392, "cmdoption-unittest-f"]], "--locals": [[392, "cmdoption-unittest-locals"]], "--pattern": [[392, "cmdoption-unittest-discover-p"]], "--start-directory": [[392, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[392, "cmdoption-unittest-discover-t"]], "-k": [[392, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[392, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[392, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[392, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[392, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[392, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.addCleanup"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[392, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[392, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.buffer"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[392, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.doModuleCleanups"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[392, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[392, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[392, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[392, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[392, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[392, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[392, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[392, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[392, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[392, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[392, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[392, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[392, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[392, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[392, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[392, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[392, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[392, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[392, "cmdoption-unittest-b"], [392, "cmdoption-unittest-c"], [392, "cmdoption-unittest-f"], [392, "cmdoption-unittest-k"], [392, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[392, "cmdoption-unittest-discover-p"], [392, "cmdoption-unittest-discover-s"], [392, "cmdoption-unittest-discover-t"], [392, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[392, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[393, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[393, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[393, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[393, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[393, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[393, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[393, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[393, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[393, "module-unittest.mock"]], "urllib": [[396, "module-urllib"]], "contenttooshorterror": [[397, "urllib.error.ContentTooShortError"]], "httperror": [[397, "urllib.error.HTTPError"]], "urlerror": [[397, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[397, "urllib.error.HTTPError.code"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[397, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[397, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[397, "urllib.error.URLError.reason"]], "urllib.error": [[397, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[398, "index-12"]], "rfc 1808": [[398, "index-1"], [398, "index-11"], [480, "index-45"]], "rfc 2368": [[398, "index-10"]], "rfc 2396": [[398, "index-3"], [398, "index-5"], [398, "index-9"], [480, "index-46"], [482, "index-34"]], "rfc 2732": [[398, "index-8"], [473, "index-11"], [477, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[398, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[398, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.parse_qsl"]], "parsing": [[398, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.quote_plus"]], "relative": [[398, "index-0"], [440, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urljoin"]], "urllib.parse": [[398, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[398, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.ProxyHandler"]], "rfc 2397": [[399, "index-8"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[399, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[399, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[399, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[399, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[399, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[399, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.get_method"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.getproxies"]], "getstatus() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[399, "urllib.response.addinfourl.getstatus"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[399, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[399, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[399, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.method"]], "no_proxy": [[399, "index-4"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[399, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[399, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[399, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[399, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[399, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[399, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[399, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[399, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[399, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[399, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[399, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[399, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.urlcleanup"]], "urllib.response": [[399, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[399, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[399, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[400, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[400, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[400, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[400, "module-urllib.robotparser"]], "ellinghouse, lance": [[401, "index-1"]], "jansen, jack": [[401, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[401, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[401, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[401, "uu.encode"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[402, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[402, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.bytes_le"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.fields"]], "getnode": [[402, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.is_safe"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[402, "uuid.SafeUUID.safe"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[402, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[402, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.urn"]], "uuid": [[402, "module-uuid"]], "uuid1": [[402, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.uuid1"]], "uuid3": [[402, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.uuid3"]], "uuid4": [[402, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.uuid4"]], "uuid5": [[402, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[402, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[402, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[403, "venv.EnvBuilder"]], "environments": [[403, "index-0"]], "pep 397": [[403, "index-3"], [465, "index-17"], [478, "index-9"], [480, "index-22"]], "pep 405": [[403, "index-5"], [478, "index-1"]], "virtual_env": [[403, "index-2"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[403, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[403, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[403, "module-venv"]], "virtual": [[403, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[404, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[404, "warnings.warn_explicit"]], "warnings": [[404, "index-0"], [404, "module-warnings"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[405, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[405, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.tell"]], "wave": [[405, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[405, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.CallableProxyType"]], "pep 205": [[406, "index-2"], [467, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[406, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[406, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[406, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[406, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[406, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[406, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[406, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[406, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[406, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[406, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[406, "module-weakref"]], "browser": [[407, "index-0"], [407, "index-1"]], "kdedir": [[407, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[407, "webbrowser.get"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[407, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[407, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[407, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[407, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[407, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[407, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[407, "webbrowser.register"]], "webbrowser": [[407, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[409, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[409, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[409, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[409, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[409, "winreg.PyHKEY.__exit__"]], "winreg": [[409, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[410, "winsound.SND_PURGE"]], "winsound": [[410, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.handlers.CGIHandler"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.handlers.IISCGIHandler"]], "pep 3333": [[411, "index-0"], [411, "index-1"], [411, "index-11"], [411, "index-12"], [411, "index-13"], [411, "index-14"], [411, "index-15"], [411, "index-16"], [411, "index-2"], [411, "index-3"], [411, "index-4"], [411, "index-6"], [411, "index-7"], [411, "index-8"], [411, "index-9"], [477, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.handlers.SimpleHandler"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[411, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[411, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[411, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[411, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[411, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[411, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[411, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[411, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[411, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[411, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[411, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[411, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[411, "module-wsgiref"]], "wsgiref.handlers": [[411, "module-wsgiref.handlers"]], "wsgiref.headers": [[411, "module-wsgiref.headers"]], "wsgiref.simple_server": [[411, "module-wsgiref.simple_server"]], "wsgiref.util": [[411, "module-wsgiref.util"]], "wsgiref.validate": [[411, "module-wsgiref.validate"]], "conversionerror": [[412, "xdrlib.ConversionError"]], "pep 594#xdrlib": [[412, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[412, "xdrlib.Packer"]], "rfc 1014": [[412, "index-2"], [412, "index-3"]], "rfc 1832": [[412, "index-4"], [412, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[412, "xdrlib.Unpacker"]], "xdr": [[412, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[412, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[412, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[412, "module-xdrlib"]], "xml": [[413, "module-xml"]], "domexception": [[414, "xml.dom.DOMException"]], "domstringsizeerr": [[414, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[414, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[414, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[414, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[414, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[414, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[414, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[414, "xml.dom.InvalidStateErr"]], "namespaceerr": [[414, "xml.dom.NamespaceErr"]], "nodataallowederr": [[414, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[414, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[414, "xml.dom.NotFoundErr"]], "notsupportederr": [[414, "xml.dom.NotSupportedErr"]], "python_dom": [[414, "index-0"]], "syntaxerr": [[414, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[414, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[414, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[414, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[414, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[414, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[414, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[414, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[414, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[414, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[414, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[414, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[414, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[414, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[414, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[414, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[414, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[414, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[414, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[414, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[414, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[414, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[414, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[414, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[414, "xml.dom.Attr.value"]], "xml.dom": [[414, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[415, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[415, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[415, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[415, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[415, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[415, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[415, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[416, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[416, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[416, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[416, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[416, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[416, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[416, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[416, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[416, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[416, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[417, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.data"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.findtext"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.getroot"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[417, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[417, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[417, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude.default_loader()": [[417, "xml.etree.ElementInclude.default_loader"]], "xml.etree.elementinclude.include()": [[417, "xml.etree.ElementInclude.include"]], "xml.etree.elementtree": [[417, "module-xml.etree.ElementTree"]], "saxexception": [[418, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[418, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[418, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[418, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[418, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[418, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[418, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[418, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[418, "xml.sax.parseString"]], "xml.sax": [[418, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[419, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[419, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[419, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[419, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[419, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[419, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[419, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[419, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[420, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[420, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[420, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[421, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[421, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[421, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[421, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[421, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[421, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[421, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[423, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[423, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[423, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[423, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[423, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[423, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[423, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[424, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[424, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[424, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[424, "module-xmlrpc.server"]], "--compress": [[425, "cmdoption-zipapp-c"]], "--info": [[425, "cmdoption-zipapp-info"]], "--main": [[425, "cmdoption-zipapp-m"]], "--python": [[425, "cmdoption-zipapp-p"]], "executable zip files": [[425, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[425, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[425, "zipapp.get_interpreter"]], "zipapp": [[425, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[425, "cmdoption-zipapp-c"], [425, "cmdoption-zipapp-h"], [425, "cmdoption-zipapp-info"], [425, "cmdoption-zipapp-m"], [425, "cmdoption-zipapp-o"], [425, "cmdoption-zipapp-p"]], "badzipfile": [[426, "zipfile.BadZipFile"], [426, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.CRC"]], "largezipfile": [[426, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[426, "zipfile.Path"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[426, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[426, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[426, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[426, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[426, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[426, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[426, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[426, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[426, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[426, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[426, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[426, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.joinpath"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[426, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[426, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[426, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[426, "zipfile.ZipFile.writestr"]], "zipfile": [[426, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[426, "cmdoption-zipfile-c"], [426, "cmdoption-zipfile-create"], [426, "cmdoption-zipfile-e"], [426, "cmdoption-zipfile-extract"], [426, "cmdoption-zipfile-l"], [426, "cmdoption-zipfile-list"], [426, "cmdoption-zipfile-t"], [426, "cmdoption-zipfile-test"]], "pep 273": [[427, "index-0"], [427, "index-1"], [469, "index-4"], [469, "index-5"]], "zipimporterror": [[427, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[427, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.exec_module"]], "find_loader() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.find_loader"]], "find_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.find_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[427, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[427, "zipimport.zipimporter.prefix"]], "zipimport": [[427, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[427, "zipimport.zipimporter"]], "cyclic redundancy check": [[428, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.adler32"]], "checksum": [[428, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[428, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[428, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[428, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[428, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[428, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[428, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[428, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[428, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[428, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[428, "zlib.Decompress.unused_data"]], "zlib": [[428, "module-zlib"]], "invalidtzpathwarning": [[429, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[429, "index-1"], [481, "index-17"], [481, "index-18"], [485, "index-191"]], "pep 615": [[429, "index-0"], [484, "index-16"], [484, "index-9"], [485, "index-81"]], "pythontzpath": [[429, "envvar-PYTHONTZPATH"], [429, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[429, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[429, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[429, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[429, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[429, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[429, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[429, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[429, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[429, "zoneinfo.reset_tzpath"]], "zoneinfo": [[429, "module-zoneinfo"]], "! patterns": [[431, "index-22"]], "->": [[431, "index-33"], [445, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[431, "index-22"]], "dedent token": [[431, "index-2"], [439, "index-9"]], "newline token": [[431, "index-2"], [439, "index-3"]], "pep 3107": [[431, "index-35"], [445, "index-16"], [474, "index-6"], [480, "index-9"], [482, "index-0"]], "pep 3129": [[431, "index-43"], [472, "index-18"]], "pep 318": [[431, "index-44"], [470, "index-12"], [470, "index-4"], [470, "index-5"]], "pep 570": [[431, "index-32"], [483, "index-23"], [483, "index-32"], [485, "index-132"]], "pep 614": [[431, "index-29"], [431, "index-41"], [484, "index-15"], [484, "index-3"], [485, "index-104"]], "pep 636": [[431, "index-19"], [431, "index-25"], [445, "index-15"], [476, "index-16"], [476, "index-2"]], "annotations": [[431, "index-33"], [445, "index-6"]], "as": [[431, "index-10"], [431, "index-15"], [431, "index-17"], [431, "index-9"], [440, "index-34"], [440, "index-35"]], "async": [[431, "index-46"]], "async def": [[431, "index-45"]], "async for": [[431, "index-47"], [434, "index-12"]], "async with": [[431, "index-48"]], "await": [[431, "index-46"], [434, "index-13"], [434, "index-57"]], "binding": [[431, "index-27"], [431, "index-39"], [433, "index-4"], [440, "index-34"], [440, "index-36"], [440, "index-4"], [440, "index-43"]], "break": [[431, "index-12"], [431, "index-14"], [431, "index-5"], [431, "index-7"], [440, "index-30"]], "case": [[431, "index-17"], [431, "index-17"]], "case block": [[431, "index-21"]], "class": [[431, "index-39"], [432, "index-45"], [432, "index-46"], [432, "index-49"], [432, "index-69"], [432, "index-87"], [434, "index-54"], [440, "index-24"]], "class definition": [[431, "index-39"], [431, "index-40"], [432, "index-82"]], "clause": [[431, "index-1"]], "compound": [[431, "index-0"]], "compound statement": [[431, "index-15"], [431, "index-17"], [431, "index-27"], [431, "index-3"], [431, "index-39"], [431, "index-4"], [431, "index-6"], [431, "index-9"]], "continue": [[431, "index-12"], [431, "index-14"], [431, "index-5"], [431, "index-7"], [440, "index-33"]], "dangling": [[431, "index-2"]], "def": [[431, "index-27"]], "default": [[431, "index-30"]], "definition": [[431, "index-27"], [431, "index-39"], [440, "index-24"]], "docstring": [[431, "index-39"]], "elif": [[431, "index-3"]], "else": [[431, "index-12"], [431, "index-2"], [431, "index-3"], [431, "index-4"], [431, "index-6"], [431, "index-9"], [434, "index-88"], [440, "index-31"]], "except clause": [[431, "index-10"]], "execution": [[431, "index-39"], [432, "index-62"], [433, "index-11"], [433, "index-2"]], "expression": [[431, "index-34"], [434, "index-0"], [434, "index-22"], [434, "index-23"], [434, "index-82"], [434, "index-88"], [434, "index-90"], [434, "index-91"], [440, "index-1"], [440, "index-2"]], "expression list": [[431, "index-39"], [434, "index-15"], [434, "index-16"], [434, "index-91"], [440, "index-18"]], "finally": [[431, "index-13"], [431, "index-9"], [440, "index-25"], [440, "index-32"], [440, "index-33"]], "for": [[431, "index-6"], [434, "index-12"], [440, "index-30"], [440, "index-33"], [445, "index-0"]], "frame": [[431, "index-39"], [432, "index-59"], [433, "index-2"]], "function annotations": [[431, "index-33"], [445, "index-6"]], "function definition": [[431, "index-26"], [431, "index-27"], [431, "index-28"], [431, "index-30"], [431, "index-31"]], "guard": [[431, "index-20"]], "inheritance": [[431, "index-39"]], "irrefutable case block": [[431, "index-21"]], "match": [[431, "index-17"], [431, "index-17"]], "name": [[431, "index-27"], [431, "index-39"], [433, "index-4"], [434, "index-3"], [434, "index-5"], [439, "index-10"], [440, "index-22"], [440, "index-34"], [440, "index-36"], [440, "index-4"], [440, "index-43"], [444, "index-1"]], "parameter list": [[431, "index-27"]], "pattern matching": [[431, "index-17"]], "return": [[431, "index-12"], [431, "index-14"], [440, "index-24"]], "statement": [[431, "index-0"], [431, "index-4"], [431, "index-6"], [432, "index-22"], [440, "index-0"], [440, "index-1"], [440, "index-14"], [440, "index-15"], [440, "index-30"], [440, "index-33"], [440, "index-4"], [440, "index-40"]], "suite": [[431, "index-1"]], "target": [[431, "index-6"], [440, "index-21"], [440, "index-31"], [440, "index-5"], [440, "index-6"]], "user-defined function": [[431, "index-27"], [432, "index-33"], [434, "index-52"]], "with": [[431, "index-15"], [432, "index-102"]], "with statement": [[431, "index-15"]], "\u95dc\u9375\u5b57": [[431, "index-12"], [431, "index-13"], [431, "index-15"], [431, "index-17"], [431, "index-17"], [431, "index-3"], [431, "index-4"], [431, "index-46"], [431, "index-6"], [431, "index-9"], [434, "index-23"], [434, "index-57"], [440, "index-25"], [440, "index-31"], [440, "index-32"], [440, "index-33"], [440, "index-34"]], "ellipsis": [[432, "index-8"]], "java": [[432, "index-13"]], "notimplemented": [[432, "index-7"]], "pep 252": [[432, "index-81"], [468, "index-2"], [468, "index-4"]], "pep 3135": [[432, "index-89"], [474, "index-31"]], "pep 562": [[432, "index-110"], [482, "index-16"], [485, "index-152"], [485, "index-157"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[432, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[432, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[432, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[432, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[432, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[432, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[432, "object.__anext__"]], "__annotations__ (class attribute)": [[432, "index-48"]], "__annotations__ (function attribute)": [[432, "index-34"]], "__annotations__ (module attribute)": [[432, "index-43"]], "__await__() (object \u7684\u65b9\u6cd5)": [[432, "object.__await__"]], "__bases__ (class attribute)": [[432, "index-48"]], "__bool__() (object method)": [[432, "index-94"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[432, "object.__bool__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[432, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[432, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ceil__"]], "__class__ (instance attribute)": [[432, "index-52"]], "__class__ (method cell)": [[432, "index-88"]], "__class__ (module attribute)": [[432, "index-79"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[432, "object.__class_getitem__"]], "__classcell__ (class namespace entry)": [[432, "index-88"]], "__closure__ (function attribute)": [[432, "index-34"]], "__code__ (function attribute)": [[432, "index-34"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[432, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[432, "object.__contains__"]], "__defaults__ (function attribute)": [[432, "index-34"]], "__del__() (object \u7684\u65b9\u6cd5)": [[432, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[432, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[432, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[432, "object.__delitem__"]], "__dict__ (class attribute)": [[432, "index-48"]], "__dict__ (function attribute)": [[432, "index-34"]], "__dict__ (instance attribute)": [[432, "index-52"]], "__dir__ (module attribute)": [[432, "index-79"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[432, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[432, "object.__divmod__"]], "__doc__ (class attribute)": [[432, "index-48"]], "__doc__ (function attribute)": [[432, "index-34"]], "__doc__ (method attribute)": [[432, "index-36"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[432, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[432, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[432, "object.__exit__"]], "__float__() (object \u7684\u65b9\u6cd5)": [[432, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[432, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__floordiv__"]], "__format__() (object method)": [[432, "index-74"]], "__format__() (object \u7684\u65b9\u6cd5)": [[432, "object.__format__"]], "__func__ (method attribute)": [[432, "index-36"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[432, "object.__get__"]], "__getattr__ (module attribute)": [[432, "index-79"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[432, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[432, "object.__getattribute__"]], "__getitem__() (mapping object method)": [[432, "index-67"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[432, "object.__getitem__"]], "__globals__ (function attribute)": [[432, "index-34"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[432, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[432, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[432, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[432, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[432, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[432, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[432, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[432, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[432, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[432, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[432, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[432, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[432, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ixor__"]], "__kwdefaults__ (function attribute)": [[432, "index-34"]], "__le__() (object \u7684\u65b9\u6cd5)": [[432, "object.__le__"]], "__len__() (mapping object method)": [[432, "index-78"]], "__len__() (object \u7684\u65b9\u6cd5)": [[432, "object.__len__"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[432, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[432, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[432, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[432, "object.__mod__"]], "__module__ (class attribute)": [[432, "index-48"]], "__module__ (function attribute)": [[432, "index-34"]], "__module__ (method attribute)": [[432, "index-36"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__mul__"]], "__name__ (class attribute)": [[432, "index-48"]], "__name__ (function attribute)": [[432, "index-34"]], "__name__ (method attribute)": [[432, "index-36"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[432, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[432, "object.__new__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[432, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[432, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[432, "object.__pow__"]], "__prepare__ (metaclass method)": [[432, "index-85"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[432, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rdivmod__"]], "__repr__() (object method)": [[432, "index-71"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[432, "object.__repr__"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[432, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[432, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[432, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[432, "object.__rxor__"]], "__self__ (method attribute)": [[432, "index-36"]], "__set__() (object \u7684\u65b9\u6cd5)": [[432, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[432, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[432, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[432, "object.__setitem__"]], "__str__() (object method)": [[432, "index-72"]], "__str__() (object \u7684\u65b9\u6cd5)": [[432, "object.__str__"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[432, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[432, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[432, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[432, "object.__trunc__"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[432, "object.__xor__"]], "asynchronous generator": [[432, "index-39"]], "asynchronous iterator": [[432, "index-39"]], "attribute": [[432, "index-45"], [432, "index-46"], [432, "index-49"], [432, "index-5"], [432, "index-50"], [434, "index-39"], [440, "index-23"], [440, "index-4"], [440, "index-8"]], "body": [[432, "index-87"]], "built-in function": [[432, "index-40"], [434, "index-53"]], "built-in method": [[432, "index-41"], [434, "index-53"]], "byte": [[432, "index-21"]], "bytecode": [[432, "index-55"]], "call": [[432, "index-32"], [432, "index-45"], [432, "index-47"], [432, "index-93"], [434, "index-47"], [434, "index-52"], [434, "index-53"], [434, "index-54"], [434, "index-55"], [434, "index-56"], [440, "index-3"]], "callable": [[432, "index-32"], [434, "index-47"]], "chr": [[432, "index-19"]], "class instance": [[432, "index-45"], [432, "index-49"], [432, "index-50"], [434, "index-55"]], "class object": [[432, "index-45"], [432, "index-47"], [434, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[432, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[432, "coroutine.close"]], "co_argcount (code object attribute)": [[432, "index-56"]], "co_cellvars (code object attribute)": [[432, "index-56"]], "co_code (code object attribute)": [[432, "index-56"]], "co_consts (code object attribute)": [[432, "index-56"]], "co_filename (code object attribute)": [[432, "index-56"]], "co_firstlineno (code object attribute)": [[432, "index-56"]], "co_flags (code object attribute)": [[432, "index-56"]], "co_freevars (code object attribute)": [[432, "index-56"]], "co_kwonlyargcount (code object attribute)": [[432, "index-56"]], "co_lnotab (code object attribute)": [[432, "index-56"]], "co_name (code object attribute)": [[432, "index-56"]], "co_names (code object attribute)": [[432, "index-56"]], "co_nlocals (code object attribute)": [[432, "index-56"]], "co_posonlyargcount (code object attribute)": [[432, "index-56"]], "co_stacksize (code object attribute)": [[432, "index-56"]], "co_varnames (code object attribute)": [[432, "index-56"]], "constructor": [[432, "index-69"]], "conversion": [[432, "index-74"], [434, "index-1"], [440, "index-3"]], "coroutine": [[432, "index-105"], [432, "index-38"], [434, "index-24"]], "destructor": [[432, "index-70"], [440, "index-7"]], "documentation string": [[432, "index-58"]], "exc_info (in module sys)": [[432, "index-62"]], "extension": [[432, "index-4"]], "f_back (frame attribute)": [[432, "index-60"]], "f_builtins (frame attribute)": [[432, "index-60"]], "f_code (frame attribute)": [[432, "index-60"]], "f_globals (frame attribute)": [[432, "index-60"]], "f_lasti (frame attribute)": [[432, "index-60"]], "f_lineno (frame attribute)": [[432, "index-61"]], "f_locals (frame attribute)": [[432, "index-60"]], "f_trace (frame attribute)": [[432, "index-61"]], "f_trace_lines (frame attribute)": [[432, "index-61"]], "f_trace_opcodes (frame attribute)": [[432, "index-61"]], "finalizer": [[432, "index-70"]], "garbage collection": [[432, "index-2"]], "global": [[432, "index-34"], [440, "index-22"], [440, "index-43"], [440, "index-43"]], "handler": [[432, "index-62"]], "hierarchy": [[432, "index-4"]], "identity of an object": [[432, "index-1"]], "immutable object": [[432, "index-1"]], "immutable sequence": [[432, "index-17"]], "immutable sequences": [[432, "index-18"]], "immutable types": [[432, "index-68"]], "index operation": [[432, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[432, "slice.indices"]], "instance": [[432, "index-45"], [432, "index-49"], [432, "index-93"], [434, "index-55"], [434, "index-56"]], "internal type": [[432, "index-54"]], "invocation": [[432, "index-32"]], "item selection": [[432, "index-15"]], "last_traceback (in module sys)": [[432, "index-62"]], "makefile() (socket method)": [[432, "index-53"]], "metaclass": [[432, "index-82"]], "metaclass hint": [[432, "index-84"]], "mutable object": [[432, "index-1"]], "namespace": [[432, "index-34"], [432, "index-43"], [433, "index-3"], [436, "index-5"]], "number": [[432, "index-13"], [432, "index-14"], [439, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[432, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[432, "object.__slots__"]], "open": [[432, "index-53"], [450, "index-0"]], "ord": [[432, "index-19"]], "overloading": [[432, "index-67"]], "print": [[432, "index-74"]], "print() (built-in function)": [[432, "index-72"]], "reference counting": [[432, "index-2"]], "repr() (built-in function)": [[432, "index-71"]], "representation": [[432, "index-12"]], "round": [[432, "index-101"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[432, "coroutine.send"]], "set type": [[432, "index-26"]], "singleton": [[432, "index-20"]], "slicing": [[432, "index-16"], [432, "index-22"], [434, "index-44"], [440, "index-12"]], "stack": [[432, "index-62"]], "start (slice object attribute)": [[432, "index-66"], [434, "index-46"]], "stdio": [[432, "index-53"]], "step (slice object attribute)": [[432, "index-66"], [434, "index-46"]], "stop (slice object attribute)": [[432, "index-66"], [434, "index-46"]], "subclassing": [[432, "index-68"]], "subscription": [[432, "index-15"], [432, "index-22"], [432, "index-29"], [434, "index-41"], [440, "index-9"]], "sys.exc_info": [[432, "index-62"]], "sys.last_traceback": [[432, "index-62"]], "sys.stderr": [[432, "index-53"]], "sys.stdin": [[432, "index-53"]], "sys.stdout": [[432, "index-53"]], "tb_frame (traceback attribute)": [[432, "index-63"]], "tb_lasti (traceback attribute)": [[432, "index-63"]], "tb_lineno (traceback attribute)": [[432, "index-63"]], "tb_next (traceback attribute)": [[432, "index-64"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[432, "coroutine.throw"]], "type of an object": [[432, "index-1"]], "types, internal": [[432, "index-54"]], "unreachable object": [[432, "index-2"]], "user-defined": [[432, "index-33"], [432, "index-35"], [434, "index-52"]], "user-defined method": [[432, "index-35"]], "value of an object": [[432, "index-1"]], "nameerror (built-in exception)": [[433, "index-9"]], "systemexit (built-in exception)": [[433, "index-15"]], "block": [[433, "index-0"], [433, "index-1"]], "environment": [[433, "index-8"]], "error handling": [[433, "index-13"]], "exception handler": [[433, "index-13"]], "execution model": [[433, "index-0"]], "free": [[433, "index-6"]], "from": [[433, "index-5"], [434, "index-23"], [434, "index-25"], [440, "index-34"], [440, "index-36"]], "handle an exception": [[433, "index-13"]], "import statement": [[433, "index-5"], [440, "index-34"], [440, "index-35"], [440, "index-36"], [440, "index-37"]], "raise an exception": [[433, "index-13"]], "scope": [[433, "index-3"], [433, "index-7"]], "termination model": [[433, "index-14"]], "variable": [[433, "index-6"]], ":= (colon equals)": [[434, "index-86"]], "bnf": [[434, "index-0"], [438, "index-0"]], "conditional": [[434, "index-82"], [434, "index-88"]], "pep 308": [[434, "index-89"], [471, "index-1"], [471, "index-2"]], "pep 380": [[434, "index-28"], [478, "index-12"]], "pep 448": [[434, "index-19"], [434, "index-51"], [434, "index-94"], [480, "index-5"], [480, "index-6"], [485, "index-199"], [485, "index-210"], [485, "index-211"], [485, "index-212"]], "pep 530": [[434, "index-14"], [481, "index-11"], [481, "index-12"], [485, "index-185"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[434, "agen.__anext__"]], "__call__() (object method)": [[434, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[434, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[434, "agen.aclose"]], "addition": [[434, "index-69"]], "anonymous": [[434, "index-90"]], "argument list": [[434, "index-47"]], "asend() (agen \u7684\u65b9\u6cd5)": [[434, "agen.asend"]], "assignment expression": [[434, "index-86"]], "asynchronous-generator": [[434, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[434, "agen.athrow"]], "atom": [[434, "index-2"]], "attribute reference": [[434, "index-39"]], "call semantics": [[434, "index-47"], [434, "index-48"]], "close() (generator \u7684\u65b9\u6cd5)": [[434, "generator.close"]], "comma": [[434, "index-10"], [434, "index-95"]], "comprehensions": [[434, "index-11"], [434, "index-15"], [434, "index-16"], [434, "index-17"]], "conditional expression": [[434, "index-88"]], "datum": [[434, "index-17"]], "dictionary expression": [[434, "index-17"]], "division": [[434, "index-67"]], "evaluation": [[434, "index-96"]], "examples": [[434, "index-34"]], "exclusive": [[434, "index-75"]], "form": [[434, "index-90"]], "hashable": [[434, "index-20"]], "identifier": [[434, "index-3"], [439, "index-10"]], "identity": [[434, "index-81"]], "in comprehensions": [[434, "index-12"], [434, "index-13"]], "in dictionary displays": [[434, "index-17"], [434, "index-18"]], "in dictionary expressions": [[434, "index-17"]], "in expression lists": [[434, "index-93"]], "in function calls": [[434, "index-47"], [434, "index-49"], [434, "index-50"], [445, "index-3"], [445, "index-4"]], "inclusive": [[434, "index-76"]], "inversion": [[434, "index-62"]], "item": [[434, "index-42"], [434, "index-43"]], "iterable": [[434, "index-93"]], "key": [[434, "index-17"]], "key/datum pair": [[434, "index-17"]], "lambda expression": [[434, "index-90"]], "list expression": [[434, "index-15"]], "literal": [[434, "index-6"], [439, "index-16"]], "mangling": [[434, "index-5"], [444, "index-1"]], "matrix multiplication": [[434, "index-66"]], "membership": [[434, "index-80"]], "minus": [[434, "index-60"]], "modulo": [[434, "index-68"]], "multiplication": [[434, "index-65"]], "named expression": [[434, "index-86"]], "names": [[434, "index-5"]], "negation": [[434, "index-60"]], "order": [[434, "index-96"]], "parenthesized form": [[434, "index-8"]], "plus": [[434, "index-61"]], "power": [[434, "index-58"]], "precedence": [[434, "index-97"]], "primary": [[434, "index-38"]], "private": [[434, "index-5"]], "reference": [[434, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[434, "generator.send"]], "set expression": [[434, "index-16"]], "subtraction": [[434, "index-70"]], "ternary": [[434, "index-88"]], "throw() (generator \u7684\u65b9\u6cd5)": [[434, "generator.throw"]], "trailing": [[434, "index-95"]], "tuple display": [[434, "index-8"]], "unary": [[434, "index-59"]], "unpacking": [[434, "index-18"], [434, "index-49"], [434, "index-93"]], "walrus operator": [[434, "index-86"]], "xor": [[434, "index-75"]], "yield": [[434, "index-23"], [434, "index-34"], [440, "index-26"], [478, "index-11"]], "yield from expression": [[434, "index-25"]], "\u4f8b\u5916": [[434, "index-32"], [434, "index-33"], [434, "index-36"], [434, "index-37"], [434, "index-4"], [434, "index-40"], [434, "index-63"], [434, "index-67"], [434, "index-72"], [440, "index-19"], [440, "index-26"], [440, "index-34"]], "__cached__": [[436, "cached__"]], "__file__": [[436, "file__"]], "__loader__": [[436, "loader__"]], "__name__": [[436, "name__"]], "__package__": [[436, "package__"]], "__path__": [[436, "path__"]], "__spec__": [[436, "spec__"]], "find_spec": [[436, "index-10"]], "finder": [[436, "index-10"], [436, "index-8"]], "hooks": [[436, "index-9"]], "import hooks": [[436, "index-9"]], "import machinery": [[436, "index-0"]], "loader": [[436, "index-8"]], "meta": [[436, "index-9"]], "meta hooks": [[436, "index-9"]], "module spec": [[436, "index-8"]], "path based finder": [[436, "index-16"]], "path hooks": [[436, "index-9"]], "portion": [[436, "index-5"]], "regular": [[436, "index-4"]], "sys.meta_path": [[436, "index-10"]], "sys.modules": [[436, "index-7"]], "sys.path": [[436, "index-17"]], "sys.path_hooks": [[436, "index-17"]], "sys.path_importer_cache": [[436, "index-17"]], "grammar": [[438, "index-0"]], "lexical definitions": [[438, "index-1"]], "notation": [[438, "index-0"]], "syntax": [[438, "index-0"]], "\" (double quote)": [[439, "index-17"]], "\"\"\"": [[439, "index-18"]], "' (single quote)": [[439, "index-17"]], "'''": [[439, "index-18"]], "0b": [[439, "index-28"]], "0o": [[439, "index-28"]], "0x": [[439, "index-28"]], "indent token": [[439, "index-9"]], "pep 3131": [[439, "index-11"], [439, "index-12"], [474, "index-5"]], "pep 414": [[439, "index-21"], [478, "index-14"]], "standard c": [[439, "index-23"]], "unicode consortium": [[439, "index-18"]], "_, identifiers": [[439, "index-15"]], "__, identifiers": [[439, "index-15"]], "b\"": [[439, "index-19"]], "b'": [[439, "index-19"]], "backslash character": [[439, "index-6"]], "binary literal": [[439, "index-27"]], "blank line": [[439, "index-7"]], "bytes literal": [[439, "index-17"], [439, "index-19"]], "complex literal": [[439, "index-27"]], "constant": [[439, "index-16"]], "decimal literal": [[439, "index-27"]], "delimiters": [[439, "index-32"]], "e": [[439, "index-29"]], "encoding declarations (source file)": [[439, "index-5"]], "f\"": [[439, "index-22"]], "f'": [[439, "index-22"]], "f-string": [[439, "index-25"]], "floating point literal": [[439, "index-27"]], "for help in debugging using string literals": [[439, "index-25"]], "formatted literal": [[439, "index-25"]], "formatted string literal": [[439, "index-22"], [439, "index-25"]], "fstring": [[439, "index-25"]], "grouping": [[439, "index-8"]], "hash character": [[439, "index-4"]], "hexadecimal literal": [[439, "index-27"]], "imaginary literal": [[439, "index-27"]], "in formatted string literal": [[439, "index-25"]], "in numeric literal": [[439, "index-28"], [439, "index-29"], [439, "index-30"]], "indentation": [[439, "index-8"]], "integer literal": [[439, "index-27"], [439, "index-28"]], "interpolated literal": [[439, "index-25"]], "interpolated string literal": [[439, "index-25"]], "j": [[439, "index-30"]], "leading whitespace": [[439, "index-8"]], "lexical analysis": [[439, "index-0"]], "line continuation": [[439, "index-6"]], "line joining": [[439, "index-3"], [439, "index-6"]], "line structure": [[439, "index-2"]], "logical line": [[439, "index-3"]], "numeric literal": [[439, "index-27"]], "octal literal": [[439, "index-27"]], "operators": [[439, "index-31"]], "parser": [[439, "index-0"]], "physical line": [[439, "index-23"], [439, "index-3"], [439, "index-6"]], "r\"": [[439, "index-20"]], "r'": [[439, "index-20"]], "raw string": [[439, "index-18"]], "raw string literal": [[439, "index-20"]], "reserved word": [[439, "index-13"]], "soft keyword": [[439, "index-14"]], "source character set": [[439, "index-5"]], "source encoding declaration": [[439, "index-5"]], "statement grouping": [[439, "index-8"]], "string literal": [[439, "index-17"], [439, "index-18"]], "tab": [[439, "index-8"]], "triple-quoted string": [[439, "index-18"]], "u\"": [[439, "index-17"]], "u'": [[439, "index-17"]], "unrecognized escape sequence": [[439, "index-24"]], "%=": [[440, "index-14"]], "&=": [[440, "index-14"]], "**=": [[440, "index-14"]], "*=": [[440, "index-14"]], "+=": [[440, "index-14"]], "-=": [[440, "index-14"]], "//=": [[440, "index-14"]], "/=": [[440, "index-14"]], "<<=": [[440, "index-14"]], ">>=": [[440, "index-14"]], "pep 236": [[440, "index-42"], [467, "index-0"], [467, "index-1"], [467, "index-3"]], "pep 3104": [[440, "index-46"], [474, "index-8"]], "pep 3132": [[440, "index-13"], [474, "index-9"]], "^=": [[440, "index-14"]], "__all__ (optional module attribute)": [[440, "index-38"]], "__cause__ (exception attribute)": [[440, "index-29"]], "__context__ (exception attribute)": [[440, "index-29"]], "__debug__": [[440, "index-19"]], "__traceback__ (exception attribute)": [[440, "index-27"]], "annotated": [[440, "index-15"]], "annotated variable": [[440, "index-15"]], "assertions": [[440, "index-18"]], "assignment statement": [[440, "index-4"]], "assignment, annotated": [[440, "index-15"]], "assignment, augmented": [[440, "index-14"]], "augmented": [[440, "index-14"]], "augmented assignment": [[440, "index-14"]], "deletion": [[440, "index-21"], [440, "index-23"]], "future": [[440, "index-40"]], "future statement": [[440, "index-40"]], "identifier list": [[440, "index-43"], [440, "index-45"]], "importing": [[440, "index-34"]], "in assignment target list": [[440, "index-6"]], "in target list": [[440, "index-6"]], "loop control": [[440, "index-31"]], "nonlocal": [[440, "index-45"]], "null": [[440, "index-20"]], "output": [[440, "index-3"]], "pass": [[440, "index-20"]], "procedure": [[440, "index-3"]], "raising": [[440, "index-27"]], "rebinding": [[440, "index-4"]], "simple": [[440, "index-0"]], "standard": [[440, "index-3"]], "unbinding": [[440, "index-22"]], "writing": [[440, "index-3"]], "|=": [[440, "index-14"]], "windows": [[441, "index-4"]], "command line": [[441, "index-4"]], "input": [[441, "index-5"]], "interactive mode": [[441, "index-3"]], "interpreter": [[441, "index-0"]], "program": [[441, "index-1"]], "standard input": [[441, "index-4"]], "coding": [[445, "index-9"]], "docstrings": [[445, "index-2"], [445, "index-5"]], "documentation strings": [[445, "index-2"], [445, "index-5"]], "strings, documentation": [[445, "index-2"], [445, "index-5"]], "style": [[445, "index-9"]], "--check-hash-based-pycs": [[459, "cmdoption-check-hash-based-pycs"]], "-?": [[459, "cmdoption-0"]], "-oo": [[459, "cmdoption-OO"]], "-w": [[459, "cmdoption-W"]], "pythonthreaddebug": [[459, "envvar-PYTHONTHREADDEBUG"], [460, "index-4"], [476, "index-34"], [485, "index-11"]], "\u547d\u4ee4\u5217\u9078\u9805": [[459, "cmdoption-0"], [459, "cmdoption-1"], [459, "cmdoption-B"], [459, "cmdoption-E"], [459, "cmdoption-I"], [459, "cmdoption-J"], [459, "cmdoption-O"], [459, "cmdoption-OO"], [459, "cmdoption-R"], [459, "cmdoption-S"], [459, "cmdoption-V"], [459, "cmdoption-W"], [459, "cmdoption-X"], [459, "cmdoption-b"], [459, "cmdoption-c"], [459, "cmdoption-check-hash-based-pycs"], [459, "cmdoption-d"], [459, "cmdoption-h"], [459, "cmdoption-help"], [459, "cmdoption-i"], [459, "cmdoption-m"], [459, "cmdoption-q"], [459, "cmdoption-s"], [459, "cmdoption-u"], [459, "cmdoption-version"], [459, "cmdoption-x"], [460, "cmdoption-0"], [460, "cmdoption-1"], [460, "cmdoption-2"], [460, "cmdoption-disable-ipv6"], [460, "cmdoption-disable-test-modules"], [460, "cmdoption-enable-big-digits"], [460, "cmdoption-enable-framework"], [460, "cmdoption-enable-loadable-sqlite-extensions"], [460, "cmdoption-enable-optimizations"], [460, "cmdoption-enable-profiling"], [460, "cmdoption-enable-shared"], [460, "cmdoption-enable-universalsdk"], [460, "cmdoption-with-address-sanitizer"], [460, "cmdoption-with-assertions"], [460, "cmdoption-with-builtin-hashlib-hashes"], [460, "cmdoption-with-computed-gotos"], [460, "cmdoption-with-cxx-main"], [460, "cmdoption-with-dbmliborder"], [460, "cmdoption-with-dtrace"], [460, "cmdoption-with-ensurepip"], [460, "cmdoption-with-framework-name"], [460, "cmdoption-with-hash-algorithm"], [460, "cmdoption-with-libc"], [460, "cmdoption-with-libm"], [460, "cmdoption-with-libs"], [460, "cmdoption-with-lto"], [460, "cmdoption-with-memory-sanitizer"], [460, "cmdoption-with-openssl"], [460, "cmdoption-with-openssl-rpath"], [460, "cmdoption-with-platlibdir"], [460, "cmdoption-with-pydebug"], [460, "cmdoption-with-readline"], [460, "cmdoption-with-ssl-default-suites"], [460, "cmdoption-with-suffix"], [460, "cmdoption-with-system-expat"], [460, "cmdoption-with-system-ffi"], [460, "cmdoption-with-system-libmpdec"], [460, "cmdoption-with-tcltk-includes"], [460, "cmdoption-with-tcltk-libs"], [460, "cmdoption-with-trace-refs"], [460, "cmdoption-with-tzpath"], [460, "cmdoption-with-undefined-behavior-sanitizer"], [460, "cmdoption-with-universal-archs"], [460, "cmdoption-with-valgrind"], [460, "cmdoption-with-wheel-pkg-dir"], [460, "cmdoption-without-c-locale-coercion"], [460, "cmdoption-without-decimal-contextvar"], [460, "cmdoption-without-doc-strings"], [460, "cmdoption-without-pymalloc"], [460, "cmdoption-without-readline"], [460, "cmdoption-without-static-libpython"]], "--disable-ipv6": [[460, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[460, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[460, "cmdoption-enable-big-digits"]], "--enable-framework": [[460, "cmdoption-2"], [460, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[460, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[460, "cmdoption-enable-optimizations"]], "--enable-profiling": [[460, "cmdoption-enable-profiling"]], "--enable-shared": [[460, "cmdoption-enable-shared"]], "--enable-universalsdk": [[460, "cmdoption-1"], [460, "cmdoption-enable-universalsdk"]], "--with-address-sanitizer": [[460, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[460, "cmdoption-with-assertions"]], "--with-builtin-hashlib-hashes": [[460, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[460, "cmdoption-with-computed-gotos"]], "--with-cxx-main": [[460, "cmdoption-0"], [460, "cmdoption-with-cxx-main"]], "--with-dbmliborder": [[460, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[460, "cmdoption-with-dtrace"]], "--with-ensurepip": [[460, "cmdoption-with-ensurepip"]], "--with-framework-name": [[460, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[460, "cmdoption-with-hash-algorithm"]], "--with-libc": [[460, "cmdoption-with-libc"]], "--with-libm": [[460, "cmdoption-with-libm"]], "--with-libs": [[460, "cmdoption-with-libs"]], "--with-lto": [[460, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[460, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[460, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[460, "cmdoption-with-openssl-rpath"]], "--with-platlibdir": [[460, "cmdoption-with-platlibdir"]], "--with-pydebug": [[460, "cmdoption-with-pydebug"]], "--with-readline": [[460, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[460, "cmdoption-with-ssl-default-suites"]], "--with-suffix": [[460, "cmdoption-with-suffix"]], "--with-system-expat": [[460, "cmdoption-with-system-expat"]], "--with-system-ffi": [[460, "cmdoption-with-system-ffi"]], "--with-system-libmpdec": [[460, "cmdoption-with-system-libmpdec"]], "--with-tcltk-includes": [[460, "cmdoption-with-tcltk-includes"]], "--with-tcltk-libs": [[460, "cmdoption-with-tcltk-libs"]], "--with-trace-refs": [[460, "cmdoption-with-trace-refs"]], "--with-tzpath": [[460, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[460, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[460, "cmdoption-with-universal-archs"]], "--with-valgrind": [[460, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[460, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[460, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[460, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[460, "cmdoption-without-doc-strings"]], "--without-pymalloc": [[460, "cmdoption-without-pymalloc"]], "--without-readline": [[460, "cmdoption-without-readline"]], "--without-static-libpython": [[460, "cmdoption-without-static-libpython"]], "basecflags": [[460, "envvar-BASECFLAGS"]], "basecppflags": [[460, "envvar-BASECPPFLAGS"]], "bldshared": [[460, "envvar-BLDSHARED"]], "cc": [[460, "envvar-CC"], [469, "index-24"]], "ccshared": [[460, "envvar-CCSHARED"]], "cflagsforshared": [[460, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[460, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[460, "envvar-CFLAGS_NODIST"], [460, "index-10"], [460, "index-15"], [460, "index-20"]], "configure_cflags": [[460, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[460, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[460, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[460, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[460, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "cppflags": [[460, "envvar-CPPFLAGS"], [460, "index-25"], [460, "index-7"], [460, "index-8"], [469, "index-28"]], "cxx": [[460, "envvar-CXX"]], "extra_cflags": [[460, "envvar-EXTRA_CFLAGS"]], "ldflags": [[460, "envvar-LDFLAGS"], [460, "index-16"], [460, "index-18"], [460, "index-21"], [460, "index-22"], [460, "index-23"], [460, "index-26"], [460, "index-9"], [469, "index-27"]], "ldflags_nodist": [[460, "envvar-LDFLAGS_NODIST"], [460, "index-19"], [460, "index-24"]], "ldshared": [[460, "envvar-LDSHARED"]], "libs": [[460, "envvar-LIBS"]], "linkcc": [[460, "envvar-LINKCC"]], "maincc": [[460, "envvar-MAINCC"]], "opt": [[460, "envvar-OPT"], [460, "index-6"]], "profile_task": [[460, "envvar-PROFILE_TASK"], [460, "index-2"]], "purify": [[460, "envvar-PURIFY"]], "py_builtin_module_cflags": [[460, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[460, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[460, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[460, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[460, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[460, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[460, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[460, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[460, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[465, "index-6"]], "pathext": [[465, "index-4"], [479, "index-51"], [485, "index-55"]], "pep 11": [[465, "index-0"], [465, "index-29"], [474, "index-19"], [480, "index-50"], [482, "index-5"], [485, "index-170"]], "py_python": [[465, "index-22"]], "pep 100": [[466, "index-3"]], "pep 201": [[466, "index-2"]], "pep 207": [[467, "index-4"], [467, "index-5"]], "pep 208": [[467, "index-13"]], "pep 217": [[467, "index-12"]], "pep 229": [[467, "index-8"]], "pep 230": [[467, "index-7"]], "pep 232": [[467, "index-10"]], "pep 241": [[467, "index-14"], [467, "index-15"], [467, "index-16"]], "pep 243": [[467, "index-17"]], "pep 234": [[468, "index-7"]], "pep 253": [[468, "index-0"], [468, "index-1"], [468, "index-3"], [468, "index-5"], [468, "index-6"]], "pep 261": [[468, "index-14"], [468, "index-15"]], "pep 264": [[468, "index-22"]], "rfc 2104": [[468, "index-17"]], "rfc 2487": [[468, "index-18"]], "cpp": [[469, "index-26"]], "pep 218": [[469, "index-0"], [470, "index-0"], [470, "index-13"]], "pep 277": [[469, "index-7"]], "pep 279": [[469, "index-10"]], "pep 285": [[469, "index-13"], [469, "index-14"]], "pep 293": [[469, "index-15"]], "what's new": [[469, "index-8"], [470, "index-7"], [471, "index-20"], [472, "index-13"]], "pep 322": [[470, "index-14"], [470, "index-6"]], "pep 327": [[470, "index-9"]], "pep 331": [[470, "index-11"]], "pep 288": [[471, "index-12"]], "pep 309": [[471, "index-3"]], "pep 325": [[471, "index-13"]], "pep 333": [[471, "index-26"], [471, "index-27"]], "pep 339": [[471, "index-30"]], "pep 341": [[471, "index-8"]], "pep 347": [[471, "index-28"]], "pep 352": [[471, "index-15"], [472, "index-25"], [474, "index-25"]], "pep 356": [[471, "index-0"]], "pep 357": [[471, "index-18"]], "appdata": [[472, "index-5"]], "pep 3000": [[472, "index-1"]], "pep 3100": [[472, "index-2"]], "pep 3110": [[472, "index-11"], [474, "index-13"], [474, "index-27"]], "pep 3127": [[472, "index-17"]], "pep 361": [[472, "index-0"]], "pep 371": [[472, "index-8"]], "rfc 2033": [[472, "index-22"]], "rfc 3207": [[472, "index-23"]], "ldcxxshared": [[473, "index-12"]], "pep 3106": [[473, "index-6"]], "pep 3137": [[473, "index-7"]], "pep 372": [[473, "index-2"], [475, "index-0"]], "pep 373": [[473, "index-0"]], "pep 389": [[473, "index-4"], [477, "index-2"]], "pep 391": [[473, "index-5"], [477, "index-3"]], "pep 466": [[473, "index-17"], [473, "index-18"], [473, "index-19"], [473, "index-20"]], "pep 476": [[473, "index-25"]], "pep 477": [[473, "index-21"]], "pep 493": [[473, "index-26"]], "pythonshowalloccount": [[473, "index-15"]], "pythonshowrefcount": [[473, "index-14"]], "user_base": [[473, "index-9"]], "pep 274": [[474, "index-10"]], "pep 3102": [[474, "index-7"]], "pep 3108": [[474, "index-17"], [474, "index-20"], [474, "index-22"]], "pep 3109": [[474, "index-11"], [474, "index-26"]], "pep 3111": [[474, "index-32"]], "pep 3113": [[474, "index-15"]], "pep 3114": [[474, "index-30"]], "pep 3123": [[474, "index-35"]], "pep 3138": [[474, "index-3"]], "pep 4": [[474, "index-18"]], "pep 384": [[476, "index-39"], [477, "index-1"], [485, "index-26"]], "pep 618": [[476, "index-25"], [476, "index-3"], [485, "index-69"]], "pep 624": [[476, "index-11"]], "pep 632": [[476, "index-27"], [476, "index-9"]], "pep 635": [[476, "index-1"], [476, "index-15"]], "pep 652": [[476, "index-36"], [485, "index-21"]], "pep 385": [[477, "index-14"]], "pep 392": [[477, "index-0"]], "pep 3144": [[478, "index-25"]], "pep 398": [[478, "index-0"]], "pep 409": [[478, "index-13"]], "pep 418": [[478, "index-28"]], "yield from (in what's new)": [[478, "index-11"]], "pep 247": [[479, "index-37"]], "pep 3156": [[479, "index-25"], [479, "index-26"], [479, "index-31"], [479, "index-4"], [479, "index-8"]], "pep 424": [[479, "index-24"], [479, "index-38"]], "pep 429": [[479, "index-0"]], "pep 435": [[479, "index-28"], [479, "index-29"], [479, "index-6"]], "pep 436": [[479, "index-18"], [479, "index-48"], [479, "index-49"]], "pep 445": [[479, "index-17"], [479, "index-43"], [479, "index-44"], [479, "index-52"]], "pep 446": [[479, "index-14"], [479, "index-2"], [479, "index-21"], [479, "index-22"]], "pep 450": [[479, "index-32"], [479, "index-33"], [479, "index-9"]], "pep 454": [[479, "index-10"], [479, "index-34"], [479, "index-35"]], "pep 456": [[479, "index-13"], [479, "index-47"]], "pep 441": [[480, "index-29"], [480, "index-30"]], "pep 465": [[480, "index-3"], [480, "index-4"], [480, "index-48"], [485, "index-222"]], "pep 471": [[480, "index-13"], [480, "index-14"], [485, "index-218"]], "pep 478": [[480, "index-0"]], "pep 486": [[480, "index-21"], [480, "index-23"], [485, "index-219"]], "pep 487": [[481, "index-13"], [481, "index-14"], [481, "index-15"], [481, "index-37"], [485, "index-169"], [485, "index-179"], [485, "index-188"]], "pep 494": [[481, "index-0"]], "pep 511": [[481, "index-36"]], "pep 520": [[481, "index-23"]], "pep 628": [[481, "index-29"], [481, "index-30"], [485, "index-190"]], "pep 545": [[482, "index-24"], [482, "index-40"]], "pep 553": [[482, "index-13"], [485, "index-163"]], "pep 564": [[482, "index-17"], [482, "index-18"], [482, "index-32"], [485, "index-161"]], "pep 596": [[484, "index-0"]], "pep 616": [[484, "index-12"], [484, "index-4"], [485, "index-89"]], "enablecontrolflowguard": [[485, "index-13"]], "pep 514": [[485, "index-192"]], "pip_user": [[485, "index-126"]], "pythonregrtest_unicode_guard": [[485, "index-6"]]}})